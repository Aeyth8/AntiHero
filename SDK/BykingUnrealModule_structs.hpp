#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BykingUnrealModule

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum BykingUnrealModule.EPlatform
// NumValues: 0x0007
enum class EPlatform : uint8
{
	PlayStation                              = 0,
	Xbox                                     = 1,
	Windows                                  = 3,
	Mobile                                   = 4,
	Switch                                   = 5,
	None                                     = 6,
	EPlatform_MAX                            = 7,
};

// Enum BykingUnrealModule.EActionKind
// NumValues: 0x0009
enum class EActionKind : uint8
{
	OFF                                      = 0,
	DEFAULT                                  = 1,
	BASE                                     = 2,
	WHOLE_ATTACK                             = 3,
	NAGARA_ATTACK                            = 4,
	WHOLE_DAMAGE                             = 5,
	NAGARA_DAMAGE                            = 6,
	EXTRA                                    = 7,
	EActionKind_MAX                          = 8,
};

// Enum BykingUnrealModule.EActionLayer
// NumValues: 0x0007
enum class EActionLayer : uint8
{
	NONE                                     = 0,
	BASE                                     = 1,
	ATTACK                                   = 2,
	DAMAGE                                   = 3,
	EXTRA                                    = 4,
	NUM                                      = 5,
	EActionLayer_MAX                         = 6,
};

// Enum BykingUnrealModule.EAnimNotifyType
// NumValues: 0x0007
enum class EAnimNotifyType : uint8
{
	NONE                                     = 0,
	DEFAULT                                  = 1,
	ACTION                                   = 2,
	EFFECT                                   = 4,
	SOUND                                    = 8,
	ALL                                      = 255,
	EAnimNotifyType_MAX                      = 256,
};

// Enum BykingUnrealModule.EMeshOutlineType
// NumValues: 0x0005
enum class EMeshOutlineType : uint8
{
	Default                                  = 0,
	Friend                                   = 1,
	Enemy                                    = 2,
	PlusUltra                                = 3,
	EMeshOutlineType_MAX                     = 4,
};

// ScriptStruct BykingUnrealModule.HashID
// 0x0004 (0x0004 - 0x0000)
struct FHashID final
{
public:
	uint32                                        _value;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FHashID) == 0x000004, "Wrong alignment on FHashID");
static_assert(sizeof(FHashID) == 0x000004, "Wrong size on FHashID");
static_assert(offsetof(FHashID, _value) == 0x000000, "Member 'FHashID::_value' has a wrong offset!");

// ScriptStruct BykingUnrealModule.SimpleKeyScalarData
// 0x0010 (0x0010 - 0x0000)
struct FSimpleKeyScalarData final
{
public:
	EEasingFunc                                   _easingType;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _nextKey;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _span;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _value;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSimpleKeyScalarData) == 0x000004, "Wrong alignment on FSimpleKeyScalarData");
static_assert(sizeof(FSimpleKeyScalarData) == 0x000010, "Wrong size on FSimpleKeyScalarData");
static_assert(offsetof(FSimpleKeyScalarData, _easingType) == 0x000000, "Member 'FSimpleKeyScalarData::_easingType' has a wrong offset!");
static_assert(offsetof(FSimpleKeyScalarData, _nextKey) == 0x000004, "Member 'FSimpleKeyScalarData::_nextKey' has a wrong offset!");
static_assert(offsetof(FSimpleKeyScalarData, _span) == 0x000008, "Member 'FSimpleKeyScalarData::_span' has a wrong offset!");
static_assert(offsetof(FSimpleKeyScalarData, _value) == 0x00000C, "Member 'FSimpleKeyScalarData::_value' has a wrong offset!");

// ScriptStruct BykingUnrealModule.OnGamePadTextInputDismissed
// 0x0010 (0x0010 - 0x0000)
struct FOnGamePadTextInputDismissed final
{
public:
	TDelegate<void(bool bFlag)>                   _delegate;                                         // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOnGamePadTextInputDismissed) == 0x000004, "Wrong alignment on FOnGamePadTextInputDismissed");
static_assert(sizeof(FOnGamePadTextInputDismissed) == 0x000010, "Wrong size on FOnGamePadTextInputDismissed");
static_assert(offsetof(FOnGamePadTextInputDismissed, _delegate) == 0x000000, "Member 'FOnGamePadTextInputDismissed::_delegate' has a wrong offset!");

// ScriptStruct BykingUnrealModule.ActionClassData
// 0x0018 (0x0018 - 0x0000)
struct FActionClassData final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UActionBase*                            _actionBasePtr;                                    // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionClassData) == 0x000008, "Wrong alignment on FActionClassData");
static_assert(sizeof(FActionClassData) == 0x000018, "Wrong size on FActionClassData");
static_assert(offsetof(FActionClassData, _actionBasePtr) == 0x000010, "Member 'FActionClassData::_actionBasePtr' has a wrong offset!");

// ScriptStruct BykingUnrealModule.CharacterTickIgnorePause
// 0x0008 (0x0030 - 0x0028)
struct FCharacterTickIgnorePause final : public FTickFunction
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterTickIgnorePause) == 0x000008, "Wrong alignment on FCharacterTickIgnorePause");
static_assert(sizeof(FCharacterTickIgnorePause) == 0x000030, "Wrong size on FCharacterTickIgnorePause");

// ScriptStruct BykingUnrealModule.ActionReserveData
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FActionReserveData final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActionReserveData) == 0x000004, "Wrong alignment on FActionReserveData");
static_assert(sizeof(FActionReserveData) == 0x00000C, "Wrong size on FActionReserveData");

// ScriptStruct BykingUnrealModule.ActionReservePackData
// 0x0010 (0x0010 - 0x0000)
struct FActionReservePackData final
{
public:
	TArray<struct FActionReserveData>             _actionReserveList;                                // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionReservePackData) == 0x000008, "Wrong alignment on FActionReservePackData");
static_assert(sizeof(FActionReservePackData) == 0x000010, "Wrong size on FActionReservePackData");
static_assert(offsetof(FActionReservePackData, _actionReserveList) == 0x000000, "Member 'FActionReservePackData::_actionReserveList' has a wrong offset!");

// ScriptStruct BykingUnrealModule.ActionLayerData
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FActionLayerData final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActionLayerData) == 0x000008, "Wrong alignment on FActionLayerData");
static_assert(sizeof(FActionLayerData) == 0x000030, "Wrong size on FActionLayerData");

// ScriptStruct BykingUnrealModule.Circle2D
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FCircle2D final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCircle2D) == 0x000004, "Wrong alignment on FCircle2D");
static_assert(sizeof(FCircle2D) == 0x00000C, "Wrong size on FCircle2D");

// ScriptStruct BykingUnrealModule.BaseTraceParam
// 0x00A0 (0x00A0 - 0x0000)
struct alignas(0x08) FBaseTraceParam
{
public:
	uint8                                         Pad_0[0xA0];                                       // 0x0000(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBaseTraceParam) == 0x000008, "Wrong alignment on FBaseTraceParam");
static_assert(sizeof(FBaseTraceParam) == 0x0000A0, "Wrong size on FBaseTraceParam");

// ScriptStruct BykingUnrealModule.LineTraceParam
// 0x0098 (0x0138 - 0x00A0)
struct FLineTraceParam : public FBaseTraceParam
{
public:
	uint8                                         Pad_A0[0x98];                                      // 0x00A0(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLineTraceParam) == 0x000008, "Wrong alignment on FLineTraceParam");
static_assert(sizeof(FLineTraceParam) == 0x000138, "Wrong size on FLineTraceParam");

// ScriptStruct BykingUnrealModule.SphereTraceParam
// 0x0008 (0x0140 - 0x0138)
struct FSphereTraceParam : public FLineTraceParam
{
public:
	uint8                                         Pad_138[0x8];                                      // 0x0138(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSphereTraceParam) == 0x000008, "Wrong alignment on FSphereTraceParam");
static_assert(sizeof(FSphereTraceParam) == 0x000140, "Wrong size on FSphereTraceParam");

// ScriptStruct BykingUnrealModule.CustomSphereTraceParam
// 0x0010 (0x0150 - 0x0140)
struct FCustomSphereTraceParam final : public FSphereTraceParam
{
public:
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCustomSphereTraceParam) == 0x000008, "Wrong alignment on FCustomSphereTraceParam");
static_assert(sizeof(FCustomSphereTraceParam) == 0x000150, "Wrong size on FCustomSphereTraceParam");

// ScriptStruct BykingUnrealModule.CustomLineTraceParam
// 0x0010 (0x0148 - 0x0138)
struct FCustomLineTraceParam final : public FLineTraceParam
{
public:
	uint8                                         Pad_138[0x10];                                     // 0x0138(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCustomLineTraceParam) == 0x000008, "Wrong alignment on FCustomLineTraceParam");
static_assert(sizeof(FCustomLineTraceParam) == 0x000148, "Wrong size on FCustomLineTraceParam");

// ScriptStruct BykingUnrealModule.SimpleKeyVectorData
// 0x0018 (0x0018 - 0x0000)
struct FSimpleKeyVectorData final
{
public:
	EEasingFunc                                   _easingType;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _nextKey;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _span;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _value;                                            // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSimpleKeyVectorData) == 0x000004, "Wrong alignment on FSimpleKeyVectorData");
static_assert(sizeof(FSimpleKeyVectorData) == 0x000018, "Wrong size on FSimpleKeyVectorData");
static_assert(offsetof(FSimpleKeyVectorData, _easingType) == 0x000000, "Member 'FSimpleKeyVectorData::_easingType' has a wrong offset!");
static_assert(offsetof(FSimpleKeyVectorData, _nextKey) == 0x000004, "Member 'FSimpleKeyVectorData::_nextKey' has a wrong offset!");
static_assert(offsetof(FSimpleKeyVectorData, _span) == 0x000008, "Member 'FSimpleKeyVectorData::_span' has a wrong offset!");
static_assert(offsetof(FSimpleKeyVectorData, _value) == 0x00000C, "Member 'FSimpleKeyVectorData::_value' has a wrong offset!");

// ScriptStruct BykingUnrealModule.TransitionAtoB
// 0x00C0 (0x00C0 - 0x0000)
struct alignas(0x10) FTransitionAtoB final
{
public:
	uint8                                         Pad_0[0xC0];                                       // 0x0000(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTransitionAtoB) == 0x000010, "Wrong alignment on FTransitionAtoB");
static_assert(sizeof(FTransitionAtoB) == 0x0000C0, "Wrong size on FTransitionAtoB");

}

