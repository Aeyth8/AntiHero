#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BackendSubsystem

#include "Basic.hpp"

#include "MasterDataModule_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum BackendSubsystem.EAutoStartBattleState
// NumValues: 0x0006
enum class EAutoStartBattleState : uint8
{
	Invalid                                  = 0,
	SquadMemberNotComplete                   = 1,
	WaitForSquadMemberJoin                   = 2,
	WaitForAllPlayerReady                    = 3,
	MoveToVisualLobby                        = 4,
	Max                                      = 5,
};

// Enum BackendSubsystem.EGuildJoinRule
// NumValues: 0x0004
enum class EGuildJoinRule : uint8
{
	Invalid                                  = 0,
	None                                     = 1,
	ApprovalRequired                         = 2,
	Max                                      = 3,
};

// Enum BackendSubsystem.EGuildPolicy
// NumValues: 0x0009
enum class EGuildPolicy : uint8
{
	Invalid                                  = 0,
	None                                     = 1,
	EnjoyPlayers                             = 2,
	SeriousPlayers                           = 3,
	BeginnerWelcome                          = 4,
	RewardCollectors                         = 5,
	Team12Battle                             = 6,
	EventPlayers                             = 7,
	Max                                      = 8,
};

// Enum BackendSubsystem.EPresetType
// NumValues: 0x0006
enum class EPresetType : uint8
{
	Invalid                                  = 0,
	Costume                                  = 1,
	Voice                                    = 2,
	Appeal                                   = 3,
	Emblem                                   = 4,
	Max                                      = 5,
};

// Enum BackendSubsystem.EGuildFacility
// NumValues: 0x0005
enum class EGuildFacility : uint8
{
	Invalid                                  = 0,
	Rescue                                   = 1,
	Training                                 = 2,
	Office                                   = 3,
	Max                                      = 4,
};

// Enum BackendSubsystem.EBnIdStatus
// NumValues: 0x0006
enum class EBnIdStatus : uint8
{
	Invalid                                  = 0,
	ELinkable                                = 1,
	ELinked                                  = 2,
	EMaintenance                             = 3,
	EOutOfService                            = 4,
	Max                                      = 5,
};

// Enum BackendSubsystem.EBackendSubsystemPhase
// NumValues: 0x0033
enum class EBackendSubsystemPhase : uint8
{
	Invalid                                  = 0,
	Pause                                    = 1,
	BootUp                                   = 2,
	CosmosInitializing                       = 3,
	CosmosInitialized                        = 4,
	Downloading                              = 5,
	Downloaded                               = 6,
	LoadingMasterDataCache                   = 7,
	LoadedMasterDataCache                    = 8,
	CosmosLoggingIn                          = 9,
	CosmosLoggedIn                           = 10,
	LoadingGallery                           = 11,
	LoadedGallery                            = 12,
	StartLoadCatalog                         = 13,
	LoadingCatalog                           = 14,
	LoadedCatalog                            = 15,
	LoadTrackingNumber                       = 16,
	LoadingTrackingNumber                    = 17,
	LoadedTrackingNumber                     = 18,
	StartLoadPurchaseStatus                  = 19,
	LoadingPurchaseStatus                    = 20,
	LoadedPurchaseStatus                     = 21,
	StartConfirmPurchase                     = 22,
	ConfirmingPurchase                       = 23,
	ConfirmedPurchase                        = 24,
	StartLoadPurchasedItem                   = 25,
	LoadingPurchasedItem                     = 26,
	LoadedPurchasedItem                      = 27,
	CompleteInitialize                       = 28,
	WaitForLogin                             = 29,
	LoggingIn                                = 30,
	StartLoadingServerList                   = 31,
	LoadedServerList                         = 32,
	LoggedIn                                 = 33,
	StartLoadCountryCode                     = 34,
	LoadingCountryCode                       = 35,
	LoadedCountryCode                        = 36,
	CosmosStartUp                            = 37,
	CosmosStartingUp                         = 38,
	CosmosStartedUp                          = 39,
	MatchingConnecting                       = 40,
	MatchingConnected                        = 41,
	LoadingMainMenu                          = 42,
	LoadedMainMenu                           = 43,
	LoadingProfile                           = 44,
	LoadedProfile                            = 45,
	LoadingCharacterSelect                   = 46,
	LoadedCharacterSelect                    = 47,
	Playing                                  = 48,
	Error                                    = 49,
	Max                                      = 50,
};

// Enum BackendSubsystem.ETutorialStepNo
// NumValues: 0x0012
enum class ETutorialStepNo : uint8
{
	Invalid                                  = 0,
	None                                     = 1,
	TutorialStage                            = 2,
	TestPlay                                 = 3,
	InitialSeasonPass                        = 4,
	SetPlayerName                            = 5,
	Mission                                  = 6,
	Rank5                                    = 7,
	OutGame                                  = 8,
	Open1                                    = 9,
	Open2                                    = 10,
	Open3                                    = 11,
	Open4                                    = 12,
	Open5                                    = 13,
	Open6                                    = 14,
	Open7                                    = 15,
	Finished                                 = 16,
	Max                                      = 17,
};

// Enum BackendSubsystem.EFriendListSortOrder
// NumValues: 0x0004
enum class EFriendListSortOrder : uint8
{
	Invalid                                  = 0,
	LastLoginAsc                             = 1,
	LastLoginDesc                            = 2,
	Max                                      = 3,
};

// Enum BackendSubsystem.EGuildMemberSort
// NumValues: 0x000E
enum class EGuildMemberSort : uint8
{
	Invalid                                  = 0,
	JoinDateTimeAsc                          = 1,
	JoinDateTimeDesc                         = 2,
	RankDesc                                 = 3,
	RankAsc                                  = 4,
	LastLoginAsc                             = 5,
	LastLoginDesc                            = 6,
	PointDesc                                = 7,
	PointAsc                                 = 8,
	ScoreDesc                                = 9,
	ScoreAsc                                 = 10,
	LikeDesc                                 = 11,
	LikeAsc                                  = 12,
	Max                                      = 13,
};

// Enum BackendSubsystem.ERankingType
// NumValues: 0x0009
enum class ERankingType : uint8
{
	Invalid                                  = 0,
	BillboardChart                           = 1,
	Mvp                                      = 2,
	GuildTop                                 = 3,
	GuildElite                               = 4,
	Event                                    = 5,
	EventIndividual                          = 6,
	EventGuild                               = 7,
	Max                                      = 8,
};

// Enum BackendSubsystem.EItemCategory
// NumValues: 0x000B
enum class EItemCategory : uint8
{
	Invalid                                  = 0,
	Character                                = 1,
	Currency                                 = 2,
	Emblem                                   = 3,
	CustomizeCostume                         = 4,
	CustomizeAppeal                          = 5,
	CustomizeVoice                           = 6,
	MyAdParts                                = 7,
	Pack                                     = 8,
	Variation                                = 9,
	Max                                      = 10,
};

// Enum BackendSubsystem.EVoiceChatMemberStatus
// NumValues: 0x0008
enum class EVoiceChatMemberStatus : uint8
{
	Invalid                                  = 0,
	EJoined                                  = 1,
	ELeft                                    = 2,
	ETalking                                 = 3,
	EVolume                                  = 4,
	EMuted                                   = 5,
	EUnmuted                                 = 6,
	Max                                      = 7,
};

// Enum BackendSubsystem.EVoiceChatSystemStatus
// NumValues: 0x0006
enum class EVoiceChatSystemStatus : uint8
{
	Invalid                                  = 0,
	EConnected                               = 1,
	EDisconnected                            = 2,
	ELoggedIn                                = 3,
	EJoined                                  = 4,
	Max                                      = 5,
};

// Enum BackendSubsystem.EGuildSearchMemberRange
// NumValues: 0x0007
enum class EGuildSearchMemberRange : uint8
{
	Invalid                                  = 0,
	None                                     = 1,
	Num01_05                                 = 2,
	Num06_10                                 = 3,
	Num11_20                                 = 4,
	OverNum21                                = 5,
	Max                                      = 6,
};

// Enum BackendSubsystem.EGuildSearchLevelRange
// NumValues: 0x0006
enum class EGuildSearchLevelRange : uint8
{
	Invalid                                  = 0,
	None                                     = 1,
	Lv01_10                                  = 2,
	Lv11_30                                  = 3,
	OverLv31                                 = 4,
	Max                                      = 5,
};

// Enum BackendSubsystem.EResultType
// NumValues: 0x0006
enum class EResultType : uint8
{
	Invalid                                  = 0,
	Damage                                   = 1,
	KO                                       = 2,
	Support                                  = 3,
	Citizen                                  = 4,
	Max                                      = 5,
};

// Enum BackendSubsystem.ELikeType
// NumValues: 0x0017
enum class ELikeType : uint8
{
	Invalid                                  = 0,
	Profile                                  = 1,
	InGame                                   = 2,
	LeaderBoardTopDamage                     = 3,
	LeaderBoardTopKo                         = 4,
	LeaderBoardTopSupport                    = 5,
	LeaderBoardTopAssist                     = 6,
	GuildChangeName                          = 7,
	GuildChangeProfile                       = 8,
	GuildOverEliteRanking                    = 9,
	GuildOverTopRanking                      = 10,
	GuildDonate                              = 11,
	GuildBuy                                 = 12,
	GuildNewMember                           = 13,
	GuildStreakWins                          = 14,
	GuildDonateRescue                        = 15,
	GuildDonateTraining                      = 16,
	GuildDonateOffice                        = 17,
	NpcRescue                                = 18,
	NpcRaid                                  = 19,
	NpcKotaRescue                            = 20,
	NpcKotaRaid                              = 21,
	Max                                      = 22,
};

// Enum BackendSubsystem.EKpiLevel
// NumValues: 0x0019
enum class EKpiLevel : uint8
{
	Title                                    = 0,
	Eula                                     = 1,
	MainMenu                                 = 2,
	TeamUp                                   = 3,
	SearchTeam                               = 4,
	BattleReady                              = 5,
	VisualLobby                              = 6,
	RankMatchTeamUp                          = 7,
	Tutorial                                 = 8,
	Watch                                    = 9,
	Result                                   = 10,
	Equipment                                = 11,
	MyAd                                     = 12,
	PickupPlayer                             = 13,
	Avatar                                   = 14,
	Shop                                     = 15,
	Gasha                                    = 16,
	SeasonPass                               = 17,
	Profile                                  = 18,
	Gallery                                  = 19,
	Ranking                                  = 20,
	Guild                                    = 21,
	Config                                   = 22,
	Mission                                  = 23,
	Max                                      = 24,
};

// Enum BackendSubsystem.EGuildActivity
// NumValues: 0x000D
enum class EGuildActivity : uint8
{
	Invalid                                  = 0,
	ChangeName                               = 1,
	ChangeProfile                            = 2,
	OverEliteRanking                         = 3,
	OverTopRanking                           = 4,
	RescueFacilityDonate                     = 5,
	TrainingFacilityDonate                   = 6,
	OfficeFacilityDonate                     = 7,
	GuildLevelUp                             = 8,
	UseBoost                                 = 9,
	NewMember                                = 10,
	StreakWins                               = 11,
	Max                                      = 12,
};

// Enum BackendSubsystem.EGuildPosition
// NumValues: 0x0005
enum class EGuildPosition : uint8
{
	Invalid                                  = 0,
	Member                                   = 1,
	Leader                                   = 2,
	SubLeader                                = 3,
	Max                                      = 4,
};

// Enum BackendSubsystem.ENetScore
// NumValues: 0x0009
enum class ENetScore : uint8
{
	Invalid                                  = 0,
	Level_1                                  = 1,
	Level_2                                  = 2,
	Level_3                                  = 3,
	Level_4                                  = 4,
	Level_5                                  = 5,
	Level_6                                  = 6,
	Level_7                                  = 7,
	Max                                      = 8,
};

// Enum BackendSubsystem.ERankingLeagueChange
// NumValues: 0x0006
enum class ERankingLeagueChange : uint8
{
	Invalid                                  = 0,
	None                                     = 1,
	Promotion                                = 2,
	Demotion                                 = 3,
	Keep                                     = 4,
	Max                                      = 5,
};

// Enum BackendSubsystem.EMissionAchievementStatus
// NumValues: 0x0005
enum class EMissionAchievementStatus : uint8
{
	Invalid                                  = 0,
	None                                     = 1,
	Finished                                 = 2,
	Received                                 = 3,
	Max                                      = 4,
};

// Enum BackendSubsystem.EItemListSortOrder
// NumValues: 0x0008
enum class EItemListSortOrder : uint8
{
	Invalid                                  = 0,
	ReceiveNew                               = 1,
	ReceiveOld                               = 2,
	ExpireClose                              = 3,
	ExpireFar                                = 4,
	NameAsc                                  = 5,
	NameDesc                                 = 6,
	Max                                      = 7,
};

// Enum BackendSubsystem.EFriendListTypeWithSort
// NumValues: 0x0016
enum class EFriendListTypeWithSort : uint8
{
	Invalid                                  = 0,
	FriendAsc                                = 1,
	FriendDesc                               = 2,
	ApplyingAsc                              = 3,
	ApplyingDesc                             = 4,
	AppliedAsc                               = 5,
	AppliedDesc                              = 6,
	GuildMemberAsc                           = 7,
	GuildMemberDesc                          = 8,
	LatelyPlayedAsc                          = 9,
	LatelyPlayedDesc                         = 10,
	PlatformFriendAsc                        = 11,
	PlatformFriendDesc                       = 12,
	SearchAsc                                = 13,
	SearchDesc                               = 14,
	GuildInviteFriendAsc                     = 15,
	GuildInviteFriendDesc                    = 16,
	GuildInviteLatelyPlayedAsc               = 17,
	GuildInviteLatelyPlayedDesc              = 18,
	GuildInvitePlatformFriendAsc             = 19,
	GuildInvitePlatformFriendDesc            = 20,
	Max                                      = 21,
};

// Enum BackendSubsystem.EFriendListType
// NumValues: 0x000D
enum class EFriendListType : uint8
{
	Invalid                                  = 0,
	Friend                                   = 1,
	Applying                                 = 2,
	Applied                                  = 3,
	GuildMember                              = 4,
	LatelyPlayed                             = 5,
	PlatformFriend                           = 6,
	Search                                   = 7,
	All                                      = 8,
	GuildInviteFriend                        = 9,
	GuildInviteLatelyPlayed                  = 10,
	GuildInvitePlatformFriend                = 11,
	Max                                      = 12,
};

// Enum BackendSubsystem.EFriendStatus
// NumValues: 0x0008
enum class EFriendStatus : uint8
{
	Invalid                                  = 0,
	None                                     = 1,
	Applying                                 = 2,
	Applied                                  = 3,
	Friend                                   = 4,
	All                                      = 5,
	NotMember                                = 6,
	Max                                      = 7,
};

// Enum BackendSubsystem.EMyAdDeliveryStatus
// NumValues: 0x0004
enum class EMyAdDeliveryStatus : uint8
{
	Invalid                                  = 0,
	NoDelivery                               = 1,
	Delivered                                = 2,
	Max                                      = 3,
};

// Enum BackendSubsystem.EBuyCustomizeStatus
// NumValues: 0x0007
enum class EBuyCustomizeStatus : uint8
{
	Invalid                                  = 0,
	Available                                = 1,
	Possessed                                = 2,
	NotForSale                               = 3,
	ReqNormalColor                           = 4,
	NotEnoughMoney                           = 5,
	Max                                      = 6,
};

// Enum BackendSubsystem.ETutorialOpenFeature
// NumValues: 0x0009
enum class ETutorialOpenFeature : uint8
{
	Invalid                                  = 0,
	Customize                                = 1,
	Shop                                     = 2,
	Gasha                                    = 3,
	Friend                                   = 4,
	SquadMatch                               = 5,
	Squad                                    = 6,
	Chat                                     = 7,
	Max                                      = 8,
};

// Enum BackendSubsystem.EInviteType
// NumValues: 0x0005
enum class EInviteType : uint8
{
	Invalid                                  = 0,
	Squad                                    = 1,
	Guild                                    = 2,
	Friend                                   = 3,
	Max                                      = 4,
};

// Enum BackendSubsystem.ENoticeReceiveMode
// NumValues: 0x0006
enum class ENoticeReceiveMode : uint8
{
	Invalid                                  = 0,
	ReceiveSingle                            = 1,
	ReceiveAll                               = 2,
	DeleteRead                               = 3,
	DeleteSingle                             = 4,
	Max                                      = 5,
};

// Enum BackendSubsystem.ENoticeCategory
// NumValues: 0x0005
enum class ENoticeCategory : uint8
{
	Invalid                                  = 0,
	None                                     = 1,
	Information                              = 2,
	Invitation                               = 3,
	Max                                      = 4,
};

// Enum BackendSubsystem.ETitleCodeRegion
// NumValues: 0x0005
enum class ETitleCodeRegion : uint8
{
	JP                                       = 0,
	US                                       = 1,
	EU                                       = 2,
	ASIA                                     = 3,
	ETitleCodeRegion_MAX                     = 4,
};

// Enum BackendSubsystem.EWebApiCacheType
// NumValues: 0x0006
enum class EWebApiCacheType : uint8
{
	NoCache                                  = 0,
	NoClear                                  = 1,
	UpdateClear                              = 2,
	TimerClear                               = 3,
	UpdateOrTimerClear                       = 4,
	EWebApiCacheType_MAX                     = 5,
};

// Enum BackendSubsystem.EWebApiCacheKey
// NumValues: 0x0024
enum class EWebApiCacheKey : uint8
{
	NoCache                                  = 0,
	LoadMainMenu                             = 1,
	LoadCharacterSelect                      = 2,
	LoadProfile                              = 3,
	LoadBillboardChart                       = 4,
	LoadBattleRecord                         = 5,
	LoadCustomizeCostume                     = 6,
	LoadCustomizeVoice                       = 7,
	LoadCustomizeAppeal                      = 8,
	LoadCustomizeEmblem                      = 9,
	LoadCustomizeVariation                   = 10,
	LoadCustomizePreset                      = 11,
	LoadAdList                               = 12,
	LoadAvatar                               = 13,
	LoadShop                                 = 14,
	LoadLottery                              = 15,
	LoadLotteryRate                          = 16,
	LoadLotteryHistory                       = 17,
	LoadLotteryMileageInfo                   = 18,
	LoadMission                              = 19,
	LoadFriends                              = 20,
	SearchPlayers                            = 21,
	LoadInventory                            = 22,
	LoadSquadReceivedInvitation              = 23,
	LoadSquadSentInvitation                  = 24,
	LoadGuildInfo                            = 25,
	LoadGuildRecordList                      = 26,
	LoadRanking                              = 27,
	LoadGallery                              = 28,
	LoadSetting                              = 29,
	LoadLicense                              = 30,
	LoadSeasonPass                           = 31,
	LoadSpecialLicense                       = 32,
	LoadEvent                                = 33,
	LoadCustomMatchResult                    = 34,
	EWebApiCacheKey_MAX                      = 35,
};

// ScriptStruct BackendSubsystem.WebApiArg
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FWebApiArg final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWebApiArg) == 0x000008, "Wrong alignment on FWebApiArg");
static_assert(sizeof(FWebApiArg) == 0x000038, "Wrong size on FWebApiArg");

// ScriptStruct BackendSubsystem.ResultData
// 0x0078 (0x0078 - 0x0000)
struct FResultData final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exp;                                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankPoint;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonPassPoint;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Coin;                                              // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildPoint;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LiveTimeSecond;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWin;                                              // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         bLive;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Damage;                                            // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillCount;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeathCount;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillAssistCount;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HealAssistCount;                                   // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoopActionCount;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Point;                                             // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RescueCount;                                       // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BrokeCount;                                        // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpCount;                                      // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PickedItemCount;                                   // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemSupportCount;                                  // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssaultCount;                                      // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ScoreTableCodeList;                                // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResultData) == 0x000008, "Wrong alignment on FResultData");
static_assert(sizeof(FResultData) == 0x000078, "Wrong size on FResultData");
static_assert(offsetof(FResultData, PlayerId) == 0x000000, "Member 'FResultData::PlayerId' has a wrong offset!");
static_assert(offsetof(FResultData, Exp) == 0x000010, "Member 'FResultData::Exp' has a wrong offset!");
static_assert(offsetof(FResultData, RankPoint) == 0x000014, "Member 'FResultData::RankPoint' has a wrong offset!");
static_assert(offsetof(FResultData, SeasonPassPoint) == 0x000018, "Member 'FResultData::SeasonPassPoint' has a wrong offset!");
static_assert(offsetof(FResultData, Coin) == 0x00001C, "Member 'FResultData::Coin' has a wrong offset!");
static_assert(offsetof(FResultData, GuildPoint) == 0x000020, "Member 'FResultData::GuildPoint' has a wrong offset!");
static_assert(offsetof(FResultData, LiveTimeSecond) == 0x000024, "Member 'FResultData::LiveTimeSecond' has a wrong offset!");
static_assert(offsetof(FResultData, Rank) == 0x000028, "Member 'FResultData::Rank' has a wrong offset!");
static_assert(offsetof(FResultData, bWin) == 0x00002C, "Member 'FResultData::bWin' has a wrong offset!");
static_assert(offsetof(FResultData, bLive) == 0x000030, "Member 'FResultData::bLive' has a wrong offset!");
static_assert(offsetof(FResultData, Damage) == 0x000034, "Member 'FResultData::Damage' has a wrong offset!");
static_assert(offsetof(FResultData, KillCount) == 0x000038, "Member 'FResultData::KillCount' has a wrong offset!");
static_assert(offsetof(FResultData, DeathCount) == 0x00003C, "Member 'FResultData::DeathCount' has a wrong offset!");
static_assert(offsetof(FResultData, KillAssistCount) == 0x000040, "Member 'FResultData::KillAssistCount' has a wrong offset!");
static_assert(offsetof(FResultData, HealAssistCount) == 0x000044, "Member 'FResultData::HealAssistCount' has a wrong offset!");
static_assert(offsetof(FResultData, CoopActionCount) == 0x000048, "Member 'FResultData::CoopActionCount' has a wrong offset!");
static_assert(offsetof(FResultData, Point) == 0x00004C, "Member 'FResultData::Point' has a wrong offset!");
static_assert(offsetof(FResultData, RescueCount) == 0x000050, "Member 'FResultData::RescueCount' has a wrong offset!");
static_assert(offsetof(FResultData, BrokeCount) == 0x000054, "Member 'FResultData::BrokeCount' has a wrong offset!");
static_assert(offsetof(FResultData, LevelUpCount) == 0x000058, "Member 'FResultData::LevelUpCount' has a wrong offset!");
static_assert(offsetof(FResultData, PickedItemCount) == 0x00005C, "Member 'FResultData::PickedItemCount' has a wrong offset!");
static_assert(offsetof(FResultData, ItemSupportCount) == 0x000060, "Member 'FResultData::ItemSupportCount' has a wrong offset!");
static_assert(offsetof(FResultData, AssaultCount) == 0x000064, "Member 'FResultData::AssaultCount' has a wrong offset!");
static_assert(offsetof(FResultData, ScoreTableCodeList) == 0x000068, "Member 'FResultData::ScoreTableCodeList' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbPackItemParam
// 0x03E0 (0x03E0 - 0x0000)
struct FDbPackItemParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EItemCategory                                 ECategory;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataCharacter                   Character;                                         // 0x0010(0x00A8)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMasterDataCurrency                    Currency;                                          // 0x00B8(0x0068)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMasterDataEmblem                      Emblem;                                            // 0x0120(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMasterDataCustomizeCostume            CustomizeCostume;                                  // 0x0170(0x00A0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMasterDataCustomizeEmote              CustomizeEmote;                                    // 0x0210(0x0078)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMasterDataCustomizeVoice              CustomizeVoice;                                    // 0x0288(0x0080)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMasterDataMyAdParts                   MyAdParts;                                         // 0x0308(0x0048)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         Code;                                              // 0x0350(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_354[0x4];                                      // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           Name;                                              // 0x0358(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0368(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 AssetName;                                         // 0x0380(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ObtainFrom;                                        // 0x0390(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x03A8(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   MultilineDisplayName;                              // 0x03C0(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x03D8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3DC[0x4];                                      // 0x03DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbPackItemParam) == 0x000008, "Wrong alignment on FDbPackItemParam");
static_assert(sizeof(FDbPackItemParam) == 0x0003E0, "Wrong size on FDbPackItemParam");
static_assert(offsetof(FDbPackItemParam, ECategory) == 0x000008, "Member 'FDbPackItemParam::ECategory' has a wrong offset!");
static_assert(offsetof(FDbPackItemParam, Character) == 0x000010, "Member 'FDbPackItemParam::Character' has a wrong offset!");
static_assert(offsetof(FDbPackItemParam, Currency) == 0x0000B8, "Member 'FDbPackItemParam::Currency' has a wrong offset!");
static_assert(offsetof(FDbPackItemParam, Emblem) == 0x000120, "Member 'FDbPackItemParam::Emblem' has a wrong offset!");
static_assert(offsetof(FDbPackItemParam, CustomizeCostume) == 0x000170, "Member 'FDbPackItemParam::CustomizeCostume' has a wrong offset!");
static_assert(offsetof(FDbPackItemParam, CustomizeEmote) == 0x000210, "Member 'FDbPackItemParam::CustomizeEmote' has a wrong offset!");
static_assert(offsetof(FDbPackItemParam, CustomizeVoice) == 0x000288, "Member 'FDbPackItemParam::CustomizeVoice' has a wrong offset!");
static_assert(offsetof(FDbPackItemParam, MyAdParts) == 0x000308, "Member 'FDbPackItemParam::MyAdParts' has a wrong offset!");
static_assert(offsetof(FDbPackItemParam, Code) == 0x000350, "Member 'FDbPackItemParam::Code' has a wrong offset!");
static_assert(offsetof(FDbPackItemParam, Name) == 0x000358, "Member 'FDbPackItemParam::Name' has a wrong offset!");
static_assert(offsetof(FDbPackItemParam, Description) == 0x000368, "Member 'FDbPackItemParam::Description' has a wrong offset!");
static_assert(offsetof(FDbPackItemParam, AssetName) == 0x000380, "Member 'FDbPackItemParam::AssetName' has a wrong offset!");
static_assert(offsetof(FDbPackItemParam, ObtainFrom) == 0x000390, "Member 'FDbPackItemParam::ObtainFrom' has a wrong offset!");
static_assert(offsetof(FDbPackItemParam, DisplayName) == 0x0003A8, "Member 'FDbPackItemParam::DisplayName' has a wrong offset!");
static_assert(offsetof(FDbPackItemParam, MultilineDisplayName) == 0x0003C0, "Member 'FDbPackItemParam::MultilineDisplayName' has a wrong offset!");
static_assert(offsetof(FDbPackItemParam, Quantity) == 0x0003D8, "Member 'FDbPackItemParam::Quantity' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbItemCategoryParam
// 0x0488 (0x0488 - 0x0000)
struct FDbItemCategoryParam
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EItemCategory                                 ECategory;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataCharacter                   Character;                                         // 0x0010(0x00A8)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMasterDataCurrency                    Currency;                                          // 0x00B8(0x0068)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMasterDataEmblem                      Emblem;                                            // 0x0120(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMasterDataCustomizeCostume            CustomizeCostume;                                  // 0x0170(0x00A0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMasterDataCustomizeEmote              CustomizeEmote;                                    // 0x0210(0x0078)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMasterDataCustomizeVoice              CustomizeVoice;                                    // 0x0288(0x0080)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMasterDataMyAdParts                   MyAdParts;                                         // 0x0308(0x0048)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMasterDataPack                        Pack;                                              // 0x0350(0x0048)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FDbPackItemParam>               PackItems;                                         // 0x0398(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMasterDataVariation                   Variation;                                         // 0x03A8(0x0058)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         Code;                                              // 0x0400(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_404[0x4];                                      // 0x0404(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           Name;                                              // 0x0408(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0418(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 AssetName;                                         // 0x0430(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ObtainFrom;                                        // 0x0440(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0458(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   MultilineDisplayName;                              // 0x0470(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbItemCategoryParam) == 0x000008, "Wrong alignment on FDbItemCategoryParam");
static_assert(sizeof(FDbItemCategoryParam) == 0x000488, "Wrong size on FDbItemCategoryParam");
static_assert(offsetof(FDbItemCategoryParam, ECategory) == 0x000008, "Member 'FDbItemCategoryParam::ECategory' has a wrong offset!");
static_assert(offsetof(FDbItemCategoryParam, Character) == 0x000010, "Member 'FDbItemCategoryParam::Character' has a wrong offset!");
static_assert(offsetof(FDbItemCategoryParam, Currency) == 0x0000B8, "Member 'FDbItemCategoryParam::Currency' has a wrong offset!");
static_assert(offsetof(FDbItemCategoryParam, Emblem) == 0x000120, "Member 'FDbItemCategoryParam::Emblem' has a wrong offset!");
static_assert(offsetof(FDbItemCategoryParam, CustomizeCostume) == 0x000170, "Member 'FDbItemCategoryParam::CustomizeCostume' has a wrong offset!");
static_assert(offsetof(FDbItemCategoryParam, CustomizeEmote) == 0x000210, "Member 'FDbItemCategoryParam::CustomizeEmote' has a wrong offset!");
static_assert(offsetof(FDbItemCategoryParam, CustomizeVoice) == 0x000288, "Member 'FDbItemCategoryParam::CustomizeVoice' has a wrong offset!");
static_assert(offsetof(FDbItemCategoryParam, MyAdParts) == 0x000308, "Member 'FDbItemCategoryParam::MyAdParts' has a wrong offset!");
static_assert(offsetof(FDbItemCategoryParam, Pack) == 0x000350, "Member 'FDbItemCategoryParam::Pack' has a wrong offset!");
static_assert(offsetof(FDbItemCategoryParam, PackItems) == 0x000398, "Member 'FDbItemCategoryParam::PackItems' has a wrong offset!");
static_assert(offsetof(FDbItemCategoryParam, Variation) == 0x0003A8, "Member 'FDbItemCategoryParam::Variation' has a wrong offset!");
static_assert(offsetof(FDbItemCategoryParam, Code) == 0x000400, "Member 'FDbItemCategoryParam::Code' has a wrong offset!");
static_assert(offsetof(FDbItemCategoryParam, Name) == 0x000408, "Member 'FDbItemCategoryParam::Name' has a wrong offset!");
static_assert(offsetof(FDbItemCategoryParam, Description) == 0x000418, "Member 'FDbItemCategoryParam::Description' has a wrong offset!");
static_assert(offsetof(FDbItemCategoryParam, AssetName) == 0x000430, "Member 'FDbItemCategoryParam::AssetName' has a wrong offset!");
static_assert(offsetof(FDbItemCategoryParam, ObtainFrom) == 0x000440, "Member 'FDbItemCategoryParam::ObtainFrom' has a wrong offset!");
static_assert(offsetof(FDbItemCategoryParam, DisplayName) == 0x000458, "Member 'FDbItemCategoryParam::DisplayName' has a wrong offset!");
static_assert(offsetof(FDbItemCategoryParam, MultilineDisplayName) == 0x000470, "Member 'FDbItemCategoryParam::MultilineDisplayName' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbMileageItem
// 0x0018 (0x04A0 - 0x0488)
struct FDbMileageItem final : public FDbItemCategoryParam
{
public:
	class FString                                 ExchangeItemId;                                    // 0x0488(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0498(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49C[0x4];                                      // 0x049C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbMileageItem) == 0x000008, "Wrong alignment on FDbMileageItem");
static_assert(sizeof(FDbMileageItem) == 0x0004A0, "Wrong size on FDbMileageItem");
static_assert(offsetof(FDbMileageItem, ExchangeItemId) == 0x000488, "Member 'FDbMileageItem::ExchangeItemId' has a wrong offset!");
static_assert(offsetof(FDbMileageItem, Quantity) == 0x000498, "Member 'FDbMileageItem::Quantity' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbGuildMemberParam
// 0x0098 (0x0098 - 0x0000)
struct FDbGuildMemberParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerId;                                          // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformPlayerId;                                  // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContributePoint;                                   // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BestContributePoint;                               // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LikeCount;                                         // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataRankExp                     Rank;                                              // 0x0048(0x0038)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EGuildPosition                                EPosition;                                         // 0x0080(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNew;                                              // 0x0081(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              LastLoginAt;                                       // 0x0088(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMySelf;                                           // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnline;                                           // 0x0091(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlatformBlock;                                    // 0x0092(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_93[0x5];                                       // 0x0093(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbGuildMemberParam) == 0x000008, "Wrong alignment on FDbGuildMemberParam");
static_assert(sizeof(FDbGuildMemberParam) == 0x000098, "Wrong size on FDbGuildMemberParam");
static_assert(offsetof(FDbGuildMemberParam, PlayerId) == 0x000008, "Member 'FDbGuildMemberParam::PlayerId' has a wrong offset!");
static_assert(offsetof(FDbGuildMemberParam, PlatformPlayerId) == 0x000018, "Member 'FDbGuildMemberParam::PlatformPlayerId' has a wrong offset!");
static_assert(offsetof(FDbGuildMemberParam, PlayerName) == 0x000028, "Member 'FDbGuildMemberParam::PlayerName' has a wrong offset!");
static_assert(offsetof(FDbGuildMemberParam, ContributePoint) == 0x000038, "Member 'FDbGuildMemberParam::ContributePoint' has a wrong offset!");
static_assert(offsetof(FDbGuildMemberParam, BestContributePoint) == 0x00003C, "Member 'FDbGuildMemberParam::BestContributePoint' has a wrong offset!");
static_assert(offsetof(FDbGuildMemberParam, LikeCount) == 0x000040, "Member 'FDbGuildMemberParam::LikeCount' has a wrong offset!");
static_assert(offsetof(FDbGuildMemberParam, Rank) == 0x000048, "Member 'FDbGuildMemberParam::Rank' has a wrong offset!");
static_assert(offsetof(FDbGuildMemberParam, EPosition) == 0x000080, "Member 'FDbGuildMemberParam::EPosition' has a wrong offset!");
static_assert(offsetof(FDbGuildMemberParam, bNew) == 0x000081, "Member 'FDbGuildMemberParam::bNew' has a wrong offset!");
static_assert(offsetof(FDbGuildMemberParam, LastLoginAt) == 0x000088, "Member 'FDbGuildMemberParam::LastLoginAt' has a wrong offset!");
static_assert(offsetof(FDbGuildMemberParam, bMySelf) == 0x000090, "Member 'FDbGuildMemberParam::bMySelf' has a wrong offset!");
static_assert(offsetof(FDbGuildMemberParam, bOnline) == 0x000091, "Member 'FDbGuildMemberParam::bOnline' has a wrong offset!");
static_assert(offsetof(FDbGuildMemberParam, bPlatformBlock) == 0x000092, "Member 'FDbGuildMemberParam::bPlatformBlock' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbsCustomizeItemParam
// 0x0008 (0x0490 - 0x0488)
struct FDbsCustomizeItemParam : public FDbItemCategoryParam
{
public:
	uint8                                         Pad_488[0x1];                                      // 0x0488(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUnlocked;                                         // 0x0489(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEquipped;                                         // 0x048A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFavorite;                                         // 0x048B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBuyCustomizeStatus                           EBuyStatus;                                        // 0x048C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48D[0x3];                                      // 0x048D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbsCustomizeItemParam) == 0x000008, "Wrong alignment on FDbsCustomizeItemParam");
static_assert(sizeof(FDbsCustomizeItemParam) == 0x000490, "Wrong size on FDbsCustomizeItemParam");
static_assert(offsetof(FDbsCustomizeItemParam, bUnlocked) == 0x000489, "Member 'FDbsCustomizeItemParam::bUnlocked' has a wrong offset!");
static_assert(offsetof(FDbsCustomizeItemParam, bEquipped) == 0x00048A, "Member 'FDbsCustomizeItemParam::bEquipped' has a wrong offset!");
static_assert(offsetof(FDbsCustomizeItemParam, bFavorite) == 0x00048B, "Member 'FDbsCustomizeItemParam::bFavorite' has a wrong offset!");
static_assert(offsetof(FDbsCustomizeItemParam, EBuyStatus) == 0x00048C, "Member 'FDbsCustomizeItemParam::EBuyStatus' has a wrong offset!");

// ScriptStruct BackendSubsystem.CatalogIdPs4
// 0x0020 (0x0020 - 0x0000)
struct FCatalogIdPs4 final
{
public:
	class FString                                 ProductLabel;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SkuLabel;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCatalogIdPs4) == 0x000008, "Wrong alignment on FCatalogIdPs4");
static_assert(sizeof(FCatalogIdPs4) == 0x000020, "Wrong size on FCatalogIdPs4");
static_assert(offsetof(FCatalogIdPs4, ProductLabel) == 0x000000, "Member 'FCatalogIdPs4::ProductLabel' has a wrong offset!");
static_assert(offsetof(FCatalogIdPs4, SkuLabel) == 0x000010, "Member 'FCatalogIdPs4::SkuLabel' has a wrong offset!");

// ScriptStruct BackendSubsystem.KpiBattleLog
// 0x0288 (0x0288 - 0x0000)
struct FKpiBattleLog final
{
public:
	class FString                                 StartMatchData;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndMatchDate;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KOScore;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KOAssistScore;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageScore;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SurvivalTime;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterCode;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VariationCode;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostumeCode;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AuraId;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AuraVisibleInBattle;                               // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchingTime;                                      // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x58];                                      // 0x0058(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FirstUniqueActionId;                               // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FirstUniqueActionCount;                            // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondUniqueActionId;                              // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondUniqueActionCount;                           // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0x14];                                      // 0x00C0(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ViewingTime;                                       // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisconnect;                                       // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0xF];                                       // 0x00D9(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Emblems;                                           // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0xA0];                                      // 0x00F8(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, int32>                    Supports;                                          // 0x0198(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8[0x50];                                     // 0x01E8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, int32>                            Items;                                             // 0x0238(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKpiBattleLog) == 0x000008, "Wrong alignment on FKpiBattleLog");
static_assert(sizeof(FKpiBattleLog) == 0x000288, "Wrong size on FKpiBattleLog");
static_assert(offsetof(FKpiBattleLog, StartMatchData) == 0x000000, "Member 'FKpiBattleLog::StartMatchData' has a wrong offset!");
static_assert(offsetof(FKpiBattleLog, EndMatchDate) == 0x000010, "Member 'FKpiBattleLog::EndMatchDate' has a wrong offset!");
static_assert(offsetof(FKpiBattleLog, KOScore) == 0x000020, "Member 'FKpiBattleLog::KOScore' has a wrong offset!");
static_assert(offsetof(FKpiBattleLog, KOAssistScore) == 0x000024, "Member 'FKpiBattleLog::KOAssistScore' has a wrong offset!");
static_assert(offsetof(FKpiBattleLog, DamageScore) == 0x000028, "Member 'FKpiBattleLog::DamageScore' has a wrong offset!");
static_assert(offsetof(FKpiBattleLog, SurvivalTime) == 0x00002C, "Member 'FKpiBattleLog::SurvivalTime' has a wrong offset!");
static_assert(offsetof(FKpiBattleLog, CharacterCode) == 0x000030, "Member 'FKpiBattleLog::CharacterCode' has a wrong offset!");
static_assert(offsetof(FKpiBattleLog, VariationCode) == 0x000034, "Member 'FKpiBattleLog::VariationCode' has a wrong offset!");
static_assert(offsetof(FKpiBattleLog, CostumeCode) == 0x000038, "Member 'FKpiBattleLog::CostumeCode' has a wrong offset!");
static_assert(offsetof(FKpiBattleLog, AuraId) == 0x000040, "Member 'FKpiBattleLog::AuraId' has a wrong offset!");
static_assert(offsetof(FKpiBattleLog, AuraVisibleInBattle) == 0x000050, "Member 'FKpiBattleLog::AuraVisibleInBattle' has a wrong offset!");
static_assert(offsetof(FKpiBattleLog, MatchingTime) == 0x000054, "Member 'FKpiBattleLog::MatchingTime' has a wrong offset!");
static_assert(offsetof(FKpiBattleLog, FirstUniqueActionId) == 0x0000B0, "Member 'FKpiBattleLog::FirstUniqueActionId' has a wrong offset!");
static_assert(offsetof(FKpiBattleLog, FirstUniqueActionCount) == 0x0000B4, "Member 'FKpiBattleLog::FirstUniqueActionCount' has a wrong offset!");
static_assert(offsetof(FKpiBattleLog, SecondUniqueActionId) == 0x0000B8, "Member 'FKpiBattleLog::SecondUniqueActionId' has a wrong offset!");
static_assert(offsetof(FKpiBattleLog, SecondUniqueActionCount) == 0x0000BC, "Member 'FKpiBattleLog::SecondUniqueActionCount' has a wrong offset!");
static_assert(offsetof(FKpiBattleLog, ViewingTime) == 0x0000D4, "Member 'FKpiBattleLog::ViewingTime' has a wrong offset!");
static_assert(offsetof(FKpiBattleLog, bDisconnect) == 0x0000D8, "Member 'FKpiBattleLog::bDisconnect' has a wrong offset!");
static_assert(offsetof(FKpiBattleLog, Emblems) == 0x0000E8, "Member 'FKpiBattleLog::Emblems' has a wrong offset!");
static_assert(offsetof(FKpiBattleLog, Supports) == 0x000198, "Member 'FKpiBattleLog::Supports' has a wrong offset!");
static_assert(offsetof(FKpiBattleLog, Items) == 0x000238, "Member 'FKpiBattleLog::Items' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbsVariationParam
// 0x0000 (0x0490 - 0x0490)
struct FDbsVariationParam final : public FDbsCustomizeItemParam
{
};
static_assert(alignof(FDbsVariationParam) == 0x000008, "Wrong alignment on FDbsVariationParam");
static_assert(sizeof(FDbsVariationParam) == 0x000490, "Wrong size on FDbsVariationParam");

// ScriptStruct BackendSubsystem.DbGuildSearchCondition
// 0x0030 (0x0030 - 0x0000)
struct FDbGuildSearchCondition final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GuildName;                                         // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildId;                                           // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuildPolicy                                  Policy;                                            // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuildJoinRule                                JoinRule;                                          // 0x0029(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuildSearchLevelRange                        LevelRange;                                        // 0x002A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuildSearchMemberRange                       MemberCount;                                       // 0x002B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefault;                                          // 0x002C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbGuildSearchCondition) == 0x000008, "Wrong alignment on FDbGuildSearchCondition");
static_assert(sizeof(FDbGuildSearchCondition) == 0x000030, "Wrong size on FDbGuildSearchCondition");
static_assert(offsetof(FDbGuildSearchCondition, GuildName) == 0x000008, "Member 'FDbGuildSearchCondition::GuildName' has a wrong offset!");
static_assert(offsetof(FDbGuildSearchCondition, GuildId) == 0x000018, "Member 'FDbGuildSearchCondition::GuildId' has a wrong offset!");
static_assert(offsetof(FDbGuildSearchCondition, Policy) == 0x000028, "Member 'FDbGuildSearchCondition::Policy' has a wrong offset!");
static_assert(offsetof(FDbGuildSearchCondition, JoinRule) == 0x000029, "Member 'FDbGuildSearchCondition::JoinRule' has a wrong offset!");
static_assert(offsetof(FDbGuildSearchCondition, LevelRange) == 0x00002A, "Member 'FDbGuildSearchCondition::LevelRange' has a wrong offset!");
static_assert(offsetof(FDbGuildSearchCondition, MemberCount) == 0x00002B, "Member 'FDbGuildSearchCondition::MemberCount' has a wrong offset!");
static_assert(offsetof(FDbGuildSearchCondition, bDefault) == 0x00002C, "Member 'FDbGuildSearchCondition::bDefault' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbPaymentInfo
// 0x0090 (0x0090 - 0x0000)
struct FDbPaymentInfo final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemCategory                                 EPaymentItemCategory;                              // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataCurrency                    Currency;                                          // 0x0018(0x0068)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0080(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSingle;                                           // 0x0084(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRunnable;                                         // 0x0085(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_86[0x2];                                       // 0x0086(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Mileage;                                           // 0x0088(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentMileageNum;                                 // 0x008C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbPaymentInfo) == 0x000008, "Wrong alignment on FDbPaymentInfo");
static_assert(sizeof(FDbPaymentInfo) == 0x000090, "Wrong size on FDbPaymentInfo");
static_assert(offsetof(FDbPaymentInfo, ID) == 0x000000, "Member 'FDbPaymentInfo::ID' has a wrong offset!");
static_assert(offsetof(FDbPaymentInfo, EPaymentItemCategory) == 0x000010, "Member 'FDbPaymentInfo::EPaymentItemCategory' has a wrong offset!");
static_assert(offsetof(FDbPaymentInfo, Currency) == 0x000018, "Member 'FDbPaymentInfo::Currency' has a wrong offset!");
static_assert(offsetof(FDbPaymentInfo, Price) == 0x000080, "Member 'FDbPaymentInfo::Price' has a wrong offset!");
static_assert(offsetof(FDbPaymentInfo, bSingle) == 0x000084, "Member 'FDbPaymentInfo::bSingle' has a wrong offset!");
static_assert(offsetof(FDbPaymentInfo, bRunnable) == 0x000085, "Member 'FDbPaymentInfo::bRunnable' has a wrong offset!");
static_assert(offsetof(FDbPaymentInfo, Mileage) == 0x000088, "Member 'FDbPaymentInfo::Mileage' has a wrong offset!");
static_assert(offsetof(FDbPaymentInfo, CurrentMileageNum) == 0x00008C, "Member 'FDbPaymentInfo::CurrentMileageNum' has a wrong offset!");

// ScriptStruct BackendSubsystem.PenaltyData
// 0x0028 (0x0028 - 0x0000)
struct FPenaltyData final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdPenaltyType                                ReasonType;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReporterPlayerId;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPenaltyData) == 0x000008, "Wrong alignment on FPenaltyData");
static_assert(sizeof(FPenaltyData) == 0x000028, "Wrong size on FPenaltyData");
static_assert(offsetof(FPenaltyData, PlayerId) == 0x000000, "Member 'FPenaltyData::PlayerId' has a wrong offset!");
static_assert(offsetof(FPenaltyData, ReasonType) == 0x000010, "Member 'FPenaltyData::ReasonType' has a wrong offset!");
static_assert(offsetof(FPenaltyData, ReporterPlayerId) == 0x000018, "Member 'FPenaltyData::ReporterPlayerId' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbItemStockParam
// 0x0010 (0x0498 - 0x0488)
struct FDbItemStockParam final : public FDbItemCategoryParam
{
public:
	int32                                         Quantity;                                          // 0x0488(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48C[0x4];                                      // 0x048C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              ExpireAt;                                          // 0x0490(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbItemStockParam) == 0x000008, "Wrong alignment on FDbItemStockParam");
static_assert(sizeof(FDbItemStockParam) == 0x000498, "Wrong size on FDbItemStockParam");
static_assert(offsetof(FDbItemStockParam, Quantity) == 0x000488, "Member 'FDbItemStockParam::Quantity' has a wrong offset!");
static_assert(offsetof(FDbItemStockParam, ExpireAt) == 0x000490, "Member 'FDbItemStockParam::ExpireAt' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbSpecialLicenseParam
// 0x0490 (0x04C0 - 0x0030)
struct FDbSpecialLicenseParam final : public FMasterDataSpecialLicense
{
public:
	struct FDbItemCategoryParam                   Reward;                                            // 0x0030(0x0488)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReceived;                                         // 0x04B8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B9[0x7];                                      // 0x04B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbSpecialLicenseParam) == 0x000008, "Wrong alignment on FDbSpecialLicenseParam");
static_assert(sizeof(FDbSpecialLicenseParam) == 0x0004C0, "Wrong size on FDbSpecialLicenseParam");
static_assert(offsetof(FDbSpecialLicenseParam, Reward) == 0x000030, "Member 'FDbSpecialLicenseParam::Reward' has a wrong offset!");
static_assert(offsetof(FDbSpecialLicenseParam, bReceived) == 0x0004B8, "Member 'FDbSpecialLicenseParam::bReceived' has a wrong offset!");

// ScriptStruct BackendSubsystem.BillBoardLike
// 0x0028 (0x0028 - 0x0000)
struct FBillBoardLike final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LikeCount;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELikeType                                     LikeType;                                          // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SentPlayerId;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBillBoardLike) == 0x000008, "Wrong alignment on FBillBoardLike");
static_assert(sizeof(FBillBoardLike) == 0x000028, "Wrong size on FBillBoardLike");
static_assert(offsetof(FBillBoardLike, PlayerId) == 0x000000, "Member 'FBillBoardLike::PlayerId' has a wrong offset!");
static_assert(offsetof(FBillBoardLike, LikeCount) == 0x000010, "Member 'FBillBoardLike::LikeCount' has a wrong offset!");
static_assert(offsetof(FBillBoardLike, LikeType) == 0x000014, "Member 'FBillBoardLike::LikeType' has a wrong offset!");
static_assert(offsetof(FBillBoardLike, SentPlayerId) == 0x000018, "Member 'FBillBoardLike::SentPlayerId' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbLotteryResultItem
// 0x04C0 (0x04C0 - 0x0000)
struct FDbLotteryResultItem final
{
public:
	class FString                                 ConfigId;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDbItemCategoryParam                   Item;                                              // 0x0010(0x0488)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rarity;                                            // 0x0498(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x049C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Mileage;                                           // 0x04A0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplaced;                                         // 0x04A4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetBox;                                         // 0x04A5(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A6[0x2];                                      // 0x04A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CountInBox;                                        // 0x04A8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainInBox;                                       // 0x04AC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x04B0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPickUp;                                           // 0x04B4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanResetFlg;                                      // 0x04B5(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B6[0x2];                                      // 0x04B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AuraStep;                                          // 0x04B8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4BC[0x4];                                      // 0x04BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbLotteryResultItem) == 0x000008, "Wrong alignment on FDbLotteryResultItem");
static_assert(sizeof(FDbLotteryResultItem) == 0x0004C0, "Wrong size on FDbLotteryResultItem");
static_assert(offsetof(FDbLotteryResultItem, ConfigId) == 0x000000, "Member 'FDbLotteryResultItem::ConfigId' has a wrong offset!");
static_assert(offsetof(FDbLotteryResultItem, Item) == 0x000010, "Member 'FDbLotteryResultItem::Item' has a wrong offset!");
static_assert(offsetof(FDbLotteryResultItem, Rarity) == 0x000498, "Member 'FDbLotteryResultItem::Rarity' has a wrong offset!");
static_assert(offsetof(FDbLotteryResultItem, Count) == 0x00049C, "Member 'FDbLotteryResultItem::Count' has a wrong offset!");
static_assert(offsetof(FDbLotteryResultItem, Mileage) == 0x0004A0, "Member 'FDbLotteryResultItem::Mileage' has a wrong offset!");
static_assert(offsetof(FDbLotteryResultItem, bReplaced) == 0x0004A4, "Member 'FDbLotteryResultItem::bReplaced' has a wrong offset!");
static_assert(offsetof(FDbLotteryResultItem, bResetBox) == 0x0004A5, "Member 'FDbLotteryResultItem::bResetBox' has a wrong offset!");
static_assert(offsetof(FDbLotteryResultItem, CountInBox) == 0x0004A8, "Member 'FDbLotteryResultItem::CountInBox' has a wrong offset!");
static_assert(offsetof(FDbLotteryResultItem, RemainInBox) == 0x0004AC, "Member 'FDbLotteryResultItem::RemainInBox' has a wrong offset!");
static_assert(offsetof(FDbLotteryResultItem, Rate) == 0x0004B0, "Member 'FDbLotteryResultItem::Rate' has a wrong offset!");
static_assert(offsetof(FDbLotteryResultItem, bPickUp) == 0x0004B4, "Member 'FDbLotteryResultItem::bPickUp' has a wrong offset!");
static_assert(offsetof(FDbLotteryResultItem, bCanResetFlg) == 0x0004B5, "Member 'FDbLotteryResultItem::bCanResetFlg' has a wrong offset!");
static_assert(offsetof(FDbLotteryResultItem, AuraStep) == 0x0004B8, "Member 'FDbLotteryResultItem::AuraStep' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbRates
// 0x0018 (0x0018 - 0x0000)
struct FDbRates final
{
public:
	int32                                         Number;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHighRarityCommitment;                             // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDbLotteryResultItem>           Items;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbRates) == 0x000008, "Wrong alignment on FDbRates");
static_assert(sizeof(FDbRates) == 0x000018, "Wrong size on FDbRates");
static_assert(offsetof(FDbRates, Number) == 0x000000, "Member 'FDbRates::Number' has a wrong offset!");
static_assert(offsetof(FDbRates, bHighRarityCommitment) == 0x000004, "Member 'FDbRates::bHighRarityCommitment' has a wrong offset!");
static_assert(offsetof(FDbRates, Items) == 0x000008, "Member 'FDbRates::Items' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbMileageInfo
// 0x0018 (0x0018 - 0x0000)
struct FDbMileageInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDbMileageItem>                 Items;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbMileageInfo) == 0x000008, "Wrong alignment on FDbMileageInfo");
static_assert(sizeof(FDbMileageInfo) == 0x000018, "Wrong size on FDbMileageInfo");
static_assert(offsetof(FDbMileageInfo, Items) == 0x000008, "Member 'FDbMileageInfo::Items' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbLotteryParam
// 0x0070 (0x00F0 - 0x0080)
struct FDbLotteryParam final : public FMasterDataLottery
{
public:
	bool                                          bNewOpened;                                        // 0x0080(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetBox;                                         // 0x0081(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFullMileage;                                      // 0x0082(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMileage;                                          // 0x0083(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRetriable;                                        // 0x0084(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Step;                                              // 0x0088(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentMileage;                                    // 0x008C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMileage;                                        // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxRetry;                                          // 0x0094(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDbItemCategoryParam>           _pickUpItems;                                      // 0x0098(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDbItemCategoryParam>           _otherPickUpItems;                                 // 0x00A8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDbPaymentInfo>                 _payments;                                         // 0x00B8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDbRates>                       _rateList;                                         // 0x00C8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDbMileageInfo                         MileageInfo;                                       // 0x00D8(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbLotteryParam) == 0x000008, "Wrong alignment on FDbLotteryParam");
static_assert(sizeof(FDbLotteryParam) == 0x0000F0, "Wrong size on FDbLotteryParam");
static_assert(offsetof(FDbLotteryParam, bNewOpened) == 0x000080, "Member 'FDbLotteryParam::bNewOpened' has a wrong offset!");
static_assert(offsetof(FDbLotteryParam, bResetBox) == 0x000081, "Member 'FDbLotteryParam::bResetBox' has a wrong offset!");
static_assert(offsetof(FDbLotteryParam, bFullMileage) == 0x000082, "Member 'FDbLotteryParam::bFullMileage' has a wrong offset!");
static_assert(offsetof(FDbLotteryParam, bMileage) == 0x000083, "Member 'FDbLotteryParam::bMileage' has a wrong offset!");
static_assert(offsetof(FDbLotteryParam, bRetriable) == 0x000084, "Member 'FDbLotteryParam::bRetriable' has a wrong offset!");
static_assert(offsetof(FDbLotteryParam, Step) == 0x000088, "Member 'FDbLotteryParam::Step' has a wrong offset!");
static_assert(offsetof(FDbLotteryParam, CurrentMileage) == 0x00008C, "Member 'FDbLotteryParam::CurrentMileage' has a wrong offset!");
static_assert(offsetof(FDbLotteryParam, MaxMileage) == 0x000090, "Member 'FDbLotteryParam::MaxMileage' has a wrong offset!");
static_assert(offsetof(FDbLotteryParam, MaxRetry) == 0x000094, "Member 'FDbLotteryParam::MaxRetry' has a wrong offset!");
static_assert(offsetof(FDbLotteryParam, _pickUpItems) == 0x000098, "Member 'FDbLotteryParam::_pickUpItems' has a wrong offset!");
static_assert(offsetof(FDbLotteryParam, _otherPickUpItems) == 0x0000A8, "Member 'FDbLotteryParam::_otherPickUpItems' has a wrong offset!");
static_assert(offsetof(FDbLotteryParam, _payments) == 0x0000B8, "Member 'FDbLotteryParam::_payments' has a wrong offset!");
static_assert(offsetof(FDbLotteryParam, _rateList) == 0x0000C8, "Member 'FDbLotteryParam::_rateList' has a wrong offset!");
static_assert(offsetof(FDbLotteryParam, MileageInfo) == 0x0000D8, "Member 'FDbLotteryParam::MileageInfo' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbLoginBonusItem
// 0x04A0 (0x04A0 - 0x0000)
struct FDbLoginBonusItem final
{
public:
	int32                                         Day;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Date;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDbItemCategoryParam                   Item;                                              // 0x0010(0x0488)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0498(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReceived;                                         // 0x049C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToday;                                            // 0x049D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49E[0x2];                                      // 0x049E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbLoginBonusItem) == 0x000008, "Wrong alignment on FDbLoginBonusItem");
static_assert(sizeof(FDbLoginBonusItem) == 0x0004A0, "Wrong size on FDbLoginBonusItem");
static_assert(offsetof(FDbLoginBonusItem, Day) == 0x000000, "Member 'FDbLoginBonusItem::Day' has a wrong offset!");
static_assert(offsetof(FDbLoginBonusItem, Date) == 0x000008, "Member 'FDbLoginBonusItem::Date' has a wrong offset!");
static_assert(offsetof(FDbLoginBonusItem, Item) == 0x000010, "Member 'FDbLoginBonusItem::Item' has a wrong offset!");
static_assert(offsetof(FDbLoginBonusItem, Count) == 0x000498, "Member 'FDbLoginBonusItem::Count' has a wrong offset!");
static_assert(offsetof(FDbLoginBonusItem, bReceived) == 0x00049C, "Member 'FDbLoginBonusItem::bReceived' has a wrong offset!");
static_assert(offsetof(FDbLoginBonusItem, bToday) == 0x00049D, "Member 'FDbLoginBonusItem::bToday' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbLoginBonus
// 0x0020 (0x0078 - 0x0058)
struct FDbLoginBonus final : public FMasterDataLoginBonus
{
public:
	TArray<struct FDbLoginBonusItem>              ItemList;                                          // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              PremiumExpireAt;                                   // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReceivedToday;                                    // 0x0070(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasToday;                                         // 0x0071(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanReceiveToday;                                  // 0x0072(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_73[0x5];                                       // 0x0073(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbLoginBonus) == 0x000008, "Wrong alignment on FDbLoginBonus");
static_assert(sizeof(FDbLoginBonus) == 0x000078, "Wrong size on FDbLoginBonus");
static_assert(offsetof(FDbLoginBonus, ItemList) == 0x000058, "Member 'FDbLoginBonus::ItemList' has a wrong offset!");
static_assert(offsetof(FDbLoginBonus, PremiumExpireAt) == 0x000068, "Member 'FDbLoginBonus::PremiumExpireAt' has a wrong offset!");
static_assert(offsetof(FDbLoginBonus, bReceivedToday) == 0x000070, "Member 'FDbLoginBonus::bReceivedToday' has a wrong offset!");
static_assert(offsetof(FDbLoginBonus, bHasToday) == 0x000071, "Member 'FDbLoginBonus::bHasToday' has a wrong offset!");
static_assert(offsetof(FDbLoginBonus, bCanReceiveToday) == 0x000072, "Member 'FDbLoginBonus::bCanReceiveToday' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbLoginBonusListParam
// 0x0070 (0x0070 - 0x0000)
struct FDbLoginBonusListParam final
{
public:
	TArray<struct FDbLoginBonus>                  BonusList;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x60];                                      // 0x0010(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbLoginBonusListParam) == 0x000008, "Wrong alignment on FDbLoginBonusListParam");
static_assert(sizeof(FDbLoginBonusListParam) == 0x000070, "Wrong size on FDbLoginBonusListParam");
static_assert(offsetof(FDbLoginBonusListParam, BonusList) == 0x000000, "Member 'FDbLoginBonusListParam::BonusList' has a wrong offset!");

// ScriptStruct BackendSubsystem.PhaseResult
// 0x0060 (0x0060 - 0x0000)
struct FPhaseResult final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EResultType, int32>                      Result;                                            // 0x0010(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhaseResult) == 0x000008, "Wrong alignment on FPhaseResult");
static_assert(sizeof(FPhaseResult) == 0x000060, "Wrong size on FPhaseResult");
static_assert(offsetof(FPhaseResult, PlayerId) == 0x000000, "Member 'FPhaseResult::PlayerId' has a wrong offset!");
static_assert(offsetof(FPhaseResult, Result) == 0x000010, "Member 'FPhaseResult::Result' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbCharacterParam
// 0x0040 (0x00E8 - 0x00A8)
struct FDbCharacterParam : public FMasterDataCharacter
{
public:
	int32                                         EquippedVariationCode;                             // 0x00A8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrainingOldVariationCode;                          // 0x00AC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EquippedCostumeCode;                               // 0x00B0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EquippedAuraLevel;                                 // 0x00B4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 EquippedVoiceCodes;                                // 0x00B8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 EquippedAppealCodes;                               // 0x00C8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 EquippedEmblemCodes;                               // 0x00D8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbCharacterParam) == 0x000008, "Wrong alignment on FDbCharacterParam");
static_assert(sizeof(FDbCharacterParam) == 0x0000E8, "Wrong size on FDbCharacterParam");
static_assert(offsetof(FDbCharacterParam, EquippedVariationCode) == 0x0000A8, "Member 'FDbCharacterParam::EquippedVariationCode' has a wrong offset!");
static_assert(offsetof(FDbCharacterParam, TrainingOldVariationCode) == 0x0000AC, "Member 'FDbCharacterParam::TrainingOldVariationCode' has a wrong offset!");
static_assert(offsetof(FDbCharacterParam, EquippedCostumeCode) == 0x0000B0, "Member 'FDbCharacterParam::EquippedCostumeCode' has a wrong offset!");
static_assert(offsetof(FDbCharacterParam, EquippedAuraLevel) == 0x0000B4, "Member 'FDbCharacterParam::EquippedAuraLevel' has a wrong offset!");
static_assert(offsetof(FDbCharacterParam, EquippedVoiceCodes) == 0x0000B8, "Member 'FDbCharacterParam::EquippedVoiceCodes' has a wrong offset!");
static_assert(offsetof(FDbCharacterParam, EquippedAppealCodes) == 0x0000C8, "Member 'FDbCharacterParam::EquippedAppealCodes' has a wrong offset!");
static_assert(offsetof(FDbCharacterParam, EquippedEmblemCodes) == 0x0000D8, "Member 'FDbCharacterParam::EquippedEmblemCodes' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbCustomMatchingBaseParam
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FDbCustomMatchingBaseParam
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbCustomMatchingBaseParam) == 0x000008, "Wrong alignment on FDbCustomMatchingBaseParam");
static_assert(sizeof(FDbCustomMatchingBaseParam) == 0x000008, "Wrong size on FDbCustomMatchingBaseParam");

// ScriptStruct BackendSubsystem.DbCustomMatchingMemberParam
// 0x0040 (0x0048 - 0x0008)
struct FDbCustomMatchingMemberParam final : public FDbCustomMatchingBaseParam
{
public:
	class FString                                 ID;                                                // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformPlayerId;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerRank;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerName;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBattleReady;                                      // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeader;                                           // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMySelf;                                           // 0x0042(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHost;                                             // 0x0043(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbCustomMatchingMemberParam) == 0x000008, "Wrong alignment on FDbCustomMatchingMemberParam");
static_assert(sizeof(FDbCustomMatchingMemberParam) == 0x000048, "Wrong size on FDbCustomMatchingMemberParam");
static_assert(offsetof(FDbCustomMatchingMemberParam, ID) == 0x000008, "Member 'FDbCustomMatchingMemberParam::ID' has a wrong offset!");
static_assert(offsetof(FDbCustomMatchingMemberParam, PlatformPlayerId) == 0x000018, "Member 'FDbCustomMatchingMemberParam::PlatformPlayerId' has a wrong offset!");
static_assert(offsetof(FDbCustomMatchingMemberParam, PlayerRank) == 0x000028, "Member 'FDbCustomMatchingMemberParam::PlayerRank' has a wrong offset!");
static_assert(offsetof(FDbCustomMatchingMemberParam, PlayerName) == 0x000030, "Member 'FDbCustomMatchingMemberParam::PlayerName' has a wrong offset!");
static_assert(offsetof(FDbCustomMatchingMemberParam, bBattleReady) == 0x000040, "Member 'FDbCustomMatchingMemberParam::bBattleReady' has a wrong offset!");
static_assert(offsetof(FDbCustomMatchingMemberParam, bLeader) == 0x000041, "Member 'FDbCustomMatchingMemberParam::bLeader' has a wrong offset!");
static_assert(offsetof(FDbCustomMatchingMemberParam, bMySelf) == 0x000042, "Member 'FDbCustomMatchingMemberParam::bMySelf' has a wrong offset!");
static_assert(offsetof(FDbCustomMatchingMemberParam, bHost) == 0x000043, "Member 'FDbCustomMatchingMemberParam::bHost' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbCustomMatchingMemberParamList
// 0x0020 (0x0020 - 0x0000)
struct FDbCustomMatchingMemberParamList final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CustomSquadNo;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDbCustomMatchingMemberParam>   CustomMatchingMember;                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbCustomMatchingMemberParamList) == 0x000008, "Wrong alignment on FDbCustomMatchingMemberParamList");
static_assert(sizeof(FDbCustomMatchingMemberParamList) == 0x000020, "Wrong size on FDbCustomMatchingMemberParamList");
static_assert(offsetof(FDbCustomMatchingMemberParamList, CustomSquadNo) == 0x000008, "Member 'FDbCustomMatchingMemberParamList::CustomSquadNo' has a wrong offset!");
static_assert(offsetof(FDbCustomMatchingMemberParamList, CustomMatchingMember) == 0x000010, "Member 'FDbCustomMatchingMemberParamList::CustomMatchingMember' has a wrong offset!");

// ScriptStruct BackendSubsystem.KpiLobbyLog
// 0x0024 (0x0024 - 0x0000)
struct FKpiLobbyLog final
{
public:
	int32                                         MatchingPowerUpperLimit;                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchingPowerLowerLimit;                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CommunicationLevelUpperLimit;                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CommunicationLevelLowerLimit;                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamUpGap;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SettlementMethod;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SurvivalNumber;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamUp10Less;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamUp5Less;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKpiLobbyLog) == 0x000004, "Wrong alignment on FKpiLobbyLog");
static_assert(sizeof(FKpiLobbyLog) == 0x000024, "Wrong size on FKpiLobbyLog");
static_assert(offsetof(FKpiLobbyLog, MatchingPowerUpperLimit) == 0x000000, "Member 'FKpiLobbyLog::MatchingPowerUpperLimit' has a wrong offset!");
static_assert(offsetof(FKpiLobbyLog, MatchingPowerLowerLimit) == 0x000004, "Member 'FKpiLobbyLog::MatchingPowerLowerLimit' has a wrong offset!");
static_assert(offsetof(FKpiLobbyLog, CommunicationLevelUpperLimit) == 0x000008, "Member 'FKpiLobbyLog::CommunicationLevelUpperLimit' has a wrong offset!");
static_assert(offsetof(FKpiLobbyLog, CommunicationLevelLowerLimit) == 0x00000C, "Member 'FKpiLobbyLog::CommunicationLevelLowerLimit' has a wrong offset!");
static_assert(offsetof(FKpiLobbyLog, TeamUpGap) == 0x000010, "Member 'FKpiLobbyLog::TeamUpGap' has a wrong offset!");
static_assert(offsetof(FKpiLobbyLog, SettlementMethod) == 0x000014, "Member 'FKpiLobbyLog::SettlementMethod' has a wrong offset!");
static_assert(offsetof(FKpiLobbyLog, SurvivalNumber) == 0x000018, "Member 'FKpiLobbyLog::SurvivalNumber' has a wrong offset!");
static_assert(offsetof(FKpiLobbyLog, TeamUp10Less) == 0x00001C, "Member 'FKpiLobbyLog::TeamUp10Less' has a wrong offset!");
static_assert(offsetof(FKpiLobbyLog, TeamUp5Less) == 0x000020, "Member 'FKpiLobbyLog::TeamUp5Less' has a wrong offset!");

// ScriptStruct BackendSubsystem.KpiTrainingLog
// 0x0008 (0x0008 - 0x0000)
struct FKpiTrainingLog final
{
public:
	int32                                         ChangedCharacterCode;                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFriendlyFire;                                     // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKpiTrainingLog) == 0x000004, "Wrong alignment on FKpiTrainingLog");
static_assert(sizeof(FKpiTrainingLog) == 0x000008, "Wrong size on FKpiTrainingLog");
static_assert(offsetof(FKpiTrainingLog, ChangedCharacterCode) == 0x000000, "Member 'FKpiTrainingLog::ChangedCharacterCode' has a wrong offset!");
static_assert(offsetof(FKpiTrainingLog, bFriendlyFire) == 0x000004, "Member 'FKpiTrainingLog::bFriendlyFire' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbChatParam
// 0x0068 (0x0068 - 0x0000)
struct alignas(0x08) FDbChatParam final
{
public:
	uint8                                         Pad_0[0x68];                                       // 0x0000(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbChatParam) == 0x000008, "Wrong alignment on FDbChatParam");
static_assert(sizeof(FDbChatParam) == 0x000068, "Wrong size on FDbChatParam");

// ScriptStruct BackendSubsystem.DbsCostumeParam
// 0x0008 (0x0498 - 0x0490)
struct FDbsCostumeParam final : public FDbsCustomizeItemParam
{
public:
	int32                                         UnlockedAuraLevel;                                 // 0x0490(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SettingAuraLevel;                                  // 0x0494(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbsCostumeParam) == 0x000008, "Wrong alignment on FDbsCostumeParam");
static_assert(sizeof(FDbsCostumeParam) == 0x000498, "Wrong size on FDbsCostumeParam");
static_assert(offsetof(FDbsCostumeParam, UnlockedAuraLevel) == 0x000490, "Member 'FDbsCostumeParam::UnlockedAuraLevel' has a wrong offset!");
static_assert(offsetof(FDbsCostumeParam, SettingAuraLevel) == 0x000494, "Member 'FDbsCostumeParam::SettingAuraLevel' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbsVoiceParam
// 0x0000 (0x0490 - 0x0490)
struct FDbsVoiceParam final : public FDbsCustomizeItemParam
{
};
static_assert(alignof(FDbsVoiceParam) == 0x000008, "Wrong alignment on FDbsVoiceParam");
static_assert(sizeof(FDbsVoiceParam) == 0x000490, "Wrong size on FDbsVoiceParam");

// ScriptStruct BackendSubsystem.DbsAppealParam
// 0x0000 (0x0490 - 0x0490)
struct FDbsAppealParam final : public FDbsCustomizeItemParam
{
};
static_assert(alignof(FDbsAppealParam) == 0x000008, "Wrong alignment on FDbsAppealParam");
static_assert(sizeof(FDbsAppealParam) == 0x000490, "Wrong size on FDbsAppealParam");

// ScriptStruct BackendSubsystem.DbsEmblemParam
// 0x0000 (0x0490 - 0x0490)
struct FDbsEmblemParam final : public FDbsCustomizeItemParam
{
};
static_assert(alignof(FDbsEmblemParam) == 0x000008, "Wrong alignment on FDbsEmblemParam");
static_assert(sizeof(FDbsEmblemParam) == 0x000490, "Wrong size on FDbsEmblemParam");

// ScriptStruct BackendSubsystem.DbPresetParam
// 0x04C0 (0x04C0 - 0x0000)
struct FDbPresetParam final
{
public:
	int32                                         No;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDbItemCategoryParam                   Costume;                                           // 0x0008(0x0488)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDbItemCategoryParam>           Voices;                                            // 0x0490(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDbItemCategoryParam>           Appeals;                                           // 0x04A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDbItemCategoryParam>           Emblems;                                           // 0x04B0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbPresetParam) == 0x000008, "Wrong alignment on FDbPresetParam");
static_assert(sizeof(FDbPresetParam) == 0x0004C0, "Wrong size on FDbPresetParam");
static_assert(offsetof(FDbPresetParam, No) == 0x000000, "Member 'FDbPresetParam::No' has a wrong offset!");
static_assert(offsetof(FDbPresetParam, Costume) == 0x000008, "Member 'FDbPresetParam::Costume' has a wrong offset!");
static_assert(offsetof(FDbPresetParam, Voices) == 0x000490, "Member 'FDbPresetParam::Voices' has a wrong offset!");
static_assert(offsetof(FDbPresetParam, Appeals) == 0x0004A0, "Member 'FDbPresetParam::Appeals' has a wrong offset!");
static_assert(offsetof(FDbPresetParam, Emblems) == 0x0004B0, "Member 'FDbPresetParam::Emblems' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbMyCharacterParam
// 0x1770 (0x1858 - 0x00E8)
struct FDbMyCharacterParam final : public FDbCharacterParam
{
public:
	bool                                          bUnlocked;                                         // 0x00E8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDbsCostumeParam>               Costumes;                                          // 0x00F0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDbsVoiceParam>                 Voices;                                            // 0x0100(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDbsAppealParam>                Appeals;                                           // 0x0110(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDbsEmblemParam>                Emblems;                                           // 0x0120(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDbsVariationParam>             Variations;                                        // 0x0130(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDbPresetParam>                 Presets;                                           // 0x0140(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         UnlockedPresetNo;                                  // 0x0150(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PresetUnlockPrice;                                 // 0x0154(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_158[0x1700];                                   // 0x0158(0x1700)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbMyCharacterParam) == 0x000008, "Wrong alignment on FDbMyCharacterParam");
static_assert(sizeof(FDbMyCharacterParam) == 0x001858, "Wrong size on FDbMyCharacterParam");
static_assert(offsetof(FDbMyCharacterParam, bUnlocked) == 0x0000E8, "Member 'FDbMyCharacterParam::bUnlocked' has a wrong offset!");
static_assert(offsetof(FDbMyCharacterParam, Costumes) == 0x0000F0, "Member 'FDbMyCharacterParam::Costumes' has a wrong offset!");
static_assert(offsetof(FDbMyCharacterParam, Voices) == 0x000100, "Member 'FDbMyCharacterParam::Voices' has a wrong offset!");
static_assert(offsetof(FDbMyCharacterParam, Appeals) == 0x000110, "Member 'FDbMyCharacterParam::Appeals' has a wrong offset!");
static_assert(offsetof(FDbMyCharacterParam, Emblems) == 0x000120, "Member 'FDbMyCharacterParam::Emblems' has a wrong offset!");
static_assert(offsetof(FDbMyCharacterParam, Variations) == 0x000130, "Member 'FDbMyCharacterParam::Variations' has a wrong offset!");
static_assert(offsetof(FDbMyCharacterParam, Presets) == 0x000140, "Member 'FDbMyCharacterParam::Presets' has a wrong offset!");
static_assert(offsetof(FDbMyCharacterParam, UnlockedPresetNo) == 0x000150, "Member 'FDbMyCharacterParam::UnlockedPresetNo' has a wrong offset!");
static_assert(offsetof(FDbMyCharacterParam, PresetUnlockPrice) == 0x000154, "Member 'FDbMyCharacterParam::PresetUnlockPrice' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbSpecialEffectItem
// 0x0488 (0x04C8 - 0x0040)
struct FDbSpecialEffectItem final : public FMasterDataMSpecialEffect
{
public:
	struct FDbItemCategoryParam                   Item;                                              // 0x0040(0x0488)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbSpecialEffectItem) == 0x000008, "Wrong alignment on FDbSpecialEffectItem");
static_assert(sizeof(FDbSpecialEffectItem) == 0x0004C8, "Wrong size on FDbSpecialEffectItem");
static_assert(offsetof(FDbSpecialEffectItem, Item) == 0x000040, "Member 'FDbSpecialEffectItem::Item' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbEventDropItem
// 0x0488 (0x04D0 - 0x0048)
struct FDbEventDropItem final : public FMasterDataMRandomItemWin
{
public:
	struct FDbItemCategoryParam                   Item;                                              // 0x0048(0x0488)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbEventDropItem) == 0x000008, "Wrong alignment on FDbEventDropItem");
static_assert(sizeof(FDbEventDropItem) == 0x0004D0, "Wrong size on FDbEventDropItem");
static_assert(offsetof(FDbEventDropItem, Item) == 0x000048, "Member 'FDbEventDropItem::Item' has a wrong offset!");

// ScriptStruct BackendSubsystem.WebApiCacheSetting
// 0x0008 (0x0010 - 0x0008)
struct FWebApiCacheSetting final : public FTableRowBase
{
public:
	EWebApiCacheKey                               Key;                                               // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWebApiCacheType                              Type;                                              // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ClearIntervalSec;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWebApiCacheSetting) == 0x000008, "Wrong alignment on FWebApiCacheSetting");
static_assert(sizeof(FWebApiCacheSetting) == 0x000010, "Wrong size on FWebApiCacheSetting");
static_assert(offsetof(FWebApiCacheSetting, Key) == 0x000008, "Member 'FWebApiCacheSetting::Key' has a wrong offset!");
static_assert(offsetof(FWebApiCacheSetting, Type) == 0x000009, "Member 'FWebApiCacheSetting::Type' has a wrong offset!");
static_assert(offsetof(FWebApiCacheSetting, ClearIntervalSec) == 0x00000C, "Member 'FWebApiCacheSetting::ClearIntervalSec' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbGalleryDataParam
// 0x0160 (0x01E8 - 0x0088)
struct FDbGalleryDataParam final : public FMasterDataGallery
{
public:
	struct FMasterDataCurrency                    CurrencyData1;                                     // 0x0088(0x0068)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMasterDataCurrency                    CurrencyData2;                                     // 0x00F0(0x0068)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMasterDataCurrency                    CurrencyData3;                                     // 0x0158(0x0068)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         UsedTicket1;                                       // 0x01C0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UsedTicket2;                                       // 0x01C4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UsedTicket3;                                       // 0x01C8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 OpenedPanels;                                      // 0x01D0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         TotalOpenedPanels;                                 // 0x01E0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpened;                                           // 0x01E4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E5[0x3];                                      // 0x01E5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbGalleryDataParam) == 0x000008, "Wrong alignment on FDbGalleryDataParam");
static_assert(sizeof(FDbGalleryDataParam) == 0x0001E8, "Wrong size on FDbGalleryDataParam");
static_assert(offsetof(FDbGalleryDataParam, CurrencyData1) == 0x000088, "Member 'FDbGalleryDataParam::CurrencyData1' has a wrong offset!");
static_assert(offsetof(FDbGalleryDataParam, CurrencyData2) == 0x0000F0, "Member 'FDbGalleryDataParam::CurrencyData2' has a wrong offset!");
static_assert(offsetof(FDbGalleryDataParam, CurrencyData3) == 0x000158, "Member 'FDbGalleryDataParam::CurrencyData3' has a wrong offset!");
static_assert(offsetof(FDbGalleryDataParam, UsedTicket1) == 0x0001C0, "Member 'FDbGalleryDataParam::UsedTicket1' has a wrong offset!");
static_assert(offsetof(FDbGalleryDataParam, UsedTicket2) == 0x0001C4, "Member 'FDbGalleryDataParam::UsedTicket2' has a wrong offset!");
static_assert(offsetof(FDbGalleryDataParam, UsedTicket3) == 0x0001C8, "Member 'FDbGalleryDataParam::UsedTicket3' has a wrong offset!");
static_assert(offsetof(FDbGalleryDataParam, OpenedPanels) == 0x0001D0, "Member 'FDbGalleryDataParam::OpenedPanels' has a wrong offset!");
static_assert(offsetof(FDbGalleryDataParam, TotalOpenedPanels) == 0x0001E0, "Member 'FDbGalleryDataParam::TotalOpenedPanels' has a wrong offset!");
static_assert(offsetof(FDbGalleryDataParam, bOpened) == 0x0001E4, "Member 'FDbGalleryDataParam::bOpened' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbGalleryParam
// 0x0028 (0x0028 - 0x0000)
struct FDbGalleryParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDbGalleryDataParam>            GalleryList;                                       // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x10];                                      // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbGalleryParam) == 0x000008, "Wrong alignment on FDbGalleryParam");
static_assert(sizeof(FDbGalleryParam) == 0x000028, "Wrong size on FDbGalleryParam");
static_assert(offsetof(FDbGalleryParam, GalleryList) == 0x000008, "Member 'FDbGalleryParam::GalleryList' has a wrong offset!");

// ScriptStruct BackendSubsystem.CatalogOption
// 0x0030 (0x0030 - 0x0000)
struct FCatalogOption final
{
public:
	class FString                                 Is_hcristal;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Charged;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Free;                                              // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCatalogOption) == 0x000008, "Wrong alignment on FCatalogOption");
static_assert(sizeof(FCatalogOption) == 0x000030, "Wrong size on FCatalogOption");
static_assert(offsetof(FCatalogOption, Is_hcristal) == 0x000000, "Member 'FCatalogOption::Is_hcristal' has a wrong offset!");
static_assert(offsetof(FCatalogOption, Charged) == 0x000010, "Member 'FCatalogOption::Charged' has a wrong offset!");
static_assert(offsetof(FCatalogOption, Free) == 0x000020, "Member 'FCatalogOption::Free' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbSeasonPassRewardParam
// 0x0008 (0x0490 - 0x0488)
struct FDbSeasonPassRewardParam final : public FDbItemCategoryParam
{
public:
	bool                                          bReceived;                                         // 0x0488(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_489[0x7];                                      // 0x0489(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbSeasonPassRewardParam) == 0x000008, "Wrong alignment on FDbSeasonPassRewardParam");
static_assert(sizeof(FDbSeasonPassRewardParam) == 0x000490, "Wrong size on FDbSeasonPassRewardParam");
static_assert(offsetof(FDbSeasonPassRewardParam, bReceived) == 0x000488, "Member 'FDbSeasonPassRewardParam::bReceived' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbSeasonPassParam
// 0x0920 (0x0980 - 0x0060)
struct FDbSeasonPassParam final : public FMasterDataSeasonPassExp
{
public:
	struct FDbSeasonPassRewardParam               FreeItem;                                          // 0x0060(0x0490)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDbSeasonPassRewardParam               PremiumItem;                                       // 0x04F0(0x0490)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbSeasonPassParam) == 0x000008, "Wrong alignment on FDbSeasonPassParam");
static_assert(sizeof(FDbSeasonPassParam) == 0x000980, "Wrong size on FDbSeasonPassParam");
static_assert(offsetof(FDbSeasonPassParam, FreeItem) == 0x000060, "Member 'FDbSeasonPassParam::FreeItem' has a wrong offset!");
static_assert(offsetof(FDbSeasonPassParam, PremiumItem) == 0x0004F0, "Member 'FDbSeasonPassParam::PremiumItem' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbAdPartParam
// 0x0000 (0x0048 - 0x0048)
struct FDbAdPartParam final : public FMasterDataMyAdParts
{
};
static_assert(alignof(FDbAdPartParam) == 0x000008, "Wrong alignment on FDbAdPartParam");
static_assert(sizeof(FDbAdPartParam) == 0x000048, "Wrong size on FDbAdPartParam");

// ScriptStruct BackendSubsystem.DbAdDataParam
// 0x00E0 (0x00E0 - 0x0000)
struct FDbAdDataParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ID;                                                // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerId;                                          // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformPlayerId;                                  // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMasterDataMyAdMessage                 Message;                                           // 0x0048(0x0028)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EMyAdPartsCategory, struct FDbAdPartParam> Parts;                                             // 0x0070(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bProfileFlg;                                       // 0x00C0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMyAdDeliveryStatus                           EStatus;                                           // 0x00C1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              UnpublishAt;                                       // 0x00C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlatformBlock;                                    // 0x00D0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FirstEmblemCode;                                   // 0x00D4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondEmblemCode;                                  // 0x00D8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThirdEmblemCode;                                   // 0x00DC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbAdDataParam) == 0x000008, "Wrong alignment on FDbAdDataParam");
static_assert(sizeof(FDbAdDataParam) == 0x0000E0, "Wrong size on FDbAdDataParam");
static_assert(offsetof(FDbAdDataParam, ID) == 0x000008, "Member 'FDbAdDataParam::ID' has a wrong offset!");
static_assert(offsetof(FDbAdDataParam, PlayerId) == 0x000018, "Member 'FDbAdDataParam::PlayerId' has a wrong offset!");
static_assert(offsetof(FDbAdDataParam, PlayerName) == 0x000028, "Member 'FDbAdDataParam::PlayerName' has a wrong offset!");
static_assert(offsetof(FDbAdDataParam, PlatformPlayerId) == 0x000038, "Member 'FDbAdDataParam::PlatformPlayerId' has a wrong offset!");
static_assert(offsetof(FDbAdDataParam, Message) == 0x000048, "Member 'FDbAdDataParam::Message' has a wrong offset!");
static_assert(offsetof(FDbAdDataParam, Parts) == 0x000070, "Member 'FDbAdDataParam::Parts' has a wrong offset!");
static_assert(offsetof(FDbAdDataParam, bProfileFlg) == 0x0000C0, "Member 'FDbAdDataParam::bProfileFlg' has a wrong offset!");
static_assert(offsetof(FDbAdDataParam, EStatus) == 0x0000C1, "Member 'FDbAdDataParam::EStatus' has a wrong offset!");
static_assert(offsetof(FDbAdDataParam, UnpublishAt) == 0x0000C8, "Member 'FDbAdDataParam::UnpublishAt' has a wrong offset!");
static_assert(offsetof(FDbAdDataParam, bPlatformBlock) == 0x0000D0, "Member 'FDbAdDataParam::bPlatformBlock' has a wrong offset!");
static_assert(offsetof(FDbAdDataParam, FirstEmblemCode) == 0x0000D4, "Member 'FDbAdDataParam::FirstEmblemCode' has a wrong offset!");
static_assert(offsetof(FDbAdDataParam, SecondEmblemCode) == 0x0000D8, "Member 'FDbAdDataParam::SecondEmblemCode' has a wrong offset!");
static_assert(offsetof(FDbAdDataParam, ThirdEmblemCode) == 0x0000DC, "Member 'FDbAdDataParam::ThirdEmblemCode' has a wrong offset!");

// ScriptStruct BackendSubsystem.IdleStateSetting
// 0x0008 (0x0010 - 0x0008)
struct FIdleStateSetting final : public FTableRowBase
{
public:
	int32                                         Type;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIdleStateSetting) == 0x000008, "Wrong alignment on FIdleStateSetting");
static_assert(sizeof(FIdleStateSetting) == 0x000010, "Wrong size on FIdleStateSetting");
static_assert(offsetof(FIdleStateSetting, Type) == 0x000008, "Member 'FIdleStateSetting::Type' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbBattleRecordParam
// 0x00D8 (0x00D8 - 0x0000)
struct FDbBattleRecordParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataSeason                      Season;                                            // 0x0008(0x0040)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMasterDataRankExp                     Rank;                                              // 0x0048(0x0038)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         MatchCount;                                        // 0x0080(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinCount;                                          // 0x0084(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinSurvive;                                        // 0x0088(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalDamage;                                       // 0x008C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BestDamage;                                        // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AverageDamage;                                     // 0x0094(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillCount;                                         // 0x0098(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KilledCount;                                       // 0x009C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KillRatio;                                         // 0x00A0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillAssistCount;                                   // 0x00A4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecoveryAssistCount;                               // 0x00A8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CooperateActionCount;                              // 0x00AC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchBestPoint;                                    // 0x00B0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchAveragePoint;                                 // 0x00B4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RescueCount;                                       // 0x00B8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssaultCount;                                      // 0x00BC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DestroyCount;                                      // 0x00C0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BillboardChartRank;                                // 0x00C4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPoint;                                        // 0x00C8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalLikeCount;                                    // 0x00CC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPvCount;                                      // 0x00D0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbBattleRecordParam) == 0x000008, "Wrong alignment on FDbBattleRecordParam");
static_assert(sizeof(FDbBattleRecordParam) == 0x0000D8, "Wrong size on FDbBattleRecordParam");
static_assert(offsetof(FDbBattleRecordParam, Season) == 0x000008, "Member 'FDbBattleRecordParam::Season' has a wrong offset!");
static_assert(offsetof(FDbBattleRecordParam, Rank) == 0x000048, "Member 'FDbBattleRecordParam::Rank' has a wrong offset!");
static_assert(offsetof(FDbBattleRecordParam, MatchCount) == 0x000080, "Member 'FDbBattleRecordParam::MatchCount' has a wrong offset!");
static_assert(offsetof(FDbBattleRecordParam, WinCount) == 0x000084, "Member 'FDbBattleRecordParam::WinCount' has a wrong offset!");
static_assert(offsetof(FDbBattleRecordParam, WinSurvive) == 0x000088, "Member 'FDbBattleRecordParam::WinSurvive' has a wrong offset!");
static_assert(offsetof(FDbBattleRecordParam, TotalDamage) == 0x00008C, "Member 'FDbBattleRecordParam::TotalDamage' has a wrong offset!");
static_assert(offsetof(FDbBattleRecordParam, BestDamage) == 0x000090, "Member 'FDbBattleRecordParam::BestDamage' has a wrong offset!");
static_assert(offsetof(FDbBattleRecordParam, AverageDamage) == 0x000094, "Member 'FDbBattleRecordParam::AverageDamage' has a wrong offset!");
static_assert(offsetof(FDbBattleRecordParam, KillCount) == 0x000098, "Member 'FDbBattleRecordParam::KillCount' has a wrong offset!");
static_assert(offsetof(FDbBattleRecordParam, KilledCount) == 0x00009C, "Member 'FDbBattleRecordParam::KilledCount' has a wrong offset!");
static_assert(offsetof(FDbBattleRecordParam, KillRatio) == 0x0000A0, "Member 'FDbBattleRecordParam::KillRatio' has a wrong offset!");
static_assert(offsetof(FDbBattleRecordParam, KillAssistCount) == 0x0000A4, "Member 'FDbBattleRecordParam::KillAssistCount' has a wrong offset!");
static_assert(offsetof(FDbBattleRecordParam, RecoveryAssistCount) == 0x0000A8, "Member 'FDbBattleRecordParam::RecoveryAssistCount' has a wrong offset!");
static_assert(offsetof(FDbBattleRecordParam, CooperateActionCount) == 0x0000AC, "Member 'FDbBattleRecordParam::CooperateActionCount' has a wrong offset!");
static_assert(offsetof(FDbBattleRecordParam, MatchBestPoint) == 0x0000B0, "Member 'FDbBattleRecordParam::MatchBestPoint' has a wrong offset!");
static_assert(offsetof(FDbBattleRecordParam, MatchAveragePoint) == 0x0000B4, "Member 'FDbBattleRecordParam::MatchAveragePoint' has a wrong offset!");
static_assert(offsetof(FDbBattleRecordParam, RescueCount) == 0x0000B8, "Member 'FDbBattleRecordParam::RescueCount' has a wrong offset!");
static_assert(offsetof(FDbBattleRecordParam, AssaultCount) == 0x0000BC, "Member 'FDbBattleRecordParam::AssaultCount' has a wrong offset!");
static_assert(offsetof(FDbBattleRecordParam, DestroyCount) == 0x0000C0, "Member 'FDbBattleRecordParam::DestroyCount' has a wrong offset!");
static_assert(offsetof(FDbBattleRecordParam, BillboardChartRank) == 0x0000C4, "Member 'FDbBattleRecordParam::BillboardChartRank' has a wrong offset!");
static_assert(offsetof(FDbBattleRecordParam, TotalPoint) == 0x0000C8, "Member 'FDbBattleRecordParam::TotalPoint' has a wrong offset!");
static_assert(offsetof(FDbBattleRecordParam, TotalLikeCount) == 0x0000CC, "Member 'FDbBattleRecordParam::TotalLikeCount' has a wrong offset!");
static_assert(offsetof(FDbBattleRecordParam, TotalPvCount) == 0x0000D0, "Member 'FDbBattleRecordParam::TotalPvCount' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbBattleRecordsParam
// 0x0130 (0x0130 - 0x0000)
struct FDbBattleRecordsParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDbBattleRecordParam                   Total;                                             // 0x0008(0x00D8)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<int32, struct FDbBattleRecordParam>      Seasons;                                           // 0x00E0(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbBattleRecordsParam) == 0x000008, "Wrong alignment on FDbBattleRecordsParam");
static_assert(sizeof(FDbBattleRecordsParam) == 0x000130, "Wrong size on FDbBattleRecordsParam");
static_assert(offsetof(FDbBattleRecordsParam, Total) == 0x000008, "Member 'FDbBattleRecordsParam::Total' has a wrong offset!");
static_assert(offsetof(FDbBattleRecordsParam, Seasons) == 0x0000E0, "Member 'FDbBattleRecordsParam::Seasons' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbPlayerParam
// 0x0488 (0x0488 - 0x0000)
struct FDbPlayerParam
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ID;                                                // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformPlayerId;                                  // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataEmblem>              Emblems;                                           // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformPlayerName;                                // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Profile;                                           // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMasterDataCharacter                   Character;                                         // 0x0068(0x00A8)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         VariationCode;                                     // 0x0110(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataCustomizeCostume            Costume;                                           // 0x0118(0x00A0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         AuraLevel;                                         // 0x01B8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AuraDisplayTarget;                                 // 0x01BC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AuraDisplayArea;                                   // 0x01C0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x01C4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMasterDataRankExp                     Rank;                                              // 0x01C8(0x0038)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         RankPoint;                                         // 0x0200(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_204[0x4];                                      // 0x0204(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              LastLoginDateTime;                                 // 0x0208(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFriendStatus                                 EFriendStatus;                                     // 0x0210(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnline;                                           // 0x0211(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_212[0x2];                                      // 0x0212(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BillboardRank;                                     // 0x0214(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BillboardPoint;                                    // 0x0218(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BillboardTodayPoint;                               // 0x021C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideBattleRecord;                                 // 0x0220(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDbBattleRecordsParam                  BattleRecords;                                     // 0x0228(0x0130)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDbAdDataParam                         Ad;                                                // 0x0358(0x00E0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         GuildEmblemCode;                                   // 0x0438(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43C[0x4];                                      // 0x043C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GuildId;                                           // 0x0440(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildSearchId;                                     // 0x0450(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildName;                                         // 0x0460(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildProfile;                                      // 0x0470(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LikeRemains;                                       // 0x0480(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlatformBlock;                                    // 0x0484(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlatformMute;                                     // 0x0485(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_486[0x2];                                      // 0x0486(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbPlayerParam) == 0x000008, "Wrong alignment on FDbPlayerParam");
static_assert(sizeof(FDbPlayerParam) == 0x000488, "Wrong size on FDbPlayerParam");
static_assert(offsetof(FDbPlayerParam, ID) == 0x000008, "Member 'FDbPlayerParam::ID' has a wrong offset!");
static_assert(offsetof(FDbPlayerParam, PlatformPlayerId) == 0x000018, "Member 'FDbPlayerParam::PlatformPlayerId' has a wrong offset!");
static_assert(offsetof(FDbPlayerParam, Emblems) == 0x000028, "Member 'FDbPlayerParam::Emblems' has a wrong offset!");
static_assert(offsetof(FDbPlayerParam, PlayerName) == 0x000038, "Member 'FDbPlayerParam::PlayerName' has a wrong offset!");
static_assert(offsetof(FDbPlayerParam, PlatformPlayerName) == 0x000048, "Member 'FDbPlayerParam::PlatformPlayerName' has a wrong offset!");
static_assert(offsetof(FDbPlayerParam, Profile) == 0x000058, "Member 'FDbPlayerParam::Profile' has a wrong offset!");
static_assert(offsetof(FDbPlayerParam, Character) == 0x000068, "Member 'FDbPlayerParam::Character' has a wrong offset!");
static_assert(offsetof(FDbPlayerParam, VariationCode) == 0x000110, "Member 'FDbPlayerParam::VariationCode' has a wrong offset!");
static_assert(offsetof(FDbPlayerParam, Costume) == 0x000118, "Member 'FDbPlayerParam::Costume' has a wrong offset!");
static_assert(offsetof(FDbPlayerParam, AuraLevel) == 0x0001B8, "Member 'FDbPlayerParam::AuraLevel' has a wrong offset!");
static_assert(offsetof(FDbPlayerParam, AuraDisplayTarget) == 0x0001BC, "Member 'FDbPlayerParam::AuraDisplayTarget' has a wrong offset!");
static_assert(offsetof(FDbPlayerParam, AuraDisplayArea) == 0x0001C0, "Member 'FDbPlayerParam::AuraDisplayArea' has a wrong offset!");
static_assert(offsetof(FDbPlayerParam, Level) == 0x0001C4, "Member 'FDbPlayerParam::Level' has a wrong offset!");
static_assert(offsetof(FDbPlayerParam, Rank) == 0x0001C8, "Member 'FDbPlayerParam::Rank' has a wrong offset!");
static_assert(offsetof(FDbPlayerParam, RankPoint) == 0x000200, "Member 'FDbPlayerParam::RankPoint' has a wrong offset!");
static_assert(offsetof(FDbPlayerParam, LastLoginDateTime) == 0x000208, "Member 'FDbPlayerParam::LastLoginDateTime' has a wrong offset!");
static_assert(offsetof(FDbPlayerParam, EFriendStatus) == 0x000210, "Member 'FDbPlayerParam::EFriendStatus' has a wrong offset!");
static_assert(offsetof(FDbPlayerParam, bOnline) == 0x000211, "Member 'FDbPlayerParam::bOnline' has a wrong offset!");
static_assert(offsetof(FDbPlayerParam, BillboardRank) == 0x000214, "Member 'FDbPlayerParam::BillboardRank' has a wrong offset!");
static_assert(offsetof(FDbPlayerParam, BillboardPoint) == 0x000218, "Member 'FDbPlayerParam::BillboardPoint' has a wrong offset!");
static_assert(offsetof(FDbPlayerParam, BillboardTodayPoint) == 0x00021C, "Member 'FDbPlayerParam::BillboardTodayPoint' has a wrong offset!");
static_assert(offsetof(FDbPlayerParam, bHideBattleRecord) == 0x000220, "Member 'FDbPlayerParam::bHideBattleRecord' has a wrong offset!");
static_assert(offsetof(FDbPlayerParam, BattleRecords) == 0x000228, "Member 'FDbPlayerParam::BattleRecords' has a wrong offset!");
static_assert(offsetof(FDbPlayerParam, Ad) == 0x000358, "Member 'FDbPlayerParam::Ad' has a wrong offset!");
static_assert(offsetof(FDbPlayerParam, GuildEmblemCode) == 0x000438, "Member 'FDbPlayerParam::GuildEmblemCode' has a wrong offset!");
static_assert(offsetof(FDbPlayerParam, GuildId) == 0x000440, "Member 'FDbPlayerParam::GuildId' has a wrong offset!");
static_assert(offsetof(FDbPlayerParam, GuildSearchId) == 0x000450, "Member 'FDbPlayerParam::GuildSearchId' has a wrong offset!");
static_assert(offsetof(FDbPlayerParam, GuildName) == 0x000460, "Member 'FDbPlayerParam::GuildName' has a wrong offset!");
static_assert(offsetof(FDbPlayerParam, GuildProfile) == 0x000470, "Member 'FDbPlayerParam::GuildProfile' has a wrong offset!");
static_assert(offsetof(FDbPlayerParam, LikeRemains) == 0x000480, "Member 'FDbPlayerParam::LikeRemains' has a wrong offset!");
static_assert(offsetof(FDbPlayerParam, bPlatformBlock) == 0x000484, "Member 'FDbPlayerParam::bPlatformBlock' has a wrong offset!");
static_assert(offsetof(FDbPlayerParam, bPlatformMute) == 0x000485, "Member 'FDbPlayerParam::bPlatformMute' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbPlayerListParam
// 0x0758 (0x0758 - 0x0000)
struct FDbPlayerListParam final
{
public:
	uint8                                         Pad_0[0x6A8];                                      // 0x0000(0x06A8)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FDbPlayerParam>    Players;                                           // 0x06A8(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FString, struct FDbMyCharacterParam> Customizes;                                        // 0x06F8(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_748[0x10];                                     // 0x0748(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbPlayerListParam) == 0x000008, "Wrong alignment on FDbPlayerListParam");
static_assert(sizeof(FDbPlayerListParam) == 0x000758, "Wrong size on FDbPlayerListParam");
static_assert(offsetof(FDbPlayerListParam, Players) == 0x0006A8, "Member 'FDbPlayerListParam::Players' has a wrong offset!");
static_assert(offsetof(FDbPlayerListParam, Customizes) == 0x0006F8, "Member 'FDbPlayerListParam::Customizes' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbAdParam
// 0x0060 (0x0060 - 0x0000)
struct FDbAdParam final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UnlockedAdSpaceCount;                              // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDbAdDataParam>                 AdList;                                            // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDbAdDataParam>                 MainMenAdList;                                     // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x20];                                      // 0x0040(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbAdParam) == 0x000008, "Wrong alignment on FDbAdParam");
static_assert(sizeof(FDbAdParam) == 0x000060, "Wrong size on FDbAdParam");
static_assert(offsetof(FDbAdParam, UnlockedAdSpaceCount) == 0x000018, "Member 'FDbAdParam::UnlockedAdSpaceCount' has a wrong offset!");
static_assert(offsetof(FDbAdParam, AdList) == 0x000020, "Member 'FDbAdParam::AdList' has a wrong offset!");
static_assert(offsetof(FDbAdParam, MainMenAdList) == 0x000030, "Member 'FDbAdParam::MainMenAdList' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbBattleParam
// 0x00B8 (0x00B8 - 0x0000)
struct FDbBattleParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameId;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0xA0];                                      // 0x0018(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbBattleParam) == 0x000008, "Wrong alignment on FDbBattleParam");
static_assert(sizeof(FDbBattleParam) == 0x0000B8, "Wrong size on FDbBattleParam");
static_assert(offsetof(FDbBattleParam, GameId) == 0x000008, "Member 'FDbBattleParam::GameId' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbRecommendNoticeParam
// 0x0060 (0x0098 - 0x0038)
struct FDbRecommendNoticeParam final : public FMasterDataRecommendNotice
{
public:
	bool                                          bHasRecommendNotice;                               // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerId;                                          // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildId;                                           // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildName;                                         // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   NoticeText;                                        // 0x0080(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbRecommendNoticeParam) == 0x000008, "Wrong alignment on FDbRecommendNoticeParam");
static_assert(sizeof(FDbRecommendNoticeParam) == 0x000098, "Wrong size on FDbRecommendNoticeParam");
static_assert(offsetof(FDbRecommendNoticeParam, bHasRecommendNotice) == 0x000038, "Member 'FDbRecommendNoticeParam::bHasRecommendNotice' has a wrong offset!");
static_assert(offsetof(FDbRecommendNoticeParam, PlayerId) == 0x000040, "Member 'FDbRecommendNoticeParam::PlayerId' has a wrong offset!");
static_assert(offsetof(FDbRecommendNoticeParam, PlayerName) == 0x000050, "Member 'FDbRecommendNoticeParam::PlayerName' has a wrong offset!");
static_assert(offsetof(FDbRecommendNoticeParam, GuildId) == 0x000060, "Member 'FDbRecommendNoticeParam::GuildId' has a wrong offset!");
static_assert(offsetof(FDbRecommendNoticeParam, GuildName) == 0x000070, "Member 'FDbRecommendNoticeParam::GuildName' has a wrong offset!");
static_assert(offsetof(FDbRecommendNoticeParam, NoticeText) == 0x000080, "Member 'FDbRecommendNoticeParam::NoticeText' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbDropParam
// 0x0010 (0x0010 - 0x0000)
struct FDbDropParam final
{
public:
	int32                                         ItemCategoryCode;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCode;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DropType;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbDropParam) == 0x000004, "Wrong alignment on FDbDropParam");
static_assert(sizeof(FDbDropParam) == 0x000010, "Wrong size on FDbDropParam");
static_assert(offsetof(FDbDropParam, ItemCategoryCode) == 0x000000, "Member 'FDbDropParam::ItemCategoryCode' has a wrong offset!");
static_assert(offsetof(FDbDropParam, ItemCode) == 0x000004, "Member 'FDbDropParam::ItemCode' has a wrong offset!");
static_assert(offsetof(FDbDropParam, ItemNum) == 0x000008, "Member 'FDbDropParam::ItemNum' has a wrong offset!");
static_assert(offsetof(FDbDropParam, DropType) == 0x00000C, "Member 'FDbDropParam::DropType' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbBonusParam
// 0x0008 (0x0060 - 0x0058)
struct FDbBonusParam final : public FMasterDataBonusExp
{
public:
	int32                                         Value;                                             // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbBonusParam) == 0x000008, "Wrong alignment on FDbBonusParam");
static_assert(sizeof(FDbBonusParam) == 0x000060, "Wrong size on FDbBonusParam");
static_assert(offsetof(FDbBonusParam, Value) == 0x000058, "Member 'FDbBonusParam::Value' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbBillboardVoterParam
// 0x00F8 (0x00F8 - 0x0000)
struct FDbBillboardVoterParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	ELikeType                                     ELikeType;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerId;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformPlayerId;                                  // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMasterDataCharacter                   Character;                                         // 0x0040(0x00A8)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDateTime                              SentLikeAt;                                        // 0x00E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TodayLikedPlayerCount;                             // 0x00F0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TodayPoint;                                        // 0x00F4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbBillboardVoterParam) == 0x000008, "Wrong alignment on FDbBillboardVoterParam");
static_assert(sizeof(FDbBillboardVoterParam) == 0x0000F8, "Wrong size on FDbBillboardVoterParam");
static_assert(offsetof(FDbBillboardVoterParam, ELikeType) == 0x000008, "Member 'FDbBillboardVoterParam::ELikeType' has a wrong offset!");
static_assert(offsetof(FDbBillboardVoterParam, PlayerId) == 0x000010, "Member 'FDbBillboardVoterParam::PlayerId' has a wrong offset!");
static_assert(offsetof(FDbBillboardVoterParam, PlayerName) == 0x000020, "Member 'FDbBillboardVoterParam::PlayerName' has a wrong offset!");
static_assert(offsetof(FDbBillboardVoterParam, PlatformPlayerId) == 0x000030, "Member 'FDbBillboardVoterParam::PlatformPlayerId' has a wrong offset!");
static_assert(offsetof(FDbBillboardVoterParam, Character) == 0x000040, "Member 'FDbBillboardVoterParam::Character' has a wrong offset!");
static_assert(offsetof(FDbBillboardVoterParam, SentLikeAt) == 0x0000E8, "Member 'FDbBillboardVoterParam::SentLikeAt' has a wrong offset!");
static_assert(offsetof(FDbBillboardVoterParam, TodayLikedPlayerCount) == 0x0000F0, "Member 'FDbBillboardVoterParam::TodayLikedPlayerCount' has a wrong offset!");
static_assert(offsetof(FDbBillboardVoterParam, TodayPoint) == 0x0000F4, "Member 'FDbBillboardVoterParam::TodayPoint' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbBillboardChartParam
// 0x0020 (0x0020 - 0x0000)
struct FDbBillboardChartParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Total;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TodayTotal;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDbBillboardVoterParam>         VoterList;                                         // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbBillboardChartParam) == 0x000008, "Wrong alignment on FDbBillboardChartParam");
static_assert(sizeof(FDbBillboardChartParam) == 0x000020, "Wrong size on FDbBillboardChartParam");
static_assert(offsetof(FDbBillboardChartParam, Total) == 0x000008, "Member 'FDbBillboardChartParam::Total' has a wrong offset!");
static_assert(offsetof(FDbBillboardChartParam, TodayTotal) == 0x00000C, "Member 'FDbBillboardChartParam::TodayTotal' has a wrong offset!");
static_assert(offsetof(FDbBillboardChartParam, VoterList) == 0x000010, "Member 'FDbBillboardChartParam::VoterList' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbCharactersParam
// 0x2F58 (0x2F58 - 0x0000)
struct FDbCharactersParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentCharacterCode;                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0xC];                                        // 0x000C(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDbMyCharacterParam>            PlayableCharacters;                                // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x2F30];                                    // 0x0028(0x2F30)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbCharactersParam) == 0x000008, "Wrong alignment on FDbCharactersParam");
static_assert(sizeof(FDbCharactersParam) == 0x002F58, "Wrong size on FDbCharactersParam");
static_assert(offsetof(FDbCharactersParam, CurrentCharacterCode) == 0x000008, "Member 'FDbCharactersParam::CurrentCharacterCode' has a wrong offset!");
static_assert(offsetof(FDbCharactersParam, PlayableCharacters) == 0x000018, "Member 'FDbCharactersParam::PlayableCharacters' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbChatLogParam
// 0x0058 (0x0058 - 0x0000)
struct FDbChatLogParam final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerId;                                          // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OnlineId;                                          // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelf;                                             // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Time;                                              // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbChatLogParam) == 0x000008, "Wrong alignment on FDbChatLogParam");
static_assert(sizeof(FDbChatLogParam) == 0x000058, "Wrong size on FDbChatLogParam");
static_assert(offsetof(FDbChatLogParam, Text) == 0x000000, "Member 'FDbChatLogParam::Text' has a wrong offset!");
static_assert(offsetof(FDbChatLogParam, PlayerName) == 0x000010, "Member 'FDbChatLogParam::PlayerName' has a wrong offset!");
static_assert(offsetof(FDbChatLogParam, PlayerId) == 0x000020, "Member 'FDbChatLogParam::PlayerId' has a wrong offset!");
static_assert(offsetof(FDbChatLogParam, OnlineId) == 0x000030, "Member 'FDbChatLogParam::OnlineId' has a wrong offset!");
static_assert(offsetof(FDbChatLogParam, bSelf) == 0x000040, "Member 'FDbChatLogParam::bSelf' has a wrong offset!");
static_assert(offsetof(FDbChatLogParam, Time) == 0x000048, "Member 'FDbChatLogParam::Time' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbEventParam
// 0x00F0 (0x0178 - 0x0088)
struct FDbEventParam final : public FMasterDataEvent
{
public:
	int32                                         Rank;                                              // 0x0088(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPoint;                                        // 0x008C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentPoint;                                      // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDbEventDropItem>               DropTable;                                         // 0x0098(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMasterDataBonusExp                    Bonus;                                             // 0x00A8(0x0058)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FDbSpecialEffectItem>           SpecialEffect;                                     // 0x0100(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMasterDataCurrency                    Point;                                             // 0x0110(0x0068)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbEventParam) == 0x000008, "Wrong alignment on FDbEventParam");
static_assert(sizeof(FDbEventParam) == 0x000178, "Wrong size on FDbEventParam");
static_assert(offsetof(FDbEventParam, Rank) == 0x000088, "Member 'FDbEventParam::Rank' has a wrong offset!");
static_assert(offsetof(FDbEventParam, TotalPoint) == 0x00008C, "Member 'FDbEventParam::TotalPoint' has a wrong offset!");
static_assert(offsetof(FDbEventParam, CurrentPoint) == 0x000090, "Member 'FDbEventParam::CurrentPoint' has a wrong offset!");
static_assert(offsetof(FDbEventParam, DropTable) == 0x000098, "Member 'FDbEventParam::DropTable' has a wrong offset!");
static_assert(offsetof(FDbEventParam, Bonus) == 0x0000A8, "Member 'FDbEventParam::Bonus' has a wrong offset!");
static_assert(offsetof(FDbEventParam, SpecialEffect) == 0x000100, "Member 'FDbEventParam::SpecialEffect' has a wrong offset!");
static_assert(offsetof(FDbEventParam, Point) == 0x000110, "Member 'FDbEventParam::Point' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbEventsParam
// 0x0010 (0x0010 - 0x0000)
struct FDbEventsParam final
{
public:
	TArray<struct FDbEventParam>                  EventList;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbEventsParam) == 0x000008, "Wrong alignment on FDbEventsParam");
static_assert(sizeof(FDbEventsParam) == 0x000010, "Wrong size on FDbEventsParam");
static_assert(offsetof(FDbEventsParam, EventList) == 0x000000, "Member 'FDbEventsParam::EventList' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbGuildRecord
// 0x0060 (0x0060 - 0x0000)
struct FDbGuildRecord final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ID;                                                // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuildActivity                                EActivityType;                                     // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerName;                                        // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformPlayerId;                                  // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Detail;                                            // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ActAt;                                             // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LikeCount;                                         // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LikeRemains;                                       // 0x005C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbGuildRecord) == 0x000008, "Wrong alignment on FDbGuildRecord");
static_assert(sizeof(FDbGuildRecord) == 0x000060, "Wrong size on FDbGuildRecord");
static_assert(offsetof(FDbGuildRecord, ID) == 0x000008, "Member 'FDbGuildRecord::ID' has a wrong offset!");
static_assert(offsetof(FDbGuildRecord, EActivityType) == 0x000018, "Member 'FDbGuildRecord::EActivityType' has a wrong offset!");
static_assert(offsetof(FDbGuildRecord, PlayerName) == 0x000020, "Member 'FDbGuildRecord::PlayerName' has a wrong offset!");
static_assert(offsetof(FDbGuildRecord, PlatformPlayerId) == 0x000030, "Member 'FDbGuildRecord::PlatformPlayerId' has a wrong offset!");
static_assert(offsetof(FDbGuildRecord, Detail) == 0x000040, "Member 'FDbGuildRecord::Detail' has a wrong offset!");
static_assert(offsetof(FDbGuildRecord, ActAt) == 0x000050, "Member 'FDbGuildRecord::ActAt' has a wrong offset!");
static_assert(offsetof(FDbGuildRecord, LikeCount) == 0x000058, "Member 'FDbGuildRecord::LikeCount' has a wrong offset!");
static_assert(offsetof(FDbGuildRecord, LikeRemains) == 0x00005C, "Member 'FDbGuildRecord::LikeRemains' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbGuildFacilityParam
// 0x0040 (0x0040 - 0x0000)
struct FDbGuildFacilityParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataGuildInstitution            LevelInfo;                                         // 0x0008(0x0028)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         Coin;                                              // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextLevelCoin;                                     // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Correction;                                        // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbGuildFacilityParam) == 0x000008, "Wrong alignment on FDbGuildFacilityParam");
static_assert(sizeof(FDbGuildFacilityParam) == 0x000040, "Wrong size on FDbGuildFacilityParam");
static_assert(offsetof(FDbGuildFacilityParam, LevelInfo) == 0x000008, "Member 'FDbGuildFacilityParam::LevelInfo' has a wrong offset!");
static_assert(offsetof(FDbGuildFacilityParam, Coin) == 0x000030, "Member 'FDbGuildFacilityParam::Coin' has a wrong offset!");
static_assert(offsetof(FDbGuildFacilityParam, NextLevelCoin) == 0x000034, "Member 'FDbGuildFacilityParam::NextLevelCoin' has a wrong offset!");
static_assert(offsetof(FDbGuildFacilityParam, Correction) == 0x000038, "Member 'FDbGuildFacilityParam::Correction' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbGuildInfoParam
// 0x0158 (0x0158 - 0x0000)
struct FDbGuildInfoParam
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataGuildEmblem                 Emblem;                                            // 0x0008(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SearchId;                                          // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exp;                                               // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Profile;                                           // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuildPolicy                                  EPolicy;                                           // 0x0070(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuildJoinRule                                EJoinRule;                                         // 0x0071(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MemberCount;                                       // 0x0074(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMemberCount;                                    // 0x0078(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Fund;                                              // 0x007C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BestRecordSeasonId;                                // 0x0080(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BestRanking;                                       // 0x0084(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LastActiveAt;                                      // 0x0088(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMasterDataMGuildLeagues               League;                                            // 0x0090(0x0038)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         SeasonRank;                                        // 0x00C8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonPoint;                                       // 0x00CC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaderName;                                        // 0x00D0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaderPlatformPlayerId;                            // 0x00E0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplied;                                          // 0x00F0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EGuildFacility, struct FDbGuildFacilityParam> Facilities;                                        // 0x00F8(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FDbGuildMemberParam>            MemberList;                                        // 0x0148(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbGuildInfoParam) == 0x000008, "Wrong alignment on FDbGuildInfoParam");
static_assert(sizeof(FDbGuildInfoParam) == 0x000158, "Wrong size on FDbGuildInfoParam");
static_assert(offsetof(FDbGuildInfoParam, Emblem) == 0x000008, "Member 'FDbGuildInfoParam::Emblem' has a wrong offset!");
static_assert(offsetof(FDbGuildInfoParam, ID) == 0x000028, "Member 'FDbGuildInfoParam::ID' has a wrong offset!");
static_assert(offsetof(FDbGuildInfoParam, SearchId) == 0x000038, "Member 'FDbGuildInfoParam::SearchId' has a wrong offset!");
static_assert(offsetof(FDbGuildInfoParam, Level) == 0x000048, "Member 'FDbGuildInfoParam::Level' has a wrong offset!");
static_assert(offsetof(FDbGuildInfoParam, Exp) == 0x00004C, "Member 'FDbGuildInfoParam::Exp' has a wrong offset!");
static_assert(offsetof(FDbGuildInfoParam, Name) == 0x000050, "Member 'FDbGuildInfoParam::Name' has a wrong offset!");
static_assert(offsetof(FDbGuildInfoParam, Profile) == 0x000060, "Member 'FDbGuildInfoParam::Profile' has a wrong offset!");
static_assert(offsetof(FDbGuildInfoParam, EPolicy) == 0x000070, "Member 'FDbGuildInfoParam::EPolicy' has a wrong offset!");
static_assert(offsetof(FDbGuildInfoParam, EJoinRule) == 0x000071, "Member 'FDbGuildInfoParam::EJoinRule' has a wrong offset!");
static_assert(offsetof(FDbGuildInfoParam, MemberCount) == 0x000074, "Member 'FDbGuildInfoParam::MemberCount' has a wrong offset!");
static_assert(offsetof(FDbGuildInfoParam, MaxMemberCount) == 0x000078, "Member 'FDbGuildInfoParam::MaxMemberCount' has a wrong offset!");
static_assert(offsetof(FDbGuildInfoParam, Fund) == 0x00007C, "Member 'FDbGuildInfoParam::Fund' has a wrong offset!");
static_assert(offsetof(FDbGuildInfoParam, BestRecordSeasonId) == 0x000080, "Member 'FDbGuildInfoParam::BestRecordSeasonId' has a wrong offset!");
static_assert(offsetof(FDbGuildInfoParam, BestRanking) == 0x000084, "Member 'FDbGuildInfoParam::BestRanking' has a wrong offset!");
static_assert(offsetof(FDbGuildInfoParam, LastActiveAt) == 0x000088, "Member 'FDbGuildInfoParam::LastActiveAt' has a wrong offset!");
static_assert(offsetof(FDbGuildInfoParam, League) == 0x000090, "Member 'FDbGuildInfoParam::League' has a wrong offset!");
static_assert(offsetof(FDbGuildInfoParam, SeasonRank) == 0x0000C8, "Member 'FDbGuildInfoParam::SeasonRank' has a wrong offset!");
static_assert(offsetof(FDbGuildInfoParam, SeasonPoint) == 0x0000CC, "Member 'FDbGuildInfoParam::SeasonPoint' has a wrong offset!");
static_assert(offsetof(FDbGuildInfoParam, LeaderName) == 0x0000D0, "Member 'FDbGuildInfoParam::LeaderName' has a wrong offset!");
static_assert(offsetof(FDbGuildInfoParam, LeaderPlatformPlayerId) == 0x0000E0, "Member 'FDbGuildInfoParam::LeaderPlatformPlayerId' has a wrong offset!");
static_assert(offsetof(FDbGuildInfoParam, bApplied) == 0x0000F0, "Member 'FDbGuildInfoParam::bApplied' has a wrong offset!");
static_assert(offsetof(FDbGuildInfoParam, Facilities) == 0x0000F8, "Member 'FDbGuildInfoParam::Facilities' has a wrong offset!");
static_assert(offsetof(FDbGuildInfoParam, MemberList) == 0x000148, "Member 'FDbGuildInfoParam::MemberList' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbMyGuildInfoParam
// 0x0048 (0x01A0 - 0x0158)
struct FDbMyGuildInfoParam final : public FDbGuildInfoParam
{
public:
	EGuildPosition                                EPosition;                                         // 0x0158(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BoostStockCount;                                   // 0x015C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostPower;                                        // 0x0160(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              BoostExpireAt;                                     // 0x0168(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewMember;                                        // 0x0170(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewNotice;                                        // 0x0171(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_172[0x6];                                      // 0x0172(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDbGuildMemberParam>            AppliedPlayerList;                                 // 0x0178(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDbGuildRecord>                 Records;                                           // 0x0188(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bNgWordCheckErrorName;                             // 0x0198(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNgWordCheckErrorIntroduction;                     // 0x0199(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19A[0x6];                                      // 0x019A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbMyGuildInfoParam) == 0x000008, "Wrong alignment on FDbMyGuildInfoParam");
static_assert(sizeof(FDbMyGuildInfoParam) == 0x0001A0, "Wrong size on FDbMyGuildInfoParam");
static_assert(offsetof(FDbMyGuildInfoParam, EPosition) == 0x000158, "Member 'FDbMyGuildInfoParam::EPosition' has a wrong offset!");
static_assert(offsetof(FDbMyGuildInfoParam, BoostStockCount) == 0x00015C, "Member 'FDbMyGuildInfoParam::BoostStockCount' has a wrong offset!");
static_assert(offsetof(FDbMyGuildInfoParam, BoostPower) == 0x000160, "Member 'FDbMyGuildInfoParam::BoostPower' has a wrong offset!");
static_assert(offsetof(FDbMyGuildInfoParam, BoostExpireAt) == 0x000168, "Member 'FDbMyGuildInfoParam::BoostExpireAt' has a wrong offset!");
static_assert(offsetof(FDbMyGuildInfoParam, bNewMember) == 0x000170, "Member 'FDbMyGuildInfoParam::bNewMember' has a wrong offset!");
static_assert(offsetof(FDbMyGuildInfoParam, bNewNotice) == 0x000171, "Member 'FDbMyGuildInfoParam::bNewNotice' has a wrong offset!");
static_assert(offsetof(FDbMyGuildInfoParam, AppliedPlayerList) == 0x000178, "Member 'FDbMyGuildInfoParam::AppliedPlayerList' has a wrong offset!");
static_assert(offsetof(FDbMyGuildInfoParam, Records) == 0x000188, "Member 'FDbMyGuildInfoParam::Records' has a wrong offset!");
static_assert(offsetof(FDbMyGuildInfoParam, bNgWordCheckErrorName) == 0x000198, "Member 'FDbMyGuildInfoParam::bNgWordCheckErrorName' has a wrong offset!");
static_assert(offsetof(FDbMyGuildInfoParam, bNgWordCheckErrorIntroduction) == 0x000199, "Member 'FDbMyGuildInfoParam::bNgWordCheckErrorIntroduction' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbGuildParam
// 0x01C8 (0x01C8 - 0x0000)
struct FDbGuildParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDbMyGuildInfoParam                    MyGuild;                                           // 0x0008(0x01A0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FDbGuildInfoParam>              SearchedGuilds;                                    // 0x01A8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B8[0x10];                                     // 0x01B8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbGuildParam) == 0x000008, "Wrong alignment on FDbGuildParam");
static_assert(sizeof(FDbGuildParam) == 0x0001C8, "Wrong size on FDbGuildParam");
static_assert(offsetof(FDbGuildParam, MyGuild) == 0x000008, "Member 'FDbGuildParam::MyGuild' has a wrong offset!");
static_assert(offsetof(FDbGuildParam, SearchedGuilds) == 0x0001A8, "Member 'FDbGuildParam::SearchedGuilds' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbLotteryResult
// 0x0028 (0x0028 - 0x0000)
struct FDbLotteryResult final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LogId;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDbLotteryResultItem>           Items;                                             // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbLotteryResult) == 0x000008, "Wrong alignment on FDbLotteryResult");
static_assert(sizeof(FDbLotteryResult) == 0x000028, "Wrong size on FDbLotteryResult");
static_assert(offsetof(FDbLotteryResult, Code) == 0x000000, "Member 'FDbLotteryResult::Code' has a wrong offset!");
static_assert(offsetof(FDbLotteryResult, LogId) == 0x000008, "Member 'FDbLotteryResult::LogId' has a wrong offset!");
static_assert(offsetof(FDbLotteryResult, Items) == 0x000018, "Member 'FDbLotteryResult::Items' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbLotteryHistories
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FDbLotteryHistories final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxPageCount;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x54];                                       // 0x000C(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbLotteryHistories) == 0x000008, "Wrong alignment on FDbLotteryHistories");
static_assert(sizeof(FDbLotteryHistories) == 0x000060, "Wrong size on FDbLotteryHistories");
static_assert(offsetof(FDbLotteryHistories, MaxPageCount) == 0x000008, "Member 'FDbLotteryHistories::MaxPageCount' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbLotteriesParam
// 0x0190 (0x0190 - 0x0000)
struct FDbLotteriesParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDbLotteryParam>                Lotteries;                                         // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDbLotteryResult                       Result;                                            // 0x0018(0x0028)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDbLotteryHistories                    Histories;                                         // 0x0040(0x0060)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_A0[0xF0];                                      // 0x00A0(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbLotteriesParam) == 0x000008, "Wrong alignment on FDbLotteriesParam");
static_assert(sizeof(FDbLotteriesParam) == 0x000190, "Wrong size on FDbLotteriesParam");
static_assert(offsetof(FDbLotteriesParam, Lotteries) == 0x000008, "Member 'FDbLotteriesParam::Lotteries' has a wrong offset!");
static_assert(offsetof(FDbLotteriesParam, Result) == 0x000018, "Member 'FDbLotteriesParam::Result' has a wrong offset!");
static_assert(offsetof(FDbLotteriesParam, Histories) == 0x000040, "Member 'FDbLotteriesParam::Histories' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbInventoryParam
// 0x0018 (0x0018 - 0x0000)
struct FDbInventoryParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDbItemStockParam>              Stocks;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbInventoryParam) == 0x000008, "Wrong alignment on FDbInventoryParam");
static_assert(sizeof(FDbInventoryParam) == 0x000018, "Wrong size on FDbInventoryParam");
static_assert(offsetof(FDbInventoryParam, Stocks) == 0x000008, "Member 'FDbInventoryParam::Stocks' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbTicketParam
// 0x0008 (0x0490 - 0x0488)
struct FDbTicketParam final : public FDbItemCategoryParam
{
public:
	int32                                         Count;                                             // 0x0488(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48C[0x4];                                      // 0x048C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbTicketParam) == 0x000008, "Wrong alignment on FDbTicketParam");
static_assert(sizeof(FDbTicketParam) == 0x000490, "Wrong size on FDbTicketParam");
static_assert(offsetof(FDbTicketParam, Count) == 0x000488, "Member 'FDbTicketParam::Count' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbLotteryHistory
// 0x04A8 (0x04A8 - 0x0000)
struct FDbLotteryHistory final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDbItemCategoryParam                   Item;                                              // 0x0010(0x0488)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0498(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49C[0x4];                                      // 0x049C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              ReceivedAt;                                        // 0x04A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbLotteryHistory) == 0x000008, "Wrong alignment on FDbLotteryHistory");
static_assert(sizeof(FDbLotteryHistory) == 0x0004A8, "Wrong size on FDbLotteryHistory");
static_assert(offsetof(FDbLotteryHistory, Code) == 0x000008, "Member 'FDbLotteryHistory::Code' has a wrong offset!");
static_assert(offsetof(FDbLotteryHistory, Item) == 0x000010, "Member 'FDbLotteryHistory::Item' has a wrong offset!");
static_assert(offsetof(FDbLotteryHistory, ItemCount) == 0x000498, "Member 'FDbLotteryHistory::ItemCount' has a wrong offset!");
static_assert(offsetof(FDbLotteryHistory, ReceivedAt) == 0x0004A0, "Member 'FDbLotteryHistory::ReceivedAt' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbGameModeParam
// 0x0010 (0x0058 - 0x0048)
struct FDbGameModeParam final : public FMasterDataGameMode
{
public:
	TArray<struct FMasterDataScore>               Scores;                                            // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbGameModeParam) == 0x000008, "Wrong alignment on FDbGameModeParam");
static_assert(sizeof(FDbGameModeParam) == 0x000058, "Wrong size on FDbGameModeParam");
static_assert(offsetof(FDbGameModeParam, Scores) == 0x000048, "Member 'FDbGameModeParam::Scores' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbPlayModeParam
// 0x00A8 (0x0128 - 0x0080)
struct FDbPlayModeParam final : public FMasterDataPlayMode
{
public:
	struct FDbGameModeParam                       GameModeParam;                                     // 0x0080(0x0058)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMasterDataBattleStage                 BattleStage;                                       // 0x00D8(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbPlayModeParam) == 0x000008, "Wrong alignment on FDbPlayModeParam");
static_assert(sizeof(FDbPlayModeParam) == 0x000128, "Wrong size on FDbPlayModeParam");
static_assert(offsetof(FDbPlayModeParam, GameModeParam) == 0x000080, "Member 'FDbPlayModeParam::GameModeParam' has a wrong offset!");
static_assert(offsetof(FDbPlayModeParam, BattleStage) == 0x0000D8, "Member 'FDbPlayModeParam::BattleStage' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbSquadMemberParam
// 0x0010 (0x0498 - 0x0488)
struct FDbSquadMemberParam final : public FDbPlayerParam
{
public:
	bool                                          bSquadLeader;                                      // 0x0488(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBattleReady;                                      // 0x0489(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVoiceChatEnabled;                                 // 0x048A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48B[0x1];                                      // 0x048B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         battleSequence;                                    // 0x048C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCpuPlayer;                                        // 0x0490(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_491[0x7];                                      // 0x0491(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbSquadMemberParam) == 0x000008, "Wrong alignment on FDbSquadMemberParam");
static_assert(sizeof(FDbSquadMemberParam) == 0x000498, "Wrong size on FDbSquadMemberParam");
static_assert(offsetof(FDbSquadMemberParam, bSquadLeader) == 0x000488, "Member 'FDbSquadMemberParam::bSquadLeader' has a wrong offset!");
static_assert(offsetof(FDbSquadMemberParam, bBattleReady) == 0x000489, "Member 'FDbSquadMemberParam::bBattleReady' has a wrong offset!");
static_assert(offsetof(FDbSquadMemberParam, bVoiceChatEnabled) == 0x00048A, "Member 'FDbSquadMemberParam::bVoiceChatEnabled' has a wrong offset!");
static_assert(offsetof(FDbSquadMemberParam, battleSequence) == 0x00048C, "Member 'FDbSquadMemberParam::battleSequence' has a wrong offset!");
static_assert(offsetof(FDbSquadMemberParam, bCpuPlayer) == 0x000490, "Member 'FDbSquadMemberParam::bCpuPlayer' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbMatchingSquadInfoParam
// 0x0520 (0x0520 - 0x0000)
struct FDbMatchingSquadInfoParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ID;                                                // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayMode;                                          // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDbSquadMemberParam>            MemberList;                                        // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         BattleReadyMemberCount;                            // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoiceChatEnabledMemberCount;                       // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoCharacterDuplicatedError;                       // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CpuCharacterList;                                  // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 CpuCostumeList;                                    // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SquadNo;                                           // 0x0070(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4AC];                                     // 0x0074(0x04AC)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbMatchingSquadInfoParam) == 0x000008, "Wrong alignment on FDbMatchingSquadInfoParam");
static_assert(sizeof(FDbMatchingSquadInfoParam) == 0x000520, "Wrong size on FDbMatchingSquadInfoParam");
static_assert(offsetof(FDbMatchingSquadInfoParam, ID) == 0x000008, "Member 'FDbMatchingSquadInfoParam::ID' has a wrong offset!");
static_assert(offsetof(FDbMatchingSquadInfoParam, Password) == 0x000018, "Member 'FDbMatchingSquadInfoParam::Password' has a wrong offset!");
static_assert(offsetof(FDbMatchingSquadInfoParam, PlayMode) == 0x000028, "Member 'FDbMatchingSquadInfoParam::PlayMode' has a wrong offset!");
static_assert(offsetof(FDbMatchingSquadInfoParam, MemberList) == 0x000030, "Member 'FDbMatchingSquadInfoParam::MemberList' has a wrong offset!");
static_assert(offsetof(FDbMatchingSquadInfoParam, BattleReadyMemberCount) == 0x000040, "Member 'FDbMatchingSquadInfoParam::BattleReadyMemberCount' has a wrong offset!");
static_assert(offsetof(FDbMatchingSquadInfoParam, VoiceChatEnabledMemberCount) == 0x000044, "Member 'FDbMatchingSquadInfoParam::VoiceChatEnabledMemberCount' has a wrong offset!");
static_assert(offsetof(FDbMatchingSquadInfoParam, bNoCharacterDuplicatedError) == 0x000048, "Member 'FDbMatchingSquadInfoParam::bNoCharacterDuplicatedError' has a wrong offset!");
static_assert(offsetof(FDbMatchingSquadInfoParam, CpuCharacterList) == 0x000050, "Member 'FDbMatchingSquadInfoParam::CpuCharacterList' has a wrong offset!");
static_assert(offsetof(FDbMatchingSquadInfoParam, CpuCostumeList) == 0x000060, "Member 'FDbMatchingSquadInfoParam::CpuCostumeList' has a wrong offset!");
static_assert(offsetof(FDbMatchingSquadInfoParam, SquadNo) == 0x000070, "Member 'FDbMatchingSquadInfoParam::SquadNo' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbInvitingInfoParam
// 0x0040 (0x0040 - 0x0000)
struct FDbInvitingInfoParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ID;                                                // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerId;                                          // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              InvitedAt;                                         // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbInvitingInfoParam) == 0x000008, "Wrong alignment on FDbInvitingInfoParam");
static_assert(sizeof(FDbInvitingInfoParam) == 0x000040, "Wrong size on FDbInvitingInfoParam");
static_assert(offsetof(FDbInvitingInfoParam, ID) == 0x000008, "Member 'FDbInvitingInfoParam::ID' has a wrong offset!");
static_assert(offsetof(FDbInvitingInfoParam, PlayerId) == 0x000018, "Member 'FDbInvitingInfoParam::PlayerId' has a wrong offset!");
static_assert(offsetof(FDbInvitingInfoParam, InvitedAt) == 0x000028, "Member 'FDbInvitingInfoParam::InvitedAt' has a wrong offset!");
static_assert(offsetof(FDbInvitingInfoParam, PlayerName) == 0x000030, "Member 'FDbInvitingInfoParam::PlayerName' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbCustomMatchingRoomParam
// 0x0008 (0x0010 - 0x0008)
struct FDbCustomMatchingRoomParam final : public FDbCustomMatchingBaseParam
{
public:
	int32                                         CurrentPlayModeCode;                               // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHiddenIdFlag;                                     // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowAllChat;                                     // 0x000D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbCustomMatchingRoomParam) == 0x000008, "Wrong alignment on FDbCustomMatchingRoomParam");
static_assert(sizeof(FDbCustomMatchingRoomParam) == 0x000010, "Wrong size on FDbCustomMatchingRoomParam");
static_assert(offsetof(FDbCustomMatchingRoomParam, CurrentPlayModeCode) == 0x000008, "Member 'FDbCustomMatchingRoomParam::CurrentPlayModeCode' has a wrong offset!");
static_assert(offsetof(FDbCustomMatchingRoomParam, bHiddenIdFlag) == 0x00000C, "Member 'FDbCustomMatchingRoomParam::bHiddenIdFlag' has a wrong offset!");
static_assert(offsetof(FDbCustomMatchingRoomParam, bAllowAllChat) == 0x00000D, "Member 'FDbCustomMatchingRoomParam::bAllowAllChat' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbMatchingParam
// 0x0BA8 (0x0BA8 - 0x0000)
struct FDbMatchingParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentPlayModeCode;                               // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FDbPlayModeParam>          PlayModes;                                         // 0x0010(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            MyUserData;                                        // 0x0060(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDbMatchingSquadInfoParam              MySquadInfo;                                       // 0x00B0(0x0520)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDbMatchingSquadInfoParam              FetchedSquadInfo;                                  // 0x05D0(0x0520)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 FetchedSquadConnectionServerHost;                  // 0x0AF0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FetchedSquadConnectionServerPort;                  // 0x0B00(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B04[0x4];                                      // 0x0B04(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DedicatedServerHost;                               // 0x0B08(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DedicatedServerPort;                               // 0x0B18(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1C[0x4];                                      // 0x0B1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDbInvitingInfoParam>           InvitingList;                                      // 0x0B20(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B30[0x5];                                      // 0x0B30(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bHost;                                             // 0x0B35(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBattleReady;                                      // 0x0B36(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCustomMatchVoiceChat;                       // 0x0B37(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDbCustomMatchingRoomParam             RoomData;                                          // 0x0B38(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FDbCustomMatchingMemberParamList> TeamDataList;                                      // 0x0B48(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDbCustomMatchingMemberParamList> StandbyList;                                       // 0x0B58(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 CustomRoomKey;                                     // 0x0B68(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomRoomId;                                      // 0x0B78(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         CustomMatchingResult;                              // 0x0B88(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B98[0x10];                                     // 0x0B98(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbMatchingParam) == 0x000008, "Wrong alignment on FDbMatchingParam");
static_assert(sizeof(FDbMatchingParam) == 0x000BA8, "Wrong size on FDbMatchingParam");
static_assert(offsetof(FDbMatchingParam, CurrentPlayModeCode) == 0x000008, "Member 'FDbMatchingParam::CurrentPlayModeCode' has a wrong offset!");
static_assert(offsetof(FDbMatchingParam, PlayModes) == 0x000010, "Member 'FDbMatchingParam::PlayModes' has a wrong offset!");
static_assert(offsetof(FDbMatchingParam, MyUserData) == 0x000060, "Member 'FDbMatchingParam::MyUserData' has a wrong offset!");
static_assert(offsetof(FDbMatchingParam, MySquadInfo) == 0x0000B0, "Member 'FDbMatchingParam::MySquadInfo' has a wrong offset!");
static_assert(offsetof(FDbMatchingParam, FetchedSquadInfo) == 0x0005D0, "Member 'FDbMatchingParam::FetchedSquadInfo' has a wrong offset!");
static_assert(offsetof(FDbMatchingParam, FetchedSquadConnectionServerHost) == 0x000AF0, "Member 'FDbMatchingParam::FetchedSquadConnectionServerHost' has a wrong offset!");
static_assert(offsetof(FDbMatchingParam, FetchedSquadConnectionServerPort) == 0x000B00, "Member 'FDbMatchingParam::FetchedSquadConnectionServerPort' has a wrong offset!");
static_assert(offsetof(FDbMatchingParam, DedicatedServerHost) == 0x000B08, "Member 'FDbMatchingParam::DedicatedServerHost' has a wrong offset!");
static_assert(offsetof(FDbMatchingParam, DedicatedServerPort) == 0x000B18, "Member 'FDbMatchingParam::DedicatedServerPort' has a wrong offset!");
static_assert(offsetof(FDbMatchingParam, InvitingList) == 0x000B20, "Member 'FDbMatchingParam::InvitingList' has a wrong offset!");
static_assert(offsetof(FDbMatchingParam, bHost) == 0x000B35, "Member 'FDbMatchingParam::bHost' has a wrong offset!");
static_assert(offsetof(FDbMatchingParam, bBattleReady) == 0x000B36, "Member 'FDbMatchingParam::bBattleReady' has a wrong offset!");
static_assert(offsetof(FDbMatchingParam, bEnableCustomMatchVoiceChat) == 0x000B37, "Member 'FDbMatchingParam::bEnableCustomMatchVoiceChat' has a wrong offset!");
static_assert(offsetof(FDbMatchingParam, RoomData) == 0x000B38, "Member 'FDbMatchingParam::RoomData' has a wrong offset!");
static_assert(offsetof(FDbMatchingParam, TeamDataList) == 0x000B48, "Member 'FDbMatchingParam::TeamDataList' has a wrong offset!");
static_assert(offsetof(FDbMatchingParam, StandbyList) == 0x000B58, "Member 'FDbMatchingParam::StandbyList' has a wrong offset!");
static_assert(offsetof(FDbMatchingParam, CustomRoomKey) == 0x000B68, "Member 'FDbMatchingParam::CustomRoomKey' has a wrong offset!");
static_assert(offsetof(FDbMatchingParam, CustomRoomId) == 0x000B78, "Member 'FDbMatchingParam::CustomRoomId' has a wrong offset!");
static_assert(offsetof(FDbMatchingParam, CustomMatchingResult) == 0x000B88, "Member 'FDbMatchingParam::CustomMatchingResult' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbMissionsParam
// 0x0100 (0x0100 - 0x0000)
struct FDbMissionsParam final
{
public:
	uint8                                         Pad_0[0xF0];                                       // 0x0000(0x00F0)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 EventCodeList;                                     // 0x00F0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbMissionsParam) == 0x000008, "Wrong alignment on FDbMissionsParam");
static_assert(sizeof(FDbMissionsParam) == 0x000100, "Wrong size on FDbMissionsParam");
static_assert(offsetof(FDbMissionsParam, EventCodeList) == 0x0000F0, "Member 'FDbMissionsParam::EventCodeList' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbMissionParam
// 0x0540 (0x05F0 - 0x00B0)
struct FDbMissionParam final : public FMasterDataMission
{
public:
	struct FDbItemCategoryParam                   RewardItem;                                        // 0x00B0(0x0488)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Progress;                                          // 0x0538(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StarPoint;                                         // 0x053C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMissionAchievementStatus                     EAchievementStatus;                                // 0x0540(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_541[0x7];                                      // 0x0541(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataCharacter                   Character;                                         // 0x0548(0x00A8)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbMissionParam) == 0x000008, "Wrong alignment on FDbMissionParam");
static_assert(sizeof(FDbMissionParam) == 0x0005F0, "Wrong size on FDbMissionParam");
static_assert(offsetof(FDbMissionParam, RewardItem) == 0x0000B0, "Member 'FDbMissionParam::RewardItem' has a wrong offset!");
static_assert(offsetof(FDbMissionParam, Progress) == 0x000538, "Member 'FDbMissionParam::Progress' has a wrong offset!");
static_assert(offsetof(FDbMissionParam, StarPoint) == 0x00053C, "Member 'FDbMissionParam::StarPoint' has a wrong offset!");
static_assert(offsetof(FDbMissionParam, EAchievementStatus) == 0x000540, "Member 'FDbMissionParam::EAchievementStatus' has a wrong offset!");
static_assert(offsetof(FDbMissionParam, Character) == 0x000548, "Member 'FDbMissionParam::Character' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbMissionCategoryParam
// 0x00B8 (0x00B8 - 0x0000)
struct FDbMissionCategoryParam final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Achieved;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Star;                                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              ExpireAt;                                          // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMasterDataEvent                       Event;                                             // 0x0020(0x0088)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FDbMissionParam>                Missions;                                          // 0x00A8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbMissionCategoryParam) == 0x000008, "Wrong alignment on FDbMissionCategoryParam");
static_assert(sizeof(FDbMissionCategoryParam) == 0x0000B8, "Wrong size on FDbMissionCategoryParam");
static_assert(offsetof(FDbMissionCategoryParam, Achieved) == 0x00000C, "Member 'FDbMissionCategoryParam::Achieved' has a wrong offset!");
static_assert(offsetof(FDbMissionCategoryParam, Star) == 0x000010, "Member 'FDbMissionCategoryParam::Star' has a wrong offset!");
static_assert(offsetof(FDbMissionCategoryParam, ExpireAt) == 0x000018, "Member 'FDbMissionCategoryParam::ExpireAt' has a wrong offset!");
static_assert(offsetof(FDbMissionCategoryParam, Event) == 0x000020, "Member 'FDbMissionCategoryParam::Event' has a wrong offset!");
static_assert(offsetof(FDbMissionCategoryParam, Missions) == 0x0000A8, "Member 'FDbMissionCategoryParam::Missions' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbNoticeInfoBaseParam
// 0x0050 (0x0050 - 0x0000)
struct FDbNoticeInfoBaseParam
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ID;                                                // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NoticeId;                                          // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnread;                                           // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              DisplayDateTime;                                   // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Notice;                                            // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LimitDateTime;                                     // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbNoticeInfoBaseParam) == 0x000008, "Wrong alignment on FDbNoticeInfoBaseParam");
static_assert(sizeof(FDbNoticeInfoBaseParam) == 0x000050, "Wrong size on FDbNoticeInfoBaseParam");
static_assert(offsetof(FDbNoticeInfoBaseParam, ID) == 0x000008, "Member 'FDbNoticeInfoBaseParam::ID' has a wrong offset!");
static_assert(offsetof(FDbNoticeInfoBaseParam, NoticeId) == 0x000018, "Member 'FDbNoticeInfoBaseParam::NoticeId' has a wrong offset!");
static_assert(offsetof(FDbNoticeInfoBaseParam, bUnread) == 0x000028, "Member 'FDbNoticeInfoBaseParam::bUnread' has a wrong offset!");
static_assert(offsetof(FDbNoticeInfoBaseParam, DisplayDateTime) == 0x000030, "Member 'FDbNoticeInfoBaseParam::DisplayDateTime' has a wrong offset!");
static_assert(offsetof(FDbNoticeInfoBaseParam, Notice) == 0x000038, "Member 'FDbNoticeInfoBaseParam::Notice' has a wrong offset!");
static_assert(offsetof(FDbNoticeInfoBaseParam, LimitDateTime) == 0x000048, "Member 'FDbNoticeInfoBaseParam::LimitDateTime' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbInformationInfoParam
// 0x0008 (0x0058 - 0x0050)
struct FDbInformationInfoParam final : public FDbNoticeInfoBaseParam
{
public:
	bool                                          bHasItem;                                          // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbInformationInfoParam) == 0x000008, "Wrong alignment on FDbInformationInfoParam");
static_assert(sizeof(FDbInformationInfoParam) == 0x000058, "Wrong size on FDbInformationInfoParam");
static_assert(offsetof(FDbInformationInfoParam, bHasItem) == 0x000050, "Member 'FDbInformationInfoParam::bHasItem' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbInvitationInfoParam
// 0x0098 (0x00E8 - 0x0050)
struct FDbInvitationInfoParam final : public FDbNoticeInfoBaseParam
{
public:
	EInviteType                                   EInviteTarget;                                     // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerId;                                          // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformPlayerId;                                  // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              InvitedAt;                                         // 0x0088(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildId;                                           // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildName;                                         // 0x00A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SquadInvitationId;                                 // 0x00B0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchingServerHost;                                // 0x00C0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchingServerPort;                                // 0x00D0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SquadId;                                           // 0x00D8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbInvitationInfoParam) == 0x000008, "Wrong alignment on FDbInvitationInfoParam");
static_assert(sizeof(FDbInvitationInfoParam) == 0x0000E8, "Wrong size on FDbInvitationInfoParam");
static_assert(offsetof(FDbInvitationInfoParam, EInviteTarget) == 0x000050, "Member 'FDbInvitationInfoParam::EInviteTarget' has a wrong offset!");
static_assert(offsetof(FDbInvitationInfoParam, PlayerId) == 0x000058, "Member 'FDbInvitationInfoParam::PlayerId' has a wrong offset!");
static_assert(offsetof(FDbInvitationInfoParam, PlatformPlayerId) == 0x000068, "Member 'FDbInvitationInfoParam::PlatformPlayerId' has a wrong offset!");
static_assert(offsetof(FDbInvitationInfoParam, PlayerName) == 0x000078, "Member 'FDbInvitationInfoParam::PlayerName' has a wrong offset!");
static_assert(offsetof(FDbInvitationInfoParam, InvitedAt) == 0x000088, "Member 'FDbInvitationInfoParam::InvitedAt' has a wrong offset!");
static_assert(offsetof(FDbInvitationInfoParam, GuildId) == 0x000090, "Member 'FDbInvitationInfoParam::GuildId' has a wrong offset!");
static_assert(offsetof(FDbInvitationInfoParam, GuildName) == 0x0000A0, "Member 'FDbInvitationInfoParam::GuildName' has a wrong offset!");
static_assert(offsetof(FDbInvitationInfoParam, SquadInvitationId) == 0x0000B0, "Member 'FDbInvitationInfoParam::SquadInvitationId' has a wrong offset!");
static_assert(offsetof(FDbInvitationInfoParam, MatchingServerHost) == 0x0000C0, "Member 'FDbInvitationInfoParam::MatchingServerHost' has a wrong offset!");
static_assert(offsetof(FDbInvitationInfoParam, MatchingServerPort) == 0x0000D0, "Member 'FDbInvitationInfoParam::MatchingServerPort' has a wrong offset!");
static_assert(offsetof(FDbInvitationInfoParam, SquadId) == 0x0000D8, "Member 'FDbInvitationInfoParam::SquadId' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbNoticeOpenedNoticeParam
// 0x0070 (0x04F8 - 0x0488)
struct FDbNoticeOpenedNoticeParam final : public FDbItemCategoryParam
{
public:
	class FString                                 NoticeId;                                          // 0x0488(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MessageTitle;                                      // 0x0498(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MessageText;                                       // 0x04A8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerId;                                          // 0x04B8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x04C8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildId;                                           // 0x04D8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildName;                                         // 0x04E8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbNoticeOpenedNoticeParam) == 0x000008, "Wrong alignment on FDbNoticeOpenedNoticeParam");
static_assert(sizeof(FDbNoticeOpenedNoticeParam) == 0x0004F8, "Wrong size on FDbNoticeOpenedNoticeParam");
static_assert(offsetof(FDbNoticeOpenedNoticeParam, NoticeId) == 0x000488, "Member 'FDbNoticeOpenedNoticeParam::NoticeId' has a wrong offset!");
static_assert(offsetof(FDbNoticeOpenedNoticeParam, MessageTitle) == 0x000498, "Member 'FDbNoticeOpenedNoticeParam::MessageTitle' has a wrong offset!");
static_assert(offsetof(FDbNoticeOpenedNoticeParam, MessageText) == 0x0004A8, "Member 'FDbNoticeOpenedNoticeParam::MessageText' has a wrong offset!");
static_assert(offsetof(FDbNoticeOpenedNoticeParam, PlayerId) == 0x0004B8, "Member 'FDbNoticeOpenedNoticeParam::PlayerId' has a wrong offset!");
static_assert(offsetof(FDbNoticeOpenedNoticeParam, PlayerName) == 0x0004C8, "Member 'FDbNoticeOpenedNoticeParam::PlayerName' has a wrong offset!");
static_assert(offsetof(FDbNoticeOpenedNoticeParam, GuildId) == 0x0004D8, "Member 'FDbNoticeOpenedNoticeParam::GuildId' has a wrong offset!");
static_assert(offsetof(FDbNoticeOpenedNoticeParam, GuildName) == 0x0004E8, "Member 'FDbNoticeOpenedNoticeParam::GuildName' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbInformationReceivedItemParam
// 0x0008 (0x0490 - 0x0488)
struct FDbInformationReceivedItemParam final : public FDbItemCategoryParam
{
public:
	int32                                         Quantity;                                          // 0x0488(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48C[0x4];                                      // 0x048C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbInformationReceivedItemParam) == 0x000008, "Wrong alignment on FDbInformationReceivedItemParam");
static_assert(sizeof(FDbInformationReceivedItemParam) == 0x000490, "Wrong size on FDbInformationReceivedItemParam");
static_assert(offsetof(FDbInformationReceivedItemParam, Quantity) == 0x000488, "Member 'FDbInformationReceivedItemParam::Quantity' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbNoticeParam
// 0x0110 (0x0110 - 0x0000)
struct FDbNoticeParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bHasNewNotice;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasNotice;                                        // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasInvite;                                        // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENoticeCategory                               ECategory;                                         // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FriendCount;                                       // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InformationPageNo;                                 // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InformationMaxPageNo;                              // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDbInformationInfoParam>        InformationList;                                   // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InvitationPageNo;                                  // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InvitationMaxPageNo;                               // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDbInvitationInfoParam>         InvitationList;                                    // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDbNoticeOpenedNoticeParam>     OpenedNotices;                                     // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDbInformationReceivedItemParam> ReceivedItems;                                     // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDbRecommendNoticeParam                RecommendNotice;                                   // 0x0068(0x0098)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDateTime                              MaintenanceStartTime;                              // 0x0100(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetMaintenanceStartTime;                          // 0x0108(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbNoticeParam) == 0x000008, "Wrong alignment on FDbNoticeParam");
static_assert(sizeof(FDbNoticeParam) == 0x000110, "Wrong size on FDbNoticeParam");
static_assert(offsetof(FDbNoticeParam, bHasNewNotice) == 0x000008, "Member 'FDbNoticeParam::bHasNewNotice' has a wrong offset!");
static_assert(offsetof(FDbNoticeParam, bHasNotice) == 0x000009, "Member 'FDbNoticeParam::bHasNotice' has a wrong offset!");
static_assert(offsetof(FDbNoticeParam, bHasInvite) == 0x00000A, "Member 'FDbNoticeParam::bHasInvite' has a wrong offset!");
static_assert(offsetof(FDbNoticeParam, Count) == 0x00000C, "Member 'FDbNoticeParam::Count' has a wrong offset!");
static_assert(offsetof(FDbNoticeParam, ECategory) == 0x000010, "Member 'FDbNoticeParam::ECategory' has a wrong offset!");
static_assert(offsetof(FDbNoticeParam, FriendCount) == 0x000014, "Member 'FDbNoticeParam::FriendCount' has a wrong offset!");
static_assert(offsetof(FDbNoticeParam, InformationPageNo) == 0x000018, "Member 'FDbNoticeParam::InformationPageNo' has a wrong offset!");
static_assert(offsetof(FDbNoticeParam, InformationMaxPageNo) == 0x00001C, "Member 'FDbNoticeParam::InformationMaxPageNo' has a wrong offset!");
static_assert(offsetof(FDbNoticeParam, InformationList) == 0x000020, "Member 'FDbNoticeParam::InformationList' has a wrong offset!");
static_assert(offsetof(FDbNoticeParam, InvitationPageNo) == 0x000030, "Member 'FDbNoticeParam::InvitationPageNo' has a wrong offset!");
static_assert(offsetof(FDbNoticeParam, InvitationMaxPageNo) == 0x000034, "Member 'FDbNoticeParam::InvitationMaxPageNo' has a wrong offset!");
static_assert(offsetof(FDbNoticeParam, InvitationList) == 0x000038, "Member 'FDbNoticeParam::InvitationList' has a wrong offset!");
static_assert(offsetof(FDbNoticeParam, OpenedNotices) == 0x000048, "Member 'FDbNoticeParam::OpenedNotices' has a wrong offset!");
static_assert(offsetof(FDbNoticeParam, ReceivedItems) == 0x000058, "Member 'FDbNoticeParam::ReceivedItems' has a wrong offset!");
static_assert(offsetof(FDbNoticeParam, RecommendNotice) == 0x000068, "Member 'FDbNoticeParam::RecommendNotice' has a wrong offset!");
static_assert(offsetof(FDbNoticeParam, MaintenanceStartTime) == 0x000100, "Member 'FDbNoticeParam::MaintenanceStartTime' has a wrong offset!");
static_assert(offsetof(FDbNoticeParam, bSetMaintenanceStartTime) == 0x000108, "Member 'FDbNoticeParam::bSetMaintenanceStartTime' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbResultBeforeBattleParam
// 0x0058 (0x0058 - 0x0000)
struct FDbResultBeforeBattleParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SeasonPassRank;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonPassRankExp;                                 // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelPoint;                                        // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMasterDataRankExp                     Rank;                                              // 0x0018(0x0038)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         RankPoint;                                         // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gold;                                              // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbResultBeforeBattleParam) == 0x000008, "Wrong alignment on FDbResultBeforeBattleParam");
static_assert(sizeof(FDbResultBeforeBattleParam) == 0x000058, "Wrong size on FDbResultBeforeBattleParam");
static_assert(offsetof(FDbResultBeforeBattleParam, SeasonPassRank) == 0x000008, "Member 'FDbResultBeforeBattleParam::SeasonPassRank' has a wrong offset!");
static_assert(offsetof(FDbResultBeforeBattleParam, SeasonPassRankExp) == 0x00000C, "Member 'FDbResultBeforeBattleParam::SeasonPassRankExp' has a wrong offset!");
static_assert(offsetof(FDbResultBeforeBattleParam, Level) == 0x000010, "Member 'FDbResultBeforeBattleParam::Level' has a wrong offset!");
static_assert(offsetof(FDbResultBeforeBattleParam, LevelPoint) == 0x000014, "Member 'FDbResultBeforeBattleParam::LevelPoint' has a wrong offset!");
static_assert(offsetof(FDbResultBeforeBattleParam, Rank) == 0x000018, "Member 'FDbResultBeforeBattleParam::Rank' has a wrong offset!");
static_assert(offsetof(FDbResultBeforeBattleParam, RankPoint) == 0x000050, "Member 'FDbResultBeforeBattleParam::RankPoint' has a wrong offset!");
static_assert(offsetof(FDbResultBeforeBattleParam, Gold) == 0x000054, "Member 'FDbResultBeforeBattleParam::Gold' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbMyPlayerParam
// 0x0240 (0x06C8 - 0x0488)
struct FDbMyPlayerParam final : public FDbPlayerParam
{
public:
	TMap<ECurrencyType, int32>                    Currencies;                                        // 0x0488(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	ETutorialStepNo                               ETutorialStatus;                                   // 0x04D8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D9[0x7];                                      // 0x04D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ETutorialOpenFeature, bool>              OpenFlags;                                         // 0x04E0(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         LevelPoint;                                        // 0x0530(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_534[0x4];                                      // 0x0534(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDbInventoryParam                      Inventory;                                         // 0x0538(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDbAdParam                             MyAd;                                              // 0x0550(0x0060)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDbGalleryParam                        Gallery;                                           // 0x05B0(0x0028)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDbLoginBonusListParam                 LoginBonus;                                        // 0x05D8(0x0070)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         RentalPoint;                                       // 0x0648(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64C[0x4];                                      // 0x064C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDbResultBeforeBattleParam             ResultBeforeBattle;                                // 0x0650(0x0058)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A8[0x20];                                     // 0x06A8(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbMyPlayerParam) == 0x000008, "Wrong alignment on FDbMyPlayerParam");
static_assert(sizeof(FDbMyPlayerParam) == 0x0006C8, "Wrong size on FDbMyPlayerParam");
static_assert(offsetof(FDbMyPlayerParam, Currencies) == 0x000488, "Member 'FDbMyPlayerParam::Currencies' has a wrong offset!");
static_assert(offsetof(FDbMyPlayerParam, ETutorialStatus) == 0x0004D8, "Member 'FDbMyPlayerParam::ETutorialStatus' has a wrong offset!");
static_assert(offsetof(FDbMyPlayerParam, OpenFlags) == 0x0004E0, "Member 'FDbMyPlayerParam::OpenFlags' has a wrong offset!");
static_assert(offsetof(FDbMyPlayerParam, LevelPoint) == 0x000530, "Member 'FDbMyPlayerParam::LevelPoint' has a wrong offset!");
static_assert(offsetof(FDbMyPlayerParam, Inventory) == 0x000538, "Member 'FDbMyPlayerParam::Inventory' has a wrong offset!");
static_assert(offsetof(FDbMyPlayerParam, MyAd) == 0x000550, "Member 'FDbMyPlayerParam::MyAd' has a wrong offset!");
static_assert(offsetof(FDbMyPlayerParam, Gallery) == 0x0005B0, "Member 'FDbMyPlayerParam::Gallery' has a wrong offset!");
static_assert(offsetof(FDbMyPlayerParam, LoginBonus) == 0x0005D8, "Member 'FDbMyPlayerParam::LoginBonus' has a wrong offset!");
static_assert(offsetof(FDbMyPlayerParam, RentalPoint) == 0x000648, "Member 'FDbMyPlayerParam::RentalPoint' has a wrong offset!");
static_assert(offsetof(FDbMyPlayerParam, ResultBeforeBattle) == 0x000650, "Member 'FDbMyPlayerParam::ResultBeforeBattle' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbpLotteryRateSheet
// 0x0020 (0x0020 - 0x0000)
struct FDbpLotteryRateSheet final
{
public:
	TArray<struct FDbLotteryResultItem>           RateList;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDbLotteryResultItem>           HighRarityCommitmentRateList;                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbpLotteryRateSheet) == 0x000008, "Wrong alignment on FDbpLotteryRateSheet");
static_assert(sizeof(FDbpLotteryRateSheet) == 0x000020, "Wrong size on FDbpLotteryRateSheet");
static_assert(offsetof(FDbpLotteryRateSheet, RateList) == 0x000000, "Member 'FDbpLotteryRateSheet::RateList' has a wrong offset!");
static_assert(offsetof(FDbpLotteryRateSheet, HighRarityCommitmentRateList) == 0x000010, "Member 'FDbpLotteryRateSheet::HighRarityCommitmentRateList' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbRankingDataParam
// 0x0088 (0x0088 - 0x0000)
struct FDbRankingDataParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Ranking;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ID;                                                // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataEmblem>              Emblems;                                           // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Point;                                             // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMySelf;                                           // 0x0044(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataRankExp                     Rank;                                              // 0x0048(0x0038)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         GuildMemberCount;                                  // 0x0080(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxGuildMember;                                    // 0x0084(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbRankingDataParam) == 0x000008, "Wrong alignment on FDbRankingDataParam");
static_assert(sizeof(FDbRankingDataParam) == 0x000088, "Wrong size on FDbRankingDataParam");
static_assert(offsetof(FDbRankingDataParam, Ranking) == 0x000008, "Member 'FDbRankingDataParam::Ranking' has a wrong offset!");
static_assert(offsetof(FDbRankingDataParam, ID) == 0x000010, "Member 'FDbRankingDataParam::ID' has a wrong offset!");
static_assert(offsetof(FDbRankingDataParam, Name) == 0x000020, "Member 'FDbRankingDataParam::Name' has a wrong offset!");
static_assert(offsetof(FDbRankingDataParam, Emblems) == 0x000030, "Member 'FDbRankingDataParam::Emblems' has a wrong offset!");
static_assert(offsetof(FDbRankingDataParam, Point) == 0x000040, "Member 'FDbRankingDataParam::Point' has a wrong offset!");
static_assert(offsetof(FDbRankingDataParam, bMySelf) == 0x000044, "Member 'FDbRankingDataParam::bMySelf' has a wrong offset!");
static_assert(offsetof(FDbRankingDataParam, Rank) == 0x000048, "Member 'FDbRankingDataParam::Rank' has a wrong offset!");
static_assert(offsetof(FDbRankingDataParam, GuildMemberCount) == 0x000080, "Member 'FDbRankingDataParam::GuildMemberCount' has a wrong offset!");
static_assert(offsetof(FDbRankingDataParam, MaxGuildMember) == 0x000084, "Member 'FDbRankingDataParam::MaxGuildMember' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbRankingParam
// 0x0058 (0x00B0 - 0x0058)
struct FDbRankingParam final : public FMasterDataMRanking
{
public:
	int32                                         Total;                                             // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerRank;                                        // 0x005C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMasterDataMGuildLeagues               League;                                            // 0x0060(0x0038)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	ERankingLeagueChange                          LeagueChangeExpect;                                // 0x0098(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDbRankingDataParam>            RankList;                                          // 0x00A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbRankingParam) == 0x000008, "Wrong alignment on FDbRankingParam");
static_assert(sizeof(FDbRankingParam) == 0x0000B0, "Wrong size on FDbRankingParam");
static_assert(offsetof(FDbRankingParam, Total) == 0x000058, "Member 'FDbRankingParam::Total' has a wrong offset!");
static_assert(offsetof(FDbRankingParam, PlayerRank) == 0x00005C, "Member 'FDbRankingParam::PlayerRank' has a wrong offset!");
static_assert(offsetof(FDbRankingParam, League) == 0x000060, "Member 'FDbRankingParam::League' has a wrong offset!");
static_assert(offsetof(FDbRankingParam, LeagueChangeExpect) == 0x000098, "Member 'FDbRankingParam::LeagueChangeExpect' has a wrong offset!");
static_assert(offsetof(FDbRankingParam, RankList) == 0x0000A0, "Member 'FDbRankingParam::RankList' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbRankingResult
// 0x0108 (0x0160 - 0x0058)
struct FDbRankingResult final : public FMasterDataMRanking
{
public:
	struct FMasterDataSeason                      Season;                                            // 0x0058(0x0040)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMasterDataEvent                       Event;                                             // 0x0098(0x0088)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMasterDataMGuildLeagues               League;                                            // 0x0120(0x0038)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0158(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERankingLeagueChange                          ELeagueChange;                                     // 0x015C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15D[0x3];                                      // 0x015D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbRankingResult) == 0x000008, "Wrong alignment on FDbRankingResult");
static_assert(sizeof(FDbRankingResult) == 0x000160, "Wrong size on FDbRankingResult");
static_assert(offsetof(FDbRankingResult, Season) == 0x000058, "Member 'FDbRankingResult::Season' has a wrong offset!");
static_assert(offsetof(FDbRankingResult, Event) == 0x000098, "Member 'FDbRankingResult::Event' has a wrong offset!");
static_assert(offsetof(FDbRankingResult, League) == 0x000120, "Member 'FDbRankingResult::League' has a wrong offset!");
static_assert(offsetof(FDbRankingResult, Rank) == 0x000158, "Member 'FDbRankingResult::Rank' has a wrong offset!");
static_assert(offsetof(FDbRankingResult, ELeagueChange) == 0x00015C, "Member 'FDbRankingResult::ELeagueChange' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbRankingsParam
// 0x0398 (0x0398 - 0x0000)
struct FDbRankingsParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDbRankingParam                        BillboardChart;                                    // 0x0008(0x00B0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDbRankingParam                        Mvp;                                               // 0x00B8(0x00B0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDbRankingParam                        GuildTop;                                          // 0x0168(0x00B0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDbRankingParam                        GuildElite;                                        // 0x0218(0x00B0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FDbRankingParam>                EventList;                                         // 0x02C8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDbRankingResult>               Results;                                           // 0x02D8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E8[0xB0];                                     // 0x02E8(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbRankingsParam) == 0x000008, "Wrong alignment on FDbRankingsParam");
static_assert(sizeof(FDbRankingsParam) == 0x000398, "Wrong size on FDbRankingsParam");
static_assert(offsetof(FDbRankingsParam, BillboardChart) == 0x000008, "Member 'FDbRankingsParam::BillboardChart' has a wrong offset!");
static_assert(offsetof(FDbRankingsParam, Mvp) == 0x0000B8, "Member 'FDbRankingsParam::Mvp' has a wrong offset!");
static_assert(offsetof(FDbRankingsParam, GuildTop) == 0x000168, "Member 'FDbRankingsParam::GuildTop' has a wrong offset!");
static_assert(offsetof(FDbRankingsParam, GuildElite) == 0x000218, "Member 'FDbRankingsParam::GuildElite' has a wrong offset!");
static_assert(offsetof(FDbRankingsParam, EventList) == 0x0002C8, "Member 'FDbRankingsParam::EventList' has a wrong offset!");
static_assert(offsetof(FDbRankingsParam, Results) == 0x0002D8, "Member 'FDbRankingsParam::Results' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbSeasonParam
// 0x0048 (0x0088 - 0x0040)
struct FDbSeasonParam final : public FMasterDataSeason
{
public:
	bool                                          bHasProLicense;                                    // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SeasonRank;                                        // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRankExp;                                     // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x8];                                       // 0x004C(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StockCount;                                        // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDbSeasonPassParam>             Ranks;                                             // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x20];                                      // 0x0068(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbSeasonParam) == 0x000008, "Wrong alignment on FDbSeasonParam");
static_assert(sizeof(FDbSeasonParam) == 0x000088, "Wrong size on FDbSeasonParam");
static_assert(offsetof(FDbSeasonParam, bHasProLicense) == 0x000040, "Member 'FDbSeasonParam::bHasProLicense' has a wrong offset!");
static_assert(offsetof(FDbSeasonParam, SeasonRank) == 0x000044, "Member 'FDbSeasonParam::SeasonRank' has a wrong offset!");
static_assert(offsetof(FDbSeasonParam, SeasonRankExp) == 0x000048, "Member 'FDbSeasonParam::SeasonRankExp' has a wrong offset!");
static_assert(offsetof(FDbSeasonParam, StockCount) == 0x000054, "Member 'FDbSeasonParam::StockCount' has a wrong offset!");
static_assert(offsetof(FDbSeasonParam, Ranks) == 0x000058, "Member 'FDbSeasonParam::Ranks' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbMatchingRegionSettingParam
// 0x0040 (0x0040 - 0x0000)
struct FDbMatchingRegionSettingParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENetScore                                     Score;                                             // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFastest;                                          // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchingServerHost;                                // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchingServerPort;                                // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbMatchingRegionSettingParam) == 0x000008, "Wrong alignment on FDbMatchingRegionSettingParam");
static_assert(sizeof(FDbMatchingRegionSettingParam) == 0x000040, "Wrong size on FDbMatchingRegionSettingParam");
static_assert(offsetof(FDbMatchingRegionSettingParam, Code) == 0x000008, "Member 'FDbMatchingRegionSettingParam::Code' has a wrong offset!");
static_assert(offsetof(FDbMatchingRegionSettingParam, Name) == 0x000010, "Member 'FDbMatchingRegionSettingParam::Name' has a wrong offset!");
static_assert(offsetof(FDbMatchingRegionSettingParam, Score) == 0x000020, "Member 'FDbMatchingRegionSettingParam::Score' has a wrong offset!");
static_assert(offsetof(FDbMatchingRegionSettingParam, bFastest) == 0x000021, "Member 'FDbMatchingRegionSettingParam::bFastest' has a wrong offset!");
static_assert(offsetof(FDbMatchingRegionSettingParam, MatchingServerHost) == 0x000028, "Member 'FDbMatchingRegionSettingParam::MatchingServerHost' has a wrong offset!");
static_assert(offsetof(FDbMatchingRegionSettingParam, MatchingServerPort) == 0x000038, "Member 'FDbMatchingRegionSettingParam::MatchingServerPort' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbGamePlaySettingParam
// 0x0060 (0x0060 - 0x0000)
struct FDbGamePlaySettingParam final
{
public:
	TMap<int32, struct FDbMatchingRegionSettingParam> Regions;                                           // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         RegionCode;                                        // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBattleRecord;                                     // 0x0054(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AuraDisplayTarget;                                 // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AuraDisplayArea;                                   // 0x005C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbGamePlaySettingParam) == 0x000008, "Wrong alignment on FDbGamePlaySettingParam");
static_assert(sizeof(FDbGamePlaySettingParam) == 0x000060, "Wrong size on FDbGamePlaySettingParam");
static_assert(offsetof(FDbGamePlaySettingParam, Regions) == 0x000000, "Member 'FDbGamePlaySettingParam::Regions' has a wrong offset!");
static_assert(offsetof(FDbGamePlaySettingParam, RegionCode) == 0x000050, "Member 'FDbGamePlaySettingParam::RegionCode' has a wrong offset!");
static_assert(offsetof(FDbGamePlaySettingParam, bBattleRecord) == 0x000054, "Member 'FDbGamePlaySettingParam::bBattleRecord' has a wrong offset!");
static_assert(offsetof(FDbGamePlaySettingParam, AuraDisplayTarget) == 0x000058, "Member 'FDbGamePlaySettingParam::AuraDisplayTarget' has a wrong offset!");
static_assert(offsetof(FDbGamePlaySettingParam, AuraDisplayArea) == 0x00005C, "Member 'FDbGamePlaySettingParam::AuraDisplayArea' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbSoundDevice
// 0x0028 (0x0028 - 0x0000)
struct FDbSoundDevice final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ID;                                                // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbSoundDevice) == 0x000008, "Wrong alignment on FDbSoundDevice");
static_assert(sizeof(FDbSoundDevice) == 0x000028, "Wrong size on FDbSoundDevice");
static_assert(offsetof(FDbSoundDevice, ID) == 0x000008, "Member 'FDbSoundDevice::ID' has a wrong offset!");
static_assert(offsetof(FDbSoundDevice, Name) == 0x000018, "Member 'FDbSoundDevice::Name' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbSoundSettingParam
// 0x0048 (0x0048 - 0x0000)
struct FDbSoundSettingParam final
{
public:
	bool                                          bVoiceChat;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VoiceChatVolume;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDbSoundDevice>                 InputDeviceList;                                   // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDbSoundDevice>                 OutputDeviceList;                                  // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 InputDeviceId;                                     // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutputDeviceId;                                    // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbSoundSettingParam) == 0x000008, "Wrong alignment on FDbSoundSettingParam");
static_assert(sizeof(FDbSoundSettingParam) == 0x000048, "Wrong size on FDbSoundSettingParam");
static_assert(offsetof(FDbSoundSettingParam, bVoiceChat) == 0x000000, "Member 'FDbSoundSettingParam::bVoiceChat' has a wrong offset!");
static_assert(offsetof(FDbSoundSettingParam, VoiceChatVolume) == 0x000004, "Member 'FDbSoundSettingParam::VoiceChatVolume' has a wrong offset!");
static_assert(offsetof(FDbSoundSettingParam, InputDeviceList) == 0x000008, "Member 'FDbSoundSettingParam::InputDeviceList' has a wrong offset!");
static_assert(offsetof(FDbSoundSettingParam, OutputDeviceList) == 0x000018, "Member 'FDbSoundSettingParam::OutputDeviceList' has a wrong offset!");
static_assert(offsetof(FDbSoundSettingParam, InputDeviceId) == 0x000028, "Member 'FDbSoundSettingParam::InputDeviceId' has a wrong offset!");
static_assert(offsetof(FDbSoundSettingParam, OutputDeviceId) == 0x000038, "Member 'FDbSoundSettingParam::OutputDeviceId' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbSettingParam
// 0x00E0 (0x00E0 - 0x0000)
struct FDbSettingParam final
{
public:
	struct FDbGamePlaySettingParam                GamePlaySetting;                                   // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDbSoundSettingParam                   SoundSetting;                                      // 0x0060(0x0048)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 TrackingNumber;                                    // 0x00A8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TokushoText;                                       // 0x00B8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FundSettlementText;                                // 0x00C8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChargedHeroCrystal;                                // 0x00D8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FreeHeroCrystal;                                   // 0x00DC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbSettingParam) == 0x000008, "Wrong alignment on FDbSettingParam");
static_assert(sizeof(FDbSettingParam) == 0x0000E0, "Wrong size on FDbSettingParam");
static_assert(offsetof(FDbSettingParam, GamePlaySetting) == 0x000000, "Member 'FDbSettingParam::GamePlaySetting' has a wrong offset!");
static_assert(offsetof(FDbSettingParam, SoundSetting) == 0x000060, "Member 'FDbSettingParam::SoundSetting' has a wrong offset!");
static_assert(offsetof(FDbSettingParam, TrackingNumber) == 0x0000A8, "Member 'FDbSettingParam::TrackingNumber' has a wrong offset!");
static_assert(offsetof(FDbSettingParam, TokushoText) == 0x0000B8, "Member 'FDbSettingParam::TokushoText' has a wrong offset!");
static_assert(offsetof(FDbSettingParam, FundSettlementText) == 0x0000C8, "Member 'FDbSettingParam::FundSettlementText' has a wrong offset!");
static_assert(offsetof(FDbSettingParam, ChargedHeroCrystal) == 0x0000D8, "Member 'FDbSettingParam::ChargedHeroCrystal' has a wrong offset!");
static_assert(offsetof(FDbSettingParam, FreeHeroCrystal) == 0x0000DC, "Member 'FDbSettingParam::FreeHeroCrystal' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbShopItemParam
// 0x05E0 (0x0688 - 0x00A8)
struct FDbShopItemParam final : public FMasterDataShopItem
{
public:
	struct FDbItemCategoryParam                   ProductItem;                                       // 0x00A8(0x0488)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMasterDataCurrency                    Currency1Info;                                     // 0x0530(0x0068)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMasterDataCurrency                    Currency2Info;                                     // 0x0598(0x0068)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMasterDataCurrency                    Currency3Info;                                     // 0x0600(0x0068)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         PurchasedCount;                                    // 0x0668(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainCount;                                       // 0x066C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DiscountRate;                                      // 0x0670(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_674[0x14];                                     // 0x0674(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbShopItemParam) == 0x000008, "Wrong alignment on FDbShopItemParam");
static_assert(sizeof(FDbShopItemParam) == 0x000688, "Wrong size on FDbShopItemParam");
static_assert(offsetof(FDbShopItemParam, ProductItem) == 0x0000A8, "Member 'FDbShopItemParam::ProductItem' has a wrong offset!");
static_assert(offsetof(FDbShopItemParam, Currency1Info) == 0x000530, "Member 'FDbShopItemParam::Currency1Info' has a wrong offset!");
static_assert(offsetof(FDbShopItemParam, Currency2Info) == 0x000598, "Member 'FDbShopItemParam::Currency2Info' has a wrong offset!");
static_assert(offsetof(FDbShopItemParam, Currency3Info) == 0x000600, "Member 'FDbShopItemParam::Currency3Info' has a wrong offset!");
static_assert(offsetof(FDbShopItemParam, PurchasedCount) == 0x000668, "Member 'FDbShopItemParam::PurchasedCount' has a wrong offset!");
static_assert(offsetof(FDbShopItemParam, RemainCount) == 0x00066C, "Member 'FDbShopItemParam::RemainCount' has a wrong offset!");
static_assert(offsetof(FDbShopItemParam, DiscountRate) == 0x000670, "Member 'FDbShopItemParam::DiscountRate' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbShopParam
// 0x0148 (0x0178 - 0x0030)
struct FDbShopParam final : public FMasterDataShop
{
public:
	TArray<struct FDbShopItemParam>               ShopItemList;                                      // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMasterDataCurrency                    DisplayCurrency1;                                  // 0x0040(0x0068)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMasterDataCurrency                    DisplayCurrency2;                                  // 0x00A8(0x0068)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMasterDataCurrency                    DisplayCurrency3;                                  // 0x0110(0x0068)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbShopParam) == 0x000008, "Wrong alignment on FDbShopParam");
static_assert(sizeof(FDbShopParam) == 0x000178, "Wrong size on FDbShopParam");
static_assert(offsetof(FDbShopParam, ShopItemList) == 0x000030, "Member 'FDbShopParam::ShopItemList' has a wrong offset!");
static_assert(offsetof(FDbShopParam, DisplayCurrency1) == 0x000040, "Member 'FDbShopParam::DisplayCurrency1' has a wrong offset!");
static_assert(offsetof(FDbShopParam, DisplayCurrency2) == 0x0000A8, "Member 'FDbShopParam::DisplayCurrency2' has a wrong offset!");
static_assert(offsetof(FDbShopParam, DisplayCurrency3) == 0x000110, "Member 'FDbShopParam::DisplayCurrency3' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbCatalogData
// 0x00C8 (0x00C8 - 0x0000)
struct FDbCatalogData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CatalogId;                                         // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCatalogIdPs4                          CatalogIdPs4;                                      // 0x0018(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Caption;                                           // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Image;                                             // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RegularPrice;                                      // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrentPrice;                                      // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Option;                                            // 0x0088(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCatalogOption                         CatalogOption;                                     // 0x0098(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbCatalogData) == 0x000008, "Wrong alignment on FDbCatalogData");
static_assert(sizeof(FDbCatalogData) == 0x0000C8, "Wrong size on FDbCatalogData");
static_assert(offsetof(FDbCatalogData, CatalogId) == 0x000008, "Member 'FDbCatalogData::CatalogId' has a wrong offset!");
static_assert(offsetof(FDbCatalogData, CatalogIdPs4) == 0x000018, "Member 'FDbCatalogData::CatalogIdPs4' has a wrong offset!");
static_assert(offsetof(FDbCatalogData, Name) == 0x000038, "Member 'FDbCatalogData::Name' has a wrong offset!");
static_assert(offsetof(FDbCatalogData, Caption) == 0x000048, "Member 'FDbCatalogData::Caption' has a wrong offset!");
static_assert(offsetof(FDbCatalogData, Image) == 0x000058, "Member 'FDbCatalogData::Image' has a wrong offset!");
static_assert(offsetof(FDbCatalogData, RegularPrice) == 0x000068, "Member 'FDbCatalogData::RegularPrice' has a wrong offset!");
static_assert(offsetof(FDbCatalogData, CurrentPrice) == 0x000078, "Member 'FDbCatalogData::CurrentPrice' has a wrong offset!");
static_assert(offsetof(FDbCatalogData, Option) == 0x000088, "Member 'FDbCatalogData::Option' has a wrong offset!");
static_assert(offsetof(FDbCatalogData, CatalogOption) == 0x000098, "Member 'FDbCatalogData::CatalogOption' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbShopsParam
// 0x0068 (0x0068 - 0x0000)
struct FDbShopsParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FDbShopParam>              Shops;                                             // 0x0008(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FDbCatalogData>                 Catalog;                                           // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDbShopsParam) == 0x000008, "Wrong alignment on FDbShopsParam");
static_assert(sizeof(FDbShopsParam) == 0x000068, "Wrong size on FDbShopsParam");
static_assert(offsetof(FDbShopsParam, Shops) == 0x000008, "Member 'FDbShopsParam::Shops' has a wrong offset!");
static_assert(offsetof(FDbShopsParam, Catalog) == 0x000058, "Member 'FDbShopsParam::Catalog' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbSpecialLicenseReward
// 0x0008 (0x0490 - 0x0488)
struct FDbSpecialLicenseReward final : public FDbItemCategoryParam
{
public:
	int32                                         Count;                                             // 0x0488(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48C[0x4];                                      // 0x048C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbSpecialLicenseReward) == 0x000008, "Wrong alignment on FDbSpecialLicenseReward");
static_assert(sizeof(FDbSpecialLicenseReward) == 0x000490, "Wrong size on FDbSpecialLicenseReward");
static_assert(offsetof(FDbSpecialLicenseReward, Count) == 0x000488, "Member 'FDbSpecialLicenseReward::Count' has a wrong offset!");

// ScriptStruct BackendSubsystem.DbSpecialLicenseListParam
// 0x0090 (0x0090 - 0x0000)
struct FDbSpecialLicenseListParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentRank;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentExp;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalExp;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextExp;                                           // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxExp;                                            // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuyExpPrice;                                       // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuyExpCount;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FDbSpecialLicenseParam>    SpecialLicenseList;                                // 0x0028(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FDbSpecialLicenseReward>        LastRewardsList;                                   // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bViewResult;                                       // 0x0088(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDbSpecialLicenseListParam) == 0x000008, "Wrong alignment on FDbSpecialLicenseListParam");
static_assert(sizeof(FDbSpecialLicenseListParam) == 0x000090, "Wrong size on FDbSpecialLicenseListParam");
static_assert(offsetof(FDbSpecialLicenseListParam, CurrentRank) == 0x000008, "Member 'FDbSpecialLicenseListParam::CurrentRank' has a wrong offset!");
static_assert(offsetof(FDbSpecialLicenseListParam, CurrentExp) == 0x00000C, "Member 'FDbSpecialLicenseListParam::CurrentExp' has a wrong offset!");
static_assert(offsetof(FDbSpecialLicenseListParam, TotalExp) == 0x000010, "Member 'FDbSpecialLicenseListParam::TotalExp' has a wrong offset!");
static_assert(offsetof(FDbSpecialLicenseListParam, NextExp) == 0x000014, "Member 'FDbSpecialLicenseListParam::NextExp' has a wrong offset!");
static_assert(offsetof(FDbSpecialLicenseListParam, MaxExp) == 0x000018, "Member 'FDbSpecialLicenseListParam::MaxExp' has a wrong offset!");
static_assert(offsetof(FDbSpecialLicenseListParam, BuyExpPrice) == 0x00001C, "Member 'FDbSpecialLicenseListParam::BuyExpPrice' has a wrong offset!");
static_assert(offsetof(FDbSpecialLicenseListParam, BuyExpCount) == 0x000020, "Member 'FDbSpecialLicenseListParam::BuyExpCount' has a wrong offset!");
static_assert(offsetof(FDbSpecialLicenseListParam, SpecialLicenseList) == 0x000028, "Member 'FDbSpecialLicenseListParam::SpecialLicenseList' has a wrong offset!");
static_assert(offsetof(FDbSpecialLicenseListParam, LastRewardsList) == 0x000078, "Member 'FDbSpecialLicenseListParam::LastRewardsList' has a wrong offset!");
static_assert(offsetof(FDbSpecialLicenseListParam, bViewResult) == 0x000088, "Member 'FDbSpecialLicenseListParam::bViewResult' has a wrong offset!");

}

