#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CommonModule

#include "Basic.hpp"

#include "CommonModule_classes.hpp"
#include "CommonModule_parameters.hpp"


namespace SDK
{

// Function CommonModule.CommonStatics.FindSubLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             LevelName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevelStreaming*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULevelStreaming* UCommonStatics::FindSubLevel(class UWorld* World, class FName LevelName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CommonStatics", "FindSubLevel");

	Params::CommonStatics_FindSubLevel Parms{};

	Parms.World = World;
	Parms.LevelName = LevelName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CommonModule.CommonStatics.GetCurrentMapName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UCommonStatics::GetCurrentMapName(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CommonStatics", "GetCurrentMapName");

	Params::CommonStatics_GetCurrentMapName Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CommonModule.CommonStatics.SetLevelVisible
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             LevelName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCommonStatics::SetLevelVisible(const class UObject* WorldContextObject, class FName LevelName, bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CommonStatics", "SetLevelVisible");

	Params::CommonStatics_SetLevelVisible Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LevelName = LevelName;
	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CommonModule.DevelopActor.BP_OnCallConsoleCmd
// (Event, Protected, BlueprintEvent)

void ADevelopActor::BP_OnCallConsoleCmd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DevelopActor", "BP_OnCallConsoleCmd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CommonModule.DevelopActor.BP_OnChangedDevelopMenu
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bOpen                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADevelopActor::BP_OnChangedDevelopMenu(bool bOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DevelopActor", "BP_OnChangedDevelopMenu");

	Params::DevelopActor_BP_OnChangedDevelopMenu Parms{};

	Parms.bOpen = bOpen;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CommonModule.DevelopActor.BP_OnChangedDevelopPause
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bPause                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADevelopActor::BP_OnChangedDevelopPause(bool bPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DevelopActor", "BP_OnChangedDevelopPause");

	Params::DevelopActor_BP_OnChangedDevelopPause Parms{};

	Parms.bPause = bPause;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CommonModule.DevelopActor.MulticastOpenDevelopMenu
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// bool                                    bPause                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                PauseOwner                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PauseOwnerName                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADevelopActor::MulticastOpenDevelopMenu(bool bPause, const class APlayerController* PauseOwner, const class FString& PauseOwnerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DevelopActor", "MulticastOpenDevelopMenu");

	Params::DevelopActor_MulticastOpenDevelopMenu Parms{};

	Parms.bPause = bPause;
	Parms.PauseOwner = PauseOwner;
	Parms.PauseOwnerName = std::move(PauseOwnerName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CommonModule.DevelopActor.MulticastSetDevPause
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// bool                                    bPause                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bStep                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADevelopActor::MulticastSetDevPause(bool bPause, bool bStep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DevelopActor", "MulticastSetDevPause");

	Params::DevelopActor_MulticastSetDevPause Parms{};

	Parms.bPause = bPause;
	Parms.bStep = bStep;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CommonModule.DevelopActor.OnRep_DevMenuItemsData
// (Final, Native, Private)

void ADevelopActor::OnRep_DevMenuItemsData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DevelopActor", "OnRep_DevMenuItemsData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CommonModule.DevelopCharacterSelector.ConvertStringToEnum
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           CharacterIdString                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECharacterId                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECharacterId UDevelopCharacterSelector::ConvertStringToEnum(const class FString& CharacterIdString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DevelopCharacterSelector", "ConvertStringToEnum");

	Params::DevelopCharacterSelector_ConvertStringToEnum Parms{};

	Parms.CharacterIdString = std::move(CharacterIdString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

