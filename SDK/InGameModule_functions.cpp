#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InGameModule

#include "Basic.hpp"

#include "InGameModule_classes.hpp"
#include "InGameModule_parameters.hpp"


namespace SDK
{

// Function InGameModule.DogTagManagerComponent.ConsumeDogTag_ToClient
// (Net, NetReliable, Native, Event, NetMulticast, Public, NetValidate)
// Parameters:
// class APlayerStateBattle*               PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDogTagManagerComponent::ConsumeDogTag_ToClient(class APlayerStateBattle* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DogTagManagerComponent", "ConsumeDogTag_ToClient");

	Params::DogTagManagerComponent_ConsumeDogTag_ToClient Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.DogTagManagerComponent.ConsumeDogTag_ToServer
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class APlayerStateBattle*               PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDogTagManagerComponent::ConsumeDogTag_ToServer(class APlayerStateBattle* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DogTagManagerComponent", "ConsumeDogTag_ToServer");

	Params::DogTagManagerComponent_ConsumeDogTag_ToServer Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.DogTagManagerComponent.LockDogTag_ToClient
// (Net, NetReliable, Native, Event, NetMulticast, Public, NetValidate)
// Parameters:
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int16                                   PlayrId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDogTagManagerComponent::LockDogTag_ToClient(uint8 TeamId, int16 PlayrId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DogTagManagerComponent", "LockDogTag_ToClient");

	Params::DogTagManagerComponent_LockDogTag_ToClient Parms{};

	Parms.TeamId = TeamId;
	Parms.PlayrId = PlayrId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.DogTagManagerComponent.LockDogTag_ToServer
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int16                                   PlayrId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDogTagManagerComponent::LockDogTag_ToServer(uint8 TeamId, int16 PlayrId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DogTagManagerComponent", "LockDogTag_ToServer");

	Params::DogTagManagerComponent_LockDogTag_ToServer Parms{};

	Parms.TeamId = TeamId;
	Parms.PlayrId = PlayrId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.DogTagManagerComponent.OnPickupDogTag_ToClient
// (Net, NetReliable, Native, Event, NetMulticast, Public, NetValidate)
// Parameters:
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int16                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDogTagManagerComponent::OnPickupDogTag_ToClient(uint8 TeamId, int16 PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DogTagManagerComponent", "OnPickupDogTag_ToClient");

	Params::DogTagManagerComponent_OnPickupDogTag_ToClient Parms{};

	Parms.TeamId = TeamId;
	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.DogTagManagerComponent.OnPickupDogTag_ToServer
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int16                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDogTagManagerComponent::OnPickupDogTag_ToServer(uint8 TeamId, int16 PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DogTagManagerComponent", "OnPickupDogTag_ToServer");

	Params::DogTagManagerComponent_OnPickupDogTag_ToServer Parms{};

	Parms.TeamId = TeamId;
	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.DogTagManagerComponent.UnlockDogTag_ToClient
// (Net, NetReliable, Native, Event, NetMulticast, Public, NetValidate)
// Parameters:
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int16                                   PlayrId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDogTagManagerComponent::UnlockDogTag_ToClient(uint8 TeamId, int16 PlayrId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DogTagManagerComponent", "UnlockDogTag_ToClient");

	Params::DogTagManagerComponent_UnlockDogTag_ToClient Parms{};

	Parms.TeamId = TeamId;
	Parms.PlayrId = PlayrId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.DogTagManagerComponent.UnlockDogTag_ToServer
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// uint8                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int16                                   PlayrId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDogTagManagerComponent::UnlockDogTag_ToServer(uint8 TeamId, int16 PlayrId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DogTagManagerComponent", "UnlockDogTag_ToServer");

	Params::DogTagManagerComponent_UnlockDogTag_ToServer Parms{};

	Parms.TeamId = TeamId;
	Parms.PlayrId = PlayrId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.BP_PlayCameraShakeParam
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCameraShakerParam               Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerControllerBattle::BP_PlayCameraShakeParam(const struct FCameraShakerParam& Param, float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "BP_PlayCameraShakeParam");

	Params::PlayerControllerBattle_BP_PlayCameraShakeParam Parms{};

	Parms.Param = std::move(Param);
	Parms.Scale = Scale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.BP_SendViolationReport_CallServer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMdPenaltyType                          PenaltyReportType                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerControllerBattle::BP_SendViolationReport_CallServer(EMdPenaltyType PenaltyReportType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "BP_SendViolationReport_CallServer");

	Params::PlayerControllerBattle_BP_SendViolationReport_CallServer Parms{};

	Parms.PenaltyReportType = PenaltyReportType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.BP_ServerTravel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerControllerBattle::BP_ServerTravel(const class FString& URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "BP_ServerTravel");

	Params::PlayerControllerBattle_BP_ServerTravel Parms{};

	Parms.URL = std::move(URL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction InGameModule.PlayerControllerBattle.ChangeButtonGuideVisibilityEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void APlayerControllerBattle::ChangeButtonGuideVisibilityEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "ChangeButtonGuideVisibilityEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.PlayerControllerBattle.ClientPrepareRestart
// (Net, NetReliable, Native, Event, Public, NetClient)

void APlayerControllerBattle::ClientPrepareRestart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "ClientPrepareRestart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.ClientSelectRestartPosition
// (Net, NetReliable, Native, Event, Public, NetClient)

void APlayerControllerBattle::ClientSelectRestartPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "ClientSelectRestartPosition");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.ClientSetBattleResultData
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// TArray<struct FBattleResultData>        Data                                                   (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FDropItemParamInfo>       DropItems                                              (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bRetire                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerControllerBattle::ClientSetBattleResultData(const TArray<struct FBattleResultData>& Data, const TArray<struct FDropItemParamInfo>& DropItems, bool bRetire)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "ClientSetBattleResultData");

	Params::PlayerControllerBattle_ClientSetBattleResultData Parms{};

	Parms.Data = std::move(Data);
	Parms.DropItems = std::move(DropItems);
	Parms.bRetire = bRetire;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.ClientSetSpectatingCamera
// (Net, NetReliable, Native, Event, Protected, NetClient)

void APlayerControllerBattle::ClientSetSpectatingCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "ClientSetSpectatingCamera");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.DEBUG_DoEnvVfxCommandRPC_OnServer
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// EDamageAttribute                        Element                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerControllerBattle::DEBUG_DoEnvVfxCommandRPC_OnServer(EDamageAttribute Element)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "DEBUG_DoEnvVfxCommandRPC_OnServer");

	Params::PlayerControllerBattle_DEBUG_DoEnvVfxCommandRPC_OnServer Parms{};

	Parms.Element = Element;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.DEBUG_DoEnvVfxDebugCommand
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EDamageAttribute                        Element                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerControllerBattle::DEBUG_DoEnvVfxDebugCommand(EDamageAttribute Element)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "DEBUG_DoEnvVfxDebugCommand");

	Params::PlayerControllerBattle_DEBUG_DoEnvVfxDebugCommand Parms{};

	Parms.Element = Element;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction InGameModule.PlayerControllerBattle.Debug_OnEnvDebugCommandDispatched__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void APlayerControllerBattle::Debug_OnEnvDebugCommandDispatched__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "Debug_OnEnvDebugCommandDispatched__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.PlayerControllerBattle.DropItem_OnServer
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// int32                                   DipIndex                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerControllerBattle::DropItem_OnServer(const int32 DipIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "DropItem_OnServer");

	Params::PlayerControllerBattle_DropItem_OnServer Parms{};

	Parms.DipIndex = DipIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.OnRemovePlayerStateSpectating
// (Final, Native, Private)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerControllerBattle::OnRemovePlayerStateSpectating(class AActor* Actor, EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "OnRemovePlayerStateSpectating");

	Params::PlayerControllerBattle_OnRemovePlayerStateSpectating Parms{};

	Parms.Actor = Actor;
	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.OnRep_ChangePawn
// (Final, Native, Public)

void APlayerControllerBattle::OnRep_ChangePawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "OnRep_ChangePawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.OnShowProfileSubLevelHidden
// (Final, Native, Public)

void APlayerControllerBattle::OnShowProfileSubLevelHidden()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "OnShowProfileSubLevelHidden");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.OnShowProfileSubLevelShow
// (Final, Native, Public)

void APlayerControllerBattle::OnShowProfileSubLevelShow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "OnShowProfileSubLevelShow");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.OpenSpectating
// (Final, Native, Protected)

void APlayerControllerBattle::OpenSpectating()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "OpenSpectating");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.RequestPlayerDataActivityStatus
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FUniqueNetIdKey                  UniqueId                                               (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerControllerBattle::RequestPlayerDataActivityStatus(const struct FUniqueNetIdKey& UniqueId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "RequestPlayerDataActivityStatus");

	Params::PlayerControllerBattle_RequestPlayerDataActivityStatus Parms{};

	Parms.UniqueId = std::move(UniqueId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.ReTargetViewSpectatingServer
// (Net, Native, Event, Public, NetServer, NetValidate)

void APlayerControllerBattle::ReTargetViewSpectatingServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "ReTargetViewSpectatingServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.SendCheer_OnServer
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// class APlayerStateBattle*               SendCheerPlayerState                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerStateBattle*               RecvCheerPlayerState                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AddCheerCount                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerControllerBattle::SendCheer_OnServer(class APlayerStateBattle* SendCheerPlayerState, class APlayerStateBattle* RecvCheerPlayerState, int32 AddCheerCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "SendCheer_OnServer");

	Params::PlayerControllerBattle_SendCheer_OnServer Parms{};

	Parms.SendCheerPlayerState = SendCheerPlayerState;
	Parms.RecvCheerPlayerState = RecvCheerPlayerState;
	Parms.AddCheerCount = AddCheerCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.SendPlayerDataActivityStatus
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FPlayerDataActivityStatus        ScoreData                                              (Parm, NoDestructor, NativeAccessSpecifierPublic)

void APlayerControllerBattle::SendPlayerDataActivityStatus(const struct FPlayerDataActivityStatus& ScoreData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "SendPlayerDataActivityStatus");

	Params::PlayerControllerBattle_SendPlayerDataActivityStatus Parms{};

	Parms.ScoreData = std::move(ScoreData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.SendViolationReport_OnServer
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class FString                           SendSelectedPlayerId                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           RecvSelectedPlayerId                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMdPenaltyType                          PenaltyReportType                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerControllerBattle::SendViolationReport_OnServer(const class FString& SendSelectedPlayerId, const class FString& RecvSelectedPlayerId, EMdPenaltyType PenaltyReportType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "SendViolationReport_OnServer");

	Params::PlayerControllerBattle_SendViolationReport_OnServer Parms{};

	Parms.SendSelectedPlayerId = std::move(SendSelectedPlayerId);
	Parms.RecvSelectedPlayerId = std::move(RecvSelectedPlayerId);
	Parms.PenaltyReportType = PenaltyReportType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.SendViolationReport_OnServerDebug
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class FString                           RecvSelectedPlayerId                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMdPenaltyType                          PenaltyReportType                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerControllerBattle::SendViolationReport_OnServerDebug(const class FString& RecvSelectedPlayerId, EMdPenaltyType PenaltyReportType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "SendViolationReport_OnServerDebug");

	Params::PlayerControllerBattle_SendViolationReport_OnServerDebug Parms{};

	Parms.RecvSelectedPlayerId = std::move(RecvSelectedPlayerId);
	Parms.PenaltyReportType = PenaltyReportType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.ServerSpectatingChangePlayerView
// (Net, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// bool                                    bNext                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerControllerBattle::ServerSpectatingChangePlayerView(bool bNext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "ServerSpectatingChangePlayerView");

	Params::PlayerControllerBattle_ServerSpectatingChangePlayerView Parms{};

	Parms.bNext = bNext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.ServerTravelBattle
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class FString                           InGameMode                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InStage                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerControllerBattle::ServerTravelBattle(const class FString& InGameMode, const class FString& InStage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "ServerTravelBattle");

	Params::PlayerControllerBattle_ServerTravelBattle Parms{};

	Parms.InGameMode = std::move(InGameMode);
	Parms.InStage = std::move(InStage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.StartBattle
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           InGameMode                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InStage                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerControllerBattle::StartBattle(const class FString& InGameMode, const class FString& InStage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "StartBattle");

	Params::PlayerControllerBattle_StartBattle Parms{};

	Parms.InGameMode = std::move(InGameMode);
	Parms.InStage = std::move(InStage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.StartSpectatingFromDead
// (Final, Native, Public, BlueprintCallable)

void APlayerControllerBattle::StartSpectatingFromDead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "StartSpectatingFromDead");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.SwitchAbilityInfoVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerControllerBattle::SwitchAbilityInfoVisibility(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "SwitchAbilityInfoVisibility");

	Params::PlayerControllerBattle_SwitchAbilityInfoVisibility Parms{};

	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.SwitchAllyPlayerStatusInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerControllerBattle::SwitchAllyPlayerStatusInfo(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "SwitchAllyPlayerStatusInfo");

	Params::PlayerControllerBattle_SwitchAllyPlayerStatusInfo Parms{};

	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.SwitchBattleCounterVisibility
// (Final, Native, Public)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerControllerBattle::SwitchBattleCounterVisibility(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "SwitchBattleCounterVisibility");

	Params::PlayerControllerBattle_SwitchBattleCounterVisibility Parms{};

	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.SwitchCrossHairsVisibility
// (Final, Native, Public)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerControllerBattle::SwitchCrossHairsVisibility(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "SwitchCrossHairsVisibility");

	Params::PlayerControllerBattle_SwitchCrossHairsVisibility Parms{};

	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.SwitchInGameButtonGuideVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerControllerBattle::SwitchInGameButtonGuideVisibility(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "SwitchInGameButtonGuideVisibility");

	Params::PlayerControllerBattle_SwitchInGameButtonGuideVisibility Parms{};

	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.SwitchLocalPlayerStatusInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerControllerBattle::SwitchLocalPlayerStatusInfo(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "SwitchLocalPlayerStatusInfo");

	Params::PlayerControllerBattle_SwitchLocalPlayerStatusInfo Parms{};

	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.SwitchLvUpShortCutVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerControllerBattle::SwitchLvUpShortCutVisibility(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "SwitchLvUpShortCutVisibility");

	Params::PlayerControllerBattle_SwitchLvUpShortCutVisibility Parms{};

	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.SwitchMiscInfoVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerControllerBattle::SwitchMiscInfoVisibility(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "SwitchMiscInfoVisibility");

	Params::PlayerControllerBattle_SwitchMiscInfoVisibility Parms{};

	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.SwitchPlusUltraVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerControllerBattle::SwitchPlusUltraVisibility(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "SwitchPlusUltraVisibility");

	Params::PlayerControllerBattle_SwitchPlusUltraVisibility Parms{};

	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.SwitchShortcutInfoVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerControllerBattle::SwitchShortcutInfoVisibility(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "SwitchShortcutInfoVisibility");

	Params::PlayerControllerBattle_SwitchShortcutInfoVisibility Parms{};

	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerBattle.BP_GetCommandHUDControlComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UHudCommandControlComponent*      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHudCommandControlComponent* APlayerControllerBattle::BP_GetCommandHUDControlComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "BP_GetCommandHUDControlComponent");

	Params::PlayerControllerBattle_BP_GetCommandHUDControlComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.PlayerControllerBattle.BP_GetControlledCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ACharacterBattle*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ACharacterBattle* APlayerControllerBattle::BP_GetControlledCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "BP_GetControlledCharacter");

	Params::PlayerControllerBattle_BP_GetControlledCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.PlayerControllerBattle.GetCommentaryVoiceComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCommentaryVoiceComponent*        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCommentaryVoiceComponent* APlayerControllerBattle::GetCommentaryVoiceComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "GetCommentaryVoiceComponent");

	Params::PlayerControllerBattle_GetCommentaryVoiceComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.PlayerControllerBattle.ServerTravel
// (Net, NetReliable, Native, Event, Public, NetServer, Const)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerControllerBattle::ServerTravel(const class FString& URL) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerBattle", "ServerTravel");

	Params::PlayerControllerBattle_ServerTravel Parms{};

	Parms.URL = std::move(URL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SupplyActorBase.FirstSearchUnderObject
// (Native, Protected)

void ASupplyActorBase::FirstSearchUnderObject()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyActorBase", "FirstSearchUnderObject");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SupplyActorBase.OnCollapseInAirEvent
// (Final, Native, Public)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASupplyActorBase::OnCollapseInAirEvent(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyActorBase", "OnCollapseInAirEvent");

	Params::SupplyActorBase_OnCollapseInAirEvent Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SupplyActorBase.OnRep_NetSupplyId
// (Final, Native, Private)

void ASupplyActorBase::OnRep_NetSupplyId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyActorBase", "OnRep_NetSupplyId");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SupplyActorBase.OnSearchUnderActor
// (Final, Native, Public)

void ASupplyActorBase::OnSearchUnderActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyActorBase", "OnSearchUnderActor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SupplyActorBase.OnSearchUnderActorCorrect
// (Final, Native, Public)

void ASupplyActorBase::OnSearchUnderActorCorrect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyActorBase", "OnSearchUnderActorCorrect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ItemBase.OnInteractToClient_RPC
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// class APlayerState*                     PalyerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AItemBase::OnInteractToClient_RPC(class APlayerState* PalyerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemBase", "OnInteractToClient_RPC");

	Params::ItemBase_OnInteractToClient_RPC Parms{};

	Parms.PalyerState = PalyerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ItemBase.SetupComponents
// (Final, Native, Public)

void AItemBase::SetupComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemBase", "SetupComponents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BattleBriefingSignalPinWidget.CommitPin
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// struct FVector2D                        PinUpPosition                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAlert                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattleBriefingSignalPinWidget::CommitPin(const struct FVector2D& PinUpPosition, const bool& bAlert)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleBriefingSignalPinWidget", "CommitPin");

	Params::BattleBriefingSignalPinWidget_CommitPin Parms{};

	Parms.PinUpPosition = std::move(PinUpPosition);
	Parms.bAlert = bAlert;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction InGameModule.BattleBriefingSignalPinWidget.CommitPinDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    bAlert                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattleBriefingSignalPinWidget::CommitPinDelegate__DelegateSignature(const bool bAlert)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleBriefingSignalPinWidget", "CommitPinDelegate__DelegateSignature");

	Params::BattleBriefingSignalPinWidget_CommitPinDelegate__DelegateSignature Parms{};

	Parms.bAlert = bAlert;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.AbilityIconWidget.BP_SetAvility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECharacterId                            CharacterId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAttackId                               AttackId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   VariationNo                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAbilityIconWidget::BP_SetAvility(ECharacterId CharacterId, EAttackId AttackId, int32 VariationNo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityIconWidget", "BP_SetAvility");

	Params::AbilityIconWidget_BP_SetAvility Parms{};

	Parms.CharacterId = CharacterId;
	Parms.AttackId = AttackId;
	Parms.VariationNo = VariationNo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.AbilityIconWidget.BP_SetLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAbilityIconWidget::BP_SetLevel(int32 Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityIconWidget", "BP_SetLevel");

	Params::AbilityIconWidget_BP_SetLevel Parms{};

	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.AbilityInfoWidget.FinishedAbilityTime
// (Final, Native, Public)
// Parameters:
// class UAbilityHolder*                   FinishedAbilityHolder                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAbilityInfoWidget::FinishedAbilityTime(class UAbilityHolder* FinishedAbilityHolder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityInfoWidget", "FinishedAbilityTime");

	Params::AbilityInfoWidget_FinishedAbilityTime Parms{};

	Parms.FinishedAbilityHolder = FinishedAbilityHolder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.AbilityInfoWidget.HideAbilitySetCardAfterAnimation
// (Final, Native, Public)

void UAbilityInfoWidget::HideAbilitySetCardAfterAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityInfoWidget", "HideAbilitySetCardAfterAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.AbilityInfoWidget.PlayAbilitySetAnimation
// (Final, Native, Public)
// Parameters:
// class USupply*                          NewSupply                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAbilityInfoWidget::PlayAbilitySetAnimation(class USupply* NewSupply)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityInfoWidget", "PlayAbilitySetAnimation");

	Params::AbilityInfoWidget_PlayAbilitySetAnimation Parms{};

	Parms.NewSupply = NewSupply;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.AbilityInfoWidget.StartAbilityTimer
// (Final, Native, Public)
// Parameters:
// class UAbilityHolder*                   beganAbilityHolder                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAbilityInfoWidget::StartAbilityTimer(class UAbilityHolder* beganAbilityHolder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityInfoWidget", "StartAbilityTimer");

	Params::AbilityInfoWidget_StartAbilityTimer Parms{};

	Parms.beganAbilityHolder = beganAbilityHolder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.AbilityInfoWidget.UpdateAbilityShortcut
// (Final, Native, Public)

void UAbilityInfoWidget::UpdateAbilityShortcut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityInfoWidget", "UpdateAbilityShortcut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.AbilityInfoWidget.UpdateEventAbility
// (Final, Native, Public)
// Parameters:
// class USupply*                          NewSupply                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAbilityInfoWidget::UpdateEventAbility(class USupply* NewSupply)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityInfoWidget", "UpdateEventAbility");

	Params::AbilityInfoWidget_UpdateEventAbility Parms{};

	Parms.NewSupply = NewSupply;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.AbilityInfoWidget.Wait
// (Final, Native, Public)

void UAbilityInfoWidget::Wait()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityInfoWidget", "Wait");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.AbilityLevelCounter.PlayLevelUpAnim
// (Final, Native, Public, BlueprintCallable)

void UAbilityLevelCounter::PlayLevelUpAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityLevelCounter", "PlayLevelUpAnim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.AbilityLevelCounter.PlayLevelUpAnim_Internal
// (Event, Public, BlueprintEvent)

void UAbilityLevelCounter::PlayLevelUpAnim_Internal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityLevelCounter", "PlayLevelUpAnim_Internal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.AbilityLevelCounter.SetLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAbilityLevelCounter::SetLevel(int32 Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityLevelCounter", "SetLevel");

	Params::AbilityLevelCounter_SetLevel Parms{};

	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.AbilityLevelCounter.ChangeTextColor
// (Final, Native, Public, BlueprintCallable, Const)

void UAbilityLevelCounter::ChangeTextColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityLevelCounter", "ChangeTextColor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionBattleBase.BP_ActionPingDelay
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bWaitForSpecificPing                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TargetPing                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UActionBattleBase::BP_ActionPingDelay(bool bWaitForSpecificPing, int32 TargetPing, const struct FLatentActionInfo& LatentInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_ActionPingDelay");

	Params::ActionBattleBase_BP_ActionPingDelay Parms{};

	Parms.bWaitForSpecificPing = bWaitForSpecificPing;
	Parms.TargetPing = TargetPing;
	Parms.LatentInfo = std::move(LatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionBattleBase.BP_AddUniqueUseCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   UniqueNum                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionBattleBase::BP_AddUniqueUseCount(int32 UniqueNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_AddUniqueUseCount");

	Params::ActionBattleBase_BP_AddUniqueUseCount Parms{};

	Parms.UniqueNum = UniqueNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionBattleBase.BP_AnimEndDelay
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EAnimationSlot                          Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OnBlendOut                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UActionBattleBase::BP_AnimEndDelay(EAnimationSlot Slot, bool OnBlendOut, const struct FLatentActionInfo& LatentInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_AnimEndDelay");

	Params::ActionBattleBase_BP_AnimEndDelay Parms{};

	Parms.Slot = Slot;
	Parms.OnBlendOut = OnBlendOut;
	Parms.LatentInfo = std::move(LatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionBattleBase.BP_ChangeNagaraAttackToWhole
// (Final, Native, Protected, BlueprintCallable)

void UActionBattleBase::BP_ChangeNagaraAttackToWhole()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_ChangeNagaraAttackToWhole");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionBattleBase.BP_ChangeWholeAttackToNagara
// (Final, Native, Protected, BlueprintCallable)

void UActionBattleBase::BP_ChangeWholeAttackToNagara()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_ChangeWholeAttackToNagara");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionBattleBase.BP_ClearCenterRotation
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   ReverseRate                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionBattleBase::BP_ClearCenterRotation(float ReverseRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_ClearCenterRotation");

	Params::ActionBattleBase_BP_ClearCenterRotation Parms{};

	Parms.ReverseRate = ReverseRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionBattleBase.BP_CommandDelay
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// ECommandId                              CommandID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UActionBattleBase::BP_CommandDelay(ECommandId CommandID, const struct FLatentActionInfo& LatentInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_CommandDelay");

	Params::ActionBattleBase_BP_CommandDelay Parms{};

	Parms.CommandID = CommandID;
	Parms.LatentInfo = std::move(LatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionBattleBase.BP_NegotiationDelay
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   MaxDuration                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UActionBattleBase::BP_NegotiationDelay(float MaxDuration, const struct FLatentActionInfo& LatentInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_NegotiationDelay");

	Params::ActionBattleBase_BP_NegotiationDelay Parms{};

	Parms.MaxDuration = MaxDuration;
	Parms.LatentInfo = std::move(LatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionBattleBase.BP_OnAbortGrabbedEvent
// (Event, Protected, BlueprintEvent)

void UActionBattleBase::BP_OnAbortGrabbedEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_OnAbortGrabbedEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ActionBattleBase.BP_OnAbortGrabEvent
// (Event, Protected, BlueprintEvent)

void UActionBattleBase::BP_OnAbortGrabEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_OnAbortGrabEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ActionBattleBase.BP_OnBeginAimingMode
// (Event, Protected, BlueprintEvent)

void UActionBattleBase::BP_OnBeginAimingMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_OnBeginAimingMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ActionBattleBase.BP_OnEndAimingMode
// (Event, Protected, BlueprintEvent)

void UActionBattleBase::BP_OnEndAimingMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_OnEndAimingMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ActionBattleBase.BP_OnLandingEvent
// (Event, Protected, BlueprintEvent)

void UActionBattleBase::BP_OnLandingEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_OnLandingEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ActionBattleBase.BP_OnLeaveGroundEvent
// (Native, Event, Protected, BlueprintEvent)

void UActionBattleBase::BP_OnLeaveGroundEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_OnLeaveGroundEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionBattleBase.BP_ProgressDelay
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UActionBattleBase::BP_ProgressDelay(float Duration, const struct FLatentActionInfo& LatentInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_ProgressDelay");

	Params::ActionBattleBase_BP_ProgressDelay Parms{};

	Parms.Duration = Duration;
	Parms.LatentInfo = std::move(LatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionBattleBase.BP_RequestNegotiateAndWaitActionTarget
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class ACharacterBattle*                 NegotiationTargetCharacter                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionBattleBase::BP_RequestNegotiateAndWaitActionTarget(class ACharacterBattle* NegotiationTargetCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_RequestNegotiateAndWaitActionTarget");

	Params::ActionBattleBase_BP_RequestNegotiateAndWaitActionTarget Parms{};

	Parms.NegotiationTargetCharacter = NegotiationTargetCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionBattleBase.BP_RequestNegotiateTarget
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AActor*                           NegotiationTarget                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionBattleBase::BP_RequestNegotiateTarget(class AActor* NegotiationTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_RequestNegotiateTarget");

	Params::ActionBattleBase_BP_RequestNegotiateTarget Parms{};

	Parms.NegotiationTarget = NegotiationTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionBattleBase.BP_RequestShiftAction
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             ShiftActionName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionBattleBase::BP_RequestShiftAction(class FName ShiftActionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_RequestShiftAction");

	Params::ActionBattleBase_BP_RequestShiftAction Parms{};

	Parms.ShiftActionName = ShiftActionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionBattleBase.BP_RestoreAimingMode
// (Final, Native, Protected, BlueprintCallable)

void UActionBattleBase::BP_RestoreAimingMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_RestoreAimingMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionBattleBase.BP_SendActionPing
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   Ping                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionBattleBase::BP_SendActionPing(int32 Ping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_SendActionPing");

	Params::ActionBattleBase_BP_SendActionPing Parms{};

	Parms.Ping = Ping;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionBattleBase.BP_SendBeginActionInfoToMember
// (Final, Native, Protected, BlueprintCallable)

void UActionBattleBase::BP_SendBeginActionInfoToMember()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_SendBeginActionInfoToMember");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionBattleBase.BP_SendEndActionInfoToMember
// (Final, Native, Protected, BlueprintCallable)

void UActionBattleBase::BP_SendEndActionInfoToMember()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_SendEndActionInfoToMember");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionBattleBase.BP_SetAnimationAdditionalTime
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionBattleBase::BP_SetAnimationAdditionalTime(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_SetAnimationAdditionalTime");

	Params::ActionBattleBase_BP_SetAnimationAdditionalTime Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionBattleBase.BP_SetDamageActionToGrabbedCharacter
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             DamageName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionBattleBase::BP_SetDamageActionToGrabbedCharacter(class FName DamageName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_SetDamageActionToGrabbedCharacter");

	Params::ActionBattleBase_BP_SetDamageActionToGrabbedCharacter Parms{};

	Parms.DamageName = DamageName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionBattleBase.BP_SetEnableAiming
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    Enable                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionBattleBase::BP_SetEnableAiming(const bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_SetEnableAiming");

	Params::ActionBattleBase_BP_SetEnableAiming Parms{};

	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionBattleBase.BP_SetEnableUseSupply
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionBattleBase::BP_SetEnableUseSupply(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_SetEnableUseSupply");

	Params::ActionBattleBase_BP_SetEnableUseSupply Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionBattleBase.BP_SetForceGrabCharacter
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class ACharacterBattle*                 GrabbedCharacter                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             GrabJointName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             GrabbedJointName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAnimationId                            GrabbedAnimationId                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             GrabbedActionName                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnableGrabbedCamera                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionBattleBase::BP_SetForceGrabCharacter(class ACharacterBattle* GrabbedCharacter, class FName GrabJointName, class FName GrabbedJointName, EAnimationId GrabbedAnimationId, const class FName GrabbedActionName, bool bEnableGrabbedCamera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_SetForceGrabCharacter");

	Params::ActionBattleBase_BP_SetForceGrabCharacter Parms{};

	Parms.GrabbedCharacter = GrabbedCharacter;
	Parms.GrabJointName = GrabJointName;
	Parms.GrabbedJointName = GrabbedJointName;
	Parms.GrabbedAnimationId = GrabbedAnimationId;
	Parms.GrabbedActionName = GrabbedActionName;
	Parms.bEnableGrabbedCamera = bEnableGrabbedCamera;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionBattleBase.BP_SetGrabbedCharacterAnimation
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EAnimationId                            AnimId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartPosition                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionBattleBase::BP_SetGrabbedCharacterAnimation(EAnimationId AnimId, float BlendTime, float StartPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_SetGrabbedCharacterAnimation");

	Params::ActionBattleBase_BP_SetGrabbedCharacterAnimation Parms{};

	Parms.AnimId = AnimId;
	Parms.BlendTime = BlendTime;
	Parms.StartPosition = StartPosition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionBattleBase.BP_SetMoveDirection
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Direction                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionBattleBase::BP_SetMoveDirection(const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_SetMoveDirection");

	Params::ActionBattleBase_BP_SetMoveDirection Parms{};

	Parms.Direction = std::move(Direction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionBattleBase.BP_SetNormalActionToGrabbedCharacter
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             ActionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionBattleBase::BP_SetNormalActionToGrabbedCharacter(class FName ActionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_SetNormalActionToGrabbedCharacter");

	Params::ActionBattleBase_BP_SetNormalActionToGrabbedCharacter Parms{};

	Parms.ActionName = ActionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionBattleBase.BP_SetReturnToNormal
// (Final, Native, Protected, BlueprintCallable)

void UActionBattleBase::BP_SetReturnToNormal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_SetReturnToNormal");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionBattleBase.BP_SSetCameraType
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EBattleCameraType                       Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionBattleBase::BP_SSetCameraType(EBattleCameraType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_SSetCameraType");

	Params::ActionBattleBase_BP_SSetCameraType Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionBattleBase.BP_StartRotationPitchToDirection
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   Span                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EActionAxis                             TargetAxis                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionBattleBase::BP_StartRotationPitchToDirection(float Span, EActionAxis TargetAxis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_StartRotationPitchToDirection");

	Params::ActionBattleBase_BP_StartRotationPitchToDirection Parms{};

	Parms.Span = Span;
	Parms.TargetAxis = TargetAxis;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionBattleBase.BP_UpdateMoveDirection
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          DestDirection                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionBattleBase::BP_UpdateMoveDirection(const struct FVector& DestDirection, float Rate, float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_UpdateMoveDirection");

	Params::ActionBattleBase_BP_UpdateMoveDirection Parms{};

	Parms.DestDirection = std::move(DestDirection);
	Parms.Rate = Rate;
	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionBattleBase.BP_UpdateRotationPitchToDirection
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Direction                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxDegrees                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UActionBattleBase::BP_UpdateRotationPitchToDirection(float DeltaSeconds, const struct FVector& Direction, float Rate, float MaxDegrees)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_UpdateRotationPitchToDirection");

	Params::ActionBattleBase_BP_UpdateRotationPitchToDirection Parms{};

	Parms.DeltaSeconds = DeltaSeconds;
	Parms.Direction = std::move(Direction);
	Parms.Rate = Rate;
	Parms.MaxDegrees = MaxDegrees;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionBattleBase.BP_GetActionArgment
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UActionBattleBase::BP_GetActionArgment() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_GetActionArgment");

	Params::ActionBattleBase_BP_GetActionArgment Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionBattleBase.BP_GetActionPing
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UActionBattleBase::BP_GetActionPing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_GetActionPing");

	Params::ActionBattleBase_BP_GetActionPing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionBattleBase.BP_GetActionTargetActor
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UActionBattleBase::BP_GetActionTargetActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_GetActionTargetActor");

	Params::ActionBattleBase_BP_GetActionTargetActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionBattleBase.BP_GetActionTargetAsCharacterBattle
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ACharacterBattle*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ACharacterBattle* UActionBattleBase::BP_GetActionTargetAsCharacterBattle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_GetActionTargetAsCharacterBattle");

	Params::ActionBattleBase_BP_GetActionTargetAsCharacterBattle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionBattleBase.BP_GetAnimation
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAnimation*                       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimation* UActionBattleBase::BP_GetAnimation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_GetAnimation");

	Params::ActionBattleBase_BP_GetAnimation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionBattleBase.BP_GetAnimationAdditionalTime
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UActionBattleBase::BP_GetAnimationAdditionalTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_GetAnimationAdditionalTime");

	Params::ActionBattleBase_BP_GetAnimationAdditionalTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionBattleBase.BP_GetBattleEffect
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCharacterBattleEffectComponent*  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCharacterBattleEffectComponent* UActionBattleBase::BP_GetBattleEffect() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_GetBattleEffect");

	Params::ActionBattleBase_BP_GetBattleEffect Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionBattleBase.BP_GetCameraDirection
// (Final, Native, Protected, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector UActionBattleBase::BP_GetCameraDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_GetCameraDirection");

	Params::ActionBattleBase_BP_GetCameraDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionBattleBase.BP_GetForwardDirectionForBaseActionMovement
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          SourceDirection                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UActionBattleBase::BP_GetForwardDirectionForBaseActionMovement(const struct FVector& SourceDirection) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_GetForwardDirectionForBaseActionMovement");

	Params::ActionBattleBase_BP_GetForwardDirectionForBaseActionMovement Parms{};

	Parms.SourceDirection = std::move(SourceDirection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionBattleBase.BP_GetMagazine
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMagazineManagementComponent*     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMagazineManagementComponent* UActionBattleBase::BP_GetMagazine() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_GetMagazine");

	Params::ActionBattleBase_BP_GetMagazine Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionBattleBase.BP_GetMoveDirection
// (Final, Native, Protected, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector UActionBattleBase::BP_GetMoveDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_GetMoveDirection");

	Params::ActionBattleBase_BP_GetMoveDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionBattleBase.BP_GetNearestCharacter
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAlly                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDying                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacterBattle*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ACharacterBattle* UActionBattleBase::BP_GetNearestCharacter(float Radius, bool bAlly, bool bDying) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_GetNearestCharacter");

	Params::ActionBattleBase_BP_GetNearestCharacter Parms{};

	Parms.Radius = Radius;
	Parms.bAlly = bAlly;
	Parms.bDying = bDying;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionBattleBase.BP_GetOwnerCharacterBattle
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ACharacterBattle*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ACharacterBattle* UActionBattleBase::BP_GetOwnerCharacterBattle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_GetOwnerCharacterBattle");

	Params::ActionBattleBase_BP_GetOwnerCharacterBattle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionBattleBase.BP_GetOwnerCommand
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCharacterCommandComponent*       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCharacterCommandComponent* UActionBattleBase::BP_GetOwnerCommand() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_GetOwnerCommand");

	Params::ActionBattleBase_BP_GetOwnerCommand Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionBattleBase.BP_GetOwnerDamage
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCharacterDamageComponent*        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCharacterDamageComponent* UActionBattleBase::BP_GetOwnerDamage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_GetOwnerDamage");

	Params::ActionBattleBase_BP_GetOwnerDamage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionBattleBase.BP_GetOwnerMovementBattle
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMovementComponentBattle*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMovementComponentBattle* UActionBattleBase::BP_GetOwnerMovementBattle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_GetOwnerMovementBattle");

	Params::ActionBattleBase_BP_GetOwnerMovementBattle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionBattleBase.BP_GetOwnerState
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCharacterState*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCharacterState* UActionBattleBase::BP_GetOwnerState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_GetOwnerState");

	Params::ActionBattleBase_BP_GetOwnerState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionBattleBase.BP_GetParam
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCharacterParam*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCharacterParam* UActionBattleBase::BP_GetParam() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_GetParam");

	Params::ActionBattleBase_BP_GetParam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionBattleBase.BP_GetPlayerStateBattle
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APlayerStateBattle*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APlayerStateBattle* UActionBattleBase::BP_GetPlayerStateBattle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_GetPlayerStateBattle");

	Params::ActionBattleBase_BP_GetPlayerStateBattle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionBattleBase.BP_IsEnableShiftAction
// (Native, Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class FName                             NextAction                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UActionBattleBase::BP_IsEnableShiftAction(const class FName& NextAction) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBattleBase", "BP_IsEnableShiftAction");

	Params::ActionBattleBase_BP_IsEnableShiftAction Parms{};

	Parms.NextAction = NextAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.BattleBriefingSwitchWidget.PressSwitchOnKey
// (Final, Native, Protected)
// Parameters:
// class FName                             CustomName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTrg                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRapidFire                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattleBriefingSwitchWidget::PressSwitchOnKey(const class FName CustomName, const bool bTrg, const bool bRapidFire)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleBriefingSwitchWidget", "PressSwitchOnKey");

	Params::BattleBriefingSwitchWidget_PressSwitchOnKey Parms{};

	Parms.CustomName = CustomName;
	Parms.bTrg = bTrg;
	Parms.bRapidFire = bRapidFire;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BattleBriefingSwitchWidget.PushOffButton
// (Final, Native, Protected)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattleBriefingSwitchWidget::PushOffButton(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleBriefingSwitchWidget", "PushOffButton");

	Params::BattleBriefingSwitchWidget_PushOffButton Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BattleBriefingSwitchWidget.PushOnButton
// (Final, Native, Protected)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattleBriefingSwitchWidget::PushOnButton(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleBriefingSwitchWidget", "PushOnButton");

	Params::BattleBriefingSwitchWidget_PushOnButton Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BattleBriefingSwitchWidget.ReleaseSwitchOnKey
// (Final, Native, Protected)
// Parameters:
// class FName                             CustomName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattleBriefingSwitchWidget::ReleaseSwitchOnKey(const class FName CustomName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleBriefingSwitchWidget", "ReleaseSwitchOnKey");

	Params::BattleBriefingSwitchWidget_ReleaseSwitchOnKey Parms{};

	Parms.CustomName = CustomName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionAttackBase.BP_ActionAttackChargeMain
// (Event, Protected, BlueprintEvent)

void UActionAttackBase::BP_ActionAttackChargeMain()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_ActionAttackChargeMain");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ActionAttackBase.BP_ActionAttackChargeMainAir
// (Event, Protected, BlueprintEvent)

void UActionAttackBase::BP_ActionAttackChargeMainAir()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_ActionAttackChargeMainAir");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ActionAttackBase.BP_ActionAttackChargeMainGround
// (Event, Protected, BlueprintEvent)

void UActionAttackBase::BP_ActionAttackChargeMainGround()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_ActionAttackChargeMainGround");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ActionAttackBase.BP_ActionAttackChargeRemote
// (Event, Protected, BlueprintEvent)

void UActionAttackBase::BP_ActionAttackChargeRemote()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_ActionAttackChargeRemote");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ActionAttackBase.BP_ActionAttackChargeRemoteAir
// (Event, Protected, BlueprintEvent)

void UActionAttackBase::BP_ActionAttackChargeRemoteAir()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_ActionAttackChargeRemoteAir");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ActionAttackBase.BP_ActionAttackChargeRemoteGround
// (Event, Protected, BlueprintEvent)

void UActionAttackBase::BP_ActionAttackChargeRemoteGround()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_ActionAttackChargeRemoteGround");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ActionAttackBase.BP_ActionAttackMainAir
// (Event, Protected, BlueprintEvent)

void UActionAttackBase::BP_ActionAttackMainAir()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_ActionAttackMainAir");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ActionAttackBase.BP_ActionAttackMainGround
// (Event, Protected, BlueprintEvent)

void UActionAttackBase::BP_ActionAttackMainGround()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_ActionAttackMainGround");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ActionAttackBase.BP_ActionAttackRemoteAir
// (Event, Protected, BlueprintEvent)

void UActionAttackBase::BP_ActionAttackRemoteAir()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_ActionAttackRemoteAir");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ActionAttackBase.BP_ActionAttackRemoteGround
// (Event, Protected, BlueprintEvent)

void UActionAttackBase::BP_ActionAttackRemoteGround()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_ActionAttackRemoteGround");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ActionAttackBase.BP_DisableActionCancel
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EActionCancelFlag                       Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_DisableActionCancel(EActionCancelFlag Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_DisableActionCancel");

	Params::ActionAttackBase_BP_DisableActionCancel Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionAttackBase.BP_EnableActionCancel
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EActionCancelFlag                       Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_EnableActionCancel(EActionCancelFlag Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_EnableActionCancel");

	Params::ActionAttackBase_BP_EnableActionCancel Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionAttackBase.BP_EndAttack
// (Final, Native, Protected, BlueprintCallable)

void UActionAttackBase::BP_EndAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_EndAttack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionAttackBase.BP_OnAngleRangeOut
// (Event, Protected, BlueprintEvent)

void UActionAttackBase::BP_OnAngleRangeOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnAngleRangeOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ActionAttackBase.BP_OnAngleRangeOutAir
// (Event, Protected, BlueprintEvent)

void UActionAttackBase::BP_OnAngleRangeOutAir()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnAngleRangeOutAir");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ActionAttackBase.BP_OnAngleRangeOutCharge
// (Event, Protected, BlueprintEvent)

void UActionAttackBase::BP_OnAngleRangeOutCharge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnAngleRangeOutCharge");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ActionAttackBase.BP_OnAngleRangeOutChargeAir
// (Event, Protected, BlueprintEvent)

void UActionAttackBase::BP_OnAngleRangeOutChargeAir()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnAngleRangeOutChargeAir");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ActionAttackBase.BP_OnAngleRangeOutChargeGround
// (Event, Protected, BlueprintEvent)

void UActionAttackBase::BP_OnAngleRangeOutChargeGround()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnAngleRangeOutChargeGround");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ActionAttackBase.BP_OnAngleRangeOutGround
// (Event, Protected, BlueprintEvent)

void UActionAttackBase::BP_OnAngleRangeOutGround()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnAngleRangeOutGround");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ActionAttackBase.BP_OnAnimSpeedChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// EAttackAnimationEventId                 EventId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DefaultRate                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNagara                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnAnimSpeedChanged(EAttackAnimationEventId EventId, float DefaultRate, bool bNagara)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnAnimSpeedChanged");

	Params::ActionAttackBase_BP_OnAnimSpeedChanged Parms{};

	Parms.EventId = EventId;
	Parms.DefaultRate = DefaultRate;
	Parms.bNagara = bNagara;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnBeginActionAttackAir
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             PrevAction                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnBeginActionAttackAir(const class FName& PrevAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnBeginActionAttackAir");

	Params::ActionAttackBase_BP_OnBeginActionAttackAir Parms{};

	Parms.PrevAction = PrevAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnBeginActionAttackCharge
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             PrevAction                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnBeginActionAttackCharge(const class FName& PrevAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnBeginActionAttackCharge");

	Params::ActionAttackBase_BP_OnBeginActionAttackCharge Parms{};

	Parms.PrevAction = PrevAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnBeginActionAttackChargeAir
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             PrevAction                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnBeginActionAttackChargeAir(const class FName& PrevAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnBeginActionAttackChargeAir");

	Params::ActionAttackBase_BP_OnBeginActionAttackChargeAir Parms{};

	Parms.PrevAction = PrevAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnBeginActionAttackChargeGround
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             PrevAction                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnBeginActionAttackChargeGround(const class FName& PrevAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnBeginActionAttackChargeGround");

	Params::ActionAttackBase_BP_OnBeginActionAttackChargeGround Parms{};

	Parms.PrevAction = PrevAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnBeginActionAttackGround
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             PrevAction                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnBeginActionAttackGround(const class FName& PrevAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnBeginActionAttackGround");

	Params::ActionAttackBase_BP_OnBeginActionAttackGround Parms{};

	Parms.PrevAction = PrevAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnBeginMultiLockOn
// (Event, Protected, BlueprintEvent)

void UActionAttackBase::BP_OnBeginMultiLockOn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnBeginMultiLockOn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ActionAttackBase.BP_OnBootDamage
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bSuperArmor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bZeroDamage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnBootDamage(bool bSuperArmor, bool bZeroDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnBootDamage");

	Params::ActionAttackBase_BP_OnBootDamage Parms{};

	Parms.bSuperArmor = bSuperArmor;
	Parms.bZeroDamage = bZeroDamage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnChangeAttackPhase
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   NextPhase                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnChangeAttackPhase(int32 NextPhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnChangeAttackPhase");

	Params::ActionAttackBase_BP_OnChangeAttackPhase Parms{};

	Parms.NextPhase = NextPhase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnChangeAttackPhaseAir
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   NextPhase                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnChangeAttackPhaseAir(int32 NextPhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnChangeAttackPhaseAir");

	Params::ActionAttackBase_BP_OnChangeAttackPhaseAir Parms{};

	Parms.NextPhase = NextPhase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnChangeAttackPhaseAirForRemote
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   NextPhase                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnChangeAttackPhaseAirForRemote(int32 NextPhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnChangeAttackPhaseAirForRemote");

	Params::ActionAttackBase_BP_OnChangeAttackPhaseAirForRemote Parms{};

	Parms.NextPhase = NextPhase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnChangeAttackPhaseCharge
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   NextPhase                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnChangeAttackPhaseCharge(int32 NextPhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnChangeAttackPhaseCharge");

	Params::ActionAttackBase_BP_OnChangeAttackPhaseCharge Parms{};

	Parms.NextPhase = NextPhase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnChangeAttackPhaseChargeAir
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   NextPhase                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnChangeAttackPhaseChargeAir(int32 NextPhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnChangeAttackPhaseChargeAir");

	Params::ActionAttackBase_BP_OnChangeAttackPhaseChargeAir Parms{};

	Parms.NextPhase = NextPhase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnChangeAttackPhaseChargeAirForRemote
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   NextPhase                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnChangeAttackPhaseChargeAirForRemote(int32 NextPhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnChangeAttackPhaseChargeAirForRemote");

	Params::ActionAttackBase_BP_OnChangeAttackPhaseChargeAirForRemote Parms{};

	Parms.NextPhase = NextPhase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnChangeAttackPhaseChargeForRemote
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   NextPhase                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnChangeAttackPhaseChargeForRemote(int32 NextPhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnChangeAttackPhaseChargeForRemote");

	Params::ActionAttackBase_BP_OnChangeAttackPhaseChargeForRemote Parms{};

	Parms.NextPhase = NextPhase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnChangeAttackPhaseChargeGround
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   NextPhase                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnChangeAttackPhaseChargeGround(int32 NextPhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnChangeAttackPhaseChargeGround");

	Params::ActionAttackBase_BP_OnChangeAttackPhaseChargeGround Parms{};

	Parms.NextPhase = NextPhase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnChangeAttackPhaseChargeGroundForRemote
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   NextPhase                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnChangeAttackPhaseChargeGroundForRemote(int32 NextPhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnChangeAttackPhaseChargeGroundForRemote");

	Params::ActionAttackBase_BP_OnChangeAttackPhaseChargeGroundForRemote Parms{};

	Parms.NextPhase = NextPhase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnChangeAttackPhaseForRemote
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   NextPhase                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnChangeAttackPhaseForRemote(int32 NextPhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnChangeAttackPhaseForRemote");

	Params::ActionAttackBase_BP_OnChangeAttackPhaseForRemote Parms{};

	Parms.NextPhase = NextPhase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnChangeAttackPhaseGround
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   NextPhase                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnChangeAttackPhaseGround(int32 NextPhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnChangeAttackPhaseGround");

	Params::ActionAttackBase_BP_OnChangeAttackPhaseGround Parms{};

	Parms.NextPhase = NextPhase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnChangeAttackPhaseGroundForRemote
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   NextPhase                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnChangeAttackPhaseGroundForRemote(int32 NextPhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnChangeAttackPhaseGroundForRemote");

	Params::ActionAttackBase_BP_OnChangeAttackPhaseGroundForRemote Parms{};

	Parms.NextPhase = NextPhase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnChangeLevelAttackAction
// (Event, Protected, BlueprintEvent)

void UActionAttackBase::BP_OnChangeLevelAttackAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnChangeLevelAttackAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ActionAttackBase.BP_OnDestroyedProjectileEvent
// (Event, Protected, BlueprintEvent)
// Parameters:
// EBulletDestroyType                      Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ProjectileName                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnDestroyedProjectileEvent(EBulletDestroyType Type, const class FName ProjectileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnDestroyedProjectileEvent");

	Params::ActionAttackBase_BP_OnDestroyedProjectileEvent Parms{};

	Parms.Type = Type;
	Parms.ProjectileName = ProjectileName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnDestroyedProjectileEventAir
// (Event, Protected, BlueprintEvent)
// Parameters:
// EBulletDestroyType                      Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ProjectileName                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnDestroyedProjectileEventAir(EBulletDestroyType Type, const class FName ProjectileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnDestroyedProjectileEventAir");

	Params::ActionAttackBase_BP_OnDestroyedProjectileEventAir Parms{};

	Parms.Type = Type;
	Parms.ProjectileName = ProjectileName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnDestroyedProjectileEventCharge
// (Event, Protected, BlueprintEvent)
// Parameters:
// EBulletDestroyType                      Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ProjectileName                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnDestroyedProjectileEventCharge(EBulletDestroyType Type, const class FName ProjectileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnDestroyedProjectileEventCharge");

	Params::ActionAttackBase_BP_OnDestroyedProjectileEventCharge Parms{};

	Parms.Type = Type;
	Parms.ProjectileName = ProjectileName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnDestroyedProjectileEventChargeAir
// (Event, Protected, BlueprintEvent)
// Parameters:
// EBulletDestroyType                      Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ProjectileName                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnDestroyedProjectileEventChargeAir(EBulletDestroyType Type, const class FName ProjectileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnDestroyedProjectileEventChargeAir");

	Params::ActionAttackBase_BP_OnDestroyedProjectileEventChargeAir Parms{};

	Parms.Type = Type;
	Parms.ProjectileName = ProjectileName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnDestroyedProjectileEventChargeGround
// (Event, Protected, BlueprintEvent)
// Parameters:
// EBulletDestroyType                      Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ProjectileName                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnDestroyedProjectileEventChargeGround(EBulletDestroyType Type, const class FName ProjectileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnDestroyedProjectileEventChargeGround");

	Params::ActionAttackBase_BP_OnDestroyedProjectileEventChargeGround Parms{};

	Parms.Type = Type;
	Parms.ProjectileName = ProjectileName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnDestroyedProjectileEventGround
// (Event, Protected, BlueprintEvent)
// Parameters:
// EBulletDestroyType                      Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ProjectileName                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnDestroyedProjectileEventGround(EBulletDestroyType Type, const class FName ProjectileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnDestroyedProjectileEventGround");

	Params::ActionAttackBase_BP_OnDestroyedProjectileEventGround Parms{};

	Parms.Type = Type;
	Parms.ProjectileName = ProjectileName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnEmptyMagazine
// (Event, Protected, BlueprintEvent)

void UActionAttackBase::BP_OnEmptyMagazine()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnEmptyMagazine");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ActionAttackBase.BP_OnEndActionAttackAir
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             NextAction                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnEndActionAttackAir(const class FName& NextAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnEndActionAttackAir");

	Params::ActionAttackBase_BP_OnEndActionAttackAir Parms{};

	Parms.NextAction = NextAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnEndActionAttackCharge
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             NextAction                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnEndActionAttackCharge(const class FName& NextAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnEndActionAttackCharge");

	Params::ActionAttackBase_BP_OnEndActionAttackCharge Parms{};

	Parms.NextAction = NextAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnEndActionAttackChargeAir
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             NextAction                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnEndActionAttackChargeAir(const class FName& NextAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnEndActionAttackChargeAir");

	Params::ActionAttackBase_BP_OnEndActionAttackChargeAir Parms{};

	Parms.NextAction = NextAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnEndActionAttackChargeGround
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             NextAction                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnEndActionAttackChargeGround(const class FName& NextAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnEndActionAttackChargeGround");

	Params::ActionAttackBase_BP_OnEndActionAttackChargeGround Parms{};

	Parms.NextAction = NextAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnEndActionAttackGround
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             NextAction                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnEndActionAttackGround(const class FName& NextAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnEndActionAttackGround");

	Params::ActionAttackBase_BP_OnEndActionAttackGround Parms{};

	Parms.NextAction = NextAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnEndMultiLockOn
// (Event, Protected, BlueprintEvent)

void UActionAttackBase::BP_OnEndMultiLockOn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnEndMultiLockOn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ActionAttackBase.BP_OnHitAttackEvent
// (Event, Protected, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ProjectileName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacterBattle*                 HitCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnHitAttackEvent(const struct FVector& HitLocation, class FName ProjectileName, class ACharacterBattle* HitCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnHitAttackEvent");

	Params::ActionAttackBase_BP_OnHitAttackEvent Parms{};

	Parms.HitLocation = std::move(HitLocation);
	Parms.ProjectileName = ProjectileName;
	Parms.HitCharacter = HitCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnHitAttackEventAir
// (Event, Protected, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ProjectileName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacterBattle*                 HitCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnHitAttackEventAir(const struct FVector& HitLocation, class FName ProjectileName, class ACharacterBattle* HitCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnHitAttackEventAir");

	Params::ActionAttackBase_BP_OnHitAttackEventAir Parms{};

	Parms.HitLocation = std::move(HitLocation);
	Parms.ProjectileName = ProjectileName;
	Parms.HitCharacter = HitCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnHitAttackEventCharge
// (Event, Protected, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ProjectileName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacterBattle*                 HitCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnHitAttackEventCharge(const struct FVector& HitLocation, class FName ProjectileName, class ACharacterBattle* HitCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnHitAttackEventCharge");

	Params::ActionAttackBase_BP_OnHitAttackEventCharge Parms{};

	Parms.HitLocation = std::move(HitLocation);
	Parms.ProjectileName = ProjectileName;
	Parms.HitCharacter = HitCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnHitAttackEventChargeAir
// (Event, Protected, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ProjectileName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacterBattle*                 HitCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnHitAttackEventChargeAir(const struct FVector& HitLocation, class FName ProjectileName, class ACharacterBattle* HitCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnHitAttackEventChargeAir");

	Params::ActionAttackBase_BP_OnHitAttackEventChargeAir Parms{};

	Parms.HitLocation = std::move(HitLocation);
	Parms.ProjectileName = ProjectileName;
	Parms.HitCharacter = HitCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnHitAttackEventChargeGround
// (Event, Protected, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ProjectileName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacterBattle*                 HitCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnHitAttackEventChargeGround(const struct FVector& HitLocation, class FName ProjectileName, class ACharacterBattle* HitCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnHitAttackEventChargeGround");

	Params::ActionAttackBase_BP_OnHitAttackEventChargeGround Parms{};

	Parms.HitLocation = std::move(HitLocation);
	Parms.ProjectileName = ProjectileName;
	Parms.HitCharacter = HitCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnHitAttackEventGround
// (Event, Protected, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ProjectileName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacterBattle*                 HitCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnHitAttackEventGround(const struct FVector& HitLocation, class FName ProjectileName, class ACharacterBattle* HitCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnHitAttackEventGround");

	Params::ActionAttackBase_BP_OnHitAttackEventGround Parms{};

	Parms.HitLocation = std::move(HitLocation);
	Parms.ProjectileName = ProjectileName;
	Parms.HitCharacter = HitCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnHitProjectileEvent
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// EAttackId                               ProjectileAttackId                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAttackHitResult                        Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           HitActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnHitProjectileEvent(EAttackId ProjectileAttackId, EAttackHitResult Type, const struct FVector& Location, class AActor* HitActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnHitProjectileEvent");

	Params::ActionAttackBase_BP_OnHitProjectileEvent Parms{};

	Parms.ProjectileAttackId = ProjectileAttackId;
	Parms.Type = Type;
	Parms.Location = std::move(Location);
	Parms.HitActor = HitActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnHitProjectileEventAir
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// EAttackId                               ProjectileAttackId                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAttackHitResult                        Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           HitActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnHitProjectileEventAir(EAttackId ProjectileAttackId, EAttackHitResult Type, const struct FVector& Location, class AActor* HitActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnHitProjectileEventAir");

	Params::ActionAttackBase_BP_OnHitProjectileEventAir Parms{};

	Parms.ProjectileAttackId = ProjectileAttackId;
	Parms.Type = Type;
	Parms.Location = std::move(Location);
	Parms.HitActor = HitActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnHitProjectileEventCharge
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// EAttackId                               ProjectileAttackId                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAttackHitResult                        Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           HitActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnHitProjectileEventCharge(EAttackId ProjectileAttackId, EAttackHitResult Type, const struct FVector& Location, class AActor* HitActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnHitProjectileEventCharge");

	Params::ActionAttackBase_BP_OnHitProjectileEventCharge Parms{};

	Parms.ProjectileAttackId = ProjectileAttackId;
	Parms.Type = Type;
	Parms.Location = std::move(Location);
	Parms.HitActor = HitActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnHitProjectileEventChargeAir
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// EAttackId                               ProjectileAttackId                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAttackHitResult                        Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           HitActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnHitProjectileEventChargeAir(EAttackId ProjectileAttackId, EAttackHitResult Type, const struct FVector& Location, class AActor* HitActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnHitProjectileEventChargeAir");

	Params::ActionAttackBase_BP_OnHitProjectileEventChargeAir Parms{};

	Parms.ProjectileAttackId = ProjectileAttackId;
	Parms.Type = Type;
	Parms.Location = std::move(Location);
	Parms.HitActor = HitActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnHitProjectileEventChargeGround
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// EAttackId                               ProjectileAttackId                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAttackHitResult                        Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           HitActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnHitProjectileEventChargeGround(EAttackId ProjectileAttackId, EAttackHitResult Type, const struct FVector& Location, class AActor* HitActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnHitProjectileEventChargeGround");

	Params::ActionAttackBase_BP_OnHitProjectileEventChargeGround Parms{};

	Parms.ProjectileAttackId = ProjectileAttackId;
	Parms.Type = Type;
	Parms.Location = std::move(Location);
	Parms.HitActor = HitActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnHitProjectileEventGround
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// EAttackId                               ProjectileAttackId                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAttackHitResult                        Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           HitActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnHitProjectileEventGround(EAttackId ProjectileAttackId, EAttackHitResult Type, const struct FVector& Location, class AActor* HitActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnHitProjectileEventGround");

	Params::ActionAttackBase_BP_OnHitProjectileEventGround Parms{};

	Parms.ProjectileAttackId = ProjectileAttackId;
	Parms.Type = Type;
	Parms.Location = std::move(Location);
	Parms.HitActor = HitActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnHitReceiveBullet
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ABullet*                          HitBullet                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnHitReceiveBullet(const class ABullet* HitBullet, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnHitReceiveBullet");

	Params::ActionAttackBase_BP_OnHitReceiveBullet Parms{};

	Parms.HitBullet = HitBullet;
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnLandingAir
// (Event, Protected, BlueprintEvent)

void UActionAttackBase::BP_OnLandingAir()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnLandingAir");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ActionAttackBase.BP_OnLandingChargeAir
// (Event, Protected, BlueprintEvent)

void UActionAttackBase::BP_OnLandingChargeAir()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnLandingChargeAir");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ActionAttackBase.BP_OnLandingChargeGround
// (Event, Protected, BlueprintEvent)

void UActionAttackBase::BP_OnLandingChargeGround()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnLandingChargeGround");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ActionAttackBase.BP_OnLandingGround
// (Event, Protected, BlueprintEvent)

void UActionAttackBase::BP_OnLandingGround()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnLandingGround");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ActionAttackBase.BP_OnLoadParams
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             ActionName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UniqueLevel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnLoadParams(const class FName& ActionName, int32 UniqueLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnLoadParams");

	Params::ActionAttackBase_BP_OnLoadParams Parms{};

	Parms.ActionName = ActionName;
	Parms.UniqueLevel = UniqueLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnLoadParamsForChargeAttack
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             ActionName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UniqueLevel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnLoadParamsForChargeAttack(const class FName& ActionName, int32 UniqueLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnLoadParamsForChargeAttack");

	Params::ActionAttackBase_BP_OnLoadParamsForChargeAttack Parms{};

	Parms.ActionName = ActionName;
	Parms.UniqueLevel = UniqueLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnLoadParamsForDefaultAttack
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             ActionName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UniqueLevel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnLoadParamsForDefaultAttack(const class FName& ActionName, int32 UniqueLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnLoadParamsForDefaultAttack");

	Params::ActionAttackBase_BP_OnLoadParamsForDefaultAttack Parms{};

	Parms.ActionName = ActionName;
	Parms.UniqueLevel = UniqueLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnNotificationAttackChargeDedicatedEvent
// (Event, Protected, BlueprintEvent)
// Parameters:
// EAttackDedicatedEventId                 ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnNotificationAttackChargeDedicatedEvent(EAttackDedicatedEventId ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnNotificationAttackChargeDedicatedEvent");

	Params::ActionAttackBase_BP_OnNotificationAttackChargeDedicatedEvent Parms{};

	Parms.ID = ID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnNotificationAttackDedicatedEvent
// (Event, Protected, BlueprintEvent)
// Parameters:
// EAttackDedicatedEventId                 ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnNotificationAttackDedicatedEvent(EAttackDedicatedEventId ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnNotificationAttackDedicatedEvent");

	Params::ActionAttackBase_BP_OnNotificationAttackDedicatedEvent Parms{};

	Parms.ID = ID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnRepHitProjectileEvent
// (Event, Protected, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnRepHitProjectileEvent(const struct FVector& HitLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnRepHitProjectileEvent");

	Params::ActionAttackBase_BP_OnRepHitProjectileEvent Parms{};

	Parms.HitLocation = std::move(HitLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnRepHitProjectileEventAir
// (Event, Protected, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnRepHitProjectileEventAir(const struct FVector& HitLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnRepHitProjectileEventAir");

	Params::ActionAttackBase_BP_OnRepHitProjectileEventAir Parms{};

	Parms.HitLocation = std::move(HitLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnRepHitProjectileEventCharge
// (Event, Protected, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnRepHitProjectileEventCharge(const struct FVector& HitLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnRepHitProjectileEventCharge");

	Params::ActionAttackBase_BP_OnRepHitProjectileEventCharge Parms{};

	Parms.HitLocation = std::move(HitLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnRepHitProjectileEventChargeAir
// (Event, Protected, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnRepHitProjectileEventChargeAir(const struct FVector& HitLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnRepHitProjectileEventChargeAir");

	Params::ActionAttackBase_BP_OnRepHitProjectileEventChargeAir Parms{};

	Parms.HitLocation = std::move(HitLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnRepHitProjectileEventChargeGround
// (Event, Protected, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnRepHitProjectileEventChargeGround(const struct FVector& HitLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnRepHitProjectileEventChargeGround");

	Params::ActionAttackBase_BP_OnRepHitProjectileEventChargeGround Parms{};

	Parms.HitLocation = std::move(HitLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnRepHitProjectileEventGround
// (Event, Protected, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnRepHitProjectileEventGround(const struct FVector& HitLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnRepHitProjectileEventGround");

	Params::ActionAttackBase_BP_OnRepHitProjectileEventGround Parms{};

	Parms.HitLocation = std::move(HitLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_OnSetAttackIdAndLevel_Avatar
// (Event, Protected, BlueprintEvent)
// Parameters:
// EAttackId                               AttackId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_OnSetAttackIdAndLevel_Avatar(EAttackId AttackId, int32 Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_OnSetAttackIdAndLevel_Avatar");

	Params::ActionAttackBase_BP_OnSetAttackIdAndLevel_Avatar Parms{};

	Parms.AttackId = AttackId;
	Parms.Level = Level;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionAttackBase.BP_RegisterAttackAction
// (Event, Protected, BlueprintEvent)

void UActionAttackBase::BP_RegisterAttackAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_RegisterAttackAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ActionAttackBase.BP_RegisterAttackAction_Avatar
// (Native, Event, Protected, BlueprintEvent)

void UActionAttackBase::BP_RegisterAttackAction_Avatar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_RegisterAttackAction_Avatar");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionAttackBase.BP_SendToProjectileEvent
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             EventName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_SendToProjectileEvent(class FName EventName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_SendToProjectileEvent");

	Params::ActionAttackBase_BP_SendToProjectileEvent Parms{};

	Parms.EventName = EventName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionAttackBase.BP_SetAttackPhaseEndDelay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   SleepTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_SetAttackPhaseEndDelay(float SleepTime, const struct FLatentActionInfo& LatentInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_SetAttackPhaseEndDelay");

	Params::ActionAttackBase_BP_SetAttackPhaseEndDelay Parms{};

	Parms.SleepTime = SleepTime;
	Parms.LatentInfo = std::move(LatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionAttackBase.BP_SetChargeEnabled
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_SetChargeEnabled(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_SetChargeEnabled");

	Params::ActionAttackBase_BP_SetChargeEnabled Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionAttackBase.BP_SetEnableNagaraTurn
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_SetEnableNagaraTurn(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_SetEnableNagaraTurn");

	Params::ActionAttackBase_BP_SetEnableNagaraTurn Parms{};

	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionAttackBase.BP_SetGrabDamage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             DamageParamName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_SetGrabDamage(class FName DamageParamName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_SetGrabDamage");

	Params::ActionAttackBase_BP_SetGrabDamage Parms{};

	Parms.DamageParamName = DamageParamName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionAttackBase.BP_SetMovementSpeedDeltaRate
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::BP_SetMovementSpeedDeltaRate(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_SetMovementSpeedDeltaRate");

	Params::ActionAttackBase_BP_SetMovementSpeedDeltaRate Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionAttackBase.BP_UnRegisterAttackAction
// (Event, Protected, BlueprintEvent)

void UActionAttackBase::BP_UnRegisterAttackAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_UnRegisterAttackAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ActionAttackBase.BP_UnRegisterAttackAction_Avatar
// (Native, Event, Protected, BlueprintEvent)

void UActionAttackBase::BP_UnRegisterAttackAction_Avatar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_UnRegisterAttackAction_Avatar");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionAttackBase.PostSpawnProjectileBullet
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ABullet*                          SpawnedBullet                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::PostSpawnProjectileBullet(class ABullet* SpawnedBullet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "PostSpawnProjectileBullet");

	Params::ActionAttackBase_PostSpawnProjectileBullet Parms{};

	Parms.SpawnedBullet = SpawnedBullet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionAttackBase.PostSpawnProjectileGenerator
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AProjectileGeneratorBattle*       SpawnedGenerator                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackBase::PostSpawnProjectileGenerator(class AProjectileGeneratorBattle* SpawnedGenerator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "PostSpawnProjectileGenerator");

	Params::ActionAttackBase_PostSpawnProjectileGenerator Parms{};

	Parms.SpawnedGenerator = SpawnedGenerator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionAttackBase.BP_GetAttackComponent
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCharacterAttackComponent*        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCharacterAttackComponent* UActionAttackBase::BP_GetAttackComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_GetAttackComponent");

	Params::ActionAttackBase_BP_GetAttackComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionAttackBase.BP_GetAttackId
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EAttackId                               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAttackId UActionAttackBase::BP_GetAttackId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_GetAttackId");

	Params::ActionAttackBase_BP_GetAttackId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionAttackBase.BP_GetCurrentUniqueLevel
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UActionAttackBase::BP_GetCurrentUniqueLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_GetCurrentUniqueLevel");

	Params::ActionAttackBase_BP_GetCurrentUniqueLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionAttackBase.BP_GetMasterCharacter
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ECharacterId                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECharacterId UActionAttackBase::BP_GetMasterCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_GetMasterCharacter");

	Params::ActionAttackBase_BP_GetMasterCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionAttackBase.BP_IsLaunchAttack
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UActionAttackBase::BP_IsLaunchAttack() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackBase", "BP_IsLaunchAttack");

	Params::ActionAttackBase_BP_IsLaunchAttack Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionAttackSpecialBase.BP_PlayCoopVoice
// (Final, Native, Protected, BlueprintCallable)

void UActionAttackSpecialBase::BP_PlayCoopVoice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackSpecialBase", "BP_PlayCoopVoice");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.JumpPadComponent.BeginOverlap_JumpPadComponent
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UJumpPadComponent::BeginOverlap_JumpPadComponent(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JumpPadComponent", "BeginOverlap_JumpPadComponent");

	Params::JumpPadComponent_BeginOverlap_JumpPadComponent Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.JumpPadComponent.BP_BindOverlapEvents
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UShapeComponent*                  Hitshape                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJumpPadComponent::BP_BindOverlapEvents(class UShapeComponent* Hitshape)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JumpPadComponent", "BP_BindOverlapEvents");

	Params::JumpPadComponent_BP_BindOverlapEvents Parms{};

	Parms.Hitshape = Hitshape;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.JumpPadComponent.EndOverlap_JumpPadComponent
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJumpPadComponent::EndOverlap_JumpPadComponent(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JumpPadComponent", "EndOverlap_JumpPadComponent");

	Params::JumpPadComponent_EndOverlap_JumpPadComponent Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionAttackFinisher.BP_AllLevelUp_Local
// (Final, Native, Protected, BlueprintCallable)

void UActionAttackFinisher::BP_AllLevelUp_Local()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackFinisher", "BP_AllLevelUp_Local");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionAttackFinisher.BP_RecoverGuardPointInAuthority
// (Final, Native, Protected, BlueprintCallable)

void UActionAttackFinisher::BP_RecoverGuardPointInAuthority()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackFinisher", "BP_RecoverGuardPointInAuthority");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionAttackFinisher.BP_GetFirstTargetActor
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UActionAttackFinisher::BP_GetFirstTargetActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackFinisher", "BP_GetFirstTargetActor");

	Params::ActionAttackFinisher_BP_GetFirstTargetActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.BattleEventEffectComponent.PlayEffect
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EBattleEventEffectType                  Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       Trs                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattleEventEffectComponent::PlayEffect(EBattleEventEffectType Type, const struct FTransform& Trs, const class FName& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleEventEffectComponent", "PlayEffect");

	Params::BattleEventEffectComponent_PlayEffect Parms{};

	Parms.Type = Type;
	Parms.Trs = std::move(Trs);
	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionAttackUseItem.BP_PlayUseSupplyVoice
// (Final, Native, Protected, BlueprintCallable)

void UActionAttackUseItem::BP_PlayUseSupplyVoice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackUseItem", "BP_PlayUseSupplyVoice");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionAttackUseItem.BP_SetSupplyId
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             SupplyId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionAttackUseItem::BP_SetSupplyId(class FName SupplyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackUseItem", "BP_SetSupplyId");

	Params::ActionAttackUseItem_BP_SetSupplyId Parms{};

	Parms.SupplyId = SupplyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionAttackUseItem.BP_GetSuuplyId
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UActionAttackUseItem::BP_GetSuuplyId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionAttackUseItem", "BP_GetSuuplyId");

	Params::ActionAttackUseItem_BP_GetSuuplyId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionDamageBase.BP_EndDamage
// (Final, Native, Protected, BlueprintCallable)

void UActionDamageBase::BP_EndDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionDamageBase", "BP_EndDamage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionDamageBase.BP_InitialTurnToDirection
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          DamageDirection                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDamageDirection                        FrontDirection                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionDamageBase::BP_InitialTurnToDirection(const struct FVector& DamageDirection, EDamageDirection FrontDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionDamageBase", "BP_InitialTurnToDirection");

	Params::ActionDamageBase_BP_InitialTurnToDirection Parms{};

	Parms.DamageDirection = std::move(DamageDirection);
	Parms.FrontDirection = FrontDirection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionDamageBase.BP_OnPlayDamageVoiceEvent
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UActionDamageBase::BP_OnPlayDamageVoiceEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionDamageBase", "BP_OnPlayDamageVoiceEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionDamageBase.BP_ResetCharacterGauge
// (Final, Native, Protected, BlueprintCallable)

void UActionDamageBase::BP_ResetCharacterGauge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionDamageBase", "BP_ResetCharacterGauge");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionDamageBase.BP_SetEnableRecover
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionDamageBase::BP_SetEnableRecover(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionDamageBase", "BP_SetEnableRecover");

	Params::ActionDamageBase_BP_SetEnableRecover Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionDamageBase.BP_SetPlayDamageVoice
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bPlayDamageVoice                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionDamageBase::BP_SetPlayDamageVoice(bool bPlayDamageVoice)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionDamageBase", "BP_SetPlayDamageVoice");

	Params::ActionDamageBase_BP_SetPlayDamageVoice Parms{};

	Parms.bPlayDamageVoice = bPlayDamageVoice;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionDamageBase.BP_SetSpeedAndRotationForDamageFall
// (Final, Native, Protected, BlueprintCallable)

void UActionDamageBase::BP_SetSpeedAndRotationForDamageFall()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionDamageBase", "BP_SetSpeedAndRotationForDamageFall");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionDamageBase.BP_SetSpeedAndRotationForDamageGuard
// (Final, Native, Protected, BlueprintCallable)

void UActionDamageBase::BP_SetSpeedAndRotationForDamageGuard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionDamageBase", "BP_SetSpeedAndRotationForDamageGuard");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionDamageBase.BP_SetSpeedAndRotationForDamageStrong
// (Final, Native, Protected, BlueprintCallable)

void UActionDamageBase::BP_SetSpeedAndRotationForDamageStrong()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionDamageBase", "BP_SetSpeedAndRotationForDamageStrong");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionDamageBase.BP_SetSpeedAndRotationForDamageStrongBound
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionDamageBase::BP_SetSpeedAndRotationForDamageStrongBound(const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionDamageBase", "BP_SetSpeedAndRotationForDamageStrongBound");

	Params::ActionDamageBase_BP_SetSpeedAndRotationForDamageStrongBound Parms{};

	Parms.Direction = std::move(Direction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionDamageBase.BP_SetSpeedAndRotationForDamageWeak
// (Final, Native, Protected, BlueprintCallable)

void UActionDamageBase::BP_SetSpeedAndRotationForDamageWeak()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionDamageBase", "BP_SetSpeedAndRotationForDamageWeak");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionDamageBase.BP_SetSpeedAndRotationForDamageZeroGravity
// (Final, Native, Protected, BlueprintCallable)

void UActionDamageBase::BP_SetSpeedAndRotationForDamageZeroGravity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionDamageBase", "BP_SetSpeedAndRotationForDamageZeroGravity");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionDamageBase.BP_ShiftDamageAction
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             DamageName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionDamageBase::BP_ShiftDamageAction(class FName DamageName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionDamageBase", "BP_ShiftDamageAction");

	Params::ActionDamageBase_BP_ShiftDamageAction Parms{};

	Parms.DamageName = DamageName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionDamageBase.BP_GetDamageInfo
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FDamageInfo                ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FDamageInfo UActionDamageBase::BP_GetDamageInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionDamageBase", "BP_GetDamageInfo");

	Params::ActionDamageBase_BP_GetDamageInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionDamageBase.BP_GetDamageParam
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FDamageParam               ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FDamageParam UActionDamageBase::BP_GetDamageParam() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionDamageBase", "BP_GetDamageParam");

	Params::ActionDamageBase_BP_GetDamageParam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionDamageBase.BP_IsDead
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UActionDamageBase::BP_IsDead() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionDamageBase", "BP_IsDead");

	Params::ActionDamageBase_BP_IsDead Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.DamageParamWork.OnMasterDataInitializeComplete
// (Final, Native, Private)

void UDamageParamWork::OnMasterDataInitializeComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DamageParamWork", "OnMasterDataInitializeComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BgHismComponent.OnRep_RemoveIndexHistory
// (Final, Native, Private)

void UBgHismComponent::OnRep_RemoveIndexHistory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BgHismComponent", "OnRep_RemoveIndexHistory");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.DialogueWidget.HideDialogueBox
// (Final, Native, Private)

void UDialogueWidget::HideDialogueBox()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DialogueWidget", "HideDialogueBox");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.DialogueWidget.OnBattleSequenceChanged
// (Final, Native, Public)
// Parameters:
// EBattleSequence                         NewSequence                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDialogueWidget::OnBattleSequenceChanged(EBattleSequence NewSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DialogueWidget", "OnBattleSequenceChanged");

	Params::DialogueWidget_OnBattleSequenceChanged Parms{};

	Parms.NewSequence = NewSequence;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.DialogueWidget.OnCharacterVoiceMessageReceived
// (Final, Native, Private)
// Parameters:
// int16                                   SenderPlayerId                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InKeyForTable                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDialogueWidget::OnCharacterVoiceMessageReceived(int16 SenderPlayerId, const class FString& InKeyForTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DialogueWidget", "OnCharacterVoiceMessageReceived");

	Params::DialogueWidget_OnCharacterVoiceMessageReceived Parms{};

	Parms.SenderPlayerId = SenderPlayerId;
	Parms.InKeyForTable = std::move(InKeyForTable);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.DialogueWidget.PlayAllyBattleResultMessage
// (Final, Native, Private)
// Parameters:
// class ACharacterBattle*                 Victim                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacterBattle*                 Aggriever                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDialogueWidget::PlayAllyBattleResultMessage(const class ACharacterBattle* Victim, const class ACharacterBattle* Aggriever)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DialogueWidget", "PlayAllyBattleResultMessage");

	Params::DialogueWidget_PlayAllyBattleResultMessage Parms{};

	Parms.Victim = Victim;
	Parms.Aggriever = Aggriever;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.DialogueWidget.PlayAllyDyingMessage
// (Final, Native, Private)
// Parameters:
// class ACharacterBattle*                 Victim                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacterBattle*                 Aggriever                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDialogueWidget::PlayAllyDyingMessage(const class ACharacterBattle* Victim, const class ACharacterBattle* Aggriever)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DialogueWidget", "PlayAllyDyingMessage");

	Params::DialogueWidget_PlayAllyDyingMessage Parms{};

	Parms.Victim = Victim;
	Parms.Aggriever = Aggriever;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.DialogueWidget.PlayPlayerStateDeadVoice
// (Final, Native, Private)
// Parameters:
// class UAtomComponent*                   AtomComponent                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDialogueWidget::PlayPlayerStateDeadVoice(class UAtomComponent* AtomComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DialogueWidget", "PlayPlayerStateDeadVoice");

	Params::DialogueWidget_PlayPlayerStateDeadVoice Parms{};

	Parms.AtomComponent = AtomComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.DialogueWidget.RemoveFromMessageArray
// (Final, Native, Private)
// Parameters:
// class UDialogueTextBlock*               TargetMessage                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDialogueWidget::RemoveFromMessageArray(class UDialogueTextBlock* TargetMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DialogueWidget", "RemoveFromMessageArray");

	Params::DialogueWidget_RemoveFromMessageArray Parms{};

	Parms.TargetMessage = TargetMessage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BattleCounterBase.SetCaptionText
// (Native, Public)

void UBattleCounterBase::SetCaptionText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCounterBase", "SetCaptionText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BattleCounterBase.UpdateCounter
// (Native, Public)

void UBattleCounterBase::UpdateCounter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCounterBase", "UpdateCounter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BattleCounterBase.UpdateCounterNoArgsWrapper
// (Final, Native, Public)

void UBattleCounterBase::UpdateCounterNoArgsWrapper()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCounterBase", "UpdateCounterNoArgsWrapper");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterLinkedAnimationControlComponent.BP_AttachToBullet
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ACustomBullet*                    Bullet                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterLinkedAnimationControlComponent::BP_AttachToBullet(class ACustomBullet* Bullet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterLinkedAnimationControlComponent", "BP_AttachToBullet");

	Params::CharacterLinkedAnimationControlComponent_BP_AttachToBullet Parms{};

	Parms.Bullet = Bullet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterLinkedAnimationControlComponent.BP_AttachToCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ACharacterBattle*                 Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterLinkedAnimationControlComponent::BP_AttachToCharacter(class ACharacterBattle* Character, class FName SocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterLinkedAnimationControlComponent", "BP_AttachToCharacter");

	Params::CharacterLinkedAnimationControlComponent_BP_AttachToCharacter Parms{};

	Parms.Character = Character;
	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterLinkedAnimationControlComponent.BP_LinkAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UAnimInstanceAttack>  InClass                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterLinkedAnimationControlComponent::BP_LinkAnimation(TSubclassOf<class UAnimInstanceAttack> InClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterLinkedAnimationControlComponent", "BP_LinkAnimation");

	Params::CharacterLinkedAnimationControlComponent_BP_LinkAnimation Parms{};

	Parms.InClass = InClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterLinkedAnimationControlComponent.BP_LinkAnimationWithBlend
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UAnimInstanceAttack>  InClass                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterLinkedAnimationControlComponent::BP_LinkAnimationWithBlend(TSubclassOf<class UAnimInstanceAttack> InClass, float BlendTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterLinkedAnimationControlComponent", "BP_LinkAnimationWithBlend");

	Params::CharacterLinkedAnimationControlComponent_BP_LinkAnimationWithBlend Parms{};

	Parms.InClass = InClass;
	Parms.BlendTime = BlendTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterLinkedAnimationControlComponent.BP_OnHitToCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ACharacterBattle*                 Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterLinkedAnimationControlComponent::BP_OnHitToCharacter(class ACharacterBattle* Character, class FName SocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterLinkedAnimationControlComponent", "BP_OnHitToCharacter");

	Params::CharacterLinkedAnimationControlComponent_BP_OnHitToCharacter Parms{};

	Parms.Character = Character;
	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterLinkedAnimationControlComponent.BP_SetTargetLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterLinkedAnimationControlComponent::BP_SetTargetLocation(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterLinkedAnimationControlComponent", "BP_SetTargetLocation");

	Params::CharacterLinkedAnimationControlComponent_BP_SetTargetLocation Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterLinkedAnimationControlComponent.BP_UnlinkAnimation
// (Final, Native, Public, BlueprintCallable)

void UCharacterLinkedAnimationControlComponent::BP_UnlinkAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterLinkedAnimationControlComponent", "BP_UnlinkAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterLinkedAnimationControlComponent.BP_UnlinkAnimationWithBlend
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   BlendTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterLinkedAnimationControlComponent::BP_UnlinkAnimationWithBlend(float BlendTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterLinkedAnimationControlComponent", "BP_UnlinkAnimationWithBlend");

	Params::CharacterLinkedAnimationControlComponent_BP_UnlinkAnimationWithBlend Parms{};

	Parms.BlendTime = BlendTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionDie.BP_RespawnCheck
// (Final, Native, Public, BlueprintCallable)

void UActionDie::BP_RespawnCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionDie", "BP_RespawnCheck");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionOpenBox.BP_NegotiationCompleted
// (Final, Native, Private, BlueprintCallable)

void UActionOpenBox::BP_NegotiationCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionOpenBox", "BP_NegotiationCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionOpenBox.BP_OpenComplete
// (Final, Native, Private, BlueprintCallable)

void UActionOpenBox::BP_OpenComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionOpenBox", "BP_OpenComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionOpenBox.BP_SetEnablePoisonMistReductionEvent
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionOpenBox::BP_SetEnablePoisonMistReductionEvent(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionOpenBox", "BP_SetEnablePoisonMistReductionEvent");

	Params::ActionOpenBox_BP_SetEnablePoisonMistReductionEvent Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionOpenBox.BP_GetRequiredOpenTime
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UActionOpenBox::BP_GetRequiredOpenTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionOpenBox", "BP_GetRequiredOpenTime");

	Params::ActionOpenBox_BP_GetRequiredOpenTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionOpenBox.BP_IsLarge
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ActionTarget                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UActionOpenBox::BP_IsLarge(const class AActor* ActionTarget) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionOpenBox", "BP_IsLarge");

	Params::ActionOpenBox_BP_IsLarge Parms{};

	Parms.ActionTarget = ActionTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionParkourJump.BP_GetDestHeight
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UActionParkourJump::BP_GetDestHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionParkourJump", "BP_GetDestHeight");

	Params::ActionParkourJump_BP_GetDestHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.UMGEffectAttachedToActor.Deactivate
// (Final, Native, Public)

void UUMGEffectAttachedToActor::Deactivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGEffectAttachedToActor", "Deactivate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionPlusUltra.BP_CreateAttackCollision
// (Final, Native, Public, BlueprintCallable)

void UActionPlusUltra::BP_CreateAttackCollision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPlusUltra", "BP_CreateAttackCollision");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionRecoverAlly.BP_PlayVoice
// (Final, Native, Protected, BlueprintCallable)

void UActionRecoverAlly::BP_PlayVoice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionRecoverAlly", "BP_PlayVoice");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionRecoverAlly.BP_RecoverSuccessful
// (Final, Native, Protected, BlueprintCallable)

void UActionRecoverAlly::BP_RecoverSuccessful()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionRecoverAlly", "BP_RecoverSuccessful");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionRecoverAlly.BP_GetRequiredRecoverTime
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UActionRecoverAlly::BP_GetRequiredRecoverTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionRecoverAlly", "BP_GetRequiredRecoverTime");

	Params::ActionRecoverAlly_BP_GetRequiredRecoverTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionRecoverCitizen.BP_CitizenRecoveryBegin
// (Final, Native, Private, BlueprintCallable)

void UActionRecoverCitizen::BP_CitizenRecoveryBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionRecoverCitizen", "BP_CitizenRecoveryBegin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionRecoverCitizen.BP_CitizenRecoveryComplete
// (Final, Native, Private, BlueprintCallable)

void UActionRecoverCitizen::BP_CitizenRecoveryComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionRecoverCitizen", "BP_CitizenRecoveryComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionRecoverCitizen.BP_CitizenRecoveryEnd
// (Final, Native, Private, BlueprintCallable)

void UActionRecoverCitizen::BP_CitizenRecoveryEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionRecoverCitizen", "BP_CitizenRecoveryEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionRecoverCitizen.BP_GetRequiredRecoverTime
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UActionRecoverCitizen::BP_GetRequiredRecoverTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionRecoverCitizen", "BP_GetRequiredRecoverTime");

	Params::ActionRecoverCitizen_BP_GetRequiredRecoverTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionRespawnAlly.BP_DecideRespawnLocation
// (Final, Native, Private, BlueprintCallable)

void UActionRespawnAlly::BP_DecideRespawnLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionRespawnAlly", "BP_DecideRespawnLocation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionRespawnAlly.BP_GetRequiredRespawnTime
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UActionRespawnAlly::BP_GetRequiredRespawnTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionRespawnAlly", "BP_GetRequiredRespawnTime");

	Params::ActionRespawnAlly_BP_GetRequiredRespawnTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionScoutEnemy.BP_OnScoutRequestCompleteEvent
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bSuccess                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionScoutEnemy::BP_OnScoutRequestCompleteEvent(bool bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionScoutEnemy", "BP_OnScoutRequestCompleteEvent");

	Params::ActionScoutEnemy_BP_OnScoutRequestCompleteEvent Parms{};

	Parms.bSuccess = bSuccess;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ActionScoutEnemy.BP_PlayVoice
// (Final, Native, Protected, BlueprintCallable)

void UActionScoutEnemy::BP_PlayVoice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionScoutEnemy", "BP_PlayVoice");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionScoutEnemy.BP_RecoverSuccessful
// (Final, Native, Protected, BlueprintCallable)

void UActionScoutEnemy::BP_RecoverSuccessful()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionScoutEnemy", "BP_RecoverSuccessful");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionScoutEnemy.BP_ScoutRequest
// (Final, Native, Protected, BlueprintCallable)

void UActionScoutEnemy::BP_ScoutRequest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionScoutEnemy", "BP_ScoutRequest");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionScoutEnemy.BP_GetRequiredRecoverTime
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UActionScoutEnemy::BP_GetRequiredRecoverTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionScoutEnemy", "BP_GetRequiredRecoverTime");

	Params::ActionScoutEnemy_BP_GetRequiredRecoverTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionThrowned.BP_GetThrownedDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector UActionThrowned::BP_GetThrownedDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionThrowned", "BP_GetThrownedDirection");

	Params::ActionThrowned_BP_GetThrownedDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterBattleVoiceComponent.BP_PlayCharacterVoice
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           VoiceName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseWholeCueName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllMember                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterBattleVoiceComponent::BP_PlayCharacterVoice(const class FString& VoiceName, bool UseWholeCueName, bool bAllMember)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattleVoiceComponent", "BP_PlayCharacterVoice");

	Params::CharacterBattleVoiceComponent_BP_PlayCharacterVoice Parms{};

	Parms.VoiceName = std::move(VoiceName);
	Parms.UseWholeCueName = UseWholeCueName;
	Parms.bAllMember = bAllMember;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterBattleVoiceComponent.BP_PlayDamageVoice
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           VoiceName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDamageInfo                      DamageInfo                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCharacterBattleVoiceComponent::BP_PlayDamageVoice(const class FString& VoiceName, const struct FDamageInfo& DamageInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattleVoiceComponent", "BP_PlayDamageVoice");

	Params::CharacterBattleVoiceComponent_BP_PlayDamageVoice Parms{};

	Parms.VoiceName = std::move(VoiceName);
	Parms.DamageInfo = std::move(DamageInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterBattleVoiceComponent.BP_SetIgnoreNotifyEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterBattleVoiceComponent::BP_SetIgnoreNotifyEvent(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattleVoiceComponent", "BP_SetIgnoreNotifyEvent");

	Params::CharacterBattleVoiceComponent_BP_SetIgnoreNotifyEvent Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionWallCrawl.BP_SetWallCrawlState
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// EWallCrawlState                         State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionWallCrawl::BP_SetWallCrawlState(EWallCrawlState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionWallCrawl", "BP_SetWallCrawlState");

	Params::ActionWallCrawl_BP_SetWallCrawlState Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ActionWallCrawl.BP_GetDestForwardDirection
// (Final, Native, Private, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UActionWallCrawl::BP_GetDestForwardDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionWallCrawl", "BP_GetDestForwardDirection");

	Params::ActionWallCrawl_BP_GetDestForwardDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionWallCrawl.BP_GetDestVerticalDirection
// (Final, Native, Private, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UActionWallCrawl::BP_GetDestVerticalDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionWallCrawl", "BP_GetDestVerticalDirection");

	Params::ActionWallCrawl_BP_GetDestVerticalDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ActionWallCrawl.BP_GetWallCrawlState
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EWallCrawlState                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EWallCrawlState UActionWallCrawl::BP_GetWallCrawlState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionWallCrawl", "BP_GetWallCrawlState");

	Params::ActionWallCrawl_BP_GetWallCrawlState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.BP_Exit
// (Event, Public, BlueprintEvent)

void ABullet::BP_Exit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "BP_Exit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.Bullet.BP_OnHitReceiveBackground
// (Event, Public, BlueprintEvent)

void ABullet::BP_OnHitReceiveBackground()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "BP_OnHitReceiveBackground");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.Bullet.BP_ResetLimit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABullet::BP_ResetLimit(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "BP_ResetLimit");

	Params::Bullet_BP_ResetLimit Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.BP_RestoreBegin
// (Event, Public, BlueprintEvent)

void ABullet::BP_RestoreBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "BP_RestoreBegin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.Bullet.BP_RestoreBeginAfter
// (Event, Public, BlueprintEvent)

void ABullet::BP_RestoreBeginAfter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "BP_RestoreBeginAfter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.Bullet.BP_SetVelocity
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NewVelocity                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ABullet::BP_SetVelocity(const struct FVector& NewVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "BP_SetVelocity");

	Params::Bullet_BP_SetVelocity Parms{};

	Parms.NewVelocity = std::move(NewVelocity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.BP_StopBeginSE
// (Final, Native, Public, BlueprintCallable)

void ABullet::BP_StopBeginSE()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "BP_StopBeginSE");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Bullet.BP_TimeUp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBulletDestroyType                      DestroyType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABullet::BP_TimeUp(EBulletDestroyType DestroyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "BP_TimeUp");

	Params::Bullet_BP_TimeUp Parms{};

	Parms.DestroyType = DestroyType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Bullet.OnBackgroundHitCountZero
// (Native, Public, HasOutParams)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ABullet::OnBackgroundHitCountZero(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "OnBackgroundHitCountZero");

	Params::Bullet_OnBackgroundHitCountZero Parms{};

	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Bullet.OnCharacterHitCountZero
// (Native, Public, HasOutParams)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ABullet::OnCharacterHitCountZero(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "OnCharacterHitCountZero");

	Params::Bullet_OnCharacterHitCountZero Parms{};

	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Bullet.OnCollisionComponentDestroyed
// (Native, Public)
// Parameters:
// class UPrimitiveComponent*              PrimitiveComponent                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABullet::OnCollisionComponentDestroyed(class UPrimitiveComponent* PrimitiveComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "OnCollisionComponentDestroyed");

	Params::Bullet_OnCollisionComponentDestroyed Parms{};

	Parms.PrimitiveComponent = PrimitiveComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Bullet.OnFirstHitBackground
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABullet::OnFirstHitBackground(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "OnFirstHitBackground");

	Params::Bullet_OnFirstHitBackground Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.OnFirstHitCharacter
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABullet::OnFirstHitCharacter(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "OnFirstHitCharacter");

	Params::Bullet_OnFirstHitCharacter Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.OnHitBackground
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABullet::OnHitBackground(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "OnHitBackground");

	Params::Bullet_OnHitBackground Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.OnHitCharacter
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABullet::OnHitCharacter(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "OnHitCharacter");

	Params::Bullet_OnHitCharacter Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.OnHitReceiveBackground
// (Native, Public, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// EHitThrowType                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EHitThrowType ABullet::OnHitReceiveBackground(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "OnHitReceiveBackground");

	Params::Bullet_OnHitReceiveBackground Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction InGameModule.Bullet.OnHitSPEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ABullet::OnHitSPEventDelegate__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "OnHitSPEventDelegate__DelegateSignature");

	Params::Bullet_OnHitSPEventDelegate__DelegateSignature Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.Bullet.OnPostHit
// (Native, Public, HasOutParams)
// Parameters:
// struct FHeroHitCollisionInfo            CastHitInfo                                            (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AActor*                           HitActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABullet::OnPostHit(const struct FHeroHitCollisionInfo& CastHitInfo, class AActor* HitActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "OnPostHit");

	Params::Bullet_OnPostHit Parms{};

	Parms.CastHitInfo = std::move(CastHitInfo);
	Parms.HitActor = HitActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Bullet.OnPreHitBackground
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABullet::OnPreHitBackground(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "OnPreHitBackground");

	Params::Bullet_OnPreHitBackground Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.OnPreHitCharacter
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABullet::OnPreHitCharacter(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "OnPreHitCharacter");

	Params::Bullet_OnPreHitCharacter Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.BP_CharacterEqual
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ABullet*                          Src                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABullet::BP_CharacterEqual(const class ABullet* Src) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "BP_CharacterEqual");

	Params::Bullet_BP_CharacterEqual Parms{};

	Parms.Src = Src;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.BP_GetCharacterId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ECharacterId                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECharacterId ABullet::BP_GetCharacterId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "BP_GetCharacterId");

	Params::Bullet_BP_GetCharacterId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.BP_GetHitCols
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FHitCollision>      ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FHitCollision> ABullet::BP_GetHitCols() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "BP_GetHitCols");

	Params::Bullet_BP_GetHitCols Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.BP_GetLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABullet::BP_GetLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "BP_GetLevel");

	Params::Bullet_BP_GetLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.BP_GetLevelDB
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FBulletLevelData           ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FBulletLevelData ABullet::BP_GetLevelDB() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "BP_GetLevelDB");

	Params::Bullet_BP_GetLevelDB Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.BP_GetLimit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABullet::BP_GetLimit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "BP_GetLimit");

	Params::Bullet_BP_GetLimit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.BP_GetLimitMax
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLimit                     ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FLimit ABullet::BP_GetLimitMax() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "BP_GetLimitMax");

	Params::Bullet_BP_GetLimitMax Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.BP_GetProjectileMovementComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UHeroProjectileMovementComponent* ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHeroProjectileMovementComponent* ABullet::BP_GetProjectileMovementComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "BP_GetProjectileMovementComponent");

	Params::Bullet_BP_GetProjectileMovementComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.BP_GetRandStream
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRandomStream                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FRandomStream ABullet::BP_GetRandStream() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "BP_GetRandStream");

	Params::Bullet_BP_GetRandStream Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.BP_InitDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector ABullet::BP_InitDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "BP_InitDirection");

	Params::Bullet_BP_InitDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.BP_InitLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector ABullet::BP_InitLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "BP_InitLocation");

	Params::Bullet_BP_InitLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.BP_InitRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FQuat                      ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

const struct FQuat ABullet::BP_InitRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "BP_InitRotation");

	Params::Bullet_BP_InitRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.BP_InitScale
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector ABullet::BP_InitScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "BP_InitScale");

	Params::Bullet_BP_InitScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.BP_InitTarget
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector ABullet::BP_InitTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "BP_InitTarget");

	Params::Bullet_BP_InitTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.BP_IsLimit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABullet::BP_IsLimit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "BP_IsLimit");

	Params::Bullet_BP_IsLimit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.BP_PrevLocate
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector ABullet::BP_PrevLocate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "BP_PrevLocate");

	Params::Bullet_BP_PrevLocate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.GetAttackId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EAttackId                               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAttackId ABullet::GetAttackId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "GetAttackId");

	Params::Bullet_GetAttackId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.GetBaseOwnerCharacterBattle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ACharacterBattle*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ACharacterBattle* ABullet::GetBaseOwnerCharacterBattle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "GetBaseOwnerCharacterBattle");

	Params::Bullet_GetBaseOwnerCharacterBattle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.GetCharacterID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ECharacterId                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECharacterId ABullet::GetCharacterID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "GetCharacterID");

	Params::Bullet_GetCharacterID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.GetCommandID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ECommandId                              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECommandId ABullet::GetCommandID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "GetCommandID");

	Params::Bullet_GetCommandID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.GetIsProjectileCreatorMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABullet::GetIsProjectileCreatorMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "GetIsProjectileCreatorMode");

	Params::Bullet_GetIsProjectileCreatorMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.GetIsRestoreLoad
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABullet::GetIsRestoreLoad() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "GetIsRestoreLoad");

	Params::Bullet_GetIsRestoreLoad Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.GetOverrideLimitTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABullet::GetOverrideLimitTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "GetOverrideLimitTime");

	Params::Bullet_GetOverrideLimitTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.GetOwnerCharacterBattle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ACharacterBattle*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ACharacterBattle* ABullet::GetOwnerCharacterBattle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "GetOwnerCharacterBattle");

	Params::Bullet_GetOwnerCharacterBattle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.GetOwnerGenerator
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AProjectileGeneratorBattle*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AProjectileGeneratorBattle* ABullet::GetOwnerGenerator() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "GetOwnerGenerator");

	Params::Bullet_GetOwnerGenerator Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.GetPlayerId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 ABullet::GetPlayerId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "GetPlayerId");

	Params::Bullet_GetPlayerId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Bullet.GetTeamID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 ABullet::GetTeamID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bullet", "GetTeamID");

	Params::Bullet_GetTeamID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.AIControllerBattle.BP_CombatChaseCheck
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AAIControllerBattle::BP_CombatChaseCheck(class AActor* TargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIControllerBattle", "BP_CombatChaseCheck");

	Params::AIControllerBattle_BP_CombatChaseCheck Parms{};

	Parms.TargetActor = TargetActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.AIControllerBattle.BP_CombatChaseFinish
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AAIControllerBattle::BP_CombatChaseFinish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIControllerBattle", "BP_CombatChaseFinish");

	Params::AIControllerBattle_BP_CombatChaseFinish Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.AIControllerBattle.BP_CombatCheck
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AAIControllerBattle::BP_CombatCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIControllerBattle", "BP_CombatCheck");

	Params::AIControllerBattle_BP_CombatCheck Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.AIControllerBattle.BP_CombatPolling
// (Final, Native, Public, BlueprintCallable)

void AAIControllerBattle::BP_CombatPolling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIControllerBattle", "BP_CombatPolling");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.AIControllerBattle.BP_CombatStart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AAIControllerBattle::BP_CombatStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIControllerBattle", "BP_CombatStart");

	Params::AIControllerBattle_BP_CombatStart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.AIControllerBattle.BP_DodgeCheck
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AAIControllerBattle::BP_DodgeCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIControllerBattle", "BP_DodgeCheck");

	Params::AIControllerBattle_BP_DodgeCheck Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.AIControllerBattle.BP_DodgeStart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AAIControllerBattle::BP_DodgeStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIControllerBattle", "BP_DodgeStart");

	Params::AIControllerBattle_BP_DodgeStart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.AIControllerBattle.BP_EscapeCheck
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AAIControllerBattle::BP_EscapeCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIControllerBattle", "BP_EscapeCheck");

	Params::AIControllerBattle_BP_EscapeCheck Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.AIControllerBattle.BP_EscapeFinish
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AAIControllerBattle::BP_EscapeFinish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIControllerBattle", "BP_EscapeFinish");

	Params::AIControllerBattle_BP_EscapeFinish Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.AIControllerBattle.BP_EscapePolling
// (Final, Native, Public, BlueprintCallable)

void AAIControllerBattle::BP_EscapePolling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIControllerBattle", "BP_EscapePolling");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.AIControllerBattle.BP_EscapeStart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AAIControllerBattle::BP_EscapeStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIControllerBattle", "BP_EscapeStart");

	Params::AIControllerBattle_BP_EscapeStart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.AIControllerBattle.BP_GetTargetMemory
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* AAIControllerBattle::BP_GetTargetMemory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIControllerBattle", "BP_GetTargetMemory");

	Params::AIControllerBattle_BP_GetTargetMemory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.AIControllerBattle.BP_GetTargetPoint
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* AAIControllerBattle::BP_GetTargetPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIControllerBattle", "BP_GetTargetPoint");

	Params::AIControllerBattle_BP_GetTargetPoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.AIControllerBattle.BP_MoveAction
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FAIMoveCommand                   Command                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AAIControllerBattle::BP_MoveAction(const struct FAIMoveCommand& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIControllerBattle", "BP_MoveAction");

	Params::AIControllerBattle_BP_MoveAction Parms{};

	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.AIControllerBattle.BP_MoveExit
// (Final, Native, Public, BlueprintCallable)

void AAIControllerBattle::BP_MoveExit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIControllerBattle", "BP_MoveExit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.AIControllerBattle.BP_MoveInput
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAIMoveCommand                   Command                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AAIControllerBattle::BP_MoveInput(const struct FAIMoveCommand& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIControllerBattle", "BP_MoveInput");

	Params::AIControllerBattle_BP_MoveInput Parms{};

	Parms.Command = std::move(Command);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.AIControllerBattle.BP_MoveTick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAIControllerBattle::BP_MoveTick(class AActor* TargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIControllerBattle", "BP_MoveTick");

	Params::AIControllerBattle_BP_MoveTick Parms{};

	Parms.TargetActor = TargetActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.AIControllerBattle.BP_PatrolCheck
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AAIControllerBattle::BP_PatrolCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIControllerBattle", "BP_PatrolCheck");

	Params::AIControllerBattle_BP_PatrolCheck Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.AIControllerBattle.BP_PatrolFinish
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AAIControllerBattle::BP_PatrolFinish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIControllerBattle", "BP_PatrolFinish");

	Params::AIControllerBattle_BP_PatrolFinish Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.AIControllerBattle.BP_PatrolPolling
// (Final, Native, Public, BlueprintCallable)

void AAIControllerBattle::BP_PatrolPolling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIControllerBattle", "BP_PatrolPolling");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.AIControllerBattle.BP_PatrolStart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AAIControllerBattle::BP_PatrolStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIControllerBattle", "BP_PatrolStart");

	Params::AIControllerBattle_BP_PatrolStart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.AIControllerBattle.BP_PossibleNavigation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AAIControllerBattle::BP_PossibleNavigation(class AActor* TargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIControllerBattle", "BP_PossibleNavigation");

	Params::AIControllerBattle_BP_PossibleNavigation Parms{};

	Parms.TargetActor = TargetActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.AIControllerBattle.BP_RootStart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AAIControllerBattle::BP_RootStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIControllerBattle", "BP_RootStart");

	Params::AIControllerBattle_BP_RootStart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.AIControllerBattle.BP_SkillAction
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<struct FAISkillCommand>          Commands                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    Instant                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Interval                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAIControllerBattle::BP_SkillAction(const TArray<struct FAISkillCommand>& Commands, bool Instant, float Interval)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIControllerBattle", "BP_SkillAction");

	Params::AIControllerBattle_BP_SkillAction Parms{};

	Parms.Commands = std::move(Commands);
	Parms.Instant = Instant;
	Parms.Interval = Interval;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.AIControllerBattle.BP_SkillExit
// (Final, Native, Public, BlueprintCallable)

void AAIControllerBattle::BP_SkillExit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIControllerBattle", "BP_SkillExit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.AIControllerBattle.BP_SkillExitCheck
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AAIControllerBattle::BP_SkillExitCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIControllerBattle", "BP_SkillExitCheck");

	Params::AIControllerBattle_BP_SkillExitCheck Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.AIControllerBattle.BP_SkillInput
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAISkillCommand                  Command                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AAIControllerBattle::BP_SkillInput(const struct FAISkillCommand& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIControllerBattle", "BP_SkillInput");

	Params::AIControllerBattle_BP_SkillInput Parms{};

	Parms.Command = std::move(Command);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.AIControllerBattle.BP_SkillPerform
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AAIControllerBattle::BP_SkillPerform(class AActor* TargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIControllerBattle", "BP_SkillPerform");

	Params::AIControllerBattle_BP_SkillPerform Parms{};

	Parms.TargetActor = TargetActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.AIControllerBattle.BP_StartAI
// (Event, Public, BlueprintEvent)

void AAIControllerBattle::BP_StartAI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIControllerBattle", "BP_StartAI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.AIControllerBattle.OnPostCharacterStart
// (Final, Native, Public)

void AAIControllerBattle::OnPostCharacterStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIControllerBattle", "OnPostCharacterStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterConditionBase.BP_DeactivateParticles
// (Final, Native, Protected, BlueprintCallable)

void UCharacterConditionBase::BP_DeactivateParticles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionBase", "BP_DeactivateParticles");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterConditionBase.BP_OnAgainCondition
// (Event, Protected, BlueprintEvent)

void UCharacterConditionBase::BP_OnAgainCondition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionBase", "BP_OnAgainCondition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.CharacterConditionBase.BP_OnBeginCondition
// (Event, Protected, BlueprintEvent)

void UCharacterConditionBase::BP_OnBeginCondition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionBase", "BP_OnBeginCondition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.CharacterConditionBase.BP_OnChangeConditionLevel
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   OldLevel                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewLevel                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterConditionBase::BP_OnChangeConditionLevel(int32 OldLevel, int32 NewLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionBase", "BP_OnChangeConditionLevel");

	Params::CharacterConditionBase_BP_OnChangeConditionLevel Parms{};

	Parms.OldLevel = OldLevel;
	Parms.NewLevel = NewLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.CharacterConditionBase.BP_OnChangeConditionSubLevel
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   OldLevel                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewLevel                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterConditionBase::BP_OnChangeConditionSubLevel(int32 OldLevel, int32 NewLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionBase", "BP_OnChangeConditionSubLevel");

	Params::CharacterConditionBase_BP_OnChangeConditionSubLevel Parms{};

	Parms.OldLevel = OldLevel;
	Parms.NewLevel = NewLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.CharacterConditionBase.BP_OnEndCondition
// (Event, Protected, BlueprintEvent)

void UCharacterConditionBase::BP_OnEndCondition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionBase", "BP_OnEndCondition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.CharacterConditionBase.BP_OnHiddenCondition
// (Event, Protected, BlueprintEvent)

void UCharacterConditionBase::BP_OnHiddenCondition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionBase", "BP_OnHiddenCondition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.CharacterConditionBase.BP_OnRefreshCondition
// (Event, Protected, BlueprintEvent)

void UCharacterConditionBase::BP_OnRefreshCondition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionBase", "BP_OnRefreshCondition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.CharacterConditionBase.BP_OnUpdateIntervalValue
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterConditionBase::BP_OnUpdateIntervalValue(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionBase", "BP_OnUpdateIntervalValue");

	Params::CharacterConditionBase_BP_OnUpdateIntervalValue Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.CharacterConditionBase.BP_OnVisibleCondition
// (Event, Protected, BlueprintEvent)

void UCharacterConditionBase::BP_OnVisibleCondition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionBase", "BP_OnVisibleCondition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.CharacterConditionBase.BP_PlayEffect
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// class UParticleSystem*                  ParticleSystem                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Offset                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bAttached                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCustomParticleSystemComponent*   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCustomParticleSystemComponent* UCharacterConditionBase::BP_PlayEffect(class UParticleSystem* ParticleSystem, const class FName SocketName, const struct FVector& Offset, const struct FRotator& Rotation, bool bAttached)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionBase", "BP_PlayEffect");

	Params::CharacterConditionBase_BP_PlayEffect Parms{};

	Parms.ParticleSystem = ParticleSystem;
	Parms.SocketName = SocketName;
	Parms.Offset = std::move(Offset);
	Parms.Rotation = std::move(Rotation);
	Parms.bAttached = bAttached;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterConditionBase.BP_RecoverHealth
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnableRecoverCondition                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerStateBattle*               Healer                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterConditionBase::BP_RecoverHealth(float Value, bool bEnableRecoverCondition, class APlayerStateBattle* Healer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionBase", "BP_RecoverHealth");

	Params::CharacterConditionBase_BP_RecoverHealth Parms{};

	Parms.Value = Value;
	Parms.bEnableRecoverCondition = bEnableRecoverCondition;
	Parms.Healer = Healer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterConditionBase.BP_RevertAnimationSpeedDeltaRate
// (Final, Native, Protected, BlueprintCallable)

void UCharacterConditionBase::BP_RevertAnimationSpeedDeltaRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionBase", "BP_RevertAnimationSpeedDeltaRate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterConditionBase.BP_RevertMoveSpeedDeltaRate
// (Final, Native, Protected, BlueprintCallable)

void UCharacterConditionBase::BP_RevertMoveSpeedDeltaRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionBase", "BP_RevertMoveSpeedDeltaRate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterConditionBase.BP_SetAnimationSpeedDeltaRate
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterConditionBase::BP_SetAnimationSpeedDeltaRate(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionBase", "BP_SetAnimationSpeedDeltaRate");

	Params::CharacterConditionBase_BP_SetAnimationSpeedDeltaRate Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterConditionBase.BP_SetMoveSpeedDeltaRate
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterConditionBase::BP_SetMoveSpeedDeltaRate(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionBase", "BP_SetMoveSpeedDeltaRate");

	Params::CharacterConditionBase_BP_SetMoveSpeedDeltaRate Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterConditionBase.BP_SpawnBeginParticles
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bChangeCondition                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAgainCondition                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterConditionBase::BP_SpawnBeginParticles(bool bChangeCondition, bool bAgainCondition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionBase", "BP_SpawnBeginParticles");

	Params::CharacterConditionBase_BP_SpawnBeginParticles Parms{};

	Parms.bChangeCondition = bChangeCondition;
	Parms.bAgainCondition = bAgainCondition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterConditionBase.BP_SpawnEndParticles
// (Final, Native, Protected, BlueprintCallable)

void UCharacterConditionBase::BP_SpawnEndParticles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionBase", "BP_SpawnEndParticles");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterConditionBase.BP_GetInstigatedPlayer
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APlayerStateBattle*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APlayerStateBattle* UCharacterConditionBase::BP_GetInstigatedPlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionBase", "BP_GetInstigatedPlayer");

	Params::CharacterConditionBase_BP_GetInstigatedPlayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterConditionBase.BP_GetIntervalSpan
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCharacterConditionBase::BP_GetIntervalSpan() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionBase", "BP_GetIntervalSpan");

	Params::CharacterConditionBase_BP_GetIntervalSpan Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterConditionBase.BP_GetIntervalValue
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCharacterConditionBase::BP_GetIntervalValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionBase", "BP_GetIntervalValue");

	Params::CharacterConditionBase_BP_GetIntervalValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterConditionBase.BP_GetLevel
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCharacterConditionBase::BP_GetLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionBase", "BP_GetLevel");

	Params::CharacterConditionBase_BP_GetLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterConditionBase.BP_GetOwnerCharacterBattle
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ACharacterBattle*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ACharacterBattle* UCharacterConditionBase::BP_GetOwnerCharacterBattle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionBase", "BP_GetOwnerCharacterBattle");

	Params::CharacterConditionBase_BP_GetOwnerCharacterBattle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterConditionBase.BP_GetOwnerPlayerState
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APlayerStateBattle*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APlayerStateBattle* UCharacterConditionBase::BP_GetOwnerPlayerState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionBase", "BP_GetOwnerPlayerState");

	Params::CharacterConditionBase_BP_GetOwnerPlayerState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterConditionBase.BP_GetProgress
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCharacterConditionBase::BP_GetProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionBase", "BP_GetProgress");

	Params::CharacterConditionBase_BP_GetProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterConditionBase.BP_GetRemainTime
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCharacterConditionBase::BP_GetRemainTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionBase", "BP_GetRemainTime");

	Params::CharacterConditionBase_BP_GetRemainTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterConditionBase.BP_IsEnableChangeCondition
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Span                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Interval                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterConditionBase::BP_IsEnableChangeCondition(int32 Level, float Span, float Value, float Interval) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionBase", "BP_IsEnableChangeCondition");

	Params::CharacterConditionBase_BP_IsEnableChangeCondition Parms{};

	Parms.Level = Level;
	Parms.Span = Span;
	Parms.Value = Value;
	Parms.Interval = Interval;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_ChangeGrabInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             GrabJointName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             GrabbedJointName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAnimationId                            GrabbedAnimationId                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AnimationBlendTime                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AnimationStartPosition                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_ChangeGrabInfo(class FName GrabJointName, class FName GrabbedJointName, EAnimationId GrabbedAnimationId, float AnimationBlendTime, float AnimationStartPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_ChangeGrabInfo");

	Params::CharacterState_BP_ChangeGrabInfo Parms{};

	Parms.GrabJointName = GrabJointName;
	Parms.GrabbedJointName = GrabbedJointName;
	Parms.GrabbedAnimationId = GrabbedAnimationId;
	Parms.AnimationBlendTime = AnimationBlendTime;
	Parms.AnimationStartPosition = AnimationStartPosition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_ClearGrab
// (Final, Native, Public, BlueprintCallable)

void UCharacterState::BP_ClearGrab()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_ClearGrab");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_ClearGrabbed
// (Final, Native, Public, BlueprintCallable)

void UCharacterState::BP_ClearGrabbed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_ClearGrabbed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetAimExcluded
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetAimExcluded(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetAimExcluded");

	Params::CharacterState_BP_SetAimExcluded Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetAirJump
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetAirJump(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetAirJump");

	Params::CharacterState_BP_SetAirJump Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetBlowOff
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetBlowOff(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetBlowOff");

	Params::CharacterState_BP_SetBlowOff Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetCantDashAirTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetCantDashAirTime(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetCantDashAirTime");

	Params::CharacterState_BP_SetCantDashAirTime Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetCantDodgeTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetCantDodgeTime(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetCantDodgeTime");

	Params::CharacterState_BP_SetCantDodgeTime Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetCrouch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetCrouch(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetCrouch");

	Params::CharacterState_BP_SetCrouch Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetDash
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetDash(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetDash");

	Params::CharacterState_BP_SetDash Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetDashAir
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetDashAir(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetDashAir");

	Params::CharacterState_BP_SetDashAir Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetDashAirInfinity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetDashAirInfinity(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetDashAirInfinity");

	Params::CharacterState_BP_SetDashAirInfinity Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetDashAirTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetDashAirTime(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetDashAirTime");

	Params::CharacterState_BP_SetDashAirTime Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetDashJump
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetDashJump(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetDashJump");

	Params::CharacterState_BP_SetDashJump Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetDodge
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetDodge(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetDodge");

	Params::CharacterState_BP_SetDodge Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetDontFall
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetDontFall(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetDontFall");

	Params::CharacterState_BP_SetDontFall Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetDown
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetDown(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetDown");

	Params::CharacterState_BP_SetDown Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetDyingRecover
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetDyingRecover(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetDyingRecover");

	Params::CharacterState_BP_SetDyingRecover Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetEnableJumpPad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetEnableJumpPad(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetEnableJumpPad");

	Params::CharacterState_BP_SetEnableJumpPad Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetEnableUseSupply
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetEnableUseSupply(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetEnableUseSupply");

	Params::CharacterState_BP_SetEnableUseSupply Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetForwardJump
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetForwardJump(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetForwardJump");

	Params::CharacterState_BP_SetForwardJump Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetFreeze
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetFreeze(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetFreeze");

	Params::CharacterState_BP_SetFreeze Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetGiant
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetGiant(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetGiant");

	Params::CharacterState_BP_SetGiant Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetGrabInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             GrabJointName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             GrabbedJointName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAnimationId                            GrabbedAnimationId                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetGrabInfo(class FName GrabJointName, class FName GrabbedJointName, EAnimationId GrabbedAnimationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetGrabInfo");

	Params::CharacterState_BP_SetGrabInfo Parms{};

	Parms.GrabJointName = GrabJointName;
	Parms.GrabbedJointName = GrabbedJointName;
	Parms.GrabbedAnimationId = GrabbedAnimationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetOpenBox
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetOpenBox(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetOpenBox");

	Params::CharacterState_BP_SetOpenBox Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetPickUpItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetPickUpItem(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetPickUpItem");

	Params::CharacterState_BP_SetPickUpItem Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetPlusUltraAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetPlusUltraAction(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetPlusUltraAction");

	Params::CharacterState_BP_SetPlusUltraAction Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetRecoverAlly
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetRecoverAlly(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetRecoverAlly");

	Params::CharacterState_BP_SetRecoverAlly Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetRecoverDamaging
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetRecoverDamaging(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetRecoverDamaging");

	Params::CharacterState_BP_SetRecoverDamaging Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetScoutEnemy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetScoutEnemy(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetScoutEnemy");

	Params::CharacterState_BP_SetScoutEnemy Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetShock
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetShock(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetShock");

	Params::CharacterState_BP_SetShock Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetStandUp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetStandUp(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetStandUp");

	Params::CharacterState_BP_SetStandUp Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetUseItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetUseItem(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetUseItem");

	Params::CharacterState_BP_SetUseItem Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetWallCrawl
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetWallCrawl(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetWallCrawl");

	Params::CharacterState_BP_SetWallCrawl Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetWallDash
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetWallDash(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetWallDash");

	Params::CharacterState_BP_SetWallDash Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_SetWallWalk
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::BP_SetWallWalk(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_SetWallWalk");

	Params::CharacterState_BP_SetWallWalk Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.OnRep_PlayerState
// (Final, Native, Public)
// Parameters:
// class APlayerStateBattle*               PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterState::OnRep_PlayerState(class APlayerStateBattle* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "OnRep_PlayerState");

	Params::CharacterState_OnRep_PlayerState Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterState.BP_GetDashAirTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCharacterState::BP_GetDashAirTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_GetDashAirTime");

	Params::CharacterState_BP_GetDashAirTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_GetGrabbedCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ACharacterBattle*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ACharacterBattle* UCharacterState::BP_GetGrabbedCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_GetGrabbedCharacter");

	Params::CharacterState_BP_GetGrabbedCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_GetGrabCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ACharacterBattle*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ACharacterBattle* UCharacterState::BP_GetGrabCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_GetGrabCharacter");

	Params::CharacterState_BP_GetGrabCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_GetTouchWallNormal
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector UCharacterState::BP_GetTouchWallNormal() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_GetTouchWallNormal");

	Params::CharacterState_BP_GetTouchWallNormal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_HasVerticalFixedWallCrawl
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_HasVerticalFixedWallCrawl() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_HasVerticalFixedWallCrawl");

	Params::CharacterState_BP_HasVerticalFixedWallCrawl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_HasWallDash
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_HasWallDash() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_HasWallDash");

	Params::CharacterState_BP_HasWallDash Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsAimingMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsAimingMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsAimingMode");

	Params::CharacterState_BP_IsAimingMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsAirJump
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsAirJump() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsAirJump");

	Params::CharacterState_BP_IsAirJump Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsAttacking
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsAttacking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsAttacking");

	Params::CharacterState_BP_IsAttacking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsBlowOff
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsBlowOff() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsBlowOff");

	Params::CharacterState_BP_IsBlowOff Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsCrouching
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsCrouching() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsCrouching");

	Params::CharacterState_BP_IsCrouching Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsDamaging
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsDamaging() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsDamaging");

	Params::CharacterState_BP_IsDamaging Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsDash
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsDash() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsDash");

	Params::CharacterState_BP_IsDash Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsDashAir
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsDashAir() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsDashAir");

	Params::CharacterState_BP_IsDashAir Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsDashAirLimit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsDashAirLimit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsDashAirLimit");

	Params::CharacterState_BP_IsDashAirLimit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsDashJump
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsDashJump() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsDashJump");

	Params::CharacterState_BP_IsDashJump Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsDodge
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsDodge() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsDodge");

	Params::CharacterState_BP_IsDodge Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsDontFall
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsDontFall() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsDontFall");

	Params::CharacterState_BP_IsDontFall Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsDown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsDown() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsDown");

	Params::CharacterState_BP_IsDown Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsDyingRecover
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsDyingRecover() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsDyingRecover");

	Params::CharacterState_BP_IsDyingRecover Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsForwardJump
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsForwardJump() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsForwardJump");

	Params::CharacterState_BP_IsForwardJump Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsFreeze
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsFreeze() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsFreeze");

	Params::CharacterState_BP_IsFreeze Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsGiant
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsGiant() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsGiant");

	Params::CharacterState_BP_IsGiant Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsGrab
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsGrab() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsGrab");

	Params::CharacterState_BP_IsGrab Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsGrabbed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsGrabbed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsGrabbed");

	Params::CharacterState_BP_IsGrabbed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsNagaraAttacking
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsNagaraAttacking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsNagaraAttacking");

	Params::CharacterState_BP_IsNagaraAttacking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsNagaraDamaging
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsNagaraDamaging() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsNagaraDamaging");

	Params::CharacterState_BP_IsNagaraDamaging Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsOnWall
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsOnWall() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsOnWall");

	Params::CharacterState_BP_IsOnWall Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsOpenBox
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsOpenBox() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsOpenBox");

	Params::CharacterState_BP_IsOpenBox Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsPickUpItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsPickUpItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsPickUpItem");

	Params::CharacterState_BP_IsPickUpItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsPlusUltraAction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsPlusUltraAction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsPlusUltraAction");

	Params::CharacterState_BP_IsPlusUltraAction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsRecoverDamaging
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsRecoverDamaging() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsRecoverDamaging");

	Params::CharacterState_BP_IsRecoverDamaging Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsRecoveringAlly
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsRecoveringAlly() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsRecoveringAlly");

	Params::CharacterState_BP_IsRecoveringAlly Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsScoutingEnemy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsScoutingEnemy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsScoutingEnemy");

	Params::CharacterState_BP_IsScoutingEnemy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsShock
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsShock() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsShock");

	Params::CharacterState_BP_IsShock Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsStandUp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsStandUp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsStandUp");

	Params::CharacterState_BP_IsStandUp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsTouchGround
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsTouchGround() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsTouchGround");

	Params::CharacterState_BP_IsTouchGround Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsTouchWall
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsTouchWall() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsTouchWall");

	Params::CharacterState_BP_IsTouchWall Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsUseItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsUseItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsUseItem");

	Params::CharacterState_BP_IsUseItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsWallCrawl
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsWallCrawl() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsWallCrawl");

	Params::CharacterState_BP_IsWallCrawl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsWallDash
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsWallDash() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsWallDash");

	Params::CharacterState_BP_IsWallDash Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsWallWalk
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsWallWalk() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsWallWalk");

	Params::CharacterState_BP_IsWallWalk Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsWholeAttacking
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsWholeAttacking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsWholeAttacking");

	Params::CharacterState_BP_IsWholeAttacking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterState.BP_IsWholeDamaging
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterState::BP_IsWholeDamaging() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterState", "BP_IsWholeDamaging");

	Params::CharacterState_BP_IsWholeDamaging Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.AIMove.BeAttackedDetection
// (Final, Native, Private, HasOutParams, HasDefaults)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAIMove::BeAttackedDetection(const class AActor* Actor, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMove", "BeAttackedDetection");

	Params::AIMove_BeAttackedDetection Parms{};

	Parms.Actor = Actor;
	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.AIMove.OnDamageHit
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FDamageInfo                      NewInfo                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAIMove::OnDamageHit(const struct FDamageInfo& NewInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMove", "OnDamageHit");

	Params::AIMove_OnDamageHit Parms{};

	Parms.NewInfo = std::move(NewInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.AllEnemyStatusWeakened
// (Final, Native, Public, BlueprintCallable)

void AGameStateBattle::AllEnemyStatusWeakened()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "AllEnemyStatusWeakened");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.AttackTutorialNPC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStateBattle::AttackTutorialNPC(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "AttackTutorialNPC");

	Params::GameStateBattle_AttackTutorialNPC Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.CheckTutorialMockBattleTimer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGameStateBattle::CheckTutorialMockBattleTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "CheckTutorialMockBattleTimer");

	Params::GameStateBattle_CheckTutorialMockBattleTimer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameStateBattle.CheckTutorialPlayerAttack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAttackId                               AttackId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGameStateBattle::CheckTutorialPlayerAttack(EAttackId AttackId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "CheckTutorialPlayerAttack");

	Params::GameStateBattle_CheckTutorialPlayerAttack Parms{};

	Parms.AttackId = AttackId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameStateBattle.ClearKeepControllTimer
// (Final, Native, Public, BlueprintCallable)

void AGameStateBattle::ClearKeepControllTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "ClearKeepControllTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.CreateTutorialCh012
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                       Transform                                              (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class ASimpleCharacter*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASimpleCharacter* AGameStateBattle::CreateTutorialCh012(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "CreateTutorialCh012");

	Params::GameStateBattle_CreateTutorialCh012 Parms{};

	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameStateBattle.CreateTutorialNPC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStateBattle::CreateTutorialNPC(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "CreateTutorialNPC");

	Params::GameStateBattle_CreateTutorialNPC Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.DeleteMessageTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AGameStateBattle::DeleteMessageTag(const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "DeleteMessageTag");

	Params::GameStateBattle_DeleteMessageTag Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameStateBattle.DeleteTutorialNPC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStateBattle::DeleteTutorialNPC(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "DeleteTutorialNPC");

	Params::GameStateBattle_DeleteTutorialNPC Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.DownTutorialNPC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStateBattle::DownTutorialNPC(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "DownTutorialNPC");

	Params::GameStateBattle_DownTutorialNPC Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.GetButtonGuideFromCommand
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           TaskValue                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FTutorialCheckListButtonGuideData>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FTutorialCheckListButtonGuideData> AGameStateBattle::GetButtonGuideFromCommand(const class FString& TaskValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "GetButtonGuideFromCommand");

	Params::GameStateBattle_GetButtonGuideFromCommand Parms{};

	Parms.TaskValue = std::move(TaskValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameStateBattle.GetTutorialCheckKey
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 AGameStateBattle::GetTutorialCheckKey(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "GetTutorialCheckKey");

	Params::GameStateBattle_GetTutorialCheckKey Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameStateBattle.GetTutorialOperationMessage
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           MessageKey                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText AGameStateBattle::GetTutorialOperationMessage(const class FString& MessageKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "GetTutorialOperationMessage");

	Params::GameStateBattle_GetTutorialOperationMessage Parms{};

	Parms.MessageKey = std::move(MessageKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameStateBattle.GetTutorialPlatform
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EPlatform                               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EPlatform AGameStateBattle::GetTutorialPlatform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "GetTutorialPlatform");

	Params::GameStateBattle_GetTutorialPlatform Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameStateBattle.GetTutorialTaskTableIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           TaskValue                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGameStateBattle::GetTutorialTaskTableIndex(const class FString& TaskValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "GetTutorialTaskTableIndex");

	Params::GameStateBattle_GetTutorialTaskTableIndex Parms{};

	Parms.TaskValue = std::move(TaskValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameStateBattle.GetWin
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGameStateBattle::GetWin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "GetWin");

	Params::GameStateBattle_GetWin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameStateBattle.HasNpcCharacterStarted
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGameStateBattle::HasNpcCharacterStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "HasNpcCharacterStarted");

	Params::GameStateBattle_HasNpcCharacterStarted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameStateBattle.InitializeUseItemParameter
// (Final, Native, Public, BlueprintCallable)

void AGameStateBattle::InitializeUseItemParameter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "InitializeUseItemParameter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.IsAttackTutorialNPC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGameStateBattle::IsAttackTutorialNPC(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "IsAttackTutorialNPC");

	Params::GameStateBattle_IsAttackTutorialNPC Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameStateBattle.IsDeadTutorialNPC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGameStateBattle::IsDeadTutorialNPC(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "IsDeadTutorialNPC");

	Params::GameStateBattle_IsDeadTutorialNPC Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameStateBattle.IsGameModeTraining
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGameStateBattle::IsGameModeTraining()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "IsGameModeTraining");

	Params::GameStateBattle_IsGameModeTraining Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameStateBattle.IsGameModeTutorial
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGameStateBattle::IsGameModeTutorial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "IsGameModeTutorial");

	Params::GameStateBattle_IsGameModeTutorial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameStateBattle.IsKillEnemy
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGameStateBattle::IsKillEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "IsKillEnemy");

	Params::GameStateBattle_IsKillEnemy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameStateBattle.IsMoveTutorialNPC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGameStateBattle::IsMoveTutorialNPC(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "IsMoveTutorialNPC");

	Params::GameStateBattle_IsMoveTutorialNPC Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameStateBattle.IsPoisonMistCondition
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGameStateBattle::IsPoisonMistCondition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "IsPoisonMistCondition");

	Params::GameStateBattle_IsPoisonMistCondition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameStateBattle.IsRecoveringCitizen
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGameStateBattle::IsRecoveringCitizen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "IsRecoveringCitizen");

	Params::GameStateBattle_IsRecoveringCitizen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameStateBattle.IsStartShrinkPoisonMist
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGameStateBattle::IsStartShrinkPoisonMist()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "IsStartShrinkPoisonMist");

	Params::GameStateBattle_IsStartShrinkPoisonMist Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameStateBattle.IsTutorial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGameStateBattle::IsTutorial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "IsTutorial");

	Params::GameStateBattle_IsTutorial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameStateBattle.MoveTutorialNPC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStateBattle::MoveTutorialNPC(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "MoveTutorialNPC");

	Params::GameStateBattle_MoveTutorialNPC Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.OnCharacterDead_NetMulti
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class APlayerStateBattle*               VictimPlayerState                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacterBattle*                 Aggriever                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStateBattle::OnCharacterDead_NetMulti(class APlayerStateBattle* VictimPlayerState, class ACharacterBattle* Aggriever)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "OnCharacterDead_NetMulti");

	Params::GameStateBattle_OnCharacterDead_NetMulti Parms{};

	Parms.VictimPlayerState = VictimPlayerState;
	Parms.Aggriever = Aggriever;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.OnCharacterDying_NetMulti
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class APlayerStateBattle*               VictimPlayerState                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacterBattle*                 Aggriever                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStateBattle::OnCharacterDying_NetMulti(class APlayerStateBattle* VictimPlayerState, class ACharacterBattle* Aggriever)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "OnCharacterDying_NetMulti");

	Params::GameStateBattle_OnCharacterDying_NetMulti Parms{};

	Parms.VictimPlayerState = VictimPlayerState;
	Parms.Aggriever = Aggriever;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.OnDecreasePlayer
// (Final, Native, Private)

void AGameStateBattle::OnDecreasePlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "OnDecreasePlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.OnDecreaseTeam
// (Final, Native, Private)

void AGameStateBattle::OnDecreaseTeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "OnDecreaseTeam");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.OnExitInGameTutorial
// (Final, Native, Public, BlueprintCallable)

void AGameStateBattle::OnExitInGameTutorial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "OnExitInGameTutorial");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.OnHitAttackLastBattle
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FDamageInfo                      NewInfo                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AGameStateBattle::OnHitAttackLastBattle(const struct FDamageInfo& NewInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "OnHitAttackLastBattle");

	Params::GameStateBattle_OnHitAttackLastBattle Parms{};

	Parms.NewInfo = std::move(NewInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.OnPlayRemainingTeamVice
// (Final, Native, Public)

void AGameStateBattle::OnPlayRemainingTeamVice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "OnPlayRemainingTeamVice");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.OnRep_BattleSequence
// (Native, Protected)

void AGameStateBattle::OnRep_BattleSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "OnRep_BattleSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.OnRep_SequenceTimer
// (Final, Native, Public)

void AGameStateBattle::OnRep_SequenceTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "OnRep_SequenceTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.OpenBriefing
// (Final, Native, Public, BlueprintCallable)

void AGameStateBattle::OpenBriefing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "OpenBriefing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.RequestTeleportationTutorial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Z                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStateBattle::RequestTeleportationTutorial(int32 X, int32 Y, int32 Z)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "RequestTeleportationTutorial");

	Params::GameStateBattle_RequestTeleportationTutorial Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.RequestTeleportationTutorialWithRotator
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Z                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Pitch                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Yaw                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Roll                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStateBattle::RequestTeleportationTutorialWithRotator(int32 X, int32 Y, int32 Z, int32 Pitch, int32 Yaw, int32 Roll)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "RequestTeleportationTutorialWithRotator");

	Params::GameStateBattle_RequestTeleportationTutorialWithRotator Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.Pitch = Pitch;
	Parms.Yaw = Yaw;
	Parms.Roll = Roll;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.ResetTutorial
// (Final, Native, Public, BlueprintCallable)

void AGameStateBattle::ResetTutorial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "ResetTutorial");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.ResetTutorialPlayerAttack
// (Final, Native, Public, BlueprintCallable)

void AGameStateBattle::ResetTutorialPlayerAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "ResetTutorialPlayerAttack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.SetBattleSequence
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBattleSequence                         Seq                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStateBattle::SetBattleSequence(EBattleSequence Seq)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "SetBattleSequence");

	Params::GameStateBattle_SetBattleSequence Parms{};

	Parms.Seq = Seq;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.SetCanPlayAnnounceWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bCanPlay                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStateBattle::SetCanPlayAnnounceWidget(bool bCanPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "SetCanPlayAnnounceWidget");

	Params::GameStateBattle_SetCanPlayAnnounceWidget Parms{};

	Parms.bCanPlay = bCanPlay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.SetTutorialDamage
// (Final, Native, Public, BlueprintCallable)

void AGameStateBattle::SetTutorialDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "SetTutorialDamage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.SetTutorialEnemyCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGameStateBattle::SetTutorialEnemyCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "SetTutorialEnemyCount");

	Params::GameStateBattle_SetTutorialEnemyCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameStateBattle.SetTutorialItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           KindItem                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStateBattle::SetTutorialItem(const class FString& KindItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "SetTutorialItem");

	Params::GameStateBattle_SetTutorialItem Parms{};

	Parms.KindItem = std::move(KindItem);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.SetTutorialLift
// (Final, Native, Public, BlueprintCallable)

void AGameStateBattle::SetTutorialLift()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "SetTutorialLift");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.SetTutorialMockBattleTimer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   MockBattleTimeCount                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStateBattle::SetTutorialMockBattleTimer(float MockBattleTimeCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "SetTutorialMockBattleTimer");

	Params::GameStateBattle_SetTutorialMockBattleTimer Parms{};

	Parms.MockBattleTimeCount = MockBattleTimeCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.SetTutorialPlayerCommandValidity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bValidty                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStateBattle::SetTutorialPlayerCommandValidity(bool bValidty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "SetTutorialPlayerCommandValidity");

	Params::GameStateBattle_SetTutorialPlayerCommandValidity Parms{};

	Parms.bValidty = bValidty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.SetTutorialPoisonMist
// (Final, Native, Public, BlueprintCallable)

void AGameStateBattle::SetTutorialPoisonMist()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "SetTutorialPoisonMist");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.SetTutorialRescuerRequired
// (Final, Native, Public, BlueprintCallable)

void AGameStateBattle::SetTutorialRescuerRequired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "SetTutorialRescuerRequired");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.SplitStringByCarriageReturn
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> AGameStateBattle::SplitStringByCarriageReturn(const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "SplitStringByCarriageReturn");

	Params::GameStateBattle_SplitStringByCarriageReturn Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameStateBattle.SwitchAbilityInfoVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Sw                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStateBattle::SwitchAbilityInfoVisibility(bool Sw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "SwitchAbilityInfoVisibility");

	Params::GameStateBattle_SwitchAbilityInfoVisibility Parms{};

	Parms.Sw = Sw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.SwitchAllyPlayerStatusInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Sw                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStateBattle::SwitchAllyPlayerStatusInfo(bool Sw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "SwitchAllyPlayerStatusInfo");

	Params::GameStateBattle_SwitchAllyPlayerStatusInfo Parms{};

	Parms.Sw = Sw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.SwitchBattleCounterVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Sw                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStateBattle::SwitchBattleCounterVisibility(bool Sw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "SwitchBattleCounterVisibility");

	Params::GameStateBattle_SwitchBattleCounterVisibility Parms{};

	Parms.Sw = Sw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.SwitchCrossHairsVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Sw                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStateBattle::SwitchCrossHairsVisibility(bool Sw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "SwitchCrossHairsVisibility");

	Params::GameStateBattle_SwitchCrossHairsVisibility Parms{};

	Parms.Sw = Sw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.SwitchInGameButtonGuideVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Sw                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStateBattle::SwitchInGameButtonGuideVisibility(bool Sw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "SwitchInGameButtonGuideVisibility");

	Params::GameStateBattle_SwitchInGameButtonGuideVisibility Parms{};

	Parms.Sw = Sw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.SwitchLocalPlayerStatusInfoVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Sw                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStateBattle::SwitchLocalPlayerStatusInfoVisibility(bool Sw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "SwitchLocalPlayerStatusInfoVisibility");

	Params::GameStateBattle_SwitchLocalPlayerStatusInfoVisibility Parms{};

	Parms.Sw = Sw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.SwitchLvUpShortCutVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Sw                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStateBattle::SwitchLvUpShortCutVisibility(bool Sw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "SwitchLvUpShortCutVisibility");

	Params::GameStateBattle_SwitchLvUpShortCutVisibility Parms{};

	Parms.Sw = Sw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.SwitchMiscInfoVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Sw                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStateBattle::SwitchMiscInfoVisibility(bool Sw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "SwitchMiscInfoVisibility");

	Params::GameStateBattle_SwitchMiscInfoVisibility Parms{};

	Parms.Sw = Sw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.SwitchPlusUltraVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Sw                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStateBattle::SwitchPlusUltraVisibility(bool Sw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "SwitchPlusUltraVisibility");

	Params::GameStateBattle_SwitchPlusUltraVisibility Parms{};

	Parms.Sw = Sw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.SwitchShortcutInfoVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Sw                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStateBattle::SwitchShortcutInfoVisibility(bool Sw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "SwitchShortcutInfoVisibility");

	Params::GameStateBattle_SwitchShortcutInfoVisibility Parms{};

	Parms.Sw = Sw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.SwitchTutorialAI
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Sw                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStateBattle::SwitchTutorialAI(bool Sw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "SwitchTutorialAI");

	Params::GameStateBattle_SwitchTutorialAI Parms{};

	Parms.Sw = Sw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction InGameModule.GameStateBattle.TeamNumberChangeEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void AGameStateBattle::TeamNumberChangeEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "TeamNumberChangeEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.GameStateBattle.TutorialCharSpecial
// (Final, Native, Public, BlueprintCallable)

void AGameStateBattle::TutorialCharSpecial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "TutorialCharSpecial");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.CanPlayAnnounceWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGameStateBattle::CanPlayAnnounceWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "CanPlayAnnounceWidget");

	Params::GameStateBattle_CanPlayAnnounceWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameStateBattle.GetAlivePlayerNum
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bIncludeBot                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AGameStateBattle::GetAlivePlayerNum(bool bIncludeBot) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "GetAlivePlayerNum");

	Params::GameStateBattle_GetAlivePlayerNum Parms{};

	Parms.bIncludeBot = bIncludeBot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameStateBattle.GetBattleSequence
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBattleSequence                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBattleSequence AGameStateBattle::GetBattleSequence() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "GetBattleSequence");

	Params::GameStateBattle_GetBattleSequence Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameStateBattle.GetCustomMatchComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCustomMatchComponent*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCustomMatchComponent* AGameStateBattle::GetCustomMatchComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "GetCustomMatchComponent");

	Params::GameStateBattle_GetCustomMatchComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameStateBattle.GetTutorialCamera
// (Final, Native, Public, BlueprintCallable, Const)

void AGameStateBattle::GetTutorialCamera() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "GetTutorialCamera");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle.GetTutorialKeyCheck
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int64                                   CheckKey                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   beforeKey                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 AGameStateBattle::GetTutorialKeyCheck(int64 CheckKey, int64 beforeKey) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle", "GetTutorialKeyCheck");

	Params::GameStateBattle_GetTutorialKeyCheck Parms{};

	Parms.CheckKey = CheckKey;
	Parms.beforeKey = beforeKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.AISensor.OnPerceptionUpdated
// (Final, Native, Private, HasOutParams)
// Parameters:
// TArray<class AActor*>                   UpdatedActors                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UAISensor::OnPerceptionUpdated(const TArray<class AActor*>& UpdatedActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AISensor", "OnPerceptionUpdated");

	Params::AISensor_OnPerceptionUpdated Parms{};

	Parms.UpdatedActors = std::move(UpdatedActors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.AIStatics.GetSkillCommandFixedDuration
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAIStatics::GetSkillCommandFixedDuration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AIStatics", "GetSkillCommandFixedDuration");

	Params::AIStatics_GetSkillCommandFixedDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterInteractComponent.Interact_ToClient
// (Net, NetReliable, Native, Event, Public, NetClient, NetValidate)
// Parameters:
// class UInteractTargetComponent*         Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   InteractArgument                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterInteractComponent::Interact_ToClient(class UInteractTargetComponent* Target, uint8 InteractArgument)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterInteractComponent", "Interact_ToClient");

	Params::CharacterInteractComponent_Interact_ToClient Parms{};

	Parms.Target = Target;
	Parms.InteractArgument = InteractArgument;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterInteractComponent.Interact_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class UInteractTargetComponent*         Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerStateBattle*               PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   InteractArgument                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterInteractComponent::Interact_ToServer(class UInteractTargetComponent* Target, class APlayerStateBattle* PlayerState, uint8 InteractArgument)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterInteractComponent", "Interact_ToServer");

	Params::CharacterInteractComponent_Interact_ToServer Parms{};

	Parms.Target = Target;
	Parms.PlayerState = PlayerState;
	Parms.InteractArgument = InteractArgument;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterInteractComponent.Negotiation_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class UInteractTargetComponent*         Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   InteractArgument                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterInteractComponent::Negotiation_ToServer(class UInteractTargetComponent* Target, uint8 InteractArgument)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterInteractComponent", "Negotiation_ToServer");

	Params::CharacterInteractComponent_Negotiation_ToServer Parms{};

	Parms.Target = Target;
	Parms.InteractArgument = InteractArgument;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CommandWheelPresenter.LoadWheelItems
// (Final, Native, Private)

void ACommandWheelPresenter::LoadWheelItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommandWheelPresenter", "LoadWheelItems");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CommandWheelPresenter.LobbyCloseWheel
// (Final, Native, Private)

void ACommandWheelPresenter::LobbyCloseWheel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommandWheelPresenter", "LobbyCloseWheel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.AlertWidget.UpdateVisibility
// (Final, Native, Public)

void UAlertWidget::UpdateVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AlertWidget", "UpdateVisibility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch043Unique3Trap.OnResponceHit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           HitActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACh043Unique3Trap::OnResponceHit(class AActor* HitActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch043Unique3Trap", "OnResponceHit");

	Params::Ch043Unique3Trap_OnResponceHit Parms{};

	Parms.HitActor = HitActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ConditionEffectDataAsset.SortByAlphabetName
// (Native, Public)

void UConditionEffectDataAsset::SortByAlphabetName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConditionEffectDataAsset", "SortByAlphabetName");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ConditionEffectDataAsset.SortByEnum
// (Native, Public)

void UConditionEffectDataAsset::SortByEnum()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConditionEffectDataAsset", "SortByEnum");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction InGameModule.CustomBullet.OnHitDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// struct FHitResult                       HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ACustomBullet::OnHitDelegate__DelegateSignature(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomBullet", "OnHitDelegate__DelegateSignature");

	Params::CustomBullet_OnHitDelegate__DelegateSignature Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.CustomBullet.SetRotationFollowsVelocity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bRotate                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACustomBullet::SetRotationFollowsVelocity(bool bRotate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomBullet", "SetRotationFollowsVelocity");

	Params::CustomBullet_SetRotationFollowsVelocity Parms{};

	Parms.bRotate = bRotate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch046Unique2BulletBase.GetShieldHp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ACh046Unique2BulletBase::GetShieldHp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch046Unique2BulletBase", "GetShieldHp");

	Params::Ch046Unique2BulletBase_GetShieldHp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterBattle.BeginWireFramePostProcess
// (Final, Native, Public, BlueprintCallable)

void ACharacterBattle::BeginWireFramePostProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BeginWireFramePostProcess");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterBattle.BP_BeginChangeBoundsScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   BoundsScale                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACharacterBattle::BP_BeginChangeBoundsScale(float BoundsScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_BeginChangeBoundsScale");

	Params::CharacterBattle_BP_BeginChangeBoundsScale Parms{};

	Parms.BoundsScale = BoundsScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterBattle.BP_EndChangeBoundsScale
// (Final, Native, Public, BlueprintCallable)

void ACharacterBattle::BP_EndChangeBoundsScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_EndChangeBoundsScale");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterBattle.BP_GetSpawnCharacterId
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 ACharacterBattle::BP_GetSpawnCharacterId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_GetSpawnCharacterId");

	Params::CharacterBattle_BP_GetSpawnCharacterId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterBattle.BP_GetTeamId
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 ACharacterBattle::BP_GetTeamId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_GetTeamId");

	Params::CharacterBattle_BP_GetTeamId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterBattle.BP_IsDuplicating
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ACharacterBattle::BP_IsDuplicating()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_IsDuplicating");

	Params::CharacterBattle_BP_IsDuplicating Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterBattle.BP_IsTransforming
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ACharacterBattle::BP_IsTransforming()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_IsTransforming");

	Params::CharacterBattle_BP_IsTransforming Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterBattle.BP_JumpPadDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Normal                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACharacterBattle::BP_JumpPadDirection(const struct FVector& Normal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_JumpPadDirection");

	Params::CharacterBattle_BP_JumpPadDirection Parms{};

	Parms.Normal = std::move(Normal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterBattle.BP_OnJumpPad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Power                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           JumpPadActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACharacterBattle::BP_OnJumpPad(float Power, class AActor* JumpPadActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_OnJumpPad");

	Params::CharacterBattle_BP_OnJumpPad Parms{};

	Parms.Power = Power;
	Parms.JumpPadActor = JumpPadActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterBattle.BP_RecoverDyingAlly
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Ally                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSpecialAction                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACharacterBattle::BP_RecoverDyingAlly(class AActor* Ally, bool bSpecialAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_RecoverDyingAlly");

	Params::CharacterBattle_BP_RecoverDyingAlly Parms{};

	Parms.Ally = Ally;
	Parms.bSpecialAction = bSpecialAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterBattle.BP_SetCameraOffset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Seconds                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEasingFunc                             Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACharacterBattle::BP_SetCameraOffset(float Scale, float Seconds, EEasingFunc Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_SetCameraOffset");

	Params::CharacterBattle_BP_SetCameraOffset Parms{};

	Parms.Scale = Scale;
	Parms.Seconds = Seconds;
	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterBattle.BP_SetEnableWallThrough
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACharacterBattle::BP_SetEnableWallThrough(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_SetEnableWallThrough");

	Params::CharacterBattle_BP_SetEnableWallThrough Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterBattle.BP_SetJumpPadPower
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Power                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACharacterBattle::BP_SetJumpPadPower(float Power)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_SetJumpPadPower");

	Params::CharacterBattle_BP_SetJumpPadPower Parms{};

	Parms.Power = Power;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterBattle.BP_SetMeshVisiblity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACharacterBattle::BP_SetMeshVisiblity(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_SetMeshVisiblity");

	Params::CharacterBattle_BP_SetMeshVisiblity Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterBattle.ClearNegotiateInfo_ToClient
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// uint8                                   MyActionIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACharacterBattle::ClearNegotiateInfo_ToClient(uint8 MyActionIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "ClearNegotiateInfo_ToClient");

	Params::CharacterBattle_ClearNegotiateInfo_ToClient Parms{};

	Parms.MyActionIndex = MyActionIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterBattle.ClearNegotiateInfo_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// uint8                                   MyActionIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACharacterBattle::ClearNegotiateInfo_ToServer(uint8 MyActionIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "ClearNegotiateInfo_ToServer");

	Params::CharacterBattle_ClearNegotiateInfo_ToServer Parms{};

	Parms.MyActionIndex = MyActionIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterBattle.EnableBlendingAimDirAndMoveDir
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACharacterBattle::EnableBlendingAimDirAndMoveDir(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "EnableBlendingAimDirAndMoveDir");

	Params::CharacterBattle_EnableBlendingAimDirAndMoveDir Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterBattle.EndWireFramePostProcess
// (Final, Native, Public, BlueprintCallable)

void ACharacterBattle::EndWireFramePostProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "EndWireFramePostProcess");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterBattle.NegotiateAndWaitActionTarget_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// class ACharacterBattle*                 NegotiationTargetCharacter                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   MyActionIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACharacterBattle::NegotiateAndWaitActionTarget_ToServer(class ACharacterBattle* NegotiationTargetCharacter, uint8 MyActionIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "NegotiateAndWaitActionTarget_ToServer");

	Params::CharacterBattle_NegotiateAndWaitActionTarget_ToServer Parms{};

	Parms.NegotiationTargetCharacter = NegotiationTargetCharacter;
	Parms.MyActionIndex = MyActionIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterBattle.NegotiateTarget_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// class AActor*                           NegotiationTarget                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   MyActionIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACharacterBattle::NegotiateTarget_ToServer(class AActor* NegotiationTarget, uint8 MyActionIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "NegotiateTarget_ToServer");

	Params::CharacterBattle_NegotiateTarget_ToServer Parms{};

	Parms.NegotiationTarget = NegotiationTarget;
	Parms.MyActionIndex = MyActionIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterBattle.NegotiateTargetResult_ToClient
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class AActor*                           NegotiationTarget                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   MyActionIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACharacterBattle::NegotiateTargetResult_ToClient(class AActor* NegotiationTarget, uint8 MyActionIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "NegotiateTargetResult_ToClient");

	Params::CharacterBattle_NegotiateTargetResult_ToClient Parms{};

	Parms.NegotiationTarget = NegotiationTarget;
	Parms.MyActionIndex = MyActionIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterBattle.OnBeginOverlapComponent
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ACharacterBattle::OnBeginOverlapComponent(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "OnBeginOverlapComponent");

	Params::CharacterBattle_OnBeginOverlapComponent Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterBattle.OnEndOverlapComponent
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACharacterBattle::OnEndOverlapComponent(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "OnEndOverlapComponent");

	Params::CharacterBattle_OnEndOverlapComponent Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterBattle.RecoverDyingAlly_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class ACharacterBattle*                 Ally                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSpecialAction                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACharacterBattle::RecoverDyingAlly_ToServer(class ACharacterBattle* Ally, bool bSpecialAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "RecoverDyingAlly_ToServer");

	Params::CharacterBattle_RecoverDyingAlly_ToServer Parms{};

	Parms.Ally = Ally;
	Parms.bSpecialAction = bSpecialAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterBattle.ReleaseNegotiateTarget_NetMulticast
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class AActor*                           NegotiationTarget                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACharacterBattle::ReleaseNegotiateTarget_NetMulticast(class AActor* NegotiationTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "ReleaseNegotiateTarget_NetMulticast");

	Params::CharacterBattle_ReleaseNegotiateTarget_NetMulticast Parms{};

	Parms.NegotiationTarget = NegotiationTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterBattle.ReleaseNegotiateTarget_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// class AActor*                           NegotiationTarget                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACharacterBattle::ReleaseNegotiateTarget_ToServer(class AActor* NegotiationTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "ReleaseNegotiateTarget_ToServer");

	Params::CharacterBattle_ReleaseNegotiateTarget_ToServer Parms{};

	Parms.NegotiationTarget = NegotiationTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterBattle.SetWaitActionAfterNegotiation_ToClient
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// uint32                                  ServerPriorityActionSerialNo                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACharacterBattle::SetWaitActionAfterNegotiation_ToClient(uint32 ServerPriorityActionSerialNo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "SetWaitActionAfterNegotiation_ToClient");

	Params::CharacterBattle_SetWaitActionAfterNegotiation_ToClient Parms{};

	Parms.ServerPriorityActionSerialNo = ServerPriorityActionSerialNo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterBattle.BP_GetAddPartsComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCharacterAddPartsComponent*      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCharacterAddPartsComponent* ACharacterBattle::BP_GetAddPartsComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_GetAddPartsComponent");

	Params::CharacterBattle_BP_GetAddPartsComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterBattle.BP_GetAttackComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCharacterAttackComponent*        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCharacterAttackComponent* ACharacterBattle::BP_GetAttackComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_GetAttackComponent");

	Params::CharacterBattle_BP_GetAttackComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterBattle.BP_GetBattleVoiceComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCharacterBattleVoiceComponent*   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCharacterBattleVoiceComponent* ACharacterBattle::BP_GetBattleVoiceComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_GetBattleVoiceComponent");

	Params::CharacterBattle_BP_GetBattleVoiceComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterBattle.BP_GetCameraDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ACharacterBattle::BP_GetCameraDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_GetCameraDirection");

	Params::CharacterBattle_BP_GetCameraDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterBattle.BP_GetCharacterAssign
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ECharacterAssign                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECharacterAssign ACharacterBattle::BP_GetCharacterAssign() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_GetCharacterAssign");

	Params::CharacterBattle_BP_GetCharacterAssign Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterBattle.BP_GetCharacterBodySize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ECharacterBodySize                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECharacterBodySize ACharacterBattle::BP_GetCharacterBodySize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_GetCharacterBodySize");

	Params::CharacterBattle_BP_GetCharacterBodySize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterBattle.BP_GetCharacterMaterialControl
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCharacterMaterialControlComponent*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCharacterMaterialControlComponent* ACharacterBattle::BP_GetCharacterMaterialControl() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_GetCharacterMaterialControl");

	Params::CharacterBattle_BP_GetCharacterMaterialControl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterBattle.BP_GetCommandComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCharacterCommandComponent*       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCharacterCommandComponent* ACharacterBattle::BP_GetCommandComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_GetCommandComponent");

	Params::CharacterBattle_BP_GetCommandComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterBattle.BP_GetConditionControlComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCharacterConditionControlComponent*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCharacterConditionControlComponent* ACharacterBattle::BP_GetConditionControlComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_GetConditionControlComponent");

	Params::CharacterBattle_BP_GetConditionControlComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterBattle.BP_GetDamageComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCharacterDamageComponent*        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCharacterDamageComponent* ACharacterBattle::BP_GetDamageComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_GetDamageComponent");

	Params::CharacterBattle_BP_GetDamageComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterBattle.BP_GetGiantControlComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCharacterGiantControlComponent*  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCharacterGiantControlComponent* ACharacterBattle::BP_GetGiantControlComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_GetGiantControlComponent");

	Params::CharacterBattle_BP_GetGiantControlComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterBattle.BP_GetIsEnableAttackDuringDash
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ACharacterBattle::BP_GetIsEnableAttackDuringDash() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_GetIsEnableAttackDuringDash");

	Params::CharacterBattle_BP_GetIsEnableAttackDuringDash Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterBattle.BP_GetJumpPadDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ACharacterBattle::BP_GetJumpPadDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_GetJumpPadDirection");

	Params::CharacterBattle_BP_GetJumpPadDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterBattle.BP_GetJumpPadPower
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ACharacterBattle::BP_GetJumpPadPower() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_GetJumpPadPower");

	Params::CharacterBattle_BP_GetJumpPadPower Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterBattle.BP_GetLinkAnimContorol
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCharacterLinkedAnimationControlComponent*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCharacterLinkedAnimationControlComponent* ACharacterBattle::BP_GetLinkAnimContorol() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_GetLinkAnimContorol");

	Params::CharacterBattle_BP_GetLinkAnimContorol Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterBattle.BP_GetMagazineManagementComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMagazineManagementComponent*     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMagazineManagementComponent* ACharacterBattle::BP_GetMagazineManagementComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_GetMagazineManagementComponent");

	Params::CharacterBattle_BP_GetMagazineManagementComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterBattle.BP_GetMovementBattle
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMovementComponentBattle*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMovementComponentBattle* ACharacterBattle::BP_GetMovementBattle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_GetMovementBattle");

	Params::CharacterBattle_BP_GetMovementBattle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterBattle.BP_GetRespawnControlComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCharacterRespawnControlCompnent* ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCharacterRespawnControlCompnent* ACharacterBattle::BP_GetRespawnControlComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_GetRespawnControlComponent");

	Params::CharacterBattle_BP_GetRespawnControlComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterBattle.BP_GetRestraintEffectComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class URestraintEffectComponent*        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URestraintEffectComponent* ACharacterBattle::BP_GetRestraintEffectComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_GetRestraintEffectComponent");

	Params::CharacterBattle_BP_GetRestraintEffectComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterBattle.BP_GetSkillManagementCompnent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkillManagementComponent*        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkillManagementComponent* ACharacterBattle::BP_GetSkillManagementCompnent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_GetSkillManagementCompnent");

	Params::CharacterBattle_BP_GetSkillManagementCompnent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterBattle.BP_GetState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCharacterState*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCharacterState* ACharacterBattle::BP_GetState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_GetState");

	Params::CharacterBattle_BP_GetState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterBattle.BP_GetUBPInGameActorUtilityComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBPInGameActorUtilityComponent*   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBPInGameActorUtilityComponent* ACharacterBattle::BP_GetUBPInGameActorUtilityComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "BP_GetUBPInGameActorUtilityComponent");

	Params::CharacterBattle_BP_GetUBPInGameActorUtilityComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterBattle.GetLeftFootIKOffset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ACharacterBattle::GetLeftFootIKOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "GetLeftFootIKOffset");

	Params::CharacterBattle_GetLeftFootIKOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterBattle.GetProjectileReplicator
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UProjectileReplicateBattleComponent*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UProjectileReplicateBattleComponent* ACharacterBattle::GetProjectileReplicator() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "GetProjectileReplicator");

	Params::CharacterBattle_GetProjectileReplicator Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterBattle.GetRightFootIKOffset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ACharacterBattle::GetRightFootIKOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBattle", "GetRightFootIKOffset");

	Params::CharacterBattle_GetRightFootIKOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Ch100.OnRep_Replicated_bGiant_Simulated
// (Final, Native, Private)

void ACh100::OnRep_Replicated_bGiant_Simulated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch100", "OnRep_Replicated_bGiant_Simulated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch100.SetGiantSimulated_ToSever
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// bool                                    bGiant                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACh100::SetGiantSimulated_ToSever(bool bGiant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch100", "SetGiantSimulated_ToSever");

	Params::Ch100_SetGiantSimulated_ToSever Parms{};

	Parms.bGiant = bGiant;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction InGameModule.CustomBulletPhysicsLikeComponent.CustomBulletPhysicsLikeEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UCustomBulletPhysicsLikeComponent::CustomBulletPhysicsLikeEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomBulletPhysicsLikeComponent", "CustomBulletPhysicsLikeEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.CustomBulletPhysicsLikeComponent.OnHitBackground
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FHitResult                       HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UCustomBulletPhysicsLikeComponent::OnHitBackground(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomBulletPhysicsLikeComponent", "OnHitBackground");

	Params::CustomBulletPhysicsLikeComponent_OnHitBackground Parms{};

	Parms.HitResult = std::move(HitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CustomBulletPhysicsLikeComponent.OnHitCharacter
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FHitResult                       HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UCustomBulletPhysicsLikeComponent::OnHitCharacter(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomBulletPhysicsLikeComponent", "OnHitCharacter");

	Params::CustomBulletPhysicsLikeComponent_OnHitCharacter Parms{};

	Parms.HitResult = std::move(HitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction InGameModule.CustomBulletPhysicsLikeComponent.ReflectionCountRunsOutDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UCustomBulletPhysicsLikeComponent::ReflectionCountRunsOutDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomBulletPhysicsLikeComponent", "ReflectionCountRunsOutDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction InGameModule.CustomBulletPhysicsLikeComponent.ReflectionDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasDefaults)
// Parameters:
// struct FVector                          Normal                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomBulletPhysicsLikeComponent::ReflectionDelegate__DelegateSignature(const struct FVector& Normal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomBulletPhysicsLikeComponent", "ReflectionDelegate__DelegateSignature");

	Params::CustomBulletPhysicsLikeComponent_ReflectionDelegate__DelegateSignature Parms{};

	Parms.Normal = std::move(Normal);

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ProjectileGeneratorBattle.BP_DestroyReserved
// (Final, Native, Protected, BlueprintCallable)

void AProjectileGeneratorBattle::BP_DestroyReserved()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectileGeneratorBattle", "BP_DestroyReserved");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ProjectileGeneratorBattle.BP_GetOwnerMovementComponent
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMovementComponentBattle*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMovementComponentBattle* AProjectileGeneratorBattle::BP_GetOwnerMovementComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectileGeneratorBattle", "BP_GetOwnerMovementComponent");

	Params::ProjectileGeneratorBattle_BP_GetOwnerMovementComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ProjectileGeneratorBattle.BP_OnProjectileNotificationEvent
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             EventName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AttackSerial                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AProjectileGeneratorBattle::BP_OnProjectileNotificationEvent(const class FName& EventName, int32 AttackSerial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectileGeneratorBattle", "BP_OnProjectileNotificationEvent");

	Params::ProjectileGeneratorBattle_BP_OnProjectileNotificationEvent Parms{};

	Parms.EventName = EventName;
	Parms.AttackSerial = AttackSerial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.ProjectileGeneratorBattle.DestroyBullet_RPC
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FDestroyBulletGenRep             Rep                                                    (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AProjectileGeneratorBattle::DestroyBullet_RPC(const struct FDestroyBulletGenRep& Rep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectileGeneratorBattle", "DestroyBullet_RPC");

	Params::ProjectileGeneratorBattle_DestroyBullet_RPC Parms{};

	Parms.Rep = std::move(Rep);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ProjectileGeneratorBattle.GetBullets
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class ABullet*>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ABullet*> AProjectileGeneratorBattle::GetBullets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectileGeneratorBattle", "GetBullets");

	Params::ProjectileGeneratorBattle_GetBullets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ProjectileGeneratorBattle.OnRep_DestroyBullet
// (Final, Native, Public)

void AProjectileGeneratorBattle::OnRep_DestroyBullet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectileGeneratorBattle", "OnRep_DestroyBullet");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ProjectileGeneratorBattle.SpawnBullet
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          Dir                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   JsonIDX                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABullet*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABullet* AProjectileGeneratorBattle::SpawnBullet(const struct FTransform& Transform, const struct FVector& Dir, int32 JsonIDX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectileGeneratorBattle", "SpawnBullet");

	Params::ProjectileGeneratorBattle_SpawnBullet Parms{};

	Parms.Transform = std::move(Transform);
	Parms.Dir = std::move(Dir);
	Parms.JsonIDX = JsonIDX;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ProjectileGeneratorBattle.BP_GetOwnerBtl
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ACharacterBattle*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ACharacterBattle* AProjectileGeneratorBattle::BP_GetOwnerBtl() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectileGeneratorBattle", "BP_GetOwnerBtl");

	Params::ProjectileGeneratorBattle_BP_GetOwnerBtl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.AN_PlaySound.SetCue
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class USoundAtomCue*                    Cue                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAN_PlaySound::SetCue(class USoundAtomCue* Cue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AN_PlaySound", "SetCue");

	Params::AN_PlaySound_SetCue Parms{};

	Parms.Cue = Cue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterConditionControlComponent.BP_ClearCondition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECharacterConditionId                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterConditionControlComponent::BP_ClearCondition(ECharacterConditionId ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionControlComponent", "BP_ClearCondition");

	Params::CharacterConditionControlComponent_BP_ClearCondition Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterConditionControlComponent.BP_ClearConditionAll_Local
// (Final, Native, Public, BlueprintCallable)

void UCharacterConditionControlComponent::BP_ClearConditionAll_Local()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionControlComponent", "BP_ClearConditionAll_Local");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterConditionControlComponent.BP_SetCondition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECharacterConditionId                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Span                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Interval                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SubLevel                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerStateBattle*               InstigatedPlayer                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterConditionControlComponent::BP_SetCondition(ECharacterConditionId ID, int32 Level, float Span, float Value, float Interval, int32 SubLevel, class APlayerStateBattle* InstigatedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionControlComponent", "BP_SetCondition");

	Params::CharacterConditionControlComponent_BP_SetCondition Parms{};

	Parms.ID = ID;
	Parms.Level = Level;
	Parms.Span = Span;
	Parms.Value = Value;
	Parms.Interval = Interval;
	Parms.SubLevel = SubLevel;
	Parms.InstigatedPlayer = InstigatedPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterConditionControlComponent.BP_SetConditionLocal
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECharacterConditionId                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Span                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Interval                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SubLevel                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerStateBattle*               InstigatedPlayer                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterConditionControlComponent::BP_SetConditionLocal(ECharacterConditionId ID, int32 Level, float Span, float Value, float Interval, int32 SubLevel, class APlayerStateBattle* InstigatedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionControlComponent", "BP_SetConditionLocal");

	Params::CharacterConditionControlComponent_BP_SetConditionLocal Parms{};

	Parms.ID = ID;
	Parms.Level = Level;
	Parms.Span = Span;
	Parms.Value = Value;
	Parms.Interval = Interval;
	Parms.SubLevel = SubLevel;
	Parms.InstigatedPlayer = InstigatedPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterConditionControlComponent.BP_SetInstigatedPlayerInfection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class APlayerStateBattle*               InstigatedPlayer                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterConditionControlComponent::BP_SetInstigatedPlayerInfection(class APlayerStateBattle* InstigatedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionControlComponent", "BP_SetInstigatedPlayerInfection");

	Params::CharacterConditionControlComponent_BP_SetInstigatedPlayerInfection Parms{};

	Parms.InstigatedPlayer = InstigatedPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterConditionControlComponent.ClearCondition_NetMulticast
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private, NetValidate)
// Parameters:
// ECharacterConditionId                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterConditionControlComponent::ClearCondition_NetMulticast(ECharacterConditionId ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionControlComponent", "ClearCondition_NetMulticast");

	Params::CharacterConditionControlComponent_ClearCondition_NetMulticast Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterConditionControlComponent.ClearCondition_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// ECharacterConditionId                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterConditionControlComponent::ClearCondition_ToServer(ECharacterConditionId ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionControlComponent", "ClearCondition_ToServer");

	Params::CharacterConditionControlComponent_ClearCondition_ToServer Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterConditionControlComponent.SetCondition_NetMulticast
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private, NetValidate)
// Parameters:
// ECharacterConditionId                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Span                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Interval                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SubLevel                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bApplyAutonomousProxy                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerStateBattle*               InstigatedPlayer                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterConditionControlComponent::SetCondition_NetMulticast(ECharacterConditionId ID, int32 Level, float Span, float Value, float Interval, int32 SubLevel, bool bApplyAutonomousProxy, class APlayerStateBattle* InstigatedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionControlComponent", "SetCondition_NetMulticast");

	Params::CharacterConditionControlComponent_SetCondition_NetMulticast Parms{};

	Parms.ID = ID;
	Parms.Level = Level;
	Parms.Span = Span;
	Parms.Value = Value;
	Parms.Interval = Interval;
	Parms.SubLevel = SubLevel;
	Parms.bApplyAutonomousProxy = bApplyAutonomousProxy;
	Parms.InstigatedPlayer = InstigatedPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterConditionControlComponent.SetCondition_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// ECharacterConditionId                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Span                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Interval                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SubLevel                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bApplyAutonomousProxy                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerStateBattle*               InstigatedPlayer                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterConditionControlComponent::SetCondition_ToServer(ECharacterConditionId ID, int32 Level, float Span, float Value, float Interval, int32 SubLevel, bool bApplyAutonomousProxy, class APlayerStateBattle* InstigatedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionControlComponent", "SetCondition_ToServer");

	Params::CharacterConditionControlComponent_SetCondition_ToServer Parms{};

	Parms.ID = ID;
	Parms.Level = Level;
	Parms.Span = Span;
	Parms.Value = Value;
	Parms.Interval = Interval;
	Parms.SubLevel = SubLevel;
	Parms.bApplyAutonomousProxy = bApplyAutonomousProxy;
	Parms.InstigatedPlayer = InstigatedPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterConditionControlComponent.BP_IsValidCondition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ECharacterConditionId                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterConditionControlComponent::BP_IsValidCondition(ECharacterConditionId ID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionControlComponent", "BP_IsValidCondition");

	Params::CharacterConditionControlComponent_BP_IsValidCondition Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction InGameModule.DurableBulletComponent.DamageEventWithValue__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DamageAmount                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHitMarkType                            HitMarkType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    IsMeleeAttack                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDurableBulletComponent::DamageEventWithValue__DelegateSignature(class UPrimitiveComponent* HitComponent, float DamageAmount, EHitMarkType HitMarkType, const struct FHitResult& HitResult, bool IsMeleeAttack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DurableBulletComponent", "DamageEventWithValue__DelegateSignature");

	Params::DurableBulletComponent_DamageEventWithValue__DelegateSignature Parms{};

	Parms.HitComponent = HitComponent;
	Parms.DamageAmount = DamageAmount;
	Parms.HitMarkType = HitMarkType;
	Parms.HitResult = std::move(HitResult);
	Parms.IsMeleeAttack = IsMeleeAttack;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.DurableBulletComponent.GetHp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDurableBulletComponent::GetHp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DurableBulletComponent", "GetHp");

	Params::DurableBulletComponent_GetHp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.DurableBulletComponent.ReduceHp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDurableBulletComponent::ReduceHp(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DurableBulletComponent", "ReduceHp");

	Params::DurableBulletComponent_ReduceHp Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GimmickSpawnPoint.BP_SetGimmickCode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGimmickCode                            Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGimmickSpawnPoint::BP_SetGimmickCode(EGimmickCode Code)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GimmickSpawnPoint", "BP_SetGimmickCode");

	Params::GimmickSpawnPoint_BP_SetGimmickCode Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GimmickSpawnPoint.BP_GetAlwaysSpawnFlag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGimmickSpawnPoint::BP_GetAlwaysSpawnFlag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GimmickSpawnPoint", "BP_GetAlwaysSpawnFlag");

	Params::GimmickSpawnPoint_BP_GetAlwaysSpawnFlag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GimmickSpawnPoint.BP_GetGimmickCode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGimmickCode                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGimmickCode AGimmickSpawnPoint::BP_GetGimmickCode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GimmickSpawnPoint", "BP_GetGimmickCode");

	Params::GimmickSpawnPoint_BP_GetGimmickCode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameRuleWidget.PlayInAnime
// (Final, Native, Public)

void UGameRuleWidget::PlayInAnime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameRuleWidget", "PlayInAnime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameRuleWidget.PlayOutAnime
// (Final, Native, Public)

void UGameRuleWidget::PlayOutAnime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameRuleWidget", "PlayOutAnime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.AnnounceWidget.CollapseThis
// (Final, Native, Public)

void UAnnounceWidget::CollapseThis()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnnounceWidget", "CollapseThis");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch017Unique2Child.OnFinishTrap
// (Final, Native, Private)

void ACh017Unique2Child::OnFinishTrap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch017Unique2Child", "OnFinishTrap");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch017Unique2Child.Stop
// (Native, Public)

void ACh017Unique2Child::Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch017Unique2Child", "Stop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch023Unique2Child.BP_OnBeginEnd
// (Event, Public, BlueprintEvent)

void ACh023Unique2Child::BP_OnBeginEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch023Unique2Child", "BP_OnBeginEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.Ch023Unique2Child.SetMID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceDynamic*         Mid                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* ACh023Unique2Child::SetMID(class UMaterialInstanceDynamic* Mid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch023Unique2Child", "SetMID");

	Params::Ch023Unique2Child_SetMID Parms{};

	Parms.Mid = Mid;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameModeTraining.SpawnAllTypeSupply
// (Final, Native, Private)

void AGameModeTraining::SpawnAllTypeSupply()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameModeTraining", "SpawnAllTypeSupply");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BattleBriefingAlertWidget.ProgressAlertDirection
// (Final, Native, Protected, BlueprintCallable)

void UBattleBriefingAlertWidget::ProgressAlertDirection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleBriefingAlertWidget", "ProgressAlertDirection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterTutorial.BP_PlayAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAnimationId                            AnimationId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACharacterTutorial::BP_PlayAnimation(EAnimationId AnimationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterTutorial", "BP_PlayAnimation");

	Params::CharacterTutorial_BP_PlayAnimation Parms{};

	Parms.AnimationId = AnimationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BattleBriefingSequenceWidget.TickClose
// (Final, Native, Protected)
// Parameters:
// float                                   DeltaSeconds                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattleBriefingSequenceWidget::TickClose(const float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleBriefingSequenceWidget", "TickClose");

	Params::BattleBriefingSequenceWidget_TickClose Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BattleBriefingSequenceWidget.TickOpen
// (Final, Native, Protected)
// Parameters:
// float                                   DeltaSeconds                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattleBriefingSequenceWidget::TickOpen(const float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleBriefingSequenceWidget", "TickOpen");

	Params::BattleBriefingSequenceWidget_TickOpen Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction InGameModule.BattleBriefingSequenceWidget.UpdateEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// float                                   DeltaSeconds                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattleBriefingSequenceWidget::UpdateEvent__DelegateSignature(const float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleBriefingSequenceWidget", "UpdateEvent__DelegateSignature");

	Params::BattleBriefingSequenceWidget_UpdateEvent__DelegateSignature Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.SupplyDataAsset.GetFloatEffectValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USupplyDataAsset::GetFloatEffectValue(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyDataAsset", "GetFloatEffectValue");

	Params::SupplyDataAsset_GetFloatEffectValue Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.BattleBriefingSliderWidget.OnPressMinusButton
// (Final, Native, Protected)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattleBriefingSliderWidget::OnPressMinusButton(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleBriefingSliderWidget", "OnPressMinusButton");

	Params::BattleBriefingSliderWidget_OnPressMinusButton Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BattleBriefingSliderWidget.OnPressPlusButton
// (Final, Native, Protected)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattleBriefingSliderWidget::OnPressPlusButton(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleBriefingSliderWidget", "OnPressPlusButton");

	Params::BattleBriefingSliderWidget_OnPressPlusButton Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.WarpCopyComponent.Init
// (Native, Public, BlueprintCallable)
// Parameters:
// class UMultiTraceComponent*             Src                                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWarpCopyType                           CopyType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWarpCopyComponent::Init(class UMultiTraceComponent* Src, EWarpCopyType CopyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WarpCopyComponent", "Init");

	Params::WarpCopyComponent_Init Parms{};

	Parms.Src = Src;
	Parms.CopyType = CopyType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.WarpCopyComponent.OnPortalBeginOverlap
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class APortal*                          Portal                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWarpCopyComponent::OnPortalBeginOverlap(class APortal* Portal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WarpCopyComponent", "OnPortalBeginOverlap");

	Params::WarpCopyComponent_OnPortalBeginOverlap Parms{};

	Parms.Portal = Portal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.WarpCopyComponent.OnPortalEndOverlap
// (Final, Native, Public, BlueprintCallable)

void UWarpCopyComponent::OnPortalEndOverlap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WarpCopyComponent", "OnPortalEndOverlap");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.WarpCopyComponent.Teleportation
// (Final, Native, Public, BlueprintCallable)

void UWarpCopyComponent::Teleportation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WarpCopyComponent", "Teleportation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.WarpCopyComponent.TeleportVisualize
// (Final, Native, Public, BlueprintCallable)

void UWarpCopyComponent::TeleportVisualize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WarpCopyComponent", "TeleportVisualize");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.WarpCopyComponent.TogglePrimitiveComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    On                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWarpCopyComponent::TogglePrimitiveComponent(class UPrimitiveComponent* Component, bool On)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WarpCopyComponent", "TogglePrimitiveComponent");

	Params::WarpCopyComponent_TogglePrimitiveComponent Parms{};

	Parms.Component = Component;
	Parms.On = On;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.WarpCopyComponent.UpdateComponent
// (Final, Native, Public, BlueprintCallable)

void UWarpCopyComponent::UpdateComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WarpCopyComponent", "UpdateComponent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CommentaryVoiceComponent.PlayCountDown
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCommentaryVoiceComponent::PlayCountDown(int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommentaryVoiceComponent", "PlayCountDown");

	Params::CommentaryVoiceComponent_PlayCountDown Parms{};

	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CommentaryVoiceComponent.PlayVoice
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// ECommentaryVoiceType                    Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CueIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCommentaryVoiceComponent::PlayVoice(ECommentaryVoiceType Type, int32 CueIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommentaryVoiceComponent", "PlayVoice");

	Params::CommentaryVoiceComponent_PlayVoice Parms{};

	Parms.Type = Type;
	Parms.CueIndex = CueIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CommentaryVoiceComponent.PlayVoiceList
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// TArray<struct FCommentaryVoicePlayListInfo>PlayListInfo                                           (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCommentaryVoiceComponent::PlayVoiceList(const TArray<struct FCommentaryVoicePlayListInfo>& PlayListInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommentaryVoiceComponent", "PlayVoiceList");

	Params::CommentaryVoiceComponent_PlayVoiceList Parms{};

	Parms.PlayListInfo = std::move(PlayListInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameTeamInfoComponent.GetAlivePlayerNum
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGameTeamInfoComponent::GetAlivePlayerNum() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameTeamInfoComponent", "GetAlivePlayerNum");

	Params::GameTeamInfoComponent_GetAlivePlayerNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameTeamInfoComponent.GetAliveTeamNum
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGameTeamInfoComponent::GetAliveTeamNum() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameTeamInfoComponent", "GetAliveTeamNum");

	Params::GameTeamInfoComponent_GetAliveTeamNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.BattleBriefingWidget.CreateOtherPins
// (Final, Native, Protected)
// Parameters:
// float                                   DeltaSeconds                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattleBriefingWidget::CreateOtherPins(const float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleBriefingWidget", "CreateOtherPins");

	Params::BattleBriefingWidget_CreateOtherPins Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BattleBriefingWidget.Delay
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   Delay_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattleBriefingWidget::Delay(const float Delay_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleBriefingWidget", "Delay");

	Params::BattleBriefingWidget_Delay Parms{};

	Parms.Delay_0 = Delay_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.BattleBriefingWidget.DispAllPins
// (Native, Protected)
// Parameters:
// float                                   DeltaSeconds                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattleBriefingWidget::DispAllPins(const float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleBriefingWidget", "DispAllPins");

	Params::BattleBriefingWidget_DispAllPins Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BattleBriefingWidget.Init
// (Final, Native, Protected)
// Parameters:
// float                                   DeltaSeconds                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattleBriefingWidget::Init(const float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleBriefingWidget", "Init");

	Params::BattleBriefingWidget_Init Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BattleBriefingWidget.OpenSequenceBriefingDispTimer
// (Native, Protected)

void UBattleBriefingWidget::OpenSequenceBriefingDispTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleBriefingWidget", "OpenSequenceBriefingDispTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BattleBriefingWidget.OpenSequenceBriefingStartProductionTimer
// (Native, Protected)

void UBattleBriefingWidget::OpenSequenceBriefingStartProductionTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleBriefingWidget", "OpenSequenceBriefingStartProductionTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BattleBriefingWidget.PressPinUpKey
// (Final, Native, Protected)
// Parameters:
// class FName                             CustomName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTrg                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRapidFire                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattleBriefingWidget::PressPinUpKey(const class FName CustomName, const bool bTrg, const bool bRapidFire)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleBriefingWidget", "PressPinUpKey");

	Params::BattleBriefingWidget_PressPinUpKey Parms{};

	Parms.CustomName = CustomName;
	Parms.bTrg = bTrg;
	Parms.bRapidFire = bRapidFire;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BattleBriefingWidget.ReleasePinUpKey
// (Final, Native, Protected)
// Parameters:
// class FName                             CustomName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattleBriefingWidget::ReleasePinUpKey(const class FName CustomName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleBriefingWidget", "ReleasePinUpKey");

	Params::BattleBriefingWidget_ReleasePinUpKey Parms{};

	Parms.CustomName = CustomName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BattleBriefingWidget.SendBriefingInitInfo
// (Final, Native, Protected)

void UBattleBriefingWidget::SendBriefingInitInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleBriefingWidget", "SendBriefingInitInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BattleBriefingWidget.Start
// (Final, Native, Protected, BlueprintCallable)

void UBattleBriefingWidget::Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleBriefingWidget", "Start");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BattleBriefingWidget.StartProduction
// (Native, Protected)
// Parameters:
// float                                   DeltaSeconds                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattleBriefingWidget::StartProduction(const float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleBriefingWidget", "StartProduction");

	Params::BattleBriefingWidget_StartProduction Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BattleBriefingWidget.Update
// (Final, Native, Protected)
// Parameters:
// float                                   DeltaSeconds                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattleBriefingWidget::Update(const float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleBriefingWidget", "Update");

	Params::BattleBriefingWidget_Update Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction InGameModule.BattleBriefingWidget.UpdateEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// float                                   DeltaSeconds                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattleBriefingWidget::UpdateEvent__DelegateSignature(const float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleBriefingWidget", "UpdateEvent__DelegateSignature");

	Params::BattleBriefingWidget_UpdateEvent__DelegateSignature Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.BattleBriefingWidget.WaitPlayerState
// (Final, Native, Protected)
// Parameters:
// float                                   DeltaSeconds                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattleBriefingWidget::WaitPlayerState(const float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleBriefingWidget", "WaitPlayerState");

	Params::BattleBriefingWidget_WaitPlayerState Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BattleBriefingWidget.WaitProduction
// (Native, Protected)
// Parameters:
// float                                   DeltaSeconds                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattleBriefingWidget::WaitProduction(const float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleBriefingWidget", "WaitProduction");

	Params::BattleBriefingWidget_WaitProduction Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BattleCustomParticleSystemComponent.OnChangeCharacterAction
// (Final, Native, Public)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInterrupted                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattleCustomParticleSystemComponent::OnChangeCharacterAction(class UAnimMontage* Montage, bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattleCustomParticleSystemComponent", "OnChangeCharacterAction");

	Params::BattleCustomParticleSystemComponent_OnChangeCharacterAction Parms{};

	Parms.Montage = Montage;
	Parms.bInterrupted = bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateLeadersBattle.DecideLeaders_RPC
// (Net, NetReliable, Native, Event, NetMulticast, Protected)

void AGameStateLeadersBattle::DecideLeaders_RPC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateLeadersBattle", "DecideLeaders_RPC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BeamParticleSystemComponent.BP_AttachTargetMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBeamParticleSystemComponent::BP_AttachTargetMesh(class USceneComponent* Target, const class FName SocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BeamParticleSystemComponent", "BP_AttachTargetMesh");

	Params::BeamParticleSystemComponent_BP_AttachTargetMesh Parms{};

	Parms.Target = Target;
	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BeamParticleSystemComponent.BP_ClearAllSimpleKey
// (Final, Native, Public, BlueprintCallable)

void UBeamParticleSystemComponent::BP_ClearAllSimpleKey()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BeamParticleSystemComponent", "BP_ClearAllSimpleKey");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BeamParticleSystemComponent.BP_DetachTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Release                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBeamParticleSystemComponent::BP_DetachTarget(bool Release)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BeamParticleSystemComponent", "BP_DetachTarget");

	Params::BeamParticleSystemComponent_BP_DetachTarget Parms{};

	Parms.Release = Release;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BeamParticleSystemComponent.BP_Release
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Span                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEasingFunc                             Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBeamParticleSystemComponent::BP_Release(float Span, EEasingFunc Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BeamParticleSystemComponent", "BP_Release");

	Params::BeamParticleSystemComponent_BP_Release Parms{};

	Parms.Span = Span;
	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BeamParticleSystemComponent.BP_SetSourceLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBeamParticleSystemComponent::BP_SetSourceLocation(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BeamParticleSystemComponent", "BP_SetSourceLocation");

	Params::BeamParticleSystemComponent_BP_SetSourceLocation Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BeamParticleSystemComponent.BP_SetSourceStrength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Strength                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBeamParticleSystemComponent::BP_SetSourceStrength(float Strength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BeamParticleSystemComponent", "BP_SetSourceStrength");

	Params::BeamParticleSystemComponent_BP_SetSourceStrength Parms{};

	Parms.Strength = Strength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BeamParticleSystemComponent.BP_SetSourceTangent
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Tangent                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBeamParticleSystemComponent::BP_SetSourceTangent(const struct FVector& Tangent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BeamParticleSystemComponent", "BP_SetSourceTangent");

	Params::BeamParticleSystemComponent_BP_SetSourceTangent Parms{};

	Parms.Tangent = std::move(Tangent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BeamParticleSystemComponent.BP_SetTargetLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBeamParticleSystemComponent::BP_SetTargetLocation(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BeamParticleSystemComponent", "BP_SetTargetLocation");

	Params::BeamParticleSystemComponent_BP_SetTargetLocation Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BeamParticleSystemComponent.BP_SetTargetStrength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Strength                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBeamParticleSystemComponent::BP_SetTargetStrength(float Strength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BeamParticleSystemComponent", "BP_SetTargetStrength");

	Params::BeamParticleSystemComponent_BP_SetTargetStrength Parms{};

	Parms.Strength = Strength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BeamParticleSystemComponent.BP_SetTargetTangent
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Tangent                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBeamParticleSystemComponent::BP_SetTargetTangent(const struct FVector& Tangent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BeamParticleSystemComponent", "BP_SetTargetTangent");

	Params::BeamParticleSystemComponent_BP_SetTargetTangent Parms{};

	Parms.Tangent = std::move(Tangent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BeamParticleSystemComponent.BP_SetUpSourceStrangthKeyData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FSimpleKeyScalarData>     Data                                                   (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBeamParticleSystemComponent::BP_SetUpSourceStrangthKeyData(const TArray<struct FSimpleKeyScalarData>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BeamParticleSystemComponent", "BP_SetUpSourceStrangthKeyData");

	Params::BeamParticleSystemComponent_BP_SetUpSourceStrangthKeyData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BeamParticleSystemComponent.BP_SetUpSourceTangentKeyData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FSimpleKeyVectorData>     Data                                                   (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBeamParticleSystemComponent::BP_SetUpSourceTangentKeyData(const TArray<struct FSimpleKeyVectorData>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BeamParticleSystemComponent", "BP_SetUpSourceTangentKeyData");

	Params::BeamParticleSystemComponent_BP_SetUpSourceTangentKeyData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BeamParticleSystemComponent.BP_SetUpTargetStrangthKeyData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FSimpleKeyScalarData>     Data                                                   (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBeamParticleSystemComponent::BP_SetUpTargetStrangthKeyData(const TArray<struct FSimpleKeyScalarData>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BeamParticleSystemComponent", "BP_SetUpTargetStrangthKeyData");

	Params::BeamParticleSystemComponent_BP_SetUpTargetStrangthKeyData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BeamParticleSystemComponent.BP_SetUpTargetTangentKeyData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FSimpleKeyVectorData>     Data                                                   (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBeamParticleSystemComponent::BP_SetUpTargetTangentKeyData(const TArray<struct FSimpleKeyVectorData>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BeamParticleSystemComponent", "BP_SetUpTargetTangentKeyData");

	Params::BeamParticleSystemComponent_BP_SetUpTargetTangentKeyData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateTraining.ChangeTrainingSetting_NetMulticast
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void AGameStateTraining::ChangeTrainingSetting_NetMulticast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateTraining", "ChangeTrainingSetting_NetMulticast");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateTraining.OnViewTargetChanged_NetMulti
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void AGameStateTraining::OnViewTargetChanged_NetMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateTraining", "OnViewTargetChanged_NetMulti");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateTraining.SetActiveFriendlyFire_NetMulticast
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// bool                                    IsActive                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStateTraining::SetActiveFriendlyFire_NetMulticast(bool IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateTraining", "SetActiveFriendlyFire_NetMulticast");

	Params::GameStateTraining_SetActiveFriendlyFire_NetMulticast Parms{};

	Parms.IsActive = IsActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateTraining.SetCharacterId_NetMulti
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class APlayerStateBattle*               PlayerStateBattle                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECharacterId                            CharaID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   VariationNo                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStateTraining::SetCharacterId_NetMulti(class APlayerStateBattle* PlayerStateBattle, ECharacterId CharaID, int32 VariationNo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateTraining", "SetCharacterId_NetMulti");

	Params::GameStateTraining_SetCharacterId_NetMulti Parms{};

	Parms.PlayerStateBattle = PlayerStateBattle;
	Parms.CharaID = CharaID;
	Parms.VariationNo = VariationNo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateTraining.StoreAITrainingType_NetMulti
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class APlayerStateBattle*               PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAITrainingType                         Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStateTraining::StoreAITrainingType_NetMulti(class APlayerStateBattle* PlayerState, EAITrainingType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateTraining", "StoreAITrainingType_NetMulti");

	Params::GameStateTraining_StoreAITrainingType_NetMulti Parms{};

	Parms.PlayerState = PlayerState;
	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BgPostProcessVolume.OnBeginOverlap
// (Final, Native, Private)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABgPostProcessVolume::OnBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BgPostProcessVolume", "OnBeginOverlap");

	Params::BgPostProcessVolume_OnBeginOverlap Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BgProp.BgDestruct
// (Final, Native, Private)

void ABgProp::BgDestruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BgProp", "BgDestruct");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BgProp.OnDependDestroyed
// (Final, Native, Private)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABgProp::OnDependDestroyed(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BgProp", "OnDependDestroyed");

	Params::BgProp_OnDependDestroyed Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BgProp.OnRep_AlreadyDamaged
// (Final, Native, Private)

void ABgProp::OnRep_AlreadyDamaged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BgProp", "OnRep_AlreadyDamaged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BgProp.OnRep_Broken
// (Final, Native, Private)

void ABgProp::OnRep_Broken()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BgProp", "OnRep_Broken");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BgProp.OnThawedEvent
// (Final, Native, Protected, BlueprintCallable)

void ABgProp::OnThawedEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BgProp", "OnThawedEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BgProp.PlayBrokenSound
// (Final, Net, Native, Event, NetMulticast, Private)

void ABgProp::PlayBrokenSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BgProp", "PlayBrokenSound");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BgVfxComponent.ApplyEffects
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FPropDamageParam                 DamageParamProp                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UBgVfxComponent::ApplyEffects(const struct FPropDamageParam& DamageParamProp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BgVfxComponent", "ApplyEffects");

	Params::BgVfxComponent_ApplyEffects Parms{};

	Parms.DamageParamProp = std::move(DamageParamProp);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction InGameModule.BgVfxComponent.BgVfxEventNoParam__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UBgVfxComponent::BgVfxEventNoParam__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BgVfxComponent", "BgVfxEventNoParam__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction InGameModule.BgVfxComponent.BgVfxEventOneParam__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBgVfxComponent::BgVfxEventOneParam__DelegateSignature(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BgVfxComponent", "BgVfxEventOneParam__DelegateSignature");

	Params::BgVfxComponent_BgVfxEventOneParam__DelegateSignature Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.BgVfxComponent.DEBUG_SetVFXStateBoolTrue_OnServer
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// EDamageAttribute                        Element                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBgVfxComponent::DEBUG_SetVFXStateBoolTrue_OnServer(const EDamageAttribute Element)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BgVfxComponent", "DEBUG_SetVFXStateBoolTrue_OnServer");

	Params::BgVfxComponent_DEBUG_SetVFXStateBoolTrue_OnServer Parms{};

	Parms.Element = Element;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BgVfxComponent.FinishBurning
// (Final, Native, Private)

void UBgVfxComponent::FinishBurning()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BgVfxComponent", "FinishBurning");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BgVfxComponent.FinishFreezing
// (Final, Native, Private)

void UBgVfxComponent::FinishFreezing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BgVfxComponent", "FinishFreezing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BgVfxComponent.FireTimelineFloatReturn
// (Final, Native, Public)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBgVfxComponent::FireTimelineFloatReturn(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BgVfxComponent", "FireTimelineFloatReturn");

	Params::BgVfxComponent_FireTimelineFloatReturn Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BgVfxComponent.FreezeTimelineFloatReturn
// (Final, Native, Public)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBgVfxComponent::FreezeTimelineFloatReturn(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BgVfxComponent", "FreezeTimelineFloatReturn");

	Params::BgVfxComponent_FreezeTimelineFloatReturn Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BgVfxComponent.OnBeginExtinguish
// (Final, Native, Private)

void UBgVfxComponent::OnBeginExtinguish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BgVfxComponent", "OnBeginExtinguish");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BgVfxComponent.OnBeginMelt
// (Final, Native, Public)

void UBgVfxComponent::OnBeginMelt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BgVfxComponent", "OnBeginMelt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BgVfxComponent.OnLeavesBurnedOut
// (Final, Native, Public)

void UBgVfxComponent::OnLeavesBurnedOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BgVfxComponent", "OnLeavesBurnedOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BgVfxComponent.OnRep_ElementalDamageApplied
// (Final, Native, Public)

void UBgVfxComponent::OnRep_ElementalDamageApplied()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BgVfxComponent", "OnRep_ElementalDamageApplied");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BgVfxComponent.ResetVfxElementFlag
// (Final, Native, Public)

void UBgVfxComponent::ResetVfxElementFlag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BgVfxComponent", "ResetVfxElementFlag");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BgVfxComponent.SpawnIceEffect
// (Final, Native, Public)

void UBgVfxComponent::SpawnIceEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BgVfxComponent", "SpawnIceEffect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BgVfxComponent.StopSpawnFireParticle
// (Final, Native, Private)

void UBgVfxComponent::StopSpawnFireParticle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BgVfxComponent", "StopSpawnFireParticle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BgWater.OnBeginUnderwaterEvent
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ABgWater::OnBeginUnderwaterEvent(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BgWater", "OnBeginUnderwaterEvent");

	Params::BgWater_OnBeginUnderwaterEvent Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BgWater.OnEndUnderwaterEvent
// (Final, Native, Public)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABgWater::OnEndUnderwaterEvent(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BgWater", "OnEndUnderwaterEvent");

	Params::BgWater_OnEndUnderwaterEvent Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch017Unique1.OnFinishExplosionEvent
// (Final, Native, Protected)
// Parameters:
// class UParticleSystemComponent*         Particle                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACh017Unique1::OnFinishExplosionEvent(class UParticleSystemComponent* Particle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch017Unique1", "OnFinishExplosionEvent");

	Params::Ch017Unique1_OnFinishExplosionEvent Parms{};

	Parms.Particle = Particle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BgWaterVolume.OnBeginUnderwaterEvent
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ABgWaterVolume::OnBeginUnderwaterEvent(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BgWaterVolume", "OnBeginUnderwaterEvent");

	Params::BgWaterVolume_OnBeginUnderwaterEvent Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BgWaterVolume.OnEndUnderwaterEvent
// (Final, Native, Public)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABgWaterVolume::OnEndUnderwaterEvent(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BgWaterVolume", "OnEndUnderwaterEvent");

	Params::BgWaterVolume_OnEndUnderwaterEvent Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch025Unique3Gen.OnRep_SpawnBullet
// (Final, Native, Protected)

void ACh025Unique3Gen::OnRep_SpawnBullet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch025Unique3Gen", "OnRep_SpawnBullet");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch025Unique3Gen.SpawnBullet_RPC
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// float                                   SpawnScale                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACh025Unique3Gen::SpawnBullet_RPC(float SpawnScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch025Unique3Gen", "SpawnBullet_RPC");

	Params::Ch025Unique3Gen_SpawnBullet_RPC Parms{};

	Parms.SpawnScale = SpawnScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch025Unique3Gen.SpawnMainBullet
// (Final, Native, Protected)

void ACh025Unique3Gen::SpawnMainBullet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch025Unique3Gen", "SpawnMainBullet");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BPInGameActorUtilityComponent.BP_SpawnBeamEmitterAttached
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UParticleSystem*                  EmitterTemplate                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  AttachToComponent                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AttachPointName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// EAttachLocation                         LocationType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoDestroy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBeamParticleSystemComponent*     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBeamParticleSystemComponent* UBPInGameActorUtilityComponent::BP_SpawnBeamEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, bool bAutoDestroy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPInGameActorUtilityComponent", "BP_SpawnBeamEmitterAttached");

	Params::BPInGameActorUtilityComponent_BP_SpawnBeamEmitterAttached Parms{};

	Parms.EmitterTemplate = EmitterTemplate;
	Parms.AttachToComponent = AttachToComponent;
	Parms.AttachPointName = AttachPointName;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.LocationType = LocationType;
	Parms.bAutoDestroy = bAutoDestroy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.BPInGameActorUtilityComponent.BP_ConverAttackIdToChargeCommand
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EAttackId                               AttackId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECommandId                              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECommandId UBPInGameActorUtilityComponent::BP_ConverAttackIdToChargeCommand(EAttackId AttackId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPInGameActorUtilityComponent", "BP_ConverAttackIdToChargeCommand");

	Params::BPInGameActorUtilityComponent_BP_ConverAttackIdToChargeCommand Parms{};

	Parms.AttackId = AttackId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.BriefingComponent.SendCancel_Server
// (Net, NetReliable, Native, Event, Protected, NetServer)

void UBriefingComponent::SendCancel_Server()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BriefingComponent", "SendCancel_Server");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BriefingComponent.SendDecision_NetMulticast
// (Net, NetReliable, Native, Event, NetMulticast, Protected, HasDefaults)
// Parameters:
// bool                                    bDecision                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        Location                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBriefingComponent::SendDecision_NetMulticast(const bool bDecision, const struct FVector2D& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BriefingComponent", "SendDecision_NetMulticast");

	Params::BriefingComponent_SendDecision_NetMulticast Parms{};

	Parms.bDecision = bDecision;
	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BriefingComponent.SendDecision_Server
// (Net, NetReliable, Native, Event, Protected, NetServer)

void UBriefingComponent::SendDecision_Server()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BriefingComponent", "SendDecision_Server");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BriefingComponent.SendDecisionLocation_Server
// (Net, NetReliable, Native, Event, Protected, NetServer, HasDefaults)
// Parameters:
// struct FVector                          Location                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBriefingComponent::SendDecisionLocation_Server(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BriefingComponent", "SendDecisionLocation_Server");

	Params::BriefingComponent_SendDecisionLocation_Server Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BriefingComponent.SendInitEnd_Server
// (Net, NetReliable, Native, Event, Protected, NetServer, HasDefaults)
// Parameters:
// struct FVector                          Location                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBriefingComponent::SendInitEnd_Server(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BriefingComponent", "SendInitEnd_Server");

	Params::BriefingComponent_SendInitEnd_Server Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BriefingComponent.SendSpawnLocation_Server
// (Net, NetReliable, Native, Event, Protected, NetServer, HasDefaults)
// Parameters:
// struct FVector                          Location                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBriefingComponent::SendSpawnLocation_Server(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BriefingComponent", "SendSpawnLocation_Server");

	Params::BriefingComponent_SendSpawnLocation_Server Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BriefingComponentLeadersBattle.SendChangeLeaderOrder_NetMulticast
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// int8                                    Order                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBriefingComponentLeadersBattle::SendChangeLeaderOrder_NetMulticast(const int8 Order)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BriefingComponentLeadersBattle", "SendChangeLeaderOrder_NetMulticast");

	Params::BriefingComponentLeadersBattle_SendChangeLeaderOrder_NetMulticast Parms{};

	Parms.Order = Order;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BriefingComponentLeadersBattle.SendDecideLeaderOrder_NetMulticast
// (Net, NetReliable, Native, Event, NetMulticast, Protected)

void UBriefingComponentLeadersBattle::SendDecideLeaderOrder_NetMulticast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BriefingComponentLeadersBattle", "SendDecideLeaderOrder_NetMulticast");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BuffParam.BP_SetAttackAdjustRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBuffParam::BP_SetAttackAdjustRate(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_SetAttackAdjustRate");

	Params::BuffParam_BP_SetAttackAdjustRate Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BuffParam.BP_SetAttackAdjustRate_PlusUltra
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBuffParam::BP_SetAttackAdjustRate_PlusUltra(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_SetAttackAdjustRate_PlusUltra");

	Params::BuffParam_BP_SetAttackAdjustRate_PlusUltra Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BuffParam.BP_SetAttackAdjustRate_SpecialRule
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBuffParam::BP_SetAttackAdjustRate_SpecialRule(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_SetAttackAdjustRate_SpecialRule");

	Params::BuffParam_BP_SetAttackAdjustRate_SpecialRule Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BuffParam.BP_SetAttackAdjustRate_WearBlueFlame
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBuffParam::BP_SetAttackAdjustRate_WearBlueFlame(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_SetAttackAdjustRate_WearBlueFlame");

	Params::BuffParam_BP_SetAttackAdjustRate_WearBlueFlame Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BuffParam.BP_SetDurableAdjustRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBuffParam::BP_SetDurableAdjustRate(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_SetDurableAdjustRate");

	Params::BuffParam_BP_SetDurableAdjustRate Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BuffParam.BP_SetDurableAdjustRate_CharacterProperty
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBuffParam::BP_SetDurableAdjustRate_CharacterProperty(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_SetDurableAdjustRate_CharacterProperty");

	Params::BuffParam_BP_SetDurableAdjustRate_CharacterProperty Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BuffParam.BP_SetDurableAdjustRate_Poisonmist
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBuffParam::BP_SetDurableAdjustRate_Poisonmist(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_SetDurableAdjustRate_Poisonmist");

	Params::BuffParam_BP_SetDurableAdjustRate_Poisonmist Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BuffParam.BP_SetDurableAdjustRate_Unbreakable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBuffParam::BP_SetDurableAdjustRate_Unbreakable(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_SetDurableAdjustRate_Unbreakable");

	Params::BuffParam_BP_SetDurableAdjustRate_Unbreakable Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BuffParam.BP_SetGravityAdjustRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBuffParam::BP_SetGravityAdjustRate(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_SetGravityAdjustRate");

	Params::BuffParam_BP_SetGravityAdjustRate Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BuffParam.BP_SetJumpAdjustRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBuffParam::BP_SetJumpAdjustRate(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_SetJumpAdjustRate");

	Params::BuffParam_BP_SetJumpAdjustRate Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BuffParam.BP_SetJumpAdjustRateDivision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBuffParam::BP_SetJumpAdjustRateDivision(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_SetJumpAdjustRateDivision");

	Params::BuffParam_BP_SetJumpAdjustRateDivision Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BuffParam.BP_SetJumpAdjustRateMultiply
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBuffParam::BP_SetJumpAdjustRateMultiply(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_SetJumpAdjustRateMultiply");

	Params::BuffParam_BP_SetJumpAdjustRateMultiply Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BuffParam.BP_SetMoveSpeedAdjustRate_TeamRole
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBuffParam::BP_SetMoveSpeedAdjustRate_TeamRole(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_SetMoveSpeedAdjustRate_TeamRole");

	Params::BuffParam_BP_SetMoveSpeedAdjustRate_TeamRole Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BuffParam.BP_SetReloadAdjustRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBuffParam::BP_SetReloadAdjustRate(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_SetReloadAdjustRate");

	Params::BuffParam_BP_SetReloadAdjustRate Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BuffParam.BP_SetReloadAdjustRate_PlusUltra
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBuffParam::BP_SetReloadAdjustRate_PlusUltra(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_SetReloadAdjustRate_PlusUltra");

	Params::BuffParam_BP_SetReloadAdjustRate_PlusUltra Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BuffParam.BP_SetReloadAdjustRate_SpecialRule
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBuffParam::BP_SetReloadAdjustRate_SpecialRule(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_SetReloadAdjustRate_SpecialRule");

	Params::BuffParam_BP_SetReloadAdjustRate_SpecialRule Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BuffParam.BP_SetReloadAdjustRate_TeamRole
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBuffParam::BP_SetReloadAdjustRate_TeamRole(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_SetReloadAdjustRate_TeamRole");

	Params::BuffParam_BP_SetReloadAdjustRate_TeamRole Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BuffParam.BP_SetReloadAdjustRate_WearBlueFlame
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBuffParam::BP_SetReloadAdjustRate_WearBlueFlame(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_SetReloadAdjustRate_WearBlueFlame");

	Params::BuffParam_BP_SetReloadAdjustRate_WearBlueFlame Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BuffParam.BP_GetAttackAdjustRate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBuffParam::BP_GetAttackAdjustRate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_GetAttackAdjustRate");

	Params::BuffParam_BP_GetAttackAdjustRate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.BuffParam.BP_GetAttackAdjustRate_GuardPoint
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBuffParam::BP_GetAttackAdjustRate_GuardPoint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_GetAttackAdjustRate_GuardPoint");

	Params::BuffParam_BP_GetAttackAdjustRate_GuardPoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.BuffParam.BP_GetAttackAdjustRate_PlusUltra
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBuffParam::BP_GetAttackAdjustRate_PlusUltra() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_GetAttackAdjustRate_PlusUltra");

	Params::BuffParam_BP_GetAttackAdjustRate_PlusUltra Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.BuffParam.BP_GetAttackAdjustRate_SpecialRule
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBuffParam::BP_GetAttackAdjustRate_SpecialRule() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_GetAttackAdjustRate_SpecialRule");

	Params::BuffParam_BP_GetAttackAdjustRate_SpecialRule Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.BuffParam.BP_GetAttackAdjustRate_TeamRole
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBuffParam::BP_GetAttackAdjustRate_TeamRole() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_GetAttackAdjustRate_TeamRole");

	Params::BuffParam_BP_GetAttackAdjustRate_TeamRole Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.BuffParam.BP_GetAttackAdjustRate_WearBlueFlame
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBuffParam::BP_GetAttackAdjustRate_WearBlueFlame() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_GetAttackAdjustRate_WearBlueFlame");

	Params::BuffParam_BP_GetAttackAdjustRate_WearBlueFlame Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.BuffParam.BP_GetDurableAdjustRate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBuffParam::BP_GetDurableAdjustRate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_GetDurableAdjustRate");

	Params::BuffParam_BP_GetDurableAdjustRate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.BuffParam.BP_GetDurableAdjustRate_CharacterProperty
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBuffParam::BP_GetDurableAdjustRate_CharacterProperty() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_GetDurableAdjustRate_CharacterProperty");

	Params::BuffParam_BP_GetDurableAdjustRate_CharacterProperty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.BuffParam.BP_GetDurableAdjustRate_PoisonMist
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBuffParam::BP_GetDurableAdjustRate_PoisonMist() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_GetDurableAdjustRate_PoisonMist");

	Params::BuffParam_BP_GetDurableAdjustRate_PoisonMist Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.BuffParam.BP_GetDurableAdjustRate_TeamRole
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBuffParam::BP_GetDurableAdjustRate_TeamRole() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_GetDurableAdjustRate_TeamRole");

	Params::BuffParam_BP_GetDurableAdjustRate_TeamRole Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.BuffParam.BP_GetDurableAdjustRate_Unbreakable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBuffParam::BP_GetDurableAdjustRate_Unbreakable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_GetDurableAdjustRate_Unbreakable");

	Params::BuffParam_BP_GetDurableAdjustRate_Unbreakable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.BuffParam.BP_GetGravityAdjustRate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBuffParam::BP_GetGravityAdjustRate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_GetGravityAdjustRate");

	Params::BuffParam_BP_GetGravityAdjustRate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.BuffParam.BP_GetJumpAdjustRate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBuffParam::BP_GetJumpAdjustRate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_GetJumpAdjustRate");

	Params::BuffParam_BP_GetJumpAdjustRate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.BuffParam.BP_GetMoveSpeedAdjustRate_TeamRole
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBuffParam::BP_GetMoveSpeedAdjustRate_TeamRole() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_GetMoveSpeedAdjustRate_TeamRole");

	Params::BuffParam_BP_GetMoveSpeedAdjustRate_TeamRole Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.BuffParam.BP_GetRegenerationAdjustRate_TeamRole
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBuffParam::BP_GetRegenerationAdjustRate_TeamRole() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuffParam", "BP_GetRegenerationAdjustRate_TeamRole");

	Params::BuffParam_BP_GetRegenerationAdjustRate_TeamRole Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Ch017Unique2Gen.OnRepCreateBullet
// (Native, Protected)

void ACh017Unique2Gen::OnRepCreateBullet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch017Unique2Gen", "OnRepCreateBullet");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BulletCameraShakeComponent.OnHitBackground
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FHitResult                       HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UBulletCameraShakeComponent::OnHitBackground(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BulletCameraShakeComponent", "OnHitBackground");

	Params::BulletCameraShakeComponent_OnHitBackground Parms{};

	Parms.HitResult = std::move(HitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BulletCameraShakeComponent.OnHitCharacter
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FHitResult                       HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UBulletCameraShakeComponent::OnHitCharacter(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BulletCameraShakeComponent", "OnHitCharacter");

	Params::BulletCameraShakeComponent_OnHitCharacter Parms{};

	Parms.HitResult = std::move(HitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch017Unique1ChargeChild.OnFinishExplosionEffectEvent
// (Final, Native, Public)
// Parameters:
// class UParticleSystemComponent*         Particle                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACh017Unique1ChargeChild::OnFinishExplosionEffectEvent(class UParticleSystemComponent* Particle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch017Unique1ChargeChild", "OnFinishExplosionEffectEvent");

	Params::Ch017Unique1ChargeChild_OnFinishExplosionEffectEvent Parms{};

	Parms.Particle = Particle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.BulletHoming.BP_GetOwnerBtl
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacterBattle*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ACharacterBattle* ABulletHoming::BP_GetOwnerBtl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BulletHoming", "BP_GetOwnerBtl");

	Params::BulletHoming_BP_GetOwnerBtl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.BulletHoming.BP_PostBeginPlay
// (Event, Public, BlueprintEvent)

void ABulletHoming::BP_PostBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BulletHoming", "BP_PostBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.BulletHoming.BP_GetSocketName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName ABulletHoming::BP_GetSocketName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BulletHoming", "BP_GetSocketName");

	Params::BulletHoming_BP_GetSocketName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.PortalGen.OnRep_WarpUsing
// (Final, Native, Public)

void APortalGen::OnRep_WarpUsing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalGen", "OnRep_WarpUsing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PortalGen.WarpUsing_RPC
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FPortalGenRep                    GenPortal                                              (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void APortalGen::WarpUsing_RPC(const struct FPortalGenRep& GenPortal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalGen", "WarpUsing_RPC");

	Params::PortalGen_WarpUsing_RPC Parms{};

	Parms.GenPortal = std::move(GenPortal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch017Unique2Charge.OnFinishTrap
// (Final, Native, Public)

void ACh017Unique2Charge::OnFinishTrap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch017Unique2Charge", "OnFinishTrap");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch017Unique2Charge.StopFire
// (Final, Native, Public)

void ACh017Unique2Charge::StopFire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch017Unique2Charge", "StopFire");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch017Unique2Charge.StopTrap
// (Final, Native, Public)

void ACh017Unique2Charge::StopTrap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch017Unique2Charge", "StopTrap");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CementBase.GetCrackHP
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ACementBase::GetCrackHP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CementBase", "GetCrackHP");

	Params::CementBase_GetCrackHP Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Cement3Gen.GenCement3_RPC
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FCement3GenRep                   Rep                                                    (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ACement3Gen::GenCement3_RPC(const struct FCement3GenRep& Rep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Cement3Gen", "GenCement3_RPC");

	Params::Cement3Gen_GenCement3_RPC Parms{};

	Parms.Rep = std::move(Rep);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Cement3Gen.OnRep_GenCement3
// (Final, Native, Public)

void ACement3Gen::OnRep_GenCement3()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Cement3Gen", "OnRep_GenCement3");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle_FinishBattleScene.DisplayWinLose
// (Final, Native, Private)

void UGameStateBattle_FinishBattleScene::DisplayWinLose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle_FinishBattleScene", "DisplayWinLose");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateBattle_FinishBattleScene.EndDemoSequence
// (Final, Native, Private)

void UGameStateBattle_FinishBattleScene::EndDemoSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle_FinishBattleScene", "EndDemoSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch001Unique3.OnHitItem
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ACh001Unique3::OnHitItem(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch001Unique3", "OnHitItem");

	Params::Ch001Unique3_OnHitItem Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameStateBattle_PrepareCongratulateWinner.WinDemoSetting
// (Final, Native, Private)

void UGameStateBattle_PrepareCongratulateWinner::WinDemoSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateBattle_PrepareCongratulateWinner", "WinDemoSetting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch015Unique2_Var1ChildCrack.BP_OnBeginEnd
// (Event, Protected, BlueprintEvent)

void ACh015Unique2_Var1ChildCrack::BP_OnBeginEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch015Unique2_Var1ChildCrack", "BP_OnBeginEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.Ch015Unique2_Var1ChildCrack.DeActiveAreaEffect
// (Final, Native, Protected)

void ACh015Unique2_Var1ChildCrack::DeActiveAreaEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch015Unique2_Var1ChildCrack", "DeActiveAreaEffect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch015Unique2_Var1ChildCrack.GetMID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* ACh015Unique2_Var1ChildCrack::GetMID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch015Unique2_Var1ChildCrack", "GetMID");

	Params::Ch015Unique2_Var1ChildCrack_GetMID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Ch015Unique2_Var1ChildCrack.GetRandomZRot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ACh015Unique2_Var1ChildCrack::GetRandomZRot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch015Unique2_Var1ChildCrack", "GetRandomZRot");

	Params::Ch015Unique2_Var1ChildCrack_GetRandomZRot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Ch015Unique2_Var1ChildCrack.SetMID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceDynamic*         Mid                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* ACh015Unique2_Var1ChildCrack::SetMID(class UMaterialInstanceDynamic* Mid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch015Unique2_Var1ChildCrack", "SetMID");

	Params::Ch015Unique2_Var1ChildCrack_SetMID Parms{};

	Parms.Mid = Mid;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Ch017Unique2.OnActiveCollisionEvent
// (Final, Native, Protected)

void ACh017Unique2::OnActiveCollisionEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch017Unique2", "OnActiveCollisionEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch003Unique1ChargeGen.OnChangeState_RPC
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// ECh003Unique1ChargeState                State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACh003Unique1ChargeGen::OnChangeState_RPC(ECh003Unique1ChargeState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch003Unique1ChargeGen", "OnChangeState_RPC");

	Params::Ch003Unique1ChargeGen_OnChangeState_RPC Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch003Unique1ChargeGen.OnRep_ChangeState
// (Final, Native, Protected)

void ACh003Unique1ChargeGen::OnRep_ChangeState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch003Unique1ChargeGen", "OnRep_ChangeState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch023Unique3Shot.BP_OnBeginEnd
// (Event, Public, BlueprintEvent)

void ACh023Unique3Shot::BP_OnBeginEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch023Unique3Shot", "BP_OnBeginEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.Ch023Unique3Shot.SetMID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceDynamic*         Mid                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* ACh023Unique3Shot::SetMID(class UMaterialInstanceDynamic* Mid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch023Unique3Shot", "SetMID");

	Params::Ch023Unique3Shot_SetMID Parms{};

	Parms.Mid = Mid;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Ch003Unique2Release.StopShake
// (Final, Native, Private)

void ACh003Unique2Release::StopShake()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch003Unique2Release", "StopShake");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch003Unique2Release.Vanish
// (Final, Native, Private)

void ACh003Unique2Release::Vanish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch003Unique2Release", "Vanish");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch003Unique3Base.OnFinishImpactParticle
// (Final, Native, Protected)
// Parameters:
// class UParticleSystemComponent*         Particle                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACh003Unique3Base::OnFinishImpactParticle(class UParticleSystemComponent* Particle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch003Unique3Base", "OnFinishImpactParticle");

	Params::Ch003Unique3Base_OnFinishImpactParticle Parms{};

	Parms.Particle = Particle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch003Unique3Base.StartFallInternal
// (Native, Protected, HasDefaults)
// Parameters:
// struct FVector                          StartLocation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACh003Unique3Base::StartFallInternal(const struct FVector& StartLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch003Unique3Base", "StartFallInternal");

	Params::Ch003Unique3Base_StartFallInternal Parms{};

	Parms.StartLocation = std::move(StartLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch043Unique1ShotGen.Ch043Unique1ShotGenRep_RPC
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FCh043Unique1ShotGenRep          Rep                                                    (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void ACh043Unique1ShotGen::Ch043Unique1ShotGenRep_RPC(const struct FCh043Unique1ShotGenRep& Rep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch043Unique1ShotGen", "Ch043Unique1ShotGenRep_RPC");

	Params::Ch043Unique1ShotGen_Ch043Unique1ShotGenRep_RPC Parms{};

	Parms.Rep = std::move(Rep);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch043Unique1ShotGen.OnRep_Ch043Unique1ShotGenRep
// (Final, Native, Public)

void ACh043Unique1ShotGen::OnRep_Ch043Unique1ShotGenRep()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch043Unique1ShotGen", "OnRep_Ch043Unique1ShotGenRep");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch003Unique3Gen.OnForciblyFallEvent
// (Final, Native, Private)

void ACh003Unique3Gen::OnForciblyFallEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch003Unique3Gen", "OnForciblyFallEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch003Unique3Gen.StartFall
// (Final, Native, Public)

void ACh003Unique3Gen::StartFall()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch003Unique3Gen", "StartFall");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch003Unique3Gen.GetSpawnDecorationRangeRadius
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ACh003Unique3Gen::GetSpawnDecorationRangeRadius() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch003Unique3Gen", "GetSpawnDecorationRangeRadius");

	Params::Ch003Unique3Gen_GetSpawnDecorationRangeRadius Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Ch043Unique3TrapGen.OnRep_ResponceHit
// (Final, Native, Public)

void ACh043Unique3TrapGen::OnRep_ResponceHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch043Unique3TrapGen", "OnRep_ResponceHit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch043Unique3TrapGen.ResponceHit_RPC
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FResponceHitRep                  Rep                                                    (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ACh043Unique3TrapGen::ResponceHit_RPC(const struct FResponceHitRep& Rep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch043Unique3TrapGen", "ResponceHit_RPC");

	Params::Ch043Unique3TrapGen_ResponceHit_RPC Parms{};

	Parms.Rep = std::move(Rep);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_BeginMultiLockOn
// (Final, Native, Public, BlueprintCallable)

void UCharacterAttackComponent::BP_BeginMultiLockOn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_BeginMultiLockOn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_ChaseEnd
// (Final, Native, Public, BlueprintCallable)

void UCharacterAttackComponent::BP_ChaseEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_ChaseEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_ChaseStart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FAttackChaseInfo                 Info                                                   (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::BP_ChaseStart(const struct FAttackChaseInfo& Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_ChaseStart");

	Params::CharacterAttackComponent_BP_ChaseStart Parms{};

	Parms.Info = std::move(Info);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_ClearGrabDamageChain
// (Final, Native, Public, BlueprintCallable)

void UCharacterAttackComponent::BP_ClearGrabDamageChain()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_ClearGrabDamageChain");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_DisableOnHitToServer
// (Final, Native, Public, BlueprintCallable)

void UCharacterAttackComponent::BP_DisableOnHitToServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_DisableOnHitToServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_DuplicateInto
// (Final, Native, Private, HasDefaults, BlueprintCallable)
// Parameters:
// bool                                    UseStock                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::BP_DuplicateInto(bool UseStock, const struct FVector& Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_DuplicateInto");

	Params::CharacterAttackComponent_BP_DuplicateInto Parms{};

	Parms.UseStock = UseStock;
	Parms.Position = std::move(Position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_EnableChainComboFlag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::BP_EnableChainComboFlag(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_EnableChainComboFlag");

	Params::CharacterAttackComponent_BP_EnableChainComboFlag Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_EnableOnHitToServer
// (Final, Native, Public, BlueprintCallable)

void UCharacterAttackComponent::BP_EnableOnHitToServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_EnableOnHitToServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_EndMultiLockOn
// (Final, Native, Public, BlueprintCallable)

void UCharacterAttackComponent::BP_EndMultiLockOn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_EndMultiLockOn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_FinishCurrentAttackPhase
// (Final, Native, Public, BlueprintCallable)

void UCharacterAttackComponent::BP_FinishCurrentAttackPhase()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_FinishCurrentAttackPhase");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_InitializeAttackPhase
// (Final, Native, Public, BlueprintCallable)

void UCharacterAttackComponent::BP_InitializeAttackPhase()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_InitializeAttackPhase");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_IsStockingDuplication
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterAttackComponent::BP_IsStockingDuplication()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_IsStockingDuplication");

	Params::CharacterAttackComponent_BP_IsStockingDuplication Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterAttackComponent.BP_IsStockingTransform
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterAttackComponent::BP_IsStockingTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_IsStockingTransform");

	Params::CharacterAttackComponent_BP_IsStockingTransform Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterAttackComponent.BP_LoadMagazineParam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAttackId                               AttackId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ActionName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECharacterId                            CharacterId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AttackLevel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::BP_LoadMagazineParam(EAttackId AttackId, const class FString& ActionName, ECharacterId CharacterId, int32 AttackLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_LoadMagazineParam");

	Params::CharacterAttackComponent_BP_LoadMagazineParam Parms{};

	Parms.AttackId = AttackId;
	Parms.ActionName = std::move(ActionName);
	Parms.CharacterId = CharacterId;
	Parms.AttackLevel = AttackLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_PlayAttackSound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           CueName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAtomComponent*                   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAtomComponent* UCharacterAttackComponent::BP_PlayAttackSound(const class FString& CueName, const class FName SocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_PlayAttackSound");

	Params::CharacterAttackComponent_BP_PlayAttackSound Parms{};

	Parms.CueName = std::move(CueName);
	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterAttackComponent.BP_RefreshAttackTargetInfo
// (Final, Native, Public, BlueprintCallable)

void UCharacterAttackComponent::BP_RefreshAttackTargetInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_RefreshAttackTargetInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_RemoveStockTransformation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::BP_RemoveStockTransformation(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_RemoveStockTransformation");

	Params::CharacterAttackComponent_BP_RemoveStockTransformation Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_ResetCatchedBulle
// (Final, Native, Public, BlueprintCallable)

void UCharacterAttackComponent::BP_ResetCatchedBulle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_ResetCatchedBulle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_SendToProjectileEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             EventName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::BP_SendToProjectileEvent(class FName EventName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_SendToProjectileEvent");

	Params::CharacterAttackComponent_BP_SendToProjectileEvent Parms{};

	Parms.EventName = EventName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_SetAttackAnimationRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNagara                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::BP_SetAttackAnimationRate(float Rate, bool bNagara)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_SetAttackAnimationRate");

	Params::CharacterAttackComponent_BP_SetAttackAnimationRate Parms{};

	Parms.Rate = Rate;
	Parms.bNagara = bNagara;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_SetAttackPhaseEndCondition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ComboCommand                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Grabed                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EndTimer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Landing                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    EndAnim                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAnimationSlot                          EndAnimSlot                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::BP_SetAttackPhaseEndCondition(bool ComboCommand, bool Grabed, float EndTimer, bool Landing, bool EndAnim, EAnimationSlot EndAnimSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_SetAttackPhaseEndCondition");

	Params::CharacterAttackComponent_BP_SetAttackPhaseEndCondition Parms{};

	Parms.ComboCommand = ComboCommand;
	Parms.Grabed = Grabed;
	Parms.EndTimer = EndTimer;
	Parms.Landing = Landing;
	Parms.EndAnim = EndAnim;
	Parms.EndAnimSlot = EndAnimSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_SetChargeCommandTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAttackId                               AttackId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::BP_SetChargeCommandTime(float Time, EAttackId AttackId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_SetChargeCommandTime");

	Params::CharacterAttackComponent_BP_SetChargeCommandTime Parms{};

	Parms.Time = Time;
	Parms.AttackId = AttackId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_SetDisableShiftActionAttack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAttackId                               AttackId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAttackDisabledFlags                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::BP_SetDisableShiftActionAttack(EAttackId AttackId, EAttackDisabledFlags Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_SetDisableShiftActionAttack");

	Params::CharacterAttackComponent_BP_SetDisableShiftActionAttack Parms{};

	Parms.AttackId = AttackId;
	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_SetEnableAttackLanding
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::BP_SetEnableAttackLanding(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_SetEnableAttackLanding");

	Params::CharacterAttackComponent_BP_SetEnableAttackLanding Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_SetEnableChaseFlag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::BP_SetEnableChaseFlag(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_SetEnableChaseFlag");

	Params::CharacterAttackComponent_BP_SetEnableChaseFlag Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_SetEnableShiftActionAttack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAttackId                               AttackId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAttackDisabledFlags                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::BP_SetEnableShiftActionAttack(EAttackId AttackId, EAttackDisabledFlags Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_SetEnableShiftActionAttack");

	Params::CharacterAttackComponent_BP_SetEnableShiftActionAttack Parms{};

	Parms.AttackId = AttackId;
	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_SetEnableShiftAttackAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAttackId                               AttackId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::BP_SetEnableShiftAttackAction(EAttackId AttackId, bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_SetEnableShiftAttackAction");

	Params::CharacterAttackComponent_BP_SetEnableShiftAttackAction Parms{};

	Parms.AttackId = AttackId;
	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_SetEndAttackOnAirial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::BP_SetEndAttackOnAirial(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_SetEndAttackOnAirial");

	Params::CharacterAttackComponent_BP_SetEndAttackOnAirial Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_SetGrabDamageContinuity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             DamageParamName                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HitCount                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HitSpan                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::BP_SetGrabDamageContinuity(const class FName DamageParamName, int32 HitCount, float HitSpan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_SetGrabDamageContinuity");

	Params::CharacterAttackComponent_BP_SetGrabDamageContinuity Parms{};

	Parms.DamageParamName = DamageParamName;
	Parms.HitCount = HitCount;
	Parms.HitSpan = HitSpan;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_SetHoldTimeIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::BP_SetHoldTimeIndex(float Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_SetHoldTimeIndex");

	Params::CharacterAttackComponent_BP_SetHoldTimeIndex Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_SetIgnoreAdjustMoveRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::BP_SetIgnoreAdjustMoveRate(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_SetIgnoreAdjustMoveRate");

	Params::CharacterAttackComponent_BP_SetIgnoreAdjustMoveRate Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_SetLockOnData
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// float                                   Span                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Distance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxLockOnCount                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        RaticleSize                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::BP_SetLockOnData(float Span, float Distance, int32 MaxLockOnCount, const struct FVector2D& RaticleSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_SetLockOnData");

	Params::CharacterAttackComponent_BP_SetLockOnData Parms{};

	Parms.Span = Span;
	Parms.Distance = Distance;
	Parms.MaxLockOnCount = MaxLockOnCount;
	Parms.RaticleSize = std::move(RaticleSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_SetSpeedHForAttack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Initial                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Last                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Span                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::BP_SetSpeedHForAttack(float Initial, float Last, float Span)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_SetSpeedHForAttack");

	Params::CharacterAttackComponent_BP_SetSpeedHForAttack Parms{};

	Parms.Initial = Initial;
	Parms.Last = Last;
	Parms.Span = Span;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_SetSpeedVForAttack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Initial                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Last                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Span                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::BP_SetSpeedVForAttack(float Initial, float Last, float Span)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_SetSpeedVForAttack");

	Params::CharacterAttackComponent_BP_SetSpeedVForAttack Parms{};

	Parms.Initial = Initial;
	Parms.Last = Last;
	Parms.Span = Span;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_SetSuperArmor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::BP_SetSuperArmor(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_SetSuperArmor");

	Params::CharacterAttackComponent_BP_SetSuperArmor Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_SetTarget_ToServer
// (Final, Native, Public, BlueprintCallable)

void UCharacterAttackComponent::BP_SetTarget_ToServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_SetTarget_ToServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_SetTransfromTimer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Timer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::BP_SetTransfromTimer(float Timer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_SetTransfromTimer");

	Params::CharacterAttackComponent_BP_SetTransfromTimer Parms{};

	Parms.Timer = Timer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_SetUpRotationPitchToDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EActionAxis                             TargetAxis                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxDegreesPerFrame                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::BP_SetUpRotationPitchToDirection(float Time, EActionAxis TargetAxis, float Rate, float MaxDegreesPerFrame, const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_SetUpRotationPitchToDirection");

	Params::CharacterAttackComponent_BP_SetUpRotationPitchToDirection Parms{};

	Parms.Time = Time;
	Parms.TargetAxis = TargetAxis;
	Parms.Rate = Rate;
	Parms.MaxDegreesPerFrame = MaxDegreesPerFrame;
	Parms.Direction = std::move(Direction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_ShiftAttackPhase
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   NextPhase                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::BP_ShiftAttackPhase(uint8 NextPhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_ShiftAttackPhase");

	Params::CharacterAttackComponent_BP_ShiftAttackPhase Parms{};

	Parms.NextPhase = NextPhase;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_ShiftAttackPhaseForRemote
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   NextPhase                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::BP_ShiftAttackPhaseForRemote(uint8 NextPhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_ShiftAttackPhaseForRemote");

	Params::CharacterAttackComponent_BP_ShiftAttackPhaseForRemote Parms{};

	Parms.NextPhase = NextPhase;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_StartMultiLockOn
// (Final, Native, Public, BlueprintCallable)

void UCharacterAttackComponent::BP_StartMultiLockOn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_StartMultiLockOn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_StockDuplication
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class ACharacterBattle*                 Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::BP_StockDuplication(class ACharacterBattle* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_StockDuplication");

	Params::CharacterAttackComponent_BP_StockDuplication Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_StockTransformation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ACharacterBattle*                 Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::BP_StockTransformation(class ACharacterBattle* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_StockTransformation");

	Params::CharacterAttackComponent_BP_StockTransformation Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_TransformInto
// (Final, Native, Public, BlueprintCallable)

void UCharacterAttackComponent::BP_TransformInto()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_TransformInto");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.GenerateRandomSeed_OnServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// int32                                   NewSeed                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::GenerateRandomSeed_OnServer(int32 NewSeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "GenerateRandomSeed_OnServer");

	Params::CharacterAttackComponent_GenerateRandomSeed_OnServer Parms{};

	Parms.NewSeed = NewSeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.OnHitAttack_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// struct FNetAttackHitData                Data                                                   (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::OnHitAttack_ToServer(const struct FNetAttackHitData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "OnHitAttack_ToServer");

	Params::CharacterAttackComponent_OnHitAttack_ToServer Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.OnHitProjectile_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// struct FNetAttackHitData                Data                                                   (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::OnHitProjectile_ToServer(const struct FNetAttackHitData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "OnHitProjectile_ToServer");

	Params::CharacterAttackComponent_OnHitProjectile_ToServer Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.OnRep_Replicated_currentRandomSeed
// (Final, Native, Private)

void UCharacterAttackComponent::OnRep_Replicated_currentRandomSeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "OnRep_Replicated_currentRandomSeed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.OnRep_Replicated_netAimingTargetDirection
// (Final, Native, Private)

void UCharacterAttackComponent::OnRep_Replicated_netAimingTargetDirection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "OnRep_Replicated_netAimingTargetDirection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.OnRep_Replicated_serverHitAttackData
// (Final, Native, Private)

void UCharacterAttackComponent::OnRep_Replicated_serverHitAttackData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "OnRep_Replicated_serverHitAttackData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.OnRep_Replicated_serverHitProjectileData
// (Final, Native, Private)

void UCharacterAttackComponent::OnRep_Replicated_serverHitProjectileData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "OnRep_Replicated_serverHitProjectileData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.OnRep_Replicated_serverTargetData
// (Final, Native, Private)

void UCharacterAttackComponent::OnRep_Replicated_serverTargetData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "OnRep_Replicated_serverTargetData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.SendAttackSerial_ToClient
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private, NetValidate)
// Parameters:
// uint8                                   SerialNo                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::SendAttackSerial_ToClient(uint8 SerialNo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "SendAttackSerial_ToClient");

	Params::CharacterAttackComponent_SendAttackSerial_ToClient Parms{};

	Parms.SerialNo = SerialNo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.SendAttackSerial_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// uint8                                   SerialNo                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::SendAttackSerial_ToServer(uint8 SerialNo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "SendAttackSerial_ToServer");

	Params::CharacterAttackComponent_SendAttackSerial_ToServer Parms{};

	Parms.SerialNo = SerialNo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.SetNextAttackPhase_ToClient
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private, NetValidate)
// Parameters:
// uint8                                   NextPhase                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   AttackSerial                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::SetNextAttackPhase_ToClient(uint8 NextPhase, uint8 AttackSerial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "SetNextAttackPhase_ToClient");

	Params::CharacterAttackComponent_SetNextAttackPhase_ToClient Parms{};

	Parms.NextPhase = NextPhase;
	Parms.AttackSerial = AttackSerial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.SetNextAttackPhase_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// uint8                                   NextPhase                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   AttackSerial                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::SetNextAttackPhase_ToServer(uint8 NextPhase, uint8 AttackSerial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "SetNextAttackPhase_ToServer");

	Params::CharacterAttackComponent_SetNextAttackPhase_ToServer Parms{};

	Parms.NextPhase = NextPhase;
	Parms.AttackSerial = AttackSerial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.SetTarget_ToServer
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FNetAttackTargetData             TargetData                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::SetTarget_ToServer(const struct FNetAttackTargetData& TargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "SetTarget_ToServer");

	Params::CharacterAttackComponent_SetTarget_ToServer Parms{};

	Parms.TargetData = std::move(TargetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.SetTargetLocal
// (Final, Native, Public, HasDefaults)
// Parameters:
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TargetLocation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          RealtimeTargetLocation                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAttackComponent::SetTargetLocal(class AActor* TargetActor, const struct FVector& TargetLocation, const struct FVector& RealtimeTargetLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "SetTargetLocal");

	Params::CharacterAttackComponent_SetTargetLocal Parms{};

	Parms.TargetActor = TargetActor;
	Parms.TargetLocation = std::move(TargetLocation);
	Parms.RealtimeTargetLocation = std::move(RealtimeTargetLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackComponent.BP_GetAttackParamAsBool
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ActionName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ParamPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AttackLevel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECharacterId                            MasterId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterAttackComponent::BP_GetAttackParamAsBool(const class FString& ActionName, const class FString& ParamPath, int32 AttackLevel, ECharacterId MasterId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_GetAttackParamAsBool");

	Params::CharacterAttackComponent_BP_GetAttackParamAsBool Parms{};

	Parms.ActionName = std::move(ActionName);
	Parms.ParamPath = std::move(ParamPath);
	Parms.AttackLevel = AttackLevel;
	Parms.MasterId = MasterId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterAttackComponent.BP_GetAttackParamAsFloat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ActionName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ParamPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AttackLevel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECharacterId                            MasterId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCharacterAttackComponent::BP_GetAttackParamAsFloat(const class FString& ActionName, const class FString& ParamPath, int32 AttackLevel, ECharacterId MasterId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_GetAttackParamAsFloat");

	Params::CharacterAttackComponent_BP_GetAttackParamAsFloat Parms{};

	Parms.ActionName = std::move(ActionName);
	Parms.ParamPath = std::move(ParamPath);
	Parms.AttackLevel = AttackLevel;
	Parms.MasterId = MasterId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterAttackComponent.BP_GetAttackParamAsInt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ActionName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ParamPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AttackLevel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECharacterId                            MasterId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCharacterAttackComponent::BP_GetAttackParamAsInt(const class FString& ActionName, const class FString& ParamPath, int32 AttackLevel, ECharacterId MasterId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_GetAttackParamAsInt");

	Params::CharacterAttackComponent_BP_GetAttackParamAsInt Parms{};

	Parms.ActionName = std::move(ActionName);
	Parms.ParamPath = std::move(ParamPath);
	Parms.AttackLevel = AttackLevel;
	Parms.MasterId = MasterId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterAttackComponent.BP_GetAttackParamAsString
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ActionName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ParamPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AttackLevel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECharacterId                            MasterId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UCharacterAttackComponent::BP_GetAttackParamAsString(const class FString& ActionName, const class FString& ParamPath, int32 AttackLevel, ECharacterId MasterId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_GetAttackParamAsString");

	Params::CharacterAttackComponent_BP_GetAttackParamAsString Parms{};

	Parms.ActionName = std::move(ActionName);
	Parms.ParamPath = std::move(ParamPath);
	Parms.AttackLevel = AttackLevel;
	Parms.MasterId = MasterId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterAttackComponent.BP_GetAttackPhaseCurrentTimeSeconds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCharacterAttackComponent::BP_GetAttackPhaseCurrentTimeSeconds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_GetAttackPhaseCurrentTimeSeconds");

	Params::CharacterAttackComponent_BP_GetAttackPhaseCurrentTimeSeconds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterAttackComponent.BP_GetAttackPhaseFinished
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EAttackPhaseEndFlag                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAttackPhaseEndFlag UCharacterAttackComponent::BP_GetAttackPhaseFinished() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_GetAttackPhaseFinished");

	Params::CharacterAttackComponent_BP_GetAttackPhaseFinished Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterAttackComponent.BP_GetAttackTargetActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UCharacterAttackComponent::BP_GetAttackTargetActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_GetAttackTargetActor");

	Params::CharacterAttackComponent_BP_GetAttackTargetActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterAttackComponent.BP_GetAttackTargetLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector UCharacterAttackComponent::BP_GetAttackTargetLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_GetAttackTargetLocation");

	Params::CharacterAttackComponent_BP_GetAttackTargetLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterAttackComponent.BP_GetCurrentAttackCommandId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ECommandId                              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECommandId UCharacterAttackComponent::BP_GetCurrentAttackCommandId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_GetCurrentAttackCommandId");

	Params::CharacterAttackComponent_BP_GetCurrentAttackCommandId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterAttackComponent.BP_GetCurrentAttackPhase
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCharacterAttackComponent::BP_GetCurrentAttackPhase() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_GetCurrentAttackPhase");

	Params::CharacterAttackComponent_BP_GetCurrentAttackPhase Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterAttackComponent.BP_GetCurrentAttackUniqueLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCharacterAttackComponent::BP_GetCurrentAttackUniqueLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_GetCurrentAttackUniqueLevel");

	Params::CharacterAttackComponent_BP_GetCurrentAttackUniqueLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterAttackComponent.BP_GetCurrentLockOnCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCharacterAttackComponent::BP_GetCurrentLockOnCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_GetCurrentLockOnCount");

	Params::CharacterAttackComponent_BP_GetCurrentLockOnCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterAttackComponent.BP_GetLastBullet
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ACustomBullet*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ACustomBullet* UCharacterAttackComponent::BP_GetLastBullet() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_GetLastBullet");

	Params::CharacterAttackComponent_BP_GetLastBullet Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterAttackComponent.BP_GetLastBulletLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bValidity                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UCharacterAttackComponent::BP_GetLastBulletLocation(bool* bValidity) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_GetLastBulletLocation");

	Params::CharacterAttackComponent_BP_GetLastBulletLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bValidity != nullptr)
		*bValidity = Parms.bValidity;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterAttackComponent.BP_GetMultiLockOnEnableTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCharacterAttackComponent::BP_GetMultiLockOnEnableTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_GetMultiLockOnEnableTime");

	Params::CharacterAttackComponent_BP_GetMultiLockOnEnableTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterAttackComponent.BP_GetRandomStream
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FRandomStream              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FRandomStream UCharacterAttackComponent::BP_GetRandomStream() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_GetRandomStream");

	Params::CharacterAttackComponent_BP_GetRandomStream Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterAttackComponent.BP_GetRealtimeTargetDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UCharacterAttackComponent::BP_GetRealtimeTargetDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_GetRealtimeTargetDirection");

	Params::CharacterAttackComponent_BP_GetRealtimeTargetDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterAttackComponent.BP_GetStickDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UCharacterAttackComponent::BP_GetStickDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_GetStickDirection");

	Params::CharacterAttackComponent_BP_GetStickDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterAttackComponent.BP_GetStickDirectionSimple
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UCharacterAttackComponent::BP_GetStickDirectionSimple() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_GetStickDirectionSimple");

	Params::CharacterAttackComponent_BP_GetStickDirectionSimple Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterAttackComponent.BP_GetTargetDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UCharacterAttackComponent::BP_GetTargetDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_GetTargetDirection");

	Params::CharacterAttackComponent_BP_GetTargetDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterAttackComponent.BP_IsCatchedBullet
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterAttackComponent::BP_IsCatchedBullet() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_IsCatchedBullet");

	Params::CharacterAttackComponent_BP_IsCatchedBullet Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterAttackComponent.BP_IsChaseState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterAttackComponent::BP_IsChaseState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_IsChaseState");

	Params::CharacterAttackComponent_BP_IsChaseState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterAttackComponent.BP_IsEnableAttackLanding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterAttackComponent::BP_IsEnableAttackLanding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_IsEnableAttackLanding");

	Params::CharacterAttackComponent_BP_IsEnableAttackLanding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterAttackComponent.BP_IsEndAttackOnAirial
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterAttackComponent::BP_IsEndAttackOnAirial() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_IsEndAttackOnAirial");

	Params::CharacterAttackComponent_BP_IsEndAttackOnAirial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterAttackComponent.BP_IsHItAttack
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterAttackComponent::BP_IsHItAttack() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_IsHItAttack");

	Params::CharacterAttackComponent_BP_IsHItAttack Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterAttackComponent.BP_IsSatisfiedHoldCommand
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterAttackComponent::BP_IsSatisfiedHoldCommand() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_IsSatisfiedHoldCommand");

	Params::CharacterAttackComponent_BP_IsSatisfiedHoldCommand Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterAttackComponent.BP_IsValidAttackCommand
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterAttackComponent::BP_IsValidAttackCommand() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "BP_IsValidAttackCommand");

	Params::CharacterAttackComponent_BP_IsValidAttackCommand Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterAttackComponent.GetRealtimeTargetLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector UCharacterAttackComponent::GetRealtimeTargetLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackComponent", "GetRealtimeTargetLocation");

	Params::CharacterAttackComponent_GetRealtimeTargetLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Ch100_ActionAttack_Special.BP_OnReceiveAbortOrder
// (Event, Protected, BlueprintEvent)

void UCh100_ActionAttack_Special::BP_OnReceiveAbortOrder()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch100_ActionAttack_Special", "BP_OnReceiveAbortOrder");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.Ch100_ActionAttack_Special.BP_SetGiantLocal
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bGiant                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCh100_ActionAttack_Special::BP_SetGiantLocal(bool bGiant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch100_ActionAttack_Special", "BP_SetGiantLocal");

	Params::Ch100_ActionAttack_Special_BP_SetGiantLocal Parms{};

	Parms.bGiant = bGiant;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch100_ActionAttack_Special.BP_SetParticleScale
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCh100_ActionAttack_Special::BP_SetParticleScale(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch100_ActionAttack_Special", "BP_SetParticleScale");

	Params::Ch100_ActionAttack_Special_BP_SetParticleScale Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch004Unique3_Child_Var01.BP_PhysicsOnHitBackground
// (Final, Native, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ACh004Unique3_Child_Var01::BP_PhysicsOnHitBackground(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch004Unique3_Child_Var01", "BP_PhysicsOnHitBackground");

	Params::Ch004Unique3_Child_Var01_BP_PhysicsOnHitBackground Parms{};

	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch046Unique1Gen.Fire
// (Final, Native, Private)
// Parameters:
// struct FCh046BulletInfo                 bulletInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void ACh046Unique1Gen::Fire(const struct FCh046BulletInfo& bulletInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch046Unique1Gen", "Fire");

	Params::Ch046Unique1Gen_Fire Parms{};

	Parms.bulletInfo = std::move(bulletInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Cracks.BP_OnBeginEnd
// (Event, Public, BlueprintEvent)

void ACracks::BP_OnBeginEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Cracks", "BP_OnBeginEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.Cracks.GetMID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* ACracks::GetMID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Cracks", "GetMID");

	Params::Cracks_GetMID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Cracks.GetRandomZRot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ACracks::GetRandomZRot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Cracks", "GetRandomZRot");

	Params::Cracks_GetRandomZRot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Cracks.SetMID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceDynamic*         Mid                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* ACracks::SetMID(class UMaterialInstanceDynamic* Mid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Cracks", "SetMID");

	Params::Cracks_SetMID Parms{};

	Parms.Mid = Mid;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CracksRange.DeActiveAreaEffect
// (Final, Native, Protected)

void ACracksRange::DeActiveAreaEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CracksRange", "DeActiveAreaEffect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch038.CatchSuccessed_ToClient
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private, NetValidate)
// Parameters:
// class ACharacterBattle*                 Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACh038::CatchSuccessed_ToClient(class ACharacterBattle* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch038", "CatchSuccessed_ToClient");

	Params::Ch038_CatchSuccessed_ToClient Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch038.CatchSuccessed_ToSever
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class ACharacterBattle*                 Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACh038::CatchSuccessed_ToSever(class ACharacterBattle* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch038", "CatchSuccessed_ToSever");

	Params::Ch038_CatchSuccessed_ToSever Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch038.Released_ToClient
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private, NetValidate)

void ACh038::Released_ToClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch038", "Released_ToClient");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch038.Released_ToSever
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)

void ACh038::Released_ToSever()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch038", "Released_ToSever");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch101SpecialGen.CreateCh101Special_RPC
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FCh101SpecialGenRep              Gen                                                    (Parm, NoDestructor, NativeAccessSpecifierPublic)

void ACh101SpecialGen::CreateCh101Special_RPC(const struct FCh101SpecialGenRep& Gen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch101SpecialGen", "CreateCh101Special_RPC");

	Params::Ch101SpecialGen_CreateCh101Special_RPC Parms{};

	Parms.Gen = std::move(Gen);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch101SpecialGen.OnRep_CreateCh101Special
// (Final, Native, Public)

void ACh101SpecialGen::OnRep_CreateCh101Special()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch101SpecialGen", "OnRep_CreateCh101Special");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch007Unique1Gen.CreateConnectPoint_RPC
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FThunderShotGenRep               Gen                                                    (Parm, NoDestructor, NativeAccessSpecifierPublic)

void ACh007Unique1Gen::CreateConnectPoint_RPC(const struct FThunderShotGenRep& Gen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch007Unique1Gen", "CreateConnectPoint_RPC");

	Params::Ch007Unique1Gen_CreateConnectPoint_RPC Parms{};

	Parms.Gen = std::move(Gen);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch007Unique1Gen.OnRep_CreateConnectPoint
// (Final, Native, Public)

void ACh007Unique1Gen::OnRep_CreateConnectPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch007Unique1Gen", "OnRep_CreateConnectPoint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Portal.CharacterOverlap
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              OverlappedComp                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void APortal::CharacterOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Portal", "CharacterOverlap");

	Params::Portal_CharacterOverlap Parms{};

	Parms.OverlappedComp = OverlappedComp;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Portal.OnEndOverlap
// (Native, Public)
// Parameters:
// class UPrimitiveComponent*              OverlappedComp                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APortal::OnEndOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Portal", "OnEndOverlap");

	Params::Portal_OnEndOverlap Parms{};

	Parms.OverlappedComp = OverlappedComp;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Portal.OnParticleEnd
// (Final, Native, Public, HasDefaults)
// Parameters:
// class FName                             EventName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EmitterTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ParticleTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Velocity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APortal::OnParticleEnd(class FName EventName, float EmitterTime, int32 ParticleTime, const struct FVector& Location, const struct FVector& Velocity, const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Portal", "OnParticleEnd");

	Params::Portal_OnParticleEnd Parms{};

	Parms.EventName = EventName;
	Parms.EmitterTime = EmitterTime;
	Parms.ParticleTime = ParticleTime;
	Parms.Location = std::move(Location);
	Parms.Velocity = std::move(Velocity);
	Parms.Direction = std::move(Direction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Portal.UpdateArrowPointer
// (Final, Native, Public, BlueprintCallable)

void APortal::UpdateArrowPointer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Portal", "UpdateArrowPointer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch007Unique2.SetFoolVanish
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsFool                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACh007Unique2::SetFoolVanish(bool IsFool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch007Unique2", "SetFoolVanish");

	Params::Ch007Unique2_SetFoolVanish Parms{};

	Parms.IsFool = IsFool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch008.BP_IsUnbreakable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ACh008::BP_IsUnbreakable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch008", "BP_IsUnbreakable");

	Params::Ch008_BP_IsUnbreakable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Ch008.BP_SetUnbreakable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACh008::BP_SetUnbreakable(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch008", "BP_SetUnbreakable");

	Params::Ch008_BP_SetUnbreakable Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAddPartsComponent.BP_DisableAddParts
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Key                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAddPartsComponent::BP_DisableAddParts(const class FName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAddPartsComponent", "BP_DisableAddParts");

	Params::CharacterAddPartsComponent_BP_DisableAddParts Parms{};

	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAddPartsComponent.BP_EnableAddParts
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Key                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAddPartsComponent::BP_EnableAddParts(const class FName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAddPartsComponent", "BP_EnableAddParts");

	Params::CharacterAddPartsComponent_BP_EnableAddParts Parms{};

	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAddPartsComponent.BP_IsEnableAddParts
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             Key                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterAddPartsComponent::BP_IsEnableAddParts(const class FName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAddPartsComponent", "BP_IsEnableAddParts");

	Params::CharacterAddPartsComponent_BP_IsEnableAddParts Parms{};

	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterAddPartsComponent.BP_RegisterParticle
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             Key                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*                  ParticleSystem                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       Transform                                              (ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// EAttachLocation                         LocationType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoDestroy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAddPartsComponent::BP_RegisterParticle(const class FName Key, class UParticleSystem* ParticleSystem, const class FName SocketName, const struct FTransform& Transform, EAttachLocation LocationType, bool bAutoDestroy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAddPartsComponent", "BP_RegisterParticle");

	Params::CharacterAddPartsComponent_BP_RegisterParticle Parms{};

	Parms.Key = Key;
	Parms.ParticleSystem = ParticleSystem;
	Parms.SocketName = SocketName;
	Parms.Transform = std::move(Transform);
	Parms.LocationType = LocationType;
	Parms.bAutoDestroy = bAutoDestroy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAddPartsComponent.BP_RegisterSkeletalMesh
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             Key                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMesh*                    Asset                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       Transform                                              (ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UCharacterAddPartsComponent::BP_RegisterSkeletalMesh(const class FName Key, class USkeletalMesh* Asset, const class FName SocketName, const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAddPartsComponent", "BP_RegisterSkeletalMesh");

	Params::CharacterAddPartsComponent_BP_RegisterSkeletalMesh Parms{};

	Parms.Key = Key;
	Parms.Asset = Asset;
	Parms.SocketName = SocketName;
	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAddPartsComponent.BP_RegisterStaticMesh
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             Key                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      Asset                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       Transform                                              (ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UCharacterAddPartsComponent::BP_RegisterStaticMesh(const class FName Key, class UStaticMesh* Asset, const class FName SocketName, const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAddPartsComponent", "BP_RegisterStaticMesh");

	Params::CharacterAddPartsComponent_BP_RegisterStaticMesh Parms{};

	Parms.Key = Key;
	Parms.Asset = Asset;
	Parms.SocketName = SocketName;
	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAddPartsComponent.BP_UnregisterParts
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Key                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAddPartsComponent::BP_UnregisterParts(const class FName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAddPartsComponent", "BP_UnregisterParts");

	Params::CharacterAddPartsComponent_BP_UnregisterParts Parms{};

	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAbilityWidget.BP_AnalogValueScroll
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnalogInputEvent                InAnalogEvent                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCharacterAbilityWidget::BP_AnalogValueScroll(const struct FAnalogInputEvent& InAnalogEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAbilityWidget", "BP_AnalogValueScroll");

	Params::CharacterAbilityWidget_BP_AnalogValueScroll Parms{};

	Parms.InAnalogEvent = std::move(InAnalogEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAbilityWidget.BP_UpdateCharacter
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// ECharacterId                            CharacterId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   VariationNo                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAbilityWidget::BP_UpdateCharacter(ECharacterId CharacterId, int32 VariationNo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAbilityWidget", "BP_UpdateCharacter");

	Params::CharacterAbilityWidget_BP_UpdateCharacter Parms{};

	Parms.CharacterId = CharacterId;
	Parms.VariationNo = VariationNo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterBadge.PlayGetBudgeAnim
// (Final, Native, Public, BlueprintCallable)

void UCharacterBadge::PlayGetBudgeAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBadge", "PlayGetBudgeAnim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterBadge.PlayGetBudgeAnim_Internal
// (Event, Public, BlueprintEvent)

void UCharacterBadge::PlayGetBudgeAnim_Internal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBadge", "PlayGetBudgeAnim_Internal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.CharacterBadge.PlayLoopAnim
// (Final, Native, Public, BlueprintCallable)

void UCharacterBadge::PlayLoopAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBadge", "PlayLoopAnim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterBadge.PlayLoopAnim_Internal
// (Event, Public, BlueprintEvent)

void UCharacterBadge::PlayLoopAnim_Internal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBadge", "PlayLoopAnim_Internal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.StateSwitchGen.BP_DecideJsonIndex
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AStateSwitchGen::BP_DecideJsonIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StateSwitchGen", "BP_DecideJsonIndex");

	Params::StateSwitchGen_BP_DecideJsonIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.StateSwitchGen.BP_GetOwnerCharacterBattle
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ACharacterBattle*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ACharacterBattle* AStateSwitchGen::BP_GetOwnerCharacterBattle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StateSwitchGen", "BP_GetOwnerCharacterBattle");

	Params::StateSwitchGen_BP_GetOwnerCharacterBattle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Ch102Unique1Gen.OnRep_Spawn
// (Final, Native, Private)

void ACh102Unique1Gen::OnRep_Spawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch102Unique1Gen", "OnRep_Spawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch102Unique1Gen.Spawn_RPC
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// struct FHairShotGenRep                  Rep                                                    (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ACh102Unique1Gen::Spawn_RPC(const struct FHairShotGenRep& Rep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch102Unique1Gen", "Spawn_RPC");

	Params::Ch102Unique1Gen_Spawn_RPC Parms{};

	Parms.Rep = std::move(Rep);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch010Unique3ShotGen.Create_RPC
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FCh010Unique3ShotGenRep          Gen                                                    (Parm, NoDestructor, NativeAccessSpecifierPublic)

void ACh010Unique3ShotGen::Create_RPC(const struct FCh010Unique3ShotGenRep& Gen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch010Unique3ShotGen", "Create_RPC");

	Params::Ch010Unique3ShotGen_Create_RPC Parms{};

	Parms.Gen = std::move(Gen);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch010Unique3ShotGen.OnRep_Create
// (Final, Native, Public)

void ACh010Unique3ShotGen::OnRep_Create()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch010Unique3ShotGen", "OnRep_Create");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch109SpecialGen.OnRep_PutPoint
// (Final, Native, Public)

void ACh109SpecialGen::OnRep_PutPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch109SpecialGen", "OnRep_PutPoint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch109SpecialGen.PutPoint_RPC
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FCh109SpecialGenRep              Gen                                                    (Parm, NoDestructor, NativeAccessSpecifierPublic)

void ACh109SpecialGen::PutPoint_RPC(const struct FCh109SpecialGenRep& Gen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch109SpecialGen", "PutPoint_RPC");

	Params::Ch109SpecialGen_PutPoint_RPC Parms{};

	Parms.Gen = std::move(Gen);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch010Unique3ShotGrandChildGen.Create_RPC
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FCh010Unique3ShotGrandChildGenRepGen                                                    (Parm, NoDestructor, NativeAccessSpecifierPublic)

void ACh010Unique3ShotGrandChildGen::Create_RPC(const struct FCh010Unique3ShotGrandChildGenRep& Gen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch010Unique3ShotGrandChildGen", "Create_RPC");

	Params::Ch010Unique3ShotGrandChildGen_Create_RPC Parms{};

	Parms.Gen = std::move(Gen);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch010Unique3ShotGrandChildGen.OnRep_Create
// (Final, Native, Public)

void ACh010Unique3ShotGrandChildGen::OnRep_Create()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch010Unique3ShotGrandChildGen", "OnRep_Create");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch013_ActionAttack_Special.SealUniqueOfGazeTargets
// (Final, Native, Public, BlueprintCallable)

void UCh013_ActionAttack_Special::SealUniqueOfGazeTargets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch013_ActionAttack_Special", "SealUniqueOfGazeTargets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch016Unique2Shot.BP_OnBeginEnd
// (Event, Public, BlueprintEvent)

void ACh016Unique2Shot::BP_OnBeginEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch016Unique2Shot", "BP_OnBeginEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.Ch016Unique2Shot.SetMIDEnemy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceDynamic*         Mid                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* ACh016Unique2Shot::SetMIDEnemy(class UMaterialInstanceDynamic* Mid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch016Unique2Shot", "SetMIDEnemy");

	Params::Ch016Unique2Shot_SetMIDEnemy Parms{};

	Parms.Mid = Mid;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Ch016Unique2Shot.SetMIDFriend
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceDynamic*         Mid                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* ACh016Unique2Shot::SetMIDFriend(class UMaterialInstanceDynamic* Mid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch016Unique2Shot", "SetMIDFriend");

	Params::Ch016Unique2Shot_SetMIDFriend Parms{};

	Parms.Mid = Mid;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.Ch017Unique2ChargeAir.OnFinishTrap
// (Final, Native, Public)

void ACh017Unique2ChargeAir::OnFinishTrap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch017Unique2ChargeAir", "OnFinishTrap");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch017Unique2ChargeAir.StopFire
// (Final, Native, Public)

void ACh017Unique2ChargeAir::StopFire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch017Unique2ChargeAir", "StopFire");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch017Unique2ChargeAir.StopTrap
// (Final, Native, Public)

void ACh017Unique2ChargeAir::StopTrap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch017Unique2ChargeAir", "StopTrap");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch017Unique3.Stop
// (Final, Native, Private)

void ACh017Unique3::Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch017Unique3", "Stop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch023Unique2ChildGen.OnRep_Create
// (Final, Native, Public)

void ACh023Unique2ChildGen::OnRep_Create()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch023Unique2ChildGen", "OnRep_Create");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch023Unique2ChildGen.SetCreateInfo_ToServer
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FCh023Unique2ShotChildGenRep     Gen                                                    (Parm, NoDestructor, NativeAccessSpecifierPublic)

void ACh023Unique2ChildGen::SetCreateInfo_ToServer(const struct FCh023Unique2ShotChildGenRep& Gen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch023Unique2ChildGen", "SetCreateInfo_ToServer");

	Params::Ch023Unique2ChildGen_SetCreateInfo_ToServer Parms{};

	Parms.Gen = std::move(Gen);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch034Unique1Gen.EndAction_RPC
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// bool                                    bEndAction                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACh034Unique1Gen::EndAction_RPC(bool bEndAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch034Unique1Gen", "EndAction_RPC");

	Params::Ch034Unique1Gen_EndAction_RPC Parms{};

	Parms.bEndAction = bEndAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch034Unique1Gen.OnRep_EndAction
// (Final, Native, Protected)

void ACh034Unique1Gen::OnRep_EndAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch034Unique1Gen", "OnRep_EndAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch038_ActionAttack_Special.BP_ActionMainRelease
// (Event, Protected, BlueprintEvent)

void UCh038_ActionAttack_Special::BP_ActionMainRelease()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch038_ActionAttack_Special", "BP_ActionMainRelease");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.Ch038_ActionAttack_Special.BP_ActionRemoteRelease
// (Event, Protected, BlueprintEvent)

void UCh038_ActionAttack_Special::BP_ActionRemoteRelease()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch038_ActionAttack_Special", "BP_ActionRemoteRelease");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.Ch046Unique2Gen.ReceiveDamageT
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DamageValue                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHitMarkType                            HitMarkType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    IsMeleeAttack                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACh046Unique2Gen::ReceiveDamageT(class UPrimitiveComponent* HitComponent, float DamageValue, EHitMarkType HitMarkType, const struct FHitResult& Hit, bool IsMeleeAttack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch046Unique2Gen", "ReceiveDamageT");

	Params::Ch046Unique2Gen_ReceiveDamageT Parms{};

	Parms.HitComponent = HitComponent;
	Parms.DamageValue = DamageValue;
	Parms.HitMarkType = HitMarkType;
	Parms.Hit = std::move(Hit);
	Parms.IsMeleeAttack = IsMeleeAttack;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch102SpecialGen.CreateCh102Special_RPC
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FCh102SpecialGenRep              Gen                                                    (Parm, NoDestructor, NativeAccessSpecifierPublic)

void ACh102SpecialGen::CreateCh102Special_RPC(const struct FCh102SpecialGenRep& Gen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch102SpecialGen", "CreateCh102Special_RPC");

	Params::Ch102SpecialGen_CreateCh102Special_RPC Parms{};

	Parms.Gen = std::move(Gen);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch102SpecialGen.OnRep_CreateCh102Special
// (Final, Native, Public)

void ACh102SpecialGen::OnRep_CreateCh102Special()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch102SpecialGen", "OnRep_CreateCh102Special");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Ch102Unique2.OnReflection
// (Final, Native, Private, HasDefaults)
// Parameters:
// struct FVector                          Normal                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACh102Unique2::OnReflection(const struct FVector& Normal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ch102Unique2", "OnReflection");

	Params::Ch102Unique2_OnReflection Parms{};

	Parms.Normal = std::move(Normal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAbilityPopupWidget.OnDecideReturnButtonEvent
// (Final, Native, Protected)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterAbilityPopupWidget::OnDecideReturnButtonEvent(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAbilityPopupWidget", "OnDecideReturnButtonEvent");

	Params::CharacterAbilityPopupWidget_OnDecideReturnButtonEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterActionControlComponent.OnRegisterAttackActionToSlot_ToClient
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private, NetValidate)
// Parameters:
// struct FNetworkRegisterAttackActionData ServerData                                             (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// EAttackId                               AttackId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMagazineRegisterType                   MagazineRegisterType                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterActionControlComponent::OnRegisterAttackActionToSlot_ToClient(const struct FNetworkRegisterAttackActionData& ServerData, EAttackId AttackId, EMagazineRegisterType MagazineRegisterType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterActionControlComponent", "OnRegisterAttackActionToSlot_ToClient");

	Params::CharacterActionControlComponent_OnRegisterAttackActionToSlot_ToClient Parms{};

	Parms.ServerData = std::move(ServerData);
	Parms.AttackId = AttackId;
	Parms.MagazineRegisterType = MagazineRegisterType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterActionControlComponent.OnRegisterAttackActionToSlotArray_ToClient
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private, NetValidate)
// Parameters:
// TArray<struct FNetworkRegisterAttackActionData>ServerDataList                                         (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCharacterActionControlComponent::OnRegisterAttackActionToSlotArray_ToClient(const TArray<struct FNetworkRegisterAttackActionData>& ServerDataList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterActionControlComponent", "OnRegisterAttackActionToSlotArray_ToClient");

	Params::CharacterActionControlComponent_OnRegisterAttackActionToSlotArray_ToClient Parms{};

	Parms.ServerDataList = std::move(ServerDataList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterActionControlComponent.RegisterAttackActionToAttackSlot_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// EAttackId                               AttackId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UActionAttackBase>    AttackActionClass                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMagazineRegisterType                   MagazineRegisterType                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterActionControlComponent::RegisterAttackActionToAttackSlot_ToServer(EAttackId AttackId, TSubclassOf<class UActionAttackBase> AttackActionClass, int32 Level, EMagazineRegisterType MagazineRegisterType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterActionControlComponent", "RegisterAttackActionToAttackSlot_ToServer");

	Params::CharacterActionControlComponent_RegisterAttackActionToAttackSlot_ToServer Parms{};

	Parms.AttackId = AttackId;
	Parms.AttackActionClass = AttackActionClass;
	Parms.Level = Level;
	Parms.MagazineRegisterType = MagazineRegisterType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterActionControlComponent.RegisterAttackActionToAttackSlotArray_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// TArray<struct FNetworkRegisterAttackActionData>ServerDataList                                         (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCharacterActionControlComponent::RegisterAttackActionToAttackSlotArray_ToServer(const TArray<struct FNetworkRegisterAttackActionData>& ServerDataList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterActionControlComponent", "RegisterAttackActionToAttackSlotArray_ToServer");

	Params::CharacterActionControlComponent_RegisterAttackActionToAttackSlotArray_ToServer Parms{};

	Parms.ServerDataList = std::move(ServerDataList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterActionControlComponent.SendActionPing_ToClient
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// uint8                                   ActionIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Ping                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterActionControlComponent::SendActionPing_ToClient(uint8 ActionIndex, int32 Ping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterActionControlComponent", "SendActionPing_ToClient");

	Params::CharacterActionControlComponent_SendActionPing_ToClient Parms{};

	Parms.ActionIndex = ActionIndex;
	Parms.Ping = Ping;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterActionControlComponent.SendActionPing_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// uint8                                   ActionIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Ping                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterActionControlComponent::SendActionPing_ToServer(uint8 ActionIndex, int32 Ping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterActionControlComponent", "SendActionPing_ToServer");

	Params::CharacterActionControlComponent_SendActionPing_ToServer Parms{};

	Parms.ActionIndex = ActionIndex;
	Parms.Ping = Ping;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterActionControlComponent.SetAction_ToClient
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private, NetValidate)
// Parameters:
// uint8                                   ActionIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ActionArgment                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EActionKind                             RequestActionKind                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32                                  NetServerPriorityActionSerialNo                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterActionControlComponent::SetAction_ToClient(uint8 ActionIndex, int32 ActionArgment, EActionKind RequestActionKind, uint32 NetServerPriorityActionSerialNo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterActionControlComponent", "SetAction_ToClient");

	Params::CharacterActionControlComponent_SetAction_ToClient Parms{};

	Parms.ActionIndex = ActionIndex;
	Parms.ActionArgment = ActionArgment;
	Parms.RequestActionKind = RequestActionKind;
	Parms.NetServerPriorityActionSerialNo = NetServerPriorityActionSerialNo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterActionControlComponent.SetAction_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// uint8                                   ActionIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ActionArgment                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EActionKind                             RequestActionKind                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32                                  NetServerPriorityActionSerialNo                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterActionControlComponent::SetAction_ToServer(uint8 ActionIndex, int32 ActionArgment, EActionKind RequestActionKind, uint32 NetServerPriorityActionSerialNo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterActionControlComponent", "SetAction_ToServer");

	Params::CharacterActionControlComponent_SetAction_ToServer Parms{};

	Parms.ActionIndex = ActionIndex;
	Parms.ActionArgment = ActionArgment;
	Parms.RequestActionKind = RequestActionKind;
	Parms.NetServerPriorityActionSerialNo = NetServerPriorityActionSerialNo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterActionControlComponent.SetAimingMode_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// bool                                    bAimingMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterActionControlComponent::SetAimingMode_ToServer(bool bAimingMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterActionControlComponent", "SetAimingMode_ToServer");

	Params::CharacterActionControlComponent_SetAimingMode_ToServer Parms{};

	Parms.bAimingMode = bAimingMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterActionControlComponent.SetAttackAction_ToClient
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private, NetValidate)
// Parameters:
// EAttackId                               AttackId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize100           TargetLocation                                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UniqueLevel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECommandId                              CommandID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBeginGround                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterActionControlComponent::SetAttackAction_ToClient(EAttackId AttackId, const struct FVector_NetQuantize100& TargetLocation, class AActor* TargetActor, int32 UniqueLevel, ECommandId CommandID, bool bBeginGround)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterActionControlComponent", "SetAttackAction_ToClient");

	Params::CharacterActionControlComponent_SetAttackAction_ToClient Parms{};

	Parms.AttackId = AttackId;
	Parms.TargetLocation = std::move(TargetLocation);
	Parms.TargetActor = TargetActor;
	Parms.UniqueLevel = UniqueLevel;
	Parms.CommandID = CommandID;
	Parms.bBeginGround = bBeginGround;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterActionControlComponent.SetAttackAction_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// EAttackId                               AttackId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize100           TargetLocation                                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UniqueLevel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECommandId                              CommandID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBeginGround                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32                                  NetServerPriorityActionSerialNo                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterActionControlComponent::SetAttackAction_ToServer(EAttackId AttackId, const struct FVector_NetQuantize100& TargetLocation, class AActor* TargetActor, int32 UniqueLevel, ECommandId CommandID, bool bBeginGround, uint32 NetServerPriorityActionSerialNo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterActionControlComponent", "SetAttackAction_ToServer");

	Params::CharacterActionControlComponent_SetAttackAction_ToServer Parms{};

	Parms.AttackId = AttackId;
	Parms.TargetLocation = std::move(TargetLocation);
	Parms.TargetActor = TargetActor;
	Parms.UniqueLevel = UniqueLevel;
	Parms.CommandID = CommandID;
	Parms.bBeginGround = bBeginGround;
	Parms.NetServerPriorityActionSerialNo = NetServerPriorityActionSerialNo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterActionControlComponent.TerminateAttackLayer_ToClient
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private, NetValidate)

void UCharacterActionControlComponent::TerminateAttackLayer_ToClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterActionControlComponent", "TerminateAttackLayer_ToClient");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterActionControlComponent.TerminateAttackLayer_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)

void UCharacterActionControlComponent::TerminateAttackLayer_ToServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterActionControlComponent", "TerminateAttackLayer_ToServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackCollisionController.AttackHit_RPC
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FProjectileHitRep                Rep                                                    (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCharacterAttackCollisionController::AttackHit_RPC(const struct FProjectileHitRep& Rep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackCollisionController", "AttackHit_RPC");

	Params::CharacterAttackCollisionController_AttackHit_RPC Parms{};

	Parms.Rep = std::move(Rep);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackCollisionController.AttackHit_RPC_Client
// (Net, Native, Event, Public, NetClient)
// Parameters:
// struct FBulletHitRep                    Rep                                                    (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCharacterAttackCollisionController::AttackHit_RPC_Client(const struct FBulletHitRep& Rep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackCollisionController", "AttackHit_RPC_Client");

	Params::CharacterAttackCollisionController_AttackHit_RPC_Client Parms{};

	Parms.Rep = std::move(Rep);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackCollisionController.OnHitBackground
// (Final, Native, Private, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UCharacterAttackCollisionController::OnHitBackground(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackCollisionController", "OnHitBackground");

	Params::CharacterAttackCollisionController_OnHitBackground Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackCollisionController.OnHitCharacter
// (Final, Native, Private, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UCharacterAttackCollisionController::OnHitCharacter(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackCollisionController", "OnHitCharacter");

	Params::CharacterAttackCollisionController_OnHitCharacter Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackReplicateComponent.CharacterAttackHit_RPC
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FCharacterAttackHitRep           Rep                                                    (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCharacterAttackReplicateComponent::CharacterAttackHit_RPC(const struct FCharacterAttackHitRep& Rep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackReplicateComponent", "CharacterAttackHit_RPC");

	Params::CharacterAttackReplicateComponent_CharacterAttackHit_RPC Parms{};

	Parms.Rep = std::move(Rep);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterAttackReplicateComponent.OnRep_CharacterAttackHit
// (Final, Native, Public)

void UCharacterAttackReplicateComponent::OnRep_CharacterAttackHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterAttackReplicateComponent", "OnRep_CharacterAttackHit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterBuffControlCompnent.OnApplyTeamBuffs_ToClient
// (Net, NetReliable, Native, Event, Public, NetClient, NetValidate)
// Parameters:
// struct FNetTeamRollBuff                 Data                                                   (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)

void UCharacterBuffControlCompnent::OnApplyTeamBuffs_ToClient(const struct FNetTeamRollBuff& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBuffControlCompnent", "OnApplyTeamBuffs_ToClient");

	Params::CharacterBuffControlCompnent_OnApplyTeamBuffs_ToClient Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterBuffControlCompnent.RequestApplyTeamBuffs_ToServer
// (Net, NetReliable, Native, Event, Public, NetServer)

void UCharacterBuffControlCompnent::RequestApplyTeamBuffs_ToServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBuffControlCompnent", "RequestApplyTeamBuffs_ToServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterCommandComponent.BP_ClearCommand
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECommandId                              CommandID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterCommandComponent::BP_ClearCommand(ECommandId CommandID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterCommandComponent", "BP_ClearCommand");

	Params::CharacterCommandComponent_BP_ClearCommand Parms{};

	Parms.CommandID = CommandID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterCommandComponent.BP_SetChargeEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECommandId                              CommandID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterCommandComponent::BP_SetChargeEnabled(ECommandId CommandID, bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterCommandComponent", "BP_SetChargeEnabled");

	Params::CharacterCommandComponent_BP_SetChargeEnabled Parms{};

	Parms.CommandID = CommandID;
	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterCommandComponent.BP_SetChargeTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECommandId                              CommandID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterCommandComponent::BP_SetChargeTime(ECommandId CommandID, float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterCommandComponent", "BP_SetChargeTime");

	Params::CharacterCommandComponent_BP_SetChargeTime Parms{};

	Parms.CommandID = CommandID;
	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterCommandComponent.BP_SetCommandValidity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECommandId                              CommandID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterCommandComponent::BP_SetCommandValidity(ECommandId CommandID, bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterCommandComponent", "BP_SetCommandValidity");

	Params::CharacterCommandComponent_BP_SetCommandValidity Parms{};

	Parms.CommandID = CommandID;
	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterCommandComponent.BP_GetMoveDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector UCharacterCommandComponent::BP_GetMoveDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterCommandComponent", "BP_GetMoveDirection");

	Params::CharacterCommandComponent_BP_GetMoveDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterCommandComponent.BP_GetMoveDirectionForWall
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector UCharacterCommandComponent::BP_GetMoveDirectionForWall() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterCommandComponent", "BP_GetMoveDirectionForWall");

	Params::CharacterCommandComponent_BP_GetMoveDirectionForWall Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterCommandComponent.BP_GetMoveRate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCharacterCommandComponent::BP_GetMoveRate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterCommandComponent", "BP_GetMoveRate");

	Params::CharacterCommandComponent_BP_GetMoveRate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterCommandComponent.BP_IsSatisfiedCommand
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ECommandId                              CommandID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCharacterCommandComponent::BP_IsSatisfiedCommand(ECommandId CommandID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterCommandComponent", "BP_IsSatisfiedCommand");

	Params::CharacterCommandComponent_BP_IsSatisfiedCommand Parms{};

	Parms.CommandID = CommandID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterConditionAbility.BP_GetEfficacyValue
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCharacterConditionAbility::BP_GetEfficacyValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterConditionAbility", "BP_GetEfficacyValue");

	Params::CharacterConditionAbility_BP_GetEfficacyValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterDamageComponent.BP_AddSlipDamage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DamageValue                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECharacterId                            DamageParamCharaId                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParamName                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDamageCauserType                       DamageCauserType                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterDamageComponent::BP_AddSlipDamage(float DamageValue, ECharacterId DamageParamCharaId, const class FName ParamName, EDamageCauserType DamageCauserType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterDamageComponent", "BP_AddSlipDamage");

	Params::CharacterDamageComponent_BP_AddSlipDamage Parms{};

	Parms.DamageValue = DamageValue;
	Parms.DamageParamCharaId = DamageParamCharaId;
	Parms.ParamName = ParamName;
	Parms.DamageCauserType = DamageCauserType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterDamageComponent.BP_GetDamageDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UCharacterDamageComponent::BP_GetDamageDirection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterDamageComponent", "BP_GetDamageDirection");

	Params::CharacterDamageComponent_BP_GetDamageDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterDamageComponent.BP_SetDamageInvincible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnableEffect                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterDamageComponent::BP_SetDamageInvincible(bool bEnableEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterDamageComponent", "BP_SetDamageInvincible");

	Params::CharacterDamageComponent_BP_SetDamageInvincible Parms{};

	Parms.bEnableEffect = bEnableEffect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterDamageComponent.BP_SetRecoverInvincible
// (Final, Native, Public, BlueprintCallable)

void UCharacterDamageComponent::BP_SetRecoverInvincible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterDamageComponent", "BP_SetRecoverInvincible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterDamageComponent.OnRep_Replicated_serverDamageBootInfo
// (Final, Native, Protected)

void UCharacterDamageComponent::OnRep_Replicated_serverDamageBootInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterDamageComponent", "OnRep_Replicated_serverDamageBootInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterDamageComponent.ReceiveDamage_RPC_OnServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// struct FTakeDamageArgument              DamageArgument                                         (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCharacterDamageComponent::ReceiveDamage_RPC_OnServer(const struct FTakeDamageArgument& DamageArgument)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterDamageComponent", "ReceiveDamage_RPC_OnServer");

	Params::CharacterDamageComponent_ReceiveDamage_RPC_OnServer Parms{};

	Parms.DamageArgument = std::move(DamageArgument);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterDamageComponent.SendDamageToClient_RPC_OnClient
// (Net, NetReliable, Native, Event, NetMulticast, Public, NetValidate)
// Parameters:
// struct FNetDamageBootInfo               DamageBootInfo                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UCharacterDamageComponent::SendDamageToClient_RPC_OnClient(const struct FNetDamageBootInfo& DamageBootInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterDamageComponent", "SendDamageToClient_RPC_OnClient");

	Params::CharacterDamageComponent_SendDamageToClient_RPC_OnClient Parms{};

	Parms.DamageBootInfo = std::move(DamageBootInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterGiantControlComponent.BP_RequestBecomeGiant
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DestinationScale                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Span                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterGiantControlComponent::BP_RequestBecomeGiant(float DestinationScale, float Span)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterGiantControlComponent", "BP_RequestBecomeGiant");

	Params::CharacterGiantControlComponent_BP_RequestBecomeGiant Parms{};

	Parms.DestinationScale = DestinationScale;
	Parms.Span = Span;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterGiantControlComponent.BP_RequestReturnNormal
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Span                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterGiantControlComponent::BP_RequestReturnNormal(float Span)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterGiantControlComponent", "BP_RequestReturnNormal");

	Params::CharacterGiantControlComponent_BP_RequestReturnNormal Parms{};

	Parms.Span = Span;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.AnimInstanceAttack.BP_EventOnHit
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimInstanceAttack::BP_EventOnHit(const struct FVector& HitLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimInstanceAttack", "BP_EventOnHit");

	Params::AnimInstanceAttack_BP_EventOnHit Parms{};

	Parms.HitLocation = std::move(HitLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.AnimInstanceAttack.BP_GetAdditiveDistance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAnimInstanceAttack::BP_GetAdditiveDistance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimInstanceAttack", "BP_GetAdditiveDistance");

	Params::AnimInstanceAttack_BP_GetAdditiveDistance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.AnimInstanceAttack.BP_GetAdditiveDistanceForVector
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UAnimInstanceAttack::BP_GetAdditiveDistanceForVector() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimInstanceAttack", "BP_GetAdditiveDistanceForVector");

	Params::AnimInstanceAttack_BP_GetAdditiveDistanceForVector Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.AnimInstanceAttack.BP_GetAdditiveRotator
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UAnimInstanceAttack::BP_GetAdditiveRotator() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimInstanceAttack", "BP_GetAdditiveRotator");

	Params::AnimInstanceAttack_BP_GetAdditiveRotator Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.AnimInstanceAttack.BP_GetBlendingAlpha
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAnimInstanceAttack::BP_GetBlendingAlpha() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimInstanceAttack", "BP_GetBlendingAlpha");

	Params::AnimInstanceAttack_BP_GetBlendingAlpha Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.AnimInstanceAttack.BP_GetTargetLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UAnimInstanceAttack::BP_GetTargetLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimInstanceAttack", "BP_GetTargetLocation");

	Params::AnimInstanceAttack_BP_GetTargetLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterMaterialControlComponent.BP_ClearPreset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             PresetName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDataTable*                       DataTable                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterMaterialControlComponent::BP_ClearPreset(const class FName PresetName, class UDataTable* DataTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterMaterialControlComponent", "BP_ClearPreset");

	Params::CharacterMaterialControlComponent_BP_ClearPreset Parms{};

	Parms.PresetName = PresetName;
	Parms.DataTable = DataTable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterMaterialControlComponent.BP_ClearPresetCondition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             PresetName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterMaterialControlComponent::BP_ClearPresetCondition(const class FName PresetName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterMaterialControlComponent", "BP_ClearPresetCondition");

	Params::CharacterMaterialControlComponent_BP_ClearPresetCondition Parms{};

	Parms.PresetName = PresetName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterMaterialControlComponent.BP_LoopEnd
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterMaterialControlComponent::BP_LoopEnd(class FName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterMaterialControlComponent", "BP_LoopEnd");

	Params::CharacterMaterialControlComponent_BP_LoopEnd Parms{};

	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterMaterialControlComponent.BP_LoopStart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParamName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TargetValue                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Span                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             CacheName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMaterialGroupFlag                      GroupFlag                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterMaterialControlComponent::BP_LoopStart(class FName Key, class FName ParamName, float StartValue, float TargetValue, float Span, class FName CacheName, EMaterialGroupFlag GroupFlag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterMaterialControlComponent", "BP_LoopStart");

	Params::CharacterMaterialControlComponent_BP_LoopStart Parms{};

	Parms.Key = Key;
	Parms.ParamName = ParamName;
	Parms.StartValue = StartValue;
	Parms.TargetValue = TargetValue;
	Parms.Span = Span;
	Parms.CacheName = CacheName;
	Parms.GroupFlag = GroupFlag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterMaterialControlComponent.BP_SetPreset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             PresetName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDataTable*                       DataTable                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterMaterialControlComponent::BP_SetPreset(const class FName PresetName, class UDataTable* DataTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterMaterialControlComponent", "BP_SetPreset");

	Params::CharacterMaterialControlComponent_BP_SetPreset Parms{};

	Parms.PresetName = PresetName;
	Parms.DataTable = DataTable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterMaterialControlComponent.BP_SetPresetCondition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             PresetName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterMaterialControlComponent::BP_SetPresetCondition(const class FName PresetName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterMaterialControlComponent", "BP_SetPresetCondition");

	Params::CharacterMaterialControlComponent_BP_SetPresetCondition Parms{};

	Parms.PresetName = PresetName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterRespawnControlCompnent.BP_DestroyEffects
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UParticleSystem*                  EmitterTemplate                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterRespawnControlCompnent::BP_DestroyEffects(class UParticleSystem* EmitterTemplate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterRespawnControlCompnent", "BP_DestroyEffects");

	Params::CharacterRespawnControlCompnent_BP_DestroyEffects Parms{};

	Parms.EmitterTemplate = EmitterTemplate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterRespawnControlCompnent.BP_PlayEffects
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UParticleSystem*                  EmitterTemplate                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterRespawnControlCompnent::BP_PlayEffects(class UParticleSystem* EmitterTemplate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterRespawnControlCompnent", "BP_PlayEffects");

	Params::CharacterRespawnControlCompnent_BP_PlayEffects Parms{};

	Parms.EmitterTemplate = EmitterTemplate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterRespawnControlCompnent.SetRespawnLocation_ToNetMulticast
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private, NetValidate)
// Parameters:
// struct FVector_NetQuantize              RespawnLocation                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterRespawnControlCompnent::SetRespawnLocation_ToNetMulticast(const struct FVector_NetQuantize& RespawnLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterRespawnControlCompnent", "SetRespawnLocation_ToNetMulticast");

	Params::CharacterRespawnControlCompnent_SetRespawnLocation_ToNetMulticast Parms{};

	Parms.RespawnLocation = std::move(RespawnLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterRespawnControlCompnent.BP_GetRespawnLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UCharacterRespawnControlCompnent::BP_GetRespawnLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterRespawnControlCompnent", "BP_GetRespawnLocation");

	Params::CharacterRespawnControlCompnent_BP_GetRespawnLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CharacterStatusWidget.RecvPlayerDataActivityStatus
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FPlayerDataActivityStatus        PlayerDataActivityStatus                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCharacterStatusWidget::RecvPlayerDataActivityStatus(const struct FPlayerDataActivityStatus& PlayerDataActivityStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterStatusWidget", "RecvPlayerDataActivityStatus");

	Params::CharacterStatusWidget_RecvPlayerDataActivityStatus Parms{};

	Parms.PlayerDataActivityStatus = std::move(PlayerDataActivityStatus);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterStatusWidget.RequestPlayerDataActivityStatus
// (Final, Native, Protected)

void UCharacterStatusWidget::RequestPlayerDataActivityStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterStatusWidget", "RequestPlayerDataActivityStatus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterStatusWidget.ShowCharacterModel
// (Event, Protected, BlueprintEvent)
// Parameters:
// ECharacterId                            CharacterId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CostumeCode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterStatusWidget::ShowCharacterModel(ECharacterId CharacterId, int32 CostumeCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterStatusWidget", "ShowCharacterModel");

	Params::CharacterStatusWidget_ShowCharacterModel Parms{};

	Parms.CharacterId = CharacterId;
	Parms.CostumeCode = CostumeCode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.CharacterWidget.OnClosedWindow
// (Final, Native, Protected)

void UCharacterWidget::OnClosedWindow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterWidget", "OnClosedWindow");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterWidget.OnDecideReturnButtonEvent
// (Final, Native, Protected)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterWidget::OnDecideReturnButtonEvent(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterWidget", "OnDecideReturnButtonEvent");

	Params::CharacterWidget_OnDecideReturnButtonEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterWidget.OnSwitchTabEvent
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   NewSelectTab                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterWidget::OnSwitchTabEvent(int32 NewSelectTab)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterWidget", "OnSwitchTabEvent");

	Params::CharacterWidget_OnSwitchTabEvent Parms{};

	Parms.NewSelectTab = NewSelectTab;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CharacterWidget.UpdateCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECharacterId                            CharacterId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   VariationNo                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterWidget::UpdateCharacter(ECharacterId CharacterId, int32 VariationNo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterWidget", "UpdateCharacter");

	Params::CharacterWidget_UpdateCharacter Parms{};

	Parms.CharacterId = CharacterId;
	Parms.VariationNo = VariationNo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CommandWheelBase.CalculateMaxPageNum
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ElementNum                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCommandWheelBase::CalculateMaxPageNum(int32 ElementNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommandWheelBase", "CalculateMaxPageNum");

	Params::CommandWheelBase_CalculateMaxPageNum Parms{};

	Parms.ElementNum = ElementNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CommandWheelBase.ClearAllActualIcons
// (Final, Native, Public, BlueprintCallable)

void UCommandWheelBase::ClearAllActualIcons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommandWheelBase", "ClearAllActualIcons");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CommandWheelBase.ClearCurrentIndex
// (Final, Native, Protected)

void UCommandWheelBase::ClearCurrentIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommandWheelBase", "ClearCurrentIndex");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CommandWheelBase.CloseWheel
// (Native, Public, BlueprintCallable)

void UCommandWheelBase::CloseWheel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommandWheelBase", "CloseWheel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CommandWheelBase.DecideCommand
// (Native, Public, BlueprintCallable)

void UCommandWheelBase::DecideCommand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommandWheelBase", "DecideCommand");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CommandWheelBase.ForceCloseWheel
// (Final, Native, Public)

void UCommandWheelBase::ForceCloseWheel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommandWheelBase", "ForceCloseWheel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CommandWheelBase.GamePadDecide
// (Native, Public, BlueprintCallable)

void UCommandWheelBase::GamePadDecide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommandWheelBase", "GamePadDecide");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CommandWheelBase.GetSerializedIndexFromWheelIdxAndPageNum
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Page                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCommandWheelBase::GetSerializedIndexFromWheelIdxAndPageNum(int32 Index_0, int32 Page)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommandWheelBase", "GetSerializedIndexFromWheelIdxAndPageNum");

	Params::CommandWheelBase_GetSerializedIndexFromWheelIdxAndPageNum Parms{};

	Parms.Index_0 = Index_0;
	Parms.Page = Page;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.CommandWheelBase.OnChangedIndex
// (Native, Public)

void UCommandWheelBase::OnChangedIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommandWheelBase", "OnChangedIndex");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CommandWheelBase.OnPageProceeded
// (Event, Public, BlueprintEvent)

void UCommandWheelBase::OnPageProceeded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommandWheelBase", "OnPageProceeded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.CommandWheelBase.OnPageTurnedBack
// (Event, Public, BlueprintEvent)

void UCommandWheelBase::OnPageTurnedBack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommandWheelBase", "OnPageTurnedBack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.CommandWheelBase.OnRefreshed
// (Event, Public, BlueprintEvent)

void UCommandWheelBase::OnRefreshed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommandWheelBase", "OnRefreshed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.CommandWheelBase.ShowWheel
// (Native, Public, BlueprintCallable)

void UCommandWheelBase::ShowWheel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommandWheelBase", "ShowWheel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CommandWheelWidgetInterface.OnDecideWheelCommand
// (Native, Event, Public, BlueprintEvent)

void ICommandWheelWidgetInterface::OnDecideWheelCommand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommandWheelWidgetInterface", "OnDecideWheelCommand");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CommunicationPinActor.InitPinInfo
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FPinInfo                         PinInfo                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ACommunicationPinActor::InitPinInfo(const struct FPinInfo& PinInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommunicationPinActor", "InitPinInfo");

	Params::CommunicationPinActor_InitPinInfo Parms{};

	Parms.PinInfo = std::move(PinInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CommunicationPinActor.OnRep_PinInfo
// (Final, Native, Private)

void ACommunicationPinActor::OnRep_PinInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommunicationPinActor", "OnRep_PinInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CommunicationPinActor.PlaySignalPinCharacterVoice
// (Final, Native, Public)

void ACommunicationPinActor::PlaySignalPinCharacterVoice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommunicationPinActor", "PlaySignalPinCharacterVoice");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CommunicationPinActor.SetUpPin
// (Final, Native, Public)

void ACommunicationPinActor::SetUpPin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommunicationPinActor", "SetUpPin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CommunicationPinActor.Vanish
// (Final, Native, Public)

void ACommunicationPinActor::Vanish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommunicationPinActor", "Vanish");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CustomMatchComponent.ForceQuit_Client
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void UCustomMatchComponent::ForceQuit_Client()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomMatchComponent", "ForceQuit_Client");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CustomMatchComponent.RequestOpenCustomMatchRoom
// (Final, Native, Public, BlueprintCallable)

void UCustomMatchComponent::RequestOpenCustomMatchRoom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomMatchComponent", "RequestOpenCustomMatchRoom");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CustomMatchComponent.SendResultData_Client
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// struct FCustomMatchResultData           ResultData                                             (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void UCustomMatchComponent::SendResultData_Client(const struct FCustomMatchResultData& ResultData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomMatchComponent", "SendResultData_Client");

	Params::CustomMatchComponent_SendResultData_Client Parms{};

	Parms.ResultData = std::move(ResultData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.CustomMatchComponent.NoticeForceQuit_Client
// (Net, NetReliable, Native, Event, NetMulticast, Public, Const)

void UCustomMatchComponent::NoticeForceQuit_Client() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomMatchComponent", "NoticeForceQuit_Client");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.WipeWidget.BP_EventWipeHiddenDisplayPoint
// (Final, Native, Public, BlueprintCallable)

void UWipeWidget::BP_EventWipeHiddenDisplayPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WipeWidget", "BP_EventWipeHiddenDisplayPoint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.DuplicateControlComponent.BP_DuplicateIntoForImitation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacterBattle*                 TargetCharacter                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAttackId                               AttackId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LifeTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDuplicateControlComponent::BP_DuplicateIntoForImitation(class ACharacterBattle* TargetCharacter, const struct FVector& Location, EAttackId AttackId, float LifeTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DuplicateControlComponent", "BP_DuplicateIntoForImitation");

	Params::DuplicateControlComponent_BP_DuplicateIntoForImitation Parms{};

	Parms.TargetCharacter = TargetCharacter;
	Parms.Location = std::move(Location);
	Parms.AttackId = AttackId;
	Parms.LifeTime = LifeTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.DuplicateControlComponent.DuplicateInto_RPC_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, HasDefaults, NetValidate)
// Parameters:
// class ACharacterBattle*                 TargetCharacter                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SpawnLocation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDuplicateControlComponent::DuplicateInto_RPC_ToServer(const class ACharacterBattle* TargetCharacter, const struct FVector& SpawnLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DuplicateControlComponent", "DuplicateInto_RPC_ToServer");

	Params::DuplicateControlComponent_DuplicateInto_RPC_ToServer Parms{};

	Parms.TargetCharacter = TargetCharacter;
	Parms.SpawnLocation = std::move(SpawnLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.DuplicateControlComponent.DuplicateIntoForImitation_RPC_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, HasDefaults, NetValidate)
// Parameters:
// class ACharacterBattle*                 TargetCharacter                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SpawnLocation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAttackId                               AttackId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LifeTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDuplicateControlComponent::DuplicateIntoForImitation_RPC_ToServer(const class ACharacterBattle* TargetCharacter, const struct FVector& SpawnLocation, EAttackId AttackId, float LifeTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DuplicateControlComponent", "DuplicateIntoForImitation_RPC_ToServer");

	Params::DuplicateControlComponent_DuplicateIntoForImitation_RPC_ToServer Parms{};

	Parms.TargetCharacter = TargetCharacter;
	Parms.SpawnLocation = std::move(SpawnLocation);
	Parms.AttackId = AttackId;
	Parms.LifeTime = LifeTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.DuplicateControlComponent.DuplicateIntoStockCharacter_RPC_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, HasDefaults, NetValidate)
// Parameters:
// struct FVector                          SpawnLocation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDuplicateControlComponent::DuplicateIntoStockCharacter_RPC_ToServer(const struct FVector& SpawnLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DuplicateControlComponent", "DuplicateIntoStockCharacter_RPC_ToServer");

	Params::DuplicateControlComponent_DuplicateIntoStockCharacter_RPC_ToServer Parms{};

	Parms.SpawnLocation = std::move(SpawnLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.DuplicateControlComponent.OnDeadCharacter
// (Final, Native, Private)
// Parameters:
// class ACharacterBattle*                 Victim                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacterBattle*                 Aggriever                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDuplicateControlComponent::OnDeadCharacter(const class ACharacterBattle* Victim, const class ACharacterBattle* Aggriever)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DuplicateControlComponent", "OnDeadCharacter");

	Params::DuplicateControlComponent_OnDeadCharacter Parms{};

	Parms.Victim = Victim;
	Parms.Aggriever = Aggriever;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.DuplicateControlComponent.OnRep_DuplicationData
// (Final, Native, Private)

void UDuplicateControlComponent::OnRep_DuplicationData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DuplicateControlComponent", "OnRep_DuplicationData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.DuplicateControlComponent.RemoveDuplicationDataData_RPC_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)

void UDuplicateControlComponent::RemoveDuplicationDataData_RPC_ToServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DuplicateControlComponent", "RemoveDuplicationDataData_RPC_ToServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.DuplicateControlComponent.StockDuplicationData_RPC_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class ACharacterBattle*                 TargetCharacter                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDuplicateControlComponent::StockDuplicationData_RPC_ToServer(const class ACharacterBattle* TargetCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DuplicateControlComponent", "StockDuplicationData_RPC_ToServer");

	Params::DuplicateControlComponent_StockDuplicationData_RPC_ToServer Parms{};

	Parms.TargetCharacter = TargetCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.EmoteWheel.UpdateButtonGuide
// (Final, Native, Private)

void UEmoteWheel::UpdateButtonGuide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EmoteWheel", "UpdateButtonGuide");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.EmoteWheel.UpdateEmoteList
// (Final, Native, Private)

void UEmoteWheel::UpdateEmoteList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EmoteWheel", "UpdateEmoteList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameModeLobby.CountRampage
// (Final, Native, Private)
// Parameters:
// EAttackId                               ID                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameModeLobby::CountRampage(const EAttackId ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameModeLobby", "CountRampage");

	Params::GameModeLobby_CountRampage Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameModeLobby.DelaySpawnAICharacterBattle
// (Final, Native, Private)
// Parameters:
// struct FBotInfoToSpawn                  botSpawnInfo                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AGameModeLobby::DelaySpawnAICharacterBattle(const struct FBotInfoToSpawn& botSpawnInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameModeLobby", "DelaySpawnAICharacterBattle");

	Params::GameModeLobby_DelaySpawnAICharacterBattle Parms{};

	Parms.botSpawnInfo = std::move(botSpawnInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameModeLobby.FillWithBots
// (Final, Native, Public)

void AGameModeLobby::FillWithBots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameModeLobby", "FillWithBots");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameModeLobby.GameStart
// (Final, Native, Public)

void AGameModeLobby::GameStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameModeLobby", "GameStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameModeLobby.OnCompleteConsumeRentalPoint
// (Final, Native, Private)
// Parameters:
// int32                                   RequestId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameModeLobby::OnCompleteConsumeRentalPoint(int32 RequestId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameModeLobby", "OnCompleteConsumeRentalPoint");

	Params::GameModeLobby_OnCompleteConsumeRentalPoint Parms{};

	Parms.RequestId = RequestId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameModeLobby.OnCompleteStartBattle
// (Final, Native, Private)
// Parameters:
// int32                                   RequestId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameModeLobby::OnCompleteStartBattle(int32 RequestId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameModeLobby", "OnCompleteStartBattle");

	Params::GameModeLobby_OnCompleteStartBattle Parms{};

	Parms.RequestId = RequestId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameModeLobby.OnIdleTimeOver
// (Final, Native, Private)

void AGameModeLobby::OnIdleTimeOver()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameModeLobby", "OnIdleTimeOver");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameModeLobby.OnTimeOver_StartCountdownToBattle
// (Final, Native, Public)

void AGameModeLobby::OnTimeOver_StartCountdownToBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameModeLobby", "OnTimeOver_StartCountdownToBattle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameModeLobby.RequestConsumeRentalPoint
// (Final, Native, Private)

void AGameModeLobby::RequestConsumeRentalPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameModeLobby", "RequestConsumeRentalPoint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameModeLobby.StartBattle
// (Final, Native, Public)
// Parameters:
// bool                                    bForceStart                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameModeLobby::StartBattle(const bool bForceStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameModeLobby", "StartBattle");

	Params::GameModeLobby_StartBattle Parms{};

	Parms.bForceStart = bForceStart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameModeLobby.UpdateCountdownToBattle
// (Final, Native, Public)

void AGameModeLobby::UpdateCountdownToBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameModeLobby", "UpdateCountdownToBattle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameModeTakeCharacterImage.BP_PlayFaceAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameModeTakeCharacterImage::BP_PlayFaceAnimation(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameModeTakeCharacterImage", "BP_PlayFaceAnimation");

	Params::GameModeTakeCharacterImage_BP_PlayFaceAnimation Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameModeTakeCharacterImage.DisableCallSign
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bDisable                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameModeTakeCharacterImage::DisableCallSign(bool bDisable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameModeTakeCharacterImage", "DisableCallSign");

	Params::GameModeTakeCharacterImage_DisableCallSign Parms{};

	Parms.bDisable = bDisable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameModeTakeCharacterImage.DisableEffect
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bDisable                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameModeTakeCharacterImage::DisableEffect(bool bDisable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameModeTakeCharacterImage", "DisableEffect");

	Params::GameModeTakeCharacterImage_DisableEffect Parms{};

	Parms.bDisable = bDisable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameModeTakeCharacterImage.GetTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TextureType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UTexture*>                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UTexture*> AGameModeTakeCharacterImage::GetTexture(int32 TextureType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameModeTakeCharacterImage", "GetTexture");

	Params::GameModeTakeCharacterImage_GetTexture Parms{};

	Parms.TextureType = TextureType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameModeTakeCharacterImage.OnCostumeColorWhite
// (Final, Native, Public)

void AGameModeTakeCharacterImage::OnCostumeColorWhite()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameModeTakeCharacterImage", "OnCostumeColorWhite");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameModeTakeCharacterImage.PlayCustomAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETakeCharacterImageTypeCustom           Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameModeTakeCharacterImage::PlayCustomAnimation(ETakeCharacterImageTypeCustom Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameModeTakeCharacterImage", "PlayCustomAnimation");

	Params::GameModeTakeCharacterImage_PlayCustomAnimation Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameModeTakeCharacterImage.PlayEmote
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameModeTakeCharacterImage::PlayEmote(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameModeTakeCharacterImage", "PlayEmote");

	Params::GameModeTakeCharacterImage_PlayEmote Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameModeTakeCharacterImage.PlayGasha
// (Final, Native, Public, BlueprintCallable)

void AGameModeTakeCharacterImage::PlayGasha()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameModeTakeCharacterImage", "PlayGasha");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameModeTakeCharacterImage.PlayPause
// (Final, Native, Public, BlueprintCallable)

void AGameModeTakeCharacterImage::PlayPause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameModeTakeCharacterImage", "PlayPause");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameModeTakeCharacterImage.PlayPlusUltra
// (Final, Native, Public, BlueprintCallable)

void AGameModeTakeCharacterImage::PlayPlusUltra()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameModeTakeCharacterImage", "PlayPlusUltra");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameModeTakeCharacterImage.PlayUniqueActionUnique
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameModeTakeCharacterImage::PlayUniqueActionUnique(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameModeTakeCharacterImage", "PlayUniqueActionUnique");

	Params::GameModeTakeCharacterImage_PlayUniqueActionUnique Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameModeTakeCharacterImage.SetCostumeColorWhite
// (Event, Public, BlueprintEvent)

void AGameModeTakeCharacterImage::SetCostumeColorWhite()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameModeTakeCharacterImage", "SetCostumeColorWhite");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.GameModeTakeCharacterImage.SpawnCharacter
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CostumeId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CostumeColor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECharacterId                            CharaID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Variation                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacterBattle*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ACharacterBattle* AGameModeTakeCharacterImage::SpawnCharacter(int32 PlayerId, int32 CostumeId, int32 CostumeColor, ECharacterId CharaID, const struct FTransform& Transform, int32 Variation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameModeTakeCharacterImage", "SpawnCharacter");

	Params::GameModeTakeCharacterImage_SpawnCharacter Parms{};

	Parms.PlayerId = PlayerId;
	Parms.CostumeId = CostumeId;
	Parms.CostumeColor = CostumeColor;
	Parms.CharaID = CharaID;
	Parms.Transform = std::move(Transform);
	Parms.Variation = Variation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GameModeTakeCharacterImage.StopCloth
// (Final, Native, Public, BlueprintCallable)

void AGameModeTakeCharacterImage::StopCloth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameModeTakeCharacterImage", "StopCloth");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameModeTakeCharacterImage.UpdateResource
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture*                         Texture                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameModeTakeCharacterImage::UpdateResource(class UTexture* Texture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameModeTakeCharacterImage", "UpdateResource");

	Params::GameModeTakeCharacterImage_UpdateResource Parms{};

	Parms.Texture = Texture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameModeTutorial.BPTutorialBattleChecker2
// (Event, Public, BlueprintEvent)

void AGameModeTutorial::BPTutorialBattleChecker2()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameModeTutorial", "BPTutorialBattleChecker2");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction InGameModule.GameStateLobby.CountDownEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStateLobby::CountDownEvent__DelegateSignature(int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateLobby", "CountDownEvent__DelegateSignature");

	Params::GameStateLobby_CountDownEvent__DelegateSignature Parms{};

	Parms.Count = Count;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.GameStateLobby.DisplayMatchingInfo
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// int32                                   PlayerNum                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameStateLobby::DisplayMatchingInfo(int32 PlayerNum, float Time, bool bBot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateLobby", "DisplayMatchingInfo");

	Params::GameStateLobby_DisplayMatchingInfo Parms{};

	Parms.PlayerNum = PlayerNum;
	Parms.Time = Time;
	Parms.bBot = bBot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction InGameModule.GameStateLobby.GameSequenceEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void AGameStateLobby::GameSequenceEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateLobby", "GameSequenceEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.GameStateLobby.MulticastLoadSupplyAbility
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// TArray<struct FCharacterAbilityInfo>    CharacterIdList                                        (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AGameStateLobby::MulticastLoadSupplyAbility(const TArray<struct FCharacterAbilityInfo>& CharacterIdList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateLobby", "MulticastLoadSupplyAbility");

	Params::GameStateLobby_MulticastLoadSupplyAbility Parms{};

	Parms.CharacterIdList = std::move(CharacterIdList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateLobby.OnAddedPlayerLobby
// (Final, Native, Private)

void AGameStateLobby::OnAddedPlayerLobby()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateLobby", "OnAddedPlayerLobby");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateLobby.OnRemovedPlayerLobby
// (Final, Native, Private)

void AGameStateLobby::OnRemovedPlayerLobby()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateLobby", "OnRemovedPlayerLobby");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateLobby.OnRep_CountDown
// (Final, Native, Private)

void AGameStateLobby::OnRep_CountDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateLobby", "OnRep_CountDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateLobby.OnRep_LobbySequence
// (Final, Native, Private)

void AGameStateLobby::OnRep_LobbySequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateLobby", "OnRep_LobbySequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateLobby.OnRep_MatchingCompleted
// (Final, Native, Private)

void AGameStateLobby::OnRep_MatchingCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateLobby", "OnRep_MatchingCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateLobby.OnRep_ReadyToBattle
// (Final, Native, Private)

void AGameStateLobby::OnRep_ReadyToBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateLobby", "OnRep_ReadyToBattle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateLobby.PreGameStart
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void AGameStateLobby::PreGameStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateLobby", "PreGameStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateLobby.ReadyToBattle
// (Final, Native, Private)

void AGameStateLobby::ReadyToBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateLobby", "ReadyToBattle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GameStateLobby.GetLobbySequence
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELobbySequence                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELobbySequence AGameStateLobby::GetLobbySequence() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameStateLobby", "GetLobbySequence");

	Params::GameStateLobby_GetLobbySequence Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.GenericCounter.SetCaptionColor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FSlateColor                      InColor                                                (Parm, NativeAccessSpecifierPublic)

void UGenericCounter::SetCaptionColor(const struct FSlateColor& InColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GenericCounter", "SetCaptionColor");

	Params::GenericCounter_SetCaptionColor Parms{};

	Parms.InColor = std::move(InColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GenericCounter.SetCounterColor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FSlateColor                      InColor                                                (Parm, NativeAccessSpecifierPublic)

void UGenericCounter::SetCounterColor(const struct FSlateColor& InColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GenericCounter", "SetCounterColor");

	Params::GenericCounter_SetCounterColor Parms{};

	Parms.InColor = std::move(InColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GenericCounter.SetCounterNum
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGenericCounter::SetCounterNum(int32 Num)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GenericCounter", "SetCounterNum");

	Params::GenericCounter_SetCounterNum Parms{};

	Parms.Num = Num;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GotoResultAppWidget.OnCancelEvent
// (Final, Native, Public)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGotoResultAppWidget::OnCancelEvent(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GotoResultAppWidget", "OnCancelEvent");

	Params::GotoResultAppWidget_OnCancelEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GotoResultAppWidget.OnCloseLevelEvent
// (Final, Native, Public)

void UGotoResultAppWidget::OnCloseLevelEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GotoResultAppWidget", "OnCloseLevelEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GotoResultAppWidget.OnPopupButtonEvent
// (Final, Native, Public)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    LeftButton                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGotoResultAppWidget::OnPopupButtonEvent(class UAppWidget* Widget, EWidgetInputType InputType, bool LeftButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GotoResultAppWidget", "OnPopupButtonEvent");

	Params::GotoResultAppWidget_OnPopupButtonEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;
	Parms.LeftButton = LeftButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GroundPositionEffectComponent.DelaySpawn
// (Final, Native, Protected)

void UGroundPositionEffectComponent::DelaySpawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GroundPositionEffectComponent", "DelaySpawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GroundPositionEffectComponent.OnHitBackground
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FHitResult                       HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGroundPositionEffectComponent::OnHitBackground(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GroundPositionEffectComponent", "OnHitBackground");

	Params::GroundPositionEffectComponent_OnHitBackground Parms{};

	Parms.HitResult = std::move(HitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.GroundPositionEffectComponent.OnHitCharacter
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FHitResult                       HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGroundPositionEffectComponent::OnHitCharacter(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GroundPositionEffectComponent", "OnHitCharacter");

	Params::GroundPositionEffectComponent_OnHitCharacter Parms{};

	Parms.HitResult = std::move(HitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HitEffectDataAsset.SortByAlphabetName
// (Native, Public)

void UHitEffectDataAsset::SortByAlphabetName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitEffectDataAsset", "SortByAlphabetName");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HitEffectDataAsset.SortByEnum
// (Native, Public)

void UHitEffectDataAsset::SortByEnum()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HitEffectDataAsset", "SortByEnum");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDAbilityPresenter.SwitchShortcutInfoVisibility
// (Final, Native, Private, Const)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHUDAbilityPresenter::SwitchShortcutInfoVisibility(bool bVisible) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDAbilityPresenter", "SwitchShortcutInfoVisibility");

	Params::HUDAbilityPresenter_SwitchShortcutInfoVisibility Parms{};

	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDAbilityPresenter.UpdateUIOnSettings
// (Final, Native, Private, Const)

void AHUDAbilityPresenter::UpdateUIOnSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDAbilityPresenter", "UpdateUIOnSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDBasePresenter.IsBlockMember
// (Final, Native, Private, Const)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHUDBasePresenter::IsBlockMember(const class FString& PlayerId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDBasePresenter", "IsBlockMember");

	Params::HUDBasePresenter_IsBlockMember Parms{};

	Parms.PlayerId = std::move(PlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.HUDBasePresenter.ShowGuardBreak
// (Final, Native, Private, Const)
// Parameters:
// class ACharacterBattle*                 GuardBrokenCharacter                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMyMurderer                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGuardBreakAndKO                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHUDBasePresenter::ShowGuardBreak(class ACharacterBattle* GuardBrokenCharacter, bool bMyMurderer, bool bGuardBreakAndKO) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDBasePresenter", "ShowGuardBreak");

	Params::HUDBasePresenter_ShowGuardBreak Parms{};

	Parms.GuardBrokenCharacter = GuardBrokenCharacter;
	Parms.bMyMurderer = bMyMurderer;
	Parms.bGuardBreakAndKO = bGuardBreakAndKO;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDBasePresenter.ShowKnockDown
// (Final, Native, Private, Const)
// Parameters:
// class ACharacterBattle*                 DownCharacter                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMyMurderer                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGuardBreakAndKO                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHUDBasePresenter::ShowKnockDown(class ACharacterBattle* DownCharacter, bool bMyMurderer, bool bGuardBreakAndKO) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDBasePresenter", "ShowKnockDown");

	Params::HUDBasePresenter_ShowKnockDown Parms{};

	Parms.DownCharacter = DownCharacter;
	Parms.bMyMurderer = bMyMurderer;
	Parms.bGuardBreakAndKO = bGuardBreakAndKO;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HudCommandControlComponent.BP_EliminateCommandHudRemnants
// (Final, Native, Public, BlueprintCallable)

void UHudCommandControlComponent::BP_EliminateCommandHudRemnants()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "BP_EliminateCommandHudRemnants");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HudCommandControlComponent.BP_PushPrimaryInputComponent
// (Final, Native, Public, BlueprintCallable)

void UHudCommandControlComponent::BP_PushPrimaryInputComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "BP_PushPrimaryInputComponent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HudCommandControlComponent.BP_ReturnInputSystemFromUIToGame
// (Final, Native, Public, BlueprintCallable)

void UHudCommandControlComponent::BP_ReturnInputSystemFromUIToGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "BP_ReturnInputSystemFromUIToGame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HudCommandControlComponent.CommitPin
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EMarkerType                             MarkerType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    IsAlert                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPlaceFromMap                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHudCommandControlComponent::CommitPin(EMarkerType MarkerType, const struct FHitResult& HitResult, const bool IsAlert, const bool bPlaceFromMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "CommitPin");

	Params::HudCommandControlComponent_CommitPin Parms{};

	Parms.MarkerType = MarkerType;
	Parms.HitResult = std::move(HitResult);
	Parms.IsAlert = IsAlert;
	Parms.bPlaceFromMap = bPlaceFromMap;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HudCommandControlComponent.DestroyPin_OnServer
// (Net, NetReliable, Native, Event, Public, NetServer)

void UHudCommandControlComponent::DestroyPin_OnServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "DestroyPin_OnServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HudCommandControlComponent.DispatchDestructionToUI
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class ACommunicationPinActor*           DestroyedActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHudCommandControlComponent::DispatchDestructionToUI(class ACommunicationPinActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "DispatchDestructionToUI");

	Params::HudCommandControlComponent_DispatchDestructionToUI Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HudCommandControlComponent.FinishHolding
// (Final, Native, Public)

void UHudCommandControlComponent::FinishHolding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "FinishHolding");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HudCommandControlComponent.FlipPrimaryInputComponent
// (Final, Native, Public)

void UHudCommandControlComponent::FlipPrimaryInputComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "FlipPrimaryInputComponent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HudCommandControlComponent.GetAnimTable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECharacterId                            Whose                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UDataTable>        ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UDataTable> UHudCommandControlComponent::GetAnimTable(ECharacterId Whose)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "GetAnimTable");

	Params::HudCommandControlComponent_GetAnimTable Parms{};

	Parms.Whose = Whose;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction InGameModule.HudCommandControlComponent.HudWheelCommandEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UHudCommandControlComponent::HudWheelCommandEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "HudWheelCommandEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.HudCommandControlComponent.OnInteractionUpdated
// (Final, Native, Public)
// Parameters:
// class UInteractTargetComponent*         TargetComponent                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHudCommandControlComponent::OnInteractionUpdated(class UInteractTargetComponent* TargetComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "OnInteractionUpdated");

	Params::HudCommandControlComponent_OnInteractionUpdated Parms{};

	Parms.TargetComponent = TargetComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction InGameModule.HudCommandControlComponent.OnStartButtonPressedInMenu__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UHudCommandControlComponent::OnStartButtonPressedInMenu__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "OnStartButtonPressedInMenu__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction InGameModule.HudCommandControlComponent.PinLifeEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class ACommunicationPinActor*           SpawnedPinActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHudCommandControlComponent::PinLifeEvent__DelegateSignature(class ACommunicationPinActor* SpawnedPinActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "PinLifeEvent__DelegateSignature");

	Params::HudCommandControlComponent_PinLifeEvent__DelegateSignature Parms{};

	Parms.SpawnedPinActor = SpawnedPinActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.HudCommandControlComponent.PopWinDemoButtonInputComponent
// (Final, Native, Public)

void UHudCommandControlComponent::PopWinDemoButtonInputComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "PopWinDemoButtonInputComponent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HudCommandControlComponent.PushLvUpButtonInputComponent
// (Final, Native, Public)

void UHudCommandControlComponent::PushLvUpButtonInputComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "PushLvUpButtonInputComponent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HudCommandControlComponent.PushOptionMenuButtonInputComponent
// (Final, Native, Public)

void UHudCommandControlComponent::PushOptionMenuButtonInputComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "PushOptionMenuButtonInputComponent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HudCommandControlComponent.PushPrimaryInputComponent
// (Final, Native, Public)

void UHudCommandControlComponent::PushPrimaryInputComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "PushPrimaryInputComponent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HudCommandControlComponent.PushWinDemoInputComponent
// (Final, Native, Public)

void UHudCommandControlComponent::PushWinDemoInputComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "PushWinDemoInputComponent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HudCommandControlComponent.RegisterPin
// (Final, Native, Public)
// Parameters:
// class ACommunicationPinActor*           Pin                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHudCommandControlComponent::RegisterPin(class ACommunicationPinActor* Pin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "RegisterPin");

	Params::HudCommandControlComponent_RegisterPin Parms{};

	Parms.Pin = Pin;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HudCommandControlComponent.RemovePinFromList
// (Net, Native, Event, Public, NetClient)
// Parameters:
// uint8                                   PinGuid                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHudCommandControlComponent::RemovePinFromList(uint8 PinGuid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "RemovePinFromList");

	Params::HudCommandControlComponent_RemovePinFromList Parms{};

	Parms.PinGuid = PinGuid;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HudCommandControlComponent.RespawnedPushPrimaryInputComponent
// (Final, Native, Public)

void UHudCommandControlComponent::RespawnedPushPrimaryInputComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "RespawnedPushPrimaryInputComponent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HudCommandControlComponent.RespondToAllySignal
// (Final, Native, Private)

void UHudCommandControlComponent::RespondToAllySignal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "RespondToAllySignal");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HudCommandControlComponent.RespondToSignalTwo
// (Final, Native, Private)

void UHudCommandControlComponent::RespondToSignalTwo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "RespondToSignalTwo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HudCommandControlComponent.SendAbilityRequest_ToServer
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class APlayerStateBattle*               Sender                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMdAbilityType                          AbilityType                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAttackId                               AttackId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHudCommandControlComponent::SendAbilityRequest_ToServer(const class APlayerStateBattle* Sender, const EMdAbilityType AbilityType, const EAttackId AttackId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "SendAbilityRequest_ToServer");

	Params::HudCommandControlComponent_SendAbilityRequest_ToServer Parms{};

	Parms.Sender = Sender;
	Parms.AbilityType = AbilityType;
	Parms.AttackId = AttackId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HudCommandControlComponent.SendMarkerCancelMessage
// (Final, Native, Public)
// Parameters:
// class ACommunicationPinActor*           PinActor                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHudCommandControlComponent::SendMarkerCancelMessage(const class ACommunicationPinActor* PinActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "SendMarkerCancelMessage");

	Params::HudCommandControlComponent_SendMarkerCancelMessage Parms{};

	Parms.PinActor = PinActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HudCommandControlComponent.SendSupplyRequest_ToServer
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class APlayerStateBattle*               Sender                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SupplyId                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHudCommandControlComponent::SendSupplyRequest_ToServer(const class APlayerStateBattle* Sender, const class FName& SupplyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "SendSupplyRequest_ToServer");

	Params::HudCommandControlComponent_SendSupplyRequest_ToServer Parms{};

	Parms.Sender = Sender;
	Parms.SupplyId = SupplyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HudCommandControlComponent.SendTextMessage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           InKeyForTable                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SendToMyself                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHudCommandControlComponent::SendTextMessage(const class FString& InKeyForTable, bool SendToMyself)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "SendTextMessage");

	Params::HudCommandControlComponent_SendTextMessage Parms{};

	Parms.InKeyForTable = std::move(InKeyForTable);
	Parms.SendToMyself = SendToMyself;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HudCommandControlComponent.ServerCancelPin
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class ACommunicationPinActor*           PinActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHudCommandControlComponent::ServerCancelPin(class ACommunicationPinActor* PinActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "ServerCancelPin");

	Params::HudCommandControlComponent_ServerCancelPin Parms{};

	Parms.PinActor = PinActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HudCommandControlComponent.ServerOutputDoubleClickTime
// (Final, Net, Native, Event, Private, NetServer)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHudCommandControlComponent::ServerOutputDoubleClickTime(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "ServerOutputDoubleClickTime");

	Params::HudCommandControlComponent_ServerOutputDoubleClickTime Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HudCommandControlComponent.ServerPlacePinEvent
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// struct FPinInfo                         PinInfo                                                (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHudCommandControlComponent::ServerPlacePinEvent(const struct FPinInfo& PinInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "ServerPlacePinEvent");

	Params::HudCommandControlComponent_ServerPlacePinEvent Parms{};

	Parms.PinInfo = std::move(PinInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HudCommandControlComponent.ServerSendTextMessage
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class FString                           InKeyForTable                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHudCommandControlComponent::ServerSendTextMessage(const class FString& InKeyForTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "ServerSendTextMessage");

	Params::HudCommandControlComponent_ServerSendTextMessage Parms{};

	Parms.InKeyForTable = std::move(InKeyForTable);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HudCommandControlComponent.SetFirstUseSupply
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             NewShortcut                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHudCommandControlComponent::SetFirstUseSupply(class FName NewShortcut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "SetFirstUseSupply");

	Params::HudCommandControlComponent_SetFirstUseSupply Parms{};

	Parms.NewShortcut = NewShortcut;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HudCommandControlComponent.SignalWheelReady
// (Final, Native, Public)

void UHudCommandControlComponent::SignalWheelReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "SignalWheelReady");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HudCommandControlComponent.SupplyWheelReady
// (Final, Native, Public)

void UHudCommandControlComponent::SupplyWheelReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "SupplyWheelReady");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HudCommandControlComponent.GetCurrentSupplyNumber
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             SupplyId                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UHudCommandControlComponent::GetCurrentSupplyNumber(const class FName& SupplyId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "GetCurrentSupplyNumber");

	Params::HudCommandControlComponent_GetCurrentSupplyNumber Parms{};

	Parms.SupplyId = SupplyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.HudCommandControlComponent.GetHitResult
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FHitResult                       HitResult                                              (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHudCommandControlComponent::GetHitResult(struct FHitResult* HitResult) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "GetHitResult");

	Params::HudCommandControlComponent_GetHitResult Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (HitResult != nullptr)
		*HitResult = std::move(Parms.HitResult);

	return Parms.ReturnValue;
}


// Function InGameModule.HudCommandControlComponent.PlayEmote
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// int32                                   EmoteCode                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHudCommandControlComponent::PlayEmote(int32 EmoteCode) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudCommandControlComponent", "PlayEmote");

	Params::HudCommandControlComponent_PlayEmote Parms{};

	Parms.EmoteCode = EmoteCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDCrossHairsPresenter.SwitchCrossHairsVisibility
// (Final, Native, Public, Const)
// Parameters:
// bool                                    bVisibility                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHUDCrossHairsPresenter::SwitchCrossHairsVisibility(bool bVisibility) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDCrossHairsPresenter", "SwitchCrossHairsVisibility");

	Params::HUDCrossHairsPresenter_SwitchCrossHairsVisibility Parms{};

	Parms.bVisibility = bVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDCrossHairsPresenter.UpdateUIOnSettings
// (Final, Native, Public, Const)

void AHUDCrossHairsPresenter::UpdateUIOnSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDCrossHairsPresenter", "UpdateUIOnSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDDispatchComponent.OnBeginSquadMemberCircularProgressRate_ToClient
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// ECircularProgressType                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerStateBattle*               PLAYER                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OpenSpan                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHUDDispatchComponent::OnBeginSquadMemberCircularProgressRate_ToClient(ECircularProgressType Type, class APlayerStateBattle* PLAYER, float OpenSpan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDDispatchComponent", "OnBeginSquadMemberCircularProgressRate_ToClient");

	Params::HUDDispatchComponent_OnBeginSquadMemberCircularProgressRate_ToClient Parms{};

	Parms.Type = Type;
	Parms.PLAYER = PLAYER;
	Parms.OpenSpan = OpenSpan;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDDispatchComponent.OnEndSquadMemberCircularProgressRate_ToClient
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class APlayerStateBattle*               PLAYER                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHUDDispatchComponent::OnEndSquadMemberCircularProgressRate_ToClient(class APlayerStateBattle* PLAYER)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDDispatchComponent", "OnEndSquadMemberCircularProgressRate_ToClient");

	Params::HUDDispatchComponent_OnEndSquadMemberCircularProgressRate_ToClient Parms{};

	Parms.PLAYER = PLAYER;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDGameButtonGuidePresenter.HideButtonGuides
// (Final, Native, Public)

void AHUDGameButtonGuidePresenter::HideButtonGuides()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDGameButtonGuidePresenter", "HideButtonGuides");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDGameButtonGuidePresenter.ShowButtonGuides
// (Final, Native, Public)

void AHUDGameButtonGuidePresenter::ShowButtonGuides()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDGameButtonGuidePresenter", "ShowButtonGuides");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDGameButtonGuidePresenter.UpdateUIOnSettings
// (Final, Native, Private)

void AHUDGameButtonGuidePresenter::UpdateUIOnSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDGameButtonGuidePresenter", "UpdateUIOnSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDInGameMiscInfoPresenter.OnChangedViewTarget
// (Final, Native, Private)
// Parameters:
// class APlayerStateBattle*               PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHUDInGameMiscInfoPresenter::OnChangedViewTarget(class APlayerStateBattle* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDInGameMiscInfoPresenter", "OnChangedViewTarget");

	Params::HUDInGameMiscInfoPresenter_OnChangedViewTarget Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDInGameMiscInfoPresenter.UpdateDamagePoint
// (Final, Native, Private)

void AHUDInGameMiscInfoPresenter::UpdateDamagePoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDInGameMiscInfoPresenter", "UpdateDamagePoint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDInGameMiscInfoPresenter.UpdateUIOnSettings
// (Final, Native, Private)

void AHUDInGameMiscInfoPresenter::UpdateUIOnSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDInGameMiscInfoPresenter", "UpdateUIOnSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDKillLogPresenter.UpdateUIOnSettings
// (Final, Native, Private, Const)

void AHUDKillLogPresenter::UpdateUIOnSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDKillLogPresenter", "UpdateUIOnSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDLevelUpShortCutPresenter.LvUpWidgetShowBegin
// (Final, Native, Private)

void AHUDLevelUpShortCutPresenter::LvUpWidgetShowBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDLevelUpShortCutPresenter", "LvUpWidgetShowBegin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDLevelUpShortCutPresenter.LvUpWidgetShowEnd
// (Final, Native, Private)

void AHUDLevelUpShortCutPresenter::LvUpWidgetShowEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDLevelUpShortCutPresenter", "LvUpWidgetShowEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDLevelUpShortCutPresenter.SwitchLvUpShortCutVisibility
// (Final, Native, Private, Const)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHUDLevelUpShortCutPresenter::SwitchLvUpShortCutVisibility(bool bVisible) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDLevelUpShortCutPresenter", "SwitchLvUpShortCutVisibility");

	Params::HUDLevelUpShortCutPresenter_SwitchLvUpShortCutVisibility Parms{};

	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDMagazineInterface.ViewDoWorkOnLevelUp
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// EAttackId                               SlotAttackId                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHUDMagazineInterface::ViewDoWorkOnLevelUp(EAttackId SlotAttackId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDMagazineInterface", "ViewDoWorkOnLevelUp");

	Params::HUDMagazineInterface_ViewDoWorkOnLevelUp Parms{};

	Parms.SlotAttackId = SlotAttackId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDMagazineInterface.ViewUpdateMagazineState
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// EAttackId                               SlotAttackId                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewAmmoNum                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewReloadRate                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHUDMagazineInterface::ViewUpdateMagazineState(EAttackId SlotAttackId, int32 NewAmmoNum, float NewReloadRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDMagazineInterface", "ViewUpdateMagazineState");

	Params::HUDMagazineInterface_ViewUpdateMagazineState Parms{};

	Parms.SlotAttackId = SlotAttackId;
	Parms.NewAmmoNum = NewAmmoNum;
	Parms.NewReloadRate = NewReloadRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDMagazineInterface.ViewUpdateSkillState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EAttackId                               SlotAttackId                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECharacterId                            SkillCharacterId                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAttackId                               SkillAttackId                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHUDMagazineInterface::ViewUpdateSkillState(EAttackId SlotAttackId, ECharacterId SkillCharacterId, EAttackId SkillAttackId, int32 Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDMagazineInterface", "ViewUpdateSkillState");

	Params::HUDMagazineInterface_ViewUpdateSkillState Parms{};

	Parms.SlotAttackId = SlotAttackId;
	Parms.SkillCharacterId = SkillCharacterId;
	Parms.SkillAttackId = SkillAttackId;
	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDMagazinePresenter.ChangeSkill
// (Final, Native, Private)
// Parameters:
// class USkillChangeParam*                SkillChangeParam                                       (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHUDMagazinePresenter::ChangeSkill(const class USkillChangeParam* SkillChangeParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDMagazinePresenter", "ChangeSkill");

	Params::HUDMagazinePresenter_ChangeSkill Parms{};

	Parms.SkillChangeParam = SkillChangeParam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDMagazinePresenter.DoWorkOnLevelUp
// (Final, Native, Private)
// Parameters:
// EAttackId                               SlotAttackId                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHUDMagazinePresenter::DoWorkOnLevelUp(EAttackId SlotAttackId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDMagazinePresenter", "DoWorkOnLevelUp");

	Params::HUDMagazinePresenter_DoWorkOnLevelUp Parms{};

	Parms.SlotAttackId = SlotAttackId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDMagazinePresenter.OnSkillLevelUp
// (Final, Native, Private)
// Parameters:
// EAttackId                               AttackId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHUDMagazinePresenter::OnSkillLevelUp(EAttackId AttackId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDMagazinePresenter", "OnSkillLevelUp");

	Params::HUDMagazinePresenter_OnSkillLevelUp Parms{};

	Parms.AttackId = AttackId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDMagazinePresenter.SendMagazineInfoToWidget
// (Final, Native, Private)
// Parameters:
// EAttackId                               SlotAttackId                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHUDMagazinePresenter::SendMagazineInfoToWidget(EAttackId SlotAttackId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDMagazinePresenter", "SendMagazineInfoToWidget");

	Params::HUDMagazinePresenter_SendMagazineInfoToWidget Parms{};

	Parms.SlotAttackId = SlotAttackId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDMagazinePresenter.SetSpecialActionParam
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FMagazineViewInfo                Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AHUDMagazinePresenter::SetSpecialActionParam(const struct FMagazineViewInfo& Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDMagazinePresenter", "SetSpecialActionParam");

	Params::HUDMagazinePresenter_SetSpecialActionParam Parms{};

	Parms.Param = std::move(Param);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDMagazinePresenter.SwitchCharacterSpecialActionAvailability
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FRequestUIData                   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AHUDMagazinePresenter::SwitchCharacterSpecialActionAvailability(const struct FRequestUIData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDMagazinePresenter", "SwitchCharacterSpecialActionAvailability");

	Params::HUDMagazinePresenter_SwitchCharacterSpecialActionAvailability Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDMagazinePresenter.TrainingCharacterChanged
// (Final, Native, Private)
// Parameters:
// class APlayerStateBattle*               PlayerStateBattle                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHUDMagazinePresenter::TrainingCharacterChanged(class APlayerStateBattle* PlayerStateBattle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDMagazinePresenter", "TrainingCharacterChanged");

	Params::HUDMagazinePresenter_TrainingCharacterChanged Parms{};

	Parms.PlayerStateBattle = PlayerStateBattle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDMagazinePresenter.UpdateTransformUIVisibility
// (Final, Native, Private, Const)

void AHUDMagazinePresenter::UpdateTransformUIVisibility() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDMagazinePresenter", "UpdateTransformUIVisibility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDMagazinePresenter.UpdateUIOnSettings
// (Final, Native, Private, Const)

void AHUDMagazinePresenter::UpdateUIOnSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDMagazinePresenter", "UpdateUIOnSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDPlayerTagPresenter.ChangedViewTarget
// (Final, Native, Private)
// Parameters:
// class APlayerStateBattle*               PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHUDPlayerTagPresenter::ChangedViewTarget(class APlayerStateBattle* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDPlayerTagPresenter", "ChangedViewTarget");

	Params::HUDPlayerTagPresenter_ChangedViewTarget Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDPlayerTagPresenter.SendDamageInfo
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FAttackHitData                   HitData                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AHUDPlayerTagPresenter::SendDamageInfo(const struct FAttackHitData& HitData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDPlayerTagPresenter", "SendDamageInfo");

	Params::HUDPlayerTagPresenter_SendDamageInfo Parms{};

	Parms.HitData = std::move(HitData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDPlusUltraPresenter.ChangeViewTarget
// (Final, Native, Private)
// Parameters:
// class APlayerState*                     ViewTarget                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHUDPlusUltraPresenter::ChangeViewTarget(const class APlayerState* ViewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDPlusUltraPresenter", "ChangeViewTarget");

	Params::HUDPlusUltraPresenter_ChangeViewTarget Parms{};

	Parms.ViewTarget = ViewTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDPlusUltraPresenter.SwitchPlusUltraVisibility
// (Final, Native, Private, Const)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHUDPlusUltraPresenter::SwitchPlusUltraVisibility(bool bVisible) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDPlusUltraPresenter", "SwitchPlusUltraVisibility");

	Params::HUDPlusUltraPresenter_SwitchPlusUltraVisibility Parms{};

	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDPlusUltraPresenter.UpdateUIOnSettings
// (Final, Native, Private, Const)

void AHUDPlusUltraPresenter::UpdateUIOnSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDPlusUltraPresenter", "UpdateUIOnSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDStatusPresenter.BeginSquadMemberAction
// (Final, Native, Private)
// Parameters:
// ECircularProgressType                   Type                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerStateBattle*               PLAYER                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OpenSpan                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHUDStatusPresenter::BeginSquadMemberAction(const ECircularProgressType Type, const class APlayerStateBattle* PLAYER, const float OpenSpan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDStatusPresenter", "BeginSquadMemberAction");

	Params::HUDStatusPresenter_BeginSquadMemberAction Parms{};

	Parms.Type = Type;
	Parms.PLAYER = PLAYER;
	Parms.OpenSpan = OpenSpan;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDStatusPresenter.BeginUsingSupply
// (Final, Native, Private, HasOutParams)
// Parameters:
// class USupplyHolder*                    Holder                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             UsedSupply                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHUDStatusPresenter::BeginUsingSupply(const class USupplyHolder* Holder, const class FName& UsedSupply)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDStatusPresenter", "BeginUsingSupply");

	Params::HUDStatusPresenter_BeginUsingSupply Parms{};

	Parms.Holder = Holder;
	Parms.UsedSupply = UsedSupply;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDStatusPresenter.ComparisonUpdateTargetStatus
// (Final, Native, Public)
// Parameters:
// class APlayerStateBattle*               Winner                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHUDStatusPresenter::ComparisonUpdateTargetStatus(class APlayerStateBattle* Winner, bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDStatusPresenter", "ComparisonUpdateTargetStatus");

	Params::HUDStatusPresenter_ComparisonUpdateTargetStatus Parms{};

	Parms.Winner = Winner;
	Parms.Success = Success;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDStatusPresenter.EndSquadMemberAction
// (Final, Native, Private)
// Parameters:
// class APlayerStateBattle*               PLAYER                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHUDStatusPresenter::EndSquadMemberAction(const class APlayerStateBattle* PLAYER)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDStatusPresenter", "EndSquadMemberAction");

	Params::HUDStatusPresenter_EndSquadMemberAction Parms{};

	Parms.PLAYER = PLAYER;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDStatusPresenter.EndUsingSupply
// (Final, Native, Private)
// Parameters:
// class APlayerStateBattle*               UsedPlayer                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHUDStatusPresenter::EndUsingSupply(const class APlayerStateBattle* UsedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDStatusPresenter", "EndUsingSupply");

	Params::HUDStatusPresenter_EndUsingSupply Parms{};

	Parms.UsedPlayer = UsedPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDStatusPresenter.OnAddedPlayer
// (Final, Native, Public)
// Parameters:
// class AHerovsPlayerState*               AddedPlayer                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHUDStatusPresenter::OnAddedPlayer(class AHerovsPlayerState* AddedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDStatusPresenter", "OnAddedPlayer");

	Params::HUDStatusPresenter_OnAddedPlayer Parms{};

	Parms.AddedPlayer = AddedPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDStatusPresenter.OnPlayerChanged
// (Final, Native, Private)
// Parameters:
// class APlayerStateBattle*               PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHUDStatusPresenter::OnPlayerChanged(class APlayerStateBattle* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDStatusPresenter", "OnPlayerChanged");

	Params::HUDStatusPresenter_OnPlayerChanged Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDStatusPresenter.PlayAbilityRequestSenderNotification
// (Final, Native, Public)
// Parameters:
// int16                                   SenderPlayerId                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMdAbilityType                          AbilityType                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAttackId                               AttackId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHUDStatusPresenter::PlayAbilityRequestSenderNotification(int16 SenderPlayerId, const EMdAbilityType AbilityType, const EAttackId AttackId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDStatusPresenter", "PlayAbilityRequestSenderNotification");

	Params::HUDStatusPresenter_PlayAbilityRequestSenderNotification Parms{};

	Parms.SenderPlayerId = SenderPlayerId;
	Parms.AbilityType = AbilityType;
	Parms.AttackId = AttackId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDStatusPresenter.PlaySupplyRequestSenderNotification
// (Final, Native, Public, HasOutParams)
// Parameters:
// int16                                   SenderPlayerId                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SupplyId                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHUDStatusPresenter::PlaySupplyRequestSenderNotification(int16 SenderPlayerId, const class FName& SupplyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDStatusPresenter", "PlaySupplyRequestSenderNotification");

	Params::HUDStatusPresenter_PlaySupplyRequestSenderNotification Parms{};

	Parms.SenderPlayerId = SenderPlayerId;
	Parms.SupplyId = SupplyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDStatusPresenter.SwitchAllyPlayerStatusVisibility
// (Final, Native, Private, Const)
// Parameters:
// bool                                    bVisibility                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHUDStatusPresenter::SwitchAllyPlayerStatusVisibility(bool bVisibility) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDStatusPresenter", "SwitchAllyPlayerStatusVisibility");

	Params::HUDStatusPresenter_SwitchAllyPlayerStatusVisibility Parms{};

	Parms.bVisibility = bVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDStatusPresenter.SwitchLocalPlayerStatusVisibility
// (Final, Native, Private, Const)
// Parameters:
// bool                                    bVisibility                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHUDStatusPresenter::SwitchLocalPlayerStatusVisibility(bool bVisibility) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDStatusPresenter", "SwitchLocalPlayerStatusVisibility");

	Params::HUDStatusPresenter_SwitchLocalPlayerStatusVisibility Parms{};

	Parms.bVisibility = bVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.HUDStatusPresenter.UpdateUIOnSettings
// (Final, Native, Private, Const)

void AHUDStatusPresenter::UpdateUIOnSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HUDStatusPresenter", "UpdateUIOnSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InBattlePlayerNotificationPresenter.LeadersKOSetUp
// (Final, Native, Public)
// Parameters:
// ELeadersBattleTeamType                  Team                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Score                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PrevScore                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInBattlePlayerNotificationPresenter::LeadersKOSetUp(ELeadersBattleTeamType Team, int32 Score, int32 PrevScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InBattlePlayerNotificationPresenter", "LeadersKOSetUp");

	Params::InBattlePlayerNotificationPresenter_LeadersKOSetUp Parms{};

	Parms.Team = Team;
	Parms.Score = Score;
	Parms.PrevScore = PrevScore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InGameAbilityWidget.BP_GetAttackId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EAttackId                               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAttackId UInGameAbilityWidget::BP_GetAttackId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameAbilityWidget", "BP_GetAttackId");

	Params::InGameAbilityWidget_BP_GetAttackId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.InGameButtonGuide.CloseSystemMenu
// (Final, Native, Public)

void UInGameButtonGuide::CloseSystemMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameButtonGuide", "CloseSystemMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InGameButtonGuide.ForceSetNewVisibilityFlag
// (Final, Native, Public)
// Parameters:
// bool                                    NewVisibility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInGameButtonGuide::ForceSetNewVisibilityFlag(bool NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameButtonGuide", "ForceSetNewVisibilityFlag");

	Params::InGameButtonGuide_ForceSetNewVisibilityFlag Parms{};

	Parms.NewVisibility = NewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InGameButtonGuide.SetGaugePercent
// (Final, Native, Public)

void UInGameButtonGuide::SetGaugePercent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameButtonGuide", "SetGaugePercent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InGameButtonGuide.SetSholderImage
// (Final, Native, Public)
// Parameters:
// int32                                   MaxSholderHolder                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInGameButtonGuide::SetSholderImage(int32 MaxSholderHolder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameButtonGuide", "SetSholderImage");

	Params::InGameButtonGuide_SetSholderImage Parms{};

	Parms.MaxSholderHolder = MaxSholderHolder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InGameCheat.ChangeCharacter
// (Final, Exec, Native, Public)
// Parameters:
// ECharacterId                            CharaID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInGameCheat::ChangeCharacter(ECharacterId CharaID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameCheat", "ChangeCharacter");

	Params::InGameCheat_ChangeCharacter Parms{};

	Parms.CharaID = CharaID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InGameCheat.DEF_DMG
// (Final, Exec, Native, Public)

void UInGameCheat::DEF_DMG()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameCheat", "DEF_DMG");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InGameCheat.FFOFF
// (Final, Exec, Native, Public)

void UInGameCheat::FFOFF()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameCheat", "FFOFF");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InGameCheat.FFON
// (Final, Exec, Native, Public)

void UInGameCheat::FFON()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameCheat", "FFON");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InGameCheat.GP_HEAL
// (Final, Exec, Native, Public)

void UInGameCheat::GP_HEAL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameCheat", "GP_HEAL");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InGameCheat.HP_HEAL
// (Final, Exec, Native, Public)

void UInGameCheat::HP_HEAL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameCheat", "HP_HEAL");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InGameCheat.NO_DMG
// (Final, Exec, Native, Public)

void UInGameCheat::NO_DMG()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameCheat", "NO_DMG");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InGameCheatManager.DiffMagazineParam
// (Final, Exec, Native, Protected)
// Parameters:
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInGameCheatManager::DiffMagazineParam(const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameCheatManager", "DiffMagazineParam");

	Params::InGameCheatManager_DiffMagazineParam Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InGameDecalComponent.SetMID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceDynamic*         Mid                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* UInGameDecalComponent::SetMID(class UMaterialInstanceDynamic* Mid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameDecalComponent", "SetMID");

	Params::InGameDecalComponent_SetMID Parms{};

	Parms.Mid = Mid;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.InGameEffectSubsystemBlueprint.SpawnEmitterAtLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*                  EmitterTemplate                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Locate                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rot                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoDestroy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBattleCustomParticleSystemComponent*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBattleCustomParticleSystemComponent* UInGameEffectSubsystemBlueprint::SpawnEmitterAtLocation(const class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, const struct FVector& Locate, const struct FRotator& Rot, const struct FVector& Scale, bool bAutoDestroy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InGameEffectSubsystemBlueprint", "SpawnEmitterAtLocation");

	Params::InGameEffectSubsystemBlueprint_SpawnEmitterAtLocation Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.EmitterTemplate = EmitterTemplate;
	Parms.Locate = std::move(Locate);
	Parms.Rot = std::move(Rot);
	Parms.Scale = std::move(Scale);
	Parms.bAutoDestroy = bAutoDestroy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.InGameEffectSubsystemBlueprint.SpawnEmitterAttached
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*                  EmitterTemplate                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  AttachToComponent                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AttachPointName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// EAttachLocation                         LocationType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoDestroy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBattleCustomParticleSystemComponent*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBattleCustomParticleSystemComponent* UInGameEffectSubsystemBlueprint::SpawnEmitterAttached(const class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, bool bAutoDestroy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InGameEffectSubsystemBlueprint", "SpawnEmitterAttached");

	Params::InGameEffectSubsystemBlueprint_SpawnEmitterAttached Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.EmitterTemplate = EmitterTemplate;
	Parms.AttachToComponent = AttachToComponent;
	Parms.AttachPointName = AttachPointName;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.LocationType = LocationType;
	Parms.bAutoDestroy = bAutoDestroy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.InGameEffectSubsystemBlueprint.SpawnEmitterAttachedLocateOnly
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*                  EmitterTemplate                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  AttachToComponent                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AttachPointName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// EAttachLocation                         LocationType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoDestroy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBattleCustomParticleSystemComponent*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBattleCustomParticleSystemComponent* UInGameEffectSubsystemBlueprint::SpawnEmitterAttachedLocateOnly(const class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, bool bAutoDestroy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InGameEffectSubsystemBlueprint", "SpawnEmitterAttachedLocateOnly");

	Params::InGameEffectSubsystemBlueprint_SpawnEmitterAttachedLocateOnly Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.EmitterTemplate = EmitterTemplate;
	Parms.AttachToComponent = AttachToComponent;
	Parms.AttachPointName = AttachPointName;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.LocationType = LocationType;
	Parms.bAutoDestroy = bAutoDestroy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.InGameInventoryWidget.Cancel
// (Final, Native, Private)

void UInGameInventoryWidget::Cancel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameInventoryWidget", "Cancel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InGameInventoryWidget.Close
// (Final, Native, Private)

void UInGameInventoryWidget::Close()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameInventoryWidget", "Close");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InGameInventoryWidget.CloseOnMapEnlarged
// (Final, Native, Private)

void UInGameInventoryWidget::CloseOnMapEnlarged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameInventoryWidget", "CloseOnMapEnlarged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InGameInventoryWidget.OnChangeControlledPadEvent
// (Final, Native, Protected)

void UInGameInventoryWidget::OnChangeControlledPadEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameInventoryWidget", "OnChangeControlledPadEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InGameInventoryWidget.OnEndUsingSupplyEvent
// (Final, Native, Private)
// Parameters:
// class USupplyHolder*                    SupplyHolder                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInGameInventoryWidget::OnEndUsingSupplyEvent(const class USupplyHolder* SupplyHolder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameInventoryWidget", "OnEndUsingSupplyEvent");

	Params::InGameInventoryWidget_OnEndUsingSupplyEvent Parms{};

	Parms.SupplyHolder = SupplyHolder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InGameInventoryWidget.OnFocusNavigationEventByAbility
// (Final, Native, Private)
// Parameters:
// EUINavigation                           InNavigation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UInGameInventoryWidget::OnFocusNavigationEventByAbility(EUINavigation InNavigation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameInventoryWidget", "OnFocusNavigationEventByAbility");

	Params::InGameInventoryWidget_OnFocusNavigationEventByAbility Parms{};

	Parms.InNavigation = InNavigation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.InGameInventoryWidget.OnFocusNavigationEventByShoulder
// (Final, Native, Private)
// Parameters:
// EUINavigation                           InNavigation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UInGameInventoryWidget::OnFocusNavigationEventByShoulder(EUINavigation InNavigation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameInventoryWidget", "OnFocusNavigationEventByShoulder");

	Params::InGameInventoryWidget_OnFocusNavigationEventByShoulder Parms{};

	Parms.InNavigation = InNavigation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.InGameInventoryWidget.OnFocusNavigationEventBySkill
// (Final, Native, Private)
// Parameters:
// EUINavigation                           InNavigation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UInGameInventoryWidget::OnFocusNavigationEventBySkill(EUINavigation InNavigation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameInventoryWidget", "OnFocusNavigationEventBySkill");

	Params::InGameInventoryWidget_OnFocusNavigationEventBySkill Parms{};

	Parms.InNavigation = InNavigation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.InGameInventoryWidget.OnInputEnterEvent
// (Final, Native, Protected)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInGameInventoryWidget::OnInputEnterEvent(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameInventoryWidget", "OnInputEnterEvent");

	Params::InGameInventoryWidget_OnInputEnterEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InGameInventoryWidget.OnInputFlipOpenOrCloseWindowEvent
// (Final, Native, Private)

void UInGameInventoryWidget::OnInputFlipOpenOrCloseWindowEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameInventoryWidget", "OnInputFlipOpenOrCloseWindowEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InGameInventoryWidget.OnRepPlayerStateEvent
// (Final, Native, Private)
// Parameters:
// class APlayerStateBattle*               PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInGameInventoryWidget::OnRepPlayerStateEvent(class APlayerStateBattle* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameInventoryWidget", "OnRepPlayerStateEvent");

	Params::InGameInventoryWidget_OnRepPlayerStateEvent Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InGameInventoryWidget.OnStartUsingSupplyEvent
// (Final, Native, Private)
// Parameters:
// class USupplyHolder*                    SupplyHolder                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInGameInventoryWidget::OnStartUsingSupplyEvent(const class USupplyHolder* SupplyHolder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameInventoryWidget", "OnStartUsingSupplyEvent");

	Params::InGameInventoryWidget_OnStartUsingSupplyEvent Parms{};

	Parms.SupplyHolder = SupplyHolder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InGameInventoryWidget.OnUpdateSupplyEvent
// (Final, Native, Private, HasOutParams)
// Parameters:
// TArray<class USupplyHolder*>            List                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UInGameInventoryWidget::OnUpdateSupplyEvent(const TArray<class USupplyHolder*>& List)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameInventoryWidget", "OnUpdateSupplyEvent");

	Params::InGameInventoryWidget_OnUpdateSupplyEvent Parms{};

	Parms.List = std::move(List);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InGameInventoryWidget.Open
// (Final, Native, Private)

void UInGameInventoryWidget::Open()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameInventoryWidget", "Open");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InGameInventoryWidget.Update
// (Final, Native, Private, HasOutParams)
// Parameters:
// TArray<class USupplyHolder*>            List                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UInGameInventoryWidget::Update(const TArray<class USupplyHolder*>& List)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameInventoryWidget", "Update");

	Params::InGameInventoryWidget_Update Parms{};

	Parms.List = std::move(List);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InGameInventoryWidget.GetCanFocusFarShoulderWidget
// (Final, Native, Private, Const)
// Parameters:
// class UWidget*                          CheckWidget                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNearWidth                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UItemWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UItemWidget* UInGameInventoryWidget::GetCanFocusFarShoulderWidget(class UWidget* CheckWidget, bool bNearWidth) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameInventoryWidget", "GetCanFocusFarShoulderWidget");

	Params::InGameInventoryWidget_GetCanFocusFarShoulderWidget Parms{};

	Parms.CheckWidget = CheckWidget;
	Parms.bNearWidth = bNearWidth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.InGameInventoryWidget.GetCanFocusNearAbilityWidget
// (Final, Native, Private, Const)
// Parameters:
// class UWidget*                          ShoulderWidget                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUINavigation                           NavigationType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UItemWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UItemWidget* UInGameInventoryWidget::GetCanFocusNearAbilityWidget(class UWidget* ShoulderWidget, EUINavigation NavigationType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameInventoryWidget", "GetCanFocusNearAbilityWidget");

	Params::InGameInventoryWidget_GetCanFocusNearAbilityWidget Parms{};

	Parms.ShoulderWidget = ShoulderWidget;
	Parms.NavigationType = NavigationType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.InGameInventoryWidget.GetCanFocusNearShoulderWidget
// (Final, Native, Private, Const)
// Parameters:
// class UWidget*                          CheckWidget                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UItemWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UItemWidget* UInGameInventoryWidget::GetCanFocusNearShoulderWidget(class UWidget* CheckWidget) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameInventoryWidget", "GetCanFocusNearShoulderWidget");

	Params::InGameInventoryWidget_GetCanFocusNearShoulderWidget Parms{};

	Parms.CheckWidget = CheckWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.InGameInventoryWidget.GetCanFocusNearSkillWidget
// (Final, Native, Private, Const)
// Parameters:
// class UWidget*                          ShoulderWidget                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUINavigation                           NavigationType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UItemWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UItemWidget* UInGameInventoryWidget::GetCanFocusNearSkillWidget(class UWidget* ShoulderWidget, EUINavigation NavigationType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameInventoryWidget", "GetCanFocusNearSkillWidget");

	Params::InGameInventoryWidget_GetCanFocusNearSkillWidget Parms{};

	Parms.ShoulderWidget = ShoulderWidget;
	Parms.NavigationType = NavigationType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.InGameInventoryWidget.GetFocusByRightRowShoulderWidget
// (Final, Native, Private, Const)
// Parameters:
// int32                                   HeightRow                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UInGameInventoryWidget::GetFocusByRightRowShoulderWidget(int32 HeightRow) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameInventoryWidget", "GetFocusByRightRowShoulderWidget");

	Params::InGameInventoryWidget_GetFocusByRightRowShoulderWidget Parms{};

	Parms.HeightRow = HeightRow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.InGameInventoryWidget.GetNavigationCanFocusNearShoulderWidget
// (Final, Native, Private, Const)
// Parameters:
// class UWidget*                          CheckWidget                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUINavigation                           NavigationType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UItemWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UItemWidget* UInGameInventoryWidget::GetNavigationCanFocusNearShoulderWidget(class UWidget* CheckWidget, EUINavigation NavigationType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameInventoryWidget", "GetNavigationCanFocusNearShoulderWidget");

	Params::InGameInventoryWidget_GetNavigationCanFocusNearShoulderWidget Parms{};

	Parms.CheckWidget = CheckWidget;
	Parms.NavigationType = NavigationType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.InGameInventoryWidget.GetSelectStatusType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EInventorySelectStatus                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EInventorySelectStatus UInGameInventoryWidget::GetSelectStatusType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameInventoryWidget", "GetSelectStatusType");

	Params::InGameInventoryWidget_GetSelectStatusType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.InGameInventoryWidget.SetFocusByRightRowBottomWidget
// (Final, Native, Private, Const)
// Parameters:
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UInGameInventoryWidget::SetFocusByRightRowBottomWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameInventoryWidget", "SetFocusByRightRowBottomWidget");

	Params::InGameInventoryWidget_SetFocusByRightRowBottomWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.InGameMiscInfo.OnRecvCheerEvent
// (Final, Native, Public)
// Parameters:
// int32                                   CheerCount                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LocalCheerCount                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInGameMiscInfo::OnRecvCheerEvent(int32 CheerCount, int32 LocalCheerCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InGameMiscInfo", "OnRecvCheerEvent");

	Params::InGameMiscInfo_OnRecvCheerEvent Parms{};

	Parms.CheerCount = CheerCount;
	Parms.LocalCheerCount = LocalCheerCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InGameStatics.CheckWorldStatics
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          StartLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          EndLocation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SphereRadius                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FHitResult>               ResultHits                                             (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   IgnoreList                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// EDrawDebugTrace                         DrawDebugType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInGameStatics::CheckWorldStatics(class UObject* WorldContextObject, const struct FVector& StartLocation, const struct FVector& EndLocation, float SphereRadius, TArray<struct FHitResult>* ResultHits, const TArray<class AActor*>& IgnoreList, EDrawDebugTrace DrawDebugType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InGameStatics", "CheckWorldStatics");

	Params::InGameStatics_CheckWorldStatics Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.StartLocation = std::move(StartLocation);
	Parms.EndLocation = std::move(EndLocation);
	Parms.SphereRadius = SphereRadius;
	Parms.IgnoreList = std::move(IgnoreList);
	Parms.DrawDebugType = DrawDebugType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ResultHits != nullptr)
		*ResultHits = std::move(Parms.ResultHits);

	return Parms.ReturnValue;
}


// Function InGameModule.InGameStatics.GetGroundHeight
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          StartLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CheckDistance                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCheckNormal                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           HitActor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   IgnoreList                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class UCapsuleComponent*                Capsule                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UInGameStatics::GetGroundHeight(class UObject* WorldContextObject, const struct FVector& StartLocation, float CheckDistance, bool bCheckNormal, class AActor** HitActor, const TArray<class AActor*>& IgnoreList, class UCapsuleComponent* Capsule)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InGameStatics", "GetGroundHeight");

	Params::InGameStatics_GetGroundHeight Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.StartLocation = std::move(StartLocation);
	Parms.CheckDistance = CheckDistance;
	Parms.bCheckNormal = bCheckNormal;
	Parms.IgnoreList = std::move(IgnoreList);
	Parms.Capsule = Capsule;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (HitActor != nullptr)
		*HitActor = Parms.HitActor;

	return Parms.ReturnValue;
}


// Function InGameModule.InGameStatics.GetGroundHeightFromParam
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           HitActor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGroundCheckParam                Param                                                  (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UInGameStatics::GetGroundHeightFromParam(class UObject* WorldContextObject, class AActor** HitActor, const struct FGroundCheckParam& Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InGameStatics", "GetGroundHeightFromParam");

	Params::InGameStatics_GetGroundHeightFromParam Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Param = std::move(Param);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (HitActor != nullptr)
		*HitActor = Parms.HitActor;

	return Parms.ReturnValue;
}


// Function InGameModule.InGameStatics.GetHitSurfaceType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHitResult                       ResultHit                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// ESurfaceType                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESurfaceType UInGameStatics::GetHitSurfaceType(const struct FHitResult& ResultHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InGameStatics", "GetHitSurfaceType");

	Params::InGameStatics_GetHitSurfaceType Parms{};

	Parms.ResultHit = std::move(ResultHit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.InGameStatics.GetPlaneDegree
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Normal                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UInGameStatics::GetPlaneDegree(const struct FVector& Normal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InGameStatics", "GetPlaneDegree");

	Params::InGameStatics_GetPlaneDegree Parms{};

	Parms.Normal = std::move(Normal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.InGameStatics.GetSurfaceType
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          StartLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          EndLocation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SphereRadius                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       ResultHit                                              (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   IgnoreList                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// ESurfaceType                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESurfaceType UInGameStatics::GetSurfaceType(class UObject* WorldContextObject, const struct FVector& StartLocation, const struct FVector& EndLocation, float SphereRadius, struct FHitResult* ResultHit, const TArray<class AActor*>& IgnoreList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InGameStatics", "GetSurfaceType");

	Params::InGameStatics_GetSurfaceType Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.StartLocation = std::move(StartLocation);
	Parms.EndLocation = std::move(EndLocation);
	Parms.SphereRadius = SphereRadius;
	Parms.IgnoreList = std::move(IgnoreList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ResultHit != nullptr)
		*ResultHit = std::move(Parms.ResultHit);

	return Parms.ReturnValue;
}


// Function InGameModule.InGameStatics.MakeCharacterJsonPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ECharacterId                            CharacterId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UInGameStatics::MakeCharacterJsonPath(ECharacterId CharacterId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InGameStatics", "MakeCharacterJsonPath");

	Params::InGameStatics_MakeCharacterJsonPath Parms{};

	Parms.CharacterId = CharacterId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.InteractTargetComponent.BeginOverlap
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UInteractTargetComponent::BeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractTargetComponent", "BeginOverlap");

	Params::InteractTargetComponent_BeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InteractTargetComponent.EndOverlap
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInteractTargetComponent::EndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractTargetComponent", "EndOverlap");

	Params::InteractTargetComponent_EndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InventoryAbilityWidget.OnBeginUseAbilityEvent
// (Final, Native, Public)
// Parameters:
// class UAbilityHolder*                   Ability                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryAbilityWidget::OnBeginUseAbilityEvent(class UAbilityHolder* Ability)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryAbilityWidget", "OnBeginUseAbilityEvent");

	Params::InventoryAbilityWidget_OnBeginUseAbilityEvent Parms{};

	Parms.Ability = Ability;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InventoryAbilityWidget.OnEndUseAbilityEvent
// (Final, Native, Public)
// Parameters:
// class UAbilityHolder*                   Ability                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryAbilityWidget::OnEndUseAbilityEvent(class UAbilityHolder* Ability)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryAbilityWidget", "OnEndUseAbilityEvent");

	Params::InventoryAbilityWidget_OnEndUseAbilityEvent Parms{};

	Parms.Ability = Ability;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InventoryAbilityWidget.OnFocusEvent
// (Final, Native, Public)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryAbilityWidget::OnFocusEvent(class UAppWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryAbilityWidget", "OnFocusEvent");

	Params::InventoryAbilityWidget_OnFocusEvent Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InventoryAbilityWidget.OnRemoveFocusEvent
// (Final, Native, Public)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryAbilityWidget::OnRemoveFocusEvent(class UAppWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryAbilityWidget", "OnRemoveFocusEvent");

	Params::InventoryAbilityWidget_OnRemoveFocusEvent Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InventoryAllySkillListWidget.OnRepOwnerPlayerStateEvent
// (Final, Native, Protected)
// Parameters:
// class APlayerStateBattle*               PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryAllySkillListWidget::OnRepOwnerPlayerStateEvent(class APlayerStateBattle* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryAllySkillListWidget", "OnRepOwnerPlayerStateEvent");

	Params::InventoryAllySkillListWidget_OnRepOwnerPlayerStateEvent Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InventoryItemShoulderWidget.OnEndUsingSupplyEvent
// (Final, Native, Public)
// Parameters:
// class USupplyHolder*                    SupplyHolder                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryItemShoulderWidget::OnEndUsingSupplyEvent(const class USupplyHolder* SupplyHolder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemShoulderWidget", "OnEndUsingSupplyEvent");

	Params::InventoryItemShoulderWidget_OnEndUsingSupplyEvent Parms{};

	Parms.SupplyHolder = SupplyHolder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InventoryItemShoulderWidget.OnFocusEvent
// (Final, Native, Public)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryItemShoulderWidget::OnFocusEvent(class UAppWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemShoulderWidget", "OnFocusEvent");

	Params::InventoryItemShoulderWidget_OnFocusEvent Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InventoryItemShoulderWidget.OnInputFlipOpenWindowEvent
// (Final, Native, Public)

void UInventoryItemShoulderWidget::OnInputFlipOpenWindowEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemShoulderWidget", "OnInputFlipOpenWindowEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InventoryItemShoulderWidget.OnShoulderBagUpdateEvent
// (Final, Native, Public)

void UInventoryItemShoulderWidget::OnShoulderBagUpdateEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemShoulderWidget", "OnShoulderBagUpdateEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InventoryItemShoulderWidget.OnStartUsingSupplyEvent
// (Final, Native, Public)
// Parameters:
// class USupplyHolder*                    SupplyHolder                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryItemShoulderWidget::OnStartUsingSupplyEvent(const class USupplyHolder* SupplyHolder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemShoulderWidget", "OnStartUsingSupplyEvent");

	Params::InventoryItemShoulderWidget_OnStartUsingSupplyEvent Parms{};

	Parms.SupplyHolder = SupplyHolder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InventoryItemShoulderWidget.OnInputDropItemEvent
// (Final, Native, Public, Const)

void UInventoryItemShoulderWidget::OnInputDropItemEvent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryItemShoulderWidget", "OnInputDropItemEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InventorySkillWidget.OnAnimationFinished_Implementation
// (Native, Protected)
// Parameters:
// class UWidgetAnimation*                 InAnimation                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventorySkillWidget::OnAnimationFinished_Implementation(const class UWidgetAnimation* InAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventorySkillWidget", "OnAnimationFinished_Implementation");

	Params::InventorySkillWidget_OnAnimationFinished_Implementation Parms{};

	Parms.InAnimation = InAnimation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InventorySkillWidget.OnFocusEvent
// (Final, Native, Public)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventorySkillWidget::OnFocusEvent(class UAppWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventorySkillWidget", "OnFocusEvent");

	Params::InventorySkillWidget_OnFocusEvent Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InventorySkillWidget.OnRemoveFocusEvent
// (Final, Native, Public)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventorySkillWidget::OnRemoveFocusEvent(class UAppWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventorySkillWidget", "OnRemoveFocusEvent");

	Params::InventorySkillWidget_OnRemoveFocusEvent Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.InventorySupplyDropArea.PlayDustBoxAnimation
// (Event, Public, BlueprintEvent)

void UInventorySupplyDropArea::PlayDustBoxAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventorySupplyDropArea", "PlayDustBoxAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.InventorySupplyDropArea.StopDustBoxAnimation
// (Event, Public, BlueprintEvent)

void UInventorySupplyDropArea::StopDustBoxAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventorySupplyDropArea", "StopDustBoxAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ItemWidget.BP_ChangeAbilityIcon
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPaperSprite*                     InPaperSprite                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   AbilityType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAttackId                               AttackId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsSkillIcon                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UItemWidget::BP_ChangeAbilityIcon(class UPaperSprite* InPaperSprite, uint8 AbilityType, EAttackId AttackId, float Level, bool IsSkillIcon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemWidget", "BP_ChangeAbilityIcon");

	Params::ItemWidget_BP_ChangeAbilityIcon Parms{};

	Parms.InPaperSprite = InPaperSprite;
	Parms.AbilityType = AbilityType;
	Parms.AttackId = AttackId;
	Parms.Level = Level;
	Parms.IsSkillIcon = IsSkillIcon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ItemWidget.BP_ChangeSupplyIcon
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPaperSprite*                     InPaperSprite                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StackCount                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxStack                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UItemWidget::BP_ChangeSupplyIcon(class UPaperSprite* InPaperSprite, const int32 StackCount, const int32 MaxStack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemWidget", "BP_ChangeSupplyIcon");

	Params::ItemWidget_BP_ChangeSupplyIcon Parms{};

	Parms.InPaperSprite = InPaperSprite;
	Parms.StackCount = StackCount;
	Parms.MaxStack = MaxStack;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ItemWidget.OnDecideEvent
// (Final, Native, Protected)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UItemWidget::OnDecideEvent(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemWidget", "OnDecideEvent");

	Params::ItemWidget_OnDecideEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ItemWidget.OnDropEvent
// (Final, Native, Protected)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UItemWidget::OnDropEvent(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemWidget", "OnDropEvent");

	Params::ItemWidget_OnDropEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ItemWidget.OnFocusEvent
// (Final, Native, Protected)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UItemWidget::OnFocusEvent(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemWidget", "OnFocusEvent");

	Params::ItemWidget_OnFocusEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ItemWidget.OnPressEvent
// (Final, Native, Protected)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UItemWidget::OnPressEvent(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemWidget", "OnPressEvent");

	Params::ItemWidget_OnPressEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ItemWidget.OnRemovedFocusEvent
// (Final, Native, Protected)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UItemWidget::OnRemovedFocusEvent(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemWidget", "OnRemovedFocusEvent");

	Params::ItemWidget_OnRemovedFocusEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ItemWidget.SetDragVisual
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bDragVisual                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UItemWidget::SetDragVisual(bool bDragVisual)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemWidget", "SetDragVisual");

	Params::ItemWidget_SetDragVisual Parms{};

	Parms.bDragVisual = bDragVisual;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ItemWidget.CanFocusWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UItemWidget::CanFocusWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemWidget", "CanFocusWidget");

	Params::ItemWidget_CanFocusWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ItemWidget.GetAbilityType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMdAbilityType                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMdAbilityType UItemWidget::GetAbilityType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemWidget", "GetAbilityType");

	Params::ItemWidget_GetAbilityType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ItemWidget.GetCurrentAttackId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EAttackId                               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAttackId UItemWidget::GetCurrentAttackId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemWidget", "GetCurrentAttackId");

	Params::ItemWidget_GetCurrentAttackId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ItemWidget.GetCurrentLevel
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UItemWidget::GetCurrentLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemWidget", "GetCurrentLevel");

	Params::ItemWidget_GetCurrentLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ItemWidget.GetCurrentPaperSprite
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPaperSprite*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPaperSprite* UItemWidget::GetCurrentPaperSprite() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemWidget", "GetCurrentPaperSprite");

	Params::ItemWidget_GetCurrentPaperSprite Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ItemWidget.GetCurrentSupplyStackCont
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UItemWidget::GetCurrentSupplyStackCont() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemWidget", "GetCurrentSupplyStackCont");

	Params::ItemWidget_GetCurrentSupplyStackCont Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ItemWidget.GetMaxSupplyStackCount
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UItemWidget::GetMaxSupplyStackCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemWidget", "GetMaxSupplyStackCount");

	Params::ItemWidget_GetMaxSupplyStackCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ItemWidget.GetProgressSeconds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UItemWidget::GetProgressSeconds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemWidget", "GetProgressSeconds");

	Params::ItemWidget_GetProgressSeconds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ItemWidget.GetSelectType
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EInventorySelectStatus                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EInventorySelectStatus UItemWidget::GetSelectType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemWidget", "GetSelectType");

	Params::ItemWidget_GetSelectType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ItemWidget.GetSelectWidgetType
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EInventoryWidgetType                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EInventoryWidgetType UItemWidget::GetSelectWidgetType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemWidget", "GetSelectWidgetType");

	Params::ItemWidget_GetSelectWidgetType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ItemWidget.IsAbilityIcon
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UItemWidget::IsAbilityIcon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemWidget", "IsAbilityIcon");

	Params::ItemWidget_IsAbilityIcon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ItemWidget.IsAvatarCharacter
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UItemWidget::IsAvatarCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemWidget", "IsAvatarCharacter");

	Params::ItemWidget_IsAvatarCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.ItemWidget.IsFaceIcon
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UItemWidget::IsFaceIcon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemWidget", "IsFaceIcon");

	Params::ItemWidget_IsFaceIcon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.KillLogChildWidget.Vanish
// (Final, Native, Private)

void UKillLogChildWidget::Vanish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillLogChildWidget", "Vanish");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.KillLogManagerComponent.SetupKillLog
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// struct FKillLogInfo                     KillLogInfo                                            (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TArray<struct FKillEventAssistPersona>  AssistPeople                                           (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// uint8                                   ThisKillLogInfoIndex                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKillLogManagerComponent::SetupKillLog(const struct FKillLogInfo& KillLogInfo, const TArray<struct FKillEventAssistPersona>& AssistPeople, uint8 ThisKillLogInfoIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillLogManagerComponent", "SetupKillLog");

	Params::KillLogManagerComponent_SetupKillLog Parms{};

	Parms.KillLogInfo = std::move(KillLogInfo);
	Parms.AssistPeople = std::move(AssistPeople);
	Parms.ThisKillLogInfoIndex = ThisKillLogInfoIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.KOMessageWidget.PlayKOAnim
// (Final, Native, Public, BlueprintCallable)

void UKOMessageWidget::PlayKOAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KOMessageWidget", "PlayKOAnim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.KOMessageWidget.PlayKOAnim_Internal
// (Event, Public, BlueprintEvent)

void UKOMessageWidget::PlayKOAnim_Internal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KOMessageWidget", "PlayKOAnim_Internal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.PoisonMist.OnRep_BeforeShrinkNotified
// (Native, Protected)

void APoisonMist::OnRep_BeforeShrinkNotified()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PoisonMist", "OnRep_BeforeShrinkNotified");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PoisonMist.OnRep_ChangePoisonMistStatus
// (Final, Native, Protected)

void APoisonMist::OnRep_ChangePoisonMistStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PoisonMist", "OnRep_ChangePoisonMistStatus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PoisonMist.OnRep_CompleteShrinkNotified
// (Final, Native, Protected)

void APoisonMist::OnRep_CompleteShrinkNotified()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PoisonMist", "OnRep_CompleteShrinkNotified");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.LeadersBattleScoreManagerComponent.OnRepServerScoreInfo
// (Final, Native, Private)

void ULeadersBattleScoreManagerComponent::OnRepServerScoreInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LeadersBattleScoreManagerComponent", "OnRepServerScoreInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.LeadersLastCountDownWidget.PlayLeadersLastCountDownAnim_Internal
// (Event, Public, BlueprintEvent)

void ULeadersLastCountDownWidget::PlayLeadersLastCountDownAnim_Internal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LeadersLastCountDownWidget", "PlayLeadersLastCountDownAnim_Internal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.LeadersManagerComponent.ChangeTeamLeader_RPC
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void ULeadersManagerComponent::ChangeTeamLeader_RPC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LeadersManagerComponent", "ChangeTeamLeader_RPC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.LeadersRankItem.PlayAddPoint
// (Final, Native, Public, BlueprintCallable)

void ULeadersRankItem::PlayAddPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LeadersRankItem", "PlayAddPoint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.LeadersRankItem.PlayAddPoint_Internal
// (Event, Public, BlueprintEvent)

void ULeadersRankItem::PlayAddPoint_Internal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LeadersRankItem", "PlayAddPoint_Internal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.LevelUpGuide.PlayStartAnim
// (Final, Native, Public, BlueprintCallable)

void ULevelUpGuide::PlayStartAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelUpGuide", "PlayStartAnim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.LevelUpGuide.PlayStartAnim_Internal
// (Event, Public, BlueprintEvent)

void ULevelUpGuide::PlayStartAnim_Internal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelUpGuide", "PlayStartAnim_Internal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.LevelUpIcon.PlayAniidleAnim
// (Final, Native, Public, BlueprintCallable)

void ULevelUpIcon::PlayAniidleAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelUpIcon", "PlayAniidleAnim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.LevelUpIcon.PlayAniidleAnim_Internal
// (Event, Public, BlueprintEvent)

void ULevelUpIcon::PlayAniidleAnim_Internal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelUpIcon", "PlayAniidleAnim_Internal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.MagazineManagementComponent.BP_Consume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAttackId                               AttackId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Ammo                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMagazineManagementComponent::BP_Consume(EAttackId AttackId, int32 Ammo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MagazineManagementComponent", "BP_Consume");

	Params::MagazineManagementComponent_BP_Consume Parms{};

	Parms.AttackId = AttackId;
	Parms.Ammo = Ammo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.MagazineManagementComponent.BP_Empty
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAttackId                               AttackId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMagazineManagementComponent::BP_Empty(EAttackId AttackId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MagazineManagementComponent", "BP_Empty");

	Params::MagazineManagementComponent_BP_Empty Parms{};

	Parms.AttackId = AttackId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MagazineManagementComponent.BP_GetMagazineState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAttackId                               AttackId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMagazineState                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FMagazineState UMagazineManagementComponent::BP_GetMagazineState(EAttackId AttackId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MagazineManagementComponent", "BP_GetMagazineState");

	Params::MagazineManagementComponent_BP_GetMagazineState Parms{};

	Parms.AttackId = AttackId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.MagazineManagementComponent.BP_IsEmpty
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EAttackId                               AttackId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMagazineManagementComponent::BP_IsEmpty(EAttackId AttackId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MagazineManagementComponent", "BP_IsEmpty");

	Params::MagazineManagementComponent_BP_IsEmpty Parms{};

	Parms.AttackId = AttackId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.MagazineManagementComponent.BP_IsStarting
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EAttackId                               AttackId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMagazineManagementComponent::BP_IsStarting(EAttackId AttackId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MagazineManagementComponent", "BP_IsStarting");

	Params::MagazineManagementComponent_BP_IsStarting Parms{};

	Parms.AttackId = AttackId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.MagazineManagementComponent.BP_Replenishment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAttackId                               AttackId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMagazineManagementComponent::BP_Replenishment(EAttackId AttackId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MagazineManagementComponent", "BP_Replenishment");

	Params::MagazineManagementComponent_BP_Replenishment Parms{};

	Parms.AttackId = AttackId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MagazineManagementComponent.BP_Shoot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAttackId                               AttackId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMagazineManagementComponent::BP_Shoot(EAttackId AttackId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MagazineManagementComponent", "BP_Shoot");

	Params::MagazineManagementComponent_BP_Shoot Parms{};

	Parms.AttackId = AttackId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MagazineManagementComponent.BP_Start
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAttackId                               AttackId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMagazineManagementComponent::BP_Start(EAttackId AttackId, float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MagazineManagementComponent", "BP_Start");

	Params::MagazineManagementComponent_BP_Start Parms{};

	Parms.AttackId = AttackId;
	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MagazineManagementComponent.BP_Stop
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAttackId                               AttackId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMagazineManagementComponent::BP_Stop(EAttackId AttackId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MagazineManagementComponent", "BP_Stop");

	Params::MagazineManagementComponent_BP_Stop Parms{};

	Parms.AttackId = AttackId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MagazineManagementComponent.SetAmmoNum
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAttackId                               SlotId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Ammo                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMagazineManagementComponent::SetAmmoNum(EAttackId SlotId, int32 Ammo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MagazineManagementComponent", "SetAmmoNum");

	Params::MagazineManagementComponent_SetAmmoNum Parms{};

	Parms.SlotId = SlotId;
	Parms.Ammo = Ammo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MapIconsWidget.UpdateButtonGuide
// (Final, Native, Private)

void UMapIconsWidget::UpdateButtonGuide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconsWidget", "UpdateButtonGuide");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MapIconsWidget.UpdateViewPlayer
// (Final, Native, Private)
// Parameters:
// class APlayerStateBattle*               ViewPlayer                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMapIconsWidget::UpdateViewPlayer(class APlayerStateBattle* ViewPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapIconsWidget", "UpdateViewPlayer");

	Params::MapIconsWidget_UpdateViewPlayer Parms{};

	Parms.ViewPlayer = ViewPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MapWidget.ChangeMinimapMarkerButtonGuide
// (Final, Native, Protected)

void UMapWidget::ChangeMinimapMarkerButtonGuide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapWidget", "ChangeMinimapMarkerButtonGuide");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MapWidget.DisableMapFunction
// (Final, Native, Protected)

void UMapWidget::DisableMapFunction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapWidget", "DisableMapFunction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MapWidget.InputDataDelete
// (Final, Native, Protected)

void UMapWidget::InputDataDelete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MapWidget", "InputDataDelete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MaterialCurveControl.ForceEnd
// (Final, Native, Public, BlueprintCallable)

void UMaterialCurveControl::ForceEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialCurveControl", "ForceEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MaterialCurveControl.GetBeginCurveTimeRange
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   MinT                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxT                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMaterialCurveControl::GetBeginCurveTimeRange(float* MinT, float* MaxT)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialCurveControl", "GetBeginCurveTimeRange");

	Params::MaterialCurveControl_GetBeginCurveTimeRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MinT != nullptr)
		*MinT = Parms.MinT;

	if (MaxT != nullptr)
		*MaxT = Parms.MaxT;

	return Parms.ReturnValue;
}


// Function InGameModule.MaterialCurveControl.GetEndCurveTimeRange
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   MinT                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxT                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMaterialCurveControl::GetEndCurveTimeRange(float* MinT, float* MaxT)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialCurveControl", "GetEndCurveTimeRange");

	Params::MaterialCurveControl_GetEndCurveTimeRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MinT != nullptr)
		*MinT = Parms.MinT;

	if (MaxT != nullptr)
		*MaxT = Parms.MaxT;

	return Parms.ReturnValue;
}


// Function InGameModule.MaterialCurveControl.Reset
// (Final, Native, Public, BlueprintCallable)

void UMaterialCurveControl::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialCurveControl", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MaterialCurveControl.SetMaterialInstanceDynamic
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceDynamic*         Mid                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMaterialCurveControl::SetMaterialInstanceDynamic(class UMaterialInstanceDynamic* Mid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialCurveControl", "SetMaterialInstanceDynamic");

	Params::MaterialCurveControl_SetMaterialInstanceDynamic Parms{};

	Parms.Mid = Mid;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MaterialCurveControl.SetWaitTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Wait                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMaterialCurveControl::SetWaitTime(float Wait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialCurveControl", "SetWaitTime");

	Params::MaterialCurveControl_SetWaitTime Parms{};

	Parms.Wait = Wait;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MaterialCurveControl.IsEnd
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMaterialCurveControl::IsEnd() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaterialCurveControl", "IsEnd");

	Params::MaterialCurveControl_IsEnd Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.MovementComponentBattle.BP_ApplyInertia
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Span                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HorizonRate                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VerticalRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMovementComponentBattle::BP_ApplyInertia(float Span, float HorizonRate, float VerticalRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_ApplyInertia");

	Params::MovementComponentBattle_BP_ApplyInertia Parms{};

	Parms.Span = Span;
	Parms.HorizonRate = HorizonRate;
	Parms.VerticalRate = VerticalRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MovementComponentBattle.BP_ClearAllSpeeds
// (Final, Native, Public, BlueprintCallable)

void UMovementComponentBattle::BP_ClearAllSpeeds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_ClearAllSpeeds");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MovementComponentBattle.BP_ClearAllSpeedsAndRotations
// (Final, Native, Public, BlueprintCallable)

void UMovementComponentBattle::BP_ClearAllSpeedsAndRotations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_ClearAllSpeedsAndRotations");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MovementComponentBattle.BP_ClearCenterRotation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMovementComponentBattle::BP_ClearCenterRotation(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_ClearCenterRotation");

	Params::MovementComponentBattle_BP_ClearCenterRotation Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MovementComponentBattle.BP_ClearSpeedAccel
// (Final, Native, Public, BlueprintCallable)

void UMovementComponentBattle::BP_ClearSpeedAccel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_ClearSpeedAccel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MovementComponentBattle.BP_EnableGravity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMovementComponentBattle::BP_EnableGravity(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_EnableGravity");

	Params::MovementComponentBattle_BP_EnableGravity Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MovementComponentBattle.BP_GetGravitySpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMovementComponentBattle::BP_GetGravitySpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_GetGravitySpeed");

	Params::MovementComponentBattle_BP_GetGravitySpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.MovementComponentBattle.BP_GetGravitySpeedWholeRate
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMovementComponentBattle::BP_GetGravitySpeedWholeRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_GetGravitySpeedWholeRate");

	Params::MovementComponentBattle_BP_GetGravitySpeedWholeRate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.MovementComponentBattle.BP_GetInertiaSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMovementComponentBattle::BP_GetInertiaSpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_GetInertiaSpeed");

	Params::MovementComponentBattle_BP_GetInertiaSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.MovementComponentBattle.BP_GetMoveSpeedVirtical
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMovementComponentBattle::BP_GetMoveSpeedVirtical()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_GetMoveSpeedVirtical");

	Params::MovementComponentBattle_BP_GetMoveSpeedVirtical Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.MovementComponentBattle.BP_GetSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMovementComponentBattle::BP_GetSpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_GetSpeed");

	Params::MovementComponentBattle_BP_GetSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.MovementComponentBattle.BP_InheritSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSpeed                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVertical                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGravity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInertia                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSlide                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMovementComponentBattle::BP_InheritSpeed(bool bSpeed, bool bVertical, bool bGravity, bool bInertia, bool bSlide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_InheritSpeed");

	Params::MovementComponentBattle_BP_InheritSpeed Parms{};

	Parms.bSpeed = bSpeed;
	Parms.bVertical = bVertical;
	Parms.bGravity = bGravity;
	Parms.bInertia = bInertia;
	Parms.bSlide = bSlide;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MovementComponentBattle.BP_IsSpeedAcceleration
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMovementComponentBattle::BP_IsSpeedAcceleration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_IsSpeedAcceleration");

	Params::MovementComponentBattle_BP_IsSpeedAcceleration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.MovementComponentBattle.BP_RequestTeleportation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          TargetLocation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         TargetRotation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bIsIgnoreObstacle                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMovementComponentBattle::BP_RequestTeleportation(struct FVector* TargetLocation, const struct FRotator& TargetRotation, bool bIsIgnoreObstacle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_RequestTeleportation");

	Params::MovementComponentBattle_BP_RequestTeleportation Parms{};

	Parms.TargetRotation = std::move(TargetRotation);
	Parms.bIsIgnoreObstacle = bIsIgnoreObstacle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TargetLocation != nullptr)
		*TargetLocation = std::move(Parms.TargetLocation);
}


// Function InGameModule.MovementComponentBattle.BP_ResetGravityCompletely
// (Final, Native, Public, BlueprintCallable)

void UMovementComponentBattle::BP_ResetGravityCompletely()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_ResetGravityCompletely");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MovementComponentBattle.BP_ResetVerticalDirection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   TurnTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMovementComponentBattle::BP_ResetVerticalDirection(float TurnTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_ResetVerticalDirection");

	Params::MovementComponentBattle_BP_ResetVerticalDirection Parms{};

	Parms.TurnTime = TurnTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MovementComponentBattle.BP_SetGravityRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMovementComponentBattle::BP_SetGravityRate(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_SetGravityRate");

	Params::MovementComponentBattle_BP_SetGravityRate Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MovementComponentBattle.BP_SetGravitySpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Speed                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMovementComponentBattle::BP_SetGravitySpeed(float Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_SetGravitySpeed");

	Params::MovementComponentBattle_BP_SetGravitySpeed Parms{};

	Parms.Speed = Speed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MovementComponentBattle.BP_SetInertiaSpan
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Span                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMovementComponentBattle::BP_SetInertiaSpan(float Span)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_SetInertiaSpan");

	Params::MovementComponentBattle_BP_SetInertiaSpan Parms{};

	Parms.Span = Span;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MovementComponentBattle.BP_SetMoveDirection
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Direction                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMovementComponentBattle::BP_SetMoveDirection(const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_SetMoveDirection");

	Params::MovementComponentBattle_BP_SetMoveDirection Parms{};

	Parms.Direction = std::move(Direction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MovementComponentBattle.BP_SetRootMotionScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMovementComponentBattle::BP_SetRootMotionScale(float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_SetRootMotionScale");

	Params::MovementComponentBattle_BP_SetRootMotionScale Parms{};

	Parms.Scale = Scale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MovementComponentBattle.BP_SetSlideAdjust
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Direction                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Speed                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMovementComponentBattle::BP_SetSlideAdjust(const struct FVector& Direction, float Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_SetSlideAdjust");

	Params::MovementComponentBattle_BP_SetSlideAdjust Parms{};

	Parms.Direction = std::move(Direction);
	Parms.Speed = Speed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MovementComponentBattle.BP_SetSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Initial                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Accel                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMovementComponentBattle::BP_SetSpeed(float Initial, float Accel, float Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_SetSpeed");

	Params::MovementComponentBattle_BP_SetSpeed Parms{};

	Parms.Initial = Initial;
	Parms.Accel = Accel;
	Parms.Limit = Limit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MovementComponentBattle.BP_SetSpeedDecreaseRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMovementComponentBattle::BP_SetSpeedDecreaseRate(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_SetSpeedDecreaseRate");

	Params::MovementComponentBattle_BP_SetSpeedDecreaseRate Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MovementComponentBattle.BP_SetSpeedEasy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Initial                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Last                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Span                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMovementComponentBattle::BP_SetSpeedEasy(float Initial, float Last, float Span)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_SetSpeedEasy");

	Params::MovementComponentBattle_BP_SetSpeedEasy Parms{};

	Parms.Initial = Initial;
	Parms.Last = Last;
	Parms.Span = Span;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MovementComponentBattle.BP_SetSpeedInertia
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// float                                   Initial                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Last                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Span                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMovementComponentBattle::BP_SetSpeedInertia(float Initial, float Last, float Span, const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_SetSpeedInertia");

	Params::MovementComponentBattle_BP_SetSpeedInertia Parms{};

	Parms.Initial = Initial;
	Parms.Last = Last;
	Parms.Span = Span;
	Parms.Direction = std::move(Direction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MovementComponentBattle.BP_SetSpeedJump
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Span                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMovementComponentBattle::BP_SetSpeedJump(float Height, float Span)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_SetSpeedJump");

	Params::MovementComponentBattle_BP_SetSpeedJump Parms{};

	Parms.Height = Height;
	Parms.Span = Span;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MovementComponentBattle.BP_SetSpeedRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMovementComponentBattle::BP_SetSpeedRate(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_SetSpeedRate");

	Params::MovementComponentBattle_BP_SetSpeedRate Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MovementComponentBattle.BP_SetSpeedVirtical
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Initial                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Accel                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMovementComponentBattle::BP_SetSpeedVirtical(float Initial, float Accel, float Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_SetSpeedVirtical");

	Params::MovementComponentBattle_BP_SetSpeedVirtical Parms{};

	Parms.Initial = Initial;
	Parms.Accel = Accel;
	Parms.Limit = Limit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MovementComponentBattle.BP_SetupTurnToDirection
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Direction                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TurnTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEasingFunc                             EasingType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendExp                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Steps                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMovementComponentBattle::BP_SetupTurnToDirection(const struct FVector& Direction, float TurnTime, EEasingFunc EasingType, float BlendExp, int32 Steps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_SetupTurnToDirection");

	Params::MovementComponentBattle_BP_SetupTurnToDirection Parms{};

	Parms.Direction = std::move(Direction);
	Parms.TurnTime = TurnTime;
	Parms.EasingType = EasingType;
	Parms.BlendExp = BlendExp;
	Parms.Steps = Steps;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MovementComponentBattle.BP_SetupVerticalDirection
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Direction                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TurnTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          RotationAxis                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMovementComponentBattle::BP_SetupVerticalDirection(const struct FVector& Direction, float TurnTime, const struct FVector& RotationAxis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_SetupVerticalDirection");

	Params::MovementComponentBattle_BP_SetupVerticalDirection Parms{};

	Parms.Direction = std::move(Direction);
	Parms.TurnTime = TurnTime;
	Parms.RotationAxis = std::move(RotationAxis);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MovementComponentBattle.BP_StopTurnToDirection
// (Final, Native, Public, BlueprintCallable)

void UMovementComponentBattle::BP_StopTurnToDirection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_StopTurnToDirection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MovementComponentBattle.BP_StopVertcalDirection
// (Final, Native, Public, BlueprintCallable)

void UMovementComponentBattle::BP_StopVertcalDirection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_StopVertcalDirection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MovementComponentBattle.BP_UpdateTurnDirection
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Direction                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMovementComponentBattle::BP_UpdateTurnDirection(const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_UpdateTurnDirection");

	Params::MovementComponentBattle_BP_UpdateTurnDirection Parms{};

	Parms.Direction = std::move(Direction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MovementComponentBattle.BP_UpdateVerticalDirection
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Direction                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          RotationAxis                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMovementComponentBattle::BP_UpdateVerticalDirection(const struct FVector& Direction, const struct FVector& RotationAxis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_UpdateVerticalDirection");

	Params::MovementComponentBattle_BP_UpdateVerticalDirection Parms{};

	Parms.Direction = std::move(Direction);
	Parms.RotationAxis = std::move(RotationAxis);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MovementComponentBattle.BreakBgProp_RPC_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class ABgProp*                          breakActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize100           DamageLocation                                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMovementComponentBattle::BreakBgProp_RPC_ToServer(class ABgProp* breakActor, const struct FVector_NetQuantize100& DamageLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BreakBgProp_RPC_ToServer");

	Params::MovementComponentBattle_BreakBgProp_RPC_ToServer Parms{};

	Parms.breakActor = breakActor;
	Parms.DamageLocation = std::move(DamageLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MovementComponentBattle.RequestTeleportation_ToClient
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private, HasDefaults, NetValidate)
// Parameters:
// struct FVector_NetQuantize              TargetLocation                                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuat                            TargetRotation                                         (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UMovementComponentBattle::RequestTeleportation_ToClient(const struct FVector_NetQuantize& TargetLocation, const struct FQuat& TargetRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "RequestTeleportation_ToClient");

	Params::MovementComponentBattle_RequestTeleportation_ToClient Parms{};

	Parms.TargetLocation = std::move(TargetLocation);
	Parms.TargetRotation = std::move(TargetRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MovementComponentBattle.RequestTeleportation_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, HasDefaults, NetValidate)
// Parameters:
// struct FVector_NetQuantize              TargetLocation                                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuat                            TargetRotation                                         (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UMovementComponentBattle::RequestTeleportation_ToServer(const struct FVector_NetQuantize& TargetLocation, const struct FQuat& TargetRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "RequestTeleportation_ToServer");

	Params::MovementComponentBattle_RequestTeleportation_ToServer Parms{};

	Parms.TargetLocation = std::move(TargetLocation);
	Parms.TargetRotation = std::move(TargetRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MovementComponentBattle.ServerMove
// (Final, Net, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// struct FServerMoveArgument              Arg                                                    (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UMovementComponentBattle::ServerMove(const struct FServerMoveArgument& Arg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "ServerMove");

	Params::MovementComponentBattle_ServerMove Parms{};

	Parms.Arg = std::move(Arg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.MovementComponentBattle.BP_CalculatePenaltyTimeForLand
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMovementComponentBattle::BP_CalculatePenaltyTimeForLand() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_CalculatePenaltyTimeForLand");

	Params::MovementComponentBattle_BP_CalculatePenaltyTimeForLand Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.MovementComponentBattle.BP_GetCurrentGroundNormal
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector UMovementComponentBattle::BP_GetCurrentGroundNormal() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_GetCurrentGroundNormal");

	Params::MovementComponentBattle_BP_GetCurrentGroundNormal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.MovementComponentBattle.BP_GetCurrentWallImpactNormal
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector UMovementComponentBattle::BP_GetCurrentWallImpactNormal() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_GetCurrentWallImpactNormal");

	Params::MovementComponentBattle_BP_GetCurrentWallImpactNormal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.MovementComponentBattle.BP_GetCurrentWallNormal
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector UMovementComponentBattle::BP_GetCurrentWallNormal() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_GetCurrentWallNormal");

	Params::MovementComponentBattle_BP_GetCurrentWallNormal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.MovementComponentBattle.BP_GetCurrentWallUp
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector UMovementComponentBattle::BP_GetCurrentWallUp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovementComponentBattle", "BP_GetCurrentWallUp");

	Params::MovementComponentBattle_BP_GetCurrentWallUp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.MultiTraceComponent.Add
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              Prim                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMultiTraceComponent::Add(class UPrimitiveComponent* Prim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MultiTraceComponent", "Add");

	Params::MultiTraceComponent_Add Parms{};

	Parms.Prim = Prim;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.NPCCitizen.OnRep_Replicated_state
// (Final, Native, Private)

void ANPCCitizen::OnRep_Replicated_state()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NPCCitizen", "OnRep_Replicated_state");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.NPCManagerComponent.OnDestroyed
// (Final, Native, Private)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNPCManagerComponent::OnDestroyed(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NPCManagerComponent", "OnDestroyed");

	Params::NPCManagerComponent_OnDestroyed Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.NPCManagerComponent.PlayRecoverKotaVice
// (Final, Native, Private)

void UNPCManagerComponent::PlayRecoverKotaVice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NPCManagerComponent", "PlayRecoverKotaVice");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.NPCManagerComponent.RegisterNpcCharacter
// (Final, Native, Private)
// Parameters:
// class ANPCCitizen*                      Npcs                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNPCManagerComponent::RegisterNpcCharacter(class ANPCCitizen* Npcs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NPCManagerComponent", "RegisterNpcCharacter");

	Params::NPCManagerComponent_RegisterNpcCharacter Parms{};

	Parms.Npcs = Npcs;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.NPCManagerComponent.Unregister
// (Final, Native, Private)
// Parameters:
// class ANPCCitizen*                      NPC                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNPCManagerComponent::Unregister(class ANPCCitizen* NPC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NPCManagerComponent", "Unregister");

	Params::NPCManagerComponent_Unregister Parms{};

	Parms.NPC = NPC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.NPCManagerComponent.GetCurrentNPCsNum
// (Final, Native, Public, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UNPCManagerComponent::GetCurrentNPCsNum() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NPCManagerComponent", "GetCurrentNPCsNum");

	Params::NPCManagerComponent_GetCurrentNPCsNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.NumberOnImageDrawPrimitive.SetBaseImageTintColor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FSlateColor                      InTintColor                                            (Parm, NativeAccessSpecifierPublic)

void UNumberOnImageDrawPrimitive::SetBaseImageTintColor(const struct FSlateColor& InTintColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NumberOnImageDrawPrimitive", "SetBaseImageTintColor");

	Params::NumberOnImageDrawPrimitive_SetBaseImageTintColor Parms{};

	Parms.InTintColor = std::move(InTintColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.NumberOnImageDrawPrimitive.SetNumber
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InInt                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNumberOnImageDrawPrimitive::SetNumber(int32 InInt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NumberOnImageDrawPrimitive", "SetNumber");

	Params::NumberOnImageDrawPrimitive_SetNumber Parms{};

	Parms.InInt = InInt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.NumberOnImageDrawPrimitive.SetNumberFontColor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FSlateColor                      InFontColor                                            (Parm, NativeAccessSpecifierPublic)

void UNumberOnImageDrawPrimitive::SetNumberFontColor(const struct FSlateColor& InFontColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NumberOnImageDrawPrimitive", "SetNumberFontColor");

	Params::NumberOnImageDrawPrimitive_SetNumberFontColor Parms{};

	Parms.InFontColor = std::move(InFontColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PinnedActorComponent.OnPinnedActorDeactivated
// (Final, Native, Public)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPinnedActorComponent::OnPinnedActorDeactivated(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PinnedActorComponent", "OnPinnedActorDeactivated");

	Params::PinnedActorComponent_OnPinnedActorDeactivated Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction InGameModule.PinnedActorComponent.PinnedActorInterfaceEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UPinnedActorComponent::PinnedActorInterfaceEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PinnedActorComponent", "PinnedActorInterfaceEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.PinnedActorInterface.GetPinnedActorInfo
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// struct FPinnedActorInfo                 ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FPinnedActorInfo IPinnedActorInterface::GetPinnedActorInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PinnedActorInterface", "GetPinnedActorInfo");

	Params::PinnedActorInterface_GetPinnedActorInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.PinWidget.RemoveThisWidget
// (Final, Native, Public)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPinWidget::RemoveThisWidget(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PinWidget", "RemoveThisWidget");

	Params::PinWidget_RemoveThisWidget Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PinWidgetInterface.ChangePinArrowDirection
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// EPinArrowDirection                      NewArrowDirection                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPinWidgetInterface::ChangePinArrowDirection(EPinArrowDirection NewArrowDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PinWidgetInterface", "ChangePinArrowDirection");

	Params::PinWidgetInterface_ChangePinArrowDirection Parms{};

	Parms.NewArrowDirection = NewArrowDirection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerAbilityWidget.PlayerChangeEvent
// (Final, Native, Public)
// Parameters:
// class APlayerStateBattle*               PlayerState                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerAbilityWidget::PlayerChangeEvent(const class APlayerStateBattle* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerAbilityWidget", "PlayerChangeEvent");

	Params::PlayerAbilityWidget_PlayerChangeEvent Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerAbilityWidget.AbilityEvent
// (Final, Native, Public, Const)

void UPlayerAbilityWidget::AbilityEvent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerAbilityWidget", "AbilityEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerAbilityWidget.SetAbilityHolder
// (Final, Native, Public, Const)

void UPlayerAbilityWidget::SetAbilityHolder() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerAbilityWidget", "SetAbilityHolder");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerBuffWidget.OnUpStart
// (Final, Native, Protected)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerBuffWidget::OnUpStart(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerBuffWidget", "OnUpStart");

	Params::PlayerBuffWidget_OnUpStart Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerCameraManagerBattle.OnBeginUnderwaterEvent
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void APlayerCameraManagerBattle::OnBeginUnderwaterEvent(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerCameraManagerBattle", "OnBeginUnderwaterEvent");

	Params::PlayerCameraManagerBattle_OnBeginUnderwaterEvent Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerCameraManagerBattle.OnEndUnderwaterEvent
// (Final, Native, Public)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerCameraManagerBattle::OnEndUnderwaterEvent(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerCameraManagerBattle", "OnEndUnderwaterEvent");

	Params::PlayerCameraManagerBattle_OnEndUnderwaterEvent Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerServerEntry.BP_ServerTravel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerControllerServerEntry::BP_ServerTravel(const class FString& URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerServerEntry", "BP_ServerTravel");

	Params::PlayerControllerServerEntry_BP_ServerTravel Parms{};

	Parms.URL = std::move(URL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerServerEntry.ServerTravel
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerControllerServerEntry::ServerTravel(const class FString& URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerServerEntry", "ServerTravel");

	Params::PlayerControllerServerEntry_ServerTravel Parms{};

	Parms.URL = std::move(URL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerTraining.ChangeCharacter_OnServer
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class ACharacterBattle*                 CurrentCharacter                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTrainingBattleCharacterData     Data                                                   (Parm, NativeAccessSpecifierPublic)

void APlayerControllerTraining::ChangeCharacter_OnServer(class ACharacterBattle* CurrentCharacter, const struct FTrainingBattleCharacterData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerTraining", "ChangeCharacter_OnServer");

	Params::PlayerControllerTraining_ChangeCharacter_OnServer Parms{};

	Parms.CurrentCharacter = CurrentCharacter;
	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerTraining.ChangeTrainingSetting_OnServer
// (Net, NetReliable, Native, Event, Public, NetServer)

void APlayerControllerTraining::ChangeTrainingSetting_OnServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerTraining", "ChangeTrainingSetting_OnServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerTraining.ChangeUniqueLevel_OnServer
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class ACharacterBattle*                 CurrentCharacter                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DefUnique1Level                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DefUnique2Level                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DefUnique3Level                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerControllerTraining::ChangeUniqueLevel_OnServer(class ACharacterBattle* CurrentCharacter, int32 DefUnique1Level, int32 DefUnique2Level, int32 DefUnique3Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerTraining", "ChangeUniqueLevel_OnServer");

	Params::PlayerControllerTraining_ChangeUniqueLevel_OnServer Parms{};

	Parms.CurrentCharacter = CurrentCharacter;
	Parms.DefUnique1Level = DefUnique1Level;
	Parms.DefUnique2Level = DefUnique2Level;
	Parms.DefUnique3Level = DefUnique3Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerTraining.SetAITrainingType_OnServer
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class APlayerStateBattle*               PlayerStateBattle                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAITrainingType                         Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bStoreTypeOnClient                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerControllerTraining::SetAITrainingType_OnServer(class APlayerStateBattle* PlayerStateBattle, EAITrainingType Type, bool bStoreTypeOnClient)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerTraining", "SetAITrainingType_OnServer");

	Params::PlayerControllerTraining_SetAITrainingType_OnServer Parms{};

	Parms.PlayerStateBattle = PlayerStateBattle;
	Parms.Type = Type;
	Parms.bStoreTypeOnClient = bStoreTypeOnClient;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerTraining.SetChangedTrainingKPI_OnServer
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// bool                                    IsActive                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CharacterCode                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerControllerTraining::SetChangedTrainingKPI_OnServer(bool IsActive, int32 CharacterCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerTraining", "SetChangedTrainingKPI_OnServer");

	Params::PlayerControllerTraining_SetChangedTrainingKPI_OnServer Parms{};

	Parms.IsActive = IsActive;
	Parms.CharacterCode = CharacterCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerTraining.SetTakeDamageType_OnServer
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// ETakeDamageType                         DamageType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerControllerTraining::SetTakeDamageType_OnServer(const ETakeDamageType DamageType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerTraining", "SetTakeDamageType_OnServer");

	Params::PlayerControllerTraining_SetTakeDamageType_OnServer Parms{};

	Parms.DamageType = DamageType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerVisualLobby.SendSeverTrainingCharacterData
// (Final, Native, Protected)

void APlayerControllerVisualLobby::SendSeverTrainingCharacterData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerVisualLobby", "SendSeverTrainingCharacterData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerControllerVisualLobby.SetupTrainingCharacterData_OnServer
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// int32                                   TrainingDamageTypeIndex                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTrainingFriendlyFire                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTrainingCharacterData           TrainingPlayerCharacterData                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FTrainingCharacterData           TrainingCPUCharacterData1                              (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FTrainingCharacterData           TrainingCPUCharacterData2                              (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FTrainingCharacterData           TrainingCPUCharacterData3                              (Parm, NoDestructor, NativeAccessSpecifierPublic)

void APlayerControllerVisualLobby::SetupTrainingCharacterData_OnServer(int32 TrainingDamageTypeIndex, bool bTrainingFriendlyFire, const struct FTrainingCharacterData& TrainingPlayerCharacterData, const struct FTrainingCharacterData& TrainingCPUCharacterData1, const struct FTrainingCharacterData& TrainingCPUCharacterData2, const struct FTrainingCharacterData& TrainingCPUCharacterData3)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerControllerVisualLobby", "SetupTrainingCharacterData_OnServer");

	Params::PlayerControllerVisualLobby_SetupTrainingCharacterData_OnServer Parms{};

	Parms.TrainingDamageTypeIndex = TrainingDamageTypeIndex;
	Parms.bTrainingFriendlyFire = bTrainingFriendlyFire;
	Parms.TrainingPlayerCharacterData = std::move(TrainingPlayerCharacterData);
	Parms.TrainingCPUCharacterData1 = std::move(TrainingCPUCharacterData1);
	Parms.TrainingCPUCharacterData2 = std::move(TrainingCPUCharacterData2);
	Parms.TrainingCPUCharacterData3 = std::move(TrainingCPUCharacterData3);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerCounterPresenter.UpdateViewByGameOption
// (Final, Native, Private)

void APlayerCounterPresenter::UpdateViewByGameOption()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerCounterPresenter", "UpdateViewByGameOption");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerCounterPresenter.UpdateUIOnSettings
// (Final, Native, Private, Const)

void APlayerCounterPresenter::UpdateUIOnSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerCounterPresenter", "UpdateUIOnSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerScoutBattleInfo.EndScoutRequest
// (Final, Native, Public)

void UPlayerScoutBattleInfo::EndScoutRequest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerScoutBattleInfo", "EndScoutRequest");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerScoutBattleInfo.ScoutRequest
// (Final, Native, Public)
// Parameters:
// class APlayerStateBattle*               SendPlayer                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBlock                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerScoutBattleInfo::ScoutRequest(const class APlayerStateBattle* SendPlayer, bool bBlock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerScoutBattleInfo", "ScoutRequest");

	Params::PlayerScoutBattleInfo_ScoutRequest Parms{};

	Parms.SendPlayer = SendPlayer;
	Parms.bBlock = bBlock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerScoutComponent.ReplyToScoutRequet_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class UPlayerScoutComponent*            Winner                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPositive                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerScoutComponent::ReplyToScoutRequet_ToServer(class UPlayerScoutComponent* Winner, bool bPositive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerScoutComponent", "ReplyToScoutRequet_ToServer");

	Params::PlayerScoutComponent_ReplyToScoutRequet_ToServer Parms{};

	Parms.Winner = Winner;
	Parms.bPositive = bPositive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerScoutComponent.ScoutRequest_ToClient
// (Final, Net, NetReliable, Native, Event, Private, NetClient, NetValidate)
// Parameters:
// class APlayerStateBattle*               Winner                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerScoutComponent::ScoutRequest_ToClient(class APlayerStateBattle* Winner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerScoutComponent", "ScoutRequest_ToClient");

	Params::PlayerScoutComponent_ScoutRequest_ToClient Parms{};

	Parms.Winner = Winner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerScoutComponent.ScoutRequest_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class APlayerStateBattle*               Loser                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerScoutComponent::ScoutRequest_ToServer(class APlayerStateBattle* Loser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerScoutComponent", "ScoutRequest_ToServer");

	Params::PlayerScoutComponent_ScoutRequest_ToServer Parms{};

	Parms.Loser = Loser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerScoutComponent.ScoutRequestComplete_NetMulticast
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private, NetValidate)
// Parameters:
// class UPlayerScoutComponent*            Winner                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSuccess                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerScoutComponent::ScoutRequestComplete_NetMulticast(class UPlayerScoutComponent* Winner, bool bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerScoutComponent", "ScoutRequestComplete_NetMulticast");

	Params::PlayerScoutComponent_ScoutRequestComplete_NetMulticast Parms{};

	Parms.Winner = Winner;
	Parms.bSuccess = bSuccess;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerScoutComponent.ScoutRequestFailed_NetMulticast
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void UPlayerScoutComponent::ScoutRequestFailed_NetMulticast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerScoutComponent", "ScoutRequestFailed_NetMulticast");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerScreenInfoWidget.OnBattleSequenceChanged
// (Final, Native, Public)
// Parameters:
// EBattleSequence                         NewSequence                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerScreenInfoWidget::OnBattleSequenceChanged(EBattleSequence NewSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerScreenInfoWidget", "OnBattleSequenceChanged");

	Params::PlayerScreenInfoWidget_OnBattleSequenceChanged Parms{};

	Parms.NewSequence = NewSequence;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerScreenInfoWidget.OnMapClose
// (Final, Native, Public)

void UPlayerScreenInfoWidget::OnMapClose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerScreenInfoWidget", "OnMapClose");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerScreenInfoWidget.OnMapOpen
// (Final, Native, Public)

void UPlayerScreenInfoWidget::OnMapOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerScreenInfoWidget", "OnMapOpen");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerScreenInfoWidget.RemoveWidgetsOnDead
// (Final, Native, Private)

void UPlayerScreenInfoWidget::RemoveWidgetsOnDead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerScreenInfoWidget", "RemoveWidgetsOnDead");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerScreenInfoWidget.StartGettingBloodAnimation
// (Final, Native, Public)

void UPlayerScreenInfoWidget::StartGettingBloodAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerScreenInfoWidget", "StartGettingBloodAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerScreenInfoWidget.SwitchCharacterActionGuide
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FRequestUIData                   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UPlayerScreenInfoWidget::SwitchCharacterActionGuide(const struct FRequestUIData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerScreenInfoWidget", "SwitchCharacterActionGuide");

	Params::PlayerScreenInfoWidget_SwitchCharacterActionGuide Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerScreenInfoWidget.UpdateDyingEffect
// (Final, Native, Private)

void UPlayerScreenInfoWidget::UpdateDyingEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerScreenInfoWidget", "UpdateDyingEffect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerScreenInfoWidget.UpdateInteractPopUpWidget
// (Final, Native, Private)
// Parameters:
// class UInteractTargetComponent*         CurrentTarget                                          (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCanInteract                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerScreenInfoWidget::UpdateInteractPopUpWidget(const class UInteractTargetComponent* CurrentTarget, bool bCanInteract)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerScreenInfoWidget", "UpdateInteractPopUpWidget");

	Params::PlayerScreenInfoWidget_UpdateInteractPopUpWidget Parms{};

	Parms.CurrentTarget = CurrentTarget;
	Parms.bCanInteract = bCanInteract;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.BP_ClearDyingState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bWithRecovery                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerStateBattle::BP_ClearDyingState(bool bWithRecovery)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "BP_ClearDyingState");

	Params::PlayerStateBattle_BP_ClearDyingState Parms{};

	Parms.bWithRecovery = bWithRecovery;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.BP_ClearInvincible
// (Final, Native, Public, BlueprintCallable)

void APlayerStateBattle::BP_ClearInvincible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "BP_ClearInvincible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.BP_GetBuffParam
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UBuffParam*                       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBuffParam* APlayerStateBattle::BP_GetBuffParam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "BP_GetBuffParam");

	Params::PlayerStateBattle_BP_GetBuffParam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.PlayerStateBattle.BP_GetRescueCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacterBattle*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ACharacterBattle* APlayerStateBattle::BP_GetRescueCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "BP_GetRescueCharacter");

	Params::PlayerStateBattle_BP_GetRescueCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.PlayerStateBattle.BP_IsDead
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool APlayerStateBattle::BP_IsDead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "BP_IsDead");

	Params::PlayerStateBattle_BP_IsDead Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.PlayerStateBattle.BP_IsDying
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool APlayerStateBattle::BP_IsDying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "BP_IsDying");

	Params::PlayerStateBattle_BP_IsDying Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.PlayerStateBattle.BP_IsInvincible
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool APlayerStateBattle::BP_IsInvincible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "BP_IsInvincible");

	Params::PlayerStateBattle_BP_IsInvincible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.PlayerStateBattle.BP_IsPlusUltraPermanency
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool APlayerStateBattle::BP_IsPlusUltraPermanency()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "BP_IsPlusUltraPermanency");

	Params::PlayerStateBattle_BP_IsPlusUltraPermanency Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.PlayerStateBattle.BP_RecoverGuardPoint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerStateBattle*               Healer                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    EnableCondition                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerStateBattle::BP_RecoverGuardPoint(float Value, class APlayerStateBattle* Healer, bool EnableCondition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "BP_RecoverGuardPoint");

	Params::PlayerStateBattle_BP_RecoverGuardPoint Parms{};

	Parms.Value = Value;
	Parms.Healer = Healer;
	Parms.EnableCondition = EnableCondition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.BP_RecoverHealth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnableCondition                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerStateBattle*               Healer                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerStateBattle::BP_RecoverHealth(float Value, bool bEnableCondition, class APlayerStateBattle* Healer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "BP_RecoverHealth");

	Params::PlayerStateBattle_BP_RecoverHealth Parms{};

	Parms.Value = Value;
	Parms.bEnableCondition = bEnableCondition;
	Parms.Healer = Healer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.BP_ResetPlusUltraPoint
// (Final, Native, Public, BlueprintCallable)

void APlayerStateBattle::BP_ResetPlusUltraPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "BP_ResetPlusUltraPoint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.BP_SetDyingInteracted
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerStateBattle::BP_SetDyingInteracted(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "BP_SetDyingInteracted");

	Params::PlayerStateBattle_BP_SetDyingInteracted Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.BP_SetDyingInteracted_ToServer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerStateBattle::BP_SetDyingInteracted_ToServer(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "BP_SetDyingInteracted_ToServer");

	Params::PlayerStateBattle_BP_SetDyingInteracted_ToServer Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.BP_SetInvincible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   FixTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    EnableEffect                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ProjectileThrough                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SlipDamageThrough                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerStateBattle::BP_SetInvincible(float FixTime, float MaxTime, bool EnableEffect, bool ProjectileThrough, bool SlipDamageThrough)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "BP_SetInvincible");

	Params::PlayerStateBattle_BP_SetInvincible Parms{};

	Parms.FixTime = FixTime;
	Parms.MaxTime = MaxTime;
	Parms.EnableEffect = EnableEffect;
	Parms.ProjectileThrough = ProjectileThrough;
	Parms.SlipDamageThrough = SlipDamageThrough;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.CalcExitPlayerScore_RPC
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// struct FUniqueNetIdKey                  ExitPlayerId                                           (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerStateBattle::CalcExitPlayerScore_RPC(const struct FUniqueNetIdKey& ExitPlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "CalcExitPlayerScore_RPC");

	Params::PlayerStateBattle_CalcExitPlayerScore_RPC Parms{};

	Parms.ExitPlayerId = std::move(ExitPlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.ClearSimultaneouslyCheer
// (Final, Native, Private)

void APlayerStateBattle::ClearSimultaneouslyCheer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "ClearSimultaneouslyCheer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.ClientTextMessageReceived
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// int16                                   SenderPlayerId                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InKeyForTable                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerStateBattle::ClientTextMessageReceived(int16 SenderPlayerId, const class FString& InKeyForTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "ClientTextMessageReceived");

	Params::PlayerStateBattle_ClientTextMessageReceived Parms{};

	Parms.SenderPlayerId = SenderPlayerId;
	Parms.InKeyForTable = std::move(InKeyForTable);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.EnableToRise
// (Final, Native, Public)
// Parameters:
// bool                                    bIsGuard                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerStateBattle::EnableToRise(bool bIsGuard, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "EnableToRise");

	Params::PlayerStateBattle_EnableToRise Parms{};

	Parms.bIsGuard = bIsGuard;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.ForcePickUpTagRequest_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)

void APlayerStateBattle::ForcePickUpTagRequest_ToServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "ForcePickUpTagRequest_ToServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.NotifyPlayingCharacterDead_Client
// (Net, NetReliable, Native, Event, Public, NetClient)

void APlayerStateBattle::NotifyPlayingCharacterDead_Client()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "NotifyPlayingCharacterDead_Client");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.OnAudioFinished_AppearSquad
// (Final, Native, Private)
// Parameters:
// class UAtomComponent*                   AtomComponent                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerStateBattle::OnAudioFinished_AppearSquad(class UAtomComponent* AtomComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "OnAudioFinished_AppearSquad");

	Params::PlayerStateBattle_OnAudioFinished_AppearSquad Parms{};

	Parms.AtomComponent = AtomComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.OnRep_CheerCount
// (Final, Native, Private)

void APlayerStateBattle::OnRep_CheerCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "OnRep_CheerCount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.OnRep_GuardPoint
// (Final, Native, Private)

void APlayerStateBattle::OnRep_GuardPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "OnRep_GuardPoint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.OnRep_HealthData
// (Final, Native, Private)

void APlayerStateBattle::OnRep_HealthData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "OnRep_HealthData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.OnRep_HitEnemyInfoList
// (Final, Native, Private)

void APlayerStateBattle::OnRep_HitEnemyInfoList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "OnRep_HitEnemyInfoList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.OnRep_NumberOfSpectator
// (Final, Native, Private)

void APlayerStateBattle::OnRep_NumberOfSpectator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "OnRep_NumberOfSpectator");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.OnRep_PlusUltraPermanency
// (Final, Native, Private)

void APlayerStateBattle::OnRep_PlusUltraPermanency()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "OnRep_PlusUltraPermanency");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.OnRep_PlusUltraPoint
// (Final, Native, Private)

void APlayerStateBattle::OnRep_PlusUltraPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "OnRep_PlusUltraPoint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.OnRep_respawnTagState
// (Final, Native, Private)

void APlayerStateBattle::OnRep_respawnTagState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "OnRep_respawnTagState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.OnRep_SimultaneouslyCheer
// (Final, Native, Private)

void APlayerStateBattle::OnRep_SimultaneouslyCheer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "OnRep_SimultaneouslyCheer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.OnRep_TotalDamage
// (Final, Native, Private)

void APlayerStateBattle::OnRep_TotalDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "OnRep_TotalDamage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.ReceiveAbilityRequest_ToClient
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// int16                                   SenderPlayerId                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMdAbilityType                          AbilityType                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAttackId                               AttackId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerStateBattle::ReceiveAbilityRequest_ToClient(int16 SenderPlayerId, const EMdAbilityType AbilityType, const EAttackId AttackId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "ReceiveAbilityRequest_ToClient");

	Params::PlayerStateBattle_ReceiveAbilityRequest_ToClient Parms{};

	Parms.SenderPlayerId = SenderPlayerId;
	Parms.AbilityType = AbilityType;
	Parms.AttackId = AttackId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.ReceiveSupplyRequest_ToClient
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// int16                                   SenderPlayerId                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SupplyId                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerStateBattle::ReceiveSupplyRequest_ToClient(int16 SenderPlayerId, const class FName& SupplyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "ReceiveSupplyRequest_ToClient");

	Params::PlayerStateBattle_ReceiveSupplyRequest_ToClient Parms{};

	Parms.SenderPlayerId = SenderPlayerId;
	Parms.SupplyId = SupplyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.RecoverDying_ToClient
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class ACharacterBattle*                 RescueCharacter                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerStateBattle::RecoverDying_ToClient(class ACharacterBattle* RescueCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "RecoverDying_ToClient");

	Params::PlayerStateBattle_RecoverDying_ToClient Parms{};

	Parms.RescueCharacter = RescueCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.ReloadTagPosition
// (Final, Native, Public)

void APlayerStateBattle::ReloadTagPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "ReloadTagPosition");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.SendTotalMoveDistanceToServer_RPC
// (Final, Net, Native, Event, Private, NetServer)
// Parameters:
// float                                   TotalDistance                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerStateBattle::SendTotalMoveDistanceToServer_RPC(float TotalDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "SendTotalMoveDistanceToServer_RPC");

	Params::PlayerStateBattle_SendTotalMoveDistanceToServer_RPC Parms{};

	Parms.TotalDistance = TotalDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.ServerSealUnique
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// TArray<class ACharacterBattle*>         Targets                                                (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void APlayerStateBattle::ServerSealUnique(const TArray<class ACharacterBattle*>& Targets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "ServerSealUnique");

	Params::PlayerStateBattle_ServerSealUnique Parms{};

	Parms.Targets = std::move(Targets);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.SetDyingInteracted_ToServer
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerStateBattle::SetDyingInteracted_ToServer(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "SetDyingInteracted_ToServer");

	Params::PlayerStateBattle_SetDyingInteracted_ToServer Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.UpdateKingOrNotEffect
// (Final, Native, Public, BlueprintCallable)

void APlayerStateBattle::UpdateKingOrNotEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "UpdateKingOrNotEffect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.WinDemoCompleteFlag_RPC
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// bool                                    bComplate                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerStateBattle::WinDemoCompleteFlag_RPC(const bool bComplate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "WinDemoCompleteFlag_RPC");

	Params::PlayerStateBattle_WinDemoCompleteFlag_RPC Parms{};

	Parms.bComplate = bComplate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.BP_GetDeltaRateComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDeltaRateComponent*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDeltaRateComponent* APlayerStateBattle::BP_GetDeltaRateComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "BP_GetDeltaRateComponent");

	Params::PlayerStateBattle_BP_GetDeltaRateComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.PlayerStateBattle.BP_GetDuplicateController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDuplicateControlComponent*       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDuplicateControlComponent* APlayerStateBattle::BP_GetDuplicateController() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "BP_GetDuplicateController");

	Params::PlayerStateBattle_BP_GetDuplicateController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.PlayerStateBattle.BP_GetPlusUltraMaxTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float APlayerStateBattle::BP_GetPlusUltraMaxTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "BP_GetPlusUltraMaxTime");

	Params::PlayerStateBattle_BP_GetPlusUltraMaxTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.PlayerStateBattle.BP_IsDyingInteracted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool APlayerStateBattle::BP_IsDyingInteracted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "BP_IsDyingInteracted");

	Params::PlayerStateBattle_BP_IsDyingInteracted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.PlayerStateBattle.BP_IsImitation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool APlayerStateBattle::BP_IsImitation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "BP_IsImitation");

	Params::PlayerStateBattle_BP_IsImitation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.PlayerStateBattle.ClientRemoveMessage
// (Net, NetReliable, Native, Event, Public, NetClient, Const)
// Parameters:
// int16                                   PlayerIdToRemove                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APlayerStateBattle::ClientRemoveMessage(int16 PlayerIdToRemove) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "ClientRemoveMessage");

	Params::PlayerStateBattle_ClientRemoveMessage Parms{};

	Parms.PlayerIdToRemove = PlayerIdToRemove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.GetCurrentEmoteId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 APlayerStateBattle::GetCurrentEmoteId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "GetCurrentEmoteId");

	Params::PlayerStateBattle_GetCurrentEmoteId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.PlayerStateBattle.RequestForceQuit_RPC
// (Net, NetReliable, Native, Event, Protected, NetServer, BlueprintCallable, Const)

void APlayerStateBattle::RequestForceQuit_RPC() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "RequestForceQuit_RPC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerStateBattle.RequestForceStart_RPC
// (Net, NetReliable, Native, Event, Protected, NetServer, BlueprintCallable, Const)

void APlayerStateBattle::RequestForceStart_RPC() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStateBattle", "RequestForceStart_RPC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlayerTagWidget.UpdateVisibility
// (Final, Native, Public)

void UPlayerTagWidget::UpdateVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerTagWidget", "UpdateVisibility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlusUltraLevel.PlayActiveAnim
// (Final, Native, Public, BlueprintCallable)

void UPlusUltraLevel::PlayActiveAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlusUltraLevel", "PlayActiveAnim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlusUltraLevel.PlayActiveAnim_Internal
// (Event, Public, BlueprintEvent)

void UPlusUltraLevel::PlayActiveAnim_Internal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlusUltraLevel", "PlayActiveAnim_Internal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.PlusUltraLevel.PlayLevelUpAnim
// (Final, Native, Public, BlueprintCallable)

void UPlusUltraLevel::PlayLevelUpAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlusUltraLevel", "PlayLevelUpAnim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PlusUltraLevel.PlayLevelUpAnim_Internal
// (Event, Public, BlueprintEvent)

void UPlusUltraLevel::PlayLevelUpAnim_Internal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlusUltraLevel", "PlayLevelUpAnim_Internal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.PlusUltraLevel.SetPluslevelSwitcher
// (Final, Native, Public)
// Parameters:
// int32                                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlusUltraLevel::SetPluslevelSwitcher(int32 Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlusUltraLevel", "SetPluslevelSwitcher");

	Params::PlusUltraLevel_SetPluslevelSwitcher Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PoisonMistDataAsset.ClearDebugFlg
// (Native, Public)

void UPoisonMistDataAsset::ClearDebugFlg()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PoisonMistDataAsset", "ClearDebugFlg");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PoisonMistDataAsset.MakeJSonData
// (Native, Public)

void UPoisonMistDataAsset::MakeJSonData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PoisonMistDataAsset", "MakeJSonData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PoisonMistDataAsset.StagePoisonMistDataSortByEnum
// (Native, Public)

void UPoisonMistDataAsset::StagePoisonMistDataSortByEnum()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PoisonMistDataAsset", "StagePoisonMistDataSortByEnum");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PoisonMistTimerWidget.MovingPoisonMist
// (Final, Native, Public, Const)

void UPoisonMistTimerWidget::MovingPoisonMist() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PoisonMistTimerWidget", "MovingPoisonMist");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PoisonMistTimerWidget.StoppingPoisonMist
// (Final, Native, Public, Const)
// Parameters:
// float                                   PoisonMistSeconds                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPoisonMistTimerWidget::StoppingPoisonMist(const float PoisonMistSeconds) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PoisonMistTimerWidget", "StoppingPoisonMist");

	Params::PoisonMistTimerWidget_StoppingPoisonMist Parms{};

	Parms.PoisonMistSeconds = PoisonMistSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PortalShotGen.CreatePortal_RPC
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FPortalShotGenRep                GenPortal                                              (Parm, NoDestructor, NativeAccessSpecifierPublic)

void APortalShotGen::CreatePortal_RPC(const struct FPortalShotGenRep& GenPortal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalShotGen", "CreatePortal_RPC");

	Params::PortalShotGen_CreatePortal_RPC Parms{};

	Parms.GenPortal = std::move(GenPortal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PortalShotGen.OnRep_CreatePortal
// (Final, Native, Public)

void APortalShotGen::OnRep_CreatePortal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PortalShotGen", "OnRep_CreatePortal");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PredictionLineComponent.AddIgnoreActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPredictionLineComponent::AddIgnoreActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PredictionLineComponent", "AddIgnoreActor");

	Params::PredictionLineComponent_AddIgnoreActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PredictionLineComponent.Begin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   LineRadius                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HitRadius                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SimulateTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Frequency                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OverrideGravity                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    HitParticleAlwaysDisp                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPredictionLineComponent::Begin(float LineRadius, float HitRadius, float SimulateTime, float Frequency, float OverrideGravity, bool HitParticleAlwaysDisp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PredictionLineComponent", "Begin");

	Params::PredictionLineComponent_Begin Parms{};

	Parms.LineRadius = LineRadius;
	Parms.HitRadius = HitRadius;
	Parms.SimulateTime = SimulateTime;
	Parms.Frequency = Frequency;
	Parms.OverrideGravity = OverrideGravity;
	Parms.HitParticleAlwaysDisp = HitParticleAlwaysDisp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PredictionLineComponent.End
// (Final, Native, Public, BlueprintCallable)

void UPredictionLineComponent::End()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PredictionLineComponent", "End");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PredictionLineComponent.SetHitParticleTemplate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UParticleSystem*                  Particle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPredictionLineComponent::SetHitParticleTemplate(class UParticleSystem* Particle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PredictionLineComponent", "SetHitParticleTemplate");

	Params::PredictionLineComponent_SetHitParticleTemplate Parms{};

	Parms.Particle = Particle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PredictionLineComponent.SetLineMeshMateral
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterial*                        Material                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPredictionLineComponent::SetLineMeshMateral(class UMaterial* Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PredictionLineComponent", "SetLineMeshMateral");

	Params::PredictionLineComponent_SetLineMeshMateral Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PredictionLineComponent.SetViewType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EViewType                               Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPredictionLineComponent::SetViewType(EViewType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PredictionLineComponent", "SetViewType");

	Params::PredictionLineComponent_SetViewType Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PredictionLineComponent.Simulate
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FPredictProjectilePathResult     ResPathData                                            (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVector                          StartDir                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Speed                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPredictionLineComponent::Simulate(struct FPredictProjectilePathResult* ResPathData, const struct FVector& StartDir, float Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PredictionLineComponent", "Simulate");

	Params::PredictionLineComponent_Simulate Parms{};

	Parms.StartDir = std::move(StartDir);
	Parms.Speed = Speed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ResPathData != nullptr)
		*ResPathData = std::move(Parms.ResPathData);
}


// Function InGameModule.PredictionLineComponent.Simulate_ToEndPos
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FPredictProjectilePathResult     ResPathData                                            (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVector                          EndPos                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ArcParam                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPredictionLineComponent::Simulate_ToEndPos(struct FPredictProjectilePathResult* ResPathData, const struct FVector& EndPos, float ArcParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PredictionLineComponent", "Simulate_ToEndPos");

	Params::PredictionLineComponent_Simulate_ToEndPos Parms{};

	Parms.EndPos = std::move(EndPos);
	Parms.ArcParam = ArcParam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ResPathData != nullptr)
		*ResPathData = std::move(Parms.ResPathData);
}


// Function InGameModule.ProfileHasWidget.OnChangedFinishBattleScene
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UProfileHasWidget::OnChangedFinishBattleScene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileHasWidget", "OnChangedFinishBattleScene");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ProjectileReplicateBattleComponent.CreateGenerate_RPC
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// struct FProjectileGenerateRep           Rep                                                    (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UProjectileReplicateBattleComponent::CreateGenerate_RPC(const struct FProjectileGenerateRep& Rep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectileReplicateBattleComponent", "CreateGenerate_RPC");

	Params::ProjectileReplicateBattleComponent_CreateGenerate_RPC Parms{};

	Parms.Rep = std::move(Rep);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ProjectileReplicateBattleComponent.DelaySpawnReplicateTest_RPC
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FDelaySpawnReplicateTestRep      Data                                                   (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UProjectileReplicateBattleComponent::DelaySpawnReplicateTest_RPC(const struct FDelaySpawnReplicateTestRep& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectileReplicateBattleComponent", "DelaySpawnReplicateTest_RPC");

	Params::ProjectileReplicateBattleComponent_DelaySpawnReplicateTest_RPC Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ProjectileReplicateBattleComponent.DestroyBullet_RPC
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// struct FDestroyBulletRepImpl            Data                                                   (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UProjectileReplicateBattleComponent::DestroyBullet_RPC(const struct FDestroyBulletRepImpl& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectileReplicateBattleComponent", "DestroyBullet_RPC");

	Params::ProjectileReplicateBattleComponent_DestroyBullet_RPC Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ProjectileReplicateBattleComponent.DestroyGenerator_RPC
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// struct FDestroyGeneratorRep             Rep                                                    (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UProjectileReplicateBattleComponent::DestroyGenerator_RPC(const struct FDestroyGeneratorRep& Rep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectileReplicateBattleComponent", "DestroyGenerator_RPC");

	Params::ProjectileReplicateBattleComponent_DestroyGenerator_RPC Parms{};

	Parms.Rep = std::move(Rep);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ProjectileReplicateBattleComponent.GeneralData_RPC
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// struct FGeneralDataRep                  Data                                                   (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void UProjectileReplicateBattleComponent::GeneralData_RPC(const struct FGeneralDataRep& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectileReplicateBattleComponent", "GeneralData_RPC");

	Params::ProjectileReplicateBattleComponent_GeneralData_RPC Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ProjectileReplicateBattleComponent.GeneratorRestoration_RPC
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FRestorationGeneratorRep         Data                                                   (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UProjectileReplicateBattleComponent::GeneratorRestoration_RPC(const struct FRestorationGeneratorRep& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectileReplicateBattleComponent", "GeneratorRestoration_RPC");

	Params::ProjectileReplicateBattleComponent_GeneratorRestoration_RPC Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ProjectileReplicateBattleComponent.OnRep_CreateGenerateData
// (Final, Native, Protected)

void UProjectileReplicateBattleComponent::OnRep_CreateGenerateData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectileReplicateBattleComponent", "OnRep_CreateGenerateData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ProjectileReplicateBattleComponent.OnRep_DestroyBullet
// (Final, Native, Protected)

void UProjectileReplicateBattleComponent::OnRep_DestroyBullet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectileReplicateBattleComponent", "OnRep_DestroyBullet");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ProjectileReplicateBattleComponent.OnRep_DestroyGenerator
// (Final, Native, Protected)

void UProjectileReplicateBattleComponent::OnRep_DestroyGenerator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectileReplicateBattleComponent", "OnRep_DestroyGenerator");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ProjectileReplicateBattleComponent.OnRep_GeneralData
// (Final, Native, Public)

void UProjectileReplicateBattleComponent::OnRep_GeneralData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectileReplicateBattleComponent", "OnRep_GeneralData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ProjectileReplicateBattleComponent.OnRep_State
// (Final, Native, Public)

void UProjectileReplicateBattleComponent::OnRep_State()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectileReplicateBattleComponent", "OnRep_State");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ProjectileReplicateBattleComponent.State_RPC
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// int32                                   State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   GenID                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProjectileReplicateBattleComponent::State_RPC(int32 State, int32 GenID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectileReplicateBattleComponent", "State_RPC");

	Params::ProjectileReplicateBattleComponent_State_RPC Parms{};

	Parms.State = State;
	Parms.GenID = GenID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PUInfoWidget.ActivePlusUltra
// (Final, Native, Public)

void UPUInfoWidget::ActivePlusUltra()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PUInfoWidget", "ActivePlusUltra");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PUInfoWidget.ControllerChange
// (Final, Native, Private)

void UPUInfoWidget::ControllerChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PUInfoWidget", "ControllerChange");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PUInfoWidget.EndPlusUltra
// (Final, Native, Public)

void UPUInfoWidget::EndPlusUltra()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PUInfoWidget", "EndPlusUltra");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PUInfoWidget.FinishAnim
// (Final, Native, Private)

void UPUInfoWidget::FinishAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PUInfoWidget", "FinishAnim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PUInfoWidget.ReadyPlusUltra
// (Final, Native, Public)

void UPUInfoWidget::ReadyPlusUltra()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PUInfoWidget", "ReadyPlusUltra");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.PUInfoWidget.UpdateButtonGuideVisibility
// (Final, Native, Private, Const)

void UPUInfoWidget::UpdateButtonGuideVisibility() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PUInfoWidget", "UpdateButtonGuideVisibility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.Reflect.OnHitBullet
// (Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABullet*                          OtherBullet                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AReflect::OnHitBullet(class UPrimitiveComponent* HitComponent, class ABullet* OtherBullet, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Reflect", "OnHitBullet");

	Params::Reflect_OnHitBullet Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherBullet = OtherBullet;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.RestraintEffectComponent.BP_RegisterEffect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ERestraintType                          InEffectType                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URestraintEffectComponent::BP_RegisterEffect(const ERestraintType InEffectType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RestraintEffectComponent", "BP_RegisterEffect");

	Params::RestraintEffectComponent_BP_RegisterEffect Parms{};

	Parms.InEffectType = InEffectType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.RestraintEffectComponent.OnFinishParticle
// (Final, Native, Private)
// Parameters:
// class UParticleSystemComponent*         Particle                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URestraintEffectComponent::OnFinishParticle(class UParticleSystemComponent* Particle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RestraintEffectComponent", "OnFinishParticle");

	Params::RestraintEffectComponent_OnFinishParticle Parms{};

	Parms.Particle = Particle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.RetireAppWidget.OnCancelEvent
// (Final, Native, Public)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URetireAppWidget::OnCancelEvent(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RetireAppWidget", "OnCancelEvent");

	Params::RetireAppWidget_OnCancelEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.RetireAppWidget.OnCloseLevelEvent
// (Final, Native, Public)

void URetireAppWidget::OnCloseLevelEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RetireAppWidget", "OnCloseLevelEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.RetireAppWidget.OnPopupButtonEvent
// (Final, Native, Public)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    LeftButton                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URetireAppWidget::OnPopupButtonEvent(class UAppWidget* Widget, EWidgetInputType InputType, bool LeftButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RetireAppWidget", "OnPopupButtonEvent");

	Params::RetireAppWidget_OnPopupButtonEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;
	Parms.LeftButton = LeftButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ReturnMainMenuAppWidget.OnCancelEvent
// (Final, Native, Public)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UReturnMainMenuAppWidget::OnCancelEvent(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReturnMainMenuAppWidget", "OnCancelEvent");

	Params::ReturnMainMenuAppWidget_OnCancelEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ReturnMainMenuAppWidget.OnCloseLevelEvent
// (Final, Native, Public)

void UReturnMainMenuAppWidget::OnCloseLevelEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReturnMainMenuAppWidget", "OnCloseLevelEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ReturnMainMenuAppWidget.OnCloseLevelEventReturnToMenu
// (Final, Native, Public)

void UReturnMainMenuAppWidget::OnCloseLevelEventReturnToMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReturnMainMenuAppWidget", "OnCloseLevelEventReturnToMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ReturnMainMenuAppWidget.OnPopupButtonEvent
// (Final, Native, Public)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    LeftButton                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UReturnMainMenuAppWidget::OnPopupButtonEvent(class UAppWidget* Widget, EWidgetInputType InputType, bool LeftButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReturnMainMenuAppWidget", "OnPopupButtonEvent");

	Params::ReturnMainMenuAppWidget_OnPopupButtonEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;
	Parms.LeftButton = LeftButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.RiseCementGen.OnRep_RiseCement
// (Final, Native, Private)

void ARiseCementGen::OnRep_RiseCement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RiseCementGen", "OnRep_RiseCement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.RiseCementGen.RiseCement_RPC
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// struct FRiseCementGenRep                Rep                                                    (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ARiseCementGen::RiseCement_RPC(const struct FRiseCementGenRep& Rep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RiseCementGen", "RiseCement_RPC");

	Params::RiseCementGen_RiseCement_RPC Parms{};

	Parms.Rep = std::move(Rep);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ScoutBattleActionGuideWidget.PlayConsentAnim
// (Final, Native, Public, BlueprintCallable)

void UScoutBattleActionGuideWidget::PlayConsentAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScoutBattleActionGuideWidget", "PlayConsentAnim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ScoutBattleActionGuideWidget.PlayConsentAnim_Internal
// (Event, Public, BlueprintEvent)

void UScoutBattleActionGuideWidget::PlayConsentAnim_Internal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScoutBattleActionGuideWidget", "PlayConsentAnim_Internal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ScoutBattleActionGuideWidget.PlayRefusalAnim
// (Final, Native, Public, BlueprintCallable)

void UScoutBattleActionGuideWidget::PlayRefusalAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScoutBattleActionGuideWidget", "PlayRefusalAnim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ScoutBattleActionGuideWidget.PlayRefusalAnim_Internal
// (Event, Public, BlueprintEvent)

void UScoutBattleActionGuideWidget::PlayRefusalAnim_Internal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScoutBattleActionGuideWidget", "PlayRefusalAnim_Internal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.ShortcutItemWidget.OnBeginUsingSupply
// (Final, Native, Public)
// Parameters:
// class USupplyHolder*                    Holder                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UShortcutItemWidget::OnBeginUsingSupply(const class USupplyHolder* Holder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShortcutItemWidget", "OnBeginUsingSupply");

	Params::ShortcutItemWidget_OnBeginUsingSupply Parms{};

	Parms.Holder = Holder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ShortcutItemWidget.OnEndUsingSupply
// (Final, Native, Public)
// Parameters:
// class USupplyHolder*                    Holder                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UShortcutItemWidget::OnEndUsingSupply(const class USupplyHolder* Holder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShortcutItemWidget", "OnEndUsingSupply");

	Params::ShortcutItemWidget_OnEndUsingSupply Parms{};

	Parms.Holder = Holder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.ShortcutItemWidget.UpdateShortcutUI
// (Final, Native, Public)

void UShortcutItemWidget::UpdateShortcutUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShortcutItemWidget", "UpdateShortcutUI");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SignalStartWidget.OnStartCall
// (Final, Native, Private)

void USignalStartWidget::OnStartCall()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SignalStartWidget", "OnStartCall");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SimpleCharacter.BP_ChangeNext
// (Final, Native, Public, BlueprintCallable)

void ASimpleCharacter::BP_ChangeNext()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleCharacter", "BP_ChangeNext");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SimpleCharacter.BP_ChangeState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             StateName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASimpleCharacter::BP_ChangeState(class FName StateName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleCharacter", "BP_ChangeState");

	Params::SimpleCharacter_BP_ChangeState Parms{};

	Parms.StateName = StateName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SimulatedPlayerHudManager.BeginChangeGuard
// (Final, Native, Private)
// Parameters:
// bool                                    bIsDamage                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimulatedPlayerHudManager::BeginChangeGuard(bool bIsDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimulatedPlayerHudManager", "BeginChangeGuard");

	Params::SimulatedPlayerHudManager_BeginChangeGuard Parms{};

	Parms.bIsDamage = bIsDamage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SimulatedPlayerHudManager.BeginChangeHealth
// (Final, Native, Private)
// Parameters:
// bool                                    bIsDamage                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimulatedPlayerHudManager::BeginChangeHealth(bool bIsDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimulatedPlayerHudManager", "BeginChangeHealth");

	Params::SimulatedPlayerHudManager_BeginChangeHealth Parms{};

	Parms.bIsDamage = bIsDamage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SimulatedPlayerHudManager.OnChangeGuardValue
// (Final, Native, Private)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimulatedPlayerHudManager::OnChangeGuardValue(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimulatedPlayerHudManager", "OnChangeGuardValue");

	Params::SimulatedPlayerHudManager_OnChangeGuardValue Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SimulatedPlayerHudManager.OnChangeHealthValue
// (Final, Native, Private)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimulatedPlayerHudManager::OnChangeHealthValue(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimulatedPlayerHudManager", "OnChangeHealthValue");

	Params::SimulatedPlayerHudManager_OnChangeHealthValue Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SimulatedPlayerHudManager.OnEndTransformState
// (Final, Native, Public)

void USimulatedPlayerHudManager::OnEndTransformState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimulatedPlayerHudManager", "OnEndTransformState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SimulatedPlayerHudManager.OnGuardPointDataInitialized
// (Final, Native, Private)

void USimulatedPlayerHudManager::OnGuardPointDataInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimulatedPlayerHudManager", "OnGuardPointDataInitialized");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SimulatedPlayerHudManager.OnHealthDataInitialized
// (Final, Native, Private)

void USimulatedPlayerHudManager::OnHealthDataInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimulatedPlayerHudManager", "OnHealthDataInitialized");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SimulatedPlayerHudManager.OnStocked
// (Final, Native, Public)

void USimulatedPlayerHudManager::OnStocked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimulatedPlayerHudManager", "OnStocked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SimulatedPlayerHudManager.OnTimerResumed
// (Final, Native, Public)

void USimulatedPlayerHudManager::OnTimerResumed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimulatedPlayerHudManager", "OnTimerResumed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SimulatedPlayerHudManager.OnTimerStoped
// (Final, Native, Public)

void USimulatedPlayerHudManager::OnTimerStoped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimulatedPlayerHudManager", "OnTimerStoped");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SimulatedPlayerHudManager.OnVCBeginTalk
// (Final, Native, Private)
// Parameters:
// class FString                           UniqueNetId                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimulatedPlayerHudManager::OnVCBeginTalk(const class FString& UniqueNetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimulatedPlayerHudManager", "OnVCBeginTalk");

	Params::SimulatedPlayerHudManager_OnVCBeginTalk Parms{};

	Parms.UniqueNetId = std::move(UniqueNetId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SimulatedPlayerHudManager.OnVCConnected
// (Final, Native, Private)
// Parameters:
// class FString                           UniqueNetId                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimulatedPlayerHudManager::OnVCConnected(const class FString& UniqueNetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimulatedPlayerHudManager", "OnVCConnected");

	Params::SimulatedPlayerHudManager_OnVCConnected Parms{};

	Parms.UniqueNetId = std::move(UniqueNetId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SimulatedPlayerHudManager.OnVCDisconnected
// (Final, Native, Private)
// Parameters:
// class FString                           UniqueNetId                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimulatedPlayerHudManager::OnVCDisconnected(const class FString& UniqueNetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimulatedPlayerHudManager", "OnVCDisconnected");

	Params::SimulatedPlayerHudManager_OnVCDisconnected Parms{};

	Parms.UniqueNetId = std::move(UniqueNetId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SimulatedPlayerHudManager.OnVCEndTalk
// (Final, Native, Private)
// Parameters:
// class FString                           UniqueNetId                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimulatedPlayerHudManager::OnVCEndTalk(const class FString& UniqueNetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimulatedPlayerHudManager", "OnVCEndTalk");

	Params::SimulatedPlayerHudManager_OnVCEndTalk Parms{};

	Parms.UniqueNetId = std::move(UniqueNetId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SimulatedPlayerHudManager.OnVCMute
// (Final, Native, Private)
// Parameters:
// class FString                           UniqueNetId                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimulatedPlayerHudManager::OnVCMute(const class FString& UniqueNetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimulatedPlayerHudManager", "OnVCMute");

	Params::SimulatedPlayerHudManager_OnVCMute Parms{};

	Parms.UniqueNetId = std::move(UniqueNetId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SimulatedPlayerHudManager.OnVCUnMute
// (Final, Native, Private)
// Parameters:
// class FString                           UniqueNetId                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimulatedPlayerHudManager::OnVCUnMute(const class FString& UniqueNetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimulatedPlayerHudManager", "OnVCUnMute");

	Params::SimulatedPlayerHudManager_OnVCUnMute Parms{};

	Parms.UniqueNetId = std::move(UniqueNetId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SimulatedPlayerHudManager.StartTransform
// (Final, Native, Public)

void USimulatedPlayerHudManager::StartTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimulatedPlayerHudManager", "StartTransform");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SkillManagementComponent.BP_ClearCopySkills
// (Final, Native, Public, BlueprintCallable)

void USkillManagementComponent::BP_ClearCopySkills()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SkillManagementComponent", "BP_ClearCopySkills");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SkillManagementComponent.BP_EndCopyMode
// (Final, Native, Public, BlueprintCallable)

void USkillManagementComponent::BP_EndCopyMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SkillManagementComponent", "BP_EndCopyMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SkillManagementComponent.BP_EndPlusUltra
// (Final, Native, Public, BlueprintCallable)

void USkillManagementComponent::BP_EndPlusUltra()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SkillManagementComponent", "BP_EndPlusUltra");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SkillManagementComponent.BP_SetCopyCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ACharacterBattle*                 Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USkillManagementComponent::BP_SetCopyCharacter(class ACharacterBattle* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SkillManagementComponent", "BP_SetCopyCharacter");

	Params::SkillManagementComponent_BP_SetCopyCharacter Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SkillManagementComponent.BP_SetPlusUltra
// (Final, Native, Public, BlueprintCallable)

void USkillManagementComponent::BP_SetPlusUltra()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SkillManagementComponent", "BP_SetPlusUltra");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SkillManagementComponent.BP_StartCopyMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USkillManagementComponent::BP_StartCopyMode(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SkillManagementComponent", "BP_StartCopyMode");

	Params::SkillManagementComponent_BP_StartCopyMode Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SkillManagementComponent.BP_SwitchCopyMode
// (Final, Native, Public, BlueprintCallable)

void USkillManagementComponent::BP_SwitchCopyMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SkillManagementComponent", "BP_SwitchCopyMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SkillManagementComponent.SetOriginalSkill_ToClient
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private, NetValidate)
// Parameters:
// EAttackId                               AttackId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSkillInfo                       NewInfo                                                (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USkillManagementComponent::SetOriginalSkill_ToClient(EAttackId AttackId, const struct FSkillInfo& NewInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SkillManagementComponent", "SetOriginalSkill_ToClient");

	Params::SkillManagementComponent_SetOriginalSkill_ToClient Parms{};

	Parms.AttackId = AttackId;
	Parms.NewInfo = std::move(NewInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SkillManagementComponent.SetOriginalSkill_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// EAttackId                               AttackId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSkillInfo                       NewInfo                                                (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USkillManagementComponent::SetOriginalSkill_ToServer(EAttackId AttackId, const struct FSkillInfo& NewInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SkillManagementComponent", "SetOriginalSkill_ToServer");

	Params::SkillManagementComponent_SetOriginalSkill_ToServer Parms{};

	Parms.AttackId = AttackId;
	Parms.NewInfo = std::move(NewInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SkillManagementComponent.BP_IsCopyStocked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USkillManagementComponent::BP_IsCopyStocked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SkillManagementComponent", "BP_IsCopyStocked");

	Params::SkillManagementComponent_BP_IsCopyStocked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.SkillManagementComponent.BP_IsEnableCopyMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USkillManagementComponent::BP_IsEnableCopyMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SkillManagementComponent", "BP_IsEnableCopyMode");

	Params::SkillManagementComponent_BP_IsEnableCopyMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.SpectatingButtonGuideWidget.AddedPlayer
// (Final, Native, Protected)
// Parameters:
// class AHerovsPlayerState*               AddedPlayer_0                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpectatingButtonGuideWidget::AddedPlayer(class AHerovsPlayerState* AddedPlayer_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectatingButtonGuideWidget", "AddedPlayer");

	Params::SpectatingButtonGuideWidget_AddedPlayer Parms{};

	Parms.AddedPlayer_0 = AddedPlayer_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SpectatingButtonGuideWidget.CloseViolationReportLevel
// (Final, Native, Public)

void USpectatingButtonGuideWidget::CloseViolationReportLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectatingButtonGuideWidget", "CloseViolationReportLevel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SpectatingButtonGuideWidget.OnDecideChangePlayerViewNextButtonEvent
// (Final, Native, Public)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpectatingButtonGuideWidget::OnDecideChangePlayerViewNextButtonEvent(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectatingButtonGuideWidget", "OnDecideChangePlayerViewNextButtonEvent");

	Params::SpectatingButtonGuideWidget_OnDecideChangePlayerViewNextButtonEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SpectatingButtonGuideWidget.OnDecideChangePlayerViewPrevButtonEvent
// (Final, Native, Public)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpectatingButtonGuideWidget::OnDecideChangePlayerViewPrevButtonEvent(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectatingButtonGuideWidget", "OnDecideChangePlayerViewPrevButtonEvent");

	Params::SpectatingButtonGuideWidget_OnDecideChangePlayerViewPrevButtonEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SpectatingButtonGuideWidget.OnDecideCheerButtonEvent
// (Final, Native, Public)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpectatingButtonGuideWidget::OnDecideCheerButtonEvent(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectatingButtonGuideWidget", "OnDecideCheerButtonEvent");

	Params::SpectatingButtonGuideWidget_OnDecideCheerButtonEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SpectatingButtonGuideWidget.OnDecideGoToResulttButtonEvent
// (Final, Native, Public)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpectatingButtonGuideWidget::OnDecideGoToResulttButtonEvent(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectatingButtonGuideWidget", "OnDecideGoToResulttButtonEvent");

	Params::SpectatingButtonGuideWidget_OnDecideGoToResulttButtonEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SpectatingButtonGuideWidget.OnDecideOpenProfileButtonEvent
// (Final, Native, Public)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpectatingButtonGuideWidget::OnDecideOpenProfileButtonEvent(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectatingButtonGuideWidget", "OnDecideOpenProfileButtonEvent");

	Params::SpectatingButtonGuideWidget_OnDecideOpenProfileButtonEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SpectatingButtonGuideWidget.OnDecideOpenStatusButtonEvent
// (Final, Native, Public)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpectatingButtonGuideWidget::OnDecideOpenStatusButtonEvent(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectatingButtonGuideWidget", "OnDecideOpenStatusButtonEvent");

	Params::SpectatingButtonGuideWidget_OnDecideOpenStatusButtonEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SpectatingButtonGuideWidget.OnDecideOpenViolationReportButtonEvent
// (Final, Native, Public)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpectatingButtonGuideWidget::OnDecideOpenViolationReportButtonEvent(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectatingButtonGuideWidget", "OnDecideOpenViolationReportButtonEvent");

	Params::SpectatingButtonGuideWidget_OnDecideOpenViolationReportButtonEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SpectatingButtonGuideWidget.OnDecideRoomButtonEvent
// (Final, Native, Public)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpectatingButtonGuideWidget::OnDecideRoomButtonEvent(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectatingButtonGuideWidget", "OnDecideRoomButtonEvent");

	Params::SpectatingButtonGuideWidget_OnDecideRoomButtonEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SpectatingButtonGuideWidget.OnLevelHidden
// (Final, Native, Protected)

void USpectatingButtonGuideWidget::OnLevelHidden()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectatingButtonGuideWidget", "OnLevelHidden");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SpectatingButtonGuideWidget.OnRecvCheerEvent
// (Final, Native, Protected)
// Parameters:
// int32                                   CheerCount                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LocalCheerCount                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpectatingButtonGuideWidget::OnRecvCheerEvent(int32 CheerCount, int32 LocalCheerCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectatingButtonGuideWidget", "OnRecvCheerEvent");

	Params::SpectatingButtonGuideWidget_OnRecvCheerEvent Parms{};

	Parms.CheerCount = CheerCount;
	Parms.LocalCheerCount = LocalCheerCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SpectatingButtonGuideWidget.OnSetMyAd
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   backgroundId                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EffectId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MessageId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Message                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LeftId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MiddId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RightId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpectatingButtonGuideWidget::OnSetMyAd(int32 backgroundId, int32 EffectId, int32 MessageId, int32 Message, int32 LeftId, int32 MiddId, int32 RightId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectatingButtonGuideWidget", "OnSetMyAd");

	Params::SpectatingButtonGuideWidget_OnSetMyAd Parms{};

	Parms.backgroundId = backgroundId;
	Parms.EffectId = EffectId;
	Parms.MessageId = MessageId;
	Parms.Message = Message;
	Parms.LeftId = LeftId;
	Parms.MiddId = MiddId;
	Parms.RightId = RightId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.SpectatingButtonGuideWidget.RemovedPlayer
// (Final, Native, Protected)
// Parameters:
// class AHerovsPlayerState*               RemovePlayer                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpectatingButtonGuideWidget::RemovedPlayer(class AHerovsPlayerState* RemovePlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectatingButtonGuideWidget", "RemovedPlayer");

	Params::SpectatingButtonGuideWidget_RemovedPlayer Parms{};

	Parms.RemovePlayer = RemovePlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SpectatingChangeFadeWidget.BP_ChangePlayerView
// (Final, Native, Public, BlueprintCallable)

void USpectatingChangeFadeWidget::BP_ChangePlayerView()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectatingChangeFadeWidget", "BP_ChangePlayerView");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SpectatingChangeFadeWidget.BP_StartFade
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNext                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpectatingChangeFadeWidget::BP_StartFade(bool bNext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectatingChangeFadeWidget", "BP_StartFade");

	Params::SpectatingChangeFadeWidget_BP_StartFade Parms{};

	Parms.bNext = bNext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SpectatingChangeFadeWidget.StartFade
// (Final, Native, Public)
// Parameters:
// bool                                    bNext                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpectatingChangeFadeWidget::StartFade(bool bNext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectatingChangeFadeWidget", "StartFade");

	Params::SpectatingChangeFadeWidget_StartFade Parms{};

	Parms.bNext = bNext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.StagePostProcessManager.OnChangeAO
// (Final, Native, Protected)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AStagePostProcessManager::OnChangeAO(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StagePostProcessManager", "OnChangeAO");

	Params::StagePostProcessManager_OnChangeAO Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.StatusBoxBase.BoxTick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStatusBoxBase::BoxTick(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StatusBoxBase", "BoxTick");

	Params::StatusBoxBase_BoxTick Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.StatusBoxBase.HideSupplyRequestUI
// (Final, Native, Public)

void UStatusBoxBase::HideSupplyRequestUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StatusBoxBase", "HideSupplyRequestUI");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.StatusBoxBase.SetGameStart
// (Final, Native, Public)

void UStatusBoxBase::SetGameStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StatusBoxBase", "SetGameStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.StatusBoxBase.SetNewOrbNum
// (Final, Native, Public)

void UStatusBoxBase::SetNewOrbNum()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StatusBoxBase", "SetNewOrbNum");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.StatusBoxBase.SetNewPlusNum
// (Final, Native, Public)

void UStatusBoxBase::SetNewPlusNum()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StatusBoxBase", "SetNewPlusNum");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.StatusBoxBase.SetStatusBox
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class APlayerStateBattle*               boxPlayerState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStatusBoxBase::SetStatusBox(class APlayerStateBattle* boxPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StatusBoxBase", "SetStatusBox");

	Params::StatusBoxBase_SetStatusBox Parms{};

	Parms.boxPlayerState = boxPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SupplyBox.OnChangeCollisionEvent
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASupplyBox::OnChangeCollisionEvent(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyBox", "OnChangeCollisionEvent");

	Params::SupplyBox_OnChangeCollisionEvent Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.SupplyBox.OnDestroyStaging
// (Event, Protected, BlueprintEvent)

void ASupplyBox::OnDestroyStaging()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyBox", "OnDestroyStaging");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.SupplyBox.OnDestroyTimerEvent
// (Final, Native, Public)

void ASupplyBox::OnDestroyTimerEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyBox", "OnDestroyTimerEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SupplyBox.OnRep_Replicated_supplyBoxState
// (Final, Native, Private)

void ASupplyBox::OnRep_Replicated_supplyBoxState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyBox", "OnRep_Replicated_supplyBoxState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction InGameModule.SupplyBox.OnStatusChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void ASupplyBox::OnStatusChanged__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyBox", "OnStatusChanged__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.SupplyBox.SetupComponents
// (Final, Native, Public)

void ASupplyBox::SetupComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyBox", "SetupComponents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SupplyBox.UnlockBegin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class APlayerStateBattle*               PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASupplyBox::UnlockBegin(class APlayerStateBattle* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyBox", "UnlockBegin");

	Params::SupplyBox_UnlockBegin Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SupplyBox.UnlockEnd
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class APlayerStateBattle*               PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASupplyBox::UnlockEnd(class APlayerStateBattle* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyBox", "UnlockEnd");

	Params::SupplyBox_UnlockEnd Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SupplyBox.IsDisappear
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASupplyBox::IsDisappear() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyBox", "IsDisappear");

	Params::SupplyBox_IsDisappear Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.SupplyBoxManagerComponent.RemoveFromManager
// (Final, Native, Public)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USupplyBoxManagerComponent::RemoveFromManager(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyBoxManagerComponent", "RemoveFromManager");

	Params::SupplyBoxManagerComponent_RemoveFromManager Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SupplyBoxSpawnPoint.BP_GetAlwaysSpawnFlag
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASupplyBoxSpawnPoint::BP_GetAlwaysSpawnFlag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyBoxSpawnPoint", "BP_GetAlwaysSpawnFlag");

	Params::SupplyBoxSpawnPoint_BP_GetAlwaysSpawnFlag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.SupplyBoxSpawnPoint.BP_GetAreaCode
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASupplyBoxSpawnPoint::BP_GetAreaCode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyBoxSpawnPoint", "BP_GetAreaCode");

	Params::SupplyBoxSpawnPoint_BP_GetAreaCode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.SupplyBoxSpawnPoint.BP_GetSupplyBoxSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ESupplyBoxSize                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESupplyBoxSize ASupplyBoxSpawnPoint::BP_GetSupplyBoxSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyBoxSpawnPoint", "BP_GetSupplyBoxSize");

	Params::SupplyBoxSpawnPoint_BP_GetSupplyBoxSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.SupplyBoxSpawnPoint.BP_SpawnType
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ESupplyBoxSpawnType                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESupplyBoxSpawnType ASupplyBoxSpawnPoint::BP_SpawnType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyBoxSpawnPoint", "BP_SpawnType");

	Params::SupplyBoxSpawnPoint_BP_SpawnType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.SupplyGenerator.OnEndPlaySupplyActor
// (Final, Native, Private)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASupplyGenerator::OnEndPlaySupplyActor(class AActor* Actor, EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyGenerator", "OnEndPlaySupplyActor");

	Params::SupplyGenerator_OnEndPlaySupplyActor Parms{};

	Parms.Actor = Actor;
	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SupplyHolder.OnRep_ServerSerialList
// (Final, Native, Private)

void USupplyHolder::OnRep_ServerSerialList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyHolder", "OnRep_ServerSerialList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SupplyHolderComponent.OnChangeShoulder_NetMulticast
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// int32                                   ShoulderSize                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USupplyHolderComponent::OnChangeShoulder_NetMulticast(int32 ShoulderSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyHolderComponent", "OnChangeShoulder_NetMulticast");

	Params::SupplyHolderComponent_OnChangeShoulder_NetMulticast Parms{};

	Parms.ShoulderSize = ShoulderSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SupplyHolderComponent.OnChangeShoulder_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// uint32                                  SerialID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USupplyHolderComponent::OnChangeShoulder_ToServer(uint32 SerialID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyHolderComponent", "OnChangeShoulder_ToServer");

	Params::SupplyHolderComponent_OnChangeShoulder_ToServer Parms{};

	Parms.SerialID = SerialID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SupplyHolderComponent.OnChangeSupplyRespawnCounts_NetMulticast
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private, NetValidate)
// Parameters:
// uint8                                   Flagments                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   RespawnSupplies                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USupplyHolderComponent::OnChangeSupplyRespawnCounts_NetMulticast(uint8 Flagments, uint8 RespawnSupplies)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyHolderComponent", "OnChangeSupplyRespawnCounts_NetMulticast");

	Params::SupplyHolderComponent_OnChangeSupplyRespawnCounts_NetMulticast Parms{};

	Parms.Flagments = Flagments;
	Parms.RespawnSupplies = RespawnSupplies;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SupplyHolderComponent.OnDrop_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// TArray<uint32>                          SerialID                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// uint8                                   LevelOverWrite                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USupplyHolderComponent::OnDrop_ToServer(const TArray<uint32>& SerialID, uint8 LevelOverWrite)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyHolderComponent", "OnDrop_ToServer");

	Params::SupplyHolderComponent_OnDrop_ToServer Parms{};

	Parms.SerialID = std::move(SerialID);
	Parms.LevelOverWrite = LevelOverWrite;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SupplyHolderComponent.OnDropForDead_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// TArray<uint32>                          SerialID                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USupplyHolderComponent::OnDropForDead_ToServer(const TArray<uint32>& SerialID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyHolderComponent", "OnDropForDead_ToServer");

	Params::SupplyHolderComponent_OnDropForDead_ToServer Parms{};

	Parms.SerialID = std::move(SerialID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SupplyHolderComponent.OnEndUsing_ToClient
// (Final, Net, NetReliable, Native, Event, Private, NetClient, NetValidate)
// Parameters:
// struct FNetUseSupplyResult              Result                                                 (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USupplyHolderComponent::OnEndUsing_ToClient(const struct FNetUseSupplyResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyHolderComponent", "OnEndUsing_ToClient");

	Params::SupplyHolderComponent_OnEndUsing_ToClient Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SupplyHolderComponent.OnManipulation_ToClient
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// TArray<struct FNetSupplyHolderData>     List                                                   (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USupplyHolderComponent::OnManipulation_ToClient(const TArray<struct FNetSupplyHolderData>& List)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyHolderComponent", "OnManipulation_ToClient");

	Params::SupplyHolderComponent_OnManipulation_ToClient Parms{};

	Parms.List = std::move(List);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SupplyHolderComponent.OnManipulation_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// TArray<struct FNetSupplyHolderData>     List                                                   (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USupplyHolderComponent::OnManipulation_ToServer(const TArray<struct FNetSupplyHolderData>& List)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyHolderComponent", "OnManipulation_ToServer");

	Params::SupplyHolderComponent_OnManipulation_ToServer Parms{};

	Parms.List = std::move(List);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SupplyHolderComponent.OnPickup_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// uint32                                  SerialID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SupplyId                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USupplyHolderComponent::OnPickup_ToServer(uint32 SerialID, const class FName& SupplyId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyHolderComponent", "OnPickup_ToServer");

	Params::SupplyHolderComponent_OnPickup_ToServer Parms{};

	Parms.SerialID = SerialID;
	Parms.SupplyId = SupplyId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SupplyHolderComponent.OnRep_Replicated_allLevelupSerialNo
// (Final, Native, Private)

void USupplyHolderComponent::OnRep_Replicated_allLevelupSerialNo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyHolderComponent", "OnRep_Replicated_allLevelupSerialNo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SupplyHolderComponent.OnRep_Replicated_netSkillInitialzeData
// (Final, Native, Private)

void USupplyHolderComponent::OnRep_Replicated_netSkillInitialzeData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyHolderComponent", "OnRep_Replicated_netSkillInitialzeData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SupplyHolderComponent.OnStopUsing_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer)

void USupplyHolderComponent::OnStopUsing_ToServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyHolderComponent", "OnStopUsing_ToServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SupplyHolderComponent.OnSupplyEndUsedTeamMember_ToClient
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// class APlayerStateBattle*               UsedPlayer                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USupplyHolderComponent::OnSupplyEndUsedTeamMember_ToClient(const class APlayerStateBattle* UsedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyHolderComponent", "OnSupplyEndUsedTeamMember_ToClient");

	Params::SupplyHolderComponent_OnSupplyEndUsedTeamMember_ToClient Parms{};

	Parms.UsedPlayer = UsedPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SupplyHolderComponent.OnSupplyUpgrade_ToClient
// (Final, Net, NetReliable, Native, Event, Private, NetClient, NetValidate)
// Parameters:
// struct FNetSupplyHolderData             Data                                                   (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// uint32                                  SerialNo                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             UpgradeSupplyKey                                       (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USupplyHolderComponent::OnSupplyUpgrade_ToClient(const struct FNetSupplyHolderData& Data, uint32 SerialNo, const class FName& UpgradeSupplyKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyHolderComponent", "OnSupplyUpgrade_ToClient");

	Params::SupplyHolderComponent_OnSupplyUpgrade_ToClient Parms{};

	Parms.Data = std::move(Data);
	Parms.SerialNo = SerialNo;
	Parms.UpgradeSupplyKey = UpgradeSupplyKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SupplyHolderComponent.OnSupplyUsedTeamMember_ToClient
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// class USupplyHolder*                    MemberHolder                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             UsedSupply                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USupplyHolderComponent::OnSupplyUsedTeamMember_ToClient(const class USupplyHolder* MemberHolder, const class FName& UsedSupply)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyHolderComponent", "OnSupplyUsedTeamMember_ToClient");

	Params::SupplyHolderComponent_OnSupplyUsedTeamMember_ToClient Parms{};

	Parms.MemberHolder = MemberHolder;
	Parms.UsedSupply = UsedSupply;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SupplyHolderComponent.OnUseSupply_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// struct FNetSupplyHolderData             Data                                                   (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void USupplyHolderComponent::OnUseSupply_ToServer(const struct FNetSupplyHolderData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyHolderComponent", "OnUseSupply_ToServer");

	Params::SupplyHolderComponent_OnUseSupply_ToServer Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SupplyHolderComponent.SetSkillLevel_NetMulticast
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// EAttackId                               AttackId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USupplyHolderComponent::SetSkillLevel_NetMulticast(const EAttackId AttackId, int32 Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyHolderComponent", "SetSkillLevel_NetMulticast");

	Params::SupplyHolderComponent_SetSkillLevel_NetMulticast Parms{};

	Parms.AttackId = AttackId;
	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SupplyHolderComponent.SetSkillLevel_ToServer
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// EAttackId                               AttackId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USupplyHolderComponent::SetSkillLevel_ToServer(const EAttackId AttackId, int32 Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyHolderComponent", "SetSkillLevel_ToServer");

	Params::SupplyHolderComponent_SetSkillLevel_ToServer Parms{};

	Parms.AttackId = AttackId;
	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SupplyWheel.RequestSupplyFromAlly
// (Final, Native, Private)

void USupplyWheel::RequestSupplyFromAlly()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyWheel", "RequestSupplyFromAlly");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SupplyWheel.UseSupplyDirectly
// (Final, Native, Private)

void USupplyWheel::UseSupplyDirectly()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SupplyWheel", "UseSupplyDirectly");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SymbolWheel.UpdateButtonGuide
// (Final, Native, Private)

void USymbolWheel::UpdateButtonGuide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SymbolWheel", "UpdateButtonGuide");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SymbolWheel.UpdateSymbolList
// (Final, Native, Private)

void USymbolWheel::UpdateSymbolList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SymbolWheel", "UpdateSymbolList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SystemMenuAppWidget.BP_CloseSystemMenu
// (Final, Native, Public, BlueprintCallable)

void USystemMenuAppWidget::BP_CloseSystemMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SystemMenuAppWidget", "BP_CloseSystemMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SystemMenuAppWidget.BP_GrayOutTeamMemberMute
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USystemMenuAppWidget::BP_GrayOutTeamMemberMute()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SystemMenuAppWidget", "BP_GrayOutTeamMemberMute");

	Params::SystemMenuAppWidget_BP_GrayOutTeamMemberMute Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.SystemMenuAppWidget.BP_OnConstruct
// (Final, Native, Public, BlueprintCallable)

void USystemMenuAppWidget::BP_OnConstruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SystemMenuAppWidget", "BP_OnConstruct");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SystemMenuAppWidget.BP_OpenLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UWorld>            Level                                                  (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHiddenWorldRending                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USystemMenuAppWidget::BP_OpenLevel(const TSoftObjectPtr<class UWorld> Level, bool bHiddenWorldRending)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SystemMenuAppWidget", "BP_OpenLevel");

	Params::SystemMenuAppWidget_BP_OpenLevel Parms{};

	Parms.Level = Level;
	Parms.bHiddenWorldRending = bHiddenWorldRending;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SystemMenuAppWidget.GetFocusButton
// (Event, Public, BlueprintEvent)
// Parameters:
// class UWidgetBase*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidgetBase* USystemMenuAppWidget::GetFocusButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SystemMenuAppWidget", "GetFocusButton");

	Params::SystemMenuAppWidget_GetFocusButton Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function InGameModule.SystemMenuAppWidget.GrayOutTeamMemberMuteButton
// (Event, Public, BlueprintEvent)

void USystemMenuAppWidget::GrayOutTeamMemberMuteButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SystemMenuAppWidget", "GrayOutTeamMemberMuteButton");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.SystemMenuAppWidget.OnChangeDying
// (Final, Native, Protected)

void USystemMenuAppWidget::OnChangeDying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SystemMenuAppWidget", "OnChangeDying");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SystemMenuAppWidget.OnChangeSquad
// (Final, Native, Public)
// Parameters:
// int32                                   SquadNum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USystemMenuAppWidget::OnChangeSquad(int32 SquadNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SystemMenuAppWidget", "OnChangeSquad");

	Params::SystemMenuAppWidget_OnChangeSquad Parms{};

	Parms.SquadNum = SquadNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SystemMenuAppWidget.OnSetEnableRetireButton
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bShow                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USystemMenuAppWidget::OnSetEnableRetireButton(bool bShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SystemMenuAppWidget", "OnSetEnableRetireButton");

	Params::SystemMenuAppWidget_OnSetEnableRetireButton Parms{};

	Parms.bShow = bShow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.SystemMenuAppWidget.OnSubLevelHidden
// (Final, Native, Protected)

void USystemMenuAppWidget::OnSubLevelHidden()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SystemMenuAppWidget", "OnSubLevelHidden");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SystemMenuAppWidget.OnSubLevelShown
// (Final, Native, Protected)

void USystemMenuAppWidget::OnSubLevelShown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SystemMenuAppWidget", "OnSubLevelShown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SystemMenuAppWidget.OpenMission
// (Final, Native, Protected, BlueprintCallable)

void USystemMenuAppWidget::OpenMission()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SystemMenuAppWidget", "OpenMission");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.SystemMenuAppWidget.SetMenuButtonNavigation
// (Event, Public, BlueprintEvent)

void USystemMenuAppWidget::SetMenuButtonNavigation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SystemMenuAppWidget", "SetMenuButtonNavigation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.SystemMenuAppWidget.ShowDebugButton
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bShow                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USystemMenuAppWidget::ShowDebugButton(bool bShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SystemMenuAppWidget", "ShowDebugButton");

	Params::SystemMenuAppWidget_ShowDebugButton Parms{};

	Parms.bShow = bShow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.TakeCharacterImageWidget.CopyInfo
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   DelayTiming                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       CameraTransform                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   CameraLength                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         LightRotation                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ColorType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTakeCharacterImageWidget::CopyInfo(int32 DelayTiming, const struct FTransform& CameraTransform, float CameraLength, const struct FRotator& LightRotation, int32 ColorType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TakeCharacterImageWidget", "CopyInfo");

	Params::TakeCharacterImageWidget_CopyInfo Parms{};

	Parms.DelayTiming = DelayTiming;
	Parms.CameraTransform = std::move(CameraTransform);
	Parms.CameraLength = CameraLength;
	Parms.LightRotation = std::move(LightRotation);
	Parms.ColorType = ColorType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.TakeCharacterImageWidget.LoadInfo
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// bool                                    IsReset                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Chara1P                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Variation                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsSubmissionOnly                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutChara2P                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutDelayTiming                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       OutCameraTransform                                     (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   OutCameraLength                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         OutLightRotation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   OutColorType                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FovValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTakeCharacterImageWidget::LoadInfo(bool IsReset, int32 Chara1P, int32 Type, int32 Variation, bool IsSubmissionOnly, int32* OutChara2P, int32* OutDelayTiming, struct FTransform* OutCameraTransform, float* OutCameraLength, struct FRotator* OutLightRotation, int32* OutColorType, float* FovValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TakeCharacterImageWidget", "LoadInfo");

	Params::TakeCharacterImageWidget_LoadInfo Parms{};

	Parms.IsReset = IsReset;
	Parms.Chara1P = Chara1P;
	Parms.Type = Type;
	Parms.Variation = Variation;
	Parms.IsSubmissionOnly = IsSubmissionOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutChara2P != nullptr)
		*OutChara2P = Parms.OutChara2P;

	if (OutDelayTiming != nullptr)
		*OutDelayTiming = Parms.OutDelayTiming;

	if (OutCameraTransform != nullptr)
		*OutCameraTransform = std::move(Parms.OutCameraTransform);

	if (OutCameraLength != nullptr)
		*OutCameraLength = Parms.OutCameraLength;

	if (OutLightRotation != nullptr)
		*OutLightRotation = std::move(Parms.OutLightRotation);

	if (OutColorType != nullptr)
		*OutColorType = Parms.OutColorType;

	if (FovValue != nullptr)
		*FovValue = Parms.FovValue;
}


// Function InGameModule.TakeCharacterImageWidget.PasteInfo
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   OutDelayTiming                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       OutCameraTransform                                     (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   OutCameraLength                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         OutLightRotation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   OutColorType                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTakeCharacterImageWidget::PasteInfo(int32* OutDelayTiming, struct FTransform* OutCameraTransform, float* OutCameraLength, struct FRotator* OutLightRotation, int32* OutColorType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TakeCharacterImageWidget", "PasteInfo");

	Params::TakeCharacterImageWidget_PasteInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDelayTiming != nullptr)
		*OutDelayTiming = Parms.OutDelayTiming;

	if (OutCameraTransform != nullptr)
		*OutCameraTransform = std::move(Parms.OutCameraTransform);

	if (OutCameraLength != nullptr)
		*OutCameraLength = Parms.OutCameraLength;

	if (OutLightRotation != nullptr)
		*OutLightRotation = std::move(Parms.OutLightRotation);

	if (OutColorType != nullptr)
		*OutColorType = Parms.OutColorType;
}


// Function InGameModule.TakeCharacterImageWidget.SaveInfo
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   Chara1P                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Chara2P                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DelayTiming                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsSubmissionOnly                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       CameraTransform                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   CameraLength                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         LightRotation                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ColorType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FovValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Variation                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTakeCharacterImageWidget::SaveInfo(int32 Chara1P, int32 Type, int32 Chara2P, int32 DelayTiming, bool IsSubmissionOnly, const struct FTransform& CameraTransform, float CameraLength, const struct FRotator& LightRotation, int32 ColorType, float FovValue, int32 Variation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TakeCharacterImageWidget", "SaveInfo");

	Params::TakeCharacterImageWidget_SaveInfo Parms{};

	Parms.Chara1P = Chara1P;
	Parms.Type = Type;
	Parms.Chara2P = Chara2P;
	Parms.DelayTiming = DelayTiming;
	Parms.IsSubmissionOnly = IsSubmissionOnly;
	Parms.CameraTransform = std::move(CameraTransform);
	Parms.CameraLength = CameraLength;
	Parms.LightRotation = std::move(LightRotation);
	Parms.ColorType = ColorType;
	Parms.FovValue = FovValue;
	Parms.Variation = Variation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.TakeCharacterImageWidget.SetEnableAntialias
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTakeCharacterImageWidget::SetEnableAntialias(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TakeCharacterImageWidget", "SetEnableAntialias");

	Params::TakeCharacterImageWidget_SetEnableAntialias Parms{};

	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.TrainingMenuWidget.CloseLevel
// (Final, Native, Public, BlueprintCallable)

void UTrainingMenuWidget::CloseLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrainingMenuWidget", "CloseLevel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.TrainingMenuWidget.Decide
// (Final, Native, Public, BlueprintCallable)

void UTrainingMenuWidget::Decide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrainingMenuWidget", "Decide");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.TrainingMenuWidget.OnClosedLevel
// (Event, Protected, BlueprintEvent)

void UTrainingMenuWidget::OnClosedLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrainingMenuWidget", "OnClosedLevel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.TrainingMenuWidget.OnGetAiAction
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AiActionIndex                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTrainingMenuWidget::OnGetAiAction(int32 Index_0, int32* AiActionIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrainingMenuWidget", "OnGetAiAction");

	Params::TrainingMenuWidget_OnGetAiAction Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);

	if (AiActionIndex != nullptr)
		*AiActionIndex = Parms.AiActionIndex;
}


// Function InGameModule.TrainingMenuWidget.OnGetAiCharacter
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECharacterId                            CharacterId                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DefUnique1Level                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DefUnique2Level                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DefUnique3Level                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SkillVariationCode                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AiActionIndex                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTrainingMenuWidget::OnGetAiCharacter(int32 Index_0, ECharacterId* CharacterId, int32* DefUnique1Level, int32* DefUnique2Level, int32* DefUnique3Level, int32* SkillVariationCode, int32* AiActionIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrainingMenuWidget", "OnGetAiCharacter");

	Params::TrainingMenuWidget_OnGetAiCharacter Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);

	if (CharacterId != nullptr)
		*CharacterId = Parms.CharacterId;

	if (DefUnique1Level != nullptr)
		*DefUnique1Level = Parms.DefUnique1Level;

	if (DefUnique2Level != nullptr)
		*DefUnique2Level = Parms.DefUnique2Level;

	if (DefUnique3Level != nullptr)
		*DefUnique3Level = Parms.DefUnique3Level;

	if (SkillVariationCode != nullptr)
		*SkillVariationCode = Parms.SkillVariationCode;

	if (AiActionIndex != nullptr)
		*AiActionIndex = Parms.AiActionIndex;
}


// Function InGameModule.TrainingMenuWidget.OnGetPlayerCharacter
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// ECharacterId                            CharacterId                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DefUnique1Level                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DefUnique2Level                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DefUnique3Level                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SkillVariationCode                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTrainingMenuWidget::OnGetPlayerCharacter(ECharacterId* CharacterId, int32* DefUnique1Level, int32* DefUnique2Level, int32* DefUnique3Level, int32* SkillVariationCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrainingMenuWidget", "OnGetPlayerCharacter");

	Params::TrainingMenuWidget_OnGetPlayerCharacter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CharacterId != nullptr)
		*CharacterId = Parms.CharacterId;

	if (DefUnique1Level != nullptr)
		*DefUnique1Level = Parms.DefUnique1Level;

	if (DefUnique2Level != nullptr)
		*DefUnique2Level = Parms.DefUnique2Level;

	if (DefUnique3Level != nullptr)
		*DefUnique3Level = Parms.DefUnique3Level;

	if (SkillVariationCode != nullptr)
		*SkillVariationCode = Parms.SkillVariationCode;
}


// Function InGameModule.TrainingMenuWidget.OnGetSetting
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// int32                                   DamageTypeIndex                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFriendlyFire                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTrainingMenuWidget::OnGetSetting(int32* DamageTypeIndex, bool* bFriendlyFire)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrainingMenuWidget", "OnGetSetting");

	Params::TrainingMenuWidget_OnGetSetting Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DamageTypeIndex != nullptr)
		*DamageTypeIndex = Parms.DamageTypeIndex;

	if (bFriendlyFire != nullptr)
		*bFriendlyFire = Parms.bFriendlyFire;
}


// Function InGameModule.TrainingMenuWidget.OnSetAiCharacter
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECharacterId                            CharacterId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DefUnique1Level                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DefUnique2Level                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DefUnique3Level                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SkillVariationCode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AiActionIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTrainingMenuWidget::OnSetAiCharacter(int32 Index_0, ECharacterId CharacterId, int32 DefUnique1Level, int32 DefUnique2Level, int32 DefUnique3Level, int32 SkillVariationCode, int32 AiActionIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrainingMenuWidget", "OnSetAiCharacter");

	Params::TrainingMenuWidget_OnSetAiCharacter Parms{};

	Parms.Index_0 = Index_0;
	Parms.CharacterId = CharacterId;
	Parms.DefUnique1Level = DefUnique1Level;
	Parms.DefUnique2Level = DefUnique2Level;
	Parms.DefUnique3Level = DefUnique3Level;
	Parms.SkillVariationCode = SkillVariationCode;
	Parms.AiActionIndex = AiActionIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.TrainingMenuWidget.OnSetLeaderMode
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bLeader                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTrainingMenuWidget::OnSetLeaderMode(bool bLeader)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrainingMenuWidget", "OnSetLeaderMode");

	Params::TrainingMenuWidget_OnSetLeaderMode Parms{};

	Parms.bLeader = bLeader;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.TrainingMenuWidget.OnSetPlayerCharacter
// (Event, Protected, BlueprintEvent)
// Parameters:
// ECharacterId                            CharacterId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DefUnique1Level                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DefUnique2Level                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DefUnique3Level                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SkillVariationCode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTrainingMenuWidget::OnSetPlayerCharacter(ECharacterId CharacterId, int32 DefUnique1Level, int32 DefUnique2Level, int32 DefUnique3Level, int32 SkillVariationCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrainingMenuWidget", "OnSetPlayerCharacter");

	Params::TrainingMenuWidget_OnSetPlayerCharacter Parms{};

	Parms.CharacterId = CharacterId;
	Parms.DefUnique1Level = DefUnique1Level;
	Parms.DefUnique2Level = DefUnique2Level;
	Parms.DefUnique3Level = DefUnique3Level;
	Parms.SkillVariationCode = SkillVariationCode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.TrainingMenuWidget.OnSetSetting
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   DamageTypeIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFriendlyFire                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTrainingMenuWidget::OnSetSetting(int32 DamageTypeIndex, bool bFriendlyFire)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TrainingMenuWidget", "OnSetSetting");

	Params::TrainingMenuWidget_OnSetSetting Parms{};

	Parms.DamageTypeIndex = DamageTypeIndex;
	Parms.bFriendlyFire = bFriendlyFire;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.TransformControlComponent.OnRep_TransfomationData
// (Final, Native, Private)

void UTransformControlComponent::OnRep_TransfomationData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TransformControlComponent", "OnRep_TransfomationData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.TransformControlComponent.RemoveTransformaionData_RPC_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTransformControlComponent::RemoveTransformaionData_RPC_ToServer(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TransformControlComponent", "RemoveTransformaionData_RPC_ToServer");

	Params::TransformControlComponent_RemoveTransformaionData_RPC_ToServer Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.TransformControlComponent.ReturnToOriginalRequest_RPC_ToServer
// (Net, NetReliable, Native, Event, Public, NetServer)

void UTransformControlComponent::ReturnToOriginalRequest_RPC_ToServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TransformControlComponent", "ReturnToOriginalRequest_RPC_ToServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.TransformControlComponent.StockTransformationData_RPC_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacterBattle*                 TargetCharacter                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTransformControlComponent::StockTransformationData_RPC_ToServer(int32 Index_0, const class ACharacterBattle* TargetCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TransformControlComponent", "StockTransformationData_RPC_ToServer");

	Params::TransformControlComponent_StockTransformationData_RPC_ToServer Parms{};

	Parms.Index_0 = Index_0;
	Parms.TargetCharacter = TargetCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.TransformControlComponent.TransformInto_RPC_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class ACharacterBattle*                 TargetCharacter                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTransformControlComponent::TransformInto_RPC_ToServer(const class ACharacterBattle* TargetCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TransformControlComponent", "TransformInto_RPC_ToServer");

	Params::TransformControlComponent_TransformInto_RPC_ToServer Parms{};

	Parms.TargetCharacter = TargetCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.TransformControlComponent.TransformIntoStockCharacter_RPC_ToServer
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTransformControlComponent::TransformIntoStockCharacter_RPC_ToServer(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TransformControlComponent", "TransformIntoStockCharacter_RPC_ToServer");

	Params::TransformControlComponent_TransformIntoStockCharacter_RPC_ToServer Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.TransformInfo.BeginTransform
// (Final, Native, Public)

void UTransformInfo::BeginTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TransformInfo", "BeginTransform");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.TransformInfo.OnEndTransformState
// (Final, Native, Public)

void UTransformInfo::OnEndTransformState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TransformInfo", "OnEndTransformState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.TransformInfo.OnFinishedDustboxAnimation
// (Final, Native, Private)

void UTransformInfo::OnFinishedDustboxAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TransformInfo", "OnFinishedDustboxAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.TransformInfo.OnFinishedStockedAnimation
// (Final, Native, Private)

void UTransformInfo::OnFinishedStockedAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TransformInfo", "OnFinishedStockedAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.TutorialWidgetInterface.OnCharacterHasStarted
// (Native, Event, Public, BlueprintEvent)

void ITutorialWidgetInterface::OnCharacterHasStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TutorialWidgetInterface", "OnCharacterHasStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UISubsystemComponent.OnLoadedCostume
// (Final, Native, Protected)
// Parameters:
// int32                                   RequestId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISubsystemComponent::OnLoadedCostume(int32 RequestId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISubsystemComponent", "OnLoadedCostume");

	Params::UISubsystemComponent_OnLoadedCostume Parms{};

	Parms.RequestId = RequestId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UISubsystemComponent.OnLoadedMission
// (Final, Native, Protected)
// Parameters:
// int32                                   RequestId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISubsystemComponent::OnLoadedMission(int32 RequestId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISubsystemComponent", "OnLoadedMission");

	Params::UISubsystemComponent_OnLoadedMission Parms{};

	Parms.RequestId = RequestId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UISubsystemComponent.OnLoadedSeasonLicense
// (Final, Native, Protected)
// Parameters:
// int32                                   RequestId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISubsystemComponent::OnLoadedSeasonLicense(int32 RequestId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISubsystemComponent", "OnLoadedSeasonLicense");

	Params::UISubsystemComponent_OnLoadedSeasonLicense Parms{};

	Parms.RequestId = RequestId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UISubsystemComponent.OnLoadedSpecialLicense
// (Final, Native, Protected)
// Parameters:
// int32                                   RequestId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISubsystemComponent::OnLoadedSpecialLicense(int32 RequestId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISubsystemComponent", "OnLoadedSpecialLicense");

	Params::UISubsystemComponent_OnLoadedSpecialLicense Parms{};

	Parms.RequestId = RequestId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UISubsystemComponent.SendClientLicenseData
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// struct FUniqueNetIdKey                  UniqueId                                               (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SpecialLicenseExp                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SeasonLicenseExp                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPremium                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISubsystemComponent::SendClientLicenseData(const struct FUniqueNetIdKey& UniqueId, const int32 SpecialLicenseExp, const int32 SeasonLicenseExp, const bool bPremium)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISubsystemComponent", "SendClientLicenseData");

	Params::UISubsystemComponent_SendClientLicenseData Parms{};

	Parms.UniqueId = std::move(UniqueId);
	Parms.SpecialLicenseExp = SpecialLicenseExp;
	Parms.SeasonLicenseExp = SeasonLicenseExp;
	Parms.bPremium = bPremium;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UISubsystemComponent.SendClientMissionData
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// struct FUniqueNetIdKey                  UniqueId                                               (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           ClearMissionCodeList                                   (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<int32>                           UnlockedCostumeCodeList                                (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UUISubsystemComponent::SendClientMissionData(const struct FUniqueNetIdKey& UniqueId, const TArray<int32>& ClearMissionCodeList, const TArray<int32>& UnlockedCostumeCodeList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISubsystemComponent", "SendClientMissionData");

	Params::UISubsystemComponent_SendClientMissionData Parms{};

	Parms.UniqueId = std::move(UniqueId);
	Parms.ClearMissionCodeList = std::move(ClearMissionCodeList);
	Parms.UnlockedCostumeCodeList = std::move(UnlockedCostumeCodeList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGBattleJoinedPlayerList.OnCancelEvent
// (Final, Native, Protected)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUMGBattleJoinedPlayerList::OnCancelEvent(class UAppWidget* Widget, EWidgetInputType InputType, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleJoinedPlayerList", "OnCancelEvent");

	Params::UMGBattleJoinedPlayerList_OnCancelEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGBattleJoinedPlayerList.UpdateList
// (Final, Native, Public)

void UUMGBattleJoinedPlayerList::UpdateList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleJoinedPlayerList", "UpdateList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGBattleJoinedPlayerListViewItem.OnDecide
// (Final, Native, Private)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUMGBattleJoinedPlayerListViewItem::OnDecide(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleJoinedPlayerListViewItem", "OnDecide");

	Params::UMGBattleJoinedPlayerListViewItem_OnDecide Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGBattleJoinedPlayerListViewItem.UpdateKillCount
// (Final, Native, Private)

void UUMGBattleJoinedPlayerListViewItem::UpdateKillCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleJoinedPlayerListViewItem", "UpdateKillCount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGBattleTutorialBase.BP_Battle
// (Event, Public, BlueprintEvent)

void UUMGBattleTutorialBase::BP_Battle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "BP_Battle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.UMGBattleTutorialBase.BP_Camera
// (Event, Public, BlueprintEvent)

void UUMGBattleTutorialBase::BP_Camera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "BP_Camera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.UMGBattleTutorialBase.BP_ChangeStateTutorialCh012
// (Event, Public, BlueprintEvent)

void UUMGBattleTutorialBase::BP_ChangeStateTutorialCh012()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "BP_ChangeStateTutorialCh012");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.UMGBattleTutorialBase.BP_CreateTutorialCh012
// (Event, Public, BlueprintEvent)

void UUMGBattleTutorialBase::BP_CreateTutorialCh012()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "BP_CreateTutorialCh012");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.UMGBattleTutorialBase.BP_CutIn
// (Event, Public, BlueprintEvent)

void UUMGBattleTutorialBase::BP_CutIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "BP_CutIn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.UMGBattleTutorialBase.BP_Down
// (Event, Public, BlueprintEvent)

void UUMGBattleTutorialBase::BP_Down()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "BP_Down");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.UMGBattleTutorialBase.BP_FadeIn
// (Event, Public, BlueprintEvent)

void UUMGBattleTutorialBase::BP_FadeIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "BP_FadeIn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.UMGBattleTutorialBase.BP_FadeOut
// (Event, Public, BlueprintEvent)

void UUMGBattleTutorialBase::BP_FadeOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "BP_FadeOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.UMGBattleTutorialBase.BP_Jump
// (Event, Public, BlueprintEvent)

void UUMGBattleTutorialBase::BP_Jump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "BP_Jump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.UMGBattleTutorialBase.BP_Position
// (Event, Public, BlueprintEvent)

void UUMGBattleTutorialBase::BP_Position()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "BP_Position");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.UMGBattleTutorialBase.BP_Select
// (Event, Public, BlueprintEvent)

void UUMGBattleTutorialBase::BP_Select()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "BP_Select");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.UMGBattleTutorialBase.BP_SendKPI
// (Event, Public, BlueprintEvent)

void UUMGBattleTutorialBase::BP_SendKPI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "BP_SendKPI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.UMGBattleTutorialBase.BP_Step
// (Event, Public, BlueprintEvent)

void UUMGBattleTutorialBase::BP_Step()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "BP_Step");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.UMGBattleTutorialBase.BP_Talk
// (Event, Public, BlueprintEvent)

void UUMGBattleTutorialBase::BP_Talk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "BP_Talk");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.UMGBattleTutorialBase.BP_Tips
// (Event, Public, BlueprintEvent)

void UUMGBattleTutorialBase::BP_Tips()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "BP_Tips");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.UMGBattleTutorialBase.BP_Wait
// (Event, Public, BlueprintEvent)

void UUMGBattleTutorialBase::BP_Wait()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "BP_Wait");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.UMGBattleTutorialBase.BP_WinnerCheck
// (Event, Public, BlueprintEvent)

void UUMGBattleTutorialBase::BP_WinnerCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "BP_WinnerCheck");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.UMGBattleTutorialBase.ChangeButtonGuide
// (Final, Native, Protected)

void UUMGBattleTutorialBase::ChangeButtonGuide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "ChangeButtonGuide");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGBattleTutorialBase.ClearPlusUltra
// (Final, Native, Protected, BlueprintCallable)

void UUMGBattleTutorialBase::ClearPlusUltra()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "ClearPlusUltra");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGBattleTutorialBase.CommandExecution
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           CommandName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EScriptCommandFinishType                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EScriptCommandFinishType UUMGBattleTutorialBase::CommandExecution(const class FString& CommandName, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "CommandExecution");

	Params::UMGBattleTutorialBase_CommandExecution Parms{};

	Parms.CommandName = std::move(CommandName);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.UMGBattleTutorialBase.DebugButtonToNext_OnAddedToFocusPath
// (Final, Native, Protected, BlueprintCallable)

void UUMGBattleTutorialBase::DebugButtonToNext_OnAddedToFocusPath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "DebugButtonToNext_OnAddedToFocusPath");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGBattleTutorialBase.DispCutIn
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   Selection                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESlateVisibility                        Visibiliy                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUMGBattleTutorialBase::DispCutIn(int32 Selection, ESlateVisibility Visibiliy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "DispCutIn");

	Params::UMGBattleTutorialBase_DispCutIn Parms{};

	Parms.Selection = Selection;
	Parms.Visibiliy = Visibiliy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGBattleTutorialBase.ForceCloseInventory
// (Final, Native, Protected, BlueprintCallable)

void UUMGBattleTutorialBase::ForceCloseInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "ForceCloseInventory");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGBattleTutorialBase.ForceOnAutoLevelUp
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    Force                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUMGBattleTutorialBase::ForceOnAutoLevelUp(bool Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "ForceOnAutoLevelUp");

	Params::UMGBattleTutorialBase_ForceOnAutoLevelUp Parms{};

	Parms.Force = Force;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGBattleTutorialBase.GetBackInputToPawn
// (Final, Native, Public, BlueprintCallable)

void UUMGBattleTutorialBase::GetBackInputToPawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "GetBackInputToPawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGBattleTutorialBase.GetDebugTagValue
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UUMGBattleTutorialBase::GetDebugTagValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "GetDebugTagValue");

	Params::UMGBattleTutorialBase_GetDebugTagValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.UMGBattleTutorialBase.GetTaskMaterial
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInterface* UUMGBattleTutorialBase::GetTaskMaterial(const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "GetTaskMaterial");

	Params::UMGBattleTutorialBase_GetTaskMaterial Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.UMGBattleTutorialBase.GetTaskText
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UUMGBattleTutorialBase::GetTaskText(const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "GetTaskText");

	Params::UMGBattleTutorialBase_GetTaskText Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.UMGBattleTutorialBase.GetTextSize
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           MessageKey                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUMGBattleTutorialBase::GetTextSize(const class FString& MessageKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "GetTextSize");

	Params::UMGBattleTutorialBase_GetTextSize Parms{};

	Parms.MessageKey = std::move(MessageKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.UMGBattleTutorialBase.GetWidgetVisibility
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// ETutorialDisplayUI                      UI                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUMGBattleTutorialBase::GetWidgetVisibility(ETutorialDisplayUI UI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "GetWidgetVisibility");

	Params::UMGBattleTutorialBase_GetWidgetVisibility Parms{};

	Parms.UI = UI;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.UMGBattleTutorialBase.GoToMainMenu
// (Final, Native, Protected, BlueprintCallable)

void UUMGBattleTutorialBase::GoToMainMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "GoToMainMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGBattleTutorialBase.GoToNextStep
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UUMGBattleTutorialBase::GoToNextStep()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "GoToNextStep");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGBattleTutorialBase.IsPlaySequencer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUMGBattleTutorialBase::IsPlaySequencer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "IsPlaySequencer");

	Params::UMGBattleTutorialBase_IsPlaySequencer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.UMGBattleTutorialBase.IsPlayVoice
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUMGBattleTutorialBase::IsPlayVoice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "IsPlayVoice");

	Params::UMGBattleTutorialBase_IsPlayVoice Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.UMGBattleTutorialBase.OnClosedSystemMenuDelegate
// (Native, Event, Protected, BlueprintEvent)

void UUMGBattleTutorialBase::OnClosedSystemMenuDelegate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "OnClosedSystemMenuDelegate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGBattleTutorialBase.OnDecideDelegate
// (Native, Event, Public, BlueprintEvent)

void UUMGBattleTutorialBase::OnDecideDelegate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "OnDecideDelegate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGBattleTutorialBase.OnReceivedGameOptionGamePlayChanged
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UUMGBattleTutorialBase::OnReceivedGameOptionGamePlayChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "OnReceivedGameOptionGamePlayChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGBattleTutorialBase.OnReceivedGameOptionKeyConfigChanged
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UUMGBattleTutorialBase::OnReceivedGameOptionKeyConfigChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "OnReceivedGameOptionKeyConfigChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGBattleTutorialBase.PlayBGM
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FString                           bgmName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUMGBattleTutorialBase::PlayBGM(const class FString& bgmName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "PlayBGM");

	Params::UMGBattleTutorialBase_PlayBGM Parms{};

	Parms.bgmName = std::move(bgmName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGBattleTutorialBase.PlaySequencer
// (Final, Native, Public, BlueprintCallable)

void UUMGBattleTutorialBase::PlaySequencer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "PlaySequencer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGBattleTutorialBase.PlaySequencerFinish
// (Final, Native, Public)

void UUMGBattleTutorialBase::PlaySequencerFinish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "PlaySequencerFinish");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGBattleTutorialBase.PlayVoice
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FString                           CueName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUMGBattleTutorialBase::PlayVoice(const class FString& CueName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "PlayVoice");

	Params::UMGBattleTutorialBase_PlayVoice Parms{};

	Parms.CueName = std::move(CueName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGBattleTutorialBase.SetAllWidgetVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUMGBattleTutorialBase::SetAllWidgetVisibility(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "SetAllWidgetVisibility");

	Params::UMGBattleTutorialBase_SetAllWidgetVisibility Parms{};

	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGBattleTutorialBase.SetCanAbilitySwaping
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUMGBattleTutorialBase::SetCanAbilitySwaping(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "SetCanAbilitySwaping");

	Params::UMGBattleTutorialBase_SetCanAbilitySwaping Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGBattleTutorialBase.SetEnableUpdateAddPlusUltraPoint
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUMGBattleTutorialBase::SetEnableUpdateAddPlusUltraPoint(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "SetEnableUpdateAddPlusUltraPoint");

	Params::UMGBattleTutorialBase_SetEnableUpdateAddPlusUltraPoint Parms{};

	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGBattleTutorialBase.SetHUDVisibleItemGrayOut
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    GrayOut                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUMGBattleTutorialBase::SetHUDVisibleItemGrayOut(bool GrayOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "SetHUDVisibleItemGrayOut");

	Params::UMGBattleTutorialBase_SetHUDVisibleItemGrayOut Parms{};

	Parms.GrayOut = GrayOut;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGBattleTutorialBase.SetPlusUltraPermanency
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    Permanency                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUMGBattleTutorialBase::SetPlusUltraPermanency(bool Permanency)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "SetPlusUltraPermanency");

	Params::UMGBattleTutorialBase_SetPlusUltraPermanency Parms{};

	Parms.Permanency = Permanency;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGBattleTutorialBase.SetPlusUltraPoint
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUMGBattleTutorialBase::SetPlusUltraPoint(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "SetPlusUltraPoint");

	Params::UMGBattleTutorialBase_SetPlusUltraPoint Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGBattleTutorialBase.SetPoisonMistState
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    Start                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUMGBattleTutorialBase::SetPoisonMistState(bool Start)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "SetPoisonMistState");

	Params::UMGBattleTutorialBase_SetPoisonMistState Parms{};

	Parms.Start = Start;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGBattleTutorialBase.SwitchWidgetVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETutorialDisplayUI                      bit                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUMGBattleTutorialBase::SwitchWidgetVisibility(bool bVisible, ETutorialDisplayUI bit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "SwitchWidgetVisibility");

	Params::UMGBattleTutorialBase_SwitchWidgetVisibility Parms{};

	Parms.bVisible = bVisible;
	Parms.bit = bit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGBattleTutorialBase.TakeInputToWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAllInput                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUMGBattleTutorialBase::TakeInputToWidget(bool bAllInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialBase", "TakeInputToWidget");

	Params::UMGBattleTutorialBase_TakeInputToWidget Parms{};

	Parms.bAllInput = bAllInput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGBattleTutorialClearConditional.GetReNumberText
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UUMGBattleTutorialClearConditional::GetReNumberText(int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialClearConditional", "GetReNumberText");

	Params::UMGBattleTutorialClearConditional_GetReNumberText Parms{};

	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.UMGBattleTutorialCutIn.BP_DispCutIn
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   Selection                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESlateVisibility                        Visibiliy                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUMGBattleTutorialCutIn::BP_DispCutIn(int32 Selection, ESlateVisibility Visibiliy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialCutIn", "BP_DispCutIn");

	Params::UMGBattleTutorialCutIn_BP_DispCutIn Parms{};

	Parms.Selection = Selection;
	Parms.Visibiliy = Visibiliy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.UMGBattleTutorialProgress.BP_SetNowProgress
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Now                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUMGBattleTutorialProgress::BP_SetNowProgress(int32 Now)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialProgress", "BP_SetNowProgress");

	Params::UMGBattleTutorialProgress_BP_SetNowProgress Parms{};

	Parms.Now = Now;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.UMGBattleTutorialProgress.BP_SetNumProgress
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUMGBattleTutorialProgress::BP_SetNumProgress(int32 Num)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGBattleTutorialProgress", "BP_SetNumProgress");

	Params::UMGBattleTutorialProgress_BP_SetNumProgress Parms{};

	Parms.Num = Num;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.TutorialCustomRichTextBlock.GetTextSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UTutorialCustomRichTextBlock::GetTextSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TutorialCustomRichTextBlock", "GetTextSize");

	Params::TutorialCustomRichTextBlock_GetTextSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InGameModule.TutorialCustomRichTextBlock.SetTextSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTutorialCustomRichTextBlock::SetTextSize(int32 Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TutorialCustomRichTextBlock", "SetTextSize");

	Params::TutorialCustomRichTextBlock_SetTextSize Parms{};

	Parms.Size = Size;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.TutorialCustomRichTextBlock.SetWrapTextAt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InWrapTextAt                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTutorialCustomRichTextBlock::SetWrapTextAt(const float InWrapTextAt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TutorialCustomRichTextBlock", "SetWrapTextAt");

	Params::TutorialCustomRichTextBlock_SetWrapTextAt Parms{};

	Parms.InWrapTextAt = InWrapTextAt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGLobbyInfo.ContinueCounting
// (Final, Native, Private)
// Parameters:
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUMGLobbyInfo::ContinueCounting(int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGLobbyInfo", "ContinueCounting");

	Params::UMGLobbyInfo_ContinueCounting Parms{};

	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGLobbyInfo.ShowCountdown
// (Final, Native, Private)

void UUMGLobbyInfo::ShowCountdown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGLobbyInfo", "ShowCountdown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGLobbyInfo.StartCountdown
// (Final, Native, Private)

void UUMGLobbyInfo::StartCountdown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGLobbyInfo", "StartCountdown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGLobbyInfo.UpdateTeamNum
// (Final, Native, Private)

void UUMGLobbyInfo::UpdateTeamNum()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGLobbyInfo", "UpdateTeamNum");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGLobbyInfo.VanishTeamCounter
// (Final, Native, Private)

void UUMGLobbyInfo::VanishTeamCounter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGLobbyInfo", "VanishTeamCounter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGSkillActions.UpdateMagazineState
// (Final, Native, Private)
// Parameters:
// EAttackId                               SlotAttackId                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewAmmoNum                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewReloadRate                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUMGSkillActions::UpdateMagazineState(EAttackId SlotAttackId, int32 NewAmmoNum, float NewReloadRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGSkillActions", "UpdateMagazineState");

	Params::UMGSkillActions_UpdateMagazineState Parms{};

	Parms.SlotAttackId = SlotAttackId;
	Parms.NewAmmoNum = NewAmmoNum;
	Parms.NewReloadRate = NewReloadRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGSkillMagazine.OnBulletReloaded
// (Event, Protected, BlueprintEvent)

void UUMGSkillMagazine::OnBulletReloaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGSkillMagazine", "OnBulletReloaded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.UMGSkillMagazine.OnBulletRunsOut
// (Event, Protected, BlueprintEvent)

void UUMGSkillMagazine::OnBulletRunsOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGSkillMagazine", "OnBulletRunsOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.UMGSkillMagazine.OnPress
// (Final, Native, Protected)
// Parameters:
// class UAppWidget*                       Button                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUMGSkillMagazine::OnPress(class UAppWidget* Button, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGSkillMagazine", "OnPress");

	Params::UMGSkillMagazine_OnPress Parms{};

	Parms.Button = Button;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGSkillMagazine.OnRelease
// (Final, Native, Protected)
// Parameters:
// class UAppWidget*                       Button                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUMGSkillMagazine::OnRelease(class UAppWidget* Button, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGSkillMagazine", "OnRelease");

	Params::UMGSkillMagazine_OnRelease Parms{};

	Parms.Button = Button;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InGameModule.UMGSkillMagazine.OnSwitchMagazineAvailability
// (Event, Public, BlueprintEvent)
// Parameters:
// EMagazineAvailability                   NewAvailability                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUMGSkillMagazine::OnSwitchMagazineAvailability(EMagazineAvailability NewAvailability)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGSkillMagazine", "OnSwitchMagazineAvailability");

	Params::UMGSkillMagazine_OnSwitchMagazineAvailability Parms{};

	Parms.NewAvailability = NewAvailability;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InGameModule.UMGSkillMagazine.PlayLevelUpAnim
// (Event, Protected, BlueprintEvent)

void UUMGSkillMagazine::PlayLevelUpAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMGSkillMagazine", "PlayLevelUpAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InGameModule.UseItemEffectComponent.OnFinishParticle
// (Final, Native, Private)
// Parameters:
// class UParticleSystemComponent*         Particle                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUseItemEffectComponent::OnFinishParticle(class UParticleSystemComponent* Particle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UseItemEffectComponent", "OnFinishParticle");

	Params::UseItemEffectComponent_OnFinishParticle Parms{};

	Parms.Particle = Particle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

