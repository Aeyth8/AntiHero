#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CosmosApi

#include "Basic.hpp"

#include "CosmosApi_structs.hpp"


namespace SDK::Params
{

// Function CosmosApi.NetHttp.Create
// 0x0010 (0x0010 - 0x0000)
struct NetHttp_Create final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetHttp_Create) == 0x000008, "Wrong alignment on NetHttp_Create");
static_assert(sizeof(NetHttp_Create) == 0x000010, "Wrong size on NetHttp_Create");
static_assert(offsetof(NetHttp_Create, WorldContextObject) == 0x000000, "Member 'NetHttp_Create::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NetHttp_Create, ReturnValue) == 0x000008, "Member 'NetHttp_Create::ReturnValue' has a wrong offset!");

// Function CosmosApi.NetHttp.PostRequest
// 0x0030 (0x0030 - 0x0000)
struct NetHttp_PostRequest final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetMessage*                            Data;                                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitSec;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNetHttp*                               ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetHttp_PostRequest) == 0x000008, "Wrong alignment on NetHttp_PostRequest");
static_assert(sizeof(NetHttp_PostRequest) == 0x000030, "Wrong size on NetHttp_PostRequest");
static_assert(offsetof(NetHttp_PostRequest, WorldContextObject) == 0x000000, "Member 'NetHttp_PostRequest::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NetHttp_PostRequest, URL) == 0x000008, "Member 'NetHttp_PostRequest::URL' has a wrong offset!");
static_assert(offsetof(NetHttp_PostRequest, Data) == 0x000018, "Member 'NetHttp_PostRequest::Data' has a wrong offset!");
static_assert(offsetof(NetHttp_PostRequest, LimitSec) == 0x000020, "Member 'NetHttp_PostRequest::LimitSec' has a wrong offset!");
static_assert(offsetof(NetHttp_PostRequest, ReturnValue) == 0x000028, "Member 'NetHttp_PostRequest::ReturnValue' has a wrong offset!");

// Function CosmosApi.NetHttp.SetHeader
// 0x0048 (0x0048 - 0x0000)
struct NetHttp_SetHeader final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TitleCd;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Session;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Platform;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNetHttp*                               ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetHttp_SetHeader) == 0x000008, "Wrong alignment on NetHttp_SetHeader");
static_assert(sizeof(NetHttp_SetHeader) == 0x000048, "Wrong size on NetHttp_SetHeader");
static_assert(offsetof(NetHttp_SetHeader, WorldContextObject) == 0x000000, "Member 'NetHttp_SetHeader::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NetHttp_SetHeader, TitleCd) == 0x000008, "Member 'NetHttp_SetHeader::TitleCd' has a wrong offset!");
static_assert(offsetof(NetHttp_SetHeader, UserId) == 0x000018, "Member 'NetHttp_SetHeader::UserId' has a wrong offset!");
static_assert(offsetof(NetHttp_SetHeader, Session) == 0x000028, "Member 'NetHttp_SetHeader::Session' has a wrong offset!");
static_assert(offsetof(NetHttp_SetHeader, Platform) == 0x000038, "Member 'NetHttp_SetHeader::Platform' has a wrong offset!");
static_assert(offsetof(NetHttp_SetHeader, ReturnValue) == 0x000040, "Member 'NetHttp_SetHeader::ReturnValue' has a wrong offset!");

// Function CosmosApi.NetMessage.Create
// 0x0010 (0x0010 - 0x0000)
struct NetMessage_Create final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetMessage*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetMessage_Create) == 0x000008, "Wrong alignment on NetMessage_Create");
static_assert(sizeof(NetMessage_Create) == 0x000010, "Wrong size on NetMessage_Create");
static_assert(offsetof(NetMessage_Create, WorldContextObject) == 0x000000, "Member 'NetMessage_Create::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NetMessage_Create, ReturnValue) == 0x000008, "Member 'NetMessage_Create::ReturnValue' has a wrong offset!");

// Function CosmosApi.NetMessage.Dump
// 0x0020 (0x0020 - 0x0000)
struct NetMessage_Dump final
{
public:
	class FString                                 Prefix;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetMessage_Dump) == 0x000008, "Wrong alignment on NetMessage_Dump");
static_assert(sizeof(NetMessage_Dump) == 0x000020, "Wrong size on NetMessage_Dump");
static_assert(offsetof(NetMessage_Dump, Prefix) == 0x000000, "Member 'NetMessage_Dump::Prefix' has a wrong offset!");
static_assert(offsetof(NetMessage_Dump, ReturnValue) == 0x000010, "Member 'NetMessage_Dump::ReturnValue' has a wrong offset!");

// Function CosmosApi.NetMessage.DumpHttp
// 0x0020 (0x0020 - 0x0000)
struct NetMessage_DumpHttp final
{
public:
	class FString                                 Prefix;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetMessage_DumpHttp) == 0x000008, "Wrong alignment on NetMessage_DumpHttp");
static_assert(sizeof(NetMessage_DumpHttp) == 0x000020, "Wrong size on NetMessage_DumpHttp");
static_assert(offsetof(NetMessage_DumpHttp, Prefix) == 0x000000, "Member 'NetMessage_DumpHttp::Prefix' has a wrong offset!");
static_assert(offsetof(NetMessage_DumpHttp, ReturnValue) == 0x000010, "Member 'NetMessage_DumpHttp::ReturnValue' has a wrong offset!");

// Function CosmosApi.NetMessage.DumpHttpHeader
// 0x0020 (0x0020 - 0x0000)
struct NetMessage_DumpHttpHeader final
{
public:
	class FString                                 Prefix;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetMessage_DumpHttpHeader) == 0x000008, "Wrong alignment on NetMessage_DumpHttpHeader");
static_assert(sizeof(NetMessage_DumpHttpHeader) == 0x000020, "Wrong size on NetMessage_DumpHttpHeader");
static_assert(offsetof(NetMessage_DumpHttpHeader, Prefix) == 0x000000, "Member 'NetMessage_DumpHttpHeader::Prefix' has a wrong offset!");
static_assert(offsetof(NetMessage_DumpHttpHeader, ReturnValue) == 0x000010, "Member 'NetMessage_DumpHttpHeader::ReturnValue' has a wrong offset!");

// Function CosmosApi.NetMessage.Set
// 0x0020 (0x0020 - 0x0000)
struct NetMessage_Set final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Data;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UNetMessage*                            ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetMessage_Set) == 0x000008, "Wrong alignment on NetMessage_Set");
static_assert(sizeof(NetMessage_Set) == 0x000020, "Wrong size on NetMessage_Set");
static_assert(offsetof(NetMessage_Set, ID) == 0x000000, "Member 'NetMessage_Set::ID' has a wrong offset!");
static_assert(offsetof(NetMessage_Set, Data) == 0x000008, "Member 'NetMessage_Set::Data' has a wrong offset!");
static_assert(offsetof(NetMessage_Set, ReturnValue) == 0x000018, "Member 'NetMessage_Set::ReturnValue' has a wrong offset!");

// Function CosmosApi.NetMessage.ToJson
// 0x0010 (0x0010 - 0x0000)
struct NetMessage_ToJson final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetMessage_ToJson) == 0x000008, "Wrong alignment on NetMessage_ToJson");
static_assert(sizeof(NetMessage_ToJson) == 0x000010, "Wrong size on NetMessage_ToJson");
static_assert(offsetof(NetMessage_ToJson, ReturnValue) == 0x000000, "Member 'NetMessage_ToJson::ReturnValue' has a wrong offset!");

// Function CosmosApi.NetSocketFacadeInterface.SetCipherMode
// 0x0018 (0x0018 - 0x0000)
struct NetSocketFacadeInterface_SetCipherMode final
{
public:
	ENetSocketCipherMode                          Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSocketFacadeInterface_SetCipherMode) == 0x000008, "Wrong alignment on NetSocketFacadeInterface_SetCipherMode");
static_assert(sizeof(NetSocketFacadeInterface_SetCipherMode) == 0x000018, "Wrong size on NetSocketFacadeInterface_SetCipherMode");
static_assert(offsetof(NetSocketFacadeInterface_SetCipherMode, Mode) == 0x000000, "Member 'NetSocketFacadeInterface_SetCipherMode::Mode' has a wrong offset!");
static_assert(offsetof(NetSocketFacadeInterface_SetCipherMode, Key) == 0x000008, "Member 'NetSocketFacadeInterface_SetCipherMode::Key' has a wrong offset!");

// Function CosmosApi.NetSocketFacadeInterface.SetUseTickReceive
// 0x0001 (0x0001 - 0x0000)
struct NetSocketFacadeInterface_SetUseTickReceive final
{
public:
	bool                                          Use;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSocketFacadeInterface_SetUseTickReceive) == 0x000001, "Wrong alignment on NetSocketFacadeInterface_SetUseTickReceive");
static_assert(sizeof(NetSocketFacadeInterface_SetUseTickReceive) == 0x000001, "Wrong size on NetSocketFacadeInterface_SetUseTickReceive");
static_assert(offsetof(NetSocketFacadeInterface_SetUseTickReceive, Use) == 0x000000, "Member 'NetSocketFacadeInterface_SetUseTickReceive::Use' has a wrong offset!");

// Function CosmosApi.NetSquad.Appeal
// 0x0010 (0x0010 - 0x0000)
struct NetSquad_Appeal final
{
public:
	class FString                                 AppealMessage;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSquad_Appeal) == 0x000008, "Wrong alignment on NetSquad_Appeal");
static_assert(sizeof(NetSquad_Appeal) == 0x000010, "Wrong size on NetSquad_Appeal");
static_assert(offsetof(NetSquad_Appeal, AppealMessage) == 0x000000, "Member 'NetSquad_Appeal::AppealMessage' has a wrong offset!");

// Function CosmosApi.NetSquad.AppealCustomSquad
// 0x0028 (0x0028 - 0x0000)
struct NetSquad_AppealCustomSquad final
{
public:
	class FString                                 CustomRoomId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomSquadNo;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Appeal;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSquad_AppealCustomSquad) == 0x000008, "Wrong alignment on NetSquad_AppealCustomSquad");
static_assert(sizeof(NetSquad_AppealCustomSquad) == 0x000028, "Wrong size on NetSquad_AppealCustomSquad");
static_assert(offsetof(NetSquad_AppealCustomSquad, CustomRoomId) == 0x000000, "Member 'NetSquad_AppealCustomSquad::CustomRoomId' has a wrong offset!");
static_assert(offsetof(NetSquad_AppealCustomSquad, CustomSquadNo) == 0x000010, "Member 'NetSquad_AppealCustomSquad::CustomSquadNo' has a wrong offset!");
static_assert(offsetof(NetSquad_AppealCustomSquad, Appeal) == 0x000018, "Member 'NetSquad_AppealCustomSquad::Appeal' has a wrong offset!");

// Function CosmosApi.NetSquad.CancelCustomLobbyMatching
// 0x0010 (0x0010 - 0x0000)
struct NetSquad_CancelCustomLobbyMatching final
{
public:
	class FString                                 CustomRoomId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSquad_CancelCustomLobbyMatching) == 0x000008, "Wrong alignment on NetSquad_CancelCustomLobbyMatching");
static_assert(sizeof(NetSquad_CancelCustomLobbyMatching) == 0x000010, "Wrong size on NetSquad_CancelCustomLobbyMatching");
static_assert(offsetof(NetSquad_CancelCustomLobbyMatching, CustomRoomId) == 0x000000, "Member 'NetSquad_CancelCustomLobbyMatching::CustomRoomId' has a wrong offset!");

// Function CosmosApi.NetSquad.ChangePlayMode
// 0x0004 (0x0004 - 0x0000)
struct NetSquad_ChangePlayMode final
{
public:
	int32                                         NewPlayMode;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSquad_ChangePlayMode) == 0x000004, "Wrong alignment on NetSquad_ChangePlayMode");
static_assert(sizeof(NetSquad_ChangePlayMode) == 0x000004, "Wrong size on NetSquad_ChangePlayMode");
static_assert(offsetof(NetSquad_ChangePlayMode, NewPlayMode) == 0x000000, "Member 'NetSquad_ChangePlayMode::NewPlayMode' has a wrong offset!");

// Function CosmosApi.NetSquad.ConnectMatchingServer
// 0x0004 (0x0004 - 0x0000)
struct NetSquad_ConnectMatchingServer final
{
public:
	int32                                         Score;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSquad_ConnectMatchingServer) == 0x000004, "Wrong alignment on NetSquad_ConnectMatchingServer");
static_assert(sizeof(NetSquad_ConnectMatchingServer) == 0x000004, "Wrong size on NetSquad_ConnectMatchingServer");
static_assert(offsetof(NetSquad_ConnectMatchingServer, Score) == 0x000000, "Member 'NetSquad_ConnectMatchingServer::Score' has a wrong offset!");

// Function CosmosApi.NetSquad.CreateCustomRoom
// 0x0038 (0x0038 - 0x0000)
struct NetSquad_CreateCustomRoom final
{
public:
	class FString                                 CustomRoomId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserData;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomRoomData;                                    // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomRoomPlayMode;                                // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NetSquad_CreateCustomRoom) == 0x000008, "Wrong alignment on NetSquad_CreateCustomRoom");
static_assert(sizeof(NetSquad_CreateCustomRoom) == 0x000038, "Wrong size on NetSquad_CreateCustomRoom");
static_assert(offsetof(NetSquad_CreateCustomRoom, CustomRoomId) == 0x000000, "Member 'NetSquad_CreateCustomRoom::CustomRoomId' has a wrong offset!");
static_assert(offsetof(NetSquad_CreateCustomRoom, UserData) == 0x000010, "Member 'NetSquad_CreateCustomRoom::UserData' has a wrong offset!");
static_assert(offsetof(NetSquad_CreateCustomRoom, CustomRoomData) == 0x000020, "Member 'NetSquad_CreateCustomRoom::CustomRoomData' has a wrong offset!");
static_assert(offsetof(NetSquad_CreateCustomRoom, CustomRoomPlayMode) == 0x000030, "Member 'NetSquad_CreateCustomRoom::CustomRoomPlayMode' has a wrong offset!");

// Function CosmosApi.NetSquad.CreateSquad
// 0x0108 (0x0108 - 0x0000)
struct NetSquad_CreateSquad final
{
public:
	struct FCreateSquadParam                      Param;                                             // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSquad_CreateSquad) == 0x000008, "Wrong alignment on NetSquad_CreateSquad");
static_assert(sizeof(NetSquad_CreateSquad) == 0x000108, "Wrong size on NetSquad_CreateSquad");
static_assert(offsetof(NetSquad_CreateSquad, Param) == 0x000000, "Member 'NetSquad_CreateSquad::Param' has a wrong offset!");

// Function CosmosApi.NetSquad.FindSquad
// 0x0020 (0x0020 - 0x0000)
struct NetSquad_FindSquad final
{
public:
	int32                                         PlayMode;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Skill;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ConnectionServerIP;                                // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConnectionServerPort;                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NetSquad_FindSquad) == 0x000008, "Wrong alignment on NetSquad_FindSquad");
static_assert(sizeof(NetSquad_FindSquad) == 0x000020, "Wrong size on NetSquad_FindSquad");
static_assert(offsetof(NetSquad_FindSquad, PlayMode) == 0x000000, "Member 'NetSquad_FindSquad::PlayMode' has a wrong offset!");
static_assert(offsetof(NetSquad_FindSquad, Skill) == 0x000004, "Member 'NetSquad_FindSquad::Skill' has a wrong offset!");
static_assert(offsetof(NetSquad_FindSquad, ConnectionServerIP) == 0x000008, "Member 'NetSquad_FindSquad::ConnectionServerIP' has a wrong offset!");
static_assert(offsetof(NetSquad_FindSquad, ConnectionServerPort) == 0x000018, "Member 'NetSquad_FindSquad::ConnectionServerPort' has a wrong offset!");

// Function CosmosApi.NetSquad.FinishCustomGame
// 0x0010 (0x0010 - 0x0000)
struct NetSquad_FinishCustomGame final
{
public:
	class FString                                 CustomRoomId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSquad_FinishCustomGame) == 0x000008, "Wrong alignment on NetSquad_FinishCustomGame");
static_assert(sizeof(NetSquad_FinishCustomGame) == 0x000010, "Wrong size on NetSquad_FinishCustomGame");
static_assert(offsetof(NetSquad_FinishCustomGame, CustomRoomId) == 0x000000, "Member 'NetSquad_FinishCustomGame::CustomRoomId' has a wrong offset!");

// Function CosmosApi.NetSquad.GetBattleServerAddress
// 0x0018 (0x0018 - 0x0000)
struct NetSquad_GetBattleServerAddress final
{
public:
	class FString                                 OutServerHost;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutServerPort;                                     // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NetSquad_GetBattleServerAddress) == 0x000008, "Wrong alignment on NetSquad_GetBattleServerAddress");
static_assert(sizeof(NetSquad_GetBattleServerAddress) == 0x000018, "Wrong size on NetSquad_GetBattleServerAddress");
static_assert(offsetof(NetSquad_GetBattleServerAddress, OutServerHost) == 0x000000, "Member 'NetSquad_GetBattleServerAddress::OutServerHost' has a wrong offset!");
static_assert(offsetof(NetSquad_GetBattleServerAddress, OutServerPort) == 0x000010, "Member 'NetSquad_GetBattleServerAddress::OutServerPort' has a wrong offset!");
static_assert(offsetof(NetSquad_GetBattleServerAddress, ReturnValue) == 0x000014, "Member 'NetSquad_GetBattleServerAddress::ReturnValue' has a wrong offset!");

// Function CosmosApi.NetSquad.GetConnectionServerAddress
// 0x0018 (0x0018 - 0x0000)
struct NetSquad_GetConnectionServerAddress final
{
public:
	class FString                                 OutServerHost;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutServerPort;                                     // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NetSquad_GetConnectionServerAddress) == 0x000008, "Wrong alignment on NetSquad_GetConnectionServerAddress");
static_assert(sizeof(NetSquad_GetConnectionServerAddress) == 0x000018, "Wrong size on NetSquad_GetConnectionServerAddress");
static_assert(offsetof(NetSquad_GetConnectionServerAddress, OutServerHost) == 0x000000, "Member 'NetSquad_GetConnectionServerAddress::OutServerHost' has a wrong offset!");
static_assert(offsetof(NetSquad_GetConnectionServerAddress, OutServerPort) == 0x000010, "Member 'NetSquad_GetConnectionServerAddress::OutServerPort' has a wrong offset!");
static_assert(offsetof(NetSquad_GetConnectionServerAddress, ReturnValue) == 0x000014, "Member 'NetSquad_GetConnectionServerAddress::ReturnValue' has a wrong offset!");

// Function CosmosApi.NetSquad.GetCustomLobbyServer
// 0x0010 (0x0010 - 0x0000)
struct NetSquad_GetCustomLobbyServer final
{
public:
	class FString                                 CustomRoomId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSquad_GetCustomLobbyServer) == 0x000008, "Wrong alignment on NetSquad_GetCustomLobbyServer");
static_assert(sizeof(NetSquad_GetCustomLobbyServer) == 0x000010, "Wrong size on NetSquad_GetCustomLobbyServer");
static_assert(offsetof(NetSquad_GetCustomLobbyServer, CustomRoomId) == 0x000000, "Member 'NetSquad_GetCustomLobbyServer::CustomRoomId' has a wrong offset!");

// Function CosmosApi.NetSquad.GetCustomRoomData
// 0x0010 (0x0010 - 0x0000)
struct NetSquad_GetCustomRoomData final
{
public:
	class FString                                 CustomRoomId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSquad_GetCustomRoomData) == 0x000008, "Wrong alignment on NetSquad_GetCustomRoomData");
static_assert(sizeof(NetSquad_GetCustomRoomData) == 0x000010, "Wrong size on NetSquad_GetCustomRoomData");
static_assert(offsetof(NetSquad_GetCustomRoomData, CustomRoomId) == 0x000000, "Member 'NetSquad_GetCustomRoomData::CustomRoomId' has a wrong offset!");

// Function CosmosApi.NetSquad.Initialize
// 0x0060 (0x0060 - 0x0000)
struct NetSquad_Initialize final
{
public:
	struct FNetSquadConfig                        Config;                                            // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bUseWebSocket;                                     // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseP2P;                                           // 0x0059(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NetSquad_Initialize) == 0x000008, "Wrong alignment on NetSquad_Initialize");
static_assert(sizeof(NetSquad_Initialize) == 0x000060, "Wrong size on NetSquad_Initialize");
static_assert(offsetof(NetSquad_Initialize, Config) == 0x000000, "Member 'NetSquad_Initialize::Config' has a wrong offset!");
static_assert(offsetof(NetSquad_Initialize, bUseWebSocket) == 0x000058, "Member 'NetSquad_Initialize::bUseWebSocket' has a wrong offset!");
static_assert(offsetof(NetSquad_Initialize, bUseP2P) == 0x000059, "Member 'NetSquad_Initialize::bUseP2P' has a wrong offset!");

// Function CosmosApi.NetSquad.JoinCustomRoom
// 0x0020 (0x0020 - 0x0000)
struct NetSquad_JoinCustomRoom final
{
public:
	class FString                                 CustomRoomId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserData;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSquad_JoinCustomRoom) == 0x000008, "Wrong alignment on NetSquad_JoinCustomRoom");
static_assert(sizeof(NetSquad_JoinCustomRoom) == 0x000020, "Wrong size on NetSquad_JoinCustomRoom");
static_assert(offsetof(NetSquad_JoinCustomRoom, CustomRoomId) == 0x000000, "Member 'NetSquad_JoinCustomRoom::CustomRoomId' has a wrong offset!");
static_assert(offsetof(NetSquad_JoinCustomRoom, UserData) == 0x000010, "Member 'NetSquad_JoinCustomRoom::UserData' has a wrong offset!");

// Function CosmosApi.NetSquad.JoinInvitedSquad
// 0x00D0 (0x00D0 - 0x0000)
struct NetSquad_JoinInvitedSquad final
{
public:
	class FString                                 JoinSquadId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNetSquadMemberData                    OutMemberData;                                     // 0x0010(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSquad_JoinInvitedSquad) == 0x000008, "Wrong alignment on NetSquad_JoinInvitedSquad");
static_assert(sizeof(NetSquad_JoinInvitedSquad) == 0x0000D0, "Wrong size on NetSquad_JoinInvitedSquad");
static_assert(offsetof(NetSquad_JoinInvitedSquad, JoinSquadId) == 0x000000, "Member 'NetSquad_JoinInvitedSquad::JoinSquadId' has a wrong offset!");
static_assert(offsetof(NetSquad_JoinInvitedSquad, OutMemberData) == 0x000010, "Member 'NetSquad_JoinInvitedSquad::OutMemberData' has a wrong offset!");

// Function CosmosApi.NetSquad.JoinMatchingSquad
// 0x00D0 (0x00D0 - 0x0000)
struct NetSquad_JoinMatchingSquad final
{
public:
	class FString                                 JoinSquadId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNetSquadMemberData                    MemberData;                                        // 0x0010(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSquad_JoinMatchingSquad) == 0x000008, "Wrong alignment on NetSquad_JoinMatchingSquad");
static_assert(sizeof(NetSquad_JoinMatchingSquad) == 0x0000D0, "Wrong size on NetSquad_JoinMatchingSquad");
static_assert(offsetof(NetSquad_JoinMatchingSquad, JoinSquadId) == 0x000000, "Member 'NetSquad_JoinMatchingSquad::JoinSquadId' has a wrong offset!");
static_assert(offsetof(NetSquad_JoinMatchingSquad, MemberData) == 0x000010, "Member 'NetSquad_JoinMatchingSquad::MemberData' has a wrong offset!");

// Function CosmosApi.NetSquad.KickCustomRoom
// 0x0020 (0x0020 - 0x0000)
struct NetSquad_KickCustomRoom final
{
public:
	class FString                                 CustomRoomId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSquad_KickCustomRoom) == 0x000008, "Wrong alignment on NetSquad_KickCustomRoom");
static_assert(sizeof(NetSquad_KickCustomRoom) == 0x000020, "Wrong size on NetSquad_KickCustomRoom");
static_assert(offsetof(NetSquad_KickCustomRoom, CustomRoomId) == 0x000000, "Member 'NetSquad_KickCustomRoom::CustomRoomId' has a wrong offset!");
static_assert(offsetof(NetSquad_KickCustomRoom, UserId) == 0x000010, "Member 'NetSquad_KickCustomRoom::UserId' has a wrong offset!");

// Function CosmosApi.NetSquad.KickSquadMember
// 0x0010 (0x0010 - 0x0000)
struct NetSquad_KickSquadMember final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSquad_KickSquadMember) == 0x000008, "Wrong alignment on NetSquad_KickSquadMember");
static_assert(sizeof(NetSquad_KickSquadMember) == 0x000010, "Wrong size on NetSquad_KickSquadMember");
static_assert(offsetof(NetSquad_KickSquadMember, UserId) == 0x000000, "Member 'NetSquad_KickSquadMember::UserId' has a wrong offset!");

// Function CosmosApi.NetSquad.LeaveCustomRoom
// 0x0010 (0x0010 - 0x0000)
struct NetSquad_LeaveCustomRoom final
{
public:
	class FString                                 CustomRoomId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSquad_LeaveCustomRoom) == 0x000008, "Wrong alignment on NetSquad_LeaveCustomRoom");
static_assert(sizeof(NetSquad_LeaveCustomRoom) == 0x000010, "Wrong size on NetSquad_LeaveCustomRoom");
static_assert(offsetof(NetSquad_LeaveCustomRoom, CustomRoomId) == 0x000000, "Member 'NetSquad_LeaveCustomRoom::CustomRoomId' has a wrong offset!");

// Function CosmosApi.NetSquad.ReadyCustomRoom
// 0x0010 (0x0010 - 0x0000)
struct NetSquad_ReadyCustomRoom final
{
public:
	class FString                                 CustomRoomId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSquad_ReadyCustomRoom) == 0x000008, "Wrong alignment on NetSquad_ReadyCustomRoom");
static_assert(sizeof(NetSquad_ReadyCustomRoom) == 0x000010, "Wrong size on NetSquad_ReadyCustomRoom");
static_assert(offsetof(NetSquad_ReadyCustomRoom, CustomRoomId) == 0x000000, "Member 'NetSquad_ReadyCustomRoom::CustomRoomId' has a wrong offset!");

// Function CosmosApi.NetSquad.SendCustomSquadChat
// 0x0028 (0x0028 - 0x0000)
struct NetSquad_SendCustomSquadChat final
{
public:
	class FString                                 CustomRoomId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomSquadNo;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ChatMessage;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSquad_SendCustomSquadChat) == 0x000008, "Wrong alignment on NetSquad_SendCustomSquadChat");
static_assert(sizeof(NetSquad_SendCustomSquadChat) == 0x000028, "Wrong size on NetSquad_SendCustomSquadChat");
static_assert(offsetof(NetSquad_SendCustomSquadChat, CustomRoomId) == 0x000000, "Member 'NetSquad_SendCustomSquadChat::CustomRoomId' has a wrong offset!");
static_assert(offsetof(NetSquad_SendCustomSquadChat, CustomSquadNo) == 0x000010, "Member 'NetSquad_SendCustomSquadChat::CustomSquadNo' has a wrong offset!");
static_assert(offsetof(NetSquad_SendCustomSquadChat, ChatMessage) == 0x000018, "Member 'NetSquad_SendCustomSquadChat::ChatMessage' has a wrong offset!");

// Function CosmosApi.NetSquad.SendSquadChatMessage
// 0x0010 (0x0010 - 0x0000)
struct NetSquad_SendSquadChatMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSquad_SendSquadChatMessage) == 0x000008, "Wrong alignment on NetSquad_SendSquadChatMessage");
static_assert(sizeof(NetSquad_SendSquadChatMessage) == 0x000010, "Wrong size on NetSquad_SendSquadChatMessage");
static_assert(offsetof(NetSquad_SendSquadChatMessage, Message) == 0x000000, "Member 'NetSquad_SendSquadChatMessage::Message' has a wrong offset!");

// Function CosmosApi.NetSquad.SetCustomMemberData
// 0x0020 (0x0020 - 0x0000)
struct NetSquad_SetCustomMemberData final
{
public:
	class FString                                 CustomRoomId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserData;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSquad_SetCustomMemberData) == 0x000008, "Wrong alignment on NetSquad_SetCustomMemberData");
static_assert(sizeof(NetSquad_SetCustomMemberData) == 0x000020, "Wrong size on NetSquad_SetCustomMemberData");
static_assert(offsetof(NetSquad_SetCustomMemberData, CustomRoomId) == 0x000000, "Member 'NetSquad_SetCustomMemberData::CustomRoomId' has a wrong offset!");
static_assert(offsetof(NetSquad_SetCustomMemberData, UserData) == 0x000010, "Member 'NetSquad_SetCustomMemberData::UserData' has a wrong offset!");

// Function CosmosApi.NetSquad.SetCustomRoomMember
// 0x0020 (0x0020 - 0x0000)
struct NetSquad_SetCustomRoomMember final
{
public:
	class FString                                 CustomRoomId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCosmosCustomRoomSquadList>     RoomSquadList;                                     // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSquad_SetCustomRoomMember) == 0x000008, "Wrong alignment on NetSquad_SetCustomRoomMember");
static_assert(sizeof(NetSquad_SetCustomRoomMember) == 0x000020, "Wrong size on NetSquad_SetCustomRoomMember");
static_assert(offsetof(NetSquad_SetCustomRoomMember, CustomRoomId) == 0x000000, "Member 'NetSquad_SetCustomRoomMember::CustomRoomId' has a wrong offset!");
static_assert(offsetof(NetSquad_SetCustomRoomMember, RoomSquadList) == 0x000010, "Member 'NetSquad_SetCustomRoomMember::RoomSquadList' has a wrong offset!");

// Function CosmosApi.NetSquad.SetCustomRoomSettings
// 0x0028 (0x0028 - 0x0000)
struct NetSquad_SetCustomRoomSettings final
{
public:
	class FString                                 CustomRoomId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomRoomData;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomRoomPlayMode;                                // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NetSquad_SetCustomRoomSettings) == 0x000008, "Wrong alignment on NetSquad_SetCustomRoomSettings");
static_assert(sizeof(NetSquad_SetCustomRoomSettings) == 0x000028, "Wrong size on NetSquad_SetCustomRoomSettings");
static_assert(offsetof(NetSquad_SetCustomRoomSettings, CustomRoomId) == 0x000000, "Member 'NetSquad_SetCustomRoomSettings::CustomRoomId' has a wrong offset!");
static_assert(offsetof(NetSquad_SetCustomRoomSettings, CustomRoomData) == 0x000010, "Member 'NetSquad_SetCustomRoomSettings::CustomRoomData' has a wrong offset!");
static_assert(offsetof(NetSquad_SetCustomRoomSettings, CustomRoomPlayMode) == 0x000020, "Member 'NetSquad_SetCustomRoomSettings::CustomRoomPlayMode' has a wrong offset!");

// Function CosmosApi.NetSquad.SetSquadMemberData
// 0x00C0 (0x00C0 - 0x0000)
struct NetSquad_SetSquadMemberData final
{
public:
	struct FNetSquadMemberData                    MemberData;                                        // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSquad_SetSquadMemberData) == 0x000008, "Wrong alignment on NetSquad_SetSquadMemberData");
static_assert(sizeof(NetSquad_SetSquadMemberData) == 0x0000C0, "Wrong size on NetSquad_SetSquadMemberData");
static_assert(offsetof(NetSquad_SetSquadMemberData, MemberData) == 0x000000, "Member 'NetSquad_SetSquadMemberData::MemberData' has a wrong offset!");

// Function CosmosApi.NetSquad.StartSquadMatching
// 0x0008 (0x0008 - 0x0000)
struct NetSquad_StartSquadMatching final
{
public:
	int32                                         PlayMode;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Skill;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSquad_StartSquadMatching) == 0x000004, "Wrong alignment on NetSquad_StartSquadMatching");
static_assert(sizeof(NetSquad_StartSquadMatching) == 0x000008, "Wrong size on NetSquad_StartSquadMatching");
static_assert(offsetof(NetSquad_StartSquadMatching, PlayMode) == 0x000000, "Member 'NetSquad_StartSquadMatching::PlayMode' has a wrong offset!");
static_assert(offsetof(NetSquad_StartSquadMatching, Skill) == 0x000004, "Member 'NetSquad_StartSquadMatching::Skill' has a wrong offset!");

// Function CosmosApi.NetSquad.GetPlayMode
// 0x0004 (0x0004 - 0x0000)
struct NetSquad_GetPlayMode final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSquad_GetPlayMode) == 0x000004, "Wrong alignment on NetSquad_GetPlayMode");
static_assert(sizeof(NetSquad_GetPlayMode) == 0x000004, "Wrong size on NetSquad_GetPlayMode");
static_assert(offsetof(NetSquad_GetPlayMode, ReturnValue) == 0x000000, "Member 'NetSquad_GetPlayMode::ReturnValue' has a wrong offset!");

// Function CosmosApi.NetSquad.GetSquadId
// 0x0010 (0x0010 - 0x0000)
struct NetSquad_GetSquadId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSquad_GetSquadId) == 0x000008, "Wrong alignment on NetSquad_GetSquadId");
static_assert(sizeof(NetSquad_GetSquadId) == 0x000010, "Wrong size on NetSquad_GetSquadId");
static_assert(offsetof(NetSquad_GetSquadId, ReturnValue) == 0x000000, "Member 'NetSquad_GetSquadId::ReturnValue' has a wrong offset!");

// Function CosmosApi.NetSquad.GetSquadMemberData
// 0x00D8 (0x00D8 - 0x0000)
struct NetSquad_GetSquadMemberData final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNetSquadMemberData                    OutMemberData;                                     // 0x0010(0x00C0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00D0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NetSquad_GetSquadMemberData) == 0x000008, "Wrong alignment on NetSquad_GetSquadMemberData");
static_assert(sizeof(NetSquad_GetSquadMemberData) == 0x0000D8, "Wrong size on NetSquad_GetSquadMemberData");
static_assert(offsetof(NetSquad_GetSquadMemberData, UserId) == 0x000000, "Member 'NetSquad_GetSquadMemberData::UserId' has a wrong offset!");
static_assert(offsetof(NetSquad_GetSquadMemberData, OutMemberData) == 0x000010, "Member 'NetSquad_GetSquadMemberData::OutMemberData' has a wrong offset!");
static_assert(offsetof(NetSquad_GetSquadMemberData, ReturnValue) == 0x0000D0, "Member 'NetSquad_GetSquadMemberData::ReturnValue' has a wrong offset!");

// Function CosmosApi.NetSquad.GetSquadMemberList
// 0x0010 (0x0010 - 0x0000)
struct NetSquad_GetSquadMemberList final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSquad_GetSquadMemberList) == 0x000008, "Wrong alignment on NetSquad_GetSquadMemberList");
static_assert(sizeof(NetSquad_GetSquadMemberList) == 0x000010, "Wrong size on NetSquad_GetSquadMemberList");
static_assert(offsetof(NetSquad_GetSquadMemberList, ReturnValue) == 0x000000, "Member 'NetSquad_GetSquadMemberList::ReturnValue' has a wrong offset!");

// Function CosmosApi.NetSquad.GetUserId
// 0x0010 (0x0010 - 0x0000)
struct NetSquad_GetUserId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSquad_GetUserId) == 0x000008, "Wrong alignment on NetSquad_GetUserId");
static_assert(sizeof(NetSquad_GetUserId) == 0x000010, "Wrong size on NetSquad_GetUserId");
static_assert(offsetof(NetSquad_GetUserId, ReturnValue) == 0x000000, "Member 'NetSquad_GetUserId::ReturnValue' has a wrong offset!");

// Function CosmosApi.NetSquad.IsLeader
// 0x0001 (0x0001 - 0x0000)
struct NetSquad_IsLeader final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSquad_IsLeader) == 0x000001, "Wrong alignment on NetSquad_IsLeader");
static_assert(sizeof(NetSquad_IsLeader) == 0x000001, "Wrong size on NetSquad_IsLeader");
static_assert(offsetof(NetSquad_IsLeader, ReturnValue) == 0x000000, "Member 'NetSquad_IsLeader::ReturnValue' has a wrong offset!");

}

