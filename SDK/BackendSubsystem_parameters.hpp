#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BackendSubsystem

#include "Basic.hpp"

#include "BackendSubsystem_structs.hpp"
#include "MasterDataModule_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "VoiceChatModule_structs.hpp"


namespace SDK::Params
{

// Function BackendSubsystem.BackendSubsystem.AcceptFriendship
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_AcceptFriendship final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_AcceptFriendship) == 0x000008, "Wrong alignment on BackendSubsystem_AcceptFriendship");
static_assert(sizeof(BackendSubsystem_AcceptFriendship) == 0x000018, "Wrong size on BackendSubsystem_AcceptFriendship");
static_assert(offsetof(BackendSubsystem_AcceptFriendship, PlayerId) == 0x000000, "Member 'BackendSubsystem_AcceptFriendship::PlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_AcceptFriendship, ReturnValue) == 0x000010, "Member 'BackendSubsystem_AcceptFriendship::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.AcceptFriendshipImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_AcceptFriendshipImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_AcceptFriendshipImpl) == 0x000008, "Wrong alignment on BackendSubsystem_AcceptFriendshipImpl");
static_assert(sizeof(BackendSubsystem_AcceptFriendshipImpl) == 0x000018, "Wrong size on BackendSubsystem_AcceptFriendshipImpl");
static_assert(offsetof(BackendSubsystem_AcceptFriendshipImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_AcceptFriendshipImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_AcceptFriendshipImpl, Args) == 0x000008, "Member 'BackendSubsystem_AcceptFriendshipImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.AcceptGuild
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_AcceptGuild final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_AcceptGuild) == 0x000008, "Wrong alignment on BackendSubsystem_AcceptGuild");
static_assert(sizeof(BackendSubsystem_AcceptGuild) == 0x000018, "Wrong size on BackendSubsystem_AcceptGuild");
static_assert(offsetof(BackendSubsystem_AcceptGuild, PlayerId) == 0x000000, "Member 'BackendSubsystem_AcceptGuild::PlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_AcceptGuild, ReturnValue) == 0x000010, "Member 'BackendSubsystem_AcceptGuild::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.AcceptGuildImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_AcceptGuildImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_AcceptGuildImpl) == 0x000008, "Wrong alignment on BackendSubsystem_AcceptGuildImpl");
static_assert(sizeof(BackendSubsystem_AcceptGuildImpl) == 0x000018, "Wrong size on BackendSubsystem_AcceptGuildImpl");
static_assert(offsetof(BackendSubsystem_AcceptGuildImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_AcceptGuildImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_AcceptGuildImpl, Args) == 0x000008, "Member 'BackendSubsystem_AcceptGuildImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.AcceptGuildInvitation
// 0x0038 (0x0038 - 0x0000)
struct BackendSubsystem_AcceptGuildInvitation final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildId;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NoticeId;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_AcceptGuildInvitation) == 0x000008, "Wrong alignment on BackendSubsystem_AcceptGuildInvitation");
static_assert(sizeof(BackendSubsystem_AcceptGuildInvitation) == 0x000038, "Wrong size on BackendSubsystem_AcceptGuildInvitation");
static_assert(offsetof(BackendSubsystem_AcceptGuildInvitation, PlayerId) == 0x000000, "Member 'BackendSubsystem_AcceptGuildInvitation::PlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_AcceptGuildInvitation, GuildId) == 0x000010, "Member 'BackendSubsystem_AcceptGuildInvitation::GuildId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_AcceptGuildInvitation, NoticeId) == 0x000020, "Member 'BackendSubsystem_AcceptGuildInvitation::NoticeId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_AcceptGuildInvitation, ReturnValue) == 0x000030, "Member 'BackendSubsystem_AcceptGuildInvitation::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.AcceptGuildInvitationImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_AcceptGuildInvitationImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_AcceptGuildInvitationImpl) == 0x000008, "Wrong alignment on BackendSubsystem_AcceptGuildInvitationImpl");
static_assert(sizeof(BackendSubsystem_AcceptGuildInvitationImpl) == 0x000018, "Wrong size on BackendSubsystem_AcceptGuildInvitationImpl");
static_assert(offsetof(BackendSubsystem_AcceptGuildInvitationImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_AcceptGuildInvitationImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_AcceptGuildInvitationImpl, Args) == 0x000008, "Member 'BackendSubsystem_AcceptGuildInvitationImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.AddKpiPlayerBattleLog_DS
// 0x0298 (0x0298 - 0x0000)
struct BackendSubsystem_AddKpiPlayerBattleLog_DS final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKpiBattleLog                          Kpi;                                               // 0x0010(0x0288)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_AddKpiPlayerBattleLog_DS) == 0x000008, "Wrong alignment on BackendSubsystem_AddKpiPlayerBattleLog_DS");
static_assert(sizeof(BackendSubsystem_AddKpiPlayerBattleLog_DS) == 0x000298, "Wrong size on BackendSubsystem_AddKpiPlayerBattleLog_DS");
static_assert(offsetof(BackendSubsystem_AddKpiPlayerBattleLog_DS, PlayerId) == 0x000000, "Member 'BackendSubsystem_AddKpiPlayerBattleLog_DS::PlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_AddKpiPlayerBattleLog_DS, Kpi) == 0x000010, "Member 'BackendSubsystem_AddKpiPlayerBattleLog_DS::Kpi' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.AddPlayer_DS
// 0x0028 (0x0028 - 0x0000)
struct BackendSubsystem_AddPlayer_DS final
{
public:
	class FString                                 SquadId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerId;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterCode;                                     // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_AddPlayer_DS) == 0x000008, "Wrong alignment on BackendSubsystem_AddPlayer_DS");
static_assert(sizeof(BackendSubsystem_AddPlayer_DS) == 0x000028, "Wrong size on BackendSubsystem_AddPlayer_DS");
static_assert(offsetof(BackendSubsystem_AddPlayer_DS, SquadId) == 0x000000, "Member 'BackendSubsystem_AddPlayer_DS::SquadId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_AddPlayer_DS, PlayerId) == 0x000010, "Member 'BackendSubsystem_AddPlayer_DS::PlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_AddPlayer_DS, CharacterCode) == 0x000020, "Member 'BackendSubsystem_AddPlayer_DS::CharacterCode' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.ApplyGuild
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_ApplyGuild final
{
public:
	class FString                                 GuildId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RecommendApply;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_ApplyGuild) == 0x000008, "Wrong alignment on BackendSubsystem_ApplyGuild");
static_assert(sizeof(BackendSubsystem_ApplyGuild) == 0x000018, "Wrong size on BackendSubsystem_ApplyGuild");
static_assert(offsetof(BackendSubsystem_ApplyGuild, GuildId) == 0x000000, "Member 'BackendSubsystem_ApplyGuild::GuildId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_ApplyGuild, RecommendApply) == 0x000010, "Member 'BackendSubsystem_ApplyGuild::RecommendApply' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_ApplyGuild, ReturnValue) == 0x000014, "Member 'BackendSubsystem_ApplyGuild::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.ApplyGuildImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_ApplyGuildImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_ApplyGuildImpl) == 0x000008, "Wrong alignment on BackendSubsystem_ApplyGuildImpl");
static_assert(sizeof(BackendSubsystem_ApplyGuildImpl) == 0x000018, "Wrong size on BackendSubsystem_ApplyGuildImpl");
static_assert(offsetof(BackendSubsystem_ApplyGuildImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_ApplyGuildImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_ApplyGuildImpl, Args) == 0x000008, "Member 'BackendSubsystem_ApplyGuildImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.AutoStartBattle
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_AutoStartBattle final
{
public:
	bool                                          bInitialize;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_AutoStartBattle) == 0x000001, "Wrong alignment on BackendSubsystem_AutoStartBattle");
static_assert(sizeof(BackendSubsystem_AutoStartBattle) == 0x000001, "Wrong size on BackendSubsystem_AutoStartBattle");
static_assert(offsetof(BackendSubsystem_AutoStartBattle, bInitialize) == 0x000000, "Member 'BackendSubsystem_AutoStartBattle::bInitialize' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.AutoStartBattleComplete
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_AutoStartBattleComplete final
{
public:
	EAutoStartBattleState                         State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_AutoStartBattleComplete) == 0x000001, "Wrong alignment on BackendSubsystem_AutoStartBattleComplete");
static_assert(sizeof(BackendSubsystem_AutoStartBattleComplete) == 0x000001, "Wrong size on BackendSubsystem_AutoStartBattleComplete");
static_assert(offsetof(BackendSubsystem_AutoStartBattleComplete, State) == 0x000000, "Member 'BackendSubsystem_AutoStartBattleComplete::State' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.AutoStartBattleProgress1
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_AutoStartBattleProgress1 final
{
public:
	int32                                         SkillBase;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PenaltyLevel;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_AutoStartBattleProgress1) == 0x000004, "Wrong alignment on BackendSubsystem_AutoStartBattleProgress1");
static_assert(sizeof(BackendSubsystem_AutoStartBattleProgress1) == 0x000008, "Wrong size on BackendSubsystem_AutoStartBattleProgress1");
static_assert(offsetof(BackendSubsystem_AutoStartBattleProgress1, SkillBase) == 0x000000, "Member 'BackendSubsystem_AutoStartBattleProgress1::SkillBase' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_AutoStartBattleProgress1, PenaltyLevel) == 0x000004, "Member 'BackendSubsystem_AutoStartBattleProgress1::PenaltyLevel' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.BroadcastAutoStartBattleComplete
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_BroadcastAutoStartBattleComplete final
{
public:
	bool                                          Idle;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StateSetting;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_BroadcastAutoStartBattleComplete) == 0x000004, "Wrong alignment on BackendSubsystem_BroadcastAutoStartBattleComplete");
static_assert(sizeof(BackendSubsystem_BroadcastAutoStartBattleComplete) == 0x000008, "Wrong size on BackendSubsystem_BroadcastAutoStartBattleComplete");
static_assert(offsetof(BackendSubsystem_BroadcastAutoStartBattleComplete, Idle) == 0x000000, "Member 'BackendSubsystem_BroadcastAutoStartBattleComplete::Idle' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_BroadcastAutoStartBattleComplete, StateSetting) == 0x000004, "Member 'BackendSubsystem_BroadcastAutoStartBattleComplete::StateSetting' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.BroadcastOnLoadCompleteEventNextTick
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_BroadcastOnLoadCompleteEventNextTick final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_BroadcastOnLoadCompleteEventNextTick) == 0x000004, "Wrong alignment on BackendSubsystem_BroadcastOnLoadCompleteEventNextTick");
static_assert(sizeof(BackendSubsystem_BroadcastOnLoadCompleteEventNextTick) == 0x000004, "Wrong size on BackendSubsystem_BroadcastOnLoadCompleteEventNextTick");
static_assert(offsetof(BackendSubsystem_BroadcastOnLoadCompleteEventNextTick, RequestId) == 0x000000, "Member 'BackendSubsystem_BroadcastOnLoadCompleteEventNextTick::RequestId' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.Buy
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_Buy final
{
public:
	int32                                         ShopItemCode;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrencyCode;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_Buy) == 0x000004, "Wrong alignment on BackendSubsystem_Buy");
static_assert(sizeof(BackendSubsystem_Buy) == 0x000010, "Wrong size on BackendSubsystem_Buy");
static_assert(offsetof(BackendSubsystem_Buy, ShopItemCode) == 0x000000, "Member 'BackendSubsystem_Buy::ShopItemCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_Buy, CurrencyCode) == 0x000004, "Member 'BackendSubsystem_Buy::CurrencyCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_Buy, Count) == 0x000008, "Member 'BackendSubsystem_Buy::Count' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_Buy, ReturnValue) == 0x00000C, "Member 'BackendSubsystem_Buy::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.BuyImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_BuyImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_BuyImpl) == 0x000008, "Wrong alignment on BackendSubsystem_BuyImpl");
static_assert(sizeof(BackendSubsystem_BuyImpl) == 0x000018, "Wrong size on BackendSubsystem_BuyImpl");
static_assert(offsetof(BackendSubsystem_BuyImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_BuyImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_BuyImpl, Args) == 0x000008, "Member 'BackendSubsystem_BuyImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.BuyLicenseImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_BuyLicenseImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_BuyLicenseImpl) == 0x000008, "Wrong alignment on BackendSubsystem_BuyLicenseImpl");
static_assert(sizeof(BackendSubsystem_BuyLicenseImpl) == 0x000018, "Wrong size on BackendSubsystem_BuyLicenseImpl");
static_assert(offsetof(BackendSubsystem_BuyLicenseImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_BuyLicenseImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_BuyLicenseImpl, Args) == 0x000008, "Member 'BackendSubsystem_BuyLicenseImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.BuyLicenseWithExpImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_BuyLicenseWithExpImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_BuyLicenseWithExpImpl) == 0x000008, "Wrong alignment on BackendSubsystem_BuyLicenseWithExpImpl");
static_assert(sizeof(BackendSubsystem_BuyLicenseWithExpImpl) == 0x000018, "Wrong size on BackendSubsystem_BuyLicenseWithExpImpl");
static_assert(offsetof(BackendSubsystem_BuyLicenseWithExpImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_BuyLicenseWithExpImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_BuyLicenseWithExpImpl, Args) == 0x000008, "Member 'BackendSubsystem_BuyLicenseWithExpImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.BuyPremiumDailyLoginBonus
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_BuyPremiumDailyLoginBonus final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_BuyPremiumDailyLoginBonus) == 0x000004, "Wrong alignment on BackendSubsystem_BuyPremiumDailyLoginBonus");
static_assert(sizeof(BackendSubsystem_BuyPremiumDailyLoginBonus) == 0x000004, "Wrong size on BackendSubsystem_BuyPremiumDailyLoginBonus");
static_assert(offsetof(BackendSubsystem_BuyPremiumDailyLoginBonus, ReturnValue) == 0x000000, "Member 'BackendSubsystem_BuyPremiumDailyLoginBonus::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.BuyPremiumDailyLoginBonusImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_BuyPremiumDailyLoginBonusImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_BuyPremiumDailyLoginBonusImpl) == 0x000008, "Wrong alignment on BackendSubsystem_BuyPremiumDailyLoginBonusImpl");
static_assert(sizeof(BackendSubsystem_BuyPremiumDailyLoginBonusImpl) == 0x000018, "Wrong size on BackendSubsystem_BuyPremiumDailyLoginBonusImpl");
static_assert(offsetof(BackendSubsystem_BuyPremiumDailyLoginBonusImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_BuyPremiumDailyLoginBonusImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_BuyPremiumDailyLoginBonusImpl, Args) == 0x000008, "Member 'BackendSubsystem_BuyPremiumDailyLoginBonusImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.BuyProLicense
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_BuyProLicense final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_BuyProLicense) == 0x000004, "Wrong alignment on BackendSubsystem_BuyProLicense");
static_assert(sizeof(BackendSubsystem_BuyProLicense) == 0x000004, "Wrong size on BackendSubsystem_BuyProLicense");
static_assert(offsetof(BackendSubsystem_BuyProLicense, ReturnValue) == 0x000000, "Member 'BackendSubsystem_BuyProLicense::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.BuyProLicenseWithExp
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_BuyProLicenseWithExp final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_BuyProLicenseWithExp) == 0x000004, "Wrong alignment on BackendSubsystem_BuyProLicenseWithExp");
static_assert(sizeof(BackendSubsystem_BuyProLicenseWithExp) == 0x000004, "Wrong size on BackendSubsystem_BuyProLicenseWithExp");
static_assert(offsetof(BackendSubsystem_BuyProLicenseWithExp, ReturnValue) == 0x000000, "Member 'BackendSubsystem_BuyProLicenseWithExp::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.BuySpecialLicenseExp
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_BuySpecialLicenseExp final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_BuySpecialLicenseExp) == 0x000004, "Wrong alignment on BackendSubsystem_BuySpecialLicenseExp");
static_assert(sizeof(BackendSubsystem_BuySpecialLicenseExp) == 0x000008, "Wrong size on BackendSubsystem_BuySpecialLicenseExp");
static_assert(offsetof(BackendSubsystem_BuySpecialLicenseExp, Count) == 0x000000, "Member 'BackendSubsystem_BuySpecialLicenseExp::Count' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_BuySpecialLicenseExp, ReturnValue) == 0x000004, "Member 'BackendSubsystem_BuySpecialLicenseExp::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.CancelApplyGuild
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_CancelApplyGuild final
{
public:
	class FString                                 GuildId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_CancelApplyGuild) == 0x000008, "Wrong alignment on BackendSubsystem_CancelApplyGuild");
static_assert(sizeof(BackendSubsystem_CancelApplyGuild) == 0x000018, "Wrong size on BackendSubsystem_CancelApplyGuild");
static_assert(offsetof(BackendSubsystem_CancelApplyGuild, GuildId) == 0x000000, "Member 'BackendSubsystem_CancelApplyGuild::GuildId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_CancelApplyGuild, ReturnValue) == 0x000010, "Member 'BackendSubsystem_CancelApplyGuild::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.CancelApplyGuildImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_CancelApplyGuildImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_CancelApplyGuildImpl) == 0x000008, "Wrong alignment on BackendSubsystem_CancelApplyGuildImpl");
static_assert(sizeof(BackendSubsystem_CancelApplyGuildImpl) == 0x000018, "Wrong size on BackendSubsystem_CancelApplyGuildImpl");
static_assert(offsetof(BackendSubsystem_CancelApplyGuildImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_CancelApplyGuildImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_CancelApplyGuildImpl, Args) == 0x000008, "Member 'BackendSubsystem_CancelApplyGuildImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.CancelAutoStartBattle
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_CancelAutoStartBattle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_CancelAutoStartBattle) == 0x000001, "Wrong alignment on BackendSubsystem_CancelAutoStartBattle");
static_assert(sizeof(BackendSubsystem_CancelAutoStartBattle) == 0x000001, "Wrong size on BackendSubsystem_CancelAutoStartBattle");
static_assert(offsetof(BackendSubsystem_CancelAutoStartBattle, ReturnValue) == 0x000000, "Member 'BackendSubsystem_CancelAutoStartBattle::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.CancelCustomLobbyMatching
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_CancelCustomLobbyMatching final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_CancelCustomLobbyMatching) == 0x000001, "Wrong alignment on BackendSubsystem_CancelCustomLobbyMatching");
static_assert(sizeof(BackendSubsystem_CancelCustomLobbyMatching) == 0x000001, "Wrong size on BackendSubsystem_CancelCustomLobbyMatching");
static_assert(offsetof(BackendSubsystem_CancelCustomLobbyMatching, ReturnValue) == 0x000000, "Member 'BackendSubsystem_CancelCustomLobbyMatching::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.CancelFriendshipProposal
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_CancelFriendshipProposal final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_CancelFriendshipProposal) == 0x000008, "Wrong alignment on BackendSubsystem_CancelFriendshipProposal");
static_assert(sizeof(BackendSubsystem_CancelFriendshipProposal) == 0x000018, "Wrong size on BackendSubsystem_CancelFriendshipProposal");
static_assert(offsetof(BackendSubsystem_CancelFriendshipProposal, PlayerId) == 0x000000, "Member 'BackendSubsystem_CancelFriendshipProposal::PlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_CancelFriendshipProposal, ReturnValue) == 0x000010, "Member 'BackendSubsystem_CancelFriendshipProposal::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.CancelFriendshipProposalImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_CancelFriendshipProposalImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_CancelFriendshipProposalImpl) == 0x000008, "Wrong alignment on BackendSubsystem_CancelFriendshipProposalImpl");
static_assert(sizeof(BackendSubsystem_CancelFriendshipProposalImpl) == 0x000018, "Wrong size on BackendSubsystem_CancelFriendshipProposalImpl");
static_assert(offsetof(BackendSubsystem_CancelFriendshipProposalImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_CancelFriendshipProposalImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_CancelFriendshipProposalImpl, Args) == 0x000008, "Member 'BackendSubsystem_CancelFriendshipProposalImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.CancelLobbyMatching
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_CancelLobbyMatching final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_CancelLobbyMatching) == 0x000001, "Wrong alignment on BackendSubsystem_CancelLobbyMatching");
static_assert(sizeof(BackendSubsystem_CancelLobbyMatching) == 0x000001, "Wrong size on BackendSubsystem_CancelLobbyMatching");
static_assert(offsetof(BackendSubsystem_CancelLobbyMatching, ReturnValue) == 0x000000, "Member 'BackendSubsystem_CancelLobbyMatching::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.CancelMergeSquad
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_CancelMergeSquad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_CancelMergeSquad) == 0x000001, "Wrong alignment on BackendSubsystem_CancelMergeSquad");
static_assert(sizeof(BackendSubsystem_CancelMergeSquad) == 0x000001, "Wrong size on BackendSubsystem_CancelMergeSquad");
static_assert(offsetof(BackendSubsystem_CancelMergeSquad, ReturnValue) == 0x000000, "Member 'BackendSubsystem_CancelMergeSquad::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.CancelPurchase
// 0x0028 (0x0028 - 0x0000)
struct BackendSubsystem_CancelPurchase final
{
public:
	class FString                                 ErrorID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrorMessage;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_CancelPurchase) == 0x000008, "Wrong alignment on BackendSubsystem_CancelPurchase");
static_assert(sizeof(BackendSubsystem_CancelPurchase) == 0x000028, "Wrong size on BackendSubsystem_CancelPurchase");
static_assert(offsetof(BackendSubsystem_CancelPurchase, ErrorID) == 0x000000, "Member 'BackendSubsystem_CancelPurchase::ErrorID' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_CancelPurchase, ErrorMessage) == 0x000010, "Member 'BackendSubsystem_CancelPurchase::ErrorMessage' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_CancelPurchase, ReturnValue) == 0x000020, "Member 'BackendSubsystem_CancelPurchase::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.CancelPurchaseImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_CancelPurchaseImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_CancelPurchaseImpl) == 0x000008, "Wrong alignment on BackendSubsystem_CancelPurchaseImpl");
static_assert(sizeof(BackendSubsystem_CancelPurchaseImpl) == 0x000018, "Wrong size on BackendSubsystem_CancelPurchaseImpl");
static_assert(offsetof(BackendSubsystem_CancelPurchaseImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_CancelPurchaseImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_CancelPurchaseImpl, Args) == 0x000008, "Member 'BackendSubsystem_CancelPurchaseImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.CancelSquadInvitation
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_CancelSquadInvitation final
{
public:
	class FString                                 InvitationId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_CancelSquadInvitation) == 0x000008, "Wrong alignment on BackendSubsystem_CancelSquadInvitation");
static_assert(sizeof(BackendSubsystem_CancelSquadInvitation) == 0x000018, "Wrong size on BackendSubsystem_CancelSquadInvitation");
static_assert(offsetof(BackendSubsystem_CancelSquadInvitation, InvitationId) == 0x000000, "Member 'BackendSubsystem_CancelSquadInvitation::InvitationId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_CancelSquadInvitation, ReturnValue) == 0x000010, "Member 'BackendSubsystem_CancelSquadInvitation::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.CancelSquadInvitationImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_CancelSquadInvitationImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_CancelSquadInvitationImpl) == 0x000008, "Wrong alignment on BackendSubsystem_CancelSquadInvitationImpl");
static_assert(sizeof(BackendSubsystem_CancelSquadInvitationImpl) == 0x000018, "Wrong size on BackendSubsystem_CancelSquadInvitationImpl");
static_assert(offsetof(BackendSubsystem_CancelSquadInvitationImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_CancelSquadInvitationImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_CancelSquadInvitationImpl, Args) == 0x000008, "Member 'BackendSubsystem_CancelSquadInvitationImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.CanStartBattle
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_CanStartBattle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_CanStartBattle) == 0x000001, "Wrong alignment on BackendSubsystem_CanStartBattle");
static_assert(sizeof(BackendSubsystem_CanStartBattle) == 0x000001, "Wrong size on BackendSubsystem_CanStartBattle");
static_assert(offsetof(BackendSubsystem_CanStartBattle, ReturnValue) == 0x000000, "Member 'BackendSubsystem_CanStartBattle::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.ChangePlayMode
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_ChangePlayMode final
{
public:
	int32                                         NewPlayMode;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_ChangePlayMode) == 0x000004, "Wrong alignment on BackendSubsystem_ChangePlayMode");
static_assert(sizeof(BackendSubsystem_ChangePlayMode) == 0x000008, "Wrong size on BackendSubsystem_ChangePlayMode");
static_assert(offsetof(BackendSubsystem_ChangePlayMode, NewPlayMode) == 0x000000, "Member 'BackendSubsystem_ChangePlayMode::NewPlayMode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_ChangePlayMode, ReturnValue) == 0x000004, "Member 'BackendSubsystem_ChangePlayMode::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.CheckBnidStatus
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_CheckBnidStatus final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_CheckBnidStatus) == 0x000004, "Wrong alignment on BackendSubsystem_CheckBnidStatus");
static_assert(sizeof(BackendSubsystem_CheckBnidStatus) == 0x000004, "Wrong size on BackendSubsystem_CheckBnidStatus");
static_assert(offsetof(BackendSubsystem_CheckBnidStatus, ReturnValue) == 0x000000, "Member 'BackendSubsystem_CheckBnidStatus::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.CheckBnidStatusImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_CheckBnidStatusImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_CheckBnidStatusImpl) == 0x000008, "Wrong alignment on BackendSubsystem_CheckBnidStatusImpl");
static_assert(sizeof(BackendSubsystem_CheckBnidStatusImpl) == 0x000018, "Wrong size on BackendSubsystem_CheckBnidStatusImpl");
static_assert(offsetof(BackendSubsystem_CheckBnidStatusImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_CheckBnidStatusImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_CheckBnidStatusImpl, Args) == 0x000008, "Member 'BackendSubsystem_CheckBnidStatusImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.CheckedLeaveSquad
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_CheckedLeaveSquad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_CheckedLeaveSquad) == 0x000001, "Wrong alignment on BackendSubsystem_CheckedLeaveSquad");
static_assert(sizeof(BackendSubsystem_CheckedLeaveSquad) == 0x000001, "Wrong size on BackendSubsystem_CheckedLeaveSquad");
static_assert(offsetof(BackendSubsystem_CheckedLeaveSquad, ReturnValue) == 0x000000, "Member 'BackendSubsystem_CheckedLeaveSquad::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.CheckNumKpiPlayerBattleLog_DS
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_CheckNumKpiPlayerBattleLog_DS final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_CheckNumKpiPlayerBattleLog_DS) == 0x000001, "Wrong alignment on BackendSubsystem_CheckNumKpiPlayerBattleLog_DS");
static_assert(sizeof(BackendSubsystem_CheckNumKpiPlayerBattleLog_DS) == 0x000001, "Wrong size on BackendSubsystem_CheckNumKpiPlayerBattleLog_DS");
static_assert(offsetof(BackendSubsystem_CheckNumKpiPlayerBattleLog_DS, ReturnValue) == 0x000000, "Member 'BackendSubsystem_CheckNumKpiPlayerBattleLog_DS::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.ConfirmPurchase
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_ConfirmPurchase final
{
public:
	class FString                                 OrderId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_ConfirmPurchase) == 0x000008, "Wrong alignment on BackendSubsystem_ConfirmPurchase");
static_assert(sizeof(BackendSubsystem_ConfirmPurchase) == 0x000018, "Wrong size on BackendSubsystem_ConfirmPurchase");
static_assert(offsetof(BackendSubsystem_ConfirmPurchase, OrderId) == 0x000000, "Member 'BackendSubsystem_ConfirmPurchase::OrderId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_ConfirmPurchase, ReturnValue) == 0x000010, "Member 'BackendSubsystem_ConfirmPurchase::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.ConfirmPurchaseImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_ConfirmPurchaseImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_ConfirmPurchaseImpl) == 0x000008, "Wrong alignment on BackendSubsystem_ConfirmPurchaseImpl");
static_assert(sizeof(BackendSubsystem_ConfirmPurchaseImpl) == 0x000018, "Wrong size on BackendSubsystem_ConfirmPurchaseImpl");
static_assert(offsetof(BackendSubsystem_ConfirmPurchaseImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_ConfirmPurchaseImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_ConfirmPurchaseImpl, Args) == 0x000008, "Member 'BackendSubsystem_ConfirmPurchaseImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.ConfirmRetryLottery
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_ConfirmRetryLottery final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_ConfirmRetryLottery) == 0x000004, "Wrong alignment on BackendSubsystem_ConfirmRetryLottery");
static_assert(sizeof(BackendSubsystem_ConfirmRetryLottery) == 0x000004, "Wrong size on BackendSubsystem_ConfirmRetryLottery");
static_assert(offsetof(BackendSubsystem_ConfirmRetryLottery, ReturnValue) == 0x000000, "Member 'BackendSubsystem_ConfirmRetryLottery::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.ConfirmRetryLotteryImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_ConfirmRetryLotteryImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_ConfirmRetryLotteryImpl) == 0x000008, "Wrong alignment on BackendSubsystem_ConfirmRetryLotteryImpl");
static_assert(sizeof(BackendSubsystem_ConfirmRetryLotteryImpl) == 0x000018, "Wrong size on BackendSubsystem_ConfirmRetryLotteryImpl");
static_assert(offsetof(BackendSubsystem_ConfirmRetryLotteryImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_ConfirmRetryLotteryImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_ConfirmRetryLotteryImpl, Args) == 0x000008, "Member 'BackendSubsystem_ConfirmRetryLotteryImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.ConsumeRentalPoint_DS
// 0x0058 (0x0058 - 0x0000)
struct BackendSubsystem_ConsumeRentalPoint_DS final
{
public:
	TMap<class FString, int32>                    ConsumeDataList;                                   // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_ConsumeRentalPoint_DS) == 0x000008, "Wrong alignment on BackendSubsystem_ConsumeRentalPoint_DS");
static_assert(sizeof(BackendSubsystem_ConsumeRentalPoint_DS) == 0x000058, "Wrong size on BackendSubsystem_ConsumeRentalPoint_DS");
static_assert(offsetof(BackendSubsystem_ConsumeRentalPoint_DS, ConsumeDataList) == 0x000000, "Member 'BackendSubsystem_ConsumeRentalPoint_DS::ConsumeDataList' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_ConsumeRentalPoint_DS, ReturnValue) == 0x000050, "Member 'BackendSubsystem_ConsumeRentalPoint_DS::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.CreateCustomMatchRoomID
// 0x000C (0x000C - 0x0000)
struct BackendSubsystem_CreateCustomMatchRoomID final
{
public:
	bool                                          bHiddenIdFlag;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayModeCode;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_CreateCustomMatchRoomID) == 0x000004, "Wrong alignment on BackendSubsystem_CreateCustomMatchRoomID");
static_assert(sizeof(BackendSubsystem_CreateCustomMatchRoomID) == 0x00000C, "Wrong size on BackendSubsystem_CreateCustomMatchRoomID");
static_assert(offsetof(BackendSubsystem_CreateCustomMatchRoomID, bHiddenIdFlag) == 0x000000, "Member 'BackendSubsystem_CreateCustomMatchRoomID::bHiddenIdFlag' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_CreateCustomMatchRoomID, PlayModeCode) == 0x000004, "Member 'BackendSubsystem_CreateCustomMatchRoomID::PlayModeCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_CreateCustomMatchRoomID, ReturnValue) == 0x000008, "Member 'BackendSubsystem_CreateCustomMatchRoomID::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.CreateCustomMatchRoomIDImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_CreateCustomMatchRoomIDImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_CreateCustomMatchRoomIDImpl) == 0x000008, "Wrong alignment on BackendSubsystem_CreateCustomMatchRoomIDImpl");
static_assert(sizeof(BackendSubsystem_CreateCustomMatchRoomIDImpl) == 0x000018, "Wrong size on BackendSubsystem_CreateCustomMatchRoomIDImpl");
static_assert(offsetof(BackendSubsystem_CreateCustomMatchRoomIDImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_CreateCustomMatchRoomIDImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_CreateCustomMatchRoomIDImpl, Args) == 0x000008, "Member 'BackendSubsystem_CreateCustomMatchRoomIDImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.CreateGuild
// 0x0030 (0x0030 - 0x0000)
struct BackendSubsystem_CreateGuild final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Profile;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuildPolicy                                  EPolicy;                                           // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuildJoinRule                                EJoinRule;                                         // 0x0021(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EmblemCode;                                        // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_CreateGuild) == 0x000008, "Wrong alignment on BackendSubsystem_CreateGuild");
static_assert(sizeof(BackendSubsystem_CreateGuild) == 0x000030, "Wrong size on BackendSubsystem_CreateGuild");
static_assert(offsetof(BackendSubsystem_CreateGuild, Name_0) == 0x000000, "Member 'BackendSubsystem_CreateGuild::Name_0' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_CreateGuild, Profile) == 0x000010, "Member 'BackendSubsystem_CreateGuild::Profile' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_CreateGuild, EPolicy) == 0x000020, "Member 'BackendSubsystem_CreateGuild::EPolicy' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_CreateGuild, EJoinRule) == 0x000021, "Member 'BackendSubsystem_CreateGuild::EJoinRule' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_CreateGuild, EmblemCode) == 0x000024, "Member 'BackendSubsystem_CreateGuild::EmblemCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_CreateGuild, ReturnValue) == 0x000028, "Member 'BackendSubsystem_CreateGuild::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.CreateGuildImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_CreateGuildImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_CreateGuildImpl) == 0x000008, "Wrong alignment on BackendSubsystem_CreateGuildImpl");
static_assert(sizeof(BackendSubsystem_CreateGuildImpl) == 0x000018, "Wrong size on BackendSubsystem_CreateGuildImpl");
static_assert(offsetof(BackendSubsystem_CreateGuildImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_CreateGuildImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_CreateGuildImpl, Args) == 0x000008, "Member 'BackendSubsystem_CreateGuildImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.CreateSquad
// 0x0002 (0x0002 - 0x0000)
struct BackendSubsystem_CreateSquad final
{
public:
	bool                                          bChangePlayMode;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_CreateSquad) == 0x000001, "Wrong alignment on BackendSubsystem_CreateSquad");
static_assert(sizeof(BackendSubsystem_CreateSquad) == 0x000002, "Wrong size on BackendSubsystem_CreateSquad");
static_assert(offsetof(BackendSubsystem_CreateSquad, bChangePlayMode) == 0x000000, "Member 'BackendSubsystem_CreateSquad::bChangePlayMode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_CreateSquad, ReturnValue) == 0x000001, "Member 'BackendSubsystem_CreateSquad::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.DeclineGuildInvitation
// 0x0028 (0x0028 - 0x0000)
struct BackendSubsystem_DeclineGuildInvitation final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NoticeId;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_DeclineGuildInvitation) == 0x000008, "Wrong alignment on BackendSubsystem_DeclineGuildInvitation");
static_assert(sizeof(BackendSubsystem_DeclineGuildInvitation) == 0x000028, "Wrong size on BackendSubsystem_DeclineGuildInvitation");
static_assert(offsetof(BackendSubsystem_DeclineGuildInvitation, PlayerId) == 0x000000, "Member 'BackendSubsystem_DeclineGuildInvitation::PlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_DeclineGuildInvitation, NoticeId) == 0x000010, "Member 'BackendSubsystem_DeclineGuildInvitation::NoticeId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_DeclineGuildInvitation, ReturnValue) == 0x000020, "Member 'BackendSubsystem_DeclineGuildInvitation::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.DeclineGuildInvitationImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_DeclineGuildInvitationImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_DeclineGuildInvitationImpl) == 0x000008, "Wrong alignment on BackendSubsystem_DeclineGuildInvitationImpl");
static_assert(sizeof(BackendSubsystem_DeclineGuildInvitationImpl) == 0x000018, "Wrong size on BackendSubsystem_DeclineGuildInvitationImpl");
static_assert(offsetof(BackendSubsystem_DeclineGuildInvitationImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_DeclineGuildInvitationImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_DeclineGuildInvitationImpl, Args) == 0x000008, "Member 'BackendSubsystem_DeclineGuildInvitationImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.DelayKickAllCpuPlayers
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_DelayKickAllCpuPlayers final
{
public:
	bool                                          Idle;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StateSetting;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_DelayKickAllCpuPlayers) == 0x000004, "Wrong alignment on BackendSubsystem_DelayKickAllCpuPlayers");
static_assert(sizeof(BackendSubsystem_DelayKickAllCpuPlayers) == 0x000008, "Wrong size on BackendSubsystem_DelayKickAllCpuPlayers");
static_assert(offsetof(BackendSubsystem_DelayKickAllCpuPlayers, Idle) == 0x000000, "Member 'BackendSubsystem_DelayKickAllCpuPlayers::Idle' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_DelayKickAllCpuPlayers, StateSetting) == 0x000004, "Member 'BackendSubsystem_DelayKickAllCpuPlayers::StateSetting' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.DeleteCustomizePreset
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_DeleteCustomizePreset final
{
public:
	int32                                         CharacterCode;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPresetType                                   PresetType;                                        // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotNo;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_DeleteCustomizePreset) == 0x000004, "Wrong alignment on BackendSubsystem_DeleteCustomizePreset");
static_assert(sizeof(BackendSubsystem_DeleteCustomizePreset) == 0x000010, "Wrong size on BackendSubsystem_DeleteCustomizePreset");
static_assert(offsetof(BackendSubsystem_DeleteCustomizePreset, CharacterCode) == 0x000000, "Member 'BackendSubsystem_DeleteCustomizePreset::CharacterCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_DeleteCustomizePreset, PresetType) == 0x000004, "Member 'BackendSubsystem_DeleteCustomizePreset::PresetType' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_DeleteCustomizePreset, SlotNo) == 0x000008, "Member 'BackendSubsystem_DeleteCustomizePreset::SlotNo' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_DeleteCustomizePreset, ReturnValue) == 0x00000C, "Member 'BackendSubsystem_DeleteCustomizePreset::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.DeleteFriendship
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_DeleteFriendship final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_DeleteFriendship) == 0x000008, "Wrong alignment on BackendSubsystem_DeleteFriendship");
static_assert(sizeof(BackendSubsystem_DeleteFriendship) == 0x000018, "Wrong size on BackendSubsystem_DeleteFriendship");
static_assert(offsetof(BackendSubsystem_DeleteFriendship, PlayerId) == 0x000000, "Member 'BackendSubsystem_DeleteFriendship::PlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_DeleteFriendship, ReturnValue) == 0x000010, "Member 'BackendSubsystem_DeleteFriendship::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.DeleteFriendshipImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_DeleteFriendshipImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_DeleteFriendshipImpl) == 0x000008, "Wrong alignment on BackendSubsystem_DeleteFriendshipImpl");
static_assert(sizeof(BackendSubsystem_DeleteFriendshipImpl) == 0x000018, "Wrong size on BackendSubsystem_DeleteFriendshipImpl");
static_assert(offsetof(BackendSubsystem_DeleteFriendshipImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_DeleteFriendshipImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_DeleteFriendshipImpl, Args) == 0x000008, "Member 'BackendSubsystem_DeleteFriendshipImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.DeleteNotice
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_DeleteNotice final
{
public:
	class FString                                 NoticeId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_DeleteNotice) == 0x000008, "Wrong alignment on BackendSubsystem_DeleteNotice");
static_assert(sizeof(BackendSubsystem_DeleteNotice) == 0x000018, "Wrong size on BackendSubsystem_DeleteNotice");
static_assert(offsetof(BackendSubsystem_DeleteNotice, NoticeId) == 0x000000, "Member 'BackendSubsystem_DeleteNotice::NoticeId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_DeleteNotice, ReturnValue) == 0x000010, "Member 'BackendSubsystem_DeleteNotice::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.DeleteOpenedNotice
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_DeleteOpenedNotice final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_DeleteOpenedNotice) == 0x000004, "Wrong alignment on BackendSubsystem_DeleteOpenedNotice");
static_assert(sizeof(BackendSubsystem_DeleteOpenedNotice) == 0x000004, "Wrong size on BackendSubsystem_DeleteOpenedNotice");
static_assert(offsetof(BackendSubsystem_DeleteOpenedNotice, ReturnValue) == 0x000000, "Member 'BackendSubsystem_DeleteOpenedNotice::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.DeliveryMyAd
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_DeliveryMyAd final
{
public:
	int32                                         AdNo;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_DeliveryMyAd) == 0x000004, "Wrong alignment on BackendSubsystem_DeliveryMyAd");
static_assert(sizeof(BackendSubsystem_DeliveryMyAd) == 0x000008, "Wrong size on BackendSubsystem_DeliveryMyAd");
static_assert(offsetof(BackendSubsystem_DeliveryMyAd, AdNo) == 0x000000, "Member 'BackendSubsystem_DeliveryMyAd::AdNo' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_DeliveryMyAd, ReturnValue) == 0x000004, "Member 'BackendSubsystem_DeliveryMyAd::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.DeliveryMyAdById
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_DeliveryMyAdById final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_DeliveryMyAdById) == 0x000008, "Wrong alignment on BackendSubsystem_DeliveryMyAdById");
static_assert(sizeof(BackendSubsystem_DeliveryMyAdById) == 0x000018, "Wrong size on BackendSubsystem_DeliveryMyAdById");
static_assert(offsetof(BackendSubsystem_DeliveryMyAdById, ID) == 0x000000, "Member 'BackendSubsystem_DeliveryMyAdById::ID' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_DeliveryMyAdById, ReturnValue) == 0x000010, "Member 'BackendSubsystem_DeliveryMyAdById::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.DeliveryMyAdImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_DeliveryMyAdImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_DeliveryMyAdImpl) == 0x000008, "Wrong alignment on BackendSubsystem_DeliveryMyAdImpl");
static_assert(sizeof(BackendSubsystem_DeliveryMyAdImpl) == 0x000018, "Wrong size on BackendSubsystem_DeliveryMyAdImpl");
static_assert(offsetof(BackendSubsystem_DeliveryMyAdImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_DeliveryMyAdImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_DeliveryMyAdImpl, Args) == 0x000008, "Member 'BackendSubsystem_DeliveryMyAdImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.DenyFriendship
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_DenyFriendship final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_DenyFriendship) == 0x000008, "Wrong alignment on BackendSubsystem_DenyFriendship");
static_assert(sizeof(BackendSubsystem_DenyFriendship) == 0x000018, "Wrong size on BackendSubsystem_DenyFriendship");
static_assert(offsetof(BackendSubsystem_DenyFriendship, PlayerId) == 0x000000, "Member 'BackendSubsystem_DenyFriendship::PlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_DenyFriendship, ReturnValue) == 0x000010, "Member 'BackendSubsystem_DenyFriendship::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.DenyFriendshipImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_DenyFriendshipImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_DenyFriendshipImpl) == 0x000008, "Wrong alignment on BackendSubsystem_DenyFriendshipImpl");
static_assert(sizeof(BackendSubsystem_DenyFriendshipImpl) == 0x000018, "Wrong size on BackendSubsystem_DenyFriendshipImpl");
static_assert(offsetof(BackendSubsystem_DenyFriendshipImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_DenyFriendshipImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_DenyFriendshipImpl, Args) == 0x000008, "Member 'BackendSubsystem_DenyFriendshipImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.DenyGuild
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_DenyGuild final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_DenyGuild) == 0x000008, "Wrong alignment on BackendSubsystem_DenyGuild");
static_assert(sizeof(BackendSubsystem_DenyGuild) == 0x000018, "Wrong size on BackendSubsystem_DenyGuild");
static_assert(offsetof(BackendSubsystem_DenyGuild, PlayerId) == 0x000000, "Member 'BackendSubsystem_DenyGuild::PlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_DenyGuild, ReturnValue) == 0x000010, "Member 'BackendSubsystem_DenyGuild::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.DenyGuildImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_DenyGuildImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_DenyGuildImpl) == 0x000008, "Wrong alignment on BackendSubsystem_DenyGuildImpl");
static_assert(sizeof(BackendSubsystem_DenyGuildImpl) == 0x000018, "Wrong size on BackendSubsystem_DenyGuildImpl");
static_assert(offsetof(BackendSubsystem_DenyGuildImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_DenyGuildImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_DenyGuildImpl, Args) == 0x000008, "Member 'BackendSubsystem_DenyGuildImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.DonateGuild
// 0x000C (0x000C - 0x0000)
struct BackendSubsystem_DonateGuild final
{
public:
	EGuildFacility                                ETargetFacility;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Amount;                                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_DonateGuild) == 0x000004, "Wrong alignment on BackendSubsystem_DonateGuild");
static_assert(sizeof(BackendSubsystem_DonateGuild) == 0x00000C, "Wrong size on BackendSubsystem_DonateGuild");
static_assert(offsetof(BackendSubsystem_DonateGuild, ETargetFacility) == 0x000000, "Member 'BackendSubsystem_DonateGuild::ETargetFacility' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_DonateGuild, Amount) == 0x000004, "Member 'BackendSubsystem_DonateGuild::Amount' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_DonateGuild, ReturnValue) == 0x000008, "Member 'BackendSubsystem_DonateGuild::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.DonateGuildImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_DonateGuildImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_DonateGuildImpl) == 0x000008, "Wrong alignment on BackendSubsystem_DonateGuildImpl");
static_assert(sizeof(BackendSubsystem_DonateGuildImpl) == 0x000018, "Wrong size on BackendSubsystem_DonateGuildImpl");
static_assert(offsetof(BackendSubsystem_DonateGuildImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_DonateGuildImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_DonateGuildImpl, Args) == 0x000008, "Member 'BackendSubsystem_DonateGuildImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.EnableVoiceChat
// 0x0002 (0x0002 - 0x0000)
struct BackendSubsystem_EnableVoiceChat final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_EnableVoiceChat) == 0x000001, "Wrong alignment on BackendSubsystem_EnableVoiceChat");
static_assert(sizeof(BackendSubsystem_EnableVoiceChat) == 0x000002, "Wrong size on BackendSubsystem_EnableVoiceChat");
static_assert(offsetof(BackendSubsystem_EnableVoiceChat, bEnable) == 0x000000, "Member 'BackendSubsystem_EnableVoiceChat::bEnable' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_EnableVoiceChat, ReturnValue) == 0x000001, "Member 'BackendSubsystem_EnableVoiceChat::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.EnableVoiceChatSTTCommand
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_EnableVoiceChatSTTCommand final
{
public:
	TArray<class FString>                         Args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_EnableVoiceChatSTTCommand) == 0x000008, "Wrong alignment on BackendSubsystem_EnableVoiceChatSTTCommand");
static_assert(sizeof(BackendSubsystem_EnableVoiceChatSTTCommand) == 0x000010, "Wrong size on BackendSubsystem_EnableVoiceChatSTTCommand");
static_assert(offsetof(BackendSubsystem_EnableVoiceChatSTTCommand, Args) == 0x000000, "Member 'BackendSubsystem_EnableVoiceChatSTTCommand::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.EnableWebApiCacheCommand
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_EnableWebApiCacheCommand final
{
public:
	TArray<class FString>                         Args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_EnableWebApiCacheCommand) == 0x000008, "Wrong alignment on BackendSubsystem_EnableWebApiCacheCommand");
static_assert(sizeof(BackendSubsystem_EnableWebApiCacheCommand) == 0x000010, "Wrong size on BackendSubsystem_EnableWebApiCacheCommand");
static_assert(offsetof(BackendSubsystem_EnableWebApiCacheCommand, Args) == 0x000000, "Member 'BackendSubsystem_EnableWebApiCacheCommand::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.ExchangeLotteryMileage
// 0x0020 (0x0020 - 0x0000)
struct BackendSubsystem_ExchangeLotteryMileage final
{
public:
	int32                                         LotteryCode;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ExchangeId;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_ExchangeLotteryMileage) == 0x000008, "Wrong alignment on BackendSubsystem_ExchangeLotteryMileage");
static_assert(sizeof(BackendSubsystem_ExchangeLotteryMileage) == 0x000020, "Wrong size on BackendSubsystem_ExchangeLotteryMileage");
static_assert(offsetof(BackendSubsystem_ExchangeLotteryMileage, LotteryCode) == 0x000000, "Member 'BackendSubsystem_ExchangeLotteryMileage::LotteryCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_ExchangeLotteryMileage, ExchangeId) == 0x000008, "Member 'BackendSubsystem_ExchangeLotteryMileage::ExchangeId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_ExchangeLotteryMileage, ReturnValue) == 0x000018, "Member 'BackendSubsystem_ExchangeLotteryMileage::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.ExchangeLotteryMileageImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_ExchangeLotteryMileageImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_ExchangeLotteryMileageImpl) == 0x000008, "Wrong alignment on BackendSubsystem_ExchangeLotteryMileageImpl");
static_assert(sizeof(BackendSubsystem_ExchangeLotteryMileageImpl) == 0x000018, "Wrong size on BackendSubsystem_ExchangeLotteryMileageImpl");
static_assert(offsetof(BackendSubsystem_ExchangeLotteryMileageImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_ExchangeLotteryMileageImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_ExchangeLotteryMileageImpl, Args) == 0x000008, "Member 'BackendSubsystem_ExchangeLotteryMileageImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.FinishCustomGame
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_FinishCustomGame final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_FinishCustomGame) == 0x000001, "Wrong alignment on BackendSubsystem_FinishCustomGame");
static_assert(sizeof(BackendSubsystem_FinishCustomGame) == 0x000001, "Wrong size on BackendSubsystem_FinishCustomGame");
static_assert(offsetof(BackendSubsystem_FinishCustomGame, ReturnValue) == 0x000000, "Member 'BackendSubsystem_FinishCustomGame::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.FireGuildMember
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_FireGuildMember final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_FireGuildMember) == 0x000008, "Wrong alignment on BackendSubsystem_FireGuildMember");
static_assert(sizeof(BackendSubsystem_FireGuildMember) == 0x000018, "Wrong size on BackendSubsystem_FireGuildMember");
static_assert(offsetof(BackendSubsystem_FireGuildMember, PlayerId) == 0x000000, "Member 'BackendSubsystem_FireGuildMember::PlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_FireGuildMember, ReturnValue) == 0x000010, "Member 'BackendSubsystem_FireGuildMember::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.FireGuildMemberImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_FireGuildMemberImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_FireGuildMemberImpl) == 0x000008, "Wrong alignment on BackendSubsystem_FireGuildMemberImpl");
static_assert(sizeof(BackendSubsystem_FireGuildMemberImpl) == 0x000018, "Wrong size on BackendSubsystem_FireGuildMemberImpl");
static_assert(offsetof(BackendSubsystem_FireGuildMemberImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_FireGuildMemberImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_FireGuildMemberImpl, Args) == 0x000008, "Member 'BackendSubsystem_FireGuildMemberImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.ForceFakePlatform
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_ForceFakePlatform final
{
public:
	class FString                                 Platform;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_ForceFakePlatform) == 0x000008, "Wrong alignment on BackendSubsystem_ForceFakePlatform");
static_assert(sizeof(BackendSubsystem_ForceFakePlatform) == 0x000010, "Wrong size on BackendSubsystem_ForceFakePlatform");
static_assert(offsetof(BackendSubsystem_ForceFakePlatform, Platform) == 0x000000, "Member 'BackendSubsystem_ForceFakePlatform::Platform' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetBattleEndTimeKpiPlayerBattleLog_DS
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetBattleEndTimeKpiPlayerBattleLog_DS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetBattleEndTimeKpiPlayerBattleLog_DS) == 0x000008, "Wrong alignment on BackendSubsystem_GetBattleEndTimeKpiPlayerBattleLog_DS");
static_assert(sizeof(BackendSubsystem_GetBattleEndTimeKpiPlayerBattleLog_DS) == 0x000010, "Wrong size on BackendSubsystem_GetBattleEndTimeKpiPlayerBattleLog_DS");
static_assert(offsetof(BackendSubsystem_GetBattleEndTimeKpiPlayerBattleLog_DS, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetBattleEndTimeKpiPlayerBattleLog_DS::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetBattleStartTimeKpiPlayerBattleLog_DS
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetBattleStartTimeKpiPlayerBattleLog_DS final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetBattleStartTimeKpiPlayerBattleLog_DS) == 0x000008, "Wrong alignment on BackendSubsystem_GetBattleStartTimeKpiPlayerBattleLog_DS");
static_assert(sizeof(BackendSubsystem_GetBattleStartTimeKpiPlayerBattleLog_DS) == 0x000010, "Wrong size on BackendSubsystem_GetBattleStartTimeKpiPlayerBattleLog_DS");
static_assert(offsetof(BackendSubsystem_GetBattleStartTimeKpiPlayerBattleLog_DS, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetBattleStartTimeKpiPlayerBattleLog_DS::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetBnidQrCodeTexture2DDynamic
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_GetBnidQrCodeTexture2DDynamic final
{
public:
	class UTexture2DDynamic*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetBnidQrCodeTexture2DDynamic) == 0x000008, "Wrong alignment on BackendSubsystem_GetBnidQrCodeTexture2DDynamic");
static_assert(sizeof(BackendSubsystem_GetBnidQrCodeTexture2DDynamic) == 0x000008, "Wrong size on BackendSubsystem_GetBnidQrCodeTexture2DDynamic");
static_assert(offsetof(BackendSubsystem_GetBnidQrCodeTexture2DDynamic, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetBnidQrCodeTexture2DDynamic::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetCustomLobbyServer
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_GetCustomLobbyServer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetCustomLobbyServer) == 0x000001, "Wrong alignment on BackendSubsystem_GetCustomLobbyServer");
static_assert(sizeof(BackendSubsystem_GetCustomLobbyServer) == 0x000001, "Wrong size on BackendSubsystem_GetCustomLobbyServer");
static_assert(offsetof(BackendSubsystem_GetCustomLobbyServer, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetCustomLobbyServer::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetCustomRoomData
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_GetCustomRoomData final
{
public:
	class FString                                 CustomRoomKey;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_GetCustomRoomData) == 0x000008, "Wrong alignment on BackendSubsystem_GetCustomRoomData");
static_assert(sizeof(BackendSubsystem_GetCustomRoomData) == 0x000018, "Wrong size on BackendSubsystem_GetCustomRoomData");
static_assert(offsetof(BackendSubsystem_GetCustomRoomData, CustomRoomKey) == 0x000000, "Member 'BackendSubsystem_GetCustomRoomData::CustomRoomKey' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_GetCustomRoomData, ReturnValue) == 0x000010, "Member 'BackendSubsystem_GetCustomRoomData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetDatabaseParams
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_GetDatabaseParams final
{
public:
	class UDatabaseParams*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetDatabaseParams) == 0x000008, "Wrong alignment on BackendSubsystem_GetDatabaseParams");
static_assert(sizeof(BackendSubsystem_GetDatabaseParams) == 0x000008, "Wrong size on BackendSubsystem_GetDatabaseParams");
static_assert(offsetof(BackendSubsystem_GetDatabaseParams, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetDatabaseParams::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetMasterDataStatusString
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetMasterDataStatusString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetMasterDataStatusString) == 0x000008, "Wrong alignment on BackendSubsystem_GetMasterDataStatusString");
static_assert(sizeof(BackendSubsystem_GetMasterDataStatusString) == 0x000010, "Wrong size on BackendSubsystem_GetMasterDataStatusString");
static_assert(offsetof(BackendSubsystem_GetMasterDataStatusString, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetMasterDataStatusString::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetPurchaseInfoId
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetPurchaseInfoId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetPurchaseInfoId) == 0x000008, "Wrong alignment on BackendSubsystem_GetPurchaseInfoId");
static_assert(sizeof(BackendSubsystem_GetPurchaseInfoId) == 0x000010, "Wrong size on BackendSubsystem_GetPurchaseInfoId");
static_assert(offsetof(BackendSubsystem_GetPurchaseInfoId, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetPurchaseInfoId::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetVoiceFontNameList
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetVoiceFontNameList final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetVoiceFontNameList) == 0x000008, "Wrong alignment on BackendSubsystem_GetVoiceFontNameList");
static_assert(sizeof(BackendSubsystem_GetVoiceFontNameList) == 0x000010, "Wrong size on BackendSubsystem_GetVoiceFontNameList");
static_assert(offsetof(BackendSubsystem_GetVoiceFontNameList, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetVoiceFontNameList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.InitializeBattle_DS
// 0x0020 (0x0020 - 0x0000)
struct BackendSubsystem_InitializeBattle_DS final
{
public:
	int32                                         PlayModeCode;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerHost;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerPort;                                        // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_InitializeBattle_DS) == 0x000008, "Wrong alignment on BackendSubsystem_InitializeBattle_DS");
static_assert(sizeof(BackendSubsystem_InitializeBattle_DS) == 0x000020, "Wrong size on BackendSubsystem_InitializeBattle_DS");
static_assert(offsetof(BackendSubsystem_InitializeBattle_DS, PlayModeCode) == 0x000000, "Member 'BackendSubsystem_InitializeBattle_DS::PlayModeCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_InitializeBattle_DS, ServerHost) == 0x000008, "Member 'BackendSubsystem_InitializeBattle_DS::ServerHost' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_InitializeBattle_DS, ServerPort) == 0x000018, "Member 'BackendSubsystem_InitializeBattle_DS::ServerPort' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.InviteGuild
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_InviteGuild final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_InviteGuild) == 0x000008, "Wrong alignment on BackendSubsystem_InviteGuild");
static_assert(sizeof(BackendSubsystem_InviteGuild) == 0x000018, "Wrong size on BackendSubsystem_InviteGuild");
static_assert(offsetof(BackendSubsystem_InviteGuild, PlayerId) == 0x000000, "Member 'BackendSubsystem_InviteGuild::PlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_InviteGuild, ReturnValue) == 0x000010, "Member 'BackendSubsystem_InviteGuild::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.InviteGuildImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_InviteGuildImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_InviteGuildImpl) == 0x000008, "Wrong alignment on BackendSubsystem_InviteGuildImpl");
static_assert(sizeof(BackendSubsystem_InviteGuildImpl) == 0x000018, "Wrong size on BackendSubsystem_InviteGuildImpl");
static_assert(offsetof(BackendSubsystem_InviteGuildImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_InviteGuildImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_InviteGuildImpl, Args) == 0x000008, "Member 'BackendSubsystem_InviteGuildImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.IsBootUp
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_IsBootUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_IsBootUp) == 0x000001, "Wrong alignment on BackendSubsystem_IsBootUp");
static_assert(sizeof(BackendSubsystem_IsBootUp) == 0x000001, "Wrong size on BackendSubsystem_IsBootUp");
static_assert(offsetof(BackendSubsystem_IsBootUp, ReturnValue) == 0x000000, "Member 'BackendSubsystem_IsBootUp::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.IsCountryInJapan
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_IsCountryInJapan final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_IsCountryInJapan) == 0x000001, "Wrong alignment on BackendSubsystem_IsCountryInJapan");
static_assert(sizeof(BackendSubsystem_IsCountryInJapan) == 0x000001, "Wrong size on BackendSubsystem_IsCountryInJapan");
static_assert(offsetof(BackendSubsystem_IsCountryInJapan, ReturnValue) == 0x000000, "Member 'BackendSubsystem_IsCountryInJapan::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.IsFullSquadMember
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_IsFullSquadMember final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_IsFullSquadMember) == 0x000001, "Wrong alignment on BackendSubsystem_IsFullSquadMember");
static_assert(sizeof(BackendSubsystem_IsFullSquadMember) == 0x000001, "Wrong size on BackendSubsystem_IsFullSquadMember");
static_assert(offsetof(BackendSubsystem_IsFullSquadMember, ReturnValue) == 0x000000, "Member 'BackendSubsystem_IsFullSquadMember::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.IsLanguageJapanese
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_IsLanguageJapanese final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_IsLanguageJapanese) == 0x000001, "Wrong alignment on BackendSubsystem_IsLanguageJapanese");
static_assert(sizeof(BackendSubsystem_IsLanguageJapanese) == 0x000001, "Wrong size on BackendSubsystem_IsLanguageJapanese");
static_assert(offsetof(BackendSubsystem_IsLanguageJapanese, ReturnValue) == 0x000000, "Member 'BackendSubsystem_IsLanguageJapanese::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.IsNetworkAvailableCheck
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_IsNetworkAvailableCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_IsNetworkAvailableCheck) == 0x000001, "Wrong alignment on BackendSubsystem_IsNetworkAvailableCheck");
static_assert(sizeof(BackendSubsystem_IsNetworkAvailableCheck) == 0x000001, "Wrong size on BackendSubsystem_IsNetworkAvailableCheck");
static_assert(offsetof(BackendSubsystem_IsNetworkAvailableCheck, ReturnValue) == 0x000000, "Member 'BackendSubsystem_IsNetworkAvailableCheck::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.IsPause
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_IsPause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_IsPause) == 0x000001, "Wrong alignment on BackendSubsystem_IsPause");
static_assert(sizeof(BackendSubsystem_IsPause) == 0x000001, "Wrong size on BackendSubsystem_IsPause");
static_assert(offsetof(BackendSubsystem_IsPause, ReturnValue) == 0x000000, "Member 'BackendSubsystem_IsPause::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.IsPlayerMute
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_IsPlayerMute final
{
public:
	class FString                                 PlatformPlayerId;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_IsPlayerMute) == 0x000008, "Wrong alignment on BackendSubsystem_IsPlayerMute");
static_assert(sizeof(BackendSubsystem_IsPlayerMute) == 0x000018, "Wrong size on BackendSubsystem_IsPlayerMute");
static_assert(offsetof(BackendSubsystem_IsPlayerMute, PlatformPlayerId) == 0x000000, "Member 'BackendSubsystem_IsPlayerMute::PlatformPlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_IsPlayerMute, ReturnValue) == 0x000010, "Member 'BackendSubsystem_IsPlayerMute::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.IsReadyForLogin
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_IsReadyForLogin final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_IsReadyForLogin) == 0x000001, "Wrong alignment on BackendSubsystem_IsReadyForLogin");
static_assert(sizeof(BackendSubsystem_IsReadyForLogin) == 0x000001, "Wrong size on BackendSubsystem_IsReadyForLogin");
static_assert(offsetof(BackendSubsystem_IsReadyForLogin, ReturnValue) == 0x000000, "Member 'BackendSubsystem_IsReadyForLogin::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.IsRightCharacter
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_IsRightCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_IsRightCharacter) == 0x000001, "Wrong alignment on BackendSubsystem_IsRightCharacter");
static_assert(sizeof(BackendSubsystem_IsRightCharacter) == 0x000001, "Wrong size on BackendSubsystem_IsRightCharacter");
static_assert(offsetof(BackendSubsystem_IsRightCharacter, ReturnValue) == 0x000000, "Member 'BackendSubsystem_IsRightCharacter::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.JoinCustomMatchRoomKey
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_JoinCustomMatchRoomKey final
{
public:
	class FString                                 CustomRoomKey;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_JoinCustomMatchRoomKey) == 0x000008, "Wrong alignment on BackendSubsystem_JoinCustomMatchRoomKey");
static_assert(sizeof(BackendSubsystem_JoinCustomMatchRoomKey) == 0x000018, "Wrong size on BackendSubsystem_JoinCustomMatchRoomKey");
static_assert(offsetof(BackendSubsystem_JoinCustomMatchRoomKey, CustomRoomKey) == 0x000000, "Member 'BackendSubsystem_JoinCustomMatchRoomKey::CustomRoomKey' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_JoinCustomMatchRoomKey, ReturnValue) == 0x000010, "Member 'BackendSubsystem_JoinCustomMatchRoomKey::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.JoinSquad
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_JoinSquad final
{
public:
	class FString                                 SquadPassword;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_JoinSquad) == 0x000008, "Wrong alignment on BackendSubsystem_JoinSquad");
static_assert(sizeof(BackendSubsystem_JoinSquad) == 0x000018, "Wrong size on BackendSubsystem_JoinSquad");
static_assert(offsetof(BackendSubsystem_JoinSquad, SquadPassword) == 0x000000, "Member 'BackendSubsystem_JoinSquad::SquadPassword' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_JoinSquad, ReturnValue) == 0x000010, "Member 'BackendSubsystem_JoinSquad::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.JoinSquadByInvitation
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_JoinSquadByInvitation final
{
public:
	class FString                                 InvitationId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_JoinSquadByInvitation) == 0x000008, "Wrong alignment on BackendSubsystem_JoinSquadByInvitation");
static_assert(sizeof(BackendSubsystem_JoinSquadByInvitation) == 0x000018, "Wrong size on BackendSubsystem_JoinSquadByInvitation");
static_assert(offsetof(BackendSubsystem_JoinSquadByInvitation, InvitationId) == 0x000000, "Member 'BackendSubsystem_JoinSquadByInvitation::InvitationId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_JoinSquadByInvitation, ReturnValue) == 0x000010, "Member 'BackendSubsystem_JoinSquadByInvitation::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.KickAllCpuPlayers
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_KickAllCpuPlayers final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_KickAllCpuPlayers) == 0x000001, "Wrong alignment on BackendSubsystem_KickAllCpuPlayers");
static_assert(sizeof(BackendSubsystem_KickAllCpuPlayers) == 0x000001, "Wrong size on BackendSubsystem_KickAllCpuPlayers");
static_assert(offsetof(BackendSubsystem_KickAllCpuPlayers, ReturnValue) == 0x000000, "Member 'BackendSubsystem_KickAllCpuPlayers::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.KickCustomRoom
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_KickCustomRoom final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_KickCustomRoom) == 0x000008, "Wrong alignment on BackendSubsystem_KickCustomRoom");
static_assert(sizeof(BackendSubsystem_KickCustomRoom) == 0x000018, "Wrong size on BackendSubsystem_KickCustomRoom");
static_assert(offsetof(BackendSubsystem_KickCustomRoom, PlayerId) == 0x000000, "Member 'BackendSubsystem_KickCustomRoom::PlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_KickCustomRoom, ReturnValue) == 0x000010, "Member 'BackendSubsystem_KickCustomRoom::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.KickSquadMember
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_KickSquadMember final
{
public:
	class FString                                 KickTargetPlayerId;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_KickSquadMember) == 0x000008, "Wrong alignment on BackendSubsystem_KickSquadMember");
static_assert(sizeof(BackendSubsystem_KickSquadMember) == 0x000018, "Wrong size on BackendSubsystem_KickSquadMember");
static_assert(offsetof(BackendSubsystem_KickSquadMember, KickTargetPlayerId) == 0x000000, "Member 'BackendSubsystem_KickSquadMember::KickTargetPlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_KickSquadMember, ReturnValue) == 0x000010, "Member 'BackendSubsystem_KickSquadMember::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LeaveCustomMatch
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_LeaveCustomMatch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LeaveCustomMatch) == 0x000001, "Wrong alignment on BackendSubsystem_LeaveCustomMatch");
static_assert(sizeof(BackendSubsystem_LeaveCustomMatch) == 0x000001, "Wrong size on BackendSubsystem_LeaveCustomMatch");
static_assert(offsetof(BackendSubsystem_LeaveCustomMatch, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LeaveCustomMatch::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LeaveGuild
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_LeaveGuild final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LeaveGuild) == 0x000004, "Wrong alignment on BackendSubsystem_LeaveGuild");
static_assert(sizeof(BackendSubsystem_LeaveGuild) == 0x000004, "Wrong size on BackendSubsystem_LeaveGuild");
static_assert(offsetof(BackendSubsystem_LeaveGuild, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LeaveGuild::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LeaveGuildImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LeaveGuildImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LeaveGuildImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LeaveGuildImpl");
static_assert(sizeof(BackendSubsystem_LeaveGuildImpl) == 0x000018, "Wrong size on BackendSubsystem_LeaveGuildImpl");
static_assert(offsetof(BackendSubsystem_LeaveGuildImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LeaveGuildImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LeaveGuildImpl, Args) == 0x000008, "Member 'BackendSubsystem_LeaveGuildImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LeaveSquad
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_LeaveSquad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LeaveSquad) == 0x000001, "Wrong alignment on BackendSubsystem_LeaveSquad");
static_assert(sizeof(BackendSubsystem_LeaveSquad) == 0x000001, "Wrong size on BackendSubsystem_LeaveSquad");
static_assert(offsetof(BackendSubsystem_LeaveSquad, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LeaveSquad::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadAppliedFriend
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_LoadAppliedFriend final
{
public:
	int32                                         Limit;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageNo;                                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFriendListSortOrder                          Sort;                                              // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadAppliedFriend) == 0x000004, "Wrong alignment on BackendSubsystem_LoadAppliedFriend");
static_assert(sizeof(BackendSubsystem_LoadAppliedFriend) == 0x000010, "Wrong size on BackendSubsystem_LoadAppliedFriend");
static_assert(offsetof(BackendSubsystem_LoadAppliedFriend, Limit) == 0x000000, "Member 'BackendSubsystem_LoadAppliedFriend::Limit' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadAppliedFriend, PageNo) == 0x000004, "Member 'BackendSubsystem_LoadAppliedFriend::PageNo' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadAppliedFriend, Sort) == 0x000008, "Member 'BackendSubsystem_LoadAppliedFriend::Sort' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadAppliedFriend, ReturnValue) == 0x00000C, "Member 'BackendSubsystem_LoadAppliedFriend::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadApplyingFriend
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_LoadApplyingFriend final
{
public:
	int32                                         Limit;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageNo;                                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFriendListSortOrder                          Sort;                                              // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadApplyingFriend) == 0x000004, "Wrong alignment on BackendSubsystem_LoadApplyingFriend");
static_assert(sizeof(BackendSubsystem_LoadApplyingFriend) == 0x000010, "Wrong size on BackendSubsystem_LoadApplyingFriend");
static_assert(offsetof(BackendSubsystem_LoadApplyingFriend, Limit) == 0x000000, "Member 'BackendSubsystem_LoadApplyingFriend::Limit' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadApplyingFriend, PageNo) == 0x000004, "Member 'BackendSubsystem_LoadApplyingFriend::PageNo' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadApplyingFriend, Sort) == 0x000008, "Member 'BackendSubsystem_LoadApplyingFriend::Sort' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadApplyingFriend, ReturnValue) == 0x00000C, "Member 'BackendSubsystem_LoadApplyingFriend::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadAvatarList
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadAvatarList final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_LoadAvatarList) == 0x000008, "Wrong alignment on BackendSubsystem_LoadAvatarList");
static_assert(sizeof(BackendSubsystem_LoadAvatarList) == 0x000018, "Wrong size on BackendSubsystem_LoadAvatarList");
static_assert(offsetof(BackendSubsystem_LoadAvatarList, PlayerId) == 0x000000, "Member 'BackendSubsystem_LoadAvatarList::PlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadAvatarList, ReturnValue) == 0x000010, "Member 'BackendSubsystem_LoadAvatarList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadAvatarListImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadAvatarListImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadAvatarListImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadAvatarListImpl");
static_assert(sizeof(BackendSubsystem_LoadAvatarListImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadAvatarListImpl");
static_assert(offsetof(BackendSubsystem_LoadAvatarListImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadAvatarListImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadAvatarListImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadAvatarListImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadBattleRecord
// 0x0020 (0x0020 - 0x0000)
struct BackendSubsystem_LoadBattleRecord final
{
public:
	int32                                         PageNo;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerId;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_LoadBattleRecord) == 0x000008, "Wrong alignment on BackendSubsystem_LoadBattleRecord");
static_assert(sizeof(BackendSubsystem_LoadBattleRecord) == 0x000020, "Wrong size on BackendSubsystem_LoadBattleRecord");
static_assert(offsetof(BackendSubsystem_LoadBattleRecord, PageNo) == 0x000000, "Member 'BackendSubsystem_LoadBattleRecord::PageNo' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadBattleRecord, PlayerId) == 0x000008, "Member 'BackendSubsystem_LoadBattleRecord::PlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadBattleRecord, ReturnValue) == 0x000018, "Member 'BackendSubsystem_LoadBattleRecord::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadBattleRecordImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadBattleRecordImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadBattleRecordImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadBattleRecordImpl");
static_assert(sizeof(BackendSubsystem_LoadBattleRecordImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadBattleRecordImpl");
static_assert(offsetof(BackendSubsystem_LoadBattleRecordImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadBattleRecordImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadBattleRecordImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadBattleRecordImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadBillboardChart
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_LoadBillboardChart final
{
public:
	int32                                         PageNo;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadBillboardChart) == 0x000004, "Wrong alignment on BackendSubsystem_LoadBillboardChart");
static_assert(sizeof(BackendSubsystem_LoadBillboardChart) == 0x000008, "Wrong size on BackendSubsystem_LoadBillboardChart");
static_assert(offsetof(BackendSubsystem_LoadBillboardChart, PageNo) == 0x000000, "Member 'BackendSubsystem_LoadBillboardChart::PageNo' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadBillboardChart, ReturnValue) == 0x000004, "Member 'BackendSubsystem_LoadBillboardChart::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadBillboardChartImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadBillboardChartImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadBillboardChartImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadBillboardChartImpl");
static_assert(sizeof(BackendSubsystem_LoadBillboardChartImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadBillboardChartImpl");
static_assert(offsetof(BackendSubsystem_LoadBillboardChartImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadBillboardChartImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadBillboardChartImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadBillboardChartImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadBnidQrCodeImage
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_LoadBnidQrCodeImage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadBnidQrCodeImage) == 0x000004, "Wrong alignment on BackendSubsystem_LoadBnidQrCodeImage");
static_assert(sizeof(BackendSubsystem_LoadBnidQrCodeImage) == 0x000004, "Wrong size on BackendSubsystem_LoadBnidQrCodeImage");
static_assert(offsetof(BackendSubsystem_LoadBnidQrCodeImage, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LoadBnidQrCodeImage::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadBnidQrCodeImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadBnidQrCodeImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadBnidQrCodeImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadBnidQrCodeImpl");
static_assert(sizeof(BackendSubsystem_LoadBnidQrCodeImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadBnidQrCodeImpl");
static_assert(offsetof(BackendSubsystem_LoadBnidQrCodeImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadBnidQrCodeImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadBnidQrCodeImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadBnidQrCodeImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadBnidQrCodeUrl
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_LoadBnidQrCodeUrl final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadBnidQrCodeUrl) == 0x000004, "Wrong alignment on BackendSubsystem_LoadBnidQrCodeUrl");
static_assert(sizeof(BackendSubsystem_LoadBnidQrCodeUrl) == 0x000004, "Wrong size on BackendSubsystem_LoadBnidQrCodeUrl");
static_assert(offsetof(BackendSubsystem_LoadBnidQrCodeUrl, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LoadBnidQrCodeUrl::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadCharacterSelect
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_LoadCharacterSelect final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadCharacterSelect) == 0x000004, "Wrong alignment on BackendSubsystem_LoadCharacterSelect");
static_assert(sizeof(BackendSubsystem_LoadCharacterSelect) == 0x000004, "Wrong size on BackendSubsystem_LoadCharacterSelect");
static_assert(offsetof(BackendSubsystem_LoadCharacterSelect, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LoadCharacterSelect::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadCharacterSelectImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadCharacterSelectImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadCharacterSelectImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadCharacterSelectImpl");
static_assert(sizeof(BackendSubsystem_LoadCharacterSelectImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadCharacterSelectImpl");
static_assert(offsetof(BackendSubsystem_LoadCharacterSelectImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadCharacterSelectImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadCharacterSelectImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadCharacterSelectImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadChatLog
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_LoadChatLog final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadChatLog) == 0x000004, "Wrong alignment on BackendSubsystem_LoadChatLog");
static_assert(sizeof(BackendSubsystem_LoadChatLog) == 0x000004, "Wrong size on BackendSubsystem_LoadChatLog");
static_assert(offsetof(BackendSubsystem_LoadChatLog, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LoadChatLog::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadChatLogImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadChatLogImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadChatLogImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadChatLogImpl");
static_assert(sizeof(BackendSubsystem_LoadChatLogImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadChatLogImpl");
static_assert(offsetof(BackendSubsystem_LoadChatLogImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadChatLogImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadChatLogImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadChatLogImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadCosmosIdByPlatformIds
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadCosmosIdByPlatformIds final
{
public:
	TArray<class FString>                         PlatformPlayerIds;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_LoadCosmosIdByPlatformIds) == 0x000008, "Wrong alignment on BackendSubsystem_LoadCosmosIdByPlatformIds");
static_assert(sizeof(BackendSubsystem_LoadCosmosIdByPlatformIds) == 0x000018, "Wrong size on BackendSubsystem_LoadCosmosIdByPlatformIds");
static_assert(offsetof(BackendSubsystem_LoadCosmosIdByPlatformIds, PlatformPlayerIds) == 0x000000, "Member 'BackendSubsystem_LoadCosmosIdByPlatformIds::PlatformPlayerIds' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadCosmosIdByPlatformIds, ReturnValue) == 0x000010, "Member 'BackendSubsystem_LoadCosmosIdByPlatformIds::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadCosmosIdByPlatformIdsImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadCosmosIdByPlatformIdsImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadCosmosIdByPlatformIdsImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadCosmosIdByPlatformIdsImpl");
static_assert(sizeof(BackendSubsystem_LoadCosmosIdByPlatformIdsImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadCosmosIdByPlatformIdsImpl");
static_assert(offsetof(BackendSubsystem_LoadCosmosIdByPlatformIdsImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadCosmosIdByPlatformIdsImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadCosmosIdByPlatformIdsImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadCosmosIdByPlatformIdsImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadCountry
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_LoadCountry final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadCountry) == 0x000004, "Wrong alignment on BackendSubsystem_LoadCountry");
static_assert(sizeof(BackendSubsystem_LoadCountry) == 0x000004, "Wrong size on BackendSubsystem_LoadCountry");
static_assert(offsetof(BackendSubsystem_LoadCountry, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LoadCountry::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadCountryImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadCountryImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadCountryImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadCountryImpl");
static_assert(sizeof(BackendSubsystem_LoadCountryImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadCountryImpl");
static_assert(offsetof(BackendSubsystem_LoadCountryImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadCountryImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadCountryImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadCountryImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadCustomizeAppeal
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_LoadCustomizeAppeal final
{
public:
	int32                                         CharacterCode;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadCustomizeAppeal) == 0x000004, "Wrong alignment on BackendSubsystem_LoadCustomizeAppeal");
static_assert(sizeof(BackendSubsystem_LoadCustomizeAppeal) == 0x000008, "Wrong size on BackendSubsystem_LoadCustomizeAppeal");
static_assert(offsetof(BackendSubsystem_LoadCustomizeAppeal, CharacterCode) == 0x000000, "Member 'BackendSubsystem_LoadCustomizeAppeal::CharacterCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadCustomizeAppeal, ReturnValue) == 0x000004, "Member 'BackendSubsystem_LoadCustomizeAppeal::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadCustomizeAppealImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadCustomizeAppealImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadCustomizeAppealImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadCustomizeAppealImpl");
static_assert(sizeof(BackendSubsystem_LoadCustomizeAppealImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadCustomizeAppealImpl");
static_assert(offsetof(BackendSubsystem_LoadCustomizeAppealImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadCustomizeAppealImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadCustomizeAppealImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadCustomizeAppealImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadCustomizeCostume
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_LoadCustomizeCostume final
{
public:
	int32                                         CharacterCode;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadCustomizeCostume) == 0x000004, "Wrong alignment on BackendSubsystem_LoadCustomizeCostume");
static_assert(sizeof(BackendSubsystem_LoadCustomizeCostume) == 0x000008, "Wrong size on BackendSubsystem_LoadCustomizeCostume");
static_assert(offsetof(BackendSubsystem_LoadCustomizeCostume, CharacterCode) == 0x000000, "Member 'BackendSubsystem_LoadCustomizeCostume::CharacterCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadCustomizeCostume, ReturnValue) == 0x000004, "Member 'BackendSubsystem_LoadCustomizeCostume::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadCustomizeCostumeImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadCustomizeCostumeImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadCustomizeCostumeImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadCustomizeCostumeImpl");
static_assert(sizeof(BackendSubsystem_LoadCustomizeCostumeImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadCustomizeCostumeImpl");
static_assert(offsetof(BackendSubsystem_LoadCustomizeCostumeImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadCustomizeCostumeImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadCustomizeCostumeImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadCustomizeCostumeImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadCustomizeEmblem
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_LoadCustomizeEmblem final
{
public:
	int32                                         CharacterCode;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadCustomizeEmblem) == 0x000004, "Wrong alignment on BackendSubsystem_LoadCustomizeEmblem");
static_assert(sizeof(BackendSubsystem_LoadCustomizeEmblem) == 0x000008, "Wrong size on BackendSubsystem_LoadCustomizeEmblem");
static_assert(offsetof(BackendSubsystem_LoadCustomizeEmblem, CharacterCode) == 0x000000, "Member 'BackendSubsystem_LoadCustomizeEmblem::CharacterCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadCustomizeEmblem, ReturnValue) == 0x000004, "Member 'BackendSubsystem_LoadCustomizeEmblem::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadCustomizeEmblemImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadCustomizeEmblemImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadCustomizeEmblemImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadCustomizeEmblemImpl");
static_assert(sizeof(BackendSubsystem_LoadCustomizeEmblemImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadCustomizeEmblemImpl");
static_assert(offsetof(BackendSubsystem_LoadCustomizeEmblemImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadCustomizeEmblemImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadCustomizeEmblemImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadCustomizeEmblemImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadCustomizePreset
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_LoadCustomizePreset final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadCustomizePreset) == 0x000004, "Wrong alignment on BackendSubsystem_LoadCustomizePreset");
static_assert(sizeof(BackendSubsystem_LoadCustomizePreset) == 0x000004, "Wrong size on BackendSubsystem_LoadCustomizePreset");
static_assert(offsetof(BackendSubsystem_LoadCustomizePreset, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LoadCustomizePreset::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadCustomizePresetImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadCustomizePresetImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadCustomizePresetImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadCustomizePresetImpl");
static_assert(sizeof(BackendSubsystem_LoadCustomizePresetImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadCustomizePresetImpl");
static_assert(offsetof(BackendSubsystem_LoadCustomizePresetImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadCustomizePresetImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadCustomizePresetImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadCustomizePresetImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadCustomizeVariation
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_LoadCustomizeVariation final
{
public:
	int32                                         CharacterCode;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadCustomizeVariation) == 0x000004, "Wrong alignment on BackendSubsystem_LoadCustomizeVariation");
static_assert(sizeof(BackendSubsystem_LoadCustomizeVariation) == 0x000008, "Wrong size on BackendSubsystem_LoadCustomizeVariation");
static_assert(offsetof(BackendSubsystem_LoadCustomizeVariation, CharacterCode) == 0x000000, "Member 'BackendSubsystem_LoadCustomizeVariation::CharacterCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadCustomizeVariation, ReturnValue) == 0x000004, "Member 'BackendSubsystem_LoadCustomizeVariation::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadCustomizeVariationImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadCustomizeVariationImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadCustomizeVariationImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadCustomizeVariationImpl");
static_assert(sizeof(BackendSubsystem_LoadCustomizeVariationImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadCustomizeVariationImpl");
static_assert(offsetof(BackendSubsystem_LoadCustomizeVariationImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadCustomizeVariationImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadCustomizeVariationImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadCustomizeVariationImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadCustomizeVoice
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_LoadCustomizeVoice final
{
public:
	int32                                         CharacterCode;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadCustomizeVoice) == 0x000004, "Wrong alignment on BackendSubsystem_LoadCustomizeVoice");
static_assert(sizeof(BackendSubsystem_LoadCustomizeVoice) == 0x000008, "Wrong size on BackendSubsystem_LoadCustomizeVoice");
static_assert(offsetof(BackendSubsystem_LoadCustomizeVoice, CharacterCode) == 0x000000, "Member 'BackendSubsystem_LoadCustomizeVoice::CharacterCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadCustomizeVoice, ReturnValue) == 0x000004, "Member 'BackendSubsystem_LoadCustomizeVoice::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadCustomizeVoiceImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadCustomizeVoiceImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadCustomizeVoiceImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadCustomizeVoiceImpl");
static_assert(sizeof(BackendSubsystem_LoadCustomizeVoiceImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadCustomizeVoiceImpl");
static_assert(offsetof(BackendSubsystem_LoadCustomizeVoiceImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadCustomizeVoiceImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadCustomizeVoiceImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadCustomizeVoiceImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadCustomMatchProfileList
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadCustomMatchProfileList final
{
public:
	TArray<class FString>                         PlayerIdList;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_LoadCustomMatchProfileList) == 0x000008, "Wrong alignment on BackendSubsystem_LoadCustomMatchProfileList");
static_assert(sizeof(BackendSubsystem_LoadCustomMatchProfileList) == 0x000018, "Wrong size on BackendSubsystem_LoadCustomMatchProfileList");
static_assert(offsetof(BackendSubsystem_LoadCustomMatchProfileList, PlayerIdList) == 0x000000, "Member 'BackendSubsystem_LoadCustomMatchProfileList::PlayerIdList' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadCustomMatchProfileList, ReturnValue) == 0x000010, "Member 'BackendSubsystem_LoadCustomMatchProfileList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadCustomMatchProfileListImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadCustomMatchProfileListImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadCustomMatchProfileListImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadCustomMatchProfileListImpl");
static_assert(sizeof(BackendSubsystem_LoadCustomMatchProfileListImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadCustomMatchProfileListImpl");
static_assert(offsetof(BackendSubsystem_LoadCustomMatchProfileListImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadCustomMatchProfileListImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadCustomMatchProfileListImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadCustomMatchProfileListImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadCustomMatchResult
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadCustomMatchResult final
{
public:
	class FString                                 CustomRoomId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_LoadCustomMatchResult) == 0x000008, "Wrong alignment on BackendSubsystem_LoadCustomMatchResult");
static_assert(sizeof(BackendSubsystem_LoadCustomMatchResult) == 0x000018, "Wrong size on BackendSubsystem_LoadCustomMatchResult");
static_assert(offsetof(BackendSubsystem_LoadCustomMatchResult, CustomRoomId) == 0x000000, "Member 'BackendSubsystem_LoadCustomMatchResult::CustomRoomId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadCustomMatchResult, ReturnValue) == 0x000010, "Member 'BackendSubsystem_LoadCustomMatchResult::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadCustomMatchResultImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadCustomMatchResultImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadCustomMatchResultImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadCustomMatchResultImpl");
static_assert(sizeof(BackendSubsystem_LoadCustomMatchResultImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadCustomMatchResultImpl");
static_assert(offsetof(BackendSubsystem_LoadCustomMatchResultImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadCustomMatchResultImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadCustomMatchResultImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadCustomMatchResultImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadCustomMatchRoomInfoImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadCustomMatchRoomInfoImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadCustomMatchRoomInfoImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadCustomMatchRoomInfoImpl");
static_assert(sizeof(BackendSubsystem_LoadCustomMatchRoomInfoImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadCustomMatchRoomInfoImpl");
static_assert(offsetof(BackendSubsystem_LoadCustomMatchRoomInfoImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadCustomMatchRoomInfoImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadCustomMatchRoomInfoImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadCustomMatchRoomInfoImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadEvent
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_LoadEvent final
{
public:
	int32                                         EventCode;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadEvent) == 0x000004, "Wrong alignment on BackendSubsystem_LoadEvent");
static_assert(sizeof(BackendSubsystem_LoadEvent) == 0x000008, "Wrong size on BackendSubsystem_LoadEvent");
static_assert(offsetof(BackendSubsystem_LoadEvent, EventCode) == 0x000000, "Member 'BackendSubsystem_LoadEvent::EventCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadEvent, ReturnValue) == 0x000004, "Member 'BackendSubsystem_LoadEvent::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadEventImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadEventImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadEventImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadEventImpl");
static_assert(sizeof(BackendSubsystem_LoadEventImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadEventImpl");
static_assert(offsetof(BackendSubsystem_LoadEventImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadEventImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadEventImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadEventImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadFriend
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_LoadFriend final
{
public:
	int32                                         Limit;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageNo;                                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFriendListSortOrder                          Sort;                                              // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeGuildMember;                               // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadFriend) == 0x000004, "Wrong alignment on BackendSubsystem_LoadFriend");
static_assert(sizeof(BackendSubsystem_LoadFriend) == 0x000010, "Wrong size on BackendSubsystem_LoadFriend");
static_assert(offsetof(BackendSubsystem_LoadFriend, Limit) == 0x000000, "Member 'BackendSubsystem_LoadFriend::Limit' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadFriend, PageNo) == 0x000004, "Member 'BackendSubsystem_LoadFriend::PageNo' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadFriend, Sort) == 0x000008, "Member 'BackendSubsystem_LoadFriend::Sort' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadFriend, bExcludeGuildMember) == 0x000009, "Member 'BackendSubsystem_LoadFriend::bExcludeGuildMember' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadFriend, ReturnValue) == 0x00000C, "Member 'BackendSubsystem_LoadFriend::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadFriendImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadFriendImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadFriendImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadFriendImpl");
static_assert(sizeof(BackendSubsystem_LoadFriendImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadFriendImpl");
static_assert(offsetof(BackendSubsystem_LoadFriendImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadFriendImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadFriendImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadFriendImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadFundSettlementText
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_LoadFundSettlementText final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadFundSettlementText) == 0x000004, "Wrong alignment on BackendSubsystem_LoadFundSettlementText");
static_assert(sizeof(BackendSubsystem_LoadFundSettlementText) == 0x000004, "Wrong size on BackendSubsystem_LoadFundSettlementText");
static_assert(offsetof(BackendSubsystem_LoadFundSettlementText, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LoadFundSettlementText::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadFundSettlementTextImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadFundSettlementTextImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadFundSettlementTextImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadFundSettlementTextImpl");
static_assert(sizeof(BackendSubsystem_LoadFundSettlementTextImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadFundSettlementTextImpl");
static_assert(offsetof(BackendSubsystem_LoadFundSettlementTextImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadFundSettlementTextImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadFundSettlementTextImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadFundSettlementTextImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadGallery
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_LoadGallery final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadGallery) == 0x000004, "Wrong alignment on BackendSubsystem_LoadGallery");
static_assert(sizeof(BackendSubsystem_LoadGallery) == 0x000004, "Wrong size on BackendSubsystem_LoadGallery");
static_assert(offsetof(BackendSubsystem_LoadGallery, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LoadGallery::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadGalleryImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadGalleryImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadGalleryImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadGalleryImpl");
static_assert(sizeof(BackendSubsystem_LoadGalleryImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadGalleryImpl");
static_assert(offsetof(BackendSubsystem_LoadGalleryImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadGalleryImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadGalleryImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadGalleryImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadGuildInfo
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadGuildInfo final
{
public:
	class FString                                 GuildId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_LoadGuildInfo) == 0x000008, "Wrong alignment on BackendSubsystem_LoadGuildInfo");
static_assert(sizeof(BackendSubsystem_LoadGuildInfo) == 0x000018, "Wrong size on BackendSubsystem_LoadGuildInfo");
static_assert(offsetof(BackendSubsystem_LoadGuildInfo, GuildId) == 0x000000, "Member 'BackendSubsystem_LoadGuildInfo::GuildId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadGuildInfo, ReturnValue) == 0x000010, "Member 'BackendSubsystem_LoadGuildInfo::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadGuildInfoImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadGuildInfoImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadGuildInfoImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadGuildInfoImpl");
static_assert(sizeof(BackendSubsystem_LoadGuildInfoImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadGuildInfoImpl");
static_assert(offsetof(BackendSubsystem_LoadGuildInfoImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadGuildInfoImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadGuildInfoImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadGuildInfoImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadGuildMemberList
// 0x000C (0x000C - 0x0000)
struct BackendSubsystem_LoadGuildMemberList final
{
public:
	int32                                         PageNo;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuildMemberSort                              ESort;                                             // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadGuildMemberList) == 0x000004, "Wrong alignment on BackendSubsystem_LoadGuildMemberList");
static_assert(sizeof(BackendSubsystem_LoadGuildMemberList) == 0x00000C, "Wrong size on BackendSubsystem_LoadGuildMemberList");
static_assert(offsetof(BackendSubsystem_LoadGuildMemberList, PageNo) == 0x000000, "Member 'BackendSubsystem_LoadGuildMemberList::PageNo' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadGuildMemberList, ESort) == 0x000004, "Member 'BackendSubsystem_LoadGuildMemberList::ESort' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadGuildMemberList, ReturnValue) == 0x000008, "Member 'BackendSubsystem_LoadGuildMemberList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadGuildMemberListImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadGuildMemberListImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadGuildMemberListImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadGuildMemberListImpl");
static_assert(sizeof(BackendSubsystem_LoadGuildMemberListImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadGuildMemberListImpl");
static_assert(offsetof(BackendSubsystem_LoadGuildMemberListImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadGuildMemberListImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadGuildMemberListImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadGuildMemberListImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadGuildMemberNoFriend
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_LoadGuildMemberNoFriend final
{
public:
	int32                                         Limit;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageNo;                                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFriendListSortOrder                          Sort;                                              // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreFriendStatus;                               // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadGuildMemberNoFriend) == 0x000004, "Wrong alignment on BackendSubsystem_LoadGuildMemberNoFriend");
static_assert(sizeof(BackendSubsystem_LoadGuildMemberNoFriend) == 0x000010, "Wrong size on BackendSubsystem_LoadGuildMemberNoFriend");
static_assert(offsetof(BackendSubsystem_LoadGuildMemberNoFriend, Limit) == 0x000000, "Member 'BackendSubsystem_LoadGuildMemberNoFriend::Limit' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadGuildMemberNoFriend, PageNo) == 0x000004, "Member 'BackendSubsystem_LoadGuildMemberNoFriend::PageNo' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadGuildMemberNoFriend, Sort) == 0x000008, "Member 'BackendSubsystem_LoadGuildMemberNoFriend::Sort' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadGuildMemberNoFriend, bIgnoreFriendStatus) == 0x000009, "Member 'BackendSubsystem_LoadGuildMemberNoFriend::bIgnoreFriendStatus' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadGuildMemberNoFriend, ReturnValue) == 0x00000C, "Member 'BackendSubsystem_LoadGuildMemberNoFriend::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadGuildPendingMemberList
// 0x000C (0x000C - 0x0000)
struct BackendSubsystem_LoadGuildPendingMemberList final
{
public:
	int32                                         PageNo;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuildMemberSort                              ESort;                                             // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadGuildPendingMemberList) == 0x000004, "Wrong alignment on BackendSubsystem_LoadGuildPendingMemberList");
static_assert(sizeof(BackendSubsystem_LoadGuildPendingMemberList) == 0x00000C, "Wrong size on BackendSubsystem_LoadGuildPendingMemberList");
static_assert(offsetof(BackendSubsystem_LoadGuildPendingMemberList, PageNo) == 0x000000, "Member 'BackendSubsystem_LoadGuildPendingMemberList::PageNo' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadGuildPendingMemberList, ESort) == 0x000004, "Member 'BackendSubsystem_LoadGuildPendingMemberList::ESort' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadGuildPendingMemberList, ReturnValue) == 0x000008, "Member 'BackendSubsystem_LoadGuildPendingMemberList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadGuildPendingMemberListImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadGuildPendingMemberListImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadGuildPendingMemberListImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadGuildPendingMemberListImpl");
static_assert(sizeof(BackendSubsystem_LoadGuildPendingMemberListImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadGuildPendingMemberListImpl");
static_assert(offsetof(BackendSubsystem_LoadGuildPendingMemberListImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadGuildPendingMemberListImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadGuildPendingMemberListImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadGuildPendingMemberListImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadGuildRecordList
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_LoadGuildRecordList final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadGuildRecordList) == 0x000004, "Wrong alignment on BackendSubsystem_LoadGuildRecordList");
static_assert(sizeof(BackendSubsystem_LoadGuildRecordList) == 0x000004, "Wrong size on BackendSubsystem_LoadGuildRecordList");
static_assert(offsetof(BackendSubsystem_LoadGuildRecordList, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LoadGuildRecordList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadGuildRecordListImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadGuildRecordListImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadGuildRecordListImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadGuildRecordListImpl");
static_assert(sizeof(BackendSubsystem_LoadGuildRecordListImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadGuildRecordListImpl");
static_assert(offsetof(BackendSubsystem_LoadGuildRecordListImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadGuildRecordListImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadGuildRecordListImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadGuildRecordListImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadHeroCrystal
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_LoadHeroCrystal final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadHeroCrystal) == 0x000004, "Wrong alignment on BackendSubsystem_LoadHeroCrystal");
static_assert(sizeof(BackendSubsystem_LoadHeroCrystal) == 0x000004, "Wrong size on BackendSubsystem_LoadHeroCrystal");
static_assert(offsetof(BackendSubsystem_LoadHeroCrystal, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LoadHeroCrystal::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadHeroCrystalImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadHeroCrystalImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadHeroCrystalImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadHeroCrystalImpl");
static_assert(sizeof(BackendSubsystem_LoadHeroCrystalImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadHeroCrystalImpl");
static_assert(offsetof(BackendSubsystem_LoadHeroCrystalImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadHeroCrystalImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadHeroCrystalImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadHeroCrystalImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadInventory
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_LoadInventory final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadInventory) == 0x000004, "Wrong alignment on BackendSubsystem_LoadInventory");
static_assert(sizeof(BackendSubsystem_LoadInventory) == 0x000004, "Wrong size on BackendSubsystem_LoadInventory");
static_assert(offsetof(BackendSubsystem_LoadInventory, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LoadInventory::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadInventoryImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadInventoryImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadInventoryImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadInventoryImpl");
static_assert(sizeof(BackendSubsystem_LoadInventoryImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadInventoryImpl");
static_assert(offsetof(BackendSubsystem_LoadInventoryImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadInventoryImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadInventoryImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadInventoryImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadInvitation
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_LoadInvitation final
{
public:
	int32                                         PageNo;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadInvitation) == 0x000004, "Wrong alignment on BackendSubsystem_LoadInvitation");
static_assert(sizeof(BackendSubsystem_LoadInvitation) == 0x000008, "Wrong size on BackendSubsystem_LoadInvitation");
static_assert(offsetof(BackendSubsystem_LoadInvitation, PageNo) == 0x000000, "Member 'BackendSubsystem_LoadInvitation::PageNo' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadInvitation, ReturnValue) == 0x000004, "Member 'BackendSubsystem_LoadInvitation::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadLatelyPlayedNoFriend
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_LoadLatelyPlayedNoFriend final
{
public:
	int32                                         Limit;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageNo;                                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFriendListSortOrder                          Sort;                                              // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreFriendStatus;                               // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeGuildMember;                               // 0x000A(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadLatelyPlayedNoFriend) == 0x000004, "Wrong alignment on BackendSubsystem_LoadLatelyPlayedNoFriend");
static_assert(sizeof(BackendSubsystem_LoadLatelyPlayedNoFriend) == 0x000010, "Wrong size on BackendSubsystem_LoadLatelyPlayedNoFriend");
static_assert(offsetof(BackendSubsystem_LoadLatelyPlayedNoFriend, Limit) == 0x000000, "Member 'BackendSubsystem_LoadLatelyPlayedNoFriend::Limit' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadLatelyPlayedNoFriend, PageNo) == 0x000004, "Member 'BackendSubsystem_LoadLatelyPlayedNoFriend::PageNo' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadLatelyPlayedNoFriend, Sort) == 0x000008, "Member 'BackendSubsystem_LoadLatelyPlayedNoFriend::Sort' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadLatelyPlayedNoFriend, bIgnoreFriendStatus) == 0x000009, "Member 'BackendSubsystem_LoadLatelyPlayedNoFriend::bIgnoreFriendStatus' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadLatelyPlayedNoFriend, bExcludeGuildMember) == 0x00000A, "Member 'BackendSubsystem_LoadLatelyPlayedNoFriend::bExcludeGuildMember' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadLatelyPlayedNoFriend, ReturnValue) == 0x00000C, "Member 'BackendSubsystem_LoadLatelyPlayedNoFriend::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadLicense
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_LoadLicense final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadLicense) == 0x000004, "Wrong alignment on BackendSubsystem_LoadLicense");
static_assert(sizeof(BackendSubsystem_LoadLicense) == 0x000004, "Wrong size on BackendSubsystem_LoadLicense");
static_assert(offsetof(BackendSubsystem_LoadLicense, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LoadLicense::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadLicenseImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadLicenseImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadLicenseImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadLicenseImpl");
static_assert(sizeof(BackendSubsystem_LoadLicenseImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadLicenseImpl");
static_assert(offsetof(BackendSubsystem_LoadLicenseImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadLicenseImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadLicenseImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadLicenseImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadLoginBonus
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_LoadLoginBonus final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadLoginBonus) == 0x000004, "Wrong alignment on BackendSubsystem_LoadLoginBonus");
static_assert(sizeof(BackendSubsystem_LoadLoginBonus) == 0x000004, "Wrong size on BackendSubsystem_LoadLoginBonus");
static_assert(offsetof(BackendSubsystem_LoadLoginBonus, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LoadLoginBonus::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadLoginBonusImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadLoginBonusImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadLoginBonusImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadLoginBonusImpl");
static_assert(sizeof(BackendSubsystem_LoadLoginBonusImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadLoginBonusImpl");
static_assert(offsetof(BackendSubsystem_LoadLoginBonusImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadLoginBonusImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadLoginBonusImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadLoginBonusImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadLottery
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_LoadLottery final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadLottery) == 0x000004, "Wrong alignment on BackendSubsystem_LoadLottery");
static_assert(sizeof(BackendSubsystem_LoadLottery) == 0x000004, "Wrong size on BackendSubsystem_LoadLottery");
static_assert(offsetof(BackendSubsystem_LoadLottery, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LoadLottery::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadLotteryHistory
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_LoadLotteryHistory final
{
public:
	int32                                         PageNo;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadLotteryHistory) == 0x000004, "Wrong alignment on BackendSubsystem_LoadLotteryHistory");
static_assert(sizeof(BackendSubsystem_LoadLotteryHistory) == 0x000008, "Wrong size on BackendSubsystem_LoadLotteryHistory");
static_assert(offsetof(BackendSubsystem_LoadLotteryHistory, PageNo) == 0x000000, "Member 'BackendSubsystem_LoadLotteryHistory::PageNo' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadLotteryHistory, ReturnValue) == 0x000004, "Member 'BackendSubsystem_LoadLotteryHistory::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadLotteryHistoryImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadLotteryHistoryImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadLotteryHistoryImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadLotteryHistoryImpl");
static_assert(sizeof(BackendSubsystem_LoadLotteryHistoryImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadLotteryHistoryImpl");
static_assert(offsetof(BackendSubsystem_LoadLotteryHistoryImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadLotteryHistoryImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadLotteryHistoryImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadLotteryHistoryImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadLotteryImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadLotteryImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadLotteryImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadLotteryImpl");
static_assert(sizeof(BackendSubsystem_LoadLotteryImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadLotteryImpl");
static_assert(offsetof(BackendSubsystem_LoadLotteryImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadLotteryImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadLotteryImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadLotteryImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadLotteryMileageInfo
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_LoadLotteryMileageInfo final
{
public:
	int32                                         LotteryCode;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadLotteryMileageInfo) == 0x000004, "Wrong alignment on BackendSubsystem_LoadLotteryMileageInfo");
static_assert(sizeof(BackendSubsystem_LoadLotteryMileageInfo) == 0x000008, "Wrong size on BackendSubsystem_LoadLotteryMileageInfo");
static_assert(offsetof(BackendSubsystem_LoadLotteryMileageInfo, LotteryCode) == 0x000000, "Member 'BackendSubsystem_LoadLotteryMileageInfo::LotteryCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadLotteryMileageInfo, ReturnValue) == 0x000004, "Member 'BackendSubsystem_LoadLotteryMileageInfo::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadLotteryMileageInfoImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadLotteryMileageInfoImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadLotteryMileageInfoImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadLotteryMileageInfoImpl");
static_assert(sizeof(BackendSubsystem_LoadLotteryMileageInfoImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadLotteryMileageInfoImpl");
static_assert(offsetof(BackendSubsystem_LoadLotteryMileageInfoImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadLotteryMileageInfoImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadLotteryMileageInfoImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadLotteryMileageInfoImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadLotteryRate
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_LoadLotteryRate final
{
public:
	int32                                         LotteryCode;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadLotteryRate) == 0x000004, "Wrong alignment on BackendSubsystem_LoadLotteryRate");
static_assert(sizeof(BackendSubsystem_LoadLotteryRate) == 0x000008, "Wrong size on BackendSubsystem_LoadLotteryRate");
static_assert(offsetof(BackendSubsystem_LoadLotteryRate, LotteryCode) == 0x000000, "Member 'BackendSubsystem_LoadLotteryRate::LotteryCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadLotteryRate, ReturnValue) == 0x000004, "Member 'BackendSubsystem_LoadLotteryRate::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadLotteryRateImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadLotteryRateImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadLotteryRateImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadLotteryRateImpl");
static_assert(sizeof(BackendSubsystem_LoadLotteryRateImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadLotteryRateImpl");
static_assert(offsetof(BackendSubsystem_LoadLotteryRateImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadLotteryRateImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadLotteryRateImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadLotteryRateImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadMainMenu
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_LoadMainMenu final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadMainMenu) == 0x000004, "Wrong alignment on BackendSubsystem_LoadMainMenu");
static_assert(sizeof(BackendSubsystem_LoadMainMenu) == 0x000004, "Wrong size on BackendSubsystem_LoadMainMenu");
static_assert(offsetof(BackendSubsystem_LoadMainMenu, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LoadMainMenu::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadMainMenuImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadMainMenuImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadMainMenuImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadMainMenuImpl");
static_assert(sizeof(BackendSubsystem_LoadMainMenuImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadMainMenuImpl");
static_assert(offsetof(BackendSubsystem_LoadMainMenuImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadMainMenuImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadMainMenuImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadMainMenuImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadMission
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_LoadMission final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadMission) == 0x000004, "Wrong alignment on BackendSubsystem_LoadMission");
static_assert(sizeof(BackendSubsystem_LoadMission) == 0x000004, "Wrong size on BackendSubsystem_LoadMission");
static_assert(offsetof(BackendSubsystem_LoadMission, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LoadMission::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadMissionImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadMissionImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadMissionImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadMissionImpl");
static_assert(sizeof(BackendSubsystem_LoadMissionImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadMissionImpl");
static_assert(offsetof(BackendSubsystem_LoadMissionImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadMissionImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadMissionImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadMissionImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadMyAdList
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_LoadMyAdList final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadMyAdList) == 0x000004, "Wrong alignment on BackendSubsystem_LoadMyAdList");
static_assert(sizeof(BackendSubsystem_LoadMyAdList) == 0x000004, "Wrong size on BackendSubsystem_LoadMyAdList");
static_assert(offsetof(BackendSubsystem_LoadMyAdList, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LoadMyAdList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadMyAdListImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadMyAdListImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadMyAdListImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadMyAdListImpl");
static_assert(sizeof(BackendSubsystem_LoadMyAdListImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadMyAdListImpl");
static_assert(offsetof(BackendSubsystem_LoadMyAdListImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadMyAdListImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadMyAdListImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadMyAdListImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadNotice
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_LoadNotice final
{
public:
	int32                                         PageNo;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadNotice) == 0x000004, "Wrong alignment on BackendSubsystem_LoadNotice");
static_assert(sizeof(BackendSubsystem_LoadNotice) == 0x000008, "Wrong size on BackendSubsystem_LoadNotice");
static_assert(offsetof(BackendSubsystem_LoadNotice, PageNo) == 0x000000, "Member 'BackendSubsystem_LoadNotice::PageNo' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadNotice, ReturnValue) == 0x000004, "Member 'BackendSubsystem_LoadNotice::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadNoticeAndInvitation
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_LoadNoticeAndInvitation final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadNoticeAndInvitation) == 0x000004, "Wrong alignment on BackendSubsystem_LoadNoticeAndInvitation");
static_assert(sizeof(BackendSubsystem_LoadNoticeAndInvitation) == 0x000004, "Wrong size on BackendSubsystem_LoadNoticeAndInvitation");
static_assert(offsetof(BackendSubsystem_LoadNoticeAndInvitation, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LoadNoticeAndInvitation::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadNoticeAndInvitationImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadNoticeAndInvitationImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadNoticeAndInvitationImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadNoticeAndInvitationImpl");
static_assert(sizeof(BackendSubsystem_LoadNoticeAndInvitationImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadNoticeAndInvitationImpl");
static_assert(offsetof(BackendSubsystem_LoadNoticeAndInvitationImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadNoticeAndInvitationImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadNoticeAndInvitationImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadNoticeAndInvitationImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadNoticeImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadNoticeImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadNoticeImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadNoticeImpl");
static_assert(sizeof(BackendSubsystem_LoadNoticeImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadNoticeImpl");
static_assert(offsetof(BackendSubsystem_LoadNoticeImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadNoticeImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadNoticeImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadNoticeImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadPlatformFriendNoFriend
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_LoadPlatformFriendNoFriend final
{
public:
	int32                                         Limit;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageNo;                                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFriendListSortOrder                          Sort;                                              // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreFriendStatus;                               // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeGuildMember;                               // 0x000A(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadPlatformFriendNoFriend) == 0x000004, "Wrong alignment on BackendSubsystem_LoadPlatformFriendNoFriend");
static_assert(sizeof(BackendSubsystem_LoadPlatformFriendNoFriend) == 0x000010, "Wrong size on BackendSubsystem_LoadPlatformFriendNoFriend");
static_assert(offsetof(BackendSubsystem_LoadPlatformFriendNoFriend, Limit) == 0x000000, "Member 'BackendSubsystem_LoadPlatformFriendNoFriend::Limit' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadPlatformFriendNoFriend, PageNo) == 0x000004, "Member 'BackendSubsystem_LoadPlatformFriendNoFriend::PageNo' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadPlatformFriendNoFriend, Sort) == 0x000008, "Member 'BackendSubsystem_LoadPlatformFriendNoFriend::Sort' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadPlatformFriendNoFriend, bIgnoreFriendStatus) == 0x000009, "Member 'BackendSubsystem_LoadPlatformFriendNoFriend::bIgnoreFriendStatus' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadPlatformFriendNoFriend, bExcludeGuildMember) == 0x00000A, "Member 'BackendSubsystem_LoadPlatformFriendNoFriend::bExcludeGuildMember' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadPlatformFriendNoFriend, ReturnValue) == 0x00000C, "Member 'BackendSubsystem_LoadPlatformFriendNoFriend::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadProfile
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadProfile final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_LoadProfile) == 0x000008, "Wrong alignment on BackendSubsystem_LoadProfile");
static_assert(sizeof(BackendSubsystem_LoadProfile) == 0x000018, "Wrong size on BackendSubsystem_LoadProfile");
static_assert(offsetof(BackendSubsystem_LoadProfile, PlayerId) == 0x000000, "Member 'BackendSubsystem_LoadProfile::PlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadProfile, ReturnValue) == 0x000010, "Member 'BackendSubsystem_LoadProfile::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadProfile_DS
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadProfile_DS final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterCode;                                     // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadProfile_DS) == 0x000008, "Wrong alignment on BackendSubsystem_LoadProfile_DS");
static_assert(sizeof(BackendSubsystem_LoadProfile_DS) == 0x000018, "Wrong size on BackendSubsystem_LoadProfile_DS");
static_assert(offsetof(BackendSubsystem_LoadProfile_DS, PlayerId) == 0x000000, "Member 'BackendSubsystem_LoadProfile_DS::PlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadProfile_DS, CharacterCode) == 0x000010, "Member 'BackendSubsystem_LoadProfile_DS::CharacterCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadProfile_DS, ReturnValue) == 0x000014, "Member 'BackendSubsystem_LoadProfile_DS::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadProfileImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadProfileImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadProfileImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadProfileImpl");
static_assert(sizeof(BackendSubsystem_LoadProfileImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadProfileImpl");
static_assert(offsetof(BackendSubsystem_LoadProfileImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadProfileImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadProfileImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadProfileImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadPurchaseCatalog
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_LoadPurchaseCatalog final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadPurchaseCatalog) == 0x000004, "Wrong alignment on BackendSubsystem_LoadPurchaseCatalog");
static_assert(sizeof(BackendSubsystem_LoadPurchaseCatalog) == 0x000004, "Wrong size on BackendSubsystem_LoadPurchaseCatalog");
static_assert(offsetof(BackendSubsystem_LoadPurchaseCatalog, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LoadPurchaseCatalog::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadPurchaseCatalogCommand
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_LoadPurchaseCatalogCommand final
{
public:
	TArray<class FString>                         Args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadPurchaseCatalogCommand) == 0x000008, "Wrong alignment on BackendSubsystem_LoadPurchaseCatalogCommand");
static_assert(sizeof(BackendSubsystem_LoadPurchaseCatalogCommand) == 0x000010, "Wrong size on BackendSubsystem_LoadPurchaseCatalogCommand");
static_assert(offsetof(BackendSubsystem_LoadPurchaseCatalogCommand, Args) == 0x000000, "Member 'BackendSubsystem_LoadPurchaseCatalogCommand::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadPurchaseCatalogImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadPurchaseCatalogImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadPurchaseCatalogImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadPurchaseCatalogImpl");
static_assert(sizeof(BackendSubsystem_LoadPurchaseCatalogImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadPurchaseCatalogImpl");
static_assert(offsetof(BackendSubsystem_LoadPurchaseCatalogImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadPurchaseCatalogImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadPurchaseCatalogImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadPurchaseCatalogImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadPurchasedItem
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_LoadPurchasedItem final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadPurchasedItem) == 0x000004, "Wrong alignment on BackendSubsystem_LoadPurchasedItem");
static_assert(sizeof(BackendSubsystem_LoadPurchasedItem) == 0x000004, "Wrong size on BackendSubsystem_LoadPurchasedItem");
static_assert(offsetof(BackendSubsystem_LoadPurchasedItem, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LoadPurchasedItem::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadPurchasedItemImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadPurchasedItemImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadPurchasedItemImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadPurchasedItemImpl");
static_assert(sizeof(BackendSubsystem_LoadPurchasedItemImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadPurchasedItemImpl");
static_assert(offsetof(BackendSubsystem_LoadPurchasedItemImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadPurchasedItemImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadPurchasedItemImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadPurchasedItemImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadPurchaseStatus
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_LoadPurchaseStatus final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadPurchaseStatus) == 0x000004, "Wrong alignment on BackendSubsystem_LoadPurchaseStatus");
static_assert(sizeof(BackendSubsystem_LoadPurchaseStatus) == 0x000004, "Wrong size on BackendSubsystem_LoadPurchaseStatus");
static_assert(offsetof(BackendSubsystem_LoadPurchaseStatus, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LoadPurchaseStatus::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadRanking
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_LoadRanking final
{
public:
	int32                                         PageNo;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERankingType                                  RankingType;                                       // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EventCode;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadRanking) == 0x000004, "Wrong alignment on BackendSubsystem_LoadRanking");
static_assert(sizeof(BackendSubsystem_LoadRanking) == 0x000010, "Wrong size on BackendSubsystem_LoadRanking");
static_assert(offsetof(BackendSubsystem_LoadRanking, PageNo) == 0x000000, "Member 'BackendSubsystem_LoadRanking::PageNo' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadRanking, RankingType) == 0x000004, "Member 'BackendSubsystem_LoadRanking::RankingType' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadRanking, EventCode) == 0x000008, "Member 'BackendSubsystem_LoadRanking::EventCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadRanking, ReturnValue) == 0x00000C, "Member 'BackendSubsystem_LoadRanking::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadRankingByCode
// 0x000C (0x000C - 0x0000)
struct BackendSubsystem_LoadRankingByCode final
{
public:
	int32                                         PageNo;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankingCode;                                       // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadRankingByCode) == 0x000004, "Wrong alignment on BackendSubsystem_LoadRankingByCode");
static_assert(sizeof(BackendSubsystem_LoadRankingByCode) == 0x00000C, "Wrong size on BackendSubsystem_LoadRankingByCode");
static_assert(offsetof(BackendSubsystem_LoadRankingByCode, PageNo) == 0x000000, "Member 'BackendSubsystem_LoadRankingByCode::PageNo' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadRankingByCode, RankingCode) == 0x000004, "Member 'BackendSubsystem_LoadRankingByCode::RankingCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadRankingByCode, ReturnValue) == 0x000008, "Member 'BackendSubsystem_LoadRankingByCode::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadRankingImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadRankingImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadRankingImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadRankingImpl");
static_assert(sizeof(BackendSubsystem_LoadRankingImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadRankingImpl");
static_assert(offsetof(BackendSubsystem_LoadRankingImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadRankingImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadRankingImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadRankingImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadResult
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_LoadResult final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadResult) == 0x000004, "Wrong alignment on BackendSubsystem_LoadResult");
static_assert(sizeof(BackendSubsystem_LoadResult) == 0x000004, "Wrong size on BackendSubsystem_LoadResult");
static_assert(offsetof(BackendSubsystem_LoadResult, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LoadResult::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadResultImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadResultImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadResultImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadResultImpl");
static_assert(sizeof(BackendSubsystem_LoadResultImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadResultImpl");
static_assert(offsetof(BackendSubsystem_LoadResultImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadResultImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadResultImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadResultImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadSeasonPass
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_LoadSeasonPass final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadSeasonPass) == 0x000004, "Wrong alignment on BackendSubsystem_LoadSeasonPass");
static_assert(sizeof(BackendSubsystem_LoadSeasonPass) == 0x000004, "Wrong size on BackendSubsystem_LoadSeasonPass");
static_assert(offsetof(BackendSubsystem_LoadSeasonPass, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LoadSeasonPass::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadSeasonPassImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadSeasonPassImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadSeasonPassImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadSeasonPassImpl");
static_assert(sizeof(BackendSubsystem_LoadSeasonPassImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadSeasonPassImpl");
static_assert(offsetof(BackendSubsystem_LoadSeasonPassImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadSeasonPassImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadSeasonPassImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadSeasonPassImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadSeasonPassStock
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_LoadSeasonPassStock final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadSeasonPassStock) == 0x000004, "Wrong alignment on BackendSubsystem_LoadSeasonPassStock");
static_assert(sizeof(BackendSubsystem_LoadSeasonPassStock) == 0x000004, "Wrong size on BackendSubsystem_LoadSeasonPassStock");
static_assert(offsetof(BackendSubsystem_LoadSeasonPassStock, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LoadSeasonPassStock::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadSeasonPassStockImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadSeasonPassStockImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadSeasonPassStockImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadSeasonPassStockImpl");
static_assert(sizeof(BackendSubsystem_LoadSeasonPassStockImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadSeasonPassStockImpl");
static_assert(offsetof(BackendSubsystem_LoadSeasonPassStockImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadSeasonPassStockImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadSeasonPassStockImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadSeasonPassStockImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadSetting
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_LoadSetting final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadSetting) == 0x000004, "Wrong alignment on BackendSubsystem_LoadSetting");
static_assert(sizeof(BackendSubsystem_LoadSetting) == 0x000004, "Wrong size on BackendSubsystem_LoadSetting");
static_assert(offsetof(BackendSubsystem_LoadSetting, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LoadSetting::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadSettingImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadSettingImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadSettingImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadSettingImpl");
static_assert(sizeof(BackendSubsystem_LoadSettingImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadSettingImpl");
static_assert(offsetof(BackendSubsystem_LoadSettingImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadSettingImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadSettingImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadSettingImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadShop
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_LoadShop final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadShop) == 0x000004, "Wrong alignment on BackendSubsystem_LoadShop");
static_assert(sizeof(BackendSubsystem_LoadShop) == 0x000004, "Wrong size on BackendSubsystem_LoadShop");
static_assert(offsetof(BackendSubsystem_LoadShop, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LoadShop::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadShopImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadShopImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadShopImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadShopImpl");
static_assert(sizeof(BackendSubsystem_LoadShopImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadShopImpl");
static_assert(offsetof(BackendSubsystem_LoadShopImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadShopImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadShopImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadShopImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadSpacialLicense
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_LoadSpacialLicense final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadSpacialLicense) == 0x000004, "Wrong alignment on BackendSubsystem_LoadSpacialLicense");
static_assert(sizeof(BackendSubsystem_LoadSpacialLicense) == 0x000004, "Wrong size on BackendSubsystem_LoadSpacialLicense");
static_assert(offsetof(BackendSubsystem_LoadSpacialLicense, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LoadSpacialLicense::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadSpecialLicense
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_LoadSpecialLicense final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadSpecialLicense) == 0x000004, "Wrong alignment on BackendSubsystem_LoadSpecialLicense");
static_assert(sizeof(BackendSubsystem_LoadSpecialLicense) == 0x000004, "Wrong size on BackendSubsystem_LoadSpecialLicense");
static_assert(offsetof(BackendSubsystem_LoadSpecialLicense, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LoadSpecialLicense::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadSpecialLicenseImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadSpecialLicenseImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadSpecialLicenseImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadSpecialLicenseImpl");
static_assert(sizeof(BackendSubsystem_LoadSpecialLicenseImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadSpecialLicenseImpl");
static_assert(offsetof(BackendSubsystem_LoadSpecialLicenseImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadSpecialLicenseImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadSpecialLicenseImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadSpecialLicenseImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadSquad
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadSquad final
{
public:
	class FString                                 SquadPassword;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_LoadSquad) == 0x000008, "Wrong alignment on BackendSubsystem_LoadSquad");
static_assert(sizeof(BackendSubsystem_LoadSquad) == 0x000018, "Wrong size on BackendSubsystem_LoadSquad");
static_assert(offsetof(BackendSubsystem_LoadSquad, SquadPassword) == 0x000000, "Member 'BackendSubsystem_LoadSquad::SquadPassword' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadSquad, ReturnValue) == 0x000010, "Member 'BackendSubsystem_LoadSquad::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadSquadImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadSquadImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadSquadImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadSquadImpl");
static_assert(sizeof(BackendSubsystem_LoadSquadImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadSquadImpl");
static_assert(offsetof(BackendSubsystem_LoadSquadImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadSquadImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadSquadImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadSquadImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadSquadReceivedInvitation
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadSquadReceivedInvitation final
{
public:
	class FString                                 InvitationId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_LoadSquadReceivedInvitation) == 0x000008, "Wrong alignment on BackendSubsystem_LoadSquadReceivedInvitation");
static_assert(sizeof(BackendSubsystem_LoadSquadReceivedInvitation) == 0x000018, "Wrong size on BackendSubsystem_LoadSquadReceivedInvitation");
static_assert(offsetof(BackendSubsystem_LoadSquadReceivedInvitation, InvitationId) == 0x000000, "Member 'BackendSubsystem_LoadSquadReceivedInvitation::InvitationId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadSquadReceivedInvitation, ReturnValue) == 0x000010, "Member 'BackendSubsystem_LoadSquadReceivedInvitation::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadSquadReceivedInvitationImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadSquadReceivedInvitationImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadSquadReceivedInvitationImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadSquadReceivedInvitationImpl");
static_assert(sizeof(BackendSubsystem_LoadSquadReceivedInvitationImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadSquadReceivedInvitationImpl");
static_assert(offsetof(BackendSubsystem_LoadSquadReceivedInvitationImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadSquadReceivedInvitationImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadSquadReceivedInvitationImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadSquadReceivedInvitationImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadSquadSentInvitation
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_LoadSquadSentInvitation final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadSquadSentInvitation) == 0x000004, "Wrong alignment on BackendSubsystem_LoadSquadSentInvitation");
static_assert(sizeof(BackendSubsystem_LoadSquadSentInvitation) == 0x000004, "Wrong size on BackendSubsystem_LoadSquadSentInvitation");
static_assert(offsetof(BackendSubsystem_LoadSquadSentInvitation, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LoadSquadSentInvitation::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadSquadSentInvitationImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadSquadSentInvitationImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadSquadSentInvitationImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadSquadSentInvitationImpl");
static_assert(sizeof(BackendSubsystem_LoadSquadSentInvitationImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadSquadSentInvitationImpl");
static_assert(offsetof(BackendSubsystem_LoadSquadSentInvitationImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadSquadSentInvitationImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadSquadSentInvitationImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadSquadSentInvitationImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadTokushoText
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_LoadTokushoText final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadTokushoText) == 0x000004, "Wrong alignment on BackendSubsystem_LoadTokushoText");
static_assert(sizeof(BackendSubsystem_LoadTokushoText) == 0x000004, "Wrong size on BackendSubsystem_LoadTokushoText");
static_assert(offsetof(BackendSubsystem_LoadTokushoText, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LoadTokushoText::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadTokushoTextImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadTokushoTextImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadTokushoTextImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadTokushoTextImpl");
static_assert(sizeof(BackendSubsystem_LoadTokushoTextImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadTokushoTextImpl");
static_assert(offsetof(BackendSubsystem_LoadTokushoTextImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadTokushoTextImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadTokushoTextImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadTokushoTextImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadTrackingNumber
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_LoadTrackingNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadTrackingNumber) == 0x000004, "Wrong alignment on BackendSubsystem_LoadTrackingNumber");
static_assert(sizeof(BackendSubsystem_LoadTrackingNumber) == 0x000004, "Wrong size on BackendSubsystem_LoadTrackingNumber");
static_assert(offsetof(BackendSubsystem_LoadTrackingNumber, ReturnValue) == 0x000000, "Member 'BackendSubsystem_LoadTrackingNumber::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.LoadTrackingNumberImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_LoadTrackingNumberImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_LoadTrackingNumberImpl) == 0x000008, "Wrong alignment on BackendSubsystem_LoadTrackingNumberImpl");
static_assert(sizeof(BackendSubsystem_LoadTrackingNumberImpl) == 0x000018, "Wrong size on BackendSubsystem_LoadTrackingNumberImpl");
static_assert(offsetof(BackendSubsystem_LoadTrackingNumberImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_LoadTrackingNumberImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_LoadTrackingNumberImpl, Args) == 0x000008, "Member 'BackendSubsystem_LoadTrackingNumberImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.MergeSquad
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_MergeSquad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_MergeSquad) == 0x000001, "Wrong alignment on BackendSubsystem_MergeSquad");
static_assert(sizeof(BackendSubsystem_MergeSquad) == 0x000001, "Wrong size on BackendSubsystem_MergeSquad");
static_assert(offsetof(BackendSubsystem_MergeSquad, ReturnValue) == 0x000000, "Member 'BackendSubsystem_MergeSquad::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.NoticeCountDecrement
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_NoticeCountDecrement final
{
public:
	int32                                         DecrementValue;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_NoticeCountDecrement) == 0x000004, "Wrong alignment on BackendSubsystem_NoticeCountDecrement");
static_assert(sizeof(BackendSubsystem_NoticeCountDecrement) == 0x000004, "Wrong size on BackendSubsystem_NoticeCountDecrement");
static_assert(offsetof(BackendSubsystem_NoticeCountDecrement, DecrementValue) == 0x000000, "Member 'BackendSubsystem_NoticeCountDecrement::DecrementValue' has a wrong offset!");

// DelegateFunction BackendSubsystem.BackendSubsystem.OnAddItemDispatcher__DelegateSignature
// 0x0490 (0x0490 - 0x0000)
struct BackendSubsystem_OnAddItemDispatcher__DelegateSignature final
{
public:
	struct FDbItemCategoryParam                   Item;                                              // 0x0000(0x0488)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0488(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48C[0x4];                                      // 0x048C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_OnAddItemDispatcher__DelegateSignature) == 0x000008, "Wrong alignment on BackendSubsystem_OnAddItemDispatcher__DelegateSignature");
static_assert(sizeof(BackendSubsystem_OnAddItemDispatcher__DelegateSignature) == 0x000490, "Wrong size on BackendSubsystem_OnAddItemDispatcher__DelegateSignature");
static_assert(offsetof(BackendSubsystem_OnAddItemDispatcher__DelegateSignature, Item) == 0x000000, "Member 'BackendSubsystem_OnAddItemDispatcher__DelegateSignature::Item' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_OnAddItemDispatcher__DelegateSignature, Quantity) == 0x000488, "Member 'BackendSubsystem_OnAddItemDispatcher__DelegateSignature::Quantity' has a wrong offset!");

// DelegateFunction BackendSubsystem.BackendSubsystem.OnChangeIdleStatusEventDispatcher__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_OnChangeIdleStatusEventDispatcher__DelegateSignature final
{
public:
	bool                                          Idle;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StateSetting;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnChangeIdleStatusEventDispatcher__DelegateSignature) == 0x000004, "Wrong alignment on BackendSubsystem_OnChangeIdleStatusEventDispatcher__DelegateSignature");
static_assert(sizeof(BackendSubsystem_OnChangeIdleStatusEventDispatcher__DelegateSignature) == 0x000008, "Wrong size on BackendSubsystem_OnChangeIdleStatusEventDispatcher__DelegateSignature");
static_assert(offsetof(BackendSubsystem_OnChangeIdleStatusEventDispatcher__DelegateSignature, Idle) == 0x000000, "Member 'BackendSubsystem_OnChangeIdleStatusEventDispatcher__DelegateSignature::Idle' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_OnChangeIdleStatusEventDispatcher__DelegateSignature, StateSetting) == 0x000004, "Member 'BackendSubsystem_OnChangeIdleStatusEventDispatcher__DelegateSignature::StateSetting' has a wrong offset!");

// DelegateFunction BackendSubsystem.BackendSubsystem.OnChangeUnreadNoticeContDispatcher__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_OnChangeUnreadNoticeContDispatcher__DelegateSignature final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnChangeUnreadNoticeContDispatcher__DelegateSignature) == 0x000004, "Wrong alignment on BackendSubsystem_OnChangeUnreadNoticeContDispatcher__DelegateSignature");
static_assert(sizeof(BackendSubsystem_OnChangeUnreadNoticeContDispatcher__DelegateSignature) == 0x000004, "Wrong size on BackendSubsystem_OnChangeUnreadNoticeContDispatcher__DelegateSignature");
static_assert(offsetof(BackendSubsystem_OnChangeUnreadNoticeContDispatcher__DelegateSignature, Count) == 0x000000, "Member 'BackendSubsystem_OnChangeUnreadNoticeContDispatcher__DelegateSignature::Count' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.OnCompleteConsumeRentalPoint_DS
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_OnCompleteConsumeRentalPoint_DS final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnCompleteConsumeRentalPoint_DS) == 0x000004, "Wrong alignment on BackendSubsystem_OnCompleteConsumeRentalPoint_DS");
static_assert(sizeof(BackendSubsystem_OnCompleteConsumeRentalPoint_DS) == 0x000004, "Wrong size on BackendSubsystem_OnCompleteConsumeRentalPoint_DS");
static_assert(offsetof(BackendSubsystem_OnCompleteConsumeRentalPoint_DS, RequestId) == 0x000000, "Member 'BackendSubsystem_OnCompleteConsumeRentalPoint_DS::RequestId' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.OnCompleteLoadProfile_DS
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_OnCompleteLoadProfile_DS final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnCompleteLoadProfile_DS) == 0x000004, "Wrong alignment on BackendSubsystem_OnCompleteLoadProfile_DS");
static_assert(sizeof(BackendSubsystem_OnCompleteLoadProfile_DS) == 0x000004, "Wrong size on BackendSubsystem_OnCompleteLoadProfile_DS");
static_assert(offsetof(BackendSubsystem_OnCompleteLoadProfile_DS, RequestId) == 0x000000, "Member 'BackendSubsystem_OnCompleteLoadProfile_DS::RequestId' has a wrong offset!");

// DelegateFunction BackendSubsystem.BackendSubsystem.OnCompleteLoadTrackingNumberEventDispatcher__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_OnCompleteLoadTrackingNumberEventDispatcher__DelegateSignature final
{
public:
	class FString                                 TrackingNumber;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnCompleteLoadTrackingNumberEventDispatcher__DelegateSignature) == 0x000008, "Wrong alignment on BackendSubsystem_OnCompleteLoadTrackingNumberEventDispatcher__DelegateSignature");
static_assert(sizeof(BackendSubsystem_OnCompleteLoadTrackingNumberEventDispatcher__DelegateSignature) == 0x000010, "Wrong size on BackendSubsystem_OnCompleteLoadTrackingNumberEventDispatcher__DelegateSignature");
static_assert(offsetof(BackendSubsystem_OnCompleteLoadTrackingNumberEventDispatcher__DelegateSignature, TrackingNumber) == 0x000000, "Member 'BackendSubsystem_OnCompleteLoadTrackingNumberEventDispatcher__DelegateSignature::TrackingNumber' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.OnCompleteSendCustomMatchResult_DS
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_OnCompleteSendCustomMatchResult_DS final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnCompleteSendCustomMatchResult_DS) == 0x000004, "Wrong alignment on BackendSubsystem_OnCompleteSendCustomMatchResult_DS");
static_assert(sizeof(BackendSubsystem_OnCompleteSendCustomMatchResult_DS) == 0x000004, "Wrong size on BackendSubsystem_OnCompleteSendCustomMatchResult_DS");
static_assert(offsetof(BackendSubsystem_OnCompleteSendCustomMatchResult_DS, RequestId) == 0x000000, "Member 'BackendSubsystem_OnCompleteSendCustomMatchResult_DS::RequestId' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.OnCompleteSendFinalResult_DS
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_OnCompleteSendFinalResult_DS final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnCompleteSendFinalResult_DS) == 0x000004, "Wrong alignment on BackendSubsystem_OnCompleteSendFinalResult_DS");
static_assert(sizeof(BackendSubsystem_OnCompleteSendFinalResult_DS) == 0x000004, "Wrong size on BackendSubsystem_OnCompleteSendFinalResult_DS");
static_assert(offsetof(BackendSubsystem_OnCompleteSendFinalResult_DS, RequestId) == 0x000000, "Member 'BackendSubsystem_OnCompleteSendFinalResult_DS::RequestId' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.OnCompleteSendKpiBattleLog_DS
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_OnCompleteSendKpiBattleLog_DS final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnCompleteSendKpiBattleLog_DS) == 0x000004, "Wrong alignment on BackendSubsystem_OnCompleteSendKpiBattleLog_DS");
static_assert(sizeof(BackendSubsystem_OnCompleteSendKpiBattleLog_DS) == 0x000004, "Wrong size on BackendSubsystem_OnCompleteSendKpiBattleLog_DS");
static_assert(offsetof(BackendSubsystem_OnCompleteSendKpiBattleLog_DS, RequestId) == 0x000000, "Member 'BackendSubsystem_OnCompleteSendKpiBattleLog_DS::RequestId' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.OnCompleteSendPenaltyPoint_DS
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_OnCompleteSendPenaltyPoint_DS final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnCompleteSendPenaltyPoint_DS) == 0x000004, "Wrong alignment on BackendSubsystem_OnCompleteSendPenaltyPoint_DS");
static_assert(sizeof(BackendSubsystem_OnCompleteSendPenaltyPoint_DS) == 0x000004, "Wrong size on BackendSubsystem_OnCompleteSendPenaltyPoint_DS");
static_assert(offsetof(BackendSubsystem_OnCompleteSendPenaltyPoint_DS, RequestId) == 0x000000, "Member 'BackendSubsystem_OnCompleteSendPenaltyPoint_DS::RequestId' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.OnCompleteSendPhaseResult_DS
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_OnCompleteSendPhaseResult_DS final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnCompleteSendPhaseResult_DS) == 0x000004, "Wrong alignment on BackendSubsystem_OnCompleteSendPhaseResult_DS");
static_assert(sizeof(BackendSubsystem_OnCompleteSendPhaseResult_DS) == 0x000004, "Wrong size on BackendSubsystem_OnCompleteSendPhaseResult_DS");
static_assert(offsetof(BackendSubsystem_OnCompleteSendPhaseResult_DS, RequestId) == 0x000000, "Member 'BackendSubsystem_OnCompleteSendPhaseResult_DS::RequestId' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.OnCompleteStartBattle_DS
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_OnCompleteStartBattle_DS final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnCompleteStartBattle_DS) == 0x000004, "Wrong alignment on BackendSubsystem_OnCompleteStartBattle_DS");
static_assert(sizeof(BackendSubsystem_OnCompleteStartBattle_DS) == 0x000004, "Wrong size on BackendSubsystem_OnCompleteStartBattle_DS");
static_assert(offsetof(BackendSubsystem_OnCompleteStartBattle_DS, RequestId) == 0x000000, "Member 'BackendSubsystem_OnCompleteStartBattle_DS::RequestId' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.OnCompleteUpdateMissionProgress_DS
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_OnCompleteUpdateMissionProgress_DS final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnCompleteUpdateMissionProgress_DS) == 0x000004, "Wrong alignment on BackendSubsystem_OnCompleteUpdateMissionProgress_DS");
static_assert(sizeof(BackendSubsystem_OnCompleteUpdateMissionProgress_DS) == 0x000004, "Wrong size on BackendSubsystem_OnCompleteUpdateMissionProgress_DS");
static_assert(offsetof(BackendSubsystem_OnCompleteUpdateMissionProgress_DS, RequestId) == 0x000000, "Member 'BackendSubsystem_OnCompleteUpdateMissionProgress_DS::RequestId' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.OnCompleteUpdateMissionsProgress_DS
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_OnCompleteUpdateMissionsProgress_DS final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnCompleteUpdateMissionsProgress_DS) == 0x000004, "Wrong alignment on BackendSubsystem_OnCompleteUpdateMissionsProgress_DS");
static_assert(sizeof(BackendSubsystem_OnCompleteUpdateMissionsProgress_DS) == 0x000004, "Wrong size on BackendSubsystem_OnCompleteUpdateMissionsProgress_DS");
static_assert(offsetof(BackendSubsystem_OnCompleteUpdateMissionsProgress_DS, RequestId) == 0x000000, "Member 'BackendSubsystem_OnCompleteUpdateMissionsProgress_DS::RequestId' has a wrong offset!");

// DelegateFunction BackendSubsystem.BackendSubsystem.OnLoadCompleteEventDispatcher__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_OnLoadCompleteEventDispatcher__DelegateSignature final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnLoadCompleteEventDispatcher__DelegateSignature) == 0x000004, "Wrong alignment on BackendSubsystem_OnLoadCompleteEventDispatcher__DelegateSignature");
static_assert(sizeof(BackendSubsystem_OnLoadCompleteEventDispatcher__DelegateSignature) == 0x000004, "Wrong size on BackendSubsystem_OnLoadCompleteEventDispatcher__DelegateSignature");
static_assert(offsetof(BackendSubsystem_OnLoadCompleteEventDispatcher__DelegateSignature, RequestId) == 0x000000, "Member 'BackendSubsystem_OnLoadCompleteEventDispatcher__DelegateSignature::RequestId' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.OnPlatformLogin
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_OnPlatformLogin final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnPlatformLogin) == 0x000001, "Wrong alignment on BackendSubsystem_OnPlatformLogin");
static_assert(sizeof(BackendSubsystem_OnPlatformLogin) == 0x000001, "Wrong size on BackendSubsystem_OnPlatformLogin");
static_assert(offsetof(BackendSubsystem_OnPlatformLogin, bWasSuccessful) == 0x000000, "Member 'BackendSubsystem_OnPlatformLogin::bWasSuccessful' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.OnPlayerRequestError
// 0x0014 (0x0014 - 0x0000)
struct BackendSubsystem_OnPlayerRequestError final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Message;                                           // 0x000C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnPlayerRequestError) == 0x000004, "Wrong alignment on BackendSubsystem_OnPlayerRequestError");
static_assert(sizeof(BackendSubsystem_OnPlayerRequestError) == 0x000014, "Wrong size on BackendSubsystem_OnPlayerRequestError");
static_assert(offsetof(BackendSubsystem_OnPlayerRequestError, RequestId) == 0x000000, "Member 'BackendSubsystem_OnPlayerRequestError::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_OnPlayerRequestError, Key) == 0x000004, "Member 'BackendSubsystem_OnPlayerRequestError::Key' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_OnPlayerRequestError, Message) == 0x00000C, "Member 'BackendSubsystem_OnPlayerRequestError::Message' has a wrong offset!");

// DelegateFunction BackendSubsystem.BackendSubsystem.OnPlayerRequestErrorEventDispatcher__DelegateSignature
// 0x0014 (0x0014 - 0x0000)
struct BackendSubsystem_OnPlayerRequestErrorEventDispatcher__DelegateSignature final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Message;                                           // 0x000C(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnPlayerRequestErrorEventDispatcher__DelegateSignature) == 0x000004, "Wrong alignment on BackendSubsystem_OnPlayerRequestErrorEventDispatcher__DelegateSignature");
static_assert(sizeof(BackendSubsystem_OnPlayerRequestErrorEventDispatcher__DelegateSignature) == 0x000014, "Wrong size on BackendSubsystem_OnPlayerRequestErrorEventDispatcher__DelegateSignature");
static_assert(offsetof(BackendSubsystem_OnPlayerRequestErrorEventDispatcher__DelegateSignature, RequestId) == 0x000000, "Member 'BackendSubsystem_OnPlayerRequestErrorEventDispatcher__DelegateSignature::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_OnPlayerRequestErrorEventDispatcher__DelegateSignature, Key) == 0x000004, "Member 'BackendSubsystem_OnPlayerRequestErrorEventDispatcher__DelegateSignature::Key' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_OnPlayerRequestErrorEventDispatcher__DelegateSignature, Message) == 0x00000C, "Member 'BackendSubsystem_OnPlayerRequestErrorEventDispatcher__DelegateSignature::Message' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.OnProgressLoadProfile_DS1
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_OnProgressLoadProfile_DS1 final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnProgressLoadProfile_DS1) == 0x000004, "Wrong alignment on BackendSubsystem_OnProgressLoadProfile_DS1");
static_assert(sizeof(BackendSubsystem_OnProgressLoadProfile_DS1) == 0x000004, "Wrong size on BackendSubsystem_OnProgressLoadProfile_DS1");
static_assert(offsetof(BackendSubsystem_OnProgressLoadProfile_DS1, RequestId) == 0x000000, "Member 'BackendSubsystem_OnProgressLoadProfile_DS1::RequestId' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.OnProgressLoadProfile_DS2
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_OnProgressLoadProfile_DS2 final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnProgressLoadProfile_DS2) == 0x000004, "Wrong alignment on BackendSubsystem_OnProgressLoadProfile_DS2");
static_assert(sizeof(BackendSubsystem_OnProgressLoadProfile_DS2) == 0x000004, "Wrong size on BackendSubsystem_OnProgressLoadProfile_DS2");
static_assert(offsetof(BackendSubsystem_OnProgressLoadProfile_DS2, RequestId) == 0x000000, "Member 'BackendSubsystem_OnProgressLoadProfile_DS2::RequestId' has a wrong offset!");

// DelegateFunction BackendSubsystem.BackendSubsystem.OnRentalPointUpdatedEventDispatcher__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_OnRentalPointUpdatedEventDispatcher__DelegateSignature final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnRentalPointUpdatedEventDispatcher__DelegateSignature) == 0x000004, "Wrong alignment on BackendSubsystem_OnRentalPointUpdatedEventDispatcher__DelegateSignature");
static_assert(sizeof(BackendSubsystem_OnRentalPointUpdatedEventDispatcher__DelegateSignature) == 0x000004, "Wrong size on BackendSubsystem_OnRentalPointUpdatedEventDispatcher__DelegateSignature");
static_assert(offsetof(BackendSubsystem_OnRentalPointUpdatedEventDispatcher__DelegateSignature, Value) == 0x000000, "Member 'BackendSubsystem_OnRentalPointUpdatedEventDispatcher__DelegateSignature::Value' has a wrong offset!");

// DelegateFunction BackendSubsystem.BackendSubsystem.OnSendLikeDispatcher__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_OnSendLikeDispatcher__DelegateSignature final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnSendLikeDispatcher__DelegateSignature) == 0x000004, "Wrong alignment on BackendSubsystem_OnSendLikeDispatcher__DelegateSignature");
static_assert(sizeof(BackendSubsystem_OnSendLikeDispatcher__DelegateSignature) == 0x000004, "Wrong size on BackendSubsystem_OnSendLikeDispatcher__DelegateSignature");
static_assert(offsetof(BackendSubsystem_OnSendLikeDispatcher__DelegateSignature, Count) == 0x000000, "Member 'BackendSubsystem_OnSendLikeDispatcher__DelegateSignature::Count' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.OnSystemError
// 0x0014 (0x0014 - 0x0000)
struct BackendSubsystem_OnSystemError final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Message;                                           // 0x000C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnSystemError) == 0x000004, "Wrong alignment on BackendSubsystem_OnSystemError");
static_assert(sizeof(BackendSubsystem_OnSystemError) == 0x000014, "Wrong size on BackendSubsystem_OnSystemError");
static_assert(offsetof(BackendSubsystem_OnSystemError, RequestId) == 0x000000, "Member 'BackendSubsystem_OnSystemError::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_OnSystemError, Key) == 0x000004, "Member 'BackendSubsystem_OnSystemError::Key' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_OnSystemError, Message) == 0x00000C, "Member 'BackendSubsystem_OnSystemError::Message' has a wrong offset!");

// DelegateFunction BackendSubsystem.BackendSubsystem.OnSystemErrorEventDispatcher__DelegateSignature
// 0x0014 (0x0014 - 0x0000)
struct BackendSubsystem_OnSystemErrorEventDispatcher__DelegateSignature final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Message;                                           // 0x000C(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnSystemErrorEventDispatcher__DelegateSignature) == 0x000004, "Wrong alignment on BackendSubsystem_OnSystemErrorEventDispatcher__DelegateSignature");
static_assert(sizeof(BackendSubsystem_OnSystemErrorEventDispatcher__DelegateSignature) == 0x000014, "Wrong size on BackendSubsystem_OnSystemErrorEventDispatcher__DelegateSignature");
static_assert(offsetof(BackendSubsystem_OnSystemErrorEventDispatcher__DelegateSignature, RequestId) == 0x000000, "Member 'BackendSubsystem_OnSystemErrorEventDispatcher__DelegateSignature::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_OnSystemErrorEventDispatcher__DelegateSignature, Key) == 0x000004, "Member 'BackendSubsystem_OnSystemErrorEventDispatcher__DelegateSignature::Key' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_OnSystemErrorEventDispatcher__DelegateSignature, Message) == 0x00000C, "Member 'BackendSubsystem_OnSystemErrorEventDispatcher__DelegateSignature::Message' has a wrong offset!");

// DelegateFunction BackendSubsystem.BackendSubsystem.OnTeamUpAppealReceivedEventDispatcher__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct BackendSubsystem_OnTeamUpAppealReceivedEventDispatcher__DelegateSignature final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Appeal;                                            // 0x0020(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlock;                                            // 0x0024(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_OnTeamUpAppealReceivedEventDispatcher__DelegateSignature) == 0x000008, "Wrong alignment on BackendSubsystem_OnTeamUpAppealReceivedEventDispatcher__DelegateSignature");
static_assert(sizeof(BackendSubsystem_OnTeamUpAppealReceivedEventDispatcher__DelegateSignature) == 0x000028, "Wrong size on BackendSubsystem_OnTeamUpAppealReceivedEventDispatcher__DelegateSignature");
static_assert(offsetof(BackendSubsystem_OnTeamUpAppealReceivedEventDispatcher__DelegateSignature, PlayerId) == 0x000000, "Member 'BackendSubsystem_OnTeamUpAppealReceivedEventDispatcher__DelegateSignature::PlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_OnTeamUpAppealReceivedEventDispatcher__DelegateSignature, DisplayName) == 0x000010, "Member 'BackendSubsystem_OnTeamUpAppealReceivedEventDispatcher__DelegateSignature::DisplayName' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_OnTeamUpAppealReceivedEventDispatcher__DelegateSignature, Appeal) == 0x000020, "Member 'BackendSubsystem_OnTeamUpAppealReceivedEventDispatcher__DelegateSignature::Appeal' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_OnTeamUpAppealReceivedEventDispatcher__DelegateSignature, bBlock) == 0x000024, "Member 'BackendSubsystem_OnTeamUpAppealReceivedEventDispatcher__DelegateSignature::bBlock' has a wrong offset!");

// DelegateFunction BackendSubsystem.BackendSubsystem.OnTeamUpAutoStartBattleCompleteEventDispatcher__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_OnTeamUpAutoStartBattleCompleteEventDispatcher__DelegateSignature final
{
public:
	EAutoStartBattleState                         State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnTeamUpAutoStartBattleCompleteEventDispatcher__DelegateSignature) == 0x000001, "Wrong alignment on BackendSubsystem_OnTeamUpAutoStartBattleCompleteEventDispatcher__DelegateSignature");
static_assert(sizeof(BackendSubsystem_OnTeamUpAutoStartBattleCompleteEventDispatcher__DelegateSignature) == 0x000001, "Wrong size on BackendSubsystem_OnTeamUpAutoStartBattleCompleteEventDispatcher__DelegateSignature");
static_assert(offsetof(BackendSubsystem_OnTeamUpAutoStartBattleCompleteEventDispatcher__DelegateSignature, State) == 0x000000, "Member 'BackendSubsystem_OnTeamUpAutoStartBattleCompleteEventDispatcher__DelegateSignature::State' has a wrong offset!");

// DelegateFunction BackendSubsystem.BackendSubsystem.OnTeamUpChatReceivedEventDispatcher__DelegateSignature
// 0x0038 (0x0038 - 0x0000)
struct BackendSubsystem_OnTeamUpChatReceivedEventDispatcher__DelegateSignature final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlock;                                            // 0x0030(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_OnTeamUpChatReceivedEventDispatcher__DelegateSignature) == 0x000008, "Wrong alignment on BackendSubsystem_OnTeamUpChatReceivedEventDispatcher__DelegateSignature");
static_assert(sizeof(BackendSubsystem_OnTeamUpChatReceivedEventDispatcher__DelegateSignature) == 0x000038, "Wrong size on BackendSubsystem_OnTeamUpChatReceivedEventDispatcher__DelegateSignature");
static_assert(offsetof(BackendSubsystem_OnTeamUpChatReceivedEventDispatcher__DelegateSignature, PlayerId) == 0x000000, "Member 'BackendSubsystem_OnTeamUpChatReceivedEventDispatcher__DelegateSignature::PlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_OnTeamUpChatReceivedEventDispatcher__DelegateSignature, DisplayName) == 0x000010, "Member 'BackendSubsystem_OnTeamUpChatReceivedEventDispatcher__DelegateSignature::DisplayName' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_OnTeamUpChatReceivedEventDispatcher__DelegateSignature, Message) == 0x000020, "Member 'BackendSubsystem_OnTeamUpChatReceivedEventDispatcher__DelegateSignature::Message' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_OnTeamUpChatReceivedEventDispatcher__DelegateSignature, bBlock) == 0x000030, "Member 'BackendSubsystem_OnTeamUpChatReceivedEventDispatcher__DelegateSignature::bBlock' has a wrong offset!");

// DelegateFunction BackendSubsystem.BackendSubsystem.OnUpdateCompleteEventDispatcher__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_OnUpdateCompleteEventDispatcher__DelegateSignature final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnUpdateCompleteEventDispatcher__DelegateSignature) == 0x000004, "Wrong alignment on BackendSubsystem_OnUpdateCompleteEventDispatcher__DelegateSignature");
static_assert(sizeof(BackendSubsystem_OnUpdateCompleteEventDispatcher__DelegateSignature) == 0x000004, "Wrong size on BackendSubsystem_OnUpdateCompleteEventDispatcher__DelegateSignature");
static_assert(offsetof(BackendSubsystem_OnUpdateCompleteEventDispatcher__DelegateSignature, RequestId) == 0x000000, "Member 'BackendSubsystem_OnUpdateCompleteEventDispatcher__DelegateSignature::RequestId' has a wrong offset!");

// DelegateFunction BackendSubsystem.BackendSubsystem.OnUpdateVariationCompleteEventDispatcher__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_OnUpdateVariationCompleteEventDispatcher__DelegateSignature final
{
public:
	int32                                         CharacterCode;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Variation;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnUpdateVariationCompleteEventDispatcher__DelegateSignature) == 0x000004, "Wrong alignment on BackendSubsystem_OnUpdateVariationCompleteEventDispatcher__DelegateSignature");
static_assert(sizeof(BackendSubsystem_OnUpdateVariationCompleteEventDispatcher__DelegateSignature) == 0x000008, "Wrong size on BackendSubsystem_OnUpdateVariationCompleteEventDispatcher__DelegateSignature");
static_assert(offsetof(BackendSubsystem_OnUpdateVariationCompleteEventDispatcher__DelegateSignature, CharacterCode) == 0x000000, "Member 'BackendSubsystem_OnUpdateVariationCompleteEventDispatcher__DelegateSignature::CharacterCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_OnUpdateVariationCompleteEventDispatcher__DelegateSignature, Variation) == 0x000004, "Member 'BackendSubsystem_OnUpdateVariationCompleteEventDispatcher__DelegateSignature::Variation' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.OnVoiceChatChangePlayerState
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_OnVoiceChatChangePlayerState final
{
public:
	class FString                                 PlatformPlayerId;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoiceChatPlayerStatus                        Status;                                            // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnVoiceChatChangePlayerState) == 0x000008, "Wrong alignment on BackendSubsystem_OnVoiceChatChangePlayerState");
static_assert(sizeof(BackendSubsystem_OnVoiceChatChangePlayerState) == 0x000018, "Wrong size on BackendSubsystem_OnVoiceChatChangePlayerState");
static_assert(offsetof(BackendSubsystem_OnVoiceChatChangePlayerState, PlatformPlayerId) == 0x000000, "Member 'BackendSubsystem_OnVoiceChatChangePlayerState::PlatformPlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_OnVoiceChatChangePlayerState, Status) == 0x000010, "Member 'BackendSubsystem_OnVoiceChatChangePlayerState::Status' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_OnVoiceChatChangePlayerState, Value) == 0x000014, "Member 'BackendSubsystem_OnVoiceChatChangePlayerState::Value' has a wrong offset!");

// DelegateFunction BackendSubsystem.BackendSubsystem.OnVoiceChatChangePlayerStateDispatcher__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_OnVoiceChatChangePlayerStateDispatcher__DelegateSignature final
{
public:
	class FString                                 PlatformPlayerId;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoiceChatMemberStatus                        Status;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnVoiceChatChangePlayerStateDispatcher__DelegateSignature) == 0x000008, "Wrong alignment on BackendSubsystem_OnVoiceChatChangePlayerStateDispatcher__DelegateSignature");
static_assert(sizeof(BackendSubsystem_OnVoiceChatChangePlayerStateDispatcher__DelegateSignature) == 0x000018, "Wrong size on BackendSubsystem_OnVoiceChatChangePlayerStateDispatcher__DelegateSignature");
static_assert(offsetof(BackendSubsystem_OnVoiceChatChangePlayerStateDispatcher__DelegateSignature, PlatformPlayerId) == 0x000000, "Member 'BackendSubsystem_OnVoiceChatChangePlayerStateDispatcher__DelegateSignature::PlatformPlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_OnVoiceChatChangePlayerStateDispatcher__DelegateSignature, Status) == 0x000010, "Member 'BackendSubsystem_OnVoiceChatChangePlayerStateDispatcher__DelegateSignature::Status' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_OnVoiceChatChangePlayerStateDispatcher__DelegateSignature, Value) == 0x000014, "Member 'BackendSubsystem_OnVoiceChatChangePlayerStateDispatcher__DelegateSignature::Value' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.OnVoiceChatChangeState
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_OnVoiceChatChangeState final
{
public:
	EVoiceChatStatus                              Status;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnVoiceChatChangeState) == 0x000001, "Wrong alignment on BackendSubsystem_OnVoiceChatChangeState");
static_assert(sizeof(BackendSubsystem_OnVoiceChatChangeState) == 0x000001, "Wrong size on BackendSubsystem_OnVoiceChatChangeState");
static_assert(offsetof(BackendSubsystem_OnVoiceChatChangeState, Status) == 0x000000, "Member 'BackendSubsystem_OnVoiceChatChangeState::Status' has a wrong offset!");

// DelegateFunction BackendSubsystem.BackendSubsystem.OnVoiceChatChangeSystemStateDispatcher__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_OnVoiceChatChangeSystemStateDispatcher__DelegateSignature final
{
public:
	EVoiceChatSystemStatus                        Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnVoiceChatChangeSystemStateDispatcher__DelegateSignature) == 0x000001, "Wrong alignment on BackendSubsystem_OnVoiceChatChangeSystemStateDispatcher__DelegateSignature");
static_assert(sizeof(BackendSubsystem_OnVoiceChatChangeSystemStateDispatcher__DelegateSignature) == 0x000001, "Wrong size on BackendSubsystem_OnVoiceChatChangeSystemStateDispatcher__DelegateSignature");
static_assert(offsetof(BackendSubsystem_OnVoiceChatChangeSystemStateDispatcher__DelegateSignature, Status) == 0x000000, "Member 'BackendSubsystem_OnVoiceChatChangeSystemStateDispatcher__DelegateSignature::Status' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.OnVoiceChatError
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_OnVoiceChatError final
{
public:
	EVoiceChatError                               Err;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Msg;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnVoiceChatError) == 0x000008, "Wrong alignment on BackendSubsystem_OnVoiceChatError");
static_assert(sizeof(BackendSubsystem_OnVoiceChatError) == 0x000018, "Wrong size on BackendSubsystem_OnVoiceChatError");
static_assert(offsetof(BackendSubsystem_OnVoiceChatError, Err) == 0x000000, "Member 'BackendSubsystem_OnVoiceChatError::Err' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_OnVoiceChatError, Msg) == 0x000008, "Member 'BackendSubsystem_OnVoiceChatError::Msg' has a wrong offset!");

// DelegateFunction BackendSubsystem.BackendSubsystem.OnVoiceChatTextMessageReceivedDispatcher__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BackendSubsystem_OnVoiceChatTextMessageReceivedDispatcher__DelegateSignature final
{
public:
	class FString                                 PlatformPlayerId;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnVoiceChatTextMessageReceivedDispatcher__DelegateSignature) == 0x000008, "Wrong alignment on BackendSubsystem_OnVoiceChatTextMessageReceivedDispatcher__DelegateSignature");
static_assert(sizeof(BackendSubsystem_OnVoiceChatTextMessageReceivedDispatcher__DelegateSignature) == 0x000020, "Wrong size on BackendSubsystem_OnVoiceChatTextMessageReceivedDispatcher__DelegateSignature");
static_assert(offsetof(BackendSubsystem_OnVoiceChatTextMessageReceivedDispatcher__DelegateSignature, PlatformPlayerId) == 0x000000, "Member 'BackendSubsystem_OnVoiceChatTextMessageReceivedDispatcher__DelegateSignature::PlatformPlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_OnVoiceChatTextMessageReceivedDispatcher__DelegateSignature, Message) == 0x000010, "Member 'BackendSubsystem_OnVoiceChatTextMessageReceivedDispatcher__DelegateSignature::Message' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.OnVoiceTextMessageReceived
// 0x0020 (0x0020 - 0x0000)
struct BackendSubsystem_OnVoiceTextMessageReceived final
{
public:
	class FString                                 PlatformPlayerId;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnVoiceTextMessageReceived) == 0x000008, "Wrong alignment on BackendSubsystem_OnVoiceTextMessageReceived");
static_assert(sizeof(BackendSubsystem_OnVoiceTextMessageReceived) == 0x000020, "Wrong size on BackendSubsystem_OnVoiceTextMessageReceived");
static_assert(offsetof(BackendSubsystem_OnVoiceTextMessageReceived, PlatformPlayerId) == 0x000000, "Member 'BackendSubsystem_OnVoiceTextMessageReceived::PlatformPlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_OnVoiceTextMessageReceived, Message) == 0x000010, "Member 'BackendSubsystem_OnVoiceTextMessageReceived::Message' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.OpenAllNotice
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_OpenAllNotice final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OpenAllNotice) == 0x000004, "Wrong alignment on BackendSubsystem_OpenAllNotice");
static_assert(sizeof(BackendSubsystem_OpenAllNotice) == 0x000004, "Wrong size on BackendSubsystem_OpenAllNotice");
static_assert(offsetof(BackendSubsystem_OpenAllNotice, ReturnValue) == 0x000000, "Member 'BackendSubsystem_OpenAllNotice::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.OpenGalleryPanels
// 0x0020 (0x0020 - 0x0000)
struct BackendSubsystem_OpenGalleryPanels final
{
public:
	int32                                         GalleryCode;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 PanelNumbers;                                      // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_OpenGalleryPanels) == 0x000008, "Wrong alignment on BackendSubsystem_OpenGalleryPanels");
static_assert(sizeof(BackendSubsystem_OpenGalleryPanels) == 0x000020, "Wrong size on BackendSubsystem_OpenGalleryPanels");
static_assert(offsetof(BackendSubsystem_OpenGalleryPanels, GalleryCode) == 0x000000, "Member 'BackendSubsystem_OpenGalleryPanels::GalleryCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_OpenGalleryPanels, PanelNumbers) == 0x000008, "Member 'BackendSubsystem_OpenGalleryPanels::PanelNumbers' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_OpenGalleryPanels, ReturnValue) == 0x000018, "Member 'BackendSubsystem_OpenGalleryPanels::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.OpenGalleryPanelsImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_OpenGalleryPanelsImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OpenGalleryPanelsImpl) == 0x000008, "Wrong alignment on BackendSubsystem_OpenGalleryPanelsImpl");
static_assert(sizeof(BackendSubsystem_OpenGalleryPanelsImpl) == 0x000018, "Wrong size on BackendSubsystem_OpenGalleryPanelsImpl");
static_assert(offsetof(BackendSubsystem_OpenGalleryPanelsImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_OpenGalleryPanelsImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_OpenGalleryPanelsImpl, Args) == 0x000008, "Member 'BackendSubsystem_OpenGalleryPanelsImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.OpenNotice
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_OpenNotice final
{
public:
	class FString                                 NoticeId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_OpenNotice) == 0x000008, "Wrong alignment on BackendSubsystem_OpenNotice");
static_assert(sizeof(BackendSubsystem_OpenNotice) == 0x000018, "Wrong size on BackendSubsystem_OpenNotice");
static_assert(offsetof(BackendSubsystem_OpenNotice, NoticeId) == 0x000000, "Member 'BackendSubsystem_OpenNotice::NoticeId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_OpenNotice, ReturnValue) == 0x000010, "Member 'BackendSubsystem_OpenNotice::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.OpenNoticeImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_OpenNoticeImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OpenNoticeImpl) == 0x000008, "Wrong alignment on BackendSubsystem_OpenNoticeImpl");
static_assert(sizeof(BackendSubsystem_OpenNoticeImpl) == 0x000018, "Wrong size on BackendSubsystem_OpenNoticeImpl");
static_assert(offsetof(BackendSubsystem_OpenNoticeImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_OpenNoticeImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_OpenNoticeImpl, Args) == 0x000008, "Member 'BackendSubsystem_OpenNoticeImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.QuitBattle
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_QuitBattle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_QuitBattle) == 0x000001, "Wrong alignment on BackendSubsystem_QuitBattle");
static_assert(sizeof(BackendSubsystem_QuitBattle) == 0x000001, "Wrong size on BackendSubsystem_QuitBattle");
static_assert(offsetof(BackendSubsystem_QuitBattle, ReturnValue) == 0x000000, "Member 'BackendSubsystem_QuitBattle::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.ReceiveCampaignLoginBonus
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_ReceiveCampaignLoginBonus final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_ReceiveCampaignLoginBonus) == 0x000004, "Wrong alignment on BackendSubsystem_ReceiveCampaignLoginBonus");
static_assert(sizeof(BackendSubsystem_ReceiveCampaignLoginBonus) == 0x000004, "Wrong size on BackendSubsystem_ReceiveCampaignLoginBonus");
static_assert(offsetof(BackendSubsystem_ReceiveCampaignLoginBonus, ReturnValue) == 0x000000, "Member 'BackendSubsystem_ReceiveCampaignLoginBonus::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.ReceiveDailyLoginBonus
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_ReceiveDailyLoginBonus final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_ReceiveDailyLoginBonus) == 0x000004, "Wrong alignment on BackendSubsystem_ReceiveDailyLoginBonus");
static_assert(sizeof(BackendSubsystem_ReceiveDailyLoginBonus) == 0x000004, "Wrong size on BackendSubsystem_ReceiveDailyLoginBonus");
static_assert(offsetof(BackendSubsystem_ReceiveDailyLoginBonus, ReturnValue) == 0x000000, "Member 'BackendSubsystem_ReceiveDailyLoginBonus::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.ReceiveEventLoginBonus
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_ReceiveEventLoginBonus final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_ReceiveEventLoginBonus) == 0x000004, "Wrong alignment on BackendSubsystem_ReceiveEventLoginBonus");
static_assert(sizeof(BackendSubsystem_ReceiveEventLoginBonus) == 0x000004, "Wrong size on BackendSubsystem_ReceiveEventLoginBonus");
static_assert(offsetof(BackendSubsystem_ReceiveEventLoginBonus, ReturnValue) == 0x000000, "Member 'BackendSubsystem_ReceiveEventLoginBonus::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.ReceiveLoginBonus
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_ReceiveLoginBonus final
{
public:
	TArray<int32>                                 LoginBonusCodes;                                   // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_ReceiveLoginBonus) == 0x000008, "Wrong alignment on BackendSubsystem_ReceiveLoginBonus");
static_assert(sizeof(BackendSubsystem_ReceiveLoginBonus) == 0x000018, "Wrong size on BackendSubsystem_ReceiveLoginBonus");
static_assert(offsetof(BackendSubsystem_ReceiveLoginBonus, LoginBonusCodes) == 0x000000, "Member 'BackendSubsystem_ReceiveLoginBonus::LoginBonusCodes' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_ReceiveLoginBonus, ReturnValue) == 0x000010, "Member 'BackendSubsystem_ReceiveLoginBonus::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.ReceiveLoginBonusCommand
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_ReceiveLoginBonusCommand final
{
public:
	TArray<class FString>                         Args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_ReceiveLoginBonusCommand) == 0x000008, "Wrong alignment on BackendSubsystem_ReceiveLoginBonusCommand");
static_assert(sizeof(BackendSubsystem_ReceiveLoginBonusCommand) == 0x000010, "Wrong size on BackendSubsystem_ReceiveLoginBonusCommand");
static_assert(offsetof(BackendSubsystem_ReceiveLoginBonusCommand, Args) == 0x000000, "Member 'BackendSubsystem_ReceiveLoginBonusCommand::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.ReceiveLoginBonusImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_ReceiveLoginBonusImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_ReceiveLoginBonusImpl) == 0x000008, "Wrong alignment on BackendSubsystem_ReceiveLoginBonusImpl");
static_assert(sizeof(BackendSubsystem_ReceiveLoginBonusImpl) == 0x000018, "Wrong size on BackendSubsystem_ReceiveLoginBonusImpl");
static_assert(offsetof(BackendSubsystem_ReceiveLoginBonusImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_ReceiveLoginBonusImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_ReceiveLoginBonusImpl, Args) == 0x000008, "Member 'BackendSubsystem_ReceiveLoginBonusImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.ReceiveMissionAchievement
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_ReceiveMissionAchievement final
{
public:
	int32                                         MissionCode;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_ReceiveMissionAchievement) == 0x000004, "Wrong alignment on BackendSubsystem_ReceiveMissionAchievement");
static_assert(sizeof(BackendSubsystem_ReceiveMissionAchievement) == 0x000008, "Wrong size on BackendSubsystem_ReceiveMissionAchievement");
static_assert(offsetof(BackendSubsystem_ReceiveMissionAchievement, MissionCode) == 0x000000, "Member 'BackendSubsystem_ReceiveMissionAchievement::MissionCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_ReceiveMissionAchievement, ReturnValue) == 0x000004, "Member 'BackendSubsystem_ReceiveMissionAchievement::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.ReceiveMissionAchievementImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_ReceiveMissionAchievementImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_ReceiveMissionAchievementImpl) == 0x000008, "Wrong alignment on BackendSubsystem_ReceiveMissionAchievementImpl");
static_assert(sizeof(BackendSubsystem_ReceiveMissionAchievementImpl) == 0x000018, "Wrong size on BackendSubsystem_ReceiveMissionAchievementImpl");
static_assert(offsetof(BackendSubsystem_ReceiveMissionAchievementImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_ReceiveMissionAchievementImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_ReceiveMissionAchievementImpl, Args) == 0x000008, "Member 'BackendSubsystem_ReceiveMissionAchievementImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.ReceiveMissionAchievements
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_ReceiveMissionAchievements final
{
public:
	TArray<int32>                                 MissionCodes;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_ReceiveMissionAchievements) == 0x000008, "Wrong alignment on BackendSubsystem_ReceiveMissionAchievements");
static_assert(sizeof(BackendSubsystem_ReceiveMissionAchievements) == 0x000018, "Wrong size on BackendSubsystem_ReceiveMissionAchievements");
static_assert(offsetof(BackendSubsystem_ReceiveMissionAchievements, MissionCodes) == 0x000000, "Member 'BackendSubsystem_ReceiveMissionAchievements::MissionCodes' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_ReceiveMissionAchievements, ReturnValue) == 0x000010, "Member 'BackendSubsystem_ReceiveMissionAchievements::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.RegisterMissionProgress
// 0x000C (0x000C - 0x0000)
struct BackendSubsystem_RegisterMissionProgress final
{
public:
	int32                                         MissionCode;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_RegisterMissionProgress) == 0x000004, "Wrong alignment on BackendSubsystem_RegisterMissionProgress");
static_assert(sizeof(BackendSubsystem_RegisterMissionProgress) == 0x00000C, "Wrong size on BackendSubsystem_RegisterMissionProgress");
static_assert(offsetof(BackendSubsystem_RegisterMissionProgress, MissionCode) == 0x000000, "Member 'BackendSubsystem_RegisterMissionProgress::MissionCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_RegisterMissionProgress, Value) == 0x000004, "Member 'BackendSubsystem_RegisterMissionProgress::Value' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_RegisterMissionProgress, ReturnValue) == 0x000008, "Member 'BackendSubsystem_RegisterMissionProgress::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.RegisterMissionProgress_DS
// 0x0020 (0x0020 - 0x0000)
struct BackendSubsystem_RegisterMissionProgress_DS final
{
public:
	int32                                         MissionCode;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerId;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_RegisterMissionProgress_DS) == 0x000008, "Wrong alignment on BackendSubsystem_RegisterMissionProgress_DS");
static_assert(sizeof(BackendSubsystem_RegisterMissionProgress_DS) == 0x000020, "Wrong size on BackendSubsystem_RegisterMissionProgress_DS");
static_assert(offsetof(BackendSubsystem_RegisterMissionProgress_DS, MissionCode) == 0x000000, "Member 'BackendSubsystem_RegisterMissionProgress_DS::MissionCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_RegisterMissionProgress_DS, Value) == 0x000004, "Member 'BackendSubsystem_RegisterMissionProgress_DS::Value' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_RegisterMissionProgress_DS, PlayerId) == 0x000008, "Member 'BackendSubsystem_RegisterMissionProgress_DS::PlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_RegisterMissionProgress_DS, ReturnValue) == 0x000018, "Member 'BackendSubsystem_RegisterMissionProgress_DS::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.RemovePlayer_DS
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_RemovePlayer_DS final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_RemovePlayer_DS) == 0x000008, "Wrong alignment on BackendSubsystem_RemovePlayer_DS");
static_assert(sizeof(BackendSubsystem_RemovePlayer_DS) == 0x000010, "Wrong size on BackendSubsystem_RemovePlayer_DS");
static_assert(offsetof(BackendSubsystem_RemovePlayer_DS, PlayerId) == 0x000000, "Member 'BackendSubsystem_RemovePlayer_DS::PlayerId' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.ResetBnidLink
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_ResetBnidLink final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_ResetBnidLink) == 0x000004, "Wrong alignment on BackendSubsystem_ResetBnidLink");
static_assert(sizeof(BackendSubsystem_ResetBnidLink) == 0x000004, "Wrong size on BackendSubsystem_ResetBnidLink");
static_assert(offsetof(BackendSubsystem_ResetBnidLink, ReturnValue) == 0x000000, "Member 'BackendSubsystem_ResetBnidLink::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.ResetBnidLinkImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_ResetBnidLinkImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_ResetBnidLinkImpl) == 0x000008, "Wrong alignment on BackendSubsystem_ResetBnidLinkImpl");
static_assert(sizeof(BackendSubsystem_ResetBnidLinkImpl) == 0x000018, "Wrong size on BackendSubsystem_ResetBnidLinkImpl");
static_assert(offsetof(BackendSubsystem_ResetBnidLinkImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_ResetBnidLinkImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_ResetBnidLinkImpl, Args) == 0x000008, "Member 'BackendSubsystem_ResetBnidLinkImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.ResetDedicatedServerCommand
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_ResetDedicatedServerCommand final
{
public:
	TArray<class FString>                         Args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_ResetDedicatedServerCommand) == 0x000008, "Wrong alignment on BackendSubsystem_ResetDedicatedServerCommand");
static_assert(sizeof(BackendSubsystem_ResetDedicatedServerCommand) == 0x000010, "Wrong size on BackendSubsystem_ResetDedicatedServerCommand");
static_assert(offsetof(BackendSubsystem_ResetDedicatedServerCommand, Args) == 0x000000, "Member 'BackendSubsystem_ResetDedicatedServerCommand::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.ResetMissionProgress
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_ResetMissionProgress final
{
public:
	int32                                         MissionCode;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_ResetMissionProgress) == 0x000004, "Wrong alignment on BackendSubsystem_ResetMissionProgress");
static_assert(sizeof(BackendSubsystem_ResetMissionProgress) == 0x000008, "Wrong size on BackendSubsystem_ResetMissionProgress");
static_assert(offsetof(BackendSubsystem_ResetMissionProgress, MissionCode) == 0x000000, "Member 'BackendSubsystem_ResetMissionProgress::MissionCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_ResetMissionProgress, ReturnValue) == 0x000004, "Member 'BackendSubsystem_ResetMissionProgress::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.ResetMissionProgress_DS
// 0x0020 (0x0020 - 0x0000)
struct BackendSubsystem_ResetMissionProgress_DS final
{
public:
	int32                                         MissionCode;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerId;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_ResetMissionProgress_DS) == 0x000008, "Wrong alignment on BackendSubsystem_ResetMissionProgress_DS");
static_assert(sizeof(BackendSubsystem_ResetMissionProgress_DS) == 0x000020, "Wrong size on BackendSubsystem_ResetMissionProgress_DS");
static_assert(offsetof(BackendSubsystem_ResetMissionProgress_DS, MissionCode) == 0x000000, "Member 'BackendSubsystem_ResetMissionProgress_DS::MissionCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_ResetMissionProgress_DS, PlayerId) == 0x000008, "Member 'BackendSubsystem_ResetMissionProgress_DS::PlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_ResetMissionProgress_DS, ReturnValue) == 0x000018, "Member 'BackendSubsystem_ResetMissionProgress_DS::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.ResetMyAd
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_ResetMyAd final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_ResetMyAd) == 0x000008, "Wrong alignment on BackendSubsystem_ResetMyAd");
static_assert(sizeof(BackendSubsystem_ResetMyAd) == 0x000018, "Wrong size on BackendSubsystem_ResetMyAd");
static_assert(offsetof(BackendSubsystem_ResetMyAd, ID) == 0x000000, "Member 'BackendSubsystem_ResetMyAd::ID' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_ResetMyAd, ReturnValue) == 0x000010, "Member 'BackendSubsystem_ResetMyAd::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.ResetMyAdImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_ResetMyAdImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_ResetMyAdImpl) == 0x000008, "Wrong alignment on BackendSubsystem_ResetMyAdImpl");
static_assert(sizeof(BackendSubsystem_ResetMyAdImpl) == 0x000018, "Wrong size on BackendSubsystem_ResetMyAdImpl");
static_assert(offsetof(BackendSubsystem_ResetMyAdImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_ResetMyAdImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_ResetMyAdImpl, Args) == 0x000008, "Member 'BackendSubsystem_ResetMyAdImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.ResetProxyServerCommand
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_ResetProxyServerCommand final
{
public:
	TArray<class FString>                         Args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_ResetProxyServerCommand) == 0x000008, "Wrong alignment on BackendSubsystem_ResetProxyServerCommand");
static_assert(sizeof(BackendSubsystem_ResetProxyServerCommand) == 0x000010, "Wrong size on BackendSubsystem_ResetProxyServerCommand");
static_assert(offsetof(BackendSubsystem_ResetProxyServerCommand, Args) == 0x000000, "Member 'BackendSubsystem_ResetProxyServerCommand::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.ResignGuildLeaderImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_ResignGuildLeaderImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_ResignGuildLeaderImpl) == 0x000008, "Wrong alignment on BackendSubsystem_ResignGuildLeaderImpl");
static_assert(sizeof(BackendSubsystem_ResignGuildLeaderImpl) == 0x000018, "Wrong size on BackendSubsystem_ResignGuildLeaderImpl");
static_assert(offsetof(BackendSubsystem_ResignGuildLeaderImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_ResignGuildLeaderImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_ResignGuildLeaderImpl, Args) == 0x000008, "Member 'BackendSubsystem_ResignGuildLeaderImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.RunLottery
// 0x0020 (0x0020 - 0x0000)
struct BackendSubsystem_RunLottery final
{
public:
	int32                                         LotteryCode;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PaymentId;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_RunLottery) == 0x000008, "Wrong alignment on BackendSubsystem_RunLottery");
static_assert(sizeof(BackendSubsystem_RunLottery) == 0x000020, "Wrong size on BackendSubsystem_RunLottery");
static_assert(offsetof(BackendSubsystem_RunLottery, LotteryCode) == 0x000000, "Member 'BackendSubsystem_RunLottery::LotteryCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_RunLottery, PaymentId) == 0x000008, "Member 'BackendSubsystem_RunLottery::PaymentId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_RunLottery, ReturnValue) == 0x000018, "Member 'BackendSubsystem_RunLottery::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.RunLotteryImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_RunLotteryImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_RunLotteryImpl) == 0x000008, "Wrong alignment on BackendSubsystem_RunLotteryImpl");
static_assert(sizeof(BackendSubsystem_RunLotteryImpl) == 0x000018, "Wrong size on BackendSubsystem_RunLotteryImpl");
static_assert(offsetof(BackendSubsystem_RunLotteryImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_RunLotteryImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_RunLotteryImpl, Args) == 0x000008, "Member 'BackendSubsystem_RunLotteryImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SaveCustomizesPreset
// 0x0048 (0x0048 - 0x0000)
struct BackendSubsystem_SaveCustomizesPreset final
{
public:
	int32                                         CharacterCode;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PresetNo;                                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostumeCode;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 VoiceCodes;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 AppealCodes;                                       // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 EmblemCodes;                                       // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         AuraLevel;                                         // 0x0040(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0044(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SaveCustomizesPreset) == 0x000008, "Wrong alignment on BackendSubsystem_SaveCustomizesPreset");
static_assert(sizeof(BackendSubsystem_SaveCustomizesPreset) == 0x000048, "Wrong size on BackendSubsystem_SaveCustomizesPreset");
static_assert(offsetof(BackendSubsystem_SaveCustomizesPreset, CharacterCode) == 0x000000, "Member 'BackendSubsystem_SaveCustomizesPreset::CharacterCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SaveCustomizesPreset, PresetNo) == 0x000004, "Member 'BackendSubsystem_SaveCustomizesPreset::PresetNo' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SaveCustomizesPreset, CostumeCode) == 0x000008, "Member 'BackendSubsystem_SaveCustomizesPreset::CostumeCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SaveCustomizesPreset, VoiceCodes) == 0x000010, "Member 'BackendSubsystem_SaveCustomizesPreset::VoiceCodes' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SaveCustomizesPreset, AppealCodes) == 0x000020, "Member 'BackendSubsystem_SaveCustomizesPreset::AppealCodes' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SaveCustomizesPreset, EmblemCodes) == 0x000030, "Member 'BackendSubsystem_SaveCustomizesPreset::EmblemCodes' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SaveCustomizesPreset, AuraLevel) == 0x000040, "Member 'BackendSubsystem_SaveCustomizesPreset::AuraLevel' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SaveCustomizesPreset, ReturnValue) == 0x000044, "Member 'BackendSubsystem_SaveCustomizesPreset::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SaveCustomizesPresetImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_SaveCustomizesPresetImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SaveCustomizesPresetImpl) == 0x000008, "Wrong alignment on BackendSubsystem_SaveCustomizesPresetImpl");
static_assert(sizeof(BackendSubsystem_SaveCustomizesPresetImpl) == 0x000018, "Wrong size on BackendSubsystem_SaveCustomizesPresetImpl");
static_assert(offsetof(BackendSubsystem_SaveCustomizesPresetImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_SaveCustomizesPresetImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SaveCustomizesPresetImpl, Args) == 0x000008, "Member 'BackendSubsystem_SaveCustomizesPresetImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SaveJsonDatabaseParamsCommand
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_SaveJsonDatabaseParamsCommand final
{
public:
	TArray<class FString>                         Args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SaveJsonDatabaseParamsCommand) == 0x000008, "Wrong alignment on BackendSubsystem_SaveJsonDatabaseParamsCommand");
static_assert(sizeof(BackendSubsystem_SaveJsonDatabaseParamsCommand) == 0x000010, "Wrong size on BackendSubsystem_SaveJsonDatabaseParamsCommand");
static_assert(offsetof(BackendSubsystem_SaveJsonDatabaseParamsCommand, Args) == 0x000000, "Member 'BackendSubsystem_SaveJsonDatabaseParamsCommand::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SaveSetting
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_SaveSetting final
{
public:
	bool                                          bBattleRecord;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AuraDisplayTarget;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AuraDisplayArea;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SaveSetting) == 0x000004, "Wrong alignment on BackendSubsystem_SaveSetting");
static_assert(sizeof(BackendSubsystem_SaveSetting) == 0x000010, "Wrong size on BackendSubsystem_SaveSetting");
static_assert(offsetof(BackendSubsystem_SaveSetting, bBattleRecord) == 0x000000, "Member 'BackendSubsystem_SaveSetting::bBattleRecord' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SaveSetting, AuraDisplayTarget) == 0x000004, "Member 'BackendSubsystem_SaveSetting::AuraDisplayTarget' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SaveSetting, AuraDisplayArea) == 0x000008, "Member 'BackendSubsystem_SaveSetting::AuraDisplayArea' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SaveSetting, ReturnValue) == 0x00000C, "Member 'BackendSubsystem_SaveSetting::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SaveSettingImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_SaveSettingImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SaveSettingImpl) == 0x000008, "Wrong alignment on BackendSubsystem_SaveSettingImpl");
static_assert(sizeof(BackendSubsystem_SaveSettingImpl) == 0x000018, "Wrong size on BackendSubsystem_SaveSettingImpl");
static_assert(offsetof(BackendSubsystem_SaveSettingImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_SaveSettingImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SaveSettingImpl, Args) == 0x000008, "Member 'BackendSubsystem_SaveSettingImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SearchGuilds
// 0x0040 (0x0040 - 0x0000)
struct BackendSubsystem_SearchGuilds final
{
public:
	int32                                         PageNo;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDbGuildSearchCondition                Condition;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_SearchGuilds) == 0x000008, "Wrong alignment on BackendSubsystem_SearchGuilds");
static_assert(sizeof(BackendSubsystem_SearchGuilds) == 0x000040, "Wrong size on BackendSubsystem_SearchGuilds");
static_assert(offsetof(BackendSubsystem_SearchGuilds, PageNo) == 0x000000, "Member 'BackendSubsystem_SearchGuilds::PageNo' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SearchGuilds, Condition) == 0x000008, "Member 'BackendSubsystem_SearchGuilds::Condition' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SearchGuilds, ReturnValue) == 0x000038, "Member 'BackendSubsystem_SearchGuilds::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SearchGuildsImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_SearchGuildsImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SearchGuildsImpl) == 0x000008, "Wrong alignment on BackendSubsystem_SearchGuildsImpl");
static_assert(sizeof(BackendSubsystem_SearchGuildsImpl) == 0x000018, "Wrong size on BackendSubsystem_SearchGuildsImpl");
static_assert(offsetof(BackendSubsystem_SearchGuildsImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_SearchGuildsImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SearchGuildsImpl, Args) == 0x000008, "Member 'BackendSubsystem_SearchGuildsImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SearchPlayer
// 0x0020 (0x0020 - 0x0000)
struct BackendSubsystem_SearchPlayer final
{
public:
	int32                                         Limit;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageNo;                                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SearchWord;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFriendListSortOrder                          Sort;                                              // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SearchPlayer) == 0x000008, "Wrong alignment on BackendSubsystem_SearchPlayer");
static_assert(sizeof(BackendSubsystem_SearchPlayer) == 0x000020, "Wrong size on BackendSubsystem_SearchPlayer");
static_assert(offsetof(BackendSubsystem_SearchPlayer, Limit) == 0x000000, "Member 'BackendSubsystem_SearchPlayer::Limit' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SearchPlayer, PageNo) == 0x000004, "Member 'BackendSubsystem_SearchPlayer::PageNo' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SearchPlayer, SearchWord) == 0x000008, "Member 'BackendSubsystem_SearchPlayer::SearchWord' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SearchPlayer, Sort) == 0x000018, "Member 'BackendSubsystem_SearchPlayer::Sort' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SearchPlayer, ReturnValue) == 0x00001C, "Member 'BackendSubsystem_SearchPlayer::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SearchSquad
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_SearchSquad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SearchSquad) == 0x000001, "Wrong alignment on BackendSubsystem_SearchSquad");
static_assert(sizeof(BackendSubsystem_SearchSquad) == 0x000001, "Wrong size on BackendSubsystem_SearchSquad");
static_assert(offsetof(BackendSubsystem_SearchSquad, ReturnValue) == 0x000000, "Member 'BackendSubsystem_SearchSquad::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendBattlePhaseLike
// 0x0070 (0x0070 - 0x0000)
struct BackendSubsystem_SendBattlePhaseLike final
{
public:
	class FString                                 GameId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhaseNo;                                           // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EResultType, int32>                      LikeList;                                          // 0x0018(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EScreenName                                   EScreen;                                           // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x006C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SendBattlePhaseLike) == 0x000008, "Wrong alignment on BackendSubsystem_SendBattlePhaseLike");
static_assert(sizeof(BackendSubsystem_SendBattlePhaseLike) == 0x000070, "Wrong size on BackendSubsystem_SendBattlePhaseLike");
static_assert(offsetof(BackendSubsystem_SendBattlePhaseLike, GameId) == 0x000000, "Member 'BackendSubsystem_SendBattlePhaseLike::GameId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendBattlePhaseLike, PhaseNo) == 0x000010, "Member 'BackendSubsystem_SendBattlePhaseLike::PhaseNo' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendBattlePhaseLike, LikeList) == 0x000018, "Member 'BackendSubsystem_SendBattlePhaseLike::LikeList' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendBattlePhaseLike, EScreen) == 0x000068, "Member 'BackendSubsystem_SendBattlePhaseLike::EScreen' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendBattlePhaseLike, ReturnValue) == 0x00006C, "Member 'BackendSubsystem_SendBattlePhaseLike::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendBattlePhaseLikeImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_SendBattlePhaseLikeImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SendBattlePhaseLikeImpl) == 0x000008, "Wrong alignment on BackendSubsystem_SendBattlePhaseLikeImpl");
static_assert(sizeof(BackendSubsystem_SendBattlePhaseLikeImpl) == 0x000018, "Wrong size on BackendSubsystem_SendBattlePhaseLikeImpl");
static_assert(offsetof(BackendSubsystem_SendBattlePhaseLikeImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_SendBattlePhaseLikeImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendBattlePhaseLikeImpl, Args) == 0x000008, "Member 'BackendSubsystem_SendBattlePhaseLikeImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendBillboardChartLike
// 0x0020 (0x0020 - 0x0000)
struct BackendSubsystem_SendBillboardChartLike final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELikeType                                     EType;                                             // 0x0014(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScreenName                                   EScreen;                                           // 0x0015(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_SendBillboardChartLike) == 0x000008, "Wrong alignment on BackendSubsystem_SendBillboardChartLike");
static_assert(sizeof(BackendSubsystem_SendBillboardChartLike) == 0x000020, "Wrong size on BackendSubsystem_SendBillboardChartLike");
static_assert(offsetof(BackendSubsystem_SendBillboardChartLike, PlayerId) == 0x000000, "Member 'BackendSubsystem_SendBillboardChartLike::PlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendBillboardChartLike, Count) == 0x000010, "Member 'BackendSubsystem_SendBillboardChartLike::Count' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendBillboardChartLike, EType) == 0x000014, "Member 'BackendSubsystem_SendBillboardChartLike::EType' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendBillboardChartLike, EScreen) == 0x000015, "Member 'BackendSubsystem_SendBillboardChartLike::EScreen' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendBillboardChartLike, ReturnValue) == 0x000018, "Member 'BackendSubsystem_SendBillboardChartLike::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendBillboardChartLikeImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_SendBillboardChartLikeImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SendBillboardChartLikeImpl) == 0x000008, "Wrong alignment on BackendSubsystem_SendBillboardChartLikeImpl");
static_assert(sizeof(BackendSubsystem_SendBillboardChartLikeImpl) == 0x000018, "Wrong size on BackendSubsystem_SendBillboardChartLikeImpl");
static_assert(offsetof(BackendSubsystem_SendBillboardChartLikeImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_SendBillboardChartLikeImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendBillboardChartLikeImpl, Args) == 0x000008, "Member 'BackendSubsystem_SendBillboardChartLikeImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendChat
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_SendChat final
{
public:
	class FString                                 Chat;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_SendChat) == 0x000008, "Wrong alignment on BackendSubsystem_SendChat");
static_assert(sizeof(BackendSubsystem_SendChat) == 0x000018, "Wrong size on BackendSubsystem_SendChat");
static_assert(offsetof(BackendSubsystem_SendChat, Chat) == 0x000000, "Member 'BackendSubsystem_SendChat::Chat' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendChat, ReturnValue) == 0x000010, "Member 'BackendSubsystem_SendChat::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendChatImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_SendChatImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SendChatImpl) == 0x000008, "Wrong alignment on BackendSubsystem_SendChatImpl");
static_assert(sizeof(BackendSubsystem_SendChatImpl) == 0x000018, "Wrong size on BackendSubsystem_SendChatImpl");
static_assert(offsetof(BackendSubsystem_SendChatImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_SendChatImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendChatImpl, Args) == 0x000008, "Member 'BackendSubsystem_SendChatImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendCustomRoomAppeal
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_SendCustomRoomAppeal final
{
public:
	int32                                         AppealCode;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SendCustomRoomAppeal) == 0x000004, "Wrong alignment on BackendSubsystem_SendCustomRoomAppeal");
static_assert(sizeof(BackendSubsystem_SendCustomRoomAppeal) == 0x000008, "Wrong size on BackendSubsystem_SendCustomRoomAppeal");
static_assert(offsetof(BackendSubsystem_SendCustomRoomAppeal, AppealCode) == 0x000000, "Member 'BackendSubsystem_SendCustomRoomAppeal::AppealCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendCustomRoomAppeal, ReturnValue) == 0x000004, "Member 'BackendSubsystem_SendCustomRoomAppeal::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendCustomRoomAppealImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_SendCustomRoomAppealImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SendCustomRoomAppealImpl) == 0x000008, "Wrong alignment on BackendSubsystem_SendCustomRoomAppealImpl");
static_assert(sizeof(BackendSubsystem_SendCustomRoomAppealImpl) == 0x000018, "Wrong size on BackendSubsystem_SendCustomRoomAppealImpl");
static_assert(offsetof(BackendSubsystem_SendCustomRoomAppealImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_SendCustomRoomAppealImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendCustomRoomAppealImpl, Args) == 0x000008, "Member 'BackendSubsystem_SendCustomRoomAppealImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendFinalResult_DS
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_SendFinalResult_DS final
{
public:
	TArray<struct FResultData>                    ResultList;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_SendFinalResult_DS) == 0x000008, "Wrong alignment on BackendSubsystem_SendFinalResult_DS");
static_assert(sizeof(BackendSubsystem_SendFinalResult_DS) == 0x000018, "Wrong size on BackendSubsystem_SendFinalResult_DS");
static_assert(offsetof(BackendSubsystem_SendFinalResult_DS, ResultList) == 0x000000, "Member 'BackendSubsystem_SendFinalResult_DS::ResultList' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendFinalResult_DS, ReturnValue) == 0x000010, "Member 'BackendSubsystem_SendFinalResult_DS::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendFriendshipProposal
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_SendFriendshipProposal final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_SendFriendshipProposal) == 0x000008, "Wrong alignment on BackendSubsystem_SendFriendshipProposal");
static_assert(sizeof(BackendSubsystem_SendFriendshipProposal) == 0x000018, "Wrong size on BackendSubsystem_SendFriendshipProposal");
static_assert(offsetof(BackendSubsystem_SendFriendshipProposal, PlayerId) == 0x000000, "Member 'BackendSubsystem_SendFriendshipProposal::PlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendFriendshipProposal, ReturnValue) == 0x000010, "Member 'BackendSubsystem_SendFriendshipProposal::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendFriendshipProposalImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_SendFriendshipProposalImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SendFriendshipProposalImpl) == 0x000008, "Wrong alignment on BackendSubsystem_SendFriendshipProposalImpl");
static_assert(sizeof(BackendSubsystem_SendFriendshipProposalImpl) == 0x000018, "Wrong size on BackendSubsystem_SendFriendshipProposalImpl");
static_assert(offsetof(BackendSubsystem_SendFriendshipProposalImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_SendFriendshipProposalImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendFriendshipProposalImpl, Args) == 0x000008, "Member 'BackendSubsystem_SendFriendshipProposalImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendGetTrophyKpi
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_SendGetTrophyKpi final
{
public:
	int32                                         TrophyCode;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SendGetTrophyKpi) == 0x000004, "Wrong alignment on BackendSubsystem_SendGetTrophyKpi");
static_assert(sizeof(BackendSubsystem_SendGetTrophyKpi) == 0x000004, "Wrong size on BackendSubsystem_SendGetTrophyKpi");
static_assert(offsetof(BackendSubsystem_SendGetTrophyKpi, TrophyCode) == 0x000000, "Member 'BackendSubsystem_SendGetTrophyKpi::TrophyCode' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendGuildChatLogKpi
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_SendGuildChatLogKpi final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SendGuildChatLogKpi) == 0x000008, "Wrong alignment on BackendSubsystem_SendGuildChatLogKpi");
static_assert(sizeof(BackendSubsystem_SendGuildChatLogKpi) == 0x000010, "Wrong size on BackendSubsystem_SendGuildChatLogKpi");
static_assert(offsetof(BackendSubsystem_SendGuildChatLogKpi, Message) == 0x000000, "Member 'BackendSubsystem_SendGuildChatLogKpi::Message' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendGuildRecordLike
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_SendGuildRecordLike final
{
public:
	class FString                                 RecordId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SendGuildRecordLike) == 0x000008, "Wrong alignment on BackendSubsystem_SendGuildRecordLike");
static_assert(sizeof(BackendSubsystem_SendGuildRecordLike) == 0x000018, "Wrong size on BackendSubsystem_SendGuildRecordLike");
static_assert(offsetof(BackendSubsystem_SendGuildRecordLike, RecordId) == 0x000000, "Member 'BackendSubsystem_SendGuildRecordLike::RecordId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendGuildRecordLike, Count) == 0x000010, "Member 'BackendSubsystem_SendGuildRecordLike::Count' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendGuildRecordLike, ReturnValue) == 0x000014, "Member 'BackendSubsystem_SendGuildRecordLike::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendGuildRecordLikeImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_SendGuildRecordLikeImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SendGuildRecordLikeImpl) == 0x000008, "Wrong alignment on BackendSubsystem_SendGuildRecordLikeImpl");
static_assert(sizeof(BackendSubsystem_SendGuildRecordLikeImpl) == 0x000018, "Wrong size on BackendSubsystem_SendGuildRecordLikeImpl");
static_assert(offsetof(BackendSubsystem_SendGuildRecordLikeImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_SendGuildRecordLikeImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendGuildRecordLikeImpl, Args) == 0x000008, "Member 'BackendSubsystem_SendGuildRecordLikeImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendLevelTransactionKpi
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_SendLevelTransactionKpi final
{
public:
	EScreenName                                   EScreen;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SendLevelTransactionKpi) == 0x000001, "Wrong alignment on BackendSubsystem_SendLevelTransactionKpi");
static_assert(sizeof(BackendSubsystem_SendLevelTransactionKpi) == 0x000001, "Wrong size on BackendSubsystem_SendLevelTransactionKpi");
static_assert(offsetof(BackendSubsystem_SendLevelTransactionKpi, EScreen) == 0x000000, "Member 'BackendSubsystem_SendLevelTransactionKpi::EScreen' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendPenaltyPoint
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_SendPenaltyPoint final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdPenaltyType                                Reason;                                            // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SendPenaltyPoint) == 0x000008, "Wrong alignment on BackendSubsystem_SendPenaltyPoint");
static_assert(sizeof(BackendSubsystem_SendPenaltyPoint) == 0x000018, "Wrong size on BackendSubsystem_SendPenaltyPoint");
static_assert(offsetof(BackendSubsystem_SendPenaltyPoint, PlayerId) == 0x000000, "Member 'BackendSubsystem_SendPenaltyPoint::PlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendPenaltyPoint, Reason) == 0x000010, "Member 'BackendSubsystem_SendPenaltyPoint::Reason' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendPenaltyPoint, ReturnValue) == 0x000014, "Member 'BackendSubsystem_SendPenaltyPoint::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendPenaltyPoint_DS
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_SendPenaltyPoint_DS final
{
public:
	TArray<struct FPenaltyData>                   PenaltyList;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_SendPenaltyPoint_DS) == 0x000008, "Wrong alignment on BackendSubsystem_SendPenaltyPoint_DS");
static_assert(sizeof(BackendSubsystem_SendPenaltyPoint_DS) == 0x000018, "Wrong size on BackendSubsystem_SendPenaltyPoint_DS");
static_assert(offsetof(BackendSubsystem_SendPenaltyPoint_DS, PenaltyList) == 0x000000, "Member 'BackendSubsystem_SendPenaltyPoint_DS::PenaltyList' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendPenaltyPoint_DS, ReturnValue) == 0x000010, "Member 'BackendSubsystem_SendPenaltyPoint_DS::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendPenaltyPointImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_SendPenaltyPointImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SendPenaltyPointImpl) == 0x000008, "Wrong alignment on BackendSubsystem_SendPenaltyPointImpl");
static_assert(sizeof(BackendSubsystem_SendPenaltyPointImpl) == 0x000018, "Wrong size on BackendSubsystem_SendPenaltyPointImpl");
static_assert(offsetof(BackendSubsystem_SendPenaltyPointImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_SendPenaltyPointImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendPenaltyPointImpl, Args) == 0x000008, "Member 'BackendSubsystem_SendPenaltyPointImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendPhaseResult_DS
// 0x0030 (0x0030 - 0x0000)
struct BackendSubsystem_SendPhaseResult_DS final
{
public:
	int32                                         PhaseNo;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFinalPhase;                                       // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPhaseResult>                   ResultList;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FBillBoardLike>                 LikeList;                                          // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EScreenName                                   EScreen;                                           // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SendPhaseResult_DS) == 0x000008, "Wrong alignment on BackendSubsystem_SendPhaseResult_DS");
static_assert(sizeof(BackendSubsystem_SendPhaseResult_DS) == 0x000030, "Wrong size on BackendSubsystem_SendPhaseResult_DS");
static_assert(offsetof(BackendSubsystem_SendPhaseResult_DS, PhaseNo) == 0x000000, "Member 'BackendSubsystem_SendPhaseResult_DS::PhaseNo' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendPhaseResult_DS, bFinalPhase) == 0x000004, "Member 'BackendSubsystem_SendPhaseResult_DS::bFinalPhase' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendPhaseResult_DS, ResultList) == 0x000008, "Member 'BackendSubsystem_SendPhaseResult_DS::ResultList' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendPhaseResult_DS, LikeList) == 0x000018, "Member 'BackendSubsystem_SendPhaseResult_DS::LikeList' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendPhaseResult_DS, EScreen) == 0x000028, "Member 'BackendSubsystem_SendPhaseResult_DS::EScreen' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendPhaseResult_DS, ReturnValue) == 0x00002C, "Member 'BackendSubsystem_SendPhaseResult_DS::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendRecommendNotificationKpi
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_SendRecommendNotificationKpi final
{
public:
	int32                                         NotificationCode;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRejection;                                        // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_SendRecommendNotificationKpi) == 0x000004, "Wrong alignment on BackendSubsystem_SendRecommendNotificationKpi");
static_assert(sizeof(BackendSubsystem_SendRecommendNotificationKpi) == 0x000008, "Wrong size on BackendSubsystem_SendRecommendNotificationKpi");
static_assert(offsetof(BackendSubsystem_SendRecommendNotificationKpi, NotificationCode) == 0x000000, "Member 'BackendSubsystem_SendRecommendNotificationKpi::NotificationCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendRecommendNotificationKpi, bRejection) == 0x000004, "Member 'BackendSubsystem_SendRecommendNotificationKpi::bRejection' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendSettingsKpi
// 0x000C (0x000C - 0x0000)
struct BackendSubsystem_SendSettingsKpi final
{
public:
	int32                                         Notification;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecordHide;                                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoiceChat;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SendSettingsKpi) == 0x000004, "Wrong alignment on BackendSubsystem_SendSettingsKpi");
static_assert(sizeof(BackendSubsystem_SendSettingsKpi) == 0x00000C, "Wrong size on BackendSubsystem_SendSettingsKpi");
static_assert(offsetof(BackendSubsystem_SendSettingsKpi, Notification) == 0x000000, "Member 'BackendSubsystem_SendSettingsKpi::Notification' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendSettingsKpi, RecordHide) == 0x000004, "Member 'BackendSubsystem_SendSettingsKpi::RecordHide' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendSettingsKpi, VoiceChat) == 0x000008, "Member 'BackendSubsystem_SendSettingsKpi::VoiceChat' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendSquadChatLogKpi
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_SendSquadChatLogKpi final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SendSquadChatLogKpi) == 0x000008, "Wrong alignment on BackendSubsystem_SendSquadChatLogKpi");
static_assert(sizeof(BackendSubsystem_SendSquadChatLogKpi) == 0x000010, "Wrong size on BackendSubsystem_SendSquadChatLogKpi");
static_assert(offsetof(BackendSubsystem_SendSquadChatLogKpi, Message) == 0x000000, "Member 'BackendSubsystem_SendSquadChatLogKpi::Message' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendSquadInvitation
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_SendSquadInvitation final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_SendSquadInvitation) == 0x000008, "Wrong alignment on BackendSubsystem_SendSquadInvitation");
static_assert(sizeof(BackendSubsystem_SendSquadInvitation) == 0x000018, "Wrong size on BackendSubsystem_SendSquadInvitation");
static_assert(offsetof(BackendSubsystem_SendSquadInvitation, PlayerId) == 0x000000, "Member 'BackendSubsystem_SendSquadInvitation::PlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendSquadInvitation, ReturnValue) == 0x000010, "Member 'BackendSubsystem_SendSquadInvitation::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendSquadInvitationImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_SendSquadInvitationImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SendSquadInvitationImpl) == 0x000008, "Wrong alignment on BackendSubsystem_SendSquadInvitationImpl");
static_assert(sizeof(BackendSubsystem_SendSquadInvitationImpl) == 0x000018, "Wrong size on BackendSubsystem_SendSquadInvitationImpl");
static_assert(offsetof(BackendSubsystem_SendSquadInvitationImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_SendSquadInvitationImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendSquadInvitationImpl, Args) == 0x000008, "Member 'BackendSubsystem_SendSquadInvitationImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendTeamUpAppeal
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_SendTeamUpAppeal final
{
public:
	int32                                         AppealCode;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SendTeamUpAppeal) == 0x000004, "Wrong alignment on BackendSubsystem_SendTeamUpAppeal");
static_assert(sizeof(BackendSubsystem_SendTeamUpAppeal) == 0x000008, "Wrong size on BackendSubsystem_SendTeamUpAppeal");
static_assert(offsetof(BackendSubsystem_SendTeamUpAppeal, AppealCode) == 0x000000, "Member 'BackendSubsystem_SendTeamUpAppeal::AppealCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendTeamUpAppeal, ReturnValue) == 0x000004, "Member 'BackendSubsystem_SendTeamUpAppeal::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendTeamUpAppealImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_SendTeamUpAppealImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SendTeamUpAppealImpl) == 0x000008, "Wrong alignment on BackendSubsystem_SendTeamUpAppealImpl");
static_assert(sizeof(BackendSubsystem_SendTeamUpAppealImpl) == 0x000018, "Wrong size on BackendSubsystem_SendTeamUpAppealImpl");
static_assert(offsetof(BackendSubsystem_SendTeamUpAppealImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_SendTeamUpAppealImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendTeamUpAppealImpl, Args) == 0x000008, "Member 'BackendSubsystem_SendTeamUpAppealImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendTeamUpChatMessage
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_SendTeamUpChatMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_SendTeamUpChatMessage) == 0x000008, "Wrong alignment on BackendSubsystem_SendTeamUpChatMessage");
static_assert(sizeof(BackendSubsystem_SendTeamUpChatMessage) == 0x000018, "Wrong size on BackendSubsystem_SendTeamUpChatMessage");
static_assert(offsetof(BackendSubsystem_SendTeamUpChatMessage, Message) == 0x000000, "Member 'BackendSubsystem_SendTeamUpChatMessage::Message' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendTeamUpChatMessage, ReturnValue) == 0x000010, "Member 'BackendSubsystem_SendTeamUpChatMessage::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendTeamUpChatMessageImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_SendTeamUpChatMessageImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SendTeamUpChatMessageImpl) == 0x000008, "Wrong alignment on BackendSubsystem_SendTeamUpChatMessageImpl");
static_assert(sizeof(BackendSubsystem_SendTeamUpChatMessageImpl) == 0x000018, "Wrong size on BackendSubsystem_SendTeamUpChatMessageImpl");
static_assert(offsetof(BackendSubsystem_SendTeamUpChatMessageImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_SendTeamUpChatMessageImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendTeamUpChatMessageImpl, Args) == 0x000008, "Member 'BackendSubsystem_SendTeamUpChatMessageImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendTeamUpChatTestCommand
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_SendTeamUpChatTestCommand final
{
public:
	TArray<class FString>                         Args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SendTeamUpChatTestCommand) == 0x000008, "Wrong alignment on BackendSubsystem_SendTeamUpChatTestCommand");
static_assert(sizeof(BackendSubsystem_SendTeamUpChatTestCommand) == 0x000010, "Wrong size on BackendSubsystem_SendTeamUpChatTestCommand");
static_assert(offsetof(BackendSubsystem_SendTeamUpChatTestCommand, Args) == 0x000000, "Member 'BackendSubsystem_SendTeamUpChatTestCommand::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendTextSpeechCommand
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_SendTextSpeechCommand final
{
public:
	TArray<class FString>                         Args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SendTextSpeechCommand) == 0x000008, "Wrong alignment on BackendSubsystem_SendTextSpeechCommand");
static_assert(sizeof(BackendSubsystem_SendTextSpeechCommand) == 0x000010, "Wrong size on BackendSubsystem_SendTextSpeechCommand");
static_assert(offsetof(BackendSubsystem_SendTextSpeechCommand, Args) == 0x000000, "Member 'BackendSubsystem_SendTextSpeechCommand::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendTutorialKpi
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_SendTutorialKpi final
{
public:
	int32                                         Step;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SendTutorialKpi) == 0x000004, "Wrong alignment on BackendSubsystem_SendTutorialKpi");
static_assert(sizeof(BackendSubsystem_SendTutorialKpi) == 0x000004, "Wrong size on BackendSubsystem_SendTutorialKpi");
static_assert(offsetof(BackendSubsystem_SendTutorialKpi, Step) == 0x000000, "Member 'BackendSubsystem_SendTutorialKpi::Step' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendViewProfileKpi
// 0x0028 (0x0028 - 0x0000)
struct BackendSubsystem_SendViewProfileKpi final
{
public:
	class FString                                 ViewCosmosId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScreenName                                   EScreen;                                           // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MyADId;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SendViewProfileKpi) == 0x000008, "Wrong alignment on BackendSubsystem_SendViewProfileKpi");
static_assert(sizeof(BackendSubsystem_SendViewProfileKpi) == 0x000028, "Wrong size on BackendSubsystem_SendViewProfileKpi");
static_assert(offsetof(BackendSubsystem_SendViewProfileKpi, ViewCosmosId) == 0x000000, "Member 'BackendSubsystem_SendViewProfileKpi::ViewCosmosId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendViewProfileKpi, EScreen) == 0x000010, "Member 'BackendSubsystem_SendViewProfileKpi::EScreen' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SendViewProfileKpi, MyADId) == 0x000018, "Member 'BackendSubsystem_SendViewProfileKpi::MyADId' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SetAutoKickCpu
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_SetAutoKickCpu final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SetAutoKickCpu) == 0x000001, "Wrong alignment on BackendSubsystem_SetAutoKickCpu");
static_assert(sizeof(BackendSubsystem_SetAutoKickCpu) == 0x000001, "Wrong size on BackendSubsystem_SetAutoKickCpu");
static_assert(offsetof(BackendSubsystem_SetAutoKickCpu, bEnable) == 0x000000, "Member 'BackendSubsystem_SetAutoKickCpu::bEnable' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SetAutoStartBattleSequence
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_SetAutoStartBattleSequence final
{
public:
	int32                                         battleSequence;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SetAutoStartBattleSequence) == 0x000004, "Wrong alignment on BackendSubsystem_SetAutoStartBattleSequence");
static_assert(sizeof(BackendSubsystem_SetAutoStartBattleSequence) == 0x000004, "Wrong size on BackendSubsystem_SetAutoStartBattleSequence");
static_assert(offsetof(BackendSubsystem_SetAutoStartBattleSequence, battleSequence) == 0x000000, "Member 'BackendSubsystem_SetAutoStartBattleSequence::battleSequence' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SetCallLoadPurchaseStatusCommand
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_SetCallLoadPurchaseStatusCommand final
{
public:
	TArray<class FString>                         Args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SetCallLoadPurchaseStatusCommand) == 0x000008, "Wrong alignment on BackendSubsystem_SetCallLoadPurchaseStatusCommand");
static_assert(sizeof(BackendSubsystem_SetCallLoadPurchaseStatusCommand) == 0x000010, "Wrong size on BackendSubsystem_SetCallLoadPurchaseStatusCommand");
static_assert(offsetof(BackendSubsystem_SetCallLoadPurchaseStatusCommand, Args) == 0x000000, "Member 'BackendSubsystem_SetCallLoadPurchaseStatusCommand::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SetCheckNetworkAvailableCommand
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_SetCheckNetworkAvailableCommand final
{
public:
	TArray<class FString>                         Args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SetCheckNetworkAvailableCommand) == 0x000008, "Wrong alignment on BackendSubsystem_SetCheckNetworkAvailableCommand");
static_assert(sizeof(BackendSubsystem_SetCheckNetworkAvailableCommand) == 0x000010, "Wrong size on BackendSubsystem_SetCheckNetworkAvailableCommand");
static_assert(offsetof(BackendSubsystem_SetCheckNetworkAvailableCommand, Args) == 0x000000, "Member 'BackendSubsystem_SetCheckNetworkAvailableCommand::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SetConnectionEnvironmentForDedicatedServer
// 0x0030 (0x0030 - 0x0000)
struct BackendSubsystem_SetConnectionEnvironmentForDedicatedServer final
{
public:
	class FString                                 Env;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Platform;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SetConnectionEnvironmentForDedicatedServer) == 0x000008, "Wrong alignment on BackendSubsystem_SetConnectionEnvironmentForDedicatedServer");
static_assert(sizeof(BackendSubsystem_SetConnectionEnvironmentForDedicatedServer) == 0x000030, "Wrong size on BackendSubsystem_SetConnectionEnvironmentForDedicatedServer");
static_assert(offsetof(BackendSubsystem_SetConnectionEnvironmentForDedicatedServer, Env) == 0x000000, "Member 'BackendSubsystem_SetConnectionEnvironmentForDedicatedServer::Env' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SetConnectionEnvironmentForDedicatedServer, Version) == 0x000010, "Member 'BackendSubsystem_SetConnectionEnvironmentForDedicatedServer::Version' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SetConnectionEnvironmentForDedicatedServer, Platform) == 0x000020, "Member 'BackendSubsystem_SetConnectionEnvironmentForDedicatedServer::Platform' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SetCustomRoomMember
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_SetCustomRoomMember final
{
public:
	TArray<struct FDbCustomMatchingMemberParamList> SquadList;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_SetCustomRoomMember) == 0x000008, "Wrong alignment on BackendSubsystem_SetCustomRoomMember");
static_assert(sizeof(BackendSubsystem_SetCustomRoomMember) == 0x000018, "Wrong size on BackendSubsystem_SetCustomRoomMember");
static_assert(offsetof(BackendSubsystem_SetCustomRoomMember, SquadList) == 0x000000, "Member 'BackendSubsystem_SetCustomRoomMember::SquadList' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SetCustomRoomMember, ReturnValue) == 0x000010, "Member 'BackendSubsystem_SetCustomRoomMember::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SetCustomRoomMemberData
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_SetCustomRoomMemberData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SetCustomRoomMemberData) == 0x000001, "Wrong alignment on BackendSubsystem_SetCustomRoomMemberData");
static_assert(sizeof(BackendSubsystem_SetCustomRoomMemberData) == 0x000001, "Wrong size on BackendSubsystem_SetCustomRoomMemberData");
static_assert(offsetof(BackendSubsystem_SetCustomRoomMemberData, ReturnValue) == 0x000000, "Member 'BackendSubsystem_SetCustomRoomMemberData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SetCustomRoomSettings
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_SetCustomRoomSettings final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SetCustomRoomSettings) == 0x000001, "Wrong alignment on BackendSubsystem_SetCustomRoomSettings");
static_assert(sizeof(BackendSubsystem_SetCustomRoomSettings) == 0x000001, "Wrong size on BackendSubsystem_SetCustomRoomSettings");
static_assert(offsetof(BackendSubsystem_SetCustomRoomSettings, ReturnValue) == 0x000000, "Member 'BackendSubsystem_SetCustomRoomSettings::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SetDedicatedServerCommand
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_SetDedicatedServerCommand final
{
public:
	TArray<class FString>                         Args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SetDedicatedServerCommand) == 0x000008, "Wrong alignment on BackendSubsystem_SetDedicatedServerCommand");
static_assert(sizeof(BackendSubsystem_SetDedicatedServerCommand) == 0x000010, "Wrong size on BackendSubsystem_SetDedicatedServerCommand");
static_assert(offsetof(BackendSubsystem_SetDedicatedServerCommand, Args) == 0x000000, "Member 'BackendSubsystem_SetDedicatedServerCommand::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SetEnableSpeechToText
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_SetEnableSpeechToText final
{
public:
	bool                                          bEnableSpeechToText;                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SetEnableSpeechToText) == 0x000001, "Wrong alignment on BackendSubsystem_SetEnableSpeechToText");
static_assert(sizeof(BackendSubsystem_SetEnableSpeechToText) == 0x000001, "Wrong size on BackendSubsystem_SetEnableSpeechToText");
static_assert(offsetof(BackendSubsystem_SetEnableSpeechToText, bEnableSpeechToText) == 0x000000, "Member 'BackendSubsystem_SetEnableSpeechToText::bEnableSpeechToText' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SetFakeNetScoreCommand
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_SetFakeNetScoreCommand final
{
public:
	TArray<class FString>                         Args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SetFakeNetScoreCommand) == 0x000008, "Wrong alignment on BackendSubsystem_SetFakeNetScoreCommand");
static_assert(sizeof(BackendSubsystem_SetFakeNetScoreCommand) == 0x000010, "Wrong size on BackendSubsystem_SetFakeNetScoreCommand");
static_assert(offsetof(BackendSubsystem_SetFakeNetScoreCommand, Args) == 0x000000, "Member 'BackendSubsystem_SetFakeNetScoreCommand::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SetForceMultiProcessSupportCommand
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_SetForceMultiProcessSupportCommand final
{
public:
	TArray<class FString>                         Args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SetForceMultiProcessSupportCommand) == 0x000008, "Wrong alignment on BackendSubsystem_SetForceMultiProcessSupportCommand");
static_assert(sizeof(BackendSubsystem_SetForceMultiProcessSupportCommand) == 0x000010, "Wrong size on BackendSubsystem_SetForceMultiProcessSupportCommand");
static_assert(offsetof(BackendSubsystem_SetForceMultiProcessSupportCommand, Args) == 0x000000, "Member 'BackendSubsystem_SetForceMultiProcessSupportCommand::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SetIgnoreSystemCheckError
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_SetIgnoreSystemCheckError final
{
public:
	bool                                          bIgnoreSystemCheckError;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SetIgnoreSystemCheckError) == 0x000001, "Wrong alignment on BackendSubsystem_SetIgnoreSystemCheckError");
static_assert(sizeof(BackendSubsystem_SetIgnoreSystemCheckError) == 0x000001, "Wrong size on BackendSubsystem_SetIgnoreSystemCheckError");
static_assert(offsetof(BackendSubsystem_SetIgnoreSystemCheckError, bIgnoreSystemCheckError) == 0x000000, "Member 'BackendSubsystem_SetIgnoreSystemCheckError::bIgnoreSystemCheckError' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SetIgnoreSystemCheckErrorCommand
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_SetIgnoreSystemCheckErrorCommand final
{
public:
	TArray<class FString>                         Args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SetIgnoreSystemCheckErrorCommand) == 0x000008, "Wrong alignment on BackendSubsystem_SetIgnoreSystemCheckErrorCommand");
static_assert(sizeof(BackendSubsystem_SetIgnoreSystemCheckErrorCommand) == 0x000010, "Wrong size on BackendSubsystem_SetIgnoreSystemCheckErrorCommand");
static_assert(offsetof(BackendSubsystem_SetIgnoreSystemCheckErrorCommand, Args) == 0x000000, "Member 'BackendSubsystem_SetIgnoreSystemCheckErrorCommand::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SetKpiAgreement
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_SetKpiAgreement final
{
public:
	bool                                          bAgree;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SetKpiAgreement) == 0x000001, "Wrong alignment on BackendSubsystem_SetKpiAgreement");
static_assert(sizeof(BackendSubsystem_SetKpiAgreement) == 0x000001, "Wrong size on BackendSubsystem_SetKpiAgreement");
static_assert(offsetof(BackendSubsystem_SetKpiAgreement, bAgree) == 0x000000, "Member 'BackendSubsystem_SetKpiAgreement::bAgree' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SetKpiLobbyLog_DS
// 0x0024 (0x0024 - 0x0000)
struct BackendSubsystem_SetKpiLobbyLog_DS final
{
public:
	struct FKpiLobbyLog                           Kpi;                                               // 0x0000(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SetKpiLobbyLog_DS) == 0x000004, "Wrong alignment on BackendSubsystem_SetKpiLobbyLog_DS");
static_assert(sizeof(BackendSubsystem_SetKpiLobbyLog_DS) == 0x000024, "Wrong size on BackendSubsystem_SetKpiLobbyLog_DS");
static_assert(offsetof(BackendSubsystem_SetKpiLobbyLog_DS, Kpi) == 0x000000, "Member 'BackendSubsystem_SetKpiLobbyLog_DS::Kpi' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SetKpiTrainingLog_DS
// 0x000C (0x000C - 0x0000)
struct BackendSubsystem_SetKpiTrainingLog_DS final
{
public:
	struct FKpiTrainingLog                        Kpi;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SetKpiTrainingLog_DS) == 0x000004, "Wrong alignment on BackendSubsystem_SetKpiTrainingLog_DS");
static_assert(sizeof(BackendSubsystem_SetKpiTrainingLog_DS) == 0x00000C, "Wrong size on BackendSubsystem_SetKpiTrainingLog_DS");
static_assert(offsetof(BackendSubsystem_SetKpiTrainingLog_DS, Kpi) == 0x000000, "Member 'BackendSubsystem_SetKpiTrainingLog_DS::Kpi' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SetKpiTrainingLog_DS, ReturnValue) == 0x000008, "Member 'BackendSubsystem_SetKpiTrainingLog_DS::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SetLocalModeCommand
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_SetLocalModeCommand final
{
public:
	TArray<class FString>                         Args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SetLocalModeCommand) == 0x000008, "Wrong alignment on BackendSubsystem_SetLocalModeCommand");
static_assert(sizeof(BackendSubsystem_SetLocalModeCommand) == 0x000010, "Wrong size on BackendSubsystem_SetLocalModeCommand");
static_assert(offsetof(BackendSubsystem_SetLocalModeCommand, Args) == 0x000000, "Member 'BackendSubsystem_SetLocalModeCommand::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SetMatchingRegion
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_SetMatchingRegion final
{
public:
	int32                                         RegionCode;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SetMatchingRegion) == 0x000004, "Wrong alignment on BackendSubsystem_SetMatchingRegion");
static_assert(sizeof(BackendSubsystem_SetMatchingRegion) == 0x000004, "Wrong size on BackendSubsystem_SetMatchingRegion");
static_assert(offsetof(BackendSubsystem_SetMatchingRegion, RegionCode) == 0x000000, "Member 'BackendSubsystem_SetMatchingRegion::RegionCode' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SetMyAdParts
// 0x000C (0x000C - 0x0000)
struct BackendSubsystem_SetMyAdParts final
{
public:
	int32                                         backgroundId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectId;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MessageId;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SetMyAdParts) == 0x000004, "Wrong alignment on BackendSubsystem_SetMyAdParts");
static_assert(sizeof(BackendSubsystem_SetMyAdParts) == 0x00000C, "Wrong size on BackendSubsystem_SetMyAdParts");
static_assert(offsetof(BackendSubsystem_SetMyAdParts, backgroundId) == 0x000000, "Member 'BackendSubsystem_SetMyAdParts::backgroundId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SetMyAdParts, EffectId) == 0x000004, "Member 'BackendSubsystem_SetMyAdParts::EffectId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SetMyAdParts, MessageId) == 0x000008, "Member 'BackendSubsystem_SetMyAdParts::MessageId' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SetPlayerMute
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_SetPlayerMute final
{
public:
	class FString                                 PlatformPlayerId;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMute;                                             // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_SetPlayerMute) == 0x000008, "Wrong alignment on BackendSubsystem_SetPlayerMute");
static_assert(sizeof(BackendSubsystem_SetPlayerMute) == 0x000018, "Wrong size on BackendSubsystem_SetPlayerMute");
static_assert(offsetof(BackendSubsystem_SetPlayerMute, PlatformPlayerId) == 0x000000, "Member 'BackendSubsystem_SetPlayerMute::PlatformPlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SetPlayerMute, bMute) == 0x000010, "Member 'BackendSubsystem_SetPlayerMute::bMute' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SetProxyServerCommand
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_SetProxyServerCommand final
{
public:
	TArray<class FString>                         Args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SetProxyServerCommand) == 0x000008, "Wrong alignment on BackendSubsystem_SetProxyServerCommand");
static_assert(sizeof(BackendSubsystem_SetProxyServerCommand) == 0x000010, "Wrong size on BackendSubsystem_SetProxyServerCommand");
static_assert(offsetof(BackendSubsystem_SetProxyServerCommand, Args) == 0x000000, "Member 'BackendSubsystem_SetProxyServerCommand::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SetRealtimeMasterUpdateCommand
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_SetRealtimeMasterUpdateCommand final
{
public:
	TArray<class FString>                         Args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SetRealtimeMasterUpdateCommand) == 0x000008, "Wrong alignment on BackendSubsystem_SetRealtimeMasterUpdateCommand");
static_assert(sizeof(BackendSubsystem_SetRealtimeMasterUpdateCommand) == 0x000010, "Wrong size on BackendSubsystem_SetRealtimeMasterUpdateCommand");
static_assert(offsetof(BackendSubsystem_SetRealtimeMasterUpdateCommand, Args) == 0x000000, "Member 'BackendSubsystem_SetRealtimeMasterUpdateCommand::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SetSkipInGameTutorial
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_SetSkipInGameTutorial final
{
public:
	bool                                          bSkipInGameTutorial;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SetSkipInGameTutorial) == 0x000001, "Wrong alignment on BackendSubsystem_SetSkipInGameTutorial");
static_assert(sizeof(BackendSubsystem_SetSkipInGameTutorial) == 0x000001, "Wrong size on BackendSubsystem_SetSkipInGameTutorial");
static_assert(offsetof(BackendSubsystem_SetSkipInGameTutorial, bSkipInGameTutorial) == 0x000000, "Member 'BackendSubsystem_SetSkipInGameTutorial::bSkipInGameTutorial' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SetSQLiteAdminWatcherCommand
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_SetSQLiteAdminWatcherCommand final
{
public:
	TArray<class FString>                         Args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SetSQLiteAdminWatcherCommand) == 0x000008, "Wrong alignment on BackendSubsystem_SetSQLiteAdminWatcherCommand");
static_assert(sizeof(BackendSubsystem_SetSQLiteAdminWatcherCommand) == 0x000010, "Wrong size on BackendSubsystem_SetSQLiteAdminWatcherCommand");
static_assert(offsetof(BackendSubsystem_SetSQLiteAdminWatcherCommand, Args) == 0x000000, "Member 'BackendSubsystem_SetSQLiteAdminWatcherCommand::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SetTeamUpPassword
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_SetTeamUpPassword final
{
public:
	class FString                                 Password;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SetTeamUpPassword) == 0x000008, "Wrong alignment on BackendSubsystem_SetTeamUpPassword");
static_assert(sizeof(BackendSubsystem_SetTeamUpPassword) == 0x000010, "Wrong size on BackendSubsystem_SetTeamUpPassword");
static_assert(offsetof(BackendSubsystem_SetTeamUpPassword, Password) == 0x000000, "Member 'BackendSubsystem_SetTeamUpPassword::Password' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SetUseUnplayableCharactersCommand
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_SetUseUnplayableCharactersCommand final
{
public:
	TArray<class FString>                         Args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SetUseUnplayableCharactersCommand) == 0x000008, "Wrong alignment on BackendSubsystem_SetUseUnplayableCharactersCommand");
static_assert(sizeof(BackendSubsystem_SetUseUnplayableCharactersCommand) == 0x000010, "Wrong size on BackendSubsystem_SetUseUnplayableCharactersCommand");
static_assert(offsetof(BackendSubsystem_SetUseUnplayableCharactersCommand, Args) == 0x000000, "Member 'BackendSubsystem_SetUseUnplayableCharactersCommand::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SkipDownloadMasterDataCommand
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_SkipDownloadMasterDataCommand final
{
public:
	TArray<class FString>                         Args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SkipDownloadMasterDataCommand) == 0x000008, "Wrong alignment on BackendSubsystem_SkipDownloadMasterDataCommand");
static_assert(sizeof(BackendSubsystem_SkipDownloadMasterDataCommand) == 0x000010, "Wrong size on BackendSubsystem_SkipDownloadMasterDataCommand");
static_assert(offsetof(BackendSubsystem_SkipDownloadMasterDataCommand, Args) == 0x000000, "Member 'BackendSubsystem_SkipDownloadMasterDataCommand::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SkipTutorialCommand
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_SkipTutorialCommand final
{
public:
	TArray<class FString>                         Args;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SkipTutorialCommand) == 0x000008, "Wrong alignment on BackendSubsystem_SkipTutorialCommand");
static_assert(sizeof(BackendSubsystem_SkipTutorialCommand) == 0x000010, "Wrong size on BackendSubsystem_SkipTutorialCommand");
static_assert(offsetof(BackendSubsystem_SkipTutorialCommand, Args) == 0x000000, "Member 'BackendSubsystem_SkipTutorialCommand::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.StartCustomRoom
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_StartCustomRoom final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_StartCustomRoom) == 0x000001, "Wrong alignment on BackendSubsystem_StartCustomRoom");
static_assert(sizeof(BackendSubsystem_StartCustomRoom) == 0x000001, "Wrong size on BackendSubsystem_StartCustomRoom");
static_assert(offsetof(BackendSubsystem_StartCustomRoom, ReturnValue) == 0x000000, "Member 'BackendSubsystem_StartCustomRoom::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.StartLobbyMatching
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_StartLobbyMatching final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_StartLobbyMatching) == 0x000001, "Wrong alignment on BackendSubsystem_StartLobbyMatching");
static_assert(sizeof(BackendSubsystem_StartLobbyMatching) == 0x000001, "Wrong size on BackendSubsystem_StartLobbyMatching");
static_assert(offsetof(BackendSubsystem_StartLobbyMatching, ReturnValue) == 0x000000, "Member 'BackendSubsystem_StartLobbyMatching::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.StartPurchase
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_StartPurchase final
{
public:
	class FString                                 CatalogId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_StartPurchase) == 0x000008, "Wrong alignment on BackendSubsystem_StartPurchase");
static_assert(sizeof(BackendSubsystem_StartPurchase) == 0x000018, "Wrong size on BackendSubsystem_StartPurchase");
static_assert(offsetof(BackendSubsystem_StartPurchase, CatalogId) == 0x000000, "Member 'BackendSubsystem_StartPurchase::CatalogId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_StartPurchase, ReturnValue) == 0x000010, "Member 'BackendSubsystem_StartPurchase::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.StartPurchaseImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_StartPurchaseImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_StartPurchaseImpl) == 0x000008, "Wrong alignment on BackendSubsystem_StartPurchaseImpl");
static_assert(sizeof(BackendSubsystem_StartPurchaseImpl) == 0x000018, "Wrong size on BackendSubsystem_StartPurchaseImpl");
static_assert(offsetof(BackendSubsystem_StartPurchaseImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_StartPurchaseImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_StartPurchaseImpl, Args) == 0x000008, "Member 'BackendSubsystem_StartPurchaseImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UnlockMyAd
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_UnlockMyAd final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UnlockMyAd) == 0x000004, "Wrong alignment on BackendSubsystem_UnlockMyAd");
static_assert(sizeof(BackendSubsystem_UnlockMyAd) == 0x000004, "Wrong size on BackendSubsystem_UnlockMyAd");
static_assert(offsetof(BackendSubsystem_UnlockMyAd, ReturnValue) == 0x000000, "Member 'BackendSubsystem_UnlockMyAd::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UnlockMyAdImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_UnlockMyAdImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UnlockMyAdImpl) == 0x000008, "Wrong alignment on BackendSubsystem_UnlockMyAdImpl");
static_assert(sizeof(BackendSubsystem_UnlockMyAdImpl) == 0x000018, "Wrong size on BackendSubsystem_UnlockMyAdImpl");
static_assert(offsetof(BackendSubsystem_UnlockMyAdImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_UnlockMyAdImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UnlockMyAdImpl, Args) == 0x000008, "Member 'BackendSubsystem_UnlockMyAdImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UnlockPreset
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_UnlockPreset final
{
public:
	int32                                         CharacterCode;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UnlockPreset) == 0x000004, "Wrong alignment on BackendSubsystem_UnlockPreset");
static_assert(sizeof(BackendSubsystem_UnlockPreset) == 0x000008, "Wrong size on BackendSubsystem_UnlockPreset");
static_assert(offsetof(BackendSubsystem_UnlockPreset, CharacterCode) == 0x000000, "Member 'BackendSubsystem_UnlockPreset::CharacterCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UnlockPreset, ReturnValue) == 0x000004, "Member 'BackendSubsystem_UnlockPreset::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UnlockPresetImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_UnlockPresetImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UnlockPresetImpl) == 0x000008, "Wrong alignment on BackendSubsystem_UnlockPresetImpl");
static_assert(sizeof(BackendSubsystem_UnlockPresetImpl) == 0x000018, "Wrong size on BackendSubsystem_UnlockPresetImpl");
static_assert(offsetof(BackendSubsystem_UnlockPresetImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_UnlockPresetImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UnlockPresetImpl, Args) == 0x000008, "Member 'BackendSubsystem_UnlockPresetImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateAchievementProgress
// 0x0050 (0x0050 - 0x0000)
struct BackendSubsystem_UpdateAchievementProgress final
{
public:
	TMap<int32, int32>                            MissionCodeList;                                   // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateAchievementProgress) == 0x000008, "Wrong alignment on BackendSubsystem_UpdateAchievementProgress");
static_assert(sizeof(BackendSubsystem_UpdateAchievementProgress) == 0x000050, "Wrong size on BackendSubsystem_UpdateAchievementProgress");
static_assert(offsetof(BackendSubsystem_UpdateAchievementProgress, MissionCodeList) == 0x000000, "Member 'BackendSubsystem_UpdateAchievementProgress::MissionCodeList' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateAutoStartBattleSequence
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_UpdateAutoStartBattleSequence final
{
public:
	int32                                         battleSequence;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_UpdateAutoStartBattleSequence) == 0x000004, "Wrong alignment on BackendSubsystem_UpdateAutoStartBattleSequence");
static_assert(sizeof(BackendSubsystem_UpdateAutoStartBattleSequence) == 0x000008, "Wrong size on BackendSubsystem_UpdateAutoStartBattleSequence");
static_assert(offsetof(BackendSubsystem_UpdateAutoStartBattleSequence, battleSequence) == 0x000000, "Member 'BackendSubsystem_UpdateAutoStartBattleSequence::battleSequence' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateAutoStartBattleSequence, ReturnValue) == 0x000004, "Member 'BackendSubsystem_UpdateAutoStartBattleSequence::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateAvatarImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_UpdateAvatarImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateAvatarImpl) == 0x000008, "Wrong alignment on BackendSubsystem_UpdateAvatarImpl");
static_assert(sizeof(BackendSubsystem_UpdateAvatarImpl) == 0x000018, "Wrong size on BackendSubsystem_UpdateAvatarImpl");
static_assert(offsetof(BackendSubsystem_UpdateAvatarImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_UpdateAvatarImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateAvatarImpl, Args) == 0x000008, "Member 'BackendSubsystem_UpdateAvatarImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateBattleReadyState
// 0x0002 (0x0002 - 0x0000)
struct BackendSubsystem_UpdateBattleReadyState final
{
public:
	bool                                          bBattleReady;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateBattleReadyState) == 0x000001, "Wrong alignment on BackendSubsystem_UpdateBattleReadyState");
static_assert(sizeof(BackendSubsystem_UpdateBattleReadyState) == 0x000002, "Wrong size on BackendSubsystem_UpdateBattleReadyState");
static_assert(offsetof(BackendSubsystem_UpdateBattleReadyState, bBattleReady) == 0x000000, "Member 'BackendSubsystem_UpdateBattleReadyState::bBattleReady' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateBattleReadyState, ReturnValue) == 0x000001, "Member 'BackendSubsystem_UpdateBattleReadyState::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateCancelRequests
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_UpdateCancelRequests final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateCancelRequests) == 0x000004, "Wrong alignment on BackendSubsystem_UpdateCancelRequests");
static_assert(sizeof(BackendSubsystem_UpdateCancelRequests) == 0x000004, "Wrong size on BackendSubsystem_UpdateCancelRequests");
static_assert(offsetof(BackendSubsystem_UpdateCancelRequests, RequestId) == 0x000000, "Member 'BackendSubsystem_UpdateCancelRequests::RequestId' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateCharacter
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_UpdateCharacter final
{
public:
	int32                                         CharacterCode;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateCharacter) == 0x000004, "Wrong alignment on BackendSubsystem_UpdateCharacter");
static_assert(sizeof(BackendSubsystem_UpdateCharacter) == 0x000008, "Wrong size on BackendSubsystem_UpdateCharacter");
static_assert(offsetof(BackendSubsystem_UpdateCharacter, CharacterCode) == 0x000000, "Member 'BackendSubsystem_UpdateCharacter::CharacterCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateCharacter, ReturnValue) == 0x000004, "Member 'BackendSubsystem_UpdateCharacter::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateCharacterImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_UpdateCharacterImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateCharacterImpl) == 0x000008, "Wrong alignment on BackendSubsystem_UpdateCharacterImpl");
static_assert(sizeof(BackendSubsystem_UpdateCharacterImpl) == 0x000018, "Wrong size on BackendSubsystem_UpdateCharacterImpl");
static_assert(offsetof(BackendSubsystem_UpdateCharacterImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_UpdateCharacterImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateCharacterImpl, Args) == 0x000008, "Member 'BackendSubsystem_UpdateCharacterImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateCustomizeAppeal
// 0x0020 (0x0020 - 0x0000)
struct BackendSubsystem_UpdateCustomizeAppeal final
{
public:
	int32                                         CharacterCode;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Appeals;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_UpdateCustomizeAppeal) == 0x000008, "Wrong alignment on BackendSubsystem_UpdateCustomizeAppeal");
static_assert(sizeof(BackendSubsystem_UpdateCustomizeAppeal) == 0x000020, "Wrong size on BackendSubsystem_UpdateCustomizeAppeal");
static_assert(offsetof(BackendSubsystem_UpdateCustomizeAppeal, CharacterCode) == 0x000000, "Member 'BackendSubsystem_UpdateCustomizeAppeal::CharacterCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateCustomizeAppeal, Appeals) == 0x000008, "Member 'BackendSubsystem_UpdateCustomizeAppeal::Appeals' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateCustomizeAppeal, ReturnValue) == 0x000018, "Member 'BackendSubsystem_UpdateCustomizeAppeal::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateCustomizeAppealImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_UpdateCustomizeAppealImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateCustomizeAppealImpl) == 0x000008, "Wrong alignment on BackendSubsystem_UpdateCustomizeAppealImpl");
static_assert(sizeof(BackendSubsystem_UpdateCustomizeAppealImpl) == 0x000018, "Wrong size on BackendSubsystem_UpdateCustomizeAppealImpl");
static_assert(offsetof(BackendSubsystem_UpdateCustomizeAppealImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_UpdateCustomizeAppealImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateCustomizeAppealImpl, Args) == 0x000008, "Member 'BackendSubsystem_UpdateCustomizeAppealImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateCustomizeAuraImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_UpdateCustomizeAuraImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateCustomizeAuraImpl) == 0x000008, "Wrong alignment on BackendSubsystem_UpdateCustomizeAuraImpl");
static_assert(sizeof(BackendSubsystem_UpdateCustomizeAuraImpl) == 0x000018, "Wrong size on BackendSubsystem_UpdateCustomizeAuraImpl");
static_assert(offsetof(BackendSubsystem_UpdateCustomizeAuraImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_UpdateCustomizeAuraImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateCustomizeAuraImpl, Args) == 0x000008, "Member 'BackendSubsystem_UpdateCustomizeAuraImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateCustomizeAuraLevel
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_UpdateCustomizeAuraLevel final
{
public:
	int32                                         CharacterCode;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostumeCode;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AuraLevel;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateCustomizeAuraLevel) == 0x000004, "Wrong alignment on BackendSubsystem_UpdateCustomizeAuraLevel");
static_assert(sizeof(BackendSubsystem_UpdateCustomizeAuraLevel) == 0x000010, "Wrong size on BackendSubsystem_UpdateCustomizeAuraLevel");
static_assert(offsetof(BackendSubsystem_UpdateCustomizeAuraLevel, CharacterCode) == 0x000000, "Member 'BackendSubsystem_UpdateCustomizeAuraLevel::CharacterCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateCustomizeAuraLevel, CostumeCode) == 0x000004, "Member 'BackendSubsystem_UpdateCustomizeAuraLevel::CostumeCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateCustomizeAuraLevel, AuraLevel) == 0x000008, "Member 'BackendSubsystem_UpdateCustomizeAuraLevel::AuraLevel' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateCustomizeAuraLevel, ReturnValue) == 0x00000C, "Member 'BackendSubsystem_UpdateCustomizeAuraLevel::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateCustomizeCostume
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_UpdateCustomizeCostume final
{
public:
	int32                                         CharacterCode;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostumeCode;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AuraLevel;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateCustomizeCostume) == 0x000004, "Wrong alignment on BackendSubsystem_UpdateCustomizeCostume");
static_assert(sizeof(BackendSubsystem_UpdateCustomizeCostume) == 0x000010, "Wrong size on BackendSubsystem_UpdateCustomizeCostume");
static_assert(offsetof(BackendSubsystem_UpdateCustomizeCostume, CharacterCode) == 0x000000, "Member 'BackendSubsystem_UpdateCustomizeCostume::CharacterCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateCustomizeCostume, CostumeCode) == 0x000004, "Member 'BackendSubsystem_UpdateCustomizeCostume::CostumeCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateCustomizeCostume, AuraLevel) == 0x000008, "Member 'BackendSubsystem_UpdateCustomizeCostume::AuraLevel' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateCustomizeCostume, ReturnValue) == 0x00000C, "Member 'BackendSubsystem_UpdateCustomizeCostume::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateCustomizeCostumeImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_UpdateCustomizeCostumeImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateCustomizeCostumeImpl) == 0x000008, "Wrong alignment on BackendSubsystem_UpdateCustomizeCostumeImpl");
static_assert(sizeof(BackendSubsystem_UpdateCustomizeCostumeImpl) == 0x000018, "Wrong size on BackendSubsystem_UpdateCustomizeCostumeImpl");
static_assert(offsetof(BackendSubsystem_UpdateCustomizeCostumeImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_UpdateCustomizeCostumeImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateCustomizeCostumeImpl, Args) == 0x000008, "Member 'BackendSubsystem_UpdateCustomizeCostumeImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateCustomizeEmblem
// 0x0020 (0x0020 - 0x0000)
struct BackendSubsystem_UpdateCustomizeEmblem final
{
public:
	int32                                         CharacterCode;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Emblem;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_UpdateCustomizeEmblem) == 0x000008, "Wrong alignment on BackendSubsystem_UpdateCustomizeEmblem");
static_assert(sizeof(BackendSubsystem_UpdateCustomizeEmblem) == 0x000020, "Wrong size on BackendSubsystem_UpdateCustomizeEmblem");
static_assert(offsetof(BackendSubsystem_UpdateCustomizeEmblem, CharacterCode) == 0x000000, "Member 'BackendSubsystem_UpdateCustomizeEmblem::CharacterCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateCustomizeEmblem, Emblem) == 0x000008, "Member 'BackendSubsystem_UpdateCustomizeEmblem::Emblem' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateCustomizeEmblem, ReturnValue) == 0x000018, "Member 'BackendSubsystem_UpdateCustomizeEmblem::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateCustomizeEmblemImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_UpdateCustomizeEmblemImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateCustomizeEmblemImpl) == 0x000008, "Wrong alignment on BackendSubsystem_UpdateCustomizeEmblemImpl");
static_assert(sizeof(BackendSubsystem_UpdateCustomizeEmblemImpl) == 0x000018, "Wrong size on BackendSubsystem_UpdateCustomizeEmblemImpl");
static_assert(offsetof(BackendSubsystem_UpdateCustomizeEmblemImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_UpdateCustomizeEmblemImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateCustomizeEmblemImpl, Args) == 0x000008, "Member 'BackendSubsystem_UpdateCustomizeEmblemImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateCustomizeVariation
// 0x000C (0x000C - 0x0000)
struct BackendSubsystem_UpdateCustomizeVariation final
{
public:
	int32                                         CharacterCode;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VariationCode;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateCustomizeVariation) == 0x000004, "Wrong alignment on BackendSubsystem_UpdateCustomizeVariation");
static_assert(sizeof(BackendSubsystem_UpdateCustomizeVariation) == 0x00000C, "Wrong size on BackendSubsystem_UpdateCustomizeVariation");
static_assert(offsetof(BackendSubsystem_UpdateCustomizeVariation, CharacterCode) == 0x000000, "Member 'BackendSubsystem_UpdateCustomizeVariation::CharacterCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateCustomizeVariation, VariationCode) == 0x000004, "Member 'BackendSubsystem_UpdateCustomizeVariation::VariationCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateCustomizeVariation, ReturnValue) == 0x000008, "Member 'BackendSubsystem_UpdateCustomizeVariation::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateCustomizeVariationImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_UpdateCustomizeVariationImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateCustomizeVariationImpl) == 0x000008, "Wrong alignment on BackendSubsystem_UpdateCustomizeVariationImpl");
static_assert(sizeof(BackendSubsystem_UpdateCustomizeVariationImpl) == 0x000018, "Wrong size on BackendSubsystem_UpdateCustomizeVariationImpl");
static_assert(offsetof(BackendSubsystem_UpdateCustomizeVariationImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_UpdateCustomizeVariationImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateCustomizeVariationImpl, Args) == 0x000008, "Member 'BackendSubsystem_UpdateCustomizeVariationImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateCustomizeVoice
// 0x0020 (0x0020 - 0x0000)
struct BackendSubsystem_UpdateCustomizeVoice final
{
public:
	int32                                         CharacterCode;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Voices;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_UpdateCustomizeVoice) == 0x000008, "Wrong alignment on BackendSubsystem_UpdateCustomizeVoice");
static_assert(sizeof(BackendSubsystem_UpdateCustomizeVoice) == 0x000020, "Wrong size on BackendSubsystem_UpdateCustomizeVoice");
static_assert(offsetof(BackendSubsystem_UpdateCustomizeVoice, CharacterCode) == 0x000000, "Member 'BackendSubsystem_UpdateCustomizeVoice::CharacterCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateCustomizeVoice, Voices) == 0x000008, "Member 'BackendSubsystem_UpdateCustomizeVoice::Voices' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateCustomizeVoice, ReturnValue) == 0x000018, "Member 'BackendSubsystem_UpdateCustomizeVoice::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateCustomizeVoiceImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_UpdateCustomizeVoiceImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateCustomizeVoiceImpl) == 0x000008, "Wrong alignment on BackendSubsystem_UpdateCustomizeVoiceImpl");
static_assert(sizeof(BackendSubsystem_UpdateCustomizeVoiceImpl) == 0x000018, "Wrong size on BackendSubsystem_UpdateCustomizeVoiceImpl");
static_assert(offsetof(BackendSubsystem_UpdateCustomizeVoiceImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_UpdateCustomizeVoiceImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateCustomizeVoiceImpl, Args) == 0x000008, "Member 'BackendSubsystem_UpdateCustomizeVoiceImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateGallery
// 0x0014 (0x0014 - 0x0000)
struct BackendSubsystem_UpdateGallery final
{
public:
	int32                                         GalleryCode;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ticket1Num;                                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ticket2Num;                                        // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ticket3Num;                                        // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateGallery) == 0x000004, "Wrong alignment on BackendSubsystem_UpdateGallery");
static_assert(sizeof(BackendSubsystem_UpdateGallery) == 0x000014, "Wrong size on BackendSubsystem_UpdateGallery");
static_assert(offsetof(BackendSubsystem_UpdateGallery, GalleryCode) == 0x000000, "Member 'BackendSubsystem_UpdateGallery::GalleryCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateGallery, Ticket1Num) == 0x000004, "Member 'BackendSubsystem_UpdateGallery::Ticket1Num' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateGallery, Ticket2Num) == 0x000008, "Member 'BackendSubsystem_UpdateGallery::Ticket2Num' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateGallery, Ticket3Num) == 0x00000C, "Member 'BackendSubsystem_UpdateGallery::Ticket3Num' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateGallery, ReturnValue) == 0x000010, "Member 'BackendSubsystem_UpdateGallery::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateGalleryImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_UpdateGalleryImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateGalleryImpl) == 0x000008, "Wrong alignment on BackendSubsystem_UpdateGalleryImpl");
static_assert(sizeof(BackendSubsystem_UpdateGalleryImpl) == 0x000018, "Wrong size on BackendSubsystem_UpdateGalleryImpl");
static_assert(offsetof(BackendSubsystem_UpdateGalleryImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_UpdateGalleryImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateGalleryImpl, Args) == 0x000008, "Member 'BackendSubsystem_UpdateGalleryImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateGuild
// 0x0030 (0x0030 - 0x0000)
struct BackendSubsystem_UpdateGuild final
{
public:
	int32                                         EmblemCode;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Profile;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuildPolicy                                  EPolicy;                                           // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuildJoinRule                                EJoinRule;                                         // 0x0029(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateGuild) == 0x000008, "Wrong alignment on BackendSubsystem_UpdateGuild");
static_assert(sizeof(BackendSubsystem_UpdateGuild) == 0x000030, "Wrong size on BackendSubsystem_UpdateGuild");
static_assert(offsetof(BackendSubsystem_UpdateGuild, EmblemCode) == 0x000000, "Member 'BackendSubsystem_UpdateGuild::EmblemCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateGuild, Name_0) == 0x000008, "Member 'BackendSubsystem_UpdateGuild::Name_0' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateGuild, Profile) == 0x000018, "Member 'BackendSubsystem_UpdateGuild::Profile' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateGuild, EPolicy) == 0x000028, "Member 'BackendSubsystem_UpdateGuild::EPolicy' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateGuild, EJoinRule) == 0x000029, "Member 'BackendSubsystem_UpdateGuild::EJoinRule' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateGuild, ReturnValue) == 0x00002C, "Member 'BackendSubsystem_UpdateGuild::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateGuildImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_UpdateGuildImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateGuildImpl) == 0x000008, "Wrong alignment on BackendSubsystem_UpdateGuildImpl");
static_assert(sizeof(BackendSubsystem_UpdateGuildImpl) == 0x000018, "Wrong size on BackendSubsystem_UpdateGuildImpl");
static_assert(offsetof(BackendSubsystem_UpdateGuildImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_UpdateGuildImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateGuildImpl, Args) == 0x000008, "Member 'BackendSubsystem_UpdateGuildImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateGuildSubLeader
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_UpdateGuildSubLeader final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAppointment;                                      // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateGuildSubLeader) == 0x000008, "Wrong alignment on BackendSubsystem_UpdateGuildSubLeader");
static_assert(sizeof(BackendSubsystem_UpdateGuildSubLeader) == 0x000018, "Wrong size on BackendSubsystem_UpdateGuildSubLeader");
static_assert(offsetof(BackendSubsystem_UpdateGuildSubLeader, PlayerId) == 0x000000, "Member 'BackendSubsystem_UpdateGuildSubLeader::PlayerId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateGuildSubLeader, bAppointment) == 0x000010, "Member 'BackendSubsystem_UpdateGuildSubLeader::bAppointment' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateGuildSubLeader, ReturnValue) == 0x000014, "Member 'BackendSubsystem_UpdateGuildSubLeader::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateGuildSubLeaderImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_UpdateGuildSubLeaderImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateGuildSubLeaderImpl) == 0x000008, "Wrong alignment on BackendSubsystem_UpdateGuildSubLeaderImpl");
static_assert(sizeof(BackendSubsystem_UpdateGuildSubLeaderImpl) == 0x000018, "Wrong size on BackendSubsystem_UpdateGuildSubLeaderImpl");
static_assert(offsetof(BackendSubsystem_UpdateGuildSubLeaderImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_UpdateGuildSubLeaderImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateGuildSubLeaderImpl, Args) == 0x000008, "Member 'BackendSubsystem_UpdateGuildSubLeaderImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateMatchingCharacter
// 0x0014 (0x0014 - 0x0000)
struct BackendSubsystem_UpdateMatchingCharacter final
{
public:
	int32                                         CharacterCode;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostumeCode;                                       // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AuraLevel;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VariationCode;                                     // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_UpdateMatchingCharacter) == 0x000004, "Wrong alignment on BackendSubsystem_UpdateMatchingCharacter");
static_assert(sizeof(BackendSubsystem_UpdateMatchingCharacter) == 0x000014, "Wrong size on BackendSubsystem_UpdateMatchingCharacter");
static_assert(offsetof(BackendSubsystem_UpdateMatchingCharacter, CharacterCode) == 0x000000, "Member 'BackendSubsystem_UpdateMatchingCharacter::CharacterCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateMatchingCharacter, CostumeCode) == 0x000004, "Member 'BackendSubsystem_UpdateMatchingCharacter::CostumeCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateMatchingCharacter, AuraLevel) == 0x000008, "Member 'BackendSubsystem_UpdateMatchingCharacter::AuraLevel' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateMatchingCharacter, VariationCode) == 0x00000C, "Member 'BackendSubsystem_UpdateMatchingCharacter::VariationCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateMatchingCharacter, ReturnValue) == 0x000010, "Member 'BackendSubsystem_UpdateMatchingCharacter::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateMatchingCpuCharacters
// 0x0028 (0x0028 - 0x0000)
struct BackendSubsystem_UpdateMatchingCpuCharacters final
{
public:
	TArray<int32>                                 CharacterCodes;                                    // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 CostumeCodes;                                      // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_UpdateMatchingCpuCharacters) == 0x000008, "Wrong alignment on BackendSubsystem_UpdateMatchingCpuCharacters");
static_assert(sizeof(BackendSubsystem_UpdateMatchingCpuCharacters) == 0x000028, "Wrong size on BackendSubsystem_UpdateMatchingCpuCharacters");
static_assert(offsetof(BackendSubsystem_UpdateMatchingCpuCharacters, CharacterCodes) == 0x000000, "Member 'BackendSubsystem_UpdateMatchingCpuCharacters::CharacterCodes' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateMatchingCpuCharacters, CostumeCodes) == 0x000010, "Member 'BackendSubsystem_UpdateMatchingCpuCharacters::CostumeCodes' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateMatchingCpuCharacters, ReturnValue) == 0x000020, "Member 'BackendSubsystem_UpdateMatchingCpuCharacters::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateMatchingSetting
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_UpdateMatchingSetting final
{
public:
	bool                                          bBattleRecord;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AuraDisplayTarget;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AuraDisplayArea;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_UpdateMatchingSetting) == 0x000004, "Wrong alignment on BackendSubsystem_UpdateMatchingSetting");
static_assert(sizeof(BackendSubsystem_UpdateMatchingSetting) == 0x000010, "Wrong size on BackendSubsystem_UpdateMatchingSetting");
static_assert(offsetof(BackendSubsystem_UpdateMatchingSetting, bBattleRecord) == 0x000000, "Member 'BackendSubsystem_UpdateMatchingSetting::bBattleRecord' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateMatchingSetting, AuraDisplayTarget) == 0x000004, "Member 'BackendSubsystem_UpdateMatchingSetting::AuraDisplayTarget' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateMatchingSetting, AuraDisplayArea) == 0x000008, "Member 'BackendSubsystem_UpdateMatchingSetting::AuraDisplayArea' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateMatchingSetting, ReturnValue) == 0x00000C, "Member 'BackendSubsystem_UpdateMatchingSetting::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateMissionProgress
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_UpdateMissionProgress final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateMissionProgress) == 0x000004, "Wrong alignment on BackendSubsystem_UpdateMissionProgress");
static_assert(sizeof(BackendSubsystem_UpdateMissionProgress) == 0x000004, "Wrong size on BackendSubsystem_UpdateMissionProgress");
static_assert(offsetof(BackendSubsystem_UpdateMissionProgress, ReturnValue) == 0x000000, "Member 'BackendSubsystem_UpdateMissionProgress::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateMissionProgress_DS
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_UpdateMissionProgress_DS final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateMissionProgress_DS) == 0x000004, "Wrong alignment on BackendSubsystem_UpdateMissionProgress_DS");
static_assert(sizeof(BackendSubsystem_UpdateMissionProgress_DS) == 0x000004, "Wrong size on BackendSubsystem_UpdateMissionProgress_DS");
static_assert(offsetof(BackendSubsystem_UpdateMissionProgress_DS, ReturnValue) == 0x000000, "Member 'BackendSubsystem_UpdateMissionProgress_DS::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateMissionProgressImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_UpdateMissionProgressImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateMissionProgressImpl) == 0x000008, "Wrong alignment on BackendSubsystem_UpdateMissionProgressImpl");
static_assert(sizeof(BackendSubsystem_UpdateMissionProgressImpl) == 0x000018, "Wrong size on BackendSubsystem_UpdateMissionProgressImpl");
static_assert(offsetof(BackendSubsystem_UpdateMissionProgressImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_UpdateMissionProgressImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateMissionProgressImpl, Args) == 0x000008, "Member 'BackendSubsystem_UpdateMissionProgressImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateMyAd
// 0x0028 (0x0028 - 0x0000)
struct BackendSubsystem_UpdateMyAd final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 PartCodes;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         MessageCode;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateMyAd) == 0x000008, "Wrong alignment on BackendSubsystem_UpdateMyAd");
static_assert(sizeof(BackendSubsystem_UpdateMyAd) == 0x000028, "Wrong size on BackendSubsystem_UpdateMyAd");
static_assert(offsetof(BackendSubsystem_UpdateMyAd, ID) == 0x000000, "Member 'BackendSubsystem_UpdateMyAd::ID' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateMyAd, PartCodes) == 0x000010, "Member 'BackendSubsystem_UpdateMyAd::PartCodes' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateMyAd, MessageCode) == 0x000020, "Member 'BackendSubsystem_UpdateMyAd::MessageCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateMyAd, ReturnValue) == 0x000024, "Member 'BackendSubsystem_UpdateMyAd::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateMyAdImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_UpdateMyAdImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateMyAdImpl) == 0x000008, "Wrong alignment on BackendSubsystem_UpdateMyAdImpl");
static_assert(sizeof(BackendSubsystem_UpdateMyAdImpl) == 0x000018, "Wrong size on BackendSubsystem_UpdateMyAdImpl");
static_assert(offsetof(BackendSubsystem_UpdateMyAdImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_UpdateMyAdImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateMyAdImpl, Args) == 0x000008, "Member 'BackendSubsystem_UpdateMyAdImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdatePlayerName
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_UpdatePlayerName final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_UpdatePlayerName) == 0x000008, "Wrong alignment on BackendSubsystem_UpdatePlayerName");
static_assert(sizeof(BackendSubsystem_UpdatePlayerName) == 0x000018, "Wrong size on BackendSubsystem_UpdatePlayerName");
static_assert(offsetof(BackendSubsystem_UpdatePlayerName, PlayerName) == 0x000000, "Member 'BackendSubsystem_UpdatePlayerName::PlayerName' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdatePlayerName, ReturnValue) == 0x000010, "Member 'BackendSubsystem_UpdatePlayerName::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateProfile
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_UpdateProfile final
{
public:
	class FString                                 Profile;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_UpdateProfile) == 0x000008, "Wrong alignment on BackendSubsystem_UpdateProfile");
static_assert(sizeof(BackendSubsystem_UpdateProfile) == 0x000018, "Wrong size on BackendSubsystem_UpdateProfile");
static_assert(offsetof(BackendSubsystem_UpdateProfile, Profile) == 0x000000, "Member 'BackendSubsystem_UpdateProfile::Profile' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateProfile, ReturnValue) == 0x000010, "Member 'BackendSubsystem_UpdateProfile::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateProfileImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_UpdateProfileImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateProfileImpl) == 0x000008, "Wrong alignment on BackendSubsystem_UpdateProfileImpl");
static_assert(sizeof(BackendSubsystem_UpdateProfileImpl) == 0x000018, "Wrong size on BackendSubsystem_UpdateProfileImpl");
static_assert(offsetof(BackendSubsystem_UpdateProfileImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_UpdateProfileImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateProfileImpl, Args) == 0x000008, "Member 'BackendSubsystem_UpdateProfileImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateProfileMyAd
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_UpdateProfileMyAd final
{
public:
	class FString                                 MyADId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_UpdateProfileMyAd) == 0x000008, "Wrong alignment on BackendSubsystem_UpdateProfileMyAd");
static_assert(sizeof(BackendSubsystem_UpdateProfileMyAd) == 0x000018, "Wrong size on BackendSubsystem_UpdateProfileMyAd");
static_assert(offsetof(BackendSubsystem_UpdateProfileMyAd, MyADId) == 0x000000, "Member 'BackendSubsystem_UpdateProfileMyAd::MyADId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateProfileMyAd, ReturnValue) == 0x000010, "Member 'BackendSubsystem_UpdateProfileMyAd::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateProfileMyAdImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_UpdateProfileMyAdImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateProfileMyAdImpl) == 0x000008, "Wrong alignment on BackendSubsystem_UpdateProfileMyAdImpl");
static_assert(sizeof(BackendSubsystem_UpdateProfileMyAdImpl) == 0x000018, "Wrong size on BackendSubsystem_UpdateProfileMyAdImpl");
static_assert(offsetof(BackendSubsystem_UpdateProfileMyAdImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_UpdateProfileMyAdImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateProfileMyAdImpl, Args) == 0x000008, "Member 'BackendSubsystem_UpdateProfileMyAdImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateTrainingCharacter
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_UpdateTrainingCharacter final
{
public:
	int32                                         CharacterCode;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateTrainingCharacter) == 0x000004, "Wrong alignment on BackendSubsystem_UpdateTrainingCharacter");
static_assert(sizeof(BackendSubsystem_UpdateTrainingCharacter) == 0x000008, "Wrong size on BackendSubsystem_UpdateTrainingCharacter");
static_assert(offsetof(BackendSubsystem_UpdateTrainingCharacter, CharacterCode) == 0x000000, "Member 'BackendSubsystem_UpdateTrainingCharacter::CharacterCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateTrainingCharacter, ReturnValue) == 0x000004, "Member 'BackendSubsystem_UpdateTrainingCharacter::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateTrainingCustomizeVariation
// 0x000C (0x000C - 0x0000)
struct BackendSubsystem_UpdateTrainingCustomizeVariation final
{
public:
	int32                                         CharacterCode;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VariationCode;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateTrainingCustomizeVariation) == 0x000004, "Wrong alignment on BackendSubsystem_UpdateTrainingCustomizeVariation");
static_assert(sizeof(BackendSubsystem_UpdateTrainingCustomizeVariation) == 0x00000C, "Wrong size on BackendSubsystem_UpdateTrainingCustomizeVariation");
static_assert(offsetof(BackendSubsystem_UpdateTrainingCustomizeVariation, CharacterCode) == 0x000000, "Member 'BackendSubsystem_UpdateTrainingCustomizeVariation::CharacterCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateTrainingCustomizeVariation, VariationCode) == 0x000004, "Member 'BackendSubsystem_UpdateTrainingCustomizeVariation::VariationCode' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateTrainingCustomizeVariation, ReturnValue) == 0x000008, "Member 'BackendSubsystem_UpdateTrainingCustomizeVariation::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateTutorial
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_UpdateTutorial final
{
public:
	ETutorialStepNo                               ETutorialStep;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateTutorial) == 0x000004, "Wrong alignment on BackendSubsystem_UpdateTutorial");
static_assert(sizeof(BackendSubsystem_UpdateTutorial) == 0x000008, "Wrong size on BackendSubsystem_UpdateTutorial");
static_assert(offsetof(BackendSubsystem_UpdateTutorial, ETutorialStep) == 0x000000, "Member 'BackendSubsystem_UpdateTutorial::ETutorialStep' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateTutorial, ReturnValue) == 0x000004, "Member 'BackendSubsystem_UpdateTutorial::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateTutorialImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_UpdateTutorialImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateTutorialImpl) == 0x000008, "Wrong alignment on BackendSubsystem_UpdateTutorialImpl");
static_assert(sizeof(BackendSubsystem_UpdateTutorialImpl) == 0x000018, "Wrong size on BackendSubsystem_UpdateTutorialImpl");
static_assert(offsetof(BackendSubsystem_UpdateTutorialImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_UpdateTutorialImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateTutorialImpl, Args) == 0x000008, "Member 'BackendSubsystem_UpdateTutorialImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateVoiceChatDevices
// 0x0020 (0x0020 - 0x0000)
struct BackendSubsystem_UpdateVoiceChatDevices final
{
public:
	class FString                                 InputDeviceId;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutputDeviceId;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateVoiceChatDevices) == 0x000008, "Wrong alignment on BackendSubsystem_UpdateVoiceChatDevices");
static_assert(sizeof(BackendSubsystem_UpdateVoiceChatDevices) == 0x000020, "Wrong size on BackendSubsystem_UpdateVoiceChatDevices");
static_assert(offsetof(BackendSubsystem_UpdateVoiceChatDevices, InputDeviceId) == 0x000000, "Member 'BackendSubsystem_UpdateVoiceChatDevices::InputDeviceId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateVoiceChatDevices, OutputDeviceId) == 0x000010, "Member 'BackendSubsystem_UpdateVoiceChatDevices::OutputDeviceId' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateVoiceChatInputMute
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_UpdateVoiceChatInputMute final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateVoiceChatInputMute) == 0x000001, "Wrong alignment on BackendSubsystem_UpdateVoiceChatInputMute");
static_assert(sizeof(BackendSubsystem_UpdateVoiceChatInputMute) == 0x000001, "Wrong size on BackendSubsystem_UpdateVoiceChatInputMute");
static_assert(offsetof(BackendSubsystem_UpdateVoiceChatInputMute, bEnable) == 0x000000, "Member 'BackendSubsystem_UpdateVoiceChatInputMute::bEnable' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateVoiceChatOutputMute
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_UpdateVoiceChatOutputMute final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateVoiceChatOutputMute) == 0x000001, "Wrong alignment on BackendSubsystem_UpdateVoiceChatOutputMute");
static_assert(sizeof(BackendSubsystem_UpdateVoiceChatOutputMute) == 0x000001, "Wrong size on BackendSubsystem_UpdateVoiceChatOutputMute");
static_assert(offsetof(BackendSubsystem_UpdateVoiceChatOutputMute, bEnable) == 0x000000, "Member 'BackendSubsystem_UpdateVoiceChatOutputMute::bEnable' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateVoiceChatSetting
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_UpdateVoiceChatSetting final
{
public:
	bool                                          bVoiceChat;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InputVolume;                                       // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutputVolume;                                      // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_UpdateVoiceChatSetting) == 0x000004, "Wrong alignment on BackendSubsystem_UpdateVoiceChatSetting");
static_assert(sizeof(BackendSubsystem_UpdateVoiceChatSetting) == 0x000010, "Wrong size on BackendSubsystem_UpdateVoiceChatSetting");
static_assert(offsetof(BackendSubsystem_UpdateVoiceChatSetting, bVoiceChat) == 0x000000, "Member 'BackendSubsystem_UpdateVoiceChatSetting::bVoiceChat' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateVoiceChatSetting, InputVolume) == 0x000004, "Member 'BackendSubsystem_UpdateVoiceChatSetting::InputVolume' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateVoiceChatSetting, OutputVolume) == 0x000008, "Member 'BackendSubsystem_UpdateVoiceChatSetting::OutputVolume' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateVoiceChatSetting, ReturnValue) == 0x00000C, "Member 'BackendSubsystem_UpdateVoiceChatSetting::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateVoiceChatVolume
// 0x000C (0x000C - 0x0000)
struct BackendSubsystem_UpdateVoiceChatVolume final
{
public:
	float                                         InputVolume;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutputVolume;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_UpdateVoiceChatVolume) == 0x000004, "Wrong alignment on BackendSubsystem_UpdateVoiceChatVolume");
static_assert(sizeof(BackendSubsystem_UpdateVoiceChatVolume) == 0x00000C, "Wrong size on BackendSubsystem_UpdateVoiceChatVolume");
static_assert(offsetof(BackendSubsystem_UpdateVoiceChatVolume, InputVolume) == 0x000000, "Member 'BackendSubsystem_UpdateVoiceChatVolume::InputVolume' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateVoiceChatVolume, OutputVolume) == 0x000004, "Member 'BackendSubsystem_UpdateVoiceChatVolume::OutputVolume' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UpdateVoiceChatVolume, ReturnValue) == 0x000008, "Member 'BackendSubsystem_UpdateVoiceChatVolume::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UpdateVoiceFont
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_UpdateVoiceFont final
{
public:
	class FString                                 FontName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UpdateVoiceFont) == 0x000008, "Wrong alignment on BackendSubsystem_UpdateVoiceFont");
static_assert(sizeof(BackendSubsystem_UpdateVoiceFont) == 0x000010, "Wrong size on BackendSubsystem_UpdateVoiceFont");
static_assert(offsetof(BackendSubsystem_UpdateVoiceFont, FontName) == 0x000000, "Member 'BackendSubsystem_UpdateVoiceFont::FontName' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UseBoostTicket
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_UseBoostTicket final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UseBoostTicket) == 0x000004, "Wrong alignment on BackendSubsystem_UseBoostTicket");
static_assert(sizeof(BackendSubsystem_UseBoostTicket) == 0x000004, "Wrong size on BackendSubsystem_UseBoostTicket");
static_assert(offsetof(BackendSubsystem_UseBoostTicket, ReturnValue) == 0x000000, "Member 'BackendSubsystem_UseBoostTicket::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.UseBoostTicketImpl
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_UseBoostTicketImpl final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWebApiArg>                     Args;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_UseBoostTicketImpl) == 0x000008, "Wrong alignment on BackendSubsystem_UseBoostTicketImpl");
static_assert(sizeof(BackendSubsystem_UseBoostTicketImpl) == 0x000018, "Wrong size on BackendSubsystem_UseBoostTicketImpl");
static_assert(offsetof(BackendSubsystem_UseBoostTicketImpl, RequestId) == 0x000000, "Member 'BackendSubsystem_UseBoostTicketImpl::RequestId' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_UseBoostTicketImpl, Args) == 0x000008, "Member 'BackendSubsystem_UseBoostTicketImpl::Args' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.CanCallUpdateWebApi
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_CanCallUpdateWebApi final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_CanCallUpdateWebApi) == 0x000001, "Wrong alignment on BackendSubsystem_CanCallUpdateWebApi");
static_assert(sizeof(BackendSubsystem_CanCallUpdateWebApi) == 0x000001, "Wrong size on BackendSubsystem_CanCallUpdateWebApi");
static_assert(offsetof(BackendSubsystem_CanCallUpdateWebApi, ReturnValue) == 0x000000, "Member 'BackendSubsystem_CanCallUpdateWebApi::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.CanCancelLobbyMatching
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_CanCancelLobbyMatching final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_CanCancelLobbyMatching) == 0x000001, "Wrong alignment on BackendSubsystem_CanCancelLobbyMatching");
static_assert(sizeof(BackendSubsystem_CanCancelLobbyMatching) == 0x000001, "Wrong size on BackendSubsystem_CanCancelLobbyMatching");
static_assert(offsetof(BackendSubsystem_CanCancelLobbyMatching, ReturnValue) == 0x000000, "Member 'BackendSubsystem_CanCancelLobbyMatching::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.CanCancelSquadMerge
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_CanCancelSquadMerge final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_CanCancelSquadMerge) == 0x000001, "Wrong alignment on BackendSubsystem_CanCancelSquadMerge");
static_assert(sizeof(BackendSubsystem_CanCancelSquadMerge) == 0x000001, "Wrong size on BackendSubsystem_CanCancelSquadMerge");
static_assert(offsetof(BackendSubsystem_CanCancelSquadMerge, ReturnValue) == 0x000000, "Member 'BackendSubsystem_CanCancelSquadMerge::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.CheckXboxMyCommunicationPermission
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_CheckXboxMyCommunicationPermission final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_CheckXboxMyCommunicationPermission) == 0x000001, "Wrong alignment on BackendSubsystem_CheckXboxMyCommunicationPermission");
static_assert(sizeof(BackendSubsystem_CheckXboxMyCommunicationPermission) == 0x000001, "Wrong size on BackendSubsystem_CheckXboxMyCommunicationPermission");
static_assert(offsetof(BackendSubsystem_CheckXboxMyCommunicationPermission, ReturnValue) == 0x000000, "Member 'BackendSubsystem_CheckXboxMyCommunicationPermission::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetBnidQrCodeUrl
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetBnidQrCodeUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetBnidQrCodeUrl) == 0x000008, "Wrong alignment on BackendSubsystem_GetBnidQrCodeUrl");
static_assert(sizeof(BackendSubsystem_GetBnidQrCodeUrl) == 0x000010, "Wrong size on BackendSubsystem_GetBnidQrCodeUrl");
static_assert(offsetof(BackendSubsystem_GetBnidQrCodeUrl, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetBnidQrCodeUrl::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetBnidQrImageBase64
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetBnidQrImageBase64 final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetBnidQrImageBase64) == 0x000008, "Wrong alignment on BackendSubsystem_GetBnidQrImageBase64");
static_assert(sizeof(BackendSubsystem_GetBnidQrImageBase64) == 0x000010, "Wrong size on BackendSubsystem_GetBnidQrImageBase64");
static_assert(offsetof(BackendSubsystem_GetBnidQrImageBase64, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetBnidQrImageBase64::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetBnidStatus
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_GetBnidStatus final
{
public:
	EBnIdStatus                                   ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetBnidStatus) == 0x000001, "Wrong alignment on BackendSubsystem_GetBnidStatus");
static_assert(sizeof(BackendSubsystem_GetBnidStatus) == 0x000001, "Wrong size on BackendSubsystem_GetBnidStatus");
static_assert(offsetof(BackendSubsystem_GetBnidStatus, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetBnidStatus::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetBnidStatusText
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetBnidStatusText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetBnidStatusText) == 0x000008, "Wrong alignment on BackendSubsystem_GetBnidStatusText");
static_assert(sizeof(BackendSubsystem_GetBnidStatusText) == 0x000010, "Wrong size on BackendSubsystem_GetBnidStatusText");
static_assert(offsetof(BackendSubsystem_GetBnidStatusText, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetBnidStatusText::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetConnectedEnvironment
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetConnectedEnvironment final
{
public:
	class FString                                 Env;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetConnectedEnvironment) == 0x000008, "Wrong alignment on BackendSubsystem_GetConnectedEnvironment");
static_assert(sizeof(BackendSubsystem_GetConnectedEnvironment) == 0x000010, "Wrong size on BackendSubsystem_GetConnectedEnvironment");
static_assert(offsetof(BackendSubsystem_GetConnectedEnvironment, Env) == 0x000000, "Member 'BackendSubsystem_GetConnectedEnvironment::Env' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetConnectionEnvironment
// 0x0020 (0x0020 - 0x0000)
struct BackendSubsystem_GetConnectionEnvironment final
{
public:
	class FString                                 Env;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TestVersion;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetConnectionEnvironment) == 0x000008, "Wrong alignment on BackendSubsystem_GetConnectionEnvironment");
static_assert(sizeof(BackendSubsystem_GetConnectionEnvironment) == 0x000020, "Wrong size on BackendSubsystem_GetConnectionEnvironment");
static_assert(offsetof(BackendSubsystem_GetConnectionEnvironment, Env) == 0x000000, "Member 'BackendSubsystem_GetConnectionEnvironment::Env' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_GetConnectionEnvironment, TestVersion) == 0x000010, "Member 'BackendSubsystem_GetConnectionEnvironment::TestVersion' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetConnectionServer
// 0x0018 (0x0018 - 0x0000)
struct BackendSubsystem_GetConnectionServer final
{
public:
	class FString                                 Host;                                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BackendSubsystem_GetConnectionServer) == 0x000008, "Wrong alignment on BackendSubsystem_GetConnectionServer");
static_assert(sizeof(BackendSubsystem_GetConnectionServer) == 0x000018, "Wrong size on BackendSubsystem_GetConnectionServer");
static_assert(offsetof(BackendSubsystem_GetConnectionServer, Host) == 0x000000, "Member 'BackendSubsystem_GetConnectionServer::Host' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_GetConnectionServer, Port) == 0x000010, "Member 'BackendSubsystem_GetConnectionServer::Port' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetCurrentCharacterCode
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_GetCurrentCharacterCode final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetCurrentCharacterCode) == 0x000004, "Wrong alignment on BackendSubsystem_GetCurrentCharacterCode");
static_assert(sizeof(BackendSubsystem_GetCurrentCharacterCode) == 0x000004, "Wrong size on BackendSubsystem_GetCurrentCharacterCode");
static_assert(offsetof(BackendSubsystem_GetCurrentCharacterCode, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetCurrentCharacterCode::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetFakePlatform
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetFakePlatform final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetFakePlatform) == 0x000008, "Wrong alignment on BackendSubsystem_GetFakePlatform");
static_assert(sizeof(BackendSubsystem_GetFakePlatform) == 0x000010, "Wrong size on BackendSubsystem_GetFakePlatform");
static_assert(offsetof(BackendSubsystem_GetFakePlatform, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetFakePlatform::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetFundSettlementText
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetFundSettlementText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetFundSettlementText) == 0x000008, "Wrong alignment on BackendSubsystem_GetFundSettlementText");
static_assert(sizeof(BackendSubsystem_GetFundSettlementText) == 0x000010, "Wrong size on BackendSubsystem_GetFundSettlementText");
static_assert(offsetof(BackendSubsystem_GetFundSettlementText, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetFundSettlementText::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetHeroCrystalCount
// 0x0008 (0x0008 - 0x0000)
struct BackendSubsystem_GetHeroCrystalCount final
{
public:
	int32                                         ChargedHeroCrystal;                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FreeHeroCrystal;                                   // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetHeroCrystalCount) == 0x000004, "Wrong alignment on BackendSubsystem_GetHeroCrystalCount");
static_assert(sizeof(BackendSubsystem_GetHeroCrystalCount) == 0x000008, "Wrong size on BackendSubsystem_GetHeroCrystalCount");
static_assert(offsetof(BackendSubsystem_GetHeroCrystalCount, ChargedHeroCrystal) == 0x000000, "Member 'BackendSubsystem_GetHeroCrystalCount::ChargedHeroCrystal' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_GetHeroCrystalCount, FreeHeroCrystal) == 0x000004, "Member 'BackendSubsystem_GetHeroCrystalCount::FreeHeroCrystal' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetJsonBattle
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetJsonBattle final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetJsonBattle) == 0x000008, "Wrong alignment on BackendSubsystem_GetJsonBattle");
static_assert(sizeof(BackendSubsystem_GetJsonBattle) == 0x000010, "Wrong size on BackendSubsystem_GetJsonBattle");
static_assert(offsetof(BackendSubsystem_GetJsonBattle, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetJsonBattle::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetJsonBillboardChart
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetJsonBillboardChart final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetJsonBillboardChart) == 0x000008, "Wrong alignment on BackendSubsystem_GetJsonBillboardChart");
static_assert(sizeof(BackendSubsystem_GetJsonBillboardChart) == 0x000010, "Wrong size on BackendSubsystem_GetJsonBillboardChart");
static_assert(offsetof(BackendSubsystem_GetJsonBillboardChart, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetJsonBillboardChart::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetJsonCharacters
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetJsonCharacters final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetJsonCharacters) == 0x000008, "Wrong alignment on BackendSubsystem_GetJsonCharacters");
static_assert(sizeof(BackendSubsystem_GetJsonCharacters) == 0x000010, "Wrong size on BackendSubsystem_GetJsonCharacters");
static_assert(offsetof(BackendSubsystem_GetJsonCharacters, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetJsonCharacters::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetJsonGuild
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetJsonGuild final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetJsonGuild) == 0x000008, "Wrong alignment on BackendSubsystem_GetJsonGuild");
static_assert(sizeof(BackendSubsystem_GetJsonGuild) == 0x000010, "Wrong size on BackendSubsystem_GetJsonGuild");
static_assert(offsetof(BackendSubsystem_GetJsonGuild, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetJsonGuild::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetJsonLotteries
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetJsonLotteries final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetJsonLotteries) == 0x000008, "Wrong alignment on BackendSubsystem_GetJsonLotteries");
static_assert(sizeof(BackendSubsystem_GetJsonLotteries) == 0x000010, "Wrong size on BackendSubsystem_GetJsonLotteries");
static_assert(offsetof(BackendSubsystem_GetJsonLotteries, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetJsonLotteries::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetJsonMatching
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetJsonMatching final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetJsonMatching) == 0x000008, "Wrong alignment on BackendSubsystem_GetJsonMatching");
static_assert(sizeof(BackendSubsystem_GetJsonMatching) == 0x000010, "Wrong size on BackendSubsystem_GetJsonMatching");
static_assert(offsetof(BackendSubsystem_GetJsonMatching, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetJsonMatching::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetJsonMissions
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetJsonMissions final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetJsonMissions) == 0x000008, "Wrong alignment on BackendSubsystem_GetJsonMissions");
static_assert(sizeof(BackendSubsystem_GetJsonMissions) == 0x000010, "Wrong size on BackendSubsystem_GetJsonMissions");
static_assert(offsetof(BackendSubsystem_GetJsonMissions, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetJsonMissions::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetJsonMyPlayer
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetJsonMyPlayer final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetJsonMyPlayer) == 0x000008, "Wrong alignment on BackendSubsystem_GetJsonMyPlayer");
static_assert(sizeof(BackendSubsystem_GetJsonMyPlayer) == 0x000010, "Wrong size on BackendSubsystem_GetJsonMyPlayer");
static_assert(offsetof(BackendSubsystem_GetJsonMyPlayer, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetJsonMyPlayer::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetJsonNotice
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetJsonNotice final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetJsonNotice) == 0x000008, "Wrong alignment on BackendSubsystem_GetJsonNotice");
static_assert(sizeof(BackendSubsystem_GetJsonNotice) == 0x000010, "Wrong size on BackendSubsystem_GetJsonNotice");
static_assert(offsetof(BackendSubsystem_GetJsonNotice, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetJsonNotice::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetJsonPlayers
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetJsonPlayers final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetJsonPlayers) == 0x000008, "Wrong alignment on BackendSubsystem_GetJsonPlayers");
static_assert(sizeof(BackendSubsystem_GetJsonPlayers) == 0x000010, "Wrong size on BackendSubsystem_GetJsonPlayers");
static_assert(offsetof(BackendSubsystem_GetJsonPlayers, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetJsonPlayers::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetJsonRanking
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetJsonRanking final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetJsonRanking) == 0x000008, "Wrong alignment on BackendSubsystem_GetJsonRanking");
static_assert(sizeof(BackendSubsystem_GetJsonRanking) == 0x000010, "Wrong size on BackendSubsystem_GetJsonRanking");
static_assert(offsetof(BackendSubsystem_GetJsonRanking, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetJsonRanking::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetJsonSeason
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetJsonSeason final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetJsonSeason) == 0x000008, "Wrong alignment on BackendSubsystem_GetJsonSeason");
static_assert(sizeof(BackendSubsystem_GetJsonSeason) == 0x000010, "Wrong size on BackendSubsystem_GetJsonSeason");
static_assert(offsetof(BackendSubsystem_GetJsonSeason, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetJsonSeason::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetJsonSetting
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetJsonSetting final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetJsonSetting) == 0x000008, "Wrong alignment on BackendSubsystem_GetJsonSetting");
static_assert(sizeof(BackendSubsystem_GetJsonSetting) == 0x000010, "Wrong size on BackendSubsystem_GetJsonSetting");
static_assert(offsetof(BackendSubsystem_GetJsonSetting, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetJsonSetting::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetJsonShops
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetJsonShops final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetJsonShops) == 0x000008, "Wrong alignment on BackendSubsystem_GetJsonShops");
static_assert(sizeof(BackendSubsystem_GetJsonShops) == 0x000010, "Wrong size on BackendSubsystem_GetJsonShops");
static_assert(offsetof(BackendSubsystem_GetJsonShops, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetJsonShops::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetMaintenanceMessage
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetMaintenanceMessage final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetMaintenanceMessage) == 0x000008, "Wrong alignment on BackendSubsystem_GetMaintenanceMessage");
static_assert(sizeof(BackendSubsystem_GetMaintenanceMessage) == 0x000010, "Wrong size on BackendSubsystem_GetMaintenanceMessage");
static_assert(offsetof(BackendSubsystem_GetMaintenanceMessage, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetMaintenanceMessage::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetPenaltyLevel
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_GetPenaltyLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetPenaltyLevel) == 0x000004, "Wrong alignment on BackendSubsystem_GetPenaltyLevel");
static_assert(sizeof(BackendSubsystem_GetPenaltyLevel) == 0x000004, "Wrong size on BackendSubsystem_GetPenaltyLevel");
static_assert(offsetof(BackendSubsystem_GetPenaltyLevel, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetPenaltyLevel::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetPhase
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_GetPhase final
{
public:
	EBackendSubsystemPhase                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetPhase) == 0x000001, "Wrong alignment on BackendSubsystem_GetPhase");
static_assert(sizeof(BackendSubsystem_GetPhase) == 0x000001, "Wrong size on BackendSubsystem_GetPhase");
static_assert(offsetof(BackendSubsystem_GetPhase, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetPhase::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetPlatformPlayerId
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetPlatformPlayerId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetPlatformPlayerId) == 0x000008, "Wrong alignment on BackendSubsystem_GetPlatformPlayerId");
static_assert(sizeof(BackendSubsystem_GetPlatformPlayerId) == 0x000010, "Wrong size on BackendSubsystem_GetPlatformPlayerId");
static_assert(offsetof(BackendSubsystem_GetPlatformPlayerId, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetPlatformPlayerId::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetPlatformPlayerName
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetPlatformPlayerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetPlatformPlayerName) == 0x000008, "Wrong alignment on BackendSubsystem_GetPlatformPlayerName");
static_assert(sizeof(BackendSubsystem_GetPlatformPlayerName) == 0x000010, "Wrong size on BackendSubsystem_GetPlatformPlayerName");
static_assert(offsetof(BackendSubsystem_GetPlatformPlayerName, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetPlatformPlayerName::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetPlayerId
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetPlayerId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetPlayerId) == 0x000008, "Wrong alignment on BackendSubsystem_GetPlayerId");
static_assert(sizeof(BackendSubsystem_GetPlayerId) == 0x000010, "Wrong size on BackendSubsystem_GetPlayerId");
static_assert(offsetof(BackendSubsystem_GetPlayerId, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetPlayerId::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetPlayerName
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetPlayerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetPlayerName) == 0x000008, "Wrong alignment on BackendSubsystem_GetPlayerName");
static_assert(sizeof(BackendSubsystem_GetPlayerName) == 0x000010, "Wrong size on BackendSubsystem_GetPlayerName");
static_assert(offsetof(BackendSubsystem_GetPlayerName, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetPlayerName::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetPlayModeCode_DS
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_GetPlayModeCode_DS final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetPlayModeCode_DS) == 0x000004, "Wrong alignment on BackendSubsystem_GetPlayModeCode_DS");
static_assert(sizeof(BackendSubsystem_GetPlayModeCode_DS) == 0x000004, "Wrong size on BackendSubsystem_GetPlayModeCode_DS");
static_assert(offsetof(BackendSubsystem_GetPlayModeCode_DS, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetPlayModeCode_DS::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetRunningCount
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_GetRunningCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetRunningCount) == 0x000004, "Wrong alignment on BackendSubsystem_GetRunningCount");
static_assert(sizeof(BackendSubsystem_GetRunningCount) == 0x000004, "Wrong size on BackendSubsystem_GetRunningCount");
static_assert(offsetof(BackendSubsystem_GetRunningCount, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetRunningCount::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetSkillBase
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_GetSkillBase final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetSkillBase) == 0x000004, "Wrong alignment on BackendSubsystem_GetSkillBase");
static_assert(sizeof(BackendSubsystem_GetSkillBase) == 0x000004, "Wrong size on BackendSubsystem_GetSkillBase");
static_assert(offsetof(BackendSubsystem_GetSkillBase, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetSkillBase::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetTeamUpId
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetTeamUpId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetTeamUpId) == 0x000008, "Wrong alignment on BackendSubsystem_GetTeamUpId");
static_assert(sizeof(BackendSubsystem_GetTeamUpId) == 0x000010, "Wrong size on BackendSubsystem_GetTeamUpId");
static_assert(offsetof(BackendSubsystem_GetTeamUpId, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetTeamUpId::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetTeamUpMemberCount
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_GetTeamUpMemberCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetTeamUpMemberCount) == 0x000004, "Wrong alignment on BackendSubsystem_GetTeamUpMemberCount");
static_assert(sizeof(BackendSubsystem_GetTeamUpMemberCount) == 0x000004, "Wrong size on BackendSubsystem_GetTeamUpMemberCount");
static_assert(offsetof(BackendSubsystem_GetTeamUpMemberCount, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetTeamUpMemberCount::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetTeamUpMemberIdList
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetTeamUpMemberIdList final
{
public:
	TArray<class FString>                         PlayerIdList;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetTeamUpMemberIdList) == 0x000008, "Wrong alignment on BackendSubsystem_GetTeamUpMemberIdList");
static_assert(sizeof(BackendSubsystem_GetTeamUpMemberIdList) == 0x000010, "Wrong size on BackendSubsystem_GetTeamUpMemberIdList");
static_assert(offsetof(BackendSubsystem_GetTeamUpMemberIdList, PlayerIdList) == 0x000000, "Member 'BackendSubsystem_GetTeamUpMemberIdList::PlayerIdList' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetTokushoText
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_GetTokushoText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetTokushoText) == 0x000008, "Wrong alignment on BackendSubsystem_GetTokushoText");
static_assert(sizeof(BackendSubsystem_GetTokushoText) == 0x000010, "Wrong size on BackendSubsystem_GetTokushoText");
static_assert(offsetof(BackendSubsystem_GetTokushoText, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetTokushoText::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetTutorialStepNo
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_GetTutorialStepNo final
{
public:
	ETutorialStepNo                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetTutorialStepNo) == 0x000001, "Wrong alignment on BackendSubsystem_GetTutorialStepNo");
static_assert(sizeof(BackendSubsystem_GetTutorialStepNo) == 0x000001, "Wrong size on BackendSubsystem_GetTutorialStepNo");
static_assert(offsetof(BackendSubsystem_GetTutorialStepNo, ReturnValue) == 0x000000, "Member 'BackendSubsystem_GetTutorialStepNo::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.GetVersions
// 0x0040 (0x0040 - 0x0000)
struct BackendSubsystem_GetVersions final
{
public:
	class FString                                 WebApi;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Matching;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Data;                                              // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TrackingNumber;                                    // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_GetVersions) == 0x000008, "Wrong alignment on BackendSubsystem_GetVersions");
static_assert(sizeof(BackendSubsystem_GetVersions) == 0x000040, "Wrong size on BackendSubsystem_GetVersions");
static_assert(offsetof(BackendSubsystem_GetVersions, WebApi) == 0x000000, "Member 'BackendSubsystem_GetVersions::WebApi' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_GetVersions, Matching) == 0x000010, "Member 'BackendSubsystem_GetVersions::Matching' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_GetVersions, Data) == 0x000020, "Member 'BackendSubsystem_GetVersions::Data' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_GetVersions, TrackingNumber) == 0x000030, "Member 'BackendSubsystem_GetVersions::TrackingNumber' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.HasOnlinePlayPrivilege
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_HasOnlinePlayPrivilege final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_HasOnlinePlayPrivilege) == 0x000001, "Wrong alignment on BackendSubsystem_HasOnlinePlayPrivilege");
static_assert(sizeof(BackendSubsystem_HasOnlinePlayPrivilege) == 0x000001, "Wrong size on BackendSubsystem_HasOnlinePlayPrivilege");
static_assert(offsetof(BackendSubsystem_HasOnlinePlayPrivilege, ReturnValue) == 0x000000, "Member 'BackendSubsystem_HasOnlinePlayPrivilege::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.IsAutoKickCpu
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_IsAutoKickCpu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_IsAutoKickCpu) == 0x000001, "Wrong alignment on BackendSubsystem_IsAutoKickCpu");
static_assert(sizeof(BackendSubsystem_IsAutoKickCpu) == 0x000001, "Wrong size on BackendSubsystem_IsAutoKickCpu");
static_assert(offsetof(BackendSubsystem_IsAutoKickCpu, ReturnValue) == 0x000000, "Member 'BackendSubsystem_IsAutoKickCpu::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.IsBonusRemainsToday
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_IsBonusRemainsToday final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_IsBonusRemainsToday) == 0x000001, "Wrong alignment on BackendSubsystem_IsBonusRemainsToday");
static_assert(sizeof(BackendSubsystem_IsBonusRemainsToday) == 0x000001, "Wrong size on BackendSubsystem_IsBonusRemainsToday");
static_assert(offsetof(BackendSubsystem_IsBonusRemainsToday, ReturnValue) == 0x000000, "Member 'BackendSubsystem_IsBonusRemainsToday::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.IsCustomMatchJoined
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_IsCustomMatchJoined final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_IsCustomMatchJoined) == 0x000001, "Wrong alignment on BackendSubsystem_IsCustomMatchJoined");
static_assert(sizeof(BackendSubsystem_IsCustomMatchJoined) == 0x000001, "Wrong size on BackendSubsystem_IsCustomMatchJoined");
static_assert(offsetof(BackendSubsystem_IsCustomMatchJoined, ReturnValue) == 0x000000, "Member 'BackendSubsystem_IsCustomMatchJoined::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.IsLastWebApiError
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_IsLastWebApiError final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_IsLastWebApiError) == 0x000001, "Wrong alignment on BackendSubsystem_IsLastWebApiError");
static_assert(sizeof(BackendSubsystem_IsLastWebApiError) == 0x000001, "Wrong size on BackendSubsystem_IsLastWebApiError");
static_assert(offsetof(BackendSubsystem_IsLastWebApiError, ReturnValue) == 0x000000, "Member 'BackendSubsystem_IsLastWebApiError::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.IsLocalMode
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_IsLocalMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_IsLocalMode) == 0x000001, "Wrong alignment on BackendSubsystem_IsLocalMode");
static_assert(sizeof(BackendSubsystem_IsLocalMode) == 0x000001, "Wrong size on BackendSubsystem_IsLocalMode");
static_assert(offsetof(BackendSubsystem_IsLocalMode, ReturnValue) == 0x000000, "Member 'BackendSubsystem_IsLocalMode::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.IsLoggedIn
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_IsLoggedIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_IsLoggedIn) == 0x000001, "Wrong alignment on BackendSubsystem_IsLoggedIn");
static_assert(sizeof(BackendSubsystem_IsLoggedIn) == 0x000001, "Wrong size on BackendSubsystem_IsLoggedIn");
static_assert(offsetof(BackendSubsystem_IsLoggedIn, ReturnValue) == 0x000000, "Member 'BackendSubsystem_IsLoggedIn::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.IsMasterDataDownloading
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_IsMasterDataDownloading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_IsMasterDataDownloading) == 0x000001, "Wrong alignment on BackendSubsystem_IsMasterDataDownloading");
static_assert(sizeof(BackendSubsystem_IsMasterDataDownloading) == 0x000001, "Wrong size on BackendSubsystem_IsMasterDataDownloading");
static_assert(offsetof(BackendSubsystem_IsMasterDataDownloading, ReturnValue) == 0x000000, "Member 'BackendSubsystem_IsMasterDataDownloading::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_IsPlaying) == 0x000001, "Wrong alignment on BackendSubsystem_IsPlaying");
static_assert(sizeof(BackendSubsystem_IsPlaying) == 0x000001, "Wrong size on BackendSubsystem_IsPlaying");
static_assert(offsetof(BackendSubsystem_IsPlaying, ReturnValue) == 0x000000, "Member 'BackendSubsystem_IsPlaying::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.IsPlayingTrainingMode
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_IsPlayingTrainingMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_IsPlayingTrainingMode) == 0x000001, "Wrong alignment on BackendSubsystem_IsPlayingTrainingMode");
static_assert(sizeof(BackendSubsystem_IsPlayingTrainingMode) == 0x000001, "Wrong size on BackendSubsystem_IsPlayingTrainingMode");
static_assert(offsetof(BackendSubsystem_IsPlayingTrainingMode, ReturnValue) == 0x000000, "Member 'BackendSubsystem_IsPlayingTrainingMode::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.IsSkipInGameTutorial
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_IsSkipInGameTutorial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_IsSkipInGameTutorial) == 0x000001, "Wrong alignment on BackendSubsystem_IsSkipInGameTutorial");
static_assert(sizeof(BackendSubsystem_IsSkipInGameTutorial) == 0x000001, "Wrong size on BackendSubsystem_IsSkipInGameTutorial");
static_assert(offsetof(BackendSubsystem_IsSkipInGameTutorial, ReturnValue) == 0x000000, "Member 'BackendSubsystem_IsSkipInGameTutorial::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.IsSquadJoined
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_IsSquadJoined final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_IsSquadJoined) == 0x000001, "Wrong alignment on BackendSubsystem_IsSquadJoined");
static_assert(sizeof(BackendSubsystem_IsSquadJoined) == 0x000001, "Wrong size on BackendSubsystem_IsSquadJoined");
static_assert(offsetof(BackendSubsystem_IsSquadJoined, ReturnValue) == 0x000000, "Member 'BackendSubsystem_IsSquadJoined::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.IsTeamUpLeader
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_IsTeamUpLeader final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_IsTeamUpLeader) == 0x000001, "Wrong alignment on BackendSubsystem_IsTeamUpLeader");
static_assert(sizeof(BackendSubsystem_IsTeamUpLeader) == 0x000001, "Wrong size on BackendSubsystem_IsTeamUpLeader");
static_assert(offsetof(BackendSubsystem_IsTeamUpLeader, ReturnValue) == 0x000000, "Member 'BackendSubsystem_IsTeamUpLeader::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.IsTutorialFinished
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_IsTutorialFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_IsTutorialFinished) == 0x000001, "Wrong alignment on BackendSubsystem_IsTutorialFinished");
static_assert(sizeof(BackendSubsystem_IsTutorialFinished) == 0x000001, "Wrong size on BackendSubsystem_IsTutorialFinished");
static_assert(offsetof(BackendSubsystem_IsTutorialFinished, ReturnValue) == 0x000000, "Member 'BackendSubsystem_IsTutorialFinished::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.IsVoiceChatConnected
// 0x0001 (0x0001 - 0x0000)
struct BackendSubsystem_IsVoiceChatConnected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_IsVoiceChatConnected) == 0x000001, "Wrong alignment on BackendSubsystem_IsVoiceChatConnected");
static_assert(sizeof(BackendSubsystem_IsVoiceChatConnected) == 0x000001, "Wrong size on BackendSubsystem_IsVoiceChatConnected");
static_assert(offsetof(BackendSubsystem_IsVoiceChatConnected, ReturnValue) == 0x000000, "Member 'BackendSubsystem_IsVoiceChatConnected::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.OnChangeUnreadNoticeCount
// 0x0004 (0x0004 - 0x0000)
struct BackendSubsystem_OnChangeUnreadNoticeCount final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_OnChangeUnreadNoticeCount) == 0x000004, "Wrong alignment on BackendSubsystem_OnChangeUnreadNoticeCount");
static_assert(sizeof(BackendSubsystem_OnChangeUnreadNoticeCount) == 0x000004, "Wrong size on BackendSubsystem_OnChangeUnreadNoticeCount");
static_assert(offsetof(BackendSubsystem_OnChangeUnreadNoticeCount, Count) == 0x000000, "Member 'BackendSubsystem_OnChangeUnreadNoticeCount::Count' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SendTextSpeech
// 0x0010 (0x0010 - 0x0000)
struct BackendSubsystem_SendTextSpeech final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SendTextSpeech) == 0x000008, "Wrong alignment on BackendSubsystem_SendTextSpeech");
static_assert(sizeof(BackendSubsystem_SendTextSpeech) == 0x000010, "Wrong size on BackendSubsystem_SendTextSpeech");
static_assert(offsetof(BackendSubsystem_SendTextSpeech, Message) == 0x000000, "Member 'BackendSubsystem_SendTextSpeech::Message' has a wrong offset!");

// Function BackendSubsystem.BackendSubsystem.SetConnectionEnvironment
// 0x0020 (0x0020 - 0x0000)
struct BackendSubsystem_SetConnectionEnvironment final
{
public:
	class FString                                 Env;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TestVersion;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BackendSubsystem_SetConnectionEnvironment) == 0x000008, "Wrong alignment on BackendSubsystem_SetConnectionEnvironment");
static_assert(sizeof(BackendSubsystem_SetConnectionEnvironment) == 0x000020, "Wrong size on BackendSubsystem_SetConnectionEnvironment");
static_assert(offsetof(BackendSubsystem_SetConnectionEnvironment, Env) == 0x000000, "Member 'BackendSubsystem_SetConnectionEnvironment::Env' has a wrong offset!");
static_assert(offsetof(BackendSubsystem_SetConnectionEnvironment, TestVersion) == 0x000010, "Member 'BackendSubsystem_SetConnectionEnvironment::TestVersion' has a wrong offset!");

// Function BackendSubsystem.DatabaseParams.GetBillboardChartData
// 0x0008 (0x0008 - 0x0000)
struct DatabaseParams_GetBillboardChartData final
{
public:
	class UDbpBillboardChart*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DatabaseParams_GetBillboardChartData) == 0x000008, "Wrong alignment on DatabaseParams_GetBillboardChartData");
static_assert(sizeof(DatabaseParams_GetBillboardChartData) == 0x000008, "Wrong size on DatabaseParams_GetBillboardChartData");
static_assert(offsetof(DatabaseParams_GetBillboardChartData, ReturnValue) == 0x000000, "Member 'DatabaseParams_GetBillboardChartData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DatabaseParams.GetCharacterCustomizeData
// 0x0010 (0x0010 - 0x0000)
struct DatabaseParams_GetCharacterCustomizeData final
{
public:
	int32                                         CharacterCode;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDbpCharacterCustomize*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DatabaseParams_GetCharacterCustomizeData) == 0x000008, "Wrong alignment on DatabaseParams_GetCharacterCustomizeData");
static_assert(sizeof(DatabaseParams_GetCharacterCustomizeData) == 0x000010, "Wrong size on DatabaseParams_GetCharacterCustomizeData");
static_assert(offsetof(DatabaseParams_GetCharacterCustomizeData, CharacterCode) == 0x000000, "Member 'DatabaseParams_GetCharacterCustomizeData::CharacterCode' has a wrong offset!");
static_assert(offsetof(DatabaseParams_GetCharacterCustomizeData, ReturnValue) == 0x000008, "Member 'DatabaseParams_GetCharacterCustomizeData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DatabaseParams.GetChatData
// 0x0008 (0x0008 - 0x0000)
struct DatabaseParams_GetChatData final
{
public:
	class UDbpChat*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DatabaseParams_GetChatData) == 0x000008, "Wrong alignment on DatabaseParams_GetChatData");
static_assert(sizeof(DatabaseParams_GetChatData) == 0x000008, "Wrong size on DatabaseParams_GetChatData");
static_assert(offsetof(DatabaseParams_GetChatData, ReturnValue) == 0x000000, "Member 'DatabaseParams_GetChatData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DatabaseParams.GetCustomMatchingData
// 0x0008 (0x0008 - 0x0000)
struct DatabaseParams_GetCustomMatchingData final
{
public:
	class UDbpCustomMatching*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DatabaseParams_GetCustomMatchingData) == 0x000008, "Wrong alignment on DatabaseParams_GetCustomMatchingData");
static_assert(sizeof(DatabaseParams_GetCustomMatchingData) == 0x000008, "Wrong size on DatabaseParams_GetCustomMatchingData");
static_assert(offsetof(DatabaseParams_GetCustomMatchingData, ReturnValue) == 0x000000, "Member 'DatabaseParams_GetCustomMatchingData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DatabaseParams.GetDedicatedServerData
// 0x0008 (0x0008 - 0x0000)
struct DatabaseParams_GetDedicatedServerData final
{
public:
	class UDbpDedicatedServer*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DatabaseParams_GetDedicatedServerData) == 0x000008, "Wrong alignment on DatabaseParams_GetDedicatedServerData");
static_assert(sizeof(DatabaseParams_GetDedicatedServerData) == 0x000008, "Wrong size on DatabaseParams_GetDedicatedServerData");
static_assert(offsetof(DatabaseParams_GetDedicatedServerData, ReturnValue) == 0x000000, "Member 'DatabaseParams_GetDedicatedServerData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DatabaseParams.GetEquippedCustomizeData
// 0x0018 (0x0018 - 0x0000)
struct DatabaseParams_GetEquippedCustomizeData final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDbpEquippedCustomize*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DatabaseParams_GetEquippedCustomizeData) == 0x000008, "Wrong alignment on DatabaseParams_GetEquippedCustomizeData");
static_assert(sizeof(DatabaseParams_GetEquippedCustomizeData) == 0x000018, "Wrong size on DatabaseParams_GetEquippedCustomizeData");
static_assert(offsetof(DatabaseParams_GetEquippedCustomizeData, PlayerId) == 0x000000, "Member 'DatabaseParams_GetEquippedCustomizeData::PlayerId' has a wrong offset!");
static_assert(offsetof(DatabaseParams_GetEquippedCustomizeData, ReturnValue) == 0x000010, "Member 'DatabaseParams_GetEquippedCustomizeData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DatabaseParams.GetEventData
// 0x0008 (0x0008 - 0x0000)
struct DatabaseParams_GetEventData final
{
public:
	class UDbpEvent*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DatabaseParams_GetEventData) == 0x000008, "Wrong alignment on DatabaseParams_GetEventData");
static_assert(sizeof(DatabaseParams_GetEventData) == 0x000008, "Wrong size on DatabaseParams_GetEventData");
static_assert(offsetof(DatabaseParams_GetEventData, ReturnValue) == 0x000000, "Member 'DatabaseParams_GetEventData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DatabaseParams.GetGalleryData
// 0x0008 (0x0008 - 0x0000)
struct DatabaseParams_GetGalleryData final
{
public:
	class UDbpGallery*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DatabaseParams_GetGalleryData) == 0x000008, "Wrong alignment on DatabaseParams_GetGalleryData");
static_assert(sizeof(DatabaseParams_GetGalleryData) == 0x000008, "Wrong size on DatabaseParams_GetGalleryData");
static_assert(offsetof(DatabaseParams_GetGalleryData, ReturnValue) == 0x000000, "Member 'DatabaseParams_GetGalleryData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DatabaseParams.GetGuildData
// 0x0008 (0x0008 - 0x0000)
struct DatabaseParams_GetGuildData final
{
public:
	class UDbpGuild*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DatabaseParams_GetGuildData) == 0x000008, "Wrong alignment on DatabaseParams_GetGuildData");
static_assert(sizeof(DatabaseParams_GetGuildData) == 0x000008, "Wrong size on DatabaseParams_GetGuildData");
static_assert(offsetof(DatabaseParams_GetGuildData, ReturnValue) == 0x000000, "Member 'DatabaseParams_GetGuildData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DatabaseParams.GetInventoryData
// 0x0008 (0x0008 - 0x0000)
struct DatabaseParams_GetInventoryData final
{
public:
	class UDbpInventory*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DatabaseParams_GetInventoryData) == 0x000008, "Wrong alignment on DatabaseParams_GetInventoryData");
static_assert(sizeof(DatabaseParams_GetInventoryData) == 0x000008, "Wrong size on DatabaseParams_GetInventoryData");
static_assert(offsetof(DatabaseParams_GetInventoryData, ReturnValue) == 0x000000, "Member 'DatabaseParams_GetInventoryData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DatabaseParams.GetLoadingData
// 0x0008 (0x0008 - 0x0000)
struct DatabaseParams_GetLoadingData final
{
public:
	class UDbpLoading*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DatabaseParams_GetLoadingData) == 0x000008, "Wrong alignment on DatabaseParams_GetLoadingData");
static_assert(sizeof(DatabaseParams_GetLoadingData) == 0x000008, "Wrong size on DatabaseParams_GetLoadingData");
static_assert(offsetof(DatabaseParams_GetLoadingData, ReturnValue) == 0x000000, "Member 'DatabaseParams_GetLoadingData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DatabaseParams.GetLoginBonusData
// 0x0008 (0x0008 - 0x0000)
struct DatabaseParams_GetLoginBonusData final
{
public:
	class UDbpLoginBonus*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DatabaseParams_GetLoginBonusData) == 0x000008, "Wrong alignment on DatabaseParams_GetLoginBonusData");
static_assert(sizeof(DatabaseParams_GetLoginBonusData) == 0x000008, "Wrong size on DatabaseParams_GetLoginBonusData");
static_assert(offsetof(DatabaseParams_GetLoginBonusData, ReturnValue) == 0x000000, "Member 'DatabaseParams_GetLoginBonusData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DatabaseParams.GetLotteryExchangeResultData
// 0x0008 (0x0008 - 0x0000)
struct DatabaseParams_GetLotteryExchangeResultData final
{
public:
	class UDbpLotteryResult*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DatabaseParams_GetLotteryExchangeResultData) == 0x000008, "Wrong alignment on DatabaseParams_GetLotteryExchangeResultData");
static_assert(sizeof(DatabaseParams_GetLotteryExchangeResultData) == 0x000008, "Wrong size on DatabaseParams_GetLotteryExchangeResultData");
static_assert(offsetof(DatabaseParams_GetLotteryExchangeResultData, ReturnValue) == 0x000000, "Member 'DatabaseParams_GetLotteryExchangeResultData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DatabaseParams.GetLotteryHistory
// 0x0008 (0x0008 - 0x0000)
struct DatabaseParams_GetLotteryHistory final
{
public:
	class UDbpLotteryHistory*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DatabaseParams_GetLotteryHistory) == 0x000008, "Wrong alignment on DatabaseParams_GetLotteryHistory");
static_assert(sizeof(DatabaseParams_GetLotteryHistory) == 0x000008, "Wrong size on DatabaseParams_GetLotteryHistory");
static_assert(offsetof(DatabaseParams_GetLotteryHistory, ReturnValue) == 0x000000, "Member 'DatabaseParams_GetLotteryHistory::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DatabaseParams.GetLotteryListData
// 0x0008 (0x0008 - 0x0000)
struct DatabaseParams_GetLotteryListData final
{
public:
	class UDbpLotteryList*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DatabaseParams_GetLotteryListData) == 0x000008, "Wrong alignment on DatabaseParams_GetLotteryListData");
static_assert(sizeof(DatabaseParams_GetLotteryListData) == 0x000008, "Wrong size on DatabaseParams_GetLotteryListData");
static_assert(offsetof(DatabaseParams_GetLotteryListData, ReturnValue) == 0x000000, "Member 'DatabaseParams_GetLotteryListData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DatabaseParams.GetLotteryRateData
// 0x0010 (0x0010 - 0x0000)
struct DatabaseParams_GetLotteryRateData final
{
public:
	int32                                         LotteryCode;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDbpLotteryRate*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DatabaseParams_GetLotteryRateData) == 0x000008, "Wrong alignment on DatabaseParams_GetLotteryRateData");
static_assert(sizeof(DatabaseParams_GetLotteryRateData) == 0x000010, "Wrong size on DatabaseParams_GetLotteryRateData");
static_assert(offsetof(DatabaseParams_GetLotteryRateData, LotteryCode) == 0x000000, "Member 'DatabaseParams_GetLotteryRateData::LotteryCode' has a wrong offset!");
static_assert(offsetof(DatabaseParams_GetLotteryRateData, ReturnValue) == 0x000008, "Member 'DatabaseParams_GetLotteryRateData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DatabaseParams.GetLotteryResultData
// 0x0008 (0x0008 - 0x0000)
struct DatabaseParams_GetLotteryResultData final
{
public:
	class UDbpLotteryResult*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DatabaseParams_GetLotteryResultData) == 0x000008, "Wrong alignment on DatabaseParams_GetLotteryResultData");
static_assert(sizeof(DatabaseParams_GetLotteryResultData) == 0x000008, "Wrong size on DatabaseParams_GetLotteryResultData");
static_assert(offsetof(DatabaseParams_GetLotteryResultData, ReturnValue) == 0x000000, "Member 'DatabaseParams_GetLotteryResultData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DatabaseParams.GetMainMenuData
// 0x0008 (0x0008 - 0x0000)
struct DatabaseParams_GetMainMenuData final
{
public:
	class UDbpMainMenu*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DatabaseParams_GetMainMenuData) == 0x000008, "Wrong alignment on DatabaseParams_GetMainMenuData");
static_assert(sizeof(DatabaseParams_GetMainMenuData) == 0x000008, "Wrong size on DatabaseParams_GetMainMenuData");
static_assert(offsetof(DatabaseParams_GetMainMenuData, ReturnValue) == 0x000000, "Member 'DatabaseParams_GetMainMenuData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DatabaseParams.GetMissionCategoryListData
// 0x0008 (0x0008 - 0x0000)
struct DatabaseParams_GetMissionCategoryListData final
{
public:
	class UDbpMissionCategoryList*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DatabaseParams_GetMissionCategoryListData) == 0x000008, "Wrong alignment on DatabaseParams_GetMissionCategoryListData");
static_assert(sizeof(DatabaseParams_GetMissionCategoryListData) == 0x000008, "Wrong size on DatabaseParams_GetMissionCategoryListData");
static_assert(offsetof(DatabaseParams_GetMissionCategoryListData, ReturnValue) == 0x000000, "Member 'DatabaseParams_GetMissionCategoryListData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DatabaseParams.GetMyAdData
// 0x0008 (0x0008 - 0x0000)
struct DatabaseParams_GetMyAdData final
{
public:
	class UDbpMyAd*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DatabaseParams_GetMyAdData) == 0x000008, "Wrong alignment on DatabaseParams_GetMyAdData");
static_assert(sizeof(DatabaseParams_GetMyAdData) == 0x000008, "Wrong size on DatabaseParams_GetMyAdData");
static_assert(offsetof(DatabaseParams_GetMyAdData, ReturnValue) == 0x000000, "Member 'DatabaseParams_GetMyAdData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DatabaseParams.GetMyProfileData
// 0x0008 (0x0008 - 0x0000)
struct DatabaseParams_GetMyProfileData final
{
public:
	class UDbpMyProfile*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DatabaseParams_GetMyProfileData) == 0x000008, "Wrong alignment on DatabaseParams_GetMyProfileData");
static_assert(sizeof(DatabaseParams_GetMyProfileData) == 0x000008, "Wrong size on DatabaseParams_GetMyProfileData");
static_assert(offsetof(DatabaseParams_GetMyProfileData, ReturnValue) == 0x000000, "Member 'DatabaseParams_GetMyProfileData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DatabaseParams.GetNoticeData
// 0x0008 (0x0008 - 0x0000)
struct DatabaseParams_GetNoticeData final
{
public:
	class UDbpNotice*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DatabaseParams_GetNoticeData) == 0x000008, "Wrong alignment on DatabaseParams_GetNoticeData");
static_assert(sizeof(DatabaseParams_GetNoticeData) == 0x000008, "Wrong size on DatabaseParams_GetNoticeData");
static_assert(offsetof(DatabaseParams_GetNoticeData, ReturnValue) == 0x000000, "Member 'DatabaseParams_GetNoticeData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DatabaseParams.GetPlayableCharactersData
// 0x0008 (0x0008 - 0x0000)
struct DatabaseParams_GetPlayableCharactersData final
{
public:
	class UDbpPlayableCharacterList*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DatabaseParams_GetPlayableCharactersData) == 0x000008, "Wrong alignment on DatabaseParams_GetPlayableCharactersData");
static_assert(sizeof(DatabaseParams_GetPlayableCharactersData) == 0x000008, "Wrong size on DatabaseParams_GetPlayableCharactersData");
static_assert(offsetof(DatabaseParams_GetPlayableCharactersData, ReturnValue) == 0x000000, "Member 'DatabaseParams_GetPlayableCharactersData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DatabaseParams.GetPlayerListData
// 0x0008 (0x0008 - 0x0000)
struct DatabaseParams_GetPlayerListData final
{
public:
	class UDbpPlayerList*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DatabaseParams_GetPlayerListData) == 0x000008, "Wrong alignment on DatabaseParams_GetPlayerListData");
static_assert(sizeof(DatabaseParams_GetPlayerListData) == 0x000008, "Wrong size on DatabaseParams_GetPlayerListData");
static_assert(offsetof(DatabaseParams_GetPlayerListData, ReturnValue) == 0x000000, "Member 'DatabaseParams_GetPlayerListData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DatabaseParams.GetRankingData
// 0x0008 (0x0008 - 0x0000)
struct DatabaseParams_GetRankingData final
{
public:
	class UDbpRanking*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DatabaseParams_GetRankingData) == 0x000008, "Wrong alignment on DatabaseParams_GetRankingData");
static_assert(sizeof(DatabaseParams_GetRankingData) == 0x000008, "Wrong size on DatabaseParams_GetRankingData");
static_assert(offsetof(DatabaseParams_GetRankingData, ReturnValue) == 0x000000, "Member 'DatabaseParams_GetRankingData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DatabaseParams.GetResultData
// 0x0008 (0x0008 - 0x0000)
struct DatabaseParams_GetResultData final
{
public:
	class UDbpResult*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DatabaseParams_GetResultData) == 0x000008, "Wrong alignment on DatabaseParams_GetResultData");
static_assert(sizeof(DatabaseParams_GetResultData) == 0x000008, "Wrong size on DatabaseParams_GetResultData");
static_assert(offsetof(DatabaseParams_GetResultData, ReturnValue) == 0x000000, "Member 'DatabaseParams_GetResultData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DatabaseParams.GetSeasonData
// 0x0008 (0x0008 - 0x0000)
struct DatabaseParams_GetSeasonData final
{
public:
	class UDbpSeason*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DatabaseParams_GetSeasonData) == 0x000008, "Wrong alignment on DatabaseParams_GetSeasonData");
static_assert(sizeof(DatabaseParams_GetSeasonData) == 0x000008, "Wrong size on DatabaseParams_GetSeasonData");
static_assert(offsetof(DatabaseParams_GetSeasonData, ReturnValue) == 0x000000, "Member 'DatabaseParams_GetSeasonData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DatabaseParams.GetSettingData
// 0x0008 (0x0008 - 0x0000)
struct DatabaseParams_GetSettingData final
{
public:
	class UDbpSetting*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DatabaseParams_GetSettingData) == 0x000008, "Wrong alignment on DatabaseParams_GetSettingData");
static_assert(sizeof(DatabaseParams_GetSettingData) == 0x000008, "Wrong size on DatabaseParams_GetSettingData");
static_assert(offsetof(DatabaseParams_GetSettingData, ReturnValue) == 0x000000, "Member 'DatabaseParams_GetSettingData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DatabaseParams.GetShopsData
// 0x0008 (0x0008 - 0x0000)
struct DatabaseParams_GetShopsData final
{
public:
	class UDbpShopList*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DatabaseParams_GetShopsData) == 0x000008, "Wrong alignment on DatabaseParams_GetShopsData");
static_assert(sizeof(DatabaseParams_GetShopsData) == 0x000008, "Wrong size on DatabaseParams_GetShopsData");
static_assert(offsetof(DatabaseParams_GetShopsData, ReturnValue) == 0x000000, "Member 'DatabaseParams_GetShopsData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpBillboardChart.GetSeasonTotal
// 0x0004 (0x0004 - 0x0000)
struct DbpBillboardChart_GetSeasonTotal final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpBillboardChart_GetSeasonTotal) == 0x000004, "Wrong alignment on DbpBillboardChart_GetSeasonTotal");
static_assert(sizeof(DbpBillboardChart_GetSeasonTotal) == 0x000004, "Wrong size on DbpBillboardChart_GetSeasonTotal");
static_assert(offsetof(DbpBillboardChart_GetSeasonTotal, ReturnValue) == 0x000000, "Member 'DbpBillboardChart_GetSeasonTotal::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpBillboardChart.GetTodayTotal
// 0x0004 (0x0004 - 0x0000)
struct DbpBillboardChart_GetTodayTotal final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpBillboardChart_GetTodayTotal) == 0x000004, "Wrong alignment on DbpBillboardChart_GetTodayTotal");
static_assert(sizeof(DbpBillboardChart_GetTodayTotal) == 0x000004, "Wrong size on DbpBillboardChart_GetTodayTotal");
static_assert(offsetof(DbpBillboardChart_GetTodayTotal, ReturnValue) == 0x000000, "Member 'DbpBillboardChart_GetTodayTotal::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpBillboardChart.GetVoterList
// 0x0010 (0x0010 - 0x0000)
struct DbpBillboardChart_GetVoterList final
{
public:
	TArray<struct FDbBillboardVoterParam>         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpBillboardChart_GetVoterList) == 0x000008, "Wrong alignment on DbpBillboardChart_GetVoterList");
static_assert(sizeof(DbpBillboardChart_GetVoterList) == 0x000010, "Wrong size on DbpBillboardChart_GetVoterList");
static_assert(offsetof(DbpBillboardChart_GetVoterList, ReturnValue) == 0x000000, "Member 'DbpBillboardChart_GetVoterList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMyAd.GetMyAdPartsDataList
// 0x0018 (0x0018 - 0x0000)
struct DbpMyAd_GetMyAdPartsDataList final
{
public:
	EMyAdPartsCategory                            Category;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMasterDataMyAdParts>           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMyAd_GetMyAdPartsDataList) == 0x000008, "Wrong alignment on DbpMyAd_GetMyAdPartsDataList");
static_assert(sizeof(DbpMyAd_GetMyAdPartsDataList) == 0x000018, "Wrong size on DbpMyAd_GetMyAdPartsDataList");
static_assert(offsetof(DbpMyAd_GetMyAdPartsDataList, Category) == 0x000000, "Member 'DbpMyAd_GetMyAdPartsDataList::Category' has a wrong offset!");
static_assert(offsetof(DbpMyAd_GetMyAdPartsDataList, ReturnValue) == 0x000008, "Member 'DbpMyAd_GetMyAdPartsDataList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMyAd.CanDelivery
// 0x0001 (0x0001 - 0x0000)
struct DbpMyAd_CanDelivery final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMyAd_CanDelivery) == 0x000001, "Wrong alignment on DbpMyAd_CanDelivery");
static_assert(sizeof(DbpMyAd_CanDelivery) == 0x000001, "Wrong size on DbpMyAd_CanDelivery");
static_assert(offsetof(DbpMyAd_CanDelivery, ReturnValue) == 0x000000, "Member 'DbpMyAd_CanDelivery::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMyAd.CanUnlock
// 0x0001 (0x0001 - 0x0000)
struct DbpMyAd_CanUnlock final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMyAd_CanUnlock) == 0x000001, "Wrong alignment on DbpMyAd_CanUnlock");
static_assert(sizeof(DbpMyAd_CanUnlock) == 0x000001, "Wrong size on DbpMyAd_CanUnlock");
static_assert(offsetof(DbpMyAd_CanUnlock, ReturnValue) == 0x000000, "Member 'DbpMyAd_CanUnlock::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMyAd.GetCurrencyCount
// 0x0004 (0x0004 - 0x0000)
struct DbpMyAd_GetCurrencyCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMyAd_GetCurrencyCount) == 0x000004, "Wrong alignment on DbpMyAd_GetCurrencyCount");
static_assert(sizeof(DbpMyAd_GetCurrencyCount) == 0x000004, "Wrong size on DbpMyAd_GetCurrencyCount");
static_assert(offsetof(DbpMyAd_GetCurrencyCount, ReturnValue) == 0x000000, "Member 'DbpMyAd_GetCurrencyCount::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMyAd.GetDeliveryPrice
// 0x0004 (0x0004 - 0x0000)
struct DbpMyAd_GetDeliveryPrice final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMyAd_GetDeliveryPrice) == 0x000004, "Wrong alignment on DbpMyAd_GetDeliveryPrice");
static_assert(sizeof(DbpMyAd_GetDeliveryPrice) == 0x000004, "Wrong size on DbpMyAd_GetDeliveryPrice");
static_assert(offsetof(DbpMyAd_GetDeliveryPrice, ReturnValue) == 0x000000, "Member 'DbpMyAd_GetDeliveryPrice::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMyAd.GetMyAdList
// 0x0010 (0x0010 - 0x0000)
struct DbpMyAd_GetMyAdList final
{
public:
	TArray<struct FDbAdDataParam>                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMyAd_GetMyAdList) == 0x000008, "Wrong alignment on DbpMyAd_GetMyAdList");
static_assert(sizeof(DbpMyAd_GetMyAdList) == 0x000010, "Wrong size on DbpMyAd_GetMyAdList");
static_assert(offsetof(DbpMyAd_GetMyAdList, ReturnValue) == 0x000000, "Member 'DbpMyAd_GetMyAdList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMyAd.GetMyAdMessagesDataList
// 0x0010 (0x0010 - 0x0000)
struct DbpMyAd_GetMyAdMessagesDataList final
{
public:
	TArray<struct FMasterDataMyAdMessage>         ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMyAd_GetMyAdMessagesDataList) == 0x000008, "Wrong alignment on DbpMyAd_GetMyAdMessagesDataList");
static_assert(sizeof(DbpMyAd_GetMyAdMessagesDataList) == 0x000010, "Wrong size on DbpMyAd_GetMyAdMessagesDataList");
static_assert(offsetof(DbpMyAd_GetMyAdMessagesDataList, ReturnValue) == 0x000000, "Member 'DbpMyAd_GetMyAdMessagesDataList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMyAd.GetUnlockedAdSpaceCount
// 0x0004 (0x0004 - 0x0000)
struct DbpMyAd_GetUnlockedAdSpaceCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMyAd_GetUnlockedAdSpaceCount) == 0x000004, "Wrong alignment on DbpMyAd_GetUnlockedAdSpaceCount");
static_assert(sizeof(DbpMyAd_GetUnlockedAdSpaceCount) == 0x000004, "Wrong size on DbpMyAd_GetUnlockedAdSpaceCount");
static_assert(offsetof(DbpMyAd_GetUnlockedAdSpaceCount, ReturnValue) == 0x000000, "Member 'DbpMyAd_GetUnlockedAdSpaceCount::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMyAd.GetUnlockPrice
// 0x0004 (0x0004 - 0x0000)
struct DbpMyAd_GetUnlockPrice final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMyAd_GetUnlockPrice) == 0x000004, "Wrong alignment on DbpMyAd_GetUnlockPrice");
static_assert(sizeof(DbpMyAd_GetUnlockPrice) == 0x000004, "Wrong size on DbpMyAd_GetUnlockPrice");
static_assert(offsetof(DbpMyAd_GetUnlockPrice, ReturnValue) == 0x000000, "Member 'DbpMyAd_GetUnlockPrice::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpCharacterCustomize.GetAppealList
// 0x0028 (0x0028 - 0x0000)
struct DbpCharacterCustomize_GetAppealList final
{
public:
	TArray<struct FDbsAppealParam>                OutUnlocked;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDbsAppealParam>                OutLocked;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DbpCharacterCustomize_GetAppealList) == 0x000008, "Wrong alignment on DbpCharacterCustomize_GetAppealList");
static_assert(sizeof(DbpCharacterCustomize_GetAppealList) == 0x000028, "Wrong size on DbpCharacterCustomize_GetAppealList");
static_assert(offsetof(DbpCharacterCustomize_GetAppealList, OutUnlocked) == 0x000000, "Member 'DbpCharacterCustomize_GetAppealList::OutUnlocked' has a wrong offset!");
static_assert(offsetof(DbpCharacterCustomize_GetAppealList, OutLocked) == 0x000010, "Member 'DbpCharacterCustomize_GetAppealList::OutLocked' has a wrong offset!");
static_assert(offsetof(DbpCharacterCustomize_GetAppealList, ReturnValue) == 0x000020, "Member 'DbpCharacterCustomize_GetAppealList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpCharacterCustomize.GetCostumeList
// 0x0028 (0x0028 - 0x0000)
struct DbpCharacterCustomize_GetCostumeList final
{
public:
	TArray<struct FDbsCostumeParam>               OutUnlocked;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDbsCostumeParam>               OutLocked;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DbpCharacterCustomize_GetCostumeList) == 0x000008, "Wrong alignment on DbpCharacterCustomize_GetCostumeList");
static_assert(sizeof(DbpCharacterCustomize_GetCostumeList) == 0x000028, "Wrong size on DbpCharacterCustomize_GetCostumeList");
static_assert(offsetof(DbpCharacterCustomize_GetCostumeList, OutUnlocked) == 0x000000, "Member 'DbpCharacterCustomize_GetCostumeList::OutUnlocked' has a wrong offset!");
static_assert(offsetof(DbpCharacterCustomize_GetCostumeList, OutLocked) == 0x000010, "Member 'DbpCharacterCustomize_GetCostumeList::OutLocked' has a wrong offset!");
static_assert(offsetof(DbpCharacterCustomize_GetCostumeList, ReturnValue) == 0x000020, "Member 'DbpCharacterCustomize_GetCostumeList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpCharacterCustomize.GetEmblemList
// 0x0028 (0x0028 - 0x0000)
struct DbpCharacterCustomize_GetEmblemList final
{
public:
	TArray<struct FDbsEmblemParam>                OutUnlocked;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDbsEmblemParam>                OutLocked;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DbpCharacterCustomize_GetEmblemList) == 0x000008, "Wrong alignment on DbpCharacterCustomize_GetEmblemList");
static_assert(sizeof(DbpCharacterCustomize_GetEmblemList) == 0x000028, "Wrong size on DbpCharacterCustomize_GetEmblemList");
static_assert(offsetof(DbpCharacterCustomize_GetEmblemList, OutUnlocked) == 0x000000, "Member 'DbpCharacterCustomize_GetEmblemList::OutUnlocked' has a wrong offset!");
static_assert(offsetof(DbpCharacterCustomize_GetEmblemList, OutLocked) == 0x000010, "Member 'DbpCharacterCustomize_GetEmblemList::OutLocked' has a wrong offset!");
static_assert(offsetof(DbpCharacterCustomize_GetEmblemList, ReturnValue) == 0x000020, "Member 'DbpCharacterCustomize_GetEmblemList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpCharacterCustomize.GetEquippedCostume
// 0x0498 (0x0498 - 0x0000)
struct DbpCharacterCustomize_GetEquippedCostume final
{
public:
	struct FDbsCostumeParam                       ReturnValue;                                       // 0x0000(0x0498)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpCharacterCustomize_GetEquippedCostume) == 0x000008, "Wrong alignment on DbpCharacterCustomize_GetEquippedCostume");
static_assert(sizeof(DbpCharacterCustomize_GetEquippedCostume) == 0x000498, "Wrong size on DbpCharacterCustomize_GetEquippedCostume");
static_assert(offsetof(DbpCharacterCustomize_GetEquippedCostume, ReturnValue) == 0x000000, "Member 'DbpCharacterCustomize_GetEquippedCostume::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpCharacterCustomize.GetEquippedVariation
// 0x0490 (0x0490 - 0x0000)
struct DbpCharacterCustomize_GetEquippedVariation final
{
public:
	struct FDbsVariationParam                     ReturnValue;                                       // 0x0000(0x0490)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpCharacterCustomize_GetEquippedVariation) == 0x000008, "Wrong alignment on DbpCharacterCustomize_GetEquippedVariation");
static_assert(sizeof(DbpCharacterCustomize_GetEquippedVariation) == 0x000490, "Wrong size on DbpCharacterCustomize_GetEquippedVariation");
static_assert(offsetof(DbpCharacterCustomize_GetEquippedVariation, ReturnValue) == 0x000000, "Member 'DbpCharacterCustomize_GetEquippedVariation::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpCharacterCustomize.GetPresets
// 0x0010 (0x0010 - 0x0000)
struct DbpCharacterCustomize_GetPresets final
{
public:
	TArray<struct FDbPresetParam>                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpCharacterCustomize_GetPresets) == 0x000008, "Wrong alignment on DbpCharacterCustomize_GetPresets");
static_assert(sizeof(DbpCharacterCustomize_GetPresets) == 0x000010, "Wrong size on DbpCharacterCustomize_GetPresets");
static_assert(offsetof(DbpCharacterCustomize_GetPresets, ReturnValue) == 0x000000, "Member 'DbpCharacterCustomize_GetPresets::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpCharacterCustomize.GetVariationList
// 0x0028 (0x0028 - 0x0000)
struct DbpCharacterCustomize_GetVariationList final
{
public:
	TArray<struct FDbsVariationParam>             OutUnlocked;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDbsVariationParam>             OutLocked;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DbpCharacterCustomize_GetVariationList) == 0x000008, "Wrong alignment on DbpCharacterCustomize_GetVariationList");
static_assert(sizeof(DbpCharacterCustomize_GetVariationList) == 0x000028, "Wrong size on DbpCharacterCustomize_GetVariationList");
static_assert(offsetof(DbpCharacterCustomize_GetVariationList, OutUnlocked) == 0x000000, "Member 'DbpCharacterCustomize_GetVariationList::OutUnlocked' has a wrong offset!");
static_assert(offsetof(DbpCharacterCustomize_GetVariationList, OutLocked) == 0x000010, "Member 'DbpCharacterCustomize_GetVariationList::OutLocked' has a wrong offset!");
static_assert(offsetof(DbpCharacterCustomize_GetVariationList, ReturnValue) == 0x000020, "Member 'DbpCharacterCustomize_GetVariationList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpCharacterCustomize.GetVoiceList
// 0x0028 (0x0028 - 0x0000)
struct DbpCharacterCustomize_GetVoiceList final
{
public:
	TArray<struct FDbsVoiceParam>                 OutUnlocked;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDbsVoiceParam>                 OutLocked;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DbpCharacterCustomize_GetVoiceList) == 0x000008, "Wrong alignment on DbpCharacterCustomize_GetVoiceList");
static_assert(sizeof(DbpCharacterCustomize_GetVoiceList) == 0x000028, "Wrong size on DbpCharacterCustomize_GetVoiceList");
static_assert(offsetof(DbpCharacterCustomize_GetVoiceList, OutUnlocked) == 0x000000, "Member 'DbpCharacterCustomize_GetVoiceList::OutUnlocked' has a wrong offset!");
static_assert(offsetof(DbpCharacterCustomize_GetVoiceList, OutLocked) == 0x000010, "Member 'DbpCharacterCustomize_GetVoiceList::OutLocked' has a wrong offset!");
static_assert(offsetof(DbpCharacterCustomize_GetVoiceList, ReturnValue) == 0x000020, "Member 'DbpCharacterCustomize_GetVoiceList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpCharacterCustomize.GetCharacter
// 0x1860 (0x1860 - 0x0000)
struct DbpCharacterCustomize_GetCharacter final
{
public:
	struct FDbMyCharacterParam                    Character;                                         // 0x0000(0x1858)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x1858(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1859[0x7];                                     // 0x1859(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DbpCharacterCustomize_GetCharacter) == 0x000008, "Wrong alignment on DbpCharacterCustomize_GetCharacter");
static_assert(sizeof(DbpCharacterCustomize_GetCharacter) == 0x001860, "Wrong size on DbpCharacterCustomize_GetCharacter");
static_assert(offsetof(DbpCharacterCustomize_GetCharacter, Character) == 0x000000, "Member 'DbpCharacterCustomize_GetCharacter::Character' has a wrong offset!");
static_assert(offsetof(DbpCharacterCustomize_GetCharacter, ReturnValue) == 0x001858, "Member 'DbpCharacterCustomize_GetCharacter::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpCharacterCustomize.GetCharacterCode
// 0x0004 (0x0004 - 0x0000)
struct DbpCharacterCustomize_GetCharacterCode final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpCharacterCustomize_GetCharacterCode) == 0x000004, "Wrong alignment on DbpCharacterCustomize_GetCharacterCode");
static_assert(sizeof(DbpCharacterCustomize_GetCharacterCode) == 0x000004, "Wrong size on DbpCharacterCustomize_GetCharacterCode");
static_assert(offsetof(DbpCharacterCustomize_GetCharacterCode, ReturnValue) == 0x000000, "Member 'DbpCharacterCustomize_GetCharacterCode::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpCharacterCustomize.GetEquippedAppeals
// 0x0010 (0x0010 - 0x0000)
struct DbpCharacterCustomize_GetEquippedAppeals final
{
public:
	TArray<struct FDbsAppealParam>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpCharacterCustomize_GetEquippedAppeals) == 0x000008, "Wrong alignment on DbpCharacterCustomize_GetEquippedAppeals");
static_assert(sizeof(DbpCharacterCustomize_GetEquippedAppeals) == 0x000010, "Wrong size on DbpCharacterCustomize_GetEquippedAppeals");
static_assert(offsetof(DbpCharacterCustomize_GetEquippedAppeals, ReturnValue) == 0x000000, "Member 'DbpCharacterCustomize_GetEquippedAppeals::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpCharacterCustomize.GetEquippedEmblems
// 0x0010 (0x0010 - 0x0000)
struct DbpCharacterCustomize_GetEquippedEmblems final
{
public:
	TArray<struct FDbsEmblemParam>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpCharacterCustomize_GetEquippedEmblems) == 0x000008, "Wrong alignment on DbpCharacterCustomize_GetEquippedEmblems");
static_assert(sizeof(DbpCharacterCustomize_GetEquippedEmblems) == 0x000010, "Wrong size on DbpCharacterCustomize_GetEquippedEmblems");
static_assert(offsetof(DbpCharacterCustomize_GetEquippedEmblems, ReturnValue) == 0x000000, "Member 'DbpCharacterCustomize_GetEquippedEmblems::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpCharacterCustomize.GetEquippedVariationNo
// 0x0004 (0x0004 - 0x0000)
struct DbpCharacterCustomize_GetEquippedVariationNo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpCharacterCustomize_GetEquippedVariationNo) == 0x000004, "Wrong alignment on DbpCharacterCustomize_GetEquippedVariationNo");
static_assert(sizeof(DbpCharacterCustomize_GetEquippedVariationNo) == 0x000004, "Wrong size on DbpCharacterCustomize_GetEquippedVariationNo");
static_assert(offsetof(DbpCharacterCustomize_GetEquippedVariationNo, ReturnValue) == 0x000000, "Member 'DbpCharacterCustomize_GetEquippedVariationNo::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpCharacterCustomize.GetEquippedVoices
// 0x0010 (0x0010 - 0x0000)
struct DbpCharacterCustomize_GetEquippedVoices final
{
public:
	TArray<struct FDbsVoiceParam>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpCharacterCustomize_GetEquippedVoices) == 0x000008, "Wrong alignment on DbpCharacterCustomize_GetEquippedVoices");
static_assert(sizeof(DbpCharacterCustomize_GetEquippedVoices) == 0x000010, "Wrong size on DbpCharacterCustomize_GetEquippedVoices");
static_assert(offsetof(DbpCharacterCustomize_GetEquippedVoices, ReturnValue) == 0x000000, "Member 'DbpCharacterCustomize_GetEquippedVoices::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpChat.GetAllLogList
// 0x0010 (0x0010 - 0x0000)
struct DbpChat_GetAllLogList final
{
public:
	TArray<struct FDbChatLogParam>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpChat_GetAllLogList) == 0x000008, "Wrong alignment on DbpChat_GetAllLogList");
static_assert(sizeof(DbpChat_GetAllLogList) == 0x000010, "Wrong size on DbpChat_GetAllLogList");
static_assert(offsetof(DbpChat_GetAllLogList, ReturnValue) == 0x000000, "Member 'DbpChat_GetAllLogList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpChat.GetLogList
// 0x0018 (0x0018 - 0x0000)
struct DbpChat_GetLogList final
{
public:
	int32                                         Max;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDbChatLogParam>                ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpChat_GetLogList) == 0x000008, "Wrong alignment on DbpChat_GetLogList");
static_assert(sizeof(DbpChat_GetLogList) == 0x000018, "Wrong size on DbpChat_GetLogList");
static_assert(offsetof(DbpChat_GetLogList, Max) == 0x000000, "Member 'DbpChat_GetLogList::Max' has a wrong offset!");
static_assert(offsetof(DbpChat_GetLogList, ReturnValue) == 0x000008, "Member 'DbpChat_GetLogList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpChat.GetNewChatList
// 0x0010 (0x0010 - 0x0000)
struct DbpChat_GetNewChatList final
{
public:
	TArray<struct FDbChatLogParam>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpChat_GetNewChatList) == 0x000008, "Wrong alignment on DbpChat_GetNewChatList");
static_assert(sizeof(DbpChat_GetNewChatList) == 0x000010, "Wrong size on DbpChat_GetNewChatList");
static_assert(offsetof(DbpChat_GetNewChatList, ReturnValue) == 0x000000, "Member 'DbpChat_GetNewChatList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpCustomMatching.MakeRandomMatchMemberParam
// 0x0018 (0x0018 - 0x0000)
struct DbpCustomMatching_MakeRandomMatchMemberParam final
{
public:
	int32                                         SquadNum;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerNum;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDbCustomMatchingMemberParamList> OutData;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpCustomMatching_MakeRandomMatchMemberParam) == 0x000008, "Wrong alignment on DbpCustomMatching_MakeRandomMatchMemberParam");
static_assert(sizeof(DbpCustomMatching_MakeRandomMatchMemberParam) == 0x000018, "Wrong size on DbpCustomMatching_MakeRandomMatchMemberParam");
static_assert(offsetof(DbpCustomMatching_MakeRandomMatchMemberParam, SquadNum) == 0x000000, "Member 'DbpCustomMatching_MakeRandomMatchMemberParam::SquadNum' has a wrong offset!");
static_assert(offsetof(DbpCustomMatching_MakeRandomMatchMemberParam, PlayerNum) == 0x000004, "Member 'DbpCustomMatching_MakeRandomMatchMemberParam::PlayerNum' has a wrong offset!");
static_assert(offsetof(DbpCustomMatching_MakeRandomMatchMemberParam, OutData) == 0x000008, "Member 'DbpCustomMatching_MakeRandomMatchMemberParam::OutData' has a wrong offset!");

// Function BackendSubsystem.DbpCustomMatching.SetAllowAllChat
// 0x0001 (0x0001 - 0x0000)
struct DbpCustomMatching_SetAllowAllChat final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpCustomMatching_SetAllowAllChat) == 0x000001, "Wrong alignment on DbpCustomMatching_SetAllowAllChat");
static_assert(sizeof(DbpCustomMatching_SetAllowAllChat) == 0x000001, "Wrong size on DbpCustomMatching_SetAllowAllChat");
static_assert(offsetof(DbpCustomMatching_SetAllowAllChat, Flag) == 0x000000, "Member 'DbpCustomMatching_SetAllowAllChat::Flag' has a wrong offset!");

// Function BackendSubsystem.DbpCustomMatching.SetPublicRoomKey
// 0x0001 (0x0001 - 0x0000)
struct DbpCustomMatching_SetPublicRoomKey final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpCustomMatching_SetPublicRoomKey) == 0x000001, "Wrong alignment on DbpCustomMatching_SetPublicRoomKey");
static_assert(sizeof(DbpCustomMatching_SetPublicRoomKey) == 0x000001, "Wrong size on DbpCustomMatching_SetPublicRoomKey");
static_assert(offsetof(DbpCustomMatching_SetPublicRoomKey, Flag) == 0x000000, "Member 'DbpCustomMatching_SetPublicRoomKey::Flag' has a wrong offset!");

// Function BackendSubsystem.DbpCustomMatching.SetRoomPlayModeCode
// 0x0004 (0x0004 - 0x0000)
struct DbpCustomMatching_SetRoomPlayModeCode final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpCustomMatching_SetRoomPlayModeCode) == 0x000004, "Wrong alignment on DbpCustomMatching_SetRoomPlayModeCode");
static_assert(sizeof(DbpCustomMatching_SetRoomPlayModeCode) == 0x000004, "Wrong size on DbpCustomMatching_SetRoomPlayModeCode");
static_assert(offsetof(DbpCustomMatching_SetRoomPlayModeCode, Code) == 0x000000, "Member 'DbpCustomMatching_SetRoomPlayModeCode::Code' has a wrong offset!");

// Function BackendSubsystem.DbpCustomMatching.ToStringCustomMatchingMyUserData
// 0x0010 (0x0010 - 0x0000)
struct DbpCustomMatching_ToStringCustomMatchingMyUserData final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpCustomMatching_ToStringCustomMatchingMyUserData) == 0x000008, "Wrong alignment on DbpCustomMatching_ToStringCustomMatchingMyUserData");
static_assert(sizeof(DbpCustomMatching_ToStringCustomMatchingMyUserData) == 0x000010, "Wrong size on DbpCustomMatching_ToStringCustomMatchingMyUserData");
static_assert(offsetof(DbpCustomMatching_ToStringCustomMatchingMyUserData, ReturnValue) == 0x000000, "Member 'DbpCustomMatching_ToStringCustomMatchingMyUserData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpCustomMatching.ToStringCustomMatchingRoomData
// 0x0010 (0x0010 - 0x0000)
struct DbpCustomMatching_ToStringCustomMatchingRoomData final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpCustomMatching_ToStringCustomMatchingRoomData) == 0x000008, "Wrong alignment on DbpCustomMatching_ToStringCustomMatchingRoomData");
static_assert(sizeof(DbpCustomMatching_ToStringCustomMatchingRoomData) == 0x000010, "Wrong size on DbpCustomMatching_ToStringCustomMatchingRoomData");
static_assert(offsetof(DbpCustomMatching_ToStringCustomMatchingRoomData, ReturnValue) == 0x000000, "Member 'DbpCustomMatching_ToStringCustomMatchingRoomData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpCustomMatching.ToStringCustomMatchingStandbyList
// 0x0010 (0x0010 - 0x0000)
struct DbpCustomMatching_ToStringCustomMatchingStandbyList final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpCustomMatching_ToStringCustomMatchingStandbyList) == 0x000008, "Wrong alignment on DbpCustomMatching_ToStringCustomMatchingStandbyList");
static_assert(sizeof(DbpCustomMatching_ToStringCustomMatchingStandbyList) == 0x000010, "Wrong size on DbpCustomMatching_ToStringCustomMatchingStandbyList");
static_assert(offsetof(DbpCustomMatching_ToStringCustomMatchingStandbyList, ReturnValue) == 0x000000, "Member 'DbpCustomMatching_ToStringCustomMatchingStandbyList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpCustomMatching.ToStringCustomMatchingTeamDataList
// 0x0010 (0x0010 - 0x0000)
struct DbpCustomMatching_ToStringCustomMatchingTeamDataList final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpCustomMatching_ToStringCustomMatchingTeamDataList) == 0x000008, "Wrong alignment on DbpCustomMatching_ToStringCustomMatchingTeamDataList");
static_assert(sizeof(DbpCustomMatching_ToStringCustomMatchingTeamDataList) == 0x000010, "Wrong size on DbpCustomMatching_ToStringCustomMatchingTeamDataList");
static_assert(offsetof(DbpCustomMatching_ToStringCustomMatchingTeamDataList, ReturnValue) == 0x000000, "Member 'DbpCustomMatching_ToStringCustomMatchingTeamDataList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpCustomMatching.GetRoomPlayModeCode
// 0x0004 (0x0004 - 0x0000)
struct DbpCustomMatching_GetRoomPlayModeCode final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpCustomMatching_GetRoomPlayModeCode) == 0x000004, "Wrong alignment on DbpCustomMatching_GetRoomPlayModeCode");
static_assert(sizeof(DbpCustomMatching_GetRoomPlayModeCode) == 0x000004, "Wrong size on DbpCustomMatching_GetRoomPlayModeCode");
static_assert(offsetof(DbpCustomMatching_GetRoomPlayModeCode, ReturnValue) == 0x000000, "Member 'DbpCustomMatching_GetRoomPlayModeCode::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpCustomMatching.IsAllowAllChat
// 0x0001 (0x0001 - 0x0000)
struct DbpCustomMatching_IsAllowAllChat final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpCustomMatching_IsAllowAllChat) == 0x000001, "Wrong alignment on DbpCustomMatching_IsAllowAllChat");
static_assert(sizeof(DbpCustomMatching_IsAllowAllChat) == 0x000001, "Wrong size on DbpCustomMatching_IsAllowAllChat");
static_assert(offsetof(DbpCustomMatching_IsAllowAllChat, ReturnValue) == 0x000000, "Member 'DbpCustomMatching_IsAllowAllChat::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpCustomMatching.IsPublicRoomKey
// 0x0001 (0x0001 - 0x0000)
struct DbpCustomMatching_IsPublicRoomKey final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpCustomMatching_IsPublicRoomKey) == 0x000001, "Wrong alignment on DbpCustomMatching_IsPublicRoomKey");
static_assert(sizeof(DbpCustomMatching_IsPublicRoomKey) == 0x000001, "Wrong size on DbpCustomMatching_IsPublicRoomKey");
static_assert(offsetof(DbpCustomMatching_IsPublicRoomKey, ReturnValue) == 0x000000, "Member 'DbpCustomMatching_IsPublicRoomKey::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpLotteryResult.GetItems
// 0x0010 (0x0010 - 0x0000)
struct DbpLotteryResult_GetItems final
{
public:
	TArray<struct FDbLotteryResultItem>           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpLotteryResult_GetItems) == 0x000008, "Wrong alignment on DbpLotteryResult_GetItems");
static_assert(sizeof(DbpLotteryResult_GetItems) == 0x000010, "Wrong size on DbpLotteryResult_GetItems");
static_assert(offsetof(DbpLotteryResult_GetItems, ReturnValue) == 0x000000, "Member 'DbpLotteryResult_GetItems::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpDedicatedServer.GetCustomize
// 0x0040 (0x0040 - 0x0000)
struct DbpDedicatedServer_GetCustomize final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataCustomizeVoice>      Voice;                                             // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataCustomizeEmote>      Appeal;                                            // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMasterDataEmblem>              Emblem;                                            // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpDedicatedServer_GetCustomize) == 0x000008, "Wrong alignment on DbpDedicatedServer_GetCustomize");
static_assert(sizeof(DbpDedicatedServer_GetCustomize) == 0x000040, "Wrong size on DbpDedicatedServer_GetCustomize");
static_assert(offsetof(DbpDedicatedServer_GetCustomize, PlayerId) == 0x000000, "Member 'DbpDedicatedServer_GetCustomize::PlayerId' has a wrong offset!");
static_assert(offsetof(DbpDedicatedServer_GetCustomize, Voice) == 0x000010, "Member 'DbpDedicatedServer_GetCustomize::Voice' has a wrong offset!");
static_assert(offsetof(DbpDedicatedServer_GetCustomize, Appeal) == 0x000020, "Member 'DbpDedicatedServer_GetCustomize::Appeal' has a wrong offset!");
static_assert(offsetof(DbpDedicatedServer_GetCustomize, Emblem) == 0x000030, "Member 'DbpDedicatedServer_GetCustomize::Emblem' has a wrong offset!");

// Function BackendSubsystem.DbpDedicatedServer.GetPlayer
// 0x0498 (0x0498 - 0x0000)
struct DbpDedicatedServer_GetPlayer final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDbPlayerParam                         ReturnValue;                                       // 0x0010(0x0488)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpDedicatedServer_GetPlayer) == 0x000008, "Wrong alignment on DbpDedicatedServer_GetPlayer");
static_assert(sizeof(DbpDedicatedServer_GetPlayer) == 0x000498, "Wrong size on DbpDedicatedServer_GetPlayer");
static_assert(offsetof(DbpDedicatedServer_GetPlayer, PlayerId) == 0x000000, "Member 'DbpDedicatedServer_GetPlayer::PlayerId' has a wrong offset!");
static_assert(offsetof(DbpDedicatedServer_GetPlayer, ReturnValue) == 0x000010, "Member 'DbpDedicatedServer_GetPlayer::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpDedicatedServer.GetPlayerList
// 0x0010 (0x0010 - 0x0000)
struct DbpDedicatedServer_GetPlayerList final
{
public:
	TArray<struct FDbPlayerParam>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpDedicatedServer_GetPlayerList) == 0x000008, "Wrong alignment on DbpDedicatedServer_GetPlayerList");
static_assert(sizeof(DbpDedicatedServer_GetPlayerList) == 0x000010, "Wrong size on DbpDedicatedServer_GetPlayerList");
static_assert(offsetof(DbpDedicatedServer_GetPlayerList, ReturnValue) == 0x000000, "Member 'DbpDedicatedServer_GetPlayerList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpPlayerList.GetCounts
// 0x0010 (0x0010 - 0x0000)
struct DbpPlayerList_GetCounts final
{
public:
	EFriendListType                               ListType;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FriendsCount;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxFriendsCount;                                   // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Maxpage;                                           // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpPlayerList_GetCounts) == 0x000004, "Wrong alignment on DbpPlayerList_GetCounts");
static_assert(sizeof(DbpPlayerList_GetCounts) == 0x000010, "Wrong size on DbpPlayerList_GetCounts");
static_assert(offsetof(DbpPlayerList_GetCounts, ListType) == 0x000000, "Member 'DbpPlayerList_GetCounts::ListType' has a wrong offset!");
static_assert(offsetof(DbpPlayerList_GetCounts, FriendsCount) == 0x000004, "Member 'DbpPlayerList_GetCounts::FriendsCount' has a wrong offset!");
static_assert(offsetof(DbpPlayerList_GetCounts, MaxFriendsCount) == 0x000008, "Member 'DbpPlayerList_GetCounts::MaxFriendsCount' has a wrong offset!");
static_assert(offsetof(DbpPlayerList_GetCounts, Maxpage) == 0x00000C, "Member 'DbpPlayerList_GetCounts::Maxpage' has a wrong offset!");

// Function BackendSubsystem.DbpPlayerList.GetPlayer
// 0x0498 (0x0498 - 0x0000)
struct DbpPlayerList_GetPlayer final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDbPlayerParam                         ReturnValue;                                       // 0x0010(0x0488)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpPlayerList_GetPlayer) == 0x000008, "Wrong alignment on DbpPlayerList_GetPlayer");
static_assert(sizeof(DbpPlayerList_GetPlayer) == 0x000498, "Wrong size on DbpPlayerList_GetPlayer");
static_assert(offsetof(DbpPlayerList_GetPlayer, PlayerId) == 0x000000, "Member 'DbpPlayerList_GetPlayer::PlayerId' has a wrong offset!");
static_assert(offsetof(DbpPlayerList_GetPlayer, ReturnValue) == 0x000010, "Member 'DbpPlayerList_GetPlayer::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpPlayerList.GetPlayerList
// 0x0018 (0x0018 - 0x0000)
struct DbpPlayerList_GetPlayerList final
{
public:
	int32                                         PageNo;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFriendListType                               ListType;                                          // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFriendListSortOrder                          Sort;                                              // 0x0005(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDbPlayerParam>                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpPlayerList_GetPlayerList) == 0x000008, "Wrong alignment on DbpPlayerList_GetPlayerList");
static_assert(sizeof(DbpPlayerList_GetPlayerList) == 0x000018, "Wrong size on DbpPlayerList_GetPlayerList");
static_assert(offsetof(DbpPlayerList_GetPlayerList, PageNo) == 0x000000, "Member 'DbpPlayerList_GetPlayerList::PageNo' has a wrong offset!");
static_assert(offsetof(DbpPlayerList_GetPlayerList, ListType) == 0x000004, "Member 'DbpPlayerList_GetPlayerList::ListType' has a wrong offset!");
static_assert(offsetof(DbpPlayerList_GetPlayerList, Sort) == 0x000005, "Member 'DbpPlayerList_GetPlayerList::Sort' has a wrong offset!");
static_assert(offsetof(DbpPlayerList_GetPlayerList, ReturnValue) == 0x000008, "Member 'DbpPlayerList_GetPlayerList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpEquippedCustomize.GetEquipAuraDisplayArea
// 0x0004 (0x0004 - 0x0000)
struct DbpEquippedCustomize_GetEquipAuraDisplayArea final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpEquippedCustomize_GetEquipAuraDisplayArea) == 0x000004, "Wrong alignment on DbpEquippedCustomize_GetEquipAuraDisplayArea");
static_assert(sizeof(DbpEquippedCustomize_GetEquipAuraDisplayArea) == 0x000004, "Wrong size on DbpEquippedCustomize_GetEquipAuraDisplayArea");
static_assert(offsetof(DbpEquippedCustomize_GetEquipAuraDisplayArea, ReturnValue) == 0x000000, "Member 'DbpEquippedCustomize_GetEquipAuraDisplayArea::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpEquippedCustomize.GetEquipAuraDisplayTarget
// 0x0004 (0x0004 - 0x0000)
struct DbpEquippedCustomize_GetEquipAuraDisplayTarget final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpEquippedCustomize_GetEquipAuraDisplayTarget) == 0x000004, "Wrong alignment on DbpEquippedCustomize_GetEquipAuraDisplayTarget");
static_assert(sizeof(DbpEquippedCustomize_GetEquipAuraDisplayTarget) == 0x000004, "Wrong size on DbpEquippedCustomize_GetEquipAuraDisplayTarget");
static_assert(offsetof(DbpEquippedCustomize_GetEquipAuraDisplayTarget, ReturnValue) == 0x000000, "Member 'DbpEquippedCustomize_GetEquipAuraDisplayTarget::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpEquippedCustomize.GetEquippedAppealCodes
// 0x0010 (0x0010 - 0x0000)
struct DbpEquippedCustomize_GetEquippedAppealCodes final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpEquippedCustomize_GetEquippedAppealCodes) == 0x000008, "Wrong alignment on DbpEquippedCustomize_GetEquippedAppealCodes");
static_assert(sizeof(DbpEquippedCustomize_GetEquippedAppealCodes) == 0x000010, "Wrong size on DbpEquippedCustomize_GetEquippedAppealCodes");
static_assert(offsetof(DbpEquippedCustomize_GetEquippedAppealCodes, ReturnValue) == 0x000000, "Member 'DbpEquippedCustomize_GetEquippedAppealCodes::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpEquippedCustomize.GetEquippedAuraLevel
// 0x0004 (0x0004 - 0x0000)
struct DbpEquippedCustomize_GetEquippedAuraLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpEquippedCustomize_GetEquippedAuraLevel) == 0x000004, "Wrong alignment on DbpEquippedCustomize_GetEquippedAuraLevel");
static_assert(sizeof(DbpEquippedCustomize_GetEquippedAuraLevel) == 0x000004, "Wrong size on DbpEquippedCustomize_GetEquippedAuraLevel");
static_assert(offsetof(DbpEquippedCustomize_GetEquippedAuraLevel, ReturnValue) == 0x000000, "Member 'DbpEquippedCustomize_GetEquippedAuraLevel::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpEquippedCustomize.GetEquippedCharacterCode
// 0x0004 (0x0004 - 0x0000)
struct DbpEquippedCustomize_GetEquippedCharacterCode final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpEquippedCustomize_GetEquippedCharacterCode) == 0x000004, "Wrong alignment on DbpEquippedCustomize_GetEquippedCharacterCode");
static_assert(sizeof(DbpEquippedCustomize_GetEquippedCharacterCode) == 0x000004, "Wrong size on DbpEquippedCustomize_GetEquippedCharacterCode");
static_assert(offsetof(DbpEquippedCustomize_GetEquippedCharacterCode, ReturnValue) == 0x000000, "Member 'DbpEquippedCustomize_GetEquippedCharacterCode::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpEquippedCustomize.GetEquippedCostumeCode
// 0x0004 (0x0004 - 0x0000)
struct DbpEquippedCustomize_GetEquippedCostumeCode final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpEquippedCustomize_GetEquippedCostumeCode) == 0x000004, "Wrong alignment on DbpEquippedCustomize_GetEquippedCostumeCode");
static_assert(sizeof(DbpEquippedCustomize_GetEquippedCostumeCode) == 0x000004, "Wrong size on DbpEquippedCustomize_GetEquippedCostumeCode");
static_assert(offsetof(DbpEquippedCustomize_GetEquippedCostumeCode, ReturnValue) == 0x000000, "Member 'DbpEquippedCustomize_GetEquippedCostumeCode::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpEquippedCustomize.GetEquippedEmblemCodes
// 0x0010 (0x0010 - 0x0000)
struct DbpEquippedCustomize_GetEquippedEmblemCodes final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpEquippedCustomize_GetEquippedEmblemCodes) == 0x000008, "Wrong alignment on DbpEquippedCustomize_GetEquippedEmblemCodes");
static_assert(sizeof(DbpEquippedCustomize_GetEquippedEmblemCodes) == 0x000010, "Wrong size on DbpEquippedCustomize_GetEquippedEmblemCodes");
static_assert(offsetof(DbpEquippedCustomize_GetEquippedEmblemCodes, ReturnValue) == 0x000000, "Member 'DbpEquippedCustomize_GetEquippedEmblemCodes::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpEquippedCustomize.GetEquippedVariationCode
// 0x0004 (0x0004 - 0x0000)
struct DbpEquippedCustomize_GetEquippedVariationCode final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpEquippedCustomize_GetEquippedVariationCode) == 0x000004, "Wrong alignment on DbpEquippedCustomize_GetEquippedVariationCode");
static_assert(sizeof(DbpEquippedCustomize_GetEquippedVariationCode) == 0x000004, "Wrong size on DbpEquippedCustomize_GetEquippedVariationCode");
static_assert(offsetof(DbpEquippedCustomize_GetEquippedVariationCode, ReturnValue) == 0x000000, "Member 'DbpEquippedCustomize_GetEquippedVariationCode::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpEquippedCustomize.GetEquippedVoiceCodes
// 0x0010 (0x0010 - 0x0000)
struct DbpEquippedCustomize_GetEquippedVoiceCodes final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpEquippedCustomize_GetEquippedVoiceCodes) == 0x000008, "Wrong alignment on DbpEquippedCustomize_GetEquippedVoiceCodes");
static_assert(sizeof(DbpEquippedCustomize_GetEquippedVoiceCodes) == 0x000010, "Wrong size on DbpEquippedCustomize_GetEquippedVoiceCodes");
static_assert(offsetof(DbpEquippedCustomize_GetEquippedVoiceCodes, ReturnValue) == 0x000000, "Member 'DbpEquippedCustomize_GetEquippedVoiceCodes::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpEquippedCustomize.GetVariationCode
// 0x0004 (0x0004 - 0x0000)
struct DbpEquippedCustomize_GetVariationCode final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpEquippedCustomize_GetVariationCode) == 0x000004, "Wrong alignment on DbpEquippedCustomize_GetVariationCode");
static_assert(sizeof(DbpEquippedCustomize_GetVariationCode) == 0x000004, "Wrong size on DbpEquippedCustomize_GetVariationCode");
static_assert(offsetof(DbpEquippedCustomize_GetVariationCode, ReturnValue) == 0x000000, "Member 'DbpEquippedCustomize_GetVariationCode::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpEquippedCustomize.GetVariationNo
// 0x0004 (0x0004 - 0x0000)
struct DbpEquippedCustomize_GetVariationNo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpEquippedCustomize_GetVariationNo) == 0x000004, "Wrong alignment on DbpEquippedCustomize_GetVariationNo");
static_assert(sizeof(DbpEquippedCustomize_GetVariationNo) == 0x000004, "Wrong size on DbpEquippedCustomize_GetVariationNo");
static_assert(offsetof(DbpEquippedCustomize_GetVariationNo, ReturnValue) == 0x000000, "Member 'DbpEquippedCustomize_GetVariationNo::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpEvent.Get
// 0x0188 (0x0188 - 0x0000)
struct DbpEvent_Get final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDbEventParam                          Ev;                                                // 0x0008(0x0178)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0180(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DbpEvent_Get) == 0x000008, "Wrong alignment on DbpEvent_Get");
static_assert(sizeof(DbpEvent_Get) == 0x000188, "Wrong size on DbpEvent_Get");
static_assert(offsetof(DbpEvent_Get, Code) == 0x000000, "Member 'DbpEvent_Get::Code' has a wrong offset!");
static_assert(offsetof(DbpEvent_Get, Ev) == 0x000008, "Member 'DbpEvent_Get::Ev' has a wrong offset!");
static_assert(offsetof(DbpEvent_Get, ReturnValue) == 0x000180, "Member 'DbpEvent_Get::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpEvent.GetEventList
// 0x0010 (0x0010 - 0x0000)
struct DbpEvent_GetEventList final
{
public:
	TArray<struct FDbEventParam>                  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpEvent_GetEventList) == 0x000008, "Wrong alignment on DbpEvent_GetEventList");
static_assert(sizeof(DbpEvent_GetEventList) == 0x000010, "Wrong size on DbpEvent_GetEventList");
static_assert(offsetof(DbpEvent_GetEventList, ReturnValue) == 0x000000, "Member 'DbpEvent_GetEventList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpGallery.Get
// 0x01F8 (0x01F8 - 0x0000)
struct DbpGallery_Get final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDbGalleryDataParam                    Gallery;                                           // 0x0008(0x01E8)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DbpGallery_Get) == 0x000008, "Wrong alignment on DbpGallery_Get");
static_assert(sizeof(DbpGallery_Get) == 0x0001F8, "Wrong size on DbpGallery_Get");
static_assert(offsetof(DbpGallery_Get, Code) == 0x000000, "Member 'DbpGallery_Get::Code' has a wrong offset!");
static_assert(offsetof(DbpGallery_Get, Gallery) == 0x000008, "Member 'DbpGallery_Get::Gallery' has a wrong offset!");
static_assert(offsetof(DbpGallery_Get, ReturnValue) == 0x0001F0, "Member 'DbpGallery_Get::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpGallery.GetFirst
// 0x01F0 (0x01F0 - 0x0000)
struct DbpGallery_GetFirst final
{
public:
	struct FDbGalleryDataParam                    Gallery;                                           // 0x0000(0x01E8)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01E8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E9[0x7];                                      // 0x01E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DbpGallery_GetFirst) == 0x000008, "Wrong alignment on DbpGallery_GetFirst");
static_assert(sizeof(DbpGallery_GetFirst) == 0x0001F0, "Wrong size on DbpGallery_GetFirst");
static_assert(offsetof(DbpGallery_GetFirst, Gallery) == 0x000000, "Member 'DbpGallery_GetFirst::Gallery' has a wrong offset!");
static_assert(offsetof(DbpGallery_GetFirst, ReturnValue) == 0x0001E8, "Member 'DbpGallery_GetFirst::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpGallery.GetShortageTickets
// 0x0014 (0x0014 - 0x0000)
struct DbpGallery_GetShortageTickets final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ticket1;                                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ticket2;                                           // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ticket3;                                           // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DbpGallery_GetShortageTickets) == 0x000004, "Wrong alignment on DbpGallery_GetShortageTickets");
static_assert(sizeof(DbpGallery_GetShortageTickets) == 0x000014, "Wrong size on DbpGallery_GetShortageTickets");
static_assert(offsetof(DbpGallery_GetShortageTickets, Code) == 0x000000, "Member 'DbpGallery_GetShortageTickets::Code' has a wrong offset!");
static_assert(offsetof(DbpGallery_GetShortageTickets, Ticket1) == 0x000004, "Member 'DbpGallery_GetShortageTickets::Ticket1' has a wrong offset!");
static_assert(offsetof(DbpGallery_GetShortageTickets, Ticket2) == 0x000008, "Member 'DbpGallery_GetShortageTickets::Ticket2' has a wrong offset!");
static_assert(offsetof(DbpGallery_GetShortageTickets, Ticket3) == 0x00000C, "Member 'DbpGallery_GetShortageTickets::Ticket3' has a wrong offset!");
static_assert(offsetof(DbpGallery_GetShortageTickets, ReturnValue) == 0x000010, "Member 'DbpGallery_GetShortageTickets::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpGallery.GetTicketCounts
// 0x0014 (0x0014 - 0x0000)
struct DbpGallery_GetTicketCounts final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ticket1;                                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ticket2;                                           // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ticket3;                                           // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DbpGallery_GetTicketCounts) == 0x000004, "Wrong alignment on DbpGallery_GetTicketCounts");
static_assert(sizeof(DbpGallery_GetTicketCounts) == 0x000014, "Wrong size on DbpGallery_GetTicketCounts");
static_assert(offsetof(DbpGallery_GetTicketCounts, Code) == 0x000000, "Member 'DbpGallery_GetTicketCounts::Code' has a wrong offset!");
static_assert(offsetof(DbpGallery_GetTicketCounts, Ticket1) == 0x000004, "Member 'DbpGallery_GetTicketCounts::Ticket1' has a wrong offset!");
static_assert(offsetof(DbpGallery_GetTicketCounts, Ticket2) == 0x000008, "Member 'DbpGallery_GetTicketCounts::Ticket2' has a wrong offset!");
static_assert(offsetof(DbpGallery_GetTicketCounts, Ticket3) == 0x00000C, "Member 'DbpGallery_GetTicketCounts::Ticket3' has a wrong offset!");
static_assert(offsetof(DbpGallery_GetTicketCounts, ReturnValue) == 0x000010, "Member 'DbpGallery_GetTicketCounts::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpGallery.GetTicketCountsFirstCode
// 0x0010 (0x0010 - 0x0000)
struct DbpGallery_GetTicketCountsFirstCode final
{
public:
	int32                                         Ticket1;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ticket2;                                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ticket3;                                           // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DbpGallery_GetTicketCountsFirstCode) == 0x000004, "Wrong alignment on DbpGallery_GetTicketCountsFirstCode");
static_assert(sizeof(DbpGallery_GetTicketCountsFirstCode) == 0x000010, "Wrong size on DbpGallery_GetTicketCountsFirstCode");
static_assert(offsetof(DbpGallery_GetTicketCountsFirstCode, Ticket1) == 0x000000, "Member 'DbpGallery_GetTicketCountsFirstCode::Ticket1' has a wrong offset!");
static_assert(offsetof(DbpGallery_GetTicketCountsFirstCode, Ticket2) == 0x000004, "Member 'DbpGallery_GetTicketCountsFirstCode::Ticket2' has a wrong offset!");
static_assert(offsetof(DbpGallery_GetTicketCountsFirstCode, Ticket3) == 0x000008, "Member 'DbpGallery_GetTicketCountsFirstCode::Ticket3' has a wrong offset!");
static_assert(offsetof(DbpGallery_GetTicketCountsFirstCode, ReturnValue) == 0x00000C, "Member 'DbpGallery_GetTicketCountsFirstCode::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpGallery.GetOpenablePanelCount
// 0x0008 (0x0008 - 0x0000)
struct DbpGallery_GetOpenablePanelCount final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpGallery_GetOpenablePanelCount) == 0x000004, "Wrong alignment on DbpGallery_GetOpenablePanelCount");
static_assert(sizeof(DbpGallery_GetOpenablePanelCount) == 0x000008, "Wrong size on DbpGallery_GetOpenablePanelCount");
static_assert(offsetof(DbpGallery_GetOpenablePanelCount, Code) == 0x000000, "Member 'DbpGallery_GetOpenablePanelCount::Code' has a wrong offset!");
static_assert(offsetof(DbpGallery_GetOpenablePanelCount, ReturnValue) == 0x000004, "Member 'DbpGallery_GetOpenablePanelCount::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpGallery.GetTotalOpenablePanelCount
// 0x0008 (0x0008 - 0x0000)
struct DbpGallery_GetTotalOpenablePanelCount final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpGallery_GetTotalOpenablePanelCount) == 0x000004, "Wrong alignment on DbpGallery_GetTotalOpenablePanelCount");
static_assert(sizeof(DbpGallery_GetTotalOpenablePanelCount) == 0x000008, "Wrong size on DbpGallery_GetTotalOpenablePanelCount");
static_assert(offsetof(DbpGallery_GetTotalOpenablePanelCount, Code) == 0x000000, "Member 'DbpGallery_GetTotalOpenablePanelCount::Code' has a wrong offset!");
static_assert(offsetof(DbpGallery_GetTotalOpenablePanelCount, ReturnValue) == 0x000004, "Member 'DbpGallery_GetTotalOpenablePanelCount::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpGallery.GetTotalTicketCount
// 0x0008 (0x0008 - 0x0000)
struct DbpGallery_GetTotalTicketCount final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpGallery_GetTotalTicketCount) == 0x000004, "Wrong alignment on DbpGallery_GetTotalTicketCount");
static_assert(sizeof(DbpGallery_GetTotalTicketCount) == 0x000008, "Wrong size on DbpGallery_GetTotalTicketCount");
static_assert(offsetof(DbpGallery_GetTotalTicketCount, Code) == 0x000000, "Member 'DbpGallery_GetTotalTicketCount::Code' has a wrong offset!");
static_assert(offsetof(DbpGallery_GetTotalTicketCount, ReturnValue) == 0x000004, "Member 'DbpGallery_GetTotalTicketCount::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpGallery.GetTotalUsedTicketCount
// 0x0008 (0x0008 - 0x0000)
struct DbpGallery_GetTotalUsedTicketCount final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpGallery_GetTotalUsedTicketCount) == 0x000004, "Wrong alignment on DbpGallery_GetTotalUsedTicketCount");
static_assert(sizeof(DbpGallery_GetTotalUsedTicketCount) == 0x000008, "Wrong size on DbpGallery_GetTotalUsedTicketCount");
static_assert(offsetof(DbpGallery_GetTotalUsedTicketCount, Code) == 0x000000, "Member 'DbpGallery_GetTotalUsedTicketCount::Code' has a wrong offset!");
static_assert(offsetof(DbpGallery_GetTotalUsedTicketCount, ReturnValue) == 0x000004, "Member 'DbpGallery_GetTotalUsedTicketCount::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpGuild.GetMyGuildInfo
// 0x01A0 (0x01A0 - 0x0000)
struct DbpGuild_GetMyGuildInfo final
{
public:
	struct FDbMyGuildInfoParam                    ReturnValue;                                       // 0x0000(0x01A0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpGuild_GetMyGuildInfo) == 0x000008, "Wrong alignment on DbpGuild_GetMyGuildInfo");
static_assert(sizeof(DbpGuild_GetMyGuildInfo) == 0x0001A0, "Wrong size on DbpGuild_GetMyGuildInfo");
static_assert(offsetof(DbpGuild_GetMyGuildInfo, ReturnValue) == 0x000000, "Member 'DbpGuild_GetMyGuildInfo::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpGuild.GetPoint
// 0x0004 (0x0004 - 0x0000)
struct DbpGuild_GetPoint final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpGuild_GetPoint) == 0x000004, "Wrong alignment on DbpGuild_GetPoint");
static_assert(sizeof(DbpGuild_GetPoint) == 0x000004, "Wrong size on DbpGuild_GetPoint");
static_assert(offsetof(DbpGuild_GetPoint, ReturnValue) == 0x000000, "Member 'DbpGuild_GetPoint::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpGuild.GetRecords
// 0x0010 (0x0010 - 0x0000)
struct DbpGuild_GetRecords final
{
public:
	TArray<struct FDbGuildRecord>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpGuild_GetRecords) == 0x000008, "Wrong alignment on DbpGuild_GetRecords");
static_assert(sizeof(DbpGuild_GetRecords) == 0x000010, "Wrong size on DbpGuild_GetRecords");
static_assert(offsetof(DbpGuild_GetRecords, ReturnValue) == 0x000000, "Member 'DbpGuild_GetRecords::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpGuild.GetSearchedGuildList
// 0x0010 (0x0010 - 0x0000)
struct DbpGuild_GetSearchedGuildList final
{
public:
	TArray<struct FDbGuildInfoParam>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpGuild_GetSearchedGuildList) == 0x000008, "Wrong alignment on DbpGuild_GetSearchedGuildList");
static_assert(sizeof(DbpGuild_GetSearchedGuildList) == 0x000010, "Wrong size on DbpGuild_GetSearchedGuildList");
static_assert(offsetof(DbpGuild_GetSearchedGuildList, ReturnValue) == 0x000000, "Member 'DbpGuild_GetSearchedGuildList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpGuild.IsGuildEventOpen
// 0x0001 (0x0001 - 0x0000)
struct DbpGuild_IsGuildEventOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpGuild_IsGuildEventOpen) == 0x000001, "Wrong alignment on DbpGuild_IsGuildEventOpen");
static_assert(sizeof(DbpGuild_IsGuildEventOpen) == 0x000001, "Wrong size on DbpGuild_IsGuildEventOpen");
static_assert(offsetof(DbpGuild_IsGuildEventOpen, ReturnValue) == 0x000000, "Member 'DbpGuild_IsGuildEventOpen::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpInventory.GetStockList
// 0x0018 (0x0018 - 0x0000)
struct DbpInventory_GetStockList final
{
public:
	EItemListSortOrder                            Sort;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemCategory                                 Filter;                                            // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDbItemStockParam>              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpInventory_GetStockList) == 0x000008, "Wrong alignment on DbpInventory_GetStockList");
static_assert(sizeof(DbpInventory_GetStockList) == 0x000018, "Wrong size on DbpInventory_GetStockList");
static_assert(offsetof(DbpInventory_GetStockList, Sort) == 0x000000, "Member 'DbpInventory_GetStockList::Sort' has a wrong offset!");
static_assert(offsetof(DbpInventory_GetStockList, Filter) == 0x000001, "Member 'DbpInventory_GetStockList::Filter' has a wrong offset!");
static_assert(offsetof(DbpInventory_GetStockList, ReturnValue) == 0x000008, "Member 'DbpInventory_GetStockList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpLoading.GetRandomOpenedGallery
// 0x01E8 (0x01E8 - 0x0000)
struct DbpLoading_GetRandomOpenedGallery final
{
public:
	struct FDbGalleryDataParam                    ReturnValue;                                       // 0x0000(0x01E8)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpLoading_GetRandomOpenedGallery) == 0x000008, "Wrong alignment on DbpLoading_GetRandomOpenedGallery");
static_assert(sizeof(DbpLoading_GetRandomOpenedGallery) == 0x0001E8, "Wrong size on DbpLoading_GetRandomOpenedGallery");
static_assert(offsetof(DbpLoading_GetRandomOpenedGallery, ReturnValue) == 0x000000, "Member 'DbpLoading_GetRandomOpenedGallery::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpLoading.GetRandomTips
// 0x0018 (0x0018 - 0x0000)
struct DbpLoading_GetRandomTips final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpLoading_GetRandomTips) == 0x000008, "Wrong alignment on DbpLoading_GetRandomTips");
static_assert(sizeof(DbpLoading_GetRandomTips) == 0x000018, "Wrong size on DbpLoading_GetRandomTips");
static_assert(offsetof(DbpLoading_GetRandomTips, ReturnValue) == 0x000000, "Member 'DbpLoading_GetRandomTips::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpLoginBonus.Get
// 0x0088 (0x0088 - 0x0000)
struct DbpLoginBonus_Get final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDbLoginBonus                          LoginBonus;                                        // 0x0008(0x0078)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DbpLoginBonus_Get) == 0x000008, "Wrong alignment on DbpLoginBonus_Get");
static_assert(sizeof(DbpLoginBonus_Get) == 0x000088, "Wrong size on DbpLoginBonus_Get");
static_assert(offsetof(DbpLoginBonus_Get, Code) == 0x000000, "Member 'DbpLoginBonus_Get::Code' has a wrong offset!");
static_assert(offsetof(DbpLoginBonus_Get, LoginBonus) == 0x000008, "Member 'DbpLoginBonus_Get::LoginBonus' has a wrong offset!");
static_assert(offsetof(DbpLoginBonus_Get, ReturnValue) == 0x000080, "Member 'DbpLoginBonus_Get::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpLoginBonus.GetDailyBonus
// 0x00F0 (0x00F0 - 0x0000)
struct DbpLoginBonus_GetDailyBonus final
{
public:
	struct FDbLoginBonus                          FreeLoginBonus;                                    // 0x0000(0x0078)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FDbLoginBonus                          PremiumLoginBonus;                                 // 0x0078(0x0078)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpLoginBonus_GetDailyBonus) == 0x000008, "Wrong alignment on DbpLoginBonus_GetDailyBonus");
static_assert(sizeof(DbpLoginBonus_GetDailyBonus) == 0x0000F0, "Wrong size on DbpLoginBonus_GetDailyBonus");
static_assert(offsetof(DbpLoginBonus_GetDailyBonus, FreeLoginBonus) == 0x000000, "Member 'DbpLoginBonus_GetDailyBonus::FreeLoginBonus' has a wrong offset!");
static_assert(offsetof(DbpLoginBonus_GetDailyBonus, PremiumLoginBonus) == 0x000078, "Member 'DbpLoginBonus_GetDailyBonus::PremiumLoginBonus' has a wrong offset!");

// Function BackendSubsystem.DbpLoginBonus.GetLoginBonusList
// 0x0070 (0x0070 - 0x0000)
struct DbpLoginBonus_GetLoginBonusList final
{
public:
	struct FDbLoginBonusListParam                 List;                                              // 0x0000(0x0070)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpLoginBonus_GetLoginBonusList) == 0x000008, "Wrong alignment on DbpLoginBonus_GetLoginBonusList");
static_assert(sizeof(DbpLoginBonus_GetLoginBonusList) == 0x000070, "Wrong size on DbpLoginBonus_GetLoginBonusList");
static_assert(offsetof(DbpLoginBonus_GetLoginBonusList, List) == 0x000000, "Member 'DbpLoginBonus_GetLoginBonusList::List' has a wrong offset!");

// Function BackendSubsystem.DbpLoginBonus.GetReceivedDailyBonusItemList
// 0x0020 (0x0020 - 0x0000)
struct DbpLoginBonus_GetReceivedDailyBonusItemList final
{
public:
	TArray<struct FDbLoginBonusItem>              FreeReceivedDailyBonus;                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDbLoginBonusItem>              PremiumReceivedDailyBonus;                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpLoginBonus_GetReceivedDailyBonusItemList) == 0x000008, "Wrong alignment on DbpLoginBonus_GetReceivedDailyBonusItemList");
static_assert(sizeof(DbpLoginBonus_GetReceivedDailyBonusItemList) == 0x000020, "Wrong size on DbpLoginBonus_GetReceivedDailyBonusItemList");
static_assert(offsetof(DbpLoginBonus_GetReceivedDailyBonusItemList, FreeReceivedDailyBonus) == 0x000000, "Member 'DbpLoginBonus_GetReceivedDailyBonusItemList::FreeReceivedDailyBonus' has a wrong offset!");
static_assert(offsetof(DbpLoginBonus_GetReceivedDailyBonusItemList, PremiumReceivedDailyBonus) == 0x000010, "Member 'DbpLoginBonus_GetReceivedDailyBonusItemList::PremiumReceivedDailyBonus' has a wrong offset!");

// Function BackendSubsystem.DbpLoginBonus.CanBuyPremiumDailyLoginBonusTicket
// 0x0001 (0x0001 - 0x0000)
struct DbpLoginBonus_CanBuyPremiumDailyLoginBonusTicket final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpLoginBonus_CanBuyPremiumDailyLoginBonusTicket) == 0x000001, "Wrong alignment on DbpLoginBonus_CanBuyPremiumDailyLoginBonusTicket");
static_assert(sizeof(DbpLoginBonus_CanBuyPremiumDailyLoginBonusTicket) == 0x000001, "Wrong size on DbpLoginBonus_CanBuyPremiumDailyLoginBonusTicket");
static_assert(offsetof(DbpLoginBonus_CanBuyPremiumDailyLoginBonusTicket, ReturnValue) == 0x000000, "Member 'DbpLoginBonus_CanBuyPremiumDailyLoginBonusTicket::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpLoginBonus.CanReceiveBonus
// 0x0001 (0x0001 - 0x0000)
struct DbpLoginBonus_CanReceiveBonus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpLoginBonus_CanReceiveBonus) == 0x000001, "Wrong alignment on DbpLoginBonus_CanReceiveBonus");
static_assert(sizeof(DbpLoginBonus_CanReceiveBonus) == 0x000001, "Wrong size on DbpLoginBonus_CanReceiveBonus");
static_assert(offsetof(DbpLoginBonus_CanReceiveBonus, ReturnValue) == 0x000000, "Member 'DbpLoginBonus_CanReceiveBonus::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpLoginBonus.GetBonusItemListToday
// 0x0010 (0x0010 - 0x0000)
struct DbpLoginBonus_GetBonusItemListToday final
{
public:
	TArray<struct FDbLoginBonusItem>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpLoginBonus_GetBonusItemListToday) == 0x000008, "Wrong alignment on DbpLoginBonus_GetBonusItemListToday");
static_assert(sizeof(DbpLoginBonus_GetBonusItemListToday) == 0x000010, "Wrong size on DbpLoginBonus_GetBonusItemListToday");
static_assert(offsetof(DbpLoginBonus_GetBonusItemListToday, ReturnValue) == 0x000000, "Member 'DbpLoginBonus_GetBonusItemListToday::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpLoginBonus.GetCampaignLoginBonusCodes
// 0x0010 (0x0010 - 0x0000)
struct DbpLoginBonus_GetCampaignLoginBonusCodes final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpLoginBonus_GetCampaignLoginBonusCodes) == 0x000008, "Wrong alignment on DbpLoginBonus_GetCampaignLoginBonusCodes");
static_assert(sizeof(DbpLoginBonus_GetCampaignLoginBonusCodes) == 0x000010, "Wrong size on DbpLoginBonus_GetCampaignLoginBonusCodes");
static_assert(offsetof(DbpLoginBonus_GetCampaignLoginBonusCodes, ReturnValue) == 0x000000, "Member 'DbpLoginBonus_GetCampaignLoginBonusCodes::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpLoginBonus.GetCurrency
// 0x0004 (0x0004 - 0x0000)
struct DbpLoginBonus_GetCurrency final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpLoginBonus_GetCurrency) == 0x000004, "Wrong alignment on DbpLoginBonus_GetCurrency");
static_assert(sizeof(DbpLoginBonus_GetCurrency) == 0x000004, "Wrong size on DbpLoginBonus_GetCurrency");
static_assert(offsetof(DbpLoginBonus_GetCurrency, ReturnValue) == 0x000000, "Member 'DbpLoginBonus_GetCurrency::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpLoginBonus.GetDailyLoginBonusCodes
// 0x0008 (0x0008 - 0x0000)
struct DbpLoginBonus_GetDailyLoginBonusCodes final
{
public:
	int32                                         FreeLoginBonusCode;                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PremiumLoginBonusCode;                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpLoginBonus_GetDailyLoginBonusCodes) == 0x000004, "Wrong alignment on DbpLoginBonus_GetDailyLoginBonusCodes");
static_assert(sizeof(DbpLoginBonus_GetDailyLoginBonusCodes) == 0x000008, "Wrong size on DbpLoginBonus_GetDailyLoginBonusCodes");
static_assert(offsetof(DbpLoginBonus_GetDailyLoginBonusCodes, FreeLoginBonusCode) == 0x000000, "Member 'DbpLoginBonus_GetDailyLoginBonusCodes::FreeLoginBonusCode' has a wrong offset!");
static_assert(offsetof(DbpLoginBonus_GetDailyLoginBonusCodes, PremiumLoginBonusCode) == 0x000004, "Member 'DbpLoginBonus_GetDailyLoginBonusCodes::PremiumLoginBonusCode' has a wrong offset!");

// Function BackendSubsystem.DbpLoginBonus.GetEventLoginBonusCodes
// 0x0010 (0x0010 - 0x0000)
struct DbpLoginBonus_GetEventLoginBonusCodes final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpLoginBonus_GetEventLoginBonusCodes) == 0x000008, "Wrong alignment on DbpLoginBonus_GetEventLoginBonusCodes");
static_assert(sizeof(DbpLoginBonus_GetEventLoginBonusCodes) == 0x000010, "Wrong size on DbpLoginBonus_GetEventLoginBonusCodes");
static_assert(offsetof(DbpLoginBonus_GetEventLoginBonusCodes, ReturnValue) == 0x000000, "Member 'DbpLoginBonus_GetEventLoginBonusCodes::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpLoginBonus.GetPremiumDailyLoginBonusRemainDays
// 0x0004 (0x0004 - 0x0000)
struct DbpLoginBonus_GetPremiumDailyLoginBonusRemainDays final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpLoginBonus_GetPremiumDailyLoginBonusRemainDays) == 0x000004, "Wrong alignment on DbpLoginBonus_GetPremiumDailyLoginBonusRemainDays");
static_assert(sizeof(DbpLoginBonus_GetPremiumDailyLoginBonusRemainDays) == 0x000004, "Wrong size on DbpLoginBonus_GetPremiumDailyLoginBonusRemainDays");
static_assert(offsetof(DbpLoginBonus_GetPremiumDailyLoginBonusRemainDays, ReturnValue) == 0x000000, "Member 'DbpLoginBonus_GetPremiumDailyLoginBonusRemainDays::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpLoginBonus.GetReceivedBonusItemList
// 0x0018 (0x0018 - 0x0000)
struct DbpLoginBonus_GetReceivedBonusItemList final
{
public:
	int32                                         LoginBonusCode;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDbLoginBonusItem>              ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpLoginBonus_GetReceivedBonusItemList) == 0x000008, "Wrong alignment on DbpLoginBonus_GetReceivedBonusItemList");
static_assert(sizeof(DbpLoginBonus_GetReceivedBonusItemList) == 0x000018, "Wrong size on DbpLoginBonus_GetReceivedBonusItemList");
static_assert(offsetof(DbpLoginBonus_GetReceivedBonusItemList, LoginBonusCode) == 0x000000, "Member 'DbpLoginBonus_GetReceivedBonusItemList::LoginBonusCode' has a wrong offset!");
static_assert(offsetof(DbpLoginBonus_GetReceivedBonusItemList, ReturnValue) == 0x000008, "Member 'DbpLoginBonus_GetReceivedBonusItemList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpLoginBonus.IsPremiumAvailable
// 0x0001 (0x0001 - 0x0000)
struct DbpLoginBonus_IsPremiumAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpLoginBonus_IsPremiumAvailable) == 0x000001, "Wrong alignment on DbpLoginBonus_IsPremiumAvailable");
static_assert(sizeof(DbpLoginBonus_IsPremiumAvailable) == 0x000001, "Wrong size on DbpLoginBonus_IsPremiumAvailable");
static_assert(offsetof(DbpLoginBonus_IsPremiumAvailable, ReturnValue) == 0x000000, "Member 'DbpLoginBonus_IsPremiumAvailable::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpLotteryHistory.GetHistory
// 0x0018 (0x0018 - 0x0000)
struct DbpLotteryHistory_GetHistory final
{
public:
	int32                                         PageNo;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDbLotteryHistory>              ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpLotteryHistory_GetHistory) == 0x000008, "Wrong alignment on DbpLotteryHistory_GetHistory");
static_assert(sizeof(DbpLotteryHistory_GetHistory) == 0x000018, "Wrong size on DbpLotteryHistory_GetHistory");
static_assert(offsetof(DbpLotteryHistory_GetHistory, PageNo) == 0x000000, "Member 'DbpLotteryHistory_GetHistory::PageNo' has a wrong offset!");
static_assert(offsetof(DbpLotteryHistory_GetHistory, ReturnValue) == 0x000008, "Member 'DbpLotteryHistory_GetHistory::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpLotteryList.GetLottery
// 0x00F8 (0x00F8 - 0x0000)
struct DbpLotteryList_GetLottery final
{
public:
	int32                                         LotteryCode;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDbLotteryParam                        ReturnValue;                                       // 0x0008(0x00F0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpLotteryList_GetLottery) == 0x000008, "Wrong alignment on DbpLotteryList_GetLottery");
static_assert(sizeof(DbpLotteryList_GetLottery) == 0x0000F8, "Wrong size on DbpLotteryList_GetLottery");
static_assert(offsetof(DbpLotteryList_GetLottery, LotteryCode) == 0x000000, "Member 'DbpLotteryList_GetLottery::LotteryCode' has a wrong offset!");
static_assert(offsetof(DbpLotteryList_GetLottery, ReturnValue) == 0x000008, "Member 'DbpLotteryList_GetLottery::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpLotteryList.GetLotteryList
// 0x0010 (0x0010 - 0x0000)
struct DbpLotteryList_GetLotteryList final
{
public:
	TArray<struct FDbLotteryParam>                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpLotteryList_GetLotteryList) == 0x000008, "Wrong alignment on DbpLotteryList_GetLotteryList");
static_assert(sizeof(DbpLotteryList_GetLotteryList) == 0x000010, "Wrong size on DbpLotteryList_GetLotteryList");
static_assert(offsetof(DbpLotteryList_GetLotteryList, ReturnValue) == 0x000000, "Member 'DbpLotteryList_GetLotteryList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpLotteryList.GetTicketCountSingle
// 0x0004 (0x0004 - 0x0000)
struct DbpLotteryList_GetTicketCountSingle final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpLotteryList_GetTicketCountSingle) == 0x000004, "Wrong alignment on DbpLotteryList_GetTicketCountSingle");
static_assert(sizeof(DbpLotteryList_GetTicketCountSingle) == 0x000004, "Wrong size on DbpLotteryList_GetTicketCountSingle");
static_assert(offsetof(DbpLotteryList_GetTicketCountSingle, ReturnValue) == 0x000000, "Member 'DbpLotteryList_GetTicketCountSingle::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpLotteryList.GetTicketCountTen
// 0x0004 (0x0004 - 0x0000)
struct DbpLotteryList_GetTicketCountTen final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpLotteryList_GetTicketCountTen) == 0x000004, "Wrong alignment on DbpLotteryList_GetTicketCountTen");
static_assert(sizeof(DbpLotteryList_GetTicketCountTen) == 0x000004, "Wrong size on DbpLotteryList_GetTicketCountTen");
static_assert(offsetof(DbpLotteryList_GetTicketCountTen, ReturnValue) == 0x000000, "Member 'DbpLotteryList_GetTicketCountTen::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpLotteryRate.GetRateSheets
// 0x0010 (0x0010 - 0x0000)
struct DbpLotteryRate_GetRateSheets final
{
public:
	TArray<struct FDbpLotteryRateSheet>           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpLotteryRate_GetRateSheets) == 0x000008, "Wrong alignment on DbpLotteryRate_GetRateSheets");
static_assert(sizeof(DbpLotteryRate_GetRateSheets) == 0x000010, "Wrong size on DbpLotteryRate_GetRateSheets");
static_assert(offsetof(DbpLotteryRate_GetRateSheets, ReturnValue) == 0x000000, "Member 'DbpLotteryRate_GetRateSheets::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.GetAuraLevel
// 0x0004 (0x0004 - 0x0000)
struct DbpMainMenu_GetAuraLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_GetAuraLevel) == 0x000004, "Wrong alignment on DbpMainMenu_GetAuraLevel");
static_assert(sizeof(DbpMainMenu_GetAuraLevel) == 0x000004, "Wrong size on DbpMainMenu_GetAuraLevel");
static_assert(offsetof(DbpMainMenu_GetAuraLevel, ReturnValue) == 0x000000, "Member 'DbpMainMenu_GetAuraLevel::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.GetCharacterMasterData
// 0x00A8 (0x00A8 - 0x0000)
struct DbpMainMenu_GetCharacterMasterData final
{
public:
	struct FMasterDataCharacter                   ReturnValue;                                       // 0x0000(0x00A8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_GetCharacterMasterData) == 0x000008, "Wrong alignment on DbpMainMenu_GetCharacterMasterData");
static_assert(sizeof(DbpMainMenu_GetCharacterMasterData) == 0x0000A8, "Wrong size on DbpMainMenu_GetCharacterMasterData");
static_assert(offsetof(DbpMainMenu_GetCharacterMasterData, ReturnValue) == 0x000000, "Member 'DbpMainMenu_GetCharacterMasterData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.GetCostumeMasterData
// 0x00A0 (0x00A0 - 0x0000)
struct DbpMainMenu_GetCostumeMasterData final
{
public:
	struct FMasterDataCustomizeCostume            ReturnValue;                                       // 0x0000(0x00A0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_GetCostumeMasterData) == 0x000008, "Wrong alignment on DbpMainMenu_GetCostumeMasterData");
static_assert(sizeof(DbpMainMenu_GetCostumeMasterData) == 0x0000A0, "Wrong size on DbpMainMenu_GetCostumeMasterData");
static_assert(offsetof(DbpMainMenu_GetCostumeMasterData, ReturnValue) == 0x000000, "Member 'DbpMainMenu_GetCostumeMasterData::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.GetCurrencyCount
// 0x0008 (0x0008 - 0x0000)
struct DbpMainMenu_GetCurrencyCount final
{
public:
	ECurrencyType                                 EType;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_GetCurrencyCount) == 0x000004, "Wrong alignment on DbpMainMenu_GetCurrencyCount");
static_assert(sizeof(DbpMainMenu_GetCurrencyCount) == 0x000008, "Wrong size on DbpMainMenu_GetCurrencyCount");
static_assert(offsetof(DbpMainMenu_GetCurrencyCount, EType) == 0x000000, "Member 'DbpMainMenu_GetCurrencyCount::EType' has a wrong offset!");
static_assert(offsetof(DbpMainMenu_GetCurrencyCount, ReturnValue) == 0x000004, "Member 'DbpMainMenu_GetCurrencyCount::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.GetPlatformPlayerId
// 0x0010 (0x0010 - 0x0000)
struct DbpMainMenu_GetPlatformPlayerId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_GetPlatformPlayerId) == 0x000008, "Wrong alignment on DbpMainMenu_GetPlatformPlayerId");
static_assert(sizeof(DbpMainMenu_GetPlatformPlayerId) == 0x000010, "Wrong size on DbpMainMenu_GetPlatformPlayerId");
static_assert(offsetof(DbpMainMenu_GetPlatformPlayerId, ReturnValue) == 0x000000, "Member 'DbpMainMenu_GetPlatformPlayerId::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.GetPlatformPlayerName
// 0x0010 (0x0010 - 0x0000)
struct DbpMainMenu_GetPlatformPlayerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_GetPlatformPlayerName) == 0x000008, "Wrong alignment on DbpMainMenu_GetPlatformPlayerName");
static_assert(sizeof(DbpMainMenu_GetPlatformPlayerName) == 0x000010, "Wrong size on DbpMainMenu_GetPlatformPlayerName");
static_assert(offsetof(DbpMainMenu_GetPlatformPlayerName, ReturnValue) == 0x000000, "Member 'DbpMainMenu_GetPlatformPlayerName::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.GetPlayerId
// 0x0010 (0x0010 - 0x0000)
struct DbpMainMenu_GetPlayerId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_GetPlayerId) == 0x000008, "Wrong alignment on DbpMainMenu_GetPlayerId");
static_assert(sizeof(DbpMainMenu_GetPlayerId) == 0x000010, "Wrong size on DbpMainMenu_GetPlayerId");
static_assert(offsetof(DbpMainMenu_GetPlayerId, ReturnValue) == 0x000000, "Member 'DbpMainMenu_GetPlayerId::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.GetPlayerName
// 0x0010 (0x0010 - 0x0000)
struct DbpMainMenu_GetPlayerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_GetPlayerName) == 0x000008, "Wrong alignment on DbpMainMenu_GetPlayerName");
static_assert(sizeof(DbpMainMenu_GetPlayerName) == 0x000010, "Wrong size on DbpMainMenu_GetPlayerName");
static_assert(offsetof(DbpMainMenu_GetPlayerName, ReturnValue) == 0x000000, "Member 'DbpMainMenu_GetPlayerName::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.GetTutorialStepNo
// 0x0001 (0x0001 - 0x0000)
struct DbpMainMenu_GetTutorialStepNo final
{
public:
	ETutorialStepNo                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_GetTutorialStepNo) == 0x000001, "Wrong alignment on DbpMainMenu_GetTutorialStepNo");
static_assert(sizeof(DbpMainMenu_GetTutorialStepNo) == 0x000001, "Wrong size on DbpMainMenu_GetTutorialStepNo");
static_assert(offsetof(DbpMainMenu_GetTutorialStepNo, ReturnValue) == 0x000000, "Member 'DbpMainMenu_GetTutorialStepNo::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.IsFeatureOpened
// 0x0002 (0x0002 - 0x0000)
struct DbpMainMenu_IsFeatureOpened final
{
public:
	ETutorialOpenFeature                          EFeature;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_IsFeatureOpened) == 0x000001, "Wrong alignment on DbpMainMenu_IsFeatureOpened");
static_assert(sizeof(DbpMainMenu_IsFeatureOpened) == 0x000002, "Wrong size on DbpMainMenu_IsFeatureOpened");
static_assert(offsetof(DbpMainMenu_IsFeatureOpened, EFeature) == 0x000000, "Member 'DbpMainMenu_IsFeatureOpened::EFeature' has a wrong offset!");
static_assert(offsetof(DbpMainMenu_IsFeatureOpened, ReturnValue) == 0x000001, "Member 'DbpMainMenu_IsFeatureOpened::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.CanKickMember
// 0x0018 (0x0018 - 0x0000)
struct DbpMainMenu_CanKickMember final
{
public:
	class FString                                 KickTargetPlayerId;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DbpMainMenu_CanKickMember) == 0x000008, "Wrong alignment on DbpMainMenu_CanKickMember");
static_assert(sizeof(DbpMainMenu_CanKickMember) == 0x000018, "Wrong size on DbpMainMenu_CanKickMember");
static_assert(offsetof(DbpMainMenu_CanKickMember, KickTargetPlayerId) == 0x000000, "Member 'DbpMainMenu_CanKickMember::KickTargetPlayerId' has a wrong offset!");
static_assert(offsetof(DbpMainMenu_CanKickMember, ReturnValue) == 0x000010, "Member 'DbpMainMenu_CanKickMember::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.GetAdList
// 0x0010 (0x0010 - 0x0000)
struct DbpMainMenu_GetAdList final
{
public:
	TArray<struct FDbAdDataParam>                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_GetAdList) == 0x000008, "Wrong alignment on DbpMainMenu_GetAdList");
static_assert(sizeof(DbpMainMenu_GetAdList) == 0x000010, "Wrong size on DbpMainMenu_GetAdList");
static_assert(offsetof(DbpMainMenu_GetAdList, ReturnValue) == 0x000000, "Member 'DbpMainMenu_GetAdList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.GetBattleReadyMemberCount
// 0x0004 (0x0004 - 0x0000)
struct DbpMainMenu_GetBattleReadyMemberCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_GetBattleReadyMemberCount) == 0x000004, "Wrong alignment on DbpMainMenu_GetBattleReadyMemberCount");
static_assert(sizeof(DbpMainMenu_GetBattleReadyMemberCount) == 0x000004, "Wrong size on DbpMainMenu_GetBattleReadyMemberCount");
static_assert(offsetof(DbpMainMenu_GetBattleReadyMemberCount, ReturnValue) == 0x000000, "Member 'DbpMainMenu_GetBattleReadyMemberCount::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.GetCpuSquadMember
// 0x0010 (0x0010 - 0x0000)
struct DbpMainMenu_GetCpuSquadMember final
{
public:
	TArray<struct FDbPlayerParam>                 Result;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_GetCpuSquadMember) == 0x000008, "Wrong alignment on DbpMainMenu_GetCpuSquadMember");
static_assert(sizeof(DbpMainMenu_GetCpuSquadMember) == 0x000010, "Wrong size on DbpMainMenu_GetCpuSquadMember");
static_assert(offsetof(DbpMainMenu_GetCpuSquadMember, Result) == 0x000000, "Member 'DbpMainMenu_GetCpuSquadMember::Result' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.GetDedicatedServer
// 0x0018 (0x0018 - 0x0000)
struct DbpMainMenu_GetDedicatedServer final
{
public:
	class FString                                 ServerHost;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerPort;                                        // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DbpMainMenu_GetDedicatedServer) == 0x000008, "Wrong alignment on DbpMainMenu_GetDedicatedServer");
static_assert(sizeof(DbpMainMenu_GetDedicatedServer) == 0x000018, "Wrong size on DbpMainMenu_GetDedicatedServer");
static_assert(offsetof(DbpMainMenu_GetDedicatedServer, ServerHost) == 0x000000, "Member 'DbpMainMenu_GetDedicatedServer::ServerHost' has a wrong offset!");
static_assert(offsetof(DbpMainMenu_GetDedicatedServer, ServerPort) == 0x000010, "Member 'DbpMainMenu_GetDedicatedServer::ServerPort' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.GetFetchedSquadConnectionServer
// 0x0018 (0x0018 - 0x0000)
struct DbpMainMenu_GetFetchedSquadConnectionServer final
{
public:
	class FString                                 Host;                                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DbpMainMenu_GetFetchedSquadConnectionServer) == 0x000008, "Wrong alignment on DbpMainMenu_GetFetchedSquadConnectionServer");
static_assert(sizeof(DbpMainMenu_GetFetchedSquadConnectionServer) == 0x000018, "Wrong size on DbpMainMenu_GetFetchedSquadConnectionServer");
static_assert(offsetof(DbpMainMenu_GetFetchedSquadConnectionServer, Host) == 0x000000, "Member 'DbpMainMenu_GetFetchedSquadConnectionServer::Host' has a wrong offset!");
static_assert(offsetof(DbpMainMenu_GetFetchedSquadConnectionServer, Port) == 0x000010, "Member 'DbpMainMenu_GetFetchedSquadConnectionServer::Port' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.GetFetchedSquadMemberList
// 0x0010 (0x0010 - 0x0000)
struct DbpMainMenu_GetFetchedSquadMemberList final
{
public:
	TArray<struct FDbSquadMemberParam>            ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_GetFetchedSquadMemberList) == 0x000008, "Wrong alignment on DbpMainMenu_GetFetchedSquadMemberList");
static_assert(sizeof(DbpMainMenu_GetFetchedSquadMemberList) == 0x000010, "Wrong size on DbpMainMenu_GetFetchedSquadMemberList");
static_assert(offsetof(DbpMainMenu_GetFetchedSquadMemberList, ReturnValue) == 0x000000, "Member 'DbpMainMenu_GetFetchedSquadMemberList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.GetGuildId
// 0x0010 (0x0010 - 0x0000)
struct DbpMainMenu_GetGuildId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_GetGuildId) == 0x000008, "Wrong alignment on DbpMainMenu_GetGuildId");
static_assert(sizeof(DbpMainMenu_GetGuildId) == 0x000010, "Wrong size on DbpMainMenu_GetGuildId");
static_assert(offsetof(DbpMainMenu_GetGuildId, ReturnValue) == 0x000000, "Member 'DbpMainMenu_GetGuildId::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.GetGuildName
// 0x0010 (0x0010 - 0x0000)
struct DbpMainMenu_GetGuildName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_GetGuildName) == 0x000008, "Wrong alignment on DbpMainMenu_GetGuildName");
static_assert(sizeof(DbpMainMenu_GetGuildName) == 0x000010, "Wrong size on DbpMainMenu_GetGuildName");
static_assert(offsetof(DbpMainMenu_GetGuildName, ReturnValue) == 0x000000, "Member 'DbpMainMenu_GetGuildName::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.GetInvitingList
// 0x0010 (0x0010 - 0x0000)
struct DbpMainMenu_GetInvitingList final
{
public:
	TArray<struct FDbInvitingInfoParam>           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_GetInvitingList) == 0x000008, "Wrong alignment on DbpMainMenu_GetInvitingList");
static_assert(sizeof(DbpMainMenu_GetInvitingList) == 0x000010, "Wrong size on DbpMainMenu_GetInvitingList");
static_assert(offsetof(DbpMainMenu_GetInvitingList, ReturnValue) == 0x000000, "Member 'DbpMainMenu_GetInvitingList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.GetMaintenanceStartTime
// 0x0008 (0x0008 - 0x0000)
struct DbpMainMenu_GetMaintenanceStartTime final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_GetMaintenanceStartTime) == 0x000008, "Wrong alignment on DbpMainMenu_GetMaintenanceStartTime");
static_assert(sizeof(DbpMainMenu_GetMaintenanceStartTime) == 0x000008, "Wrong size on DbpMainMenu_GetMaintenanceStartTime");
static_assert(offsetof(DbpMainMenu_GetMaintenanceStartTime, ReturnValue) == 0x000000, "Member 'DbpMainMenu_GetMaintenanceStartTime::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.GetMaxSquadMemberCount
// 0x0004 (0x0004 - 0x0000)
struct DbpMainMenu_GetMaxSquadMemberCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_GetMaxSquadMemberCount) == 0x000004, "Wrong alignment on DbpMainMenu_GetMaxSquadMemberCount");
static_assert(sizeof(DbpMainMenu_GetMaxSquadMemberCount) == 0x000004, "Wrong size on DbpMainMenu_GetMaxSquadMemberCount");
static_assert(offsetof(DbpMainMenu_GetMaxSquadMemberCount, ReturnValue) == 0x000000, "Member 'DbpMainMenu_GetMaxSquadMemberCount::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.GetSquadId
// 0x0010 (0x0010 - 0x0000)
struct DbpMainMenu_GetSquadId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_GetSquadId) == 0x000008, "Wrong alignment on DbpMainMenu_GetSquadId");
static_assert(sizeof(DbpMainMenu_GetSquadId) == 0x000010, "Wrong size on DbpMainMenu_GetSquadId");
static_assert(offsetof(DbpMainMenu_GetSquadId, ReturnValue) == 0x000000, "Member 'DbpMainMenu_GetSquadId::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.GetSquadLeaderPlayerId
// 0x0010 (0x0010 - 0x0000)
struct DbpMainMenu_GetSquadLeaderPlayerId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_GetSquadLeaderPlayerId) == 0x000008, "Wrong alignment on DbpMainMenu_GetSquadLeaderPlayerId");
static_assert(sizeof(DbpMainMenu_GetSquadLeaderPlayerId) == 0x000010, "Wrong size on DbpMainMenu_GetSquadLeaderPlayerId");
static_assert(offsetof(DbpMainMenu_GetSquadLeaderPlayerId, ReturnValue) == 0x000000, "Member 'DbpMainMenu_GetSquadLeaderPlayerId::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.GetSquadMember
// 0x0498 (0x0498 - 0x0000)
struct DbpMainMenu_GetSquadMember final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDbPlayerParam                         ReturnValue;                                       // 0x0010(0x0488)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_GetSquadMember) == 0x000008, "Wrong alignment on DbpMainMenu_GetSquadMember");
static_assert(sizeof(DbpMainMenu_GetSquadMember) == 0x000498, "Wrong size on DbpMainMenu_GetSquadMember");
static_assert(offsetof(DbpMainMenu_GetSquadMember, PlayerId) == 0x000000, "Member 'DbpMainMenu_GetSquadMember::PlayerId' has a wrong offset!");
static_assert(offsetof(DbpMainMenu_GetSquadMember, ReturnValue) == 0x000010, "Member 'DbpMainMenu_GetSquadMember::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.GetSquadMemberCount
// 0x0004 (0x0004 - 0x0000)
struct DbpMainMenu_GetSquadMemberCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_GetSquadMemberCount) == 0x000004, "Wrong alignment on DbpMainMenu_GetSquadMemberCount");
static_assert(sizeof(DbpMainMenu_GetSquadMemberCount) == 0x000004, "Wrong size on DbpMainMenu_GetSquadMemberCount");
static_assert(offsetof(DbpMainMenu_GetSquadMemberCount, ReturnValue) == 0x000000, "Member 'DbpMainMenu_GetSquadMemberCount::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.GetSquadMemberList
// 0x0010 (0x0010 - 0x0000)
struct DbpMainMenu_GetSquadMemberList final
{
public:
	TArray<struct FDbSquadMemberParam>            ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_GetSquadMemberList) == 0x000008, "Wrong alignment on DbpMainMenu_GetSquadMemberList");
static_assert(sizeof(DbpMainMenu_GetSquadMemberList) == 0x000010, "Wrong size on DbpMainMenu_GetSquadMemberList");
static_assert(offsetof(DbpMainMenu_GetSquadMemberList, ReturnValue) == 0x000000, "Member 'DbpMainMenu_GetSquadMemberList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.GetSquadPassword
// 0x0010 (0x0010 - 0x0000)
struct DbpMainMenu_GetSquadPassword final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_GetSquadPassword) == 0x000008, "Wrong alignment on DbpMainMenu_GetSquadPassword");
static_assert(sizeof(DbpMainMenu_GetSquadPassword) == 0x000010, "Wrong size on DbpMainMenu_GetSquadPassword");
static_assert(offsetof(DbpMainMenu_GetSquadPassword, ReturnValue) == 0x000000, "Member 'DbpMainMenu_GetSquadPassword::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.GetUnreadNoticeCount
// 0x0004 (0x0004 - 0x0000)
struct DbpMainMenu_GetUnreadNoticeCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_GetUnreadNoticeCount) == 0x000004, "Wrong alignment on DbpMainMenu_GetUnreadNoticeCount");
static_assert(sizeof(DbpMainMenu_GetUnreadNoticeCount) == 0x000004, "Wrong size on DbpMainMenu_GetUnreadNoticeCount");
static_assert(offsetof(DbpMainMenu_GetUnreadNoticeCount, ReturnValue) == 0x000000, "Member 'DbpMainMenu_GetUnreadNoticeCount::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.GetVoiceChatEnabledSquadMemberCount
// 0x0004 (0x0004 - 0x0000)
struct DbpMainMenu_GetVoiceChatEnabledSquadMemberCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_GetVoiceChatEnabledSquadMemberCount) == 0x000004, "Wrong alignment on DbpMainMenu_GetVoiceChatEnabledSquadMemberCount");
static_assert(sizeof(DbpMainMenu_GetVoiceChatEnabledSquadMemberCount) == 0x000004, "Wrong size on DbpMainMenu_GetVoiceChatEnabledSquadMemberCount");
static_assert(offsetof(DbpMainMenu_GetVoiceChatEnabledSquadMemberCount, ReturnValue) == 0x000000, "Member 'DbpMainMenu_GetVoiceChatEnabledSquadMemberCount::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.IsAllSquadMemberReady
// 0x0001 (0x0001 - 0x0000)
struct DbpMainMenu_IsAllSquadMemberReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_IsAllSquadMemberReady) == 0x000001, "Wrong alignment on DbpMainMenu_IsAllSquadMemberReady");
static_assert(sizeof(DbpMainMenu_IsAllSquadMemberReady) == 0x000001, "Wrong size on DbpMainMenu_IsAllSquadMemberReady");
static_assert(offsetof(DbpMainMenu_IsAllSquadMemberReady, ReturnValue) == 0x000000, "Member 'DbpMainMenu_IsAllSquadMemberReady::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.IsBonusRemainsToday
// 0x0001 (0x0001 - 0x0000)
struct DbpMainMenu_IsBonusRemainsToday final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_IsBonusRemainsToday) == 0x000001, "Wrong alignment on DbpMainMenu_IsBonusRemainsToday");
static_assert(sizeof(DbpMainMenu_IsBonusRemainsToday) == 0x000001, "Wrong size on DbpMainMenu_IsBonusRemainsToday");
static_assert(offsetof(DbpMainMenu_IsBonusRemainsToday, ReturnValue) == 0x000000, "Member 'DbpMainMenu_IsBonusRemainsToday::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.IsFullSquadMember
// 0x0001 (0x0001 - 0x0000)
struct DbpMainMenu_IsFullSquadMember final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_IsFullSquadMember) == 0x000001, "Wrong alignment on DbpMainMenu_IsFullSquadMember");
static_assert(sizeof(DbpMainMenu_IsFullSquadMember) == 0x000001, "Wrong size on DbpMainMenu_IsFullSquadMember");
static_assert(offsetof(DbpMainMenu_IsFullSquadMember, ReturnValue) == 0x000000, "Member 'DbpMainMenu_IsFullSquadMember::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.IsMaintenanceTimeToSet
// 0x0001 (0x0001 - 0x0000)
struct DbpMainMenu_IsMaintenanceTimeToSet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_IsMaintenanceTimeToSet) == 0x000001, "Wrong alignment on DbpMainMenu_IsMaintenanceTimeToSet");
static_assert(sizeof(DbpMainMenu_IsMaintenanceTimeToSet) == 0x000001, "Wrong size on DbpMainMenu_IsMaintenanceTimeToSet");
static_assert(offsetof(DbpMainMenu_IsMaintenanceTimeToSet, ReturnValue) == 0x000000, "Member 'DbpMainMenu_IsMaintenanceTimeToSet::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.IsReadyForLobbyMatching
// 0x0001 (0x0001 - 0x0000)
struct DbpMainMenu_IsReadyForLobbyMatching final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_IsReadyForLobbyMatching) == 0x000001, "Wrong alignment on DbpMainMenu_IsReadyForLobbyMatching");
static_assert(sizeof(DbpMainMenu_IsReadyForLobbyMatching) == 0x000001, "Wrong size on DbpMainMenu_IsReadyForLobbyMatching");
static_assert(offsetof(DbpMainMenu_IsReadyForLobbyMatching, ReturnValue) == 0x000000, "Member 'DbpMainMenu_IsReadyForLobbyMatching::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.IsSquadJoined
// 0x0001 (0x0001 - 0x0000)
struct DbpMainMenu_IsSquadJoined final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_IsSquadJoined) == 0x000001, "Wrong alignment on DbpMainMenu_IsSquadJoined");
static_assert(sizeof(DbpMainMenu_IsSquadJoined) == 0x000001, "Wrong size on DbpMainMenu_IsSquadJoined");
static_assert(offsetof(DbpMainMenu_IsSquadJoined, ReturnValue) == 0x000000, "Member 'DbpMainMenu_IsSquadJoined::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.IsSquadLeader
// 0x0001 (0x0001 - 0x0000)
struct DbpMainMenu_IsSquadLeader final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_IsSquadLeader) == 0x000001, "Wrong alignment on DbpMainMenu_IsSquadLeader");
static_assert(sizeof(DbpMainMenu_IsSquadLeader) == 0x000001, "Wrong size on DbpMainMenu_IsSquadLeader");
static_assert(offsetof(DbpMainMenu_IsSquadLeader, ReturnValue) == 0x000000, "Member 'DbpMainMenu_IsSquadLeader::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.IsSquadLoaded
// 0x0001 (0x0001 - 0x0000)
struct DbpMainMenu_IsSquadLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMainMenu_IsSquadLoaded) == 0x000001, "Wrong alignment on DbpMainMenu_IsSquadLoaded");
static_assert(sizeof(DbpMainMenu_IsSquadLoaded) == 0x000001, "Wrong size on DbpMainMenu_IsSquadLoaded");
static_assert(offsetof(DbpMainMenu_IsSquadLoaded, ReturnValue) == 0x000000, "Member 'DbpMainMenu_IsSquadLoaded::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMainMenu.IsSquadMember
// 0x0018 (0x0018 - 0x0000)
struct DbpMainMenu_IsSquadMember final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DbpMainMenu_IsSquadMember) == 0x000008, "Wrong alignment on DbpMainMenu_IsSquadMember");
static_assert(sizeof(DbpMainMenu_IsSquadMember) == 0x000018, "Wrong size on DbpMainMenu_IsSquadMember");
static_assert(offsetof(DbpMainMenu_IsSquadMember, PlayerId) == 0x000000, "Member 'DbpMainMenu_IsSquadMember::PlayerId' has a wrong offset!");
static_assert(offsetof(DbpMainMenu_IsSquadMember, ReturnValue) == 0x000010, "Member 'DbpMainMenu_IsSquadMember::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMissionCategoryList.GetEventList
// 0x0010 (0x0010 - 0x0000)
struct DbpMissionCategoryList_GetEventList final
{
public:
	TArray<struct FMasterDataEvent>               EventList;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMissionCategoryList_GetEventList) == 0x000008, "Wrong alignment on DbpMissionCategoryList_GetEventList");
static_assert(sizeof(DbpMissionCategoryList_GetEventList) == 0x000010, "Wrong size on DbpMissionCategoryList_GetEventList");
static_assert(offsetof(DbpMissionCategoryList_GetEventList, EventList) == 0x000000, "Member 'DbpMissionCategoryList_GetEventList::EventList' has a wrong offset!");

// Function BackendSubsystem.DbpMissionCategoryList.GetMissionList
// 0x00C0 (0x00C0 - 0x0000)
struct DbpMissionCategoryList_GetMissionList final
{
public:
	EMdMissionCategory                            Category;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EventCode;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDbMissionCategoryParam                ReturnValue;                                       // 0x0008(0x00B8)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMissionCategoryList_GetMissionList) == 0x000008, "Wrong alignment on DbpMissionCategoryList_GetMissionList");
static_assert(sizeof(DbpMissionCategoryList_GetMissionList) == 0x0000C0, "Wrong size on DbpMissionCategoryList_GetMissionList");
static_assert(offsetof(DbpMissionCategoryList_GetMissionList, Category) == 0x000000, "Member 'DbpMissionCategoryList_GetMissionList::Category' has a wrong offset!");
static_assert(offsetof(DbpMissionCategoryList_GetMissionList, EventCode) == 0x000004, "Member 'DbpMissionCategoryList_GetMissionList::EventCode' has a wrong offset!");
static_assert(offsetof(DbpMissionCategoryList_GetMissionList, ReturnValue) == 0x000008, "Member 'DbpMissionCategoryList_GetMissionList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMyProfile.GetCharacter
// 0x00A8 (0x00A8 - 0x0000)
struct DbpMyProfile_GetCharacter final
{
public:
	struct FMasterDataCharacter                   ReturnValue;                                       // 0x0000(0x00A8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMyProfile_GetCharacter) == 0x000008, "Wrong alignment on DbpMyProfile_GetCharacter");
static_assert(sizeof(DbpMyProfile_GetCharacter) == 0x0000A8, "Wrong size on DbpMyProfile_GetCharacter");
static_assert(offsetof(DbpMyProfile_GetCharacter, ReturnValue) == 0x000000, "Member 'DbpMyProfile_GetCharacter::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMyProfile.GetCostume
// 0x00A0 (0x00A0 - 0x0000)
struct DbpMyProfile_GetCostume final
{
public:
	struct FMasterDataCustomizeCostume            ReturnValue;                                       // 0x0000(0x00A0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMyProfile_GetCostume) == 0x000008, "Wrong alignment on DbpMyProfile_GetCostume");
static_assert(sizeof(DbpMyProfile_GetCostume) == 0x0000A0, "Wrong size on DbpMyProfile_GetCostume");
static_assert(offsetof(DbpMyProfile_GetCostume, ReturnValue) == 0x000000, "Member 'DbpMyProfile_GetCostume::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMyProfile.GetEmblems
// 0x0010 (0x0010 - 0x0000)
struct DbpMyProfile_GetEmblems final
{
public:
	TArray<struct FMasterDataEmblem>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMyProfile_GetEmblems) == 0x000008, "Wrong alignment on DbpMyProfile_GetEmblems");
static_assert(sizeof(DbpMyProfile_GetEmblems) == 0x000010, "Wrong size on DbpMyProfile_GetEmblems");
static_assert(offsetof(DbpMyProfile_GetEmblems, ReturnValue) == 0x000000, "Member 'DbpMyProfile_GetEmblems::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMyProfile.GetPlatformPlayerName
// 0x0010 (0x0010 - 0x0000)
struct DbpMyProfile_GetPlatformPlayerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMyProfile_GetPlatformPlayerName) == 0x000008, "Wrong alignment on DbpMyProfile_GetPlatformPlayerName");
static_assert(sizeof(DbpMyProfile_GetPlatformPlayerName) == 0x000010, "Wrong size on DbpMyProfile_GetPlatformPlayerName");
static_assert(offsetof(DbpMyProfile_GetPlatformPlayerName, ReturnValue) == 0x000000, "Member 'DbpMyProfile_GetPlatformPlayerName::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMyProfile.GetPlayerName
// 0x0010 (0x0010 - 0x0000)
struct DbpMyProfile_GetPlayerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMyProfile_GetPlayerName) == 0x000008, "Wrong alignment on DbpMyProfile_GetPlayerName");
static_assert(sizeof(DbpMyProfile_GetPlayerName) == 0x000010, "Wrong size on DbpMyProfile_GetPlayerName");
static_assert(offsetof(DbpMyProfile_GetPlayerName, ReturnValue) == 0x000000, "Member 'DbpMyProfile_GetPlayerName::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMyProfile.GetProfile
// 0x0010 (0x0010 - 0x0000)
struct DbpMyProfile_GetProfile final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMyProfile_GetProfile) == 0x000008, "Wrong alignment on DbpMyProfile_GetProfile");
static_assert(sizeof(DbpMyProfile_GetProfile) == 0x000010, "Wrong size on DbpMyProfile_GetProfile");
static_assert(offsetof(DbpMyProfile_GetProfile, ReturnValue) == 0x000000, "Member 'DbpMyProfile_GetProfile::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMyProfile.GetBillboardPoint
// 0x0004 (0x0004 - 0x0000)
struct DbpMyProfile_GetBillboardPoint final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMyProfile_GetBillboardPoint) == 0x000004, "Wrong alignment on DbpMyProfile_GetBillboardPoint");
static_assert(sizeof(DbpMyProfile_GetBillboardPoint) == 0x000004, "Wrong size on DbpMyProfile_GetBillboardPoint");
static_assert(offsetof(DbpMyProfile_GetBillboardPoint, ReturnValue) == 0x000000, "Member 'DbpMyProfile_GetBillboardPoint::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMyProfile.GetBillboardRank
// 0x0004 (0x0004 - 0x0000)
struct DbpMyProfile_GetBillboardRank final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMyProfile_GetBillboardRank) == 0x000004, "Wrong alignment on DbpMyProfile_GetBillboardRank");
static_assert(sizeof(DbpMyProfile_GetBillboardRank) == 0x000004, "Wrong size on DbpMyProfile_GetBillboardRank");
static_assert(offsetof(DbpMyProfile_GetBillboardRank, ReturnValue) == 0x000000, "Member 'DbpMyProfile_GetBillboardRank::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMyProfile.GetBillboardTodayPoint
// 0x0004 (0x0004 - 0x0000)
struct DbpMyProfile_GetBillboardTodayPoint final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMyProfile_GetBillboardTodayPoint) == 0x000004, "Wrong alignment on DbpMyProfile_GetBillboardTodayPoint");
static_assert(sizeof(DbpMyProfile_GetBillboardTodayPoint) == 0x000004, "Wrong size on DbpMyProfile_GetBillboardTodayPoint");
static_assert(offsetof(DbpMyProfile_GetBillboardTodayPoint, ReturnValue) == 0x000000, "Member 'DbpMyProfile_GetBillboardTodayPoint::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMyProfile.GetEquipAuraDisplayArea
// 0x0004 (0x0004 - 0x0000)
struct DbpMyProfile_GetEquipAuraDisplayArea final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMyProfile_GetEquipAuraDisplayArea) == 0x000004, "Wrong alignment on DbpMyProfile_GetEquipAuraDisplayArea");
static_assert(sizeof(DbpMyProfile_GetEquipAuraDisplayArea) == 0x000004, "Wrong size on DbpMyProfile_GetEquipAuraDisplayArea");
static_assert(offsetof(DbpMyProfile_GetEquipAuraDisplayArea, ReturnValue) == 0x000000, "Member 'DbpMyProfile_GetEquipAuraDisplayArea::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMyProfile.GetEquipAuraDisplayTarget
// 0x0004 (0x0004 - 0x0000)
struct DbpMyProfile_GetEquipAuraDisplayTarget final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMyProfile_GetEquipAuraDisplayTarget) == 0x000004, "Wrong alignment on DbpMyProfile_GetEquipAuraDisplayTarget");
static_assert(sizeof(DbpMyProfile_GetEquipAuraDisplayTarget) == 0x000004, "Wrong size on DbpMyProfile_GetEquipAuraDisplayTarget");
static_assert(offsetof(DbpMyProfile_GetEquipAuraDisplayTarget, ReturnValue) == 0x000000, "Member 'DbpMyProfile_GetEquipAuraDisplayTarget::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMyProfile.GetEquipAuraLevel
// 0x0004 (0x0004 - 0x0000)
struct DbpMyProfile_GetEquipAuraLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpMyProfile_GetEquipAuraLevel) == 0x000004, "Wrong alignment on DbpMyProfile_GetEquipAuraLevel");
static_assert(sizeof(DbpMyProfile_GetEquipAuraLevel) == 0x000004, "Wrong size on DbpMyProfile_GetEquipAuraLevel");
static_assert(offsetof(DbpMyProfile_GetEquipAuraLevel, ReturnValue) == 0x000000, "Member 'DbpMyProfile_GetEquipAuraLevel::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMyProfile.GetLevel
// 0x000C (0x000C - 0x0000)
struct DbpMyProfile_GetLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelPoint;                                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DbpMyProfile_GetLevel) == 0x000004, "Wrong alignment on DbpMyProfile_GetLevel");
static_assert(sizeof(DbpMyProfile_GetLevel) == 0x00000C, "Wrong size on DbpMyProfile_GetLevel");
static_assert(offsetof(DbpMyProfile_GetLevel, Level) == 0x000000, "Member 'DbpMyProfile_GetLevel::Level' has a wrong offset!");
static_assert(offsetof(DbpMyProfile_GetLevel, LevelPoint) == 0x000004, "Member 'DbpMyProfile_GetLevel::LevelPoint' has a wrong offset!");
static_assert(offsetof(DbpMyProfile_GetLevel, ReturnValue) == 0x000008, "Member 'DbpMyProfile_GetLevel::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpMyProfile.GetRank
// 0x0040 (0x0040 - 0x0000)
struct DbpMyProfile_GetRank final
{
public:
	struct FMasterDataRankExp                     Rank;                                              // 0x0000(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         RankPoint;                                         // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DbpMyProfile_GetRank) == 0x000008, "Wrong alignment on DbpMyProfile_GetRank");
static_assert(sizeof(DbpMyProfile_GetRank) == 0x000040, "Wrong size on DbpMyProfile_GetRank");
static_assert(offsetof(DbpMyProfile_GetRank, Rank) == 0x000000, "Member 'DbpMyProfile_GetRank::Rank' has a wrong offset!");
static_assert(offsetof(DbpMyProfile_GetRank, RankPoint) == 0x000038, "Member 'DbpMyProfile_GetRank::RankPoint' has a wrong offset!");
static_assert(offsetof(DbpMyProfile_GetRank, ReturnValue) == 0x00003C, "Member 'DbpMyProfile_GetRank::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpNotice.GetInformationList
// 0x0010 (0x0010 - 0x0000)
struct DbpNotice_GetInformationList final
{
public:
	TArray<struct FDbInformationInfoParam>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpNotice_GetInformationList) == 0x000008, "Wrong alignment on DbpNotice_GetInformationList");
static_assert(sizeof(DbpNotice_GetInformationList) == 0x000010, "Wrong size on DbpNotice_GetInformationList");
static_assert(offsetof(DbpNotice_GetInformationList, ReturnValue) == 0x000000, "Member 'DbpNotice_GetInformationList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpNotice.GetInvitation
// 0x00F8 (0x00F8 - 0x0000)
struct DbpNotice_GetInvitation final
{
public:
	class FString                                 NoticeId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDbInvitationInfoParam                 ReturnValue;                                       // 0x0010(0x00E8)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpNotice_GetInvitation) == 0x000008, "Wrong alignment on DbpNotice_GetInvitation");
static_assert(sizeof(DbpNotice_GetInvitation) == 0x0000F8, "Wrong size on DbpNotice_GetInvitation");
static_assert(offsetof(DbpNotice_GetInvitation, NoticeId) == 0x000000, "Member 'DbpNotice_GetInvitation::NoticeId' has a wrong offset!");
static_assert(offsetof(DbpNotice_GetInvitation, ReturnValue) == 0x000010, "Member 'DbpNotice_GetInvitation::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpNotice.GetInvitationList
// 0x0010 (0x0010 - 0x0000)
struct DbpNotice_GetInvitationList final
{
public:
	TArray<struct FDbInvitationInfoParam>         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpNotice_GetInvitationList) == 0x000008, "Wrong alignment on DbpNotice_GetInvitationList");
static_assert(sizeof(DbpNotice_GetInvitationList) == 0x000010, "Wrong size on DbpNotice_GetInvitationList");
static_assert(offsetof(DbpNotice_GetInvitationList, ReturnValue) == 0x000000, "Member 'DbpNotice_GetInvitationList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpNotice.GetMaxPageNo
// 0x0008 (0x0008 - 0x0000)
struct DbpNotice_GetMaxPageNo final
{
public:
	ENoticeCategory                               ECategory;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpNotice_GetMaxPageNo) == 0x000004, "Wrong alignment on DbpNotice_GetMaxPageNo");
static_assert(sizeof(DbpNotice_GetMaxPageNo) == 0x000008, "Wrong size on DbpNotice_GetMaxPageNo");
static_assert(offsetof(DbpNotice_GetMaxPageNo, ECategory) == 0x000000, "Member 'DbpNotice_GetMaxPageNo::ECategory' has a wrong offset!");
static_assert(offsetof(DbpNotice_GetMaxPageNo, ReturnValue) == 0x000004, "Member 'DbpNotice_GetMaxPageNo::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpNotice.GetOpenedNotices
// 0x0010 (0x0010 - 0x0000)
struct DbpNotice_GetOpenedNotices final
{
public:
	TArray<struct FDbNoticeOpenedNoticeParam>     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpNotice_GetOpenedNotices) == 0x000008, "Wrong alignment on DbpNotice_GetOpenedNotices");
static_assert(sizeof(DbpNotice_GetOpenedNotices) == 0x000010, "Wrong size on DbpNotice_GetOpenedNotices");
static_assert(offsetof(DbpNotice_GetOpenedNotices, ReturnValue) == 0x000000, "Member 'DbpNotice_GetOpenedNotices::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpNotice.GetPageNo
// 0x0008 (0x0008 - 0x0000)
struct DbpNotice_GetPageNo final
{
public:
	ENoticeCategory                               ECategory;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpNotice_GetPageNo) == 0x000004, "Wrong alignment on DbpNotice_GetPageNo");
static_assert(sizeof(DbpNotice_GetPageNo) == 0x000008, "Wrong size on DbpNotice_GetPageNo");
static_assert(offsetof(DbpNotice_GetPageNo, ECategory) == 0x000000, "Member 'DbpNotice_GetPageNo::ECategory' has a wrong offset!");
static_assert(offsetof(DbpNotice_GetPageNo, ReturnValue) == 0x000004, "Member 'DbpNotice_GetPageNo::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpNotice.GetReceivedItems
// 0x0010 (0x0010 - 0x0000)
struct DbpNotice_GetReceivedItems final
{
public:
	TArray<struct FDbInformationReceivedItemParam> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpNotice_GetReceivedItems) == 0x000008, "Wrong alignment on DbpNotice_GetReceivedItems");
static_assert(sizeof(DbpNotice_GetReceivedItems) == 0x000010, "Wrong size on DbpNotice_GetReceivedItems");
static_assert(offsetof(DbpNotice_GetReceivedItems, ReturnValue) == 0x000000, "Member 'DbpNotice_GetReceivedItems::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpNotice.GetRecommend
// 0x0098 (0x0098 - 0x0000)
struct DbpNotice_GetRecommend final
{
public:
	struct FDbRecommendNoticeParam                ReturnValue;                                       // 0x0000(0x0098)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpNotice_GetRecommend) == 0x000008, "Wrong alignment on DbpNotice_GetRecommend");
static_assert(sizeof(DbpNotice_GetRecommend) == 0x000098, "Wrong size on DbpNotice_GetRecommend");
static_assert(offsetof(DbpNotice_GetRecommend, ReturnValue) == 0x000000, "Member 'DbpNotice_GetRecommend::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpNotice.HasUnreadInvitation
// 0x0001 (0x0001 - 0x0000)
struct DbpNotice_HasUnreadInvitation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpNotice_HasUnreadInvitation) == 0x000001, "Wrong alignment on DbpNotice_HasUnreadInvitation");
static_assert(sizeof(DbpNotice_HasUnreadInvitation) == 0x000001, "Wrong size on DbpNotice_HasUnreadInvitation");
static_assert(offsetof(DbpNotice_HasUnreadInvitation, ReturnValue) == 0x000000, "Member 'DbpNotice_HasUnreadInvitation::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpNotice.HasUnreadNotice
// 0x0001 (0x0001 - 0x0000)
struct DbpNotice_HasUnreadNotice final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpNotice_HasUnreadNotice) == 0x000001, "Wrong alignment on DbpNotice_HasUnreadNotice");
static_assert(sizeof(DbpNotice_HasUnreadNotice) == 0x000001, "Wrong size on DbpNotice_HasUnreadNotice");
static_assert(offsetof(DbpNotice_HasUnreadNotice, ReturnValue) == 0x000000, "Member 'DbpNotice_HasUnreadNotice::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpPlayableCharacterList.GetCharacterList
// 0x0010 (0x0010 - 0x0000)
struct DbpPlayableCharacterList_GetCharacterList final
{
public:
	TArray<struct FDbMyCharacterParam>            ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpPlayableCharacterList_GetCharacterList) == 0x000008, "Wrong alignment on DbpPlayableCharacterList_GetCharacterList");
static_assert(sizeof(DbpPlayableCharacterList_GetCharacterList) == 0x000010, "Wrong size on DbpPlayableCharacterList_GetCharacterList");
static_assert(offsetof(DbpPlayableCharacterList_GetCharacterList, ReturnValue) == 0x000000, "Member 'DbpPlayableCharacterList_GetCharacterList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpRanking.GetAllRankingCodes
// 0x0010 (0x0010 - 0x0000)
struct DbpRanking_GetAllRankingCodes final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpRanking_GetAllRankingCodes) == 0x000008, "Wrong alignment on DbpRanking_GetAllRankingCodes");
static_assert(sizeof(DbpRanking_GetAllRankingCodes) == 0x000010, "Wrong size on DbpRanking_GetAllRankingCodes");
static_assert(offsetof(DbpRanking_GetAllRankingCodes, ReturnValue) == 0x000000, "Member 'DbpRanking_GetAllRankingCodes::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpRanking.GetAllRankingsForDebug
// 0x0010 (0x0010 - 0x0000)
struct DbpRanking_GetAllRankingsForDebug final
{
public:
	TArray<struct FDbRankingParam>                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpRanking_GetAllRankingsForDebug) == 0x000008, "Wrong alignment on DbpRanking_GetAllRankingsForDebug");
static_assert(sizeof(DbpRanking_GetAllRankingsForDebug) == 0x000010, "Wrong size on DbpRanking_GetAllRankingsForDebug");
static_assert(offsetof(DbpRanking_GetAllRankingsForDebug, ReturnValue) == 0x000000, "Member 'DbpRanking_GetAllRankingsForDebug::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpRanking.GetBillboardChartRanking
// 0x00B0 (0x00B0 - 0x0000)
struct DbpRanking_GetBillboardChartRanking final
{
public:
	struct FDbRankingParam                        ReturnValue;                                       // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpRanking_GetBillboardChartRanking) == 0x000008, "Wrong alignment on DbpRanking_GetBillboardChartRanking");
static_assert(sizeof(DbpRanking_GetBillboardChartRanking) == 0x0000B0, "Wrong size on DbpRanking_GetBillboardChartRanking");
static_assert(offsetof(DbpRanking_GetBillboardChartRanking, ReturnValue) == 0x000000, "Member 'DbpRanking_GetBillboardChartRanking::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpRanking.GetEventRankings
// 0x0010 (0x0010 - 0x0000)
struct DbpRanking_GetEventRankings final
{
public:
	TArray<struct FDbRankingParam>                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpRanking_GetEventRankings) == 0x000008, "Wrong alignment on DbpRanking_GetEventRankings");
static_assert(sizeof(DbpRanking_GetEventRankings) == 0x000010, "Wrong size on DbpRanking_GetEventRankings");
static_assert(offsetof(DbpRanking_GetEventRankings, ReturnValue) == 0x000000, "Member 'DbpRanking_GetEventRankings::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpRanking.GetGuildEliteRanking
// 0x00B0 (0x00B0 - 0x0000)
struct DbpRanking_GetGuildEliteRanking final
{
public:
	struct FDbRankingParam                        ReturnValue;                                       // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpRanking_GetGuildEliteRanking) == 0x000008, "Wrong alignment on DbpRanking_GetGuildEliteRanking");
static_assert(sizeof(DbpRanking_GetGuildEliteRanking) == 0x0000B0, "Wrong size on DbpRanking_GetGuildEliteRanking");
static_assert(offsetof(DbpRanking_GetGuildEliteRanking, ReturnValue) == 0x000000, "Member 'DbpRanking_GetGuildEliteRanking::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpRanking.GetGuildTopRanking
// 0x00B0 (0x00B0 - 0x0000)
struct DbpRanking_GetGuildTopRanking final
{
public:
	struct FDbRankingParam                        ReturnValue;                                       // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpRanking_GetGuildTopRanking) == 0x000008, "Wrong alignment on DbpRanking_GetGuildTopRanking");
static_assert(sizeof(DbpRanking_GetGuildTopRanking) == 0x0000B0, "Wrong size on DbpRanking_GetGuildTopRanking");
static_assert(offsetof(DbpRanking_GetGuildTopRanking, ReturnValue) == 0x000000, "Member 'DbpRanking_GetGuildTopRanking::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpRanking.GetMvpRanking
// 0x00B0 (0x00B0 - 0x0000)
struct DbpRanking_GetMvpRanking final
{
public:
	struct FDbRankingParam                        ReturnValue;                                       // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpRanking_GetMvpRanking) == 0x000008, "Wrong alignment on DbpRanking_GetMvpRanking");
static_assert(sizeof(DbpRanking_GetMvpRanking) == 0x0000B0, "Wrong size on DbpRanking_GetMvpRanking");
static_assert(offsetof(DbpRanking_GetMvpRanking, ReturnValue) == 0x000000, "Member 'DbpRanking_GetMvpRanking::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpRanking.GetRankingByCode
// 0x00B8 (0x00B8 - 0x0000)
struct DbpRanking_GetRankingByCode final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDbRankingParam                        ReturnValue;                                       // 0x0008(0x00B0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpRanking_GetRankingByCode) == 0x000008, "Wrong alignment on DbpRanking_GetRankingByCode");
static_assert(sizeof(DbpRanking_GetRankingByCode) == 0x0000B8, "Wrong size on DbpRanking_GetRankingByCode");
static_assert(offsetof(DbpRanking_GetRankingByCode, Code) == 0x000000, "Member 'DbpRanking_GetRankingByCode::Code' has a wrong offset!");
static_assert(offsetof(DbpRanking_GetRankingByCode, ReturnValue) == 0x000008, "Member 'DbpRanking_GetRankingByCode::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpResult.GetCurrentGold
// 0x0004 (0x0004 - 0x0000)
struct DbpResult_GetCurrentGold final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpResult_GetCurrentGold) == 0x000004, "Wrong alignment on DbpResult_GetCurrentGold");
static_assert(sizeof(DbpResult_GetCurrentGold) == 0x000004, "Wrong size on DbpResult_GetCurrentGold");
static_assert(offsetof(DbpResult_GetCurrentGold, ReturnValue) == 0x000000, "Member 'DbpResult_GetCurrentGold::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpResult.GetCurrentGuildPoint
// 0x0004 (0x0004 - 0x0000)
struct DbpResult_GetCurrentGuildPoint final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpResult_GetCurrentGuildPoint) == 0x000004, "Wrong alignment on DbpResult_GetCurrentGuildPoint");
static_assert(sizeof(DbpResult_GetCurrentGuildPoint) == 0x000004, "Wrong size on DbpResult_GetCurrentGuildPoint");
static_assert(offsetof(DbpResult_GetCurrentGuildPoint, ReturnValue) == 0x000000, "Member 'DbpResult_GetCurrentGuildPoint::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpResult.GetCurrentPlayerLevel
// 0x0004 (0x0004 - 0x0000)
struct DbpResult_GetCurrentPlayerLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpResult_GetCurrentPlayerLevel) == 0x000004, "Wrong alignment on DbpResult_GetCurrentPlayerLevel");
static_assert(sizeof(DbpResult_GetCurrentPlayerLevel) == 0x000004, "Wrong size on DbpResult_GetCurrentPlayerLevel");
static_assert(offsetof(DbpResult_GetCurrentPlayerLevel, ReturnValue) == 0x000000, "Member 'DbpResult_GetCurrentPlayerLevel::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpResult.GetCurrentPlayerLevelExp
// 0x0004 (0x0004 - 0x0000)
struct DbpResult_GetCurrentPlayerLevelExp final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpResult_GetCurrentPlayerLevelExp) == 0x000004, "Wrong alignment on DbpResult_GetCurrentPlayerLevelExp");
static_assert(sizeof(DbpResult_GetCurrentPlayerLevelExp) == 0x000004, "Wrong size on DbpResult_GetCurrentPlayerLevelExp");
static_assert(offsetof(DbpResult_GetCurrentPlayerLevelExp, ReturnValue) == 0x000000, "Member 'DbpResult_GetCurrentPlayerLevelExp::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpResult.GetCurrentPlayerRank
// 0x0038 (0x0038 - 0x0000)
struct DbpResult_GetCurrentPlayerRank final
{
public:
	struct FMasterDataRankExp                     ReturnValue;                                       // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpResult_GetCurrentPlayerRank) == 0x000008, "Wrong alignment on DbpResult_GetCurrentPlayerRank");
static_assert(sizeof(DbpResult_GetCurrentPlayerRank) == 0x000038, "Wrong size on DbpResult_GetCurrentPlayerRank");
static_assert(offsetof(DbpResult_GetCurrentPlayerRank, ReturnValue) == 0x000000, "Member 'DbpResult_GetCurrentPlayerRank::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpResult.GetCurrentPlayerRankExp
// 0x0004 (0x0004 - 0x0000)
struct DbpResult_GetCurrentPlayerRankExp final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpResult_GetCurrentPlayerRankExp) == 0x000004, "Wrong alignment on DbpResult_GetCurrentPlayerRankExp");
static_assert(sizeof(DbpResult_GetCurrentPlayerRankExp) == 0x000004, "Wrong size on DbpResult_GetCurrentPlayerRankExp");
static_assert(offsetof(DbpResult_GetCurrentPlayerRankExp, ReturnValue) == 0x000000, "Member 'DbpResult_GetCurrentPlayerRankExp::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpResult.GetCurrentSeasonPassRank
// 0x0004 (0x0004 - 0x0000)
struct DbpResult_GetCurrentSeasonPassRank final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpResult_GetCurrentSeasonPassRank) == 0x000004, "Wrong alignment on DbpResult_GetCurrentSeasonPassRank");
static_assert(sizeof(DbpResult_GetCurrentSeasonPassRank) == 0x000004, "Wrong size on DbpResult_GetCurrentSeasonPassRank");
static_assert(offsetof(DbpResult_GetCurrentSeasonPassRank, ReturnValue) == 0x000000, "Member 'DbpResult_GetCurrentSeasonPassRank::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpResult.GetCurrentSeasonPassRankExp
// 0x0004 (0x0004 - 0x0000)
struct DbpResult_GetCurrentSeasonPassRankExp final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpResult_GetCurrentSeasonPassRankExp) == 0x000004, "Wrong alignment on DbpResult_GetCurrentSeasonPassRankExp");
static_assert(sizeof(DbpResult_GetCurrentSeasonPassRankExp) == 0x000004, "Wrong size on DbpResult_GetCurrentSeasonPassRankExp");
static_assert(offsetof(DbpResult_GetCurrentSeasonPassRankExp, ReturnValue) == 0x000000, "Member 'DbpResult_GetCurrentSeasonPassRankExp::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpResult.GetCurrentSpecialLicenseRank
// 0x0004 (0x0004 - 0x0000)
struct DbpResult_GetCurrentSpecialLicenseRank final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpResult_GetCurrentSpecialLicenseRank) == 0x000004, "Wrong alignment on DbpResult_GetCurrentSpecialLicenseRank");
static_assert(sizeof(DbpResult_GetCurrentSpecialLicenseRank) == 0x000004, "Wrong size on DbpResult_GetCurrentSpecialLicenseRank");
static_assert(offsetof(DbpResult_GetCurrentSpecialLicenseRank, ReturnValue) == 0x000000, "Member 'DbpResult_GetCurrentSpecialLicenseRank::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpResult.GetCurrentSpecialLicenseRankExp
// 0x0004 (0x0004 - 0x0000)
struct DbpResult_GetCurrentSpecialLicenseRankExp final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpResult_GetCurrentSpecialLicenseRankExp) == 0x000004, "Wrong alignment on DbpResult_GetCurrentSpecialLicenseRankExp");
static_assert(sizeof(DbpResult_GetCurrentSpecialLicenseRankExp) == 0x000004, "Wrong size on DbpResult_GetCurrentSpecialLicenseRankExp");
static_assert(offsetof(DbpResult_GetCurrentSpecialLicenseRankExp, ReturnValue) == 0x000000, "Member 'DbpResult_GetCurrentSpecialLicenseRankExp::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpResult.GetGuildId
// 0x0010 (0x0010 - 0x0000)
struct DbpResult_GetGuildId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpResult_GetGuildId) == 0x000008, "Wrong alignment on DbpResult_GetGuildId");
static_assert(sizeof(DbpResult_GetGuildId) == 0x000010, "Wrong size on DbpResult_GetGuildId");
static_assert(offsetof(DbpResult_GetGuildId, ReturnValue) == 0x000000, "Member 'DbpResult_GetGuildId::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpResult.GetGuildName
// 0x0010 (0x0010 - 0x0000)
struct DbpResult_GetGuildName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpResult_GetGuildName) == 0x000008, "Wrong alignment on DbpResult_GetGuildName");
static_assert(sizeof(DbpResult_GetGuildName) == 0x000010, "Wrong size on DbpResult_GetGuildName");
static_assert(offsetof(DbpResult_GetGuildName, ReturnValue) == 0x000000, "Member 'DbpResult_GetGuildName::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpResult.GetPrevGold
// 0x0004 (0x0004 - 0x0000)
struct DbpResult_GetPrevGold final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpResult_GetPrevGold) == 0x000004, "Wrong alignment on DbpResult_GetPrevGold");
static_assert(sizeof(DbpResult_GetPrevGold) == 0x000004, "Wrong size on DbpResult_GetPrevGold");
static_assert(offsetof(DbpResult_GetPrevGold, ReturnValue) == 0x000000, "Member 'DbpResult_GetPrevGold::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpResult.GetPrevPlayerLevel
// 0x0004 (0x0004 - 0x0000)
struct DbpResult_GetPrevPlayerLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpResult_GetPrevPlayerLevel) == 0x000004, "Wrong alignment on DbpResult_GetPrevPlayerLevel");
static_assert(sizeof(DbpResult_GetPrevPlayerLevel) == 0x000004, "Wrong size on DbpResult_GetPrevPlayerLevel");
static_assert(offsetof(DbpResult_GetPrevPlayerLevel, ReturnValue) == 0x000000, "Member 'DbpResult_GetPrevPlayerLevel::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpResult.GetPrevPlayerLevelExp
// 0x0004 (0x0004 - 0x0000)
struct DbpResult_GetPrevPlayerLevelExp final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpResult_GetPrevPlayerLevelExp) == 0x000004, "Wrong alignment on DbpResult_GetPrevPlayerLevelExp");
static_assert(sizeof(DbpResult_GetPrevPlayerLevelExp) == 0x000004, "Wrong size on DbpResult_GetPrevPlayerLevelExp");
static_assert(offsetof(DbpResult_GetPrevPlayerLevelExp, ReturnValue) == 0x000000, "Member 'DbpResult_GetPrevPlayerLevelExp::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpResult.GetPrevPlayerRank
// 0x0038 (0x0038 - 0x0000)
struct DbpResult_GetPrevPlayerRank final
{
public:
	struct FMasterDataRankExp                     ReturnValue;                                       // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpResult_GetPrevPlayerRank) == 0x000008, "Wrong alignment on DbpResult_GetPrevPlayerRank");
static_assert(sizeof(DbpResult_GetPrevPlayerRank) == 0x000038, "Wrong size on DbpResult_GetPrevPlayerRank");
static_assert(offsetof(DbpResult_GetPrevPlayerRank, ReturnValue) == 0x000000, "Member 'DbpResult_GetPrevPlayerRank::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpResult.GetPrevPlayerRankExp
// 0x0004 (0x0004 - 0x0000)
struct DbpResult_GetPrevPlayerRankExp final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpResult_GetPrevPlayerRankExp) == 0x000004, "Wrong alignment on DbpResult_GetPrevPlayerRankExp");
static_assert(sizeof(DbpResult_GetPrevPlayerRankExp) == 0x000004, "Wrong size on DbpResult_GetPrevPlayerRankExp");
static_assert(offsetof(DbpResult_GetPrevPlayerRankExp, ReturnValue) == 0x000000, "Member 'DbpResult_GetPrevPlayerRankExp::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpResult.GetPrevSeasonPassRank
// 0x0004 (0x0004 - 0x0000)
struct DbpResult_GetPrevSeasonPassRank final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpResult_GetPrevSeasonPassRank) == 0x000004, "Wrong alignment on DbpResult_GetPrevSeasonPassRank");
static_assert(sizeof(DbpResult_GetPrevSeasonPassRank) == 0x000004, "Wrong size on DbpResult_GetPrevSeasonPassRank");
static_assert(offsetof(DbpResult_GetPrevSeasonPassRank, ReturnValue) == 0x000000, "Member 'DbpResult_GetPrevSeasonPassRank::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpResult.GetPrevSeasonPassRankExp
// 0x0004 (0x0004 - 0x0000)
struct DbpResult_GetPrevSeasonPassRankExp final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpResult_GetPrevSeasonPassRankExp) == 0x000004, "Wrong alignment on DbpResult_GetPrevSeasonPassRankExp");
static_assert(sizeof(DbpResult_GetPrevSeasonPassRankExp) == 0x000004, "Wrong size on DbpResult_GetPrevSeasonPassRankExp");
static_assert(offsetof(DbpResult_GetPrevSeasonPassRankExp, ReturnValue) == 0x000000, "Member 'DbpResult_GetPrevSeasonPassRankExp::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpResult.HasTopLicense
// 0x0001 (0x0001 - 0x0000)
struct DbpResult_HasTopLicense final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpResult_HasTopLicense) == 0x000001, "Wrong alignment on DbpResult_HasTopLicense");
static_assert(sizeof(DbpResult_HasTopLicense) == 0x000001, "Wrong size on DbpResult_HasTopLicense");
static_assert(offsetof(DbpResult_HasTopLicense, ReturnValue) == 0x000000, "Member 'DbpResult_HasTopLicense::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSeason.AddSpecialLicenseExp
// 0x0004 (0x0004 - 0x0000)
struct DbpSeason_AddSpecialLicenseExp final
{
public:
	int32                                         Exp;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSeason_AddSpecialLicenseExp) == 0x000004, "Wrong alignment on DbpSeason_AddSpecialLicenseExp");
static_assert(sizeof(DbpSeason_AddSpecialLicenseExp) == 0x000004, "Wrong size on DbpSeason_AddSpecialLicenseExp");
static_assert(offsetof(DbpSeason_AddSpecialLicenseExp, Exp) == 0x000000, "Member 'DbpSeason_AddSpecialLicenseExp::Exp' has a wrong offset!");

// Function BackendSubsystem.DbpSeason.CanBuyProLicense
// 0x0001 (0x0001 - 0x0000)
struct DbpSeason_CanBuyProLicense final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSeason_CanBuyProLicense) == 0x000001, "Wrong alignment on DbpSeason_CanBuyProLicense");
static_assert(sizeof(DbpSeason_CanBuyProLicense) == 0x000001, "Wrong size on DbpSeason_CanBuyProLicense");
static_assert(offsetof(DbpSeason_CanBuyProLicense, ReturnValue) == 0x000000, "Member 'DbpSeason_CanBuyProLicense::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSeason.CanBuyProLicenseWithExp
// 0x0001 (0x0001 - 0x0000)
struct DbpSeason_CanBuyProLicenseWithExp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSeason_CanBuyProLicenseWithExp) == 0x000001, "Wrong alignment on DbpSeason_CanBuyProLicenseWithExp");
static_assert(sizeof(DbpSeason_CanBuyProLicenseWithExp) == 0x000001, "Wrong size on DbpSeason_CanBuyProLicenseWithExp");
static_assert(offsetof(DbpSeason_CanBuyProLicenseWithExp, ReturnValue) == 0x000000, "Member 'DbpSeason_CanBuyProLicenseWithExp::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSeason.GetAvailableSpecialLicenseExpCount
// 0x0004 (0x0004 - 0x0000)
struct DbpSeason_GetAvailableSpecialLicenseExpCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSeason_GetAvailableSpecialLicenseExpCount) == 0x000004, "Wrong alignment on DbpSeason_GetAvailableSpecialLicenseExpCount");
static_assert(sizeof(DbpSeason_GetAvailableSpecialLicenseExpCount) == 0x000004, "Wrong size on DbpSeason_GetAvailableSpecialLicenseExpCount");
static_assert(offsetof(DbpSeason_GetAvailableSpecialLicenseExpCount, ReturnValue) == 0x000000, "Member 'DbpSeason_GetAvailableSpecialLicenseExpCount::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSeason.GetHeroCrystal
// 0x0004 (0x0004 - 0x0000)
struct DbpSeason_GetHeroCrystal final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSeason_GetHeroCrystal) == 0x000004, "Wrong alignment on DbpSeason_GetHeroCrystal");
static_assert(sizeof(DbpSeason_GetHeroCrystal) == 0x000004, "Wrong size on DbpSeason_GetHeroCrystal");
static_assert(offsetof(DbpSeason_GetHeroCrystal, ReturnValue) == 0x000000, "Member 'DbpSeason_GetHeroCrystal::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSeason.GetNextRankExp
// 0x0004 (0x0004 - 0x0000)
struct DbpSeason_GetNextRankExp final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSeason_GetNextRankExp) == 0x000004, "Wrong alignment on DbpSeason_GetNextRankExp");
static_assert(sizeof(DbpSeason_GetNextRankExp) == 0x000004, "Wrong size on DbpSeason_GetNextRankExp");
static_assert(offsetof(DbpSeason_GetNextRankExp, ReturnValue) == 0x000000, "Member 'DbpSeason_GetNextRankExp::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSeason.GetProLicensePrice
// 0x0004 (0x0004 - 0x0000)
struct DbpSeason_GetProLicensePrice final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSeason_GetProLicensePrice) == 0x000004, "Wrong alignment on DbpSeason_GetProLicensePrice");
static_assert(sizeof(DbpSeason_GetProLicensePrice) == 0x000004, "Wrong size on DbpSeason_GetProLicensePrice");
static_assert(offsetof(DbpSeason_GetProLicensePrice, ReturnValue) == 0x000000, "Member 'DbpSeason_GetProLicensePrice::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSeason.GetProLicensePriceWithExp
// 0x0004 (0x0004 - 0x0000)
struct DbpSeason_GetProLicensePriceWithExp final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSeason_GetProLicensePriceWithExp) == 0x000004, "Wrong alignment on DbpSeason_GetProLicensePriceWithExp");
static_assert(sizeof(DbpSeason_GetProLicensePriceWithExp) == 0x000004, "Wrong size on DbpSeason_GetProLicensePriceWithExp");
static_assert(offsetof(DbpSeason_GetProLicensePriceWithExp, ReturnValue) == 0x000000, "Member 'DbpSeason_GetProLicensePriceWithExp::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSeason.GetRewardRange
// 0x0018 (0x0018 - 0x0000)
struct DbpSeason_GetRewardRange final
{
public:
	int32                                         RankFrom;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankTo;                                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDbSeasonPassParam>             ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSeason_GetRewardRange) == 0x000008, "Wrong alignment on DbpSeason_GetRewardRange");
static_assert(sizeof(DbpSeason_GetRewardRange) == 0x000018, "Wrong size on DbpSeason_GetRewardRange");
static_assert(offsetof(DbpSeason_GetRewardRange, RankFrom) == 0x000000, "Member 'DbpSeason_GetRewardRange::RankFrom' has a wrong offset!");
static_assert(offsetof(DbpSeason_GetRewardRange, RankTo) == 0x000004, "Member 'DbpSeason_GetRewardRange::RankTo' has a wrong offset!");
static_assert(offsetof(DbpSeason_GetRewardRange, ReturnValue) == 0x000008, "Member 'DbpSeason_GetRewardRange::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSeason.GetRewards
// 0x0018 (0x0018 - 0x0000)
struct DbpSeason_GetRewards final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDbSeasonPassParam>             ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSeason_GetRewards) == 0x000008, "Wrong alignment on DbpSeason_GetRewards");
static_assert(sizeof(DbpSeason_GetRewards) == 0x000018, "Wrong size on DbpSeason_GetRewards");
static_assert(offsetof(DbpSeason_GetRewards, Rank) == 0x000000, "Member 'DbpSeason_GetRewards::Rank' has a wrong offset!");
static_assert(offsetof(DbpSeason_GetRewards, ReturnValue) == 0x000008, "Member 'DbpSeason_GetRewards::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSeason.GetSeasonInfo
// 0x0088 (0x0088 - 0x0000)
struct DbpSeason_GetSeasonInfo final
{
public:
	struct FDbSeasonParam                         ReturnValue;                                       // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSeason_GetSeasonInfo) == 0x000008, "Wrong alignment on DbpSeason_GetSeasonInfo");
static_assert(sizeof(DbpSeason_GetSeasonInfo) == 0x000088, "Wrong size on DbpSeason_GetSeasonInfo");
static_assert(offsetof(DbpSeason_GetSeasonInfo, ReturnValue) == 0x000000, "Member 'DbpSeason_GetSeasonInfo::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSeason.GetSpecialLicenseExp
// 0x0004 (0x0004 - 0x0000)
struct DbpSeason_GetSpecialLicenseExp final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSeason_GetSpecialLicenseExp) == 0x000004, "Wrong alignment on DbpSeason_GetSpecialLicenseExp");
static_assert(sizeof(DbpSeason_GetSpecialLicenseExp) == 0x000004, "Wrong size on DbpSeason_GetSpecialLicenseExp");
static_assert(offsetof(DbpSeason_GetSpecialLicenseExp, ReturnValue) == 0x000000, "Member 'DbpSeason_GetSpecialLicenseExp::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSeason.GetSpecialLicenseExpPrice
// 0x0004 (0x0004 - 0x0000)
struct DbpSeason_GetSpecialLicenseExpPrice final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSeason_GetSpecialLicenseExpPrice) == 0x000004, "Wrong alignment on DbpSeason_GetSpecialLicenseExpPrice");
static_assert(sizeof(DbpSeason_GetSpecialLicenseExpPrice) == 0x000004, "Wrong size on DbpSeason_GetSpecialLicenseExpPrice");
static_assert(offsetof(DbpSeason_GetSpecialLicenseExpPrice, ReturnValue) == 0x000000, "Member 'DbpSeason_GetSpecialLicenseExpPrice::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSeason.GetSpecialLicenseLastRewards
// 0x0010 (0x0010 - 0x0000)
struct DbpSeason_GetSpecialLicenseLastRewards final
{
public:
	TArray<struct FDbSpecialLicenseReward>        ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSeason_GetSpecialLicenseLastRewards) == 0x000008, "Wrong alignment on DbpSeason_GetSpecialLicenseLastRewards");
static_assert(sizeof(DbpSeason_GetSpecialLicenseLastRewards) == 0x000010, "Wrong size on DbpSeason_GetSpecialLicenseLastRewards");
static_assert(offsetof(DbpSeason_GetSpecialLicenseLastRewards, ReturnValue) == 0x000000, "Member 'DbpSeason_GetSpecialLicenseLastRewards::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSeason.GetSpecialLicenseList
// 0x0050 (0x0050 - 0x0000)
struct DbpSeason_GetSpecialLicenseList final
{
public:
	TMap<int32, struct FDbSpecialLicenseParam>    ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSeason_GetSpecialLicenseList) == 0x000008, "Wrong alignment on DbpSeason_GetSpecialLicenseList");
static_assert(sizeof(DbpSeason_GetSpecialLicenseList) == 0x000050, "Wrong size on DbpSeason_GetSpecialLicenseList");
static_assert(offsetof(DbpSeason_GetSpecialLicenseList, ReturnValue) == 0x000000, "Member 'DbpSeason_GetSpecialLicenseList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSeason.GetSpecialLicenseMaxExp
// 0x0004 (0x0004 - 0x0000)
struct DbpSeason_GetSpecialLicenseMaxExp final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSeason_GetSpecialLicenseMaxExp) == 0x000004, "Wrong alignment on DbpSeason_GetSpecialLicenseMaxExp");
static_assert(sizeof(DbpSeason_GetSpecialLicenseMaxExp) == 0x000004, "Wrong size on DbpSeason_GetSpecialLicenseMaxExp");
static_assert(offsetof(DbpSeason_GetSpecialLicenseMaxExp, ReturnValue) == 0x000000, "Member 'DbpSeason_GetSpecialLicenseMaxExp::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSeason.GetSpecialLicenseRank
// 0x0004 (0x0004 - 0x0000)
struct DbpSeason_GetSpecialLicenseRank final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSeason_GetSpecialLicenseRank) == 0x000004, "Wrong alignment on DbpSeason_GetSpecialLicenseRank");
static_assert(sizeof(DbpSeason_GetSpecialLicenseRank) == 0x000004, "Wrong size on DbpSeason_GetSpecialLicenseRank");
static_assert(offsetof(DbpSeason_GetSpecialLicenseRank, ReturnValue) == 0x000000, "Member 'DbpSeason_GetSpecialLicenseRank::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSeason.GetStockItems
// 0x0050 (0x0050 - 0x0000)
struct DbpSeason_GetStockItems final
{
public:
	TMap<struct FDbItemCategoryParam, int32>      ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSeason_GetStockItems) == 0x000008, "Wrong alignment on DbpSeason_GetStockItems");
static_assert(sizeof(DbpSeason_GetStockItems) == 0x000050, "Wrong size on DbpSeason_GetStockItems");
static_assert(offsetof(DbpSeason_GetStockItems, ReturnValue) == 0x000000, "Member 'DbpSeason_GetStockItems::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSeason.HasProLicense
// 0x0001 (0x0001 - 0x0000)
struct DbpSeason_HasProLicense final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSeason_HasProLicense) == 0x000001, "Wrong alignment on DbpSeason_HasProLicense");
static_assert(sizeof(DbpSeason_HasProLicense) == 0x000001, "Wrong size on DbpSeason_HasProLicense");
static_assert(offsetof(DbpSeason_HasProLicense, ReturnValue) == 0x000000, "Member 'DbpSeason_HasProLicense::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSetting.SetCurrentRegionCode
// 0x0004 (0x0004 - 0x0000)
struct DbpSetting_SetCurrentRegionCode final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSetting_SetCurrentRegionCode) == 0x000004, "Wrong alignment on DbpSetting_SetCurrentRegionCode");
static_assert(sizeof(DbpSetting_SetCurrentRegionCode) == 0x000004, "Wrong size on DbpSetting_SetCurrentRegionCode");
static_assert(offsetof(DbpSetting_SetCurrentRegionCode, Code) == 0x000000, "Member 'DbpSetting_SetCurrentRegionCode::Code' has a wrong offset!");

// Function BackendSubsystem.DbpSetting.GetActiveInputDeviceId
// 0x0010 (0x0010 - 0x0000)
struct DbpSetting_GetActiveInputDeviceId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSetting_GetActiveInputDeviceId) == 0x000008, "Wrong alignment on DbpSetting_GetActiveInputDeviceId");
static_assert(sizeof(DbpSetting_GetActiveInputDeviceId) == 0x000010, "Wrong size on DbpSetting_GetActiveInputDeviceId");
static_assert(offsetof(DbpSetting_GetActiveInputDeviceId, ReturnValue) == 0x000000, "Member 'DbpSetting_GetActiveInputDeviceId::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSetting.GetActiveOutputDeviceId
// 0x0010 (0x0010 - 0x0000)
struct DbpSetting_GetActiveOutputDeviceId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSetting_GetActiveOutputDeviceId) == 0x000008, "Wrong alignment on DbpSetting_GetActiveOutputDeviceId");
static_assert(sizeof(DbpSetting_GetActiveOutputDeviceId) == 0x000010, "Wrong size on DbpSetting_GetActiveOutputDeviceId");
static_assert(offsetof(DbpSetting_GetActiveOutputDeviceId, ReturnValue) == 0x000000, "Member 'DbpSetting_GetActiveOutputDeviceId::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSetting.GetAuraDisplayArea
// 0x0004 (0x0004 - 0x0000)
struct DbpSetting_GetAuraDisplayArea final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSetting_GetAuraDisplayArea) == 0x000004, "Wrong alignment on DbpSetting_GetAuraDisplayArea");
static_assert(sizeof(DbpSetting_GetAuraDisplayArea) == 0x000004, "Wrong size on DbpSetting_GetAuraDisplayArea");
static_assert(offsetof(DbpSetting_GetAuraDisplayArea, ReturnValue) == 0x000000, "Member 'DbpSetting_GetAuraDisplayArea::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSetting.GetAuraDisplayTarget
// 0x0004 (0x0004 - 0x0000)
struct DbpSetting_GetAuraDisplayTarget final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSetting_GetAuraDisplayTarget) == 0x000004, "Wrong alignment on DbpSetting_GetAuraDisplayTarget");
static_assert(sizeof(DbpSetting_GetAuraDisplayTarget) == 0x000004, "Wrong size on DbpSetting_GetAuraDisplayTarget");
static_assert(offsetof(DbpSetting_GetAuraDisplayTarget, ReturnValue) == 0x000000, "Member 'DbpSetting_GetAuraDisplayTarget::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSetting.GetCurrentRegion
// 0x0040 (0x0040 - 0x0000)
struct DbpSetting_GetCurrentRegion final
{
public:
	struct FDbMatchingRegionSettingParam          ReturnValue;                                       // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSetting_GetCurrentRegion) == 0x000008, "Wrong alignment on DbpSetting_GetCurrentRegion");
static_assert(sizeof(DbpSetting_GetCurrentRegion) == 0x000040, "Wrong size on DbpSetting_GetCurrentRegion");
static_assert(offsetof(DbpSetting_GetCurrentRegion, ReturnValue) == 0x000000, "Member 'DbpSetting_GetCurrentRegion::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSetting.GetCurrentRegionCode
// 0x0004 (0x0004 - 0x0000)
struct DbpSetting_GetCurrentRegionCode final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSetting_GetCurrentRegionCode) == 0x000004, "Wrong alignment on DbpSetting_GetCurrentRegionCode");
static_assert(sizeof(DbpSetting_GetCurrentRegionCode) == 0x000004, "Wrong size on DbpSetting_GetCurrentRegionCode");
static_assert(offsetof(DbpSetting_GetCurrentRegionCode, ReturnValue) == 0x000000, "Member 'DbpSetting_GetCurrentRegionCode::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSetting.GetFundSettlementText
// 0x0010 (0x0010 - 0x0000)
struct DbpSetting_GetFundSettlementText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSetting_GetFundSettlementText) == 0x000008, "Wrong alignment on DbpSetting_GetFundSettlementText");
static_assert(sizeof(DbpSetting_GetFundSettlementText) == 0x000010, "Wrong size on DbpSetting_GetFundSettlementText");
static_assert(offsetof(DbpSetting_GetFundSettlementText, ReturnValue) == 0x000000, "Member 'DbpSetting_GetFundSettlementText::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSetting.GetInputDeviceList
// 0x0010 (0x0010 - 0x0000)
struct DbpSetting_GetInputDeviceList final
{
public:
	TArray<struct FDbSoundDevice>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSetting_GetInputDeviceList) == 0x000008, "Wrong alignment on DbpSetting_GetInputDeviceList");
static_assert(sizeof(DbpSetting_GetInputDeviceList) == 0x000010, "Wrong size on DbpSetting_GetInputDeviceList");
static_assert(offsetof(DbpSetting_GetInputDeviceList, ReturnValue) == 0x000000, "Member 'DbpSetting_GetInputDeviceList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSetting.GetMatchingRegions
// 0x0050 (0x0050 - 0x0000)
struct DbpSetting_GetMatchingRegions final
{
public:
	TMap<int32, struct FDbMatchingRegionSettingParam> ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSetting_GetMatchingRegions) == 0x000008, "Wrong alignment on DbpSetting_GetMatchingRegions");
static_assert(sizeof(DbpSetting_GetMatchingRegions) == 0x000050, "Wrong size on DbpSetting_GetMatchingRegions");
static_assert(offsetof(DbpSetting_GetMatchingRegions, ReturnValue) == 0x000000, "Member 'DbpSetting_GetMatchingRegions::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSetting.GetOutputDeviceList
// 0x0010 (0x0010 - 0x0000)
struct DbpSetting_GetOutputDeviceList final
{
public:
	TArray<struct FDbSoundDevice>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSetting_GetOutputDeviceList) == 0x000008, "Wrong alignment on DbpSetting_GetOutputDeviceList");
static_assert(sizeof(DbpSetting_GetOutputDeviceList) == 0x000010, "Wrong size on DbpSetting_GetOutputDeviceList");
static_assert(offsetof(DbpSetting_GetOutputDeviceList, ReturnValue) == 0x000000, "Member 'DbpSetting_GetOutputDeviceList::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSetting.GetTokushoText
// 0x0010 (0x0010 - 0x0000)
struct DbpSetting_GetTokushoText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSetting_GetTokushoText) == 0x000008, "Wrong alignment on DbpSetting_GetTokushoText");
static_assert(sizeof(DbpSetting_GetTokushoText) == 0x000010, "Wrong size on DbpSetting_GetTokushoText");
static_assert(offsetof(DbpSetting_GetTokushoText, ReturnValue) == 0x000000, "Member 'DbpSetting_GetTokushoText::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSetting.GetTrackingNumber
// 0x0010 (0x0010 - 0x0000)
struct DbpSetting_GetTrackingNumber final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSetting_GetTrackingNumber) == 0x000008, "Wrong alignment on DbpSetting_GetTrackingNumber");
static_assert(sizeof(DbpSetting_GetTrackingNumber) == 0x000010, "Wrong size on DbpSetting_GetTrackingNumber");
static_assert(offsetof(DbpSetting_GetTrackingNumber, ReturnValue) == 0x000000, "Member 'DbpSetting_GetTrackingNumber::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSetting.GetVoiceChatVolume
// 0x0004 (0x0004 - 0x0000)
struct DbpSetting_GetVoiceChatVolume final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSetting_GetVoiceChatVolume) == 0x000004, "Wrong alignment on DbpSetting_GetVoiceChatVolume");
static_assert(sizeof(DbpSetting_GetVoiceChatVolume) == 0x000004, "Wrong size on DbpSetting_GetVoiceChatVolume");
static_assert(offsetof(DbpSetting_GetVoiceChatVolume, ReturnValue) == 0x000000, "Member 'DbpSetting_GetVoiceChatVolume::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSetting.IsPublicBattleRecord
// 0x0001 (0x0001 - 0x0000)
struct DbpSetting_IsPublicBattleRecord final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSetting_IsPublicBattleRecord) == 0x000001, "Wrong alignment on DbpSetting_IsPublicBattleRecord");
static_assert(sizeof(DbpSetting_IsPublicBattleRecord) == 0x000001, "Wrong size on DbpSetting_IsPublicBattleRecord");
static_assert(offsetof(DbpSetting_IsPublicBattleRecord, ReturnValue) == 0x000000, "Member 'DbpSetting_IsPublicBattleRecord::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpSetting.IsVoiceChatEnabled
// 0x0001 (0x0001 - 0x0000)
struct DbpSetting_IsVoiceChatEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpSetting_IsVoiceChatEnabled) == 0x000001, "Wrong alignment on DbpSetting_IsVoiceChatEnabled");
static_assert(sizeof(DbpSetting_IsVoiceChatEnabled) == 0x000001, "Wrong size on DbpSetting_IsVoiceChatEnabled");
static_assert(offsetof(DbpSetting_IsVoiceChatEnabled, ReturnValue) == 0x000000, "Member 'DbpSetting_IsVoiceChatEnabled::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpShopList.GetCurrencyCount
// 0x0008 (0x0008 - 0x0000)
struct DbpShopList_GetCurrencyCount final
{
public:
	ECurrencyType                                 EType;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpShopList_GetCurrencyCount) == 0x000004, "Wrong alignment on DbpShopList_GetCurrencyCount");
static_assert(sizeof(DbpShopList_GetCurrencyCount) == 0x000008, "Wrong size on DbpShopList_GetCurrencyCount");
static_assert(offsetof(DbpShopList_GetCurrencyCount, EType) == 0x000000, "Member 'DbpShopList_GetCurrencyCount::EType' has a wrong offset!");
static_assert(offsetof(DbpShopList_GetCurrencyCount, ReturnValue) == 0x000004, "Member 'DbpShopList_GetCurrencyCount::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpShopList.GetMiscShopCodes
// 0x0010 (0x0010 - 0x0000)
struct DbpShopList_GetMiscShopCodes final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpShopList_GetMiscShopCodes) == 0x000008, "Wrong alignment on DbpShopList_GetMiscShopCodes");
static_assert(sizeof(DbpShopList_GetMiscShopCodes) == 0x000010, "Wrong size on DbpShopList_GetMiscShopCodes");
static_assert(offsetof(DbpShopList_GetMiscShopCodes, ReturnValue) == 0x000000, "Member 'DbpShopList_GetMiscShopCodes::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpShopList.GetNormalShopCodes
// 0x0010 (0x0010 - 0x0000)
struct DbpShopList_GetNormalShopCodes final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpShopList_GetNormalShopCodes) == 0x000008, "Wrong alignment on DbpShopList_GetNormalShopCodes");
static_assert(sizeof(DbpShopList_GetNormalShopCodes) == 0x000010, "Wrong size on DbpShopList_GetNormalShopCodes");
static_assert(offsetof(DbpShopList_GetNormalShopCodes, ReturnValue) == 0x000000, "Member 'DbpShopList_GetNormalShopCodes::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpShopList.GetPremiumShopCodes
// 0x0010 (0x0010 - 0x0000)
struct DbpShopList_GetPremiumShopCodes final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpShopList_GetPremiumShopCodes) == 0x000008, "Wrong alignment on DbpShopList_GetPremiumShopCodes");
static_assert(sizeof(DbpShopList_GetPremiumShopCodes) == 0x000010, "Wrong size on DbpShopList_GetPremiumShopCodes");
static_assert(offsetof(DbpShopList_GetPremiumShopCodes, ReturnValue) == 0x000000, "Member 'DbpShopList_GetPremiumShopCodes::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpShopList.GetShop
// 0x0180 (0x0180 - 0x0000)
struct DbpShopList_GetShop final
{
public:
	int32                                         ShopCode;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDbShopParam                           ReturnValue;                                       // 0x0008(0x0178)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpShopList_GetShop) == 0x000008, "Wrong alignment on DbpShopList_GetShop");
static_assert(sizeof(DbpShopList_GetShop) == 0x000180, "Wrong size on DbpShopList_GetShop");
static_assert(offsetof(DbpShopList_GetShop, ShopCode) == 0x000000, "Member 'DbpShopList_GetShop::ShopCode' has a wrong offset!");
static_assert(offsetof(DbpShopList_GetShop, ReturnValue) == 0x000008, "Member 'DbpShopList_GetShop::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpShopList.GetShopCodes
// 0x0010 (0x0010 - 0x0000)
struct DbpShopList_GetShopCodes final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpShopList_GetShopCodes) == 0x000008, "Wrong alignment on DbpShopList_GetShopCodes");
static_assert(sizeof(DbpShopList_GetShopCodes) == 0x000010, "Wrong size on DbpShopList_GetShopCodes");
static_assert(offsetof(DbpShopList_GetShopCodes, ReturnValue) == 0x000000, "Member 'DbpShopList_GetShopCodes::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.DbpShopList.GetShopItem
// 0x0690 (0x0690 - 0x0000)
struct DbpShopList_GetShopItem final
{
public:
	int32                                         ShopCode;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShopItemCode;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDbShopItemParam                       ReturnValue;                                       // 0x0008(0x0688)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DbpShopList_GetShopItem) == 0x000008, "Wrong alignment on DbpShopList_GetShopItem");
static_assert(sizeof(DbpShopList_GetShopItem) == 0x000690, "Wrong size on DbpShopList_GetShopItem");
static_assert(offsetof(DbpShopList_GetShopItem, ShopCode) == 0x000000, "Member 'DbpShopList_GetShopItem::ShopCode' has a wrong offset!");
static_assert(offsetof(DbpShopList_GetShopItem, ShopItemCode) == 0x000004, "Member 'DbpShopList_GetShopItem::ShopItemCode' has a wrong offset!");
static_assert(offsetof(DbpShopList_GetShopItem, ReturnValue) == 0x000008, "Member 'DbpShopList_GetShopItem::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.Clear
// 0x0001 (0x0001 - 0x0000)
struct MasterDataCache_Clear final
{
public:
	bool                                          bLock;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_Clear) == 0x000001, "Wrong alignment on MasterDataCache_Clear");
static_assert(sizeof(MasterDataCache_Clear) == 0x000001, "Wrong size on MasterDataCache_Clear");
static_assert(offsetof(MasterDataCache_Clear, bLock) == 0x000000, "Member 'MasterDataCache_Clear::bLock' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetAbandonedVoice
// 0x0028 (0x0028 - 0x0000)
struct MasterDataCache_GetAbandonedVoice final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataAbandonedVoice              MasterData;                                        // 0x0008(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetAbandonedVoice) == 0x000008, "Wrong alignment on MasterDataCache_GetAbandonedVoice");
static_assert(sizeof(MasterDataCache_GetAbandonedVoice) == 0x000028, "Wrong size on MasterDataCache_GetAbandonedVoice");
static_assert(offsetof(MasterDataCache_GetAbandonedVoice, Code) == 0x000000, "Member 'MasterDataCache_GetAbandonedVoice::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetAbandonedVoice, MasterData) == 0x000008, "Member 'MasterDataCache_GetAbandonedVoice::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetAbility
// 0x0078 (0x0078 - 0x0000)
struct MasterDataCache_GetAbility final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataAbility                     MasterData;                                        // 0x0008(0x0070)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetAbility) == 0x000008, "Wrong alignment on MasterDataCache_GetAbility");
static_assert(sizeof(MasterDataCache_GetAbility) == 0x000078, "Wrong size on MasterDataCache_GetAbility");
static_assert(offsetof(MasterDataCache_GetAbility, Code) == 0x000000, "Member 'MasterDataCache_GetAbility::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetAbility, MasterData) == 0x000008, "Member 'MasterDataCache_GetAbility::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetBonusExp
// 0x0060 (0x0060 - 0x0000)
struct MasterDataCache_GetBonusExp final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataBonusExp                    MasterData;                                        // 0x0008(0x0058)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetBonusExp) == 0x000008, "Wrong alignment on MasterDataCache_GetBonusExp");
static_assert(sizeof(MasterDataCache_GetBonusExp) == 0x000060, "Wrong size on MasterDataCache_GetBonusExp");
static_assert(offsetof(MasterDataCache_GetBonusExp, Code) == 0x000000, "Member 'MasterDataCache_GetBonusExp::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetBonusExp, MasterData) == 0x000008, "Member 'MasterDataCache_GetBonusExp::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetCharacter
// 0x00B0 (0x00B0 - 0x0000)
struct MasterDataCache_GetCharacter final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataCharacter                   MasterData;                                        // 0x0008(0x00A8)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetCharacter) == 0x000008, "Wrong alignment on MasterDataCache_GetCharacter");
static_assert(sizeof(MasterDataCache_GetCharacter) == 0x0000B0, "Wrong size on MasterDataCache_GetCharacter");
static_assert(offsetof(MasterDataCache_GetCharacter, Code) == 0x000000, "Member 'MasterDataCache_GetCharacter::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetCharacter, MasterData) == 0x000008, "Member 'MasterDataCache_GetCharacter::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetConfigValue
// 0x0008 (0x0008 - 0x0000)
struct MasterDataCache_GetConfigValue final
{
public:
	EConfigKeyValueEkey                           Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetConfigValue) == 0x000004, "Wrong alignment on MasterDataCache_GetConfigValue");
static_assert(sizeof(MasterDataCache_GetConfigValue) == 0x000008, "Wrong size on MasterDataCache_GetConfigValue");
static_assert(offsetof(MasterDataCache_GetConfigValue, Key) == 0x000000, "Member 'MasterDataCache_GetConfigValue::Key' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetConfigValue, ReturnValue) == 0x000004, "Member 'MasterDataCache_GetConfigValue::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetCurrency
// 0x0070 (0x0070 - 0x0000)
struct MasterDataCache_GetCurrency final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataCurrency                    MasterData;                                        // 0x0008(0x0068)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetCurrency) == 0x000008, "Wrong alignment on MasterDataCache_GetCurrency");
static_assert(sizeof(MasterDataCache_GetCurrency) == 0x000070, "Wrong size on MasterDataCache_GetCurrency");
static_assert(offsetof(MasterDataCache_GetCurrency, Code) == 0x000000, "Member 'MasterDataCache_GetCurrency::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetCurrency, MasterData) == 0x000008, "Member 'MasterDataCache_GetCurrency::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetCurrencyCode
// 0x0008 (0x0008 - 0x0000)
struct MasterDataCache_GetCurrencyCode final
{
public:
	ECurrencyType                                 Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetCurrencyCode) == 0x000004, "Wrong alignment on MasterDataCache_GetCurrencyCode");
static_assert(sizeof(MasterDataCache_GetCurrencyCode) == 0x000008, "Wrong size on MasterDataCache_GetCurrencyCode");
static_assert(offsetof(MasterDataCache_GetCurrencyCode, Type) == 0x000000, "Member 'MasterDataCache_GetCurrencyCode::Type' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetCurrencyCode, ReturnValue) == 0x000004, "Member 'MasterDataCache_GetCurrencyCode::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetCustomizeCostume
// 0x00A8 (0x00A8 - 0x0000)
struct MasterDataCache_GetCustomizeCostume final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataCustomizeCostume            MasterData;                                        // 0x0008(0x00A0)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetCustomizeCostume) == 0x000008, "Wrong alignment on MasterDataCache_GetCustomizeCostume");
static_assert(sizeof(MasterDataCache_GetCustomizeCostume) == 0x0000A8, "Wrong size on MasterDataCache_GetCustomizeCostume");
static_assert(offsetof(MasterDataCache_GetCustomizeCostume, Code) == 0x000000, "Member 'MasterDataCache_GetCustomizeCostume::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetCustomizeCostume, MasterData) == 0x000008, "Member 'MasterDataCache_GetCustomizeCostume::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetCustomizeEmote
// 0x0080 (0x0080 - 0x0000)
struct MasterDataCache_GetCustomizeEmote final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataCustomizeEmote              MasterData;                                        // 0x0008(0x0078)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetCustomizeEmote) == 0x000008, "Wrong alignment on MasterDataCache_GetCustomizeEmote");
static_assert(sizeof(MasterDataCache_GetCustomizeEmote) == 0x000080, "Wrong size on MasterDataCache_GetCustomizeEmote");
static_assert(offsetof(MasterDataCache_GetCustomizeEmote, Code) == 0x000000, "Member 'MasterDataCache_GetCustomizeEmote::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetCustomizeEmote, MasterData) == 0x000008, "Member 'MasterDataCache_GetCustomizeEmote::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetCustomizeVoice
// 0x0088 (0x0088 - 0x0000)
struct MasterDataCache_GetCustomizeVoice final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataCustomizeVoice              MasterData;                                        // 0x0008(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetCustomizeVoice) == 0x000008, "Wrong alignment on MasterDataCache_GetCustomizeVoice");
static_assert(sizeof(MasterDataCache_GetCustomizeVoice) == 0x000088, "Wrong size on MasterDataCache_GetCustomizeVoice");
static_assert(offsetof(MasterDataCache_GetCustomizeVoice, Code) == 0x000000, "Member 'MasterDataCache_GetCustomizeVoice::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetCustomizeVoice, MasterData) == 0x000008, "Member 'MasterDataCache_GetCustomizeVoice::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetDedicatedVoice
// 0x0028 (0x0028 - 0x0000)
struct MasterDataCache_GetDedicatedVoice final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataDedicatedVoice              MasterData;                                        // 0x0008(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetDedicatedVoice) == 0x000008, "Wrong alignment on MasterDataCache_GetDedicatedVoice");
static_assert(sizeof(MasterDataCache_GetDedicatedVoice) == 0x000028, "Wrong size on MasterDataCache_GetDedicatedVoice");
static_assert(offsetof(MasterDataCache_GetDedicatedVoice, Code) == 0x000000, "Member 'MasterDataCache_GetDedicatedVoice::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetDedicatedVoice, MasterData) == 0x000008, "Member 'MasterDataCache_GetDedicatedVoice::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetDefaultEquipSet
// 0x0048 (0x0048 - 0x0000)
struct MasterDataCache_GetDefaultEquipSet final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataDefaultEquipSet             MasterData;                                        // 0x0008(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetDefaultEquipSet) == 0x000008, "Wrong alignment on MasterDataCache_GetDefaultEquipSet");
static_assert(sizeof(MasterDataCache_GetDefaultEquipSet) == 0x000048, "Wrong size on MasterDataCache_GetDefaultEquipSet");
static_assert(offsetof(MasterDataCache_GetDefaultEquipSet, Code) == 0x000000, "Member 'MasterDataCache_GetDefaultEquipSet::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetDefaultEquipSet, MasterData) == 0x000008, "Member 'MasterDataCache_GetDefaultEquipSet::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetEmblem
// 0x0058 (0x0058 - 0x0000)
struct MasterDataCache_GetEmblem final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataEmblem                      MasterData;                                        // 0x0008(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetEmblem) == 0x000008, "Wrong alignment on MasterDataCache_GetEmblem");
static_assert(sizeof(MasterDataCache_GetEmblem) == 0x000058, "Wrong size on MasterDataCache_GetEmblem");
static_assert(offsetof(MasterDataCache_GetEmblem, Code) == 0x000000, "Member 'MasterDataCache_GetEmblem::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetEmblem, MasterData) == 0x000008, "Member 'MasterDataCache_GetEmblem::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetEvent
// 0x0090 (0x0090 - 0x0000)
struct MasterDataCache_GetEvent final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataEvent                       MasterData;                                        // 0x0008(0x0088)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetEvent) == 0x000008, "Wrong alignment on MasterDataCache_GetEvent");
static_assert(sizeof(MasterDataCache_GetEvent) == 0x000090, "Wrong size on MasterDataCache_GetEvent");
static_assert(offsetof(MasterDataCache_GetEvent, Code) == 0x000000, "Member 'MasterDataCache_GetEvent::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetEvent, MasterData) == 0x000008, "Member 'MasterDataCache_GetEvent::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetGallery
// 0x0090 (0x0090 - 0x0000)
struct MasterDataCache_GetGallery final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataGallery                     MasterData;                                        // 0x0008(0x0088)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetGallery) == 0x000008, "Wrong alignment on MasterDataCache_GetGallery");
static_assert(sizeof(MasterDataCache_GetGallery) == 0x000090, "Wrong size on MasterDataCache_GetGallery");
static_assert(offsetof(MasterDataCache_GetGallery, Code) == 0x000000, "Member 'MasterDataCache_GetGallery::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetGallery, MasterData) == 0x000008, "Member 'MasterDataCache_GetGallery::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetGameMode
// 0x0050 (0x0050 - 0x0000)
struct MasterDataCache_GetGameMode final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataGameMode                    MasterData;                                        // 0x0008(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetGameMode) == 0x000008, "Wrong alignment on MasterDataCache_GetGameMode");
static_assert(sizeof(MasterDataCache_GetGameMode) == 0x000050, "Wrong size on MasterDataCache_GetGameMode");
static_assert(offsetof(MasterDataCache_GetGameMode, Code) == 0x000000, "Member 'MasterDataCache_GetGameMode::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetGameMode, MasterData) == 0x000008, "Member 'MasterDataCache_GetGameMode::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetGmDisplayName
// 0x0050 (0x0050 - 0x0000)
struct MasterDataCache_GetGmDisplayName final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataGameMode                    MasterData;                                        // 0x0008(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetGmDisplayName) == 0x000008, "Wrong alignment on MasterDataCache_GetGmDisplayName");
static_assert(sizeof(MasterDataCache_GetGmDisplayName) == 0x000050, "Wrong size on MasterDataCache_GetGmDisplayName");
static_assert(offsetof(MasterDataCache_GetGmDisplayName, Code) == 0x000000, "Member 'MasterDataCache_GetGmDisplayName::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetGmDisplayName, MasterData) == 0x000008, "Member 'MasterDataCache_GetGmDisplayName::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetGuildEmblem
// 0x0028 (0x0028 - 0x0000)
struct MasterDataCache_GetGuildEmblem final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataGuildEmblem                 MasterData;                                        // 0x0008(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetGuildEmblem) == 0x000008, "Wrong alignment on MasterDataCache_GetGuildEmblem");
static_assert(sizeof(MasterDataCache_GetGuildEmblem) == 0x000028, "Wrong size on MasterDataCache_GetGuildEmblem");
static_assert(offsetof(MasterDataCache_GetGuildEmblem, Code) == 0x000000, "Member 'MasterDataCache_GetGuildEmblem::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetGuildEmblem, MasterData) == 0x000008, "Member 'MasterDataCache_GetGuildEmblem::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetGuildInstitution
// 0x0030 (0x0030 - 0x0000)
struct MasterDataCache_GetGuildInstitution final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataGuildInstitution            MasterData;                                        // 0x0008(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetGuildInstitution) == 0x000008, "Wrong alignment on MasterDataCache_GetGuildInstitution");
static_assert(sizeof(MasterDataCache_GetGuildInstitution) == 0x000030, "Wrong size on MasterDataCache_GetGuildInstitution");
static_assert(offsetof(MasterDataCache_GetGuildInstitution, Code) == 0x000000, "Member 'MasterDataCache_GetGuildInstitution::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetGuildInstitution, MasterData) == 0x000008, "Member 'MasterDataCache_GetGuildInstitution::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetGuildLeague
// 0x0040 (0x0040 - 0x0000)
struct MasterDataCache_GetGuildLeague final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataMGuildLeagues               MasterData;                                        // 0x0008(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetGuildLeague) == 0x000008, "Wrong alignment on MasterDataCache_GetGuildLeague");
static_assert(sizeof(MasterDataCache_GetGuildLeague) == 0x000040, "Wrong size on MasterDataCache_GetGuildLeague");
static_assert(offsetof(MasterDataCache_GetGuildLeague, Code) == 0x000000, "Member 'MasterDataCache_GetGuildLeague::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetGuildLeague, MasterData) == 0x000008, "Member 'MasterDataCache_GetGuildLeague::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetGuildLevel
// 0x0028 (0x0028 - 0x0000)
struct MasterDataCache_GetGuildLevel final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataGuildLevel                  MasterData;                                        // 0x0008(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetGuildLevel) == 0x000008, "Wrong alignment on MasterDataCache_GetGuildLevel");
static_assert(sizeof(MasterDataCache_GetGuildLevel) == 0x000028, "Wrong size on MasterDataCache_GetGuildLevel");
static_assert(offsetof(MasterDataCache_GetGuildLevel, Code) == 0x000000, "Member 'MasterDataCache_GetGuildLevel::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetGuildLevel, MasterData) == 0x000008, "Member 'MasterDataCache_GetGuildLevel::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetItemCategory
// 0x0038 (0x0038 - 0x0000)
struct MasterDataCache_GetItemCategory final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataItemCategory                MasterData;                                        // 0x0008(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetItemCategory) == 0x000008, "Wrong alignment on MasterDataCache_GetItemCategory");
static_assert(sizeof(MasterDataCache_GetItemCategory) == 0x000038, "Wrong size on MasterDataCache_GetItemCategory");
static_assert(offsetof(MasterDataCache_GetItemCategory, Code) == 0x000000, "Member 'MasterDataCache_GetItemCategory::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetItemCategory, MasterData) == 0x000008, "Member 'MasterDataCache_GetItemCategory::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetLoginBonus
// 0x0060 (0x0060 - 0x0000)
struct MasterDataCache_GetLoginBonus final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataLoginBonus                  MasterData;                                        // 0x0008(0x0058)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetLoginBonus) == 0x000008, "Wrong alignment on MasterDataCache_GetLoginBonus");
static_assert(sizeof(MasterDataCache_GetLoginBonus) == 0x000060, "Wrong size on MasterDataCache_GetLoginBonus");
static_assert(offsetof(MasterDataCache_GetLoginBonus, Code) == 0x000000, "Member 'MasterDataCache_GetLoginBonus::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetLoginBonus, MasterData) == 0x000008, "Member 'MasterDataCache_GetLoginBonus::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetLottery
// 0x0088 (0x0088 - 0x0000)
struct MasterDataCache_GetLottery final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataLottery                     MasterData;                                        // 0x0008(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetLottery) == 0x000008, "Wrong alignment on MasterDataCache_GetLottery");
static_assert(sizeof(MasterDataCache_GetLottery) == 0x000088, "Wrong size on MasterDataCache_GetLottery");
static_assert(offsetof(MasterDataCache_GetLottery, Code) == 0x000000, "Member 'MasterDataCache_GetLottery::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetLottery, MasterData) == 0x000008, "Member 'MasterDataCache_GetLottery::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetMission
// 0x00B8 (0x00B8 - 0x0000)
struct MasterDataCache_GetMission final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataMission                     MasterData;                                        // 0x0008(0x00B0)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetMission) == 0x000008, "Wrong alignment on MasterDataCache_GetMission");
static_assert(sizeof(MasterDataCache_GetMission) == 0x0000B8, "Wrong size on MasterDataCache_GetMission");
static_assert(offsetof(MasterDataCache_GetMission, Code) == 0x000000, "Member 'MasterDataCache_GetMission::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetMission, MasterData) == 0x000008, "Member 'MasterDataCache_GetMission::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetMissionPattern
// 0x0030 (0x0030 - 0x0000)
struct MasterDataCache_GetMissionPattern final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataMissionPattern              MasterData;                                        // 0x0008(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetMissionPattern) == 0x000008, "Wrong alignment on MasterDataCache_GetMissionPattern");
static_assert(sizeof(MasterDataCache_GetMissionPattern) == 0x000030, "Wrong size on MasterDataCache_GetMissionPattern");
static_assert(offsetof(MasterDataCache_GetMissionPattern, Code) == 0x000000, "Member 'MasterDataCache_GetMissionPattern::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetMissionPattern, MasterData) == 0x000008, "Member 'MasterDataCache_GetMissionPattern::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetMissionStar
// 0x0050 (0x0050 - 0x0000)
struct MasterDataCache_GetMissionStar final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataMissionStar                 MasterData;                                        // 0x0008(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetMissionStar) == 0x000008, "Wrong alignment on MasterDataCache_GetMissionStar");
static_assert(sizeof(MasterDataCache_GetMissionStar) == 0x000050, "Wrong size on MasterDataCache_GetMissionStar");
static_assert(offsetof(MasterDataCache_GetMissionStar, Code) == 0x000000, "Member 'MasterDataCache_GetMissionStar::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetMissionStar, MasterData) == 0x000008, "Member 'MasterDataCache_GetMissionStar::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetMLootboxPayment
// 0x0050 (0x0050 - 0x0000)
struct MasterDataCache_GetMLootboxPayment final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataMLootboxPayment             MasterData;                                        // 0x0008(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetMLootboxPayment) == 0x000008, "Wrong alignment on MasterDataCache_GetMLootboxPayment");
static_assert(sizeof(MasterDataCache_GetMLootboxPayment) == 0x000050, "Wrong size on MasterDataCache_GetMLootboxPayment");
static_assert(offsetof(MasterDataCache_GetMLootboxPayment, Code) == 0x000000, "Member 'MasterDataCache_GetMLootboxPayment::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetMLootboxPayment, MasterData) == 0x000008, "Member 'MasterDataCache_GetMLootboxPayment::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetMRandomItemWin
// 0x0050 (0x0050 - 0x0000)
struct MasterDataCache_GetMRandomItemWin final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataMRandomItemWin              MasterData;                                        // 0x0008(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetMRandomItemWin) == 0x000008, "Wrong alignment on MasterDataCache_GetMRandomItemWin");
static_assert(sizeof(MasterDataCache_GetMRandomItemWin) == 0x000050, "Wrong size on MasterDataCache_GetMRandomItemWin");
static_assert(offsetof(MasterDataCache_GetMRandomItemWin, Code) == 0x000000, "Member 'MasterDataCache_GetMRandomItemWin::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetMRandomItemWin, MasterData) == 0x000008, "Member 'MasterDataCache_GetMRandomItemWin::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetMRanking
// 0x0060 (0x0060 - 0x0000)
struct MasterDataCache_GetMRanking final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataMRanking                    MasterData;                                        // 0x0008(0x0058)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetMRanking) == 0x000008, "Wrong alignment on MasterDataCache_GetMRanking");
static_assert(sizeof(MasterDataCache_GetMRanking) == 0x000060, "Wrong size on MasterDataCache_GetMRanking");
static_assert(offsetof(MasterDataCache_GetMRanking, Code) == 0x000000, "Member 'MasterDataCache_GetMRanking::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetMRanking, MasterData) == 0x000008, "Member 'MasterDataCache_GetMRanking::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetMSpecialEffect
// 0x0048 (0x0048 - 0x0000)
struct MasterDataCache_GetMSpecialEffect final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataMSpecialEffect              MasterData;                                        // 0x0008(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetMSpecialEffect) == 0x000008, "Wrong alignment on MasterDataCache_GetMSpecialEffect");
static_assert(sizeof(MasterDataCache_GetMSpecialEffect) == 0x000048, "Wrong size on MasterDataCache_GetMSpecialEffect");
static_assert(offsetof(MasterDataCache_GetMSpecialEffect, Code) == 0x000000, "Member 'MasterDataCache_GetMSpecialEffect::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetMSpecialEffect, MasterData) == 0x000008, "Member 'MasterDataCache_GetMSpecialEffect::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetMyAdMessage
// 0x0030 (0x0030 - 0x0000)
struct MasterDataCache_GetMyAdMessage final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataMyAdMessage                 MasterData;                                        // 0x0008(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetMyAdMessage) == 0x000008, "Wrong alignment on MasterDataCache_GetMyAdMessage");
static_assert(sizeof(MasterDataCache_GetMyAdMessage) == 0x000030, "Wrong size on MasterDataCache_GetMyAdMessage");
static_assert(offsetof(MasterDataCache_GetMyAdMessage, Code) == 0x000000, "Member 'MasterDataCache_GetMyAdMessage::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetMyAdMessage, MasterData) == 0x000008, "Member 'MasterDataCache_GetMyAdMessage::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetMyAdParts
// 0x0050 (0x0050 - 0x0000)
struct MasterDataCache_GetMyAdParts final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataMyAdParts                   MasterData;                                        // 0x0008(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetMyAdParts) == 0x000008, "Wrong alignment on MasterDataCache_GetMyAdParts");
static_assert(sizeof(MasterDataCache_GetMyAdParts) == 0x000050, "Wrong size on MasterDataCache_GetMyAdParts");
static_assert(offsetof(MasterDataCache_GetMyAdParts, Code) == 0x000000, "Member 'MasterDataCache_GetMyAdParts::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetMyAdParts, MasterData) == 0x000008, "Member 'MasterDataCache_GetMyAdParts::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetPack
// 0x0050 (0x0050 - 0x0000)
struct MasterDataCache_GetPack final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataPack                        MasterData;                                        // 0x0008(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetPack) == 0x000008, "Wrong alignment on MasterDataCache_GetPack");
static_assert(sizeof(MasterDataCache_GetPack) == 0x000050, "Wrong size on MasterDataCache_GetPack");
static_assert(offsetof(MasterDataCache_GetPack, Code) == 0x000000, "Member 'MasterDataCache_GetPack::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetPack, MasterData) == 0x000008, "Member 'MasterDataCache_GetPack::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetPackItem
// 0x0058 (0x0058 - 0x0000)
struct MasterDataCache_GetPackItem final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataPackItem                    MasterData;                                        // 0x0008(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetPackItem) == 0x000008, "Wrong alignment on MasterDataCache_GetPackItem");
static_assert(sizeof(MasterDataCache_GetPackItem) == 0x000058, "Wrong size on MasterDataCache_GetPackItem");
static_assert(offsetof(MasterDataCache_GetPackItem, Code) == 0x000000, "Member 'MasterDataCache_GetPackItem::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetPackItem, MasterData) == 0x000008, "Member 'MasterDataCache_GetPackItem::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetPenaltyPoint
// 0x0030 (0x0030 - 0x0000)
struct MasterDataCache_GetPenaltyPoint final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataPenaltyPoint                MasterData;                                        // 0x0008(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetPenaltyPoint) == 0x000008, "Wrong alignment on MasterDataCache_GetPenaltyPoint");
static_assert(sizeof(MasterDataCache_GetPenaltyPoint) == 0x000030, "Wrong size on MasterDataCache_GetPenaltyPoint");
static_assert(offsetof(MasterDataCache_GetPenaltyPoint, Code) == 0x000000, "Member 'MasterDataCache_GetPenaltyPoint::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetPenaltyPoint, MasterData) == 0x000008, "Member 'MasterDataCache_GetPenaltyPoint::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetPlayerExp
// 0x0018 (0x0018 - 0x0000)
struct MasterDataCache_GetPlayerExp final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataPlayerExp                   MasterData;                                        // 0x0008(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetPlayerExp) == 0x000008, "Wrong alignment on MasterDataCache_GetPlayerExp");
static_assert(sizeof(MasterDataCache_GetPlayerExp) == 0x000018, "Wrong size on MasterDataCache_GetPlayerExp");
static_assert(offsetof(MasterDataCache_GetPlayerExp, Code) == 0x000000, "Member 'MasterDataCache_GetPlayerExp::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetPlayerExp, MasterData) == 0x000008, "Member 'MasterDataCache_GetPlayerExp::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetPlayMenuMenulist
// 0x0050 (0x0050 - 0x0000)
struct MasterDataCache_GetPlayMenuMenulist final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataPlayMenuMenulist            MasterData;                                        // 0x0008(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetPlayMenuMenulist) == 0x000008, "Wrong alignment on MasterDataCache_GetPlayMenuMenulist");
static_assert(sizeof(MasterDataCache_GetPlayMenuMenulist) == 0x000050, "Wrong size on MasterDataCache_GetPlayMenuMenulist");
static_assert(offsetof(MasterDataCache_GetPlayMenuMenulist, Code) == 0x000000, "Member 'MasterDataCache_GetPlayMenuMenulist::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetPlayMenuMenulist, MasterData) == 0x000008, "Member 'MasterDataCache_GetPlayMenuMenulist::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetPlayMode
// 0x0088 (0x0088 - 0x0000)
struct MasterDataCache_GetPlayMode final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataPlayMode                    MasterData;                                        // 0x0008(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetPlayMode) == 0x000008, "Wrong alignment on MasterDataCache_GetPlayMode");
static_assert(sizeof(MasterDataCache_GetPlayMode) == 0x000088, "Wrong size on MasterDataCache_GetPlayMode");
static_assert(offsetof(MasterDataCache_GetPlayMode, Code) == 0x000000, "Member 'MasterDataCache_GetPlayMode::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetPlayMode, MasterData) == 0x000008, "Member 'MasterDataCache_GetPlayMode::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetRankExp
// 0x0040 (0x0040 - 0x0000)
struct MasterDataCache_GetRankExp final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataRankExp                     MasterData;                                        // 0x0008(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetRankExp) == 0x000008, "Wrong alignment on MasterDataCache_GetRankExp");
static_assert(sizeof(MasterDataCache_GetRankExp) == 0x000040, "Wrong size on MasterDataCache_GetRankExp");
static_assert(offsetof(MasterDataCache_GetRankExp, Code) == 0x000000, "Member 'MasterDataCache_GetRankExp::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetRankExp, MasterData) == 0x000008, "Member 'MasterDataCache_GetRankExp::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetRankPoint
// 0x0048 (0x0048 - 0x0000)
struct MasterDataCache_GetRankPoint final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataRankPoint                   MasterData;                                        // 0x0008(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetRankPoint) == 0x000008, "Wrong alignment on MasterDataCache_GetRankPoint");
static_assert(sizeof(MasterDataCache_GetRankPoint) == 0x000048, "Wrong size on MasterDataCache_GetRankPoint");
static_assert(offsetof(MasterDataCache_GetRankPoint, Code) == 0x000000, "Member 'MasterDataCache_GetRankPoint::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetRankPoint, MasterData) == 0x000008, "Member 'MasterDataCache_GetRankPoint::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetRecommendNotice
// 0x0040 (0x0040 - 0x0000)
struct MasterDataCache_GetRecommendNotice final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataRecommendNotice             MasterData;                                        // 0x0008(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetRecommendNotice) == 0x000008, "Wrong alignment on MasterDataCache_GetRecommendNotice");
static_assert(sizeof(MasterDataCache_GetRecommendNotice) == 0x000040, "Wrong size on MasterDataCache_GetRecommendNotice");
static_assert(offsetof(MasterDataCache_GetRecommendNotice, Code) == 0x000000, "Member 'MasterDataCache_GetRecommendNotice::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetRecommendNotice, MasterData) == 0x000008, "Member 'MasterDataCache_GetRecommendNotice::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetScore
// 0x0068 (0x0068 - 0x0000)
struct MasterDataCache_GetScore final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataScore                       MasterData;                                        // 0x0008(0x0060)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetScore) == 0x000008, "Wrong alignment on MasterDataCache_GetScore");
static_assert(sizeof(MasterDataCache_GetScore) == 0x000068, "Wrong size on MasterDataCache_GetScore");
static_assert(offsetof(MasterDataCache_GetScore, Code) == 0x000000, "Member 'MasterDataCache_GetScore::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetScore, MasterData) == 0x000008, "Member 'MasterDataCache_GetScore::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetScoreRank
// 0x0020 (0x0020 - 0x0000)
struct MasterDataCache_GetScoreRank final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataScoreRank                   MasterData;                                        // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetScoreRank) == 0x000008, "Wrong alignment on MasterDataCache_GetScoreRank");
static_assert(sizeof(MasterDataCache_GetScoreRank) == 0x000020, "Wrong size on MasterDataCache_GetScoreRank");
static_assert(offsetof(MasterDataCache_GetScoreRank, Code) == 0x000000, "Member 'MasterDataCache_GetScoreRank::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetScoreRank, MasterData) == 0x000008, "Member 'MasterDataCache_GetScoreRank::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetScreenId
// 0x0008 (0x0008 - 0x0000)
struct MasterDataCache_GetScreenId final
{
public:
	EScreenName                                   Name_0;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetScreenId) == 0x000004, "Wrong alignment on MasterDataCache_GetScreenId");
static_assert(sizeof(MasterDataCache_GetScreenId) == 0x000008, "Wrong size on MasterDataCache_GetScreenId");
static_assert(offsetof(MasterDataCache_GetScreenId, Name_0) == 0x000000, "Member 'MasterDataCache_GetScreenId::Name_0' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetScreenId, ReturnValue) == 0x000004, "Member 'MasterDataCache_GetScreenId::ReturnValue' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetSeason
// 0x0048 (0x0048 - 0x0000)
struct MasterDataCache_GetSeason final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataSeason                      MasterData;                                        // 0x0008(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetSeason) == 0x000008, "Wrong alignment on MasterDataCache_GetSeason");
static_assert(sizeof(MasterDataCache_GetSeason) == 0x000048, "Wrong size on MasterDataCache_GetSeason");
static_assert(offsetof(MasterDataCache_GetSeason, Code) == 0x000000, "Member 'MasterDataCache_GetSeason::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetSeason, MasterData) == 0x000008, "Member 'MasterDataCache_GetSeason::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetShop
// 0x0038 (0x0038 - 0x0000)
struct MasterDataCache_GetShop final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataShop                        MasterData;                                        // 0x0008(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetShop) == 0x000008, "Wrong alignment on MasterDataCache_GetShop");
static_assert(sizeof(MasterDataCache_GetShop) == 0x000038, "Wrong size on MasterDataCache_GetShop");
static_assert(offsetof(MasterDataCache_GetShop, Code) == 0x000000, "Member 'MasterDataCache_GetShop::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetShop, MasterData) == 0x000008, "Member 'MasterDataCache_GetShop::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetShopItem
// 0x00B0 (0x00B0 - 0x0000)
struct MasterDataCache_GetShopItem final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataShopItem                    MasterData;                                        // 0x0008(0x00A8)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetShopItem) == 0x000008, "Wrong alignment on MasterDataCache_GetShopItem");
static_assert(sizeof(MasterDataCache_GetShopItem) == 0x0000B0, "Wrong size on MasterDataCache_GetShopItem");
static_assert(offsetof(MasterDataCache_GetShopItem, Code) == 0x000000, "Member 'MasterDataCache_GetShopItem::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetShopItem, MasterData) == 0x000008, "Member 'MasterDataCache_GetShopItem::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetSpecialLicense
// 0x0038 (0x0038 - 0x0000)
struct MasterDataCache_GetSpecialLicense final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataSpecialLicense              MasterData;                                        // 0x0008(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetSpecialLicense) == 0x000008, "Wrong alignment on MasterDataCache_GetSpecialLicense");
static_assert(sizeof(MasterDataCache_GetSpecialLicense) == 0x000038, "Wrong size on MasterDataCache_GetSpecialLicense");
static_assert(offsetof(MasterDataCache_GetSpecialLicense, Code) == 0x000000, "Member 'MasterDataCache_GetSpecialLicense::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetSpecialLicense, MasterData) == 0x000008, "Member 'MasterDataCache_GetSpecialLicense::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetTipsText
// 0x0030 (0x0030 - 0x0000)
struct MasterDataCache_GetTipsText final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataTipsText                    MasterData;                                        // 0x0008(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetTipsText) == 0x000008, "Wrong alignment on MasterDataCache_GetTipsText");
static_assert(sizeof(MasterDataCache_GetTipsText) == 0x000030, "Wrong size on MasterDataCache_GetTipsText");
static_assert(offsetof(MasterDataCache_GetTipsText, Code) == 0x000000, "Member 'MasterDataCache_GetTipsText::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetTipsText, MasterData) == 0x000008, "Member 'MasterDataCache_GetTipsText::MasterData' has a wrong offset!");

// Function BackendSubsystem.MasterDataCache.GetVariation
// 0x0060 (0x0060 - 0x0000)
struct MasterDataCache_GetVariation final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMasterDataVariation                   MasterData;                                        // 0x0008(0x0058)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MasterDataCache_GetVariation) == 0x000008, "Wrong alignment on MasterDataCache_GetVariation");
static_assert(sizeof(MasterDataCache_GetVariation) == 0x000060, "Wrong size on MasterDataCache_GetVariation");
static_assert(offsetof(MasterDataCache_GetVariation, Code) == 0x000000, "Member 'MasterDataCache_GetVariation::Code' has a wrong offset!");
static_assert(offsetof(MasterDataCache_GetVariation, MasterData) == 0x000008, "Member 'MasterDataCache_GetVariation::MasterData' has a wrong offset!");

}

