#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CosmosApi

#include "Basic.hpp"


namespace SDK
{

// Enum CosmosApi.ECosmosProtocolResponseCode
// NumValues: 0x0018
enum class ECosmosProtocolResponseCode : uint32
{
	Succeed                                  = 0,
	Failed                                   = 1,
	NotConnected                             = 2001,
	Disconnected                             = 2002,
	ConnectionError                          = 2003,
	E_OK                                     = 0,
	E_NG                                     = 1,
	E_MAINTENANCE                            = 2,
	E_PARAM                                  = 1001,
	E_ROOM_EXIST                             = 10001,
	E_ROOM_MEMBER                            = 10002,
	E_ROOM_OVER                              = 10003,
	E_SQUAD_EXIST                            = 10051,
	E_SQUAD_MAXNUM                           = 10052,
	E_SQUAD_MATCHING_STARTED                 = 10053,
	E_SQUAD_MATCHING_STARTED_JOIN            = 10054,
	E_CUSTOM_ROOM_NOT_EXIST                  = 20001,
	E_CUSTOM_ROOM_PROTOCOL_NO_AUTH           = 20002,
	E_CUSTOM_ROOM_IN_BATTLE                  = 20003,
	E_CUSTOM_ROOM_FAILED_MATCHING            = 20004,
	E_CUSTOM_ROOM_ALREADY_EXIST              = 20005,
	E_CUSTOM_ROOM_ENTRY_LIMIT                = 20006,
	E_CUSTOM_ROOM_NOT_ABLE_TRANSITION        = 20007,
	ECosmosProtocolResponseCode_MAX          = 20008,
};

// Enum CosmosApi.ESquadEventId
// NumValues: 0x0022
enum class ESquadEventId : uint8
{
	NoOp                                     = 0,
	Unknown                                  = 1,
	Initialized                              = 2,
	SquadCreated                             = 3,
	SquadJoined                              = 4,
	SquadLeft                                = 5,
	SquadDissolved                           = 6,
	SquadDisolved                            = 6,
	SquadKicked                              = 7,
	SquadFound                               = 8,
	FindSquadCanceled                        = 9,
	FindSquadCanceld                         = 9,
	SquadDataUpdated                         = 10,
	SquadMemberDataUpdated                   = 11,
	SquadMatchingCompleted                   = 12,
	SquadMatchingCanceled                    = 13,
	SquadMatchingCanceld                     = 13,
	ConnectMatchingServerResponse            = 14,
	QuitGameResponse                         = 15,
	StartSquadMatchingResponse               = 16,
	CancelSquadMatchingResponse              = 17,
	FindSquadResponse                        = 18,
	CancelFindSquadResponse                  = 19,
	GetSquadMemberDataResponse               = 20,
	SetSquadMemberDataResponse               = 21,
	KickSquadMemberResponse                  = 22,
	ChangeSquadPlayModeResponse              = 23,
	SendSquadChatMessageResponse             = 24,
	HeartbeatResponse                        = 25,
	HeartbeatNotify                          = 26,
	JoinMatchingSquadResponse                = 27,
	AppealResponse                           = 28,
	AppealNotify                             = 29,
	ESquadEventId_MAX                        = 30,
};

// Enum CosmosApi.ECustomRoomEventId
// NumValues: 0x001C
enum class ECustomRoomEventId : uint8
{
	System                                   = 0,
	Initialized                              = 1,
	Error                                    = 2,
	UnknownProtocol                          = 3,
	SystemMax                                = 49,
	CreateCustomRoomResponse                 = 50,
	JoinCustomRoomResponse                   = 51,
	LeaveCustomRoomResponse                  = 52,
	SetCustomRoomSettingsResponse            = 53,
	ChangeCustomRoomSettingsNotify           = 54,
	GetCustomRoomDataResponse                = 55,
	ReadyCustomRoomResponse                  = 56,
	CustomRoomReadiedNotify                  = 57,
	SetCustomMemberDataResponse              = 58,
	GetCustomLobbyServerResponse             = 59,
	CustomLobbyServerNotify                  = 60,
	KickCustomRoomResponse                   = 61,
	CustomRoomKickedNotify                   = 62,
	FinishCustomGameResponse                 = 63,
	CustomGameDeletedNotify                  = 64,
	SendCustomSquadChatResponse              = 65,
	ReceiveCustomSquadChatNotify             = 66,
	SetCustomRoomMemberResponse              = 67,
	CancelCustomLobbyMatchingResponse        = 68,
	CustomLobbyMatchingCanceledNotify        = 69,
	AppealCustomSquadResponse                = 70,
	CustomSquadAppealedNotify                = 71,
	ECustomRoomEventId_MAX                   = 72,
};

// Enum CosmosApi.ENetSquadError
// NumValues: 0x0006
enum class ENetSquadError : uint16
{
	Succeed                                  = 0,
	Failed                                   = 1,
	NotConnected                             = 2001,
	Disconnected                             = 2002,
	ConnectionError                          = 2003,
	ENetSquadError_MAX                       = 2004,
};

// Enum CosmosApi.ENetSquadEventId
// NumValues: 0x0020
enum class ENetSquadEventId : uint8
{
	None                                     = 0,
	SquadCreated                             = 1,
	SquadJoined                              = 2,
	SquadLeft                                = 3,
	SquadDissolved                           = 4,
	SquadKicked                              = 5,
	SquadFound                               = 6,
	FindSquadCanceled                        = 7,
	FindSquadCanceld                         = 7,
	SquadDataUpdated                         = 8,
	SquadMemberDataUpdated                   = 9,
	SquadMatchingCompleted                   = 10,
	SquadMatchingCanceled                    = 11,
	SquadMatchingCanceld                     = 11,
	ConnectMatchingServerResponse            = 12,
	QuitGameResponse                         = 13,
	StartSquadMatchingResponse               = 14,
	CancelSquadMatchingResponse              = 15,
	FindSquadResponse                        = 16,
	CancelFindSquadResponse                  = 17,
	GetSquadMemberDataResponse               = 18,
	SetSquadMemberDataResponse               = 19,
	KickSquadMemberResponse                  = 20,
	ChangeSquadPlayModeResponse              = 21,
	HeartbeatResponse                        = 22,
	HeartbeatNotify                          = 23,
	SendSquadChatMessageResponse             = 24,
	ReceiveSquadChatMessage                  = 25,
	JoinMatchingSquadResponse                = 26,
	AppealResponse                           = 27,
	AppealNotify                             = 28,
	ENetSquadEventId_MAX                     = 29,
};

// Enum CosmosApi.ENetSocketCipherMode
// NumValues: 0x0004
enum class ENetSocketCipherMode : uint8
{
	None                                     = 0,
	ECB                                      = 1,
	CBC                                      = 2,
	ENetSocketCipherMode_MAX                 = 3,
};

// ScriptStruct CosmosApi.SquadEvent
// 0x0008 (0x0008 - 0x0000)
struct FSquadEvent final
{
public:
	ESquadEventId                                 EventId;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ECosmosProtocolResponseCode                   Status;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSquadEvent) == 0x000004, "Wrong alignment on FSquadEvent");
static_assert(sizeof(FSquadEvent) == 0x000008, "Wrong size on FSquadEvent");
static_assert(offsetof(FSquadEvent, EventId) == 0x000000, "Member 'FSquadEvent::EventId' has a wrong offset!");
static_assert(offsetof(FSquadEvent, Status) == 0x000004, "Member 'FSquadEvent::Status' has a wrong offset!");

// ScriptStruct CosmosApi.CosmosCustomSquadMemberData
// 0x0020 (0x0020 - 0x0000)
struct FCosmosCustomSquadMemberData final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserData;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosCustomSquadMemberData) == 0x000008, "Wrong alignment on FCosmosCustomSquadMemberData");
static_assert(sizeof(FCosmosCustomSquadMemberData) == 0x000020, "Wrong size on FCosmosCustomSquadMemberData");
static_assert(offsetof(FCosmosCustomSquadMemberData, UserId) == 0x000000, "Member 'FCosmosCustomSquadMemberData::UserId' has a wrong offset!");
static_assert(offsetof(FCosmosCustomSquadMemberData, UserData) == 0x000010, "Member 'FCosmosCustomSquadMemberData::UserData' has a wrong offset!");

// ScriptStruct CosmosApi.SquadChatEvent
// 0x0030 (0x0030 - 0x0000)
struct FSquadChatEvent final
{
public:
	class FString                                 SquadId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSquadChatEvent) == 0x000008, "Wrong alignment on FSquadChatEvent");
static_assert(sizeof(FSquadChatEvent) == 0x000030, "Wrong size on FSquadChatEvent");
static_assert(offsetof(FSquadChatEvent, SquadId) == 0x000000, "Member 'FSquadChatEvent::SquadId' has a wrong offset!");
static_assert(offsetof(FSquadChatEvent, UserId) == 0x000010, "Member 'FSquadChatEvent::UserId' has a wrong offset!");
static_assert(offsetof(FSquadChatEvent, Message) == 0x000020, "Member 'FSquadChatEvent::Message' has a wrong offset!");

// ScriptStruct CosmosApi.SquadAppealEvent
// 0x0020 (0x0020 - 0x0000)
struct FSquadAppealEvent final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSquadAppealEvent) == 0x000008, "Wrong alignment on FSquadAppealEvent");
static_assert(sizeof(FSquadAppealEvent) == 0x000020, "Wrong size on FSquadAppealEvent");
static_assert(offsetof(FSquadAppealEvent, UserId) == 0x000000, "Member 'FSquadAppealEvent::UserId' has a wrong offset!");
static_assert(offsetof(FSquadAppealEvent, Message) == 0x000010, "Member 'FSquadAppealEvent::Message' has a wrong offset!");

// ScriptStruct CosmosApi.CosmosCustomRoomSquadData
// 0x0018 (0x0018 - 0x0000)
struct FCosmosCustomRoomSquadData final
{
public:
	int32                                         CustomSquadNo;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosCustomSquadMemberData>   CustomSquadMember;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosCustomRoomSquadData) == 0x000008, "Wrong alignment on FCosmosCustomRoomSquadData");
static_assert(sizeof(FCosmosCustomRoomSquadData) == 0x000018, "Wrong size on FCosmosCustomRoomSquadData");
static_assert(offsetof(FCosmosCustomRoomSquadData, CustomSquadNo) == 0x000000, "Member 'FCosmosCustomRoomSquadData::CustomSquadNo' has a wrong offset!");
static_assert(offsetof(FCosmosCustomRoomSquadData, CustomSquadMember) == 0x000008, "Member 'FCosmosCustomRoomSquadData::CustomSquadMember' has a wrong offset!");

// ScriptStruct CosmosApi.CosmosChangeCustomRoomSettingsNotify
// 0x0060 (0x0060 - 0x0000)
struct FCosmosChangeCustomRoomSettingsNotify final
{
public:
	class FString                                 CustomRoomId;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomRoomData;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomRoomPlayMode;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosCustomRoomSquadData>     RoomSquadList;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCosmosCustomSquadMemberData>   RoomStandByUserList;                               // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 CustomRoomHostUser;                                // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsBattleReady;                                     // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCosmosChangeCustomRoomSettingsNotify) == 0x000008, "Wrong alignment on FCosmosChangeCustomRoomSettingsNotify");
static_assert(sizeof(FCosmosChangeCustomRoomSettingsNotify) == 0x000060, "Wrong size on FCosmosChangeCustomRoomSettingsNotify");
static_assert(offsetof(FCosmosChangeCustomRoomSettingsNotify, CustomRoomId) == 0x000000, "Member 'FCosmosChangeCustomRoomSettingsNotify::CustomRoomId' has a wrong offset!");
static_assert(offsetof(FCosmosChangeCustomRoomSettingsNotify, CustomRoomData) == 0x000010, "Member 'FCosmosChangeCustomRoomSettingsNotify::CustomRoomData' has a wrong offset!");
static_assert(offsetof(FCosmosChangeCustomRoomSettingsNotify, CustomRoomPlayMode) == 0x000020, "Member 'FCosmosChangeCustomRoomSettingsNotify::CustomRoomPlayMode' has a wrong offset!");
static_assert(offsetof(FCosmosChangeCustomRoomSettingsNotify, RoomSquadList) == 0x000028, "Member 'FCosmosChangeCustomRoomSettingsNotify::RoomSquadList' has a wrong offset!");
static_assert(offsetof(FCosmosChangeCustomRoomSettingsNotify, RoomStandByUserList) == 0x000038, "Member 'FCosmosChangeCustomRoomSettingsNotify::RoomStandByUserList' has a wrong offset!");
static_assert(offsetof(FCosmosChangeCustomRoomSettingsNotify, CustomRoomHostUser) == 0x000048, "Member 'FCosmosChangeCustomRoomSettingsNotify::CustomRoomHostUser' has a wrong offset!");
static_assert(offsetof(FCosmosChangeCustomRoomSettingsNotify, IsBattleReady) == 0x000058, "Member 'FCosmosChangeCustomRoomSettingsNotify::IsBattleReady' has a wrong offset!");

// ScriptStruct CosmosApi.CosmosGetCustomRoomDataResponse
// 0x0068 (0x0068 - 0x0000)
struct FCosmosGetCustomRoomDataResponse final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CustomRoomId;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomRoomData;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomRoomPlayMode;                                // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosCustomRoomSquadData>     RoomSquadList;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCosmosCustomSquadMemberData>   RoomStandByUserList;                               // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 CustomRoomHostUser;                                // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsBattleReady;                                     // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCosmosGetCustomRoomDataResponse) == 0x000008, "Wrong alignment on FCosmosGetCustomRoomDataResponse");
static_assert(sizeof(FCosmosGetCustomRoomDataResponse) == 0x000068, "Wrong size on FCosmosGetCustomRoomDataResponse");
static_assert(offsetof(FCosmosGetCustomRoomDataResponse, Status) == 0x000000, "Member 'FCosmosGetCustomRoomDataResponse::Status' has a wrong offset!");
static_assert(offsetof(FCosmosGetCustomRoomDataResponse, CustomRoomId) == 0x000008, "Member 'FCosmosGetCustomRoomDataResponse::CustomRoomId' has a wrong offset!");
static_assert(offsetof(FCosmosGetCustomRoomDataResponse, CustomRoomData) == 0x000018, "Member 'FCosmosGetCustomRoomDataResponse::CustomRoomData' has a wrong offset!");
static_assert(offsetof(FCosmosGetCustomRoomDataResponse, CustomRoomPlayMode) == 0x000028, "Member 'FCosmosGetCustomRoomDataResponse::CustomRoomPlayMode' has a wrong offset!");
static_assert(offsetof(FCosmosGetCustomRoomDataResponse, RoomSquadList) == 0x000030, "Member 'FCosmosGetCustomRoomDataResponse::RoomSquadList' has a wrong offset!");
static_assert(offsetof(FCosmosGetCustomRoomDataResponse, RoomStandByUserList) == 0x000040, "Member 'FCosmosGetCustomRoomDataResponse::RoomStandByUserList' has a wrong offset!");
static_assert(offsetof(FCosmosGetCustomRoomDataResponse, CustomRoomHostUser) == 0x000050, "Member 'FCosmosGetCustomRoomDataResponse::CustomRoomHostUser' has a wrong offset!");
static_assert(offsetof(FCosmosGetCustomRoomDataResponse, IsBattleReady) == 0x000060, "Member 'FCosmosGetCustomRoomDataResponse::IsBattleReady' has a wrong offset!");

// ScriptStruct CosmosApi.CosmosCustomRoomReadiedNotify
// 0x0028 (0x0028 - 0x0000)
struct FCosmosCustomRoomReadiedNotify final
{
public:
	class FString                                 CustomRoomData;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomRoomPlayMode;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosCustomRoomSquadData>     RoomSquadList;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosCustomRoomReadiedNotify) == 0x000008, "Wrong alignment on FCosmosCustomRoomReadiedNotify");
static_assert(sizeof(FCosmosCustomRoomReadiedNotify) == 0x000028, "Wrong size on FCosmosCustomRoomReadiedNotify");
static_assert(offsetof(FCosmosCustomRoomReadiedNotify, CustomRoomData) == 0x000000, "Member 'FCosmosCustomRoomReadiedNotify::CustomRoomData' has a wrong offset!");
static_assert(offsetof(FCosmosCustomRoomReadiedNotify, CustomRoomPlayMode) == 0x000010, "Member 'FCosmosCustomRoomReadiedNotify::CustomRoomPlayMode' has a wrong offset!");
static_assert(offsetof(FCosmosCustomRoomReadiedNotify, RoomSquadList) == 0x000018, "Member 'FCosmosCustomRoomReadiedNotify::RoomSquadList' has a wrong offset!");

// ScriptStruct CosmosApi.NetSquadUserData
// 0x0060 (0x0060 - 0x0000)
struct FNetSquadUserData final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Data;                                              // 0x0010(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetSquadUserData) == 0x000008, "Wrong alignment on FNetSquadUserData");
static_assert(sizeof(FNetSquadUserData) == 0x000060, "Wrong size on FNetSquadUserData");
static_assert(offsetof(FNetSquadUserData, DisplayName) == 0x000000, "Member 'FNetSquadUserData::DisplayName' has a wrong offset!");
static_assert(offsetof(FNetSquadUserData, Data) == 0x000010, "Member 'FNetSquadUserData::Data' has a wrong offset!");

// ScriptStruct CosmosApi.CosmosCustomLobbyServerNotify
// 0x0018 (0x0018 - 0x0000)
struct FCosmosCustomLobbyServerNotify final
{
public:
	class FString                                 BattleServerHost;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattleServerPort;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCosmosCustomLobbyServerNotify) == 0x000008, "Wrong alignment on FCosmosCustomLobbyServerNotify");
static_assert(sizeof(FCosmosCustomLobbyServerNotify) == 0x000018, "Wrong size on FCosmosCustomLobbyServerNotify");
static_assert(offsetof(FCosmosCustomLobbyServerNotify, BattleServerHost) == 0x000000, "Member 'FCosmosCustomLobbyServerNotify::BattleServerHost' has a wrong offset!");
static_assert(offsetof(FCosmosCustomLobbyServerNotify, BattleServerPort) == 0x000010, "Member 'FCosmosCustomLobbyServerNotify::BattleServerPort' has a wrong offset!");

// ScriptStruct CosmosApi.CosmosReceiveCustomSquadChatNotify
// 0x0020 (0x0020 - 0x0000)
struct FCosmosReceiveCustomSquadChatNotify final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosReceiveCustomSquadChatNotify) == 0x000008, "Wrong alignment on FCosmosReceiveCustomSquadChatNotify");
static_assert(sizeof(FCosmosReceiveCustomSquadChatNotify) == 0x000020, "Wrong size on FCosmosReceiveCustomSquadChatNotify");
static_assert(offsetof(FCosmosReceiveCustomSquadChatNotify, UserId) == 0x000000, "Member 'FCosmosReceiveCustomSquadChatNotify::UserId' has a wrong offset!");
static_assert(offsetof(FCosmosReceiveCustomSquadChatNotify, Message) == 0x000010, "Member 'FCosmosReceiveCustomSquadChatNotify::Message' has a wrong offset!");

// ScriptStruct CosmosApi.CosmosCustomSquadMember
// 0x0010 (0x0010 - 0x0000)
struct FCosmosCustomSquadMember final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosCustomSquadMember) == 0x000008, "Wrong alignment on FCosmosCustomSquadMember");
static_assert(sizeof(FCosmosCustomSquadMember) == 0x000010, "Wrong size on FCosmosCustomSquadMember");
static_assert(offsetof(FCosmosCustomSquadMember, UserId) == 0x000000, "Member 'FCosmosCustomSquadMember::UserId' has a wrong offset!");

// ScriptStruct CosmosApi.CosmosCustomRoomSquadList
// 0x0018 (0x0018 - 0x0000)
struct FCosmosCustomRoomSquadList final
{
public:
	int32                                         CustomSquadNo;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosCustomSquadMember>       CustomSquadMember;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosCustomRoomSquadList) == 0x000008, "Wrong alignment on FCosmosCustomRoomSquadList");
static_assert(sizeof(FCosmosCustomRoomSquadList) == 0x000018, "Wrong size on FCosmosCustomRoomSquadList");
static_assert(offsetof(FCosmosCustomRoomSquadList, CustomSquadNo) == 0x000000, "Member 'FCosmosCustomRoomSquadList::CustomSquadNo' has a wrong offset!");
static_assert(offsetof(FCosmosCustomRoomSquadList, CustomSquadMember) == 0x000008, "Member 'FCosmosCustomRoomSquadList::CustomSquadMember' has a wrong offset!");

// ScriptStruct CosmosApi.CosmosCustomSquadAppealedNotify
// 0x0020 (0x0020 - 0x0000)
struct FCosmosCustomSquadAppealedNotify final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Appeal;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosCustomSquadAppealedNotify) == 0x000008, "Wrong alignment on FCosmosCustomSquadAppealedNotify");
static_assert(sizeof(FCosmosCustomSquadAppealedNotify) == 0x000020, "Wrong size on FCosmosCustomSquadAppealedNotify");
static_assert(offsetof(FCosmosCustomSquadAppealedNotify, UserId) == 0x000000, "Member 'FCosmosCustomSquadAppealedNotify::UserId' has a wrong offset!");
static_assert(offsetof(FCosmosCustomSquadAppealedNotify, Appeal) == 0x000010, "Member 'FCosmosCustomSquadAppealedNotify::Appeal' has a wrong offset!");

// ScriptStruct CosmosApi.NetSquadSdpData
// 0x0050 (0x0050 - 0x0000)
struct FNetSquadSdpData final
{
public:
	TMap<class FString, class FString>            Data;                                              // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetSquadSdpData) == 0x000008, "Wrong alignment on FNetSquadSdpData");
static_assert(sizeof(FNetSquadSdpData) == 0x000050, "Wrong size on FNetSquadSdpData");
static_assert(offsetof(FNetSquadSdpData, Data) == 0x000000, "Member 'FNetSquadSdpData::Data' has a wrong offset!");

// ScriptStruct CosmosApi.NetSquadMemberData
// 0x00C0 (0x00C0 - 0x0000)
struct FNetSquadMemberData final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNetSquadUserData                      UserData;                                          // 0x0010(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FNetSquadSdpData                       SdpData;                                           // 0x0070(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetSquadMemberData) == 0x000008, "Wrong alignment on FNetSquadMemberData");
static_assert(sizeof(FNetSquadMemberData) == 0x0000C0, "Wrong size on FNetSquadMemberData");
static_assert(offsetof(FNetSquadMemberData, UserId) == 0x000000, "Member 'FNetSquadMemberData::UserId' has a wrong offset!");
static_assert(offsetof(FNetSquadMemberData, UserData) == 0x000010, "Member 'FNetSquadMemberData::UserData' has a wrong offset!");
static_assert(offsetof(FNetSquadMemberData, SdpData) == 0x000070, "Member 'FNetSquadMemberData::SdpData' has a wrong offset!");

// ScriptStruct CosmosApi.NetSquadData
// 0x0050 (0x0050 - 0x0000)
struct FNetSquadData final
{
public:
	TMap<class FString, class FString>            Data;                                              // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetSquadData) == 0x000008, "Wrong alignment on FNetSquadData");
static_assert(sizeof(FNetSquadData) == 0x000050, "Wrong size on FNetSquadData");
static_assert(offsetof(FNetSquadData, Data) == 0x000000, "Member 'FNetSquadData::Data' has a wrong offset!");

// ScriptStruct CosmosApi.CreateSquadParam
// 0x0108 (0x0108 - 0x0000)
struct FCreateSquadParam final
{
public:
	struct FNetSquadUserData                      UserData;                                          // 0x0000(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FNetSquadSdpData                       SdpData;                                           // 0x0060(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FNetSquadData                          SquadData;                                         // 0x00B0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         RegionId;                                          // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCreateSquadParam) == 0x000008, "Wrong alignment on FCreateSquadParam");
static_assert(sizeof(FCreateSquadParam) == 0x000108, "Wrong size on FCreateSquadParam");
static_assert(offsetof(FCreateSquadParam, UserData) == 0x000000, "Member 'FCreateSquadParam::UserData' has a wrong offset!");
static_assert(offsetof(FCreateSquadParam, SdpData) == 0x000060, "Member 'FCreateSquadParam::SdpData' has a wrong offset!");
static_assert(offsetof(FCreateSquadParam, SquadData) == 0x0000B0, "Member 'FCreateSquadParam::SquadData' has a wrong offset!");
static_assert(offsetof(FCreateSquadParam, RegionId) == 0x000100, "Member 'FCreateSquadParam::RegionId' has a wrong offset!");

// ScriptStruct CosmosApi.NetSquadConfig
// 0x0058 (0x0058 - 0x0000)
struct FNetSquadConfig final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TitleCode;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Platform;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerIp;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerPort;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetSquadConfig) == 0x000008, "Wrong alignment on FNetSquadConfig");
static_assert(sizeof(FNetSquadConfig) == 0x000058, "Wrong size on FNetSquadConfig");
static_assert(offsetof(FNetSquadConfig, UserId) == 0x000000, "Member 'FNetSquadConfig::UserId' has a wrong offset!");
static_assert(offsetof(FNetSquadConfig, TitleCode) == 0x000010, "Member 'FNetSquadConfig::TitleCode' has a wrong offset!");
static_assert(offsetof(FNetSquadConfig, Version) == 0x000020, "Member 'FNetSquadConfig::Version' has a wrong offset!");
static_assert(offsetof(FNetSquadConfig, Platform) == 0x000030, "Member 'FNetSquadConfig::Platform' has a wrong offset!");
static_assert(offsetof(FNetSquadConfig, ServerIp) == 0x000038, "Member 'FNetSquadConfig::ServerIp' has a wrong offset!");
static_assert(offsetof(FNetSquadConfig, ServerPort) == 0x000048, "Member 'FNetSquadConfig::ServerPort' has a wrong offset!");

}

