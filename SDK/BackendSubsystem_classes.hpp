#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BackendSubsystem

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "BackendSubsystem_structs.hpp"
#include "MasterDataModule_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "VoiceChatModule_structs.hpp"


namespace SDK
{

// Class BackendSubsystem.BackendSubsystem
// 0x0880 (0x08B0 - 0x0030)
class UBackendSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnWaitForLoginEventDispatcher;                     // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnReadyForPlayEventDispatcher;                     // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCompleteLoadTrackingNumberEventDispatcher;       // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChangeIdleStatusEventDispatcher;                 // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnLoadCompleteEventDispatcher;                     // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnUpdateCompleteEventDispatcher;                   // 0x0098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTeamUpUpdatedEventDispatcher;                    // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTeamUpAutoBattleStartCompleteEventDispatcher;    // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTeamUpAutoBattleStartErrorEventDispatcher;       // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTeamUpAutoStartBattlePasswordCreatedEventDispatcher; // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTeamUpAutoBattleStartCancelEventDispatcher;      // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTeamUpMemberKickedEventDispatcher;               // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnNotifyTeamUpKickedByHostEventDispatcher;         // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTeamUpCreatedEventDispatcher;                    // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTeamUpJoinEventDispatcher;                       // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTeamUpLeaveEventDispatcher;                      // 0x0138(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTeamUpChatReceivedEventDispatcher;               // 0x0148(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTeamUpAppealReceivedEventDispatcher;             // 0x0158(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTeamUpInvitingListChangedDispatcher;             // 0x0168(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCurrencyUpdatedEventDispatcher;                  // 0x0178(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnRentalPointUpdatedEventDispatcher;               // 0x0188(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnVoiceChatChangeSystemStateDispatcher;            // 0x0198(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnVoiceChatChangePlayerStateDispatcher;            // 0x01A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnVoiceChatTextMessageReceivedDispatcher;          // 0x01B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChangeUnreadNoticeContDispatcher;                // 0x01C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8[0x10];                                     // 0x01D8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnAddItemDispatcher;                               // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnBuyItemDispatcher;                               // 0x01F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSystemErrorEventDispatcher;                      // 0x0208(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlayerRequestErrorEventDispatcher;               // 0x0218(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnUpdateVariationCompleteEventDispatcher;          // 0x0228(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCustomMatchCreateCompleteEventDispatcher;        // 0x0238(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCustomMatchJoinCompleteEventDispatcher;          // 0x0248(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCustomMatchLeaveCompleteEventDispatcher;         // 0x0258(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCustomMatchUpdateSettingsCompleteEventDispatcher; // 0x0268(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCustomMatchUpdateGetDataCompleteEventDispatcher; // 0x0278(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCustomMatchSetCustomRoomMemberCompleteEventDispatcher; // 0x0288(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCustomMatchKickCompleteEventDispatcher;          // 0x0298(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCustomMatchGetCustomLobbyServerCompleteEventDispatcher; // 0x02A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCustomMatchNotifySettingsCompleteEventDispatcher; // 0x02B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCustomMatchNotifyGetCustomLobbyServerCompleteEventDispatcher; // 0x02C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCustomMatchNotifyKickCompleteEventDispatcher;    // 0x02D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCustomMatchNotifyDisbandedCompleteEventDispatcher; // 0x02E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCustomMatchTeamUpUpdatedEventDispatcher;         // 0x02F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCustomMatchLockedBattleReadyEventDispatcher;     // 0x0308(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_318[0x170];                                    // 0x0318(0x0170)(Fixing Size After Last Property [ Dumper-7 ])
	class UDatabaseParams*                        _params;                                           // 0x0488(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCosmosManager*                         _cosmos;                                           // 0x0490(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWebApiCacheManager*                    _webApiCache;                                      // 0x0498(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4A0[0x28];                                     // 0x04A0(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             _idleStateSetting;                                 // 0x04C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4D0[0x3E0];                                    // 0x04D0(0x03E0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 AcceptFriendship(const class FString& PlayerId);
	void AcceptFriendshipImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 AcceptGuild(const class FString& PlayerId);
	void AcceptGuildImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 AcceptGuildInvitation(const class FString& PlayerId, const class FString& GuildId, const class FString& NoticeId);
	void AcceptGuildInvitationImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	void AddKpiPlayerBattleLog_DS(const class FString& PlayerId, const struct FKpiBattleLog& Kpi);
	void AddPlayer_DS(const class FString& SquadId, const class FString& PlayerId, const int32 CharacterCode);
	int32 ApplyGuild(const class FString& GuildId, bool RecommendApply);
	void ApplyGuildImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	void AutoStartBattle(bool bInitialize);
	void AutoStartBattleComplete(EAutoStartBattleState State);
	void AutoStartBattleCustomMatch();
	void AutoStartBattleCustomMatchComplete();
	void AutoStartBattleCustomMatchProgress1();
	void AutoStartBattleCustomMatchProgress2();
	void AutoStartBattleProgress1(const int32 SkillBase, const int32 PenaltyLevel);
	void AutoStartBattleProgress2();
	void AutoStartBattleProgress3();
	void AutoStartBattleProgress4();
	void AutoStartBattleProgress5();
	void AutoStartBattleProgress6();
	void BroadcastAutoStartBattleComplete(bool Idle, int32 StateSetting);
	void BroadcastOnLoadCompleteEventNextTick(const int32 RequestId);
	int32 Buy(const int32 ShopItemCode, const int32 CurrencyCode, const int32 Count);
	void BuyImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	void BuyLicenseImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	void BuyLicenseWithExpImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 BuyPremiumDailyLoginBonus();
	void BuyPremiumDailyLoginBonusImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 BuyProLicense();
	int32 BuyProLicenseWithExp();
	int32 BuySpecialLicenseExp(int32 Count);
	int32 CancelApplyGuild(const class FString& GuildId);
	void CancelApplyGuildImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	bool CancelAutoStartBattle();
	bool CancelCustomLobbyMatching();
	int32 CancelFriendshipProposal(const class FString& PlayerId);
	void CancelFriendshipProposalImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	bool CancelLobbyMatching();
	bool CancelMergeSquad();
	int32 CancelPurchase(const class FString& ErrorID, const class FString& ErrorMessage);
	void CancelPurchaseImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 CancelSquadInvitation(const class FString& InvitationId);
	void CancelSquadInvitationImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	bool CanStartBattle();
	bool ChangePlayMode(const int32 NewPlayMode);
	int32 CheckBnidStatus();
	void CheckBnidStatusImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	bool CheckedLeaveSquad();
	bool CheckNumKpiPlayerBattleLog_DS();
	void ClearAutoStartBattleEvents();
	void ClearKpiPlayerBattleLog_DS();
	void ClearNoticeCount();
	int32 ConfirmPurchase(const class FString& OrderId);
	void ConfirmPurchaseImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 ConfirmRetryLottery();
	void ConfirmRetryLotteryImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 ConsumeRentalPoint_DS(const TMap<class FString, int32>& ConsumeDataList);
	bool CreateCustomMatchRoomID(bool bHiddenIdFlag, int32 PlayModeCode);
	void CreateCustomMatchRoomIDImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 CreateGuild(const class FString& Name_0, const class FString& Profile, const EGuildPolicy EPolicy, const EGuildJoinRule EJoinRule, const int32 EmblemCode);
	void CreateGuildImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	bool CreateSquad(bool bChangePlayMode);
	int32 DeclineGuildInvitation(const class FString& PlayerId, const class FString& NoticeId);
	void DeclineGuildInvitationImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	void DelayKickAllCpuPlayers(bool Idle, int32 StateSetting);
	int32 DeleteCustomizePreset(const int32 CharacterCode, const EPresetType PresetType, const int32 SlotNo);
	int32 DeleteFriendship(const class FString& PlayerId);
	void DeleteFriendshipImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 DeleteNotice(const class FString& NoticeId);
	int32 DeleteOpenedNotice();
	int32 DeliveryMyAd(const int32 AdNo);
	int32 DeliveryMyAdById(const class FString& ID);
	void DeliveryMyAdImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 DenyFriendship(const class FString& PlayerId);
	void DenyFriendshipImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 DenyGuild(const class FString& PlayerId);
	void DenyGuildImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 DonateGuild(const EGuildFacility ETargetFacility, const int32 Amount);
	void DonateGuildImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	bool EnableVoiceChat(const bool bEnable);
	void EnableVoiceChatSTTCommand(const TArray<class FString>& Args);
	void EnableWebApiCacheCommand(const TArray<class FString>& Args);
	int32 ExchangeLotteryMileage(const int32 LotteryCode, const class FString& ExchangeId);
	void ExchangeLotteryMileageImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	bool FinishCustomGame();
	int32 FireGuildMember(const class FString& PlayerId);
	void FireGuildMemberImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	void ForceConnectVoiceChat();
	void ForceDisconnectVoiceChat();
	void ForceFakePlatform(const class FString& Platform);
	class FString GetBattleEndTimeKpiPlayerBattleLog_DS();
	class FString GetBattleStartTimeKpiPlayerBattleLog_DS();
	class UTexture2DDynamic* GetBnidQrCodeTexture2DDynamic();
	bool GetCustomLobbyServer();
	bool GetCustomRoomData(const class FString& CustomRoomKey);
	class UDatabaseParams* GetDatabaseParams();
	class FString GetMasterDataStatusString();
	class FString GetPurchaseInfoId();
	TArray<class FString> GetVoiceFontNameList();
	void InitializeBattle_DS(const int32 PlayModeCode, const class FString& ServerHost, const int32 ServerPort);
	void InitializeDevices();
	int32 InviteGuild(const class FString& PlayerId);
	void InviteGuildImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	bool IsBootUp();
	bool IsCountryInJapan();
	bool IsFullSquadMember();
	bool IsLanguageJapanese();
	bool IsNetworkAvailableCheck();
	bool IsPause();
	bool IsPlayerMute(const class FString& PlatformPlayerId);
	bool IsReadyForLogin();
	bool IsRightCharacter();
	bool JoinCustomMatchRoomKey(const class FString& CustomRoomKey);
	bool JoinSquad(const class FString& SquadPassword);
	bool JoinSquadByInvitation(const class FString& InvitationId);
	bool KickAllCpuPlayers();
	bool KickCustomRoom(const class FString& PlayerId);
	bool KickSquadMember(const class FString& KickTargetPlayerId);
	bool LeaveCustomMatch();
	int32 LeaveGuild();
	void LeaveGuildImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	bool LeaveSquad();
	int32 LoadAppliedFriend(const int32 Limit, const int32 PageNo, const EFriendListSortOrder Sort);
	int32 LoadApplyingFriend(const int32 Limit, const int32 PageNo, const EFriendListSortOrder Sort);
	int32 LoadAvatarList(const class FString& PlayerId);
	void LoadAvatarListImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadBattleRecord(const int32 PageNo, const class FString& PlayerId);
	void LoadBattleRecordImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadBillboardChart(const int32 PageNo);
	void LoadBillboardChartImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadBnidQrCodeImage();
	void LoadBnidQrCodeImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadBnidQrCodeUrl();
	int32 LoadCharacterSelect();
	void LoadCharacterSelectImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadChatLog();
	void LoadChatLogImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadCosmosIdByPlatformIds(const TArray<class FString>& PlatformPlayerIds);
	void LoadCosmosIdByPlatformIdsImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadCountry();
	void LoadCountryImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadCustomizeAppeal(const int32 CharacterCode);
	void LoadCustomizeAppealImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadCustomizeCostume(const int32 CharacterCode);
	void LoadCustomizeCostumeImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadCustomizeEmblem(const int32 CharacterCode);
	void LoadCustomizeEmblemImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadCustomizePreset();
	void LoadCustomizePresetImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadCustomizeVariation(const int32 CharacterCode);
	void LoadCustomizeVariationImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadCustomizeVoice(const int32 CharacterCode);
	void LoadCustomizeVoiceImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadCustomMatchProfileList(const TArray<class FString>& PlayerIdList);
	void LoadCustomMatchProfileListImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadCustomMatchResult(const class FString& CustomRoomId);
	void LoadCustomMatchResultImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	void LoadCustomMatchRoomInfoImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadEvent(const int32 EventCode);
	void LoadEventImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadFriend(const int32 Limit, const int32 PageNo, const EFriendListSortOrder Sort, const bool bExcludeGuildMember);
	void LoadFriendImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadFundSettlementText();
	void LoadFundSettlementTextImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadGallery();
	void LoadGalleryImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadGuildInfo(const class FString& GuildId);
	void LoadGuildInfoImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadGuildMemberList(const int32 PageNo, const EGuildMemberSort ESort);
	void LoadGuildMemberListImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadGuildMemberNoFriend(const int32 Limit, const int32 PageNo, const EFriendListSortOrder Sort, const bool bIgnoreFriendStatus);
	int32 LoadGuildPendingMemberList(const int32 PageNo, const EGuildMemberSort ESort);
	void LoadGuildPendingMemberListImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadGuildRecordList();
	void LoadGuildRecordListImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadHeroCrystal();
	void LoadHeroCrystalImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadInventory();
	void LoadInventoryImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadInvitation(const int32 PageNo);
	int32 LoadLatelyPlayedNoFriend(const int32 Limit, const int32 PageNo, const EFriendListSortOrder Sort, const bool bIgnoreFriendStatus, const bool bExcludeGuildMember);
	int32 LoadLicense();
	void LoadLicenseImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadLoginBonus();
	void LoadLoginBonusImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadLottery();
	int32 LoadLotteryHistory(const int32 PageNo);
	void LoadLotteryHistoryImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	void LoadLotteryImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadLotteryMileageInfo(const int32 LotteryCode);
	void LoadLotteryMileageInfoImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadLotteryRate(const int32 LotteryCode);
	void LoadLotteryRateImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadMainMenu();
	void LoadMainMenuImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadMission();
	void LoadMissionImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadMyAdList();
	void LoadMyAdListImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadNotice(const int32 PageNo);
	int32 LoadNoticeAndInvitation();
	void LoadNoticeAndInvitationImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	void LoadNoticeImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadPlatformFriendNoFriend(const int32 Limit, const int32 PageNo, const EFriendListSortOrder Sort, const bool bIgnoreFriendStatus, const bool bExcludeGuildMember);
	int32 LoadProfile(const class FString& PlayerId);
	int32 LoadProfile_DS(const class FString& PlayerId, const int32 CharacterCode);
	void LoadProfileImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadPurchaseCatalog();
	void LoadPurchaseCatalogCommand(const TArray<class FString>& Args);
	void LoadPurchaseCatalogImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadPurchasedItem();
	void LoadPurchasedItemImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadPurchaseStatus();
	int32 LoadRanking(const int32 PageNo, const ERankingType RankingType, const int32 EventCode);
	int32 LoadRankingByCode(const int32 PageNo, const int32 RankingCode);
	void LoadRankingImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadResult();
	void LoadResultImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadSeasonPass();
	void LoadSeasonPassImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadSeasonPassStock();
	void LoadSeasonPassStockImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadSetting();
	void LoadSettingImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadShop();
	void LoadShopImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadSpacialLicense();
	int32 LoadSpecialLicense();
	void LoadSpecialLicenseImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadSquad(const class FString& SquadPassword);
	void LoadSquadImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadSquadReceivedInvitation(const class FString& InvitationId);
	void LoadSquadReceivedInvitationImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadSquadSentInvitation();
	void LoadSquadSentInvitationImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadTokushoText();
	void LoadTokushoTextImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 LoadTrackingNumber();
	void LoadTrackingNumberImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	void Login();
	bool MergeSquad();
	void NoticeCountDecrement(int32 DecrementValue);
	void OnAddItemDispatcher__DelegateSignature(const struct FDbItemCategoryParam& Item, const int32 Quantity);
	void OnBuyItemDispatcher__DelegateSignature();
	void OnChangeAudioDeviceList();
	void OnChangeIdleStatusEventDispatcher__DelegateSignature(bool Idle, int32 StateSetting);
	void OnChangeUnreadNoticeContDispatcher__DelegateSignature(const int32 Count);
	void OnCompleteConsumeRentalPoint_DS(int32 RequestId);
	void OnCompleteLoadProfile_DS(int32 RequestId);
	void OnCompleteLoadTrackingNumberEventDispatcher__DelegateSignature(const class FString& TrackingNumber);
	void OnCompleteSendCustomMatchResult_DS(const int32 RequestId);
	void OnCompleteSendFinalResult_DS(const int32 RequestId);
	void OnCompleteSendKpiBattleLog_DS(const int32 RequestId);
	void OnCompleteSendPenaltyPoint_DS(const int32 RequestId);
	void OnCompleteSendPhaseResult_DS(int32 RequestId);
	void OnCompleteStartBattle_DS(int32 RequestId);
	void OnCompleteUpdateMissionProgress_DS(const int32 RequestId);
	void OnCompleteUpdateMissionsProgress_DS(const int32 RequestId);
	void OnCurrencyUpdatedEventDispatcher__DelegateSignature();
	void OnCustomMatchCreateComplete__DelegateSignature();
	void OnCustomMatchGetCustomLobbyServerComplete__DelegateSignature();
	void OnCustomMatchJoinComplete__DelegateSignature();
	void OnCustomMatchKickComplete__DelegateSignature();
	void OnCustomMatchLeaveComplete__DelegateSignature();
	void OnCustomMatchLockedBattleReadyEventDispatcher__DelegateSignature();
	void OnCustomMatchNotifyDisbandedComplete__DelegateSignature();
	void OnCustomMatchNotifyGetCustomLobbyServerComplete__DelegateSignature();
	void OnCustomMatchNotifyKickComplete__DelegateSignature();
	void OnCustomMatchNotifySettingsComplete__DelegateSignature();
	void OnCustomMatchSetCustomRoomMemberComplete__DelegateSignature();
	void OnCustomMatchTeamUpUpdatedEventDispatcher__DelegateSignature();
	void OnCustomMatchUpdateGetDataComplete__DelegateSignature();
	void OnCustomMatchUpdateSettingsComplete__DelegateSignature();
	void OnDownloadComplete();
	void OnLoadCompleteEventDispatcher__DelegateSignature(int32 RequestId);
	void OnLoadedServerList();
	void OnLoginComplete();
	void OnMatchingServerInitialized();
	void OnPlatformLogin(bool bWasSuccessful);
	void OnPlayerRequestError(const int32 RequestId, const class FName& Key, const class FName& Message);
	void OnPlayerRequestErrorEventDispatcher__DelegateSignature(int32 RequestId, const class FName Key, const class FName Message);
	void OnProgressLoadProfile_DS1(int32 RequestId);
	void OnProgressLoadProfile_DS2(int32 RequestId);
	void OnReadyForPlayEventDispatcher__DelegateSignature();
	void OnRentalPointUpdatedEventDispatcher__DelegateSignature(int32 Value);
	void OnSendLikeDispatcher__DelegateSignature(const int32 Count);
	void OnSystemError(const int32 RequestId, const class FName& Key, const class FName& Message);
	void OnSystemErrorEventDispatcher__DelegateSignature(int32 RequestId, const class FName Key, const class FName Message);
	void OnTeamUpAppealReceivedEventDispatcher__DelegateSignature(const class FString& PlayerId, const class FString& DisplayName, const int32& Appeal, const bool bBlock);
	void OnTeamUpAutoStartBattleCanceledEventDispatcher__DelegateSignature();
	void OnTeamUpAutoStartBattleCompleteEventDispatcher__DelegateSignature(EAutoStartBattleState State);
	void OnTeamUpAutoStartBattleErrorEventDispatcher__DelegateSignature();
	void OnTeamUpAutoStartBattlePasswordCreatedEventDispatcher__DelegateSignature();
	void OnTeamUpChatReceivedEventDispatcher__DelegateSignature(const class FString& PlayerId, const class FString& DisplayName, const class FString& Message, const bool bBlock);
	void OnTeamUpCreatedEventDispatcher__DelegateSignature();
	void OnTeamUpInvitingListChangedDispatcher__DelegateSignature();
	void OnTeamUpJoinEventDispatcher__DelegateSignature();
	void OnTeamUpLeaveEventDispatcher__DelegateSignature();
	void OnTeamUpMemberKickedEventDispatcher__DelegateSignature();
	void OnTeamUpUpdatedEventDispatcher__DelegateSignature();
	void OnUnLockedBattleReadyEvent();
	void OnUpdateCompleteEventDispatcher__DelegateSignature(int32 RequestId);
	void OnUpdateVariationCompleteEventDispatcher__DelegateSignature(int32 CharacterCode, int32 Variation);
	void OnVoiceChatChangePlayerState(const class FString& PlatformPlayerId, const EVoiceChatPlayerStatus Status, float Value);
	void OnVoiceChatChangePlayerStateDispatcher__DelegateSignature(const class FString& PlatformPlayerId, EVoiceChatMemberStatus Status, float Value);
	void OnVoiceChatChangeState(const EVoiceChatStatus Status);
	void OnVoiceChatChangeSystemStateDispatcher__DelegateSignature(EVoiceChatSystemStatus Status);
	void OnVoiceChatError(EVoiceChatError Err, const class FString& Msg);
	void OnVoiceChatTextMessageReceivedDispatcher__DelegateSignature(const class FString& PlatformPlayerId, const class FString& Message);
	void OnVoiceTextMessageReceived(const class FString& PlatformPlayerId, const class FString& Message);
	void OnWaitForLoginEventDispatcher__DelegateSignature();
	int32 OpenAllNotice();
	int32 OpenGalleryPanels(const int32 GalleryCode, const TArray<int32>& PanelNumbers);
	void OpenGalleryPanelsImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 OpenNotice(const class FString& NoticeId);
	void OpenNoticeImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	bool QuitBattle();
	int32 ReceiveCampaignLoginBonus();
	int32 ReceiveDailyLoginBonus();
	int32 ReceiveEventLoginBonus();
	int32 ReceiveLoginBonus(const TArray<int32>& LoginBonusCodes);
	void ReceiveLoginBonusCommand(const TArray<class FString>& Args);
	void ReceiveLoginBonusImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 ReceiveMissionAchievement(const int32 MissionCode);
	void ReceiveMissionAchievementImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 ReceiveMissionAchievements(const TArray<int32>& MissionCodes);
	bool RegisterMissionProgress(const int32 MissionCode, const int32 Value);
	bool RegisterMissionProgress_DS(const int32 MissionCode, const int32 Value, const class FString& PlayerId);
	void ReInitialize();
	void ReleaseCharacterCustomizeAll();
	void RemovePlayer_DS(const class FString& PlayerId);
	int32 ResetBnidLink();
	void ResetBnidLinkImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	void ResetDedicatedServerCommand(const TArray<class FString>& Args);
	bool ResetMissionProgress(const int32 MissionCode);
	bool ResetMissionProgress_DS(const int32 MissionCode, const class FString& PlayerId);
	int32 ResetMyAd(const class FString& ID);
	void ResetMyAdImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	void ResetProxyServerCommand(const TArray<class FString>& Args);
	void ResignGuildLeaderImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 RunLottery(const int32 LotteryCode, const class FString& PaymentId);
	void RunLotteryImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 SaveCustomizesPreset(const int32 CharacterCode, const int32 PresetNo, const int32 CostumeCode, const TArray<int32>& VoiceCodes, const TArray<int32>& AppealCodes, const TArray<int32>& EmblemCodes, const int32 AuraLevel);
	void SaveCustomizesPresetImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	void SaveJsonDatabaseParamsCommand(const TArray<class FString>& Args);
	int32 SaveSetting(const bool bBattleRecord, int32 AuraDisplayTarget, int32 AuraDisplayArea);
	void SaveSettingImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 SearchGuilds(const int32 PageNo, const struct FDbGuildSearchCondition& Condition);
	void SearchGuildsImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 SearchPlayer(const int32 Limit, const int32 PageNo, const class FString& SearchWord, const EFriendListSortOrder Sort);
	bool SearchSquad();
	int32 SendBattlePhaseLike(const class FString& GameId, const int32 PhaseNo, const TMap<EResultType, int32>& LikeList, EScreenName EScreen);
	void SendBattlePhaseLikeImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 SendBillboardChartLike(const class FString& PlayerId, const int32 Count, const ELikeType EType, const EScreenName EScreen);
	void SendBillboardChartLikeImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 SendChat(const class FString& Chat);
	void SendChatImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 SendCustomRoomAppeal(const int32 AppealCode);
	void SendCustomRoomAppealImpl(int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 SendFinalResult_DS(const TArray<struct FResultData>& ResultList);
	int32 SendFriendshipProposal(const class FString& PlayerId);
	void SendFriendshipProposalImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	void SendGetTrophyKpi(int32 TrophyCode);
	void SendGuildChatLogKpi(const class FString& Message);
	int32 SendGuildRecordLike(const class FString& RecordId, const int32 Count);
	void SendGuildRecordLikeImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	void SendLevelTransactionKpi(const EScreenName EScreen);
	int32 SendPenaltyPoint(const class FString& PlayerId, const EMdPenaltyType& Reason);
	int32 SendPenaltyPoint_DS(const TArray<struct FPenaltyData>& PenaltyList);
	void SendPenaltyPointImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 SendPhaseResult_DS(const int32 PhaseNo, const bool bFinalPhase, const TArray<struct FPhaseResult>& ResultList, const TArray<struct FBillBoardLike>& LikeList, EScreenName EScreen);
	void SendRecommendNotificationKpi(int32 NotificationCode, const bool bRejection);
	void SendSettingsKpi(const int32 Notification, const int32 RecordHide, const int32 VoiceChat);
	void SendSquadChatLogKpi(const class FString& Message);
	int32 SendSquadInvitation(const class FString& PlayerId);
	void SendSquadInvitationImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 SendTeamUpAppeal(const int32 AppealCode);
	void SendTeamUpAppealImpl(int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 SendTeamUpChatMessage(const class FString& Message);
	void SendTeamUpChatMessageImpl(int32 RequestId, const TArray<struct FWebApiArg>& Args);
	void SendTeamUpChatTestCommand(const TArray<class FString>& Args);
	void SendTextSpeechCommand(const TArray<class FString>& Args);
	void SendTutorialKpi(int32 Step);
	void SendViewProfileKpi(const class FString& ViewCosmosId, const EScreenName EScreen, const class FString& MyADId);
	void SetAutoKickCpu(bool bEnable);
	void SetAutoStartBattleSequence(const int32 battleSequence);
	void SetBattleEndTimeKpiPlayerBattleLog_DS();
	void SetBattleStartTimeKpiPlayerBattleLog_DS();
	void SetCallLoadPurchaseStatusCommand(const TArray<class FString>& Args);
	void SetCheckNetworkAvailableCommand(const TArray<class FString>& Args);
	void SetConnectionEnvironmentForDedicatedServer(const class FString& Env, const class FString& Version, const class FString& Platform);
	bool SetCustomRoomMember(const TArray<struct FDbCustomMatchingMemberParamList>& SquadList);
	bool SetCustomRoomMemberData();
	bool SetCustomRoomSettings();
	void SetDebugBlockList();
	void SetDedicatedServerCommand(const TArray<class FString>& Args);
	void SetEnableSpeechToText(const bool bEnableSpeechToText);
	void SetFakeNetScoreCommand(const TArray<class FString>& Args);
	void SetForceMultiProcessSupportCommand(const TArray<class FString>& Args);
	void SetIgnoreSystemCheckError(bool bIgnoreSystemCheckError);
	void SetIgnoreSystemCheckErrorCommand(const TArray<class FString>& Args);
	void SetKpiAgreement(bool bAgree);
	void SetKpiLobbyLog_DS(const struct FKpiLobbyLog& Kpi);
	int32 SetKpiTrainingLog_DS(const struct FKpiTrainingLog& Kpi);
	void SetLocalModeCommand(const TArray<class FString>& Args);
	void SetMatchingRegion(const int32 RegionCode);
	void SetMyAdParts(int32 backgroundId, int32 EffectId, int32 MessageId);
	void SetPlayerMute(const class FString& PlatformPlayerId, const bool bMute);
	void SetProxyServerCommand(const TArray<class FString>& Args);
	void SetRealtimeMasterUpdateCommand(const TArray<class FString>& Args);
	void SetSkipInGameTutorial(bool bSkipInGameTutorial);
	void SetSQLiteAdminWatcherCommand(const TArray<class FString>& Args);
	void SetTeamUpPassword(const class FString& Password);
	void SetUseUnplayableCharactersCommand(const TArray<class FString>& Args);
	void SkipDownloadMasterDataCommand(const TArray<class FString>& Args);
	void SkipTutorialCommand(const TArray<class FString>& Args);
	bool StartCustomRoom();
	bool StartLobbyMatching();
	int32 StartPurchase(const class FString& CatalogId);
	void StartPurchaseImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 UnlockMyAd();
	void UnlockMyAdImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 UnlockPreset(const int32 CharacterCode);
	void UnlockPresetImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	void UpdateAchievementProgress(const TMap<int32, int32>& MissionCodeList);
	bool UpdateAutoStartBattleSequence(const int32 battleSequence);
	void UpdateAvatarImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	bool UpdateBattleReadyState(const bool bBattleReady);
	void UpdateCancelRequests(int32 RequestId);
	int32 UpdateCharacter(const int32 CharacterCode);
	void UpdateCharacterImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 UpdateCustomizeAppeal(const int32 CharacterCode, const TArray<int32>& Appeals);
	void UpdateCustomizeAppealImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	void UpdateCustomizeAuraImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 UpdateCustomizeAuraLevel(const int32 CharacterCode, int32 CostumeCode, int32 AuraLevel);
	int32 UpdateCustomizeCostume(const int32 CharacterCode, int32 CostumeCode, int32 AuraLevel);
	void UpdateCustomizeCostumeImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 UpdateCustomizeEmblem(const int32 CharacterCode, const TArray<int32>& Emblem);
	void UpdateCustomizeEmblemImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 UpdateCustomizeVariation(const int32 CharacterCode, int32 VariationCode);
	void UpdateCustomizeVariationImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 UpdateCustomizeVoice(const int32 CharacterCode, const TArray<int32>& Voices);
	void UpdateCustomizeVoiceImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 UpdateGallery(const int32 GalleryCode, const int32 Ticket1Num, const int32 Ticket2Num, const int32 Ticket3Num);
	void UpdateGalleryImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 UpdateGuild(const int32 EmblemCode, const class FString& Name_0, const class FString& Profile, const EGuildPolicy EPolicy, const EGuildJoinRule EJoinRule);
	void UpdateGuildImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 UpdateGuildSubLeader(const class FString& PlayerId, const bool bAppointment);
	void UpdateGuildSubLeaderImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	void UpdateLanguage();
	bool UpdateMatchingCharacter(const int32 CharacterCode, const int32 CostumeCode, const int32 AuraLevel, const int32 VariationCode);
	bool UpdateMatchingCpuCharacters(const TArray<int32>& CharacterCodes, const TArray<int32>& CostumeCodes);
	bool UpdateMatchingSetting(const bool bBattleRecord, int32 AuraDisplayTarget, int32 AuraDisplayArea);
	int32 UpdateMissionProgress();
	int32 UpdateMissionProgress_DS();
	void UpdateMissionProgressImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 UpdateMyAd(const class FString& ID, const TArray<int32>& PartCodes, int32 MessageCode);
	void UpdateMyAdImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 UpdatePlayerName(const class FString& PlayerName);
	int32 UpdateProfile(const class FString& Profile);
	void UpdateProfileImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 UpdateProfileMyAd(const class FString& MyADId);
	void UpdateProfileMyAdImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	int32 UpdateTrainingCharacter(const int32 CharacterCode);
	int32 UpdateTrainingCustomizeVariation(const int32 CharacterCode, int32 VariationCode);
	int32 UpdateTutorial(const ETutorialStepNo ETutorialStep);
	void UpdateTutorialImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);
	void UpdateVoiceChatDevices(const class FString& InputDeviceId, const class FString& OutputDeviceId);
	void UpdateVoiceChatInputMute(const bool bEnable);
	void UpdateVoiceChatOutputMute(const bool bEnable);
	bool UpdateVoiceChatSetting(const bool bVoiceChat, const float InputVolume, const float OutputVolume);
	bool UpdateVoiceChatVolume(const float InputVolume, const float OutputVolume);
	void UpdateVoiceFont(const class FString& FontName);
	int32 UseBoostTicket();
	void UseBoostTicketImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args);

	bool CanCallUpdateWebApi() const;
	bool CanCancelLobbyMatching() const;
	bool CanCancelSquadMerge() const;
	bool CheckXboxMyCommunicationPermission() const;
	class FString GetBnidQrCodeUrl() const;
	class FString GetBnidQrImageBase64() const;
	const EBnIdStatus GetBnidStatus() const;
	class FString GetBnidStatusText() const;
	void GetConnectedEnvironment(class FString* Env) const;
	void GetConnectionEnvironment(class FString* Env, class FString* TestVersion) const;
	void GetConnectionServer(class FString* Host, int32* Port) const;
	int32 GetCurrentCharacterCode() const;
	class FString GetFakePlatform() const;
	class FString GetFundSettlementText() const;
	void GetHeroCrystalCount(int32* ChargedHeroCrystal, int32* FreeHeroCrystal) const;
	class FString GetJsonBattle() const;
	class FString GetJsonBillboardChart() const;
	class FString GetJsonCharacters() const;
	class FString GetJsonGuild() const;
	class FString GetJsonLotteries() const;
	class FString GetJsonMatching() const;
	class FString GetJsonMissions() const;
	class FString GetJsonMyPlayer() const;
	class FString GetJsonNotice() const;
	class FString GetJsonPlayers() const;
	class FString GetJsonRanking() const;
	class FString GetJsonSeason() const;
	class FString GetJsonSetting() const;
	class FString GetJsonShops() const;
	class FString GetMaintenanceMessage() const;
	int32 GetPenaltyLevel() const;
	EBackendSubsystemPhase GetPhase() const;
	class FString GetPlatformPlayerId() const;
	class FString GetPlatformPlayerName() const;
	class FString GetPlayerId() const;
	class FString GetPlayerName() const;
	int32 GetPlayModeCode_DS() const;
	int32 GetRunningCount() const;
	int32 GetSkillBase() const;
	class FString GetTeamUpId() const;
	int32 GetTeamUpMemberCount() const;
	void GetTeamUpMemberIdList(TArray<class FString>* PlayerIdList) const;
	class FString GetTokushoText() const;
	ETutorialStepNo GetTutorialStepNo() const;
	void GetVersions(class FString* WebApi, class FString* Matching, class FString* Data, class FString* TrackingNumber) const;
	bool HasOnlinePlayPrivilege() const;
	bool IsAutoKickCpu() const;
	bool IsBonusRemainsToday() const;
	bool IsCustomMatchJoined() const;
	bool IsLastWebApiError() const;
	bool IsLocalMode() const;
	bool IsLoggedIn() const;
	bool IsMasterDataDownloading() const;
	bool IsPlaying() const;
	bool IsPlayingTrainingMode() const;
	bool IsSkipInGameTutorial() const;
	bool IsSquadJoined() const;
	bool IsTeamUpLeader() const;
	bool IsTutorialFinished() const;
	bool IsVoiceChatConnected() const;
	void LoadJsonBattle() const;
	void LoadJsonBillboardChart() const;
	void LoadJsonCharacters() const;
	void LoadJsonGuild() const;
	void LoadJsonLotteries() const;
	void LoadJsonMatching() const;
	void LoadJsonMissions() const;
	void LoadJsonMyPlayer() const;
	void LoadJsonNotice() const;
	void LoadJsonPlayers() const;
	void LoadJsonRanking() const;
	void LoadJsonSeason() const;
	void LoadJsonSetting() const;
	void LoadJsonShops() const;
	void OnChangeUnreadNoticeCount(int32 Count) const;
	void SaveJsonBattle() const;
	void SaveJsonBillboardChart() const;
	void SaveJsonCharacters() const;
	void SaveJsonGuild() const;
	void SaveJsonLotteries() const;
	void SaveJsonMatching() const;
	void SaveJsonMissions() const;
	void SaveJsonMyPlayer() const;
	void SaveJsonNotice() const;
	void SaveJsonPlayers() const;
	void SaveJsonRanking() const;
	void SaveJsonSeason() const;
	void SaveJsonSetting() const;
	void SaveJsonShops() const;
	void SendTextSpeech(const class FString& Message) const;
	void SetConnectionEnvironment(const class FString& Env, const class FString& TestVersion) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BackendSubsystem">();
	}
	static class UBackendSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBackendSubsystem>();
	}
};
static_assert(alignof(UBackendSubsystem) == 0x000008, "Wrong alignment on UBackendSubsystem");
static_assert(sizeof(UBackendSubsystem) == 0x0008B0, "Wrong size on UBackendSubsystem");
static_assert(offsetof(UBackendSubsystem, OnWaitForLoginEventDispatcher) == 0x000048, "Member 'UBackendSubsystem::OnWaitForLoginEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnReadyForPlayEventDispatcher) == 0x000058, "Member 'UBackendSubsystem::OnReadyForPlayEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnCompleteLoadTrackingNumberEventDispatcher) == 0x000068, "Member 'UBackendSubsystem::OnCompleteLoadTrackingNumberEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnChangeIdleStatusEventDispatcher) == 0x000078, "Member 'UBackendSubsystem::OnChangeIdleStatusEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnLoadCompleteEventDispatcher) == 0x000088, "Member 'UBackendSubsystem::OnLoadCompleteEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnUpdateCompleteEventDispatcher) == 0x000098, "Member 'UBackendSubsystem::OnUpdateCompleteEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnTeamUpUpdatedEventDispatcher) == 0x0000A8, "Member 'UBackendSubsystem::OnTeamUpUpdatedEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnTeamUpAutoBattleStartCompleteEventDispatcher) == 0x0000B8, "Member 'UBackendSubsystem::OnTeamUpAutoBattleStartCompleteEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnTeamUpAutoBattleStartErrorEventDispatcher) == 0x0000C8, "Member 'UBackendSubsystem::OnTeamUpAutoBattleStartErrorEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnTeamUpAutoStartBattlePasswordCreatedEventDispatcher) == 0x0000D8, "Member 'UBackendSubsystem::OnTeamUpAutoStartBattlePasswordCreatedEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnTeamUpAutoBattleStartCancelEventDispatcher) == 0x0000E8, "Member 'UBackendSubsystem::OnTeamUpAutoBattleStartCancelEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnTeamUpMemberKickedEventDispatcher) == 0x0000F8, "Member 'UBackendSubsystem::OnTeamUpMemberKickedEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnNotifyTeamUpKickedByHostEventDispatcher) == 0x000108, "Member 'UBackendSubsystem::OnNotifyTeamUpKickedByHostEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnTeamUpCreatedEventDispatcher) == 0x000118, "Member 'UBackendSubsystem::OnTeamUpCreatedEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnTeamUpJoinEventDispatcher) == 0x000128, "Member 'UBackendSubsystem::OnTeamUpJoinEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnTeamUpLeaveEventDispatcher) == 0x000138, "Member 'UBackendSubsystem::OnTeamUpLeaveEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnTeamUpChatReceivedEventDispatcher) == 0x000148, "Member 'UBackendSubsystem::OnTeamUpChatReceivedEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnTeamUpAppealReceivedEventDispatcher) == 0x000158, "Member 'UBackendSubsystem::OnTeamUpAppealReceivedEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnTeamUpInvitingListChangedDispatcher) == 0x000168, "Member 'UBackendSubsystem::OnTeamUpInvitingListChangedDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnCurrencyUpdatedEventDispatcher) == 0x000178, "Member 'UBackendSubsystem::OnCurrencyUpdatedEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnRentalPointUpdatedEventDispatcher) == 0x000188, "Member 'UBackendSubsystem::OnRentalPointUpdatedEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnVoiceChatChangeSystemStateDispatcher) == 0x000198, "Member 'UBackendSubsystem::OnVoiceChatChangeSystemStateDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnVoiceChatChangePlayerStateDispatcher) == 0x0001A8, "Member 'UBackendSubsystem::OnVoiceChatChangePlayerStateDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnVoiceChatTextMessageReceivedDispatcher) == 0x0001B8, "Member 'UBackendSubsystem::OnVoiceChatTextMessageReceivedDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnChangeUnreadNoticeContDispatcher) == 0x0001C8, "Member 'UBackendSubsystem::OnChangeUnreadNoticeContDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnAddItemDispatcher) == 0x0001E8, "Member 'UBackendSubsystem::OnAddItemDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnBuyItemDispatcher) == 0x0001F8, "Member 'UBackendSubsystem::OnBuyItemDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnSystemErrorEventDispatcher) == 0x000208, "Member 'UBackendSubsystem::OnSystemErrorEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnPlayerRequestErrorEventDispatcher) == 0x000218, "Member 'UBackendSubsystem::OnPlayerRequestErrorEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnUpdateVariationCompleteEventDispatcher) == 0x000228, "Member 'UBackendSubsystem::OnUpdateVariationCompleteEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnCustomMatchCreateCompleteEventDispatcher) == 0x000238, "Member 'UBackendSubsystem::OnCustomMatchCreateCompleteEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnCustomMatchJoinCompleteEventDispatcher) == 0x000248, "Member 'UBackendSubsystem::OnCustomMatchJoinCompleteEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnCustomMatchLeaveCompleteEventDispatcher) == 0x000258, "Member 'UBackendSubsystem::OnCustomMatchLeaveCompleteEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnCustomMatchUpdateSettingsCompleteEventDispatcher) == 0x000268, "Member 'UBackendSubsystem::OnCustomMatchUpdateSettingsCompleteEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnCustomMatchUpdateGetDataCompleteEventDispatcher) == 0x000278, "Member 'UBackendSubsystem::OnCustomMatchUpdateGetDataCompleteEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnCustomMatchSetCustomRoomMemberCompleteEventDispatcher) == 0x000288, "Member 'UBackendSubsystem::OnCustomMatchSetCustomRoomMemberCompleteEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnCustomMatchKickCompleteEventDispatcher) == 0x000298, "Member 'UBackendSubsystem::OnCustomMatchKickCompleteEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnCustomMatchGetCustomLobbyServerCompleteEventDispatcher) == 0x0002A8, "Member 'UBackendSubsystem::OnCustomMatchGetCustomLobbyServerCompleteEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnCustomMatchNotifySettingsCompleteEventDispatcher) == 0x0002B8, "Member 'UBackendSubsystem::OnCustomMatchNotifySettingsCompleteEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnCustomMatchNotifyGetCustomLobbyServerCompleteEventDispatcher) == 0x0002C8, "Member 'UBackendSubsystem::OnCustomMatchNotifyGetCustomLobbyServerCompleteEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnCustomMatchNotifyKickCompleteEventDispatcher) == 0x0002D8, "Member 'UBackendSubsystem::OnCustomMatchNotifyKickCompleteEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnCustomMatchNotifyDisbandedCompleteEventDispatcher) == 0x0002E8, "Member 'UBackendSubsystem::OnCustomMatchNotifyDisbandedCompleteEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnCustomMatchTeamUpUpdatedEventDispatcher) == 0x0002F8, "Member 'UBackendSubsystem::OnCustomMatchTeamUpUpdatedEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, OnCustomMatchLockedBattleReadyEventDispatcher) == 0x000308, "Member 'UBackendSubsystem::OnCustomMatchLockedBattleReadyEventDispatcher' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, _params) == 0x000488, "Member 'UBackendSubsystem::_params' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, _cosmos) == 0x000490, "Member 'UBackendSubsystem::_cosmos' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, _webApiCache) == 0x000498, "Member 'UBackendSubsystem::_webApiCache' has a wrong offset!");
static_assert(offsetof(UBackendSubsystem, _idleStateSetting) == 0x0004C8, "Member 'UBackendSubsystem::_idleStateSetting' has a wrong offset!");

// Class BackendSubsystem.DatabaseParams
// 0x56B8 (0x56E0 - 0x0028)
class UDatabaseParams final : public UObject
{
public:
	struct FDbMyPlayerParam                       MyPlayer;                                          // 0x0028(0x06C8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDbCharactersParam                     Characters;                                        // 0x06F0(0x2F58)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDbNoticeParam                         Notice;                                            // 0x3648(0x0110)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDbMatchingParam                       Matching;                                          // 0x3758(0x0BA8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDbShopsParam                          Shops;                                             // 0x4300(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDbLotteriesParam                      Lotteries;                                         // 0x4368(0x0190)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDbMissionsParam                       Missions;                                          // 0x44F8(0x0100)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDbPlayerListParam                     Players;                                           // 0x45F8(0x0758)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDbBillboardChartParam                 BillboardChart;                                    // 0x4D50(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDbGuildParam                          Guild;                                             // 0x4D70(0x01C8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDbChatParam                           ChatLog;                                           // 0x4F38(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDbSeasonParam                         Season;                                            // 0x4FA0(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDbSpecialLicenseListParam             SpecialLicense;                                    // 0x5028(0x0090)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDbEventsParam                         Event;                                             // 0x50B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDbRankingsParam                       Ranking;                                           // 0x50C8(0x0398)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDbSettingParam                        Setting;                                           // 0x5460(0x00E0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDbBattleParam                         Battle;                                            // 0x5540(0x00B8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UDbpMainMenu*                           _dbpMainMenu;                                      // 0x55F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDbpMyProfile*                          _dbpMyProfile;                                     // 0x5600(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDbpPlayableCharacterList*              _dbpPlayableCharacterList;                         // 0x5608(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDbpCharacterCustomize*                 _dbpCharacterCustomize;                            // 0x5610(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDbpEquippedCustomize*                  _dbpEquippedCustomize;                             // 0x5618(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDbpShopList*                           _dbpShopList;                                      // 0x5620(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDbpLotteryList*                        _dbpLotteryList;                                   // 0x5628(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDbpLotteryResult*                      _dbpLotteryResult;                                 // 0x5630(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDbpLotteryRate*                        _dbpLotteryRate;                                   // 0x5638(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDbpLotteryHistory*                     _dbpLotteryHistory;                                // 0x5640(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDbpLotteryResult*                      _dbpLotteryExchangeResult;                         // 0x5648(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDbpMissionCategoryList*                _dbpMissionCategoryList;                           // 0x5650(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDbpNotice*                             _dbpNotice;                                        // 0x5658(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDbpPlayerList*                         _dbpPlayerList;                                    // 0x5660(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDbpBillboardChart*                     _dbpBillboardChart;                                // 0x5668(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDbpResult*                             _dbpResult;                                        // 0x5670(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDbpGuild*                              _dbpGuild;                                         // 0x5678(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDbpChat*                               _dbpChat;                                          // 0x5680(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDbpMyAd*                               _dbpMyAd;                                          // 0x5688(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDbpInventory*                          _dbpInventory;                                     // 0x5690(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDbpSeason*                             _dbpSeason;                                        // 0x5698(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDbpEvent*                              _dbpEvent;                                         // 0x56A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDbpRanking*                            _dbpRanking;                                       // 0x56A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDbpGallery*                            _dbpGallery;                                       // 0x56B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDbpLoginBonus*                         _dbLoginBonus;                                     // 0x56B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDbpSetting*                            _dbpSetting;                                       // 0x56C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDbpLoading*                            _dbpLoading;                                       // 0x56C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDbpDedicatedServer*                    _dbpDedicatedServer;                               // 0x56D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDbpCustomMatching*                     _dbpCustomMatching;                                // 0x56D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UDbpBillboardChart* GetBillboardChartData();
	class UDbpCharacterCustomize* GetCharacterCustomizeData(const int32 CharacterCode);
	class UDbpChat* GetChatData();
	class UDbpCustomMatching* GetCustomMatchingData();
	class UDbpDedicatedServer* GetDedicatedServerData();
	class UDbpEquippedCustomize* GetEquippedCustomizeData(const class FString& PlayerId);
	class UDbpEvent* GetEventData();
	class UDbpGallery* GetGalleryData();
	class UDbpGuild* GetGuildData();
	class UDbpInventory* GetInventoryData();
	class UDbpLoading* GetLoadingData();
	class UDbpLoginBonus* GetLoginBonusData();
	class UDbpLotteryResult* GetLotteryExchangeResultData();
	class UDbpLotteryHistory* GetLotteryHistory();
	class UDbpLotteryList* GetLotteryListData();
	class UDbpLotteryRate* GetLotteryRateData(const int32 LotteryCode);
	class UDbpLotteryResult* GetLotteryResultData();
	class UDbpMainMenu* GetMainMenuData();
	class UDbpMissionCategoryList* GetMissionCategoryListData();
	class UDbpMyAd* GetMyAdData();
	class UDbpMyProfile* GetMyProfileData();
	class UDbpNotice* GetNoticeData();
	class UDbpPlayableCharacterList* GetPlayableCharactersData();
	class UDbpPlayerList* GetPlayerListData();
	class UDbpRanking* GetRankingData();
	class UDbpResult* GetResultData();
	class UDbpSeason* GetSeasonData();
	class UDbpSetting* GetSettingData();
	class UDbpShopList* GetShopsData();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DatabaseParams">();
	}
	static class UDatabaseParams* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDatabaseParams>();
	}
};
static_assert(alignof(UDatabaseParams) == 0x000008, "Wrong alignment on UDatabaseParams");
static_assert(sizeof(UDatabaseParams) == 0x0056E0, "Wrong size on UDatabaseParams");
static_assert(offsetof(UDatabaseParams, MyPlayer) == 0x000028, "Member 'UDatabaseParams::MyPlayer' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, Characters) == 0x0006F0, "Member 'UDatabaseParams::Characters' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, Notice) == 0x003648, "Member 'UDatabaseParams::Notice' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, Matching) == 0x003758, "Member 'UDatabaseParams::Matching' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, Shops) == 0x004300, "Member 'UDatabaseParams::Shops' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, Lotteries) == 0x004368, "Member 'UDatabaseParams::Lotteries' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, Missions) == 0x0044F8, "Member 'UDatabaseParams::Missions' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, Players) == 0x0045F8, "Member 'UDatabaseParams::Players' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, BillboardChart) == 0x004D50, "Member 'UDatabaseParams::BillboardChart' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, Guild) == 0x004D70, "Member 'UDatabaseParams::Guild' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, ChatLog) == 0x004F38, "Member 'UDatabaseParams::ChatLog' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, Season) == 0x004FA0, "Member 'UDatabaseParams::Season' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, SpecialLicense) == 0x005028, "Member 'UDatabaseParams::SpecialLicense' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, Event) == 0x0050B8, "Member 'UDatabaseParams::Event' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, Ranking) == 0x0050C8, "Member 'UDatabaseParams::Ranking' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, Setting) == 0x005460, "Member 'UDatabaseParams::Setting' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, Battle) == 0x005540, "Member 'UDatabaseParams::Battle' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, _dbpMainMenu) == 0x0055F8, "Member 'UDatabaseParams::_dbpMainMenu' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, _dbpMyProfile) == 0x005600, "Member 'UDatabaseParams::_dbpMyProfile' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, _dbpPlayableCharacterList) == 0x005608, "Member 'UDatabaseParams::_dbpPlayableCharacterList' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, _dbpCharacterCustomize) == 0x005610, "Member 'UDatabaseParams::_dbpCharacterCustomize' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, _dbpEquippedCustomize) == 0x005618, "Member 'UDatabaseParams::_dbpEquippedCustomize' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, _dbpShopList) == 0x005620, "Member 'UDatabaseParams::_dbpShopList' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, _dbpLotteryList) == 0x005628, "Member 'UDatabaseParams::_dbpLotteryList' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, _dbpLotteryResult) == 0x005630, "Member 'UDatabaseParams::_dbpLotteryResult' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, _dbpLotteryRate) == 0x005638, "Member 'UDatabaseParams::_dbpLotteryRate' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, _dbpLotteryHistory) == 0x005640, "Member 'UDatabaseParams::_dbpLotteryHistory' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, _dbpLotteryExchangeResult) == 0x005648, "Member 'UDatabaseParams::_dbpLotteryExchangeResult' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, _dbpMissionCategoryList) == 0x005650, "Member 'UDatabaseParams::_dbpMissionCategoryList' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, _dbpNotice) == 0x005658, "Member 'UDatabaseParams::_dbpNotice' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, _dbpPlayerList) == 0x005660, "Member 'UDatabaseParams::_dbpPlayerList' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, _dbpBillboardChart) == 0x005668, "Member 'UDatabaseParams::_dbpBillboardChart' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, _dbpResult) == 0x005670, "Member 'UDatabaseParams::_dbpResult' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, _dbpGuild) == 0x005678, "Member 'UDatabaseParams::_dbpGuild' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, _dbpChat) == 0x005680, "Member 'UDatabaseParams::_dbpChat' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, _dbpMyAd) == 0x005688, "Member 'UDatabaseParams::_dbpMyAd' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, _dbpInventory) == 0x005690, "Member 'UDatabaseParams::_dbpInventory' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, _dbpSeason) == 0x005698, "Member 'UDatabaseParams::_dbpSeason' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, _dbpEvent) == 0x0056A0, "Member 'UDatabaseParams::_dbpEvent' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, _dbpRanking) == 0x0056A8, "Member 'UDatabaseParams::_dbpRanking' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, _dbpGallery) == 0x0056B0, "Member 'UDatabaseParams::_dbpGallery' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, _dbLoginBonus) == 0x0056B8, "Member 'UDatabaseParams::_dbLoginBonus' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, _dbpSetting) == 0x0056C0, "Member 'UDatabaseParams::_dbpSetting' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, _dbpLoading) == 0x0056C8, "Member 'UDatabaseParams::_dbpLoading' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, _dbpDedicatedServer) == 0x0056D0, "Member 'UDatabaseParams::_dbpDedicatedServer' has a wrong offset!");
static_assert(offsetof(UDatabaseParams, _dbpCustomMatching) == 0x0056D8, "Member 'UDatabaseParams::_dbpCustomMatching' has a wrong offset!");

// Class BackendSubsystem.DbpBillboardChart
// 0x0008 (0x0030 - 0x0028)
class UDbpBillboardChart final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetSeasonTotal();
	int32 GetTodayTotal();
	TArray<struct FDbBillboardVoterParam> GetVoterList();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DbpBillboardChart">();
	}
	static class UDbpBillboardChart* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDbpBillboardChart>();
	}
};
static_assert(alignof(UDbpBillboardChart) == 0x000008, "Wrong alignment on UDbpBillboardChart");
static_assert(sizeof(UDbpBillboardChart) == 0x000030, "Wrong size on UDbpBillboardChart");

// Class BackendSubsystem.DbpMyAd
// 0x0060 (0x0088 - 0x0028)
class UDbpMyAd final : public UObject
{
public:
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<struct FMasterDataMyAdParts> GetMyAdPartsDataList(const EMyAdPartsCategory Category);

	bool CanDelivery() const;
	bool CanUnlock() const;
	int32 GetCurrencyCount() const;
	int32 GetDeliveryPrice() const;
	const TArray<struct FDbAdDataParam> GetMyAdList() const;
	const TArray<struct FMasterDataMyAdMessage> GetMyAdMessagesDataList() const;
	int32 GetUnlockedAdSpaceCount() const;
	int32 GetUnlockPrice() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DbpMyAd">();
	}
	static class UDbpMyAd* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDbpMyAd>();
	}
};
static_assert(alignof(UDbpMyAd) == 0x000008, "Wrong alignment on UDbpMyAd");
static_assert(sizeof(UDbpMyAd) == 0x000088, "Wrong size on UDbpMyAd");

// Class BackendSubsystem.DbpCharacterCustomize
// 0x0970 (0x0998 - 0x0028)
class UDbpCharacterCustomize final : public UObject
{
public:
	uint8                                         Pad_28[0x970];                                     // 0x0028(0x0970)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetAppealList(TArray<struct FDbsAppealParam>* OutUnlocked, TArray<struct FDbsAppealParam>* OutLocked);
	bool GetCostumeList(TArray<struct FDbsCostumeParam>* OutUnlocked, TArray<struct FDbsCostumeParam>* OutLocked);
	bool GetEmblemList(TArray<struct FDbsEmblemParam>* OutUnlocked, TArray<struct FDbsEmblemParam>* OutLocked);
	struct FDbsCostumeParam GetEquippedCostume();
	struct FDbsVariationParam GetEquippedVariation();
	const TArray<struct FDbPresetParam> GetPresets();
	bool GetVariationList(TArray<struct FDbsVariationParam>* OutUnlocked, TArray<struct FDbsVariationParam>* OutLocked);
	bool GetVoiceList(TArray<struct FDbsVoiceParam>* OutUnlocked, TArray<struct FDbsVoiceParam>* OutLocked);

	bool GetCharacter(struct FDbMyCharacterParam* Character) const;
	int32 GetCharacterCode() const;
	TArray<struct FDbsAppealParam> GetEquippedAppeals() const;
	TArray<struct FDbsEmblemParam> GetEquippedEmblems() const;
	int32 GetEquippedVariationNo() const;
	TArray<struct FDbsVoiceParam> GetEquippedVoices() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DbpCharacterCustomize">();
	}
	static class UDbpCharacterCustomize* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDbpCharacterCustomize>();
	}
};
static_assert(alignof(UDbpCharacterCustomize) == 0x000008, "Wrong alignment on UDbpCharacterCustomize");
static_assert(sizeof(UDbpCharacterCustomize) == 0x000998, "Wrong size on UDbpCharacterCustomize");

// Class BackendSubsystem.DbpChat
// 0x0008 (0x0030 - 0x0028)
class UDbpChat final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<struct FDbChatLogParam> GetAllLogList() const;
	TArray<struct FDbChatLogParam> GetLogList(const int32 Max) const;
	TArray<struct FDbChatLogParam> GetNewChatList() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DbpChat">();
	}
	static class UDbpChat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDbpChat>();
	}
};
static_assert(alignof(UDbpChat) == 0x000008, "Wrong alignment on UDbpChat");
static_assert(sizeof(UDbpChat) == 0x000030, "Wrong size on UDbpChat");

// Class BackendSubsystem.DbpCustomMatching
// 0x0008 (0x0030 - 0x0028)
class UDbpCustomMatching final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void MakeRandomMatchMemberParam(int32 SquadNum, int32 PlayerNum, TArray<struct FDbCustomMatchingMemberParamList>* OutData);
	void SetAllowAllChat(bool Flag);
	void SetPublicRoomKey(bool Flag);
	void SetRoomPlayModeCode(int32 Code);
	class FString ToStringCustomMatchingMyUserData();
	class FString ToStringCustomMatchingRoomData();
	class FString ToStringCustomMatchingStandbyList();
	class FString ToStringCustomMatchingTeamDataList();

	int32 GetRoomPlayModeCode() const;
	bool IsAllowAllChat() const;
	bool IsPublicRoomKey() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DbpCustomMatching">();
	}
	static class UDbpCustomMatching* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDbpCustomMatching>();
	}
};
static_assert(alignof(UDbpCustomMatching) == 0x000008, "Wrong alignment on UDbpCustomMatching");
static_assert(sizeof(UDbpCustomMatching) == 0x000030, "Wrong size on UDbpCustomMatching");

// Class BackendSubsystem.DbpLotteryResult
// 0x0010 (0x0038 - 0x0028)
class UDbpLotteryResult final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<struct FDbLotteryResultItem> GetItems();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DbpLotteryResult">();
	}
	static class UDbpLotteryResult* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDbpLotteryResult>();
	}
};
static_assert(alignof(UDbpLotteryResult) == 0x000008, "Wrong alignment on UDbpLotteryResult");
static_assert(sizeof(UDbpLotteryResult) == 0x000038, "Wrong size on UDbpLotteryResult");

// Class BackendSubsystem.DbpDedicatedServer
// 0x0008 (0x0030 - 0x0028)
class UDbpDedicatedServer final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetCustomize(const class FString& PlayerId, TArray<struct FMasterDataCustomizeVoice>* Voice, TArray<struct FMasterDataCustomizeEmote>* Appeal, TArray<struct FMasterDataEmblem>* Emblem) const;
	struct FDbPlayerParam GetPlayer(const class FString& PlayerId) const;
	TArray<struct FDbPlayerParam> GetPlayerList() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DbpDedicatedServer">();
	}
	static class UDbpDedicatedServer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDbpDedicatedServer>();
	}
};
static_assert(alignof(UDbpDedicatedServer) == 0x000008, "Wrong alignment on UDbpDedicatedServer");
static_assert(sizeof(UDbpDedicatedServer) == 0x000030, "Wrong size on UDbpDedicatedServer");

// Class BackendSubsystem.DbpPlayerList
// 0x0008 (0x0030 - 0x0028)
class UDbpPlayerList final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetCounts(const EFriendListType ListType, int32* FriendsCount, int32* MaxFriendsCount, int32* Maxpage);
	struct FDbPlayerParam GetPlayer(const class FString& PlayerId);
	TArray<struct FDbPlayerParam> GetPlayerList(const int32 PageNo, const EFriendListType ListType, const EFriendListSortOrder Sort);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DbpPlayerList">();
	}
	static class UDbpPlayerList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDbpPlayerList>();
	}
};
static_assert(alignof(UDbpPlayerList) == 0x000008, "Wrong alignment on UDbpPlayerList");
static_assert(sizeof(UDbpPlayerList) == 0x000030, "Wrong size on UDbpPlayerList");

// Class BackendSubsystem.DbpEquippedCustomize
// 0x0020 (0x0048 - 0x0028)
class UDbpEquippedCustomize final : public UObject
{
public:
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetEquipAuraDisplayArea() const;
	int32 GetEquipAuraDisplayTarget() const;
	const TArray<int32> GetEquippedAppealCodes() const;
	int32 GetEquippedAuraLevel() const;
	int32 GetEquippedCharacterCode() const;
	int32 GetEquippedCostumeCode() const;
	const TArray<int32> GetEquippedEmblemCodes() const;
	int32 GetEquippedVariationCode() const;
	const TArray<int32> GetEquippedVoiceCodes() const;
	int32 GetVariationCode() const;
	int32 GetVariationNo() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DbpEquippedCustomize">();
	}
	static class UDbpEquippedCustomize* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDbpEquippedCustomize>();
	}
};
static_assert(alignof(UDbpEquippedCustomize) == 0x000008, "Wrong alignment on UDbpEquippedCustomize");
static_assert(sizeof(UDbpEquippedCustomize) == 0x000048, "Wrong size on UDbpEquippedCustomize");

// Class BackendSubsystem.DbpEvent
// 0x0008 (0x0030 - 0x0028)
class UDbpEvent final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool Get(const int32 Code, struct FDbEventParam* Ev) const;
	const TArray<struct FDbEventParam> GetEventList() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DbpEvent">();
	}
	static class UDbpEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDbpEvent>();
	}
};
static_assert(alignof(UDbpEvent) == 0x000008, "Wrong alignment on UDbpEvent");
static_assert(sizeof(UDbpEvent) == 0x000030, "Wrong size on UDbpEvent");

// Class BackendSubsystem.DbpGallery
// 0x0010 (0x0038 - 0x0028)
class UDbpGallery final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool Get(const int32 Code, struct FDbGalleryDataParam* Gallery);
	bool GetFirst(struct FDbGalleryDataParam* Gallery);
	bool GetShortageTickets(const int32 Code, int32* Ticket1, int32* Ticket2, int32* Ticket3);
	bool GetTicketCounts(const int32 Code, int32* Ticket1, int32* Ticket2, int32* Ticket3);
	bool GetTicketCountsFirstCode(int32* Ticket1, int32* Ticket2, int32* Ticket3);

	int32 GetOpenablePanelCount(const int32 Code) const;
	int32 GetTotalOpenablePanelCount(const int32 Code) const;
	int32 GetTotalTicketCount(const int32 Code) const;
	int32 GetTotalUsedTicketCount(const int32 Code) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DbpGallery">();
	}
	static class UDbpGallery* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDbpGallery>();
	}
};
static_assert(alignof(UDbpGallery) == 0x000008, "Wrong alignment on UDbpGallery");
static_assert(sizeof(UDbpGallery) == 0x000038, "Wrong size on UDbpGallery");

// Class BackendSubsystem.DbpGuild
// 0x0010 (0x0038 - 0x0028)
class UDbpGuild final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FDbMyGuildInfoParam GetMyGuildInfo();
	int32 GetPoint();
	TArray<struct FDbGuildRecord> GetRecords();
	TArray<struct FDbGuildInfoParam> GetSearchedGuildList();
	bool IsGuildEventOpen();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DbpGuild">();
	}
	static class UDbpGuild* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDbpGuild>();
	}
};
static_assert(alignof(UDbpGuild) == 0x000008, "Wrong alignment on UDbpGuild");
static_assert(sizeof(UDbpGuild) == 0x000038, "Wrong size on UDbpGuild");

// Class BackendSubsystem.DbpInventory
// 0x0008 (0x0030 - 0x0028)
class UDbpInventory final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<struct FDbItemStockParam> GetStockList(const EItemListSortOrder Sort, const EItemCategory Filter) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DbpInventory">();
	}
	static class UDbpInventory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDbpInventory>();
	}
};
static_assert(alignof(UDbpInventory) == 0x000008, "Wrong alignment on UDbpInventory");
static_assert(sizeof(UDbpInventory) == 0x000030, "Wrong size on UDbpInventory");

// Class BackendSubsystem.DbpLoading
// 0x0200 (0x0228 - 0x0028)
class UDbpLoading final : public UObject
{
public:
	uint8                                         Pad_28[0x200];                                     // 0x0028(0x0200)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	const struct FDbGalleryDataParam GetRandomOpenedGallery() const;
	class FText GetRandomTips() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DbpLoading">();
	}
	static class UDbpLoading* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDbpLoading>();
	}
};
static_assert(alignof(UDbpLoading) == 0x000008, "Wrong alignment on UDbpLoading");
static_assert(sizeof(UDbpLoading) == 0x000228, "Wrong size on UDbpLoading");

// Class BackendSubsystem.DbpLoginBonus
// 0x0010 (0x0038 - 0x0028)
class UDbpLoginBonus final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool Get(const int32 Code, struct FDbLoginBonus* LoginBonus);
	void GetDailyBonus(struct FDbLoginBonus* FreeLoginBonus, struct FDbLoginBonus* PremiumLoginBonus);
	void GetLoginBonusList(struct FDbLoginBonusListParam* List);
	void GetReceivedDailyBonusItemList(TArray<struct FDbLoginBonusItem>* FreeReceivedDailyBonus, TArray<struct FDbLoginBonusItem>* PremiumReceivedDailyBonus);

	bool CanBuyPremiumDailyLoginBonusTicket() const;
	bool CanReceiveBonus() const;
	TArray<struct FDbLoginBonusItem> GetBonusItemListToday() const;
	TArray<int32> GetCampaignLoginBonusCodes() const;
	int32 GetCurrency() const;
	void GetDailyLoginBonusCodes(int32* FreeLoginBonusCode, int32* PremiumLoginBonusCode) const;
	TArray<int32> GetEventLoginBonusCodes() const;
	int32 GetPremiumDailyLoginBonusRemainDays() const;
	const TArray<struct FDbLoginBonusItem> GetReceivedBonusItemList(int32 LoginBonusCode) const;
	bool IsPremiumAvailable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DbpLoginBonus">();
	}
	static class UDbpLoginBonus* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDbpLoginBonus>();
	}
};
static_assert(alignof(UDbpLoginBonus) == 0x000008, "Wrong alignment on UDbpLoginBonus");
static_assert(sizeof(UDbpLoginBonus) == 0x000038, "Wrong size on UDbpLoginBonus");

// Class BackendSubsystem.DbpLotteryHistory
// 0x0010 (0x0038 - 0x0028)
class UDbpLotteryHistory final : public UObject
{
public:
	int32                                         MaxPageCount;                                      // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0xC];                                       // 0x002C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	const TArray<struct FDbLotteryHistory> GetHistory(const int32 PageNo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DbpLotteryHistory">();
	}
	static class UDbpLotteryHistory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDbpLotteryHistory>();
	}
};
static_assert(alignof(UDbpLotteryHistory) == 0x000008, "Wrong alignment on UDbpLotteryHistory");
static_assert(sizeof(UDbpLotteryHistory) == 0x000038, "Wrong size on UDbpLotteryHistory");
static_assert(offsetof(UDbpLotteryHistory, MaxPageCount) == 0x000028, "Member 'UDbpLotteryHistory::MaxPageCount' has a wrong offset!");

// Class BackendSubsystem.DbpLotteryList
// 0x0010 (0x0038 - 0x0028)
class UDbpLotteryList final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	const struct FDbLotteryParam GetLottery(const int32 LotteryCode) const;
	const TArray<struct FDbLotteryParam> GetLotteryList() const;
	int32 GetTicketCountSingle() const;
	int32 GetTicketCountTen() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DbpLotteryList">();
	}
	static class UDbpLotteryList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDbpLotteryList>();
	}
};
static_assert(alignof(UDbpLotteryList) == 0x000008, "Wrong alignment on UDbpLotteryList");
static_assert(sizeof(UDbpLotteryList) == 0x000038, "Wrong size on UDbpLotteryList");

// Class BackendSubsystem.DbpLotteryRate
// 0x0010 (0x0038 - 0x0028)
class UDbpLotteryRate final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<struct FDbpLotteryRateSheet> GetRateSheets();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DbpLotteryRate">();
	}
	static class UDbpLotteryRate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDbpLotteryRate>();
	}
};
static_assert(alignof(UDbpLotteryRate) == 0x000008, "Wrong alignment on UDbpLotteryRate");
static_assert(sizeof(UDbpLotteryRate) == 0x000038, "Wrong size on UDbpLotteryRate");

// Class BackendSubsystem.DbpMainMenu
// 0x0180 (0x01A8 - 0x0028)
class UDbpMainMenu final : public UObject
{
public:
	uint8                                         Pad_28[0x180];                                     // 0x0028(0x0180)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetAuraLevel();
	struct FMasterDataCharacter GetCharacterMasterData();
	struct FMasterDataCustomizeCostume GetCostumeMasterData();
	int32 GetCurrencyCount(ECurrencyType EType);
	class FString GetPlatformPlayerId();
	class FString GetPlatformPlayerName();
	class FString GetPlayerId();
	class FString GetPlayerName();
	ETutorialStepNo GetTutorialStepNo();
	bool IsFeatureOpened(ETutorialOpenFeature EFeature);

	bool CanKickMember(const class FString& KickTargetPlayerId) const;
	const TArray<struct FDbAdDataParam> GetAdList() const;
	int32 GetBattleReadyMemberCount() const;
	void GetCpuSquadMember(TArray<struct FDbPlayerParam>* Result) const;
	void GetDedicatedServer(class FString* ServerHost, int32* ServerPort) const;
	void GetFetchedSquadConnectionServer(class FString* Host, int32* Port) const;
	const TArray<struct FDbSquadMemberParam> GetFetchedSquadMemberList() const;
	class FString GetGuildId() const;
	class FString GetGuildName() const;
	const TArray<struct FDbInvitingInfoParam> GetInvitingList() const;
	struct FDateTime GetMaintenanceStartTime() const;
	int32 GetMaxSquadMemberCount() const;
	class FString GetSquadId() const;
	class FString GetSquadLeaderPlayerId() const;
	const struct FDbPlayerParam GetSquadMember(const class FString& PlayerId) const;
	int32 GetSquadMemberCount() const;
	const TArray<struct FDbSquadMemberParam> GetSquadMemberList() const;
	class FString GetSquadPassword() const;
	int32 GetUnreadNoticeCount() const;
	int32 GetVoiceChatEnabledSquadMemberCount() const;
	bool IsAllSquadMemberReady() const;
	bool IsBonusRemainsToday() const;
	bool IsFullSquadMember() const;
	bool IsMaintenanceTimeToSet() const;
	bool IsReadyForLobbyMatching() const;
	bool IsSquadJoined() const;
	bool IsSquadLeader() const;
	bool IsSquadLoaded() const;
	bool IsSquadMember(const class FString& PlayerId) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DbpMainMenu">();
	}
	static class UDbpMainMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDbpMainMenu>();
	}
};
static_assert(alignof(UDbpMainMenu) == 0x000008, "Wrong alignment on UDbpMainMenu");
static_assert(sizeof(UDbpMainMenu) == 0x0001A8, "Wrong size on UDbpMainMenu");

// Class BackendSubsystem.DbpMissionCategoryList
// 0x0008 (0x0030 - 0x0028)
class UDbpMissionCategoryList final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetEventList(TArray<struct FMasterDataEvent>* EventList);
	const struct FDbMissionCategoryParam GetMissionList(const EMdMissionCategory Category, const int32 EventCode);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DbpMissionCategoryList">();
	}
	static class UDbpMissionCategoryList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDbpMissionCategoryList>();
	}
};
static_assert(alignof(UDbpMissionCategoryList) == 0x000008, "Wrong alignment on UDbpMissionCategoryList");
static_assert(sizeof(UDbpMissionCategoryList) == 0x000030, "Wrong size on UDbpMissionCategoryList");

// Class BackendSubsystem.DbpMyProfile
// 0x01E8 (0x0210 - 0x0028)
class UDbpMyProfile final : public UObject
{
public:
	uint8                                         Pad_28[0x1E8];                                     // 0x0028(0x01E8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FMasterDataCharacter GetCharacter();
	struct FMasterDataCustomizeCostume GetCostume();
	TArray<struct FMasterDataEmblem> GetEmblems();
	class FString GetPlatformPlayerName();
	class FString GetPlayerName();
	class FString GetProfile();

	int32 GetBillboardPoint() const;
	int32 GetBillboardRank() const;
	int32 GetBillboardTodayPoint() const;
	int32 GetEquipAuraDisplayArea() const;
	int32 GetEquipAuraDisplayTarget() const;
	int32 GetEquipAuraLevel() const;
	bool GetLevel(int32* Level, int32* LevelPoint) const;
	bool GetRank(struct FMasterDataRankExp* Rank, int32* RankPoint) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DbpMyProfile">();
	}
	static class UDbpMyProfile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDbpMyProfile>();
	}
};
static_assert(alignof(UDbpMyProfile) == 0x000008, "Wrong alignment on UDbpMyProfile");
static_assert(sizeof(UDbpMyProfile) == 0x000210, "Wrong size on UDbpMyProfile");

// Class BackendSubsystem.DbpNotice
// 0x00F0 (0x0118 - 0x0028)
class UDbpNotice final : public UObject
{
public:
	uint8                                         Pad_28[0xF0];                                      // 0x0028(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<struct FDbInformationInfoParam> GetInformationList();
	const struct FDbInvitationInfoParam GetInvitation(const class FString& NoticeId);
	TArray<struct FDbInvitationInfoParam> GetInvitationList();
	int32 GetMaxPageNo(ENoticeCategory ECategory);
	TArray<struct FDbNoticeOpenedNoticeParam> GetOpenedNotices();
	int32 GetPageNo(ENoticeCategory ECategory);
	TArray<struct FDbInformationReceivedItemParam> GetReceivedItems();
	struct FDbRecommendNoticeParam GetRecommend();
	bool HasUnreadInvitation();
	bool HasUnreadNotice();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DbpNotice">();
	}
	static class UDbpNotice* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDbpNotice>();
	}
};
static_assert(alignof(UDbpNotice) == 0x000008, "Wrong alignment on UDbpNotice");
static_assert(sizeof(UDbpNotice) == 0x000118, "Wrong size on UDbpNotice");

// Class BackendSubsystem.DbpPlayableCharacterList
// 0x0008 (0x0030 - 0x0028)
class UDbpPlayableCharacterList final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<struct FDbMyCharacterParam> GetCharacterList() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DbpPlayableCharacterList">();
	}
	static class UDbpPlayableCharacterList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDbpPlayableCharacterList>();
	}
};
static_assert(alignof(UDbpPlayableCharacterList) == 0x000008, "Wrong alignment on UDbpPlayableCharacterList");
static_assert(sizeof(UDbpPlayableCharacterList) == 0x000030, "Wrong size on UDbpPlayableCharacterList");

// Class BackendSubsystem.DbpRanking
// 0x0008 (0x0030 - 0x0028)
class UDbpRanking final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	const TArray<int32> GetAllRankingCodes();
	const TArray<struct FDbRankingParam> GetAllRankingsForDebug();
	const struct FDbRankingParam GetBillboardChartRanking();
	const TArray<struct FDbRankingParam> GetEventRankings();
	const struct FDbRankingParam GetGuildEliteRanking();
	const struct FDbRankingParam GetGuildTopRanking();
	const struct FDbRankingParam GetMvpRanking();
	const struct FDbRankingParam GetRankingByCode(const int32 Code);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DbpRanking">();
	}
	static class UDbpRanking* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDbpRanking>();
	}
};
static_assert(alignof(UDbpRanking) == 0x000008, "Wrong alignment on UDbpRanking");
static_assert(sizeof(UDbpRanking) == 0x000030, "Wrong size on UDbpRanking");

// Class BackendSubsystem.DbpResult
// 0x0020 (0x0048 - 0x0028)
class UDbpResult final : public UObject
{
public:
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetCurrentGold() const;
	int32 GetCurrentGuildPoint() const;
	int32 GetCurrentPlayerLevel() const;
	int32 GetCurrentPlayerLevelExp() const;
	const struct FMasterDataRankExp GetCurrentPlayerRank() const;
	int32 GetCurrentPlayerRankExp() const;
	int32 GetCurrentSeasonPassRank() const;
	int32 GetCurrentSeasonPassRankExp() const;
	int32 GetCurrentSpecialLicenseRank() const;
	int32 GetCurrentSpecialLicenseRankExp() const;
	class FString GetGuildId() const;
	class FString GetGuildName() const;
	int32 GetPrevGold() const;
	int32 GetPrevPlayerLevel() const;
	int32 GetPrevPlayerLevelExp() const;
	const struct FMasterDataRankExp GetPrevPlayerRank() const;
	int32 GetPrevPlayerRankExp() const;
	int32 GetPrevSeasonPassRank() const;
	int32 GetPrevSeasonPassRankExp() const;
	bool HasTopLicense() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DbpResult">();
	}
	static class UDbpResult* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDbpResult>();
	}
};
static_assert(alignof(UDbpResult) == 0x000008, "Wrong alignment on UDbpResult");
static_assert(sizeof(UDbpResult) == 0x000048, "Wrong size on UDbpResult");

// Class BackendSubsystem.DbpSeason
// 0x0018 (0x0040 - 0x0028)
class UDbpSeason final : public UObject
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddSpecialLicenseExp(const int32 Exp);

	bool CanBuyProLicense() const;
	bool CanBuyProLicenseWithExp() const;
	int32 GetAvailableSpecialLicenseExpCount() const;
	int32 GetHeroCrystal() const;
	int32 GetNextRankExp() const;
	int32 GetProLicensePrice() const;
	int32 GetProLicensePriceWithExp() const;
	TArray<struct FDbSeasonPassParam> GetRewardRange(const int32 RankFrom, const int32 RankTo) const;
	TArray<struct FDbSeasonPassParam> GetRewards(const int32 Rank) const;
	const struct FDbSeasonParam GetSeasonInfo() const;
	int32 GetSpecialLicenseExp() const;
	int32 GetSpecialLicenseExpPrice() const;
	const TArray<struct FDbSpecialLicenseReward> GetSpecialLicenseLastRewards() const;
	const TMap<int32, struct FDbSpecialLicenseParam> GetSpecialLicenseList() const;
	int32 GetSpecialLicenseMaxExp() const;
	int32 GetSpecialLicenseRank() const;
	TMap<struct FDbItemCategoryParam, int32> GetStockItems() const;
	bool HasProLicense() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DbpSeason">();
	}
	static class UDbpSeason* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDbpSeason>();
	}
};
static_assert(alignof(UDbpSeason) == 0x000008, "Wrong alignment on UDbpSeason");
static_assert(sizeof(UDbpSeason) == 0x000040, "Wrong size on UDbpSeason");

// Class BackendSubsystem.DbpSetting
// 0x0008 (0x0030 - 0x0028)
class UDbpSetting final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetCurrentRegionCode(const int32 Code);

	class FString GetActiveInputDeviceId() const;
	class FString GetActiveOutputDeviceId() const;
	int32 GetAuraDisplayArea() const;
	int32 GetAuraDisplayTarget() const;
	struct FDbMatchingRegionSettingParam GetCurrentRegion() const;
	int32 GetCurrentRegionCode() const;
	class FString GetFundSettlementText() const;
	TArray<struct FDbSoundDevice> GetInputDeviceList() const;
	const TMap<int32, struct FDbMatchingRegionSettingParam> GetMatchingRegions() const;
	TArray<struct FDbSoundDevice> GetOutputDeviceList() const;
	class FString GetTokushoText() const;
	class FString GetTrackingNumber() const;
	int32 GetVoiceChatVolume() const;
	bool IsPublicBattleRecord() const;
	bool IsVoiceChatEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DbpSetting">();
	}
	static class UDbpSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDbpSetting>();
	}
};
static_assert(alignof(UDbpSetting) == 0x000008, "Wrong alignment on UDbpSetting");
static_assert(sizeof(UDbpSetting) == 0x000030, "Wrong size on UDbpSetting");

// Class BackendSubsystem.DbpShopList
// 0x0058 (0x0080 - 0x0028)
class UDbpShopList final : public UObject
{
public:
	uint8                                         Pad_28[0x58];                                      // 0x0028(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetCurrencyCount(ECurrencyType EType);

	TArray<int32> GetMiscShopCodes() const;
	TArray<int32> GetNormalShopCodes() const;
	TArray<int32> GetPremiumShopCodes() const;
	const struct FDbShopParam GetShop(const int32 ShopCode) const;
	TArray<int32> GetShopCodes() const;
	const struct FDbShopItemParam GetShopItem(const int32 ShopCode, const int32 ShopItemCode) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DbpShopList">();
	}
	static class UDbpShopList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDbpShopList>();
	}
};
static_assert(alignof(UDbpShopList) == 0x000008, "Wrong alignment on UDbpShopList");
static_assert(sizeof(UDbpShopList) == 0x000080, "Wrong size on UDbpShopList");

// Class BackendSubsystem.MasterDataCache
// 0x0000 (0x0028 - 0x0028)
class UMasterDataCache final : public UBlueprintFunctionLibrary
{
public:
	static void Clear(bool bLock);
	static void GetAbandonedVoice(int32 Code, struct FMasterDataAbandonedVoice* MasterData);
	static void GetAbility(int32 Code, struct FMasterDataAbility* MasterData);
	static void GetBonusExp(int32 Code, struct FMasterDataBonusExp* MasterData);
	static void GetCharacter(int32 Code, struct FMasterDataCharacter* MasterData);
	static int32 GetConfigValue(EConfigKeyValueEkey Key);
	static void GetCurrency(int32 Code, struct FMasterDataCurrency* MasterData);
	static int32 GetCurrencyCode(ECurrencyType Type);
	static void GetCustomizeCostume(int32 Code, struct FMasterDataCustomizeCostume* MasterData);
	static void GetCustomizeEmote(int32 Code, struct FMasterDataCustomizeEmote* MasterData);
	static void GetCustomizeVoice(int32 Code, struct FMasterDataCustomizeVoice* MasterData);
	static void GetDedicatedVoice(int32 Code, struct FMasterDataDedicatedVoice* MasterData);
	static void GetDefaultEquipSet(int32 Code, struct FMasterDataDefaultEquipSet* MasterData);
	static void GetEmblem(int32 Code, struct FMasterDataEmblem* MasterData);
	static void GetEvent(int32 Code, struct FMasterDataEvent* MasterData);
	static void GetGallery(int32 Code, struct FMasterDataGallery* MasterData);
	static void GetGameMode(int32 Code, struct FMasterDataGameMode* MasterData);
	static void GetGmDisplayName(int32 Code, struct FMasterDataGameMode* MasterData);
	static void GetGuildEmblem(int32 Code, struct FMasterDataGuildEmblem* MasterData);
	static void GetGuildInstitution(int32 Code, struct FMasterDataGuildInstitution* MasterData);
	static void GetGuildLeague(int32 Code, struct FMasterDataMGuildLeagues* MasterData);
	static void GetGuildLevel(int32 Code, struct FMasterDataGuildLevel* MasterData);
	static void GetItemCategory(int32 Code, struct FMasterDataItemCategory* MasterData);
	static void GetLoginBonus(int32 Code, struct FMasterDataLoginBonus* MasterData);
	static void GetLottery(int32 Code, struct FMasterDataLottery* MasterData);
	static void GetMission(int32 Code, struct FMasterDataMission* MasterData);
	static void GetMissionPattern(int32 Code, struct FMasterDataMissionPattern* MasterData);
	static void GetMissionStar(int32 Code, struct FMasterDataMissionStar* MasterData);
	static void GetMLootboxPayment(int32 Code, struct FMasterDataMLootboxPayment* MasterData);
	static void GetMRandomItemWin(int32 Code, struct FMasterDataMRandomItemWin* MasterData);
	static void GetMRanking(int32 Code, struct FMasterDataMRanking* MasterData);
	static void GetMSpecialEffect(int32 Code, struct FMasterDataMSpecialEffect* MasterData);
	static void GetMyAdMessage(int32 Code, struct FMasterDataMyAdMessage* MasterData);
	static void GetMyAdParts(int32 Code, struct FMasterDataMyAdParts* MasterData);
	static void GetPack(int32 Code, struct FMasterDataPack* MasterData);
	static void GetPackItem(int32 Code, struct FMasterDataPackItem* MasterData);
	static void GetPenaltyPoint(int32 Code, struct FMasterDataPenaltyPoint* MasterData);
	static void GetPlayerExp(int32 Code, struct FMasterDataPlayerExp* MasterData);
	static void GetPlayMenuMenulist(int32 Code, struct FMasterDataPlayMenuMenulist* MasterData);
	static void GetPlayMode(int32 Code, struct FMasterDataPlayMode* MasterData);
	static void GetRankExp(int32 Code, struct FMasterDataRankExp* MasterData);
	static void GetRankPoint(int32 Code, struct FMasterDataRankPoint* MasterData);
	static void GetRecommendNotice(int32 Code, struct FMasterDataRecommendNotice* MasterData);
	static void GetScore(int32 Code, struct FMasterDataScore* MasterData);
	static void GetScoreRank(int32 Code, struct FMasterDataScoreRank* MasterData);
	static int32 GetScreenId(const EScreenName Name_0);
	static void GetSeason(int32 Code, struct FMasterDataSeason* MasterData);
	static void GetShop(int32 Code, struct FMasterDataShop* MasterData);
	static void GetShopItem(int32 Code, struct FMasterDataShopItem* MasterData);
	static void GetSpecialLicense(int32 Code, struct FMasterDataSpecialLicense* MasterData);
	static void GetTipsText(int32 Code, struct FMasterDataTipsText* MasterData);
	static void GetVariation(int32 Code, struct FMasterDataVariation* MasterData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MasterDataCache">();
	}
	static class UMasterDataCache* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMasterDataCache>();
	}
};
static_assert(alignof(UMasterDataCache) == 0x000008, "Wrong alignment on UMasterDataCache");
static_assert(sizeof(UMasterDataCache) == 0x000028, "Wrong size on UMasterDataCache");

// Class BackendSubsystem.WebApiCacheManager
// 0x0148 (0x0170 - 0x0028)
class UWebApiCacheManager final : public UObject
{
public:
	uint8                                         Pad_28[0x140];                                     // 0x0028(0x0140)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             _settingDataTable;                                 // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WebApiCacheManager">();
	}
	static class UWebApiCacheManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWebApiCacheManager>();
	}
};
static_assert(alignof(UWebApiCacheManager) == 0x000008, "Wrong alignment on UWebApiCacheManager");
static_assert(sizeof(UWebApiCacheManager) == 0x000170, "Wrong size on UWebApiCacheManager");
static_assert(offsetof(UWebApiCacheManager, _settingDataTable) == 0x000168, "Member 'UWebApiCacheManager::_settingDataTable' has a wrong offset!");

}

