#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UIFramework

#include "Basic.hpp"

#include "UIFramework_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Slate_structs.hpp"
#include "SlateCore_structs.hpp"
#include "InputCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function UIFramework.WidgetBase.BP_NativePlayAll
// 0x0014 (0x0014 - 0x0000)
struct WidgetBase_BP_NativePlayAll final
{
public:
	class FName                                   AnimationName;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopCount;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsReverse;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetBase_BP_NativePlayAll) == 0x000004, "Wrong alignment on WidgetBase_BP_NativePlayAll");
static_assert(sizeof(WidgetBase_BP_NativePlayAll) == 0x000014, "Wrong size on WidgetBase_BP_NativePlayAll");
static_assert(offsetof(WidgetBase_BP_NativePlayAll, AnimationName) == 0x000000, "Member 'WidgetBase_BP_NativePlayAll::AnimationName' has a wrong offset!");
static_assert(offsetof(WidgetBase_BP_NativePlayAll, LoopCount) == 0x000008, "Member 'WidgetBase_BP_NativePlayAll::LoopCount' has a wrong offset!");
static_assert(offsetof(WidgetBase_BP_NativePlayAll, StartTime) == 0x00000C, "Member 'WidgetBase_BP_NativePlayAll::StartTime' has a wrong offset!");
static_assert(offsetof(WidgetBase_BP_NativePlayAll, IsReverse) == 0x000010, "Member 'WidgetBase_BP_NativePlayAll::IsReverse' has a wrong offset!");

// Function UIFramework.WidgetBase.BP_PlayAll
// 0x0018 (0x0018 - 0x0000)
struct WidgetBase_BP_PlayAll final
{
public:
	const class UWidgetAnimation*                 Animation;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopCount;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsReverse;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetBase_BP_PlayAll) == 0x000008, "Wrong alignment on WidgetBase_BP_PlayAll");
static_assert(sizeof(WidgetBase_BP_PlayAll) == 0x000018, "Wrong size on WidgetBase_BP_PlayAll");
static_assert(offsetof(WidgetBase_BP_PlayAll, Animation) == 0x000000, "Member 'WidgetBase_BP_PlayAll::Animation' has a wrong offset!");
static_assert(offsetof(WidgetBase_BP_PlayAll, LoopCount) == 0x000008, "Member 'WidgetBase_BP_PlayAll::LoopCount' has a wrong offset!");
static_assert(offsetof(WidgetBase_BP_PlayAll, StartTime) == 0x00000C, "Member 'WidgetBase_BP_PlayAll::StartTime' has a wrong offset!");
static_assert(offsetof(WidgetBase_BP_PlayAll, IsReverse) == 0x000010, "Member 'WidgetBase_BP_PlayAll::IsReverse' has a wrong offset!");

// Function UIFramework.WidgetBase.CopyWidgetAnimations
// 0x0010 (0x0010 - 0x0000)
struct WidgetBase_CopyWidgetAnimations final
{
public:
	class UWidgetBase*                            base;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllChildren;                                      // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride;                                         // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetBase_CopyWidgetAnimations) == 0x000008, "Wrong alignment on WidgetBase_CopyWidgetAnimations");
static_assert(sizeof(WidgetBase_CopyWidgetAnimations) == 0x000010, "Wrong size on WidgetBase_CopyWidgetAnimations");
static_assert(offsetof(WidgetBase_CopyWidgetAnimations, base) == 0x000000, "Member 'WidgetBase_CopyWidgetAnimations::base' has a wrong offset!");
static_assert(offsetof(WidgetBase_CopyWidgetAnimations, bAllChildren) == 0x000008, "Member 'WidgetBase_CopyWidgetAnimations::bAllChildren' has a wrong offset!");
static_assert(offsetof(WidgetBase_CopyWidgetAnimations, bOverride) == 0x000009, "Member 'WidgetBase_CopyWidgetAnimations::bOverride' has a wrong offset!");

// Function UIFramework.WidgetBase.DelayInitializePriorityInput
// 0x0004 (0x0004 - 0x0000)
struct WidgetBase_DelayInitializePriorityInput final
{
public:
	int32                                         NewZOrder;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetBase_DelayInitializePriorityInput) == 0x000004, "Wrong alignment on WidgetBase_DelayInitializePriorityInput");
static_assert(sizeof(WidgetBase_DelayInitializePriorityInput) == 0x000004, "Wrong size on WidgetBase_DelayInitializePriorityInput");
static_assert(offsetof(WidgetBase_DelayInitializePriorityInput, NewZOrder) == 0x000000, "Member 'WidgetBase_DelayInitializePriorityInput::NewZOrder' has a wrong offset!");

// Function UIFramework.WidgetBase.GetOwningLevelName
// 0x0008 (0x0008 - 0x0000)
struct WidgetBase_GetOwningLevelName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetBase_GetOwningLevelName) == 0x000004, "Wrong alignment on WidgetBase_GetOwningLevelName");
static_assert(sizeof(WidgetBase_GetOwningLevelName) == 0x000008, "Wrong size on WidgetBase_GetOwningLevelName");
static_assert(offsetof(WidgetBase_GetOwningLevelName, ReturnValue) == 0x000000, "Member 'WidgetBase_GetOwningLevelName::ReturnValue' has a wrong offset!");

// Function UIFramework.WidgetBase.InitWidgetAnimations
// 0x0001 (0x0001 - 0x0000)
struct WidgetBase_InitWidgetAnimations final
{
public:
	bool                                          bAllChildren;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetBase_InitWidgetAnimations) == 0x000001, "Wrong alignment on WidgetBase_InitWidgetAnimations");
static_assert(sizeof(WidgetBase_InitWidgetAnimations) == 0x000001, "Wrong size on WidgetBase_InitWidgetAnimations");
static_assert(offsetof(WidgetBase_InitWidgetAnimations, bAllChildren) == 0x000000, "Member 'WidgetBase_InitWidgetAnimations::bAllChildren' has a wrong offset!");

// Function UIFramework.WidgetBase.ReplaceWidgetAnimation
// 0x0018 (0x0018 - 0x0000)
struct WidgetBase_ReplaceWidgetAnimation final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       WidgetAnimation;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllChildren;                                      // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetBase_ReplaceWidgetAnimation) == 0x000008, "Wrong alignment on WidgetBase_ReplaceWidgetAnimation");
static_assert(sizeof(WidgetBase_ReplaceWidgetAnimation) == 0x000018, "Wrong size on WidgetBase_ReplaceWidgetAnimation");
static_assert(offsetof(WidgetBase_ReplaceWidgetAnimation, Name_0) == 0x000000, "Member 'WidgetBase_ReplaceWidgetAnimation::Name_0' has a wrong offset!");
static_assert(offsetof(WidgetBase_ReplaceWidgetAnimation, WidgetAnimation) == 0x000008, "Member 'WidgetBase_ReplaceWidgetAnimation::WidgetAnimation' has a wrong offset!");
static_assert(offsetof(WidgetBase_ReplaceWidgetAnimation, bAllChildren) == 0x000010, "Member 'WidgetBase_ReplaceWidgetAnimation::bAllChildren' has a wrong offset!");

// Function UIFramework.WidgetBase.ReplaceWidgetAnimations
// 0x0058 (0x0058 - 0x0000)
struct WidgetBase_ReplaceWidgetAnimations final
{
public:
	TMap<class FName, class UWidgetAnimation*>    WidgetAnimations;                                  // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bAllChildren;                                      // 0x0050(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetBase_ReplaceWidgetAnimations) == 0x000008, "Wrong alignment on WidgetBase_ReplaceWidgetAnimations");
static_assert(sizeof(WidgetBase_ReplaceWidgetAnimations) == 0x000058, "Wrong size on WidgetBase_ReplaceWidgetAnimations");
static_assert(offsetof(WidgetBase_ReplaceWidgetAnimations, WidgetAnimations) == 0x000000, "Member 'WidgetBase_ReplaceWidgetAnimations::WidgetAnimations' has a wrong offset!");
static_assert(offsetof(WidgetBase_ReplaceWidgetAnimations, bAllChildren) == 0x000050, "Member 'WidgetBase_ReplaceWidgetAnimations::bAllChildren' has a wrong offset!");

// Function UIFramework.WidgetBase.SendToBP_WidgetBaseDesignatedEvent
// 0x0001 (0x0001 - 0x0000)
struct WidgetBase_SendToBP_WidgetBaseDesignatedEvent final
{
public:
	EWidgetBaseEventChannel                       InChannel;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetBase_SendToBP_WidgetBaseDesignatedEvent) == 0x000001, "Wrong alignment on WidgetBase_SendToBP_WidgetBaseDesignatedEvent");
static_assert(sizeof(WidgetBase_SendToBP_WidgetBaseDesignatedEvent) == 0x000001, "Wrong size on WidgetBase_SendToBP_WidgetBaseDesignatedEvent");
static_assert(offsetof(WidgetBase_SendToBP_WidgetBaseDesignatedEvent, InChannel) == 0x000000, "Member 'WidgetBase_SendToBP_WidgetBaseDesignatedEvent::InChannel' has a wrong offset!");

// Function UIFramework.WidgetBase.SetCanTick
// 0x0001 (0x0001 - 0x0000)
struct WidgetBase_SetCanTick final
{
public:
	bool                                          bCanTick;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetBase_SetCanTick) == 0x000001, "Wrong alignment on WidgetBase_SetCanTick");
static_assert(sizeof(WidgetBase_SetCanTick) == 0x000001, "Wrong size on WidgetBase_SetCanTick");
static_assert(offsetof(WidgetBase_SetCanTick, bCanTick) == 0x000000, "Member 'WidgetBase_SetCanTick::bCanTick' has a wrong offset!");

// Function UIFramework.WidgetBase.StopWidgetAnimation
// 0x000C (0x000C - 0x0000)
struct WidgetBase_StopWidgetAnimation final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllChildren;                                      // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetBase_StopWidgetAnimation) == 0x000004, "Wrong alignment on WidgetBase_StopWidgetAnimation");
static_assert(sizeof(WidgetBase_StopWidgetAnimation) == 0x00000C, "Wrong size on WidgetBase_StopWidgetAnimation");
static_assert(offsetof(WidgetBase_StopWidgetAnimation, Name_0) == 0x000000, "Member 'WidgetBase_StopWidgetAnimation::Name_0' has a wrong offset!");
static_assert(offsetof(WidgetBase_StopWidgetAnimation, bAllChildren) == 0x000008, "Member 'WidgetBase_StopWidgetAnimation::bAllChildren' has a wrong offset!");

// Function UIFramework.WidgetBase.StopWidgetAnimations
// 0x0018 (0x0018 - 0x0000)
struct WidgetBase_StopWidgetAnimations final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bAllChildren;                                      // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetBase_StopWidgetAnimations) == 0x000008, "Wrong alignment on WidgetBase_StopWidgetAnimations");
static_assert(sizeof(WidgetBase_StopWidgetAnimations) == 0x000018, "Wrong size on WidgetBase_StopWidgetAnimations");
static_assert(offsetof(WidgetBase_StopWidgetAnimations, Names) == 0x000000, "Member 'WidgetBase_StopWidgetAnimations::Names' has a wrong offset!");
static_assert(offsetof(WidgetBase_StopWidgetAnimations, bAllChildren) == 0x000010, "Member 'WidgetBase_StopWidgetAnimations::bAllChildren' has a wrong offset!");

// Function UIFramework.WidgetBase.StopWidgetAnimationsAll
// 0x0001 (0x0001 - 0x0000)
struct WidgetBase_StopWidgetAnimationsAll final
{
public:
	bool                                          bAllChildren;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetBase_StopWidgetAnimationsAll) == 0x000001, "Wrong alignment on WidgetBase_StopWidgetAnimationsAll");
static_assert(sizeof(WidgetBase_StopWidgetAnimationsAll) == 0x000001, "Wrong size on WidgetBase_StopWidgetAnimationsAll");
static_assert(offsetof(WidgetBase_StopWidgetAnimationsAll, bAllChildren) == 0x000000, "Member 'WidgetBase_StopWidgetAnimationsAll::bAllChildren' has a wrong offset!");

// Function UIFramework.WidgetBase.GetChildWidgets
// 0x0010 (0x0010 - 0x0000)
struct WidgetBase_GetChildWidgets final
{
public:
	TArray<class UWidgetBase*>                    ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetBase_GetChildWidgets) == 0x000008, "Wrong alignment on WidgetBase_GetChildWidgets");
static_assert(sizeof(WidgetBase_GetChildWidgets) == 0x000010, "Wrong size on WidgetBase_GetChildWidgets");
static_assert(offsetof(WidgetBase_GetChildWidgets, ReturnValue) == 0x000000, "Member 'WidgetBase_GetChildWidgets::ReturnValue' has a wrong offset!");

// Function UIFramework.CustomListView.AddScrollOffset
// 0x0004 (0x0004 - 0x0000)
struct CustomListView_AddScrollOffset final
{
public:
	float                                         AddScrollOffset_0;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomListView_AddScrollOffset) == 0x000004, "Wrong alignment on CustomListView_AddScrollOffset");
static_assert(sizeof(CustomListView_AddScrollOffset) == 0x000004, "Wrong size on CustomListView_AddScrollOffset");
static_assert(offsetof(CustomListView_AddScrollOffset, AddScrollOffset_0) == 0x000000, "Member 'CustomListView_AddScrollOffset::AddScrollOffset_0' has a wrong offset!");

// Function UIFramework.CustomListView.AddScrollOffsetByAnalogStick
// 0x0050 (0x0050 - 0x0000)
struct CustomListView_AddScrollOffsetByAnalogStick final
{
public:
	struct FAnalogInputEvent                      InAnalogEvent;                                     // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ScrollSpeed;                                       // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultSpeedRate;                                  // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeedRate;                                      // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddSpeedRate;                                      // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomListView_AddScrollOffsetByAnalogStick) == 0x000008, "Wrong alignment on CustomListView_AddScrollOffsetByAnalogStick");
static_assert(sizeof(CustomListView_AddScrollOffsetByAnalogStick) == 0x000050, "Wrong size on CustomListView_AddScrollOffsetByAnalogStick");
static_assert(offsetof(CustomListView_AddScrollOffsetByAnalogStick, InAnalogEvent) == 0x000000, "Member 'CustomListView_AddScrollOffsetByAnalogStick::InAnalogEvent' has a wrong offset!");
static_assert(offsetof(CustomListView_AddScrollOffsetByAnalogStick, ScrollSpeed) == 0x000040, "Member 'CustomListView_AddScrollOffsetByAnalogStick::ScrollSpeed' has a wrong offset!");
static_assert(offsetof(CustomListView_AddScrollOffsetByAnalogStick, DefaultSpeedRate) == 0x000044, "Member 'CustomListView_AddScrollOffsetByAnalogStick::DefaultSpeedRate' has a wrong offset!");
static_assert(offsetof(CustomListView_AddScrollOffsetByAnalogStick, MaxSpeedRate) == 0x000048, "Member 'CustomListView_AddScrollOffsetByAnalogStick::MaxSpeedRate' has a wrong offset!");
static_assert(offsetof(CustomListView_AddScrollOffsetByAnalogStick, AddSpeedRate) == 0x00004C, "Member 'CustomListView_AddScrollOffsetByAnalogStick::AddSpeedRate' has a wrong offset!");

// Function UIFramework.WidgetWindowFrame.OnButtonAddedToFocusEvent
// 0x0010 (0x0010 - 0x0000)
struct WidgetWindowFrame_OnButtonAddedToFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetWindowFrame_OnButtonAddedToFocusEvent) == 0x000008, "Wrong alignment on WidgetWindowFrame_OnButtonAddedToFocusEvent");
static_assert(sizeof(WidgetWindowFrame_OnButtonAddedToFocusEvent) == 0x000010, "Wrong size on WidgetWindowFrame_OnButtonAddedToFocusEvent");
static_assert(offsetof(WidgetWindowFrame_OnButtonAddedToFocusEvent, Widget) == 0x000000, "Member 'WidgetWindowFrame_OnButtonAddedToFocusEvent::Widget' has a wrong offset!");
static_assert(offsetof(WidgetWindowFrame_OnButtonAddedToFocusEvent, InputType) == 0x000008, "Member 'WidgetWindowFrame_OnButtonAddedToFocusEvent::InputType' has a wrong offset!");

// Function UIFramework.WidgetWindowFrame.OnButtonDecideEvent
// 0x0010 (0x0010 - 0x0000)
struct WidgetWindowFrame_OnButtonDecideEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetWindowFrame_OnButtonDecideEvent) == 0x000008, "Wrong alignment on WidgetWindowFrame_OnButtonDecideEvent");
static_assert(sizeof(WidgetWindowFrame_OnButtonDecideEvent) == 0x000010, "Wrong size on WidgetWindowFrame_OnButtonDecideEvent");
static_assert(offsetof(WidgetWindowFrame_OnButtonDecideEvent, Widget) == 0x000000, "Member 'WidgetWindowFrame_OnButtonDecideEvent::Widget' has a wrong offset!");
static_assert(offsetof(WidgetWindowFrame_OnButtonDecideEvent, InputType) == 0x000008, "Member 'WidgetWindowFrame_OnButtonDecideEvent::InputType' has a wrong offset!");

// Function UIFramework.WidgetWindowFrame.OnButtonOnLongDecideEvent
// 0x0010 (0x0010 - 0x0000)
struct WidgetWindowFrame_OnButtonOnLongDecideEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetWindowFrame_OnButtonOnLongDecideEvent) == 0x000008, "Wrong alignment on WidgetWindowFrame_OnButtonOnLongDecideEvent");
static_assert(sizeof(WidgetWindowFrame_OnButtonOnLongDecideEvent) == 0x000010, "Wrong size on WidgetWindowFrame_OnButtonOnLongDecideEvent");
static_assert(offsetof(WidgetWindowFrame_OnButtonOnLongDecideEvent, Widget) == 0x000000, "Member 'WidgetWindowFrame_OnButtonOnLongDecideEvent::Widget' has a wrong offset!");
static_assert(offsetof(WidgetWindowFrame_OnButtonOnLongDecideEvent, InputType) == 0x000008, "Member 'WidgetWindowFrame_OnButtonOnLongDecideEvent::InputType' has a wrong offset!");

// Function UIFramework.WidgetWindowFrame.OnButtonPressEvent
// 0x0010 (0x0010 - 0x0000)
struct WidgetWindowFrame_OnButtonPressEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetWindowFrame_OnButtonPressEvent) == 0x000008, "Wrong alignment on WidgetWindowFrame_OnButtonPressEvent");
static_assert(sizeof(WidgetWindowFrame_OnButtonPressEvent) == 0x000010, "Wrong size on WidgetWindowFrame_OnButtonPressEvent");
static_assert(offsetof(WidgetWindowFrame_OnButtonPressEvent, Widget) == 0x000000, "Member 'WidgetWindowFrame_OnButtonPressEvent::Widget' has a wrong offset!");
static_assert(offsetof(WidgetWindowFrame_OnButtonPressEvent, InputType) == 0x000008, "Member 'WidgetWindowFrame_OnButtonPressEvent::InputType' has a wrong offset!");

// Function UIFramework.WidgetWindowFrame.OnButtonRemovedFromFocusEvent
// 0x0010 (0x0010 - 0x0000)
struct WidgetWindowFrame_OnButtonRemovedFromFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetWindowFrame_OnButtonRemovedFromFocusEvent) == 0x000008, "Wrong alignment on WidgetWindowFrame_OnButtonRemovedFromFocusEvent");
static_assert(sizeof(WidgetWindowFrame_OnButtonRemovedFromFocusEvent) == 0x000010, "Wrong size on WidgetWindowFrame_OnButtonRemovedFromFocusEvent");
static_assert(offsetof(WidgetWindowFrame_OnButtonRemovedFromFocusEvent, Widget) == 0x000000, "Member 'WidgetWindowFrame_OnButtonRemovedFromFocusEvent::Widget' has a wrong offset!");
static_assert(offsetof(WidgetWindowFrame_OnButtonRemovedFromFocusEvent, InputType) == 0x000008, "Member 'WidgetWindowFrame_OnButtonRemovedFromFocusEvent::InputType' has a wrong offset!");

// Function UIFramework.WidgetWindowFrame.ReplaceBase1Slot
// 0x0008 (0x0008 - 0x0000)
struct WidgetWindowFrame_ReplaceBase1Slot final
{
public:
	class UNamedSlot*                             Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetWindowFrame_ReplaceBase1Slot) == 0x000008, "Wrong alignment on WidgetWindowFrame_ReplaceBase1Slot");
static_assert(sizeof(WidgetWindowFrame_ReplaceBase1Slot) == 0x000008, "Wrong size on WidgetWindowFrame_ReplaceBase1Slot");
static_assert(offsetof(WidgetWindowFrame_ReplaceBase1Slot, Source) == 0x000000, "Member 'WidgetWindowFrame_ReplaceBase1Slot::Source' has a wrong offset!");

// Function UIFramework.WidgetWindowFrame.ReplaceBase2Slot
// 0x0008 (0x0008 - 0x0000)
struct WidgetWindowFrame_ReplaceBase2Slot final
{
public:
	class UNamedSlot*                             Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetWindowFrame_ReplaceBase2Slot) == 0x000008, "Wrong alignment on WidgetWindowFrame_ReplaceBase2Slot");
static_assert(sizeof(WidgetWindowFrame_ReplaceBase2Slot) == 0x000008, "Wrong size on WidgetWindowFrame_ReplaceBase2Slot");
static_assert(offsetof(WidgetWindowFrame_ReplaceBase2Slot, Source) == 0x000000, "Member 'WidgetWindowFrame_ReplaceBase2Slot::Source' has a wrong offset!");

// Function UIFramework.WidgetWindowFrame.ReplaceContentsSlot
// 0x0008 (0x0008 - 0x0000)
struct WidgetWindowFrame_ReplaceContentsSlot final
{
public:
	class UNamedSlot*                             Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetWindowFrame_ReplaceContentsSlot) == 0x000008, "Wrong alignment on WidgetWindowFrame_ReplaceContentsSlot");
static_assert(sizeof(WidgetWindowFrame_ReplaceContentsSlot) == 0x000008, "Wrong size on WidgetWindowFrame_ReplaceContentsSlot");
static_assert(offsetof(WidgetWindowFrame_ReplaceContentsSlot, Source) == 0x000000, "Member 'WidgetWindowFrame_ReplaceContentsSlot::Source' has a wrong offset!");

// Function UIFramework.WidgetWindowFrame.GetButtonCount
// 0x0001 (0x0001 - 0x0000)
struct WidgetWindowFrame_GetButtonCount final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetWindowFrame_GetButtonCount) == 0x000001, "Wrong alignment on WidgetWindowFrame_GetButtonCount");
static_assert(sizeof(WidgetWindowFrame_GetButtonCount) == 0x000001, "Wrong size on WidgetWindowFrame_GetButtonCount");
static_assert(offsetof(WidgetWindowFrame_GetButtonCount, ReturnValue) == 0x000000, "Member 'WidgetWindowFrame_GetButtonCount::ReturnValue' has a wrong offset!");

// Function UIFramework.WidgetWindowFrame.GetWindowSize
// 0x0004 (0x0004 - 0x0000)
struct WidgetWindowFrame_GetWindowSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetWindowFrame_GetWindowSize) == 0x000004, "Wrong alignment on WidgetWindowFrame_GetWindowSize");
static_assert(sizeof(WidgetWindowFrame_GetWindowSize) == 0x000004, "Wrong size on WidgetWindowFrame_GetWindowSize");
static_assert(offsetof(WidgetWindowFrame_GetWindowSize, ReturnValue) == 0x000000, "Member 'WidgetWindowFrame_GetWindowSize::ReturnValue' has a wrong offset!");

// Function UIFramework.AppWidgetWork.BP_CreateWidget
// 0x0020 (0x0020 - 0x0000)
struct AppWidgetWork_BP_CreateWidget final
{
public:
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAppWidgetPriority                            Priority;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SubPriority;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddToScreen;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppWidgetWork_BP_CreateWidget) == 0x000008, "Wrong alignment on AppWidgetWork_BP_CreateWidget");
static_assert(sizeof(AppWidgetWork_BP_CreateWidget) == 0x000020, "Wrong size on AppWidgetWork_BP_CreateWidget");
static_assert(offsetof(AppWidgetWork_BP_CreateWidget, WidgetClass) == 0x000000, "Member 'AppWidgetWork_BP_CreateWidget::WidgetClass' has a wrong offset!");
static_assert(offsetof(AppWidgetWork_BP_CreateWidget, Priority) == 0x000008, "Member 'AppWidgetWork_BP_CreateWidget::Priority' has a wrong offset!");
static_assert(offsetof(AppWidgetWork_BP_CreateWidget, SubPriority) == 0x00000C, "Member 'AppWidgetWork_BP_CreateWidget::SubPriority' has a wrong offset!");
static_assert(offsetof(AppWidgetWork_BP_CreateWidget, bAddToScreen) == 0x000010, "Member 'AppWidgetWork_BP_CreateWidget::bAddToScreen' has a wrong offset!");
static_assert(offsetof(AppWidgetWork_BP_CreateWidget, ReturnValue) == 0x000018, "Member 'AppWidgetWork_BP_CreateWidget::ReturnValue' has a wrong offset!");

// Function UIFramework.AppWidgetWork.DisableInputForFocusedWidget
// 0x0008 (0x0008 - 0x0000)
struct AppWidgetWork_DisableInputForFocusedWidget final
{
public:
	class UWidgetBase*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppWidgetWork_DisableInputForFocusedWidget) == 0x000008, "Wrong alignment on AppWidgetWork_DisableInputForFocusedWidget");
static_assert(sizeof(AppWidgetWork_DisableInputForFocusedWidget) == 0x000008, "Wrong size on AppWidgetWork_DisableInputForFocusedWidget");
static_assert(offsetof(AppWidgetWork_DisableInputForFocusedWidget, Widget) == 0x000000, "Member 'AppWidgetWork_DisableInputForFocusedWidget::Widget' has a wrong offset!");

// Function UIFramework.AppWidgetWork.EnableInputForFocusedWidget
// 0x0008 (0x0008 - 0x0000)
struct AppWidgetWork_EnableInputForFocusedWidget final
{
public:
	class UWidgetBase*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppWidgetWork_EnableInputForFocusedWidget) == 0x000008, "Wrong alignment on AppWidgetWork_EnableInputForFocusedWidget");
static_assert(sizeof(AppWidgetWork_EnableInputForFocusedWidget) == 0x000008, "Wrong size on AppWidgetWork_EnableInputForFocusedWidget");
static_assert(offsetof(AppWidgetWork_EnableInputForFocusedWidget, Widget) == 0x000000, "Member 'AppWidgetWork_EnableInputForFocusedWidget::Widget' has a wrong offset!");

// Function UIFramework.AppWidgetWork.FadeIn
// 0x0028 (0x0028 - 0x0000)
struct AppWidgetWork_FadeIn final
{
public:
	struct FOnFadeFinished                        OnFinishedEvent;                                   // 0x0000(0x0010)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EWidgetTransitionFadeType                     Type;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConditional;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0014(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableWorldRendering;                             // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AppWidgetWork_FadeIn) == 0x000004, "Wrong alignment on AppWidgetWork_FadeIn");
static_assert(sizeof(AppWidgetWork_FadeIn) == 0x000028, "Wrong size on AppWidgetWork_FadeIn");
static_assert(offsetof(AppWidgetWork_FadeIn, OnFinishedEvent) == 0x000000, "Member 'AppWidgetWork_FadeIn::OnFinishedEvent' has a wrong offset!");
static_assert(offsetof(AppWidgetWork_FadeIn, Type) == 0x000010, "Member 'AppWidgetWork_FadeIn::Type' has a wrong offset!");
static_assert(offsetof(AppWidgetWork_FadeIn, bConditional) == 0x000011, "Member 'AppWidgetWork_FadeIn::bConditional' has a wrong offset!");
static_assert(offsetof(AppWidgetWork_FadeIn, Color) == 0x000014, "Member 'AppWidgetWork_FadeIn::Color' has a wrong offset!");
static_assert(offsetof(AppWidgetWork_FadeIn, bEnableWorldRendering) == 0x000024, "Member 'AppWidgetWork_FadeIn::bEnableWorldRendering' has a wrong offset!");

// Function UIFramework.AppWidgetWork.FadeOut
// 0x0028 (0x0028 - 0x0000)
struct AppWidgetWork_FadeOut final
{
public:
	struct FOnFadeFinished                        OnFinishedEvent;                                   // 0x0000(0x0010)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EWidgetTransitionFadeType                     Type;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0014(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowNowLoading;                                   // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AppWidgetWork_FadeOut) == 0x000004, "Wrong alignment on AppWidgetWork_FadeOut");
static_assert(sizeof(AppWidgetWork_FadeOut) == 0x000028, "Wrong size on AppWidgetWork_FadeOut");
static_assert(offsetof(AppWidgetWork_FadeOut, OnFinishedEvent) == 0x000000, "Member 'AppWidgetWork_FadeOut::OnFinishedEvent' has a wrong offset!");
static_assert(offsetof(AppWidgetWork_FadeOut, Type) == 0x000010, "Member 'AppWidgetWork_FadeOut::Type' has a wrong offset!");
static_assert(offsetof(AppWidgetWork_FadeOut, Color) == 0x000014, "Member 'AppWidgetWork_FadeOut::Color' has a wrong offset!");
static_assert(offsetof(AppWidgetWork_FadeOut, bShowNowLoading) == 0x000024, "Member 'AppWidgetWork_FadeOut::bShowNowLoading' has a wrong offset!");

// Function UIFramework.AppWidgetWork.GetCurrentFocusWidget
// 0x0008 (0x0008 - 0x0000)
struct AppWidgetWork_GetCurrentFocusWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppWidgetWork_GetCurrentFocusWidget) == 0x000008, "Wrong alignment on AppWidgetWork_GetCurrentFocusWidget");
static_assert(sizeof(AppWidgetWork_GetCurrentFocusWidget) == 0x000008, "Wrong size on AppWidgetWork_GetCurrentFocusWidget");
static_assert(offsetof(AppWidgetWork_GetCurrentFocusWidget, ReturnValue) == 0x000000, "Member 'AppWidgetWork_GetCurrentFocusWidget::ReturnValue' has a wrong offset!");

// Function UIFramework.AppWidgetWork.GetPreFocusWidget
// 0x0008 (0x0008 - 0x0000)
struct AppWidgetWork_GetPreFocusWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppWidgetWork_GetPreFocusWidget) == 0x000008, "Wrong alignment on AppWidgetWork_GetPreFocusWidget");
static_assert(sizeof(AppWidgetWork_GetPreFocusWidget) == 0x000008, "Wrong size on AppWidgetWork_GetPreFocusWidget");
static_assert(offsetof(AppWidgetWork_GetPreFocusWidget, ReturnValue) == 0x000000, "Member 'AppWidgetWork_GetPreFocusWidget::ReturnValue' has a wrong offset!");

// Function UIFramework.AppWidgetWork.IsGamePadControlVirtualCursor
// 0x0001 (0x0001 - 0x0000)
struct AppWidgetWork_IsGamePadControlVirtualCursor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppWidgetWork_IsGamePadControlVirtualCursor) == 0x000001, "Wrong alignment on AppWidgetWork_IsGamePadControlVirtualCursor");
static_assert(sizeof(AppWidgetWork_IsGamePadControlVirtualCursor) == 0x000001, "Wrong size on AppWidgetWork_IsGamePadControlVirtualCursor");
static_assert(offsetof(AppWidgetWork_IsGamePadControlVirtualCursor, ReturnValue) == 0x000000, "Member 'AppWidgetWork_IsGamePadControlVirtualCursor::ReturnValue' has a wrong offset!");

// Function UIFramework.AppWidgetWork.IsMouseControlVirtualCursor
// 0x0001 (0x0001 - 0x0000)
struct AppWidgetWork_IsMouseControlVirtualCursor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppWidgetWork_IsMouseControlVirtualCursor) == 0x000001, "Wrong alignment on AppWidgetWork_IsMouseControlVirtualCursor");
static_assert(sizeof(AppWidgetWork_IsMouseControlVirtualCursor) == 0x000001, "Wrong size on AppWidgetWork_IsMouseControlVirtualCursor");
static_assert(offsetof(AppWidgetWork_IsMouseControlVirtualCursor, ReturnValue) == 0x000000, "Member 'AppWidgetWork_IsMouseControlVirtualCursor::ReturnValue' has a wrong offset!");

// DelegateFunction UIFramework.AppWidgetWork.OperationChangeDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct AppWidgetWork_OperationChangeDelegate__DelegateSignature final
{
public:
	bool                                          bChange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppWidgetWork_OperationChangeDelegate__DelegateSignature) == 0x000001, "Wrong alignment on AppWidgetWork_OperationChangeDelegate__DelegateSignature");
static_assert(sizeof(AppWidgetWork_OperationChangeDelegate__DelegateSignature) == 0x000001, "Wrong size on AppWidgetWork_OperationChangeDelegate__DelegateSignature");
static_assert(offsetof(AppWidgetWork_OperationChangeDelegate__DelegateSignature, bChange) == 0x000000, "Member 'AppWidgetWork_OperationChangeDelegate__DelegateSignature::bChange' has a wrong offset!");

// Function UIFramework.AppWidgetWork.SetDefaultMap
// 0x0028 (0x0028 - 0x0000)
struct AppWidgetWork_SetDefaultMap final
{
public:
	TSoftObjectPtr<class UWorld>                  Level;                                             // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppWidgetWork_SetDefaultMap) == 0x000008, "Wrong alignment on AppWidgetWork_SetDefaultMap");
static_assert(sizeof(AppWidgetWork_SetDefaultMap) == 0x000028, "Wrong size on AppWidgetWork_SetDefaultMap");
static_assert(offsetof(AppWidgetWork_SetDefaultMap, Level) == 0x000000, "Member 'AppWidgetWork_SetDefaultMap::Level' has a wrong offset!");

// Function UIFramework.AppWidgetWork.SetHistoryFocusedWidget
// 0x0008 (0x0008 - 0x0000)
struct AppWidgetWork_SetHistoryFocusedWidget final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppWidgetWork_SetHistoryFocusedWidget) == 0x000008, "Wrong alignment on AppWidgetWork_SetHistoryFocusedWidget");
static_assert(sizeof(AppWidgetWork_SetHistoryFocusedWidget) == 0x000008, "Wrong size on AppWidgetWork_SetHistoryFocusedWidget");
static_assert(offsetof(AppWidgetWork_SetHistoryFocusedWidget, Widget) == 0x000000, "Member 'AppWidgetWork_SetHistoryFocusedWidget::Widget' has a wrong offset!");

// Function UIFramework.AppWidgetWork.SetKeyboardFocusUnBlocked
// 0x0008 (0x0008 - 0x0000)
struct AppWidgetWork_SetKeyboardFocusUnBlocked final
{
public:
	class UWidgetBase*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppWidgetWork_SetKeyboardFocusUnBlocked) == 0x000008, "Wrong alignment on AppWidgetWork_SetKeyboardFocusUnBlocked");
static_assert(sizeof(AppWidgetWork_SetKeyboardFocusUnBlocked) == 0x000008, "Wrong size on AppWidgetWork_SetKeyboardFocusUnBlocked");
static_assert(offsetof(AppWidgetWork_SetKeyboardFocusUnBlocked, Widget) == 0x000000, "Member 'AppWidgetWork_SetKeyboardFocusUnBlocked::Widget' has a wrong offset!");

// Function UIFramework.AppWidgetWork.SetKeyNavigation
// 0x0001 (0x0001 - 0x0000)
struct AppWidgetWork_SetKeyNavigation final
{
public:
	bool                                          Keynavigation;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppWidgetWork_SetKeyNavigation) == 0x000001, "Wrong alignment on AppWidgetWork_SetKeyNavigation");
static_assert(sizeof(AppWidgetWork_SetKeyNavigation) == 0x000001, "Wrong size on AppWidgetWork_SetKeyNavigation");
static_assert(offsetof(AppWidgetWork_SetKeyNavigation, Keynavigation) == 0x000000, "Member 'AppWidgetWork_SetKeyNavigation::Keynavigation' has a wrong offset!");

// Function UIFramework.AppWidgetWork.SetLoadingTips
// 0x0010 (0x0010 - 0x0000)
struct AppWidgetWork_SetLoadingTips final
{
public:
	TArray<class FText>                           Tips;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppWidgetWork_SetLoadingTips) == 0x000008, "Wrong alignment on AppWidgetWork_SetLoadingTips");
static_assert(sizeof(AppWidgetWork_SetLoadingTips) == 0x000010, "Wrong size on AppWidgetWork_SetLoadingTips");
static_assert(offsetof(AppWidgetWork_SetLoadingTips, Tips) == 0x000000, "Member 'AppWidgetWork_SetLoadingTips::Tips' has a wrong offset!");

// Function UIFramework.AppWidgetWork.SetVirtualCursorPosition
// 0x0008 (0x0008 - 0x0000)
struct AppWidgetWork_SetVirtualCursorPosition final
{
public:
	struct FVector2D                              Position;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppWidgetWork_SetVirtualCursorPosition) == 0x000004, "Wrong alignment on AppWidgetWork_SetVirtualCursorPosition");
static_assert(sizeof(AppWidgetWork_SetVirtualCursorPosition) == 0x000008, "Wrong size on AppWidgetWork_SetVirtualCursorPosition");
static_assert(offsetof(AppWidgetWork_SetVirtualCursorPosition, Position) == 0x000000, "Member 'AppWidgetWork_SetVirtualCursorPosition::Position' has a wrong offset!");

// Function UIFramework.AppWidgetWork.SetVirtualCursorSpeed
// 0x0008 (0x0008 - 0x0000)
struct AppWidgetWork_SetVirtualCursorSpeed final
{
public:
	struct FVector2D                              Speed;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppWidgetWork_SetVirtualCursorSpeed) == 0x000004, "Wrong alignment on AppWidgetWork_SetVirtualCursorSpeed");
static_assert(sizeof(AppWidgetWork_SetVirtualCursorSpeed) == 0x000008, "Wrong size on AppWidgetWork_SetVirtualCursorSpeed");
static_assert(offsetof(AppWidgetWork_SetVirtualCursorSpeed, Speed) == 0x000000, "Member 'AppWidgetWork_SetVirtualCursorSpeed::Speed' has a wrong offset!");

// Function UIFramework.AppWidgetWork.ShowMouseCursor
// 0x0010 (0x0010 - 0x0000)
struct AppWidgetWork_ShowMouseCursor final
{
public:
	const class UObject*                          Widget;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AppWidgetWork_ShowMouseCursor) == 0x000008, "Wrong alignment on AppWidgetWork_ShowMouseCursor");
static_assert(sizeof(AppWidgetWork_ShowMouseCursor) == 0x000010, "Wrong size on AppWidgetWork_ShowMouseCursor");
static_assert(offsetof(AppWidgetWork_ShowMouseCursor, Widget) == 0x000000, "Member 'AppWidgetWork_ShowMouseCursor::Widget' has a wrong offset!");
static_assert(offsetof(AppWidgetWork_ShowMouseCursor, Flag) == 0x000008, "Member 'AppWidgetWork_ShowMouseCursor::Flag' has a wrong offset!");

// Function UIFramework.AppWidgetWork.GetVirtualCursorDelta
// 0x0008 (0x0008 - 0x0000)
struct AppWidgetWork_GetVirtualCursorDelta final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppWidgetWork_GetVirtualCursorDelta) == 0x000004, "Wrong alignment on AppWidgetWork_GetVirtualCursorDelta");
static_assert(sizeof(AppWidgetWork_GetVirtualCursorDelta) == 0x000008, "Wrong size on AppWidgetWork_GetVirtualCursorDelta");
static_assert(offsetof(AppWidgetWork_GetVirtualCursorDelta, ReturnValue) == 0x000000, "Member 'AppWidgetWork_GetVirtualCursorDelta::ReturnValue' has a wrong offset!");

// Function UIFramework.AppWidgetWork.GetVirtualCursorPosition
// 0x0008 (0x0008 - 0x0000)
struct AppWidgetWork_GetVirtualCursorPosition final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppWidgetWork_GetVirtualCursorPosition) == 0x000004, "Wrong alignment on AppWidgetWork_GetVirtualCursorPosition");
static_assert(sizeof(AppWidgetWork_GetVirtualCursorPosition) == 0x000008, "Wrong size on AppWidgetWork_GetVirtualCursorPosition");
static_assert(offsetof(AppWidgetWork_GetVirtualCursorPosition, ReturnValue) == 0x000000, "Member 'AppWidgetWork_GetVirtualCursorPosition::ReturnValue' has a wrong offset!");

// Function UIFramework.AppWidgetWork.IsControlledGamePad
// 0x0001 (0x0001 - 0x0000)
struct AppWidgetWork_IsControlledGamePad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppWidgetWork_IsControlledGamePad) == 0x000001, "Wrong alignment on AppWidgetWork_IsControlledGamePad");
static_assert(sizeof(AppWidgetWork_IsControlledGamePad) == 0x000001, "Wrong size on AppWidgetWork_IsControlledGamePad");
static_assert(offsetof(AppWidgetWork_IsControlledGamePad, ReturnValue) == 0x000000, "Member 'AppWidgetWork_IsControlledGamePad::ReturnValue' has a wrong offset!");

// Function UIFramework.AppWidgetWork.IsControlledVirtualCursor
// 0x0001 (0x0001 - 0x0000)
struct AppWidgetWork_IsControlledVirtualCursor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppWidgetWork_IsControlledVirtualCursor) == 0x000001, "Wrong alignment on AppWidgetWork_IsControlledVirtualCursor");
static_assert(sizeof(AppWidgetWork_IsControlledVirtualCursor) == 0x000001, "Wrong size on AppWidgetWork_IsControlledVirtualCursor");
static_assert(offsetof(AppWidgetWork_IsControlledVirtualCursor, ReturnValue) == 0x000000, "Member 'AppWidgetWork_IsControlledVirtualCursor::ReturnValue' has a wrong offset!");

// Function UIFramework.AppWidgetWork.IsFading
// 0x0001 (0x0001 - 0x0000)
struct AppWidgetWork_IsFading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppWidgetWork_IsFading) == 0x000001, "Wrong alignment on AppWidgetWork_IsFading");
static_assert(sizeof(AppWidgetWork_IsFading) == 0x000001, "Wrong size on AppWidgetWork_IsFading");
static_assert(offsetof(AppWidgetWork_IsFading, ReturnValue) == 0x000000, "Member 'AppWidgetWork_IsFading::ReturnValue' has a wrong offset!");

// Function UIFramework.AppWidgetWork.IsFadingOut
// 0x0001 (0x0001 - 0x0000)
struct AppWidgetWork_IsFadingOut final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppWidgetWork_IsFadingOut) == 0x000001, "Wrong alignment on AppWidgetWork_IsFadingOut");
static_assert(sizeof(AppWidgetWork_IsFadingOut) == 0x000001, "Wrong size on AppWidgetWork_IsFadingOut");
static_assert(offsetof(AppWidgetWork_IsFadingOut, ReturnValue) == 0x000000, "Member 'AppWidgetWork_IsFadingOut::ReturnValue' has a wrong offset!");

// Function UIFramework.CustomMultiLineEditableText.BP_SetLimitCount
// 0x0004 (0x0004 - 0x0000)
struct CustomMultiLineEditableText_BP_SetLimitCount final
{
public:
	int32                                         LimitCount;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMultiLineEditableText_BP_SetLimitCount) == 0x000004, "Wrong alignment on CustomMultiLineEditableText_BP_SetLimitCount");
static_assert(sizeof(CustomMultiLineEditableText_BP_SetLimitCount) == 0x000004, "Wrong size on CustomMultiLineEditableText_BP_SetLimitCount");
static_assert(offsetof(CustomMultiLineEditableText_BP_SetLimitCount, LimitCount) == 0x000000, "Member 'CustomMultiLineEditableText_BP_SetLimitCount::LimitCount' has a wrong offset!");

// Function UIFramework.CustomMultiLineEditableText.CustomHandleOnTextChanged
// 0x0018 (0x0018 - 0x0000)
struct CustomMultiLineEditableText_CustomHandleOnTextChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMultiLineEditableText_CustomHandleOnTextChanged) == 0x000008, "Wrong alignment on CustomMultiLineEditableText_CustomHandleOnTextChanged");
static_assert(sizeof(CustomMultiLineEditableText_CustomHandleOnTextChanged) == 0x000018, "Wrong size on CustomMultiLineEditableText_CustomHandleOnTextChanged");
static_assert(offsetof(CustomMultiLineEditableText_CustomHandleOnTextChanged, InText) == 0x000000, "Member 'CustomMultiLineEditableText_CustomHandleOnTextChanged::InText' has a wrong offset!");

// Function UIFramework.CustomMultiLineEditableText.CustomHandleOnTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct CustomMultiLineEditableText_CustomHandleOnTextCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomMultiLineEditableText_CustomHandleOnTextCommitted) == 0x000008, "Wrong alignment on CustomMultiLineEditableText_CustomHandleOnTextCommitted");
static_assert(sizeof(CustomMultiLineEditableText_CustomHandleOnTextCommitted) == 0x000020, "Wrong size on CustomMultiLineEditableText_CustomHandleOnTextCommitted");
static_assert(offsetof(CustomMultiLineEditableText_CustomHandleOnTextCommitted, InText) == 0x000000, "Member 'CustomMultiLineEditableText_CustomHandleOnTextCommitted::InText' has a wrong offset!");
static_assert(offsetof(CustomMultiLineEditableText_CustomHandleOnTextCommitted, CommitMethod) == 0x000018, "Member 'CustomMultiLineEditableText_CustomHandleOnTextCommitted::CommitMethod' has a wrong offset!");

// Function UIFramework.CustomEditableTextBox.BP_SetLimitCount
// 0x0004 (0x0004 - 0x0000)
struct CustomEditableTextBox_BP_SetLimitCount final
{
public:
	int32                                         LimitCount;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomEditableTextBox_BP_SetLimitCount) == 0x000004, "Wrong alignment on CustomEditableTextBox_BP_SetLimitCount");
static_assert(sizeof(CustomEditableTextBox_BP_SetLimitCount) == 0x000004, "Wrong size on CustomEditableTextBox_BP_SetLimitCount");
static_assert(offsetof(CustomEditableTextBox_BP_SetLimitCount, LimitCount) == 0x000000, "Member 'CustomEditableTextBox_BP_SetLimitCount::LimitCount' has a wrong offset!");

// Function UIFramework.CustomScrollBox.AddScrollOffset
// 0x0004 (0x0004 - 0x0000)
struct CustomScrollBox_AddScrollOffset final
{
public:
	float                                         AddScrollOffset_0;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomScrollBox_AddScrollOffset) == 0x000004, "Wrong alignment on CustomScrollBox_AddScrollOffset");
static_assert(sizeof(CustomScrollBox_AddScrollOffset) == 0x000004, "Wrong size on CustomScrollBox_AddScrollOffset");
static_assert(offsetof(CustomScrollBox_AddScrollOffset, AddScrollOffset_0) == 0x000000, "Member 'CustomScrollBox_AddScrollOffset::AddScrollOffset_0' has a wrong offset!");

// Function UIFramework.CustomScrollBox.AddScrollOffsetByAnalogStick
// 0x0050 (0x0050 - 0x0000)
struct CustomScrollBox_AddScrollOffsetByAnalogStick final
{
public:
	struct FAnalogInputEvent                      InAnalogEvent;                                     // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ScrollSpeed;                                       // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultSpeedRate;                                  // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeedRate;                                      // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddSpeedRate;                                      // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomScrollBox_AddScrollOffsetByAnalogStick) == 0x000008, "Wrong alignment on CustomScrollBox_AddScrollOffsetByAnalogStick");
static_assert(sizeof(CustomScrollBox_AddScrollOffsetByAnalogStick) == 0x000050, "Wrong size on CustomScrollBox_AddScrollOffsetByAnalogStick");
static_assert(offsetof(CustomScrollBox_AddScrollOffsetByAnalogStick, InAnalogEvent) == 0x000000, "Member 'CustomScrollBox_AddScrollOffsetByAnalogStick::InAnalogEvent' has a wrong offset!");
static_assert(offsetof(CustomScrollBox_AddScrollOffsetByAnalogStick, ScrollSpeed) == 0x000040, "Member 'CustomScrollBox_AddScrollOffsetByAnalogStick::ScrollSpeed' has a wrong offset!");
static_assert(offsetof(CustomScrollBox_AddScrollOffsetByAnalogStick, DefaultSpeedRate) == 0x000044, "Member 'CustomScrollBox_AddScrollOffsetByAnalogStick::DefaultSpeedRate' has a wrong offset!");
static_assert(offsetof(CustomScrollBox_AddScrollOffsetByAnalogStick, MaxSpeedRate) == 0x000048, "Member 'CustomScrollBox_AddScrollOffsetByAnalogStick::MaxSpeedRate' has a wrong offset!");
static_assert(offsetof(CustomScrollBox_AddScrollOffsetByAnalogStick, AddSpeedRate) == 0x00004C, "Member 'CustomScrollBox_AddScrollOffsetByAnalogStick::AddSpeedRate' has a wrong offset!");

// Function UIFramework.CustomTileView.AddScrollOffset
// 0x0004 (0x0004 - 0x0000)
struct CustomTileView_AddScrollOffset final
{
public:
	float                                         AddScrollOffset_0;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomTileView_AddScrollOffset) == 0x000004, "Wrong alignment on CustomTileView_AddScrollOffset");
static_assert(sizeof(CustomTileView_AddScrollOffset) == 0x000004, "Wrong size on CustomTileView_AddScrollOffset");
static_assert(offsetof(CustomTileView_AddScrollOffset, AddScrollOffset_0) == 0x000000, "Member 'CustomTileView_AddScrollOffset::AddScrollOffset_0' has a wrong offset!");

// Function UIFramework.CustomTileView.NavigationCustom
// 0x0010 (0x0010 - 0x0000)
struct CustomTileView_NavigationCustom final
{
public:
	EUINavigation                                 NavigationType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomTileView_NavigationCustom) == 0x000008, "Wrong alignment on CustomTileView_NavigationCustom");
static_assert(sizeof(CustomTileView_NavigationCustom) == 0x000010, "Wrong size on CustomTileView_NavigationCustom");
static_assert(offsetof(CustomTileView_NavigationCustom, NavigationType) == 0x000000, "Member 'CustomTileView_NavigationCustom::NavigationType' has a wrong offset!");
static_assert(offsetof(CustomTileView_NavigationCustom, ReturnValue) == 0x000008, "Member 'CustomTileView_NavigationCustom::ReturnValue' has a wrong offset!");

// Function UIFramework.CustomTileView.NavigationSet
// 0x0010 (0x0010 - 0x0000)
struct CustomTileView_NavigationSet final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomTileView_NavigationSet) == 0x000008, "Wrong alignment on CustomTileView_NavigationSet");
static_assert(sizeof(CustomTileView_NavigationSet) == 0x000010, "Wrong size on CustomTileView_NavigationSet");
static_assert(offsetof(CustomTileView_NavigationSet, Index_0) == 0x000000, "Member 'CustomTileView_NavigationSet::Index_0' has a wrong offset!");
static_assert(offsetof(CustomTileView_NavigationSet, ReturnValue) == 0x000008, "Member 'CustomTileView_NavigationSet::ReturnValue' has a wrong offset!");

// Function UIFramework.CustomTileView.NavigationSetItem
// 0x0008 (0x0008 - 0x0000)
struct CustomTileView_NavigationSetItem final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomTileView_NavigationSetItem) == 0x000008, "Wrong alignment on CustomTileView_NavigationSetItem");
static_assert(sizeof(CustomTileView_NavigationSetItem) == 0x000008, "Wrong size on CustomTileView_NavigationSetItem");
static_assert(offsetof(CustomTileView_NavigationSetItem, ReturnValue) == 0x000000, "Member 'CustomTileView_NavigationSetItem::ReturnValue' has a wrong offset!");

// DelegateFunction UIFramework.CustomTileView.OnNavigationOutSideRightLeft__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct CustomTileView_OnNavigationOutSideRightLeft__DelegateSignature final
{
public:
	bool                                          Right;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomTileView_OnNavigationOutSideRightLeft__DelegateSignature) == 0x000001, "Wrong alignment on CustomTileView_OnNavigationOutSideRightLeft__DelegateSignature");
static_assert(sizeof(CustomTileView_OnNavigationOutSideRightLeft__DelegateSignature) == 0x000001, "Wrong size on CustomTileView_OnNavigationOutSideRightLeft__DelegateSignature");
static_assert(offsetof(CustomTileView_OnNavigationOutSideRightLeft__DelegateSignature, Right) == 0x000000, "Member 'CustomTileView_OnNavigationOutSideRightLeft__DelegateSignature::Right' has a wrong offset!");

// DelegateFunction UIFramework.CustomTileView.OnNavigationOutSideUpDown__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct CustomTileView_OnNavigationOutSideUpDown__DelegateSignature final
{
public:
	bool                                          Up;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomTileView_OnNavigationOutSideUpDown__DelegateSignature) == 0x000001, "Wrong alignment on CustomTileView_OnNavigationOutSideUpDown__DelegateSignature");
static_assert(sizeof(CustomTileView_OnNavigationOutSideUpDown__DelegateSignature) == 0x000001, "Wrong size on CustomTileView_OnNavigationOutSideUpDown__DelegateSignature");
static_assert(offsetof(CustomTileView_OnNavigationOutSideUpDown__DelegateSignature, Up) == 0x000000, "Member 'CustomTileView_OnNavigationOutSideUpDown__DelegateSignature::Up' has a wrong offset!");

// Function UIFramework.CustomTileView.SetNavigationColumnCount
// 0x0004 (0x0004 - 0x0000)
struct CustomTileView_SetNavigationColumnCount final
{
public:
	int32                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomTileView_SetNavigationColumnCount) == 0x000004, "Wrong alignment on CustomTileView_SetNavigationColumnCount");
static_assert(sizeof(CustomTileView_SetNavigationColumnCount) == 0x000004, "Wrong size on CustomTileView_SetNavigationColumnCount");
static_assert(offsetof(CustomTileView_SetNavigationColumnCount, Val) == 0x000000, "Member 'CustomTileView_SetNavigationColumnCount::Val' has a wrong offset!");

// Function UIFramework.CustomTileView.GetNavigationColumnCount
// 0x0004 (0x0004 - 0x0000)
struct CustomTileView_GetNavigationColumnCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomTileView_GetNavigationColumnCount) == 0x000004, "Wrong alignment on CustomTileView_GetNavigationColumnCount");
static_assert(sizeof(CustomTileView_GetNavigationColumnCount) == 0x000004, "Wrong size on CustomTileView_GetNavigationColumnCount");
static_assert(offsetof(CustomTileView_GetNavigationColumnCount, ReturnValue) == 0x000000, "Member 'CustomTileView_GetNavigationColumnCount::ReturnValue' has a wrong offset!");

// Function UIFramework.CustomTileViewHasWidget.BP_SetCustomTileViewNavigationSet
// 0x0010 (0x0010 - 0x0000)
struct CustomTileViewHasWidget_BP_SetCustomTileViewNavigationSet final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomTileViewHasWidget_BP_SetCustomTileViewNavigationSet) == 0x000008, "Wrong alignment on CustomTileViewHasWidget_BP_SetCustomTileViewNavigationSet");
static_assert(sizeof(CustomTileViewHasWidget_BP_SetCustomTileViewNavigationSet) == 0x000010, "Wrong size on CustomTileViewHasWidget_BP_SetCustomTileViewNavigationSet");
static_assert(offsetof(CustomTileViewHasWidget_BP_SetCustomTileViewNavigationSet, Index_0) == 0x000000, "Member 'CustomTileViewHasWidget_BP_SetCustomTileViewNavigationSet::Index_0' has a wrong offset!");
static_assert(offsetof(CustomTileViewHasWidget_BP_SetCustomTileViewNavigationSet, ReturnValue) == 0x000008, "Member 'CustomTileViewHasWidget_BP_SetCustomTileViewNavigationSet::ReturnValue' has a wrong offset!");

// Function UIFramework.CustomTileViewHasWidget.BP_SetCustomTileViewNavigationSetItem
// 0x0008 (0x0008 - 0x0000)
struct CustomTileViewHasWidget_BP_SetCustomTileViewNavigationSetItem final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomTileViewHasWidget_BP_SetCustomTileViewNavigationSetItem) == 0x000008, "Wrong alignment on CustomTileViewHasWidget_BP_SetCustomTileViewNavigationSetItem");
static_assert(sizeof(CustomTileViewHasWidget_BP_SetCustomTileViewNavigationSetItem) == 0x000008, "Wrong size on CustomTileViewHasWidget_BP_SetCustomTileViewNavigationSetItem");
static_assert(offsetof(CustomTileViewHasWidget_BP_SetCustomTileViewNavigationSetItem, ReturnValue) == 0x000000, "Member 'CustomTileViewHasWidget_BP_SetCustomTileViewNavigationSetItem::ReturnValue' has a wrong offset!");

// Function UIFramework.CustomTileViewHasWidget.DoCustomTileViewHasWidgetNavigation
// 0x0010 (0x0010 - 0x0000)
struct CustomTileViewHasWidget_DoCustomTileViewHasWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomTileViewHasWidget_DoCustomTileViewHasWidgetNavigation) == 0x000008, "Wrong alignment on CustomTileViewHasWidget_DoCustomTileViewHasWidgetNavigation");
static_assert(sizeof(CustomTileViewHasWidget_DoCustomTileViewHasWidgetNavigation) == 0x000010, "Wrong size on CustomTileViewHasWidget_DoCustomTileViewHasWidgetNavigation");
static_assert(offsetof(CustomTileViewHasWidget_DoCustomTileViewHasWidgetNavigation, UiNavigation) == 0x000000, "Member 'CustomTileViewHasWidget_DoCustomTileViewHasWidgetNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(CustomTileViewHasWidget_DoCustomTileViewHasWidgetNavigation, ReturnValue) == 0x000008, "Member 'CustomTileViewHasWidget_DoCustomTileViewHasWidgetNavigation::ReturnValue' has a wrong offset!");

// Function UIFramework.CustomTileViewHasWidget.BP_GetTileViewPtr
// 0x0008 (0x0008 - 0x0000)
struct CustomTileViewHasWidget_BP_GetTileViewPtr final
{
public:
	class UCustomTileView*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomTileViewHasWidget_BP_GetTileViewPtr) == 0x000008, "Wrong alignment on CustomTileViewHasWidget_BP_GetTileViewPtr");
static_assert(sizeof(CustomTileViewHasWidget_BP_GetTileViewPtr) == 0x000008, "Wrong size on CustomTileViewHasWidget_BP_GetTileViewPtr");
static_assert(offsetof(CustomTileViewHasWidget_BP_GetTileViewPtr, ReturnValue) == 0x000000, "Member 'CustomTileViewHasWidget_BP_GetTileViewPtr::ReturnValue' has a wrong offset!");

// Function UIFramework.LevelLoaderWork.IsLoadedLevel
// 0x0018 (0x0018 - 0x0000)
struct LevelLoaderWork_IsLoadedLevel final
{
public:
	class FString                                 LongPackageName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LevelLoaderWork_IsLoadedLevel) == 0x000008, "Wrong alignment on LevelLoaderWork_IsLoadedLevel");
static_assert(sizeof(LevelLoaderWork_IsLoadedLevel) == 0x000018, "Wrong size on LevelLoaderWork_IsLoadedLevel");
static_assert(offsetof(LevelLoaderWork_IsLoadedLevel, LongPackageName) == 0x000000, "Member 'LevelLoaderWork_IsLoadedLevel::LongPackageName' has a wrong offset!");
static_assert(offsetof(LevelLoaderWork_IsLoadedLevel, ReturnValue) == 0x000010, "Member 'LevelLoaderWork_IsLoadedLevel::ReturnValue' has a wrong offset!");

// Function UIFramework.LevelLoaderWork.LoadStreamLevel
// 0x0038 (0x0038 - 0x0000)
struct LevelLoaderWork_LoadStreamLevel final
{
public:
	class FString                                 LongPackageName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x001C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bClientOnly;                                       // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelStreamingDynamic*                 ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelLoaderWork_LoadStreamLevel) == 0x000008, "Wrong alignment on LevelLoaderWork_LoadStreamLevel");
static_assert(sizeof(LevelLoaderWork_LoadStreamLevel) == 0x000038, "Wrong size on LevelLoaderWork_LoadStreamLevel");
static_assert(offsetof(LevelLoaderWork_LoadStreamLevel, LongPackageName) == 0x000000, "Member 'LevelLoaderWork_LoadStreamLevel::LongPackageName' has a wrong offset!");
static_assert(offsetof(LevelLoaderWork_LoadStreamLevel, Location) == 0x000010, "Member 'LevelLoaderWork_LoadStreamLevel::Location' has a wrong offset!");
static_assert(offsetof(LevelLoaderWork_LoadStreamLevel, Rotation) == 0x00001C, "Member 'LevelLoaderWork_LoadStreamLevel::Rotation' has a wrong offset!");
static_assert(offsetof(LevelLoaderWork_LoadStreamLevel, bClientOnly) == 0x000028, "Member 'LevelLoaderWork_LoadStreamLevel::bClientOnly' has a wrong offset!");
static_assert(offsetof(LevelLoaderWork_LoadStreamLevel, bVisible) == 0x000029, "Member 'LevelLoaderWork_LoadStreamLevel::bVisible' has a wrong offset!");
static_assert(offsetof(LevelLoaderWork_LoadStreamLevel, ReturnValue) == 0x000030, "Member 'LevelLoaderWork_LoadStreamLevel::ReturnValue' has a wrong offset!");

// Function UIFramework.LevelLoaderWork.LoadStreamLevelSoftObjectLevel
// 0x0050 (0x0050 - 0x0000)
struct LevelLoaderWork_LoadStreamLevelSoftObjectLevel final
{
public:
	TSoftObjectPtr<class UWorld>                  SubLevelClass;                                     // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0028(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0034(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bClientOnly;                                       // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelStreamingDynamic*                 ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelLoaderWork_LoadStreamLevelSoftObjectLevel) == 0x000008, "Wrong alignment on LevelLoaderWork_LoadStreamLevelSoftObjectLevel");
static_assert(sizeof(LevelLoaderWork_LoadStreamLevelSoftObjectLevel) == 0x000050, "Wrong size on LevelLoaderWork_LoadStreamLevelSoftObjectLevel");
static_assert(offsetof(LevelLoaderWork_LoadStreamLevelSoftObjectLevel, SubLevelClass) == 0x000000, "Member 'LevelLoaderWork_LoadStreamLevelSoftObjectLevel::SubLevelClass' has a wrong offset!");
static_assert(offsetof(LevelLoaderWork_LoadStreamLevelSoftObjectLevel, Location) == 0x000028, "Member 'LevelLoaderWork_LoadStreamLevelSoftObjectLevel::Location' has a wrong offset!");
static_assert(offsetof(LevelLoaderWork_LoadStreamLevelSoftObjectLevel, Rotation) == 0x000034, "Member 'LevelLoaderWork_LoadStreamLevelSoftObjectLevel::Rotation' has a wrong offset!");
static_assert(offsetof(LevelLoaderWork_LoadStreamLevelSoftObjectLevel, bClientOnly) == 0x000040, "Member 'LevelLoaderWork_LoadStreamLevelSoftObjectLevel::bClientOnly' has a wrong offset!");
static_assert(offsetof(LevelLoaderWork_LoadStreamLevelSoftObjectLevel, bVisible) == 0x000041, "Member 'LevelLoaderWork_LoadStreamLevelSoftObjectLevel::bVisible' has a wrong offset!");
static_assert(offsetof(LevelLoaderWork_LoadStreamLevelSoftObjectLevel, ReturnValue) == 0x000048, "Member 'LevelLoaderWork_LoadStreamLevelSoftObjectLevel::ReturnValue' has a wrong offset!");

// Function UIFramework.LevelLoaderWork.SetLevelVisible
// 0x0018 (0x0018 - 0x0000)
struct LevelLoaderWork_SetLevelVisible final
{
public:
	class FString                                 LongPackageName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LevelLoaderWork_SetLevelVisible) == 0x000008, "Wrong alignment on LevelLoaderWork_SetLevelVisible");
static_assert(sizeof(LevelLoaderWork_SetLevelVisible) == 0x000018, "Wrong size on LevelLoaderWork_SetLevelVisible");
static_assert(offsetof(LevelLoaderWork_SetLevelVisible, LongPackageName) == 0x000000, "Member 'LevelLoaderWork_SetLevelVisible::LongPackageName' has a wrong offset!");
static_assert(offsetof(LevelLoaderWork_SetLevelVisible, bVisible) == 0x000010, "Member 'LevelLoaderWork_SetLevelVisible::bVisible' has a wrong offset!");

// Function UIFramework.LevelLoaderWork.UnLoadStreamLevel
// 0x0010 (0x0010 - 0x0000)
struct LevelLoaderWork_UnLoadStreamLevel final
{
public:
	class FString                                 LongPackageName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelLoaderWork_UnLoadStreamLevel) == 0x000008, "Wrong alignment on LevelLoaderWork_UnLoadStreamLevel");
static_assert(sizeof(LevelLoaderWork_UnLoadStreamLevel) == 0x000010, "Wrong size on LevelLoaderWork_UnLoadStreamLevel");
static_assert(offsetof(LevelLoaderWork_UnLoadStreamLevel, LongPackageName) == 0x000000, "Member 'LevelLoaderWork_UnLoadStreamLevel::LongPackageName' has a wrong offset!");

// Function UIFramework.LevelLoaderWork.UnLoadStreamLevelLevelStreamingDynamic
// 0x0008 (0x0008 - 0x0000)
struct LevelLoaderWork_UnLoadStreamLevelLevelStreamingDynamic final
{
public:
	const class ULevelStreamingDynamic*           LevelStreamingDynamic;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelLoaderWork_UnLoadStreamLevelLevelStreamingDynamic) == 0x000008, "Wrong alignment on LevelLoaderWork_UnLoadStreamLevelLevelStreamingDynamic");
static_assert(sizeof(LevelLoaderWork_UnLoadStreamLevelLevelStreamingDynamic) == 0x000008, "Wrong size on LevelLoaderWork_UnLoadStreamLevelLevelStreamingDynamic");
static_assert(offsetof(LevelLoaderWork_UnLoadStreamLevelLevelStreamingDynamic, LevelStreamingDynamic) == 0x000000, "Member 'LevelLoaderWork_UnLoadStreamLevelLevelStreamingDynamic::LevelStreamingDynamic' has a wrong offset!");

// Function UIFramework.LevelLoaderWork.UnLoadStreamLevelSoftObjectLevel
// 0x0028 (0x0028 - 0x0000)
struct LevelLoaderWork_UnLoadStreamLevelSoftObjectLevel final
{
public:
	TSoftObjectPtr<class UWorld>                  SubLevelClass;                                     // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelLoaderWork_UnLoadStreamLevelSoftObjectLevel) == 0x000008, "Wrong alignment on LevelLoaderWork_UnLoadStreamLevelSoftObjectLevel");
static_assert(sizeof(LevelLoaderWork_UnLoadStreamLevelSoftObjectLevel) == 0x000028, "Wrong size on LevelLoaderWork_UnLoadStreamLevelSoftObjectLevel");
static_assert(offsetof(LevelLoaderWork_UnLoadStreamLevelSoftObjectLevel, SubLevelClass) == 0x000000, "Member 'LevelLoaderWork_UnLoadStreamLevelSoftObjectLevel::SubLevelClass' has a wrong offset!");

// Function UIFramework.LevelLoaderWork.IsLevelVisible
// 0x0018 (0x0018 - 0x0000)
struct LevelLoaderWork_IsLevelVisible final
{
public:
	class FString                                 LongPackageName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LevelLoaderWork_IsLevelVisible) == 0x000008, "Wrong alignment on LevelLoaderWork_IsLevelVisible");
static_assert(sizeof(LevelLoaderWork_IsLevelVisible) == 0x000018, "Wrong size on LevelLoaderWork_IsLevelVisible");
static_assert(offsetof(LevelLoaderWork_IsLevelVisible, LongPackageName) == 0x000000, "Member 'LevelLoaderWork_IsLevelVisible::LongPackageName' has a wrong offset!");
static_assert(offsetof(LevelLoaderWork_IsLevelVisible, ReturnValue) == 0x000010, "Member 'LevelLoaderWork_IsLevelVisible::ReturnValue' has a wrong offset!");

// Function UIFramework.ListViewEntryObjectBase.SetIndex
// 0x0004 (0x0004 - 0x0000)
struct ListViewEntryObjectBase_SetIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ListViewEntryObjectBase_SetIndex) == 0x000004, "Wrong alignment on ListViewEntryObjectBase_SetIndex");
static_assert(sizeof(ListViewEntryObjectBase_SetIndex) == 0x000004, "Wrong size on ListViewEntryObjectBase_SetIndex");
static_assert(offsetof(ListViewEntryObjectBase_SetIndex, Index_0) == 0x000000, "Member 'ListViewEntryObjectBase_SetIndex::Index_0' has a wrong offset!");

// Function UIFramework.ListViewEntryObjectBase.GetIndex
// 0x0004 (0x0004 - 0x0000)
struct ListViewEntryObjectBase_GetIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ListViewEntryObjectBase_GetIndex) == 0x000004, "Wrong alignment on ListViewEntryObjectBase_GetIndex");
static_assert(sizeof(ListViewEntryObjectBase_GetIndex) == 0x000004, "Wrong size on ListViewEntryObjectBase_GetIndex");
static_assert(offsetof(ListViewEntryObjectBase_GetIndex, ReturnValue) == 0x000000, "Member 'ListViewEntryObjectBase_GetIndex::ReturnValue' has a wrong offset!");

// Function UIFramework.UIFrameworkViewInterface.DispatchMessage
// 0x0008 (0x0008 - 0x0000)
struct UIFrameworkViewInterface_DispatchMessage final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFrameworkViewInterface_DispatchMessage) == 0x000004, "Wrong alignment on UIFrameworkViewInterface_DispatchMessage");
static_assert(sizeof(UIFrameworkViewInterface_DispatchMessage) == 0x000008, "Wrong size on UIFrameworkViewInterface_DispatchMessage");
static_assert(offsetof(UIFrameworkViewInterface_DispatchMessage, EventName) == 0x000000, "Member 'UIFrameworkViewInterface_DispatchMessage::EventName' has a wrong offset!");

// Function UIFramework.UIFrameworkViewInterface.DispatchMessage_OneUObject
// 0x0010 (0x0010 - 0x0000)
struct UIFrameworkViewInterface_DispatchMessage_OneUObject final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          Param;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFrameworkViewInterface_DispatchMessage_OneUObject) == 0x000008, "Wrong alignment on UIFrameworkViewInterface_DispatchMessage_OneUObject");
static_assert(sizeof(UIFrameworkViewInterface_DispatchMessage_OneUObject) == 0x000010, "Wrong size on UIFrameworkViewInterface_DispatchMessage_OneUObject");
static_assert(offsetof(UIFrameworkViewInterface_DispatchMessage_OneUObject, EventName) == 0x000000, "Member 'UIFrameworkViewInterface_DispatchMessage_OneUObject::EventName' has a wrong offset!");
static_assert(offsetof(UIFrameworkViewInterface_DispatchMessage_OneUObject, Param) == 0x000008, "Member 'UIFrameworkViewInterface_DispatchMessage_OneUObject::Param' has a wrong offset!");

// Function UIFramework.UISubsystem.DispatchMessage
// 0x0010 (0x0010 - 0x0000)
struct UISubsystem_DispatchMessage final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          Param;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISubsystem_DispatchMessage) == 0x000008, "Wrong alignment on UISubsystem_DispatchMessage");
static_assert(sizeof(UISubsystem_DispatchMessage) == 0x000010, "Wrong size on UISubsystem_DispatchMessage");
static_assert(offsetof(UISubsystem_DispatchMessage, EventName) == 0x000000, "Member 'UISubsystem_DispatchMessage::EventName' has a wrong offset!");
static_assert(offsetof(UISubsystem_DispatchMessage, Param) == 0x000008, "Member 'UISubsystem_DispatchMessage::Param' has a wrong offset!");

// Function UIFramework.UISubsystem.GetUISubLevel
// 0x0030 (0x0030 - 0x0000)
struct UISubsystem_GetUISubLevel final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  ReturnValue;                                       // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISubsystem_GetUISubLevel) == 0x000008, "Wrong alignment on UISubsystem_GetUISubLevel");
static_assert(sizeof(UISubsystem_GetUISubLevel) == 0x000030, "Wrong size on UISubsystem_GetUISubLevel");
static_assert(offsetof(UISubsystem_GetUISubLevel, Tag) == 0x000000, "Member 'UISubsystem_GetUISubLevel::Tag' has a wrong offset!");
static_assert(offsetof(UISubsystem_GetUISubLevel, ReturnValue) == 0x000008, "Member 'UISubsystem_GetUISubLevel::ReturnValue' has a wrong offset!");

// Function UIFramework.UISubsystem.LoadUISubLevel
// 0x000C (0x000C - 0x0000)
struct UISubsystem_LoadUISubLevel final
{
public:
	struct FGameplayTag                           SubLevelTag;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugUnLoadUISubLevel;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceReload;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UISubsystem_LoadUISubLevel) == 0x000004, "Wrong alignment on UISubsystem_LoadUISubLevel");
static_assert(sizeof(UISubsystem_LoadUISubLevel) == 0x00000C, "Wrong size on UISubsystem_LoadUISubLevel");
static_assert(offsetof(UISubsystem_LoadUISubLevel, SubLevelTag) == 0x000000, "Member 'UISubsystem_LoadUISubLevel::SubLevelTag' has a wrong offset!");
static_assert(offsetof(UISubsystem_LoadUISubLevel, bDebugUnLoadUISubLevel) == 0x000008, "Member 'UISubsystem_LoadUISubLevel::bDebugUnLoadUISubLevel' has a wrong offset!");
static_assert(offsetof(UISubsystem_LoadUISubLevel, bForceReload) == 0x000009, "Member 'UISubsystem_LoadUISubLevel::bForceReload' has a wrong offset!");
static_assert(offsetof(UISubsystem_LoadUISubLevel, bVisible) == 0x00000A, "Member 'UISubsystem_LoadUISubLevel::bVisible' has a wrong offset!");

// Function UIFramework.UISubsystem.LoadUISubLevel_Ret_LevelStreamingDynamic
// 0x0018 (0x0018 - 0x0000)
struct UISubsystem_LoadUISubLevel_Ret_LevelStreamingDynamic final
{
public:
	struct FGameplayTag                           SubLevelTag;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceReload;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelStreamingDynamic*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISubsystem_LoadUISubLevel_Ret_LevelStreamingDynamic) == 0x000008, "Wrong alignment on UISubsystem_LoadUISubLevel_Ret_LevelStreamingDynamic");
static_assert(sizeof(UISubsystem_LoadUISubLevel_Ret_LevelStreamingDynamic) == 0x000018, "Wrong size on UISubsystem_LoadUISubLevel_Ret_LevelStreamingDynamic");
static_assert(offsetof(UISubsystem_LoadUISubLevel_Ret_LevelStreamingDynamic, SubLevelTag) == 0x000000, "Member 'UISubsystem_LoadUISubLevel_Ret_LevelStreamingDynamic::SubLevelTag' has a wrong offset!");
static_assert(offsetof(UISubsystem_LoadUISubLevel_Ret_LevelStreamingDynamic, bForceReload) == 0x000008, "Member 'UISubsystem_LoadUISubLevel_Ret_LevelStreamingDynamic::bForceReload' has a wrong offset!");
static_assert(offsetof(UISubsystem_LoadUISubLevel_Ret_LevelStreamingDynamic, ReturnValue) == 0x000010, "Member 'UISubsystem_LoadUISubLevel_Ret_LevelStreamingDynamic::ReturnValue' has a wrong offset!");

// Function UIFramework.UISubsystem.SetVisibleUISubLevel
// 0x000C (0x000C - 0x0000)
struct UISubsystem_SetVisibleUISubLevel final
{
public:
	struct FGameplayTag                           SubLevelTag;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UISubsystem_SetVisibleUISubLevel) == 0x000004, "Wrong alignment on UISubsystem_SetVisibleUISubLevel");
static_assert(sizeof(UISubsystem_SetVisibleUISubLevel) == 0x00000C, "Wrong size on UISubsystem_SetVisibleUISubLevel");
static_assert(offsetof(UISubsystem_SetVisibleUISubLevel, SubLevelTag) == 0x000000, "Member 'UISubsystem_SetVisibleUISubLevel::SubLevelTag' has a wrong offset!");
static_assert(offsetof(UISubsystem_SetVisibleUISubLevel, bVisible) == 0x000008, "Member 'UISubsystem_SetVisibleUISubLevel::bVisible' has a wrong offset!");

// Function UIFramework.UISubsystem.UnLoadUISubLevel
// 0x0008 (0x0008 - 0x0000)
struct UISubsystem_UnLoadUISubLevel final
{
public:
	struct FGameplayTag                           SubLevelTag;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISubsystem_UnLoadUISubLevel) == 0x000004, "Wrong alignment on UISubsystem_UnLoadUISubLevel");
static_assert(sizeof(UISubsystem_UnLoadUISubLevel) == 0x000008, "Wrong size on UISubsystem_UnLoadUISubLevel");
static_assert(offsetof(UISubsystem_UnLoadUISubLevel, SubLevelTag) == 0x000000, "Member 'UISubsystem_UnLoadUISubLevel::SubLevelTag' has a wrong offset!");

// Function UIFramework.WidgetBackground.BP_ChangeBackgroundBlurVisibility
// 0x0001 (0x0001 - 0x0000)
struct WidgetBackground_BP_ChangeBackgroundBlurVisibility final
{
public:
	bool                                          InVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetBackground_BP_ChangeBackgroundBlurVisibility) == 0x000001, "Wrong alignment on WidgetBackground_BP_ChangeBackgroundBlurVisibility");
static_assert(sizeof(WidgetBackground_BP_ChangeBackgroundBlurVisibility) == 0x000001, "Wrong size on WidgetBackground_BP_ChangeBackgroundBlurVisibility");
static_assert(offsetof(WidgetBackground_BP_ChangeBackgroundBlurVisibility, InVisible) == 0x000000, "Member 'WidgetBackground_BP_ChangeBackgroundBlurVisibility::InVisible' has a wrong offset!");

// Function UIFramework.WidgetButton.PressThisButton
// 0x0001 (0x0001 - 0x0000)
struct WidgetButton_PressThisButton final
{
public:
	EWidgetInputType                              InputType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetButton_PressThisButton) == 0x000001, "Wrong alignment on WidgetButton_PressThisButton");
static_assert(sizeof(WidgetButton_PressThisButton) == 0x000001, "Wrong size on WidgetButton_PressThisButton");
static_assert(offsetof(WidgetButton_PressThisButton, InputType) == 0x000000, "Member 'WidgetButton_PressThisButton::InputType' has a wrong offset!");

// Function UIFramework.WidgetButton.SetOnlyPlayShortcutAtomCue
// 0x0001 (0x0001 - 0x0000)
struct WidgetButton_SetOnlyPlayShortcutAtomCue final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetButton_SetOnlyPlayShortcutAtomCue) == 0x000001, "Wrong alignment on WidgetButton_SetOnlyPlayShortcutAtomCue");
static_assert(sizeof(WidgetButton_SetOnlyPlayShortcutAtomCue) == 0x000001, "Wrong size on WidgetButton_SetOnlyPlayShortcutAtomCue");
static_assert(offsetof(WidgetButton_SetOnlyPlayShortcutAtomCue, Flag) == 0x000000, "Member 'WidgetButton_SetOnlyPlayShortcutAtomCue::Flag' has a wrong offset!");

// Function UIFramework.WidgetButton.StopDefaultAnimation
// 0x0001 (0x0001 - 0x0000)
struct WidgetButton_StopDefaultAnimation final
{
public:
	bool                                          bAllChildren;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetButton_StopDefaultAnimation) == 0x000001, "Wrong alignment on WidgetButton_StopDefaultAnimation");
static_assert(sizeof(WidgetButton_StopDefaultAnimation) == 0x000001, "Wrong size on WidgetButton_StopDefaultAnimation");
static_assert(offsetof(WidgetButton_StopDefaultAnimation, bAllChildren) == 0x000000, "Member 'WidgetButton_StopDefaultAnimation::bAllChildren' has a wrong offset!");

// Function UIFramework.WidgetButton.StopFocusAnimation
// 0x0001 (0x0001 - 0x0000)
struct WidgetButton_StopFocusAnimation final
{
public:
	bool                                          bAllChildren;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetButton_StopFocusAnimation) == 0x000001, "Wrong alignment on WidgetButton_StopFocusAnimation");
static_assert(sizeof(WidgetButton_StopFocusAnimation) == 0x000001, "Wrong size on WidgetButton_StopFocusAnimation");
static_assert(offsetof(WidgetButton_StopFocusAnimation, bAllChildren) == 0x000000, "Member 'WidgetButton_StopFocusAnimation::bAllChildren' has a wrong offset!");

// Function UIFramework.WidgetButton.StopIdleAnimation
// 0x0001 (0x0001 - 0x0000)
struct WidgetButton_StopIdleAnimation final
{
public:
	bool                                          bAllChildren;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetButton_StopIdleAnimation) == 0x000001, "Wrong alignment on WidgetButton_StopIdleAnimation");
static_assert(sizeof(WidgetButton_StopIdleAnimation) == 0x000001, "Wrong size on WidgetButton_StopIdleAnimation");
static_assert(offsetof(WidgetButton_StopIdleAnimation, bAllChildren) == 0x000000, "Member 'WidgetButton_StopIdleAnimation::bAllChildren' has a wrong offset!");

// Function UIFramework.WidgetButton.StopNegativeAnimation
// 0x0001 (0x0001 - 0x0000)
struct WidgetButton_StopNegativeAnimation final
{
public:
	bool                                          bAllChildren;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetButton_StopNegativeAnimation) == 0x000001, "Wrong alignment on WidgetButton_StopNegativeAnimation");
static_assert(sizeof(WidgetButton_StopNegativeAnimation) == 0x000001, "Wrong size on WidgetButton_StopNegativeAnimation");
static_assert(offsetof(WidgetButton_StopNegativeAnimation, bAllChildren) == 0x000000, "Member 'WidgetButton_StopNegativeAnimation::bAllChildren' has a wrong offset!");

// Function UIFramework.WidgetButton.StopPressAnimation
// 0x0001 (0x0001 - 0x0000)
struct WidgetButton_StopPressAnimation final
{
public:
	bool                                          bAllChildren;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetButton_StopPressAnimation) == 0x000001, "Wrong alignment on WidgetButton_StopPressAnimation");
static_assert(sizeof(WidgetButton_StopPressAnimation) == 0x000001, "Wrong size on WidgetButton_StopPressAnimation");
static_assert(offsetof(WidgetButton_StopPressAnimation, bAllChildren) == 0x000000, "Member 'WidgetButton_StopPressAnimation::bAllChildren' has a wrong offset!");

// Function UIFramework.WidgetButton.StopReleaseAnimation
// 0x0001 (0x0001 - 0x0000)
struct WidgetButton_StopReleaseAnimation final
{
public:
	bool                                          bAllChildren;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetButton_StopReleaseAnimation) == 0x000001, "Wrong alignment on WidgetButton_StopReleaseAnimation");
static_assert(sizeof(WidgetButton_StopReleaseAnimation) == 0x000001, "Wrong size on WidgetButton_StopReleaseAnimation");
static_assert(offsetof(WidgetButton_StopReleaseAnimation, bAllChildren) == 0x000000, "Member 'WidgetButton_StopReleaseAnimation::bAllChildren' has a wrong offset!");

// Function UIFramework.WidgetButtonDetails.OnDecided
// 0x0010 (0x0010 - 0x0000)
struct WidgetButtonDetails_OnDecided final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetButtonDetails_OnDecided) == 0x000008, "Wrong alignment on WidgetButtonDetails_OnDecided");
static_assert(sizeof(WidgetButtonDetails_OnDecided) == 0x000010, "Wrong size on WidgetButtonDetails_OnDecided");
static_assert(offsetof(WidgetButtonDetails_OnDecided, Widget) == 0x000000, "Member 'WidgetButtonDetails_OnDecided::Widget' has a wrong offset!");
static_assert(offsetof(WidgetButtonDetails_OnDecided, InputType) == 0x000008, "Member 'WidgetButtonDetails_OnDecided::InputType' has a wrong offset!");

// DelegateFunction UIFramework.WidgetButtonDetails.OnInputKeysEventDelegate__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct WidgetButtonDetails_OnInputKeysEventDelegate__DelegateSignature final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetButtonDetails_OnInputKeysEventDelegate__DelegateSignature) == 0x000008, "Wrong alignment on WidgetButtonDetails_OnInputKeysEventDelegate__DelegateSignature");
static_assert(sizeof(WidgetButtonDetails_OnInputKeysEventDelegate__DelegateSignature) == 0x000028, "Wrong size on WidgetButtonDetails_OnInputKeysEventDelegate__DelegateSignature");
static_assert(offsetof(WidgetButtonDetails_OnInputKeysEventDelegate__DelegateSignature, Widget) == 0x000000, "Member 'WidgetButtonDetails_OnInputKeysEventDelegate__DelegateSignature::Widget' has a wrong offset!");
static_assert(offsetof(WidgetButtonDetails_OnInputKeysEventDelegate__DelegateSignature, Key) == 0x000008, "Member 'WidgetButtonDetails_OnInputKeysEventDelegate__DelegateSignature::Key' has a wrong offset!");
static_assert(offsetof(WidgetButtonDetails_OnInputKeysEventDelegate__DelegateSignature, InputType) == 0x000020, "Member 'WidgetButtonDetails_OnInputKeysEventDelegate__DelegateSignature::InputType' has a wrong offset!");

// Function UIFramework.WidgetCreator.BP_SetWidgetClass
// 0x0008 (0x0008 - 0x0000)
struct WidgetCreator_BP_SetWidgetClass final
{
public:
	TSubclassOf<class UWidgetBase>                WidgetClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetCreator_BP_SetWidgetClass) == 0x000008, "Wrong alignment on WidgetCreator_BP_SetWidgetClass");
static_assert(sizeof(WidgetCreator_BP_SetWidgetClass) == 0x000008, "Wrong size on WidgetCreator_BP_SetWidgetClass");
static_assert(offsetof(WidgetCreator_BP_SetWidgetClass, WidgetClass) == 0x000000, "Member 'WidgetCreator_BP_SetWidgetClass::WidgetClass' has a wrong offset!");

// DelegateFunction UIFramework.WidgetGeneralWindowBase.OnWindowInputEventDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct WidgetGeneralWindowBase_OnWindowInputEventDelegate__DelegateSignature final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetGeneralWindowBase_OnWindowInputEventDelegate__DelegateSignature) == 0x000008, "Wrong alignment on WidgetGeneralWindowBase_OnWindowInputEventDelegate__DelegateSignature");
static_assert(sizeof(WidgetGeneralWindowBase_OnWindowInputEventDelegate__DelegateSignature) == 0x000010, "Wrong size on WidgetGeneralWindowBase_OnWindowInputEventDelegate__DelegateSignature");
static_assert(offsetof(WidgetGeneralWindowBase_OnWindowInputEventDelegate__DelegateSignature, Widget) == 0x000000, "Member 'WidgetGeneralWindowBase_OnWindowInputEventDelegate__DelegateSignature::Widget' has a wrong offset!");
static_assert(offsetof(WidgetGeneralWindowBase_OnWindowInputEventDelegate__DelegateSignature, InputType) == 0x000008, "Member 'WidgetGeneralWindowBase_OnWindowInputEventDelegate__DelegateSignature::InputType' has a wrong offset!");
static_assert(offsetof(WidgetGeneralWindowBase_OnWindowInputEventDelegate__DelegateSignature, LeftButton) == 0x000009, "Member 'WidgetGeneralWindowBase_OnWindowInputEventDelegate__DelegateSignature::LeftButton' has a wrong offset!");

// Function UIFramework.WidgetGeneralWindowBase.SetText
// 0x0018 (0x0018 - 0x0000)
struct WidgetGeneralWindowBase_SetText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetGeneralWindowBase_SetText) == 0x000008, "Wrong alignment on WidgetGeneralWindowBase_SetText");
static_assert(sizeof(WidgetGeneralWindowBase_SetText) == 0x000018, "Wrong size on WidgetGeneralWindowBase_SetText");
static_assert(offsetof(WidgetGeneralWindowBase_SetText, InText) == 0x000000, "Member 'WidgetGeneralWindowBase_SetText::InText' has a wrong offset!");

// Function UIFramework.WidgetGeneralWindowBase.SetupHeaderText
// 0x0018 (0x0018 - 0x0000)
struct WidgetGeneralWindowBase_SetupHeaderText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetGeneralWindowBase_SetupHeaderText) == 0x000008, "Wrong alignment on WidgetGeneralWindowBase_SetupHeaderText");
static_assert(sizeof(WidgetGeneralWindowBase_SetupHeaderText) == 0x000018, "Wrong size on WidgetGeneralWindowBase_SetupHeaderText");
static_assert(offsetof(WidgetGeneralWindowBase_SetupHeaderText, InText) == 0x000000, "Member 'WidgetGeneralWindowBase_SetupHeaderText::InText' has a wrong offset!");

// Function UIFramework.WidgetGeneralWindowBase.SetWindowSize
// 0x0008 (0x0008 - 0x0000)
struct WidgetGeneralWindowBase_SetWindowSize final
{
public:
	struct FVector2D                              WindowSize;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetGeneralWindowBase_SetWindowSize) == 0x000004, "Wrong alignment on WidgetGeneralWindowBase_SetWindowSize");
static_assert(sizeof(WidgetGeneralWindowBase_SetWindowSize) == 0x000008, "Wrong size on WidgetGeneralWindowBase_SetWindowSize");
static_assert(offsetof(WidgetGeneralWindowBase_SetWindowSize, WindowSize) == 0x000000, "Member 'WidgetGeneralWindowBase_SetWindowSize::WindowSize' has a wrong offset!");

// Function UIFramework.WidgetGeneralWindowBase.GetWindowSize
// 0x0008 (0x0008 - 0x0000)
struct WidgetGeneralWindowBase_GetWindowSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetGeneralWindowBase_GetWindowSize) == 0x000004, "Wrong alignment on WidgetGeneralWindowBase_GetWindowSize");
static_assert(sizeof(WidgetGeneralWindowBase_GetWindowSize) == 0x000008, "Wrong size on WidgetGeneralWindowBase_GetWindowSize");
static_assert(offsetof(WidgetGeneralWindowBase_GetWindowSize, ReturnValue) == 0x000000, "Member 'WidgetGeneralWindowBase_GetWindowSize::ReturnValue' has a wrong offset!");

// Function UIFramework.WidgetGeneralEmptyWindow.BP_ChangeBackgroundBlurVisibility
// 0x0001 (0x0001 - 0x0000)
struct WidgetGeneralEmptyWindow_BP_ChangeBackgroundBlurVisibility final
{
public:
	bool                                          InVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetGeneralEmptyWindow_BP_ChangeBackgroundBlurVisibility) == 0x000001, "Wrong alignment on WidgetGeneralEmptyWindow_BP_ChangeBackgroundBlurVisibility");
static_assert(sizeof(WidgetGeneralEmptyWindow_BP_ChangeBackgroundBlurVisibility) == 0x000001, "Wrong size on WidgetGeneralEmptyWindow_BP_ChangeBackgroundBlurVisibility");
static_assert(offsetof(WidgetGeneralEmptyWindow_BP_ChangeBackgroundBlurVisibility, InVisible) == 0x000000, "Member 'WidgetGeneralEmptyWindow_BP_ChangeBackgroundBlurVisibility::InVisible' has a wrong offset!");

// Function UIFramework.WidgetGeneralEmptyWindow.OnMouseButtonDownCloseWindow
// 0x0160 (0x0160 - 0x0000)
struct WidgetGeneralEmptyWindow_OnMouseButtonDownCloseWindow final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetGeneralEmptyWindow_OnMouseButtonDownCloseWindow) == 0x000008, "Wrong alignment on WidgetGeneralEmptyWindow_OnMouseButtonDownCloseWindow");
static_assert(sizeof(WidgetGeneralEmptyWindow_OnMouseButtonDownCloseWindow) == 0x000160, "Wrong size on WidgetGeneralEmptyWindow_OnMouseButtonDownCloseWindow");
static_assert(offsetof(WidgetGeneralEmptyWindow_OnMouseButtonDownCloseWindow, MyGeometry) == 0x000000, "Member 'WidgetGeneralEmptyWindow_OnMouseButtonDownCloseWindow::MyGeometry' has a wrong offset!");
static_assert(offsetof(WidgetGeneralEmptyWindow_OnMouseButtonDownCloseWindow, MouseEvent) == 0x000038, "Member 'WidgetGeneralEmptyWindow_OnMouseButtonDownCloseWindow::MouseEvent' has a wrong offset!");
static_assert(offsetof(WidgetGeneralEmptyWindow_OnMouseButtonDownCloseWindow, ReturnValue) == 0x0000A8, "Member 'WidgetGeneralEmptyWindow_OnMouseButtonDownCloseWindow::ReturnValue' has a wrong offset!");

// Function UIFramework.WidgetGeneralEmptyWindow.SetPlayCancelSound
// 0x0001 (0x0001 - 0x0000)
struct WidgetGeneralEmptyWindow_SetPlayCancelSound final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetGeneralEmptyWindow_SetPlayCancelSound) == 0x000001, "Wrong alignment on WidgetGeneralEmptyWindow_SetPlayCancelSound");
static_assert(sizeof(WidgetGeneralEmptyWindow_SetPlayCancelSound) == 0x000001, "Wrong size on WidgetGeneralEmptyWindow_SetPlayCancelSound");
static_assert(offsetof(WidgetGeneralEmptyWindow_SetPlayCancelSound, bEnable) == 0x000000, "Member 'WidgetGeneralEmptyWindow_SetPlayCancelSound::bEnable' has a wrong offset!");

// Function UIFramework.WidgetGeneralEmptyWindow.SetPlayCloseSound
// 0x0001 (0x0001 - 0x0000)
struct WidgetGeneralEmptyWindow_SetPlayCloseSound final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetGeneralEmptyWindow_SetPlayCloseSound) == 0x000001, "Wrong alignment on WidgetGeneralEmptyWindow_SetPlayCloseSound");
static_assert(sizeof(WidgetGeneralEmptyWindow_SetPlayCloseSound) == 0x000001, "Wrong size on WidgetGeneralEmptyWindow_SetPlayCloseSound");
static_assert(offsetof(WidgetGeneralEmptyWindow_SetPlayCloseSound, bEnable) == 0x000000, "Member 'WidgetGeneralEmptyWindow_SetPlayCloseSound::bEnable' has a wrong offset!");

// Function UIFramework.WidgetGeneralEmptyWindow.SetPlayOpenSound
// 0x0001 (0x0001 - 0x0000)
struct WidgetGeneralEmptyWindow_SetPlayOpenSound final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetGeneralEmptyWindow_SetPlayOpenSound) == 0x000001, "Wrong alignment on WidgetGeneralEmptyWindow_SetPlayOpenSound");
static_assert(sizeof(WidgetGeneralEmptyWindow_SetPlayOpenSound) == 0x000001, "Wrong size on WidgetGeneralEmptyWindow_SetPlayOpenSound");
static_assert(offsetof(WidgetGeneralEmptyWindow_SetPlayOpenSound, bEnable) == 0x000000, "Member 'WidgetGeneralEmptyWindow_SetPlayOpenSound::bEnable' has a wrong offset!");

// Function UIFramework.WidgetGeneralSelectiveWindow.GetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct WidgetGeneralSelectiveWindow_GetSelectedIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetGeneralSelectiveWindow_GetSelectedIndex) == 0x000004, "Wrong alignment on WidgetGeneralSelectiveWindow_GetSelectedIndex");
static_assert(sizeof(WidgetGeneralSelectiveWindow_GetSelectedIndex) == 0x000004, "Wrong size on WidgetGeneralSelectiveWindow_GetSelectedIndex");
static_assert(offsetof(WidgetGeneralSelectiveWindow_GetSelectedIndex, ReturnValue) == 0x000000, "Member 'WidgetGeneralSelectiveWindow_GetSelectedIndex::ReturnValue' has a wrong offset!");

// Function UIFramework.WidgetGeneralSelectiveWindow.OnDecideButton
// 0x0010 (0x0010 - 0x0000)
struct WidgetGeneralSelectiveWindow_OnDecideButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetGeneralSelectiveWindow_OnDecideButton) == 0x000008, "Wrong alignment on WidgetGeneralSelectiveWindow_OnDecideButton");
static_assert(sizeof(WidgetGeneralSelectiveWindow_OnDecideButton) == 0x000010, "Wrong size on WidgetGeneralSelectiveWindow_OnDecideButton");
static_assert(offsetof(WidgetGeneralSelectiveWindow_OnDecideButton, Widget) == 0x000000, "Member 'WidgetGeneralSelectiveWindow_OnDecideButton::Widget' has a wrong offset!");
static_assert(offsetof(WidgetGeneralSelectiveWindow_OnDecideButton, InputType) == 0x000008, "Member 'WidgetGeneralSelectiveWindow_OnDecideButton::InputType' has a wrong offset!");

// Function UIFramework.WidgetGeneralSelectiveWindow.OnMouseEnterButton
// 0x0010 (0x0010 - 0x0000)
struct WidgetGeneralSelectiveWindow_OnMouseEnterButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetGeneralSelectiveWindow_OnMouseEnterButton) == 0x000008, "Wrong alignment on WidgetGeneralSelectiveWindow_OnMouseEnterButton");
static_assert(sizeof(WidgetGeneralSelectiveWindow_OnMouseEnterButton) == 0x000010, "Wrong size on WidgetGeneralSelectiveWindow_OnMouseEnterButton");
static_assert(offsetof(WidgetGeneralSelectiveWindow_OnMouseEnterButton, Widget) == 0x000000, "Member 'WidgetGeneralSelectiveWindow_OnMouseEnterButton::Widget' has a wrong offset!");
static_assert(offsetof(WidgetGeneralSelectiveWindow_OnMouseEnterButton, InputType) == 0x000008, "Member 'WidgetGeneralSelectiveWindow_OnMouseEnterButton::InputType' has a wrong offset!");

// Function UIFramework.WidgetGeneralSelectiveWindow.OnMouseLeaveButton
// 0x0010 (0x0010 - 0x0000)
struct WidgetGeneralSelectiveWindow_OnMouseLeaveButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetGeneralSelectiveWindow_OnMouseLeaveButton) == 0x000008, "Wrong alignment on WidgetGeneralSelectiveWindow_OnMouseLeaveButton");
static_assert(sizeof(WidgetGeneralSelectiveWindow_OnMouseLeaveButton) == 0x000010, "Wrong size on WidgetGeneralSelectiveWindow_OnMouseLeaveButton");
static_assert(offsetof(WidgetGeneralSelectiveWindow_OnMouseLeaveButton, Widget) == 0x000000, "Member 'WidgetGeneralSelectiveWindow_OnMouseLeaveButton::Widget' has a wrong offset!");
static_assert(offsetof(WidgetGeneralSelectiveWindow_OnMouseLeaveButton, InputType) == 0x000008, "Member 'WidgetGeneralSelectiveWindow_OnMouseLeaveButton::InputType' has a wrong offset!");

// Function UIFramework.WidgetGeneralSelectiveWindow.OnPressButton
// 0x0010 (0x0010 - 0x0000)
struct WidgetGeneralSelectiveWindow_OnPressButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetGeneralSelectiveWindow_OnPressButton) == 0x000008, "Wrong alignment on WidgetGeneralSelectiveWindow_OnPressButton");
static_assert(sizeof(WidgetGeneralSelectiveWindow_OnPressButton) == 0x000010, "Wrong size on WidgetGeneralSelectiveWindow_OnPressButton");
static_assert(offsetof(WidgetGeneralSelectiveWindow_OnPressButton, Widget) == 0x000000, "Member 'WidgetGeneralSelectiveWindow_OnPressButton::Widget' has a wrong offset!");
static_assert(offsetof(WidgetGeneralSelectiveWindow_OnPressButton, InputType) == 0x000008, "Member 'WidgetGeneralSelectiveWindow_OnPressButton::InputType' has a wrong offset!");

// DelegateFunction UIFramework.WidgetGeneralSelectiveWindow.OnWindowInputEventDelegate__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct WidgetGeneralSelectiveWindow_OnWindowInputEventDelegate__DelegateSignature final
{
public:
	int32                                         Selectindex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAppWidget*                             Widget;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetGeneralSelectiveWindow_OnWindowInputEventDelegate__DelegateSignature) == 0x000008, "Wrong alignment on WidgetGeneralSelectiveWindow_OnWindowInputEventDelegate__DelegateSignature");
static_assert(sizeof(WidgetGeneralSelectiveWindow_OnWindowInputEventDelegate__DelegateSignature) == 0x000018, "Wrong size on WidgetGeneralSelectiveWindow_OnWindowInputEventDelegate__DelegateSignature");
static_assert(offsetof(WidgetGeneralSelectiveWindow_OnWindowInputEventDelegate__DelegateSignature, Selectindex) == 0x000000, "Member 'WidgetGeneralSelectiveWindow_OnWindowInputEventDelegate__DelegateSignature::Selectindex' has a wrong offset!");
static_assert(offsetof(WidgetGeneralSelectiveWindow_OnWindowInputEventDelegate__DelegateSignature, Widget) == 0x000008, "Member 'WidgetGeneralSelectiveWindow_OnWindowInputEventDelegate__DelegateSignature::Widget' has a wrong offset!");
static_assert(offsetof(WidgetGeneralSelectiveWindow_OnWindowInputEventDelegate__DelegateSignature, InputType) == 0x000010, "Member 'WidgetGeneralSelectiveWindow_OnWindowInputEventDelegate__DelegateSignature::InputType' has a wrong offset!");
static_assert(offsetof(WidgetGeneralSelectiveWindow_OnWindowInputEventDelegate__DelegateSignature, LeftButton) == 0x000011, "Member 'WidgetGeneralSelectiveWindow_OnWindowInputEventDelegate__DelegateSignature::LeftButton' has a wrong offset!");

// Function UIFramework.WidgetGeneralSelectiveWindow.SetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct WidgetGeneralSelectiveWindow_SetSelectedIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetGeneralSelectiveWindow_SetSelectedIndex) == 0x000004, "Wrong alignment on WidgetGeneralSelectiveWindow_SetSelectedIndex");
static_assert(sizeof(WidgetGeneralSelectiveWindow_SetSelectedIndex) == 0x000004, "Wrong size on WidgetGeneralSelectiveWindow_SetSelectedIndex");
static_assert(offsetof(WidgetGeneralSelectiveWindow_SetSelectedIndex, Index_0) == 0x000000, "Member 'WidgetGeneralSelectiveWindow_SetSelectedIndex::Index_0' has a wrong offset!");

// Function UIFramework.WidgetGeneralSelectiveWindow.GetListText
// 0x0010 (0x0010 - 0x0000)
struct WidgetGeneralSelectiveWindow_GetListText final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetGeneralSelectiveWindow_GetListText) == 0x000008, "Wrong alignment on WidgetGeneralSelectiveWindow_GetListText");
static_assert(sizeof(WidgetGeneralSelectiveWindow_GetListText) == 0x000010, "Wrong size on WidgetGeneralSelectiveWindow_GetListText");
static_assert(offsetof(WidgetGeneralSelectiveWindow_GetListText, ReturnValue) == 0x000000, "Member 'WidgetGeneralSelectiveWindow_GetListText::ReturnValue' has a wrong offset!");

// Function UIFramework.WidgetGeneralSelectiveWindow.GetTwoButtons
// 0x0010 (0x0010 - 0x0000)
struct WidgetGeneralSelectiveWindow_GetTwoButtons final
{
public:
	bool                                          InLeft;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetButton*                          ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetGeneralSelectiveWindow_GetTwoButtons) == 0x000008, "Wrong alignment on WidgetGeneralSelectiveWindow_GetTwoButtons");
static_assert(sizeof(WidgetGeneralSelectiveWindow_GetTwoButtons) == 0x000010, "Wrong size on WidgetGeneralSelectiveWindow_GetTwoButtons");
static_assert(offsetof(WidgetGeneralSelectiveWindow_GetTwoButtons, InLeft) == 0x000000, "Member 'WidgetGeneralSelectiveWindow_GetTwoButtons::InLeft' has a wrong offset!");
static_assert(offsetof(WidgetGeneralSelectiveWindow_GetTwoButtons, ReturnValue) == 0x000008, "Member 'WidgetGeneralSelectiveWindow_GetTwoButtons::ReturnValue' has a wrong offset!");

// Function UIFramework.WidgetGeneralWindow.BP_FocusButton
// 0x0001 (0x0001 - 0x0000)
struct WidgetGeneralWindow_BP_FocusButton final
{
public:
	bool                                          bLeft;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetGeneralWindow_BP_FocusButton) == 0x000001, "Wrong alignment on WidgetGeneralWindow_BP_FocusButton");
static_assert(sizeof(WidgetGeneralWindow_BP_FocusButton) == 0x000001, "Wrong size on WidgetGeneralWindow_BP_FocusButton");
static_assert(offsetof(WidgetGeneralWindow_BP_FocusButton, bLeft) == 0x000000, "Member 'WidgetGeneralWindow_BP_FocusButton::bLeft' has a wrong offset!");

// Function UIFramework.WidgetGeneralWindow.BP_SetButtonEnable
// 0x0001 (0x0001 - 0x0000)
struct WidgetGeneralWindow_BP_SetButtonEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetGeneralWindow_BP_SetButtonEnable) == 0x000001, "Wrong alignment on WidgetGeneralWindow_BP_SetButtonEnable");
static_assert(sizeof(WidgetGeneralWindow_BP_SetButtonEnable) == 0x000001, "Wrong size on WidgetGeneralWindow_BP_SetButtonEnable");
static_assert(offsetof(WidgetGeneralWindow_BP_SetButtonEnable, bEnable) == 0x000000, "Member 'WidgetGeneralWindow_BP_SetButtonEnable::bEnable' has a wrong offset!");

// Function UIFramework.WidgetGeneralWindow.BP_SetLeftButtonEnable
// 0x0001 (0x0001 - 0x0000)
struct WidgetGeneralWindow_BP_SetLeftButtonEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetGeneralWindow_BP_SetLeftButtonEnable) == 0x000001, "Wrong alignment on WidgetGeneralWindow_BP_SetLeftButtonEnable");
static_assert(sizeof(WidgetGeneralWindow_BP_SetLeftButtonEnable) == 0x000001, "Wrong size on WidgetGeneralWindow_BP_SetLeftButtonEnable");
static_assert(offsetof(WidgetGeneralWindow_BP_SetLeftButtonEnable, bEnable) == 0x000000, "Member 'WidgetGeneralWindow_BP_SetLeftButtonEnable::bEnable' has a wrong offset!");

// Function UIFramework.WidgetGeneralWindow.BP_SetRightButtonEnable
// 0x0001 (0x0001 - 0x0000)
struct WidgetGeneralWindow_BP_SetRightButtonEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetGeneralWindow_BP_SetRightButtonEnable) == 0x000001, "Wrong alignment on WidgetGeneralWindow_BP_SetRightButtonEnable");
static_assert(sizeof(WidgetGeneralWindow_BP_SetRightButtonEnable) == 0x000001, "Wrong size on WidgetGeneralWindow_BP_SetRightButtonEnable");
static_assert(offsetof(WidgetGeneralWindow_BP_SetRightButtonEnable, bEnable) == 0x000000, "Member 'WidgetGeneralWindow_BP_SetRightButtonEnable::bEnable' has a wrong offset!");

// Function UIFramework.WidgetGeneralWindow.BP_SetupBackgroundBlur
// 0x0001 (0x0001 - 0x0000)
struct WidgetGeneralWindow_BP_SetupBackgroundBlur final
{
public:
	bool                                          bUserBlur;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetGeneralWindow_BP_SetupBackgroundBlur) == 0x000001, "Wrong alignment on WidgetGeneralWindow_BP_SetupBackgroundBlur");
static_assert(sizeof(WidgetGeneralWindow_BP_SetupBackgroundBlur) == 0x000001, "Wrong size on WidgetGeneralWindow_BP_SetupBackgroundBlur");
static_assert(offsetof(WidgetGeneralWindow_BP_SetupBackgroundBlur, bUserBlur) == 0x000000, "Member 'WidgetGeneralWindow_BP_SetupBackgroundBlur::bUserBlur' has a wrong offset!");

// Function UIFramework.WidgetGeneralWindow.BP_SetupButton
// 0x0028 (0x0028 - 0x0000)
struct WidgetGeneralWindow_BP_SetupButton final
{
public:
	struct FGeneralWindowText                     Text;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetGeneralWindow_BP_SetupButton) == 0x000008, "Wrong alignment on WidgetGeneralWindow_BP_SetupButton");
static_assert(sizeof(WidgetGeneralWindow_BP_SetupButton) == 0x000028, "Wrong size on WidgetGeneralWindow_BP_SetupButton");
static_assert(offsetof(WidgetGeneralWindow_BP_SetupButton, Text) == 0x000000, "Member 'WidgetGeneralWindow_BP_SetupButton::Text' has a wrong offset!");

// Function UIFramework.WidgetGeneralWindow.BP_SetupLeftButton
// 0x0028 (0x0028 - 0x0000)
struct WidgetGeneralWindow_BP_SetupLeftButton final
{
public:
	struct FGeneralWindowText                     Text;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetGeneralWindow_BP_SetupLeftButton) == 0x000008, "Wrong alignment on WidgetGeneralWindow_BP_SetupLeftButton");
static_assert(sizeof(WidgetGeneralWindow_BP_SetupLeftButton) == 0x000028, "Wrong size on WidgetGeneralWindow_BP_SetupLeftButton");
static_assert(offsetof(WidgetGeneralWindow_BP_SetupLeftButton, Text) == 0x000000, "Member 'WidgetGeneralWindow_BP_SetupLeftButton::Text' has a wrong offset!");

// Function UIFramework.WidgetGeneralWindow.BP_SetupRightButton
// 0x0028 (0x0028 - 0x0000)
struct WidgetGeneralWindow_BP_SetupRightButton final
{
public:
	struct FGeneralWindowText                     Text;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetGeneralWindow_BP_SetupRightButton) == 0x000008, "Wrong alignment on WidgetGeneralWindow_BP_SetupRightButton");
static_assert(sizeof(WidgetGeneralWindow_BP_SetupRightButton) == 0x000028, "Wrong size on WidgetGeneralWindow_BP_SetupRightButton");
static_assert(offsetof(WidgetGeneralWindow_BP_SetupRightButton, Text) == 0x000000, "Member 'WidgetGeneralWindow_BP_SetupRightButton::Text' has a wrong offset!");

// Function UIFramework.WidgetGeneralWindow.BP_SetupTwoButton
// 0x0050 (0x0050 - 0x0000)
struct WidgetGeneralWindow_BP_SetupTwoButton final
{
public:
	struct FGeneralWindowText                     LeftText;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeneralWindowText                     RightText;                                         // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetGeneralWindow_BP_SetupTwoButton) == 0x000008, "Wrong alignment on WidgetGeneralWindow_BP_SetupTwoButton");
static_assert(sizeof(WidgetGeneralWindow_BP_SetupTwoButton) == 0x000050, "Wrong size on WidgetGeneralWindow_BP_SetupTwoButton");
static_assert(offsetof(WidgetGeneralWindow_BP_SetupTwoButton, LeftText) == 0x000000, "Member 'WidgetGeneralWindow_BP_SetupTwoButton::LeftText' has a wrong offset!");
static_assert(offsetof(WidgetGeneralWindow_BP_SetupTwoButton, RightText) == 0x000028, "Member 'WidgetGeneralWindow_BP_SetupTwoButton::RightText' has a wrong offset!");

// Function UIFramework.WidgetGeneralWindow.OnDecideButton
// 0x0010 (0x0010 - 0x0000)
struct WidgetGeneralWindow_OnDecideButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetGeneralWindow_OnDecideButton) == 0x000008, "Wrong alignment on WidgetGeneralWindow_OnDecideButton");
static_assert(sizeof(WidgetGeneralWindow_OnDecideButton) == 0x000010, "Wrong size on WidgetGeneralWindow_OnDecideButton");
static_assert(offsetof(WidgetGeneralWindow_OnDecideButton, Widget) == 0x000000, "Member 'WidgetGeneralWindow_OnDecideButton::Widget' has a wrong offset!");
static_assert(offsetof(WidgetGeneralWindow_OnDecideButton, InputType) == 0x000008, "Member 'WidgetGeneralWindow_OnDecideButton::InputType' has a wrong offset!");

// Function UIFramework.WidgetGeneralWindow.OnMouseEnterButton
// 0x0010 (0x0010 - 0x0000)
struct WidgetGeneralWindow_OnMouseEnterButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetGeneralWindow_OnMouseEnterButton) == 0x000008, "Wrong alignment on WidgetGeneralWindow_OnMouseEnterButton");
static_assert(sizeof(WidgetGeneralWindow_OnMouseEnterButton) == 0x000010, "Wrong size on WidgetGeneralWindow_OnMouseEnterButton");
static_assert(offsetof(WidgetGeneralWindow_OnMouseEnterButton, Widget) == 0x000000, "Member 'WidgetGeneralWindow_OnMouseEnterButton::Widget' has a wrong offset!");
static_assert(offsetof(WidgetGeneralWindow_OnMouseEnterButton, InputType) == 0x000008, "Member 'WidgetGeneralWindow_OnMouseEnterButton::InputType' has a wrong offset!");

// Function UIFramework.WidgetGeneralWindow.OnMouseLeaveButton
// 0x0010 (0x0010 - 0x0000)
struct WidgetGeneralWindow_OnMouseLeaveButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetGeneralWindow_OnMouseLeaveButton) == 0x000008, "Wrong alignment on WidgetGeneralWindow_OnMouseLeaveButton");
static_assert(sizeof(WidgetGeneralWindow_OnMouseLeaveButton) == 0x000010, "Wrong size on WidgetGeneralWindow_OnMouseLeaveButton");
static_assert(offsetof(WidgetGeneralWindow_OnMouseLeaveButton, Widget) == 0x000000, "Member 'WidgetGeneralWindow_OnMouseLeaveButton::Widget' has a wrong offset!");
static_assert(offsetof(WidgetGeneralWindow_OnMouseLeaveButton, InputType) == 0x000008, "Member 'WidgetGeneralWindow_OnMouseLeaveButton::InputType' has a wrong offset!");

// Function UIFramework.WidgetGeneralWindow.OnPressButton
// 0x0010 (0x0010 - 0x0000)
struct WidgetGeneralWindow_OnPressButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetGeneralWindow_OnPressButton) == 0x000008, "Wrong alignment on WidgetGeneralWindow_OnPressButton");
static_assert(sizeof(WidgetGeneralWindow_OnPressButton) == 0x000010, "Wrong size on WidgetGeneralWindow_OnPressButton");
static_assert(offsetof(WidgetGeneralWindow_OnPressButton, Widget) == 0x000000, "Member 'WidgetGeneralWindow_OnPressButton::Widget' has a wrong offset!");
static_assert(offsetof(WidgetGeneralWindow_OnPressButton, InputType) == 0x000008, "Member 'WidgetGeneralWindow_OnPressButton::InputType' has a wrong offset!");

// DelegateFunction UIFramework.WidgetGeneralWindow.OnWindowInputEventDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct WidgetGeneralWindow_OnWindowInputEventDelegate__DelegateSignature final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetGeneralWindow_OnWindowInputEventDelegate__DelegateSignature) == 0x000008, "Wrong alignment on WidgetGeneralWindow_OnWindowInputEventDelegate__DelegateSignature");
static_assert(sizeof(WidgetGeneralWindow_OnWindowInputEventDelegate__DelegateSignature) == 0x000010, "Wrong size on WidgetGeneralWindow_OnWindowInputEventDelegate__DelegateSignature");
static_assert(offsetof(WidgetGeneralWindow_OnWindowInputEventDelegate__DelegateSignature, Widget) == 0x000000, "Member 'WidgetGeneralWindow_OnWindowInputEventDelegate__DelegateSignature::Widget' has a wrong offset!");
static_assert(offsetof(WidgetGeneralWindow_OnWindowInputEventDelegate__DelegateSignature, InputType) == 0x000008, "Member 'WidgetGeneralWindow_OnWindowInputEventDelegate__DelegateSignature::InputType' has a wrong offset!");
static_assert(offsetof(WidgetGeneralWindow_OnWindowInputEventDelegate__DelegateSignature, LeftButton) == 0x000009, "Member 'WidgetGeneralWindow_OnWindowInputEventDelegate__DelegateSignature::LeftButton' has a wrong offset!");

// Function UIFramework.WidgetGeneralWindow.SetSubText
// 0x0018 (0x0018 - 0x0000)
struct WidgetGeneralWindow_SetSubText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetGeneralWindow_SetSubText) == 0x000008, "Wrong alignment on WidgetGeneralWindow_SetSubText");
static_assert(sizeof(WidgetGeneralWindow_SetSubText) == 0x000018, "Wrong size on WidgetGeneralWindow_SetSubText");
static_assert(offsetof(WidgetGeneralWindow_SetSubText, InText) == 0x000000, "Member 'WidgetGeneralWindow_SetSubText::InText' has a wrong offset!");

// Function UIFramework.WidgetGeneralWindow.BP_GetButtonCount
// 0x0004 (0x0004 - 0x0000)
struct WidgetGeneralWindow_BP_GetButtonCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetGeneralWindow_BP_GetButtonCount) == 0x000004, "Wrong alignment on WidgetGeneralWindow_BP_GetButtonCount");
static_assert(sizeof(WidgetGeneralWindow_BP_GetButtonCount) == 0x000004, "Wrong size on WidgetGeneralWindow_BP_GetButtonCount");
static_assert(offsetof(WidgetGeneralWindow_BP_GetButtonCount, ReturnValue) == 0x000000, "Member 'WidgetGeneralWindow_BP_GetButtonCount::ReturnValue' has a wrong offset!");

// Function UIFramework.WidgetGeneralWindow.BP_GetLeftOfTwoButtons
// 0x0008 (0x0008 - 0x0000)
struct WidgetGeneralWindow_BP_GetLeftOfTwoButtons final
{
public:
	class UWidgetButton*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetGeneralWindow_BP_GetLeftOfTwoButtons) == 0x000008, "Wrong alignment on WidgetGeneralWindow_BP_GetLeftOfTwoButtons");
static_assert(sizeof(WidgetGeneralWindow_BP_GetLeftOfTwoButtons) == 0x000008, "Wrong size on WidgetGeneralWindow_BP_GetLeftOfTwoButtons");
static_assert(offsetof(WidgetGeneralWindow_BP_GetLeftOfTwoButtons, ReturnValue) == 0x000000, "Member 'WidgetGeneralWindow_BP_GetLeftOfTwoButtons::ReturnValue' has a wrong offset!");

// Function UIFramework.WidgetGeneralWindow.BP_GetOneButton
// 0x0008 (0x0008 - 0x0000)
struct WidgetGeneralWindow_BP_GetOneButton final
{
public:
	class UWidgetButton*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetGeneralWindow_BP_GetOneButton) == 0x000008, "Wrong alignment on WidgetGeneralWindow_BP_GetOneButton");
static_assert(sizeof(WidgetGeneralWindow_BP_GetOneButton) == 0x000008, "Wrong size on WidgetGeneralWindow_BP_GetOneButton");
static_assert(offsetof(WidgetGeneralWindow_BP_GetOneButton, ReturnValue) == 0x000000, "Member 'WidgetGeneralWindow_BP_GetOneButton::ReturnValue' has a wrong offset!");

// Function UIFramework.WidgetGeneralWindow.BP_GetRightOfTwoButtons
// 0x0008 (0x0008 - 0x0000)
struct WidgetGeneralWindow_BP_GetRightOfTwoButtons final
{
public:
	class UWidgetButton*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetGeneralWindow_BP_GetRightOfTwoButtons) == 0x000008, "Wrong alignment on WidgetGeneralWindow_BP_GetRightOfTwoButtons");
static_assert(sizeof(WidgetGeneralWindow_BP_GetRightOfTwoButtons) == 0x000008, "Wrong size on WidgetGeneralWindow_BP_GetRightOfTwoButtons");
static_assert(offsetof(WidgetGeneralWindow_BP_GetRightOfTwoButtons, ReturnValue) == 0x000000, "Member 'WidgetGeneralWindow_BP_GetRightOfTwoButtons::ReturnValue' has a wrong offset!");

// Function UIFramework.WidgetGeneralVerticalMultipleButtonWindow.OnButtonAddedToFocusEvent
// 0x0010 (0x0010 - 0x0000)
struct WidgetGeneralVerticalMultipleButtonWindow_OnButtonAddedToFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetGeneralVerticalMultipleButtonWindow_OnButtonAddedToFocusEvent) == 0x000008, "Wrong alignment on WidgetGeneralVerticalMultipleButtonWindow_OnButtonAddedToFocusEvent");
static_assert(sizeof(WidgetGeneralVerticalMultipleButtonWindow_OnButtonAddedToFocusEvent) == 0x000010, "Wrong size on WidgetGeneralVerticalMultipleButtonWindow_OnButtonAddedToFocusEvent");
static_assert(offsetof(WidgetGeneralVerticalMultipleButtonWindow_OnButtonAddedToFocusEvent, Widget) == 0x000000, "Member 'WidgetGeneralVerticalMultipleButtonWindow_OnButtonAddedToFocusEvent::Widget' has a wrong offset!");
static_assert(offsetof(WidgetGeneralVerticalMultipleButtonWindow_OnButtonAddedToFocusEvent, InputType) == 0x000008, "Member 'WidgetGeneralVerticalMultipleButtonWindow_OnButtonAddedToFocusEvent::InputType' has a wrong offset!");

// Function UIFramework.WidgetGeneralVerticalMultipleButtonWindow.OnButtonDecideEvent
// 0x0010 (0x0010 - 0x0000)
struct WidgetGeneralVerticalMultipleButtonWindow_OnButtonDecideEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetGeneralVerticalMultipleButtonWindow_OnButtonDecideEvent) == 0x000008, "Wrong alignment on WidgetGeneralVerticalMultipleButtonWindow_OnButtonDecideEvent");
static_assert(sizeof(WidgetGeneralVerticalMultipleButtonWindow_OnButtonDecideEvent) == 0x000010, "Wrong size on WidgetGeneralVerticalMultipleButtonWindow_OnButtonDecideEvent");
static_assert(offsetof(WidgetGeneralVerticalMultipleButtonWindow_OnButtonDecideEvent, Widget) == 0x000000, "Member 'WidgetGeneralVerticalMultipleButtonWindow_OnButtonDecideEvent::Widget' has a wrong offset!");
static_assert(offsetof(WidgetGeneralVerticalMultipleButtonWindow_OnButtonDecideEvent, InputType) == 0x000008, "Member 'WidgetGeneralVerticalMultipleButtonWindow_OnButtonDecideEvent::InputType' has a wrong offset!");

// Function UIFramework.WidgetGeneralVerticalMultipleButtonWindow.OnButtonOnLongDecideEvent
// 0x0010 (0x0010 - 0x0000)
struct WidgetGeneralVerticalMultipleButtonWindow_OnButtonOnLongDecideEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetGeneralVerticalMultipleButtonWindow_OnButtonOnLongDecideEvent) == 0x000008, "Wrong alignment on WidgetGeneralVerticalMultipleButtonWindow_OnButtonOnLongDecideEvent");
static_assert(sizeof(WidgetGeneralVerticalMultipleButtonWindow_OnButtonOnLongDecideEvent) == 0x000010, "Wrong size on WidgetGeneralVerticalMultipleButtonWindow_OnButtonOnLongDecideEvent");
static_assert(offsetof(WidgetGeneralVerticalMultipleButtonWindow_OnButtonOnLongDecideEvent, Widget) == 0x000000, "Member 'WidgetGeneralVerticalMultipleButtonWindow_OnButtonOnLongDecideEvent::Widget' has a wrong offset!");
static_assert(offsetof(WidgetGeneralVerticalMultipleButtonWindow_OnButtonOnLongDecideEvent, InputType) == 0x000008, "Member 'WidgetGeneralVerticalMultipleButtonWindow_OnButtonOnLongDecideEvent::InputType' has a wrong offset!");

// Function UIFramework.WidgetGeneralVerticalMultipleButtonWindow.OnButtonPressEvent
// 0x0010 (0x0010 - 0x0000)
struct WidgetGeneralVerticalMultipleButtonWindow_OnButtonPressEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetGeneralVerticalMultipleButtonWindow_OnButtonPressEvent) == 0x000008, "Wrong alignment on WidgetGeneralVerticalMultipleButtonWindow_OnButtonPressEvent");
static_assert(sizeof(WidgetGeneralVerticalMultipleButtonWindow_OnButtonPressEvent) == 0x000010, "Wrong size on WidgetGeneralVerticalMultipleButtonWindow_OnButtonPressEvent");
static_assert(offsetof(WidgetGeneralVerticalMultipleButtonWindow_OnButtonPressEvent, Widget) == 0x000000, "Member 'WidgetGeneralVerticalMultipleButtonWindow_OnButtonPressEvent::Widget' has a wrong offset!");
static_assert(offsetof(WidgetGeneralVerticalMultipleButtonWindow_OnButtonPressEvent, InputType) == 0x000008, "Member 'WidgetGeneralVerticalMultipleButtonWindow_OnButtonPressEvent::InputType' has a wrong offset!");

// Function UIFramework.WidgetGeneralVerticalMultipleButtonWindow.OnButtonRemovedFromFocusEvent
// 0x0010 (0x0010 - 0x0000)
struct WidgetGeneralVerticalMultipleButtonWindow_OnButtonRemovedFromFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetGeneralVerticalMultipleButtonWindow_OnButtonRemovedFromFocusEvent) == 0x000008, "Wrong alignment on WidgetGeneralVerticalMultipleButtonWindow_OnButtonRemovedFromFocusEvent");
static_assert(sizeof(WidgetGeneralVerticalMultipleButtonWindow_OnButtonRemovedFromFocusEvent) == 0x000010, "Wrong size on WidgetGeneralVerticalMultipleButtonWindow_OnButtonRemovedFromFocusEvent");
static_assert(offsetof(WidgetGeneralVerticalMultipleButtonWindow_OnButtonRemovedFromFocusEvent, Widget) == 0x000000, "Member 'WidgetGeneralVerticalMultipleButtonWindow_OnButtonRemovedFromFocusEvent::Widget' has a wrong offset!");
static_assert(offsetof(WidgetGeneralVerticalMultipleButtonWindow_OnButtonRemovedFromFocusEvent, InputType) == 0x000008, "Member 'WidgetGeneralVerticalMultipleButtonWindow_OnButtonRemovedFromFocusEvent::InputType' has a wrong offset!");

// Function UIFramework.WidgetLocalizeLayout.SetText
// 0x0030 (0x0030 - 0x0000)
struct WidgetLocalizeLayout_SetText final
{
public:
	class FText                                   Source;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Format;                                            // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetLocalizeLayout_SetText) == 0x000008, "Wrong alignment on WidgetLocalizeLayout_SetText");
static_assert(sizeof(WidgetLocalizeLayout_SetText) == 0x000030, "Wrong size on WidgetLocalizeLayout_SetText");
static_assert(offsetof(WidgetLocalizeLayout_SetText, Source) == 0x000000, "Member 'WidgetLocalizeLayout_SetText::Source' has a wrong offset!");
static_assert(offsetof(WidgetLocalizeLayout_SetText, Format) == 0x000018, "Member 'WidgetLocalizeLayout_SetText::Format' has a wrong offset!");

// Function UIFramework.WidgetLocalizeLayoutItem.SetText
// 0x0018 (0x0018 - 0x0000)
struct WidgetLocalizeLayoutItem_SetText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetLocalizeLayoutItem_SetText) == 0x000008, "Wrong alignment on WidgetLocalizeLayoutItem_SetText");
static_assert(sizeof(WidgetLocalizeLayoutItem_SetText) == 0x000018, "Wrong size on WidgetLocalizeLayoutItem_SetText");
static_assert(offsetof(WidgetLocalizeLayoutItem_SetText, Text) == 0x000000, "Member 'WidgetLocalizeLayoutItem_SetText::Text' has a wrong offset!");

// Function UIFramework.WidgetMatrixSelection.OnCancelElement
// 0x0010 (0x0010 - 0x0000)
struct WidgetMatrixSelection_OnCancelElement final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetMatrixSelection_OnCancelElement) == 0x000008, "Wrong alignment on WidgetMatrixSelection_OnCancelElement");
static_assert(sizeof(WidgetMatrixSelection_OnCancelElement) == 0x000010, "Wrong size on WidgetMatrixSelection_OnCancelElement");
static_assert(offsetof(WidgetMatrixSelection_OnCancelElement, Widget) == 0x000000, "Member 'WidgetMatrixSelection_OnCancelElement::Widget' has a wrong offset!");
static_assert(offsetof(WidgetMatrixSelection_OnCancelElement, InputType) == 0x000008, "Member 'WidgetMatrixSelection_OnCancelElement::InputType' has a wrong offset!");

// Function UIFramework.WidgetMatrixSelection.OnDecideElement
// 0x0010 (0x0010 - 0x0000)
struct WidgetMatrixSelection_OnDecideElement final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetMatrixSelection_OnDecideElement) == 0x000008, "Wrong alignment on WidgetMatrixSelection_OnDecideElement");
static_assert(sizeof(WidgetMatrixSelection_OnDecideElement) == 0x000010, "Wrong size on WidgetMatrixSelection_OnDecideElement");
static_assert(offsetof(WidgetMatrixSelection_OnDecideElement, Widget) == 0x000000, "Member 'WidgetMatrixSelection_OnDecideElement::Widget' has a wrong offset!");
static_assert(offsetof(WidgetMatrixSelection_OnDecideElement, InputType) == 0x000008, "Member 'WidgetMatrixSelection_OnDecideElement::InputType' has a wrong offset!");

// DelegateFunction UIFramework.WidgetMatrixSelection.OnMatrixSelectionInputEventDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct WidgetMatrixSelection_OnMatrixSelectionInputEventDelegate__DelegateSignature final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetMatrixSelection_OnMatrixSelectionInputEventDelegate__DelegateSignature) == 0x000008, "Wrong alignment on WidgetMatrixSelection_OnMatrixSelectionInputEventDelegate__DelegateSignature");
static_assert(sizeof(WidgetMatrixSelection_OnMatrixSelectionInputEventDelegate__DelegateSignature) == 0x000010, "Wrong size on WidgetMatrixSelection_OnMatrixSelectionInputEventDelegate__DelegateSignature");
static_assert(offsetof(WidgetMatrixSelection_OnMatrixSelectionInputEventDelegate__DelegateSignature, Widget) == 0x000000, "Member 'WidgetMatrixSelection_OnMatrixSelectionInputEventDelegate__DelegateSignature::Widget' has a wrong offset!");
static_assert(offsetof(WidgetMatrixSelection_OnMatrixSelectionInputEventDelegate__DelegateSignature, InputType) == 0x000008, "Member 'WidgetMatrixSelection_OnMatrixSelectionInputEventDelegate__DelegateSignature::InputType' has a wrong offset!");
static_assert(offsetof(WidgetMatrixSelection_OnMatrixSelectionInputEventDelegate__DelegateSignature, Index_0) == 0x00000C, "Member 'WidgetMatrixSelection_OnMatrixSelectionInputEventDelegate__DelegateSignature::Index_0' has a wrong offset!");

// Function UIFramework.WidgetMatrixSelection.OnSelectElement
// 0x0010 (0x0010 - 0x0000)
struct WidgetMatrixSelection_OnSelectElement final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetMatrixSelection_OnSelectElement) == 0x000008, "Wrong alignment on WidgetMatrixSelection_OnSelectElement");
static_assert(sizeof(WidgetMatrixSelection_OnSelectElement) == 0x000010, "Wrong size on WidgetMatrixSelection_OnSelectElement");
static_assert(offsetof(WidgetMatrixSelection_OnSelectElement, Widget) == 0x000000, "Member 'WidgetMatrixSelection_OnSelectElement::Widget' has a wrong offset!");
static_assert(offsetof(WidgetMatrixSelection_OnSelectElement, InputType) == 0x000008, "Member 'WidgetMatrixSelection_OnSelectElement::InputType' has a wrong offset!");

// Function UIFramework.WidgetMatrixSelection.BP_GetElemets
// 0x0018 (0x0018 - 0x0000)
struct WidgetMatrixSelection_BP_GetElemets final
{
public:
	TSubclassOf<class UWidget>                    ElementType;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UWidget*>                        ReturnValue;                                       // 0x0008(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetMatrixSelection_BP_GetElemets) == 0x000008, "Wrong alignment on WidgetMatrixSelection_BP_GetElemets");
static_assert(sizeof(WidgetMatrixSelection_BP_GetElemets) == 0x000018, "Wrong size on WidgetMatrixSelection_BP_GetElemets");
static_assert(offsetof(WidgetMatrixSelection_BP_GetElemets, ElementType) == 0x000000, "Member 'WidgetMatrixSelection_BP_GetElemets::ElementType' has a wrong offset!");
static_assert(offsetof(WidgetMatrixSelection_BP_GetElemets, ReturnValue) == 0x000008, "Member 'WidgetMatrixSelection_BP_GetElemets::ReturnValue' has a wrong offset!");

// Function UIFramework.WidgetPopUpWindow.OnPressBlockBG
// 0x0160 (0x0160 - 0x0000)
struct WidgetPopUpWindow_OnPressBlockBG final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetPopUpWindow_OnPressBlockBG) == 0x000008, "Wrong alignment on WidgetPopUpWindow_OnPressBlockBG");
static_assert(sizeof(WidgetPopUpWindow_OnPressBlockBG) == 0x000160, "Wrong size on WidgetPopUpWindow_OnPressBlockBG");
static_assert(offsetof(WidgetPopUpWindow_OnPressBlockBG, MyGeometry) == 0x000000, "Member 'WidgetPopUpWindow_OnPressBlockBG::MyGeometry' has a wrong offset!");
static_assert(offsetof(WidgetPopUpWindow_OnPressBlockBG, MouseEvent) == 0x000038, "Member 'WidgetPopUpWindow_OnPressBlockBG::MouseEvent' has a wrong offset!");
static_assert(offsetof(WidgetPopUpWindow_OnPressBlockBG, ReturnValue) == 0x0000A8, "Member 'WidgetPopUpWindow_OnPressBlockBG::ReturnValue' has a wrong offset!");

// Function UIFramework.WidgetScrollBar.OnSelectedKnob
// 0x0010 (0x0010 - 0x0000)
struct WidgetScrollBar_OnSelectedKnob final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetScrollBar_OnSelectedKnob) == 0x000008, "Wrong alignment on WidgetScrollBar_OnSelectedKnob");
static_assert(sizeof(WidgetScrollBar_OnSelectedKnob) == 0x000010, "Wrong size on WidgetScrollBar_OnSelectedKnob");
static_assert(offsetof(WidgetScrollBar_OnSelectedKnob, Widget) == 0x000000, "Member 'WidgetScrollBar_OnSelectedKnob::Widget' has a wrong offset!");
static_assert(offsetof(WidgetScrollBar_OnSelectedKnob, InputType) == 0x000008, "Member 'WidgetScrollBar_OnSelectedKnob::InputType' has a wrong offset!");

// Function UIFramework.WidgetScrollBar.OnUnselectedKnob
// 0x0010 (0x0010 - 0x0000)
struct WidgetScrollBar_OnUnselectedKnob final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetScrollBar_OnUnselectedKnob) == 0x000008, "Wrong alignment on WidgetScrollBar_OnUnselectedKnob");
static_assert(sizeof(WidgetScrollBar_OnUnselectedKnob) == 0x000010, "Wrong size on WidgetScrollBar_OnUnselectedKnob");
static_assert(offsetof(WidgetScrollBar_OnUnselectedKnob, Widget) == 0x000000, "Member 'WidgetScrollBar_OnUnselectedKnob::Widget' has a wrong offset!");
static_assert(offsetof(WidgetScrollBar_OnUnselectedKnob, InputType) == 0x000008, "Member 'WidgetScrollBar_OnUnselectedKnob::InputType' has a wrong offset!");

// Function UIFramework.WidgetScrollBar.SetKnobSizeScale
// 0x0004 (0x0004 - 0x0000)
struct WidgetScrollBar_SetKnobSizeScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetScrollBar_SetKnobSizeScale) == 0x000004, "Wrong alignment on WidgetScrollBar_SetKnobSizeScale");
static_assert(sizeof(WidgetScrollBar_SetKnobSizeScale) == 0x000004, "Wrong size on WidgetScrollBar_SetKnobSizeScale");
static_assert(offsetof(WidgetScrollBar_SetKnobSizeScale, Scale) == 0x000000, "Member 'WidgetScrollBar_SetKnobSizeScale::Scale' has a wrong offset!");

// Function UIFramework.WidgetScrollBar.SetProgress
// 0x0004 (0x0004 - 0x0000)
struct WidgetScrollBar_SetProgress final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetScrollBar_SetProgress) == 0x000004, "Wrong alignment on WidgetScrollBar_SetProgress");
static_assert(sizeof(WidgetScrollBar_SetProgress) == 0x000004, "Wrong size on WidgetScrollBar_SetProgress");
static_assert(offsetof(WidgetScrollBar_SetProgress, Value) == 0x000000, "Member 'WidgetScrollBar_SetProgress::Value' has a wrong offset!");

// Function UIFramework.WidgetScrollText.BP_SetActive
// 0x0001 (0x0001 - 0x0000)
struct WidgetScrollText_BP_SetActive final
{
public:
	bool                                          Val;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetScrollText_BP_SetActive) == 0x000001, "Wrong alignment on WidgetScrollText_BP_SetActive");
static_assert(sizeof(WidgetScrollText_BP_SetActive) == 0x000001, "Wrong size on WidgetScrollText_BP_SetActive");
static_assert(offsetof(WidgetScrollText_BP_SetActive, Val) == 0x000000, "Member 'WidgetScrollText_BP_SetActive::Val' has a wrong offset!");

// Function UIFramework.WidgetScrollText.Update
// 0x0004 (0x0004 - 0x0000)
struct WidgetScrollText_Update final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetScrollText_Update) == 0x000004, "Wrong alignment on WidgetScrollText_Update");
static_assert(sizeof(WidgetScrollText_Update) == 0x000004, "Wrong size on WidgetScrollText_Update");
static_assert(offsetof(WidgetScrollText_Update, DeltaTime) == 0x000000, "Member 'WidgetScrollText_Update::DeltaTime' has a wrong offset!");

// Function UIFramework.WidgetScrollText.BP_GetActive
// 0x0001 (0x0001 - 0x0000)
struct WidgetScrollText_BP_GetActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetScrollText_BP_GetActive) == 0x000001, "Wrong alignment on WidgetScrollText_BP_GetActive");
static_assert(sizeof(WidgetScrollText_BP_GetActive) == 0x000001, "Wrong size on WidgetScrollText_BP_GetActive");
static_assert(offsetof(WidgetScrollText_BP_GetActive, ReturnValue) == 0x000000, "Member 'WidgetScrollText_BP_GetActive::ReturnValue' has a wrong offset!");

// Function UIFramework.WidgetStatics.BP_ConvertEngCountString
// 0x0018 (0x0018 - 0x0000)
struct WidgetStatics_BP_ConvertEngCountString final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bComma;                                            // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetStatics_BP_ConvertEngCountString) == 0x000008, "Wrong alignment on WidgetStatics_BP_ConvertEngCountString");
static_assert(sizeof(WidgetStatics_BP_ConvertEngCountString) == 0x000018, "Wrong size on WidgetStatics_BP_ConvertEngCountString");
static_assert(offsetof(WidgetStatics_BP_ConvertEngCountString, Value) == 0x000000, "Member 'WidgetStatics_BP_ConvertEngCountString::Value' has a wrong offset!");
static_assert(offsetof(WidgetStatics_BP_ConvertEngCountString, bComma) == 0x000004, "Member 'WidgetStatics_BP_ConvertEngCountString::bComma' has a wrong offset!");
static_assert(offsetof(WidgetStatics_BP_ConvertEngCountString, ReturnValue) == 0x000008, "Member 'WidgetStatics_BP_ConvertEngCountString::ReturnValue' has a wrong offset!");

// Function UIFramework.WidgetStatics.BP_ConvertEscapedCharDoubleToSingle
// 0x0020 (0x0020 - 0x0000)
struct WidgetStatics_BP_ConvertEscapedCharDoubleToSingle final
{
public:
	class FString                                 Source;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetStatics_BP_ConvertEscapedCharDoubleToSingle) == 0x000008, "Wrong alignment on WidgetStatics_BP_ConvertEscapedCharDoubleToSingle");
static_assert(sizeof(WidgetStatics_BP_ConvertEscapedCharDoubleToSingle) == 0x000020, "Wrong size on WidgetStatics_BP_ConvertEscapedCharDoubleToSingle");
static_assert(offsetof(WidgetStatics_BP_ConvertEscapedCharDoubleToSingle, Source) == 0x000000, "Member 'WidgetStatics_BP_ConvertEscapedCharDoubleToSingle::Source' has a wrong offset!");
static_assert(offsetof(WidgetStatics_BP_ConvertEscapedCharDoubleToSingle, ReturnValue) == 0x000010, "Member 'WidgetStatics_BP_ConvertEscapedCharDoubleToSingle::ReturnValue' has a wrong offset!");

// Function UIFramework.WidgetStatics.BP_ConvertStringFromFloat
// 0x0020 (0x0020 - 0x0000)
struct WidgetStatics_BP_ConvertStringFromFloat final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bComma;                                            // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FractionalDigits;                                  // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetStatics_BP_ConvertStringFromFloat) == 0x000008, "Wrong alignment on WidgetStatics_BP_ConvertStringFromFloat");
static_assert(sizeof(WidgetStatics_BP_ConvertStringFromFloat) == 0x000020, "Wrong size on WidgetStatics_BP_ConvertStringFromFloat");
static_assert(offsetof(WidgetStatics_BP_ConvertStringFromFloat, Value) == 0x000000, "Member 'WidgetStatics_BP_ConvertStringFromFloat::Value' has a wrong offset!");
static_assert(offsetof(WidgetStatics_BP_ConvertStringFromFloat, bComma) == 0x000004, "Member 'WidgetStatics_BP_ConvertStringFromFloat::bComma' has a wrong offset!");
static_assert(offsetof(WidgetStatics_BP_ConvertStringFromFloat, FractionalDigits) == 0x000008, "Member 'WidgetStatics_BP_ConvertStringFromFloat::FractionalDigits' has a wrong offset!");
static_assert(offsetof(WidgetStatics_BP_ConvertStringFromFloat, ReturnValue) == 0x000010, "Member 'WidgetStatics_BP_ConvertStringFromFloat::ReturnValue' has a wrong offset!");

// Function UIFramework.WidgetStatics.BP_ConvertStringFromInt
// 0x0018 (0x0018 - 0x0000)
struct WidgetStatics_BP_ConvertStringFromInt final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bComma;                                            // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetStatics_BP_ConvertStringFromInt) == 0x000008, "Wrong alignment on WidgetStatics_BP_ConvertStringFromInt");
static_assert(sizeof(WidgetStatics_BP_ConvertStringFromInt) == 0x000018, "Wrong size on WidgetStatics_BP_ConvertStringFromInt");
static_assert(offsetof(WidgetStatics_BP_ConvertStringFromInt, Value) == 0x000000, "Member 'WidgetStatics_BP_ConvertStringFromInt::Value' has a wrong offset!");
static_assert(offsetof(WidgetStatics_BP_ConvertStringFromInt, bComma) == 0x000004, "Member 'WidgetStatics_BP_ConvertStringFromInt::bComma' has a wrong offset!");
static_assert(offsetof(WidgetStatics_BP_ConvertStringFromInt, ReturnValue) == 0x000008, "Member 'WidgetStatics_BP_ConvertStringFromInt::ReturnValue' has a wrong offset!");

// Function UIFramework.WidgetStatics.CheckTextAnyBlankSpace
// 0x0020 (0x0020 - 0x0000)
struct WidgetStatics_CheckTextAnyBlankSpace final
{
public:
	class FText                                   InCheckText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetStatics_CheckTextAnyBlankSpace) == 0x000008, "Wrong alignment on WidgetStatics_CheckTextAnyBlankSpace");
static_assert(sizeof(WidgetStatics_CheckTextAnyBlankSpace) == 0x000020, "Wrong size on WidgetStatics_CheckTextAnyBlankSpace");
static_assert(offsetof(WidgetStatics_CheckTextAnyBlankSpace, InCheckText) == 0x000000, "Member 'WidgetStatics_CheckTextAnyBlankSpace::InCheckText' has a wrong offset!");
static_assert(offsetof(WidgetStatics_CheckTextAnyBlankSpace, ReturnValue) == 0x000018, "Member 'WidgetStatics_CheckTextAnyBlankSpace::ReturnValue' has a wrong offset!");

// Function UIFramework.WidgetStatics.CheckTextNumberNum
// 0x0020 (0x0020 - 0x0000)
struct WidgetStatics_CheckTextNumberNum final
{
public:
	class FText                                   InCheckText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         InCheckNum;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetStatics_CheckTextNumberNum) == 0x000008, "Wrong alignment on WidgetStatics_CheckTextNumberNum");
static_assert(sizeof(WidgetStatics_CheckTextNumberNum) == 0x000020, "Wrong size on WidgetStatics_CheckTextNumberNum");
static_assert(offsetof(WidgetStatics_CheckTextNumberNum, InCheckText) == 0x000000, "Member 'WidgetStatics_CheckTextNumberNum::InCheckText' has a wrong offset!");
static_assert(offsetof(WidgetStatics_CheckTextNumberNum, InCheckNum) == 0x000018, "Member 'WidgetStatics_CheckTextNumberNum::InCheckNum' has a wrong offset!");
static_assert(offsetof(WidgetStatics_CheckTextNumberNum, ReturnValue) == 0x00001C, "Member 'WidgetStatics_CheckTextNumberNum::ReturnValue' has a wrong offset!");

// Function UIFramework.WidgetStatics.GetPageArray
// 0x0028 (0x0028 - 0x0000)
struct WidgetStatics_GetPageArray final
{
public:
	TArray<int32>                                 TargetArray;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 ReturnArray;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageElementsCount;                                 // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetStatics_GetPageArray) == 0x000008, "Wrong alignment on WidgetStatics_GetPageArray");
static_assert(sizeof(WidgetStatics_GetPageArray) == 0x000028, "Wrong size on WidgetStatics_GetPageArray");
static_assert(offsetof(WidgetStatics_GetPageArray, TargetArray) == 0x000000, "Member 'WidgetStatics_GetPageArray::TargetArray' has a wrong offset!");
static_assert(offsetof(WidgetStatics_GetPageArray, ReturnArray) == 0x000010, "Member 'WidgetStatics_GetPageArray::ReturnArray' has a wrong offset!");
static_assert(offsetof(WidgetStatics_GetPageArray, Index_0) == 0x000020, "Member 'WidgetStatics_GetPageArray::Index_0' has a wrong offset!");
static_assert(offsetof(WidgetStatics_GetPageArray, PageElementsCount) == 0x000024, "Member 'WidgetStatics_GetPageArray::PageElementsCount' has a wrong offset!");

// Function UIFramework.WidgetStatics.GetScrollSpeed
// 0x0050 (0x0050 - 0x0000)
struct WidgetStatics_GetScrollSpeed final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnalogInputEvent                      InAnalogEvent;                                     // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ScrollSpeed;                                       // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x004C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetStatics_GetScrollSpeed) == 0x000008, "Wrong alignment on WidgetStatics_GetScrollSpeed");
static_assert(sizeof(WidgetStatics_GetScrollSpeed) == 0x000050, "Wrong size on WidgetStatics_GetScrollSpeed");
static_assert(offsetof(WidgetStatics_GetScrollSpeed, WorldContextObject) == 0x000000, "Member 'WidgetStatics_GetScrollSpeed::WorldContextObject' has a wrong offset!");
static_assert(offsetof(WidgetStatics_GetScrollSpeed, InAnalogEvent) == 0x000008, "Member 'WidgetStatics_GetScrollSpeed::InAnalogEvent' has a wrong offset!");
static_assert(offsetof(WidgetStatics_GetScrollSpeed, ScrollSpeed) == 0x000048, "Member 'WidgetStatics_GetScrollSpeed::ScrollSpeed' has a wrong offset!");
static_assert(offsetof(WidgetStatics_GetScrollSpeed, ReturnValue) == 0x00004C, "Member 'WidgetStatics_GetScrollSpeed::ReturnValue' has a wrong offset!");

// Function UIFramework.WidgetStatics.IsFocusCauseNotCleared
// 0x000C (0x000C - 0x0000)
struct WidgetStatics_IsFocusCauseNotCleared final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetStatics_IsFocusCauseNotCleared) == 0x000004, "Wrong alignment on WidgetStatics_IsFocusCauseNotCleared");
static_assert(sizeof(WidgetStatics_IsFocusCauseNotCleared) == 0x00000C, "Wrong size on WidgetStatics_IsFocusCauseNotCleared");
static_assert(offsetof(WidgetStatics_IsFocusCauseNotCleared, InFocusEvent) == 0x000000, "Member 'WidgetStatics_IsFocusCauseNotCleared::InFocusEvent' has a wrong offset!");
static_assert(offsetof(WidgetStatics_IsFocusCauseNotCleared, ReturnValue) == 0x000008, "Member 'WidgetStatics_IsFocusCauseNotCleared::ReturnValue' has a wrong offset!");

// Function UIFramework.WidgetStatics.MakeLimitCheckAndReplace
// 0x0048 (0x0048 - 0x0000)
struct WidgetStatics_MakeLimitCheckAndReplace final
{
public:
	class FText                                   InCheckText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 InReplace;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InLimitNum;                                        // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetStatics_MakeLimitCheckAndReplace) == 0x000008, "Wrong alignment on WidgetStatics_MakeLimitCheckAndReplace");
static_assert(sizeof(WidgetStatics_MakeLimitCheckAndReplace) == 0x000048, "Wrong size on WidgetStatics_MakeLimitCheckAndReplace");
static_assert(offsetof(WidgetStatics_MakeLimitCheckAndReplace, InCheckText) == 0x000000, "Member 'WidgetStatics_MakeLimitCheckAndReplace::InCheckText' has a wrong offset!");
static_assert(offsetof(WidgetStatics_MakeLimitCheckAndReplace, InReplace) == 0x000018, "Member 'WidgetStatics_MakeLimitCheckAndReplace::InReplace' has a wrong offset!");
static_assert(offsetof(WidgetStatics_MakeLimitCheckAndReplace, InLimitNum) == 0x000028, "Member 'WidgetStatics_MakeLimitCheckAndReplace::InLimitNum' has a wrong offset!");
static_assert(offsetof(WidgetStatics_MakeLimitCheckAndReplace, ReturnValue) == 0x000030, "Member 'WidgetStatics_MakeLimitCheckAndReplace::ReturnValue' has a wrong offset!");

// Function UIFramework.WidgetStatics.SetSpriteToMaterial
// 0x0020 (0x0020 - 0x0000)
struct WidgetStatics_SetSpriteToMaterial final
{
public:
	class UMaterialInstanceDynamic*               Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPaperSprite*                     Sprite;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ParameterName;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetStatics_SetSpriteToMaterial) == 0x000008, "Wrong alignment on WidgetStatics_SetSpriteToMaterial");
static_assert(sizeof(WidgetStatics_SetSpriteToMaterial) == 0x000020, "Wrong size on WidgetStatics_SetSpriteToMaterial");
static_assert(offsetof(WidgetStatics_SetSpriteToMaterial, Material) == 0x000000, "Member 'WidgetStatics_SetSpriteToMaterial::Material' has a wrong offset!");
static_assert(offsetof(WidgetStatics_SetSpriteToMaterial, Sprite) == 0x000008, "Member 'WidgetStatics_SetSpriteToMaterial::Sprite' has a wrong offset!");
static_assert(offsetof(WidgetStatics_SetSpriteToMaterial, ParameterName) == 0x000010, "Member 'WidgetStatics_SetSpriteToMaterial::ParameterName' has a wrong offset!");

// Function UIFramework.WidgetSubMenu.ChangeArrowImage
// 0x0001 (0x0001 - 0x0000)
struct WidgetSubMenu_ChangeArrowImage final
{
public:
	bool                                          bRight;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetSubMenu_ChangeArrowImage) == 0x000001, "Wrong alignment on WidgetSubMenu_ChangeArrowImage");
static_assert(sizeof(WidgetSubMenu_ChangeArrowImage) == 0x000001, "Wrong size on WidgetSubMenu_ChangeArrowImage");
static_assert(offsetof(WidgetSubMenu_ChangeArrowImage, bRight) == 0x000000, "Member 'WidgetSubMenu_ChangeArrowImage::bRight' has a wrong offset!");

// Function UIFramework.WidgetSubMenu.Close
// 0x0002 (0x0002 - 0x0000)
struct WidgetSubMenu_Close final
{
public:
	bool                                          UseCloseAnimation;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseCloseSE;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetSubMenu_Close) == 0x000001, "Wrong alignment on WidgetSubMenu_Close");
static_assert(sizeof(WidgetSubMenu_Close) == 0x000002, "Wrong size on WidgetSubMenu_Close");
static_assert(offsetof(WidgetSubMenu_Close, UseCloseAnimation) == 0x000000, "Member 'WidgetSubMenu_Close::UseCloseAnimation' has a wrong offset!");
static_assert(offsetof(WidgetSubMenu_Close, UseCloseSE) == 0x000001, "Member 'WidgetSubMenu_Close::UseCloseSE' has a wrong offset!");

// Function UIFramework.WidgetSubMenu.GetOffsetPosition
// 0x0008 (0x0008 - 0x0000)
struct WidgetSubMenu_GetOffsetPosition final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetSubMenu_GetOffsetPosition) == 0x000004, "Wrong alignment on WidgetSubMenu_GetOffsetPosition");
static_assert(sizeof(WidgetSubMenu_GetOffsetPosition) == 0x000008, "Wrong size on WidgetSubMenu_GetOffsetPosition");
static_assert(offsetof(WidgetSubMenu_GetOffsetPosition, ReturnValue) == 0x000000, "Member 'WidgetSubMenu_GetOffsetPosition::ReturnValue' has a wrong offset!");

// Function UIFramework.WidgetSubMenu.IsCloseable
// 0x0008 (0x0008 - 0x0000)
struct WidgetSubMenu_IsCloseable final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetSubMenu_IsCloseable) == 0x000004, "Wrong alignment on WidgetSubMenu_IsCloseable");
static_assert(sizeof(WidgetSubMenu_IsCloseable) == 0x000008, "Wrong size on WidgetSubMenu_IsCloseable");
static_assert(offsetof(WidgetSubMenu_IsCloseable, InFocusEvent) == 0x000000, "Member 'WidgetSubMenu_IsCloseable::InFocusEvent' has a wrong offset!");

// Function UIFramework.WidgetSubMenu.IsOpenSubMenu
// 0x0001 (0x0001 - 0x0000)
struct WidgetSubMenu_IsOpenSubMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetSubMenu_IsOpenSubMenu) == 0x000001, "Wrong alignment on WidgetSubMenu_IsOpenSubMenu");
static_assert(sizeof(WidgetSubMenu_IsOpenSubMenu) == 0x000001, "Wrong size on WidgetSubMenu_IsOpenSubMenu");
static_assert(offsetof(WidgetSubMenu_IsOpenSubMenu, ReturnValue) == 0x000000, "Member 'WidgetSubMenu_IsOpenSubMenu::ReturnValue' has a wrong offset!");

// Function UIFramework.WidgetSubMenu.OnDecideListButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct WidgetSubMenu_OnDecideListButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetSubMenu_OnDecideListButtonEvent) == 0x000008, "Wrong alignment on WidgetSubMenu_OnDecideListButtonEvent");
static_assert(sizeof(WidgetSubMenu_OnDecideListButtonEvent) == 0x000010, "Wrong size on WidgetSubMenu_OnDecideListButtonEvent");
static_assert(offsetof(WidgetSubMenu_OnDecideListButtonEvent, Widget) == 0x000000, "Member 'WidgetSubMenu_OnDecideListButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(WidgetSubMenu_OnDecideListButtonEvent, InputType) == 0x000008, "Member 'WidgetSubMenu_OnDecideListButtonEvent::InputType' has a wrong offset!");

// DelegateFunction UIFramework.WidgetSubMenu.OnDecideSubMenuCloseDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct WidgetSubMenu_OnDecideSubMenuCloseDelegate__DelegateSignature final
{
public:
	bool                                          UseSe;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetSubMenu_OnDecideSubMenuCloseDelegate__DelegateSignature) == 0x000001, "Wrong alignment on WidgetSubMenu_OnDecideSubMenuCloseDelegate__DelegateSignature");
static_assert(sizeof(WidgetSubMenu_OnDecideSubMenuCloseDelegate__DelegateSignature) == 0x000001, "Wrong size on WidgetSubMenu_OnDecideSubMenuCloseDelegate__DelegateSignature");
static_assert(offsetof(WidgetSubMenu_OnDecideSubMenuCloseDelegate__DelegateSignature, UseSe) == 0x000000, "Member 'WidgetSubMenu_OnDecideSubMenuCloseDelegate__DelegateSignature::UseSe' has a wrong offset!");

// DelegateFunction UIFramework.WidgetSubMenu.OnDecideSubMenuDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct WidgetSubMenu_OnDecideSubMenuDelegate__DelegateSignature final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetSubMenu_OnDecideSubMenuDelegate__DelegateSignature) == 0x000004, "Wrong alignment on WidgetSubMenu_OnDecideSubMenuDelegate__DelegateSignature");
static_assert(sizeof(WidgetSubMenu_OnDecideSubMenuDelegate__DelegateSignature) == 0x000004, "Wrong size on WidgetSubMenu_OnDecideSubMenuDelegate__DelegateSignature");
static_assert(offsetof(WidgetSubMenu_OnDecideSubMenuDelegate__DelegateSignature, Index_0) == 0x000000, "Member 'WidgetSubMenu_OnDecideSubMenuDelegate__DelegateSignature::Index_0' has a wrong offset!");

// DelegateFunction UIFramework.WidgetSubMenu.OnDecideSubMenuOpenDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct WidgetSubMenu_OnDecideSubMenuOpenDelegate__DelegateSignature final
{
public:
	bool                                          UseSe;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetSubMenu_OnDecideSubMenuOpenDelegate__DelegateSignature) == 0x000001, "Wrong alignment on WidgetSubMenu_OnDecideSubMenuOpenDelegate__DelegateSignature");
static_assert(sizeof(WidgetSubMenu_OnDecideSubMenuOpenDelegate__DelegateSignature) == 0x000001, "Wrong size on WidgetSubMenu_OnDecideSubMenuOpenDelegate__DelegateSignature");
static_assert(offsetof(WidgetSubMenu_OnDecideSubMenuOpenDelegate__DelegateSignature, UseSe) == 0x000000, "Member 'WidgetSubMenu_OnDecideSubMenuOpenDelegate__DelegateSignature::UseSe' has a wrong offset!");

// Function UIFramework.WidgetSubMenu.OnHoveredChangedEvent
// 0x0010 (0x0010 - 0x0000)
struct WidgetSubMenu_OnHoveredChangedEvent final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHovered;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetSubMenu_OnHoveredChangedEvent) == 0x000008, "Wrong alignment on WidgetSubMenu_OnHoveredChangedEvent");
static_assert(sizeof(WidgetSubMenu_OnHoveredChangedEvent) == 0x000010, "Wrong size on WidgetSubMenu_OnHoveredChangedEvent");
static_assert(offsetof(WidgetSubMenu_OnHoveredChangedEvent, Item) == 0x000000, "Member 'WidgetSubMenu_OnHoveredChangedEvent::Item' has a wrong offset!");
static_assert(offsetof(WidgetSubMenu_OnHoveredChangedEvent, bHovered) == 0x000008, "Member 'WidgetSubMenu_OnHoveredChangedEvent::bHovered' has a wrong offset!");

// Function UIFramework.WidgetSubMenu.OnReceivedItemSelectionChangedEvent
// 0x0008 (0x0008 - 0x0000)
struct WidgetSubMenu_OnReceivedItemSelectionChangedEvent final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetSubMenu_OnReceivedItemSelectionChangedEvent) == 0x000008, "Wrong alignment on WidgetSubMenu_OnReceivedItemSelectionChangedEvent");
static_assert(sizeof(WidgetSubMenu_OnReceivedItemSelectionChangedEvent) == 0x000008, "Wrong size on WidgetSubMenu_OnReceivedItemSelectionChangedEvent");
static_assert(offsetof(WidgetSubMenu_OnReceivedItemSelectionChangedEvent, Item) == 0x000000, "Member 'WidgetSubMenu_OnReceivedItemSelectionChangedEvent::Item' has a wrong offset!");

// Function UIFramework.WidgetSubMenu.OnSubMenuCancel
// 0x0010 (0x0010 - 0x0000)
struct WidgetSubMenu_OnSubMenuCancel final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetSubMenu_OnSubMenuCancel) == 0x000008, "Wrong alignment on WidgetSubMenu_OnSubMenuCancel");
static_assert(sizeof(WidgetSubMenu_OnSubMenuCancel) == 0x000010, "Wrong size on WidgetSubMenu_OnSubMenuCancel");
static_assert(offsetof(WidgetSubMenu_OnSubMenuCancel, Widget) == 0x000000, "Member 'WidgetSubMenu_OnSubMenuCancel::Widget' has a wrong offset!");
static_assert(offsetof(WidgetSubMenu_OnSubMenuCancel, InputType) == 0x000008, "Member 'WidgetSubMenu_OnSubMenuCancel::InputType' has a wrong offset!");

// Function UIFramework.WidgetSubMenu.Open
// 0x0010 (0x0010 - 0x0000)
struct WidgetSubMenu_Open final
{
public:
	class UWidgetBase*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseOpenSE;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetSubMenu_Open) == 0x000008, "Wrong alignment on WidgetSubMenu_Open");
static_assert(sizeof(WidgetSubMenu_Open) == 0x000010, "Wrong size on WidgetSubMenu_Open");
static_assert(offsetof(WidgetSubMenu_Open, Widget) == 0x000000, "Member 'WidgetSubMenu_Open::Widget' has a wrong offset!");
static_assert(offsetof(WidgetSubMenu_Open, UseOpenSE) == 0x000008, "Member 'WidgetSubMenu_Open::UseOpenSE' has a wrong offset!");

// Function UIFramework.WidgetSubMenu.SetButtonTexts
// 0x0010 (0x0010 - 0x0000)
struct WidgetSubMenu_SetButtonTexts final
{
public:
	TArray<class FText>                           Texts;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetSubMenu_SetButtonTexts) == 0x000008, "Wrong alignment on WidgetSubMenu_SetButtonTexts");
static_assert(sizeof(WidgetSubMenu_SetButtonTexts) == 0x000010, "Wrong size on WidgetSubMenu_SetButtonTexts");
static_assert(offsetof(WidgetSubMenu_SetButtonTexts, Texts) == 0x000000, "Member 'WidgetSubMenu_SetButtonTexts::Texts' has a wrong offset!");

// Function UIFramework.WidgetSubMenu.SetFocusListViewItem
// 0x0004 (0x0004 - 0x0000)
struct WidgetSubMenu_SetFocusListViewItem final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetSubMenu_SetFocusListViewItem) == 0x000004, "Wrong alignment on WidgetSubMenu_SetFocusListViewItem");
static_assert(sizeof(WidgetSubMenu_SetFocusListViewItem) == 0x000004, "Wrong size on WidgetSubMenu_SetFocusListViewItem");
static_assert(offsetof(WidgetSubMenu_SetFocusListViewItem, ItemIndex) == 0x000000, "Member 'WidgetSubMenu_SetFocusListViewItem::ItemIndex' has a wrong offset!");

// Function UIFramework.WidgetSubMenu.SetOffsetPosition
// 0x0008 (0x0008 - 0x0000)
struct WidgetSubMenu_SetOffsetPosition final
{
public:
	struct FVector2D                              Pos;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetSubMenu_SetOffsetPosition) == 0x000004, "Wrong alignment on WidgetSubMenu_SetOffsetPosition");
static_assert(sizeof(WidgetSubMenu_SetOffsetPosition) == 0x000008, "Wrong size on WidgetSubMenu_SetOffsetPosition");
static_assert(offsetof(WidgetSubMenu_SetOffsetPosition, Pos) == 0x000000, "Member 'WidgetSubMenu_SetOffsetPosition::Pos' has a wrong offset!");

// Function UIFramework.WidgetSubMenu.SetSubMenuInfo
// 0x0018 (0x0018 - 0x0000)
struct WidgetSubMenu_SetSubMenuInfo final
{
public:
	TArray<struct FSubMenuInfo>                   SubMenuInfo;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Update;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetSubMenu_SetSubMenuInfo) == 0x000008, "Wrong alignment on WidgetSubMenu_SetSubMenuInfo");
static_assert(sizeof(WidgetSubMenu_SetSubMenuInfo) == 0x000018, "Wrong size on WidgetSubMenu_SetSubMenuInfo");
static_assert(offsetof(WidgetSubMenu_SetSubMenuInfo, SubMenuInfo) == 0x000000, "Member 'WidgetSubMenu_SetSubMenuInfo::SubMenuInfo' has a wrong offset!");
static_assert(offsetof(WidgetSubMenu_SetSubMenuInfo, Update) == 0x000010, "Member 'WidgetSubMenu_SetSubMenuInfo::Update' has a wrong offset!");

// Function UIFramework.WidgetSubMenu.GetButtonTexts
// 0x0010 (0x0010 - 0x0000)
struct WidgetSubMenu_GetButtonTexts final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetSubMenu_GetButtonTexts) == 0x000008, "Wrong alignment on WidgetSubMenu_GetButtonTexts");
static_assert(sizeof(WidgetSubMenu_GetButtonTexts) == 0x000010, "Wrong size on WidgetSubMenu_GetButtonTexts");
static_assert(offsetof(WidgetSubMenu_GetButtonTexts, ReturnValue) == 0x000000, "Member 'WidgetSubMenu_GetButtonTexts::ReturnValue' has a wrong offset!");

// Function UIFramework.WidgetSubMenu.GetSubMenuInfo
// 0x0010 (0x0010 - 0x0000)
struct WidgetSubMenu_GetSubMenuInfo final
{
public:
	TArray<struct FSubMenuInfo>                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetSubMenu_GetSubMenuInfo) == 0x000008, "Wrong alignment on WidgetSubMenu_GetSubMenuInfo");
static_assert(sizeof(WidgetSubMenu_GetSubMenuInfo) == 0x000010, "Wrong size on WidgetSubMenu_GetSubMenuInfo");
static_assert(offsetof(WidgetSubMenu_GetSubMenuInfo, ReturnValue) == 0x000000, "Member 'WidgetSubMenu_GetSubMenuInfo::ReturnValue' has a wrong offset!");

// Function UIFramework.WidgetSubMenuEntry.UpdateDisplay
// 0x0008 (0x0008 - 0x0000)
struct WidgetSubMenuEntry_UpdateDisplay final
{
public:
	class UWidgetSubMenuObject*                   Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetSubMenuEntry_UpdateDisplay) == 0x000008, "Wrong alignment on WidgetSubMenuEntry_UpdateDisplay");
static_assert(sizeof(WidgetSubMenuEntry_UpdateDisplay) == 0x000008, "Wrong size on WidgetSubMenuEntry_UpdateDisplay");
static_assert(offsetof(WidgetSubMenuEntry_UpdateDisplay, Object) == 0x000000, "Member 'WidgetSubMenuEntry_UpdateDisplay::Object' has a wrong offset!");

// Function UIFramework.CustomTextBlock.SetLineHeightPercentage
// 0x0004 (0x0004 - 0x0000)
struct CustomTextBlock_SetLineHeightPercentage final
{
public:
	float                                         InLineHeightPercentage;                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomTextBlock_SetLineHeightPercentage) == 0x000004, "Wrong alignment on CustomTextBlock_SetLineHeightPercentage");
static_assert(sizeof(CustomTextBlock_SetLineHeightPercentage) == 0x000004, "Wrong size on CustomTextBlock_SetLineHeightPercentage");
static_assert(offsetof(CustomTextBlock_SetLineHeightPercentage, InLineHeightPercentage) == 0x000000, "Member 'CustomTextBlock_SetLineHeightPercentage::InLineHeightPercentage' has a wrong offset!");

// Function UIFramework.CustomTextBlock.SetMargin
// 0x0010 (0x0010 - 0x0000)
struct CustomTextBlock_SetMargin final
{
public:
	struct FMargin                                InMargin;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomTextBlock_SetMargin) == 0x000004, "Wrong alignment on CustomTextBlock_SetMargin");
static_assert(sizeof(CustomTextBlock_SetMargin) == 0x000010, "Wrong size on CustomTextBlock_SetMargin");
static_assert(offsetof(CustomTextBlock_SetMargin, InMargin) == 0x000000, "Member 'CustomTextBlock_SetMargin::InMargin' has a wrong offset!");

// Function UIFramework.CustomTextBlock.SetWrapTextAt
// 0x0004 (0x0004 - 0x0000)
struct CustomTextBlock_SetWrapTextAt final
{
public:
	float                                         InWrapTextAt;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomTextBlock_SetWrapTextAt) == 0x000004, "Wrong alignment on CustomTextBlock_SetWrapTextAt");
static_assert(sizeof(CustomTextBlock_SetWrapTextAt) == 0x000004, "Wrong size on CustomTextBlock_SetWrapTextAt");
static_assert(offsetof(CustomTextBlock_SetWrapTextAt, InWrapTextAt) == 0x000000, "Member 'CustomTextBlock_SetWrapTextAt::InWrapTextAt' has a wrong offset!");

// Function UIFramework.WidgetText.GetDynamicFontMaterial
// 0x0008 (0x0008 - 0x0000)
struct WidgetText_GetDynamicFontMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetText_GetDynamicFontMaterial) == 0x000008, "Wrong alignment on WidgetText_GetDynamicFontMaterial");
static_assert(sizeof(WidgetText_GetDynamicFontMaterial) == 0x000008, "Wrong size on WidgetText_GetDynamicFontMaterial");
static_assert(offsetof(WidgetText_GetDynamicFontMaterial, ReturnValue) == 0x000000, "Member 'WidgetText_GetDynamicFontMaterial::ReturnValue' has a wrong offset!");

// Function UIFramework.WidgetText.GetDynamicOutlineMaterial
// 0x0008 (0x0008 - 0x0000)
struct WidgetText_GetDynamicOutlineMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetText_GetDynamicOutlineMaterial) == 0x000008, "Wrong alignment on WidgetText_GetDynamicOutlineMaterial");
static_assert(sizeof(WidgetText_GetDynamicOutlineMaterial) == 0x000008, "Wrong size on WidgetText_GetDynamicOutlineMaterial");
static_assert(offsetof(WidgetText_GetDynamicOutlineMaterial, ReturnValue) == 0x000000, "Member 'WidgetText_GetDynamicOutlineMaterial::ReturnValue' has a wrong offset!");

// Function UIFramework.WidgetText.SetAutoWrapText
// 0x0001 (0x0001 - 0x0000)
struct WidgetText_SetAutoWrapText final
{
public:
	bool                                          InAutoTextWrap;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetText_SetAutoWrapText) == 0x000001, "Wrong alignment on WidgetText_SetAutoWrapText");
static_assert(sizeof(WidgetText_SetAutoWrapText) == 0x000001, "Wrong size on WidgetText_SetAutoWrapText");
static_assert(offsetof(WidgetText_SetAutoWrapText, InAutoTextWrap) == 0x000000, "Member 'WidgetText_SetAutoWrapText::InAutoTextWrap' has a wrong offset!");

// Function UIFramework.WidgetText.SetFont
// 0x0058 (0x0058 - 0x0000)
struct WidgetText_SetFont final
{
public:
	struct FSlateFontInfo                         InFontInfo;                                        // 0x0000(0x0058)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetText_SetFont) == 0x000008, "Wrong alignment on WidgetText_SetFont");
static_assert(sizeof(WidgetText_SetFont) == 0x000058, "Wrong size on WidgetText_SetFont");
static_assert(offsetof(WidgetText_SetFont, InFontInfo) == 0x000000, "Member 'WidgetText_SetFont::InFontInfo' has a wrong offset!");

// Function UIFramework.WidgetText.SetLineHeightPercentage
// 0x0004 (0x0004 - 0x0000)
struct WidgetText_SetLineHeightPercentage final
{
public:
	float                                         InLineHeightPercentage;                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetText_SetLineHeightPercentage) == 0x000004, "Wrong alignment on WidgetText_SetLineHeightPercentage");
static_assert(sizeof(WidgetText_SetLineHeightPercentage) == 0x000004, "Wrong size on WidgetText_SetLineHeightPercentage");
static_assert(offsetof(WidgetText_SetLineHeightPercentage, InLineHeightPercentage) == 0x000000, "Member 'WidgetText_SetLineHeightPercentage::InLineHeightPercentage' has a wrong offset!");

// Function UIFramework.WidgetText.SetMargin
// 0x0010 (0x0010 - 0x0000)
struct WidgetText_SetMargin final
{
public:
	struct FMargin                                InMargin;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetText_SetMargin) == 0x000004, "Wrong alignment on WidgetText_SetMargin");
static_assert(sizeof(WidgetText_SetMargin) == 0x000010, "Wrong size on WidgetText_SetMargin");
static_assert(offsetof(WidgetText_SetMargin, InMargin) == 0x000000, "Member 'WidgetText_SetMargin::InMargin' has a wrong offset!");

// Function UIFramework.WidgetText.SetMinDesiredWidth
// 0x0004 (0x0004 - 0x0000)
struct WidgetText_SetMinDesiredWidth final
{
public:
	float                                         InMinDesiredWidth;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetText_SetMinDesiredWidth) == 0x000004, "Wrong alignment on WidgetText_SetMinDesiredWidth");
static_assert(sizeof(WidgetText_SetMinDesiredWidth) == 0x000004, "Wrong size on WidgetText_SetMinDesiredWidth");
static_assert(offsetof(WidgetText_SetMinDesiredWidth, InMinDesiredWidth) == 0x000000, "Member 'WidgetText_SetMinDesiredWidth::InMinDesiredWidth' has a wrong offset!");

// Function UIFramework.WidgetText.SetOpacity
// 0x0004 (0x0004 - 0x0000)
struct WidgetText_SetOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetText_SetOpacity) == 0x000004, "Wrong alignment on WidgetText_SetOpacity");
static_assert(sizeof(WidgetText_SetOpacity) == 0x000004, "Wrong size on WidgetText_SetOpacity");
static_assert(offsetof(WidgetText_SetOpacity, InOpacity) == 0x000000, "Member 'WidgetText_SetOpacity::InOpacity' has a wrong offset!");

// Function UIFramework.WidgetText.SetShadowColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct WidgetText_SetShadowColorAndOpacity final
{
public:
	struct FLinearColor                           InShadowColorAndOpacity;                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetText_SetShadowColorAndOpacity) == 0x000004, "Wrong alignment on WidgetText_SetShadowColorAndOpacity");
static_assert(sizeof(WidgetText_SetShadowColorAndOpacity) == 0x000010, "Wrong size on WidgetText_SetShadowColorAndOpacity");
static_assert(offsetof(WidgetText_SetShadowColorAndOpacity, InShadowColorAndOpacity) == 0x000000, "Member 'WidgetText_SetShadowColorAndOpacity::InShadowColorAndOpacity' has a wrong offset!");

// Function UIFramework.WidgetText.SetShadowOffset
// 0x0008 (0x0008 - 0x0000)
struct WidgetText_SetShadowOffset final
{
public:
	struct FVector2D                              InShadowOffset;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetText_SetShadowOffset) == 0x000004, "Wrong alignment on WidgetText_SetShadowOffset");
static_assert(sizeof(WidgetText_SetShadowOffset) == 0x000008, "Wrong size on WidgetText_SetShadowOffset");
static_assert(offsetof(WidgetText_SetShadowOffset, InShadowOffset) == 0x000000, "Member 'WidgetText_SetShadowOffset::InShadowOffset' has a wrong offset!");

// Function UIFramework.WidgetText.SetStrikeBrush
// 0x00D0 (0x00D0 - 0x0000)
struct WidgetText_SetStrikeBrush final
{
public:
	struct FSlateBrush                            InStrikeBrush;                                     // 0x0000(0x00D0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetText_SetStrikeBrush) == 0x000010, "Wrong alignment on WidgetText_SetStrikeBrush");
static_assert(sizeof(WidgetText_SetStrikeBrush) == 0x0000D0, "Wrong size on WidgetText_SetStrikeBrush");
static_assert(offsetof(WidgetText_SetStrikeBrush, InStrikeBrush) == 0x000000, "Member 'WidgetText_SetStrikeBrush::InStrikeBrush' has a wrong offset!");

// Function UIFramework.WidgetText.SetText
// 0x0018 (0x0018 - 0x0000)
struct WidgetText_SetText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetText_SetText) == 0x000008, "Wrong alignment on WidgetText_SetText");
static_assert(sizeof(WidgetText_SetText) == 0x000018, "Wrong size on WidgetText_SetText");
static_assert(offsetof(WidgetText_SetText, InText) == 0x000000, "Member 'WidgetText_SetText::InText' has a wrong offset!");

// Function UIFramework.WidgetText.SetTextColorAndOpacity
// 0x0028 (0x0028 - 0x0000)
struct WidgetText_SetTextColorAndOpacity final
{
public:
	struct FSlateColor                            InColorAndOpacity;                                 // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetText_SetTextColorAndOpacity) == 0x000008, "Wrong alignment on WidgetText_SetTextColorAndOpacity");
static_assert(sizeof(WidgetText_SetTextColorAndOpacity) == 0x000028, "Wrong size on WidgetText_SetTextColorAndOpacity");
static_assert(offsetof(WidgetText_SetTextColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'WidgetText_SetTextColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function UIFramework.WidgetText.SetTextTransformPolicy
// 0x0001 (0x0001 - 0x0000)
struct WidgetText_SetTextTransformPolicy final
{
public:
	ETextTransformPolicy                          InTransformPolicy;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetText_SetTextTransformPolicy) == 0x000001, "Wrong alignment on WidgetText_SetTextTransformPolicy");
static_assert(sizeof(WidgetText_SetTextTransformPolicy) == 0x000001, "Wrong size on WidgetText_SetTextTransformPolicy");
static_assert(offsetof(WidgetText_SetTextTransformPolicy, InTransformPolicy) == 0x000000, "Member 'WidgetText_SetTextTransformPolicy::InTransformPolicy' has a wrong offset!");

// Function UIFramework.WidgetText.SetWrapTextAt
// 0x0004 (0x0004 - 0x0000)
struct WidgetText_SetWrapTextAt final
{
public:
	float                                         InWrapTextAt;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetText_SetWrapTextAt) == 0x000004, "Wrong alignment on WidgetText_SetWrapTextAt");
static_assert(sizeof(WidgetText_SetWrapTextAt) == 0x000004, "Wrong size on WidgetText_SetWrapTextAt");
static_assert(offsetof(WidgetText_SetWrapTextAt, InWrapTextAt) == 0x000000, "Member 'WidgetText_SetWrapTextAt::InWrapTextAt' has a wrong offset!");

// Function UIFramework.WidgetText.GetFont
// 0x0058 (0x0058 - 0x0000)
struct WidgetText_GetFont final
{
public:
	struct FSlateFontInfo                         ReturnValue;                                       // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetText_GetFont) == 0x000008, "Wrong alignment on WidgetText_GetFont");
static_assert(sizeof(WidgetText_GetFont) == 0x000058, "Wrong size on WidgetText_GetFont");
static_assert(offsetof(WidgetText_GetFont, ReturnValue) == 0x000000, "Member 'WidgetText_GetFont::ReturnValue' has a wrong offset!");

// Function UIFramework.WidgetText.GetText
// 0x0018 (0x0018 - 0x0000)
struct WidgetText_GetText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetText_GetText) == 0x000008, "Wrong alignment on WidgetText_GetText");
static_assert(sizeof(WidgetText_GetText) == 0x000018, "Wrong size on WidgetText_GetText");
static_assert(offsetof(WidgetText_GetText, ReturnValue) == 0x000000, "Member 'WidgetText_GetText::ReturnValue' has a wrong offset!");

}

