#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CosmosManager

#include "Basic.hpp"


namespace SDK
{

// Enum CosmosManager.ECosmosNgWordCheckErrorEntry
// NumValues: 0x0004
enum class ECosmosNgWordCheckErrorEntry : uint8
{
	None                                     = 0,
	GuildName                                = 1,
	GuildIntroduction                        = 2,
	MAX                                      = 3,
};

// Enum CosmosManager.ENetSquadStatus
// NumValues: 0x000D
enum class ENetSquadStatus : uint8
{
	None                                     = 0,
	WaitForResponse                          = 1,
	Solo                                     = 2,
	JoinedSquad                              = 3,
	Searching                                = 4,
	SearchCancelling                         = 5,
	Reconnecting                             = 6,
	Merging                                  = 7,
	SquadCompleted                           = 8,
	Matching                                 = 9,
	MatchingCancelling                       = 10,
	LobbyOrBattle                            = 11,
	MAX                                      = 12,
};

// Enum CosmosManager.ENetSquadCommand
// NumValues: 0x000F
enum class ENetSquadCommand : uint8
{
	None                                     = 0,
	Initialize                               = 1,
	Create                                   = 2,
	Join                                     = 3,
	Leave                                    = 4,
	Fetch                                    = 5,
	Update                                   = 6,
	ChangePlayMode                           = 7,
	Search                                   = 8,
	CancelSearch                             = 9,
	Matching                                 = 10,
	CancelMatching                           = 11,
	Kick                                     = 12,
	QuitGame                                 = 13,
	MAX                                      = 14,
};

// Enum CosmosManager.EWebApiKpiColumnType
// NumValues: 0x0004
enum class EWebApiKpiColumnType : uint8
{
	INVALID                                  = 0,
	INTEGER                                  = 1,
	STRING                                   = 2,
	MAX                                      = 3,
};

// Enum CosmosManager.EWebApiCurrencyType
// NumValues: 0x0005
enum class EWebApiCurrencyType : uint8
{
	GOLD                                     = 0,
	HERO_SOUL                                = 1,
	HERO_CRYSTAL                             = 2,
	TICKET_FRAGMENT                          = 3,
	MAX                                      = 4,
};

// Enum CosmosManager.EWebApiMissionProcess
// NumValues: 0x0004
enum class EWebApiMissionProcess : uint8
{
	INVALID                                  = 0,
	BATTLE_IN_PROGRESS                       = 1,
	BATTLE_FINISHED                          = 2,
	MAX                                      = 3,
};

// Enum CosmosManager.EWebApiPenaltyType
// NumValues: 0x000B
enum class EWebApiPenaltyType : uint8
{
	INVALID                                  = 0,
	REPORTED_PLAYER_NAME                     = 1,
	REPORTED_CHEAT                           = 2,
	REPORTED_HARASSMENT                      = 3,
	REPORTED_VOICE_CHAT                      = 4,
	REPORTED_CHAT                            = 5,
	REPORTED_6TIMES                          = 6,
	DISCONNECTED                             = 7,
	DISCONNECTED_3TIMES                      = 8,
	INTENTIONAL_RETIRE                       = 9,
	MAX                                      = 10,
};

// Enum CosmosManager.EWebApiCustomizeItemType
// NumValues: 0x0009
enum class EWebApiCustomizeItemType : uint8
{
	INVALID                                  = 0,
	CHARACTER                                = 1,
	COSTUME                                  = 2,
	COLOR                                    = 3,
	VOICE                                    = 4,
	EMOTE                                    = 5,
	EMBLEM                                   = 6,
	VARIATION                                = 7,
	MAX                                      = 8,
};

// Enum CosmosManager.EWebApiMyAdType
// NumValues: 0x0004
enum class EWebApiMyAdType : uint8
{
	INVALID                                  = 0,
	MY_CUSTOMIZE                             = 1,
	TOP_MENU                                 = 2,
	MAX                                      = 3,
};

// Enum CosmosManager.EWebApiCustomizePresetType
// NumValues: 0x0005
enum class EWebApiCustomizePresetType : uint8
{
	INVALID                                  = 0,
	COSTUME                                  = 1,
	VOICE                                    = 2,
	EMOTE                                    = 3,
	MAX                                      = 4,
};

// Enum CosmosManager.EWebApiPhaseResultType
// NumValues: 0x0006
enum class EWebApiPhaseResultType : uint8
{
	INVALID                                  = 0,
	DAMAGE                                   = 1,
	KO                                       = 2,
	SUPPLY_SUPPORT                           = 3,
	CITIZEN_ACTION                           = 4,
	MAX                                      = 5,
};

// Enum CosmosManager.EWebApiMyAdPartsType
// NumValues: 0x0009
enum class EWebApiMyAdPartsType : uint8
{
	MY_AD                                    = 0,
	CHARACTER                                = 1,
	OUTER_FRAME                              = 2,
	MESSAGE_FRAME                            = 3,
	NAME_FRAME                               = 4,
	STAMP                                    = 5,
	EFFECT                                   = 6,
	BACKGROUND                               = 7,
	MAX                                      = 8,
};

// Enum CosmosManager.EWebApiCoordinateListType
// NumValues: 0x0005
enum class EWebApiCoordinateListType : uint8
{
	INVALID                                  = 0,
	PICKUP                                   = 1,
	RANDOM                                   = 2,
	CHARACTER                                = 3,
	MAX                                      = 4,
};

// Enum CosmosManager.EWebApiEmblemType
// NumValues: 0x0003
enum class EWebApiEmblemType : uint8
{
	USER                                     = 0,
	GUILD                                    = 1,
	MAX                                      = 2,
};

// Enum CosmosManager.EWebApiItemSort
// NumValues: 0x0008
enum class EWebApiItemSort : uint8
{
	INVALID                                  = 0,
	RECEIVE_NEW                              = 1,
	RECEIVE_OLD                              = 2,
	EXPIRE_CLOSE                             = 3,
	EXPIRE_FAR                               = 4,
	NAME_ASC                                 = 5,
	NAME_DESC                                = 6,
	MAX                                      = 7,
};

// Enum CosmosManager.EWebApiMatchStatus
// NumValues: 0x0005
enum class EWebApiMatchStatus : uint8
{
	NONE                                     = 0,
	WIN                                      = 1,
	LOSE                                     = 2,
	IN_BATTLE                                = 3,
	MAX                                      = 4,
};

// Enum CosmosManager.EWebApiStatus
// NumValues: 0x0005
enum class EWebApiStatus : uint8
{
	None                                     = 0,
	Idle                                     = 1,
	WaitForResponse                          = 2,
	ErrorReceived                            = 3,
	MAX                                      = 4,
};

// ScriptStruct CosmosManager.CosmosMatchingSquadMember
// 0x00C0 (0x00C0 - 0x0000)
struct FCosmosMatchingSquadMember
{
public:
	class FString                                 CosmosUserId;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            UserData;                                          // 0x0020(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            SdpData;                                           // 0x0070(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosMatchingSquadMember) == 0x000008, "Wrong alignment on FCosmosMatchingSquadMember");
static_assert(sizeof(FCosmosMatchingSquadMember) == 0x0000C0, "Wrong size on FCosmosMatchingSquadMember");
static_assert(offsetof(FCosmosMatchingSquadMember, CosmosUserId) == 0x000000, "Member 'FCosmosMatchingSquadMember::CosmosUserId' has a wrong offset!");
static_assert(offsetof(FCosmosMatchingSquadMember, DisplayName) == 0x000010, "Member 'FCosmosMatchingSquadMember::DisplayName' has a wrong offset!");
static_assert(offsetof(FCosmosMatchingSquadMember, UserData) == 0x000020, "Member 'FCosmosMatchingSquadMember::UserData' has a wrong offset!");
static_assert(offsetof(FCosmosMatchingSquadMember, SdpData) == 0x000070, "Member 'FCosmosMatchingSquadMember::SdpData' has a wrong offset!");

// ScriptStruct CosmosManager.CosmosCustomMatchingSquadMember
// 0x0000 (0x00C0 - 0x00C0)
struct FCosmosCustomMatchingSquadMember final : public FCosmosMatchingSquadMember
{
};
static_assert(alignof(FCosmosCustomMatchingSquadMember) == 0x000008, "Wrong alignment on FCosmosCustomMatchingSquadMember");
static_assert(sizeof(FCosmosCustomMatchingSquadMember) == 0x0000C0, "Wrong size on FCosmosCustomMatchingSquadMember");

// ScriptStruct CosmosManager.CosmosCustomMatchingSquad
// 0x0018 (0x0018 - 0x0000)
struct FCosmosCustomMatchingSquad final
{
public:
	int32                                         SquadNo;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosCustomMatchingSquadMember> MemberList;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosCustomMatchingSquad) == 0x000008, "Wrong alignment on FCosmosCustomMatchingSquad");
static_assert(sizeof(FCosmosCustomMatchingSquad) == 0x000018, "Wrong size on FCosmosCustomMatchingSquad");
static_assert(offsetof(FCosmosCustomMatchingSquad, SquadNo) == 0x000000, "Member 'FCosmosCustomMatchingSquad::SquadNo' has a wrong offset!");
static_assert(offsetof(FCosmosCustomMatchingSquad, MemberList) == 0x000008, "Member 'FCosmosCustomMatchingSquad::MemberList' has a wrong offset!");

// ScriptStruct CosmosManager.CosmosCustomMatchingInfo
// 0x00B8 (0x00B8 - 0x0000)
struct FCosmosCustomMatchingInfo final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayMode;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            RoomData;                                          // 0x0018(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 HostPlayerId;                                      // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBattleReady;                                      // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosCustomMatchingSquad>     SquadList;                                         // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCosmosCustomMatchingSquadMember> StandByMemberList;                                 // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 BattleServerHost;                                  // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattleServerPort;                                  // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCosmosCustomMatchingInfo) == 0x000008, "Wrong alignment on FCosmosCustomMatchingInfo");
static_assert(sizeof(FCosmosCustomMatchingInfo) == 0x0000B8, "Wrong size on FCosmosCustomMatchingInfo");
static_assert(offsetof(FCosmosCustomMatchingInfo, ID) == 0x000000, "Member 'FCosmosCustomMatchingInfo::ID' has a wrong offset!");
static_assert(offsetof(FCosmosCustomMatchingInfo, PlayMode) == 0x000010, "Member 'FCosmosCustomMatchingInfo::PlayMode' has a wrong offset!");
static_assert(offsetof(FCosmosCustomMatchingInfo, RoomData) == 0x000018, "Member 'FCosmosCustomMatchingInfo::RoomData' has a wrong offset!");
static_assert(offsetof(FCosmosCustomMatchingInfo, HostPlayerId) == 0x000068, "Member 'FCosmosCustomMatchingInfo::HostPlayerId' has a wrong offset!");
static_assert(offsetof(FCosmosCustomMatchingInfo, bBattleReady) == 0x000078, "Member 'FCosmosCustomMatchingInfo::bBattleReady' has a wrong offset!");
static_assert(offsetof(FCosmosCustomMatchingInfo, SquadList) == 0x000080, "Member 'FCosmosCustomMatchingInfo::SquadList' has a wrong offset!");
static_assert(offsetof(FCosmosCustomMatchingInfo, StandByMemberList) == 0x000090, "Member 'FCosmosCustomMatchingInfo::StandByMemberList' has a wrong offset!");
static_assert(offsetof(FCosmosCustomMatchingInfo, BattleServerHost) == 0x0000A0, "Member 'FCosmosCustomMatchingInfo::BattleServerHost' has a wrong offset!");
static_assert(offsetof(FCosmosCustomMatchingInfo, BattleServerPort) == 0x0000B0, "Member 'FCosmosCustomMatchingInfo::BattleServerPort' has a wrong offset!");

// ScriptStruct CosmosManager.CosmosMatchingRegion
// 0x0048 (0x0048 - 0x0000)
struct FCosmosMatchingRegion final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Host;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DedicatedServers;                                  // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Latency;                                           // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosMatchingRegion) == 0x000008, "Wrong alignment on FCosmosMatchingRegion");
static_assert(sizeof(FCosmosMatchingRegion) == 0x000048, "Wrong size on FCosmosMatchingRegion");
static_assert(offsetof(FCosmosMatchingRegion, Code) == 0x000000, "Member 'FCosmosMatchingRegion::Code' has a wrong offset!");
static_assert(offsetof(FCosmosMatchingRegion, Name) == 0x000008, "Member 'FCosmosMatchingRegion::Name' has a wrong offset!");
static_assert(offsetof(FCosmosMatchingRegion, Host) == 0x000018, "Member 'FCosmosMatchingRegion::Host' has a wrong offset!");
static_assert(offsetof(FCosmosMatchingRegion, Port) == 0x000028, "Member 'FCosmosMatchingRegion::Port' has a wrong offset!");
static_assert(offsetof(FCosmosMatchingRegion, DedicatedServers) == 0x000030, "Member 'FCosmosMatchingRegion::DedicatedServers' has a wrong offset!");
static_assert(offsetof(FCosmosMatchingRegion, Latency) == 0x000040, "Member 'FCosmosMatchingRegion::Latency' has a wrong offset!");
static_assert(offsetof(FCosmosMatchingRegion, Score) == 0x000044, "Member 'FCosmosMatchingRegion::Score' has a wrong offset!");

// ScriptStruct CosmosManager.CosmosMatchingSquadInfo
// 0x0088 (0x0088 - 0x0000)
struct FCosmosMatchingSquadInfo final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayMode;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            SquadData;                                         // 0x0018(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 LeaderPlayerId;                                    // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCosmosMatchingSquadMember>     MemberList;                                        // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosMatchingSquadInfo) == 0x000008, "Wrong alignment on FCosmosMatchingSquadInfo");
static_assert(sizeof(FCosmosMatchingSquadInfo) == 0x000088, "Wrong size on FCosmosMatchingSquadInfo");
static_assert(offsetof(FCosmosMatchingSquadInfo, ID) == 0x000000, "Member 'FCosmosMatchingSquadInfo::ID' has a wrong offset!");
static_assert(offsetof(FCosmosMatchingSquadInfo, PlayMode) == 0x000010, "Member 'FCosmosMatchingSquadInfo::PlayMode' has a wrong offset!");
static_assert(offsetof(FCosmosMatchingSquadInfo, SquadData) == 0x000018, "Member 'FCosmosMatchingSquadInfo::SquadData' has a wrong offset!");
static_assert(offsetof(FCosmosMatchingSquadInfo, LeaderPlayerId) == 0x000068, "Member 'FCosmosMatchingSquadInfo::LeaderPlayerId' has a wrong offset!");
static_assert(offsetof(FCosmosMatchingSquadInfo, MemberList) == 0x000078, "Member 'FCosmosMatchingSquadInfo::MemberList' has a wrong offset!");

}

