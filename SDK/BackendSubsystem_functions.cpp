#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BackendSubsystem

#include "Basic.hpp"

#include "BackendSubsystem_classes.hpp"
#include "BackendSubsystem_parameters.hpp"


namespace SDK
{

// Function BackendSubsystem.BackendSubsystem.AcceptFriendship
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::AcceptFriendship(const class FString& PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "AcceptFriendship");

	Params::BackendSubsystem_AcceptFriendship Parms{};

	Parms.PlayerId = std::move(PlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.AcceptFriendshipImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::AcceptFriendshipImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "AcceptFriendshipImpl");

	Params::BackendSubsystem_AcceptFriendshipImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.AcceptGuild
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::AcceptGuild(const class FString& PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "AcceptGuild");

	Params::BackendSubsystem_AcceptGuild Parms{};

	Parms.PlayerId = std::move(PlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.AcceptGuildImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::AcceptGuildImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "AcceptGuildImpl");

	Params::BackendSubsystem_AcceptGuildImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.AcceptGuildInvitation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           GuildId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NoticeId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::AcceptGuildInvitation(const class FString& PlayerId, const class FString& GuildId, const class FString& NoticeId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "AcceptGuildInvitation");

	Params::BackendSubsystem_AcceptGuildInvitation Parms{};

	Parms.PlayerId = std::move(PlayerId);
	Parms.GuildId = std::move(GuildId);
	Parms.NoticeId = std::move(NoticeId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.AcceptGuildInvitationImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::AcceptGuildInvitationImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "AcceptGuildInvitationImpl");

	Params::BackendSubsystem_AcceptGuildInvitationImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.AddKpiPlayerBattleLog_DS
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKpiBattleLog                    Kpi                                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::AddKpiPlayerBattleLog_DS(const class FString& PlayerId, const struct FKpiBattleLog& Kpi)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "AddKpiPlayerBattleLog_DS");

	Params::BackendSubsystem_AddKpiPlayerBattleLog_DS Parms{};

	Parms.PlayerId = std::move(PlayerId);
	Parms.Kpi = std::move(Kpi);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.AddPlayer_DS
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           SquadId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CharacterCode                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::AddPlayer_DS(const class FString& SquadId, const class FString& PlayerId, const int32 CharacterCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "AddPlayer_DS");

	Params::BackendSubsystem_AddPlayer_DS Parms{};

	Parms.SquadId = std::move(SquadId);
	Parms.PlayerId = std::move(PlayerId);
	Parms.CharacterCode = CharacterCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.ApplyGuild
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           GuildId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    RecommendApply                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::ApplyGuild(const class FString& GuildId, bool RecommendApply)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ApplyGuild");

	Params::BackendSubsystem_ApplyGuild Parms{};

	Parms.GuildId = std::move(GuildId);
	Parms.RecommendApply = RecommendApply;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.ApplyGuildImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::ApplyGuildImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ApplyGuildImpl");

	Params::BackendSubsystem_ApplyGuildImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.AutoStartBattle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInitialize                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::AutoStartBattle(bool bInitialize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "AutoStartBattle");

	Params::BackendSubsystem_AutoStartBattle Parms{};

	Parms.bInitialize = bInitialize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.AutoStartBattleComplete
// (Final, Native, Public)
// Parameters:
// EAutoStartBattleState                   State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::AutoStartBattleComplete(EAutoStartBattleState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "AutoStartBattleComplete");

	Params::BackendSubsystem_AutoStartBattleComplete Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.AutoStartBattleCustomMatch
// (Final, Native, Public, BlueprintCallable)

void UBackendSubsystem::AutoStartBattleCustomMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "AutoStartBattleCustomMatch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.AutoStartBattleCustomMatchComplete
// (Final, Native, Public)

void UBackendSubsystem::AutoStartBattleCustomMatchComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "AutoStartBattleCustomMatchComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.AutoStartBattleCustomMatchProgress1
// (Final, Native, Public)

void UBackendSubsystem::AutoStartBattleCustomMatchProgress1()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "AutoStartBattleCustomMatchProgress1");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.AutoStartBattleCustomMatchProgress2
// (Final, Native, Public)

void UBackendSubsystem::AutoStartBattleCustomMatchProgress2()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "AutoStartBattleCustomMatchProgress2");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.AutoStartBattleProgress1
// (Final, Native, Public)
// Parameters:
// int32                                   SkillBase                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PenaltyLevel                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::AutoStartBattleProgress1(const int32 SkillBase, const int32 PenaltyLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "AutoStartBattleProgress1");

	Params::BackendSubsystem_AutoStartBattleProgress1 Parms{};

	Parms.SkillBase = SkillBase;
	Parms.PenaltyLevel = PenaltyLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.AutoStartBattleProgress2
// (Final, Native, Public)

void UBackendSubsystem::AutoStartBattleProgress2()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "AutoStartBattleProgress2");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.AutoStartBattleProgress3
// (Final, Native, Public)

void UBackendSubsystem::AutoStartBattleProgress3()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "AutoStartBattleProgress3");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.AutoStartBattleProgress4
// (Final, Native, Public)

void UBackendSubsystem::AutoStartBattleProgress4()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "AutoStartBattleProgress4");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.AutoStartBattleProgress5
// (Final, Native, Public)

void UBackendSubsystem::AutoStartBattleProgress5()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "AutoStartBattleProgress5");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.AutoStartBattleProgress6
// (Final, Native, Public)

void UBackendSubsystem::AutoStartBattleProgress6()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "AutoStartBattleProgress6");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.BroadcastAutoStartBattleComplete
// (Final, Native, Public)
// Parameters:
// bool                                    Idle                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StateSetting                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::BroadcastAutoStartBattleComplete(bool Idle, int32 StateSetting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "BroadcastAutoStartBattleComplete");

	Params::BackendSubsystem_BroadcastAutoStartBattleComplete Parms{};

	Parms.Idle = Idle;
	Parms.StateSetting = StateSetting;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.BroadcastOnLoadCompleteEventNextTick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::BroadcastOnLoadCompleteEventNextTick(const int32 RequestId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "BroadcastOnLoadCompleteEventNextTick");

	Params::BackendSubsystem_BroadcastOnLoadCompleteEventNextTick Parms{};

	Parms.RequestId = RequestId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.Buy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ShopItemCode                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CurrencyCode                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::Buy(const int32 ShopItemCode, const int32 CurrencyCode, const int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "Buy");

	Params::BackendSubsystem_Buy Parms{};

	Parms.ShopItemCode = ShopItemCode;
	Parms.CurrencyCode = CurrencyCode;
	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.BuyImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::BuyImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "BuyImpl");

	Params::BackendSubsystem_BuyImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.BuyLicenseImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::BuyLicenseImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "BuyLicenseImpl");

	Params::BackendSubsystem_BuyLicenseImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.BuyLicenseWithExpImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::BuyLicenseWithExpImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "BuyLicenseWithExpImpl");

	Params::BackendSubsystem_BuyLicenseWithExpImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.BuyPremiumDailyLoginBonus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::BuyPremiumDailyLoginBonus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "BuyPremiumDailyLoginBonus");

	Params::BackendSubsystem_BuyPremiumDailyLoginBonus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.BuyPremiumDailyLoginBonusImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::BuyPremiumDailyLoginBonusImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "BuyPremiumDailyLoginBonusImpl");

	Params::BackendSubsystem_BuyPremiumDailyLoginBonusImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.BuyProLicense
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::BuyProLicense()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "BuyProLicense");

	Params::BackendSubsystem_BuyProLicense Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.BuyProLicenseWithExp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::BuyProLicenseWithExp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "BuyProLicenseWithExp");

	Params::BackendSubsystem_BuyProLicenseWithExp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.BuySpecialLicenseExp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::BuySpecialLicenseExp(int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "BuySpecialLicenseExp");

	Params::BackendSubsystem_BuySpecialLicenseExp Parms{};

	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.CancelApplyGuild
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           GuildId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::CancelApplyGuild(const class FString& GuildId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "CancelApplyGuild");

	Params::BackendSubsystem_CancelApplyGuild Parms{};

	Parms.GuildId = std::move(GuildId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.CancelApplyGuildImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::CancelApplyGuildImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "CancelApplyGuildImpl");

	Params::BackendSubsystem_CancelApplyGuildImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.CancelAutoStartBattle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::CancelAutoStartBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "CancelAutoStartBattle");

	Params::BackendSubsystem_CancelAutoStartBattle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.CancelCustomLobbyMatching
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::CancelCustomLobbyMatching()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "CancelCustomLobbyMatching");

	Params::BackendSubsystem_CancelCustomLobbyMatching Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.CancelFriendshipProposal
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::CancelFriendshipProposal(const class FString& PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "CancelFriendshipProposal");

	Params::BackendSubsystem_CancelFriendshipProposal Parms{};

	Parms.PlayerId = std::move(PlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.CancelFriendshipProposalImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::CancelFriendshipProposalImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "CancelFriendshipProposalImpl");

	Params::BackendSubsystem_CancelFriendshipProposalImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.CancelLobbyMatching
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::CancelLobbyMatching()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "CancelLobbyMatching");

	Params::BackendSubsystem_CancelLobbyMatching Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.CancelMergeSquad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::CancelMergeSquad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "CancelMergeSquad");

	Params::BackendSubsystem_CancelMergeSquad Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.CancelPurchase
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ErrorID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::CancelPurchase(const class FString& ErrorID, const class FString& ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "CancelPurchase");

	Params::BackendSubsystem_CancelPurchase Parms{};

	Parms.ErrorID = std::move(ErrorID);
	Parms.ErrorMessage = std::move(ErrorMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.CancelPurchaseImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::CancelPurchaseImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "CancelPurchaseImpl");

	Params::BackendSubsystem_CancelPurchaseImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.CancelSquadInvitation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           InvitationId                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::CancelSquadInvitation(const class FString& InvitationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "CancelSquadInvitation");

	Params::BackendSubsystem_CancelSquadInvitation Parms{};

	Parms.InvitationId = std::move(InvitationId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.CancelSquadInvitationImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::CancelSquadInvitationImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "CancelSquadInvitationImpl");

	Params::BackendSubsystem_CancelSquadInvitationImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.CanStartBattle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::CanStartBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "CanStartBattle");

	Params::BackendSubsystem_CanStartBattle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.ChangePlayMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewPlayMode                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::ChangePlayMode(const int32 NewPlayMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ChangePlayMode");

	Params::BackendSubsystem_ChangePlayMode Parms{};

	Parms.NewPlayMode = NewPlayMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.CheckBnidStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::CheckBnidStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "CheckBnidStatus");

	Params::BackendSubsystem_CheckBnidStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.CheckBnidStatusImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::CheckBnidStatusImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "CheckBnidStatusImpl");

	Params::BackendSubsystem_CheckBnidStatusImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.CheckedLeaveSquad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::CheckedLeaveSquad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "CheckedLeaveSquad");

	Params::BackendSubsystem_CheckedLeaveSquad Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.CheckNumKpiPlayerBattleLog_DS
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::CheckNumKpiPlayerBattleLog_DS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "CheckNumKpiPlayerBattleLog_DS");

	Params::BackendSubsystem_CheckNumKpiPlayerBattleLog_DS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.ClearAutoStartBattleEvents
// (Final, Native, Public, BlueprintCallable)

void UBackendSubsystem::ClearAutoStartBattleEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ClearAutoStartBattleEvents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.ClearKpiPlayerBattleLog_DS
// (Final, Native, Public, BlueprintCallable)

void UBackendSubsystem::ClearKpiPlayerBattleLog_DS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ClearKpiPlayerBattleLog_DS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.ClearNoticeCount
// (Final, Native, Public)

void UBackendSubsystem::ClearNoticeCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ClearNoticeCount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.ConfirmPurchase
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           OrderId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::ConfirmPurchase(const class FString& OrderId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ConfirmPurchase");

	Params::BackendSubsystem_ConfirmPurchase Parms{};

	Parms.OrderId = std::move(OrderId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.ConfirmPurchaseImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::ConfirmPurchaseImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ConfirmPurchaseImpl");

	Params::BackendSubsystem_ConfirmPurchaseImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.ConfirmRetryLottery
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::ConfirmRetryLottery()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ConfirmRetryLottery");

	Params::BackendSubsystem_ConfirmRetryLottery Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.ConfirmRetryLotteryImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::ConfirmRetryLotteryImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ConfirmRetryLotteryImpl");

	Params::BackendSubsystem_ConfirmRetryLotteryImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.ConsumeRentalPoint_DS
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TMap<class FString, int32>              ConsumeDataList                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::ConsumeRentalPoint_DS(const TMap<class FString, int32>& ConsumeDataList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ConsumeRentalPoint_DS");

	Params::BackendSubsystem_ConsumeRentalPoint_DS Parms{};

	Parms.ConsumeDataList = std::move(ConsumeDataList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.CreateCustomMatchRoomID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bHiddenIdFlag                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayModeCode                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::CreateCustomMatchRoomID(bool bHiddenIdFlag, int32 PlayModeCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "CreateCustomMatchRoomID");

	Params::BackendSubsystem_CreateCustomMatchRoomID Parms{};

	Parms.bHiddenIdFlag = bHiddenIdFlag;
	Parms.PlayModeCode = PlayModeCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.CreateCustomMatchRoomIDImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::CreateCustomMatchRoomIDImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "CreateCustomMatchRoomIDImpl");

	Params::BackendSubsystem_CreateCustomMatchRoomIDImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.CreateGuild
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Profile                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGuildPolicy                            EPolicy                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGuildJoinRule                          EJoinRule                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EmblemCode                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::CreateGuild(const class FString& Name_0, const class FString& Profile, const EGuildPolicy EPolicy, const EGuildJoinRule EJoinRule, const int32 EmblemCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "CreateGuild");

	Params::BackendSubsystem_CreateGuild Parms{};

	Parms.Name_0 = std::move(Name_0);
	Parms.Profile = std::move(Profile);
	Parms.EPolicy = EPolicy;
	Parms.EJoinRule = EJoinRule;
	Parms.EmblemCode = EmblemCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.CreateGuildImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::CreateGuildImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "CreateGuildImpl");

	Params::BackendSubsystem_CreateGuildImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.CreateSquad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bChangePlayMode                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::CreateSquad(bool bChangePlayMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "CreateSquad");

	Params::BackendSubsystem_CreateSquad Parms{};

	Parms.bChangePlayMode = bChangePlayMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.DeclineGuildInvitation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NoticeId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::DeclineGuildInvitation(const class FString& PlayerId, const class FString& NoticeId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "DeclineGuildInvitation");

	Params::BackendSubsystem_DeclineGuildInvitation Parms{};

	Parms.PlayerId = std::move(PlayerId);
	Parms.NoticeId = std::move(NoticeId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.DeclineGuildInvitationImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::DeclineGuildInvitationImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "DeclineGuildInvitationImpl");

	Params::BackendSubsystem_DeclineGuildInvitationImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.DelayKickAllCpuPlayers
// (Final, Native, Public)
// Parameters:
// bool                                    Idle                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StateSetting                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::DelayKickAllCpuPlayers(bool Idle, int32 StateSetting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "DelayKickAllCpuPlayers");

	Params::BackendSubsystem_DelayKickAllCpuPlayers Parms{};

	Parms.Idle = Idle;
	Parms.StateSetting = StateSetting;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.DeleteCustomizePreset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   CharacterCode                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPresetType                             PresetType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SlotNo                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::DeleteCustomizePreset(const int32 CharacterCode, const EPresetType PresetType, const int32 SlotNo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "DeleteCustomizePreset");

	Params::BackendSubsystem_DeleteCustomizePreset Parms{};

	Parms.CharacterCode = CharacterCode;
	Parms.PresetType = PresetType;
	Parms.SlotNo = SlotNo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.DeleteFriendship
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::DeleteFriendship(const class FString& PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "DeleteFriendship");

	Params::BackendSubsystem_DeleteFriendship Parms{};

	Parms.PlayerId = std::move(PlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.DeleteFriendshipImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::DeleteFriendshipImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "DeleteFriendshipImpl");

	Params::BackendSubsystem_DeleteFriendshipImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.DeleteNotice
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           NoticeId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::DeleteNotice(const class FString& NoticeId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "DeleteNotice");

	Params::BackendSubsystem_DeleteNotice Parms{};

	Parms.NoticeId = std::move(NoticeId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.DeleteOpenedNotice
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::DeleteOpenedNotice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "DeleteOpenedNotice");

	Params::BackendSubsystem_DeleteOpenedNotice Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.DeliveryMyAd
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   AdNo                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::DeliveryMyAd(const int32 AdNo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "DeliveryMyAd");

	Params::BackendSubsystem_DeliveryMyAd Parms{};

	Parms.AdNo = AdNo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.DeliveryMyAdById
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ID                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::DeliveryMyAdById(const class FString& ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "DeliveryMyAdById");

	Params::BackendSubsystem_DeliveryMyAdById Parms{};

	Parms.ID = std::move(ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.DeliveryMyAdImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::DeliveryMyAdImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "DeliveryMyAdImpl");

	Params::BackendSubsystem_DeliveryMyAdImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.DenyFriendship
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::DenyFriendship(const class FString& PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "DenyFriendship");

	Params::BackendSubsystem_DenyFriendship Parms{};

	Parms.PlayerId = std::move(PlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.DenyFriendshipImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::DenyFriendshipImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "DenyFriendshipImpl");

	Params::BackendSubsystem_DenyFriendshipImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.DenyGuild
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::DenyGuild(const class FString& PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "DenyGuild");

	Params::BackendSubsystem_DenyGuild Parms{};

	Parms.PlayerId = std::move(PlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.DenyGuildImpl
// (Final, Native, Protected)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBackendSubsystem::DenyGuildImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "DenyGuildImpl");

	Params::BackendSubsystem_DenyGuildImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.DonateGuild
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGuildFacility                          ETargetFacility                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Amount                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::DonateGuild(const EGuildFacility ETargetFacility, const int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "DonateGuild");

	Params::BackendSubsystem_DonateGuild Parms{};

	Parms.ETargetFacility = ETargetFacility;
	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.DonateGuildImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::DonateGuildImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "DonateGuildImpl");

	Params::BackendSubsystem_DonateGuildImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.EnableVoiceChat
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::EnableVoiceChat(const bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "EnableVoiceChat");

	Params::BackendSubsystem_EnableVoiceChat Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.EnableVoiceChatSTTCommand
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::EnableVoiceChatSTTCommand(const TArray<class FString>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "EnableVoiceChatSTTCommand");

	Params::BackendSubsystem_EnableVoiceChatSTTCommand Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.EnableWebApiCacheCommand
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::EnableWebApiCacheCommand(const TArray<class FString>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "EnableWebApiCacheCommand");

	Params::BackendSubsystem_EnableWebApiCacheCommand Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.ExchangeLotteryMileage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   LotteryCode                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ExchangeId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::ExchangeLotteryMileage(const int32 LotteryCode, const class FString& ExchangeId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ExchangeLotteryMileage");

	Params::BackendSubsystem_ExchangeLotteryMileage Parms{};

	Parms.LotteryCode = LotteryCode;
	Parms.ExchangeId = std::move(ExchangeId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.ExchangeLotteryMileageImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::ExchangeLotteryMileageImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ExchangeLotteryMileageImpl");

	Params::BackendSubsystem_ExchangeLotteryMileageImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.FinishCustomGame
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::FinishCustomGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "FinishCustomGame");

	Params::BackendSubsystem_FinishCustomGame Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.FireGuildMember
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::FireGuildMember(const class FString& PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "FireGuildMember");

	Params::BackendSubsystem_FireGuildMember Parms{};

	Parms.PlayerId = std::move(PlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.FireGuildMemberImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::FireGuildMemberImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "FireGuildMemberImpl");

	Params::BackendSubsystem_FireGuildMemberImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.ForceConnectVoiceChat
// (Final, Native, Public, BlueprintCallable)

void UBackendSubsystem::ForceConnectVoiceChat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ForceConnectVoiceChat");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.ForceDisconnectVoiceChat
// (Final, Native, Public, BlueprintCallable)

void UBackendSubsystem::ForceDisconnectVoiceChat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ForceDisconnectVoiceChat");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.ForceFakePlatform
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Platform                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::ForceFakePlatform(const class FString& Platform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ForceFakePlatform");

	Params::BackendSubsystem_ForceFakePlatform Parms{};

	Parms.Platform = std::move(Platform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.GetBattleEndTimeKpiPlayerBattleLog_DS
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBackendSubsystem::GetBattleEndTimeKpiPlayerBattleLog_DS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetBattleEndTimeKpiPlayerBattleLog_DS");

	Params::BackendSubsystem_GetBattleEndTimeKpiPlayerBattleLog_DS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetBattleStartTimeKpiPlayerBattleLog_DS
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBackendSubsystem::GetBattleStartTimeKpiPlayerBattleLog_DS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetBattleStartTimeKpiPlayerBattleLog_DS");

	Params::BackendSubsystem_GetBattleStartTimeKpiPlayerBattleLog_DS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetBnidQrCodeTexture2DDynamic
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2DDynamic*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2DDynamic* UBackendSubsystem::GetBnidQrCodeTexture2DDynamic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetBnidQrCodeTexture2DDynamic");

	Params::BackendSubsystem_GetBnidQrCodeTexture2DDynamic Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetCustomLobbyServer
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::GetCustomLobbyServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetCustomLobbyServer");

	Params::BackendSubsystem_GetCustomLobbyServer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetCustomRoomData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           CustomRoomKey                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::GetCustomRoomData(const class FString& CustomRoomKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetCustomRoomData");

	Params::BackendSubsystem_GetCustomRoomData Parms{};

	Parms.CustomRoomKey = std::move(CustomRoomKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetDatabaseParams
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDatabaseParams*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDatabaseParams* UBackendSubsystem::GetDatabaseParams()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetDatabaseParams");

	Params::BackendSubsystem_GetDatabaseParams Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetMasterDataStatusString
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBackendSubsystem::GetMasterDataStatusString()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetMasterDataStatusString");

	Params::BackendSubsystem_GetMasterDataStatusString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetPurchaseInfoId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBackendSubsystem::GetPurchaseInfoId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetPurchaseInfoId");

	Params::BackendSubsystem_GetPurchaseInfoId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetVoiceFontNameList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UBackendSubsystem::GetVoiceFontNameList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetVoiceFontNameList");

	Params::BackendSubsystem_GetVoiceFontNameList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.InitializeBattle_DS
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayModeCode                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ServerHost                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ServerPort                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::InitializeBattle_DS(const int32 PlayModeCode, const class FString& ServerHost, const int32 ServerPort)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "InitializeBattle_DS");

	Params::BackendSubsystem_InitializeBattle_DS Parms{};

	Parms.PlayModeCode = PlayModeCode;
	Parms.ServerHost = std::move(ServerHost);
	Parms.ServerPort = ServerPort;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.InitializeDevices
// (Final, Native, Public, BlueprintCallable)

void UBackendSubsystem::InitializeDevices()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "InitializeDevices");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.InviteGuild
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::InviteGuild(const class FString& PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "InviteGuild");

	Params::BackendSubsystem_InviteGuild Parms{};

	Parms.PlayerId = std::move(PlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.InviteGuildImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::InviteGuildImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "InviteGuildImpl");

	Params::BackendSubsystem_InviteGuildImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.IsBootUp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::IsBootUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "IsBootUp");

	Params::BackendSubsystem_IsBootUp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.IsCountryInJapan
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::IsCountryInJapan()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "IsCountryInJapan");

	Params::BackendSubsystem_IsCountryInJapan Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.IsFullSquadMember
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::IsFullSquadMember()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "IsFullSquadMember");

	Params::BackendSubsystem_IsFullSquadMember Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.IsLanguageJapanese
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::IsLanguageJapanese()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "IsLanguageJapanese");

	Params::BackendSubsystem_IsLanguageJapanese Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.IsNetworkAvailableCheck
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::IsNetworkAvailableCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "IsNetworkAvailableCheck");

	Params::BackendSubsystem_IsNetworkAvailableCheck Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.IsPause
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::IsPause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "IsPause");

	Params::BackendSubsystem_IsPause Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.IsPlayerMute
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlatformPlayerId                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::IsPlayerMute(const class FString& PlatformPlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "IsPlayerMute");

	Params::BackendSubsystem_IsPlayerMute Parms{};

	Parms.PlatformPlayerId = std::move(PlatformPlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.IsReadyForLogin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::IsReadyForLogin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "IsReadyForLogin");

	Params::BackendSubsystem_IsReadyForLogin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.IsRightCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::IsRightCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "IsRightCharacter");

	Params::BackendSubsystem_IsRightCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.JoinCustomMatchRoomKey
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           CustomRoomKey                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::JoinCustomMatchRoomKey(const class FString& CustomRoomKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "JoinCustomMatchRoomKey");

	Params::BackendSubsystem_JoinCustomMatchRoomKey Parms{};

	Parms.CustomRoomKey = std::move(CustomRoomKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.JoinSquad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           SquadPassword                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::JoinSquad(const class FString& SquadPassword)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "JoinSquad");

	Params::BackendSubsystem_JoinSquad Parms{};

	Parms.SquadPassword = std::move(SquadPassword);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.JoinSquadByInvitation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           InvitationId                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::JoinSquadByInvitation(const class FString& InvitationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "JoinSquadByInvitation");

	Params::BackendSubsystem_JoinSquadByInvitation Parms{};

	Parms.InvitationId = std::move(InvitationId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.KickAllCpuPlayers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::KickAllCpuPlayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "KickAllCpuPlayers");

	Params::BackendSubsystem_KickAllCpuPlayers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.KickCustomRoom
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::KickCustomRoom(const class FString& PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "KickCustomRoom");

	Params::BackendSubsystem_KickCustomRoom Parms{};

	Parms.PlayerId = std::move(PlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.KickSquadMember
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           KickTargetPlayerId                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::KickSquadMember(const class FString& KickTargetPlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "KickSquadMember");

	Params::BackendSubsystem_KickSquadMember Parms{};

	Parms.KickTargetPlayerId = std::move(KickTargetPlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LeaveCustomMatch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::LeaveCustomMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LeaveCustomMatch");

	Params::BackendSubsystem_LeaveCustomMatch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LeaveGuild
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LeaveGuild()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LeaveGuild");

	Params::BackendSubsystem_LeaveGuild Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LeaveGuildImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LeaveGuildImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LeaveGuildImpl");

	Params::BackendSubsystem_LeaveGuildImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LeaveSquad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::LeaveSquad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LeaveSquad");

	Params::BackendSubsystem_LeaveSquad Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadAppliedFriend
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Limit                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PageNo                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFriendListSortOrder                    Sort                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadAppliedFriend(const int32 Limit, const int32 PageNo, const EFriendListSortOrder Sort)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadAppliedFriend");

	Params::BackendSubsystem_LoadAppliedFriend Parms{};

	Parms.Limit = Limit;
	Parms.PageNo = PageNo;
	Parms.Sort = Sort;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadApplyingFriend
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Limit                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PageNo                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFriendListSortOrder                    Sort                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadApplyingFriend(const int32 Limit, const int32 PageNo, const EFriendListSortOrder Sort)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadApplyingFriend");

	Params::BackendSubsystem_LoadApplyingFriend Parms{};

	Parms.Limit = Limit;
	Parms.PageNo = PageNo;
	Parms.Sort = Sort;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadAvatarList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadAvatarList(const class FString& PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadAvatarList");

	Params::BackendSubsystem_LoadAvatarList Parms{};

	Parms.PlayerId = std::move(PlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadAvatarListImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadAvatarListImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadAvatarListImpl");

	Params::BackendSubsystem_LoadAvatarListImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadBattleRecord
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PageNo                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadBattleRecord(const int32 PageNo, const class FString& PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadBattleRecord");

	Params::BackendSubsystem_LoadBattleRecord Parms{};

	Parms.PageNo = PageNo;
	Parms.PlayerId = std::move(PlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadBattleRecordImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadBattleRecordImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadBattleRecordImpl");

	Params::BackendSubsystem_LoadBattleRecordImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadBillboardChart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PageNo                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadBillboardChart(const int32 PageNo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadBillboardChart");

	Params::BackendSubsystem_LoadBillboardChart Parms{};

	Parms.PageNo = PageNo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadBillboardChartImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadBillboardChartImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadBillboardChartImpl");

	Params::BackendSubsystem_LoadBillboardChartImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadBnidQrCodeImage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadBnidQrCodeImage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadBnidQrCodeImage");

	Params::BackendSubsystem_LoadBnidQrCodeImage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadBnidQrCodeImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadBnidQrCodeImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadBnidQrCodeImpl");

	Params::BackendSubsystem_LoadBnidQrCodeImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadBnidQrCodeUrl
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadBnidQrCodeUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadBnidQrCodeUrl");

	Params::BackendSubsystem_LoadBnidQrCodeUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadCharacterSelect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadCharacterSelect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadCharacterSelect");

	Params::BackendSubsystem_LoadCharacterSelect Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadCharacterSelectImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadCharacterSelectImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadCharacterSelectImpl");

	Params::BackendSubsystem_LoadCharacterSelectImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadChatLog
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadChatLog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadChatLog");

	Params::BackendSubsystem_LoadChatLog Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadChatLogImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadChatLogImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadChatLogImpl");

	Params::BackendSubsystem_LoadChatLogImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadCosmosIdByPlatformIds
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   PlatformPlayerIds                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadCosmosIdByPlatformIds(const TArray<class FString>& PlatformPlayerIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadCosmosIdByPlatformIds");

	Params::BackendSubsystem_LoadCosmosIdByPlatformIds Parms{};

	Parms.PlatformPlayerIds = std::move(PlatformPlayerIds);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadCosmosIdByPlatformIdsImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadCosmosIdByPlatformIdsImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadCosmosIdByPlatformIdsImpl");

	Params::BackendSubsystem_LoadCosmosIdByPlatformIdsImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadCountry
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadCountry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadCountry");

	Params::BackendSubsystem_LoadCountry Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadCountryImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadCountryImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadCountryImpl");

	Params::BackendSubsystem_LoadCountryImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadCustomizeAppeal
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   CharacterCode                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadCustomizeAppeal(const int32 CharacterCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadCustomizeAppeal");

	Params::BackendSubsystem_LoadCustomizeAppeal Parms{};

	Parms.CharacterCode = CharacterCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadCustomizeAppealImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadCustomizeAppealImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadCustomizeAppealImpl");

	Params::BackendSubsystem_LoadCustomizeAppealImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadCustomizeCostume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   CharacterCode                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadCustomizeCostume(const int32 CharacterCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadCustomizeCostume");

	Params::BackendSubsystem_LoadCustomizeCostume Parms{};

	Parms.CharacterCode = CharacterCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadCustomizeCostumeImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadCustomizeCostumeImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadCustomizeCostumeImpl");

	Params::BackendSubsystem_LoadCustomizeCostumeImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadCustomizeEmblem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   CharacterCode                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadCustomizeEmblem(const int32 CharacterCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadCustomizeEmblem");

	Params::BackendSubsystem_LoadCustomizeEmblem Parms{};

	Parms.CharacterCode = CharacterCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadCustomizeEmblemImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadCustomizeEmblemImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadCustomizeEmblemImpl");

	Params::BackendSubsystem_LoadCustomizeEmblemImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadCustomizePreset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadCustomizePreset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadCustomizePreset");

	Params::BackendSubsystem_LoadCustomizePreset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadCustomizePresetImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadCustomizePresetImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadCustomizePresetImpl");

	Params::BackendSubsystem_LoadCustomizePresetImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadCustomizeVariation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   CharacterCode                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadCustomizeVariation(const int32 CharacterCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadCustomizeVariation");

	Params::BackendSubsystem_LoadCustomizeVariation Parms{};

	Parms.CharacterCode = CharacterCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadCustomizeVariationImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadCustomizeVariationImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadCustomizeVariationImpl");

	Params::BackendSubsystem_LoadCustomizeVariationImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadCustomizeVoice
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   CharacterCode                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadCustomizeVoice(const int32 CharacterCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadCustomizeVoice");

	Params::BackendSubsystem_LoadCustomizeVoice Parms{};

	Parms.CharacterCode = CharacterCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadCustomizeVoiceImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadCustomizeVoiceImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadCustomizeVoiceImpl");

	Params::BackendSubsystem_LoadCustomizeVoiceImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadCustomMatchProfileList
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   PlayerIdList                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadCustomMatchProfileList(const TArray<class FString>& PlayerIdList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadCustomMatchProfileList");

	Params::BackendSubsystem_LoadCustomMatchProfileList Parms{};

	Parms.PlayerIdList = std::move(PlayerIdList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadCustomMatchProfileListImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadCustomMatchProfileListImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadCustomMatchProfileListImpl");

	Params::BackendSubsystem_LoadCustomMatchProfileListImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadCustomMatchResult
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           CustomRoomId                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadCustomMatchResult(const class FString& CustomRoomId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadCustomMatchResult");

	Params::BackendSubsystem_LoadCustomMatchResult Parms{};

	Parms.CustomRoomId = std::move(CustomRoomId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadCustomMatchResultImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadCustomMatchResultImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadCustomMatchResultImpl");

	Params::BackendSubsystem_LoadCustomMatchResultImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadCustomMatchRoomInfoImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadCustomMatchRoomInfoImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadCustomMatchRoomInfoImpl");

	Params::BackendSubsystem_LoadCustomMatchRoomInfoImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   EventCode                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadEvent(const int32 EventCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadEvent");

	Params::BackendSubsystem_LoadEvent Parms{};

	Parms.EventCode = EventCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadEventImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadEventImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadEventImpl");

	Params::BackendSubsystem_LoadEventImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadFriend
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Limit                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PageNo                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFriendListSortOrder                    Sort                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExcludeGuildMember                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadFriend(const int32 Limit, const int32 PageNo, const EFriendListSortOrder Sort, const bool bExcludeGuildMember)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadFriend");

	Params::BackendSubsystem_LoadFriend Parms{};

	Parms.Limit = Limit;
	Parms.PageNo = PageNo;
	Parms.Sort = Sort;
	Parms.bExcludeGuildMember = bExcludeGuildMember;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadFriendImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadFriendImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadFriendImpl");

	Params::BackendSubsystem_LoadFriendImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadFundSettlementText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadFundSettlementText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadFundSettlementText");

	Params::BackendSubsystem_LoadFundSettlementText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadFundSettlementTextImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadFundSettlementTextImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadFundSettlementTextImpl");

	Params::BackendSubsystem_LoadFundSettlementTextImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadGallery
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadGallery()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadGallery");

	Params::BackendSubsystem_LoadGallery Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadGalleryImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadGalleryImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadGalleryImpl");

	Params::BackendSubsystem_LoadGalleryImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadGuildInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           GuildId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadGuildInfo(const class FString& GuildId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadGuildInfo");

	Params::BackendSubsystem_LoadGuildInfo Parms{};

	Parms.GuildId = std::move(GuildId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadGuildInfoImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadGuildInfoImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadGuildInfoImpl");

	Params::BackendSubsystem_LoadGuildInfoImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadGuildMemberList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PageNo                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGuildMemberSort                        ESort                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadGuildMemberList(const int32 PageNo, const EGuildMemberSort ESort)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadGuildMemberList");

	Params::BackendSubsystem_LoadGuildMemberList Parms{};

	Parms.PageNo = PageNo;
	Parms.ESort = ESort;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadGuildMemberListImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadGuildMemberListImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadGuildMemberListImpl");

	Params::BackendSubsystem_LoadGuildMemberListImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadGuildMemberNoFriend
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Limit                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PageNo                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFriendListSortOrder                    Sort                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreFriendStatus                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadGuildMemberNoFriend(const int32 Limit, const int32 PageNo, const EFriendListSortOrder Sort, const bool bIgnoreFriendStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadGuildMemberNoFriend");

	Params::BackendSubsystem_LoadGuildMemberNoFriend Parms{};

	Parms.Limit = Limit;
	Parms.PageNo = PageNo;
	Parms.Sort = Sort;
	Parms.bIgnoreFriendStatus = bIgnoreFriendStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadGuildPendingMemberList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PageNo                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGuildMemberSort                        ESort                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadGuildPendingMemberList(const int32 PageNo, const EGuildMemberSort ESort)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadGuildPendingMemberList");

	Params::BackendSubsystem_LoadGuildPendingMemberList Parms{};

	Parms.PageNo = PageNo;
	Parms.ESort = ESort;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadGuildPendingMemberListImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadGuildPendingMemberListImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadGuildPendingMemberListImpl");

	Params::BackendSubsystem_LoadGuildPendingMemberListImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadGuildRecordList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadGuildRecordList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadGuildRecordList");

	Params::BackendSubsystem_LoadGuildRecordList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadGuildRecordListImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadGuildRecordListImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadGuildRecordListImpl");

	Params::BackendSubsystem_LoadGuildRecordListImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadHeroCrystal
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadHeroCrystal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadHeroCrystal");

	Params::BackendSubsystem_LoadHeroCrystal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadHeroCrystalImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadHeroCrystalImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadHeroCrystalImpl");

	Params::BackendSubsystem_LoadHeroCrystalImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadInventory
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadInventory");

	Params::BackendSubsystem_LoadInventory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadInventoryImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadInventoryImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadInventoryImpl");

	Params::BackendSubsystem_LoadInventoryImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadInvitation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PageNo                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadInvitation(const int32 PageNo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadInvitation");

	Params::BackendSubsystem_LoadInvitation Parms{};

	Parms.PageNo = PageNo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadLatelyPlayedNoFriend
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Limit                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PageNo                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFriendListSortOrder                    Sort                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreFriendStatus                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExcludeGuildMember                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadLatelyPlayedNoFriend(const int32 Limit, const int32 PageNo, const EFriendListSortOrder Sort, const bool bIgnoreFriendStatus, const bool bExcludeGuildMember)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadLatelyPlayedNoFriend");

	Params::BackendSubsystem_LoadLatelyPlayedNoFriend Parms{};

	Parms.Limit = Limit;
	Parms.PageNo = PageNo;
	Parms.Sort = Sort;
	Parms.bIgnoreFriendStatus = bIgnoreFriendStatus;
	Parms.bExcludeGuildMember = bExcludeGuildMember;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadLicense
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadLicense()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadLicense");

	Params::BackendSubsystem_LoadLicense Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadLicenseImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadLicenseImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadLicenseImpl");

	Params::BackendSubsystem_LoadLicenseImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadLoginBonus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadLoginBonus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadLoginBonus");

	Params::BackendSubsystem_LoadLoginBonus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadLoginBonusImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadLoginBonusImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadLoginBonusImpl");

	Params::BackendSubsystem_LoadLoginBonusImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadLottery
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadLottery()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadLottery");

	Params::BackendSubsystem_LoadLottery Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadLotteryHistory
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PageNo                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadLotteryHistory(const int32 PageNo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadLotteryHistory");

	Params::BackendSubsystem_LoadLotteryHistory Parms{};

	Parms.PageNo = PageNo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadLotteryHistoryImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadLotteryHistoryImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadLotteryHistoryImpl");

	Params::BackendSubsystem_LoadLotteryHistoryImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadLotteryImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadLotteryImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadLotteryImpl");

	Params::BackendSubsystem_LoadLotteryImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadLotteryMileageInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   LotteryCode                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadLotteryMileageInfo(const int32 LotteryCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadLotteryMileageInfo");

	Params::BackendSubsystem_LoadLotteryMileageInfo Parms{};

	Parms.LotteryCode = LotteryCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadLotteryMileageInfoImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadLotteryMileageInfoImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadLotteryMileageInfoImpl");

	Params::BackendSubsystem_LoadLotteryMileageInfoImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadLotteryRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   LotteryCode                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadLotteryRate(const int32 LotteryCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadLotteryRate");

	Params::BackendSubsystem_LoadLotteryRate Parms{};

	Parms.LotteryCode = LotteryCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadLotteryRateImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadLotteryRateImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadLotteryRateImpl");

	Params::BackendSubsystem_LoadLotteryRateImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadMainMenu
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadMainMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadMainMenu");

	Params::BackendSubsystem_LoadMainMenu Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadMainMenuImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadMainMenuImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadMainMenuImpl");

	Params::BackendSubsystem_LoadMainMenuImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadMission
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadMission()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadMission");

	Params::BackendSubsystem_LoadMission Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadMissionImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadMissionImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadMissionImpl");

	Params::BackendSubsystem_LoadMissionImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadMyAdList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadMyAdList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadMyAdList");

	Params::BackendSubsystem_LoadMyAdList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadMyAdListImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadMyAdListImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadMyAdListImpl");

	Params::BackendSubsystem_LoadMyAdListImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadNotice
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PageNo                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadNotice(const int32 PageNo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadNotice");

	Params::BackendSubsystem_LoadNotice Parms{};

	Parms.PageNo = PageNo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadNoticeAndInvitation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadNoticeAndInvitation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadNoticeAndInvitation");

	Params::BackendSubsystem_LoadNoticeAndInvitation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadNoticeAndInvitationImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadNoticeAndInvitationImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadNoticeAndInvitationImpl");

	Params::BackendSubsystem_LoadNoticeAndInvitationImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadNoticeImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadNoticeImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadNoticeImpl");

	Params::BackendSubsystem_LoadNoticeImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadPlatformFriendNoFriend
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Limit                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PageNo                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFriendListSortOrder                    Sort                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreFriendStatus                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExcludeGuildMember                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadPlatformFriendNoFriend(const int32 Limit, const int32 PageNo, const EFriendListSortOrder Sort, const bool bIgnoreFriendStatus, const bool bExcludeGuildMember)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadPlatformFriendNoFriend");

	Params::BackendSubsystem_LoadPlatformFriendNoFriend Parms{};

	Parms.Limit = Limit;
	Parms.PageNo = PageNo;
	Parms.Sort = Sort;
	Parms.bIgnoreFriendStatus = bIgnoreFriendStatus;
	Parms.bExcludeGuildMember = bExcludeGuildMember;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadProfile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadProfile(const class FString& PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadProfile");

	Params::BackendSubsystem_LoadProfile Parms{};

	Parms.PlayerId = std::move(PlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadProfile_DS
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CharacterCode                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadProfile_DS(const class FString& PlayerId, const int32 CharacterCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadProfile_DS");

	Params::BackendSubsystem_LoadProfile_DS Parms{};

	Parms.PlayerId = std::move(PlayerId);
	Parms.CharacterCode = CharacterCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadProfileImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadProfileImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadProfileImpl");

	Params::BackendSubsystem_LoadProfileImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadPurchaseCatalog
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadPurchaseCatalog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadPurchaseCatalog");

	Params::BackendSubsystem_LoadPurchaseCatalog Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadPurchaseCatalogCommand
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadPurchaseCatalogCommand(const TArray<class FString>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadPurchaseCatalogCommand");

	Params::BackendSubsystem_LoadPurchaseCatalogCommand Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadPurchaseCatalogImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadPurchaseCatalogImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadPurchaseCatalogImpl");

	Params::BackendSubsystem_LoadPurchaseCatalogImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadPurchasedItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadPurchasedItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadPurchasedItem");

	Params::BackendSubsystem_LoadPurchasedItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadPurchasedItemImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadPurchasedItemImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadPurchasedItemImpl");

	Params::BackendSubsystem_LoadPurchasedItemImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadPurchaseStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadPurchaseStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadPurchaseStatus");

	Params::BackendSubsystem_LoadPurchaseStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadRanking
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PageNo                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERankingType                            RankingType                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EventCode                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadRanking(const int32 PageNo, const ERankingType RankingType, const int32 EventCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadRanking");

	Params::BackendSubsystem_LoadRanking Parms{};

	Parms.PageNo = PageNo;
	Parms.RankingType = RankingType;
	Parms.EventCode = EventCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadRankingByCode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PageNo                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RankingCode                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadRankingByCode(const int32 PageNo, const int32 RankingCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadRankingByCode");

	Params::BackendSubsystem_LoadRankingByCode Parms{};

	Parms.PageNo = PageNo;
	Parms.RankingCode = RankingCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadRankingImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadRankingImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadRankingImpl");

	Params::BackendSubsystem_LoadRankingImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadResult
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadResult()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadResult");

	Params::BackendSubsystem_LoadResult Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadResultImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadResultImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadResultImpl");

	Params::BackendSubsystem_LoadResultImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadSeasonPass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadSeasonPass()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadSeasonPass");

	Params::BackendSubsystem_LoadSeasonPass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadSeasonPassImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadSeasonPassImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadSeasonPassImpl");

	Params::BackendSubsystem_LoadSeasonPassImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadSeasonPassStock
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadSeasonPassStock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadSeasonPassStock");

	Params::BackendSubsystem_LoadSeasonPassStock Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadSeasonPassStockImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadSeasonPassStockImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadSeasonPassStockImpl");

	Params::BackendSubsystem_LoadSeasonPassStockImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadSetting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadSetting");

	Params::BackendSubsystem_LoadSetting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadSettingImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadSettingImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadSettingImpl");

	Params::BackendSubsystem_LoadSettingImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadShop
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadShop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadShop");

	Params::BackendSubsystem_LoadShop Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadShopImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadShopImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadShopImpl");

	Params::BackendSubsystem_LoadShopImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadSpacialLicense
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadSpacialLicense()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadSpacialLicense");

	Params::BackendSubsystem_LoadSpacialLicense Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadSpecialLicense
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadSpecialLicense()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadSpecialLicense");

	Params::BackendSubsystem_LoadSpecialLicense Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadSpecialLicenseImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadSpecialLicenseImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadSpecialLicenseImpl");

	Params::BackendSubsystem_LoadSpecialLicenseImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadSquad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           SquadPassword                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadSquad(const class FString& SquadPassword)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadSquad");

	Params::BackendSubsystem_LoadSquad Parms{};

	Parms.SquadPassword = std::move(SquadPassword);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadSquadImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadSquadImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadSquadImpl");

	Params::BackendSubsystem_LoadSquadImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadSquadReceivedInvitation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           InvitationId                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadSquadReceivedInvitation(const class FString& InvitationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadSquadReceivedInvitation");

	Params::BackendSubsystem_LoadSquadReceivedInvitation Parms{};

	Parms.InvitationId = std::move(InvitationId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadSquadReceivedInvitationImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadSquadReceivedInvitationImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadSquadReceivedInvitationImpl");

	Params::BackendSubsystem_LoadSquadReceivedInvitationImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadSquadSentInvitation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadSquadSentInvitation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadSquadSentInvitation");

	Params::BackendSubsystem_LoadSquadSentInvitation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadSquadSentInvitationImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadSquadSentInvitationImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadSquadSentInvitationImpl");

	Params::BackendSubsystem_LoadSquadSentInvitationImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadTokushoText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadTokushoText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadTokushoText");

	Params::BackendSubsystem_LoadTokushoText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadTokushoTextImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadTokushoTextImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadTokushoTextImpl");

	Params::BackendSubsystem_LoadTokushoTextImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadTrackingNumber
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::LoadTrackingNumber()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadTrackingNumber");

	Params::BackendSubsystem_LoadTrackingNumber Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadTrackingNumberImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::LoadTrackingNumberImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadTrackingNumberImpl");

	Params::BackendSubsystem_LoadTrackingNumberImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.Login
// (Final, Native, Public, BlueprintCallable)

void UBackendSubsystem::Login()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "Login");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.MergeSquad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::MergeSquad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "MergeSquad");

	Params::BackendSubsystem_MergeSquad Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.NoticeCountDecrement
// (Final, Native, Public)
// Parameters:
// int32                                   DecrementValue                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::NoticeCountDecrement(int32 DecrementValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "NoticeCountDecrement");

	Params::BackendSubsystem_NoticeCountDecrement Parms{};

	Parms.DecrementValue = DecrementValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnAddItemDispatcher__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// struct FDbItemCategoryParam             Item                                                   (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Quantity                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnAddItemDispatcher__DelegateSignature(const struct FDbItemCategoryParam& Item, const int32 Quantity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnAddItemDispatcher__DelegateSignature");

	Params::BackendSubsystem_OnAddItemDispatcher__DelegateSignature Parms{};

	Parms.Item = std::move(Item);
	Parms.Quantity = Quantity;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnBuyItemDispatcher__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UBackendSubsystem::OnBuyItemDispatcher__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnBuyItemDispatcher__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BackendSubsystem.BackendSubsystem.OnChangeAudioDeviceList
// (Final, Native, Protected)

void UBackendSubsystem::OnChangeAudioDeviceList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnChangeAudioDeviceList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnChangeIdleStatusEventDispatcher__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Idle                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StateSetting                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnChangeIdleStatusEventDispatcher__DelegateSignature(bool Idle, int32 StateSetting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnChangeIdleStatusEventDispatcher__DelegateSignature");

	Params::BackendSubsystem_OnChangeIdleStatusEventDispatcher__DelegateSignature Parms{};

	Parms.Idle = Idle;
	Parms.StateSetting = StateSetting;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnChangeUnreadNoticeContDispatcher__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// int32                                   Count                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnChangeUnreadNoticeContDispatcher__DelegateSignature(const int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnChangeUnreadNoticeContDispatcher__DelegateSignature");

	Params::BackendSubsystem_OnChangeUnreadNoticeContDispatcher__DelegateSignature Parms{};

	Parms.Count = Count;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BackendSubsystem.BackendSubsystem.OnCompleteConsumeRentalPoint_DS
// (Final, Native, Protected)
// Parameters:
// int32                                   RequestId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnCompleteConsumeRentalPoint_DS(int32 RequestId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnCompleteConsumeRentalPoint_DS");

	Params::BackendSubsystem_OnCompleteConsumeRentalPoint_DS Parms{};

	Parms.RequestId = RequestId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.OnCompleteLoadProfile_DS
// (Final, Native, Protected)
// Parameters:
// int32                                   RequestId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnCompleteLoadProfile_DS(int32 RequestId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnCompleteLoadProfile_DS");

	Params::BackendSubsystem_OnCompleteLoadProfile_DS Parms{};

	Parms.RequestId = RequestId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnCompleteLoadTrackingNumberEventDispatcher__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class FString                           TrackingNumber                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnCompleteLoadTrackingNumberEventDispatcher__DelegateSignature(const class FString& TrackingNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnCompleteLoadTrackingNumberEventDispatcher__DelegateSignature");

	Params::BackendSubsystem_OnCompleteLoadTrackingNumberEventDispatcher__DelegateSignature Parms{};

	Parms.TrackingNumber = std::move(TrackingNumber);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BackendSubsystem.BackendSubsystem.OnCompleteSendCustomMatchResult_DS
// (Final, Native, Protected)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnCompleteSendCustomMatchResult_DS(const int32 RequestId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnCompleteSendCustomMatchResult_DS");

	Params::BackendSubsystem_OnCompleteSendCustomMatchResult_DS Parms{};

	Parms.RequestId = RequestId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.OnCompleteSendFinalResult_DS
// (Final, Native, Protected)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnCompleteSendFinalResult_DS(const int32 RequestId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnCompleteSendFinalResult_DS");

	Params::BackendSubsystem_OnCompleteSendFinalResult_DS Parms{};

	Parms.RequestId = RequestId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.OnCompleteSendKpiBattleLog_DS
// (Final, Native, Protected)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnCompleteSendKpiBattleLog_DS(const int32 RequestId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnCompleteSendKpiBattleLog_DS");

	Params::BackendSubsystem_OnCompleteSendKpiBattleLog_DS Parms{};

	Parms.RequestId = RequestId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.OnCompleteSendPenaltyPoint_DS
// (Final, Native, Protected)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnCompleteSendPenaltyPoint_DS(const int32 RequestId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnCompleteSendPenaltyPoint_DS");

	Params::BackendSubsystem_OnCompleteSendPenaltyPoint_DS Parms{};

	Parms.RequestId = RequestId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.OnCompleteSendPhaseResult_DS
// (Final, Native, Protected)
// Parameters:
// int32                                   RequestId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnCompleteSendPhaseResult_DS(int32 RequestId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnCompleteSendPhaseResult_DS");

	Params::BackendSubsystem_OnCompleteSendPhaseResult_DS Parms{};

	Parms.RequestId = RequestId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.OnCompleteStartBattle_DS
// (Final, Native, Protected)
// Parameters:
// int32                                   RequestId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnCompleteStartBattle_DS(int32 RequestId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnCompleteStartBattle_DS");

	Params::BackendSubsystem_OnCompleteStartBattle_DS Parms{};

	Parms.RequestId = RequestId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.OnCompleteUpdateMissionProgress_DS
// (Final, Native, Protected)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnCompleteUpdateMissionProgress_DS(const int32 RequestId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnCompleteUpdateMissionProgress_DS");

	Params::BackendSubsystem_OnCompleteUpdateMissionProgress_DS Parms{};

	Parms.RequestId = RequestId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.OnCompleteUpdateMissionsProgress_DS
// (Final, Native, Protected)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnCompleteUpdateMissionsProgress_DS(const int32 RequestId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnCompleteUpdateMissionsProgress_DS");

	Params::BackendSubsystem_OnCompleteUpdateMissionsProgress_DS Parms{};

	Parms.RequestId = RequestId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnCurrencyUpdatedEventDispatcher__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UBackendSubsystem::OnCurrencyUpdatedEventDispatcher__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnCurrencyUpdatedEventDispatcher__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnCustomMatchCreateComplete__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UBackendSubsystem::OnCustomMatchCreateComplete__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnCustomMatchCreateComplete__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnCustomMatchGetCustomLobbyServerComplete__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UBackendSubsystem::OnCustomMatchGetCustomLobbyServerComplete__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnCustomMatchGetCustomLobbyServerComplete__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnCustomMatchJoinComplete__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UBackendSubsystem::OnCustomMatchJoinComplete__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnCustomMatchJoinComplete__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnCustomMatchKickComplete__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UBackendSubsystem::OnCustomMatchKickComplete__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnCustomMatchKickComplete__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnCustomMatchLeaveComplete__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UBackendSubsystem::OnCustomMatchLeaveComplete__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnCustomMatchLeaveComplete__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnCustomMatchLockedBattleReadyEventDispatcher__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UBackendSubsystem::OnCustomMatchLockedBattleReadyEventDispatcher__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnCustomMatchLockedBattleReadyEventDispatcher__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnCustomMatchNotifyDisbandedComplete__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UBackendSubsystem::OnCustomMatchNotifyDisbandedComplete__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnCustomMatchNotifyDisbandedComplete__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnCustomMatchNotifyGetCustomLobbyServerComplete__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UBackendSubsystem::OnCustomMatchNotifyGetCustomLobbyServerComplete__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnCustomMatchNotifyGetCustomLobbyServerComplete__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnCustomMatchNotifyKickComplete__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UBackendSubsystem::OnCustomMatchNotifyKickComplete__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnCustomMatchNotifyKickComplete__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnCustomMatchNotifySettingsComplete__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UBackendSubsystem::OnCustomMatchNotifySettingsComplete__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnCustomMatchNotifySettingsComplete__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnCustomMatchSetCustomRoomMemberComplete__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UBackendSubsystem::OnCustomMatchSetCustomRoomMemberComplete__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnCustomMatchSetCustomRoomMemberComplete__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnCustomMatchTeamUpUpdatedEventDispatcher__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UBackendSubsystem::OnCustomMatchTeamUpUpdatedEventDispatcher__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnCustomMatchTeamUpUpdatedEventDispatcher__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnCustomMatchUpdateGetDataComplete__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UBackendSubsystem::OnCustomMatchUpdateGetDataComplete__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnCustomMatchUpdateGetDataComplete__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnCustomMatchUpdateSettingsComplete__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UBackendSubsystem::OnCustomMatchUpdateSettingsComplete__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnCustomMatchUpdateSettingsComplete__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BackendSubsystem.BackendSubsystem.OnDownloadComplete
// (Final, Native, Protected)

void UBackendSubsystem::OnDownloadComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnDownloadComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnLoadCompleteEventDispatcher__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// int32                                   RequestId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnLoadCompleteEventDispatcher__DelegateSignature(int32 RequestId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnLoadCompleteEventDispatcher__DelegateSignature");

	Params::BackendSubsystem_OnLoadCompleteEventDispatcher__DelegateSignature Parms{};

	Parms.RequestId = RequestId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BackendSubsystem.BackendSubsystem.OnLoadedServerList
// (Final, Native, Protected)

void UBackendSubsystem::OnLoadedServerList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnLoadedServerList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.OnLoginComplete
// (Final, Native, Protected)

void UBackendSubsystem::OnLoginComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnLoginComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.OnMatchingServerInitialized
// (Final, Native, Protected)

void UBackendSubsystem::OnMatchingServerInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnMatchingServerInitialized");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.OnPlatformLogin
// (Final, Native, Protected)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnPlatformLogin(bool bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnPlatformLogin");

	Params::BackendSubsystem_OnPlatformLogin Parms{};

	Parms.bWasSuccessful = bWasSuccessful;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.OnPlayerRequestError
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Message                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnPlayerRequestError(const int32 RequestId, const class FName& Key, const class FName& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnPlayerRequestError");

	Params::BackendSubsystem_OnPlayerRequestError Parms{};

	Parms.RequestId = RequestId;
	Parms.Key = Key;
	Parms.Message = Message;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnPlayerRequestErrorEventDispatcher__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// int32                                   RequestId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Key                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Message                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnPlayerRequestErrorEventDispatcher__DelegateSignature(int32 RequestId, const class FName Key, const class FName Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnPlayerRequestErrorEventDispatcher__DelegateSignature");

	Params::BackendSubsystem_OnPlayerRequestErrorEventDispatcher__DelegateSignature Parms{};

	Parms.RequestId = RequestId;
	Parms.Key = Key;
	Parms.Message = Message;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BackendSubsystem.BackendSubsystem.OnProgressLoadProfile_DS1
// (Final, Native, Protected)
// Parameters:
// int32                                   RequestId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnProgressLoadProfile_DS1(int32 RequestId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnProgressLoadProfile_DS1");

	Params::BackendSubsystem_OnProgressLoadProfile_DS1 Parms{};

	Parms.RequestId = RequestId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.OnProgressLoadProfile_DS2
// (Final, Native, Protected)
// Parameters:
// int32                                   RequestId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnProgressLoadProfile_DS2(int32 RequestId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnProgressLoadProfile_DS2");

	Params::BackendSubsystem_OnProgressLoadProfile_DS2 Parms{};

	Parms.RequestId = RequestId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnReadyForPlayEventDispatcher__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UBackendSubsystem::OnReadyForPlayEventDispatcher__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnReadyForPlayEventDispatcher__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnRentalPointUpdatedEventDispatcher__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnRentalPointUpdatedEventDispatcher__DelegateSignature(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnRentalPointUpdatedEventDispatcher__DelegateSignature");

	Params::BackendSubsystem_OnRentalPointUpdatedEventDispatcher__DelegateSignature Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnSendLikeDispatcher__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// int32                                   Count                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnSendLikeDispatcher__DelegateSignature(const int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnSendLikeDispatcher__DelegateSignature");

	Params::BackendSubsystem_OnSendLikeDispatcher__DelegateSignature Parms{};

	Parms.Count = Count;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BackendSubsystem.BackendSubsystem.OnSystemError
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Message                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnSystemError(const int32 RequestId, const class FName& Key, const class FName& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnSystemError");

	Params::BackendSubsystem_OnSystemError Parms{};

	Parms.RequestId = RequestId;
	Parms.Key = Key;
	Parms.Message = Message;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnSystemErrorEventDispatcher__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// int32                                   RequestId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Key                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Message                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnSystemErrorEventDispatcher__DelegateSignature(int32 RequestId, const class FName Key, const class FName Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnSystemErrorEventDispatcher__DelegateSignature");

	Params::BackendSubsystem_OnSystemErrorEventDispatcher__DelegateSignature Parms{};

	Parms.RequestId = RequestId;
	Parms.Key = Key;
	Parms.Message = Message;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnTeamUpAppealReceivedEventDispatcher__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DisplayName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Appeal                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBlock                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnTeamUpAppealReceivedEventDispatcher__DelegateSignature(const class FString& PlayerId, const class FString& DisplayName, const int32& Appeal, const bool bBlock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnTeamUpAppealReceivedEventDispatcher__DelegateSignature");

	Params::BackendSubsystem_OnTeamUpAppealReceivedEventDispatcher__DelegateSignature Parms{};

	Parms.PlayerId = std::move(PlayerId);
	Parms.DisplayName = std::move(DisplayName);
	Parms.Appeal = Appeal;
	Parms.bBlock = bBlock;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnTeamUpAutoStartBattleCanceledEventDispatcher__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UBackendSubsystem::OnTeamUpAutoStartBattleCanceledEventDispatcher__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnTeamUpAutoStartBattleCanceledEventDispatcher__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnTeamUpAutoStartBattleCompleteEventDispatcher__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// EAutoStartBattleState                   State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnTeamUpAutoStartBattleCompleteEventDispatcher__DelegateSignature(EAutoStartBattleState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnTeamUpAutoStartBattleCompleteEventDispatcher__DelegateSignature");

	Params::BackendSubsystem_OnTeamUpAutoStartBattleCompleteEventDispatcher__DelegateSignature Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnTeamUpAutoStartBattleErrorEventDispatcher__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UBackendSubsystem::OnTeamUpAutoStartBattleErrorEventDispatcher__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnTeamUpAutoStartBattleErrorEventDispatcher__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnTeamUpAutoStartBattlePasswordCreatedEventDispatcher__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UBackendSubsystem::OnTeamUpAutoStartBattlePasswordCreatedEventDispatcher__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnTeamUpAutoStartBattlePasswordCreatedEventDispatcher__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnTeamUpChatReceivedEventDispatcher__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DisplayName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBlock                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnTeamUpChatReceivedEventDispatcher__DelegateSignature(const class FString& PlayerId, const class FString& DisplayName, const class FString& Message, const bool bBlock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnTeamUpChatReceivedEventDispatcher__DelegateSignature");

	Params::BackendSubsystem_OnTeamUpChatReceivedEventDispatcher__DelegateSignature Parms{};

	Parms.PlayerId = std::move(PlayerId);
	Parms.DisplayName = std::move(DisplayName);
	Parms.Message = std::move(Message);
	Parms.bBlock = bBlock;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnTeamUpCreatedEventDispatcher__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UBackendSubsystem::OnTeamUpCreatedEventDispatcher__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnTeamUpCreatedEventDispatcher__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnTeamUpInvitingListChangedDispatcher__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UBackendSubsystem::OnTeamUpInvitingListChangedDispatcher__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnTeamUpInvitingListChangedDispatcher__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnTeamUpJoinEventDispatcher__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UBackendSubsystem::OnTeamUpJoinEventDispatcher__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnTeamUpJoinEventDispatcher__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnTeamUpLeaveEventDispatcher__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UBackendSubsystem::OnTeamUpLeaveEventDispatcher__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnTeamUpLeaveEventDispatcher__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnTeamUpMemberKickedEventDispatcher__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UBackendSubsystem::OnTeamUpMemberKickedEventDispatcher__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnTeamUpMemberKickedEventDispatcher__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnTeamUpUpdatedEventDispatcher__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UBackendSubsystem::OnTeamUpUpdatedEventDispatcher__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnTeamUpUpdatedEventDispatcher__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BackendSubsystem.BackendSubsystem.OnUnLockedBattleReadyEvent
// (Final, Native, Protected)

void UBackendSubsystem::OnUnLockedBattleReadyEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnUnLockedBattleReadyEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnUpdateCompleteEventDispatcher__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// int32                                   RequestId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnUpdateCompleteEventDispatcher__DelegateSignature(int32 RequestId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnUpdateCompleteEventDispatcher__DelegateSignature");

	Params::BackendSubsystem_OnUpdateCompleteEventDispatcher__DelegateSignature Parms{};

	Parms.RequestId = RequestId;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnUpdateVariationCompleteEventDispatcher__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// int32                                   CharacterCode                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Variation                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnUpdateVariationCompleteEventDispatcher__DelegateSignature(int32 CharacterCode, int32 Variation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnUpdateVariationCompleteEventDispatcher__DelegateSignature");

	Params::BackendSubsystem_OnUpdateVariationCompleteEventDispatcher__DelegateSignature Parms{};

	Parms.CharacterCode = CharacterCode;
	Parms.Variation = Variation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BackendSubsystem.BackendSubsystem.OnVoiceChatChangePlayerState
// (Final, Native, Protected)
// Parameters:
// class FString                           PlatformPlayerId                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVoiceChatPlayerStatus                  Status                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnVoiceChatChangePlayerState(const class FString& PlatformPlayerId, const EVoiceChatPlayerStatus Status, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnVoiceChatChangePlayerState");

	Params::BackendSubsystem_OnVoiceChatChangePlayerState Parms{};

	Parms.PlatformPlayerId = std::move(PlatformPlayerId);
	Parms.Status = Status;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnVoiceChatChangePlayerStateDispatcher__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class FString                           PlatformPlayerId                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVoiceChatMemberStatus                  Status                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnVoiceChatChangePlayerStateDispatcher__DelegateSignature(const class FString& PlatformPlayerId, EVoiceChatMemberStatus Status, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnVoiceChatChangePlayerStateDispatcher__DelegateSignature");

	Params::BackendSubsystem_OnVoiceChatChangePlayerStateDispatcher__DelegateSignature Parms{};

	Parms.PlatformPlayerId = std::move(PlatformPlayerId);
	Parms.Status = Status;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BackendSubsystem.BackendSubsystem.OnVoiceChatChangeState
// (Final, Native, Protected)
// Parameters:
// EVoiceChatStatus                        Status                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnVoiceChatChangeState(const EVoiceChatStatus Status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnVoiceChatChangeState");

	Params::BackendSubsystem_OnVoiceChatChangeState Parms{};

	Parms.Status = Status;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnVoiceChatChangeSystemStateDispatcher__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// EVoiceChatSystemStatus                  Status                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnVoiceChatChangeSystemStateDispatcher__DelegateSignature(EVoiceChatSystemStatus Status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnVoiceChatChangeSystemStateDispatcher__DelegateSignature");

	Params::BackendSubsystem_OnVoiceChatChangeSystemStateDispatcher__DelegateSignature Parms{};

	Parms.Status = Status;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BackendSubsystem.BackendSubsystem.OnVoiceChatError
// (Final, Native, Protected)
// Parameters:
// EVoiceChatError                         Err                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnVoiceChatError(EVoiceChatError Err, const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnVoiceChatError");

	Params::BackendSubsystem_OnVoiceChatError Parms{};

	Parms.Err = Err;
	Parms.Msg = std::move(Msg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnVoiceChatTextMessageReceivedDispatcher__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class FString                           PlatformPlayerId                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnVoiceChatTextMessageReceivedDispatcher__DelegateSignature(const class FString& PlatformPlayerId, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnVoiceChatTextMessageReceivedDispatcher__DelegateSignature");

	Params::BackendSubsystem_OnVoiceChatTextMessageReceivedDispatcher__DelegateSignature Parms{};

	Parms.PlatformPlayerId = std::move(PlatformPlayerId);
	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BackendSubsystem.BackendSubsystem.OnVoiceTextMessageReceived
// (Final, Native, Protected)
// Parameters:
// class FString                           PlatformPlayerId                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnVoiceTextMessageReceived(const class FString& PlatformPlayerId, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnVoiceTextMessageReceived");

	Params::BackendSubsystem_OnVoiceTextMessageReceived Parms{};

	Parms.PlatformPlayerId = std::move(PlatformPlayerId);
	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction BackendSubsystem.BackendSubsystem.OnWaitForLoginEventDispatcher__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UBackendSubsystem::OnWaitForLoginEventDispatcher__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnWaitForLoginEventDispatcher__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BackendSubsystem.BackendSubsystem.OpenAllNotice
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::OpenAllNotice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OpenAllNotice");

	Params::BackendSubsystem_OpenAllNotice Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.OpenGalleryPanels
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   GalleryCode                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           PanelNumbers                                           (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::OpenGalleryPanels(const int32 GalleryCode, const TArray<int32>& PanelNumbers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OpenGalleryPanels");

	Params::BackendSubsystem_OpenGalleryPanels Parms{};

	Parms.GalleryCode = GalleryCode;
	Parms.PanelNumbers = std::move(PanelNumbers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.OpenGalleryPanelsImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::OpenGalleryPanelsImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OpenGalleryPanelsImpl");

	Params::BackendSubsystem_OpenGalleryPanelsImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.OpenNotice
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           NoticeId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::OpenNotice(const class FString& NoticeId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OpenNotice");

	Params::BackendSubsystem_OpenNotice Parms{};

	Parms.NoticeId = std::move(NoticeId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.OpenNoticeImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::OpenNoticeImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OpenNoticeImpl");

	Params::BackendSubsystem_OpenNoticeImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.QuitBattle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::QuitBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "QuitBattle");

	Params::BackendSubsystem_QuitBattle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.ReceiveCampaignLoginBonus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::ReceiveCampaignLoginBonus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ReceiveCampaignLoginBonus");

	Params::BackendSubsystem_ReceiveCampaignLoginBonus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.ReceiveDailyLoginBonus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::ReceiveDailyLoginBonus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ReceiveDailyLoginBonus");

	Params::BackendSubsystem_ReceiveDailyLoginBonus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.ReceiveEventLoginBonus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::ReceiveEventLoginBonus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ReceiveEventLoginBonus");

	Params::BackendSubsystem_ReceiveEventLoginBonus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.ReceiveLoginBonus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<int32>                           LoginBonusCodes                                        (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::ReceiveLoginBonus(const TArray<int32>& LoginBonusCodes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ReceiveLoginBonus");

	Params::BackendSubsystem_ReceiveLoginBonus Parms{};

	Parms.LoginBonusCodes = std::move(LoginBonusCodes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.ReceiveLoginBonusCommand
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::ReceiveLoginBonusCommand(const TArray<class FString>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ReceiveLoginBonusCommand");

	Params::BackendSubsystem_ReceiveLoginBonusCommand Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.ReceiveLoginBonusImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::ReceiveLoginBonusImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ReceiveLoginBonusImpl");

	Params::BackendSubsystem_ReceiveLoginBonusImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.ReceiveMissionAchievement
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MissionCode                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::ReceiveMissionAchievement(const int32 MissionCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ReceiveMissionAchievement");

	Params::BackendSubsystem_ReceiveMissionAchievement Parms{};

	Parms.MissionCode = MissionCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.ReceiveMissionAchievementImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::ReceiveMissionAchievementImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ReceiveMissionAchievementImpl");

	Params::BackendSubsystem_ReceiveMissionAchievementImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.ReceiveMissionAchievements
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<int32>                           MissionCodes                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::ReceiveMissionAchievements(const TArray<int32>& MissionCodes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ReceiveMissionAchievements");

	Params::BackendSubsystem_ReceiveMissionAchievements Parms{};

	Parms.MissionCodes = std::move(MissionCodes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.RegisterMissionProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MissionCode                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::RegisterMissionProgress(const int32 MissionCode, const int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "RegisterMissionProgress");

	Params::BackendSubsystem_RegisterMissionProgress Parms{};

	Parms.MissionCode = MissionCode;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.RegisterMissionProgress_DS
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MissionCode                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::RegisterMissionProgress_DS(const int32 MissionCode, const int32 Value, const class FString& PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "RegisterMissionProgress_DS");

	Params::BackendSubsystem_RegisterMissionProgress_DS Parms{};

	Parms.MissionCode = MissionCode;
	Parms.Value = Value;
	Parms.PlayerId = std::move(PlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.ReInitialize
// (Final, Native, Public, BlueprintCallable)

void UBackendSubsystem::ReInitialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ReInitialize");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.ReleaseCharacterCustomizeAll
// (Final, Native, Public, BlueprintCallable)

void UBackendSubsystem::ReleaseCharacterCustomizeAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ReleaseCharacterCustomizeAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.RemovePlayer_DS
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::RemovePlayer_DS(const class FString& PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "RemovePlayer_DS");

	Params::BackendSubsystem_RemovePlayer_DS Parms{};

	Parms.PlayerId = std::move(PlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.ResetBnidLink
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::ResetBnidLink()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ResetBnidLink");

	Params::BackendSubsystem_ResetBnidLink Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.ResetBnidLinkImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::ResetBnidLinkImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ResetBnidLinkImpl");

	Params::BackendSubsystem_ResetBnidLinkImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.ResetDedicatedServerCommand
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::ResetDedicatedServerCommand(const TArray<class FString>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ResetDedicatedServerCommand");

	Params::BackendSubsystem_ResetDedicatedServerCommand Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.ResetMissionProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MissionCode                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::ResetMissionProgress(const int32 MissionCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ResetMissionProgress");

	Params::BackendSubsystem_ResetMissionProgress Parms{};

	Parms.MissionCode = MissionCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.ResetMissionProgress_DS
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MissionCode                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::ResetMissionProgress_DS(const int32 MissionCode, const class FString& PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ResetMissionProgress_DS");

	Params::BackendSubsystem_ResetMissionProgress_DS Parms{};

	Parms.MissionCode = MissionCode;
	Parms.PlayerId = std::move(PlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.ResetMyAd
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ID                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::ResetMyAd(const class FString& ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ResetMyAd");

	Params::BackendSubsystem_ResetMyAd Parms{};

	Parms.ID = std::move(ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.ResetMyAdImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::ResetMyAdImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ResetMyAdImpl");

	Params::BackendSubsystem_ResetMyAdImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.ResetProxyServerCommand
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::ResetProxyServerCommand(const TArray<class FString>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ResetProxyServerCommand");

	Params::BackendSubsystem_ResetProxyServerCommand Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.ResignGuildLeaderImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::ResignGuildLeaderImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "ResignGuildLeaderImpl");

	Params::BackendSubsystem_ResignGuildLeaderImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.RunLottery
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   LotteryCode                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PaymentId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::RunLottery(const int32 LotteryCode, const class FString& PaymentId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "RunLottery");

	Params::BackendSubsystem_RunLottery Parms{};

	Parms.LotteryCode = LotteryCode;
	Parms.PaymentId = std::move(PaymentId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.RunLotteryImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::RunLotteryImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "RunLotteryImpl");

	Params::BackendSubsystem_RunLotteryImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SaveCustomizesPreset
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   CharacterCode                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PresetNo                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CostumeCode                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           VoiceCodes                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<int32>                           AppealCodes                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<int32>                           EmblemCodes                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   AuraLevel                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::SaveCustomizesPreset(const int32 CharacterCode, const int32 PresetNo, const int32 CostumeCode, const TArray<int32>& VoiceCodes, const TArray<int32>& AppealCodes, const TArray<int32>& EmblemCodes, const int32 AuraLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SaveCustomizesPreset");

	Params::BackendSubsystem_SaveCustomizesPreset Parms{};

	Parms.CharacterCode = CharacterCode;
	Parms.PresetNo = PresetNo;
	Parms.CostumeCode = CostumeCode;
	Parms.VoiceCodes = std::move(VoiceCodes);
	Parms.AppealCodes = std::move(AppealCodes);
	Parms.EmblemCodes = std::move(EmblemCodes);
	Parms.AuraLevel = AuraLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.SaveCustomizesPresetImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::SaveCustomizesPresetImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SaveCustomizesPresetImpl");

	Params::BackendSubsystem_SaveCustomizesPresetImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SaveJsonDatabaseParamsCommand
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::SaveJsonDatabaseParamsCommand(const TArray<class FString>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SaveJsonDatabaseParamsCommand");

	Params::BackendSubsystem_SaveJsonDatabaseParamsCommand Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SaveSetting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bBattleRecord                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AuraDisplayTarget                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AuraDisplayArea                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::SaveSetting(const bool bBattleRecord, int32 AuraDisplayTarget, int32 AuraDisplayArea)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SaveSetting");

	Params::BackendSubsystem_SaveSetting Parms{};

	Parms.bBattleRecord = bBattleRecord;
	Parms.AuraDisplayTarget = AuraDisplayTarget;
	Parms.AuraDisplayArea = AuraDisplayArea;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.SaveSettingImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::SaveSettingImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SaveSettingImpl");

	Params::BackendSubsystem_SaveSettingImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SearchGuilds
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   PageNo                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDbGuildSearchCondition          Condition                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::SearchGuilds(const int32 PageNo, const struct FDbGuildSearchCondition& Condition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SearchGuilds");

	Params::BackendSubsystem_SearchGuilds Parms{};

	Parms.PageNo = PageNo;
	Parms.Condition = std::move(Condition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.SearchGuildsImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::SearchGuildsImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SearchGuildsImpl");

	Params::BackendSubsystem_SearchGuildsImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SearchPlayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Limit                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PageNo                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SearchWord                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFriendListSortOrder                    Sort                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::SearchPlayer(const int32 Limit, const int32 PageNo, const class FString& SearchWord, const EFriendListSortOrder Sort)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SearchPlayer");

	Params::BackendSubsystem_SearchPlayer Parms{};

	Parms.Limit = Limit;
	Parms.PageNo = PageNo;
	Parms.SearchWord = std::move(SearchWord);
	Parms.Sort = Sort;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.SearchSquad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::SearchSquad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SearchSquad");

	Params::BackendSubsystem_SearchSquad Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.SendBattlePhaseLike
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           GameId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PhaseNo                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<EResultType, int32>                LikeList                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EScreenName                             EScreen                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::SendBattlePhaseLike(const class FString& GameId, const int32 PhaseNo, const TMap<EResultType, int32>& LikeList, EScreenName EScreen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendBattlePhaseLike");

	Params::BackendSubsystem_SendBattlePhaseLike Parms{};

	Parms.GameId = std::move(GameId);
	Parms.PhaseNo = PhaseNo;
	Parms.LikeList = std::move(LikeList);
	Parms.EScreen = EScreen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.SendBattlePhaseLikeImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::SendBattlePhaseLikeImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendBattlePhaseLikeImpl");

	Params::BackendSubsystem_SendBattlePhaseLikeImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SendBillboardChartLike
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELikeType                               EType                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EScreenName                             EScreen                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::SendBillboardChartLike(const class FString& PlayerId, const int32 Count, const ELikeType EType, const EScreenName EScreen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendBillboardChartLike");

	Params::BackendSubsystem_SendBillboardChartLike Parms{};

	Parms.PlayerId = std::move(PlayerId);
	Parms.Count = Count;
	Parms.EType = EType;
	Parms.EScreen = EScreen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.SendBillboardChartLikeImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::SendBillboardChartLikeImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendBillboardChartLikeImpl");

	Params::BackendSubsystem_SendBillboardChartLikeImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SendChat
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Chat                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::SendChat(const class FString& Chat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendChat");

	Params::BackendSubsystem_SendChat Parms{};

	Parms.Chat = std::move(Chat);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.SendChatImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::SendChatImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendChatImpl");

	Params::BackendSubsystem_SendChatImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SendCustomRoomAppeal
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   AppealCode                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::SendCustomRoomAppeal(const int32 AppealCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendCustomRoomAppeal");

	Params::BackendSubsystem_SendCustomRoomAppeal Parms{};

	Parms.AppealCode = AppealCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.SendCustomRoomAppealImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::SendCustomRoomAppealImpl(int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendCustomRoomAppealImpl");

	Params::BackendSubsystem_SendCustomRoomAppealImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SendFinalResult_DS
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FResultData>              ResultList                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::SendFinalResult_DS(const TArray<struct FResultData>& ResultList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendFinalResult_DS");

	Params::BackendSubsystem_SendFinalResult_DS Parms{};

	Parms.ResultList = std::move(ResultList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.SendFriendshipProposal
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::SendFriendshipProposal(const class FString& PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendFriendshipProposal");

	Params::BackendSubsystem_SendFriendshipProposal Parms{};

	Parms.PlayerId = std::move(PlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.SendFriendshipProposalImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::SendFriendshipProposalImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendFriendshipProposalImpl");

	Params::BackendSubsystem_SendFriendshipProposalImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SendGetTrophyKpi
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TrophyCode                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::SendGetTrophyKpi(int32 TrophyCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendGetTrophyKpi");

	Params::BackendSubsystem_SendGetTrophyKpi Parms{};

	Parms.TrophyCode = TrophyCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SendGuildChatLogKpi
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::SendGuildChatLogKpi(const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendGuildChatLogKpi");

	Params::BackendSubsystem_SendGuildChatLogKpi Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SendGuildRecordLike
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           RecordId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::SendGuildRecordLike(const class FString& RecordId, const int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendGuildRecordLike");

	Params::BackendSubsystem_SendGuildRecordLike Parms{};

	Parms.RecordId = std::move(RecordId);
	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.SendGuildRecordLikeImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::SendGuildRecordLikeImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendGuildRecordLikeImpl");

	Params::BackendSubsystem_SendGuildRecordLikeImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SendLevelTransactionKpi
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EScreenName                             EScreen                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::SendLevelTransactionKpi(const EScreenName EScreen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendLevelTransactionKpi");

	Params::BackendSubsystem_SendLevelTransactionKpi Parms{};

	Parms.EScreen = EScreen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SendPenaltyPoint
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMdPenaltyType                          Reason                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::SendPenaltyPoint(const class FString& PlayerId, const EMdPenaltyType& Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendPenaltyPoint");

	Params::BackendSubsystem_SendPenaltyPoint Parms{};

	Parms.PlayerId = std::move(PlayerId);
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.SendPenaltyPoint_DS
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FPenaltyData>             PenaltyList                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::SendPenaltyPoint_DS(const TArray<struct FPenaltyData>& PenaltyList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendPenaltyPoint_DS");

	Params::BackendSubsystem_SendPenaltyPoint_DS Parms{};

	Parms.PenaltyList = std::move(PenaltyList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.SendPenaltyPointImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::SendPenaltyPointImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendPenaltyPointImpl");

	Params::BackendSubsystem_SendPenaltyPointImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SendPhaseResult_DS
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   PhaseNo                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFinalPhase                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FPhaseResult>             ResultList                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FBillBoardLike>           LikeList                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EScreenName                             EScreen                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::SendPhaseResult_DS(const int32 PhaseNo, const bool bFinalPhase, const TArray<struct FPhaseResult>& ResultList, const TArray<struct FBillBoardLike>& LikeList, EScreenName EScreen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendPhaseResult_DS");

	Params::BackendSubsystem_SendPhaseResult_DS Parms{};

	Parms.PhaseNo = PhaseNo;
	Parms.bFinalPhase = bFinalPhase;
	Parms.ResultList = std::move(ResultList);
	Parms.LikeList = std::move(LikeList);
	Parms.EScreen = EScreen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.SendRecommendNotificationKpi
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NotificationCode                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRejection                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::SendRecommendNotificationKpi(int32 NotificationCode, const bool bRejection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendRecommendNotificationKpi");

	Params::BackendSubsystem_SendRecommendNotificationKpi Parms{};

	Parms.NotificationCode = NotificationCode;
	Parms.bRejection = bRejection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SendSettingsKpi
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Notification                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RecordHide                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   VoiceChat                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::SendSettingsKpi(const int32 Notification, const int32 RecordHide, const int32 VoiceChat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendSettingsKpi");

	Params::BackendSubsystem_SendSettingsKpi Parms{};

	Parms.Notification = Notification;
	Parms.RecordHide = RecordHide;
	Parms.VoiceChat = VoiceChat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SendSquadChatLogKpi
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::SendSquadChatLogKpi(const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendSquadChatLogKpi");

	Params::BackendSubsystem_SendSquadChatLogKpi Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SendSquadInvitation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::SendSquadInvitation(const class FString& PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendSquadInvitation");

	Params::BackendSubsystem_SendSquadInvitation Parms{};

	Parms.PlayerId = std::move(PlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.SendSquadInvitationImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::SendSquadInvitationImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendSquadInvitationImpl");

	Params::BackendSubsystem_SendSquadInvitationImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SendTeamUpAppeal
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   AppealCode                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::SendTeamUpAppeal(const int32 AppealCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendTeamUpAppeal");

	Params::BackendSubsystem_SendTeamUpAppeal Parms{};

	Parms.AppealCode = AppealCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.SendTeamUpAppealImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::SendTeamUpAppealImpl(int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendTeamUpAppealImpl");

	Params::BackendSubsystem_SendTeamUpAppealImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SendTeamUpChatMessage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::SendTeamUpChatMessage(const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendTeamUpChatMessage");

	Params::BackendSubsystem_SendTeamUpChatMessage Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.SendTeamUpChatMessageImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::SendTeamUpChatMessageImpl(int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendTeamUpChatMessageImpl");

	Params::BackendSubsystem_SendTeamUpChatMessageImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SendTeamUpChatTestCommand
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::SendTeamUpChatTestCommand(const TArray<class FString>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendTeamUpChatTestCommand");

	Params::BackendSubsystem_SendTeamUpChatTestCommand Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SendTextSpeechCommand
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::SendTextSpeechCommand(const TArray<class FString>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendTextSpeechCommand");

	Params::BackendSubsystem_SendTextSpeechCommand Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SendTutorialKpi
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Step                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::SendTutorialKpi(int32 Step)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendTutorialKpi");

	Params::BackendSubsystem_SendTutorialKpi Parms{};

	Parms.Step = Step;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SendViewProfileKpi
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ViewCosmosId                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EScreenName                             EScreen                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           MyADId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::SendViewProfileKpi(const class FString& ViewCosmosId, const EScreenName EScreen, const class FString& MyADId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendViewProfileKpi");

	Params::BackendSubsystem_SendViewProfileKpi Parms{};

	Parms.ViewCosmosId = std::move(ViewCosmosId);
	Parms.EScreen = EScreen;
	Parms.MyADId = std::move(MyADId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SetAutoKickCpu
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::SetAutoKickCpu(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SetAutoKickCpu");

	Params::BackendSubsystem_SetAutoKickCpu Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SetAutoStartBattleSequence
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   battleSequence                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::SetAutoStartBattleSequence(const int32 battleSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SetAutoStartBattleSequence");

	Params::BackendSubsystem_SetAutoStartBattleSequence Parms{};

	Parms.battleSequence = battleSequence;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SetBattleEndTimeKpiPlayerBattleLog_DS
// (Final, Native, Public, BlueprintCallable)

void UBackendSubsystem::SetBattleEndTimeKpiPlayerBattleLog_DS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SetBattleEndTimeKpiPlayerBattleLog_DS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SetBattleStartTimeKpiPlayerBattleLog_DS
// (Final, Native, Public, BlueprintCallable)

void UBackendSubsystem::SetBattleStartTimeKpiPlayerBattleLog_DS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SetBattleStartTimeKpiPlayerBattleLog_DS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SetCallLoadPurchaseStatusCommand
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::SetCallLoadPurchaseStatusCommand(const TArray<class FString>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SetCallLoadPurchaseStatusCommand");

	Params::BackendSubsystem_SetCallLoadPurchaseStatusCommand Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SetCheckNetworkAvailableCommand
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::SetCheckNetworkAvailableCommand(const TArray<class FString>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SetCheckNetworkAvailableCommand");

	Params::BackendSubsystem_SetCheckNetworkAvailableCommand Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SetConnectionEnvironmentForDedicatedServer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Env                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Version                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Platform                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::SetConnectionEnvironmentForDedicatedServer(const class FString& Env, const class FString& Version, const class FString& Platform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SetConnectionEnvironmentForDedicatedServer");

	Params::BackendSubsystem_SetConnectionEnvironmentForDedicatedServer Parms{};

	Parms.Env = std::move(Env);
	Parms.Version = std::move(Version);
	Parms.Platform = std::move(Platform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SetCustomRoomMember
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FDbCustomMatchingMemberParamList>SquadList                                              (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::SetCustomRoomMember(const TArray<struct FDbCustomMatchingMemberParamList>& SquadList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SetCustomRoomMember");

	Params::BackendSubsystem_SetCustomRoomMember Parms{};

	Parms.SquadList = std::move(SquadList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.SetCustomRoomMemberData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::SetCustomRoomMemberData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SetCustomRoomMemberData");

	Params::BackendSubsystem_SetCustomRoomMemberData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.SetCustomRoomSettings
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::SetCustomRoomSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SetCustomRoomSettings");

	Params::BackendSubsystem_SetCustomRoomSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.SetDebugBlockList
// (Final, Native, Public, BlueprintCallable)

void UBackendSubsystem::SetDebugBlockList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SetDebugBlockList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SetDedicatedServerCommand
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::SetDedicatedServerCommand(const TArray<class FString>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SetDedicatedServerCommand");

	Params::BackendSubsystem_SetDedicatedServerCommand Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SetEnableSpeechToText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnableSpeechToText                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::SetEnableSpeechToText(const bool bEnableSpeechToText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SetEnableSpeechToText");

	Params::BackendSubsystem_SetEnableSpeechToText Parms{};

	Parms.bEnableSpeechToText = bEnableSpeechToText;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SetFakeNetScoreCommand
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::SetFakeNetScoreCommand(const TArray<class FString>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SetFakeNetScoreCommand");

	Params::BackendSubsystem_SetFakeNetScoreCommand Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SetForceMultiProcessSupportCommand
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::SetForceMultiProcessSupportCommand(const TArray<class FString>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SetForceMultiProcessSupportCommand");

	Params::BackendSubsystem_SetForceMultiProcessSupportCommand Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SetIgnoreSystemCheckError
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIgnoreSystemCheckError                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::SetIgnoreSystemCheckError(bool bIgnoreSystemCheckError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SetIgnoreSystemCheckError");

	Params::BackendSubsystem_SetIgnoreSystemCheckError Parms{};

	Parms.bIgnoreSystemCheckError = bIgnoreSystemCheckError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SetIgnoreSystemCheckErrorCommand
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::SetIgnoreSystemCheckErrorCommand(const TArray<class FString>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SetIgnoreSystemCheckErrorCommand");

	Params::BackendSubsystem_SetIgnoreSystemCheckErrorCommand Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SetKpiAgreement
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAgree                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::SetKpiAgreement(bool bAgree)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SetKpiAgreement");

	Params::BackendSubsystem_SetKpiAgreement Parms{};

	Parms.bAgree = bAgree;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SetKpiLobbyLog_DS
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKpiLobbyLog                     Kpi                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBackendSubsystem::SetKpiLobbyLog_DS(const struct FKpiLobbyLog& Kpi)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SetKpiLobbyLog_DS");

	Params::BackendSubsystem_SetKpiLobbyLog_DS Parms{};

	Parms.Kpi = std::move(Kpi);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SetKpiTrainingLog_DS
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKpiTrainingLog                  Kpi                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::SetKpiTrainingLog_DS(const struct FKpiTrainingLog& Kpi)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SetKpiTrainingLog_DS");

	Params::BackendSubsystem_SetKpiTrainingLog_DS Parms{};

	Parms.Kpi = std::move(Kpi);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.SetLocalModeCommand
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::SetLocalModeCommand(const TArray<class FString>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SetLocalModeCommand");

	Params::BackendSubsystem_SetLocalModeCommand Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SetMatchingRegion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   RegionCode                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::SetMatchingRegion(const int32 RegionCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SetMatchingRegion");

	Params::BackendSubsystem_SetMatchingRegion Parms{};

	Parms.RegionCode = RegionCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SetMyAdParts
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   backgroundId                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EffectId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MessageId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::SetMyAdParts(int32 backgroundId, int32 EffectId, int32 MessageId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SetMyAdParts");

	Params::BackendSubsystem_SetMyAdParts Parms{};

	Parms.backgroundId = backgroundId;
	Parms.EffectId = EffectId;
	Parms.MessageId = MessageId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SetPlayerMute
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlatformPlayerId                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMute                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::SetPlayerMute(const class FString& PlatformPlayerId, const bool bMute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SetPlayerMute");

	Params::BackendSubsystem_SetPlayerMute Parms{};

	Parms.PlatformPlayerId = std::move(PlatformPlayerId);
	Parms.bMute = bMute;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SetProxyServerCommand
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::SetProxyServerCommand(const TArray<class FString>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SetProxyServerCommand");

	Params::BackendSubsystem_SetProxyServerCommand Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SetRealtimeMasterUpdateCommand
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::SetRealtimeMasterUpdateCommand(const TArray<class FString>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SetRealtimeMasterUpdateCommand");

	Params::BackendSubsystem_SetRealtimeMasterUpdateCommand Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SetSkipInGameTutorial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSkipInGameTutorial                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::SetSkipInGameTutorial(bool bSkipInGameTutorial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SetSkipInGameTutorial");

	Params::BackendSubsystem_SetSkipInGameTutorial Parms{};

	Parms.bSkipInGameTutorial = bSkipInGameTutorial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SetSQLiteAdminWatcherCommand
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::SetSQLiteAdminWatcherCommand(const TArray<class FString>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SetSQLiteAdminWatcherCommand");

	Params::BackendSubsystem_SetSQLiteAdminWatcherCommand Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SetTeamUpPassword
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Password                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::SetTeamUpPassword(const class FString& Password)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SetTeamUpPassword");

	Params::BackendSubsystem_SetTeamUpPassword Parms{};

	Parms.Password = std::move(Password);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SetUseUnplayableCharactersCommand
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::SetUseUnplayableCharactersCommand(const TArray<class FString>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SetUseUnplayableCharactersCommand");

	Params::BackendSubsystem_SetUseUnplayableCharactersCommand Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SkipDownloadMasterDataCommand
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::SkipDownloadMasterDataCommand(const TArray<class FString>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SkipDownloadMasterDataCommand");

	Params::BackendSubsystem_SkipDownloadMasterDataCommand Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SkipTutorialCommand
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::SkipTutorialCommand(const TArray<class FString>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SkipTutorialCommand");

	Params::BackendSubsystem_SkipTutorialCommand Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.StartCustomRoom
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::StartCustomRoom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "StartCustomRoom");

	Params::BackendSubsystem_StartCustomRoom Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.StartLobbyMatching
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::StartLobbyMatching()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "StartLobbyMatching");

	Params::BackendSubsystem_StartLobbyMatching Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.StartPurchase
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           CatalogId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::StartPurchase(const class FString& CatalogId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "StartPurchase");

	Params::BackendSubsystem_StartPurchase Parms{};

	Parms.CatalogId = std::move(CatalogId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.StartPurchaseImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::StartPurchaseImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "StartPurchaseImpl");

	Params::BackendSubsystem_StartPurchaseImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.UnlockMyAd
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::UnlockMyAd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UnlockMyAd");

	Params::BackendSubsystem_UnlockMyAd Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.UnlockMyAdImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::UnlockMyAdImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UnlockMyAdImpl");

	Params::BackendSubsystem_UnlockMyAdImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.UnlockPreset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   CharacterCode                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::UnlockPreset(const int32 CharacterCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UnlockPreset");

	Params::BackendSubsystem_UnlockPreset Parms{};

	Parms.CharacterCode = CharacterCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.UnlockPresetImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::UnlockPresetImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UnlockPresetImpl");

	Params::BackendSubsystem_UnlockPresetImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.UpdateAchievementProgress
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TMap<int32, int32>                      MissionCodeList                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::UpdateAchievementProgress(const TMap<int32, int32>& MissionCodeList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateAchievementProgress");

	Params::BackendSubsystem_UpdateAchievementProgress Parms{};

	Parms.MissionCodeList = std::move(MissionCodeList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.UpdateAutoStartBattleSequence
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   battleSequence                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::UpdateAutoStartBattleSequence(const int32 battleSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateAutoStartBattleSequence");

	Params::BackendSubsystem_UpdateAutoStartBattleSequence Parms{};

	Parms.battleSequence = battleSequence;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.UpdateAvatarImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::UpdateAvatarImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateAvatarImpl");

	Params::BackendSubsystem_UpdateAvatarImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.UpdateBattleReadyState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bBattleReady                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::UpdateBattleReadyState(const bool bBattleReady)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateBattleReadyState");

	Params::BackendSubsystem_UpdateBattleReadyState Parms{};

	Parms.bBattleReady = bBattleReady;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.UpdateCancelRequests
// (Final, Native, Protected)
// Parameters:
// int32                                   RequestId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::UpdateCancelRequests(int32 RequestId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateCancelRequests");

	Params::BackendSubsystem_UpdateCancelRequests Parms{};

	Parms.RequestId = RequestId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.UpdateCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   CharacterCode                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::UpdateCharacter(const int32 CharacterCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateCharacter");

	Params::BackendSubsystem_UpdateCharacter Parms{};

	Parms.CharacterCode = CharacterCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.UpdateCharacterImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::UpdateCharacterImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateCharacterImpl");

	Params::BackendSubsystem_UpdateCharacterImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.UpdateCustomizeAppeal
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   CharacterCode                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           Appeals                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::UpdateCustomizeAppeal(const int32 CharacterCode, const TArray<int32>& Appeals)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateCustomizeAppeal");

	Params::BackendSubsystem_UpdateCustomizeAppeal Parms{};

	Parms.CharacterCode = CharacterCode;
	Parms.Appeals = std::move(Appeals);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.UpdateCustomizeAppealImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::UpdateCustomizeAppealImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateCustomizeAppealImpl");

	Params::BackendSubsystem_UpdateCustomizeAppealImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.UpdateCustomizeAuraImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::UpdateCustomizeAuraImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateCustomizeAuraImpl");

	Params::BackendSubsystem_UpdateCustomizeAuraImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.UpdateCustomizeAuraLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   CharacterCode                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CostumeCode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AuraLevel                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::UpdateCustomizeAuraLevel(const int32 CharacterCode, int32 CostumeCode, int32 AuraLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateCustomizeAuraLevel");

	Params::BackendSubsystem_UpdateCustomizeAuraLevel Parms{};

	Parms.CharacterCode = CharacterCode;
	Parms.CostumeCode = CostumeCode;
	Parms.AuraLevel = AuraLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.UpdateCustomizeCostume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   CharacterCode                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CostumeCode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AuraLevel                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::UpdateCustomizeCostume(const int32 CharacterCode, int32 CostumeCode, int32 AuraLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateCustomizeCostume");

	Params::BackendSubsystem_UpdateCustomizeCostume Parms{};

	Parms.CharacterCode = CharacterCode;
	Parms.CostumeCode = CostumeCode;
	Parms.AuraLevel = AuraLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.UpdateCustomizeCostumeImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::UpdateCustomizeCostumeImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateCustomizeCostumeImpl");

	Params::BackendSubsystem_UpdateCustomizeCostumeImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.UpdateCustomizeEmblem
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   CharacterCode                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           Emblem                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::UpdateCustomizeEmblem(const int32 CharacterCode, const TArray<int32>& Emblem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateCustomizeEmblem");

	Params::BackendSubsystem_UpdateCustomizeEmblem Parms{};

	Parms.CharacterCode = CharacterCode;
	Parms.Emblem = std::move(Emblem);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.UpdateCustomizeEmblemImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::UpdateCustomizeEmblemImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateCustomizeEmblemImpl");

	Params::BackendSubsystem_UpdateCustomizeEmblemImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.UpdateCustomizeVariation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   CharacterCode                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   VariationCode                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::UpdateCustomizeVariation(const int32 CharacterCode, int32 VariationCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateCustomizeVariation");

	Params::BackendSubsystem_UpdateCustomizeVariation Parms{};

	Parms.CharacterCode = CharacterCode;
	Parms.VariationCode = VariationCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.UpdateCustomizeVariationImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::UpdateCustomizeVariationImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateCustomizeVariationImpl");

	Params::BackendSubsystem_UpdateCustomizeVariationImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.UpdateCustomizeVoice
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   CharacterCode                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           Voices                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::UpdateCustomizeVoice(const int32 CharacterCode, const TArray<int32>& Voices)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateCustomizeVoice");

	Params::BackendSubsystem_UpdateCustomizeVoice Parms{};

	Parms.CharacterCode = CharacterCode;
	Parms.Voices = std::move(Voices);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.UpdateCustomizeVoiceImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::UpdateCustomizeVoiceImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateCustomizeVoiceImpl");

	Params::BackendSubsystem_UpdateCustomizeVoiceImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.UpdateGallery
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   GalleryCode                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Ticket1Num                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Ticket2Num                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Ticket3Num                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::UpdateGallery(const int32 GalleryCode, const int32 Ticket1Num, const int32 Ticket2Num, const int32 Ticket3Num)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateGallery");

	Params::BackendSubsystem_UpdateGallery Parms{};

	Parms.GalleryCode = GalleryCode;
	Parms.Ticket1Num = Ticket1Num;
	Parms.Ticket2Num = Ticket2Num;
	Parms.Ticket3Num = Ticket3Num;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.UpdateGalleryImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::UpdateGalleryImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateGalleryImpl");

	Params::BackendSubsystem_UpdateGalleryImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.UpdateGuild
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   EmblemCode                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Profile                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGuildPolicy                            EPolicy                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGuildJoinRule                          EJoinRule                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::UpdateGuild(const int32 EmblemCode, const class FString& Name_0, const class FString& Profile, const EGuildPolicy EPolicy, const EGuildJoinRule EJoinRule)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateGuild");

	Params::BackendSubsystem_UpdateGuild Parms{};

	Parms.EmblemCode = EmblemCode;
	Parms.Name_0 = std::move(Name_0);
	Parms.Profile = std::move(Profile);
	Parms.EPolicy = EPolicy;
	Parms.EJoinRule = EJoinRule;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.UpdateGuildImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::UpdateGuildImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateGuildImpl");

	Params::BackendSubsystem_UpdateGuildImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.UpdateGuildSubLeader
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAppointment                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::UpdateGuildSubLeader(const class FString& PlayerId, const bool bAppointment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateGuildSubLeader");

	Params::BackendSubsystem_UpdateGuildSubLeader Parms{};

	Parms.PlayerId = std::move(PlayerId);
	Parms.bAppointment = bAppointment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.UpdateGuildSubLeaderImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::UpdateGuildSubLeaderImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateGuildSubLeaderImpl");

	Params::BackendSubsystem_UpdateGuildSubLeaderImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.UpdateLanguage
// (Final, Native, Public, BlueprintCallable)

void UBackendSubsystem::UpdateLanguage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateLanguage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.UpdateMatchingCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   CharacterCode                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CostumeCode                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AuraLevel                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   VariationCode                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::UpdateMatchingCharacter(const int32 CharacterCode, const int32 CostumeCode, const int32 AuraLevel, const int32 VariationCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateMatchingCharacter");

	Params::BackendSubsystem_UpdateMatchingCharacter Parms{};

	Parms.CharacterCode = CharacterCode;
	Parms.CostumeCode = CostumeCode;
	Parms.AuraLevel = AuraLevel;
	Parms.VariationCode = VariationCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.UpdateMatchingCpuCharacters
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<int32>                           CharacterCodes                                         (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<int32>                           CostumeCodes                                           (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::UpdateMatchingCpuCharacters(const TArray<int32>& CharacterCodes, const TArray<int32>& CostumeCodes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateMatchingCpuCharacters");

	Params::BackendSubsystem_UpdateMatchingCpuCharacters Parms{};

	Parms.CharacterCodes = std::move(CharacterCodes);
	Parms.CostumeCodes = std::move(CostumeCodes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.UpdateMatchingSetting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bBattleRecord                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AuraDisplayTarget                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AuraDisplayArea                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::UpdateMatchingSetting(const bool bBattleRecord, int32 AuraDisplayTarget, int32 AuraDisplayArea)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateMatchingSetting");

	Params::BackendSubsystem_UpdateMatchingSetting Parms{};

	Parms.bBattleRecord = bBattleRecord;
	Parms.AuraDisplayTarget = AuraDisplayTarget;
	Parms.AuraDisplayArea = AuraDisplayArea;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.UpdateMissionProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::UpdateMissionProgress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateMissionProgress");

	Params::BackendSubsystem_UpdateMissionProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.UpdateMissionProgress_DS
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::UpdateMissionProgress_DS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateMissionProgress_DS");

	Params::BackendSubsystem_UpdateMissionProgress_DS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.UpdateMissionProgressImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::UpdateMissionProgressImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateMissionProgressImpl");

	Params::BackendSubsystem_UpdateMissionProgressImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.UpdateMyAd
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           ID                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           PartCodes                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   MessageCode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::UpdateMyAd(const class FString& ID, const TArray<int32>& PartCodes, int32 MessageCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateMyAd");

	Params::BackendSubsystem_UpdateMyAd Parms{};

	Parms.ID = std::move(ID);
	Parms.PartCodes = std::move(PartCodes);
	Parms.MessageCode = MessageCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.UpdateMyAdImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::UpdateMyAdImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateMyAdImpl");

	Params::BackendSubsystem_UpdateMyAdImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.UpdatePlayerName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlayerName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::UpdatePlayerName(const class FString& PlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdatePlayerName");

	Params::BackendSubsystem_UpdatePlayerName Parms{};

	Parms.PlayerName = std::move(PlayerName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.UpdateProfile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Profile                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::UpdateProfile(const class FString& Profile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateProfile");

	Params::BackendSubsystem_UpdateProfile Parms{};

	Parms.Profile = std::move(Profile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.UpdateProfileImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::UpdateProfileImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateProfileImpl");

	Params::BackendSubsystem_UpdateProfileImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.UpdateProfileMyAd
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           MyADId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::UpdateProfileMyAd(const class FString& MyADId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateProfileMyAd");

	Params::BackendSubsystem_UpdateProfileMyAd Parms{};

	Parms.MyADId = std::move(MyADId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.UpdateProfileMyAdImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::UpdateProfileMyAdImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateProfileMyAdImpl");

	Params::BackendSubsystem_UpdateProfileMyAdImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.UpdateTrainingCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   CharacterCode                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::UpdateTrainingCharacter(const int32 CharacterCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateTrainingCharacter");

	Params::BackendSubsystem_UpdateTrainingCharacter Parms{};

	Parms.CharacterCode = CharacterCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.UpdateTrainingCustomizeVariation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   CharacterCode                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   VariationCode                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::UpdateTrainingCustomizeVariation(const int32 CharacterCode, int32 VariationCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateTrainingCustomizeVariation");

	Params::BackendSubsystem_UpdateTrainingCustomizeVariation Parms{};

	Parms.CharacterCode = CharacterCode;
	Parms.VariationCode = VariationCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.UpdateTutorial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETutorialStepNo                         ETutorialStep                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::UpdateTutorial(const ETutorialStepNo ETutorialStep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateTutorial");

	Params::BackendSubsystem_UpdateTutorial Parms{};

	Parms.ETutorialStep = ETutorialStep;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.UpdateTutorialImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::UpdateTutorialImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateTutorialImpl");

	Params::BackendSubsystem_UpdateTutorialImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.UpdateVoiceChatDevices
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           InputDeviceId                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutputDeviceId                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::UpdateVoiceChatDevices(const class FString& InputDeviceId, const class FString& OutputDeviceId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateVoiceChatDevices");

	Params::BackendSubsystem_UpdateVoiceChatDevices Parms{};

	Parms.InputDeviceId = std::move(InputDeviceId);
	Parms.OutputDeviceId = std::move(OutputDeviceId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.UpdateVoiceChatInputMute
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::UpdateVoiceChatInputMute(const bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateVoiceChatInputMute");

	Params::BackendSubsystem_UpdateVoiceChatInputMute Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.UpdateVoiceChatOutputMute
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::UpdateVoiceChatOutputMute(const bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateVoiceChatOutputMute");

	Params::BackendSubsystem_UpdateVoiceChatOutputMute Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.UpdateVoiceChatSetting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bVoiceChat                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InputVolume                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutputVolume                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::UpdateVoiceChatSetting(const bool bVoiceChat, const float InputVolume, const float OutputVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateVoiceChatSetting");

	Params::BackendSubsystem_UpdateVoiceChatSetting Parms{};

	Parms.bVoiceChat = bVoiceChat;
	Parms.InputVolume = InputVolume;
	Parms.OutputVolume = OutputVolume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.UpdateVoiceChatVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InputVolume                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutputVolume                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::UpdateVoiceChatVolume(const float InputVolume, const float OutputVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateVoiceChatVolume");

	Params::BackendSubsystem_UpdateVoiceChatVolume Parms{};

	Parms.InputVolume = InputVolume;
	Parms.OutputVolume = OutputVolume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.UpdateVoiceFont
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           FontName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::UpdateVoiceFont(const class FString& FontName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UpdateVoiceFont");

	Params::BackendSubsystem_UpdateVoiceFont Parms{};

	Parms.FontName = std::move(FontName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.UseBoostTicket
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::UseBoostTicket()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UseBoostTicket");

	Params::BackendSubsystem_UseBoostTicket Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.UseBoostTicketImpl
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   RequestId                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FWebApiArg>               Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBackendSubsystem::UseBoostTicketImpl(const int32 RequestId, const TArray<struct FWebApiArg>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "UseBoostTicketImpl");

	Params::BackendSubsystem_UseBoostTicketImpl Parms{};

	Parms.RequestId = RequestId;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.CanCallUpdateWebApi
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::CanCallUpdateWebApi() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "CanCallUpdateWebApi");

	Params::BackendSubsystem_CanCallUpdateWebApi Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.CanCancelLobbyMatching
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::CanCancelLobbyMatching() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "CanCancelLobbyMatching");

	Params::BackendSubsystem_CanCancelLobbyMatching Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.CanCancelSquadMerge
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::CanCancelSquadMerge() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "CanCancelSquadMerge");

	Params::BackendSubsystem_CanCancelSquadMerge Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.CheckXboxMyCommunicationPermission
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::CheckXboxMyCommunicationPermission() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "CheckXboxMyCommunicationPermission");

	Params::BackendSubsystem_CheckXboxMyCommunicationPermission Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetBnidQrCodeUrl
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBackendSubsystem::GetBnidQrCodeUrl() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetBnidQrCodeUrl");

	Params::BackendSubsystem_GetBnidQrCodeUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetBnidQrImageBase64
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBackendSubsystem::GetBnidQrImageBase64() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetBnidQrImageBase64");

	Params::BackendSubsystem_GetBnidQrImageBase64 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetBnidStatus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const EBnIdStatus                       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const EBnIdStatus UBackendSubsystem::GetBnidStatus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetBnidStatus");

	Params::BackendSubsystem_GetBnidStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetBnidStatusText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBackendSubsystem::GetBnidStatusText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetBnidStatusText");

	Params::BackendSubsystem_GetBnidStatusText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetConnectedEnvironment
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           Env                                                    (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::GetConnectedEnvironment(class FString* Env) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetConnectedEnvironment");

	Params::BackendSubsystem_GetConnectedEnvironment Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Env != nullptr)
		*Env = std::move(Parms.Env);
}


// Function BackendSubsystem.BackendSubsystem.GetConnectionEnvironment
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           Env                                                    (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           TestVersion                                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::GetConnectionEnvironment(class FString* Env, class FString* TestVersion) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetConnectionEnvironment");

	Params::BackendSubsystem_GetConnectionEnvironment Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Env != nullptr)
		*Env = std::move(Parms.Env);

	if (TestVersion != nullptr)
		*TestVersion = std::move(Parms.TestVersion);
}


// Function BackendSubsystem.BackendSubsystem.GetConnectionServer
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           Host                                                   (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Port                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::GetConnectionServer(class FString* Host, int32* Port) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetConnectionServer");

	Params::BackendSubsystem_GetConnectionServer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Host != nullptr)
		*Host = std::move(Parms.Host);

	if (Port != nullptr)
		*Port = Parms.Port;
}


// Function BackendSubsystem.BackendSubsystem.GetCurrentCharacterCode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::GetCurrentCharacterCode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetCurrentCharacterCode");

	Params::BackendSubsystem_GetCurrentCharacterCode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetFakePlatform
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBackendSubsystem::GetFakePlatform() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetFakePlatform");

	Params::BackendSubsystem_GetFakePlatform Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetFundSettlementText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBackendSubsystem::GetFundSettlementText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetFundSettlementText");

	Params::BackendSubsystem_GetFundSettlementText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetHeroCrystalCount
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ChargedHeroCrystal                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FreeHeroCrystal                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::GetHeroCrystalCount(int32* ChargedHeroCrystal, int32* FreeHeroCrystal) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetHeroCrystalCount");

	Params::BackendSubsystem_GetHeroCrystalCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ChargedHeroCrystal != nullptr)
		*ChargedHeroCrystal = Parms.ChargedHeroCrystal;

	if (FreeHeroCrystal != nullptr)
		*FreeHeroCrystal = Parms.FreeHeroCrystal;
}


// Function BackendSubsystem.BackendSubsystem.GetJsonBattle
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBackendSubsystem::GetJsonBattle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetJsonBattle");

	Params::BackendSubsystem_GetJsonBattle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetJsonBillboardChart
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBackendSubsystem::GetJsonBillboardChart() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetJsonBillboardChart");

	Params::BackendSubsystem_GetJsonBillboardChart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetJsonCharacters
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBackendSubsystem::GetJsonCharacters() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetJsonCharacters");

	Params::BackendSubsystem_GetJsonCharacters Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetJsonGuild
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBackendSubsystem::GetJsonGuild() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetJsonGuild");

	Params::BackendSubsystem_GetJsonGuild Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetJsonLotteries
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBackendSubsystem::GetJsonLotteries() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetJsonLotteries");

	Params::BackendSubsystem_GetJsonLotteries Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetJsonMatching
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBackendSubsystem::GetJsonMatching() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetJsonMatching");

	Params::BackendSubsystem_GetJsonMatching Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetJsonMissions
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBackendSubsystem::GetJsonMissions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetJsonMissions");

	Params::BackendSubsystem_GetJsonMissions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetJsonMyPlayer
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBackendSubsystem::GetJsonMyPlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetJsonMyPlayer");

	Params::BackendSubsystem_GetJsonMyPlayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetJsonNotice
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBackendSubsystem::GetJsonNotice() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetJsonNotice");

	Params::BackendSubsystem_GetJsonNotice Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetJsonPlayers
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBackendSubsystem::GetJsonPlayers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetJsonPlayers");

	Params::BackendSubsystem_GetJsonPlayers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetJsonRanking
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBackendSubsystem::GetJsonRanking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetJsonRanking");

	Params::BackendSubsystem_GetJsonRanking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetJsonSeason
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBackendSubsystem::GetJsonSeason() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetJsonSeason");

	Params::BackendSubsystem_GetJsonSeason Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetJsonSetting
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBackendSubsystem::GetJsonSetting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetJsonSetting");

	Params::BackendSubsystem_GetJsonSetting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetJsonShops
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBackendSubsystem::GetJsonShops() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetJsonShops");

	Params::BackendSubsystem_GetJsonShops Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetMaintenanceMessage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBackendSubsystem::GetMaintenanceMessage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetMaintenanceMessage");

	Params::BackendSubsystem_GetMaintenanceMessage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetPenaltyLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::GetPenaltyLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetPenaltyLevel");

	Params::BackendSubsystem_GetPenaltyLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetPhase
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBackendSubsystemPhase                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBackendSubsystemPhase UBackendSubsystem::GetPhase() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetPhase");

	Params::BackendSubsystem_GetPhase Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetPlatformPlayerId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBackendSubsystem::GetPlatformPlayerId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetPlatformPlayerId");

	Params::BackendSubsystem_GetPlatformPlayerId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetPlatformPlayerName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBackendSubsystem::GetPlatformPlayerName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetPlatformPlayerName");

	Params::BackendSubsystem_GetPlatformPlayerName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetPlayerId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBackendSubsystem::GetPlayerId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetPlayerId");

	Params::BackendSubsystem_GetPlayerId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetPlayerName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBackendSubsystem::GetPlayerName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetPlayerName");

	Params::BackendSubsystem_GetPlayerName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetPlayModeCode_DS
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::GetPlayModeCode_DS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetPlayModeCode_DS");

	Params::BackendSubsystem_GetPlayModeCode_DS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetRunningCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::GetRunningCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetRunningCount");

	Params::BackendSubsystem_GetRunningCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetSkillBase
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::GetSkillBase() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetSkillBase");

	Params::BackendSubsystem_GetSkillBase Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetTeamUpId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBackendSubsystem::GetTeamUpId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetTeamUpId");

	Params::BackendSubsystem_GetTeamUpId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetTeamUpMemberCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBackendSubsystem::GetTeamUpMemberCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetTeamUpMemberCount");

	Params::BackendSubsystem_GetTeamUpMemberCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetTeamUpMemberIdList
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FString>                   PlayerIdList                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBackendSubsystem::GetTeamUpMemberIdList(TArray<class FString>* PlayerIdList) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetTeamUpMemberIdList");

	Params::BackendSubsystem_GetTeamUpMemberIdList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PlayerIdList != nullptr)
		*PlayerIdList = std::move(Parms.PlayerIdList);
}


// Function BackendSubsystem.BackendSubsystem.GetTokushoText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBackendSubsystem::GetTokushoText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetTokushoText");

	Params::BackendSubsystem_GetTokushoText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetTutorialStepNo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ETutorialStepNo                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ETutorialStepNo UBackendSubsystem::GetTutorialStepNo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetTutorialStepNo");

	Params::BackendSubsystem_GetTutorialStepNo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.GetVersions
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           WebApi                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Matching                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Data                                                   (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           TrackingNumber                                         (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::GetVersions(class FString* WebApi, class FString* Matching, class FString* Data, class FString* TrackingNumber) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "GetVersions");

	Params::BackendSubsystem_GetVersions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (WebApi != nullptr)
		*WebApi = std::move(Parms.WebApi);

	if (Matching != nullptr)
		*Matching = std::move(Parms.Matching);

	if (Data != nullptr)
		*Data = std::move(Parms.Data);

	if (TrackingNumber != nullptr)
		*TrackingNumber = std::move(Parms.TrackingNumber);
}


// Function BackendSubsystem.BackendSubsystem.HasOnlinePlayPrivilege
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::HasOnlinePlayPrivilege() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "HasOnlinePlayPrivilege");

	Params::BackendSubsystem_HasOnlinePlayPrivilege Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.IsAutoKickCpu
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::IsAutoKickCpu() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "IsAutoKickCpu");

	Params::BackendSubsystem_IsAutoKickCpu Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.IsBonusRemainsToday
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::IsBonusRemainsToday() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "IsBonusRemainsToday");

	Params::BackendSubsystem_IsBonusRemainsToday Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.IsCustomMatchJoined
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::IsCustomMatchJoined() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "IsCustomMatchJoined");

	Params::BackendSubsystem_IsCustomMatchJoined Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.IsLastWebApiError
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::IsLastWebApiError() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "IsLastWebApiError");

	Params::BackendSubsystem_IsLastWebApiError Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.IsLocalMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::IsLocalMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "IsLocalMode");

	Params::BackendSubsystem_IsLocalMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.IsLoggedIn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::IsLoggedIn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "IsLoggedIn");

	Params::BackendSubsystem_IsLoggedIn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.IsMasterDataDownloading
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::IsMasterDataDownloading() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "IsMasterDataDownloading");

	Params::BackendSubsystem_IsMasterDataDownloading Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.IsPlaying
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::IsPlaying() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "IsPlaying");

	Params::BackendSubsystem_IsPlaying Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.IsPlayingTrainingMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::IsPlayingTrainingMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "IsPlayingTrainingMode");

	Params::BackendSubsystem_IsPlayingTrainingMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.IsSkipInGameTutorial
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::IsSkipInGameTutorial() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "IsSkipInGameTutorial");

	Params::BackendSubsystem_IsSkipInGameTutorial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.IsSquadJoined
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::IsSquadJoined() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "IsSquadJoined");

	Params::BackendSubsystem_IsSquadJoined Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.IsTeamUpLeader
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::IsTeamUpLeader() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "IsTeamUpLeader");

	Params::BackendSubsystem_IsTeamUpLeader Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.IsTutorialFinished
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::IsTutorialFinished() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "IsTutorialFinished");

	Params::BackendSubsystem_IsTutorialFinished Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.IsVoiceChatConnected
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBackendSubsystem::IsVoiceChatConnected() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "IsVoiceChatConnected");

	Params::BackendSubsystem_IsVoiceChatConnected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.BackendSubsystem.LoadJsonBattle
// (Final, Native, Protected, BlueprintCallable, Const)

void UBackendSubsystem::LoadJsonBattle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadJsonBattle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadJsonBillboardChart
// (Final, Native, Protected, BlueprintCallable, Const)

void UBackendSubsystem::LoadJsonBillboardChart() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadJsonBillboardChart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadJsonCharacters
// (Final, Native, Protected, BlueprintCallable, Const)

void UBackendSubsystem::LoadJsonCharacters() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadJsonCharacters");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadJsonGuild
// (Final, Native, Protected, BlueprintCallable, Const)

void UBackendSubsystem::LoadJsonGuild() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadJsonGuild");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadJsonLotteries
// (Final, Native, Protected, BlueprintCallable, Const)

void UBackendSubsystem::LoadJsonLotteries() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadJsonLotteries");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadJsonMatching
// (Final, Native, Protected, BlueprintCallable, Const)

void UBackendSubsystem::LoadJsonMatching() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadJsonMatching");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadJsonMissions
// (Final, Native, Protected, BlueprintCallable, Const)

void UBackendSubsystem::LoadJsonMissions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadJsonMissions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadJsonMyPlayer
// (Final, Native, Protected, BlueprintCallable, Const)

void UBackendSubsystem::LoadJsonMyPlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadJsonMyPlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadJsonNotice
// (Final, Native, Protected, BlueprintCallable, Const)

void UBackendSubsystem::LoadJsonNotice() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadJsonNotice");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadJsonPlayers
// (Final, Native, Protected, BlueprintCallable, Const)

void UBackendSubsystem::LoadJsonPlayers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadJsonPlayers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadJsonRanking
// (Final, Native, Protected, BlueprintCallable, Const)

void UBackendSubsystem::LoadJsonRanking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadJsonRanking");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadJsonSeason
// (Final, Native, Protected, BlueprintCallable, Const)

void UBackendSubsystem::LoadJsonSeason() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadJsonSeason");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadJsonSetting
// (Final, Native, Protected, BlueprintCallable, Const)

void UBackendSubsystem::LoadJsonSetting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadJsonSetting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.LoadJsonShops
// (Final, Native, Protected, BlueprintCallable, Const)

void UBackendSubsystem::LoadJsonShops() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "LoadJsonShops");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.OnChangeUnreadNoticeCount
// (Final, Native, Protected, Const)
// Parameters:
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::OnChangeUnreadNoticeCount(int32 Count) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "OnChangeUnreadNoticeCount");

	Params::BackendSubsystem_OnChangeUnreadNoticeCount Parms{};

	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SaveJsonBattle
// (Final, Native, Protected, BlueprintCallable, Const)

void UBackendSubsystem::SaveJsonBattle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SaveJsonBattle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SaveJsonBillboardChart
// (Final, Native, Protected, BlueprintCallable, Const)

void UBackendSubsystem::SaveJsonBillboardChart() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SaveJsonBillboardChart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SaveJsonCharacters
// (Final, Native, Protected, BlueprintCallable, Const)

void UBackendSubsystem::SaveJsonCharacters() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SaveJsonCharacters");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SaveJsonGuild
// (Final, Native, Protected, BlueprintCallable, Const)

void UBackendSubsystem::SaveJsonGuild() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SaveJsonGuild");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SaveJsonLotteries
// (Final, Native, Protected, BlueprintCallable, Const)

void UBackendSubsystem::SaveJsonLotteries() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SaveJsonLotteries");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SaveJsonMatching
// (Final, Native, Protected, BlueprintCallable, Const)

void UBackendSubsystem::SaveJsonMatching() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SaveJsonMatching");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SaveJsonMissions
// (Final, Native, Protected, BlueprintCallable, Const)

void UBackendSubsystem::SaveJsonMissions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SaveJsonMissions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SaveJsonMyPlayer
// (Final, Native, Protected, BlueprintCallable, Const)

void UBackendSubsystem::SaveJsonMyPlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SaveJsonMyPlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SaveJsonNotice
// (Final, Native, Protected, BlueprintCallable, Const)

void UBackendSubsystem::SaveJsonNotice() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SaveJsonNotice");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SaveJsonPlayers
// (Final, Native, Protected, BlueprintCallable, Const)

void UBackendSubsystem::SaveJsonPlayers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SaveJsonPlayers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SaveJsonRanking
// (Final, Native, Protected, BlueprintCallable, Const)

void UBackendSubsystem::SaveJsonRanking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SaveJsonRanking");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SaveJsonSeason
// (Final, Native, Protected, BlueprintCallable, Const)

void UBackendSubsystem::SaveJsonSeason() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SaveJsonSeason");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SaveJsonSetting
// (Final, Native, Protected, BlueprintCallable, Const)

void UBackendSubsystem::SaveJsonSetting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SaveJsonSetting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SaveJsonShops
// (Final, Native, Protected, BlueprintCallable, Const)

void UBackendSubsystem::SaveJsonShops() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SaveJsonShops");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SendTextSpeech
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::SendTextSpeech(const class FString& Message) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SendTextSpeech");

	Params::BackendSubsystem_SendTextSpeech Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.BackendSubsystem.SetConnectionEnvironment
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class FString                           Env                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           TestVersion                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBackendSubsystem::SetConnectionEnvironment(const class FString& Env, const class FString& TestVersion) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BackendSubsystem", "SetConnectionEnvironment");

	Params::BackendSubsystem_SetConnectionEnvironment Parms{};

	Parms.Env = std::move(Env);
	Parms.TestVersion = std::move(TestVersion);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.DatabaseParams.GetBillboardChartData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDbpBillboardChart*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDbpBillboardChart* UDatabaseParams::GetBillboardChartData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseParams", "GetBillboardChartData");

	Params::DatabaseParams_GetBillboardChartData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DatabaseParams.GetCharacterCustomizeData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   CharacterCode                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDbpCharacterCustomize*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDbpCharacterCustomize* UDatabaseParams::GetCharacterCustomizeData(const int32 CharacterCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseParams", "GetCharacterCustomizeData");

	Params::DatabaseParams_GetCharacterCustomizeData Parms{};

	Parms.CharacterCode = CharacterCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DatabaseParams.GetChatData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDbpChat*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDbpChat* UDatabaseParams::GetChatData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseParams", "GetChatData");

	Params::DatabaseParams_GetChatData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DatabaseParams.GetCustomMatchingData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDbpCustomMatching*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDbpCustomMatching* UDatabaseParams::GetCustomMatchingData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseParams", "GetCustomMatchingData");

	Params::DatabaseParams_GetCustomMatchingData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DatabaseParams.GetDedicatedServerData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDbpDedicatedServer*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDbpDedicatedServer* UDatabaseParams::GetDedicatedServerData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseParams", "GetDedicatedServerData");

	Params::DatabaseParams_GetDedicatedServerData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DatabaseParams.GetEquippedCustomizeData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDbpEquippedCustomize*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDbpEquippedCustomize* UDatabaseParams::GetEquippedCustomizeData(const class FString& PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseParams", "GetEquippedCustomizeData");

	Params::DatabaseParams_GetEquippedCustomizeData Parms{};

	Parms.PlayerId = std::move(PlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DatabaseParams.GetEventData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDbpEvent*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDbpEvent* UDatabaseParams::GetEventData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseParams", "GetEventData");

	Params::DatabaseParams_GetEventData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DatabaseParams.GetGalleryData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDbpGallery*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDbpGallery* UDatabaseParams::GetGalleryData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseParams", "GetGalleryData");

	Params::DatabaseParams_GetGalleryData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DatabaseParams.GetGuildData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDbpGuild*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDbpGuild* UDatabaseParams::GetGuildData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseParams", "GetGuildData");

	Params::DatabaseParams_GetGuildData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DatabaseParams.GetInventoryData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDbpInventory*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDbpInventory* UDatabaseParams::GetInventoryData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseParams", "GetInventoryData");

	Params::DatabaseParams_GetInventoryData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DatabaseParams.GetLoadingData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDbpLoading*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDbpLoading* UDatabaseParams::GetLoadingData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseParams", "GetLoadingData");

	Params::DatabaseParams_GetLoadingData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DatabaseParams.GetLoginBonusData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDbpLoginBonus*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDbpLoginBonus* UDatabaseParams::GetLoginBonusData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseParams", "GetLoginBonusData");

	Params::DatabaseParams_GetLoginBonusData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DatabaseParams.GetLotteryExchangeResultData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDbpLotteryResult*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDbpLotteryResult* UDatabaseParams::GetLotteryExchangeResultData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseParams", "GetLotteryExchangeResultData");

	Params::DatabaseParams_GetLotteryExchangeResultData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DatabaseParams.GetLotteryHistory
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDbpLotteryHistory*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDbpLotteryHistory* UDatabaseParams::GetLotteryHistory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseParams", "GetLotteryHistory");

	Params::DatabaseParams_GetLotteryHistory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DatabaseParams.GetLotteryListData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDbpLotteryList*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDbpLotteryList* UDatabaseParams::GetLotteryListData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseParams", "GetLotteryListData");

	Params::DatabaseParams_GetLotteryListData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DatabaseParams.GetLotteryRateData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   LotteryCode                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDbpLotteryRate*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDbpLotteryRate* UDatabaseParams::GetLotteryRateData(const int32 LotteryCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseParams", "GetLotteryRateData");

	Params::DatabaseParams_GetLotteryRateData Parms{};

	Parms.LotteryCode = LotteryCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DatabaseParams.GetLotteryResultData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDbpLotteryResult*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDbpLotteryResult* UDatabaseParams::GetLotteryResultData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseParams", "GetLotteryResultData");

	Params::DatabaseParams_GetLotteryResultData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DatabaseParams.GetMainMenuData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDbpMainMenu*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDbpMainMenu* UDatabaseParams::GetMainMenuData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseParams", "GetMainMenuData");

	Params::DatabaseParams_GetMainMenuData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DatabaseParams.GetMissionCategoryListData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDbpMissionCategoryList*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDbpMissionCategoryList* UDatabaseParams::GetMissionCategoryListData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseParams", "GetMissionCategoryListData");

	Params::DatabaseParams_GetMissionCategoryListData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DatabaseParams.GetMyAdData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDbpMyAd*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDbpMyAd* UDatabaseParams::GetMyAdData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseParams", "GetMyAdData");

	Params::DatabaseParams_GetMyAdData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DatabaseParams.GetMyProfileData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDbpMyProfile*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDbpMyProfile* UDatabaseParams::GetMyProfileData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseParams", "GetMyProfileData");

	Params::DatabaseParams_GetMyProfileData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DatabaseParams.GetNoticeData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDbpNotice*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDbpNotice* UDatabaseParams::GetNoticeData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseParams", "GetNoticeData");

	Params::DatabaseParams_GetNoticeData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DatabaseParams.GetPlayableCharactersData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDbpPlayableCharacterList*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDbpPlayableCharacterList* UDatabaseParams::GetPlayableCharactersData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseParams", "GetPlayableCharactersData");

	Params::DatabaseParams_GetPlayableCharactersData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DatabaseParams.GetPlayerListData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDbpPlayerList*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDbpPlayerList* UDatabaseParams::GetPlayerListData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseParams", "GetPlayerListData");

	Params::DatabaseParams_GetPlayerListData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DatabaseParams.GetRankingData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDbpRanking*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDbpRanking* UDatabaseParams::GetRankingData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseParams", "GetRankingData");

	Params::DatabaseParams_GetRankingData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DatabaseParams.GetResultData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDbpResult*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDbpResult* UDatabaseParams::GetResultData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseParams", "GetResultData");

	Params::DatabaseParams_GetResultData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DatabaseParams.GetSeasonData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDbpSeason*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDbpSeason* UDatabaseParams::GetSeasonData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseParams", "GetSeasonData");

	Params::DatabaseParams_GetSeasonData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DatabaseParams.GetSettingData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDbpSetting*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDbpSetting* UDatabaseParams::GetSettingData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseParams", "GetSettingData");

	Params::DatabaseParams_GetSettingData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DatabaseParams.GetShopsData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDbpShopList*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDbpShopList* UDatabaseParams::GetShopsData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseParams", "GetShopsData");

	Params::DatabaseParams_GetShopsData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpBillboardChart.GetSeasonTotal
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpBillboardChart::GetSeasonTotal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpBillboardChart", "GetSeasonTotal");

	Params::DbpBillboardChart_GetSeasonTotal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpBillboardChart.GetTodayTotal
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpBillboardChart::GetTodayTotal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpBillboardChart", "GetTodayTotal");

	Params::DbpBillboardChart_GetTodayTotal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpBillboardChart.GetVoterList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FDbBillboardVoterParam>   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FDbBillboardVoterParam> UDbpBillboardChart::GetVoterList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpBillboardChart", "GetVoterList");

	Params::DbpBillboardChart_GetVoterList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMyAd.GetMyAdPartsDataList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMyAdPartsCategory                      Category                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FMasterDataMyAdParts>     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FMasterDataMyAdParts> UDbpMyAd::GetMyAdPartsDataList(const EMyAdPartsCategory Category)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMyAd", "GetMyAdPartsDataList");

	Params::DbpMyAd_GetMyAdPartsDataList Parms{};

	Parms.Category = Category;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMyAd.CanDelivery
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpMyAd::CanDelivery() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMyAd", "CanDelivery");

	Params::DbpMyAd_CanDelivery Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMyAd.CanUnlock
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpMyAd::CanUnlock() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMyAd", "CanUnlock");

	Params::DbpMyAd_CanUnlock Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMyAd.GetCurrencyCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpMyAd::GetCurrencyCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMyAd", "GetCurrencyCount");

	Params::DbpMyAd_GetCurrencyCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMyAd.GetDeliveryPrice
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpMyAd::GetDeliveryPrice() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMyAd", "GetDeliveryPrice");

	Params::DbpMyAd_GetDeliveryPrice Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMyAd.GetMyAdList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FDbAdDataParam>     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FDbAdDataParam> UDbpMyAd::GetMyAdList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMyAd", "GetMyAdList");

	Params::DbpMyAd_GetMyAdList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMyAd.GetMyAdMessagesDataList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FMasterDataMyAdMessage>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FMasterDataMyAdMessage> UDbpMyAd::GetMyAdMessagesDataList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMyAd", "GetMyAdMessagesDataList");

	Params::DbpMyAd_GetMyAdMessagesDataList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMyAd.GetUnlockedAdSpaceCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpMyAd::GetUnlockedAdSpaceCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMyAd", "GetUnlockedAdSpaceCount");

	Params::DbpMyAd_GetUnlockedAdSpaceCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMyAd.GetUnlockPrice
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpMyAd::GetUnlockPrice() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMyAd", "GetUnlockPrice");

	Params::DbpMyAd_GetUnlockPrice Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpCharacterCustomize.GetAppealList
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FDbsAppealParam>          OutUnlocked                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FDbsAppealParam>          OutLocked                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpCharacterCustomize::GetAppealList(TArray<struct FDbsAppealParam>* OutUnlocked, TArray<struct FDbsAppealParam>* OutLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpCharacterCustomize", "GetAppealList");

	Params::DbpCharacterCustomize_GetAppealList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutUnlocked != nullptr)
		*OutUnlocked = std::move(Parms.OutUnlocked);

	if (OutLocked != nullptr)
		*OutLocked = std::move(Parms.OutLocked);

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpCharacterCustomize.GetCostumeList
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FDbsCostumeParam>         OutUnlocked                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FDbsCostumeParam>         OutLocked                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpCharacterCustomize::GetCostumeList(TArray<struct FDbsCostumeParam>* OutUnlocked, TArray<struct FDbsCostumeParam>* OutLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpCharacterCustomize", "GetCostumeList");

	Params::DbpCharacterCustomize_GetCostumeList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutUnlocked != nullptr)
		*OutUnlocked = std::move(Parms.OutUnlocked);

	if (OutLocked != nullptr)
		*OutLocked = std::move(Parms.OutLocked);

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpCharacterCustomize.GetEmblemList
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FDbsEmblemParam>          OutUnlocked                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FDbsEmblemParam>          OutLocked                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpCharacterCustomize::GetEmblemList(TArray<struct FDbsEmblemParam>* OutUnlocked, TArray<struct FDbsEmblemParam>* OutLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpCharacterCustomize", "GetEmblemList");

	Params::DbpCharacterCustomize_GetEmblemList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutUnlocked != nullptr)
		*OutUnlocked = std::move(Parms.OutUnlocked);

	if (OutLocked != nullptr)
		*OutLocked = std::move(Parms.OutLocked);

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpCharacterCustomize.GetEquippedCostume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FDbsCostumeParam                 ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FDbsCostumeParam UDbpCharacterCustomize::GetEquippedCostume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpCharacterCustomize", "GetEquippedCostume");

	Params::DbpCharacterCustomize_GetEquippedCostume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpCharacterCustomize.GetEquippedVariation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FDbsVariationParam               ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FDbsVariationParam UDbpCharacterCustomize::GetEquippedVariation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpCharacterCustomize", "GetEquippedVariation");

	Params::DbpCharacterCustomize_GetEquippedVariation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpCharacterCustomize.GetPresets
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const TArray<struct FDbPresetParam>     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FDbPresetParam> UDbpCharacterCustomize::GetPresets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpCharacterCustomize", "GetPresets");

	Params::DbpCharacterCustomize_GetPresets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpCharacterCustomize.GetVariationList
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FDbsVariationParam>       OutUnlocked                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FDbsVariationParam>       OutLocked                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpCharacterCustomize::GetVariationList(TArray<struct FDbsVariationParam>* OutUnlocked, TArray<struct FDbsVariationParam>* OutLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpCharacterCustomize", "GetVariationList");

	Params::DbpCharacterCustomize_GetVariationList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutUnlocked != nullptr)
		*OutUnlocked = std::move(Parms.OutUnlocked);

	if (OutLocked != nullptr)
		*OutLocked = std::move(Parms.OutLocked);

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpCharacterCustomize.GetVoiceList
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FDbsVoiceParam>           OutUnlocked                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FDbsVoiceParam>           OutLocked                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpCharacterCustomize::GetVoiceList(TArray<struct FDbsVoiceParam>* OutUnlocked, TArray<struct FDbsVoiceParam>* OutLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpCharacterCustomize", "GetVoiceList");

	Params::DbpCharacterCustomize_GetVoiceList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutUnlocked != nullptr)
		*OutUnlocked = std::move(Parms.OutUnlocked);

	if (OutLocked != nullptr)
		*OutLocked = std::move(Parms.OutLocked);

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpCharacterCustomize.GetCharacter
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FDbMyCharacterParam              Character                                              (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpCharacterCustomize::GetCharacter(struct FDbMyCharacterParam* Character) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpCharacterCustomize", "GetCharacter");

	Params::DbpCharacterCustomize_GetCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Character != nullptr)
		*Character = std::move(Parms.Character);

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpCharacterCustomize.GetCharacterCode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpCharacterCustomize::GetCharacterCode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpCharacterCustomize", "GetCharacterCode");

	Params::DbpCharacterCustomize_GetCharacterCode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpCharacterCustomize.GetEquippedAppeals
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FDbsAppealParam>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FDbsAppealParam> UDbpCharacterCustomize::GetEquippedAppeals() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpCharacterCustomize", "GetEquippedAppeals");

	Params::DbpCharacterCustomize_GetEquippedAppeals Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpCharacterCustomize.GetEquippedEmblems
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FDbsEmblemParam>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FDbsEmblemParam> UDbpCharacterCustomize::GetEquippedEmblems() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpCharacterCustomize", "GetEquippedEmblems");

	Params::DbpCharacterCustomize_GetEquippedEmblems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpCharacterCustomize.GetEquippedVariationNo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpCharacterCustomize::GetEquippedVariationNo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpCharacterCustomize", "GetEquippedVariationNo");

	Params::DbpCharacterCustomize_GetEquippedVariationNo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpCharacterCustomize.GetEquippedVoices
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FDbsVoiceParam>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FDbsVoiceParam> UDbpCharacterCustomize::GetEquippedVoices() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpCharacterCustomize", "GetEquippedVoices");

	Params::DbpCharacterCustomize_GetEquippedVoices Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpChat.GetAllLogList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FDbChatLogParam>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FDbChatLogParam> UDbpChat::GetAllLogList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpChat", "GetAllLogList");

	Params::DbpChat_GetAllLogList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpChat.GetLogList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Max                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FDbChatLogParam>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FDbChatLogParam> UDbpChat::GetLogList(const int32 Max) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpChat", "GetLogList");

	Params::DbpChat_GetLogList Parms{};

	Parms.Max = Max;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpChat.GetNewChatList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FDbChatLogParam>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FDbChatLogParam> UDbpChat::GetNewChatList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpChat", "GetNewChatList");

	Params::DbpChat_GetNewChatList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpCustomMatching.MakeRandomMatchMemberParam
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   SquadNum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerNum                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FDbCustomMatchingMemberParamList>OutData                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UDbpCustomMatching::MakeRandomMatchMemberParam(int32 SquadNum, int32 PlayerNum, TArray<struct FDbCustomMatchingMemberParamList>* OutData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpCustomMatching", "MakeRandomMatchMemberParam");

	Params::DbpCustomMatching_MakeRandomMatchMemberParam Parms{};

	Parms.SquadNum = SquadNum;
	Parms.PlayerNum = PlayerNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutData != nullptr)
		*OutData = std::move(Parms.OutData);
}


// Function BackendSubsystem.DbpCustomMatching.SetAllowAllChat
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDbpCustomMatching::SetAllowAllChat(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpCustomMatching", "SetAllowAllChat");

	Params::DbpCustomMatching_SetAllowAllChat Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.DbpCustomMatching.SetPublicRoomKey
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDbpCustomMatching::SetPublicRoomKey(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpCustomMatching", "SetPublicRoomKey");

	Params::DbpCustomMatching_SetPublicRoomKey Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.DbpCustomMatching.SetRoomPlayModeCode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDbpCustomMatching::SetRoomPlayModeCode(int32 Code)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpCustomMatching", "SetRoomPlayModeCode");

	Params::DbpCustomMatching_SetRoomPlayModeCode Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.DbpCustomMatching.ToStringCustomMatchingMyUserData
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UDbpCustomMatching::ToStringCustomMatchingMyUserData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpCustomMatching", "ToStringCustomMatchingMyUserData");

	Params::DbpCustomMatching_ToStringCustomMatchingMyUserData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpCustomMatching.ToStringCustomMatchingRoomData
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UDbpCustomMatching::ToStringCustomMatchingRoomData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpCustomMatching", "ToStringCustomMatchingRoomData");

	Params::DbpCustomMatching_ToStringCustomMatchingRoomData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpCustomMatching.ToStringCustomMatchingStandbyList
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UDbpCustomMatching::ToStringCustomMatchingStandbyList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpCustomMatching", "ToStringCustomMatchingStandbyList");

	Params::DbpCustomMatching_ToStringCustomMatchingStandbyList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpCustomMatching.ToStringCustomMatchingTeamDataList
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UDbpCustomMatching::ToStringCustomMatchingTeamDataList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpCustomMatching", "ToStringCustomMatchingTeamDataList");

	Params::DbpCustomMatching_ToStringCustomMatchingTeamDataList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpCustomMatching.GetRoomPlayModeCode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpCustomMatching::GetRoomPlayModeCode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpCustomMatching", "GetRoomPlayModeCode");

	Params::DbpCustomMatching_GetRoomPlayModeCode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpCustomMatching.IsAllowAllChat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpCustomMatching::IsAllowAllChat() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpCustomMatching", "IsAllowAllChat");

	Params::DbpCustomMatching_IsAllowAllChat Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpCustomMatching.IsPublicRoomKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpCustomMatching::IsPublicRoomKey() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpCustomMatching", "IsPublicRoomKey");

	Params::DbpCustomMatching_IsPublicRoomKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpLotteryResult.GetItems
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FDbLotteryResultItem>     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FDbLotteryResultItem> UDbpLotteryResult::GetItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpLotteryResult", "GetItems");

	Params::DbpLotteryResult_GetItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpDedicatedServer.GetCustomize
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FMasterDataCustomizeVoice>Voice                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FMasterDataCustomizeEmote>Appeal                                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FMasterDataEmblem>        Emblem                                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UDbpDedicatedServer::GetCustomize(const class FString& PlayerId, TArray<struct FMasterDataCustomizeVoice>* Voice, TArray<struct FMasterDataCustomizeEmote>* Appeal, TArray<struct FMasterDataEmblem>* Emblem) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpDedicatedServer", "GetCustomize");

	Params::DbpDedicatedServer_GetCustomize Parms{};

	Parms.PlayerId = std::move(PlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Voice != nullptr)
		*Voice = std::move(Parms.Voice);

	if (Appeal != nullptr)
		*Appeal = std::move(Parms.Appeal);

	if (Emblem != nullptr)
		*Emblem = std::move(Parms.Emblem);
}


// Function BackendSubsystem.DbpDedicatedServer.GetPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDbPlayerParam                   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FDbPlayerParam UDbpDedicatedServer::GetPlayer(const class FString& PlayerId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpDedicatedServer", "GetPlayer");

	Params::DbpDedicatedServer_GetPlayer Parms{};

	Parms.PlayerId = std::move(PlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpDedicatedServer.GetPlayerList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FDbPlayerParam>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FDbPlayerParam> UDbpDedicatedServer::GetPlayerList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpDedicatedServer", "GetPlayerList");

	Params::DbpDedicatedServer_GetPlayerList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpPlayerList.GetCounts
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EFriendListType                         ListType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FriendsCount                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxFriendsCount                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Maxpage                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDbpPlayerList::GetCounts(const EFriendListType ListType, int32* FriendsCount, int32* MaxFriendsCount, int32* Maxpage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpPlayerList", "GetCounts");

	Params::DbpPlayerList_GetCounts Parms{};

	Parms.ListType = ListType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FriendsCount != nullptr)
		*FriendsCount = Parms.FriendsCount;

	if (MaxFriendsCount != nullptr)
		*MaxFriendsCount = Parms.MaxFriendsCount;

	if (Maxpage != nullptr)
		*Maxpage = Parms.Maxpage;
}


// Function BackendSubsystem.DbpPlayerList.GetPlayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDbPlayerParam                   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FDbPlayerParam UDbpPlayerList::GetPlayer(const class FString& PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpPlayerList", "GetPlayer");

	Params::DbpPlayerList_GetPlayer Parms{};

	Parms.PlayerId = std::move(PlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpPlayerList.GetPlayerList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PageNo                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFriendListType                         ListType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFriendListSortOrder                    Sort                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FDbPlayerParam>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FDbPlayerParam> UDbpPlayerList::GetPlayerList(const int32 PageNo, const EFriendListType ListType, const EFriendListSortOrder Sort)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpPlayerList", "GetPlayerList");

	Params::DbpPlayerList_GetPlayerList Parms{};

	Parms.PageNo = PageNo;
	Parms.ListType = ListType;
	Parms.Sort = Sort;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpEquippedCustomize.GetEquipAuraDisplayArea
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpEquippedCustomize::GetEquipAuraDisplayArea() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpEquippedCustomize", "GetEquipAuraDisplayArea");

	Params::DbpEquippedCustomize_GetEquipAuraDisplayArea Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpEquippedCustomize.GetEquipAuraDisplayTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpEquippedCustomize::GetEquipAuraDisplayTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpEquippedCustomize", "GetEquipAuraDisplayTarget");

	Params::DbpEquippedCustomize_GetEquipAuraDisplayTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpEquippedCustomize.GetEquippedAppealCodes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<int32>                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<int32> UDbpEquippedCustomize::GetEquippedAppealCodes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpEquippedCustomize", "GetEquippedAppealCodes");

	Params::DbpEquippedCustomize_GetEquippedAppealCodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpEquippedCustomize.GetEquippedAuraLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpEquippedCustomize::GetEquippedAuraLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpEquippedCustomize", "GetEquippedAuraLevel");

	Params::DbpEquippedCustomize_GetEquippedAuraLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpEquippedCustomize.GetEquippedCharacterCode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpEquippedCustomize::GetEquippedCharacterCode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpEquippedCustomize", "GetEquippedCharacterCode");

	Params::DbpEquippedCustomize_GetEquippedCharacterCode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpEquippedCustomize.GetEquippedCostumeCode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpEquippedCustomize::GetEquippedCostumeCode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpEquippedCustomize", "GetEquippedCostumeCode");

	Params::DbpEquippedCustomize_GetEquippedCostumeCode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpEquippedCustomize.GetEquippedEmblemCodes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<int32>                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<int32> UDbpEquippedCustomize::GetEquippedEmblemCodes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpEquippedCustomize", "GetEquippedEmblemCodes");

	Params::DbpEquippedCustomize_GetEquippedEmblemCodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpEquippedCustomize.GetEquippedVariationCode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpEquippedCustomize::GetEquippedVariationCode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpEquippedCustomize", "GetEquippedVariationCode");

	Params::DbpEquippedCustomize_GetEquippedVariationCode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpEquippedCustomize.GetEquippedVoiceCodes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<int32>                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<int32> UDbpEquippedCustomize::GetEquippedVoiceCodes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpEquippedCustomize", "GetEquippedVoiceCodes");

	Params::DbpEquippedCustomize_GetEquippedVoiceCodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpEquippedCustomize.GetVariationCode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpEquippedCustomize::GetVariationCode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpEquippedCustomize", "GetVariationCode");

	Params::DbpEquippedCustomize_GetVariationCode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpEquippedCustomize.GetVariationNo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpEquippedCustomize::GetVariationNo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpEquippedCustomize", "GetVariationNo");

	Params::DbpEquippedCustomize_GetVariationNo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpEvent.Get
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Code                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDbEventParam                    Ev                                                     (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpEvent::Get(const int32 Code, struct FDbEventParam* Ev) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpEvent", "Get");

	Params::DbpEvent_Get Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Ev != nullptr)
		*Ev = std::move(Parms.Ev);

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpEvent.GetEventList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FDbEventParam>      ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FDbEventParam> UDbpEvent::GetEventList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpEvent", "GetEventList");

	Params::DbpEvent_GetEventList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpGallery.Get
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDbGalleryDataParam              Gallery                                                (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpGallery::Get(const int32 Code, struct FDbGalleryDataParam* Gallery)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpGallery", "Get");

	Params::DbpGallery_Get Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Gallery != nullptr)
		*Gallery = std::move(Parms.Gallery);

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpGallery.GetFirst
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FDbGalleryDataParam              Gallery                                                (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpGallery::GetFirst(struct FDbGalleryDataParam* Gallery)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpGallery", "GetFirst");

	Params::DbpGallery_GetFirst Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Gallery != nullptr)
		*Gallery = std::move(Parms.Gallery);

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpGallery.GetShortageTickets
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Ticket1                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Ticket2                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Ticket3                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpGallery::GetShortageTickets(const int32 Code, int32* Ticket1, int32* Ticket2, int32* Ticket3)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpGallery", "GetShortageTickets");

	Params::DbpGallery_GetShortageTickets Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Ticket1 != nullptr)
		*Ticket1 = Parms.Ticket1;

	if (Ticket2 != nullptr)
		*Ticket2 = Parms.Ticket2;

	if (Ticket3 != nullptr)
		*Ticket3 = Parms.Ticket3;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpGallery.GetTicketCounts
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Ticket1                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Ticket2                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Ticket3                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpGallery::GetTicketCounts(const int32 Code, int32* Ticket1, int32* Ticket2, int32* Ticket3)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpGallery", "GetTicketCounts");

	Params::DbpGallery_GetTicketCounts Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Ticket1 != nullptr)
		*Ticket1 = Parms.Ticket1;

	if (Ticket2 != nullptr)
		*Ticket2 = Parms.Ticket2;

	if (Ticket3 != nullptr)
		*Ticket3 = Parms.Ticket3;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpGallery.GetTicketCountsFirstCode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Ticket1                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Ticket2                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Ticket3                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpGallery::GetTicketCountsFirstCode(int32* Ticket1, int32* Ticket2, int32* Ticket3)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpGallery", "GetTicketCountsFirstCode");

	Params::DbpGallery_GetTicketCountsFirstCode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Ticket1 != nullptr)
		*Ticket1 = Parms.Ticket1;

	if (Ticket2 != nullptr)
		*Ticket2 = Parms.Ticket2;

	if (Ticket3 != nullptr)
		*Ticket3 = Parms.Ticket3;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpGallery.GetOpenablePanelCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Code                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpGallery::GetOpenablePanelCount(const int32 Code) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpGallery", "GetOpenablePanelCount");

	Params::DbpGallery_GetOpenablePanelCount Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpGallery.GetTotalOpenablePanelCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Code                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpGallery::GetTotalOpenablePanelCount(const int32 Code) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpGallery", "GetTotalOpenablePanelCount");

	Params::DbpGallery_GetTotalOpenablePanelCount Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpGallery.GetTotalTicketCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Code                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpGallery::GetTotalTicketCount(const int32 Code) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpGallery", "GetTotalTicketCount");

	Params::DbpGallery_GetTotalTicketCount Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpGallery.GetTotalUsedTicketCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Code                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpGallery::GetTotalUsedTicketCount(const int32 Code) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpGallery", "GetTotalUsedTicketCount");

	Params::DbpGallery_GetTotalUsedTicketCount Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpGuild.GetMyGuildInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FDbMyGuildInfoParam              ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FDbMyGuildInfoParam UDbpGuild::GetMyGuildInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpGuild", "GetMyGuildInfo");

	Params::DbpGuild_GetMyGuildInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpGuild.GetPoint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpGuild::GetPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpGuild", "GetPoint");

	Params::DbpGuild_GetPoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpGuild.GetRecords
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FDbGuildRecord>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FDbGuildRecord> UDbpGuild::GetRecords()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpGuild", "GetRecords");

	Params::DbpGuild_GetRecords Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpGuild.GetSearchedGuildList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FDbGuildInfoParam>        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FDbGuildInfoParam> UDbpGuild::GetSearchedGuildList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpGuild", "GetSearchedGuildList");

	Params::DbpGuild_GetSearchedGuildList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpGuild.IsGuildEventOpen
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpGuild::IsGuildEventOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpGuild", "IsGuildEventOpen");

	Params::DbpGuild_IsGuildEventOpen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpInventory.GetStockList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EItemListSortOrder                      Sort                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EItemCategory                           Filter                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FDbItemStockParam>        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FDbItemStockParam> UDbpInventory::GetStockList(const EItemListSortOrder Sort, const EItemCategory Filter) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpInventory", "GetStockList");

	Params::DbpInventory_GetStockList Parms{};

	Parms.Sort = Sort;
	Parms.Filter = Filter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpLoading.GetRandomOpenedGallery
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FDbGalleryDataParam        ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FDbGalleryDataParam UDbpLoading::GetRandomOpenedGallery() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpLoading", "GetRandomOpenedGallery");

	Params::DbpLoading_GetRandomOpenedGallery Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpLoading.GetRandomTips
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UDbpLoading::GetRandomTips() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpLoading", "GetRandomTips");

	Params::DbpLoading_GetRandomTips Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpLoginBonus.Get
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDbLoginBonus                    LoginBonus                                             (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpLoginBonus::Get(const int32 Code, struct FDbLoginBonus* LoginBonus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpLoginBonus", "Get");

	Params::DbpLoginBonus_Get Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (LoginBonus != nullptr)
		*LoginBonus = std::move(Parms.LoginBonus);

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpLoginBonus.GetDailyBonus
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FDbLoginBonus                    FreeLoginBonus                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// struct FDbLoginBonus                    PremiumLoginBonus                                      (Parm, OutParm, NativeAccessSpecifierPublic)

void UDbpLoginBonus::GetDailyBonus(struct FDbLoginBonus* FreeLoginBonus, struct FDbLoginBonus* PremiumLoginBonus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpLoginBonus", "GetDailyBonus");

	Params::DbpLoginBonus_GetDailyBonus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FreeLoginBonus != nullptr)
		*FreeLoginBonus = std::move(Parms.FreeLoginBonus);

	if (PremiumLoginBonus != nullptr)
		*PremiumLoginBonus = std::move(Parms.PremiumLoginBonus);
}


// Function BackendSubsystem.DbpLoginBonus.GetLoginBonusList
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FDbLoginBonusListParam           List                                                   (Parm, OutParm, NativeAccessSpecifierPublic)

void UDbpLoginBonus::GetLoginBonusList(struct FDbLoginBonusListParam* List)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpLoginBonus", "GetLoginBonusList");

	Params::DbpLoginBonus_GetLoginBonusList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (List != nullptr)
		*List = std::move(Parms.List);
}


// Function BackendSubsystem.DbpLoginBonus.GetReceivedDailyBonusItemList
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FDbLoginBonusItem>        FreeReceivedDailyBonus                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FDbLoginBonusItem>        PremiumReceivedDailyBonus                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UDbpLoginBonus::GetReceivedDailyBonusItemList(TArray<struct FDbLoginBonusItem>* FreeReceivedDailyBonus, TArray<struct FDbLoginBonusItem>* PremiumReceivedDailyBonus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpLoginBonus", "GetReceivedDailyBonusItemList");

	Params::DbpLoginBonus_GetReceivedDailyBonusItemList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FreeReceivedDailyBonus != nullptr)
		*FreeReceivedDailyBonus = std::move(Parms.FreeReceivedDailyBonus);

	if (PremiumReceivedDailyBonus != nullptr)
		*PremiumReceivedDailyBonus = std::move(Parms.PremiumReceivedDailyBonus);
}


// Function BackendSubsystem.DbpLoginBonus.CanBuyPremiumDailyLoginBonusTicket
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpLoginBonus::CanBuyPremiumDailyLoginBonusTicket() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpLoginBonus", "CanBuyPremiumDailyLoginBonusTicket");

	Params::DbpLoginBonus_CanBuyPremiumDailyLoginBonusTicket Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpLoginBonus.CanReceiveBonus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpLoginBonus::CanReceiveBonus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpLoginBonus", "CanReceiveBonus");

	Params::DbpLoginBonus_CanReceiveBonus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpLoginBonus.GetBonusItemListToday
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FDbLoginBonusItem>        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FDbLoginBonusItem> UDbpLoginBonus::GetBonusItemListToday() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpLoginBonus", "GetBonusItemListToday");

	Params::DbpLoginBonus_GetBonusItemListToday Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpLoginBonus.GetCampaignLoginBonusCodes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> UDbpLoginBonus::GetCampaignLoginBonusCodes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpLoginBonus", "GetCampaignLoginBonusCodes");

	Params::DbpLoginBonus_GetCampaignLoginBonusCodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpLoginBonus.GetCurrency
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpLoginBonus::GetCurrency() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpLoginBonus", "GetCurrency");

	Params::DbpLoginBonus_GetCurrency Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpLoginBonus.GetDailyLoginBonusCodes
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   FreeLoginBonusCode                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PremiumLoginBonusCode                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDbpLoginBonus::GetDailyLoginBonusCodes(int32* FreeLoginBonusCode, int32* PremiumLoginBonusCode) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpLoginBonus", "GetDailyLoginBonusCodes");

	Params::DbpLoginBonus_GetDailyLoginBonusCodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FreeLoginBonusCode != nullptr)
		*FreeLoginBonusCode = Parms.FreeLoginBonusCode;

	if (PremiumLoginBonusCode != nullptr)
		*PremiumLoginBonusCode = Parms.PremiumLoginBonusCode;
}


// Function BackendSubsystem.DbpLoginBonus.GetEventLoginBonusCodes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> UDbpLoginBonus::GetEventLoginBonusCodes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpLoginBonus", "GetEventLoginBonusCodes");

	Params::DbpLoginBonus_GetEventLoginBonusCodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpLoginBonus.GetPremiumDailyLoginBonusRemainDays
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpLoginBonus::GetPremiumDailyLoginBonusRemainDays() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpLoginBonus", "GetPremiumDailyLoginBonusRemainDays");

	Params::DbpLoginBonus_GetPremiumDailyLoginBonusRemainDays Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpLoginBonus.GetReceivedBonusItemList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   LoginBonusCode                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FDbLoginBonusItem>  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FDbLoginBonusItem> UDbpLoginBonus::GetReceivedBonusItemList(int32 LoginBonusCode) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpLoginBonus", "GetReceivedBonusItemList");

	Params::DbpLoginBonus_GetReceivedBonusItemList Parms{};

	Parms.LoginBonusCode = LoginBonusCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpLoginBonus.IsPremiumAvailable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpLoginBonus::IsPremiumAvailable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpLoginBonus", "IsPremiumAvailable");

	Params::DbpLoginBonus_IsPremiumAvailable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpLotteryHistory.GetHistory
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PageNo                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FDbLotteryHistory>  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FDbLotteryHistory> UDbpLotteryHistory::GetHistory(const int32 PageNo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpLotteryHistory", "GetHistory");

	Params::DbpLotteryHistory_GetHistory Parms{};

	Parms.PageNo = PageNo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpLotteryList.GetLottery
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   LotteryCode                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FDbLotteryParam            ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FDbLotteryParam UDbpLotteryList::GetLottery(const int32 LotteryCode) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpLotteryList", "GetLottery");

	Params::DbpLotteryList_GetLottery Parms{};

	Parms.LotteryCode = LotteryCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpLotteryList.GetLotteryList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FDbLotteryParam>    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FDbLotteryParam> UDbpLotteryList::GetLotteryList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpLotteryList", "GetLotteryList");

	Params::DbpLotteryList_GetLotteryList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpLotteryList.GetTicketCountSingle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpLotteryList::GetTicketCountSingle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpLotteryList", "GetTicketCountSingle");

	Params::DbpLotteryList_GetTicketCountSingle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpLotteryList.GetTicketCountTen
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpLotteryList::GetTicketCountTen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpLotteryList", "GetTicketCountTen");

	Params::DbpLotteryList_GetTicketCountTen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpLotteryRate.GetRateSheets
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FDbpLotteryRateSheet>     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FDbpLotteryRateSheet> UDbpLotteryRate::GetRateSheets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpLotteryRate", "GetRateSheets");

	Params::DbpLotteryRate_GetRateSheets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.GetAuraLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpMainMenu::GetAuraLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "GetAuraLevel");

	Params::DbpMainMenu_GetAuraLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.GetCharacterMasterData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FMasterDataCharacter             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FMasterDataCharacter UDbpMainMenu::GetCharacterMasterData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "GetCharacterMasterData");

	Params::DbpMainMenu_GetCharacterMasterData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.GetCostumeMasterData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FMasterDataCustomizeCostume      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FMasterDataCustomizeCostume UDbpMainMenu::GetCostumeMasterData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "GetCostumeMasterData");

	Params::DbpMainMenu_GetCostumeMasterData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.GetCurrencyCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECurrencyType                           EType                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpMainMenu::GetCurrencyCount(ECurrencyType EType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "GetCurrencyCount");

	Params::DbpMainMenu_GetCurrencyCount Parms{};

	Parms.EType = EType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.GetPlatformPlayerId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UDbpMainMenu::GetPlatformPlayerId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "GetPlatformPlayerId");

	Params::DbpMainMenu_GetPlatformPlayerId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.GetPlatformPlayerName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UDbpMainMenu::GetPlatformPlayerName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "GetPlatformPlayerName");

	Params::DbpMainMenu_GetPlatformPlayerName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.GetPlayerId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UDbpMainMenu::GetPlayerId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "GetPlayerId");

	Params::DbpMainMenu_GetPlayerId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.GetPlayerName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UDbpMainMenu::GetPlayerName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "GetPlayerName");

	Params::DbpMainMenu_GetPlayerName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.GetTutorialStepNo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETutorialStepNo                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ETutorialStepNo UDbpMainMenu::GetTutorialStepNo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "GetTutorialStepNo");

	Params::DbpMainMenu_GetTutorialStepNo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.IsFeatureOpened
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETutorialOpenFeature                    EFeature                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpMainMenu::IsFeatureOpened(ETutorialOpenFeature EFeature)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "IsFeatureOpened");

	Params::DbpMainMenu_IsFeatureOpened Parms{};

	Parms.EFeature = EFeature;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.CanKickMember
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           KickTargetPlayerId                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpMainMenu::CanKickMember(const class FString& KickTargetPlayerId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "CanKickMember");

	Params::DbpMainMenu_CanKickMember Parms{};

	Parms.KickTargetPlayerId = std::move(KickTargetPlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.GetAdList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FDbAdDataParam>     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FDbAdDataParam> UDbpMainMenu::GetAdList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "GetAdList");

	Params::DbpMainMenu_GetAdList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.GetBattleReadyMemberCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpMainMenu::GetBattleReadyMemberCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "GetBattleReadyMemberCount");

	Params::DbpMainMenu_GetBattleReadyMemberCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.GetCpuSquadMember
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FDbPlayerParam>           Result                                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UDbpMainMenu::GetCpuSquadMember(TArray<struct FDbPlayerParam>* Result) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "GetCpuSquadMember");

	Params::DbpMainMenu_GetCpuSquadMember Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function BackendSubsystem.DbpMainMenu.GetDedicatedServer
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ServerHost                                             (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ServerPort                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDbpMainMenu::GetDedicatedServer(class FString* ServerHost, int32* ServerPort) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "GetDedicatedServer");

	Params::DbpMainMenu_GetDedicatedServer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ServerHost != nullptr)
		*ServerHost = std::move(Parms.ServerHost);

	if (ServerPort != nullptr)
		*ServerPort = Parms.ServerPort;
}


// Function BackendSubsystem.DbpMainMenu.GetFetchedSquadConnectionServer
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           Host                                                   (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Port                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDbpMainMenu::GetFetchedSquadConnectionServer(class FString* Host, int32* Port) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "GetFetchedSquadConnectionServer");

	Params::DbpMainMenu_GetFetchedSquadConnectionServer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Host != nullptr)
		*Host = std::move(Parms.Host);

	if (Port != nullptr)
		*Port = Parms.Port;
}


// Function BackendSubsystem.DbpMainMenu.GetFetchedSquadMemberList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FDbSquadMemberParam>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FDbSquadMemberParam> UDbpMainMenu::GetFetchedSquadMemberList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "GetFetchedSquadMemberList");

	Params::DbpMainMenu_GetFetchedSquadMemberList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.GetGuildId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UDbpMainMenu::GetGuildId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "GetGuildId");

	Params::DbpMainMenu_GetGuildId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.GetGuildName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UDbpMainMenu::GetGuildName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "GetGuildName");

	Params::DbpMainMenu_GetGuildName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.GetInvitingList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FDbInvitingInfoParam>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FDbInvitingInfoParam> UDbpMainMenu::GetInvitingList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "GetInvitingList");

	Params::DbpMainMenu_GetInvitingList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.GetMaintenanceStartTime
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FDateTime                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FDateTime UDbpMainMenu::GetMaintenanceStartTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "GetMaintenanceStartTime");

	Params::DbpMainMenu_GetMaintenanceStartTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.GetMaxSquadMemberCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpMainMenu::GetMaxSquadMemberCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "GetMaxSquadMemberCount");

	Params::DbpMainMenu_GetMaxSquadMemberCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.GetSquadId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UDbpMainMenu::GetSquadId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "GetSquadId");

	Params::DbpMainMenu_GetSquadId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.GetSquadLeaderPlayerId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UDbpMainMenu::GetSquadLeaderPlayerId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "GetSquadLeaderPlayerId");

	Params::DbpMainMenu_GetSquadLeaderPlayerId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.GetSquadMember
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FDbPlayerParam             ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FDbPlayerParam UDbpMainMenu::GetSquadMember(const class FString& PlayerId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "GetSquadMember");

	Params::DbpMainMenu_GetSquadMember Parms{};

	Parms.PlayerId = std::move(PlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.GetSquadMemberCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpMainMenu::GetSquadMemberCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "GetSquadMemberCount");

	Params::DbpMainMenu_GetSquadMemberCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.GetSquadMemberList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FDbSquadMemberParam>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FDbSquadMemberParam> UDbpMainMenu::GetSquadMemberList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "GetSquadMemberList");

	Params::DbpMainMenu_GetSquadMemberList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.GetSquadPassword
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UDbpMainMenu::GetSquadPassword() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "GetSquadPassword");

	Params::DbpMainMenu_GetSquadPassword Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.GetUnreadNoticeCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpMainMenu::GetUnreadNoticeCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "GetUnreadNoticeCount");

	Params::DbpMainMenu_GetUnreadNoticeCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.GetVoiceChatEnabledSquadMemberCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpMainMenu::GetVoiceChatEnabledSquadMemberCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "GetVoiceChatEnabledSquadMemberCount");

	Params::DbpMainMenu_GetVoiceChatEnabledSquadMemberCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.IsAllSquadMemberReady
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpMainMenu::IsAllSquadMemberReady() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "IsAllSquadMemberReady");

	Params::DbpMainMenu_IsAllSquadMemberReady Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.IsBonusRemainsToday
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpMainMenu::IsBonusRemainsToday() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "IsBonusRemainsToday");

	Params::DbpMainMenu_IsBonusRemainsToday Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.IsFullSquadMember
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpMainMenu::IsFullSquadMember() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "IsFullSquadMember");

	Params::DbpMainMenu_IsFullSquadMember Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.IsMaintenanceTimeToSet
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpMainMenu::IsMaintenanceTimeToSet() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "IsMaintenanceTimeToSet");

	Params::DbpMainMenu_IsMaintenanceTimeToSet Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.IsReadyForLobbyMatching
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpMainMenu::IsReadyForLobbyMatching() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "IsReadyForLobbyMatching");

	Params::DbpMainMenu_IsReadyForLobbyMatching Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.IsSquadJoined
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpMainMenu::IsSquadJoined() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "IsSquadJoined");

	Params::DbpMainMenu_IsSquadJoined Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.IsSquadLeader
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpMainMenu::IsSquadLeader() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "IsSquadLeader");

	Params::DbpMainMenu_IsSquadLeader Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.IsSquadLoaded
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpMainMenu::IsSquadLoaded() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "IsSquadLoaded");

	Params::DbpMainMenu_IsSquadLoaded Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMainMenu.IsSquadMember
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           PlayerId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpMainMenu::IsSquadMember(const class FString& PlayerId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMainMenu", "IsSquadMember");

	Params::DbpMainMenu_IsSquadMember Parms{};

	Parms.PlayerId = std::move(PlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMissionCategoryList.GetEventList
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FMasterDataEvent>         EventList                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UDbpMissionCategoryList::GetEventList(TArray<struct FMasterDataEvent>* EventList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMissionCategoryList", "GetEventList");

	Params::DbpMissionCategoryList_GetEventList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (EventList != nullptr)
		*EventList = std::move(Parms.EventList);
}


// Function BackendSubsystem.DbpMissionCategoryList.GetMissionList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMdMissionCategory                      Category                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EventCode                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FDbMissionCategoryParam    ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FDbMissionCategoryParam UDbpMissionCategoryList::GetMissionList(const EMdMissionCategory Category, const int32 EventCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMissionCategoryList", "GetMissionList");

	Params::DbpMissionCategoryList_GetMissionList Parms{};

	Parms.Category = Category;
	Parms.EventCode = EventCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMyProfile.GetCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FMasterDataCharacter             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FMasterDataCharacter UDbpMyProfile::GetCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMyProfile", "GetCharacter");

	Params::DbpMyProfile_GetCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMyProfile.GetCostume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FMasterDataCustomizeCostume      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FMasterDataCustomizeCostume UDbpMyProfile::GetCostume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMyProfile", "GetCostume");

	Params::DbpMyProfile_GetCostume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMyProfile.GetEmblems
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FMasterDataEmblem>        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FMasterDataEmblem> UDbpMyProfile::GetEmblems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMyProfile", "GetEmblems");

	Params::DbpMyProfile_GetEmblems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMyProfile.GetPlatformPlayerName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UDbpMyProfile::GetPlatformPlayerName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMyProfile", "GetPlatformPlayerName");

	Params::DbpMyProfile_GetPlatformPlayerName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMyProfile.GetPlayerName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UDbpMyProfile::GetPlayerName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMyProfile", "GetPlayerName");

	Params::DbpMyProfile_GetPlayerName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMyProfile.GetProfile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UDbpMyProfile::GetProfile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMyProfile", "GetProfile");

	Params::DbpMyProfile_GetProfile Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMyProfile.GetBillboardPoint
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpMyProfile::GetBillboardPoint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMyProfile", "GetBillboardPoint");

	Params::DbpMyProfile_GetBillboardPoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMyProfile.GetBillboardRank
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpMyProfile::GetBillboardRank() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMyProfile", "GetBillboardRank");

	Params::DbpMyProfile_GetBillboardRank Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMyProfile.GetBillboardTodayPoint
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpMyProfile::GetBillboardTodayPoint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMyProfile", "GetBillboardTodayPoint");

	Params::DbpMyProfile_GetBillboardTodayPoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMyProfile.GetEquipAuraDisplayArea
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpMyProfile::GetEquipAuraDisplayArea() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMyProfile", "GetEquipAuraDisplayArea");

	Params::DbpMyProfile_GetEquipAuraDisplayArea Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMyProfile.GetEquipAuraDisplayTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpMyProfile::GetEquipAuraDisplayTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMyProfile", "GetEquipAuraDisplayTarget");

	Params::DbpMyProfile_GetEquipAuraDisplayTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMyProfile.GetEquipAuraLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpMyProfile::GetEquipAuraLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMyProfile", "GetEquipAuraLevel");

	Params::DbpMyProfile_GetEquipAuraLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMyProfile.GetLevel
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Level                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LevelPoint                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpMyProfile::GetLevel(int32* Level, int32* LevelPoint) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMyProfile", "GetLevel");

	Params::DbpMyProfile_GetLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Level != nullptr)
		*Level = Parms.Level;

	if (LevelPoint != nullptr)
		*LevelPoint = Parms.LevelPoint;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpMyProfile.GetRank
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMasterDataRankExp               Rank                                                   (Parm, OutParm, NativeAccessSpecifierPublic)
// int32                                   RankPoint                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpMyProfile::GetRank(struct FMasterDataRankExp* Rank, int32* RankPoint) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpMyProfile", "GetRank");

	Params::DbpMyProfile_GetRank Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Rank != nullptr)
		*Rank = std::move(Parms.Rank);

	if (RankPoint != nullptr)
		*RankPoint = Parms.RankPoint;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpNotice.GetInformationList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FDbInformationInfoParam>  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FDbInformationInfoParam> UDbpNotice::GetInformationList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpNotice", "GetInformationList");

	Params::DbpNotice_GetInformationList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpNotice.GetInvitation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           NoticeId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FDbInvitationInfoParam     ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FDbInvitationInfoParam UDbpNotice::GetInvitation(const class FString& NoticeId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpNotice", "GetInvitation");

	Params::DbpNotice_GetInvitation Parms{};

	Parms.NoticeId = std::move(NoticeId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpNotice.GetInvitationList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FDbInvitationInfoParam>   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FDbInvitationInfoParam> UDbpNotice::GetInvitationList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpNotice", "GetInvitationList");

	Params::DbpNotice_GetInvitationList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpNotice.GetMaxPageNo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ENoticeCategory                         ECategory                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpNotice::GetMaxPageNo(ENoticeCategory ECategory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpNotice", "GetMaxPageNo");

	Params::DbpNotice_GetMaxPageNo Parms{};

	Parms.ECategory = ECategory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpNotice.GetOpenedNotices
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FDbNoticeOpenedNoticeParam>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FDbNoticeOpenedNoticeParam> UDbpNotice::GetOpenedNotices()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpNotice", "GetOpenedNotices");

	Params::DbpNotice_GetOpenedNotices Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpNotice.GetPageNo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ENoticeCategory                         ECategory                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpNotice::GetPageNo(ENoticeCategory ECategory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpNotice", "GetPageNo");

	Params::DbpNotice_GetPageNo Parms{};

	Parms.ECategory = ECategory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpNotice.GetReceivedItems
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FDbInformationReceivedItemParam>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FDbInformationReceivedItemParam> UDbpNotice::GetReceivedItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpNotice", "GetReceivedItems");

	Params::DbpNotice_GetReceivedItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpNotice.GetRecommend
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FDbRecommendNoticeParam          ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FDbRecommendNoticeParam UDbpNotice::GetRecommend()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpNotice", "GetRecommend");

	Params::DbpNotice_GetRecommend Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpNotice.HasUnreadInvitation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpNotice::HasUnreadInvitation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpNotice", "HasUnreadInvitation");

	Params::DbpNotice_HasUnreadInvitation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpNotice.HasUnreadNotice
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpNotice::HasUnreadNotice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpNotice", "HasUnreadNotice");

	Params::DbpNotice_HasUnreadNotice Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpPlayableCharacterList.GetCharacterList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FDbMyCharacterParam>      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FDbMyCharacterParam> UDbpPlayableCharacterList::GetCharacterList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpPlayableCharacterList", "GetCharacterList");

	Params::DbpPlayableCharacterList_GetCharacterList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpRanking.GetAllRankingCodes
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const TArray<int32>                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

const TArray<int32> UDbpRanking::GetAllRankingCodes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpRanking", "GetAllRankingCodes");

	Params::DbpRanking_GetAllRankingCodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpRanking.GetAllRankingsForDebug
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const TArray<struct FDbRankingParam>    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

const TArray<struct FDbRankingParam> UDbpRanking::GetAllRankingsForDebug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpRanking", "GetAllRankingsForDebug");

	Params::DbpRanking_GetAllRankingsForDebug Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpRanking.GetBillboardChartRanking
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FDbRankingParam            ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FDbRankingParam UDbpRanking::GetBillboardChartRanking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpRanking", "GetBillboardChartRanking");

	Params::DbpRanking_GetBillboardChartRanking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpRanking.GetEventRankings
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const TArray<struct FDbRankingParam>    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FDbRankingParam> UDbpRanking::GetEventRankings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpRanking", "GetEventRankings");

	Params::DbpRanking_GetEventRankings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpRanking.GetGuildEliteRanking
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FDbRankingParam            ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FDbRankingParam UDbpRanking::GetGuildEliteRanking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpRanking", "GetGuildEliteRanking");

	Params::DbpRanking_GetGuildEliteRanking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpRanking.GetGuildTopRanking
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FDbRankingParam            ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FDbRankingParam UDbpRanking::GetGuildTopRanking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpRanking", "GetGuildTopRanking");

	Params::DbpRanking_GetGuildTopRanking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpRanking.GetMvpRanking
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FDbRankingParam            ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FDbRankingParam UDbpRanking::GetMvpRanking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpRanking", "GetMvpRanking");

	Params::DbpRanking_GetMvpRanking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpRanking.GetRankingByCode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FDbRankingParam            ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FDbRankingParam UDbpRanking::GetRankingByCode(const int32 Code)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpRanking", "GetRankingByCode");

	Params::DbpRanking_GetRankingByCode Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpResult.GetCurrentGold
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpResult::GetCurrentGold() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpResult", "GetCurrentGold");

	Params::DbpResult_GetCurrentGold Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpResult.GetCurrentGuildPoint
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpResult::GetCurrentGuildPoint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpResult", "GetCurrentGuildPoint");

	Params::DbpResult_GetCurrentGuildPoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpResult.GetCurrentPlayerLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpResult::GetCurrentPlayerLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpResult", "GetCurrentPlayerLevel");

	Params::DbpResult_GetCurrentPlayerLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpResult.GetCurrentPlayerLevelExp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpResult::GetCurrentPlayerLevelExp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpResult", "GetCurrentPlayerLevelExp");

	Params::DbpResult_GetCurrentPlayerLevelExp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpResult.GetCurrentPlayerRank
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMasterDataRankExp         ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FMasterDataRankExp UDbpResult::GetCurrentPlayerRank() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpResult", "GetCurrentPlayerRank");

	Params::DbpResult_GetCurrentPlayerRank Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpResult.GetCurrentPlayerRankExp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpResult::GetCurrentPlayerRankExp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpResult", "GetCurrentPlayerRankExp");

	Params::DbpResult_GetCurrentPlayerRankExp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpResult.GetCurrentSeasonPassRank
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpResult::GetCurrentSeasonPassRank() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpResult", "GetCurrentSeasonPassRank");

	Params::DbpResult_GetCurrentSeasonPassRank Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpResult.GetCurrentSeasonPassRankExp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpResult::GetCurrentSeasonPassRankExp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpResult", "GetCurrentSeasonPassRankExp");

	Params::DbpResult_GetCurrentSeasonPassRankExp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpResult.GetCurrentSpecialLicenseRank
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpResult::GetCurrentSpecialLicenseRank() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpResult", "GetCurrentSpecialLicenseRank");

	Params::DbpResult_GetCurrentSpecialLicenseRank Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpResult.GetCurrentSpecialLicenseRankExp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpResult::GetCurrentSpecialLicenseRankExp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpResult", "GetCurrentSpecialLicenseRankExp");

	Params::DbpResult_GetCurrentSpecialLicenseRankExp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpResult.GetGuildId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UDbpResult::GetGuildId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpResult", "GetGuildId");

	Params::DbpResult_GetGuildId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpResult.GetGuildName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UDbpResult::GetGuildName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpResult", "GetGuildName");

	Params::DbpResult_GetGuildName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpResult.GetPrevGold
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpResult::GetPrevGold() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpResult", "GetPrevGold");

	Params::DbpResult_GetPrevGold Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpResult.GetPrevPlayerLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpResult::GetPrevPlayerLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpResult", "GetPrevPlayerLevel");

	Params::DbpResult_GetPrevPlayerLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpResult.GetPrevPlayerLevelExp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpResult::GetPrevPlayerLevelExp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpResult", "GetPrevPlayerLevelExp");

	Params::DbpResult_GetPrevPlayerLevelExp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpResult.GetPrevPlayerRank
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMasterDataRankExp         ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FMasterDataRankExp UDbpResult::GetPrevPlayerRank() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpResult", "GetPrevPlayerRank");

	Params::DbpResult_GetPrevPlayerRank Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpResult.GetPrevPlayerRankExp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpResult::GetPrevPlayerRankExp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpResult", "GetPrevPlayerRankExp");

	Params::DbpResult_GetPrevPlayerRankExp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpResult.GetPrevSeasonPassRank
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpResult::GetPrevSeasonPassRank() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpResult", "GetPrevSeasonPassRank");

	Params::DbpResult_GetPrevSeasonPassRank Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpResult.GetPrevSeasonPassRankExp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpResult::GetPrevSeasonPassRankExp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpResult", "GetPrevSeasonPassRankExp");

	Params::DbpResult_GetPrevSeasonPassRankExp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpResult.HasTopLicense
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpResult::HasTopLicense() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpResult", "HasTopLicense");

	Params::DbpResult_HasTopLicense Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSeason.AddSpecialLicenseExp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Exp                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDbpSeason::AddSpecialLicenseExp(const int32 Exp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSeason", "AddSpecialLicenseExp");

	Params::DbpSeason_AddSpecialLicenseExp Parms{};

	Parms.Exp = Exp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.DbpSeason.CanBuyProLicense
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpSeason::CanBuyProLicense() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSeason", "CanBuyProLicense");

	Params::DbpSeason_CanBuyProLicense Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSeason.CanBuyProLicenseWithExp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpSeason::CanBuyProLicenseWithExp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSeason", "CanBuyProLicenseWithExp");

	Params::DbpSeason_CanBuyProLicenseWithExp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSeason.GetAvailableSpecialLicenseExpCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpSeason::GetAvailableSpecialLicenseExpCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSeason", "GetAvailableSpecialLicenseExpCount");

	Params::DbpSeason_GetAvailableSpecialLicenseExpCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSeason.GetHeroCrystal
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpSeason::GetHeroCrystal() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSeason", "GetHeroCrystal");

	Params::DbpSeason_GetHeroCrystal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSeason.GetNextRankExp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpSeason::GetNextRankExp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSeason", "GetNextRankExp");

	Params::DbpSeason_GetNextRankExp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSeason.GetProLicensePrice
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpSeason::GetProLicensePrice() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSeason", "GetProLicensePrice");

	Params::DbpSeason_GetProLicensePrice Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSeason.GetProLicensePriceWithExp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpSeason::GetProLicensePriceWithExp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSeason", "GetProLicensePriceWithExp");

	Params::DbpSeason_GetProLicensePriceWithExp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSeason.GetRewardRange
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   RankFrom                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RankTo                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FDbSeasonPassParam>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FDbSeasonPassParam> UDbpSeason::GetRewardRange(const int32 RankFrom, const int32 RankTo) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSeason", "GetRewardRange");

	Params::DbpSeason_GetRewardRange Parms{};

	Parms.RankFrom = RankFrom;
	Parms.RankTo = RankTo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSeason.GetRewards
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Rank                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FDbSeasonPassParam>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FDbSeasonPassParam> UDbpSeason::GetRewards(const int32 Rank) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSeason", "GetRewards");

	Params::DbpSeason_GetRewards Parms{};

	Parms.Rank = Rank;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSeason.GetSeasonInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FDbSeasonParam             ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FDbSeasonParam UDbpSeason::GetSeasonInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSeason", "GetSeasonInfo");

	Params::DbpSeason_GetSeasonInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSeason.GetSpecialLicenseExp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpSeason::GetSpecialLicenseExp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSeason", "GetSpecialLicenseExp");

	Params::DbpSeason_GetSpecialLicenseExp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSeason.GetSpecialLicenseExpPrice
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpSeason::GetSpecialLicenseExpPrice() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSeason", "GetSpecialLicenseExpPrice");

	Params::DbpSeason_GetSpecialLicenseExpPrice Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSeason.GetSpecialLicenseLastRewards
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FDbSpecialLicenseReward>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FDbSpecialLicenseReward> UDbpSeason::GetSpecialLicenseLastRewards() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSeason", "GetSpecialLicenseLastRewards");

	Params::DbpSeason_GetSpecialLicenseLastRewards Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSeason.GetSpecialLicenseList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<int32, struct FDbSpecialLicenseParam>ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<int32, struct FDbSpecialLicenseParam> UDbpSeason::GetSpecialLicenseList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSeason", "GetSpecialLicenseList");

	Params::DbpSeason_GetSpecialLicenseList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSeason.GetSpecialLicenseMaxExp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpSeason::GetSpecialLicenseMaxExp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSeason", "GetSpecialLicenseMaxExp");

	Params::DbpSeason_GetSpecialLicenseMaxExp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSeason.GetSpecialLicenseRank
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpSeason::GetSpecialLicenseRank() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSeason", "GetSpecialLicenseRank");

	Params::DbpSeason_GetSpecialLicenseRank Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSeason.GetStockItems
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TMap<struct FDbItemCategoryParam, int32>ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<struct FDbItemCategoryParam, int32> UDbpSeason::GetStockItems() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSeason", "GetStockItems");

	Params::DbpSeason_GetStockItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSeason.HasProLicense
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpSeason::HasProLicense() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSeason", "HasProLicense");

	Params::DbpSeason_HasProLicense Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSetting.SetCurrentRegionCode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDbpSetting::SetCurrentRegionCode(const int32 Code)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSetting", "SetCurrentRegionCode");

	Params::DbpSetting_SetCurrentRegionCode Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.DbpSetting.GetActiveInputDeviceId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UDbpSetting::GetActiveInputDeviceId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSetting", "GetActiveInputDeviceId");

	Params::DbpSetting_GetActiveInputDeviceId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSetting.GetActiveOutputDeviceId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UDbpSetting::GetActiveOutputDeviceId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSetting", "GetActiveOutputDeviceId");

	Params::DbpSetting_GetActiveOutputDeviceId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSetting.GetAuraDisplayArea
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpSetting::GetAuraDisplayArea() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSetting", "GetAuraDisplayArea");

	Params::DbpSetting_GetAuraDisplayArea Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSetting.GetAuraDisplayTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpSetting::GetAuraDisplayTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSetting", "GetAuraDisplayTarget");

	Params::DbpSetting_GetAuraDisplayTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSetting.GetCurrentRegion
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FDbMatchingRegionSettingParam    ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FDbMatchingRegionSettingParam UDbpSetting::GetCurrentRegion() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSetting", "GetCurrentRegion");

	Params::DbpSetting_GetCurrentRegion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSetting.GetCurrentRegionCode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpSetting::GetCurrentRegionCode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSetting", "GetCurrentRegionCode");

	Params::DbpSetting_GetCurrentRegionCode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSetting.GetFundSettlementText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UDbpSetting::GetFundSettlementText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSetting", "GetFundSettlementText");

	Params::DbpSetting_GetFundSettlementText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSetting.GetInputDeviceList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FDbSoundDevice>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FDbSoundDevice> UDbpSetting::GetInputDeviceList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSetting", "GetInputDeviceList");

	Params::DbpSetting_GetInputDeviceList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSetting.GetMatchingRegions
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<int32, struct FDbMatchingRegionSettingParam>ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<int32, struct FDbMatchingRegionSettingParam> UDbpSetting::GetMatchingRegions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSetting", "GetMatchingRegions");

	Params::DbpSetting_GetMatchingRegions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSetting.GetOutputDeviceList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FDbSoundDevice>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FDbSoundDevice> UDbpSetting::GetOutputDeviceList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSetting", "GetOutputDeviceList");

	Params::DbpSetting_GetOutputDeviceList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSetting.GetTokushoText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UDbpSetting::GetTokushoText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSetting", "GetTokushoText");

	Params::DbpSetting_GetTokushoText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSetting.GetTrackingNumber
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UDbpSetting::GetTrackingNumber() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSetting", "GetTrackingNumber");

	Params::DbpSetting_GetTrackingNumber Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSetting.GetVoiceChatVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpSetting::GetVoiceChatVolume() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSetting", "GetVoiceChatVolume");

	Params::DbpSetting_GetVoiceChatVolume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSetting.IsPublicBattleRecord
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpSetting::IsPublicBattleRecord() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSetting", "IsPublicBattleRecord");

	Params::DbpSetting_IsPublicBattleRecord Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpSetting.IsVoiceChatEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDbpSetting::IsVoiceChatEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpSetting", "IsVoiceChatEnabled");

	Params::DbpSetting_IsVoiceChatEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpShopList.GetCurrencyCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECurrencyType                           EType                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDbpShopList::GetCurrencyCount(ECurrencyType EType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpShopList", "GetCurrencyCount");

	Params::DbpShopList_GetCurrencyCount Parms{};

	Parms.EType = EType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpShopList.GetMiscShopCodes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> UDbpShopList::GetMiscShopCodes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpShopList", "GetMiscShopCodes");

	Params::DbpShopList_GetMiscShopCodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpShopList.GetNormalShopCodes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> UDbpShopList::GetNormalShopCodes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpShopList", "GetNormalShopCodes");

	Params::DbpShopList_GetNormalShopCodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpShopList.GetPremiumShopCodes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> UDbpShopList::GetPremiumShopCodes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpShopList", "GetPremiumShopCodes");

	Params::DbpShopList_GetPremiumShopCodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpShopList.GetShop
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ShopCode                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FDbShopParam               ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FDbShopParam UDbpShopList::GetShop(const int32 ShopCode) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpShopList", "GetShop");

	Params::DbpShopList_GetShop Parms{};

	Parms.ShopCode = ShopCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpShopList.GetShopCodes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> UDbpShopList::GetShopCodes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpShopList", "GetShopCodes");

	Params::DbpShopList_GetShopCodes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.DbpShopList.GetShopItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ShopCode                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ShopItemCode                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FDbShopItemParam           ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FDbShopItemParam UDbpShopList::GetShopItem(const int32 ShopCode, const int32 ShopItemCode) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DbpShopList", "GetShopItem");

	Params::DbpShopList_GetShopItem Parms{};

	Parms.ShopCode = ShopCode;
	Parms.ShopItemCode = ShopItemCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.MasterDataCache.Clear
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bLock                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMasterDataCache::Clear(bool bLock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "Clear");

	Params::MasterDataCache_Clear Parms{};

	Parms.bLock = bLock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BackendSubsystem.MasterDataCache.GetAbandonedVoice
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataAbandonedVoice        MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetAbandonedVoice(int32 Code, struct FMasterDataAbandonedVoice* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetAbandonedVoice");

	Params::MasterDataCache_GetAbandonedVoice Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetAbility
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataAbility               MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetAbility(int32 Code, struct FMasterDataAbility* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetAbility");

	Params::MasterDataCache_GetAbility Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetBonusExp
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataBonusExp              MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetBonusExp(int32 Code, struct FMasterDataBonusExp* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetBonusExp");

	Params::MasterDataCache_GetBonusExp Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetCharacter
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataCharacter             MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetCharacter(int32 Code, struct FMasterDataCharacter* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetCharacter");

	Params::MasterDataCache_GetCharacter Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetConfigValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EConfigKeyValueEkey                     Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMasterDataCache::GetConfigValue(EConfigKeyValueEkey Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetConfigValue");

	Params::MasterDataCache_GetConfigValue Parms{};

	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.MasterDataCache.GetCurrency
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataCurrency              MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetCurrency(int32 Code, struct FMasterDataCurrency* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetCurrency");

	Params::MasterDataCache_GetCurrency Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetCurrencyCode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ECurrencyType                           Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMasterDataCache::GetCurrencyCode(ECurrencyType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetCurrencyCode");

	Params::MasterDataCache_GetCurrencyCode Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.MasterDataCache.GetCustomizeCostume
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataCustomizeCostume      MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetCustomizeCostume(int32 Code, struct FMasterDataCustomizeCostume* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetCustomizeCostume");

	Params::MasterDataCache_GetCustomizeCostume Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetCustomizeEmote
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataCustomizeEmote        MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetCustomizeEmote(int32 Code, struct FMasterDataCustomizeEmote* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetCustomizeEmote");

	Params::MasterDataCache_GetCustomizeEmote Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetCustomizeVoice
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataCustomizeVoice        MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetCustomizeVoice(int32 Code, struct FMasterDataCustomizeVoice* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetCustomizeVoice");

	Params::MasterDataCache_GetCustomizeVoice Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetDedicatedVoice
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataDedicatedVoice        MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetDedicatedVoice(int32 Code, struct FMasterDataDedicatedVoice* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetDedicatedVoice");

	Params::MasterDataCache_GetDedicatedVoice Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetDefaultEquipSet
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataDefaultEquipSet       MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetDefaultEquipSet(int32 Code, struct FMasterDataDefaultEquipSet* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetDefaultEquipSet");

	Params::MasterDataCache_GetDefaultEquipSet Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetEmblem
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataEmblem                MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetEmblem(int32 Code, struct FMasterDataEmblem* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetEmblem");

	Params::MasterDataCache_GetEmblem Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetEvent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataEvent                 MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetEvent(int32 Code, struct FMasterDataEvent* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetEvent");

	Params::MasterDataCache_GetEvent Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetGallery
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataGallery               MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetGallery(int32 Code, struct FMasterDataGallery* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetGallery");

	Params::MasterDataCache_GetGallery Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetGameMode
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataGameMode              MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetGameMode(int32 Code, struct FMasterDataGameMode* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetGameMode");

	Params::MasterDataCache_GetGameMode Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetGmDisplayName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataGameMode              MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetGmDisplayName(int32 Code, struct FMasterDataGameMode* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetGmDisplayName");

	Params::MasterDataCache_GetGmDisplayName Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetGuildEmblem
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataGuildEmblem           MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetGuildEmblem(int32 Code, struct FMasterDataGuildEmblem* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetGuildEmblem");

	Params::MasterDataCache_GetGuildEmblem Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetGuildInstitution
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataGuildInstitution      MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetGuildInstitution(int32 Code, struct FMasterDataGuildInstitution* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetGuildInstitution");

	Params::MasterDataCache_GetGuildInstitution Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetGuildLeague
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataMGuildLeagues         MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetGuildLeague(int32 Code, struct FMasterDataMGuildLeagues* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetGuildLeague");

	Params::MasterDataCache_GetGuildLeague Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetGuildLevel
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataGuildLevel            MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetGuildLevel(int32 Code, struct FMasterDataGuildLevel* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetGuildLevel");

	Params::MasterDataCache_GetGuildLevel Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetItemCategory
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataItemCategory          MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetItemCategory(int32 Code, struct FMasterDataItemCategory* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetItemCategory");

	Params::MasterDataCache_GetItemCategory Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetLoginBonus
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataLoginBonus            MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetLoginBonus(int32 Code, struct FMasterDataLoginBonus* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetLoginBonus");

	Params::MasterDataCache_GetLoginBonus Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetLottery
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataLottery               MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetLottery(int32 Code, struct FMasterDataLottery* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetLottery");

	Params::MasterDataCache_GetLottery Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetMission
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataMission               MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetMission(int32 Code, struct FMasterDataMission* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetMission");

	Params::MasterDataCache_GetMission Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetMissionPattern
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataMissionPattern        MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetMissionPattern(int32 Code, struct FMasterDataMissionPattern* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetMissionPattern");

	Params::MasterDataCache_GetMissionPattern Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetMissionStar
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataMissionStar           MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetMissionStar(int32 Code, struct FMasterDataMissionStar* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetMissionStar");

	Params::MasterDataCache_GetMissionStar Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetMLootboxPayment
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataMLootboxPayment       MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetMLootboxPayment(int32 Code, struct FMasterDataMLootboxPayment* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetMLootboxPayment");

	Params::MasterDataCache_GetMLootboxPayment Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetMRandomItemWin
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataMRandomItemWin        MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetMRandomItemWin(int32 Code, struct FMasterDataMRandomItemWin* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetMRandomItemWin");

	Params::MasterDataCache_GetMRandomItemWin Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetMRanking
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataMRanking              MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetMRanking(int32 Code, struct FMasterDataMRanking* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetMRanking");

	Params::MasterDataCache_GetMRanking Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetMSpecialEffect
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataMSpecialEffect        MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetMSpecialEffect(int32 Code, struct FMasterDataMSpecialEffect* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetMSpecialEffect");

	Params::MasterDataCache_GetMSpecialEffect Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetMyAdMessage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataMyAdMessage           MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetMyAdMessage(int32 Code, struct FMasterDataMyAdMessage* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetMyAdMessage");

	Params::MasterDataCache_GetMyAdMessage Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetMyAdParts
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataMyAdParts             MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetMyAdParts(int32 Code, struct FMasterDataMyAdParts* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetMyAdParts");

	Params::MasterDataCache_GetMyAdParts Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetPack
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataPack                  MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetPack(int32 Code, struct FMasterDataPack* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetPack");

	Params::MasterDataCache_GetPack Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetPackItem
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataPackItem              MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetPackItem(int32 Code, struct FMasterDataPackItem* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetPackItem");

	Params::MasterDataCache_GetPackItem Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetPenaltyPoint
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataPenaltyPoint          MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetPenaltyPoint(int32 Code, struct FMasterDataPenaltyPoint* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetPenaltyPoint");

	Params::MasterDataCache_GetPenaltyPoint Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetPlayerExp
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataPlayerExp             MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetPlayerExp(int32 Code, struct FMasterDataPlayerExp* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetPlayerExp");

	Params::MasterDataCache_GetPlayerExp Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetPlayMenuMenulist
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataPlayMenuMenulist      MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetPlayMenuMenulist(int32 Code, struct FMasterDataPlayMenuMenulist* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetPlayMenuMenulist");

	Params::MasterDataCache_GetPlayMenuMenulist Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetPlayMode
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataPlayMode              MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetPlayMode(int32 Code, struct FMasterDataPlayMode* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetPlayMode");

	Params::MasterDataCache_GetPlayMode Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetRankExp
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataRankExp               MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetRankExp(int32 Code, struct FMasterDataRankExp* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetRankExp");

	Params::MasterDataCache_GetRankExp Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetRankPoint
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataRankPoint             MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetRankPoint(int32 Code, struct FMasterDataRankPoint* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetRankPoint");

	Params::MasterDataCache_GetRankPoint Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetRecommendNotice
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataRecommendNotice       MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetRecommendNotice(int32 Code, struct FMasterDataRecommendNotice* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetRecommendNotice");

	Params::MasterDataCache_GetRecommendNotice Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetScore
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataScore                 MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetScore(int32 Code, struct FMasterDataScore* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetScore");

	Params::MasterDataCache_GetScore Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetScoreRank
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataScoreRank             MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetScoreRank(int32 Code, struct FMasterDataScoreRank* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetScoreRank");

	Params::MasterDataCache_GetScoreRank Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetScreenId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EScreenName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMasterDataCache::GetScreenId(const EScreenName Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetScreenId");

	Params::MasterDataCache_GetScreenId Parms{};

	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BackendSubsystem.MasterDataCache.GetSeason
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataSeason                MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetSeason(int32 Code, struct FMasterDataSeason* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetSeason");

	Params::MasterDataCache_GetSeason Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetShop
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataShop                  MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetShop(int32 Code, struct FMasterDataShop* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetShop");

	Params::MasterDataCache_GetShop Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetShopItem
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataShopItem              MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetShopItem(int32 Code, struct FMasterDataShopItem* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetShopItem");

	Params::MasterDataCache_GetShopItem Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetSpecialLicense
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataSpecialLicense        MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetSpecialLicense(int32 Code, struct FMasterDataSpecialLicense* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetSpecialLicense");

	Params::MasterDataCache_GetSpecialLicense Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetTipsText
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataTipsText              MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetTipsText(int32 Code, struct FMasterDataTipsText* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetTipsText");

	Params::MasterDataCache_GetTipsText Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}


// Function BackendSubsystem.MasterDataCache.GetVariation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Code                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMasterDataVariation             MasterData                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UMasterDataCache::GetVariation(int32 Code, struct FMasterDataVariation* MasterData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MasterDataCache", "GetVariation");

	Params::MasterDataCache_GetVariation Parms{};

	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MasterData != nullptr)
		*MasterData = std::move(Parms.MasterData);
}

}

