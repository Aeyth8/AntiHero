#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CommonModule

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "DevelopMenu_structs.hpp"
#include "CommonModule_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "AntiCheatModule_classes.hpp"


namespace SDK
{

// Class CommonModule.CommonStatics
// 0x0000 (0x0028 - 0x0028)
class UCommonStatics final : public UBlueprintFunctionLibrary
{
public:
	static class ULevelStreaming* FindSubLevel(class UWorld* World, class FName LevelName);
	static class FString GetCurrentMapName(const class UObject* WorldContextObject);
	static void SetLevelVisible(const class UObject* WorldContextObject, class FName LevelName, bool bVisible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonStatics">();
	}
	static class UCommonStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonStatics>();
	}
};
static_assert(alignof(UCommonStatics) == 0x000008, "Wrong alignment on UCommonStatics");
static_assert(sizeof(UCommonStatics) == 0x000028, "Wrong size on UCommonStatics");

// Class CommonModule.DebugDataViewerSubsystem
// 0x0000 (0x0030 - 0x0030)
class UDebugDataViewerSubsystem final : public UGameInstanceSubsystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DebugDataViewerSubsystem">();
	}
	static class UDebugDataViewerSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDebugDataViewerSubsystem>();
	}
};
static_assert(alignof(UDebugDataViewerSubsystem) == 0x000008, "Wrong alignment on UDebugDataViewerSubsystem");
static_assert(sizeof(UDebugDataViewerSubsystem) == 0x000030, "Wrong size on UDebugDataViewerSubsystem");

// Class CommonModule.DevelopActor
// 0x0020 (0x0240 - 0x0220)
class ADevelopActor final : public AActor
{
public:
	uint8                                         Pad_220[0x8];                                      // 0x0220(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      _openDevMenuOwner;                                 // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FDevelopMenuItemData>           _devMenuItemsData;                                 // 0x0230(0x0010)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate)

public:
	void BP_OnCallConsoleCmd();
	void BP_OnChangedDevelopMenu(bool bOpen);
	void BP_OnChangedDevelopPause(bool bPause);
	void MulticastOpenDevelopMenu(bool bPause, const class APlayerController* PauseOwner, const class FString& PauseOwnerName);
	void MulticastSetDevPause(bool bPause, bool bStep);
	void OnRep_DevMenuItemsData();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DevelopActor">();
	}
	static class ADevelopActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADevelopActor>();
	}
};
static_assert(alignof(ADevelopActor) == 0x000008, "Wrong alignment on ADevelopActor");
static_assert(sizeof(ADevelopActor) == 0x000240, "Wrong size on ADevelopActor");
static_assert(offsetof(ADevelopActor, _openDevMenuOwner) == 0x000228, "Member 'ADevelopActor::_openDevMenuOwner' has a wrong offset!");
static_assert(offsetof(ADevelopActor, _devMenuItemsData) == 0x000230, "Member 'ADevelopActor::_devMenuItemsData' has a wrong offset!");

// Class CommonModule.DevelopCharacterSelector
// 0x0008 (0x0038 - 0x0030)
class UDevelopCharacterSelector final : public UEngineSubsystem
{
public:
	ECharacterId                                  SpawnCharacterID;                                  // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	ECharacterId ConvertStringToEnum(const class FString& CharacterIdString);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DevelopCharacterSelector">();
	}
	static class UDevelopCharacterSelector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDevelopCharacterSelector>();
	}
};
static_assert(alignof(UDevelopCharacterSelector) == 0x000008, "Wrong alignment on UDevelopCharacterSelector");
static_assert(sizeof(UDevelopCharacterSelector) == 0x000038, "Wrong size on UDevelopCharacterSelector");
static_assert(offsetof(UDevelopCharacterSelector, SpawnCharacterID) == 0x000030, "Member 'UDevelopCharacterSelector::SpawnCharacterID' has a wrong offset!");
static_assert(offsetof(UDevelopCharacterSelector, Enable) == 0x000031, "Member 'UDevelopCharacterSelector::Enable' has a wrong offset!");

// Class CommonModule.GameModeCommon
// 0x0008 (0x0310 - 0x0308)
class AGameModeCommon : public AAntiCheatGameMode
{
public:
	class UAgonesComponent*                       _agonesSDK;                                        // 0x0308(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameModeCommon">();
	}
	static class AGameModeCommon* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGameModeCommon>();
	}
};
static_assert(alignof(AGameModeCommon) == 0x000008, "Wrong alignment on AGameModeCommon");
static_assert(sizeof(AGameModeCommon) == 0x000310, "Wrong size on AGameModeCommon");
static_assert(offsetof(AGameModeCommon, _agonesSDK) == 0x000308, "Member 'AGameModeCommon::_agonesSDK' has a wrong offset!");

// Class CommonModule.GameSessionCommon
// 0x0000 (0x0238 - 0x0238)
class AGameSessionCommon : public AGameSession
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSessionCommon">();
	}
	static class AGameSessionCommon* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGameSessionCommon>();
	}
};
static_assert(alignof(AGameSessionCommon) == 0x000008, "Wrong alignment on AGameSessionCommon");
static_assert(sizeof(AGameSessionCommon) == 0x000238, "Wrong size on AGameSessionCommon");

// Class CommonModule.GameStateCommon
// 0x0000 (0x0290 - 0x0290)
class AGameStateCommon : public AGameState
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameStateCommon">();
	}
	static class AGameStateCommon* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGameStateCommon>();
	}
};
static_assert(alignof(AGameStateCommon) == 0x000008, "Wrong alignment on AGameStateCommon");
static_assert(sizeof(AGameStateCommon) == 0x000290, "Wrong size on AGameStateCommon");

// Class CommonModule.ImGuiTest
// 0x0000 (0x0220 - 0x0220)
class AImGuiTest final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ImGuiTest">();
	}
	static class AImGuiTest* GetDefaultObj()
	{
		return GetDefaultObjImpl<AImGuiTest>();
	}
};
static_assert(alignof(AImGuiTest) == 0x000008, "Wrong alignment on AImGuiTest");
static_assert(sizeof(AImGuiTest) == 0x000220, "Wrong size on AImGuiTest");

// Class CommonModule.PlayerStateCommon
// 0x0000 (0x0320 - 0x0320)
class APlayerStateCommon : public APlayerState
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayerStateCommon">();
	}
	static class APlayerStateCommon* GetDefaultObj()
	{
		return GetDefaultObjImpl<APlayerStateCommon>();
	}
};
static_assert(alignof(APlayerStateCommon) == 0x000008, "Wrong alignment on APlayerStateCommon");
static_assert(sizeof(APlayerStateCommon) == 0x000320, "Wrong size on APlayerStateCommon");

// Class CommonModule.RegionSubsystem
// 0x0000 (0x0030 - 0x0030)
class URegionSubsystem final : public UGameInstanceSubsystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RegionSubsystem">();
	}
	static class URegionSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<URegionSubsystem>();
	}
};
static_assert(alignof(URegionSubsystem) == 0x000008, "Wrong alignment on URegionSubsystem");
static_assert(sizeof(URegionSubsystem) == 0x000030, "Wrong size on URegionSubsystem");

// Class CommonModule.SceneManagerSubsystem
// 0x0020 (0x0050 - 0x0030)
class USceneManagerSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x20];                                      // 0x0030(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SceneManagerSubsystem">();
	}
	static class USceneManagerSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USceneManagerSubsystem>();
	}
};
static_assert(alignof(USceneManagerSubsystem) == 0x000008, "Wrong alignment on USceneManagerSubsystem");
static_assert(sizeof(USceneManagerSubsystem) == 0x000050, "Wrong size on USceneManagerSubsystem");

// Class CommonModule.SequenceComponent
// 0x0058 (0x0108 - 0x00B0)
class USequenceComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B0[0x58];                                      // 0x00B0(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SequenceComponent">();
	}
	static class USequenceComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USequenceComponent>();
	}
};
static_assert(alignof(USequenceComponent) == 0x000008, "Wrong alignment on USequenceComponent");
static_assert(sizeof(USequenceComponent) == 0x000108, "Wrong size on USequenceComponent");

// Class CommonModule.SequenceController
// 0x0018 (0x0040 - 0x0028)
class USequenceController final : public UObject
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SequenceController">();
	}
	static class USequenceController* GetDefaultObj()
	{
		return GetDefaultObjImpl<USequenceController>();
	}
};
static_assert(alignof(USequenceController) == 0x000008, "Wrong alignment on USequenceController");
static_assert(sizeof(USequenceController) == 0x000040, "Wrong size on USequenceController");

// Class CommonModule.SequenceInterface
// 0x0000 (0x0028 - 0x0028)
class ISequenceInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SequenceInterface">();
	}
	static class ISequenceInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISequenceInterface>();
	}
};
static_assert(alignof(ISequenceInterface) == 0x000008, "Wrong alignment on ISequenceInterface");
static_assert(sizeof(ISequenceInterface) == 0x000028, "Wrong size on ISequenceInterface");

// Class CommonModule.UMGInterface
// 0x0000 (0x0028 - 0x0028)
class IUMGInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UMGInterface">();
	}
	static class IUMGInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IUMGInterface>();
	}
};
static_assert(alignof(IUMGInterface) == 0x000008, "Wrong alignment on IUMGInterface");
static_assert(sizeof(IUMGInterface) == 0x000028, "Wrong size on IUMGInterface");

}

