#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OutGameModule

#include "Basic.hpp"

#include "UIFramework_structs.hpp"
#include "CommonModule_structs.hpp"
#include "GameModule_structs.hpp"
#include "SlateCore_structs.hpp"
#include "BackendSubsystem_structs.hpp"
#include "UMG_structs.hpp"
#include "OutGameModule_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "MasterDataModule_structs.hpp"
#include "InputCore_structs.hpp"
#include "BykingUnrealModule_structs.hpp"


namespace SDK::Params
{

// Function OutGameModule.AccountLinkageWidget.OnDecideLinkableWindow
// 0x0010 (0x0010 - 0x0000)
struct AccountLinkageWidget_OnDecideLinkableWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AccountLinkageWidget_OnDecideLinkableWindow) == 0x000008, "Wrong alignment on AccountLinkageWidget_OnDecideLinkableWindow");
static_assert(sizeof(AccountLinkageWidget_OnDecideLinkableWindow) == 0x000010, "Wrong size on AccountLinkageWidget_OnDecideLinkableWindow");
static_assert(offsetof(AccountLinkageWidget_OnDecideLinkableWindow, Widget) == 0x000000, "Member 'AccountLinkageWidget_OnDecideLinkableWindow::Widget' has a wrong offset!");
static_assert(offsetof(AccountLinkageWidget_OnDecideLinkableWindow, InputType) == 0x000008, "Member 'AccountLinkageWidget_OnDecideLinkableWindow::InputType' has a wrong offset!");
static_assert(offsetof(AccountLinkageWidget_OnDecideLinkableWindow, LeftButton) == 0x000009, "Member 'AccountLinkageWidget_OnDecideLinkableWindow::LeftButton' has a wrong offset!");

// Function OutGameModule.AccountLinkageWidget.OnDecideLinkedConfirmWindow
// 0x0010 (0x0010 - 0x0000)
struct AccountLinkageWidget_OnDecideLinkedConfirmWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AccountLinkageWidget_OnDecideLinkedConfirmWindow) == 0x000008, "Wrong alignment on AccountLinkageWidget_OnDecideLinkedConfirmWindow");
static_assert(sizeof(AccountLinkageWidget_OnDecideLinkedConfirmWindow) == 0x000010, "Wrong size on AccountLinkageWidget_OnDecideLinkedConfirmWindow");
static_assert(offsetof(AccountLinkageWidget_OnDecideLinkedConfirmWindow, Widget) == 0x000000, "Member 'AccountLinkageWidget_OnDecideLinkedConfirmWindow::Widget' has a wrong offset!");
static_assert(offsetof(AccountLinkageWidget_OnDecideLinkedConfirmWindow, InputType) == 0x000008, "Member 'AccountLinkageWidget_OnDecideLinkedConfirmWindow::InputType' has a wrong offset!");
static_assert(offsetof(AccountLinkageWidget_OnDecideLinkedConfirmWindow, LeftButton) == 0x000009, "Member 'AccountLinkageWidget_OnDecideLinkedConfirmWindow::LeftButton' has a wrong offset!");

// Function OutGameModule.AccountLinkageWidget.OnDecideLinkedWindow
// 0x0010 (0x0010 - 0x0000)
struct AccountLinkageWidget_OnDecideLinkedWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AccountLinkageWidget_OnDecideLinkedWindow) == 0x000008, "Wrong alignment on AccountLinkageWidget_OnDecideLinkedWindow");
static_assert(sizeof(AccountLinkageWidget_OnDecideLinkedWindow) == 0x000010, "Wrong size on AccountLinkageWidget_OnDecideLinkedWindow");
static_assert(offsetof(AccountLinkageWidget_OnDecideLinkedWindow, Widget) == 0x000000, "Member 'AccountLinkageWidget_OnDecideLinkedWindow::Widget' has a wrong offset!");
static_assert(offsetof(AccountLinkageWidget_OnDecideLinkedWindow, InputType) == 0x000008, "Member 'AccountLinkageWidget_OnDecideLinkedWindow::InputType' has a wrong offset!");
static_assert(offsetof(AccountLinkageWidget_OnDecideLinkedWindow, LeftButton) == 0x000009, "Member 'AccountLinkageWidget_OnDecideLinkedWindow::LeftButton' has a wrong offset!");

// Function OutGameModule.AccountLinkageWidget.OnDecideMaintenanceWindow
// 0x0010 (0x0010 - 0x0000)
struct AccountLinkageWidget_OnDecideMaintenanceWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AccountLinkageWidget_OnDecideMaintenanceWindow) == 0x000008, "Wrong alignment on AccountLinkageWidget_OnDecideMaintenanceWindow");
static_assert(sizeof(AccountLinkageWidget_OnDecideMaintenanceWindow) == 0x000010, "Wrong size on AccountLinkageWidget_OnDecideMaintenanceWindow");
static_assert(offsetof(AccountLinkageWidget_OnDecideMaintenanceWindow, Widget) == 0x000000, "Member 'AccountLinkageWidget_OnDecideMaintenanceWindow::Widget' has a wrong offset!");
static_assert(offsetof(AccountLinkageWidget_OnDecideMaintenanceWindow, InputType) == 0x000008, "Member 'AccountLinkageWidget_OnDecideMaintenanceWindow::InputType' has a wrong offset!");
static_assert(offsetof(AccountLinkageWidget_OnDecideMaintenanceWindow, LeftButton) == 0x000009, "Member 'AccountLinkageWidget_OnDecideMaintenanceWindow::LeftButton' has a wrong offset!");

// Function OutGameModule.AccountLinkageWidget.OnLoadCompletedCheckBnIdStatus
// 0x0004 (0x0004 - 0x0000)
struct AccountLinkageWidget_OnLoadCompletedCheckBnIdStatus final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccountLinkageWidget_OnLoadCompletedCheckBnIdStatus) == 0x000004, "Wrong alignment on AccountLinkageWidget_OnLoadCompletedCheckBnIdStatus");
static_assert(sizeof(AccountLinkageWidget_OnLoadCompletedCheckBnIdStatus) == 0x000004, "Wrong size on AccountLinkageWidget_OnLoadCompletedCheckBnIdStatus");
static_assert(offsetof(AccountLinkageWidget_OnLoadCompletedCheckBnIdStatus, RequestId) == 0x000000, "Member 'AccountLinkageWidget_OnLoadCompletedCheckBnIdStatus::RequestId' has a wrong offset!");

// Function OutGameModule.AccountLinkageWidget.OnLoadCompletedLoadBnIdQrCodeImage
// 0x0004 (0x0004 - 0x0000)
struct AccountLinkageWidget_OnLoadCompletedLoadBnIdQrCodeImage final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccountLinkageWidget_OnLoadCompletedLoadBnIdQrCodeImage) == 0x000004, "Wrong alignment on AccountLinkageWidget_OnLoadCompletedLoadBnIdQrCodeImage");
static_assert(sizeof(AccountLinkageWidget_OnLoadCompletedLoadBnIdQrCodeImage) == 0x000004, "Wrong size on AccountLinkageWidget_OnLoadCompletedLoadBnIdQrCodeImage");
static_assert(offsetof(AccountLinkageWidget_OnLoadCompletedLoadBnIdQrCodeImage, RequestId) == 0x000000, "Member 'AccountLinkageWidget_OnLoadCompletedLoadBnIdQrCodeImage::RequestId' has a wrong offset!");

// Function OutGameModule.AccountLinkageWidget.OnUpdateCompletedResetBnIdLink
// 0x0004 (0x0004 - 0x0000)
struct AccountLinkageWidget_OnUpdateCompletedResetBnIdLink final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccountLinkageWidget_OnUpdateCompletedResetBnIdLink) == 0x000004, "Wrong alignment on AccountLinkageWidget_OnUpdateCompletedResetBnIdLink");
static_assert(sizeof(AccountLinkageWidget_OnUpdateCompletedResetBnIdLink) == 0x000004, "Wrong size on AccountLinkageWidget_OnUpdateCompletedResetBnIdLink");
static_assert(offsetof(AccountLinkageWidget_OnUpdateCompletedResetBnIdLink, RequestId) == 0x000000, "Member 'AccountLinkageWidget_OnUpdateCompletedResetBnIdLink::RequestId' has a wrong offset!");

// Function OutGameModule.AccountSelectWidget.ClosePopup
// 0x0010 (0x0010 - 0x0000)
struct AccountSelectWidget_ClosePopup final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AccountSelectWidget_ClosePopup) == 0x000008, "Wrong alignment on AccountSelectWidget_ClosePopup");
static_assert(sizeof(AccountSelectWidget_ClosePopup) == 0x000010, "Wrong size on AccountSelectWidget_ClosePopup");
static_assert(offsetof(AccountSelectWidget_ClosePopup, Widget) == 0x000000, "Member 'AccountSelectWidget_ClosePopup::Widget' has a wrong offset!");
static_assert(offsetof(AccountSelectWidget_ClosePopup, InputType) == 0x000008, "Member 'AccountSelectWidget_ClosePopup::InputType' has a wrong offset!");
static_assert(offsetof(AccountSelectWidget_ClosePopup, LeftButton) == 0x000009, "Member 'AccountSelectWidget_ClosePopup::LeftButton' has a wrong offset!");

// Function OutGameModule.PlayMenuBattleRuleWidget.GetSelectedBattleRuleStageData
// 0x0004 (0x0004 - 0x0000)
struct PlayMenuBattleRuleWidget_GetSelectedBattleRuleStageData final
{
public:
	int32                                         StageCode;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuBattleRuleWidget_GetSelectedBattleRuleStageData) == 0x000004, "Wrong alignment on PlayMenuBattleRuleWidget_GetSelectedBattleRuleStageData");
static_assert(sizeof(PlayMenuBattleRuleWidget_GetSelectedBattleRuleStageData) == 0x000004, "Wrong size on PlayMenuBattleRuleWidget_GetSelectedBattleRuleStageData");
static_assert(offsetof(PlayMenuBattleRuleWidget_GetSelectedBattleRuleStageData, StageCode) == 0x000000, "Member 'PlayMenuBattleRuleWidget_GetSelectedBattleRuleStageData::StageCode' has a wrong offset!");

// Function OutGameModule.PlayMenuBattleRuleWidget.OnChangeBattleSequence
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuBattleRuleWidget_OnChangeBattleSequence final
{
public:
	EBattleStartSequenceType                      Sequence;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuBattleRuleWidget_OnChangeBattleSequence) == 0x000001, "Wrong alignment on PlayMenuBattleRuleWidget_OnChangeBattleSequence");
static_assert(sizeof(PlayMenuBattleRuleWidget_OnChangeBattleSequence) == 0x000001, "Wrong size on PlayMenuBattleRuleWidget_OnChangeBattleSequence");
static_assert(offsetof(PlayMenuBattleRuleWidget_OnChangeBattleSequence, Sequence) == 0x000000, "Member 'PlayMenuBattleRuleWidget_OnChangeBattleSequence::Sequence' has a wrong offset!");

// Function OutGameModule.PlayMenuBattleRuleWidget.OnGrayOutEvent
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuBattleRuleWidget_OnGrayOutEvent final
{
public:
	bool                                          bIsGrayOut;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuBattleRuleWidget_OnGrayOutEvent) == 0x000001, "Wrong alignment on PlayMenuBattleRuleWidget_OnGrayOutEvent");
static_assert(sizeof(PlayMenuBattleRuleWidget_OnGrayOutEvent) == 0x000001, "Wrong size on PlayMenuBattleRuleWidget_OnGrayOutEvent");
static_assert(offsetof(PlayMenuBattleRuleWidget_OnGrayOutEvent, bIsGrayOut) == 0x000000, "Member 'PlayMenuBattleRuleWidget_OnGrayOutEvent::bIsGrayOut' has a wrong offset!");

// Function OutGameModule.PlayMenuBattleRuleWidget.OnPressButtonWidget
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuBattleRuleWidget_OnPressButtonWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuBattleRuleWidget_OnPressButtonWidget) == 0x000008, "Wrong alignment on PlayMenuBattleRuleWidget_OnPressButtonWidget");
static_assert(sizeof(PlayMenuBattleRuleWidget_OnPressButtonWidget) == 0x000010, "Wrong size on PlayMenuBattleRuleWidget_OnPressButtonWidget");
static_assert(offsetof(PlayMenuBattleRuleWidget_OnPressButtonWidget, Button) == 0x000000, "Member 'PlayMenuBattleRuleWidget_OnPressButtonWidget::Button' has a wrong offset!");
static_assert(offsetof(PlayMenuBattleRuleWidget_OnPressButtonWidget, InputType) == 0x000008, "Member 'PlayMenuBattleRuleWidget_OnPressButtonWidget::InputType' has a wrong offset!");

// Function OutGameModule.PlayMenuBattleRuleWidget.OnSquadNumChanged
// 0x0004 (0x0004 - 0x0000)
struct PlayMenuBattleRuleWidget_OnSquadNumChanged final
{
public:
	int32                                         SquadNum;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuBattleRuleWidget_OnSquadNumChanged) == 0x000004, "Wrong alignment on PlayMenuBattleRuleWidget_OnSquadNumChanged");
static_assert(sizeof(PlayMenuBattleRuleWidget_OnSquadNumChanged) == 0x000004, "Wrong size on PlayMenuBattleRuleWidget_OnSquadNumChanged");
static_assert(offsetof(PlayMenuBattleRuleWidget_OnSquadNumChanged, SquadNum) == 0x000000, "Member 'PlayMenuBattleRuleWidget_OnSquadNumChanged::SquadNum' has a wrong offset!");

// Function OutGameModule.AnimationOutGame.BP_PlayAnimationOutGame
// 0x000C (0x000C - 0x0000)
struct AnimationOutGame_BP_PlayAnimationOutGame final
{
public:
	EAnimOutGameId                                ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayRate;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationOutGame_BP_PlayAnimationOutGame) == 0x000004, "Wrong alignment on AnimationOutGame_BP_PlayAnimationOutGame");
static_assert(sizeof(AnimationOutGame_BP_PlayAnimationOutGame) == 0x00000C, "Wrong size on AnimationOutGame_BP_PlayAnimationOutGame");
static_assert(offsetof(AnimationOutGame_BP_PlayAnimationOutGame, ID) == 0x000000, "Member 'AnimationOutGame_BP_PlayAnimationOutGame::ID' has a wrong offset!");
static_assert(offsetof(AnimationOutGame_BP_PlayAnimationOutGame, PlayRate) == 0x000004, "Member 'AnimationOutGame_BP_PlayAnimationOutGame::PlayRate' has a wrong offset!");
static_assert(offsetof(AnimationOutGame_BP_PlayAnimationOutGame, BlendInTime) == 0x000008, "Member 'AnimationOutGame_BP_PlayAnimationOutGame::BlendInTime' has a wrong offset!");

// Function OutGameModule.AvatarCreateAppWidget.BP_GetEntryObject
// 0x0008 (0x0008 - 0x0000)
struct AvatarCreateAppWidget_BP_GetEntryObject final
{
public:
	class UAvatarCreateBaseListEntryObject*       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateAppWidget_BP_GetEntryObject) == 0x000008, "Wrong alignment on AvatarCreateAppWidget_BP_GetEntryObject");
static_assert(sizeof(AvatarCreateAppWidget_BP_GetEntryObject) == 0x000008, "Wrong size on AvatarCreateAppWidget_BP_GetEntryObject");
static_assert(offsetof(AvatarCreateAppWidget_BP_GetEntryObject, ReturnValue) == 0x000000, "Member 'AvatarCreateAppWidget_BP_GetEntryObject::ReturnValue' has a wrong offset!");

// Function OutGameModule.AvatarCreateAppWidget.BP_SetFocusItem
// 0x0004 (0x0004 - 0x0000)
struct AvatarCreateAppWidget_BP_SetFocusItem final
{
public:
	int32                                         FocusIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateAppWidget_BP_SetFocusItem) == 0x000004, "Wrong alignment on AvatarCreateAppWidget_BP_SetFocusItem");
static_assert(sizeof(AvatarCreateAppWidget_BP_SetFocusItem) == 0x000004, "Wrong size on AvatarCreateAppWidget_BP_SetFocusItem");
static_assert(offsetof(AvatarCreateAppWidget_BP_SetFocusItem, FocusIndex) == 0x000000, "Member 'AvatarCreateAppWidget_BP_SetFocusItem::FocusIndex' has a wrong offset!");

// Function OutGameModule.AvatarCreateAppWidget.DoCustomWidgetNavigation
// 0x0001 (0x0001 - 0x0000)
struct AvatarCreateAppWidget_DoCustomWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateAppWidget_DoCustomWidgetNavigation) == 0x000001, "Wrong alignment on AvatarCreateAppWidget_DoCustomWidgetNavigation");
static_assert(sizeof(AvatarCreateAppWidget_DoCustomWidgetNavigation) == 0x000001, "Wrong size on AvatarCreateAppWidget_DoCustomWidgetNavigation");
static_assert(offsetof(AvatarCreateAppWidget_DoCustomWidgetNavigation, UiNavigation) == 0x000000, "Member 'AvatarCreateAppWidget_DoCustomWidgetNavigation::UiNavigation' has a wrong offset!");

// Function OutGameModule.AvatarCreateAppWidget.OnDecideEvent
// 0x0010 (0x0010 - 0x0000)
struct AvatarCreateAppWidget_OnDecideEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AvatarCreateAppWidget_OnDecideEvent) == 0x000008, "Wrong alignment on AvatarCreateAppWidget_OnDecideEvent");
static_assert(sizeof(AvatarCreateAppWidget_OnDecideEvent) == 0x000010, "Wrong size on AvatarCreateAppWidget_OnDecideEvent");
static_assert(offsetof(AvatarCreateAppWidget_OnDecideEvent, Widget) == 0x000000, "Member 'AvatarCreateAppWidget_OnDecideEvent::Widget' has a wrong offset!");
static_assert(offsetof(AvatarCreateAppWidget_OnDecideEvent, InputType) == 0x000008, "Member 'AvatarCreateAppWidget_OnDecideEvent::InputType' has a wrong offset!");

// Function OutGameModule.AvatarCreateAppWidget.OnFocusEvent
// 0x0010 (0x0010 - 0x0000)
struct AvatarCreateAppWidget_OnFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AvatarCreateAppWidget_OnFocusEvent) == 0x000008, "Wrong alignment on AvatarCreateAppWidget_OnFocusEvent");
static_assert(sizeof(AvatarCreateAppWidget_OnFocusEvent) == 0x000010, "Wrong size on AvatarCreateAppWidget_OnFocusEvent");
static_assert(offsetof(AvatarCreateAppWidget_OnFocusEvent, Widget) == 0x000000, "Member 'AvatarCreateAppWidget_OnFocusEvent::Widget' has a wrong offset!");
static_assert(offsetof(AvatarCreateAppWidget_OnFocusEvent, InputType) == 0x000008, "Member 'AvatarCreateAppWidget_OnFocusEvent::InputType' has a wrong offset!");

// Function OutGameModule.AvatarCreateAppWidget.OnPressEvent
// 0x0010 (0x0010 - 0x0000)
struct AvatarCreateAppWidget_OnPressEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AvatarCreateAppWidget_OnPressEvent) == 0x000008, "Wrong alignment on AvatarCreateAppWidget_OnPressEvent");
static_assert(sizeof(AvatarCreateAppWidget_OnPressEvent) == 0x000010, "Wrong size on AvatarCreateAppWidget_OnPressEvent");
static_assert(offsetof(AvatarCreateAppWidget_OnPressEvent, Widget) == 0x000000, "Member 'AvatarCreateAppWidget_OnPressEvent::Widget' has a wrong offset!");
static_assert(offsetof(AvatarCreateAppWidget_OnPressEvent, InputType) == 0x000008, "Member 'AvatarCreateAppWidget_OnPressEvent::InputType' has a wrong offset!");

// Function OutGameModule.AvatarCreateAppWidget.OnRemoveFocusEvent
// 0x0010 (0x0010 - 0x0000)
struct AvatarCreateAppWidget_OnRemoveFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AvatarCreateAppWidget_OnRemoveFocusEvent) == 0x000008, "Wrong alignment on AvatarCreateAppWidget_OnRemoveFocusEvent");
static_assert(sizeof(AvatarCreateAppWidget_OnRemoveFocusEvent) == 0x000010, "Wrong size on AvatarCreateAppWidget_OnRemoveFocusEvent");
static_assert(offsetof(AvatarCreateAppWidget_OnRemoveFocusEvent, Widget) == 0x000000, "Member 'AvatarCreateAppWidget_OnRemoveFocusEvent::Widget' has a wrong offset!");
static_assert(offsetof(AvatarCreateAppWidget_OnRemoveFocusEvent, InputType) == 0x000008, "Member 'AvatarCreateAppWidget_OnRemoveFocusEvent::InputType' has a wrong offset!");

// Function OutGameModule.AvatarCreateSlotWidgetBase.BP_SetuptImageWidget
// 0x0080 (0x0080 - 0x0000)
struct AvatarCreateSlotWidgetBase_BP_SetuptImageWidget final
{
public:
	struct FAvatarCreateImageData                 ImageData;                                         // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UAvatarCreateSlotWidgetBase*            ReturnValue;                                       // 0x0078(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateSlotWidgetBase_BP_SetuptImageWidget) == 0x000008, "Wrong alignment on AvatarCreateSlotWidgetBase_BP_SetuptImageWidget");
static_assert(sizeof(AvatarCreateSlotWidgetBase_BP_SetuptImageWidget) == 0x000080, "Wrong size on AvatarCreateSlotWidgetBase_BP_SetuptImageWidget");
static_assert(offsetof(AvatarCreateSlotWidgetBase_BP_SetuptImageWidget, ImageData) == 0x000000, "Member 'AvatarCreateSlotWidgetBase_BP_SetuptImageWidget::ImageData' has a wrong offset!");
static_assert(offsetof(AvatarCreateSlotWidgetBase_BP_SetuptImageWidget, ReturnValue) == 0x000078, "Member 'AvatarCreateSlotWidgetBase_BP_SetuptImageWidget::ReturnValue' has a wrong offset!");

// Function OutGameModule.AvatarCreateSlotWidgetBase.BP_SetuptMenuWidget
// 0x00F0 (0x00F0 - 0x0000)
struct AvatarCreateSlotWidgetBase_BP_SetuptMenuWidget final
{
public:
	struct FAvatarCreateMenuData                  MenuData;                                          // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UAvatarCreateSlotWidgetBase*            ReturnValue;                                       // 0x00E8(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateSlotWidgetBase_BP_SetuptMenuWidget) == 0x000008, "Wrong alignment on AvatarCreateSlotWidgetBase_BP_SetuptMenuWidget");
static_assert(sizeof(AvatarCreateSlotWidgetBase_BP_SetuptMenuWidget) == 0x0000F0, "Wrong size on AvatarCreateSlotWidgetBase_BP_SetuptMenuWidget");
static_assert(offsetof(AvatarCreateSlotWidgetBase_BP_SetuptMenuWidget, MenuData) == 0x000000, "Member 'AvatarCreateSlotWidgetBase_BP_SetuptMenuWidget::MenuData' has a wrong offset!");
static_assert(offsetof(AvatarCreateSlotWidgetBase_BP_SetuptMenuWidget, ReturnValue) == 0x0000E8, "Member 'AvatarCreateSlotWidgetBase_BP_SetuptMenuWidget::ReturnValue' has a wrong offset!");

// Function OutGameModule.AvatarCreateSlotWidgetBase.BP_SetVoiceData
// 0x0008 (0x0008 - 0x0000)
struct AvatarCreateSlotWidgetBase_BP_SetVoiceData final
{
public:
	struct FAvatarCreateVoiceData                 VoiceData;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateSlotWidgetBase_BP_SetVoiceData) == 0x000004, "Wrong alignment on AvatarCreateSlotWidgetBase_BP_SetVoiceData");
static_assert(sizeof(AvatarCreateSlotWidgetBase_BP_SetVoiceData) == 0x000008, "Wrong size on AvatarCreateSlotWidgetBase_BP_SetVoiceData");
static_assert(offsetof(AvatarCreateSlotWidgetBase_BP_SetVoiceData, VoiceData) == 0x000000, "Member 'AvatarCreateSlotWidgetBase_BP_SetVoiceData::VoiceData' has a wrong offset!");

// Function OutGameModule.AvatarCreateSlotWidgetBase.BP_UpdateSoundWidgetDiplay
// 0x0002 (0x0002 - 0x0000)
struct AvatarCreateSlotWidgetBase_BP_UpdateSoundWidgetDiplay final
{
public:
	bool                                          Hidden;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateSlotWidgetBase_BP_UpdateSoundWidgetDiplay) == 0x000001, "Wrong alignment on AvatarCreateSlotWidgetBase_BP_UpdateSoundWidgetDiplay");
static_assert(sizeof(AvatarCreateSlotWidgetBase_BP_UpdateSoundWidgetDiplay) == 0x000002, "Wrong size on AvatarCreateSlotWidgetBase_BP_UpdateSoundWidgetDiplay");
static_assert(offsetof(AvatarCreateSlotWidgetBase_BP_UpdateSoundWidgetDiplay, Hidden) == 0x000000, "Member 'AvatarCreateSlotWidgetBase_BP_UpdateSoundWidgetDiplay::Hidden' has a wrong offset!");
static_assert(offsetof(AvatarCreateSlotWidgetBase_BP_UpdateSoundWidgetDiplay, ReturnValue) == 0x000001, "Member 'AvatarCreateSlotWidgetBase_BP_UpdateSoundWidgetDiplay::ReturnValue' has a wrong offset!");

// Function OutGameModule.AvatarCreateSlotWidgetBase.OnPressButton
// 0x0010 (0x0010 - 0x0000)
struct AvatarCreateSlotWidgetBase_OnPressButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AvatarCreateSlotWidgetBase_OnPressButton) == 0x000008, "Wrong alignment on AvatarCreateSlotWidgetBase_OnPressButton");
static_assert(sizeof(AvatarCreateSlotWidgetBase_OnPressButton) == 0x000010, "Wrong size on AvatarCreateSlotWidgetBase_OnPressButton");
static_assert(offsetof(AvatarCreateSlotWidgetBase_OnPressButton, Widget) == 0x000000, "Member 'AvatarCreateSlotWidgetBase_OnPressButton::Widget' has a wrong offset!");
static_assert(offsetof(AvatarCreateSlotWidgetBase_OnPressButton, InputType) == 0x000008, "Member 'AvatarCreateSlotWidgetBase_OnPressButton::InputType' has a wrong offset!");

// Function OutGameModule.AvatarCreateBattleStyleSlotWidget.BP_GetBattleStlyeImage
// 0x0010 (0x0010 - 0x0000)
struct AvatarCreateBattleStyleSlotWidget_BP_GetBattleStlyeImage final
{
public:
	ECharacterId                                  CharaID;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateBattleStyleSlotWidget_BP_GetBattleStlyeImage) == 0x000008, "Wrong alignment on AvatarCreateBattleStyleSlotWidget_BP_GetBattleStlyeImage");
static_assert(sizeof(AvatarCreateBattleStyleSlotWidget_BP_GetBattleStlyeImage) == 0x000010, "Wrong size on AvatarCreateBattleStyleSlotWidget_BP_GetBattleStlyeImage");
static_assert(offsetof(AvatarCreateBattleStyleSlotWidget_BP_GetBattleStlyeImage, CharaID) == 0x000000, "Member 'AvatarCreateBattleStyleSlotWidget_BP_GetBattleStlyeImage::CharaID' has a wrong offset!");
static_assert(offsetof(AvatarCreateBattleStyleSlotWidget_BP_GetBattleStlyeImage, ReturnValue) == 0x000008, "Member 'AvatarCreateBattleStyleSlotWidget_BP_GetBattleStlyeImage::ReturnValue' has a wrong offset!");

// Function OutGameModule.AvatarCreateBattleStyleSlotWidget.BP_GetBattleStlyeText
// 0x0020 (0x0020 - 0x0000)
struct AvatarCreateBattleStyleSlotWidget_BP_GetBattleStlyeText final
{
public:
	ECharacterId                                  CharaID;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateBattleStyleSlotWidget_BP_GetBattleStlyeText) == 0x000008, "Wrong alignment on AvatarCreateBattleStyleSlotWidget_BP_GetBattleStlyeText");
static_assert(sizeof(AvatarCreateBattleStyleSlotWidget_BP_GetBattleStlyeText) == 0x000020, "Wrong size on AvatarCreateBattleStyleSlotWidget_BP_GetBattleStlyeText");
static_assert(offsetof(AvatarCreateBattleStyleSlotWidget_BP_GetBattleStlyeText, CharaID) == 0x000000, "Member 'AvatarCreateBattleStyleSlotWidget_BP_GetBattleStlyeText::CharaID' has a wrong offset!");
static_assert(offsetof(AvatarCreateBattleStyleSlotWidget_BP_GetBattleStlyeText, ReturnValue) == 0x000008, "Member 'AvatarCreateBattleStyleSlotWidget_BP_GetBattleStlyeText::ReturnValue' has a wrong offset!");

// Function OutGameModule.PlayMenuRequestMessage.OnNewInviteFlag
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuRequestMessage_OnNewInviteFlag final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuRequestMessage_OnNewInviteFlag) == 0x000001, "Wrong alignment on PlayMenuRequestMessage_OnNewInviteFlag");
static_assert(sizeof(PlayMenuRequestMessage_OnNewInviteFlag) == 0x000001, "Wrong size on PlayMenuRequestMessage_OnNewInviteFlag");
static_assert(offsetof(PlayMenuRequestMessage_OnNewInviteFlag, Flag) == 0x000000, "Member 'PlayMenuRequestMessage_OnNewInviteFlag::Flag' has a wrong offset!");

// Function OutGameModule.AvatarCreateBattleStyleWidget.OnDecideButtonWidget
// 0x0010 (0x0010 - 0x0000)
struct AvatarCreateBattleStyleWidget_OnDecideButtonWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AvatarCreateBattleStyleWidget_OnDecideButtonWidget) == 0x000008, "Wrong alignment on AvatarCreateBattleStyleWidget_OnDecideButtonWidget");
static_assert(sizeof(AvatarCreateBattleStyleWidget_OnDecideButtonWidget) == 0x000010, "Wrong size on AvatarCreateBattleStyleWidget_OnDecideButtonWidget");
static_assert(offsetof(AvatarCreateBattleStyleWidget_OnDecideButtonWidget, Button) == 0x000000, "Member 'AvatarCreateBattleStyleWidget_OnDecideButtonWidget::Button' has a wrong offset!");
static_assert(offsetof(AvatarCreateBattleStyleWidget_OnDecideButtonWidget, InputType) == 0x000008, "Member 'AvatarCreateBattleStyleWidget_OnDecideButtonWidget::InputType' has a wrong offset!");

// Function OutGameModule.AvatarCreateBattleStyleWidget.OnMouseButtonDownBackGround
// 0x0160 (0x0160 - 0x0000)
struct AvatarCreateBattleStyleWidget_OnMouseButtonDownBackGround final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateBattleStyleWidget_OnMouseButtonDownBackGround) == 0x000008, "Wrong alignment on AvatarCreateBattleStyleWidget_OnMouseButtonDownBackGround");
static_assert(sizeof(AvatarCreateBattleStyleWidget_OnMouseButtonDownBackGround) == 0x000160, "Wrong size on AvatarCreateBattleStyleWidget_OnMouseButtonDownBackGround");
static_assert(offsetof(AvatarCreateBattleStyleWidget_OnMouseButtonDownBackGround, MyGeometry) == 0x000000, "Member 'AvatarCreateBattleStyleWidget_OnMouseButtonDownBackGround::MyGeometry' has a wrong offset!");
static_assert(offsetof(AvatarCreateBattleStyleWidget_OnMouseButtonDownBackGround, MouseEvent) == 0x000038, "Member 'AvatarCreateBattleStyleWidget_OnMouseButtonDownBackGround::MouseEvent' has a wrong offset!");
static_assert(offsetof(AvatarCreateBattleStyleWidget_OnMouseButtonDownBackGround, ReturnValue) == 0x0000A8, "Member 'AvatarCreateBattleStyleWidget_OnMouseButtonDownBackGround::ReturnValue' has a wrong offset!");

// Function OutGameModule.AvatarCreateBattleStyleWidget.OnNegativeButtonWidget
// 0x0010 (0x0010 - 0x0000)
struct AvatarCreateBattleStyleWidget_OnNegativeButtonWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AvatarCreateBattleStyleWidget_OnNegativeButtonWidget) == 0x000008, "Wrong alignment on AvatarCreateBattleStyleWidget_OnNegativeButtonWidget");
static_assert(sizeof(AvatarCreateBattleStyleWidget_OnNegativeButtonWidget) == 0x000010, "Wrong size on AvatarCreateBattleStyleWidget_OnNegativeButtonWidget");
static_assert(offsetof(AvatarCreateBattleStyleWidget_OnNegativeButtonWidget, Button) == 0x000000, "Member 'AvatarCreateBattleStyleWidget_OnNegativeButtonWidget::Button' has a wrong offset!");
static_assert(offsetof(AvatarCreateBattleStyleWidget_OnNegativeButtonWidget, InputType) == 0x000008, "Member 'AvatarCreateBattleStyleWidget_OnNegativeButtonWidget::InputType' has a wrong offset!");

// Function OutGameModule.AvatarCreateBattleStyleWidget.OnPressButtonWidget
// 0x0010 (0x0010 - 0x0000)
struct AvatarCreateBattleStyleWidget_OnPressButtonWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AvatarCreateBattleStyleWidget_OnPressButtonWidget) == 0x000008, "Wrong alignment on AvatarCreateBattleStyleWidget_OnPressButtonWidget");
static_assert(sizeof(AvatarCreateBattleStyleWidget_OnPressButtonWidget) == 0x000010, "Wrong size on AvatarCreateBattleStyleWidget_OnPressButtonWidget");
static_assert(offsetof(AvatarCreateBattleStyleWidget_OnPressButtonWidget, Button) == 0x000000, "Member 'AvatarCreateBattleStyleWidget_OnPressButtonWidget::Button' has a wrong offset!");
static_assert(offsetof(AvatarCreateBattleStyleWidget_OnPressButtonWidget, InputType) == 0x000008, "Member 'AvatarCreateBattleStyleWidget_OnPressButtonWidget::InputType' has a wrong offset!");

// Function OutGameModule.AvatarCreateButtonWidget.BP_GetFunctionSlotWidget
// 0x0008 (0x0008 - 0x0000)
struct AvatarCreateButtonWidget_BP_GetFunctionSlotWidget final
{
public:
	class UAvatarCreateFunctionSlotWidget*        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateButtonWidget_BP_GetFunctionSlotWidget) == 0x000008, "Wrong alignment on AvatarCreateButtonWidget_BP_GetFunctionSlotWidget");
static_assert(sizeof(AvatarCreateButtonWidget_BP_GetFunctionSlotWidget) == 0x000008, "Wrong size on AvatarCreateButtonWidget_BP_GetFunctionSlotWidget");
static_assert(offsetof(AvatarCreateButtonWidget_BP_GetFunctionSlotWidget, ReturnValue) == 0x000000, "Member 'AvatarCreateButtonWidget_BP_GetFunctionSlotWidget::ReturnValue' has a wrong offset!");

// Function OutGameModule.AvatarCreateButtonWidget.BP_SetEntryObject
// 0x0008 (0x0008 - 0x0000)
struct AvatarCreateButtonWidget_BP_SetEntryObject final
{
public:
	class UAvatarCreateBaseListEntryObject*       Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateButtonWidget_BP_SetEntryObject) == 0x000008, "Wrong alignment on AvatarCreateButtonWidget_BP_SetEntryObject");
static_assert(sizeof(AvatarCreateButtonWidget_BP_SetEntryObject) == 0x000008, "Wrong size on AvatarCreateButtonWidget_BP_SetEntryObject");
static_assert(offsetof(AvatarCreateButtonWidget_BP_SetEntryObject, Item) == 0x000000, "Member 'AvatarCreateButtonWidget_BP_SetEntryObject::Item' has a wrong offset!");

// Function OutGameModule.AvatarCreateButtonWidget.BP_SetupButtonStyle
// 0x0058 (0x0058 - 0x0000)
struct AvatarCreateButtonWidget_BP_SetupButtonStyle final
{
public:
	float                                         ProgressRate;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ProgressColor;                                     // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            Color;                                             // 0x0018(0x0028)(Parm, NativeAccessSpecifierPublic)
	ESlateVisibility                              ImageVisibility;                                   // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            NamedSlotWidget;                                   // 0x0048(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            NamedFunctionSlotWidget;                           // 0x0050(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateButtonWidget_BP_SetupButtonStyle) == 0x000008, "Wrong alignment on AvatarCreateButtonWidget_BP_SetupButtonStyle");
static_assert(sizeof(AvatarCreateButtonWidget_BP_SetupButtonStyle) == 0x000058, "Wrong size on AvatarCreateButtonWidget_BP_SetupButtonStyle");
static_assert(offsetof(AvatarCreateButtonWidget_BP_SetupButtonStyle, ProgressRate) == 0x000000, "Member 'AvatarCreateButtonWidget_BP_SetupButtonStyle::ProgressRate' has a wrong offset!");
static_assert(offsetof(AvatarCreateButtonWidget_BP_SetupButtonStyle, ProgressColor) == 0x000004, "Member 'AvatarCreateButtonWidget_BP_SetupButtonStyle::ProgressColor' has a wrong offset!");
static_assert(offsetof(AvatarCreateButtonWidget_BP_SetupButtonStyle, Color) == 0x000018, "Member 'AvatarCreateButtonWidget_BP_SetupButtonStyle::Color' has a wrong offset!");
static_assert(offsetof(AvatarCreateButtonWidget_BP_SetupButtonStyle, ImageVisibility) == 0x000040, "Member 'AvatarCreateButtonWidget_BP_SetupButtonStyle::ImageVisibility' has a wrong offset!");
static_assert(offsetof(AvatarCreateButtonWidget_BP_SetupButtonStyle, NamedSlotWidget) == 0x000048, "Member 'AvatarCreateButtonWidget_BP_SetupButtonStyle::NamedSlotWidget' has a wrong offset!");
static_assert(offsetof(AvatarCreateButtonWidget_BP_SetupButtonStyle, NamedFunctionSlotWidget) == 0x000050, "Member 'AvatarCreateButtonWidget_BP_SetupButtonStyle::NamedFunctionSlotWidget' has a wrong offset!");

// Function OutGameModule.AvatarCreateButtonWidget.BP_GetEntryObject
// 0x0008 (0x0008 - 0x0000)
struct AvatarCreateButtonWidget_BP_GetEntryObject final
{
public:
	class UAvatarCreateBaseListEntryObject*       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateButtonWidget_BP_GetEntryObject) == 0x000008, "Wrong alignment on AvatarCreateButtonWidget_BP_GetEntryObject");
static_assert(sizeof(AvatarCreateButtonWidget_BP_GetEntryObject) == 0x000008, "Wrong size on AvatarCreateButtonWidget_BP_GetEntryObject");
static_assert(offsetof(AvatarCreateButtonWidget_BP_GetEntryObject, ReturnValue) == 0x000000, "Member 'AvatarCreateButtonWidget_BP_GetEntryObject::ReturnValue' has a wrong offset!");

// Function OutGameModule.AvatarCreateColorListWidget.DoCustomWidgetNavigation
// 0x0001 (0x0001 - 0x0000)
struct AvatarCreateColorListWidget_DoCustomWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateColorListWidget_DoCustomWidgetNavigation) == 0x000001, "Wrong alignment on AvatarCreateColorListWidget_DoCustomWidgetNavigation");
static_assert(sizeof(AvatarCreateColorListWidget_DoCustomWidgetNavigation) == 0x000001, "Wrong size on AvatarCreateColorListWidget_DoCustomWidgetNavigation");
static_assert(offsetof(AvatarCreateColorListWidget_DoCustomWidgetNavigation, UiNavigation) == 0x000000, "Member 'AvatarCreateColorListWidget_DoCustomWidgetNavigation::UiNavigation' has a wrong offset!");

// Function OutGameModule.AvatarCreateColorListWidget.OnAddFocusPaletteButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct AvatarCreateColorListWidget_OnAddFocusPaletteButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AvatarCreateColorListWidget_OnAddFocusPaletteButtonEvent) == 0x000008, "Wrong alignment on AvatarCreateColorListWidget_OnAddFocusPaletteButtonEvent");
static_assert(sizeof(AvatarCreateColorListWidget_OnAddFocusPaletteButtonEvent) == 0x000010, "Wrong size on AvatarCreateColorListWidget_OnAddFocusPaletteButtonEvent");
static_assert(offsetof(AvatarCreateColorListWidget_OnAddFocusPaletteButtonEvent, Widget) == 0x000000, "Member 'AvatarCreateColorListWidget_OnAddFocusPaletteButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(AvatarCreateColorListWidget_OnAddFocusPaletteButtonEvent, InputType) == 0x000008, "Member 'AvatarCreateColorListWidget_OnAddFocusPaletteButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.AvatarCreateColorListWidget.OnDecideDisplayButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct AvatarCreateColorListWidget_OnDecideDisplayButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AvatarCreateColorListWidget_OnDecideDisplayButtonEvent) == 0x000008, "Wrong alignment on AvatarCreateColorListWidget_OnDecideDisplayButtonEvent");
static_assert(sizeof(AvatarCreateColorListWidget_OnDecideDisplayButtonEvent) == 0x000010, "Wrong size on AvatarCreateColorListWidget_OnDecideDisplayButtonEvent");
static_assert(offsetof(AvatarCreateColorListWidget_OnDecideDisplayButtonEvent, Widget) == 0x000000, "Member 'AvatarCreateColorListWidget_OnDecideDisplayButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(AvatarCreateColorListWidget_OnDecideDisplayButtonEvent, InputType) == 0x000008, "Member 'AvatarCreateColorListWidget_OnDecideDisplayButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.AvatarCreateColorListWidget.OnDecidePaletteButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct AvatarCreateColorListWidget_OnDecidePaletteButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AvatarCreateColorListWidget_OnDecidePaletteButtonEvent) == 0x000008, "Wrong alignment on AvatarCreateColorListWidget_OnDecidePaletteButtonEvent");
static_assert(sizeof(AvatarCreateColorListWidget_OnDecidePaletteButtonEvent) == 0x000010, "Wrong size on AvatarCreateColorListWidget_OnDecidePaletteButtonEvent");
static_assert(offsetof(AvatarCreateColorListWidget_OnDecidePaletteButtonEvent, Widget) == 0x000000, "Member 'AvatarCreateColorListWidget_OnDecidePaletteButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(AvatarCreateColorListWidget_OnDecidePaletteButtonEvent, InputType) == 0x000008, "Member 'AvatarCreateColorListWidget_OnDecidePaletteButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.AvatarCreateColorListWidget.OnPressDisplayButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct AvatarCreateColorListWidget_OnPressDisplayButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AvatarCreateColorListWidget_OnPressDisplayButtonEvent) == 0x000008, "Wrong alignment on AvatarCreateColorListWidget_OnPressDisplayButtonEvent");
static_assert(sizeof(AvatarCreateColorListWidget_OnPressDisplayButtonEvent) == 0x000010, "Wrong size on AvatarCreateColorListWidget_OnPressDisplayButtonEvent");
static_assert(offsetof(AvatarCreateColorListWidget_OnPressDisplayButtonEvent, Widget) == 0x000000, "Member 'AvatarCreateColorListWidget_OnPressDisplayButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(AvatarCreateColorListWidget_OnPressDisplayButtonEvent, InputType) == 0x000008, "Member 'AvatarCreateColorListWidget_OnPressDisplayButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.AvatarCreateColorListWidget.OnPressPaletteButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct AvatarCreateColorListWidget_OnPressPaletteButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AvatarCreateColorListWidget_OnPressPaletteButtonEvent) == 0x000008, "Wrong alignment on AvatarCreateColorListWidget_OnPressPaletteButtonEvent");
static_assert(sizeof(AvatarCreateColorListWidget_OnPressPaletteButtonEvent) == 0x000010, "Wrong size on AvatarCreateColorListWidget_OnPressPaletteButtonEvent");
static_assert(offsetof(AvatarCreateColorListWidget_OnPressPaletteButtonEvent, Widget) == 0x000000, "Member 'AvatarCreateColorListWidget_OnPressPaletteButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(AvatarCreateColorListWidget_OnPressPaletteButtonEvent, InputType) == 0x000008, "Member 'AvatarCreateColorListWidget_OnPressPaletteButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.PlayMenuHamburgerWidget.GetLargeIconFocusIndex
// 0x0004 (0x0004 - 0x0000)
struct PlayMenuHamburgerWidget_GetLargeIconFocusIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuHamburgerWidget_GetLargeIconFocusIndex) == 0x000004, "Wrong alignment on PlayMenuHamburgerWidget_GetLargeIconFocusIndex");
static_assert(sizeof(PlayMenuHamburgerWidget_GetLargeIconFocusIndex) == 0x000004, "Wrong size on PlayMenuHamburgerWidget_GetLargeIconFocusIndex");
static_assert(offsetof(PlayMenuHamburgerWidget_GetLargeIconFocusIndex, ReturnValue) == 0x000000, "Member 'PlayMenuHamburgerWidget_GetLargeIconFocusIndex::ReturnValue' has a wrong offset!");

// Function OutGameModule.PlayMenuHamburgerWidget.NonOnlineMatchingStartBattle
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuHamburgerWidget_NonOnlineMatchingStartBattle final
{
public:
	class FString                                 StageName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuHamburgerWidget_NonOnlineMatchingStartBattle) == 0x000008, "Wrong alignment on PlayMenuHamburgerWidget_NonOnlineMatchingStartBattle");
static_assert(sizeof(PlayMenuHamburgerWidget_NonOnlineMatchingStartBattle) == 0x000010, "Wrong size on PlayMenuHamburgerWidget_NonOnlineMatchingStartBattle");
static_assert(offsetof(PlayMenuHamburgerWidget_NonOnlineMatchingStartBattle, StageName) == 0x000000, "Member 'PlayMenuHamburgerWidget_NonOnlineMatchingStartBattle::StageName' has a wrong offset!");

// Function OutGameModule.PlayMenuHamburgerWidget.OnButtonSelectEvent
// 0x0002 (0x0002 - 0x0000)
struct PlayMenuHamburgerWidget_OnButtonSelectEvent final
{
public:
	EMdPlayMenuHamburgerMenuList                  Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseFade;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuHamburgerWidget_OnButtonSelectEvent) == 0x000001, "Wrong alignment on PlayMenuHamburgerWidget_OnButtonSelectEvent");
static_assert(sizeof(PlayMenuHamburgerWidget_OnButtonSelectEvent) == 0x000002, "Wrong size on PlayMenuHamburgerWidget_OnButtonSelectEvent");
static_assert(offsetof(PlayMenuHamburgerWidget_OnButtonSelectEvent, Type) == 0x000000, "Member 'PlayMenuHamburgerWidget_OnButtonSelectEvent::Type' has a wrong offset!");
static_assert(offsetof(PlayMenuHamburgerWidget_OnButtonSelectEvent, UseFade) == 0x000001, "Member 'PlayMenuHamburgerWidget_OnButtonSelectEvent::UseFade' has a wrong offset!");

// Function OutGameModule.PlayMenuHamburgerWidget.OnCancelEmptyWindow
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuHamburgerWidget_OnCancelEmptyWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuHamburgerWidget_OnCancelEmptyWindow) == 0x000008, "Wrong alignment on PlayMenuHamburgerWidget_OnCancelEmptyWindow");
static_assert(sizeof(PlayMenuHamburgerWidget_OnCancelEmptyWindow) == 0x000010, "Wrong size on PlayMenuHamburgerWidget_OnCancelEmptyWindow");
static_assert(offsetof(PlayMenuHamburgerWidget_OnCancelEmptyWindow, Widget) == 0x000000, "Member 'PlayMenuHamburgerWidget_OnCancelEmptyWindow::Widget' has a wrong offset!");
static_assert(offsetof(PlayMenuHamburgerWidget_OnCancelEmptyWindow, InputType) == 0x000008, "Member 'PlayMenuHamburgerWidget_OnCancelEmptyWindow::InputType' has a wrong offset!");

// Function OutGameModule.PlayMenuHamburgerWidget.OnChangeBattleSequence
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuHamburgerWidget_OnChangeBattleSequence final
{
public:
	EBattleStartSequenceType                      Sequence;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuHamburgerWidget_OnChangeBattleSequence) == 0x000001, "Wrong alignment on PlayMenuHamburgerWidget_OnChangeBattleSequence");
static_assert(sizeof(PlayMenuHamburgerWidget_OnChangeBattleSequence) == 0x000001, "Wrong size on PlayMenuHamburgerWidget_OnChangeBattleSequence");
static_assert(offsetof(PlayMenuHamburgerWidget_OnChangeBattleSequence, Sequence) == 0x000000, "Member 'PlayMenuHamburgerWidget_OnChangeBattleSequence::Sequence' has a wrong offset!");

// Function OutGameModule.PlayMenuHamburgerWidget.OnDebugHoveredChangedEvent
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuHamburgerWidget_OnDebugHoveredChangedEvent final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHovered;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuHamburgerWidget_OnDebugHoveredChangedEvent) == 0x000008, "Wrong alignment on PlayMenuHamburgerWidget_OnDebugHoveredChangedEvent");
static_assert(sizeof(PlayMenuHamburgerWidget_OnDebugHoveredChangedEvent) == 0x000010, "Wrong size on PlayMenuHamburgerWidget_OnDebugHoveredChangedEvent");
static_assert(offsetof(PlayMenuHamburgerWidget_OnDebugHoveredChangedEvent, Item) == 0x000000, "Member 'PlayMenuHamburgerWidget_OnDebugHoveredChangedEvent::Item' has a wrong offset!");
static_assert(offsetof(PlayMenuHamburgerWidget_OnDebugHoveredChangedEvent, bHovered) == 0x000008, "Member 'PlayMenuHamburgerWidget_OnDebugHoveredChangedEvent::bHovered' has a wrong offset!");

// Function OutGameModule.PlayMenuHamburgerWidget.OnDecidePopupWindow
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuHamburgerWidget_OnDecidePopupWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuHamburgerWidget_OnDecidePopupWindow) == 0x000008, "Wrong alignment on PlayMenuHamburgerWidget_OnDecidePopupWindow");
static_assert(sizeof(PlayMenuHamburgerWidget_OnDecidePopupWindow) == 0x000010, "Wrong size on PlayMenuHamburgerWidget_OnDecidePopupWindow");
static_assert(offsetof(PlayMenuHamburgerWidget_OnDecidePopupWindow, Widget) == 0x000000, "Member 'PlayMenuHamburgerWidget_OnDecidePopupWindow::Widget' has a wrong offset!");
static_assert(offsetof(PlayMenuHamburgerWidget_OnDecidePopupWindow, InputType) == 0x000008, "Member 'PlayMenuHamburgerWidget_OnDecidePopupWindow::InputType' has a wrong offset!");
static_assert(offsetof(PlayMenuHamburgerWidget_OnDecidePopupWindow, LeftButton) == 0x000009, "Member 'PlayMenuHamburgerWidget_OnDecidePopupWindow::LeftButton' has a wrong offset!");

// Function OutGameModule.PlayMenuHamburgerWidget.OnDecideReturnButton
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuHamburgerWidget_OnDecideReturnButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuHamburgerWidget_OnDecideReturnButton) == 0x000008, "Wrong alignment on PlayMenuHamburgerWidget_OnDecideReturnButton");
static_assert(sizeof(PlayMenuHamburgerWidget_OnDecideReturnButton) == 0x000010, "Wrong size on PlayMenuHamburgerWidget_OnDecideReturnButton");
static_assert(offsetof(PlayMenuHamburgerWidget_OnDecideReturnButton, Widget) == 0x000000, "Member 'PlayMenuHamburgerWidget_OnDecideReturnButton::Widget' has a wrong offset!");
static_assert(offsetof(PlayMenuHamburgerWidget_OnDecideReturnButton, InputType) == 0x000008, "Member 'PlayMenuHamburgerWidget_OnDecideReturnButton::InputType' has a wrong offset!");

// Function OutGameModule.PlayMenuHamburgerWidget.OnSelectEvent
// 0x0008 (0x0008 - 0x0000)
struct PlayMenuHamburgerWidget_OnSelectEvent final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuHamburgerWidget_OnSelectEvent) == 0x000008, "Wrong alignment on PlayMenuHamburgerWidget_OnSelectEvent");
static_assert(sizeof(PlayMenuHamburgerWidget_OnSelectEvent) == 0x000008, "Wrong size on PlayMenuHamburgerWidget_OnSelectEvent");
static_assert(offsetof(PlayMenuHamburgerWidget_OnSelectEvent, Widget) == 0x000000, "Member 'PlayMenuHamburgerWidget_OnSelectEvent::Widget' has a wrong offset!");

// Function OutGameModule.PlayMenuHamburgerWidget.OnTileHoveredChangedEvent
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuHamburgerWidget_OnTileHoveredChangedEvent final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHovered;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuHamburgerWidget_OnTileHoveredChangedEvent) == 0x000008, "Wrong alignment on PlayMenuHamburgerWidget_OnTileHoveredChangedEvent");
static_assert(sizeof(PlayMenuHamburgerWidget_OnTileHoveredChangedEvent) == 0x000010, "Wrong size on PlayMenuHamburgerWidget_OnTileHoveredChangedEvent");
static_assert(offsetof(PlayMenuHamburgerWidget_OnTileHoveredChangedEvent, Item) == 0x000000, "Member 'PlayMenuHamburgerWidget_OnTileHoveredChangedEvent::Item' has a wrong offset!");
static_assert(offsetof(PlayMenuHamburgerWidget_OnTileHoveredChangedEvent, bHovered) == 0x000008, "Member 'PlayMenuHamburgerWidget_OnTileHoveredChangedEvent::bHovered' has a wrong offset!");

// Function OutGameModule.PlayMenuHamburgerWidget.OntileViewNavigationUp
// 0x0004 (0x0004 - 0x0000)
struct PlayMenuHamburgerWidget_OntileViewNavigationUp final
{
public:
	int32                                         CurrentIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuHamburgerWidget_OntileViewNavigationUp) == 0x000004, "Wrong alignment on PlayMenuHamburgerWidget_OntileViewNavigationUp");
static_assert(sizeof(PlayMenuHamburgerWidget_OntileViewNavigationUp) == 0x000004, "Wrong size on PlayMenuHamburgerWidget_OntileViewNavigationUp");
static_assert(offsetof(PlayMenuHamburgerWidget_OntileViewNavigationUp, CurrentIndex) == 0x000000, "Member 'PlayMenuHamburgerWidget_OntileViewNavigationUp::CurrentIndex' has a wrong offset!");

// Function OutGameModule.PlayMenuHamburgerWidget.SetNextLargeIconFocus
// 0x0002 (0x0002 - 0x0000)
struct PlayMenuHamburgerWidget_SetNextLargeIconFocus final
{
public:
	bool                                          Right;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuHamburgerWidget_SetNextLargeIconFocus) == 0x000001, "Wrong alignment on PlayMenuHamburgerWidget_SetNextLargeIconFocus");
static_assert(sizeof(PlayMenuHamburgerWidget_SetNextLargeIconFocus) == 0x000002, "Wrong size on PlayMenuHamburgerWidget_SetNextLargeIconFocus");
static_assert(offsetof(PlayMenuHamburgerWidget_SetNextLargeIconFocus, Right) == 0x000000, "Member 'PlayMenuHamburgerWidget_SetNextLargeIconFocus::Right' has a wrong offset!");
static_assert(offsetof(PlayMenuHamburgerWidget_SetNextLargeIconFocus, ReturnValue) == 0x000001, "Member 'PlayMenuHamburgerWidget_SetNextLargeIconFocus::ReturnValue' has a wrong offset!");

// Function OutGameModule.AvatarCreateDetailSettingTopWidget.ChangeTab
// 0x0004 (0x0004 - 0x0000)
struct AvatarCreateDetailSettingTopWidget_ChangeTab final
{
public:
	int32                                         NextTab;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateDetailSettingTopWidget_ChangeTab) == 0x000004, "Wrong alignment on AvatarCreateDetailSettingTopWidget_ChangeTab");
static_assert(sizeof(AvatarCreateDetailSettingTopWidget_ChangeTab) == 0x000004, "Wrong size on AvatarCreateDetailSettingTopWidget_ChangeTab");
static_assert(offsetof(AvatarCreateDetailSettingTopWidget_ChangeTab, NextTab) == 0x000000, "Member 'AvatarCreateDetailSettingTopWidget_ChangeTab::NextTab' has a wrong offset!");

// Function OutGameModule.AvatarCreateDetailSettingWidget.CallOnOpenList
// 0x0001 (0x0001 - 0x0000)
struct AvatarCreateDetailSettingWidget_CallOnOpenList final
{
public:
	bool                                          Hidden;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateDetailSettingWidget_CallOnOpenList) == 0x000001, "Wrong alignment on AvatarCreateDetailSettingWidget_CallOnOpenList");
static_assert(sizeof(AvatarCreateDetailSettingWidget_CallOnOpenList) == 0x000001, "Wrong size on AvatarCreateDetailSettingWidget_CallOnOpenList");
static_assert(offsetof(AvatarCreateDetailSettingWidget_CallOnOpenList, Hidden) == 0x000000, "Member 'AvatarCreateDetailSettingWidget_CallOnOpenList::Hidden' has a wrong offset!");

// Function OutGameModule.AvatarCreateDetailSettingWidget.GetSliderValue
// 0x0018 (0x0018 - 0x0000)
struct AvatarCreateDetailSettingWidget_GetSliderValue final
{
public:
	EAvatarDetailedAppearanceSettingBaseItem      baseItem;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateDetailSettingWidget_GetSliderValue) == 0x000008, "Wrong alignment on AvatarCreateDetailSettingWidget_GetSliderValue");
static_assert(sizeof(AvatarCreateDetailSettingWidget_GetSliderValue) == 0x000018, "Wrong size on AvatarCreateDetailSettingWidget_GetSliderValue");
static_assert(offsetof(AvatarCreateDetailSettingWidget_GetSliderValue, baseItem) == 0x000000, "Member 'AvatarCreateDetailSettingWidget_GetSliderValue::baseItem' has a wrong offset!");
static_assert(offsetof(AvatarCreateDetailSettingWidget_GetSliderValue, ReturnValue) == 0x000008, "Member 'AvatarCreateDetailSettingWidget_GetSliderValue::ReturnValue' has a wrong offset!");

// DelegateFunction OutGameModule.AvatarCreateDetailSettingWidget.OnOpenListDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct AvatarCreateDetailSettingWidget_OnOpenListDelegate__DelegateSignature final
{
public:
	bool                                          Hidden;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateDetailSettingWidget_OnOpenListDelegate__DelegateSignature) == 0x000001, "Wrong alignment on AvatarCreateDetailSettingWidget_OnOpenListDelegate__DelegateSignature");
static_assert(sizeof(AvatarCreateDetailSettingWidget_OnOpenListDelegate__DelegateSignature) == 0x000001, "Wrong size on AvatarCreateDetailSettingWidget_OnOpenListDelegate__DelegateSignature");
static_assert(offsetof(AvatarCreateDetailSettingWidget_OnOpenListDelegate__DelegateSignature, Hidden) == 0x000000, "Member 'AvatarCreateDetailSettingWidget_OnOpenListDelegate__DelegateSignature::Hidden' has a wrong offset!");

// Function OutGameModule.AvatarCreateDetailSettingWidget.SetCaptureType
// 0x0008 (0x0008 - 0x0000)
struct AvatarCreateDetailSettingWidget_SetCaptureType final
{
public:
	ESceneCaptureAvatarTypeId                     ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         bodyScaleIndex;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateDetailSettingWidget_SetCaptureType) == 0x000004, "Wrong alignment on AvatarCreateDetailSettingWidget_SetCaptureType");
static_assert(sizeof(AvatarCreateDetailSettingWidget_SetCaptureType) == 0x000008, "Wrong size on AvatarCreateDetailSettingWidget_SetCaptureType");
static_assert(offsetof(AvatarCreateDetailSettingWidget_SetCaptureType, ID) == 0x000000, "Member 'AvatarCreateDetailSettingWidget_SetCaptureType::ID' has a wrong offset!");
static_assert(offsetof(AvatarCreateDetailSettingWidget_SetCaptureType, bodyScaleIndex) == 0x000004, "Member 'AvatarCreateDetailSettingWidget_SetCaptureType::bodyScaleIndex' has a wrong offset!");

// Function OutGameModule.PlayMenuRankingEliteWidget.OnPressEmptyButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuRankingEliteWidget_OnPressEmptyButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuRankingEliteWidget_OnPressEmptyButtonEvent) == 0x000008, "Wrong alignment on PlayMenuRankingEliteWidget_OnPressEmptyButtonEvent");
static_assert(sizeof(PlayMenuRankingEliteWidget_OnPressEmptyButtonEvent) == 0x000010, "Wrong size on PlayMenuRankingEliteWidget_OnPressEmptyButtonEvent");
static_assert(offsetof(PlayMenuRankingEliteWidget_OnPressEmptyButtonEvent, Widget) == 0x000000, "Member 'PlayMenuRankingEliteWidget_OnPressEmptyButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(PlayMenuRankingEliteWidget_OnPressEmptyButtonEvent, InputType) == 0x000008, "Member 'PlayMenuRankingEliteWidget_OnPressEmptyButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.AvatarCreateFunctionSlotWidget.BP_InputWidget
// 0x0002 (0x0002 - 0x0000)
struct AvatarCreateFunctionSlotWidget_BP_InputWidget final
{
public:
	bool                                          Left;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateFunctionSlotWidget_BP_InputWidget) == 0x000001, "Wrong alignment on AvatarCreateFunctionSlotWidget_BP_InputWidget");
static_assert(sizeof(AvatarCreateFunctionSlotWidget_BP_InputWidget) == 0x000002, "Wrong size on AvatarCreateFunctionSlotWidget_BP_InputWidget");
static_assert(offsetof(AvatarCreateFunctionSlotWidget_BP_InputWidget, Left) == 0x000000, "Member 'AvatarCreateFunctionSlotWidget_BP_InputWidget::Left' has a wrong offset!");
static_assert(offsetof(AvatarCreateFunctionSlotWidget_BP_InputWidget, ReturnValue) == 0x000001, "Member 'AvatarCreateFunctionSlotWidget_BP_InputWidget::ReturnValue' has a wrong offset!");

// Function OutGameModule.AvatarCreateFunctionSlotWidget.BP_SetupCarouselWidget
// 0x0048 (0x0048 - 0x0000)
struct AvatarCreateFunctionSlotWidget_BP_SetupCarouselWidget final
{
public:
	struct FAvatarCreateCarouselData              Data;                                              // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UAvatarCreateFunctionSlotWidget*        ReturnValue;                                       // 0x0040(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateFunctionSlotWidget_BP_SetupCarouselWidget) == 0x000008, "Wrong alignment on AvatarCreateFunctionSlotWidget_BP_SetupCarouselWidget");
static_assert(sizeof(AvatarCreateFunctionSlotWidget_BP_SetupCarouselWidget) == 0x000048, "Wrong size on AvatarCreateFunctionSlotWidget_BP_SetupCarouselWidget");
static_assert(offsetof(AvatarCreateFunctionSlotWidget_BP_SetupCarouselWidget, Data) == 0x000000, "Member 'AvatarCreateFunctionSlotWidget_BP_SetupCarouselWidget::Data' has a wrong offset!");
static_assert(offsetof(AvatarCreateFunctionSlotWidget_BP_SetupCarouselWidget, ReturnValue) == 0x000040, "Member 'AvatarCreateFunctionSlotWidget_BP_SetupCarouselWidget::ReturnValue' has a wrong offset!");

// Function OutGameModule.AvatarCreateFunctionSlotWidget.BP_SetupColorPaletteWidget
// 0x0038 (0x0038 - 0x0000)
struct AvatarCreateFunctionSlotWidget_BP_SetupColorPaletteWidget final
{
public:
	struct FAvatarColorPaletteData                Data;                                              // 0x0000(0x002C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAvatarCreateFunctionSlotWidget*        ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateFunctionSlotWidget_BP_SetupColorPaletteWidget) == 0x000008, "Wrong alignment on AvatarCreateFunctionSlotWidget_BP_SetupColorPaletteWidget");
static_assert(sizeof(AvatarCreateFunctionSlotWidget_BP_SetupColorPaletteWidget) == 0x000038, "Wrong size on AvatarCreateFunctionSlotWidget_BP_SetupColorPaletteWidget");
static_assert(offsetof(AvatarCreateFunctionSlotWidget_BP_SetupColorPaletteWidget, Data) == 0x000000, "Member 'AvatarCreateFunctionSlotWidget_BP_SetupColorPaletteWidget::Data' has a wrong offset!");
static_assert(offsetof(AvatarCreateFunctionSlotWidget_BP_SetupColorPaletteWidget, ReturnValue) == 0x000030, "Member 'AvatarCreateFunctionSlotWidget_BP_SetupColorPaletteWidget::ReturnValue' has a wrong offset!");

// Function OutGameModule.AvatarCreateFunctionSlotWidget.BP_SetupSliderWidget
// 0x0018 (0x0018 - 0x0000)
struct AvatarCreateFunctionSlotWidget_BP_SetupSliderWidget final
{
public:
	struct FAvatarCreateSliderData                Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UAvatarCreateFunctionSlotWidget*        ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateFunctionSlotWidget_BP_SetupSliderWidget) == 0x000008, "Wrong alignment on AvatarCreateFunctionSlotWidget_BP_SetupSliderWidget");
static_assert(sizeof(AvatarCreateFunctionSlotWidget_BP_SetupSliderWidget) == 0x000018, "Wrong size on AvatarCreateFunctionSlotWidget_BP_SetupSliderWidget");
static_assert(offsetof(AvatarCreateFunctionSlotWidget_BP_SetupSliderWidget, Data) == 0x000000, "Member 'AvatarCreateFunctionSlotWidget_BP_SetupSliderWidget::Data' has a wrong offset!");
static_assert(offsetof(AvatarCreateFunctionSlotWidget_BP_SetupSliderWidget, ReturnValue) == 0x000010, "Member 'AvatarCreateFunctionSlotWidget_BP_SetupSliderWidget::ReturnValue' has a wrong offset!");

// Function OutGameModule.AvatarCreateFunctionSlotWidget.BP_UpdateColorPaletteWidget
// 0x0038 (0x0038 - 0x0000)
struct AvatarCreateFunctionSlotWidget_BP_UpdateColorPaletteWidget final
{
public:
	struct FAvatarColorPaletteData                Data;                                              // 0x0000(0x002C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAvatarCreateFunctionSlotWidget*        ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateFunctionSlotWidget_BP_UpdateColorPaletteWidget) == 0x000008, "Wrong alignment on AvatarCreateFunctionSlotWidget_BP_UpdateColorPaletteWidget");
static_assert(sizeof(AvatarCreateFunctionSlotWidget_BP_UpdateColorPaletteWidget) == 0x000038, "Wrong size on AvatarCreateFunctionSlotWidget_BP_UpdateColorPaletteWidget");
static_assert(offsetof(AvatarCreateFunctionSlotWidget_BP_UpdateColorPaletteWidget, Data) == 0x000000, "Member 'AvatarCreateFunctionSlotWidget_BP_UpdateColorPaletteWidget::Data' has a wrong offset!");
static_assert(offsetof(AvatarCreateFunctionSlotWidget_BP_UpdateColorPaletteWidget, ReturnValue) == 0x000030, "Member 'AvatarCreateFunctionSlotWidget_BP_UpdateColorPaletteWidget::ReturnValue' has a wrong offset!");

// DelegateFunction OutGameModule.AvatarCreateFunctionSlotWidget.OnChangedIndexEventDispatcher__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct AvatarCreateFunctionSlotWidget_OnChangedIndexEventDispatcher__DelegateSignature final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateFunctionSlotWidget_OnChangedIndexEventDispatcher__DelegateSignature) == 0x000004, "Wrong alignment on AvatarCreateFunctionSlotWidget_OnChangedIndexEventDispatcher__DelegateSignature");
static_assert(sizeof(AvatarCreateFunctionSlotWidget_OnChangedIndexEventDispatcher__DelegateSignature) == 0x000004, "Wrong size on AvatarCreateFunctionSlotWidget_OnChangedIndexEventDispatcher__DelegateSignature");
static_assert(offsetof(AvatarCreateFunctionSlotWidget_OnChangedIndexEventDispatcher__DelegateSignature, Index_0) == 0x000000, "Member 'AvatarCreateFunctionSlotWidget_OnChangedIndexEventDispatcher__DelegateSignature::Index_0' has a wrong offset!");

// DelegateFunction OutGameModule.AvatarCreateFunctionSlotWidget.OnChangedValueEventDispatcher__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct AvatarCreateFunctionSlotWidget_OnChangedValueEventDispatcher__DelegateSignature final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateFunctionSlotWidget_OnChangedValueEventDispatcher__DelegateSignature) == 0x000004, "Wrong alignment on AvatarCreateFunctionSlotWidget_OnChangedValueEventDispatcher__DelegateSignature");
static_assert(sizeof(AvatarCreateFunctionSlotWidget_OnChangedValueEventDispatcher__DelegateSignature) == 0x000008, "Wrong size on AvatarCreateFunctionSlotWidget_OnChangedValueEventDispatcher__DelegateSignature");
static_assert(offsetof(AvatarCreateFunctionSlotWidget_OnChangedValueEventDispatcher__DelegateSignature, Value) == 0x000000, "Member 'AvatarCreateFunctionSlotWidget_OnChangedValueEventDispatcher__DelegateSignature::Value' has a wrong offset!");
static_assert(offsetof(AvatarCreateFunctionSlotWidget_OnChangedValueEventDispatcher__DelegateSignature, Index_0) == 0x000004, "Member 'AvatarCreateFunctionSlotWidget_OnChangedValueEventDispatcher__DelegateSignature::Index_0' has a wrong offset!");

// Function OutGameModule.SeasonPassLicenceTab.BP_CreateStockItem
// 0x0010 (0x0010 - 0x0000)
struct SeasonPassLicenceTab_BP_CreateStockItem final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stockindex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USeasonPassStockEntry*                  Entry;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassLicenceTab_BP_CreateStockItem) == 0x000008, "Wrong alignment on SeasonPassLicenceTab_BP_CreateStockItem");
static_assert(sizeof(SeasonPassLicenceTab_BP_CreateStockItem) == 0x000010, "Wrong size on SeasonPassLicenceTab_BP_CreateStockItem");
static_assert(offsetof(SeasonPassLicenceTab_BP_CreateStockItem, Index_0) == 0x000000, "Member 'SeasonPassLicenceTab_BP_CreateStockItem::Index_0' has a wrong offset!");
static_assert(offsetof(SeasonPassLicenceTab_BP_CreateStockItem, Stockindex) == 0x000004, "Member 'SeasonPassLicenceTab_BP_CreateStockItem::Stockindex' has a wrong offset!");
static_assert(offsetof(SeasonPassLicenceTab_BP_CreateStockItem, Entry) == 0x000008, "Member 'SeasonPassLicenceTab_BP_CreateStockItem::Entry' has a wrong offset!");

// Function OutGameModule.SeasonPassLicenceTab.BP_FocusStockList
// 0x0008 (0x0008 - 0x0000)
struct SeasonPassLicenceTab_BP_FocusStockList final
{
public:
	bool                                          IsUp;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Stockindex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassLicenceTab_BP_FocusStockList) == 0x000004, "Wrong alignment on SeasonPassLicenceTab_BP_FocusStockList");
static_assert(sizeof(SeasonPassLicenceTab_BP_FocusStockList) == 0x000008, "Wrong size on SeasonPassLicenceTab_BP_FocusStockList");
static_assert(offsetof(SeasonPassLicenceTab_BP_FocusStockList, IsUp) == 0x000000, "Member 'SeasonPassLicenceTab_BP_FocusStockList::IsUp' has a wrong offset!");
static_assert(offsetof(SeasonPassLicenceTab_BP_FocusStockList, Stockindex) == 0x000004, "Member 'SeasonPassLicenceTab_BP_FocusStockList::Stockindex' has a wrong offset!");

// Function OutGameModule.SeasonPassLicenceTab.BP_GetStockList
// 0x0010 (0x0010 - 0x0000)
struct SeasonPassLicenceTab_BP_GetStockList final
{
public:
	TArray<class USeasonPassListObject*>          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassLicenceTab_BP_GetStockList) == 0x000008, "Wrong alignment on SeasonPassLicenceTab_BP_GetStockList");
static_assert(sizeof(SeasonPassLicenceTab_BP_GetStockList) == 0x000010, "Wrong size on SeasonPassLicenceTab_BP_GetStockList");
static_assert(offsetof(SeasonPassLicenceTab_BP_GetStockList, ReturnValue) == 0x000000, "Member 'SeasonPassLicenceTab_BP_GetStockList::ReturnValue' has a wrong offset!");

// Function OutGameModule.SeasonPassLicenceTab.BP_ReceiveStockList
// 0x0008 (0x0008 - 0x0000)
struct SeasonPassLicenceTab_BP_ReceiveStockList final
{
public:
	struct FDateTime                              ExpireAt;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassLicenceTab_BP_ReceiveStockList) == 0x000008, "Wrong alignment on SeasonPassLicenceTab_BP_ReceiveStockList");
static_assert(sizeof(SeasonPassLicenceTab_BP_ReceiveStockList) == 0x000008, "Wrong size on SeasonPassLicenceTab_BP_ReceiveStockList");
static_assert(offsetof(SeasonPassLicenceTab_BP_ReceiveStockList, ExpireAt) == 0x000000, "Member 'SeasonPassLicenceTab_BP_ReceiveStockList::ExpireAt' has a wrong offset!");

// Function OutGameModule.SeasonPassLicenceTab.BP_SetStockList
// 0x0004 (0x0004 - 0x0000)
struct SeasonPassLicenceTab_BP_SetStockList final
{
public:
	int32                                         SwitcherNumber;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassLicenceTab_BP_SetStockList) == 0x000004, "Wrong alignment on SeasonPassLicenceTab_BP_SetStockList");
static_assert(sizeof(SeasonPassLicenceTab_BP_SetStockList) == 0x000004, "Wrong size on SeasonPassLicenceTab_BP_SetStockList");
static_assert(offsetof(SeasonPassLicenceTab_BP_SetStockList, SwitcherNumber) == 0x000000, "Member 'SeasonPassLicenceTab_BP_SetStockList::SwitcherNumber' has a wrong offset!");

// Function OutGameModule.SeasonPassDayEntry.BP_SetDayText
// 0x0004 (0x0004 - 0x0000)
struct SeasonPassDayEntry_BP_SetDayText final
{
public:
	int32                                         Day;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassDayEntry_BP_SetDayText) == 0x000004, "Wrong alignment on SeasonPassDayEntry_BP_SetDayText");
static_assert(sizeof(SeasonPassDayEntry_BP_SetDayText) == 0x000004, "Wrong size on SeasonPassDayEntry_BP_SetDayText");
static_assert(offsetof(SeasonPassDayEntry_BP_SetDayText, Day) == 0x000000, "Member 'SeasonPassDayEntry_BP_SetDayText::Day' has a wrong offset!");

// Function OutGameModule.SeasonPassDayEntry.BP_SetImageSize
// 0x0004 (0x0004 - 0x0000)
struct SeasonPassDayEntry_BP_SetImageSize final
{
public:
	int32                                         CombineItem;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassDayEntry_BP_SetImageSize) == 0x000004, "Wrong alignment on SeasonPassDayEntry_BP_SetImageSize");
static_assert(sizeof(SeasonPassDayEntry_BP_SetImageSize) == 0x000004, "Wrong size on SeasonPassDayEntry_BP_SetImageSize");
static_assert(offsetof(SeasonPassDayEntry_BP_SetImageSize, CombineItem) == 0x000000, "Member 'SeasonPassDayEntry_BP_SetImageSize::CombineItem' has a wrong offset!");

// Function OutGameModule.PlayMenuPlayerStatusVariationIconWidget.UpdateIcon
// 0x0008 (0x0008 - 0x0000)
struct PlayMenuPlayerStatusVariationIconWidget_UpdateIcon final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VaritaionNo;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuPlayerStatusVariationIconWidget_UpdateIcon) == 0x000004, "Wrong alignment on PlayMenuPlayerStatusVariationIconWidget_UpdateIcon");
static_assert(sizeof(PlayMenuPlayerStatusVariationIconWidget_UpdateIcon) == 0x000008, "Wrong size on PlayMenuPlayerStatusVariationIconWidget_UpdateIcon");
static_assert(offsetof(PlayMenuPlayerStatusVariationIconWidget_UpdateIcon, CharacterId) == 0x000000, "Member 'PlayMenuPlayerStatusVariationIconWidget_UpdateIcon::CharacterId' has a wrong offset!");
static_assert(offsetof(PlayMenuPlayerStatusVariationIconWidget_UpdateIcon, VaritaionNo) == 0x000004, "Member 'PlayMenuPlayerStatusVariationIconWidget_UpdateIcon::VaritaionNo' has a wrong offset!");

// Function OutGameModule.AvatarCreateSlotHasWidget.BP_RemoveDecideDelegate
// 0x0001 (0x0001 - 0x0000)
struct AvatarCreateSlotHasWidget_BP_RemoveDecideDelegate final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateSlotHasWidget_BP_RemoveDecideDelegate) == 0x000001, "Wrong alignment on AvatarCreateSlotHasWidget_BP_RemoveDecideDelegate");
static_assert(sizeof(AvatarCreateSlotHasWidget_BP_RemoveDecideDelegate) == 0x000001, "Wrong size on AvatarCreateSlotHasWidget_BP_RemoveDecideDelegate");
static_assert(offsetof(AvatarCreateSlotHasWidget_BP_RemoveDecideDelegate, Enable) == 0x000000, "Member 'AvatarCreateSlotHasWidget_BP_RemoveDecideDelegate::Enable' has a wrong offset!");

// Function OutGameModule.AvatarCreateSlotHasWidget.BP_SetEntryObject
// 0x0008 (0x0008 - 0x0000)
struct AvatarCreateSlotHasWidget_BP_SetEntryObject final
{
public:
	class UAvatarCreateBaseListEntryObject*       Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateSlotHasWidget_BP_SetEntryObject) == 0x000008, "Wrong alignment on AvatarCreateSlotHasWidget_BP_SetEntryObject");
static_assert(sizeof(AvatarCreateSlotHasWidget_BP_SetEntryObject) == 0x000008, "Wrong size on AvatarCreateSlotHasWidget_BP_SetEntryObject");
static_assert(offsetof(AvatarCreateSlotHasWidget_BP_SetEntryObject, Item) == 0x000000, "Member 'AvatarCreateSlotHasWidget_BP_SetEntryObject::Item' has a wrong offset!");

// Function OutGameModule.AvatarCreateSlotHasWidget.BP_GetEntryObject
// 0x0008 (0x0008 - 0x0000)
struct AvatarCreateSlotHasWidget_BP_GetEntryObject final
{
public:
	class UAvatarCreateBaseListEntryObject*       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateSlotHasWidget_BP_GetEntryObject) == 0x000008, "Wrong alignment on AvatarCreateSlotHasWidget_BP_GetEntryObject");
static_assert(sizeof(AvatarCreateSlotHasWidget_BP_GetEntryObject) == 0x000008, "Wrong size on AvatarCreateSlotHasWidget_BP_GetEntryObject");
static_assert(offsetof(AvatarCreateSlotHasWidget_BP_GetEntryObject, ReturnValue) == 0x000000, "Member 'AvatarCreateSlotHasWidget_BP_GetEntryObject::ReturnValue' has a wrong offset!");

// Function OutGameModule.AvatarCreateMenuWidget.BP_GetMenuButton
// 0x0008 (0x0008 - 0x0000)
struct AvatarCreateMenuWidget_BP_GetMenuButton final
{
public:
	class UAvatarCreateButtonWidget*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateMenuWidget_BP_GetMenuButton) == 0x000008, "Wrong alignment on AvatarCreateMenuWidget_BP_GetMenuButton");
static_assert(sizeof(AvatarCreateMenuWidget_BP_GetMenuButton) == 0x000008, "Wrong size on AvatarCreateMenuWidget_BP_GetMenuButton");
static_assert(offsetof(AvatarCreateMenuWidget_BP_GetMenuButton, ReturnValue) == 0x000000, "Member 'AvatarCreateMenuWidget_BP_GetMenuButton::ReturnValue' has a wrong offset!");

// Function OutGameModule.CharacterPanel.BP_SetCharacter
// 0x0001 (0x0001 - 0x0000)
struct CharacterPanel_BP_SetCharacter final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterPanel_BP_SetCharacter) == 0x000001, "Wrong alignment on CharacterPanel_BP_SetCharacter");
static_assert(sizeof(CharacterPanel_BP_SetCharacter) == 0x000001, "Wrong size on CharacterPanel_BP_SetCharacter");
static_assert(offsetof(CharacterPanel_BP_SetCharacter, CharacterId) == 0x000000, "Member 'CharacterPanel_BP_SetCharacter::CharacterId' has a wrong offset!");

// Function OutGameModule.PlayerNameCharacterPanel.BP_SetName
// 0x0010 (0x0010 - 0x0000)
struct PlayerNameCharacterPanel_BP_SetName final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerNameCharacterPanel_BP_SetName) == 0x000008, "Wrong alignment on PlayerNameCharacterPanel_BP_SetName");
static_assert(sizeof(PlayerNameCharacterPanel_BP_SetName) == 0x000010, "Wrong size on PlayerNameCharacterPanel_BP_SetName");
static_assert(offsetof(PlayerNameCharacterPanel_BP_SetName, Name_0) == 0x000000, "Member 'PlayerNameCharacterPanel_BP_SetName::Name_0' has a wrong offset!");

// Function OutGameModule.AvatarCreatePartsListWidget.OnAddFocusButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct AvatarCreatePartsListWidget_OnAddFocusButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AvatarCreatePartsListWidget_OnAddFocusButtonEvent) == 0x000008, "Wrong alignment on AvatarCreatePartsListWidget_OnAddFocusButtonEvent");
static_assert(sizeof(AvatarCreatePartsListWidget_OnAddFocusButtonEvent) == 0x000010, "Wrong size on AvatarCreatePartsListWidget_OnAddFocusButtonEvent");
static_assert(offsetof(AvatarCreatePartsListWidget_OnAddFocusButtonEvent, Widget) == 0x000000, "Member 'AvatarCreatePartsListWidget_OnAddFocusButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(AvatarCreatePartsListWidget_OnAddFocusButtonEvent, InputType) == 0x000008, "Member 'AvatarCreatePartsListWidget_OnAddFocusButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.AvatarCreatePartsListWidget.OnDecideButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct AvatarCreatePartsListWidget_OnDecideButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AvatarCreatePartsListWidget_OnDecideButtonEvent) == 0x000008, "Wrong alignment on AvatarCreatePartsListWidget_OnDecideButtonEvent");
static_assert(sizeof(AvatarCreatePartsListWidget_OnDecideButtonEvent) == 0x000010, "Wrong size on AvatarCreatePartsListWidget_OnDecideButtonEvent");
static_assert(offsetof(AvatarCreatePartsListWidget_OnDecideButtonEvent, Widget) == 0x000000, "Member 'AvatarCreatePartsListWidget_OnDecideButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(AvatarCreatePartsListWidget_OnDecideButtonEvent, InputType) == 0x000008, "Member 'AvatarCreatePartsListWidget_OnDecideButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.AvatarCreateSelectMenuWidget.BP_SetCaptureType
// 0x0008 (0x0008 - 0x0000)
struct AvatarCreateSelectMenuWidget_BP_SetCaptureType final
{
public:
	ESceneCaptureAvatarTypeId                     ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         bodyScaleIndex;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateSelectMenuWidget_BP_SetCaptureType) == 0x000004, "Wrong alignment on AvatarCreateSelectMenuWidget_BP_SetCaptureType");
static_assert(sizeof(AvatarCreateSelectMenuWidget_BP_SetCaptureType) == 0x000008, "Wrong size on AvatarCreateSelectMenuWidget_BP_SetCaptureType");
static_assert(offsetof(AvatarCreateSelectMenuWidget_BP_SetCaptureType, ID) == 0x000000, "Member 'AvatarCreateSelectMenuWidget_BP_SetCaptureType::ID' has a wrong offset!");
static_assert(offsetof(AvatarCreateSelectMenuWidget_BP_SetCaptureType, bodyScaleIndex) == 0x000004, "Member 'AvatarCreateSelectMenuWidget_BP_SetCaptureType::bodyScaleIndex' has a wrong offset!");

// Function OutGameModule.AvatarCreateSelectMenuWidget.OnChangedAvatarSettings
// 0x0004 (0x0004 - 0x0000)
struct AvatarCreateSelectMenuWidget_OnChangedAvatarSettings final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateSelectMenuWidget_OnChangedAvatarSettings) == 0x000004, "Wrong alignment on AvatarCreateSelectMenuWidget_OnChangedAvatarSettings");
static_assert(sizeof(AvatarCreateSelectMenuWidget_OnChangedAvatarSettings) == 0x000004, "Wrong size on AvatarCreateSelectMenuWidget_OnChangedAvatarSettings");
static_assert(offsetof(AvatarCreateSelectMenuWidget_OnChangedAvatarSettings, Type) == 0x000000, "Member 'AvatarCreateSelectMenuWidget_OnChangedAvatarSettings::Type' has a wrong offset!");

// Function OutGameModule.PlayMenuWidget.ChangeBattleSequence
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuWidget_ChangeBattleSequence final
{
public:
	EBattleStartSequenceType                      Sequence;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuWidget_ChangeBattleSequence) == 0x000001, "Wrong alignment on PlayMenuWidget_ChangeBattleSequence");
static_assert(sizeof(PlayMenuWidget_ChangeBattleSequence) == 0x000001, "Wrong size on PlayMenuWidget_ChangeBattleSequence");
static_assert(offsetof(PlayMenuWidget_ChangeBattleSequence, Sequence) == 0x000000, "Member 'PlayMenuWidget_ChangeBattleSequence::Sequence' has a wrong offset!");

// Function OutGameModule.PlayMenuWidget.DoCustomNavigationBattleRule
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuWidget_DoCustomNavigationBattleRule final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuWidget_DoCustomNavigationBattleRule) == 0x000008, "Wrong alignment on PlayMenuWidget_DoCustomNavigationBattleRule");
static_assert(sizeof(PlayMenuWidget_DoCustomNavigationBattleRule) == 0x000010, "Wrong size on PlayMenuWidget_DoCustomNavigationBattleRule");
static_assert(offsetof(PlayMenuWidget_DoCustomNavigationBattleRule, UiNavigation) == 0x000000, "Member 'PlayMenuWidget_DoCustomNavigationBattleRule::UiNavigation' has a wrong offset!");
static_assert(offsetof(PlayMenuWidget_DoCustomNavigationBattleRule, ReturnValue) == 0x000008, "Member 'PlayMenuWidget_DoCustomNavigationBattleRule::ReturnValue' has a wrong offset!");

// Function OutGameModule.PlayMenuWidget.DoCustomNavigationMyAD
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuWidget_DoCustomNavigationMyAD final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuWidget_DoCustomNavigationMyAD) == 0x000008, "Wrong alignment on PlayMenuWidget_DoCustomNavigationMyAD");
static_assert(sizeof(PlayMenuWidget_DoCustomNavigationMyAD) == 0x000010, "Wrong size on PlayMenuWidget_DoCustomNavigationMyAD");
static_assert(offsetof(PlayMenuWidget_DoCustomNavigationMyAD, UiNavigation) == 0x000000, "Member 'PlayMenuWidget_DoCustomNavigationMyAD::UiNavigation' has a wrong offset!");
static_assert(offsetof(PlayMenuWidget_DoCustomNavigationMyAD, ReturnValue) == 0x000008, "Member 'PlayMenuWidget_DoCustomNavigationMyAD::ReturnValue' has a wrong offset!");

// Function OutGameModule.PlayMenuWidget.GetOpenSubLevel
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuWidget_GetOpenSubLevel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuWidget_GetOpenSubLevel) == 0x000001, "Wrong alignment on PlayMenuWidget_GetOpenSubLevel");
static_assert(sizeof(PlayMenuWidget_GetOpenSubLevel) == 0x000001, "Wrong size on PlayMenuWidget_GetOpenSubLevel");
static_assert(offsetof(PlayMenuWidget_GetOpenSubLevel, ReturnValue) == 0x000000, "Member 'PlayMenuWidget_GetOpenSubLevel::ReturnValue' has a wrong offset!");

// Function OutGameModule.PlayMenuWidget.OnChangeBattleSequence
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuWidget_OnChangeBattleSequence final
{
public:
	EBattleStartSequenceType                      Sequence;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuWidget_OnChangeBattleSequence) == 0x000001, "Wrong alignment on PlayMenuWidget_OnChangeBattleSequence");
static_assert(sizeof(PlayMenuWidget_OnChangeBattleSequence) == 0x000001, "Wrong size on PlayMenuWidget_OnChangeBattleSequence");
static_assert(offsetof(PlayMenuWidget_OnChangeBattleSequence, Sequence) == 0x000000, "Member 'PlayMenuWidget_OnChangeBattleSequence::Sequence' has a wrong offset!");

// Function OutGameModule.PlayMenuWidget.OnCloseTutorialWindow
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuWidget_OnCloseTutorialWindow final
{
public:
	ETutorialPopupScene                           Scene;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuWidget_OnCloseTutorialWindow) == 0x000001, "Wrong alignment on PlayMenuWidget_OnCloseTutorialWindow");
static_assert(sizeof(PlayMenuWidget_OnCloseTutorialWindow) == 0x000001, "Wrong size on PlayMenuWidget_OnCloseTutorialWindow");
static_assert(offsetof(PlayMenuWidget_OnCloseTutorialWindow, Scene) == 0x000000, "Member 'PlayMenuWidget_OnCloseTutorialWindow::Scene' has a wrong offset!");

// Function OutGameModule.PlayMenuWidget.OnDecideMainMenuBattleRuleEvent
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuWidget_OnDecideMainMenuBattleRuleEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuWidget_OnDecideMainMenuBattleRuleEvent) == 0x000008, "Wrong alignment on PlayMenuWidget_OnDecideMainMenuBattleRuleEvent");
static_assert(sizeof(PlayMenuWidget_OnDecideMainMenuBattleRuleEvent) == 0x000010, "Wrong size on PlayMenuWidget_OnDecideMainMenuBattleRuleEvent");
static_assert(offsetof(PlayMenuWidget_OnDecideMainMenuBattleRuleEvent, Widget) == 0x000000, "Member 'PlayMenuWidget_OnDecideMainMenuBattleRuleEvent::Widget' has a wrong offset!");
static_assert(offsetof(PlayMenuWidget_OnDecideMainMenuBattleRuleEvent, InputType) == 0x000008, "Member 'PlayMenuWidget_OnDecideMainMenuBattleRuleEvent::InputType' has a wrong offset!");

// Function OutGameModule.PlayMenuWidget.OnOpenMenuList
// 0x0004 (0x0004 - 0x0000)
struct PlayMenuWidget_OnOpenMenuList final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuWidget_OnOpenMenuList) == 0x000004, "Wrong alignment on PlayMenuWidget_OnOpenMenuList");
static_assert(sizeof(PlayMenuWidget_OnOpenMenuList) == 0x000004, "Wrong size on PlayMenuWidget_OnOpenMenuList");
static_assert(offsetof(PlayMenuWidget_OnOpenMenuList, Index_0) == 0x000000, "Member 'PlayMenuWidget_OnOpenMenuList::Index_0' has a wrong offset!");

// Function OutGameModule.PlayMenuWidget.OpenMission
// 0x0008 (0x0008 - 0x0000)
struct PlayMenuWidget_OpenMission final
{
public:
	class ULevelStreamingDynamic*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuWidget_OpenMission) == 0x000008, "Wrong alignment on PlayMenuWidget_OpenMission");
static_assert(sizeof(PlayMenuWidget_OpenMission) == 0x000008, "Wrong size on PlayMenuWidget_OpenMission");
static_assert(offsetof(PlayMenuWidget_OpenMission, ReturnValue) == 0x000000, "Member 'PlayMenuWidget_OpenMission::ReturnValue' has a wrong offset!");

// Function OutGameModule.PlayMenuWidget.SetUseStandbyVoice
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuWidget_SetUseStandbyVoice final
{
public:
	bool                                          bUse;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuWidget_SetUseStandbyVoice) == 0x000001, "Wrong alignment on PlayMenuWidget_SetUseStandbyVoice");
static_assert(sizeof(PlayMenuWidget_SetUseStandbyVoice) == 0x000001, "Wrong size on PlayMenuWidget_SetUseStandbyVoice");
static_assert(offsetof(PlayMenuWidget_SetUseStandbyVoice, bUse) == 0x000000, "Member 'PlayMenuWidget_SetUseStandbyVoice::bUse' has a wrong offset!");

// Function OutGameModule.AvatarCreateWidget.DoCustomSaveButtonNavigation
// 0x0001 (0x0001 - 0x0000)
struct AvatarCreateWidget_DoCustomSaveButtonNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AvatarCreateWidget_DoCustomSaveButtonNavigation) == 0x000001, "Wrong alignment on AvatarCreateWidget_DoCustomSaveButtonNavigation");
static_assert(sizeof(AvatarCreateWidget_DoCustomSaveButtonNavigation) == 0x000001, "Wrong size on AvatarCreateWidget_DoCustomSaveButtonNavigation");
static_assert(offsetof(AvatarCreateWidget_DoCustomSaveButtonNavigation, UiNavigation) == 0x000000, "Member 'AvatarCreateWidget_DoCustomSaveButtonNavigation::UiNavigation' has a wrong offset!");

// Function OutGameModule.BaseSettingWidget.GetActionNameSettingText
// 0x0020 (0x0020 - 0x0000)
struct BaseSettingWidget_GetActionNameSettingText final
{
public:
	EKeyConfigurableCommand                       Command;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDerived;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseSettingWidget_GetActionNameSettingText) == 0x000008, "Wrong alignment on BaseSettingWidget_GetActionNameSettingText");
static_assert(sizeof(BaseSettingWidget_GetActionNameSettingText) == 0x000020, "Wrong size on BaseSettingWidget_GetActionNameSettingText");
static_assert(offsetof(BaseSettingWidget_GetActionNameSettingText, Command) == 0x000000, "Member 'BaseSettingWidget_GetActionNameSettingText::Command' has a wrong offset!");
static_assert(offsetof(BaseSettingWidget_GetActionNameSettingText, IsDerived) == 0x000001, "Member 'BaseSettingWidget_GetActionNameSettingText::IsDerived' has a wrong offset!");
static_assert(offsetof(BaseSettingWidget_GetActionNameSettingText, ReturnValue) == 0x000008, "Member 'BaseSettingWidget_GetActionNameSettingText::ReturnValue' has a wrong offset!");

// Function OutGameModule.BattleRecordObject.BP_SetBattleRecordData
// 0x0048 (0x0048 - 0x0000)
struct BattleRecordObject_BP_SetBattleRecordData final
{
public:
	struct FBattleRecordData                      Data;                                              // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleRecordObject_BP_SetBattleRecordData) == 0x000008, "Wrong alignment on BattleRecordObject_BP_SetBattleRecordData");
static_assert(sizeof(BattleRecordObject_BP_SetBattleRecordData) == 0x000048, "Wrong size on BattleRecordObject_BP_SetBattleRecordData");
static_assert(offsetof(BattleRecordObject_BP_SetBattleRecordData, Data) == 0x000000, "Member 'BattleRecordObject_BP_SetBattleRecordData::Data' has a wrong offset!");

// Function OutGameModule.BattleRecordObject.BP_SetFramType
// 0x0001 (0x0001 - 0x0000)
struct BattleRecordObject_BP_SetFramType final
{
public:
	EBattleRecordFramType                         Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleRecordObject_BP_SetFramType) == 0x000001, "Wrong alignment on BattleRecordObject_BP_SetFramType");
static_assert(sizeof(BattleRecordObject_BP_SetFramType) == 0x000001, "Wrong size on BattleRecordObject_BP_SetFramType");
static_assert(offsetof(BattleRecordObject_BP_SetFramType, Type) == 0x000000, "Member 'BattleRecordObject_BP_SetFramType::Type' has a wrong offset!");

// Function OutGameModule.BattleRecordObject.BP_GetBattleRecord
// 0x0048 (0x0048 - 0x0000)
struct BattleRecordObject_BP_GetBattleRecord final
{
public:
	struct FBattleRecordData                      ReturnValue;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleRecordObject_BP_GetBattleRecord) == 0x000008, "Wrong alignment on BattleRecordObject_BP_GetBattleRecord");
static_assert(sizeof(BattleRecordObject_BP_GetBattleRecord) == 0x000048, "Wrong size on BattleRecordObject_BP_GetBattleRecord");
static_assert(offsetof(BattleRecordObject_BP_GetBattleRecord, ReturnValue) == 0x000000, "Member 'BattleRecordObject_BP_GetBattleRecord::ReturnValue' has a wrong offset!");

// Function OutGameModule.BattleRecordObject.BP_GetFramType
// 0x0001 (0x0001 - 0x0000)
struct BattleRecordObject_BP_GetFramType final
{
public:
	EBattleRecordFramType                         ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleRecordObject_BP_GetFramType) == 0x000001, "Wrong alignment on BattleRecordObject_BP_GetFramType");
static_assert(sizeof(BattleRecordObject_BP_GetFramType) == 0x000001, "Wrong size on BattleRecordObject_BP_GetFramType");
static_assert(offsetof(BattleRecordObject_BP_GetFramType, ReturnValue) == 0x000000, "Member 'BattleRecordObject_BP_GetFramType::ReturnValue' has a wrong offset!");

// Function OutGameModule.BattleRecordItemWidget.BP_ChangeItemData
// 0x0008 (0x0008 - 0x0000)
struct BattleRecordItemWidget_BP_ChangeItemData final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleRecordItemWidget_BP_ChangeItemData) == 0x000008, "Wrong alignment on BattleRecordItemWidget_BP_ChangeItemData");
static_assert(sizeof(BattleRecordItemWidget_BP_ChangeItemData) == 0x000008, "Wrong size on BattleRecordItemWidget_BP_ChangeItemData");
static_assert(offsetof(BattleRecordItemWidget_BP_ChangeItemData, Item) == 0x000000, "Member 'BattleRecordItemWidget_BP_ChangeItemData::Item' has a wrong offset!");

// Function OutGameModule.RankingRemunerationScoreWidget.SetBorderText
// 0x0008 (0x0008 - 0x0000)
struct RankingRemunerationScoreWidget_SetBorderText final
{
public:
	int32                                         Top;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Under;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RankingRemunerationScoreWidget_SetBorderText) == 0x000004, "Wrong alignment on RankingRemunerationScoreWidget_SetBorderText");
static_assert(sizeof(RankingRemunerationScoreWidget_SetBorderText) == 0x000008, "Wrong size on RankingRemunerationScoreWidget_SetBorderText");
static_assert(offsetof(RankingRemunerationScoreWidget_SetBorderText, Top) == 0x000000, "Member 'RankingRemunerationScoreWidget_SetBorderText::Top' has a wrong offset!");
static_assert(offsetof(RankingRemunerationScoreWidget_SetBorderText, Under) == 0x000004, "Member 'RankingRemunerationScoreWidget_SetBorderText::Under' has a wrong offset!");

// Function OutGameModule.RankingRemunerationScoreWidget.SetLeagueText
// 0x0004 (0x0004 - 0x0000)
struct RankingRemunerationScoreWidget_SetLeagueText final
{
public:
	int32                                         LeagueCode;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RankingRemunerationScoreWidget_SetLeagueText) == 0x000004, "Wrong alignment on RankingRemunerationScoreWidget_SetLeagueText");
static_assert(sizeof(RankingRemunerationScoreWidget_SetLeagueText) == 0x000004, "Wrong size on RankingRemunerationScoreWidget_SetLeagueText");
static_assert(offsetof(RankingRemunerationScoreWidget_SetLeagueText, LeagueCode) == 0x000000, "Member 'RankingRemunerationScoreWidget_SetLeagueText::LeagueCode' has a wrong offset!");

// Function OutGameModule.BattleRecordAppWidget.NavigationCustom
// 0x0010 (0x0010 - 0x0000)
struct BattleRecordAppWidget_NavigationCustom final
{
public:
	EUINavigation                                 NavigationType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleRecordAppWidget_NavigationCustom) == 0x000008, "Wrong alignment on BattleRecordAppWidget_NavigationCustom");
static_assert(sizeof(BattleRecordAppWidget_NavigationCustom) == 0x000010, "Wrong size on BattleRecordAppWidget_NavigationCustom");
static_assert(offsetof(BattleRecordAppWidget_NavigationCustom, NavigationType) == 0x000000, "Member 'BattleRecordAppWidget_NavigationCustom::NavigationType' has a wrong offset!");
static_assert(offsetof(BattleRecordAppWidget_NavigationCustom, ReturnValue) == 0x000008, "Member 'BattleRecordAppWidget_NavigationCustom::ReturnValue' has a wrong offset!");

// Function OutGameModule.BattleRecordAppWidget.OnDecideNextButtonDelegate
// 0x0010 (0x0010 - 0x0000)
struct BattleRecordAppWidget_OnDecideNextButtonDelegate final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleRecordAppWidget_OnDecideNextButtonDelegate) == 0x000008, "Wrong alignment on BattleRecordAppWidget_OnDecideNextButtonDelegate");
static_assert(sizeof(BattleRecordAppWidget_OnDecideNextButtonDelegate) == 0x000010, "Wrong size on BattleRecordAppWidget_OnDecideNextButtonDelegate");
static_assert(offsetof(BattleRecordAppWidget_OnDecideNextButtonDelegate, Widget) == 0x000000, "Member 'BattleRecordAppWidget_OnDecideNextButtonDelegate::Widget' has a wrong offset!");
static_assert(offsetof(BattleRecordAppWidget_OnDecideNextButtonDelegate, InputType) == 0x000008, "Member 'BattleRecordAppWidget_OnDecideNextButtonDelegate::InputType' has a wrong offset!");

// Function OutGameModule.BattleRecordAppWidget.OnDecidePrevButtonDelegate
// 0x0010 (0x0010 - 0x0000)
struct BattleRecordAppWidget_OnDecidePrevButtonDelegate final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleRecordAppWidget_OnDecidePrevButtonDelegate) == 0x000008, "Wrong alignment on BattleRecordAppWidget_OnDecidePrevButtonDelegate");
static_assert(sizeof(BattleRecordAppWidget_OnDecidePrevButtonDelegate) == 0x000010, "Wrong size on BattleRecordAppWidget_OnDecidePrevButtonDelegate");
static_assert(offsetof(BattleRecordAppWidget_OnDecidePrevButtonDelegate, Widget) == 0x000000, "Member 'BattleRecordAppWidget_OnDecidePrevButtonDelegate::Widget' has a wrong offset!");
static_assert(offsetof(BattleRecordAppWidget_OnDecidePrevButtonDelegate, InputType) == 0x000008, "Member 'BattleRecordAppWidget_OnDecidePrevButtonDelegate::InputType' has a wrong offset!");

// Function OutGameModule.BattleRecordAppWidget.OnFinishFetchDataEvent
// 0x0004 (0x0004 - 0x0000)
struct BattleRecordAppWidget_OnFinishFetchDataEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleRecordAppWidget_OnFinishFetchDataEvent) == 0x000004, "Wrong alignment on BattleRecordAppWidget_OnFinishFetchDataEvent");
static_assert(sizeof(BattleRecordAppWidget_OnFinishFetchDataEvent) == 0x000004, "Wrong size on BattleRecordAppWidget_OnFinishFetchDataEvent");
static_assert(offsetof(BattleRecordAppWidget_OnFinishFetchDataEvent, RequestId) == 0x000000, "Member 'BattleRecordAppWidget_OnFinishFetchDataEvent::RequestId' has a wrong offset!");

// DelegateFunction OutGameModule.ProgressFinishDelegateWidget.FinishProgressDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ProgressFinishDelegateWidget_FinishProgressDelegate__DelegateSignature final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressFinishDelegateWidget_FinishProgressDelegate__DelegateSignature) == 0x000008, "Wrong alignment on ProgressFinishDelegateWidget_FinishProgressDelegate__DelegateSignature");
static_assert(sizeof(ProgressFinishDelegateWidget_FinishProgressDelegate__DelegateSignature) == 0x000008, "Wrong size on ProgressFinishDelegateWidget_FinishProgressDelegate__DelegateSignature");
static_assert(offsetof(ProgressFinishDelegateWidget_FinishProgressDelegate__DelegateSignature, Widget) == 0x000000, "Member 'ProgressFinishDelegateWidget_FinishProgressDelegate__DelegateSignature::Widget' has a wrong offset!");

// Function OutGameModule.RankingEventWidget.OnCompleteEvent
// 0x0004 (0x0004 - 0x0000)
struct RankingEventWidget_OnCompleteEvent final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RankingEventWidget_OnCompleteEvent) == 0x000004, "Wrong alignment on RankingEventWidget_OnCompleteEvent");
static_assert(sizeof(RankingEventWidget_OnCompleteEvent) == 0x000004, "Wrong size on RankingEventWidget_OnCompleteEvent");
static_assert(offsetof(RankingEventWidget_OnCompleteEvent, ID) == 0x000000, "Member 'RankingEventWidget_OnCompleteEvent::ID' has a wrong offset!");

// DelegateFunction OutGameModule.ResultRewardDirectingWidget.FinishProgressDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ResultRewardDirectingWidget_FinishProgressDelegate__DelegateSignature final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ResultRewardDirectingWidget_FinishProgressDelegate__DelegateSignature) == 0x000008, "Wrong alignment on ResultRewardDirectingWidget_FinishProgressDelegate__DelegateSignature");
static_assert(sizeof(ResultRewardDirectingWidget_FinishProgressDelegate__DelegateSignature) == 0x000008, "Wrong size on ResultRewardDirectingWidget_FinishProgressDelegate__DelegateSignature");
static_assert(offsetof(ResultRewardDirectingWidget_FinishProgressDelegate__DelegateSignature, Widget) == 0x000000, "Member 'ResultRewardDirectingWidget_FinishProgressDelegate__DelegateSignature::Widget' has a wrong offset!");

// Function OutGameModule.ResultRewardDirectingWidget.Skip
// 0x0008 (0x0008 - 0x0000)
struct ResultRewardDirectingWidget_Skip final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ResultRewardDirectingWidget_Skip) == 0x000008, "Wrong alignment on ResultRewardDirectingWidget_Skip");
static_assert(sizeof(ResultRewardDirectingWidget_Skip) == 0x000008, "Wrong size on ResultRewardDirectingWidget_Skip");
static_assert(offsetof(ResultRewardDirectingWidget_Skip, Object) == 0x000000, "Member 'ResultRewardDirectingWidget_Skip::Object' has a wrong offset!");

// Function OutGameModule.RankingDetails.OnDecideButton
// 0x0010 (0x0010 - 0x0000)
struct RankingDetails_OnDecideButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RankingDetails_OnDecideButton) == 0x000008, "Wrong alignment on RankingDetails_OnDecideButton");
static_assert(sizeof(RankingDetails_OnDecideButton) == 0x000010, "Wrong size on RankingDetails_OnDecideButton");
static_assert(offsetof(RankingDetails_OnDecideButton, Widget) == 0x000000, "Member 'RankingDetails_OnDecideButton::Widget' has a wrong offset!");
static_assert(offsetof(RankingDetails_OnDecideButton, InputType) == 0x000008, "Member 'RankingDetails_OnDecideButton::InputType' has a wrong offset!");

// Function OutGameModule.BattleRewardSwitcherWidget.OnFinishedBattleReward
// 0x0008 (0x0008 - 0x0000)
struct BattleRewardSwitcherWidget_OnFinishedBattleReward final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleRewardSwitcherWidget_OnFinishedBattleReward) == 0x000008, "Wrong alignment on BattleRewardSwitcherWidget_OnFinishedBattleReward");
static_assert(sizeof(BattleRewardSwitcherWidget_OnFinishedBattleReward) == 0x000008, "Wrong size on BattleRewardSwitcherWidget_OnFinishedBattleReward");
static_assert(offsetof(BattleRewardSwitcherWidget_OnFinishedBattleReward, Widget) == 0x000000, "Member 'BattleRewardSwitcherWidget_OnFinishedBattleReward::Widget' has a wrong offset!");

// Function OutGameModule.BattleRewardSwitcherWidget.OnFinishedSpecialLicenseReward
// 0x0008 (0x0008 - 0x0000)
struct BattleRewardSwitcherWidget_OnFinishedSpecialLicenseReward final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleRewardSwitcherWidget_OnFinishedSpecialLicenseReward) == 0x000008, "Wrong alignment on BattleRewardSwitcherWidget_OnFinishedSpecialLicenseReward");
static_assert(sizeof(BattleRewardSwitcherWidget_OnFinishedSpecialLicenseReward) == 0x000008, "Wrong size on BattleRewardSwitcherWidget_OnFinishedSpecialLicenseReward");
static_assert(offsetof(BattleRewardSwitcherWidget_OnFinishedSpecialLicenseReward, Widget) == 0x000000, "Member 'BattleRewardSwitcherWidget_OnFinishedSpecialLicenseReward::Widget' has a wrong offset!");

// Function OutGameModule.RankNumberWidget.SetValue
// 0x0004 (0x0004 - 0x0000)
struct RankNumberWidget_SetValue final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RankNumberWidget_SetValue) == 0x000004, "Wrong alignment on RankNumberWidget_SetValue");
static_assert(sizeof(RankNumberWidget_SetValue) == 0x000004, "Wrong size on RankNumberWidget_SetValue");
static_assert(offsetof(RankNumberWidget_SetValue, Value) == 0x000000, "Member 'RankNumberWidget_SetValue::Value' has a wrong offset!");

// Function OutGameModule.BattleRewardWidget.FinishDirectingPlayerLevel
// 0x0008 (0x0008 - 0x0000)
struct BattleRewardWidget_FinishDirectingPlayerLevel final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleRewardWidget_FinishDirectingPlayerLevel) == 0x000008, "Wrong alignment on BattleRewardWidget_FinishDirectingPlayerLevel");
static_assert(sizeof(BattleRewardWidget_FinishDirectingPlayerLevel) == 0x000008, "Wrong size on BattleRewardWidget_FinishDirectingPlayerLevel");
static_assert(offsetof(BattleRewardWidget_FinishDirectingPlayerLevel, Widget) == 0x000000, "Member 'BattleRewardWidget_FinishDirectingPlayerLevel::Widget' has a wrong offset!");

// Function OutGameModule.BattleRewardWidget.FinishProgressPlayerLevel
// 0x0008 (0x0008 - 0x0000)
struct BattleRewardWidget_FinishProgressPlayerLevel final
{
public:
	class UProgressBarWidget*                     ProgressBar;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleRewardWidget_FinishProgressPlayerLevel) == 0x000008, "Wrong alignment on BattleRewardWidget_FinishProgressPlayerLevel");
static_assert(sizeof(BattleRewardWidget_FinishProgressPlayerLevel) == 0x000008, "Wrong size on BattleRewardWidget_FinishProgressPlayerLevel");
static_assert(offsetof(BattleRewardWidget_FinishProgressPlayerLevel, ProgressBar) == 0x000000, "Member 'BattleRewardWidget_FinishProgressPlayerLevel::ProgressBar' has a wrong offset!");

// Function OutGameModule.BattleRewardWidget.FinishProgressSeasonPass
// 0x0008 (0x0008 - 0x0000)
struct BattleRewardWidget_FinishProgressSeasonPass final
{
public:
	class UProgressBarWidget*                     ProgressBar;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleRewardWidget_FinishProgressSeasonPass) == 0x000008, "Wrong alignment on BattleRewardWidget_FinishProgressSeasonPass");
static_assert(sizeof(BattleRewardWidget_FinishProgressSeasonPass) == 0x000008, "Wrong size on BattleRewardWidget_FinishProgressSeasonPass");
static_assert(offsetof(BattleRewardWidget_FinishProgressSeasonPass, ProgressBar) == 0x000000, "Member 'BattleRewardWidget_FinishProgressSeasonPass::ProgressBar' has a wrong offset!");

// Function OutGameModule.BattleRewardWidget.LevelUpPlayerLevel
// 0x0004 (0x0004 - 0x0000)
struct BattleRewardWidget_LevelUpPlayerLevel final
{
public:
	int32                                         LevelCount;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleRewardWidget_LevelUpPlayerLevel) == 0x000004, "Wrong alignment on BattleRewardWidget_LevelUpPlayerLevel");
static_assert(sizeof(BattleRewardWidget_LevelUpPlayerLevel) == 0x000004, "Wrong size on BattleRewardWidget_LevelUpPlayerLevel");
static_assert(offsetof(BattleRewardWidget_LevelUpPlayerLevel, LevelCount) == 0x000000, "Member 'BattleRewardWidget_LevelUpPlayerLevel::LevelCount' has a wrong offset!");

// Function OutGameModule.BattleRewardWidget.LevelUpSeasonPass
// 0x0004 (0x0004 - 0x0000)
struct BattleRewardWidget_LevelUpSeasonPass final
{
public:
	int32                                         LevelCount;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleRewardWidget_LevelUpSeasonPass) == 0x000004, "Wrong alignment on BattleRewardWidget_LevelUpSeasonPass");
static_assert(sizeof(BattleRewardWidget_LevelUpSeasonPass) == 0x000004, "Wrong size on BattleRewardWidget_LevelUpSeasonPass");
static_assert(offsetof(BattleRewardWidget_LevelUpSeasonPass, LevelCount) == 0x000000, "Member 'BattleRewardWidget_LevelUpSeasonPass::LevelCount' has a wrong offset!");

// Function OutGameModule.BattleRewardWidget.ProgressGold
// 0x0004 (0x0004 - 0x0000)
struct BattleRewardWidget_ProgressGold final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleRewardWidget_ProgressGold) == 0x000004, "Wrong alignment on BattleRewardWidget_ProgressGold");
static_assert(sizeof(BattleRewardWidget_ProgressGold) == 0x000004, "Wrong size on BattleRewardWidget_ProgressGold");
static_assert(offsetof(BattleRewardWidget_ProgressGold, DeltaTime) == 0x000000, "Member 'BattleRewardWidget_ProgressGold::DeltaTime' has a wrong offset!");

// Function OutGameModule.BattleRewardWidget.ProgressGuildPoint
// 0x0004 (0x0004 - 0x0000)
struct BattleRewardWidget_ProgressGuildPoint final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleRewardWidget_ProgressGuildPoint) == 0x000004, "Wrong alignment on BattleRewardWidget_ProgressGuildPoint");
static_assert(sizeof(BattleRewardWidget_ProgressGuildPoint) == 0x000004, "Wrong size on BattleRewardWidget_ProgressGuildPoint");
static_assert(offsetof(BattleRewardWidget_ProgressGuildPoint, DeltaTime) == 0x000000, "Member 'BattleRewardWidget_ProgressGuildPoint::DeltaTime' has a wrong offset!");

// Function OutGameModule.BattleRewardWidget.ProgressPlayerLevel
// 0x0008 (0x0008 - 0x0000)
struct BattleRewardWidget_ProgressPlayerLevel final
{
public:
	float                                         NowValue;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleRewardWidget_ProgressPlayerLevel) == 0x000004, "Wrong alignment on BattleRewardWidget_ProgressPlayerLevel");
static_assert(sizeof(BattleRewardWidget_ProgressPlayerLevel) == 0x000008, "Wrong size on BattleRewardWidget_ProgressPlayerLevel");
static_assert(offsetof(BattleRewardWidget_ProgressPlayerLevel, NowValue) == 0x000000, "Member 'BattleRewardWidget_ProgressPlayerLevel::NowValue' has a wrong offset!");
static_assert(offsetof(BattleRewardWidget_ProgressPlayerLevel, MaxValue) == 0x000004, "Member 'BattleRewardWidget_ProgressPlayerLevel::MaxValue' has a wrong offset!");

// Function OutGameModule.BattleRewardWidget.ProgressSeasonPass
// 0x0008 (0x0008 - 0x0000)
struct BattleRewardWidget_ProgressSeasonPass final
{
public:
	float                                         NowValue;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleRewardWidget_ProgressSeasonPass) == 0x000004, "Wrong alignment on BattleRewardWidget_ProgressSeasonPass");
static_assert(sizeof(BattleRewardWidget_ProgressSeasonPass) == 0x000008, "Wrong size on BattleRewardWidget_ProgressSeasonPass");
static_assert(offsetof(BattleRewardWidget_ProgressSeasonPass, NowValue) == 0x000000, "Member 'BattleRewardWidget_ProgressSeasonPass::NowValue' has a wrong offset!");
static_assert(offsetof(BattleRewardWidget_ProgressSeasonPass, MaxValue) == 0x000004, "Member 'BattleRewardWidget_ProgressSeasonPass::MaxValue' has a wrong offset!");

// DelegateFunction OutGameModule.BattleRewardWidget.TickDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct BattleRewardWidget_TickDelegate__DelegateSignature final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleRewardWidget_TickDelegate__DelegateSignature) == 0x000004, "Wrong alignment on BattleRewardWidget_TickDelegate__DelegateSignature");
static_assert(sizeof(BattleRewardWidget_TickDelegate__DelegateSignature) == 0x000004, "Wrong size on BattleRewardWidget_TickDelegate__DelegateSignature");
static_assert(offsetof(BattleRewardWidget_TickDelegate__DelegateSignature, DeltaTime) == 0x000000, "Member 'BattleRewardWidget_TickDelegate__DelegateSignature::DeltaTime' has a wrong offset!");

// Function OutGameModule.RankingRemunerationSelectionWidget.DoCustomSelectWidgetNavigation
// 0x0001 (0x0001 - 0x0000)
struct RankingRemunerationSelectionWidget_DoCustomSelectWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RankingRemunerationSelectionWidget_DoCustomSelectWidgetNavigation) == 0x000001, "Wrong alignment on RankingRemunerationSelectionWidget_DoCustomSelectWidgetNavigation");
static_assert(sizeof(RankingRemunerationSelectionWidget_DoCustomSelectWidgetNavigation) == 0x000001, "Wrong size on RankingRemunerationSelectionWidget_DoCustomSelectWidgetNavigation");
static_assert(offsetof(RankingRemunerationSelectionWidget_DoCustomSelectWidgetNavigation, UiNavigation) == 0x000000, "Member 'RankingRemunerationSelectionWidget_DoCustomSelectWidgetNavigation::UiNavigation' has a wrong offset!");

// Function OutGameModule.RankingRemunerationSelectionWidget.OnAddedToFocusEvent
// 0x0010 (0x0010 - 0x0000)
struct RankingRemunerationSelectionWidget_OnAddedToFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RankingRemunerationSelectionWidget_OnAddedToFocusEvent) == 0x000008, "Wrong alignment on RankingRemunerationSelectionWidget_OnAddedToFocusEvent");
static_assert(sizeof(RankingRemunerationSelectionWidget_OnAddedToFocusEvent) == 0x000010, "Wrong size on RankingRemunerationSelectionWidget_OnAddedToFocusEvent");
static_assert(offsetof(RankingRemunerationSelectionWidget_OnAddedToFocusEvent, Widget) == 0x000000, "Member 'RankingRemunerationSelectionWidget_OnAddedToFocusEvent::Widget' has a wrong offset!");
static_assert(offsetof(RankingRemunerationSelectionWidget_OnAddedToFocusEvent, InputType) == 0x000008, "Member 'RankingRemunerationSelectionWidget_OnAddedToFocusEvent::InputType' has a wrong offset!");

// Function OutGameModule.BattleRuleDetailsEntryWidget.OnPressButtonWidget
// 0x0010 (0x0010 - 0x0000)
struct BattleRuleDetailsEntryWidget_OnPressButtonWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleRuleDetailsEntryWidget_OnPressButtonWidget) == 0x000008, "Wrong alignment on BattleRuleDetailsEntryWidget_OnPressButtonWidget");
static_assert(sizeof(BattleRuleDetailsEntryWidget_OnPressButtonWidget) == 0x000010, "Wrong size on BattleRuleDetailsEntryWidget_OnPressButtonWidget");
static_assert(offsetof(BattleRuleDetailsEntryWidget_OnPressButtonWidget, Button) == 0x000000, "Member 'BattleRuleDetailsEntryWidget_OnPressButtonWidget::Button' has a wrong offset!");
static_assert(offsetof(BattleRuleDetailsEntryWidget_OnPressButtonWidget, InputType) == 0x000008, "Member 'BattleRuleDetailsEntryWidget_OnPressButtonWidget::InputType' has a wrong offset!");

// Function OutGameModule.RankMatchRewardDirectingWidget.OnFinish
// 0x0008 (0x0008 - 0x0000)
struct RankMatchRewardDirectingWidget_OnFinish final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RankMatchRewardDirectingWidget_OnFinish) == 0x000008, "Wrong alignment on RankMatchRewardDirectingWidget_OnFinish");
static_assert(sizeof(RankMatchRewardDirectingWidget_OnFinish) == 0x000008, "Wrong size on RankMatchRewardDirectingWidget_OnFinish");
static_assert(offsetof(RankMatchRewardDirectingWidget_OnFinish, Widget) == 0x000000, "Member 'RankMatchRewardDirectingWidget_OnFinish::Widget' has a wrong offset!");

// Function OutGameModule.BattleRuleStageWidget.SetRuleStageData
// 0x0008 (0x0008 - 0x0000)
struct BattleRuleStageWidget_SetRuleStageData final
{
public:
	class UBattleRuleListEntryObject*             battleRuleListObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleRuleStageWidget_SetRuleStageData) == 0x000008, "Wrong alignment on BattleRuleStageWidget_SetRuleStageData");
static_assert(sizeof(BattleRuleStageWidget_SetRuleStageData) == 0x000008, "Wrong size on BattleRuleStageWidget_SetRuleStageData");
static_assert(offsetof(BattleRuleStageWidget_SetRuleStageData, battleRuleListObject) == 0x000000, "Member 'BattleRuleStageWidget_SetRuleStageData::battleRuleListObject' has a wrong offset!");

// Function OutGameModule.BattleRuleWidget.OnDecide
// 0x0004 (0x0004 - 0x0000)
struct BattleRuleWidget_OnDecide final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleRuleWidget_OnDecide) == 0x000004, "Wrong alignment on BattleRuleWidget_OnDecide");
static_assert(sizeof(BattleRuleWidget_OnDecide) == 0x000004, "Wrong size on BattleRuleWidget_OnDecide");
static_assert(offsetof(BattleRuleWidget_OnDecide, Index_0) == 0x000000, "Member 'BattleRuleWidget_OnDecide::Index_0' has a wrong offset!");

// DelegateFunction OutGameModule.BattleRuleWidget.OnDecideBattleRuleDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct BattleRuleWidget_OnDecideBattleRuleDelegate__DelegateSignature final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleRuleWidget_OnDecideBattleRuleDelegate__DelegateSignature) == 0x000004, "Wrong alignment on BattleRuleWidget_OnDecideBattleRuleDelegate__DelegateSignature");
static_assert(sizeof(BattleRuleWidget_OnDecideBattleRuleDelegate__DelegateSignature) == 0x000004, "Wrong size on BattleRuleWidget_OnDecideBattleRuleDelegate__DelegateSignature");
static_assert(offsetof(BattleRuleWidget_OnDecideBattleRuleDelegate__DelegateSignature, Index_0) == 0x000000, "Member 'BattleRuleWidget_OnDecideBattleRuleDelegate__DelegateSignature::Index_0' has a wrong offset!");

// Function OutGameModule.BattleRuleWidget.OnDecideListButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct BattleRuleWidget_OnDecideListButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleRuleWidget_OnDecideListButtonEvent) == 0x000008, "Wrong alignment on BattleRuleWidget_OnDecideListButtonEvent");
static_assert(sizeof(BattleRuleWidget_OnDecideListButtonEvent) == 0x000010, "Wrong size on BattleRuleWidget_OnDecideListButtonEvent");
static_assert(offsetof(BattleRuleWidget_OnDecideListButtonEvent, Widget) == 0x000000, "Member 'BattleRuleWidget_OnDecideListButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(BattleRuleWidget_OnDecideListButtonEvent, InputType) == 0x000008, "Member 'BattleRuleWidget_OnDecideListButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.BattleRuleWidget.OnDecideReturnButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct BattleRuleWidget_OnDecideReturnButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleRuleWidget_OnDecideReturnButtonEvent) == 0x000008, "Wrong alignment on BattleRuleWidget_OnDecideReturnButtonEvent");
static_assert(sizeof(BattleRuleWidget_OnDecideReturnButtonEvent) == 0x000010, "Wrong size on BattleRuleWidget_OnDecideReturnButtonEvent");
static_assert(offsetof(BattleRuleWidget_OnDecideReturnButtonEvent, Widget) == 0x000000, "Member 'BattleRuleWidget_OnDecideReturnButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(BattleRuleWidget_OnDecideReturnButtonEvent, InputType) == 0x000008, "Member 'BattleRuleWidget_OnDecideReturnButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.BattleRuleWidget.OnPressReturnButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct BattleRuleWidget_OnPressReturnButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleRuleWidget_OnPressReturnButtonEvent) == 0x000008, "Wrong alignment on BattleRuleWidget_OnPressReturnButtonEvent");
static_assert(sizeof(BattleRuleWidget_OnPressReturnButtonEvent) == 0x000010, "Wrong size on BattleRuleWidget_OnPressReturnButtonEvent");
static_assert(offsetof(BattleRuleWidget_OnPressReturnButtonEvent, Widget) == 0x000000, "Member 'BattleRuleWidget_OnPressReturnButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(BattleRuleWidget_OnPressReturnButtonEvent, InputType) == 0x000008, "Member 'BattleRuleWidget_OnPressReturnButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.BillboardAppWidget.OnAddedToFocusButtonWidget
// 0x0010 (0x0010 - 0x0000)
struct BillboardAppWidget_OnAddedToFocusButtonWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BillboardAppWidget_OnAddedToFocusButtonWidget) == 0x000008, "Wrong alignment on BillboardAppWidget_OnAddedToFocusButtonWidget");
static_assert(sizeof(BillboardAppWidget_OnAddedToFocusButtonWidget) == 0x000010, "Wrong size on BillboardAppWidget_OnAddedToFocusButtonWidget");
static_assert(offsetof(BillboardAppWidget_OnAddedToFocusButtonWidget, Button) == 0x000000, "Member 'BillboardAppWidget_OnAddedToFocusButtonWidget::Button' has a wrong offset!");
static_assert(offsetof(BillboardAppWidget_OnAddedToFocusButtonWidget, InputType) == 0x000008, "Member 'BillboardAppWidget_OnAddedToFocusButtonWidget::InputType' has a wrong offset!");

// Function OutGameModule.BillboardAppWidget.OnDecideButtonWidget
// 0x0010 (0x0010 - 0x0000)
struct BillboardAppWidget_OnDecideButtonWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BillboardAppWidget_OnDecideButtonWidget) == 0x000008, "Wrong alignment on BillboardAppWidget_OnDecideButtonWidget");
static_assert(sizeof(BillboardAppWidget_OnDecideButtonWidget) == 0x000010, "Wrong size on BillboardAppWidget_OnDecideButtonWidget");
static_assert(offsetof(BillboardAppWidget_OnDecideButtonWidget, Button) == 0x000000, "Member 'BillboardAppWidget_OnDecideButtonWidget::Button' has a wrong offset!");
static_assert(offsetof(BillboardAppWidget_OnDecideButtonWidget, InputType) == 0x000008, "Member 'BillboardAppWidget_OnDecideButtonWidget::InputType' has a wrong offset!");

// Function OutGameModule.BillboardAppWidget.OnFinishFetchDataEvent
// 0x0004 (0x0004 - 0x0000)
struct BillboardAppWidget_OnFinishFetchDataEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BillboardAppWidget_OnFinishFetchDataEvent) == 0x000004, "Wrong alignment on BillboardAppWidget_OnFinishFetchDataEvent");
static_assert(sizeof(BillboardAppWidget_OnFinishFetchDataEvent) == 0x000004, "Wrong size on BillboardAppWidget_OnFinishFetchDataEvent");
static_assert(offsetof(BillboardAppWidget_OnFinishFetchDataEvent, RequestId) == 0x000000, "Member 'BillboardAppWidget_OnFinishFetchDataEvent::RequestId' has a wrong offset!");

// Function OutGameModule.BillboardAppWidget.OnPressButtonWidget
// 0x0010 (0x0010 - 0x0000)
struct BillboardAppWidget_OnPressButtonWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BillboardAppWidget_OnPressButtonWidget) == 0x000008, "Wrong alignment on BillboardAppWidget_OnPressButtonWidget");
static_assert(sizeof(BillboardAppWidget_OnPressButtonWidget) == 0x000010, "Wrong size on BillboardAppWidget_OnPressButtonWidget");
static_assert(offsetof(BillboardAppWidget_OnPressButtonWidget, Button) == 0x000000, "Member 'BillboardAppWidget_OnPressButtonWidget::Button' has a wrong offset!");
static_assert(offsetof(BillboardAppWidget_OnPressButtonWidget, InputType) == 0x000008, "Member 'BillboardAppWidget_OnPressButtonWidget::InputType' has a wrong offset!");

// Function OutGameModule.BillboardAppWidget.OnRemovedFromFocusButtonWidget
// 0x0010 (0x0010 - 0x0000)
struct BillboardAppWidget_OnRemovedFromFocusButtonWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BillboardAppWidget_OnRemovedFromFocusButtonWidget) == 0x000008, "Wrong alignment on BillboardAppWidget_OnRemovedFromFocusButtonWidget");
static_assert(sizeof(BillboardAppWidget_OnRemovedFromFocusButtonWidget) == 0x000010, "Wrong size on BillboardAppWidget_OnRemovedFromFocusButtonWidget");
static_assert(offsetof(BillboardAppWidget_OnRemovedFromFocusButtonWidget, Button) == 0x000000, "Member 'BillboardAppWidget_OnRemovedFromFocusButtonWidget::Button' has a wrong offset!");
static_assert(offsetof(BillboardAppWidget_OnRemovedFromFocusButtonWidget, InputType) == 0x000008, "Member 'BillboardAppWidget_OnRemovedFromFocusButtonWidget::InputType' has a wrong offset!");

// Function OutGameModule.BillboardDisplayWidget.BP_SetupDaily
// 0x0004 (0x0004 - 0x0000)
struct BillboardDisplayWidget_BP_SetupDaily final
{
public:
	int32                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BillboardDisplayWidget_BP_SetupDaily) == 0x000004, "Wrong alignment on BillboardDisplayWidget_BP_SetupDaily");
static_assert(sizeof(BillboardDisplayWidget_BP_SetupDaily) == 0x000004, "Wrong size on BillboardDisplayWidget_BP_SetupDaily");
static_assert(offsetof(BillboardDisplayWidget_BP_SetupDaily, Val) == 0x000000, "Member 'BillboardDisplayWidget_BP_SetupDaily::Val' has a wrong offset!");

// Function OutGameModule.BillboardDisplayWidget.BP_SetupRank
// 0x0004 (0x0004 - 0x0000)
struct BillboardDisplayWidget_BP_SetupRank final
{
public:
	int32                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BillboardDisplayWidget_BP_SetupRank) == 0x000004, "Wrong alignment on BillboardDisplayWidget_BP_SetupRank");
static_assert(sizeof(BillboardDisplayWidget_BP_SetupRank) == 0x000004, "Wrong size on BillboardDisplayWidget_BP_SetupRank");
static_assert(offsetof(BillboardDisplayWidget_BP_SetupRank, Val) == 0x000000, "Member 'BillboardDisplayWidget_BP_SetupRank::Val' has a wrong offset!");

// Function OutGameModule.BillboardDisplayWidget.BP_SetupSum
// 0x0004 (0x0004 - 0x0000)
struct BillboardDisplayWidget_BP_SetupSum final
{
public:
	int32                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BillboardDisplayWidget_BP_SetupSum) == 0x000004, "Wrong alignment on BillboardDisplayWidget_BP_SetupSum");
static_assert(sizeof(BillboardDisplayWidget_BP_SetupSum) == 0x000004, "Wrong size on BillboardDisplayWidget_BP_SetupSum");
static_assert(offsetof(BillboardDisplayWidget_BP_SetupSum, Val) == 0x000000, "Member 'BillboardDisplayWidget_BP_SetupSum::Val' has a wrong offset!");

// Function OutGameModule.RankingRemunerationWidgetBase.DoCustomSelectWidgetNavigation
// 0x0001 (0x0001 - 0x0000)
struct RankingRemunerationWidgetBase_DoCustomSelectWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RankingRemunerationWidgetBase_DoCustomSelectWidgetNavigation) == 0x000001, "Wrong alignment on RankingRemunerationWidgetBase_DoCustomSelectWidgetNavigation");
static_assert(sizeof(RankingRemunerationWidgetBase_DoCustomSelectWidgetNavigation) == 0x000001, "Wrong size on RankingRemunerationWidgetBase_DoCustomSelectWidgetNavigation");
static_assert(offsetof(RankingRemunerationWidgetBase_DoCustomSelectWidgetNavigation, UiNavigation) == 0x000000, "Member 'RankingRemunerationWidgetBase_DoCustomSelectWidgetNavigation::UiNavigation' has a wrong offset!");

// Function OutGameModule.RankingRemunerationTabWidget.ChangeTab
// 0x0004 (0x0004 - 0x0000)
struct RankingRemunerationTabWidget_ChangeTab final
{
public:
	int32                                         NewSelectTab;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RankingRemunerationTabWidget_ChangeTab) == 0x000004, "Wrong alignment on RankingRemunerationTabWidget_ChangeTab");
static_assert(sizeof(RankingRemunerationTabWidget_ChangeTab) == 0x000004, "Wrong size on RankingRemunerationTabWidget_ChangeTab");
static_assert(offsetof(RankingRemunerationTabWidget_ChangeTab, NewSelectTab) == 0x000000, "Member 'RankingRemunerationTabWidget_ChangeTab::NewSelectTab' has a wrong offset!");

// Function OutGameModule.RankingRemunerationTabWidget.OnTryChangeTab
// 0x0004 (0x0004 - 0x0000)
struct RankingRemunerationTabWidget_OnTryChangeTab final
{
public:
	int32                                         NewSelectTab;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RankingRemunerationTabWidget_OnTryChangeTab) == 0x000004, "Wrong alignment on RankingRemunerationTabWidget_OnTryChangeTab");
static_assert(sizeof(RankingRemunerationTabWidget_OnTryChangeTab) == 0x000004, "Wrong size on RankingRemunerationTabWidget_OnTryChangeTab");
static_assert(offsetof(RankingRemunerationTabWidget_OnTryChangeTab, NewSelectTab) == 0x000000, "Member 'RankingRemunerationTabWidget_OnTryChangeTab::NewSelectTab' has a wrong offset!");

// Function OutGameModule.BootWidget.GetNextLevel
// 0x0001 (0x0001 - 0x0000)
struct BootWidget_GetNextLevel final
{
public:
	EBootWidgetNextLevel                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BootWidget_GetNextLevel) == 0x000001, "Wrong alignment on BootWidget_GetNextLevel");
static_assert(sizeof(BootWidget_GetNextLevel) == 0x000001, "Wrong size on BootWidget_GetNextLevel");
static_assert(offsetof(BootWidget_GetNextLevel, ReturnValue) == 0x000000, "Member 'BootWidget_GetNextLevel::ReturnValue' has a wrong offset!");

// Function OutGameModule.BootWidget.IsOpenAccountSelect
// 0x0001 (0x0001 - 0x0000)
struct BootWidget_IsOpenAccountSelect final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BootWidget_IsOpenAccountSelect) == 0x000001, "Wrong alignment on BootWidget_IsOpenAccountSelect");
static_assert(sizeof(BootWidget_IsOpenAccountSelect) == 0x000001, "Wrong size on BootWidget_IsOpenAccountSelect");
static_assert(offsetof(BootWidget_IsOpenAccountSelect, ReturnValue) == 0x000000, "Member 'BootWidget_IsOpenAccountSelect::ReturnValue' has a wrong offset!");

// Function OutGameModule.BootWidget.NextLogoStep
// 0x0001 (0x0001 - 0x0000)
struct BootWidget_NextLogoStep final
{
public:
	bool                                          IsMax;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BootWidget_NextLogoStep) == 0x000001, "Wrong alignment on BootWidget_NextLogoStep");
static_assert(sizeof(BootWidget_NextLogoStep) == 0x000001, "Wrong size on BootWidget_NextLogoStep");
static_assert(offsetof(BootWidget_NextLogoStep, IsMax) == 0x000000, "Member 'BootWidget_NextLogoStep::IsMax' has a wrong offset!");

// Function OutGameModule.BootWidget.OnChangePhase
// 0x0001 (0x0001 - 0x0000)
struct BootWidget_OnChangePhase final
{
public:
	EBootWidgetPhaseType                          Phase;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BootWidget_OnChangePhase) == 0x000001, "Wrong alignment on BootWidget_OnChangePhase");
static_assert(sizeof(BootWidget_OnChangePhase) == 0x000001, "Wrong size on BootWidget_OnChangePhase");
static_assert(offsetof(BootWidget_OnChangePhase, Phase) == 0x000000, "Member 'BootWidget_OnChangePhase::Phase' has a wrong offset!");

// Function OutGameModule.BootWidget.SetPhase
// 0x0001 (0x0001 - 0x0000)
struct BootWidget_SetPhase final
{
public:
	EBootWidgetPhaseType                          Phase;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BootWidget_SetPhase) == 0x000001, "Wrong alignment on BootWidget_SetPhase");
static_assert(sizeof(BootWidget_SetPhase) == 0x000001, "Wrong size on BootWidget_SetPhase");
static_assert(offsetof(BootWidget_SetPhase, Phase) == 0x000000, "Member 'BootWidget_SetPhase::Phase' has a wrong offset!");

// Function OutGameModule.BootWidget.IsOpenErrorWindow
// 0x0001 (0x0001 - 0x0000)
struct BootWidget_IsOpenErrorWindow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BootWidget_IsOpenErrorWindow) == 0x000001, "Wrong alignment on BootWidget_IsOpenErrorWindow");
static_assert(sizeof(BootWidget_IsOpenErrorWindow) == 0x000001, "Wrong size on BootWidget_IsOpenErrorWindow");
static_assert(offsetof(BootWidget_IsOpenErrorWindow, ReturnValue) == 0x000000, "Member 'BootWidget_IsOpenErrorWindow::ReturnValue' has a wrong offset!");

// Function OutGameModule.SwitcherControllerWidget.BP_GetSelectedTabIndex
// 0x0004 (0x0004 - 0x0000)
struct SwitcherControllerWidget_BP_GetSelectedTabIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SwitcherControllerWidget_BP_GetSelectedTabIndex) == 0x000004, "Wrong alignment on SwitcherControllerWidget_BP_GetSelectedTabIndex");
static_assert(sizeof(SwitcherControllerWidget_BP_GetSelectedTabIndex) == 0x000004, "Wrong size on SwitcherControllerWidget_BP_GetSelectedTabIndex");
static_assert(offsetof(SwitcherControllerWidget_BP_GetSelectedTabIndex, ReturnValue) == 0x000000, "Member 'SwitcherControllerWidget_BP_GetSelectedTabIndex::ReturnValue' has a wrong offset!");

// Function OutGameModule.SwitcherControllerWidget.OnPressTab
// 0x0010 (0x0010 - 0x0000)
struct SwitcherControllerWidget_OnPressTab final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SwitcherControllerWidget_OnPressTab) == 0x000008, "Wrong alignment on SwitcherControllerWidget_OnPressTab");
static_assert(sizeof(SwitcherControllerWidget_OnPressTab) == 0x000010, "Wrong size on SwitcherControllerWidget_OnPressTab");
static_assert(offsetof(SwitcherControllerWidget_OnPressTab, Button) == 0x000000, "Member 'SwitcherControllerWidget_OnPressTab::Button' has a wrong offset!");
static_assert(offsetof(SwitcherControllerWidget_OnPressTab, InputType) == 0x000008, "Member 'SwitcherControllerWidget_OnPressTab::InputType' has a wrong offset!");

// Function OutGameModule.SwitcherControllerWidget.OnSwitchAfter
// 0x0010 (0x0010 - 0x0000)
struct SwitcherControllerWidget_OnSwitchAfter final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SwitcherControllerWidget_OnSwitchAfter) == 0x000008, "Wrong alignment on SwitcherControllerWidget_OnSwitchAfter");
static_assert(sizeof(SwitcherControllerWidget_OnSwitchAfter) == 0x000010, "Wrong size on SwitcherControllerWidget_OnSwitchAfter");
static_assert(offsetof(SwitcherControllerWidget_OnSwitchAfter, Button) == 0x000000, "Member 'SwitcherControllerWidget_OnSwitchAfter::Button' has a wrong offset!");
static_assert(offsetof(SwitcherControllerWidget_OnSwitchAfter, InputType) == 0x000008, "Member 'SwitcherControllerWidget_OnSwitchAfter::InputType' has a wrong offset!");

// Function OutGameModule.SwitcherControllerWidget.OnSwitchBefore
// 0x0010 (0x0010 - 0x0000)
struct SwitcherControllerWidget_OnSwitchBefore final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SwitcherControllerWidget_OnSwitchBefore) == 0x000008, "Wrong alignment on SwitcherControllerWidget_OnSwitchBefore");
static_assert(sizeof(SwitcherControllerWidget_OnSwitchBefore) == 0x000010, "Wrong size on SwitcherControllerWidget_OnSwitchBefore");
static_assert(offsetof(SwitcherControllerWidget_OnSwitchBefore, Button) == 0x000000, "Member 'SwitcherControllerWidget_OnSwitchBefore::Button' has a wrong offset!");
static_assert(offsetof(SwitcherControllerWidget_OnSwitchBefore, InputType) == 0x000008, "Member 'SwitcherControllerWidget_OnSwitchBefore::InputType' has a wrong offset!");

// DelegateFunction OutGameModule.SwitcherControllerWidget.OnSwitchTabEventDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct SwitcherControllerWidget_OnSwitchTabEventDelegate__DelegateSignature final
{
public:
	int32                                         NewSelectTab;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SwitcherControllerWidget_OnSwitchTabEventDelegate__DelegateSignature) == 0x000004, "Wrong alignment on SwitcherControllerWidget_OnSwitchTabEventDelegate__DelegateSignature");
static_assert(sizeof(SwitcherControllerWidget_OnSwitchTabEventDelegate__DelegateSignature) == 0x000004, "Wrong size on SwitcherControllerWidget_OnSwitchTabEventDelegate__DelegateSignature");
static_assert(offsetof(SwitcherControllerWidget_OnSwitchTabEventDelegate__DelegateSignature, NewSelectTab) == 0x000000, "Member 'SwitcherControllerWidget_OnSwitchTabEventDelegate__DelegateSignature::NewSelectTab' has a wrong offset!");

// Function OutGameModule.CalloutTabWidget.OnSwitchTab
// 0x0010 (0x0010 - 0x0000)
struct CalloutTabWidget_OnSwitchTab final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CalloutTabWidget_OnSwitchTab) == 0x000008, "Wrong alignment on CalloutTabWidget_OnSwitchTab");
static_assert(sizeof(CalloutTabWidget_OnSwitchTab) == 0x000010, "Wrong size on CalloutTabWidget_OnSwitchTab");
static_assert(offsetof(CalloutTabWidget_OnSwitchTab, Button) == 0x000000, "Member 'CalloutTabWidget_OnSwitchTab::Button' has a wrong offset!");
static_assert(offsetof(CalloutTabWidget_OnSwitchTab, InputType) == 0x000008, "Member 'CalloutTabWidget_OnSwitchTab::InputType' has a wrong offset!");

// Function OutGameModule.CameraActorAvatarCreate.BP_SetCanInputValue
// 0x0001 (0x0001 - 0x0000)
struct CameraActorAvatarCreate_BP_SetCanInputValue final
{
public:
	bool                                          Val;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraActorAvatarCreate_BP_SetCanInputValue) == 0x000001, "Wrong alignment on CameraActorAvatarCreate_BP_SetCanInputValue");
static_assert(sizeof(CameraActorAvatarCreate_BP_SetCanInputValue) == 0x000001, "Wrong size on CameraActorAvatarCreate_BP_SetCanInputValue");
static_assert(offsetof(CameraActorAvatarCreate_BP_SetCanInputValue, Val) == 0x000000, "Member 'CameraActorAvatarCreate_BP_SetCanInputValue::Val' has a wrong offset!");

// Function OutGameModule.CameraActorAvatarCreate.BP_GetCanInputValue
// 0x0001 (0x0001 - 0x0000)
struct CameraActorAvatarCreate_BP_GetCanInputValue final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraActorAvatarCreate_BP_GetCanInputValue) == 0x000001, "Wrong alignment on CameraActorAvatarCreate_BP_GetCanInputValue");
static_assert(sizeof(CameraActorAvatarCreate_BP_GetCanInputValue) == 0x000001, "Wrong size on CameraActorAvatarCreate_BP_GetCanInputValue");
static_assert(offsetof(CameraActorAvatarCreate_BP_GetCanInputValue, ReturnValue) == 0x000000, "Member 'CameraActorAvatarCreate_BP_GetCanInputValue::ReturnValue' has a wrong offset!");

// Function OutGameModule.CharacterOutGame.GetAnimation
// 0x0008 (0x0008 - 0x0000)
struct CharacterOutGame_GetAnimation final
{
public:
	class UAnimationOutGame*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterOutGame_GetAnimation) == 0x000008, "Wrong alignment on CharacterOutGame_GetAnimation");
static_assert(sizeof(CharacterOutGame_GetAnimation) == 0x000008, "Wrong size on CharacterOutGame_GetAnimation");
static_assert(offsetof(CharacterOutGame_GetAnimation, ReturnValue) == 0x000000, "Member 'CharacterOutGame_GetAnimation::ReturnValue' has a wrong offset!");

// Function OutGameModule.RentalWidget.OnChangedSelectedCharacterEvent
// 0x0002 (0x0002 - 0x0000)
struct RentalWidget_OnChangedSelectedCharacterEvent final
{
public:
	bool                                          UnLocked;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableRental;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RentalWidget_OnChangedSelectedCharacterEvent) == 0x000001, "Wrong alignment on RentalWidget_OnChangedSelectedCharacterEvent");
static_assert(sizeof(RentalWidget_OnChangedSelectedCharacterEvent) == 0x000002, "Wrong size on RentalWidget_OnChangedSelectedCharacterEvent");
static_assert(offsetof(RentalWidget_OnChangedSelectedCharacterEvent, UnLocked) == 0x000000, "Member 'RentalWidget_OnChangedSelectedCharacterEvent::UnLocked' has a wrong offset!");
static_assert(offsetof(RentalWidget_OnChangedSelectedCharacterEvent, EnableRental) == 0x000001, "Member 'RentalWidget_OnChangedSelectedCharacterEvent::EnableRental' has a wrong offset!");

// Function OutGameModule.RentalWidget.OnRentalPointUpdatedEvent
// 0x0004 (0x0004 - 0x0000)
struct RentalWidget_OnRentalPointUpdatedEvent final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RentalWidget_OnRentalPointUpdatedEvent) == 0x000004, "Wrong alignment on RentalWidget_OnRentalPointUpdatedEvent");
static_assert(sizeof(RentalWidget_OnRentalPointUpdatedEvent) == 0x000004, "Wrong size on RentalWidget_OnRentalPointUpdatedEvent");
static_assert(offsetof(RentalWidget_OnRentalPointUpdatedEvent, Value) == 0x000000, "Member 'RentalWidget_OnRentalPointUpdatedEvent::Value' has a wrong offset!");

// Function OutGameModule.ResultScoreWindowBase.OnDecideClose
// 0x0010 (0x0010 - 0x0000)
struct ResultScoreWindowBase_OnDecideClose final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ResultScoreWindowBase_OnDecideClose) == 0x000008, "Wrong alignment on ResultScoreWindowBase_OnDecideClose");
static_assert(sizeof(ResultScoreWindowBase_OnDecideClose) == 0x000010, "Wrong size on ResultScoreWindowBase_OnDecideClose");
static_assert(offsetof(ResultScoreWindowBase_OnDecideClose, Button) == 0x000000, "Member 'ResultScoreWindowBase_OnDecideClose::Button' has a wrong offset!");
static_assert(offsetof(ResultScoreWindowBase_OnDecideClose, InputType) == 0x000008, "Member 'ResultScoreWindowBase_OnDecideClose::InputType' has a wrong offset!");

// Function OutGameModule.ResultScoreWindowBase.OnPressBlockBG
// 0x0160 (0x0160 - 0x0000)
struct ResultScoreWindowBase_OnPressBlockBG final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ResultScoreWindowBase_OnPressBlockBG) == 0x000008, "Wrong alignment on ResultScoreWindowBase_OnPressBlockBG");
static_assert(sizeof(ResultScoreWindowBase_OnPressBlockBG) == 0x000160, "Wrong size on ResultScoreWindowBase_OnPressBlockBG");
static_assert(offsetof(ResultScoreWindowBase_OnPressBlockBG, MyGeometry) == 0x000000, "Member 'ResultScoreWindowBase_OnPressBlockBG::MyGeometry' has a wrong offset!");
static_assert(offsetof(ResultScoreWindowBase_OnPressBlockBG, MouseEvent) == 0x000038, "Member 'ResultScoreWindowBase_OnPressBlockBG::MouseEvent' has a wrong offset!");
static_assert(offsetof(ResultScoreWindowBase_OnPressBlockBG, ReturnValue) == 0x0000A8, "Member 'ResultScoreWindowBase_OnPressBlockBG::ReturnValue' has a wrong offset!");

// Function OutGameModule.CharacterIconButtonWidget.BP_SetIconImge
// 0x0003 (0x0003 - 0x0000)
struct CharacterIconButtonWidget_BP_SetIconImge final
{
public:
	ECharacterId                                  CharaID;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFaceIconTypeId                               Category;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterIconButtonWidget_BP_SetIconImge) == 0x000001, "Wrong alignment on CharacterIconButtonWidget_BP_SetIconImge");
static_assert(sizeof(CharacterIconButtonWidget_BP_SetIconImge) == 0x000003, "Wrong size on CharacterIconButtonWidget_BP_SetIconImge");
static_assert(offsetof(CharacterIconButtonWidget_BP_SetIconImge, CharaID) == 0x000000, "Member 'CharacterIconButtonWidget_BP_SetIconImge::CharaID' has a wrong offset!");
static_assert(offsetof(CharacterIconButtonWidget_BP_SetIconImge, Category) == 0x000001, "Member 'CharacterIconButtonWidget_BP_SetIconImge::Category' has a wrong offset!");
static_assert(offsetof(CharacterIconButtonWidget_BP_SetIconImge, bMatchSize) == 0x000002, "Member 'CharacterIconButtonWidget_BP_SetIconImge::bMatchSize' has a wrong offset!");

// Function OutGameModule.CharacterIconButtonWidget.BP_GetCategory
// 0x0001 (0x0001 - 0x0000)
struct CharacterIconButtonWidget_BP_GetCategory final
{
public:
	EFaceIconTypeId                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterIconButtonWidget_BP_GetCategory) == 0x000001, "Wrong alignment on CharacterIconButtonWidget_BP_GetCategory");
static_assert(sizeof(CharacterIconButtonWidget_BP_GetCategory) == 0x000001, "Wrong size on CharacterIconButtonWidget_BP_GetCategory");
static_assert(offsetof(CharacterIconButtonWidget_BP_GetCategory, ReturnValue) == 0x000000, "Member 'CharacterIconButtonWidget_BP_GetCategory::ReturnValue' has a wrong offset!");

// Function OutGameModule.CharacterIconButtonWidget.BP_GetCharacterId
// 0x0001 (0x0001 - 0x0000)
struct CharacterIconButtonWidget_BP_GetCharacterId final
{
public:
	ECharacterId                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterIconButtonWidget_BP_GetCharacterId) == 0x000001, "Wrong alignment on CharacterIconButtonWidget_BP_GetCharacterId");
static_assert(sizeof(CharacterIconButtonWidget_BP_GetCharacterId) == 0x000001, "Wrong size on CharacterIconButtonWidget_BP_GetCharacterId");
static_assert(offsetof(CharacterIconButtonWidget_BP_GetCharacterId, ReturnValue) == 0x000000, "Member 'CharacterIconButtonWidget_BP_GetCharacterId::ReturnValue' has a wrong offset!");

// Function OutGameModule.CharacterIconButtonWidget.BP_GetImage
// 0x0008 (0x0008 - 0x0000)
struct CharacterIconButtonWidget_BP_GetImage final
{
public:
	class UImage*                                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterIconButtonWidget_BP_GetImage) == 0x000008, "Wrong alignment on CharacterIconButtonWidget_BP_GetImage");
static_assert(sizeof(CharacterIconButtonWidget_BP_GetImage) == 0x000008, "Wrong size on CharacterIconButtonWidget_BP_GetImage");
static_assert(offsetof(CharacterIconButtonWidget_BP_GetImage, ReturnValue) == 0x000000, "Member 'CharacterIconButtonWidget_BP_GetImage::ReturnValue' has a wrong offset!");

// Function OutGameModule.SceneCaptureCreatorBase.BP_RequestChangeCharaPos
// 0x0001 (0x0001 - 0x0000)
struct SceneCaptureCreatorBase_BP_RequestChangeCharaPos final
{
public:
	ESceneCaptureTypeId                           Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SceneCaptureCreatorBase_BP_RequestChangeCharaPos) == 0x000001, "Wrong alignment on SceneCaptureCreatorBase_BP_RequestChangeCharaPos");
static_assert(sizeof(SceneCaptureCreatorBase_BP_RequestChangeCharaPos) == 0x000001, "Wrong size on SceneCaptureCreatorBase_BP_RequestChangeCharaPos");
static_assert(offsetof(SceneCaptureCreatorBase_BP_RequestChangeCharaPos, Type) == 0x000000, "Member 'SceneCaptureCreatorBase_BP_RequestChangeCharaPos::Type' has a wrong offset!");

// Function OutGameModule.SceneCaptureCreatorBase.BP_SetCaptureActorHiddenInGame
// 0x0001 (0x0001 - 0x0000)
struct SceneCaptureCreatorBase_BP_SetCaptureActorHiddenInGame final
{
public:
	bool                                          NewHidden;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SceneCaptureCreatorBase_BP_SetCaptureActorHiddenInGame) == 0x000001, "Wrong alignment on SceneCaptureCreatorBase_BP_SetCaptureActorHiddenInGame");
static_assert(sizeof(SceneCaptureCreatorBase_BP_SetCaptureActorHiddenInGame) == 0x000001, "Wrong size on SceneCaptureCreatorBase_BP_SetCaptureActorHiddenInGame");
static_assert(offsetof(SceneCaptureCreatorBase_BP_SetCaptureActorHiddenInGame, NewHidden) == 0x000000, "Member 'SceneCaptureCreatorBase_BP_SetCaptureActorHiddenInGame::NewHidden' has a wrong offset!");

// Function OutGameModule.SceneCaptureCreatorBase.BP_SetCaptureEveryFram
// 0x0001 (0x0001 - 0x0000)
struct SceneCaptureCreatorBase_BP_SetCaptureEveryFram final
{
public:
	bool                                          Everyfram;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SceneCaptureCreatorBase_BP_SetCaptureEveryFram) == 0x000001, "Wrong alignment on SceneCaptureCreatorBase_BP_SetCaptureEveryFram");
static_assert(sizeof(SceneCaptureCreatorBase_BP_SetCaptureEveryFram) == 0x000001, "Wrong size on SceneCaptureCreatorBase_BP_SetCaptureEveryFram");
static_assert(offsetof(SceneCaptureCreatorBase_BP_SetCaptureEveryFram, Everyfram) == 0x000000, "Member 'SceneCaptureCreatorBase_BP_SetCaptureEveryFram::Everyfram' has a wrong offset!");

// Function OutGameModule.SceneCaptureCreatorBase.BP_SetCaptureFieldOfView
// 0x0004 (0x0004 - 0x0000)
struct SceneCaptureCreatorBase_BP_SetCaptureFieldOfView final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SceneCaptureCreatorBase_BP_SetCaptureFieldOfView) == 0x000004, "Wrong alignment on SceneCaptureCreatorBase_BP_SetCaptureFieldOfView");
static_assert(sizeof(SceneCaptureCreatorBase_BP_SetCaptureFieldOfView) == 0x000004, "Wrong size on SceneCaptureCreatorBase_BP_SetCaptureFieldOfView");
static_assert(offsetof(SceneCaptureCreatorBase_BP_SetCaptureFieldOfView, Value) == 0x000000, "Member 'SceneCaptureCreatorBase_BP_SetCaptureFieldOfView::Value' has a wrong offset!");

// Function OutGameModule.SceneCaptureCreatorBase.GetTextureTarget
// 0x0008 (0x0008 - 0x0000)
struct SceneCaptureCreatorBase_GetTextureTarget final
{
public:
	class UTexture*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SceneCaptureCreatorBase_GetTextureTarget) == 0x000008, "Wrong alignment on SceneCaptureCreatorBase_GetTextureTarget");
static_assert(sizeof(SceneCaptureCreatorBase_GetTextureTarget) == 0x000008, "Wrong size on SceneCaptureCreatorBase_GetTextureTarget");
static_assert(offsetof(SceneCaptureCreatorBase_GetTextureTarget, ReturnValue) == 0x000000, "Member 'SceneCaptureCreatorBase_GetTextureTarget::ReturnValue' has a wrong offset!");

// Function OutGameModule.SceneCaptureCreatorBase.GetTextureTargetAlpha
// 0x0008 (0x0008 - 0x0000)
struct SceneCaptureCreatorBase_GetTextureTargetAlpha final
{
public:
	class UTexture*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SceneCaptureCreatorBase_GetTextureTargetAlpha) == 0x000008, "Wrong alignment on SceneCaptureCreatorBase_GetTextureTargetAlpha");
static_assert(sizeof(SceneCaptureCreatorBase_GetTextureTargetAlpha) == 0x000008, "Wrong size on SceneCaptureCreatorBase_GetTextureTargetAlpha");
static_assert(offsetof(SceneCaptureCreatorBase_GetTextureTargetAlpha, ReturnValue) == 0x000000, "Member 'SceneCaptureCreatorBase_GetTextureTargetAlpha::ReturnValue' has a wrong offset!");

// Function OutGameModule.SceneCaptureCreatorBase.SetBgColor
// 0x0010 (0x0010 - 0x0000)
struct SceneCaptureCreatorBase_SetBgColor final
{
public:
	struct FLinearColor                           bgColor;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SceneCaptureCreatorBase_SetBgColor) == 0x000004, "Wrong alignment on SceneCaptureCreatorBase_SetBgColor");
static_assert(sizeof(SceneCaptureCreatorBase_SetBgColor) == 0x000010, "Wrong size on SceneCaptureCreatorBase_SetBgColor");
static_assert(offsetof(SceneCaptureCreatorBase_SetBgColor, bgColor) == 0x000000, "Member 'SceneCaptureCreatorBase_SetBgColor::bgColor' has a wrong offset!");

// Function OutGameModule.CharacterSelectAppWidgetBase.DoCustomCharacterSelectWidgetNavigation
// 0x0010 (0x0010 - 0x0000)
struct CharacterSelectAppWidgetBase_DoCustomCharacterSelectWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSelectAppWidgetBase_DoCustomCharacterSelectWidgetNavigation) == 0x000008, "Wrong alignment on CharacterSelectAppWidgetBase_DoCustomCharacterSelectWidgetNavigation");
static_assert(sizeof(CharacterSelectAppWidgetBase_DoCustomCharacterSelectWidgetNavigation) == 0x000010, "Wrong size on CharacterSelectAppWidgetBase_DoCustomCharacterSelectWidgetNavigation");
static_assert(offsetof(CharacterSelectAppWidgetBase_DoCustomCharacterSelectWidgetNavigation, UiNavigation) == 0x000000, "Member 'CharacterSelectAppWidgetBase_DoCustomCharacterSelectWidgetNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(CharacterSelectAppWidgetBase_DoCustomCharacterSelectWidgetNavigation, ReturnValue) == 0x000008, "Member 'CharacterSelectAppWidgetBase_DoCustomCharacterSelectWidgetNavigation::ReturnValue' has a wrong offset!");

// Function OutGameModule.CharacterSelectAppWidgetBase.DoCustomNavigationButton
// 0x0010 (0x0010 - 0x0000)
struct CharacterSelectAppWidgetBase_DoCustomNavigationButton final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSelectAppWidgetBase_DoCustomNavigationButton) == 0x000008, "Wrong alignment on CharacterSelectAppWidgetBase_DoCustomNavigationButton");
static_assert(sizeof(CharacterSelectAppWidgetBase_DoCustomNavigationButton) == 0x000010, "Wrong size on CharacterSelectAppWidgetBase_DoCustomNavigationButton");
static_assert(offsetof(CharacterSelectAppWidgetBase_DoCustomNavigationButton, UiNavigation) == 0x000000, "Member 'CharacterSelectAppWidgetBase_DoCustomNavigationButton::UiNavigation' has a wrong offset!");
static_assert(offsetof(CharacterSelectAppWidgetBase_DoCustomNavigationButton, ReturnValue) == 0x000008, "Member 'CharacterSelectAppWidgetBase_DoCustomNavigationButton::ReturnValue' has a wrong offset!");

// Function OutGameModule.CharacterSelectAppWidgetBase.OnAddedToFocusButtonWidget
// 0x0010 (0x0010 - 0x0000)
struct CharacterSelectAppWidgetBase_OnAddedToFocusButtonWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterSelectAppWidgetBase_OnAddedToFocusButtonWidget) == 0x000008, "Wrong alignment on CharacterSelectAppWidgetBase_OnAddedToFocusButtonWidget");
static_assert(sizeof(CharacterSelectAppWidgetBase_OnAddedToFocusButtonWidget) == 0x000010, "Wrong size on CharacterSelectAppWidgetBase_OnAddedToFocusButtonWidget");
static_assert(offsetof(CharacterSelectAppWidgetBase_OnAddedToFocusButtonWidget, Button) == 0x000000, "Member 'CharacterSelectAppWidgetBase_OnAddedToFocusButtonWidget::Button' has a wrong offset!");
static_assert(offsetof(CharacterSelectAppWidgetBase_OnAddedToFocusButtonWidget, InputType) == 0x000008, "Member 'CharacterSelectAppWidgetBase_OnAddedToFocusButtonWidget::InputType' has a wrong offset!");

// Function OutGameModule.CharacterSelectAppWidgetBase.OnAddItemEvent
// 0x0490 (0x0490 - 0x0000)
struct CharacterSelectAppWidgetBase_OnAddItemEvent final
{
public:
	struct FDbItemCategoryParam                   Item;                                              // 0x0000(0x0488)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0488(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48C[0x4];                                      // 0x048C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterSelectAppWidgetBase_OnAddItemEvent) == 0x000008, "Wrong alignment on CharacterSelectAppWidgetBase_OnAddItemEvent");
static_assert(sizeof(CharacterSelectAppWidgetBase_OnAddItemEvent) == 0x000490, "Wrong size on CharacterSelectAppWidgetBase_OnAddItemEvent");
static_assert(offsetof(CharacterSelectAppWidgetBase_OnAddItemEvent, Item) == 0x000000, "Member 'CharacterSelectAppWidgetBase_OnAddItemEvent::Item' has a wrong offset!");
static_assert(offsetof(CharacterSelectAppWidgetBase_OnAddItemEvent, Quantity) == 0x000488, "Member 'CharacterSelectAppWidgetBase_OnAddItemEvent::Quantity' has a wrong offset!");

// Function OutGameModule.CharacterSelectAppWidgetBase.OnClosedSubMenuWidget
// 0x0001 (0x0001 - 0x0000)
struct CharacterSelectAppWidgetBase_OnClosedSubMenuWidget final
{
public:
	bool                                          UseSe;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSelectAppWidgetBase_OnClosedSubMenuWidget) == 0x000001, "Wrong alignment on CharacterSelectAppWidgetBase_OnClosedSubMenuWidget");
static_assert(sizeof(CharacterSelectAppWidgetBase_OnClosedSubMenuWidget) == 0x000001, "Wrong size on CharacterSelectAppWidgetBase_OnClosedSubMenuWidget");
static_assert(offsetof(CharacterSelectAppWidgetBase_OnClosedSubMenuWidget, UseSe) == 0x000000, "Member 'CharacterSelectAppWidgetBase_OnClosedSubMenuWidget::UseSe' has a wrong offset!");

// Function OutGameModule.CharacterSelectAppWidgetBase.OnDecideCancelButtonWidget
// 0x0010 (0x0010 - 0x0000)
struct CharacterSelectAppWidgetBase_OnDecideCancelButtonWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterSelectAppWidgetBase_OnDecideCancelButtonWidget) == 0x000008, "Wrong alignment on CharacterSelectAppWidgetBase_OnDecideCancelButtonWidget");
static_assert(sizeof(CharacterSelectAppWidgetBase_OnDecideCancelButtonWidget) == 0x000010, "Wrong size on CharacterSelectAppWidgetBase_OnDecideCancelButtonWidget");
static_assert(offsetof(CharacterSelectAppWidgetBase_OnDecideCancelButtonWidget, Button) == 0x000000, "Member 'CharacterSelectAppWidgetBase_OnDecideCancelButtonWidget::Button' has a wrong offset!");
static_assert(offsetof(CharacterSelectAppWidgetBase_OnDecideCancelButtonWidget, InputType) == 0x000008, "Member 'CharacterSelectAppWidgetBase_OnDecideCancelButtonWidget::InputType' has a wrong offset!");

// Function OutGameModule.CharacterSelectAppWidgetBase.OnDecideDecideButtonWidget
// 0x0010 (0x0010 - 0x0000)
struct CharacterSelectAppWidgetBase_OnDecideDecideButtonWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterSelectAppWidgetBase_OnDecideDecideButtonWidget) == 0x000008, "Wrong alignment on CharacterSelectAppWidgetBase_OnDecideDecideButtonWidget");
static_assert(sizeof(CharacterSelectAppWidgetBase_OnDecideDecideButtonWidget) == 0x000010, "Wrong size on CharacterSelectAppWidgetBase_OnDecideDecideButtonWidget");
static_assert(offsetof(CharacterSelectAppWidgetBase_OnDecideDecideButtonWidget, Button) == 0x000000, "Member 'CharacterSelectAppWidgetBase_OnDecideDecideButtonWidget::Button' has a wrong offset!");
static_assert(offsetof(CharacterSelectAppWidgetBase_OnDecideDecideButtonWidget, InputType) == 0x000008, "Member 'CharacterSelectAppWidgetBase_OnDecideDecideButtonWidget::InputType' has a wrong offset!");

// Function OutGameModule.CharacterSelectAppWidgetBase.OnDecideIconButtonWidget
// 0x0010 (0x0010 - 0x0000)
struct CharacterSelectAppWidgetBase_OnDecideIconButtonWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterSelectAppWidgetBase_OnDecideIconButtonWidget) == 0x000008, "Wrong alignment on CharacterSelectAppWidgetBase_OnDecideIconButtonWidget");
static_assert(sizeof(CharacterSelectAppWidgetBase_OnDecideIconButtonWidget) == 0x000010, "Wrong size on CharacterSelectAppWidgetBase_OnDecideIconButtonWidget");
static_assert(offsetof(CharacterSelectAppWidgetBase_OnDecideIconButtonWidget, Button) == 0x000000, "Member 'CharacterSelectAppWidgetBase_OnDecideIconButtonWidget::Button' has a wrong offset!");
static_assert(offsetof(CharacterSelectAppWidgetBase_OnDecideIconButtonWidget, InputType) == 0x000008, "Member 'CharacterSelectAppWidgetBase_OnDecideIconButtonWidget::InputType' has a wrong offset!");

// Function OutGameModule.CharacterSelectAppWidgetBase.OnDecideReleaseButtonWidget
// 0x0010 (0x0010 - 0x0000)
struct CharacterSelectAppWidgetBase_OnDecideReleaseButtonWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterSelectAppWidgetBase_OnDecideReleaseButtonWidget) == 0x000008, "Wrong alignment on CharacterSelectAppWidgetBase_OnDecideReleaseButtonWidget");
static_assert(sizeof(CharacterSelectAppWidgetBase_OnDecideReleaseButtonWidget) == 0x000010, "Wrong size on CharacterSelectAppWidgetBase_OnDecideReleaseButtonWidget");
static_assert(offsetof(CharacterSelectAppWidgetBase_OnDecideReleaseButtonWidget, Button) == 0x000000, "Member 'CharacterSelectAppWidgetBase_OnDecideReleaseButtonWidget::Button' has a wrong offset!");
static_assert(offsetof(CharacterSelectAppWidgetBase_OnDecideReleaseButtonWidget, InputType) == 0x000008, "Member 'CharacterSelectAppWidgetBase_OnDecideReleaseButtonWidget::InputType' has a wrong offset!");

// Function OutGameModule.CharacterSelectAppWidgetBase.OnDecideSubMenuButtonWidget
// 0x0010 (0x0010 - 0x0000)
struct CharacterSelectAppWidgetBase_OnDecideSubMenuButtonWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterSelectAppWidgetBase_OnDecideSubMenuButtonWidget) == 0x000008, "Wrong alignment on CharacterSelectAppWidgetBase_OnDecideSubMenuButtonWidget");
static_assert(sizeof(CharacterSelectAppWidgetBase_OnDecideSubMenuButtonWidget) == 0x000010, "Wrong size on CharacterSelectAppWidgetBase_OnDecideSubMenuButtonWidget");
static_assert(offsetof(CharacterSelectAppWidgetBase_OnDecideSubMenuButtonWidget, Button) == 0x000000, "Member 'CharacterSelectAppWidgetBase_OnDecideSubMenuButtonWidget::Button' has a wrong offset!");
static_assert(offsetof(CharacterSelectAppWidgetBase_OnDecideSubMenuButtonWidget, InputType) == 0x000008, "Member 'CharacterSelectAppWidgetBase_OnDecideSubMenuButtonWidget::InputType' has a wrong offset!");

// Function OutGameModule.CharacterSelectAppWidgetBase.OnDecideSubMenuEvent
// 0x0004 (0x0004 - 0x0000)
struct CharacterSelectAppWidgetBase_OnDecideSubMenuEvent final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSelectAppWidgetBase_OnDecideSubMenuEvent) == 0x000004, "Wrong alignment on CharacterSelectAppWidgetBase_OnDecideSubMenuEvent");
static_assert(sizeof(CharacterSelectAppWidgetBase_OnDecideSubMenuEvent) == 0x000004, "Wrong size on CharacterSelectAppWidgetBase_OnDecideSubMenuEvent");
static_assert(offsetof(CharacterSelectAppWidgetBase_OnDecideSubMenuEvent, Value) == 0x000000, "Member 'CharacterSelectAppWidgetBase_OnDecideSubMenuEvent::Value' has a wrong offset!");

// Function OutGameModule.CharacterSelectAppWidgetBase.OnDecideSubMenuEvent_avatar
// 0x0004 (0x0004 - 0x0000)
struct CharacterSelectAppWidgetBase_OnDecideSubMenuEvent_avatar final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSelectAppWidgetBase_OnDecideSubMenuEvent_avatar) == 0x000004, "Wrong alignment on CharacterSelectAppWidgetBase_OnDecideSubMenuEvent_avatar");
static_assert(sizeof(CharacterSelectAppWidgetBase_OnDecideSubMenuEvent_avatar) == 0x000004, "Wrong size on CharacterSelectAppWidgetBase_OnDecideSubMenuEvent_avatar");
static_assert(offsetof(CharacterSelectAppWidgetBase_OnDecideSubMenuEvent_avatar, Value) == 0x000000, "Member 'CharacterSelectAppWidgetBase_OnDecideSubMenuEvent_avatar::Value' has a wrong offset!");

// Function OutGameModule.CharacterSelectAppWidgetBase.OnNegativePressIconButtonWidget
// 0x0010 (0x0010 - 0x0000)
struct CharacterSelectAppWidgetBase_OnNegativePressIconButtonWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterSelectAppWidgetBase_OnNegativePressIconButtonWidget) == 0x000008, "Wrong alignment on CharacterSelectAppWidgetBase_OnNegativePressIconButtonWidget");
static_assert(sizeof(CharacterSelectAppWidgetBase_OnNegativePressIconButtonWidget) == 0x000010, "Wrong size on CharacterSelectAppWidgetBase_OnNegativePressIconButtonWidget");
static_assert(offsetof(CharacterSelectAppWidgetBase_OnNegativePressIconButtonWidget, Button) == 0x000000, "Member 'CharacterSelectAppWidgetBase_OnNegativePressIconButtonWidget::Button' has a wrong offset!");
static_assert(offsetof(CharacterSelectAppWidgetBase_OnNegativePressIconButtonWidget, InputType) == 0x000008, "Member 'CharacterSelectAppWidgetBase_OnNegativePressIconButtonWidget::InputType' has a wrong offset!");

// Function OutGameModule.CharacterSelectAppWidgetBase.OnNegativeWaitFetchPressIconButtonWidget
// 0x0010 (0x0010 - 0x0000)
struct CharacterSelectAppWidgetBase_OnNegativeWaitFetchPressIconButtonWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterSelectAppWidgetBase_OnNegativeWaitFetchPressIconButtonWidget) == 0x000008, "Wrong alignment on CharacterSelectAppWidgetBase_OnNegativeWaitFetchPressIconButtonWidget");
static_assert(sizeof(CharacterSelectAppWidgetBase_OnNegativeWaitFetchPressIconButtonWidget) == 0x000010, "Wrong size on CharacterSelectAppWidgetBase_OnNegativeWaitFetchPressIconButtonWidget");
static_assert(offsetof(CharacterSelectAppWidgetBase_OnNegativeWaitFetchPressIconButtonWidget, Button) == 0x000000, "Member 'CharacterSelectAppWidgetBase_OnNegativeWaitFetchPressIconButtonWidget::Button' has a wrong offset!");
static_assert(offsetof(CharacterSelectAppWidgetBase_OnNegativeWaitFetchPressIconButtonWidget, InputType) == 0x000008, "Member 'CharacterSelectAppWidgetBase_OnNegativeWaitFetchPressIconButtonWidget::InputType' has a wrong offset!");

// Function OutGameModule.CharacterSelectAppWidgetBase.OnPressCancelButtonWidget
// 0x0010 (0x0010 - 0x0000)
struct CharacterSelectAppWidgetBase_OnPressCancelButtonWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterSelectAppWidgetBase_OnPressCancelButtonWidget) == 0x000008, "Wrong alignment on CharacterSelectAppWidgetBase_OnPressCancelButtonWidget");
static_assert(sizeof(CharacterSelectAppWidgetBase_OnPressCancelButtonWidget) == 0x000010, "Wrong size on CharacterSelectAppWidgetBase_OnPressCancelButtonWidget");
static_assert(offsetof(CharacterSelectAppWidgetBase_OnPressCancelButtonWidget, Button) == 0x000000, "Member 'CharacterSelectAppWidgetBase_OnPressCancelButtonWidget::Button' has a wrong offset!");
static_assert(offsetof(CharacterSelectAppWidgetBase_OnPressCancelButtonWidget, InputType) == 0x000008, "Member 'CharacterSelectAppWidgetBase_OnPressCancelButtonWidget::InputType' has a wrong offset!");

// Function OutGameModule.CharacterSelectAppWidgetBase.OnPressIconButtonWidget
// 0x0010 (0x0010 - 0x0000)
struct CharacterSelectAppWidgetBase_OnPressIconButtonWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterSelectAppWidgetBase_OnPressIconButtonWidget) == 0x000008, "Wrong alignment on CharacterSelectAppWidgetBase_OnPressIconButtonWidget");
static_assert(sizeof(CharacterSelectAppWidgetBase_OnPressIconButtonWidget) == 0x000010, "Wrong size on CharacterSelectAppWidgetBase_OnPressIconButtonWidget");
static_assert(offsetof(CharacterSelectAppWidgetBase_OnPressIconButtonWidget, Button) == 0x000000, "Member 'CharacterSelectAppWidgetBase_OnPressIconButtonWidget::Button' has a wrong offset!");
static_assert(offsetof(CharacterSelectAppWidgetBase_OnPressIconButtonWidget, InputType) == 0x000008, "Member 'CharacterSelectAppWidgetBase_OnPressIconButtonWidget::InputType' has a wrong offset!");

// Function OutGameModule.CharacterSelectAppWidgetBase.OnPressReleaseButtonWidget
// 0x0010 (0x0010 - 0x0000)
struct CharacterSelectAppWidgetBase_OnPressReleaseButtonWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterSelectAppWidgetBase_OnPressReleaseButtonWidget) == 0x000008, "Wrong alignment on CharacterSelectAppWidgetBase_OnPressReleaseButtonWidget");
static_assert(sizeof(CharacterSelectAppWidgetBase_OnPressReleaseButtonWidget) == 0x000010, "Wrong size on CharacterSelectAppWidgetBase_OnPressReleaseButtonWidget");
static_assert(offsetof(CharacterSelectAppWidgetBase_OnPressReleaseButtonWidget, Button) == 0x000000, "Member 'CharacterSelectAppWidgetBase_OnPressReleaseButtonWidget::Button' has a wrong offset!");
static_assert(offsetof(CharacterSelectAppWidgetBase_OnPressReleaseButtonWidget, InputType) == 0x000008, "Member 'CharacterSelectAppWidgetBase_OnPressReleaseButtonWidget::InputType' has a wrong offset!");

// Function OutGameModule.CharacterSelectAppWidgetBase.OnPressSubMenuButtonWidget
// 0x0010 (0x0010 - 0x0000)
struct CharacterSelectAppWidgetBase_OnPressSubMenuButtonWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterSelectAppWidgetBase_OnPressSubMenuButtonWidget) == 0x000008, "Wrong alignment on CharacterSelectAppWidgetBase_OnPressSubMenuButtonWidget");
static_assert(sizeof(CharacterSelectAppWidgetBase_OnPressSubMenuButtonWidget) == 0x000010, "Wrong size on CharacterSelectAppWidgetBase_OnPressSubMenuButtonWidget");
static_assert(offsetof(CharacterSelectAppWidgetBase_OnPressSubMenuButtonWidget, Button) == 0x000000, "Member 'CharacterSelectAppWidgetBase_OnPressSubMenuButtonWidget::Button' has a wrong offset!");
static_assert(offsetof(CharacterSelectAppWidgetBase_OnPressSubMenuButtonWidget, InputType) == 0x000008, "Member 'CharacterSelectAppWidgetBase_OnPressSubMenuButtonWidget::InputType' has a wrong offset!");

// Function OutGameModule.CharacterSelectAppWidgetBase.OnRemovedFromFocusButtonWidget
// 0x0010 (0x0010 - 0x0000)
struct CharacterSelectAppWidgetBase_OnRemovedFromFocusButtonWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterSelectAppWidgetBase_OnRemovedFromFocusButtonWidget) == 0x000008, "Wrong alignment on CharacterSelectAppWidgetBase_OnRemovedFromFocusButtonWidget");
static_assert(sizeof(CharacterSelectAppWidgetBase_OnRemovedFromFocusButtonWidget) == 0x000010, "Wrong size on CharacterSelectAppWidgetBase_OnRemovedFromFocusButtonWidget");
static_assert(offsetof(CharacterSelectAppWidgetBase_OnRemovedFromFocusButtonWidget, Button) == 0x000000, "Member 'CharacterSelectAppWidgetBase_OnRemovedFromFocusButtonWidget::Button' has a wrong offset!");
static_assert(offsetof(CharacterSelectAppWidgetBase_OnRemovedFromFocusButtonWidget, InputType) == 0x000008, "Member 'CharacterSelectAppWidgetBase_OnRemovedFromFocusButtonWidget::InputType' has a wrong offset!");

// Function OutGameModule.CharacterSelectAppWidgetBase.OnRentalPointUpdatedEvent
// 0x0004 (0x0004 - 0x0000)
struct CharacterSelectAppWidgetBase_OnRentalPointUpdatedEvent final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSelectAppWidgetBase_OnRentalPointUpdatedEvent) == 0x000004, "Wrong alignment on CharacterSelectAppWidgetBase_OnRentalPointUpdatedEvent");
static_assert(sizeof(CharacterSelectAppWidgetBase_OnRentalPointUpdatedEvent) == 0x000004, "Wrong size on CharacterSelectAppWidgetBase_OnRentalPointUpdatedEvent");
static_assert(offsetof(CharacterSelectAppWidgetBase_OnRentalPointUpdatedEvent, Value) == 0x000000, "Member 'CharacterSelectAppWidgetBase_OnRentalPointUpdatedEvent::Value' has a wrong offset!");

// Function OutGameModule.CharacterSelectAppWidgetBase.ReceivedOnLoadCompleteEvent
// 0x0004 (0x0004 - 0x0000)
struct CharacterSelectAppWidgetBase_ReceivedOnLoadCompleteEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSelectAppWidgetBase_ReceivedOnLoadCompleteEvent) == 0x000004, "Wrong alignment on CharacterSelectAppWidgetBase_ReceivedOnLoadCompleteEvent");
static_assert(sizeof(CharacterSelectAppWidgetBase_ReceivedOnLoadCompleteEvent) == 0x000004, "Wrong size on CharacterSelectAppWidgetBase_ReceivedOnLoadCompleteEvent");
static_assert(offsetof(CharacterSelectAppWidgetBase_ReceivedOnLoadCompleteEvent, RequestId) == 0x000000, "Member 'CharacterSelectAppWidgetBase_ReceivedOnLoadCompleteEvent::RequestId' has a wrong offset!");

// Function OutGameModule.CharacterSelectAppWidgetBase.ReceivedOnUpdateCompleteEvent
// 0x0004 (0x0004 - 0x0000)
struct CharacterSelectAppWidgetBase_ReceivedOnUpdateCompleteEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSelectAppWidgetBase_ReceivedOnUpdateCompleteEvent) == 0x000004, "Wrong alignment on CharacterSelectAppWidgetBase_ReceivedOnUpdateCompleteEvent");
static_assert(sizeof(CharacterSelectAppWidgetBase_ReceivedOnUpdateCompleteEvent) == 0x000004, "Wrong size on CharacterSelectAppWidgetBase_ReceivedOnUpdateCompleteEvent");
static_assert(offsetof(CharacterSelectAppWidgetBase_ReceivedOnUpdateCompleteEvent, RequestId) == 0x000000, "Member 'CharacterSelectAppWidgetBase_ReceivedOnUpdateCompleteEvent::RequestId' has a wrong offset!");

// Function OutGameModule.CharacterSelectAppWidgetBase.SetBindWaitLoadComplete
// 0x0008 (0x0008 - 0x0000)
struct CharacterSelectAppWidgetBase_SetBindWaitLoadComplete final
{
public:
	class UCharacterSelectCharaButtonWidget*      IconWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSelectAppWidgetBase_SetBindWaitLoadComplete) == 0x000008, "Wrong alignment on CharacterSelectAppWidgetBase_SetBindWaitLoadComplete");
static_assert(sizeof(CharacterSelectAppWidgetBase_SetBindWaitLoadComplete) == 0x000008, "Wrong size on CharacterSelectAppWidgetBase_SetBindWaitLoadComplete");
static_assert(offsetof(CharacterSelectAppWidgetBase_SetBindWaitLoadComplete, IconWidget) == 0x000000, "Member 'CharacterSelectAppWidgetBase_SetBindWaitLoadComplete::IconWidget' has a wrong offset!");

// Function OutGameModule.CharacterSelectAppWidgetBase.BP_GetOpenWidget
// 0x0001 (0x0001 - 0x0000)
struct CharacterSelectAppWidgetBase_BP_GetOpenWidget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSelectAppWidgetBase_BP_GetOpenWidget) == 0x000001, "Wrong alignment on CharacterSelectAppWidgetBase_BP_GetOpenWidget");
static_assert(sizeof(CharacterSelectAppWidgetBase_BP_GetOpenWidget) == 0x000001, "Wrong size on CharacterSelectAppWidgetBase_BP_GetOpenWidget");
static_assert(offsetof(CharacterSelectAppWidgetBase_BP_GetOpenWidget, ReturnValue) == 0x000000, "Member 'CharacterSelectAppWidgetBase_BP_GetOpenWidget::ReturnValue' has a wrong offset!");

// Function OutGameModule.ResultScoreWidget.FinishAddList
// 0x0008 (0x0008 - 0x0000)
struct ResultScoreWidget_FinishAddList final
{
public:
	class UResultScoreList*                       List;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ResultScoreWidget_FinishAddList) == 0x000008, "Wrong alignment on ResultScoreWidget_FinishAddList");
static_assert(sizeof(ResultScoreWidget_FinishAddList) == 0x000008, "Wrong size on ResultScoreWidget_FinishAddList");
static_assert(offsetof(ResultScoreWidget_FinishAddList, List) == 0x000000, "Member 'ResultScoreWidget_FinishAddList::List' has a wrong offset!");

// Function OutGameModule.ResultScoreWidget.FinishProgressAnimation
// 0x0008 (0x0008 - 0x0000)
struct ResultScoreWidget_FinishProgressAnimation final
{
public:
	class UProgressBarWidget*                     ProgressBar;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ResultScoreWidget_FinishProgressAnimation) == 0x000008, "Wrong alignment on ResultScoreWidget_FinishProgressAnimation");
static_assert(sizeof(ResultScoreWidget_FinishProgressAnimation) == 0x000008, "Wrong size on ResultScoreWidget_FinishProgressAnimation");
static_assert(offsetof(ResultScoreWidget_FinishProgressAnimation, ProgressBar) == 0x000000, "Member 'ResultScoreWidget_FinishProgressAnimation::ProgressBar' has a wrong offset!");

// Function OutGameModule.ResultScoreWidget.Progress
// 0x0008 (0x0008 - 0x0000)
struct ResultScoreWidget_Progress final
{
public:
	float                                         NowValue;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ResultScoreWidget_Progress) == 0x000004, "Wrong alignment on ResultScoreWidget_Progress");
static_assert(sizeof(ResultScoreWidget_Progress) == 0x000008, "Wrong size on ResultScoreWidget_Progress");
static_assert(offsetof(ResultScoreWidget_Progress, NowValue) == 0x000000, "Member 'ResultScoreWidget_Progress::NowValue' has a wrong offset!");
static_assert(offsetof(ResultScoreWidget_Progress, MaxValue) == 0x000004, "Member 'ResultScoreWidget_Progress::MaxValue' has a wrong offset!");

// Function OutGameModule.CharacterSelectAppWidget.BP_SetKeyfocus
// 0x0008 (0x0008 - 0x0000)
struct CharacterSelectAppWidget_BP_SetKeyfocus final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSelectAppWidget_BP_SetKeyfocus) == 0x000008, "Wrong alignment on CharacterSelectAppWidget_BP_SetKeyfocus");
static_assert(sizeof(CharacterSelectAppWidget_BP_SetKeyfocus) == 0x000008, "Wrong size on CharacterSelectAppWidget_BP_SetKeyfocus");
static_assert(offsetof(CharacterSelectAppWidget_BP_SetKeyfocus, ReturnValue) == 0x000000, "Member 'CharacterSelectAppWidget_BP_SetKeyfocus::ReturnValue' has a wrong offset!");

// Function OutGameModule.CharacterSelectAppWidget.BP_SetSelectedKeyfocus
// 0x0008 (0x0008 - 0x0000)
struct CharacterSelectAppWidget_BP_SetSelectedKeyfocus final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSelectAppWidget_BP_SetSelectedKeyfocus) == 0x000008, "Wrong alignment on CharacterSelectAppWidget_BP_SetSelectedKeyfocus");
static_assert(sizeof(CharacterSelectAppWidget_BP_SetSelectedKeyfocus) == 0x000008, "Wrong size on CharacterSelectAppWidget_BP_SetSelectedKeyfocus");
static_assert(offsetof(CharacterSelectAppWidget_BP_SetSelectedKeyfocus, ReturnValue) == 0x000000, "Member 'CharacterSelectAppWidget_BP_SetSelectedKeyfocus::ReturnValue' has a wrong offset!");

// Function OutGameModule.CharacterSelectAppWidget.OnChangeTab
// 0x0004 (0x0004 - 0x0000)
struct CharacterSelectAppWidget_OnChangeTab final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSelectAppWidget_OnChangeTab) == 0x000004, "Wrong alignment on CharacterSelectAppWidget_OnChangeTab");
static_assert(sizeof(CharacterSelectAppWidget_OnChangeTab) == 0x000004, "Wrong size on CharacterSelectAppWidget_OnChangeTab");
static_assert(offsetof(CharacterSelectAppWidget_OnChangeTab, Index_0) == 0x000000, "Member 'CharacterSelectAppWidget_OnChangeTab::Index_0' has a wrong offset!");

// Function OutGameModule.CharacterSelectAppWidget.OnSquadChanged
// 0x0004 (0x0004 - 0x0000)
struct CharacterSelectAppWidget_OnSquadChanged final
{
public:
	int32                                         SquadNum;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSelectAppWidget_OnSquadChanged) == 0x000004, "Wrong alignment on CharacterSelectAppWidget_OnSquadChanged");
static_assert(sizeof(CharacterSelectAppWidget_OnSquadChanged) == 0x000004, "Wrong size on CharacterSelectAppWidget_OnSquadChanged");
static_assert(offsetof(CharacterSelectAppWidget_OnSquadChanged, SquadNum) == 0x000000, "Member 'CharacterSelectAppWidget_OnSquadChanged::SquadNum' has a wrong offset!");

// Function OutGameModule.CharacterSelectAppWidget.OnUpdateVariationCompleteEvent
// 0x0008 (0x0008 - 0x0000)
struct CharacterSelectAppWidget_OnUpdateVariationCompleteEvent final
{
public:
	int32                                         CharacterCode;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Variation;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSelectAppWidget_OnUpdateVariationCompleteEvent) == 0x000004, "Wrong alignment on CharacterSelectAppWidget_OnUpdateVariationCompleteEvent");
static_assert(sizeof(CharacterSelectAppWidget_OnUpdateVariationCompleteEvent) == 0x000008, "Wrong size on CharacterSelectAppWidget_OnUpdateVariationCompleteEvent");
static_assert(offsetof(CharacterSelectAppWidget_OnUpdateVariationCompleteEvent, CharacterCode) == 0x000000, "Member 'CharacterSelectAppWidget_OnUpdateVariationCompleteEvent::CharacterCode' has a wrong offset!");
static_assert(offsetof(CharacterSelectAppWidget_OnUpdateVariationCompleteEvent, Variation) == 0x000004, "Member 'CharacterSelectAppWidget_OnUpdateVariationCompleteEvent::Variation' has a wrong offset!");

// Function OutGameModule.CharacterSelectCharaButtonWidget.OnUpdateVariationCompleteEvent
// 0x0008 (0x0008 - 0x0000)
struct CharacterSelectCharaButtonWidget_OnUpdateVariationCompleteEvent final
{
public:
	int32                                         CharacterCode;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Variation;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSelectCharaButtonWidget_OnUpdateVariationCompleteEvent) == 0x000004, "Wrong alignment on CharacterSelectCharaButtonWidget_OnUpdateVariationCompleteEvent");
static_assert(sizeof(CharacterSelectCharaButtonWidget_OnUpdateVariationCompleteEvent) == 0x000008, "Wrong size on CharacterSelectCharaButtonWidget_OnUpdateVariationCompleteEvent");
static_assert(offsetof(CharacterSelectCharaButtonWidget_OnUpdateVariationCompleteEvent, CharacterCode) == 0x000000, "Member 'CharacterSelectCharaButtonWidget_OnUpdateVariationCompleteEvent::CharacterCode' has a wrong offset!");
static_assert(offsetof(CharacterSelectCharaButtonWidget_OnUpdateVariationCompleteEvent, Variation) == 0x000004, "Member 'CharacterSelectCharaButtonWidget_OnUpdateVariationCompleteEvent::Variation' has a wrong offset!");

// Function OutGameModule.ResultScoreList.FinishAnimation
// 0x0008 (0x0008 - 0x0000)
struct ResultScoreList_FinishAnimation final
{
public:
	class UWidgetAnimation*                       Animation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ResultScoreList_FinishAnimation) == 0x000008, "Wrong alignment on ResultScoreList_FinishAnimation");
static_assert(sizeof(ResultScoreList_FinishAnimation) == 0x000008, "Wrong size on ResultScoreList_FinishAnimation");
static_assert(offsetof(ResultScoreList_FinishAnimation, Animation) == 0x000000, "Member 'ResultScoreList_FinishAnimation::Animation' has a wrong offset!");

// DelegateFunction OutGameModule.ResultScoreList.FinishDetailAnimationDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ResultScoreList_FinishDetailAnimationDelegate__DelegateSignature final
{
public:
	class UResultScoreList*                       List;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ResultScoreList_FinishDetailAnimationDelegate__DelegateSignature) == 0x000008, "Wrong alignment on ResultScoreList_FinishDetailAnimationDelegate__DelegateSignature");
static_assert(sizeof(ResultScoreList_FinishDetailAnimationDelegate__DelegateSignature) == 0x000008, "Wrong size on ResultScoreList_FinishDetailAnimationDelegate__DelegateSignature");
static_assert(offsetof(ResultScoreList_FinishDetailAnimationDelegate__DelegateSignature, List) == 0x000000, "Member 'ResultScoreList_FinishDetailAnimationDelegate__DelegateSignature::List' has a wrong offset!");

// Function OutGameModule.ResultScoreList.ScrollListEvent
// 0x0004 (0x0004 - 0x0000)
struct ResultScoreList_ScrollListEvent final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ResultScoreList_ScrollListEvent) == 0x000004, "Wrong alignment on ResultScoreList_ScrollListEvent");
static_assert(sizeof(ResultScoreList_ScrollListEvent) == 0x000004, "Wrong size on ResultScoreList_ScrollListEvent");
static_assert(offsetof(ResultScoreList_ScrollListEvent, Progress) == 0x000000, "Member 'ResultScoreList_ScrollListEvent::Progress' has a wrong offset!");

// Function OutGameModule.ResultScoreList.SetDetailsFocus
// 0x0008 (0x0008 - 0x0000)
struct ResultScoreList_SetDetailsFocus final
{
public:
	class UResultScoreList*                       List;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ResultScoreList_SetDetailsFocus) == 0x000008, "Wrong alignment on ResultScoreList_SetDetailsFocus");
static_assert(sizeof(ResultScoreList_SetDetailsFocus) == 0x000008, "Wrong size on ResultScoreList_SetDetailsFocus");
static_assert(offsetof(ResultScoreList_SetDetailsFocus, List) == 0x000000, "Member 'ResultScoreList_SetDetailsFocus::List' has a wrong offset!");

// Function OutGameModule.ResultScoreList.SetDetailsFocusable
// 0x0008 (0x0008 - 0x0000)
struct ResultScoreList_SetDetailsFocusable final
{
public:
	class UResultScoreList*                       List;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ResultScoreList_SetDetailsFocusable) == 0x000008, "Wrong alignment on ResultScoreList_SetDetailsFocusable");
static_assert(sizeof(ResultScoreList_SetDetailsFocusable) == 0x000008, "Wrong size on ResultScoreList_SetDetailsFocusable");
static_assert(offsetof(ResultScoreList_SetDetailsFocusable, List) == 0x000000, "Member 'ResultScoreList_SetDetailsFocusable::List' has a wrong offset!");

// Function OutGameModule.CharacterSelectCharaStatusWidget.GetAbilityIconWidget1
// 0x0008 (0x0008 - 0x0000)
struct CharacterSelectCharaStatusWidget_GetAbilityIconWidget1 final
{
public:
	class UWidgetBase*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSelectCharaStatusWidget_GetAbilityIconWidget1) == 0x000008, "Wrong alignment on CharacterSelectCharaStatusWidget_GetAbilityIconWidget1");
static_assert(sizeof(CharacterSelectCharaStatusWidget_GetAbilityIconWidget1) == 0x000008, "Wrong size on CharacterSelectCharaStatusWidget_GetAbilityIconWidget1");
static_assert(offsetof(CharacterSelectCharaStatusWidget_GetAbilityIconWidget1, ReturnValue) == 0x000000, "Member 'CharacterSelectCharaStatusWidget_GetAbilityIconWidget1::ReturnValue' has a wrong offset!");

// Function OutGameModule.CharacterSelectCharaStatusWidget.GetAbilityIconWidget2
// 0x0008 (0x0008 - 0x0000)
struct CharacterSelectCharaStatusWidget_GetAbilityIconWidget2 final
{
public:
	class UWidgetBase*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSelectCharaStatusWidget_GetAbilityIconWidget2) == 0x000008, "Wrong alignment on CharacterSelectCharaStatusWidget_GetAbilityIconWidget2");
static_assert(sizeof(CharacterSelectCharaStatusWidget_GetAbilityIconWidget2) == 0x000008, "Wrong size on CharacterSelectCharaStatusWidget_GetAbilityIconWidget2");
static_assert(offsetof(CharacterSelectCharaStatusWidget_GetAbilityIconWidget2, ReturnValue) == 0x000000, "Member 'CharacterSelectCharaStatusWidget_GetAbilityIconWidget2::ReturnValue' has a wrong offset!");

// Function OutGameModule.CharacterSelectCharaStatusWidget.GetAbilityIconWidget3
// 0x0008 (0x0008 - 0x0000)
struct CharacterSelectCharaStatusWidget_GetAbilityIconWidget3 final
{
public:
	class UWidgetBase*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSelectCharaStatusWidget_GetAbilityIconWidget3) == 0x000008, "Wrong alignment on CharacterSelectCharaStatusWidget_GetAbilityIconWidget3");
static_assert(sizeof(CharacterSelectCharaStatusWidget_GetAbilityIconWidget3) == 0x000008, "Wrong size on CharacterSelectCharaStatusWidget_GetAbilityIconWidget3");
static_assert(offsetof(CharacterSelectCharaStatusWidget_GetAbilityIconWidget3, ReturnValue) == 0x000000, "Member 'CharacterSelectCharaStatusWidget_GetAbilityIconWidget3::ReturnValue' has a wrong offset!");

// Function OutGameModule.CharacterSelectCharaStatusWidget.ShowCharacterAbilityIcon
// 0x0001 (0x0001 - 0x0000)
struct CharacterSelectCharaStatusWidget_ShowCharacterAbilityIcon final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSelectCharaStatusWidget_ShowCharacterAbilityIcon) == 0x000001, "Wrong alignment on CharacterSelectCharaStatusWidget_ShowCharacterAbilityIcon");
static_assert(sizeof(CharacterSelectCharaStatusWidget_ShowCharacterAbilityIcon) == 0x000001, "Wrong size on CharacterSelectCharaStatusWidget_ShowCharacterAbilityIcon");
static_assert(offsetof(CharacterSelectCharaStatusWidget_ShowCharacterAbilityIcon, CharacterId) == 0x000000, "Member 'CharacterSelectCharaStatusWidget_ShowCharacterAbilityIcon::CharacterId' has a wrong offset!");

// Function OutGameModule.SeasonPassAboutLicenseCell.BP_SetUpBbColor
// 0x0010 (0x0010 - 0x0000)
struct SeasonPassAboutLicenseCell_BP_SetUpBbColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassAboutLicenseCell_BP_SetUpBbColor) == 0x000004, "Wrong alignment on SeasonPassAboutLicenseCell_BP_SetUpBbColor");
static_assert(sizeof(SeasonPassAboutLicenseCell_BP_SetUpBbColor) == 0x000010, "Wrong size on SeasonPassAboutLicenseCell_BP_SetUpBbColor");
static_assert(offsetof(SeasonPassAboutLicenseCell_BP_SetUpBbColor, Color) == 0x000000, "Member 'SeasonPassAboutLicenseCell_BP_SetUpBbColor::Color' has a wrong offset!");

// Function OutGameModule.SeasonPassAboutLicenseCell.BP_SetUpItemText
// 0x0050 (0x0050 - 0x0000)
struct SeasonPassAboutLicenseCell_BP_SetUpItemText final
{
public:
	EMdRarityItemCategory                         ItemCategory;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name_0;                                            // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   CharaName;                                         // 0x0020(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0038(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassAboutLicenseCell_BP_SetUpItemText) == 0x000008, "Wrong alignment on SeasonPassAboutLicenseCell_BP_SetUpItemText");
static_assert(sizeof(SeasonPassAboutLicenseCell_BP_SetUpItemText) == 0x000050, "Wrong size on SeasonPassAboutLicenseCell_BP_SetUpItemText");
static_assert(offsetof(SeasonPassAboutLicenseCell_BP_SetUpItemText, ItemCategory) == 0x000000, "Member 'SeasonPassAboutLicenseCell_BP_SetUpItemText::ItemCategory' has a wrong offset!");
static_assert(offsetof(SeasonPassAboutLicenseCell_BP_SetUpItemText, Name_0) == 0x000008, "Member 'SeasonPassAboutLicenseCell_BP_SetUpItemText::Name_0' has a wrong offset!");
static_assert(offsetof(SeasonPassAboutLicenseCell_BP_SetUpItemText, CharaName) == 0x000020, "Member 'SeasonPassAboutLicenseCell_BP_SetUpItemText::CharaName' has a wrong offset!");
static_assert(offsetof(SeasonPassAboutLicenseCell_BP_SetUpItemText, ReturnValue) == 0x000038, "Member 'SeasonPassAboutLicenseCell_BP_SetUpItemText::ReturnValue' has a wrong offset!");

// Function OutGameModule.SeasonPassAboutLicenseCell.BP_SetUpRarity
// 0x0004 (0x0004 - 0x0000)
struct SeasonPassAboutLicenseCell_BP_SetUpRarity final
{
public:
	int32                                         ItemRarity;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassAboutLicenseCell_BP_SetUpRarity) == 0x000004, "Wrong alignment on SeasonPassAboutLicenseCell_BP_SetUpRarity");
static_assert(sizeof(SeasonPassAboutLicenseCell_BP_SetUpRarity) == 0x000004, "Wrong size on SeasonPassAboutLicenseCell_BP_SetUpRarity");
static_assert(offsetof(SeasonPassAboutLicenseCell_BP_SetUpRarity, ItemRarity) == 0x000000, "Member 'SeasonPassAboutLicenseCell_BP_SetUpRarity::ItemRarity' has a wrong offset!");

// Function OutGameModule.CharacterSequencerOutGame.move
// 0x000C (0x000C - 0x0000)
struct CharacterSequencerOutGame_Move final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSequencerOutGame_Move) == 0x000004, "Wrong alignment on CharacterSequencerOutGame_Move");
static_assert(sizeof(CharacterSequencerOutGame_Move) == 0x00000C, "Wrong size on CharacterSequencerOutGame_Move");
static_assert(offsetof(CharacterSequencerOutGame_Move, Pos) == 0x000000, "Member 'CharacterSequencerOutGame_Move::Pos' has a wrong offset!");

// Function OutGameModule.SceneCaptureCreator.BP_GetCaptureCharaId
// 0x0001 (0x0001 - 0x0000)
struct SceneCaptureCreator_BP_GetCaptureCharaId final
{
public:
	ECharacterId                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SceneCaptureCreator_BP_GetCaptureCharaId) == 0x000001, "Wrong alignment on SceneCaptureCreator_BP_GetCaptureCharaId");
static_assert(sizeof(SceneCaptureCreator_BP_GetCaptureCharaId) == 0x000001, "Wrong size on SceneCaptureCreator_BP_GetCaptureCharaId");
static_assert(offsetof(SceneCaptureCreator_BP_GetCaptureCharaId, ReturnValue) == 0x000000, "Member 'SceneCaptureCreator_BP_GetCaptureCharaId::ReturnValue' has a wrong offset!");

// Function OutGameModule.SceneCaptureCreator.BP_SpawnChara
// 0x000C (0x000C - 0x0000)
struct SceneCaptureCreator_BP_SpawnChara final
{
public:
	bool                                          MySelf;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterId                                  CharaID;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CostumeCode;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AuraLevel;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SceneCaptureCreator_BP_SpawnChara) == 0x000004, "Wrong alignment on SceneCaptureCreator_BP_SpawnChara");
static_assert(sizeof(SceneCaptureCreator_BP_SpawnChara) == 0x00000C, "Wrong size on SceneCaptureCreator_BP_SpawnChara");
static_assert(offsetof(SceneCaptureCreator_BP_SpawnChara, MySelf) == 0x000000, "Member 'SceneCaptureCreator_BP_SpawnChara::MySelf' has a wrong offset!");
static_assert(offsetof(SceneCaptureCreator_BP_SpawnChara, CharaID) == 0x000001, "Member 'SceneCaptureCreator_BP_SpawnChara::CharaID' has a wrong offset!");
static_assert(offsetof(SceneCaptureCreator_BP_SpawnChara, CostumeCode) == 0x000004, "Member 'SceneCaptureCreator_BP_SpawnChara::CostumeCode' has a wrong offset!");
static_assert(offsetof(SceneCaptureCreator_BP_SpawnChara, AuraLevel) == 0x000008, "Member 'SceneCaptureCreator_BP_SpawnChara::AuraLevel' has a wrong offset!");

// Function OutGameModule.SceneCaptureCreator.BP_GetSceneCaptureChara
// 0x0008 (0x0008 - 0x0000)
struct SceneCaptureCreator_BP_GetSceneCaptureChara final
{
public:
	class ACharacterOutGame*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SceneCaptureCreator_BP_GetSceneCaptureChara) == 0x000008, "Wrong alignment on SceneCaptureCreator_BP_GetSceneCaptureChara");
static_assert(sizeof(SceneCaptureCreator_BP_GetSceneCaptureChara) == 0x000008, "Wrong size on SceneCaptureCreator_BP_GetSceneCaptureChara");
static_assert(offsetof(SceneCaptureCreator_BP_GetSceneCaptureChara, ReturnValue) == 0x000000, "Member 'SceneCaptureCreator_BP_GetSceneCaptureChara::ReturnValue' has a wrong offset!");

// Function OutGameModule.ConsentWidget.OnCancelAgreeFreeTextPopupWindow
// 0x0010 (0x0010 - 0x0000)
struct ConsentWidget_OnCancelAgreeFreeTextPopupWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConsentWidget_OnCancelAgreeFreeTextPopupWindow) == 0x000008, "Wrong alignment on ConsentWidget_OnCancelAgreeFreeTextPopupWindow");
static_assert(sizeof(ConsentWidget_OnCancelAgreeFreeTextPopupWindow) == 0x000010, "Wrong size on ConsentWidget_OnCancelAgreeFreeTextPopupWindow");
static_assert(offsetof(ConsentWidget_OnCancelAgreeFreeTextPopupWindow, Widget) == 0x000000, "Member 'ConsentWidget_OnCancelAgreeFreeTextPopupWindow::Widget' has a wrong offset!");
static_assert(offsetof(ConsentWidget_OnCancelAgreeFreeTextPopupWindow, InputType) == 0x000008, "Member 'ConsentWidget_OnCancelAgreeFreeTextPopupWindow::InputType' has a wrong offset!");

// DelegateFunction OutGameModule.ConsentWidget.OnInputEventDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct ConsentWidget_OnInputEventDelegate__DelegateSignature final
{
public:
	bool                                          bAgree;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsentWidget_OnInputEventDelegate__DelegateSignature) == 0x000001, "Wrong alignment on ConsentWidget_OnInputEventDelegate__DelegateSignature");
static_assert(sizeof(ConsentWidget_OnInputEventDelegate__DelegateSignature) == 0x000001, "Wrong size on ConsentWidget_OnInputEventDelegate__DelegateSignature");
static_assert(offsetof(ConsentWidget_OnInputEventDelegate__DelegateSignature, bAgree) == 0x000000, "Member 'ConsentWidget_OnInputEventDelegate__DelegateSignature::bAgree' has a wrong offset!");

// Function OutGameModule.ConsentWidget.OnPressWindowAgreeFreeTextPopupWindow
// 0x0010 (0x0010 - 0x0000)
struct ConsentWidget_OnPressWindowAgreeFreeTextPopupWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConsentWidget_OnPressWindowAgreeFreeTextPopupWindow) == 0x000008, "Wrong alignment on ConsentWidget_OnPressWindowAgreeFreeTextPopupWindow");
static_assert(sizeof(ConsentWidget_OnPressWindowAgreeFreeTextPopupWindow) == 0x000010, "Wrong size on ConsentWidget_OnPressWindowAgreeFreeTextPopupWindow");
static_assert(offsetof(ConsentWidget_OnPressWindowAgreeFreeTextPopupWindow, Widget) == 0x000000, "Member 'ConsentWidget_OnPressWindowAgreeFreeTextPopupWindow::Widget' has a wrong offset!");
static_assert(offsetof(ConsentWidget_OnPressWindowAgreeFreeTextPopupWindow, InputType) == 0x000008, "Member 'ConsentWidget_OnPressWindowAgreeFreeTextPopupWindow::InputType' has a wrong offset!");

// Function OutGameModule.ConsentWidget.OnPressWindowDisAgreeFreeTextPopupWindow
// 0x0010 (0x0010 - 0x0000)
struct ConsentWidget_OnPressWindowDisAgreeFreeTextPopupWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConsentWidget_OnPressWindowDisAgreeFreeTextPopupWindow) == 0x000008, "Wrong alignment on ConsentWidget_OnPressWindowDisAgreeFreeTextPopupWindow");
static_assert(sizeof(ConsentWidget_OnPressWindowDisAgreeFreeTextPopupWindow) == 0x000010, "Wrong size on ConsentWidget_OnPressWindowDisAgreeFreeTextPopupWindow");
static_assert(offsetof(ConsentWidget_OnPressWindowDisAgreeFreeTextPopupWindow, Widget) == 0x000000, "Member 'ConsentWidget_OnPressWindowDisAgreeFreeTextPopupWindow::Widget' has a wrong offset!");
static_assert(offsetof(ConsentWidget_OnPressWindowDisAgreeFreeTextPopupWindow, InputType) == 0x000008, "Member 'ConsentWidget_OnPressWindowDisAgreeFreeTextPopupWindow::InputType' has a wrong offset!");

// Function OutGameModule.ContactListBaseWidget.CreateListView
// 0x0002 (0x0002 - 0x0000)
struct ContactListBaseWidget_CreateListView final
{
public:
	EContactListEntryType                         Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetFocus;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactListBaseWidget_CreateListView) == 0x000001, "Wrong alignment on ContactListBaseWidget_CreateListView");
static_assert(sizeof(ContactListBaseWidget_CreateListView) == 0x000002, "Wrong size on ContactListBaseWidget_CreateListView");
static_assert(offsetof(ContactListBaseWidget_CreateListView, Type) == 0x000000, "Member 'ContactListBaseWidget_CreateListView::Type' has a wrong offset!");
static_assert(offsetof(ContactListBaseWidget_CreateListView, bSetFocus) == 0x000001, "Member 'ContactListBaseWidget_CreateListView::bSetFocus' has a wrong offset!");

// Function OutGameModule.ContactListBaseWidget.GetListViewSelectObject
// 0x0008 (0x0008 - 0x0000)
struct ContactListBaseWidget_GetListViewSelectObject final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactListBaseWidget_GetListViewSelectObject) == 0x000008, "Wrong alignment on ContactListBaseWidget_GetListViewSelectObject");
static_assert(sizeof(ContactListBaseWidget_GetListViewSelectObject) == 0x000008, "Wrong size on ContactListBaseWidget_GetListViewSelectObject");
static_assert(offsetof(ContactListBaseWidget_GetListViewSelectObject, ReturnValue) == 0x000000, "Member 'ContactListBaseWidget_GetListViewSelectObject::ReturnValue' has a wrong offset!");

// Function OutGameModule.ContactListBaseWidget.GetPresent
// 0x0004 (0x0004 - 0x0000)
struct ContactListBaseWidget_GetPresent final
{
public:
	int32                                         IndexParam;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactListBaseWidget_GetPresent) == 0x000004, "Wrong alignment on ContactListBaseWidget_GetPresent");
static_assert(sizeof(ContactListBaseWidget_GetPresent) == 0x000004, "Wrong size on ContactListBaseWidget_GetPresent");
static_assert(offsetof(ContactListBaseWidget_GetPresent, IndexParam) == 0x000000, "Member 'ContactListBaseWidget_GetPresent::IndexParam' has a wrong offset!");

// Function OutGameModule.ContactListBaseWidget.IsActiveSubMenu
// 0x0001 (0x0001 - 0x0000)
struct ContactListBaseWidget_IsActiveSubMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactListBaseWidget_IsActiveSubMenu) == 0x000001, "Wrong alignment on ContactListBaseWidget_IsActiveSubMenu");
static_assert(sizeof(ContactListBaseWidget_IsActiveSubMenu) == 0x000001, "Wrong size on ContactListBaseWidget_IsActiveSubMenu");
static_assert(offsetof(ContactListBaseWidget_IsActiveSubMenu, ReturnValue) == 0x000000, "Member 'ContactListBaseWidget_IsActiveSubMenu::ReturnValue' has a wrong offset!");

// Function OutGameModule.ContactListBaseWidget.IsUnreadListParams
// 0x0004 (0x0004 - 0x0000)
struct ContactListBaseWidget_IsUnreadListParams final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactListBaseWidget_IsUnreadListParams) == 0x000004, "Wrong alignment on ContactListBaseWidget_IsUnreadListParams");
static_assert(sizeof(ContactListBaseWidget_IsUnreadListParams) == 0x000004, "Wrong size on ContactListBaseWidget_IsUnreadListParams");
static_assert(offsetof(ContactListBaseWidget_IsUnreadListParams, ReturnValue) == 0x000000, "Member 'ContactListBaseWidget_IsUnreadListParams::ReturnValue' has a wrong offset!");

// Function OutGameModule.ContactListBaseWidget.ListSwitcherUpdate
// 0x0001 (0x0001 - 0x0000)
struct ContactListBaseWidget_ListSwitcherUpdate final
{
public:
	bool                                          IsFetch;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactListBaseWidget_ListSwitcherUpdate) == 0x000001, "Wrong alignment on ContactListBaseWidget_ListSwitcherUpdate");
static_assert(sizeof(ContactListBaseWidget_ListSwitcherUpdate) == 0x000001, "Wrong size on ContactListBaseWidget_ListSwitcherUpdate");
static_assert(offsetof(ContactListBaseWidget_ListSwitcherUpdate, IsFetch) == 0x000000, "Member 'ContactListBaseWidget_ListSwitcherUpdate::IsFetch' has a wrong offset!");

// Function OutGameModule.ContactListBaseWidget.OnAllReadFlag
// 0x0001 (0x0001 - 0x0000)
struct ContactListBaseWidget_OnAllReadFlag final
{
public:
	bool                                          NewFlag;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactListBaseWidget_OnAllReadFlag) == 0x000001, "Wrong alignment on ContactListBaseWidget_OnAllReadFlag");
static_assert(sizeof(ContactListBaseWidget_OnAllReadFlag) == 0x000001, "Wrong size on ContactListBaseWidget_OnAllReadFlag");
static_assert(offsetof(ContactListBaseWidget_OnAllReadFlag, NewFlag) == 0x000000, "Member 'ContactListBaseWidget_OnAllReadFlag::NewFlag' has a wrong offset!");

// DelegateFunction OutGameModule.ContactListBaseWidget.OnAllReadFlagDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct ContactListBaseWidget_OnAllReadFlagDelegate__DelegateSignature final
{
public:
	bool                                          bIsAllReadFlag;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactListBaseWidget_OnAllReadFlagDelegate__DelegateSignature) == 0x000001, "Wrong alignment on ContactListBaseWidget_OnAllReadFlagDelegate__DelegateSignature");
static_assert(sizeof(ContactListBaseWidget_OnAllReadFlagDelegate__DelegateSignature) == 0x000001, "Wrong size on ContactListBaseWidget_OnAllReadFlagDelegate__DelegateSignature");
static_assert(offsetof(ContactListBaseWidget_OnAllReadFlagDelegate__DelegateSignature, bIsAllReadFlag) == 0x000000, "Member 'ContactListBaseWidget_OnAllReadFlagDelegate__DelegateSignature::bIsAllReadFlag' has a wrong offset!");

// Function OutGameModule.ContactListBaseWidget.OnDecideListButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct ContactListBaseWidget_OnDecideListButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContactListBaseWidget_OnDecideListButtonEvent) == 0x000008, "Wrong alignment on ContactListBaseWidget_OnDecideListButtonEvent");
static_assert(sizeof(ContactListBaseWidget_OnDecideListButtonEvent) == 0x000010, "Wrong size on ContactListBaseWidget_OnDecideListButtonEvent");
static_assert(offsetof(ContactListBaseWidget_OnDecideListButtonEvent, Widget) == 0x000000, "Member 'ContactListBaseWidget_OnDecideListButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(ContactListBaseWidget_OnDecideListButtonEvent, InputType) == 0x000008, "Member 'ContactListBaseWidget_OnDecideListButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.ContactListBaseWidget.OnHoveredChangedEvent
// 0x0010 (0x0010 - 0x0000)
struct ContactListBaseWidget_OnHoveredChangedEvent final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHovered;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContactListBaseWidget_OnHoveredChangedEvent) == 0x000008, "Wrong alignment on ContactListBaseWidget_OnHoveredChangedEvent");
static_assert(sizeof(ContactListBaseWidget_OnHoveredChangedEvent) == 0x000010, "Wrong size on ContactListBaseWidget_OnHoveredChangedEvent");
static_assert(offsetof(ContactListBaseWidget_OnHoveredChangedEvent, Item) == 0x000000, "Member 'ContactListBaseWidget_OnHoveredChangedEvent::Item' has a wrong offset!");
static_assert(offsetof(ContactListBaseWidget_OnHoveredChangedEvent, bHovered) == 0x000008, "Member 'ContactListBaseWidget_OnHoveredChangedEvent::bHovered' has a wrong offset!");

// Function OutGameModule.ContactListBaseWidget.OnPressListButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct ContactListBaseWidget_OnPressListButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContactListBaseWidget_OnPressListButtonEvent) == 0x000008, "Wrong alignment on ContactListBaseWidget_OnPressListButtonEvent");
static_assert(sizeof(ContactListBaseWidget_OnPressListButtonEvent) == 0x000010, "Wrong size on ContactListBaseWidget_OnPressListButtonEvent");
static_assert(offsetof(ContactListBaseWidget_OnPressListButtonEvent, Widget) == 0x000000, "Member 'ContactListBaseWidget_OnPressListButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(ContactListBaseWidget_OnPressListButtonEvent, InputType) == 0x000008, "Member 'ContactListBaseWidget_OnPressListButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.ContactListBaseWidget.OnSubMenuDecide
// 0x0004 (0x0004 - 0x0000)
struct ContactListBaseWidget_OnSubMenuDecide final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactListBaseWidget_OnSubMenuDecide) == 0x000004, "Wrong alignment on ContactListBaseWidget_OnSubMenuDecide");
static_assert(sizeof(ContactListBaseWidget_OnSubMenuDecide) == 0x000004, "Wrong size on ContactListBaseWidget_OnSubMenuDecide");
static_assert(offsetof(ContactListBaseWidget_OnSubMenuDecide, Index_0) == 0x000000, "Member 'ContactListBaseWidget_OnSubMenuDecide::Index_0' has a wrong offset!");

// Function OutGameModule.ContactListBaseWidget.OnSubMenuOpen
// 0x0001 (0x0001 - 0x0000)
struct ContactListBaseWidget_OnSubMenuOpen final
{
public:
	bool                                          UseSe;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactListBaseWidget_OnSubMenuOpen) == 0x000001, "Wrong alignment on ContactListBaseWidget_OnSubMenuOpen");
static_assert(sizeof(ContactListBaseWidget_OnSubMenuOpen) == 0x000001, "Wrong size on ContactListBaseWidget_OnSubMenuOpen");
static_assert(offsetof(ContactListBaseWidget_OnSubMenuOpen, UseSe) == 0x000000, "Member 'ContactListBaseWidget_OnSubMenuOpen::UseSe' has a wrong offset!");

// Function OutGameModule.ContactListBaseWidget.RemoveListParams
// 0x0008 (0x0008 - 0x0000)
struct ContactListBaseWidget_RemoveListParams final
{
public:
	int32                                         IndexParam;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContactListBaseWidget_RemoveListParams) == 0x000004, "Wrong alignment on ContactListBaseWidget_RemoveListParams");
static_assert(sizeof(ContactListBaseWidget_RemoveListParams) == 0x000008, "Wrong size on ContactListBaseWidget_RemoveListParams");
static_assert(offsetof(ContactListBaseWidget_RemoveListParams, IndexParam) == 0x000000, "Member 'ContactListBaseWidget_RemoveListParams::IndexParam' has a wrong offset!");
static_assert(offsetof(ContactListBaseWidget_RemoveListParams, ReturnValue) == 0x000004, "Member 'ContactListBaseWidget_RemoveListParams::ReturnValue' has a wrong offset!");

// Function OutGameModule.ContactListBaseWidget.RemoveReadListParams
// 0x0004 (0x0004 - 0x0000)
struct ContactListBaseWidget_RemoveReadListParams final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactListBaseWidget_RemoveReadListParams) == 0x000004, "Wrong alignment on ContactListBaseWidget_RemoveReadListParams");
static_assert(sizeof(ContactListBaseWidget_RemoveReadListParams) == 0x000004, "Wrong size on ContactListBaseWidget_RemoveReadListParams");
static_assert(offsetof(ContactListBaseWidget_RemoveReadListParams, ReturnValue) == 0x000000, "Member 'ContactListBaseWidget_RemoveReadListParams::ReturnValue' has a wrong offset!");

// Function OutGameModule.ContactListBaseWidget.SetListParamItem
// 0x00C8 (0x00C8 - 0x0000)
struct ContactListBaseWidget_SetListParamItem final
{
public:
	int32                                         IndexParam;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FContactListParameters                 Item;                                              // 0x0008(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactListBaseWidget_SetListParamItem) == 0x000008, "Wrong alignment on ContactListBaseWidget_SetListParamItem");
static_assert(sizeof(ContactListBaseWidget_SetListParamItem) == 0x0000C8, "Wrong size on ContactListBaseWidget_SetListParamItem");
static_assert(offsetof(ContactListBaseWidget_SetListParamItem, IndexParam) == 0x000000, "Member 'ContactListBaseWidget_SetListParamItem::IndexParam' has a wrong offset!");
static_assert(offsetof(ContactListBaseWidget_SetListParamItem, Item) == 0x000008, "Member 'ContactListBaseWidget_SetListParamItem::Item' has a wrong offset!");

// Function OutGameModule.ContactListBaseWidget.SetListViewFocus
// 0x0004 (0x0004 - 0x0000)
struct ContactListBaseWidget_SetListViewFocus final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactListBaseWidget_SetListViewFocus) == 0x000004, "Wrong alignment on ContactListBaseWidget_SetListViewFocus");
static_assert(sizeof(ContactListBaseWidget_SetListViewFocus) == 0x000004, "Wrong size on ContactListBaseWidget_SetListViewFocus");
static_assert(offsetof(ContactListBaseWidget_SetListViewFocus, Index_0) == 0x000000, "Member 'ContactListBaseWidget_SetListViewFocus::Index_0' has a wrong offset!");

// Function OutGameModule.ContactListBaseWidget.SetReadFlag
// 0x0008 (0x0008 - 0x0000)
struct ContactListBaseWidget_SetReadFlag final
{
public:
	int32                                         IndexParam;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Read;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContactListBaseWidget_SetReadFlag) == 0x000004, "Wrong alignment on ContactListBaseWidget_SetReadFlag");
static_assert(sizeof(ContactListBaseWidget_SetReadFlag) == 0x000008, "Wrong size on ContactListBaseWidget_SetReadFlag");
static_assert(offsetof(ContactListBaseWidget_SetReadFlag, IndexParam) == 0x000000, "Member 'ContactListBaseWidget_SetReadFlag::IndexParam' has a wrong offset!");
static_assert(offsetof(ContactListBaseWidget_SetReadFlag, Read) == 0x000004, "Member 'ContactListBaseWidget_SetReadFlag::Read' has a wrong offset!");

// Function OutGameModule.ContactListBaseWidget.GetFilterListParams
// 0x0018 (0x0018 - 0x0000)
struct ContactListBaseWidget_GetFilterListParams final
{
public:
	ECosmosInviteTarget                           Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FContactListParameters>         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactListBaseWidget_GetFilterListParams) == 0x000008, "Wrong alignment on ContactListBaseWidget_GetFilterListParams");
static_assert(sizeof(ContactListBaseWidget_GetFilterListParams) == 0x000018, "Wrong size on ContactListBaseWidget_GetFilterListParams");
static_assert(offsetof(ContactListBaseWidget_GetFilterListParams, Type) == 0x000000, "Member 'ContactListBaseWidget_GetFilterListParams::Type' has a wrong offset!");
static_assert(offsetof(ContactListBaseWidget_GetFilterListParams, ReturnValue) == 0x000008, "Member 'ContactListBaseWidget_GetFilterListParams::ReturnValue' has a wrong offset!");

// Function OutGameModule.ContactListBaseWidget.GetListIndex
// 0x0008 (0x0008 - 0x0000)
struct ContactListBaseWidget_GetListIndex final
{
public:
	int32                                         IndexParam;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactListBaseWidget_GetListIndex) == 0x000004, "Wrong alignment on ContactListBaseWidget_GetListIndex");
static_assert(sizeof(ContactListBaseWidget_GetListIndex) == 0x000008, "Wrong size on ContactListBaseWidget_GetListIndex");
static_assert(offsetof(ContactListBaseWidget_GetListIndex, IndexParam) == 0x000000, "Member 'ContactListBaseWidget_GetListIndex::IndexParam' has a wrong offset!");
static_assert(offsetof(ContactListBaseWidget_GetListIndex, ReturnValue) == 0x000004, "Member 'ContactListBaseWidget_GetListIndex::ReturnValue' has a wrong offset!");

// Function OutGameModule.ContactListBaseWidget.GetListParamItem
// 0x00C8 (0x00C8 - 0x0000)
struct ContactListBaseWidget_GetListParamItem final
{
public:
	int32                                         IndexParam;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FContactListParameters                 ReturnValue;                                       // 0x0008(0x00C0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactListBaseWidget_GetListParamItem) == 0x000008, "Wrong alignment on ContactListBaseWidget_GetListParamItem");
static_assert(sizeof(ContactListBaseWidget_GetListParamItem) == 0x0000C8, "Wrong size on ContactListBaseWidget_GetListParamItem");
static_assert(offsetof(ContactListBaseWidget_GetListParamItem, IndexParam) == 0x000000, "Member 'ContactListBaseWidget_GetListParamItem::IndexParam' has a wrong offset!");
static_assert(offsetof(ContactListBaseWidget_GetListParamItem, ReturnValue) == 0x000008, "Member 'ContactListBaseWidget_GetListParamItem::ReturnValue' has a wrong offset!");

// Function OutGameModule.ContactListBaseWidget.GetListParams
// 0x0010 (0x0010 - 0x0000)
struct ContactListBaseWidget_GetListParams final
{
public:
	TArray<struct FContactListParameters>         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactListBaseWidget_GetListParams) == 0x000008, "Wrong alignment on ContactListBaseWidget_GetListParams");
static_assert(sizeof(ContactListBaseWidget_GetListParams) == 0x000010, "Wrong size on ContactListBaseWidget_GetListParams");
static_assert(offsetof(ContactListBaseWidget_GetListParams, ReturnValue) == 0x000000, "Member 'ContactListBaseWidget_GetListParams::ReturnValue' has a wrong offset!");

// Function OutGameModule.ContactListBaseWidget.GetListViewSelectIndex
// 0x0004 (0x0004 - 0x0000)
struct ContactListBaseWidget_GetListViewSelectIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactListBaseWidget_GetListViewSelectIndex) == 0x000004, "Wrong alignment on ContactListBaseWidget_GetListViewSelectIndex");
static_assert(sizeof(ContactListBaseWidget_GetListViewSelectIndex) == 0x000004, "Wrong size on ContactListBaseWidget_GetListViewSelectIndex");
static_assert(offsetof(ContactListBaseWidget_GetListViewSelectIndex, ReturnValue) == 0x000000, "Member 'ContactListBaseWidget_GetListViewSelectIndex::ReturnValue' has a wrong offset!");

// Function OutGameModule.RPDetailsWidget.ProgressCalcValue
// 0x0004 (0x0004 - 0x0000)
struct RPDetailsWidget_ProgressCalcValue final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPDetailsWidget_ProgressCalcValue) == 0x000004, "Wrong alignment on RPDetailsWidget_ProgressCalcValue");
static_assert(sizeof(RPDetailsWidget_ProgressCalcValue) == 0x000004, "Wrong size on RPDetailsWidget_ProgressCalcValue");
static_assert(offsetof(RPDetailsWidget_ProgressCalcValue, DeltaTime) == 0x000000, "Member 'RPDetailsWidget_ProgressCalcValue::DeltaTime' has a wrong offset!");

// Function OutGameModule.RPDetailsWidget.ProgressRP
// 0x0004 (0x0004 - 0x0000)
struct RPDetailsWidget_ProgressRP final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPDetailsWidget_ProgressRP) == 0x000004, "Wrong alignment on RPDetailsWidget_ProgressRP");
static_assert(sizeof(RPDetailsWidget_ProgressRP) == 0x000004, "Wrong size on RPDetailsWidget_ProgressRP");
static_assert(offsetof(RPDetailsWidget_ProgressRP, DeltaTime) == 0x000000, "Member 'RPDetailsWidget_ProgressRP::DeltaTime' has a wrong offset!");

// DelegateFunction OutGameModule.RPDetailsWidget.TickDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct RPDetailsWidget_TickDelegate__DelegateSignature final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPDetailsWidget_TickDelegate__DelegateSignature) == 0x000004, "Wrong alignment on RPDetailsWidget_TickDelegate__DelegateSignature");
static_assert(sizeof(RPDetailsWidget_TickDelegate__DelegateSignature) == 0x000004, "Wrong size on RPDetailsWidget_TickDelegate__DelegateSignature");
static_assert(offsetof(RPDetailsWidget_TickDelegate__DelegateSignature, DeltaTime) == 0x000000, "Member 'RPDetailsWidget_TickDelegate__DelegateSignature::DeltaTime' has a wrong offset!");

// Function OutGameModule.ContactInvitationWidget.OnChangedFriendStatus
// 0x0018 (0x0018 - 0x0000)
struct ContactInvitationWidget_OnChangedFriendStatus final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFriendStatus                                 Status;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContactInvitationWidget_OnChangedFriendStatus) == 0x000008, "Wrong alignment on ContactInvitationWidget_OnChangedFriendStatus");
static_assert(sizeof(ContactInvitationWidget_OnChangedFriendStatus) == 0x000018, "Wrong size on ContactInvitationWidget_OnChangedFriendStatus");
static_assert(offsetof(ContactInvitationWidget_OnChangedFriendStatus, ID) == 0x000000, "Member 'ContactInvitationWidget_OnChangedFriendStatus::ID' has a wrong offset!");
static_assert(offsetof(ContactInvitationWidget_OnChangedFriendStatus, Status) == 0x000010, "Member 'ContactInvitationWidget_OnChangedFriendStatus::Status' has a wrong offset!");

// Function OutGameModule.ContactInvitationWidget.OnChangeIdleStatusEvent
// 0x0008 (0x0008 - 0x0000)
struct ContactInvitationWidget_OnChangeIdleStatusEvent final
{
public:
	bool                                          Idle;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StateSetting;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactInvitationWidget_OnChangeIdleStatusEvent) == 0x000004, "Wrong alignment on ContactInvitationWidget_OnChangeIdleStatusEvent");
static_assert(sizeof(ContactInvitationWidget_OnChangeIdleStatusEvent) == 0x000008, "Wrong size on ContactInvitationWidget_OnChangeIdleStatusEvent");
static_assert(offsetof(ContactInvitationWidget_OnChangeIdleStatusEvent, Idle) == 0x000000, "Member 'ContactInvitationWidget_OnChangeIdleStatusEvent::Idle' has a wrong offset!");
static_assert(offsetof(ContactInvitationWidget_OnChangeIdleStatusEvent, StateSetting) == 0x000004, "Member 'ContactInvitationWidget_OnChangeIdleStatusEvent::StateSetting' has a wrong offset!");

// Function OutGameModule.ContactInvitationWidget.OnDecideClosedWindow
// 0x0010 (0x0010 - 0x0000)
struct ContactInvitationWidget_OnDecideClosedWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContactInvitationWidget_OnDecideClosedWindow) == 0x000008, "Wrong alignment on ContactInvitationWidget_OnDecideClosedWindow");
static_assert(sizeof(ContactInvitationWidget_OnDecideClosedWindow) == 0x000010, "Wrong size on ContactInvitationWidget_OnDecideClosedWindow");
static_assert(offsetof(ContactInvitationWidget_OnDecideClosedWindow, Widget) == 0x000000, "Member 'ContactInvitationWidget_OnDecideClosedWindow::Widget' has a wrong offset!");
static_assert(offsetof(ContactInvitationWidget_OnDecideClosedWindow, InputType) == 0x000008, "Member 'ContactInvitationWidget_OnDecideClosedWindow::InputType' has a wrong offset!");
static_assert(offsetof(ContactInvitationWidget_OnDecideClosedWindow, LeftButton) == 0x000009, "Member 'ContactInvitationWidget_OnDecideClosedWindow::LeftButton' has a wrong offset!");

// Function OutGameModule.ContactInvitationWidget.OnDecideDeleteWindow
// 0x0010 (0x0010 - 0x0000)
struct ContactInvitationWidget_OnDecideDeleteWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContactInvitationWidget_OnDecideDeleteWindow) == 0x000008, "Wrong alignment on ContactInvitationWidget_OnDecideDeleteWindow");
static_assert(sizeof(ContactInvitationWidget_OnDecideDeleteWindow) == 0x000010, "Wrong size on ContactInvitationWidget_OnDecideDeleteWindow");
static_assert(offsetof(ContactInvitationWidget_OnDecideDeleteWindow, Widget) == 0x000000, "Member 'ContactInvitationWidget_OnDecideDeleteWindow::Widget' has a wrong offset!");
static_assert(offsetof(ContactInvitationWidget_OnDecideDeleteWindow, InputType) == 0x000008, "Member 'ContactInvitationWidget_OnDecideDeleteWindow::InputType' has a wrong offset!");
static_assert(offsetof(ContactInvitationWidget_OnDecideDeleteWindow, LeftButton) == 0x000009, "Member 'ContactInvitationWidget_OnDecideDeleteWindow::LeftButton' has a wrong offset!");

// Function OutGameModule.ContactInvitationWidget.OnLoadCompleteEvent
// 0x0004 (0x0004 - 0x0000)
struct ContactInvitationWidget_OnLoadCompleteEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactInvitationWidget_OnLoadCompleteEvent) == 0x000004, "Wrong alignment on ContactInvitationWidget_OnLoadCompleteEvent");
static_assert(sizeof(ContactInvitationWidget_OnLoadCompleteEvent) == 0x000004, "Wrong size on ContactInvitationWidget_OnLoadCompleteEvent");
static_assert(offsetof(ContactInvitationWidget_OnLoadCompleteEvent, RequestId) == 0x000000, "Member 'ContactInvitationWidget_OnLoadCompleteEvent::RequestId' has a wrong offset!");

// DelegateFunction OutGameModule.ContactInvitationWidget.OnOpenWindowCloseDelegate__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct ContactInvitationWidget_OnOpenWindowCloseDelegate__DelegateSignature final
{
public:
	class FText                                   NameText;                                          // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactInvitationWidget_OnOpenWindowCloseDelegate__DelegateSignature) == 0x000008, "Wrong alignment on ContactInvitationWidget_OnOpenWindowCloseDelegate__DelegateSignature");
static_assert(sizeof(ContactInvitationWidget_OnOpenWindowCloseDelegate__DelegateSignature) == 0x000018, "Wrong size on ContactInvitationWidget_OnOpenWindowCloseDelegate__DelegateSignature");
static_assert(offsetof(ContactInvitationWidget_OnOpenWindowCloseDelegate__DelegateSignature, NameText) == 0x000000, "Member 'ContactInvitationWidget_OnOpenWindowCloseDelegate__DelegateSignature::NameText' has a wrong offset!");

// DelegateFunction OutGameModule.ContactInvitationWidget.OnOtherPlayersCallDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct ContactInvitationWidget_OnOtherPlayersCallDelegate__DelegateSignature final
{
public:
	class FString                                 TargetUserId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactInvitationWidget_OnOtherPlayersCallDelegate__DelegateSignature) == 0x000008, "Wrong alignment on ContactInvitationWidget_OnOtherPlayersCallDelegate__DelegateSignature");
static_assert(sizeof(ContactInvitationWidget_OnOtherPlayersCallDelegate__DelegateSignature) == 0x000010, "Wrong size on ContactInvitationWidget_OnOtherPlayersCallDelegate__DelegateSignature");
static_assert(offsetof(ContactInvitationWidget_OnOtherPlayersCallDelegate__DelegateSignature, TargetUserId) == 0x000000, "Member 'ContactInvitationWidget_OnOtherPlayersCallDelegate__DelegateSignature::TargetUserId' has a wrong offset!");

// Function OutGameModule.ContactInvitationWidget.OnUpdateCompleteEvent
// 0x0004 (0x0004 - 0x0000)
struct ContactInvitationWidget_OnUpdateCompleteEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactInvitationWidget_OnUpdateCompleteEvent) == 0x000004, "Wrong alignment on ContactInvitationWidget_OnUpdateCompleteEvent");
static_assert(sizeof(ContactInvitationWidget_OnUpdateCompleteEvent) == 0x000004, "Wrong size on ContactInvitationWidget_OnUpdateCompleteEvent");
static_assert(offsetof(ContactInvitationWidget_OnUpdateCompleteEvent, RequestId) == 0x000000, "Member 'ContactInvitationWidget_OnUpdateCompleteEvent::RequestId' has a wrong offset!");

// Function OutGameModule.SeasonEntry.BP_SetImageSize
// 0x000C (0x000C - 0x0000)
struct SeasonEntry_BP_SetImageSize final
{
public:
	int32                                         SizeY;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CombineItem;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EntrySpacing;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonEntry_BP_SetImageSize) == 0x000004, "Wrong alignment on SeasonEntry_BP_SetImageSize");
static_assert(sizeof(SeasonEntry_BP_SetImageSize) == 0x00000C, "Wrong size on SeasonEntry_BP_SetImageSize");
static_assert(offsetof(SeasonEntry_BP_SetImageSize, SizeY) == 0x000000, "Member 'SeasonEntry_BP_SetImageSize::SizeY' has a wrong offset!");
static_assert(offsetof(SeasonEntry_BP_SetImageSize, CombineItem) == 0x000004, "Member 'SeasonEntry_BP_SetImageSize::CombineItem' has a wrong offset!");
static_assert(offsetof(SeasonEntry_BP_SetImageSize, EntrySpacing) == 0x000008, "Member 'SeasonEntry_BP_SetImageSize::EntrySpacing' has a wrong offset!");

// Function OutGameModule.SeasonEntry.CallOpenPurchasePopup
// 0x0008 (0x0008 - 0x0000)
struct SeasonEntry_CallOpenPurchasePopup final
{
public:
	class UWidget*                                TargetWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonEntry_CallOpenPurchasePopup) == 0x000008, "Wrong alignment on SeasonEntry_CallOpenPurchasePopup");
static_assert(sizeof(SeasonEntry_CallOpenPurchasePopup) == 0x000008, "Wrong size on SeasonEntry_CallOpenPurchasePopup");
static_assert(offsetof(SeasonEntry_CallOpenPurchasePopup, TargetWidget) == 0x000000, "Member 'SeasonEntry_CallOpenPurchasePopup::TargetWidget' has a wrong offset!");

// Function OutGameModule.SeasonEntry.SetItemData
// 0x0988 (0x0988 - 0x0000)
struct SeasonEntry_SetItemData final
{
public:
	struct FDbSeasonPassParam                     Param;                                             // 0x0000(0x0980)(Parm, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0980(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLast;                                            // 0x0984(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_985[0x3];                                      // 0x0985(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SeasonEntry_SetItemData) == 0x000008, "Wrong alignment on SeasonEntry_SetItemData");
static_assert(sizeof(SeasonEntry_SetItemData) == 0x000988, "Wrong size on SeasonEntry_SetItemData");
static_assert(offsetof(SeasonEntry_SetItemData, Param) == 0x000000, "Member 'SeasonEntry_SetItemData::Param' has a wrong offset!");
static_assert(offsetof(SeasonEntry_SetItemData, Index_0) == 0x000980, "Member 'SeasonEntry_SetItemData::Index_0' has a wrong offset!");
static_assert(offsetof(SeasonEntry_SetItemData, IsLast) == 0x000984, "Member 'SeasonEntry_SetItemData::IsLast' has a wrong offset!");

// Function OutGameModule.SeasonEntry.SetSpecialItemData
// 0x04C8 (0x04C8 - 0x0000)
struct SeasonEntry_SetSpecialItemData final
{
public:
	struct FDbSpecialLicenseParam                 Param;                                             // 0x0000(0x04C0)(Parm, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x04C0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C4[0x4];                                      // 0x04C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SeasonEntry_SetSpecialItemData) == 0x000008, "Wrong alignment on SeasonEntry_SetSpecialItemData");
static_assert(sizeof(SeasonEntry_SetSpecialItemData) == 0x0004C8, "Wrong size on SeasonEntry_SetSpecialItemData");
static_assert(offsetof(SeasonEntry_SetSpecialItemData, Param) == 0x000000, "Member 'SeasonEntry_SetSpecialItemData::Param' has a wrong offset!");
static_assert(offsetof(SeasonEntry_SetSpecialItemData, Index_0) == 0x0004C0, "Member 'SeasonEntry_SetSpecialItemData::Index_0' has a wrong offset!");

// Function OutGameModule.SeasonEntry.GetItemIndex
// 0x0004 (0x0004 - 0x0000)
struct SeasonEntry_GetItemIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonEntry_GetItemIndex) == 0x000004, "Wrong alignment on SeasonEntry_GetItemIndex");
static_assert(sizeof(SeasonEntry_GetItemIndex) == 0x000004, "Wrong size on SeasonEntry_GetItemIndex");
static_assert(offsetof(SeasonEntry_GetItemIndex, ReturnValue) == 0x000000, "Member 'SeasonEntry_GetItemIndex::ReturnValue' has a wrong offset!");

// Function OutGameModule.ContactNoticePopupWidget.OnDecidePressButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct ContactNoticePopupWidget_OnDecidePressButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContactNoticePopupWidget_OnDecidePressButtonEvent) == 0x000008, "Wrong alignment on ContactNoticePopupWidget_OnDecidePressButtonEvent");
static_assert(sizeof(ContactNoticePopupWidget_OnDecidePressButtonEvent) == 0x000010, "Wrong size on ContactNoticePopupWidget_OnDecidePressButtonEvent");
static_assert(offsetof(ContactNoticePopupWidget_OnDecidePressButtonEvent, Widget) == 0x000000, "Member 'ContactNoticePopupWidget_OnDecidePressButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(ContactNoticePopupWidget_OnDecidePressButtonEvent, InputType) == 0x000008, "Member 'ContactNoticePopupWidget_OnDecidePressButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.ContactNoticePopupWidget.OnPressBlockBG
// 0x0160 (0x0160 - 0x0000)
struct ContactNoticePopupWidget_OnPressBlockBG final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactNoticePopupWidget_OnPressBlockBG) == 0x000008, "Wrong alignment on ContactNoticePopupWidget_OnPressBlockBG");
static_assert(sizeof(ContactNoticePopupWidget_OnPressBlockBG) == 0x000160, "Wrong size on ContactNoticePopupWidget_OnPressBlockBG");
static_assert(offsetof(ContactNoticePopupWidget_OnPressBlockBG, MyGeometry) == 0x000000, "Member 'ContactNoticePopupWidget_OnPressBlockBG::MyGeometry' has a wrong offset!");
static_assert(offsetof(ContactNoticePopupWidget_OnPressBlockBG, MouseEvent) == 0x000038, "Member 'ContactNoticePopupWidget_OnPressBlockBG::MouseEvent' has a wrong offset!");
static_assert(offsetof(ContactNoticePopupWidget_OnPressBlockBG, ReturnValue) == 0x0000A8, "Member 'ContactNoticePopupWidget_OnPressBlockBG::ReturnValue' has a wrong offset!");

// Function OutGameModule.ContactNoticePopupWidget.OnUpdateCompleteEvent
// 0x0004 (0x0004 - 0x0000)
struct ContactNoticePopupWidget_OnUpdateCompleteEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactNoticePopupWidget_OnUpdateCompleteEvent) == 0x000004, "Wrong alignment on ContactNoticePopupWidget_OnUpdateCompleteEvent");
static_assert(sizeof(ContactNoticePopupWidget_OnUpdateCompleteEvent) == 0x000004, "Wrong size on ContactNoticePopupWidget_OnUpdateCompleteEvent");
static_assert(offsetof(ContactNoticePopupWidget_OnUpdateCompleteEvent, RequestId) == 0x000000, "Member 'ContactNoticePopupWidget_OnUpdateCompleteEvent::RequestId' has a wrong offset!");

// Function OutGameModule.ContactNoticeWidget.DoCustomNavigationButton
// 0x0010 (0x0010 - 0x0000)
struct ContactNoticeWidget_DoCustomNavigationButton final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactNoticeWidget_DoCustomNavigationButton) == 0x000008, "Wrong alignment on ContactNoticeWidget_DoCustomNavigationButton");
static_assert(sizeof(ContactNoticeWidget_DoCustomNavigationButton) == 0x000010, "Wrong size on ContactNoticeWidget_DoCustomNavigationButton");
static_assert(offsetof(ContactNoticeWidget_DoCustomNavigationButton, UiNavigation) == 0x000000, "Member 'ContactNoticeWidget_DoCustomNavigationButton::UiNavigation' has a wrong offset!");
static_assert(offsetof(ContactNoticeWidget_DoCustomNavigationButton, ReturnValue) == 0x000008, "Member 'ContactNoticeWidget_DoCustomNavigationButton::ReturnValue' has a wrong offset!");

// Function OutGameModule.ContactNoticeWidget.OnChangeIdleStatusEvent
// 0x0008 (0x0008 - 0x0000)
struct ContactNoticeWidget_OnChangeIdleStatusEvent final
{
public:
	bool                                          Idle;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StateSetting;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactNoticeWidget_OnChangeIdleStatusEvent) == 0x000004, "Wrong alignment on ContactNoticeWidget_OnChangeIdleStatusEvent");
static_assert(sizeof(ContactNoticeWidget_OnChangeIdleStatusEvent) == 0x000008, "Wrong size on ContactNoticeWidget_OnChangeIdleStatusEvent");
static_assert(offsetof(ContactNoticeWidget_OnChangeIdleStatusEvent, Idle) == 0x000000, "Member 'ContactNoticeWidget_OnChangeIdleStatusEvent::Idle' has a wrong offset!");
static_assert(offsetof(ContactNoticeWidget_OnChangeIdleStatusEvent, StateSetting) == 0x000004, "Member 'ContactNoticeWidget_OnChangeIdleStatusEvent::StateSetting' has a wrong offset!");

// Function OutGameModule.ContactNoticeWidget.OnDecideOneButtonGeneralWindow
// 0x0010 (0x0010 - 0x0000)
struct ContactNoticeWidget_OnDecideOneButtonGeneralWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContactNoticeWidget_OnDecideOneButtonGeneralWindow) == 0x000008, "Wrong alignment on ContactNoticeWidget_OnDecideOneButtonGeneralWindow");
static_assert(sizeof(ContactNoticeWidget_OnDecideOneButtonGeneralWindow) == 0x000010, "Wrong size on ContactNoticeWidget_OnDecideOneButtonGeneralWindow");
static_assert(offsetof(ContactNoticeWidget_OnDecideOneButtonGeneralWindow, Widget) == 0x000000, "Member 'ContactNoticeWidget_OnDecideOneButtonGeneralWindow::Widget' has a wrong offset!");
static_assert(offsetof(ContactNoticeWidget_OnDecideOneButtonGeneralWindow, InputType) == 0x000008, "Member 'ContactNoticeWidget_OnDecideOneButtonGeneralWindow::InputType' has a wrong offset!");
static_assert(offsetof(ContactNoticeWidget_OnDecideOneButtonGeneralWindow, LeftButton) == 0x000009, "Member 'ContactNoticeWidget_OnDecideOneButtonGeneralWindow::LeftButton' has a wrong offset!");

// Function OutGameModule.ContactNoticeWidget.OnDecideReadAllDeleteWindow
// 0x0010 (0x0010 - 0x0000)
struct ContactNoticeWidget_OnDecideReadAllDeleteWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContactNoticeWidget_OnDecideReadAllDeleteWindow) == 0x000008, "Wrong alignment on ContactNoticeWidget_OnDecideReadAllDeleteWindow");
static_assert(sizeof(ContactNoticeWidget_OnDecideReadAllDeleteWindow) == 0x000010, "Wrong size on ContactNoticeWidget_OnDecideReadAllDeleteWindow");
static_assert(offsetof(ContactNoticeWidget_OnDecideReadAllDeleteWindow, Widget) == 0x000000, "Member 'ContactNoticeWidget_OnDecideReadAllDeleteWindow::Widget' has a wrong offset!");
static_assert(offsetof(ContactNoticeWidget_OnDecideReadAllDeleteWindow, InputType) == 0x000008, "Member 'ContactNoticeWidget_OnDecideReadAllDeleteWindow::InputType' has a wrong offset!");
static_assert(offsetof(ContactNoticeWidget_OnDecideReadAllDeleteWindow, LeftButton) == 0x000009, "Member 'ContactNoticeWidget_OnDecideReadAllDeleteWindow::LeftButton' has a wrong offset!");

// Function OutGameModule.ContactNoticeWidget.OnDecideReadDeleteWindow
// 0x0010 (0x0010 - 0x0000)
struct ContactNoticeWidget_OnDecideReadDeleteWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContactNoticeWidget_OnDecideReadDeleteWindow) == 0x000008, "Wrong alignment on ContactNoticeWidget_OnDecideReadDeleteWindow");
static_assert(sizeof(ContactNoticeWidget_OnDecideReadDeleteWindow) == 0x000010, "Wrong size on ContactNoticeWidget_OnDecideReadDeleteWindow");
static_assert(offsetof(ContactNoticeWidget_OnDecideReadDeleteWindow, Widget) == 0x000000, "Member 'ContactNoticeWidget_OnDecideReadDeleteWindow::Widget' has a wrong offset!");
static_assert(offsetof(ContactNoticeWidget_OnDecideReadDeleteWindow, InputType) == 0x000008, "Member 'ContactNoticeWidget_OnDecideReadDeleteWindow::InputType' has a wrong offset!");
static_assert(offsetof(ContactNoticeWidget_OnDecideReadDeleteWindow, LeftButton) == 0x000009, "Member 'ContactNoticeWidget_OnDecideReadDeleteWindow::LeftButton' has a wrong offset!");

// Function OutGameModule.ContactNoticeWidget.OnLoadCompleteEvent
// 0x0004 (0x0004 - 0x0000)
struct ContactNoticeWidget_OnLoadCompleteEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactNoticeWidget_OnLoadCompleteEvent) == 0x000004, "Wrong alignment on ContactNoticeWidget_OnLoadCompleteEvent");
static_assert(sizeof(ContactNoticeWidget_OnLoadCompleteEvent) == 0x000004, "Wrong size on ContactNoticeWidget_OnLoadCompleteEvent");
static_assert(offsetof(ContactNoticeWidget_OnLoadCompleteEvent, RequestId) == 0x000000, "Member 'ContactNoticeWidget_OnLoadCompleteEvent::RequestId' has a wrong offset!");

// Function OutGameModule.ContactNoticeWidget.OnUpdateCompleteEvent
// 0x0004 (0x0004 - 0x0000)
struct ContactNoticeWidget_OnUpdateCompleteEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactNoticeWidget_OnUpdateCompleteEvent) == 0x000004, "Wrong alignment on ContactNoticeWidget_OnUpdateCompleteEvent");
static_assert(sizeof(ContactNoticeWidget_OnUpdateCompleteEvent) == 0x000004, "Wrong size on ContactNoticeWidget_OnUpdateCompleteEvent");
static_assert(offsetof(ContactNoticeWidget_OnUpdateCompleteEvent, RequestId) == 0x000000, "Member 'ContactNoticeWidget_OnUpdateCompleteEvent::RequestId' has a wrong offset!");

// Function OutGameModule.ContactNoticeWidget.OnWindowDeleteDecide
// 0x0010 (0x0010 - 0x0000)
struct ContactNoticeWidget_OnWindowDeleteDecide final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContactNoticeWidget_OnWindowDeleteDecide) == 0x000008, "Wrong alignment on ContactNoticeWidget_OnWindowDeleteDecide");
static_assert(sizeof(ContactNoticeWidget_OnWindowDeleteDecide) == 0x000010, "Wrong size on ContactNoticeWidget_OnWindowDeleteDecide");
static_assert(offsetof(ContactNoticeWidget_OnWindowDeleteDecide, Widget) == 0x000000, "Member 'ContactNoticeWidget_OnWindowDeleteDecide::Widget' has a wrong offset!");
static_assert(offsetof(ContactNoticeWidget_OnWindowDeleteDecide, InputType) == 0x000008, "Member 'ContactNoticeWidget_OnWindowDeleteDecide::InputType' has a wrong offset!");
static_assert(offsetof(ContactNoticeWidget_OnWindowDeleteDecide, LeftButton) == 0x000009, "Member 'ContactNoticeWidget_OnWindowDeleteDecide::LeftButton' has a wrong offset!");

// Function OutGameModule.ContactWidget.OnDecideAllGetButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct ContactWidget_OnDecideAllGetButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContactWidget_OnDecideAllGetButtonEvent) == 0x000008, "Wrong alignment on ContactWidget_OnDecideAllGetButtonEvent");
static_assert(sizeof(ContactWidget_OnDecideAllGetButtonEvent) == 0x000010, "Wrong size on ContactWidget_OnDecideAllGetButtonEvent");
static_assert(offsetof(ContactWidget_OnDecideAllGetButtonEvent, Widget) == 0x000000, "Member 'ContactWidget_OnDecideAllGetButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(ContactWidget_OnDecideAllGetButtonEvent, InputType) == 0x000008, "Member 'ContactWidget_OnDecideAllGetButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.ContactWidget.OnDecideAllReadDeleteButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct ContactWidget_OnDecideAllReadDeleteButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContactWidget_OnDecideAllReadDeleteButtonEvent) == 0x000008, "Wrong alignment on ContactWidget_OnDecideAllReadDeleteButtonEvent");
static_assert(sizeof(ContactWidget_OnDecideAllReadDeleteButtonEvent) == 0x000010, "Wrong size on ContactWidget_OnDecideAllReadDeleteButtonEvent");
static_assert(offsetof(ContactWidget_OnDecideAllReadDeleteButtonEvent, Widget) == 0x000000, "Member 'ContactWidget_OnDecideAllReadDeleteButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(ContactWidget_OnDecideAllReadDeleteButtonEvent, InputType) == 0x000008, "Member 'ContactWidget_OnDecideAllReadDeleteButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.ContactWidget.OnDecideNextButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct ContactWidget_OnDecideNextButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContactWidget_OnDecideNextButtonEvent) == 0x000008, "Wrong alignment on ContactWidget_OnDecideNextButtonEvent");
static_assert(sizeof(ContactWidget_OnDecideNextButtonEvent) == 0x000010, "Wrong size on ContactWidget_OnDecideNextButtonEvent");
static_assert(offsetof(ContactWidget_OnDecideNextButtonEvent, Widget) == 0x000000, "Member 'ContactWidget_OnDecideNextButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(ContactWidget_OnDecideNextButtonEvent, InputType) == 0x000008, "Member 'ContactWidget_OnDecideNextButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.ContactWidget.OnDecidePrevButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct ContactWidget_OnDecidePrevButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContactWidget_OnDecidePrevButtonEvent) == 0x000008, "Wrong alignment on ContactWidget_OnDecidePrevButtonEvent");
static_assert(sizeof(ContactWidget_OnDecidePrevButtonEvent) == 0x000010, "Wrong size on ContactWidget_OnDecidePrevButtonEvent");
static_assert(offsetof(ContactWidget_OnDecidePrevButtonEvent, Widget) == 0x000000, "Member 'ContactWidget_OnDecidePrevButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(ContactWidget_OnDecidePrevButtonEvent, InputType) == 0x000008, "Member 'ContactWidget_OnDecidePrevButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.ContactWidget.OnInvitationAllReadFlag
// 0x0001 (0x0001 - 0x0000)
struct ContactWidget_OnInvitationAllReadFlag final
{
public:
	bool                                          bIsAllReadFlag;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactWidget_OnInvitationAllReadFlag) == 0x000001, "Wrong alignment on ContactWidget_OnInvitationAllReadFlag");
static_assert(sizeof(ContactWidget_OnInvitationAllReadFlag) == 0x000001, "Wrong size on ContactWidget_OnInvitationAllReadFlag");
static_assert(offsetof(ContactWidget_OnInvitationAllReadFlag, bIsAllReadFlag) == 0x000000, "Member 'ContactWidget_OnInvitationAllReadFlag::bIsAllReadFlag' has a wrong offset!");

// Function OutGameModule.ContactWidget.OnLoadCompleteEvent
// 0x0004 (0x0004 - 0x0000)
struct ContactWidget_OnLoadCompleteEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactWidget_OnLoadCompleteEvent) == 0x000004, "Wrong alignment on ContactWidget_OnLoadCompleteEvent");
static_assert(sizeof(ContactWidget_OnLoadCompleteEvent) == 0x000004, "Wrong size on ContactWidget_OnLoadCompleteEvent");
static_assert(offsetof(ContactWidget_OnLoadCompleteEvent, RequestId) == 0x000000, "Member 'ContactWidget_OnLoadCompleteEvent::RequestId' has a wrong offset!");

// Function OutGameModule.ContactWidget.OnNoticeAllReadFlag
// 0x0001 (0x0001 - 0x0000)
struct ContactWidget_OnNoticeAllReadFlag final
{
public:
	bool                                          bIsAllReadFlag;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactWidget_OnNoticeAllReadFlag) == 0x000001, "Wrong alignment on ContactWidget_OnNoticeAllReadFlag");
static_assert(sizeof(ContactWidget_OnNoticeAllReadFlag) == 0x000001, "Wrong size on ContactWidget_OnNoticeAllReadFlag");
static_assert(offsetof(ContactWidget_OnNoticeAllReadFlag, bIsAllReadFlag) == 0x000000, "Member 'ContactWidget_OnNoticeAllReadFlag::bIsAllReadFlag' has a wrong offset!");

// Function OutGameModule.ContactWidget.OnOtherPlayersCall
// 0x0010 (0x0010 - 0x0000)
struct ContactWidget_OnOtherPlayersCall final
{
public:
	class FString                                 TargetUserId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactWidget_OnOtherPlayersCall) == 0x000008, "Wrong alignment on ContactWidget_OnOtherPlayersCall");
static_assert(sizeof(ContactWidget_OnOtherPlayersCall) == 0x000010, "Wrong size on ContactWidget_OnOtherPlayersCall");
static_assert(offsetof(ContactWidget_OnOtherPlayersCall, TargetUserId) == 0x000000, "Member 'ContactWidget_OnOtherPlayersCall::TargetUserId' has a wrong offset!");

// Function OutGameModule.ContactWidget.OnSwichTabWidgetEvent
// 0x0004 (0x0004 - 0x0000)
struct ContactWidget_OnSwichTabWidgetEvent final
{
public:
	int32                                         NewSelectTab;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactWidget_OnSwichTabWidgetEvent) == 0x000004, "Wrong alignment on ContactWidget_OnSwichTabWidgetEvent");
static_assert(sizeof(ContactWidget_OnSwichTabWidgetEvent) == 0x000004, "Wrong size on ContactWidget_OnSwichTabWidgetEvent");
static_assert(offsetof(ContactWidget_OnSwichTabWidgetEvent, NewSelectTab) == 0x000000, "Member 'ContactWidget_OnSwichTabWidgetEvent::NewSelectTab' has a wrong offset!");

// Function OutGameModule.ContactWidget.OnUpdateCompleteEvent
// 0x0004 (0x0004 - 0x0000)
struct ContactWidget_OnUpdateCompleteEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContactWidget_OnUpdateCompleteEvent) == 0x000004, "Wrong alignment on ContactWidget_OnUpdateCompleteEvent");
static_assert(sizeof(ContactWidget_OnUpdateCompleteEvent) == 0x000004, "Wrong size on ContactWidget_OnUpdateCompleteEvent");
static_assert(offsetof(ContactWidget_OnUpdateCompleteEvent, RequestId) == 0x000000, "Member 'ContactWidget_OnUpdateCompleteEvent::RequestId' has a wrong offset!");

// Function OutGameModule.CustomizeAppTopWidget.BP_RequestCloseLevel
// 0x0001 (0x0001 - 0x0000)
struct CustomizeAppTopWidget_BP_RequestCloseLevel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizeAppTopWidget_BP_RequestCloseLevel) == 0x000001, "Wrong alignment on CustomizeAppTopWidget_BP_RequestCloseLevel");
static_assert(sizeof(CustomizeAppTopWidget_BP_RequestCloseLevel) == 0x000001, "Wrong size on CustomizeAppTopWidget_BP_RequestCloseLevel");
static_assert(offsetof(CustomizeAppTopWidget_BP_RequestCloseLevel, ReturnValue) == 0x000000, "Member 'CustomizeAppTopWidget_BP_RequestCloseLevel::ReturnValue' has a wrong offset!");

// Function OutGameModule.CustomizeAppTopWidget.BP_RequestUpdateFetch
// 0x0001 (0x0001 - 0x0000)
struct CustomizeAppTopWidget_BP_RequestUpdateFetch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizeAppTopWidget_BP_RequestUpdateFetch) == 0x000001, "Wrong alignment on CustomizeAppTopWidget_BP_RequestUpdateFetch");
static_assert(sizeof(CustomizeAppTopWidget_BP_RequestUpdateFetch) == 0x000001, "Wrong size on CustomizeAppTopWidget_BP_RequestUpdateFetch");
static_assert(offsetof(CustomizeAppTopWidget_BP_RequestUpdateFetch, ReturnValue) == 0x000000, "Member 'CustomizeAppTopWidget_BP_RequestUpdateFetch::ReturnValue' has a wrong offset!");

// Function OutGameModule.CustomizeAppTopWidget.DoCustomNavigationDetailButton
// 0x0010 (0x0010 - 0x0000)
struct CustomizeAppTopWidget_DoCustomNavigationDetailButton final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizeAppTopWidget_DoCustomNavigationDetailButton) == 0x000008, "Wrong alignment on CustomizeAppTopWidget_DoCustomNavigationDetailButton");
static_assert(sizeof(CustomizeAppTopWidget_DoCustomNavigationDetailButton) == 0x000010, "Wrong size on CustomizeAppTopWidget_DoCustomNavigationDetailButton");
static_assert(offsetof(CustomizeAppTopWidget_DoCustomNavigationDetailButton, UiNavigation) == 0x000000, "Member 'CustomizeAppTopWidget_DoCustomNavigationDetailButton::UiNavigation' has a wrong offset!");
static_assert(offsetof(CustomizeAppTopWidget_DoCustomNavigationDetailButton, ReturnValue) == 0x000008, "Member 'CustomizeAppTopWidget_DoCustomNavigationDetailButton::ReturnValue' has a wrong offset!");

// Function OutGameModule.CustomizeAppTopWidget.OnDecideDetailButton
// 0x0010 (0x0010 - 0x0000)
struct CustomizeAppTopWidget_OnDecideDetailButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizeAppTopWidget_OnDecideDetailButton) == 0x000008, "Wrong alignment on CustomizeAppTopWidget_OnDecideDetailButton");
static_assert(sizeof(CustomizeAppTopWidget_OnDecideDetailButton) == 0x000010, "Wrong size on CustomizeAppTopWidget_OnDecideDetailButton");
static_assert(offsetof(CustomizeAppTopWidget_OnDecideDetailButton, Widget) == 0x000000, "Member 'CustomizeAppTopWidget_OnDecideDetailButton::Widget' has a wrong offset!");
static_assert(offsetof(CustomizeAppTopWidget_OnDecideDetailButton, InputType) == 0x000008, "Member 'CustomizeAppTopWidget_OnDecideDetailButton::InputType' has a wrong offset!");

// Function OutGameModule.CustomizeAppTopWidget.OnDecidePresetButton
// 0x0010 (0x0010 - 0x0000)
struct CustomizeAppTopWidget_OnDecidePresetButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizeAppTopWidget_OnDecidePresetButton) == 0x000008, "Wrong alignment on CustomizeAppTopWidget_OnDecidePresetButton");
static_assert(sizeof(CustomizeAppTopWidget_OnDecidePresetButton) == 0x000010, "Wrong size on CustomizeAppTopWidget_OnDecidePresetButton");
static_assert(offsetof(CustomizeAppTopWidget_OnDecidePresetButton, Widget) == 0x000000, "Member 'CustomizeAppTopWidget_OnDecidePresetButton::Widget' has a wrong offset!");
static_assert(offsetof(CustomizeAppTopWidget_OnDecidePresetButton, InputType) == 0x000008, "Member 'CustomizeAppTopWidget_OnDecidePresetButton::InputType' has a wrong offset!");

// Function OutGameModule.CustomizeAppTopWidget.ReceivedOnUpdateCompleteEvent
// 0x0004 (0x0004 - 0x0000)
struct CustomizeAppTopWidget_ReceivedOnUpdateCompleteEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizeAppTopWidget_ReceivedOnUpdateCompleteEvent) == 0x000004, "Wrong alignment on CustomizeAppTopWidget_ReceivedOnUpdateCompleteEvent");
static_assert(sizeof(CustomizeAppTopWidget_ReceivedOnUpdateCompleteEvent) == 0x000004, "Wrong size on CustomizeAppTopWidget_ReceivedOnUpdateCompleteEvent");
static_assert(offsetof(CustomizeAppTopWidget_ReceivedOnUpdateCompleteEvent, RequestId) == 0x000000, "Member 'CustomizeAppTopWidget_ReceivedOnUpdateCompleteEvent::RequestId' has a wrong offset!");

// Function OutGameModule.CustomizeAppTopWidget.RequestCloseLevel
// 0x0001 (0x0001 - 0x0000)
struct CustomizeAppTopWidget_RequestCloseLevel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizeAppTopWidget_RequestCloseLevel) == 0x000001, "Wrong alignment on CustomizeAppTopWidget_RequestCloseLevel");
static_assert(sizeof(CustomizeAppTopWidget_RequestCloseLevel) == 0x000001, "Wrong size on CustomizeAppTopWidget_RequestCloseLevel");
static_assert(offsetof(CustomizeAppTopWidget_RequestCloseLevel, ReturnValue) == 0x000000, "Member 'CustomizeAppTopWidget_RequestCloseLevel::ReturnValue' has a wrong offset!");

// Function OutGameModule.CustomizeAppTopWidget.RequestUpdateFetch
// 0x0001 (0x0001 - 0x0000)
struct CustomizeAppTopWidget_RequestUpdateFetch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizeAppTopWidget_RequestUpdateFetch) == 0x000001, "Wrong alignment on CustomizeAppTopWidget_RequestUpdateFetch");
static_assert(sizeof(CustomizeAppTopWidget_RequestUpdateFetch) == 0x000001, "Wrong size on CustomizeAppTopWidget_RequestUpdateFetch");
static_assert(offsetof(CustomizeAppTopWidget_RequestUpdateFetch, ReturnValue) == 0x000000, "Member 'CustomizeAppTopWidget_RequestUpdateFetch::ReturnValue' has a wrong offset!");

// Function OutGameModule.CustomizeAppTopWidget.SetSelectedButtonFocus
// 0x0001 (0x0001 - 0x0000)
struct CustomizeAppTopWidget_SetSelectedButtonFocus final
{
public:
	ETutorialPopupScene                           Scence;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizeAppTopWidget_SetSelectedButtonFocus) == 0x000001, "Wrong alignment on CustomizeAppTopWidget_SetSelectedButtonFocus");
static_assert(sizeof(CustomizeAppTopWidget_SetSelectedButtonFocus) == 0x000001, "Wrong size on CustomizeAppTopWidget_SetSelectedButtonFocus");
static_assert(offsetof(CustomizeAppTopWidget_SetSelectedButtonFocus, Scence) == 0x000000, "Member 'CustomizeAppTopWidget_SetSelectedButtonFocus::Scence' has a wrong offset!");

// Function OutGameModule.CustomizeAppWidget.DoCustomTileViewHasCustomizeWidgetNavigation
// 0x0010 (0x0010 - 0x0000)
struct CustomizeAppWidget_DoCustomTileViewHasCustomizeWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizeAppWidget_DoCustomTileViewHasCustomizeWidgetNavigation) == 0x000008, "Wrong alignment on CustomizeAppWidget_DoCustomTileViewHasCustomizeWidgetNavigation");
static_assert(sizeof(CustomizeAppWidget_DoCustomTileViewHasCustomizeWidgetNavigation) == 0x000010, "Wrong size on CustomizeAppWidget_DoCustomTileViewHasCustomizeWidgetNavigation");
static_assert(offsetof(CustomizeAppWidget_DoCustomTileViewHasCustomizeWidgetNavigation, UiNavigation) == 0x000000, "Member 'CustomizeAppWidget_DoCustomTileViewHasCustomizeWidgetNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(CustomizeAppWidget_DoCustomTileViewHasCustomizeWidgetNavigation, ReturnValue) == 0x000008, "Member 'CustomizeAppWidget_DoCustomTileViewHasCustomizeWidgetNavigation::ReturnValue' has a wrong offset!");

// DelegateFunction OutGameModule.CustomizeAppWidget.OnActivateEditModeEventDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct CustomizeAppWidget_OnActivateEditModeEventDelegate__DelegateSignature final
{
public:
	bool                                          DisplayFlag;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizeAppWidget_OnActivateEditModeEventDelegate__DelegateSignature) == 0x000001, "Wrong alignment on CustomizeAppWidget_OnActivateEditModeEventDelegate__DelegateSignature");
static_assert(sizeof(CustomizeAppWidget_OnActivateEditModeEventDelegate__DelegateSignature) == 0x000001, "Wrong size on CustomizeAppWidget_OnActivateEditModeEventDelegate__DelegateSignature");
static_assert(offsetof(CustomizeAppWidget_OnActivateEditModeEventDelegate__DelegateSignature, DisplayFlag) == 0x000000, "Member 'CustomizeAppWidget_OnActivateEditModeEventDelegate__DelegateSignature::DisplayFlag' has a wrong offset!");

// Function OutGameModule.CustomizeAppWidget.OnAddedToFocusButton
// 0x0010 (0x0010 - 0x0000)
struct CustomizeAppWidget_OnAddedToFocusButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizeAppWidget_OnAddedToFocusButton) == 0x000008, "Wrong alignment on CustomizeAppWidget_OnAddedToFocusButton");
static_assert(sizeof(CustomizeAppWidget_OnAddedToFocusButton) == 0x000010, "Wrong size on CustomizeAppWidget_OnAddedToFocusButton");
static_assert(offsetof(CustomizeAppWidget_OnAddedToFocusButton, Widget) == 0x000000, "Member 'CustomizeAppWidget_OnAddedToFocusButton::Widget' has a wrong offset!");
static_assert(offsetof(CustomizeAppWidget_OnAddedToFocusButton, InputType) == 0x000008, "Member 'CustomizeAppWidget_OnAddedToFocusButton::InputType' has a wrong offset!");

// Function OutGameModule.CustomizeAppWidget.OnCancelButton
// 0x0010 (0x0010 - 0x0000)
struct CustomizeAppWidget_OnCancelButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizeAppWidget_OnCancelButton) == 0x000008, "Wrong alignment on CustomizeAppWidget_OnCancelButton");
static_assert(sizeof(CustomizeAppWidget_OnCancelButton) == 0x000010, "Wrong size on CustomizeAppWidget_OnCancelButton");
static_assert(offsetof(CustomizeAppWidget_OnCancelButton, Widget) == 0x000000, "Member 'CustomizeAppWidget_OnCancelButton::Widget' has a wrong offset!");
static_assert(offsetof(CustomizeAppWidget_OnCancelButton, InputType) == 0x000008, "Member 'CustomizeAppWidget_OnCancelButton::InputType' has a wrong offset!");
static_assert(offsetof(CustomizeAppWidget_OnCancelButton, ReturnValue) == 0x000009, "Member 'CustomizeAppWidget_OnCancelButton::ReturnValue' has a wrong offset!");

// Function OutGameModule.CustomizeAppWidget.OnChangeTab
// 0x0001 (0x0001 - 0x0000)
struct CustomizeAppWidget_OnChangeTab final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizeAppWidget_OnChangeTab) == 0x000001, "Wrong alignment on CustomizeAppWidget_OnChangeTab");
static_assert(sizeof(CustomizeAppWidget_OnChangeTab) == 0x000001, "Wrong size on CustomizeAppWidget_OnChangeTab");
static_assert(offsetof(CustomizeAppWidget_OnChangeTab, ReturnValue) == 0x000000, "Member 'CustomizeAppWidget_OnChangeTab::ReturnValue' has a wrong offset!");

// Function OutGameModule.CustomizeAppWidget.OnDecideButton
// 0x0010 (0x0010 - 0x0000)
struct CustomizeAppWidget_OnDecideButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizeAppWidget_OnDecideButton) == 0x000008, "Wrong alignment on CustomizeAppWidget_OnDecideButton");
static_assert(sizeof(CustomizeAppWidget_OnDecideButton) == 0x000010, "Wrong size on CustomizeAppWidget_OnDecideButton");
static_assert(offsetof(CustomizeAppWidget_OnDecideButton, Widget) == 0x000000, "Member 'CustomizeAppWidget_OnDecideButton::Widget' has a wrong offset!");
static_assert(offsetof(CustomizeAppWidget_OnDecideButton, InputType) == 0x000008, "Member 'CustomizeAppWidget_OnDecideButton::InputType' has a wrong offset!");

// Function OutGameModule.CustomizeAppWidget.OnDecidePreviewButton
// 0x0010 (0x0010 - 0x0000)
struct CustomizeAppWidget_OnDecidePreviewButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizeAppWidget_OnDecidePreviewButton) == 0x000008, "Wrong alignment on CustomizeAppWidget_OnDecidePreviewButton");
static_assert(sizeof(CustomizeAppWidget_OnDecidePreviewButton) == 0x000010, "Wrong size on CustomizeAppWidget_OnDecidePreviewButton");
static_assert(offsetof(CustomizeAppWidget_OnDecidePreviewButton, Widget) == 0x000000, "Member 'CustomizeAppWidget_OnDecidePreviewButton::Widget' has a wrong offset!");
static_assert(offsetof(CustomizeAppWidget_OnDecidePreviewButton, InputType) == 0x000008, "Member 'CustomizeAppWidget_OnDecidePreviewButton::InputType' has a wrong offset!");

// Function OutGameModule.CustomizeAppWidget.OnDownShoulderKey
// 0x0002 (0x0002 - 0x0000)
struct CustomizeAppWidget_OnDownShoulderKey final
{
public:
	bool                                          InLeft;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizeAppWidget_OnDownShoulderKey) == 0x000001, "Wrong alignment on CustomizeAppWidget_OnDownShoulderKey");
static_assert(sizeof(CustomizeAppWidget_OnDownShoulderKey) == 0x000002, "Wrong size on CustomizeAppWidget_OnDownShoulderKey");
static_assert(offsetof(CustomizeAppWidget_OnDownShoulderKey, InLeft) == 0x000000, "Member 'CustomizeAppWidget_OnDownShoulderKey::InLeft' has a wrong offset!");
static_assert(offsetof(CustomizeAppWidget_OnDownShoulderKey, ReturnValue) == 0x000001, "Member 'CustomizeAppWidget_OnDownShoulderKey::ReturnValue' has a wrong offset!");

// Function OutGameModule.CustomizeAppWidget.OnNegativeButton
// 0x0010 (0x0010 - 0x0000)
struct CustomizeAppWidget_OnNegativeButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizeAppWidget_OnNegativeButton) == 0x000008, "Wrong alignment on CustomizeAppWidget_OnNegativeButton");
static_assert(sizeof(CustomizeAppWidget_OnNegativeButton) == 0x000010, "Wrong size on CustomizeAppWidget_OnNegativeButton");
static_assert(offsetof(CustomizeAppWidget_OnNegativeButton, Widget) == 0x000000, "Member 'CustomizeAppWidget_OnNegativeButton::Widget' has a wrong offset!");
static_assert(offsetof(CustomizeAppWidget_OnNegativeButton, InputType) == 0x000008, "Member 'CustomizeAppWidget_OnNegativeButton::InputType' has a wrong offset!");

// Function OutGameModule.CustomizeAppWidget.OnPressButton
// 0x0010 (0x0010 - 0x0000)
struct CustomizeAppWidget_OnPressButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizeAppWidget_OnPressButton) == 0x000008, "Wrong alignment on CustomizeAppWidget_OnPressButton");
static_assert(sizeof(CustomizeAppWidget_OnPressButton) == 0x000010, "Wrong size on CustomizeAppWidget_OnPressButton");
static_assert(offsetof(CustomizeAppWidget_OnPressButton, Widget) == 0x000000, "Member 'CustomizeAppWidget_OnPressButton::Widget' has a wrong offset!");
static_assert(offsetof(CustomizeAppWidget_OnPressButton, InputType) == 0x000008, "Member 'CustomizeAppWidget_OnPressButton::InputType' has a wrong offset!");

// Function OutGameModule.CustomizeAppWidget.OnRemovedFromFocusButton
// 0x0010 (0x0010 - 0x0000)
struct CustomizeAppWidget_OnRemovedFromFocusButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizeAppWidget_OnRemovedFromFocusButton) == 0x000008, "Wrong alignment on CustomizeAppWidget_OnRemovedFromFocusButton");
static_assert(sizeof(CustomizeAppWidget_OnRemovedFromFocusButton) == 0x000010, "Wrong size on CustomizeAppWidget_OnRemovedFromFocusButton");
static_assert(offsetof(CustomizeAppWidget_OnRemovedFromFocusButton, Widget) == 0x000000, "Member 'CustomizeAppWidget_OnRemovedFromFocusButton::Widget' has a wrong offset!");
static_assert(offsetof(CustomizeAppWidget_OnRemovedFromFocusButton, InputType) == 0x000008, "Member 'CustomizeAppWidget_OnRemovedFromFocusButton::InputType' has a wrong offset!");

// Function OutGameModule.CustomizeAppWidget.ReceivedOnLoadCompleteEvent
// 0x0004 (0x0004 - 0x0000)
struct CustomizeAppWidget_ReceivedOnLoadCompleteEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizeAppWidget_ReceivedOnLoadCompleteEvent) == 0x000004, "Wrong alignment on CustomizeAppWidget_ReceivedOnLoadCompleteEvent");
static_assert(sizeof(CustomizeAppWidget_ReceivedOnLoadCompleteEvent) == 0x000004, "Wrong size on CustomizeAppWidget_ReceivedOnLoadCompleteEvent");
static_assert(offsetof(CustomizeAppWidget_ReceivedOnLoadCompleteEvent, RequestId) == 0x000000, "Member 'CustomizeAppWidget_ReceivedOnLoadCompleteEvent::RequestId' has a wrong offset!");

// Function OutGameModule.CustomizeAppWidget.RequestEquip
// 0x0010 (0x0010 - 0x0000)
struct CustomizeAppWidget_RequestEquip final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizeAppWidget_RequestEquip) == 0x000008, "Wrong alignment on CustomizeAppWidget_RequestEquip");
static_assert(sizeof(CustomizeAppWidget_RequestEquip) == 0x000010, "Wrong size on CustomizeAppWidget_RequestEquip");
static_assert(offsetof(CustomizeAppWidget_RequestEquip, Widget) == 0x000000, "Member 'CustomizeAppWidget_RequestEquip::Widget' has a wrong offset!");
static_assert(offsetof(CustomizeAppWidget_RequestEquip, InputType) == 0x000008, "Member 'CustomizeAppWidget_RequestEquip::InputType' has a wrong offset!");
static_assert(offsetof(CustomizeAppWidget_RequestEquip, ReturnValue) == 0x000009, "Member 'CustomizeAppWidget_RequestEquip::ReturnValue' has a wrong offset!");

// DelegateFunction OutGameModule.ProgressBarWidget.AnimationFinishDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ProgressBarWidget_AnimationFinishDelegate__DelegateSignature final
{
public:
	class UProgressBarWidget*                     ProgressBar;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressBarWidget_AnimationFinishDelegate__DelegateSignature) == 0x000008, "Wrong alignment on ProgressBarWidget_AnimationFinishDelegate__DelegateSignature");
static_assert(sizeof(ProgressBarWidget_AnimationFinishDelegate__DelegateSignature) == 0x000008, "Wrong size on ProgressBarWidget_AnimationFinishDelegate__DelegateSignature");
static_assert(offsetof(ProgressBarWidget_AnimationFinishDelegate__DelegateSignature, ProgressBar) == 0x000000, "Member 'ProgressBarWidget_AnimationFinishDelegate__DelegateSignature::ProgressBar' has a wrong offset!");

// DelegateFunction OutGameModule.ProgressBarWidget.ProgressDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ProgressBarWidget_ProgressDelegate__DelegateSignature final
{
public:
	float                                         NowValue;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressBarWidget_ProgressDelegate__DelegateSignature) == 0x000004, "Wrong alignment on ProgressBarWidget_ProgressDelegate__DelegateSignature");
static_assert(sizeof(ProgressBarWidget_ProgressDelegate__DelegateSignature) == 0x000008, "Wrong size on ProgressBarWidget_ProgressDelegate__DelegateSignature");
static_assert(offsetof(ProgressBarWidget_ProgressDelegate__DelegateSignature, NowValue) == 0x000000, "Member 'ProgressBarWidget_ProgressDelegate__DelegateSignature::NowValue' has a wrong offset!");
static_assert(offsetof(ProgressBarWidget_ProgressDelegate__DelegateSignature, MaxValue) == 0x000004, "Member 'ProgressBarWidget_ProgressDelegate__DelegateSignature::MaxValue' has a wrong offset!");

// Function OutGameModule.CustomizeCostumeAppWidget.NavigationCustom
// 0x0010 (0x0010 - 0x0000)
struct CustomizeCostumeAppWidget_NavigationCustom final
{
public:
	EUINavigation                                 NavigationType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizeCostumeAppWidget_NavigationCustom) == 0x000008, "Wrong alignment on CustomizeCostumeAppWidget_NavigationCustom");
static_assert(sizeof(CustomizeCostumeAppWidget_NavigationCustom) == 0x000010, "Wrong size on CustomizeCostumeAppWidget_NavigationCustom");
static_assert(offsetof(CustomizeCostumeAppWidget_NavigationCustom, NavigationType) == 0x000000, "Member 'CustomizeCostumeAppWidget_NavigationCustom::NavigationType' has a wrong offset!");
static_assert(offsetof(CustomizeCostumeAppWidget_NavigationCustom, ReturnValue) == 0x000008, "Member 'CustomizeCostumeAppWidget_NavigationCustom::ReturnValue' has a wrong offset!");

// Function OutGameModule.CustomizeCostumeAppWidget.OnAuraMenuDecide
// 0x0004 (0x0004 - 0x0000)
struct CustomizeCostumeAppWidget_OnAuraMenuDecide final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizeCostumeAppWidget_OnAuraMenuDecide) == 0x000004, "Wrong alignment on CustomizeCostumeAppWidget_OnAuraMenuDecide");
static_assert(sizeof(CustomizeCostumeAppWidget_OnAuraMenuDecide) == 0x000004, "Wrong size on CustomizeCostumeAppWidget_OnAuraMenuDecide");
static_assert(offsetof(CustomizeCostumeAppWidget_OnAuraMenuDecide, Index_0) == 0x000000, "Member 'CustomizeCostumeAppWidget_OnAuraMenuDecide::Index_0' has a wrong offset!");

// Function OutGameModule.CustomizeCostumeAppWidget.OnAuraMenuHover
// 0x0004 (0x0004 - 0x0000)
struct CustomizeCostumeAppWidget_OnAuraMenuHover final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizeCostumeAppWidget_OnAuraMenuHover) == 0x000004, "Wrong alignment on CustomizeCostumeAppWidget_OnAuraMenuHover");
static_assert(sizeof(CustomizeCostumeAppWidget_OnAuraMenuHover) == 0x000004, "Wrong size on CustomizeCostumeAppWidget_OnAuraMenuHover");
static_assert(offsetof(CustomizeCostumeAppWidget_OnAuraMenuHover, Index_0) == 0x000000, "Member 'CustomizeCostumeAppWidget_OnAuraMenuHover::Index_0' has a wrong offset!");

// Function OutGameModule.CustomizeCostumeAppWidget.OnSubMenuDecide
// 0x0004 (0x0004 - 0x0000)
struct CustomizeCostumeAppWidget_OnSubMenuDecide final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizeCostumeAppWidget_OnSubMenuDecide) == 0x000004, "Wrong alignment on CustomizeCostumeAppWidget_OnSubMenuDecide");
static_assert(sizeof(CustomizeCostumeAppWidget_OnSubMenuDecide) == 0x000004, "Wrong size on CustomizeCostumeAppWidget_OnSubMenuDecide");
static_assert(offsetof(CustomizeCostumeAppWidget_OnSubMenuDecide, Index_0) == 0x000000, "Member 'CustomizeCostumeAppWidget_OnSubMenuDecide::Index_0' has a wrong offset!");

// Function OutGameModule.CustomizeCostumeAppWidget.ReceivedOnUpdateCompleteEvent
// 0x0004 (0x0004 - 0x0000)
struct CustomizeCostumeAppWidget_ReceivedOnUpdateCompleteEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizeCostumeAppWidget_ReceivedOnUpdateCompleteEvent) == 0x000004, "Wrong alignment on CustomizeCostumeAppWidget_ReceivedOnUpdateCompleteEvent");
static_assert(sizeof(CustomizeCostumeAppWidget_ReceivedOnUpdateCompleteEvent) == 0x000004, "Wrong size on CustomizeCostumeAppWidget_ReceivedOnUpdateCompleteEvent");
static_assert(offsetof(CustomizeCostumeAppWidget_ReceivedOnUpdateCompleteEvent, RequestId) == 0x000000, "Member 'CustomizeCostumeAppWidget_ReceivedOnUpdateCompleteEvent::RequestId' has a wrong offset!");

// Function OutGameModule.SeasonPassRankList.BP_GetCombineItem
// 0x0004 (0x0004 - 0x0000)
struct SeasonPassRankList_BP_GetCombineItem final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassRankList_BP_GetCombineItem) == 0x000004, "Wrong alignment on SeasonPassRankList_BP_GetCombineItem");
static_assert(sizeof(SeasonPassRankList_BP_GetCombineItem) == 0x000004, "Wrong size on SeasonPassRankList_BP_GetCombineItem");
static_assert(offsetof(SeasonPassRankList_BP_GetCombineItem, ReturnValue) == 0x000000, "Member 'SeasonPassRankList_BP_GetCombineItem::ReturnValue' has a wrong offset!");

// Function OutGameModule.SeasonPassRankList.BP_SetCombineItem
// 0x0010 (0x0010 - 0x0000)
struct SeasonPassRankList_BP_SetCombineItem final
{
public:
	TArray<struct FDbSeasonPassParam>             SeasonArray;                                       // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassRankList_BP_SetCombineItem) == 0x000008, "Wrong alignment on SeasonPassRankList_BP_SetCombineItem");
static_assert(sizeof(SeasonPassRankList_BP_SetCombineItem) == 0x000010, "Wrong size on SeasonPassRankList_BP_SetCombineItem");
static_assert(offsetof(SeasonPassRankList_BP_SetCombineItem, SeasonArray) == 0x000000, "Member 'SeasonPassRankList_BP_SetCombineItem::SeasonArray' has a wrong offset!");

// Function OutGameModule.SeasonPassRankList.BP_SetDBRankNumber
// 0x0008 (0x0008 - 0x0000)
struct SeasonPassRankList_BP_SetDBRankNumber final
{
public:
	int32                                         Page;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemMax;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassRankList_BP_SetDBRankNumber) == 0x000004, "Wrong alignment on SeasonPassRankList_BP_SetDBRankNumber");
static_assert(sizeof(SeasonPassRankList_BP_SetDBRankNumber) == 0x000008, "Wrong size on SeasonPassRankList_BP_SetDBRankNumber");
static_assert(offsetof(SeasonPassRankList_BP_SetDBRankNumber, Page) == 0x000000, "Member 'SeasonPassRankList_BP_SetDBRankNumber::Page' has a wrong offset!");
static_assert(offsetof(SeasonPassRankList_BP_SetDBRankNumber, ItemMax) == 0x000004, "Member 'SeasonPassRankList_BP_SetDBRankNumber::ItemMax' has a wrong offset!");

// Function OutGameModule.SeasonPassRankList.BP_SetEntrySpacing
// 0x0004 (0x0004 - 0x0000)
struct SeasonPassRankList_BP_SetEntrySpacing final
{
public:
	float                                         Spacing;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassRankList_BP_SetEntrySpacing) == 0x000004, "Wrong alignment on SeasonPassRankList_BP_SetEntrySpacing");
static_assert(sizeof(SeasonPassRankList_BP_SetEntrySpacing) == 0x000004, "Wrong size on SeasonPassRankList_BP_SetEntrySpacing");
static_assert(offsetof(SeasonPassRankList_BP_SetEntrySpacing, Spacing) == 0x000000, "Member 'SeasonPassRankList_BP_SetEntrySpacing::Spacing' has a wrong offset!");

// Function OutGameModule.SeasonPassRankList.BP_SetLayout
// 0x0018 (0x0018 - 0x0000)
struct SeasonPassRankList_BP_SetLayout final
{
public:
	ESeasonType                                   Seasontype;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxItem;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Page;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGridPanel*                             Panel;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassRankList_BP_SetLayout) == 0x000008, "Wrong alignment on SeasonPassRankList_BP_SetLayout");
static_assert(sizeof(SeasonPassRankList_BP_SetLayout) == 0x000018, "Wrong size on SeasonPassRankList_BP_SetLayout");
static_assert(offsetof(SeasonPassRankList_BP_SetLayout, Seasontype) == 0x000000, "Member 'SeasonPassRankList_BP_SetLayout::Seasontype' has a wrong offset!");
static_assert(offsetof(SeasonPassRankList_BP_SetLayout, MaxItem) == 0x000004, "Member 'SeasonPassRankList_BP_SetLayout::MaxItem' has a wrong offset!");
static_assert(offsetof(SeasonPassRankList_BP_SetLayout, Page) == 0x000008, "Member 'SeasonPassRankList_BP_SetLayout::Page' has a wrong offset!");
static_assert(offsetof(SeasonPassRankList_BP_SetLayout, Panel) == 0x000010, "Member 'SeasonPassRankList_BP_SetLayout::Panel' has a wrong offset!");

// Function OutGameModule.SeasonPassRankList.BP_SetUpListBGColor
// 0x0008 (0x0008 - 0x0000)
struct SeasonPassRankList_BP_SetUpListBGColor final
{
public:
	struct FColor                                 PurchaseColor;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 DefaultColor;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassRankList_BP_SetUpListBGColor) == 0x000004, "Wrong alignment on SeasonPassRankList_BP_SetUpListBGColor");
static_assert(sizeof(SeasonPassRankList_BP_SetUpListBGColor) == 0x000008, "Wrong size on SeasonPassRankList_BP_SetUpListBGColor");
static_assert(offsetof(SeasonPassRankList_BP_SetUpListBGColor, PurchaseColor) == 0x000000, "Member 'SeasonPassRankList_BP_SetUpListBGColor::PurchaseColor' has a wrong offset!");
static_assert(offsetof(SeasonPassRankList_BP_SetUpListBGColor, DefaultColor) == 0x000004, "Member 'SeasonPassRankList_BP_SetUpListBGColor::DefaultColor' has a wrong offset!");

// Function OutGameModule.SeasonPassRankList.BP_SetUpRankList
// 0x0004 (0x0004 - 0x0000)
struct SeasonPassRankList_BP_SetUpRankList final
{
public:
	int32                                         EntrySize;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassRankList_BP_SetUpRankList) == 0x000004, "Wrong alignment on SeasonPassRankList_BP_SetUpRankList");
static_assert(sizeof(SeasonPassRankList_BP_SetUpRankList) == 0x000004, "Wrong size on SeasonPassRankList_BP_SetUpRankList");
static_assert(offsetof(SeasonPassRankList_BP_SetUpRankList, EntrySize) == 0x000000, "Member 'SeasonPassRankList_BP_SetUpRankList::EntrySize' has a wrong offset!");

// Function OutGameModule.SeasonPassRankList.GetCursorPos
// 0x0008 (0x0008 - 0x0000)
struct SeasonPassRankList_GetCursorPos final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassRankList_GetCursorPos) == 0x000004, "Wrong alignment on SeasonPassRankList_GetCursorPos");
static_assert(sizeof(SeasonPassRankList_GetCursorPos) == 0x000008, "Wrong size on SeasonPassRankList_GetCursorPos");
static_assert(offsetof(SeasonPassRankList_GetCursorPos, ReturnValue) == 0x000000, "Member 'SeasonPassRankList_GetCursorPos::ReturnValue' has a wrong offset!");

// Function OutGameModule.SeasonPassRankList.GetCursorSize
// 0x0008 (0x0008 - 0x0000)
struct SeasonPassRankList_GetCursorSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassRankList_GetCursorSize) == 0x000004, "Wrong alignment on SeasonPassRankList_GetCursorSize");
static_assert(sizeof(SeasonPassRankList_GetCursorSize) == 0x000008, "Wrong size on SeasonPassRankList_GetCursorSize");
static_assert(offsetof(SeasonPassRankList_GetCursorSize, ReturnValue) == 0x000000, "Member 'SeasonPassRankList_GetCursorSize::ReturnValue' has a wrong offset!");

// Function OutGameModule.SeasonPassLicensePurchaseWindow.BP_GetBuyExpItemCount
// 0x0008 (0x0008 - 0x0000)
struct SeasonPassLicensePurchaseWindow_BP_GetBuyExpItemCount final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassLicensePurchaseWindow_BP_GetBuyExpItemCount) == 0x000004, "Wrong alignment on SeasonPassLicensePurchaseWindow_BP_GetBuyExpItemCount");
static_assert(sizeof(SeasonPassLicensePurchaseWindow_BP_GetBuyExpItemCount) == 0x000008, "Wrong size on SeasonPassLicensePurchaseWindow_BP_GetBuyExpItemCount");
static_assert(offsetof(SeasonPassLicensePurchaseWindow_BP_GetBuyExpItemCount, Rank) == 0x000000, "Member 'SeasonPassLicensePurchaseWindow_BP_GetBuyExpItemCount::Rank' has a wrong offset!");
static_assert(offsetof(SeasonPassLicensePurchaseWindow_BP_GetBuyExpItemCount, ReturnValue) == 0x000004, "Member 'SeasonPassLicensePurchaseWindow_BP_GetBuyExpItemCount::ReturnValue' has a wrong offset!");

// Function OutGameModule.SeasonPassLicensePurchaseWindow.BP_OpenGetItemWindow
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassLicensePurchaseWindow_BP_OpenGetItemWindow final
{
public:
	ESeasonType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassLicensePurchaseWindow_BP_OpenGetItemWindow) == 0x000001, "Wrong alignment on SeasonPassLicensePurchaseWindow_BP_OpenGetItemWindow");
static_assert(sizeof(SeasonPassLicensePurchaseWindow_BP_OpenGetItemWindow) == 0x000001, "Wrong size on SeasonPassLicensePurchaseWindow_BP_OpenGetItemWindow");
static_assert(offsetof(SeasonPassLicensePurchaseWindow_BP_OpenGetItemWindow, Type) == 0x000000, "Member 'SeasonPassLicensePurchaseWindow_BP_OpenGetItemWindow::Type' has a wrong offset!");

// Function OutGameModule.SeasonPassLicensePurchaseWindow.BP_OpenShopPremium
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassLicensePurchaseWindow_BP_OpenShopPremium final
{
public:
	ESeasonType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassLicensePurchaseWindow_BP_OpenShopPremium) == 0x000001, "Wrong alignment on SeasonPassLicensePurchaseWindow_BP_OpenShopPremium");
static_assert(sizeof(SeasonPassLicensePurchaseWindow_BP_OpenShopPremium) == 0x000001, "Wrong size on SeasonPassLicensePurchaseWindow_BP_OpenShopPremium");
static_assert(offsetof(SeasonPassLicensePurchaseWindow_BP_OpenShopPremium, Type) == 0x000000, "Member 'SeasonPassLicensePurchaseWindow_BP_OpenShopPremium::Type' has a wrong offset!");

// Function OutGameModule.SeasonPassLicensePurchaseWindow.BP_SetUpItemGetWindow
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassLicensePurchaseWindow_BP_SetUpItemGetWindow final
{
public:
	ESeasonType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassLicensePurchaseWindow_BP_SetUpItemGetWindow) == 0x000001, "Wrong alignment on SeasonPassLicensePurchaseWindow_BP_SetUpItemGetWindow");
static_assert(sizeof(SeasonPassLicensePurchaseWindow_BP_SetUpItemGetWindow) == 0x000001, "Wrong size on SeasonPassLicensePurchaseWindow_BP_SetUpItemGetWindow");
static_assert(offsetof(SeasonPassLicensePurchaseWindow_BP_SetUpItemGetWindow, Type) == 0x000000, "Member 'SeasonPassLicensePurchaseWindow_BP_SetUpItemGetWindow::Type' has a wrong offset!");

// Function OutGameModule.CustomizeEmblemAppWidget.OnAddedToFocusDisplayButton
// 0x0010 (0x0010 - 0x0000)
struct CustomizeEmblemAppWidget_OnAddedToFocusDisplayButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizeEmblemAppWidget_OnAddedToFocusDisplayButton) == 0x000008, "Wrong alignment on CustomizeEmblemAppWidget_OnAddedToFocusDisplayButton");
static_assert(sizeof(CustomizeEmblemAppWidget_OnAddedToFocusDisplayButton) == 0x000010, "Wrong size on CustomizeEmblemAppWidget_OnAddedToFocusDisplayButton");
static_assert(offsetof(CustomizeEmblemAppWidget_OnAddedToFocusDisplayButton, Widget) == 0x000000, "Member 'CustomizeEmblemAppWidget_OnAddedToFocusDisplayButton::Widget' has a wrong offset!");
static_assert(offsetof(CustomizeEmblemAppWidget_OnAddedToFocusDisplayButton, InputType) == 0x000008, "Member 'CustomizeEmblemAppWidget_OnAddedToFocusDisplayButton::InputType' has a wrong offset!");

// Function OutGameModule.CustomizeEmblemAppWidget.OnDecideCancelButton
// 0x0010 (0x0010 - 0x0000)
struct CustomizeEmblemAppWidget_OnDecideCancelButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizeEmblemAppWidget_OnDecideCancelButton) == 0x000008, "Wrong alignment on CustomizeEmblemAppWidget_OnDecideCancelButton");
static_assert(sizeof(CustomizeEmblemAppWidget_OnDecideCancelButton) == 0x000010, "Wrong size on CustomizeEmblemAppWidget_OnDecideCancelButton");
static_assert(offsetof(CustomizeEmblemAppWidget_OnDecideCancelButton, Widget) == 0x000000, "Member 'CustomizeEmblemAppWidget_OnDecideCancelButton::Widget' has a wrong offset!");
static_assert(offsetof(CustomizeEmblemAppWidget_OnDecideCancelButton, InputType) == 0x000008, "Member 'CustomizeEmblemAppWidget_OnDecideCancelButton::InputType' has a wrong offset!");

// Function OutGameModule.CustomizeEmblemAppWidget.OnDecideEquipButton
// 0x0010 (0x0010 - 0x0000)
struct CustomizeEmblemAppWidget_OnDecideEquipButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizeEmblemAppWidget_OnDecideEquipButton) == 0x000008, "Wrong alignment on CustomizeEmblemAppWidget_OnDecideEquipButton");
static_assert(sizeof(CustomizeEmblemAppWidget_OnDecideEquipButton) == 0x000010, "Wrong size on CustomizeEmblemAppWidget_OnDecideEquipButton");
static_assert(offsetof(CustomizeEmblemAppWidget_OnDecideEquipButton, Widget) == 0x000000, "Member 'CustomizeEmblemAppWidget_OnDecideEquipButton::Widget' has a wrong offset!");
static_assert(offsetof(CustomizeEmblemAppWidget_OnDecideEquipButton, InputType) == 0x000008, "Member 'CustomizeEmblemAppWidget_OnDecideEquipButton::InputType' has a wrong offset!");

// Function OutGameModule.CustomizeEmblemPreviewAppWidget.OnCancelGeneralWindow
// 0x0010 (0x0010 - 0x0000)
struct CustomizeEmblemPreviewAppWidget_OnCancelGeneralWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizeEmblemPreviewAppWidget_OnCancelGeneralWindow) == 0x000008, "Wrong alignment on CustomizeEmblemPreviewAppWidget_OnCancelGeneralWindow");
static_assert(sizeof(CustomizeEmblemPreviewAppWidget_OnCancelGeneralWindow) == 0x000010, "Wrong size on CustomizeEmblemPreviewAppWidget_OnCancelGeneralWindow");
static_assert(offsetof(CustomizeEmblemPreviewAppWidget_OnCancelGeneralWindow, Widget) == 0x000000, "Member 'CustomizeEmblemPreviewAppWidget_OnCancelGeneralWindow::Widget' has a wrong offset!");
static_assert(offsetof(CustomizeEmblemPreviewAppWidget_OnCancelGeneralWindow, InputType) == 0x000008, "Member 'CustomizeEmblemPreviewAppWidget_OnCancelGeneralWindow::InputType' has a wrong offset!");

// Function OutGameModule.CustomizeEmblemPreviewAppWidget.OnDecideGeneralWindow
// 0x0010 (0x0010 - 0x0000)
struct CustomizeEmblemPreviewAppWidget_OnDecideGeneralWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLeft;                                            // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizeEmblemPreviewAppWidget_OnDecideGeneralWindow) == 0x000008, "Wrong alignment on CustomizeEmblemPreviewAppWidget_OnDecideGeneralWindow");
static_assert(sizeof(CustomizeEmblemPreviewAppWidget_OnDecideGeneralWindow) == 0x000010, "Wrong size on CustomizeEmblemPreviewAppWidget_OnDecideGeneralWindow");
static_assert(offsetof(CustomizeEmblemPreviewAppWidget_OnDecideGeneralWindow, Widget) == 0x000000, "Member 'CustomizeEmblemPreviewAppWidget_OnDecideGeneralWindow::Widget' has a wrong offset!");
static_assert(offsetof(CustomizeEmblemPreviewAppWidget_OnDecideGeneralWindow, InputType) == 0x000008, "Member 'CustomizeEmblemPreviewAppWidget_OnDecideGeneralWindow::InputType' has a wrong offset!");
static_assert(offsetof(CustomizeEmblemPreviewAppWidget_OnDecideGeneralWindow, IsLeft) == 0x000009, "Member 'CustomizeEmblemPreviewAppWidget_OnDecideGeneralWindow::IsLeft' has a wrong offset!");

// Function OutGameModule.SeasonPassEntryBase.BP_GetCurretnFocusWidgetBase
// 0x0008 (0x0008 - 0x0000)
struct SeasonPassEntryBase_BP_GetCurretnFocusWidgetBase final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassEntryBase_BP_GetCurretnFocusWidgetBase) == 0x000008, "Wrong alignment on SeasonPassEntryBase_BP_GetCurretnFocusWidgetBase");
static_assert(sizeof(SeasonPassEntryBase_BP_GetCurretnFocusWidgetBase) == 0x000008, "Wrong size on SeasonPassEntryBase_BP_GetCurretnFocusWidgetBase");
static_assert(offsetof(SeasonPassEntryBase_BP_GetCurretnFocusWidgetBase, ReturnValue) == 0x000000, "Member 'SeasonPassEntryBase_BP_GetCurretnFocusWidgetBase::ReturnValue' has a wrong offset!");

// Function OutGameModule.CustomizeEmoteAppWidget.OnAddedToFocusWheelCancelButton
// 0x0010 (0x0010 - 0x0000)
struct CustomizeEmoteAppWidget_OnAddedToFocusWheelCancelButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizeEmoteAppWidget_OnAddedToFocusWheelCancelButton) == 0x000008, "Wrong alignment on CustomizeEmoteAppWidget_OnAddedToFocusWheelCancelButton");
static_assert(sizeof(CustomizeEmoteAppWidget_OnAddedToFocusWheelCancelButton) == 0x000010, "Wrong size on CustomizeEmoteAppWidget_OnAddedToFocusWheelCancelButton");
static_assert(offsetof(CustomizeEmoteAppWidget_OnAddedToFocusWheelCancelButton, Widget) == 0x000000, "Member 'CustomizeEmoteAppWidget_OnAddedToFocusWheelCancelButton::Widget' has a wrong offset!");
static_assert(offsetof(CustomizeEmoteAppWidget_OnAddedToFocusWheelCancelButton, InputType) == 0x000008, "Member 'CustomizeEmoteAppWidget_OnAddedToFocusWheelCancelButton::InputType' has a wrong offset!");

// Function OutGameModule.CustomizeEmoteAppWidget.OnDecideEquipButton
// 0x0010 (0x0010 - 0x0000)
struct CustomizeEmoteAppWidget_OnDecideEquipButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizeEmoteAppWidget_OnDecideEquipButton) == 0x000008, "Wrong alignment on CustomizeEmoteAppWidget_OnDecideEquipButton");
static_assert(sizeof(CustomizeEmoteAppWidget_OnDecideEquipButton) == 0x000010, "Wrong size on CustomizeEmoteAppWidget_OnDecideEquipButton");
static_assert(offsetof(CustomizeEmoteAppWidget_OnDecideEquipButton, Widget) == 0x000000, "Member 'CustomizeEmoteAppWidget_OnDecideEquipButton::Widget' has a wrong offset!");
static_assert(offsetof(CustomizeEmoteAppWidget_OnDecideEquipButton, InputType) == 0x000008, "Member 'CustomizeEmoteAppWidget_OnDecideEquipButton::InputType' has a wrong offset!");

// Function OutGameModule.CustomizeEmoteAppWidget.OnDecideWheelCancelButton
// 0x0010 (0x0010 - 0x0000)
struct CustomizeEmoteAppWidget_OnDecideWheelCancelButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizeEmoteAppWidget_OnDecideWheelCancelButton) == 0x000008, "Wrong alignment on CustomizeEmoteAppWidget_OnDecideWheelCancelButton");
static_assert(sizeof(CustomizeEmoteAppWidget_OnDecideWheelCancelButton) == 0x000010, "Wrong size on CustomizeEmoteAppWidget_OnDecideWheelCancelButton");
static_assert(offsetof(CustomizeEmoteAppWidget_OnDecideWheelCancelButton, Widget) == 0x000000, "Member 'CustomizeEmoteAppWidget_OnDecideWheelCancelButton::Widget' has a wrong offset!");
static_assert(offsetof(CustomizeEmoteAppWidget_OnDecideWheelCancelButton, InputType) == 0x000008, "Member 'CustomizeEmoteAppWidget_OnDecideWheelCancelButton::InputType' has a wrong offset!");

// Function OutGameModule.CustomizeEmoteAppWidget.OnRemovedFromFocusWheelCancelButton
// 0x0010 (0x0010 - 0x0000)
struct CustomizeEmoteAppWidget_OnRemovedFromFocusWheelCancelButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizeEmoteAppWidget_OnRemovedFromFocusWheelCancelButton) == 0x000008, "Wrong alignment on CustomizeEmoteAppWidget_OnRemovedFromFocusWheelCancelButton");
static_assert(sizeof(CustomizeEmoteAppWidget_OnRemovedFromFocusWheelCancelButton) == 0x000010, "Wrong size on CustomizeEmoteAppWidget_OnRemovedFromFocusWheelCancelButton");
static_assert(offsetof(CustomizeEmoteAppWidget_OnRemovedFromFocusWheelCancelButton, Widget) == 0x000000, "Member 'CustomizeEmoteAppWidget_OnRemovedFromFocusWheelCancelButton::Widget' has a wrong offset!");
static_assert(offsetof(CustomizeEmoteAppWidget_OnRemovedFromFocusWheelCancelButton, InputType) == 0x000008, "Member 'CustomizeEmoteAppWidget_OnRemovedFromFocusWheelCancelButton::InputType' has a wrong offset!");

// Function OutGameModule.SeasonPassRank.BP_RankValueSetUp
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassRank_BP_RankValueSetUp final
{
public:
	ESeasonType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassRank_BP_RankValueSetUp) == 0x000001, "Wrong alignment on SeasonPassRank_BP_RankValueSetUp");
static_assert(sizeof(SeasonPassRank_BP_RankValueSetUp) == 0x000001, "Wrong size on SeasonPassRank_BP_RankValueSetUp");
static_assert(offsetof(SeasonPassRank_BP_RankValueSetUp, Type) == 0x000000, "Member 'SeasonPassRank_BP_RankValueSetUp::Type' has a wrong offset!");

// Function OutGameModule.SeasonPassRank.BP_SetProgressBar
// 0x0004 (0x0004 - 0x0000)
struct SeasonPassRank_BP_SetProgressBar final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassRank_BP_SetProgressBar) == 0x000004, "Wrong alignment on SeasonPassRank_BP_SetProgressBar");
static_assert(sizeof(SeasonPassRank_BP_SetProgressBar) == 0x000004, "Wrong size on SeasonPassRank_BP_SetProgressBar");
static_assert(offsetof(SeasonPassRank_BP_SetProgressBar, Percent) == 0x000000, "Member 'SeasonPassRank_BP_SetProgressBar::Percent' has a wrong offset!");

// Function OutGameModule.SeasonPassRank.BP_SetUpDesignGaugeColor
// 0x0008 (0x0008 - 0x0000)
struct SeasonPassRank_BP_SetUpDesignGaugeColor final
{
public:
	struct FColor                                 PurchaseColor;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 DefaultColor;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassRank_BP_SetUpDesignGaugeColor) == 0x000004, "Wrong alignment on SeasonPassRank_BP_SetUpDesignGaugeColor");
static_assert(sizeof(SeasonPassRank_BP_SetUpDesignGaugeColor) == 0x000008, "Wrong size on SeasonPassRank_BP_SetUpDesignGaugeColor");
static_assert(offsetof(SeasonPassRank_BP_SetUpDesignGaugeColor, PurchaseColor) == 0x000000, "Member 'SeasonPassRank_BP_SetUpDesignGaugeColor::PurchaseColor' has a wrong offset!");
static_assert(offsetof(SeasonPassRank_BP_SetUpDesignGaugeColor, DefaultColor) == 0x000004, "Member 'SeasonPassRank_BP_SetUpDesignGaugeColor::DefaultColor' has a wrong offset!");

// Function OutGameModule.SeasonPassRank.BP_SetUpGauge
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassRank_BP_SetUpGauge final
{
public:
	ESeasonType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassRank_BP_SetUpGauge) == 0x000001, "Wrong alignment on SeasonPassRank_BP_SetUpGauge");
static_assert(sizeof(SeasonPassRank_BP_SetUpGauge) == 0x000001, "Wrong size on SeasonPassRank_BP_SetUpGauge");
static_assert(offsetof(SeasonPassRank_BP_SetUpGauge, Type) == 0x000000, "Member 'SeasonPassRank_BP_SetUpGauge::Type' has a wrong offset!");

// Function OutGameModule.SeasonPassRank.BP_SetValue
// 0x000C (0x000C - 0x0000)
struct SeasonPassRank_BP_SetValue final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exp;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESeasonType                                   Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SeasonPassRank_BP_SetValue) == 0x000004, "Wrong alignment on SeasonPassRank_BP_SetValue");
static_assert(sizeof(SeasonPassRank_BP_SetValue) == 0x00000C, "Wrong size on SeasonPassRank_BP_SetValue");
static_assert(offsetof(SeasonPassRank_BP_SetValue, Rank) == 0x000000, "Member 'SeasonPassRank_BP_SetValue::Rank' has a wrong offset!");
static_assert(offsetof(SeasonPassRank_BP_SetValue, Exp) == 0x000004, "Member 'SeasonPassRank_BP_SetValue::Exp' has a wrong offset!");
static_assert(offsetof(SeasonPassRank_BP_SetValue, Type) == 0x000008, "Member 'SeasonPassRank_BP_SetValue::Type' has a wrong offset!");

// Function OutGameModule.CustomizeListEntryObject.BP_GetHasFlag
// 0x0001 (0x0001 - 0x0000)
struct CustomizeListEntryObject_BP_GetHasFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizeListEntryObject_BP_GetHasFlag) == 0x000001, "Wrong alignment on CustomizeListEntryObject_BP_GetHasFlag");
static_assert(sizeof(CustomizeListEntryObject_BP_GetHasFlag) == 0x000001, "Wrong size on CustomizeListEntryObject_BP_GetHasFlag");
static_assert(offsetof(CustomizeListEntryObject_BP_GetHasFlag, ReturnValue) == 0x000000, "Member 'CustomizeListEntryObject_BP_GetHasFlag::ReturnValue' has a wrong offset!");

// Function OutGameModule.CustomizeListEntryObject.BP_GetItemDescription
// 0x0018 (0x0018 - 0x0000)
struct CustomizeListEntryObject_BP_GetItemDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizeListEntryObject_BP_GetItemDescription) == 0x000008, "Wrong alignment on CustomizeListEntryObject_BP_GetItemDescription");
static_assert(sizeof(CustomizeListEntryObject_BP_GetItemDescription) == 0x000018, "Wrong size on CustomizeListEntryObject_BP_GetItemDescription");
static_assert(offsetof(CustomizeListEntryObject_BP_GetItemDescription, ReturnValue) == 0x000000, "Member 'CustomizeListEntryObject_BP_GetItemDescription::ReturnValue' has a wrong offset!");

// Function OutGameModule.CustomizeListEntryObject.BP_GetItemName
// 0x0020 (0x0020 - 0x0000)
struct CustomizeListEntryObject_BP_GetItemName final
{
public:
	bool                                          bMultiLine;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizeListEntryObject_BP_GetItemName) == 0x000008, "Wrong alignment on CustomizeListEntryObject_BP_GetItemName");
static_assert(sizeof(CustomizeListEntryObject_BP_GetItemName) == 0x000020, "Wrong size on CustomizeListEntryObject_BP_GetItemName");
static_assert(offsetof(CustomizeListEntryObject_BP_GetItemName, bMultiLine) == 0x000000, "Member 'CustomizeListEntryObject_BP_GetItemName::bMultiLine' has a wrong offset!");
static_assert(offsetof(CustomizeListEntryObject_BP_GetItemName, ReturnValue) == 0x000008, "Member 'CustomizeListEntryObject_BP_GetItemName::ReturnValue' has a wrong offset!");

// Function OutGameModule.CustomizeListEntryObject.BP_GetItemProduct
// 0x0004 (0x0004 - 0x0000)
struct CustomizeListEntryObject_BP_GetItemProduct final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizeListEntryObject_BP_GetItemProduct) == 0x000004, "Wrong alignment on CustomizeListEntryObject_BP_GetItemProduct");
static_assert(sizeof(CustomizeListEntryObject_BP_GetItemProduct) == 0x000004, "Wrong size on CustomizeListEntryObject_BP_GetItemProduct");
static_assert(offsetof(CustomizeListEntryObject_BP_GetItemProduct, ReturnValue) == 0x000000, "Member 'CustomizeListEntryObject_BP_GetItemProduct::ReturnValue' has a wrong offset!");

// Function OutGameModule.CustomizeListEntryObject.BP_GetRarityId
// 0x0001 (0x0001 - 0x0000)
struct CustomizeListEntryObject_BP_GetRarityId final
{
public:
	EMdRarity                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizeListEntryObject_BP_GetRarityId) == 0x000001, "Wrong alignment on CustomizeListEntryObject_BP_GetRarityId");
static_assert(sizeof(CustomizeListEntryObject_BP_GetRarityId) == 0x000001, "Wrong size on CustomizeListEntryObject_BP_GetRarityId");
static_assert(offsetof(CustomizeListEntryObject_BP_GetRarityId, ReturnValue) == 0x000000, "Member 'CustomizeListEntryObject_BP_GetRarityId::ReturnValue' has a wrong offset!");

// Function OutGameModule.CustomizeListEntryObject.BP_GetCharacterId
// 0x0001 (0x0001 - 0x0000)
struct CustomizeListEntryObject_BP_GetCharacterId final
{
public:
	ECharacterId                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizeListEntryObject_BP_GetCharacterId) == 0x000001, "Wrong alignment on CustomizeListEntryObject_BP_GetCharacterId");
static_assert(sizeof(CustomizeListEntryObject_BP_GetCharacterId) == 0x000001, "Wrong size on CustomizeListEntryObject_BP_GetCharacterId");
static_assert(offsetof(CustomizeListEntryObject_BP_GetCharacterId, ReturnValue) == 0x000000, "Member 'CustomizeListEntryObject_BP_GetCharacterId::ReturnValue' has a wrong offset!");

// Function OutGameModule.CustomizeListEntryObject.BP_GetItemCode
// 0x0004 (0x0004 - 0x0000)
struct CustomizeListEntryObject_BP_GetItemCode final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizeListEntryObject_BP_GetItemCode) == 0x000004, "Wrong alignment on CustomizeListEntryObject_BP_GetItemCode");
static_assert(sizeof(CustomizeListEntryObject_BP_GetItemCode) == 0x000004, "Wrong size on CustomizeListEntryObject_BP_GetItemCode");
static_assert(offsetof(CustomizeListEntryObject_BP_GetItemCode, ReturnValue) == 0x000000, "Member 'CustomizeListEntryObject_BP_GetItemCode::ReturnValue' has a wrong offset!");

// Function OutGameModule.CustomizeListEntryObject.BP_GetType
// 0x0001 (0x0001 - 0x0000)
struct CustomizeListEntryObject_BP_GetType final
{
public:
	EItemCategory                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizeListEntryObject_BP_GetType) == 0x000001, "Wrong alignment on CustomizeListEntryObject_BP_GetType");
static_assert(sizeof(CustomizeListEntryObject_BP_GetType) == 0x000001, "Wrong size on CustomizeListEntryObject_BP_GetType");
static_assert(offsetof(CustomizeListEntryObject_BP_GetType, ReturnValue) == 0x000000, "Member 'CustomizeListEntryObject_BP_GetType::ReturnValue' has a wrong offset!");

// Function OutGameModule.SettingButtonKeyboardWidget.BP_OnConfigure
// 0x0018 (0x0018 - 0x0000)
struct SettingButtonKeyboardWidget_BP_OnConfigure final
{
public:
	struct FKey                                   PrevKey;                                           // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingButtonKeyboardWidget_BP_OnConfigure) == 0x000008, "Wrong alignment on SettingButtonKeyboardWidget_BP_OnConfigure");
static_assert(sizeof(SettingButtonKeyboardWidget_BP_OnConfigure) == 0x000018, "Wrong size on SettingButtonKeyboardWidget_BP_OnConfigure");
static_assert(offsetof(SettingButtonKeyboardWidget_BP_OnConfigure, PrevKey) == 0x000000, "Member 'SettingButtonKeyboardWidget_BP_OnConfigure::PrevKey' has a wrong offset!");

// Function OutGameModule.SettingButtonKeyboardWidget.BP_SetBG
// 0x0001 (0x0001 - 0x0000)
struct SettingButtonKeyboardWidget_BP_SetBG final
{
public:
	ESettingButtonBGType                          bgType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingButtonKeyboardWidget_BP_SetBG) == 0x000001, "Wrong alignment on SettingButtonKeyboardWidget_BP_SetBG");
static_assert(sizeof(SettingButtonKeyboardWidget_BP_SetBG) == 0x000001, "Wrong size on SettingButtonKeyboardWidget_BP_SetBG");
static_assert(offsetof(SettingButtonKeyboardWidget_BP_SetBG, bgType) == 0x000000, "Member 'SettingButtonKeyboardWidget_BP_SetBG::bgType' has a wrong offset!");

// Function OutGameModule.SettingButtonKeyboardWidget.OnConfigure
// 0x0018 (0x0018 - 0x0000)
struct SettingButtonKeyboardWidget_OnConfigure final
{
public:
	struct FKey                                   NextKey;                                           // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingButtonKeyboardWidget_OnConfigure) == 0x000008, "Wrong alignment on SettingButtonKeyboardWidget_OnConfigure");
static_assert(sizeof(SettingButtonKeyboardWidget_OnConfigure) == 0x000018, "Wrong size on SettingButtonKeyboardWidget_OnConfigure");
static_assert(offsetof(SettingButtonKeyboardWidget_OnConfigure, NextKey) == 0x000000, "Member 'SettingButtonKeyboardWidget_OnConfigure::NextKey' has a wrong offset!");

// Function OutGameModule.SettingButtonKeyboardWidget.OnCustomMode
// 0x0010 (0x0010 - 0x0000)
struct SettingButtonKeyboardWidget_OnCustomMode final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SettingButtonKeyboardWidget_OnCustomMode) == 0x000008, "Wrong alignment on SettingButtonKeyboardWidget_OnCustomMode");
static_assert(sizeof(SettingButtonKeyboardWidget_OnCustomMode) == 0x000010, "Wrong size on SettingButtonKeyboardWidget_OnCustomMode");
static_assert(offsetof(SettingButtonKeyboardWidget_OnCustomMode, Widget) == 0x000000, "Member 'SettingButtonKeyboardWidget_OnCustomMode::Widget' has a wrong offset!");
static_assert(offsetof(SettingButtonKeyboardWidget_OnCustomMode, InputType) == 0x000008, "Member 'SettingButtonKeyboardWidget_OnCustomMode::InputType' has a wrong offset!");

// Function OutGameModule.SeasonPassScrollSlot.BP_GetSelect
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassScrollSlot_BP_GetSelect final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassScrollSlot_BP_GetSelect) == 0x000001, "Wrong alignment on SeasonPassScrollSlot_BP_GetSelect");
static_assert(sizeof(SeasonPassScrollSlot_BP_GetSelect) == 0x000001, "Wrong size on SeasonPassScrollSlot_BP_GetSelect");
static_assert(offsetof(SeasonPassScrollSlot_BP_GetSelect, ReturnValue) == 0x000000, "Member 'SeasonPassScrollSlot_BP_GetSelect::ReturnValue' has a wrong offset!");

// Function OutGameModule.SeasonPassScrollSlot.BP_SetSelect
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassScrollSlot_BP_SetSelect final
{
public:
	bool                                          Select;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassScrollSlot_BP_SetSelect) == 0x000001, "Wrong alignment on SeasonPassScrollSlot_BP_SetSelect");
static_assert(sizeof(SeasonPassScrollSlot_BP_SetSelect) == 0x000001, "Wrong size on SeasonPassScrollSlot_BP_SetSelect");
static_assert(offsetof(SeasonPassScrollSlot_BP_SetSelect, Select) == 0x000000, "Member 'SeasonPassScrollSlot_BP_SetSelect::Select' has a wrong offset!");

// Function OutGameModule.CustomizeMenuAppWidget.ReceivedAddToFocusEvent
// 0x0010 (0x0010 - 0x0000)
struct CustomizeMenuAppWidget_ReceivedAddToFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizeMenuAppWidget_ReceivedAddToFocusEvent) == 0x000008, "Wrong alignment on CustomizeMenuAppWidget_ReceivedAddToFocusEvent");
static_assert(sizeof(CustomizeMenuAppWidget_ReceivedAddToFocusEvent) == 0x000010, "Wrong size on CustomizeMenuAppWidget_ReceivedAddToFocusEvent");
static_assert(offsetof(CustomizeMenuAppWidget_ReceivedAddToFocusEvent, Widget) == 0x000000, "Member 'CustomizeMenuAppWidget_ReceivedAddToFocusEvent::Widget' has a wrong offset!");
static_assert(offsetof(CustomizeMenuAppWidget_ReceivedAddToFocusEvent, InputType) == 0x000008, "Member 'CustomizeMenuAppWidget_ReceivedAddToFocusEvent::InputType' has a wrong offset!");

// Function OutGameModule.CustomizeMenuAppWidget.ReceivedDecideEvent
// 0x0010 (0x0010 - 0x0000)
struct CustomizeMenuAppWidget_ReceivedDecideEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizeMenuAppWidget_ReceivedDecideEvent) == 0x000008, "Wrong alignment on CustomizeMenuAppWidget_ReceivedDecideEvent");
static_assert(sizeof(CustomizeMenuAppWidget_ReceivedDecideEvent) == 0x000010, "Wrong size on CustomizeMenuAppWidget_ReceivedDecideEvent");
static_assert(offsetof(CustomizeMenuAppWidget_ReceivedDecideEvent, Widget) == 0x000000, "Member 'CustomizeMenuAppWidget_ReceivedDecideEvent::Widget' has a wrong offset!");
static_assert(offsetof(CustomizeMenuAppWidget_ReceivedDecideEvent, InputType) == 0x000008, "Member 'CustomizeMenuAppWidget_ReceivedDecideEvent::InputType' has a wrong offset!");

// Function OutGameModule.CustomizeMenuAppWidget.ReceivedPressEvent
// 0x0010 (0x0010 - 0x0000)
struct CustomizeMenuAppWidget_ReceivedPressEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizeMenuAppWidget_ReceivedPressEvent) == 0x000008, "Wrong alignment on CustomizeMenuAppWidget_ReceivedPressEvent");
static_assert(sizeof(CustomizeMenuAppWidget_ReceivedPressEvent) == 0x000010, "Wrong size on CustomizeMenuAppWidget_ReceivedPressEvent");
static_assert(offsetof(CustomizeMenuAppWidget_ReceivedPressEvent, Widget) == 0x000000, "Member 'CustomizeMenuAppWidget_ReceivedPressEvent::Widget' has a wrong offset!");
static_assert(offsetof(CustomizeMenuAppWidget_ReceivedPressEvent, InputType) == 0x000008, "Member 'CustomizeMenuAppWidget_ReceivedPressEvent::InputType' has a wrong offset!");

// Function OutGameModule.CustomizePanelCustomizeWidget.OnAddedToFocusEvent
// 0x0010 (0x0010 - 0x0000)
struct CustomizePanelCustomizeWidget_OnAddedToFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizePanelCustomizeWidget_OnAddedToFocusEvent) == 0x000008, "Wrong alignment on CustomizePanelCustomizeWidget_OnAddedToFocusEvent");
static_assert(sizeof(CustomizePanelCustomizeWidget_OnAddedToFocusEvent) == 0x000010, "Wrong size on CustomizePanelCustomizeWidget_OnAddedToFocusEvent");
static_assert(offsetof(CustomizePanelCustomizeWidget_OnAddedToFocusEvent, Widget) == 0x000000, "Member 'CustomizePanelCustomizeWidget_OnAddedToFocusEvent::Widget' has a wrong offset!");
static_assert(offsetof(CustomizePanelCustomizeWidget_OnAddedToFocusEvent, InputType) == 0x000008, "Member 'CustomizePanelCustomizeWidget_OnAddedToFocusEvent::InputType' has a wrong offset!");

// Function OutGameModule.CustomizePanelCustomizeWidget.OnRemovedFromFocusEvent
// 0x0010 (0x0010 - 0x0000)
struct CustomizePanelCustomizeWidget_OnRemovedFromFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizePanelCustomizeWidget_OnRemovedFromFocusEvent) == 0x000008, "Wrong alignment on CustomizePanelCustomizeWidget_OnRemovedFromFocusEvent");
static_assert(sizeof(CustomizePanelCustomizeWidget_OnRemovedFromFocusEvent) == 0x000010, "Wrong size on CustomizePanelCustomizeWidget_OnRemovedFromFocusEvent");
static_assert(offsetof(CustomizePanelCustomizeWidget_OnRemovedFromFocusEvent, Widget) == 0x000000, "Member 'CustomizePanelCustomizeWidget_OnRemovedFromFocusEvent::Widget' has a wrong offset!");
static_assert(offsetof(CustomizePanelCustomizeWidget_OnRemovedFromFocusEvent, InputType) == 0x000008, "Member 'CustomizePanelCustomizeWidget_OnRemovedFromFocusEvent::InputType' has a wrong offset!");

// DelegateFunction OutGameModule.SeasonPassTop.BuySpecialLicenseDispather__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SeasonPassTop_BuySpecialLicenseDispather__DelegateSignature final
{
public:
	int32                                         NeedRank;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemSeasonType                               Season;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SeasonPassTop_BuySpecialLicenseDispather__DelegateSignature) == 0x000004, "Wrong alignment on SeasonPassTop_BuySpecialLicenseDispather__DelegateSignature");
static_assert(sizeof(SeasonPassTop_BuySpecialLicenseDispather__DelegateSignature) == 0x000008, "Wrong size on SeasonPassTop_BuySpecialLicenseDispather__DelegateSignature");
static_assert(offsetof(SeasonPassTop_BuySpecialLicenseDispather__DelegateSignature, NeedRank) == 0x000000, "Member 'SeasonPassTop_BuySpecialLicenseDispather__DelegateSignature::NeedRank' has a wrong offset!");
static_assert(offsetof(SeasonPassTop_BuySpecialLicenseDispather__DelegateSignature, Season) == 0x000004, "Member 'SeasonPassTop_BuySpecialLicenseDispather__DelegateSignature::Season' has a wrong offset!");

// Function OutGameModule.SeasonPassTop.CallPurchaseSpecialLicenseEvent
// 0x0008 (0x0008 - 0x0000)
struct SeasonPassTop_CallPurchaseSpecialLicenseEvent final
{
public:
	int32                                         NeedRank;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemSeasonType                               Season;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SeasonPassTop_CallPurchaseSpecialLicenseEvent) == 0x000004, "Wrong alignment on SeasonPassTop_CallPurchaseSpecialLicenseEvent");
static_assert(sizeof(SeasonPassTop_CallPurchaseSpecialLicenseEvent) == 0x000008, "Wrong size on SeasonPassTop_CallPurchaseSpecialLicenseEvent");
static_assert(offsetof(SeasonPassTop_CallPurchaseSpecialLicenseEvent, NeedRank) == 0x000000, "Member 'SeasonPassTop_CallPurchaseSpecialLicenseEvent::NeedRank' has a wrong offset!");
static_assert(offsetof(SeasonPassTop_CallPurchaseSpecialLicenseEvent, Season) == 0x000004, "Member 'SeasonPassTop_CallPurchaseSpecialLicenseEvent::Season' has a wrong offset!");

// Function OutGameModule.SeasonPassTop.CheckOpenPopUpBuyDirections
// 0x0008 (0x0008 - 0x0000)
struct SeasonPassTop_CheckOpenPopUpBuyDirections final
{
public:
	int32                                         NeedRank;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemSeasonType                               Season;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SeasonPassTop_CheckOpenPopUpBuyDirections) == 0x000004, "Wrong alignment on SeasonPassTop_CheckOpenPopUpBuyDirections");
static_assert(sizeof(SeasonPassTop_CheckOpenPopUpBuyDirections) == 0x000008, "Wrong size on SeasonPassTop_CheckOpenPopUpBuyDirections");
static_assert(offsetof(SeasonPassTop_CheckOpenPopUpBuyDirections, NeedRank) == 0x000000, "Member 'SeasonPassTop_CheckOpenPopUpBuyDirections::NeedRank' has a wrong offset!");
static_assert(offsetof(SeasonPassTop_CheckOpenPopUpBuyDirections, Season) == 0x000004, "Member 'SeasonPassTop_CheckOpenPopUpBuyDirections::Season' has a wrong offset!");

// Function OutGameModule.SeasonPassTop.EntryFocus
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassTop_EntryFocus final
{
public:
	bool                                          IsRight;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassTop_EntryFocus) == 0x000001, "Wrong alignment on SeasonPassTop_EntryFocus");
static_assert(sizeof(SeasonPassTop_EntryFocus) == 0x000001, "Wrong size on SeasonPassTop_EntryFocus");
static_assert(offsetof(SeasonPassTop_EntryFocus, IsRight) == 0x000000, "Member 'SeasonPassTop_EntryFocus::IsRight' has a wrong offset!");

// Function OutGameModule.SeasonPassTop.GetNavigationWidget
// 0x0008 (0x0008 - 0x0000)
struct SeasonPassTop_GetNavigationWidget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassTop_GetNavigationWidget) == 0x000008, "Wrong alignment on SeasonPassTop_GetNavigationWidget");
static_assert(sizeof(SeasonPassTop_GetNavigationWidget) == 0x000008, "Wrong size on SeasonPassTop_GetNavigationWidget");
static_assert(offsetof(SeasonPassTop_GetNavigationWidget, ReturnValue) == 0x000000, "Member 'SeasonPassTop_GetNavigationWidget::ReturnValue' has a wrong offset!");

// Function OutGameModule.SeasonPassTop.SetCurrentTabType
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassTop_SetCurrentTabType final
{
public:
	ESeasonType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassTop_SetCurrentTabType) == 0x000001, "Wrong alignment on SeasonPassTop_SetCurrentTabType");
static_assert(sizeof(SeasonPassTop_SetCurrentTabType) == 0x000001, "Wrong size on SeasonPassTop_SetCurrentTabType");
static_assert(offsetof(SeasonPassTop_SetCurrentTabType, Type) == 0x000000, "Member 'SeasonPassTop_SetCurrentTabType::Type' has a wrong offset!");

// Function OutGameModule.SeasonPassTop.SwitchPanel
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassTop_SwitchPanel final
{
public:
	ESeasonType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassTop_SwitchPanel) == 0x000001, "Wrong alignment on SeasonPassTop_SwitchPanel");
static_assert(sizeof(SeasonPassTop_SwitchPanel) == 0x000001, "Wrong size on SeasonPassTop_SwitchPanel");
static_assert(offsetof(SeasonPassTop_SwitchPanel, Type) == 0x000000, "Member 'SeasonPassTop_SwitchPanel::Type' has a wrong offset!");

// Function OutGameModule.SeasonPassTop.GetCurrentTabType
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassTop_GetCurrentTabType final
{
public:
	ESeasonType                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassTop_GetCurrentTabType) == 0x000001, "Wrong alignment on SeasonPassTop_GetCurrentTabType");
static_assert(sizeof(SeasonPassTop_GetCurrentTabType) == 0x000001, "Wrong size on SeasonPassTop_GetCurrentTabType");
static_assert(offsetof(SeasonPassTop_GetCurrentTabType, ReturnValue) == 0x000000, "Member 'SeasonPassTop_GetCurrentTabType::ReturnValue' has a wrong offset!");

// Function OutGameModule.CustomizePanelMyADWidget.OnAddedToFocusEvent
// 0x0010 (0x0010 - 0x0000)
struct CustomizePanelMyADWidget_OnAddedToFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizePanelMyADWidget_OnAddedToFocusEvent) == 0x000008, "Wrong alignment on CustomizePanelMyADWidget_OnAddedToFocusEvent");
static_assert(sizeof(CustomizePanelMyADWidget_OnAddedToFocusEvent) == 0x000010, "Wrong size on CustomizePanelMyADWidget_OnAddedToFocusEvent");
static_assert(offsetof(CustomizePanelMyADWidget_OnAddedToFocusEvent, Widget) == 0x000000, "Member 'CustomizePanelMyADWidget_OnAddedToFocusEvent::Widget' has a wrong offset!");
static_assert(offsetof(CustomizePanelMyADWidget_OnAddedToFocusEvent, InputType) == 0x000008, "Member 'CustomizePanelMyADWidget_OnAddedToFocusEvent::InputType' has a wrong offset!");

// Function OutGameModule.CustomizePanelMyADWidget.OnRemovedFromFocusEvent
// 0x0010 (0x0010 - 0x0000)
struct CustomizePanelMyADWidget_OnRemovedFromFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizePanelMyADWidget_OnRemovedFromFocusEvent) == 0x000008, "Wrong alignment on CustomizePanelMyADWidget_OnRemovedFromFocusEvent");
static_assert(sizeof(CustomizePanelMyADWidget_OnRemovedFromFocusEvent) == 0x000010, "Wrong size on CustomizePanelMyADWidget_OnRemovedFromFocusEvent");
static_assert(offsetof(CustomizePanelMyADWidget_OnRemovedFromFocusEvent, Widget) == 0x000000, "Member 'CustomizePanelMyADWidget_OnRemovedFromFocusEvent::Widget' has a wrong offset!");
static_assert(offsetof(CustomizePanelMyADWidget_OnRemovedFromFocusEvent, InputType) == 0x000008, "Member 'CustomizePanelMyADWidget_OnRemovedFromFocusEvent::InputType' has a wrong offset!");

// Function OutGameModule.CustomizePresetAppWidget.DoCustomCancelButtonNavigation
// 0x0010 (0x0010 - 0x0000)
struct CustomizePresetAppWidget_DoCustomCancelButtonNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizePresetAppWidget_DoCustomCancelButtonNavigation) == 0x000008, "Wrong alignment on CustomizePresetAppWidget_DoCustomCancelButtonNavigation");
static_assert(sizeof(CustomizePresetAppWidget_DoCustomCancelButtonNavigation) == 0x000010, "Wrong size on CustomizePresetAppWidget_DoCustomCancelButtonNavigation");
static_assert(offsetof(CustomizePresetAppWidget_DoCustomCancelButtonNavigation, UiNavigation) == 0x000000, "Member 'CustomizePresetAppWidget_DoCustomCancelButtonNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(CustomizePresetAppWidget_DoCustomCancelButtonNavigation, ReturnValue) == 0x000008, "Member 'CustomizePresetAppWidget_DoCustomCancelButtonNavigation::ReturnValue' has a wrong offset!");

// Function OutGameModule.CustomizePresetAppWidget.DoCustomPresetButtonNavigation
// 0x0010 (0x0010 - 0x0000)
struct CustomizePresetAppWidget_DoCustomPresetButtonNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizePresetAppWidget_DoCustomPresetButtonNavigation) == 0x000008, "Wrong alignment on CustomizePresetAppWidget_DoCustomPresetButtonNavigation");
static_assert(sizeof(CustomizePresetAppWidget_DoCustomPresetButtonNavigation) == 0x000010, "Wrong size on CustomizePresetAppWidget_DoCustomPresetButtonNavigation");
static_assert(offsetof(CustomizePresetAppWidget_DoCustomPresetButtonNavigation, UiNavigation) == 0x000000, "Member 'CustomizePresetAppWidget_DoCustomPresetButtonNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(CustomizePresetAppWidget_DoCustomPresetButtonNavigation, ReturnValue) == 0x000008, "Member 'CustomizePresetAppWidget_DoCustomPresetButtonNavigation::ReturnValue' has a wrong offset!");

// Function OutGameModule.CustomizePresetAppWidget.OnAddedToFocusPresetButton
// 0x0010 (0x0010 - 0x0000)
struct CustomizePresetAppWidget_OnAddedToFocusPresetButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizePresetAppWidget_OnAddedToFocusPresetButton) == 0x000008, "Wrong alignment on CustomizePresetAppWidget_OnAddedToFocusPresetButton");
static_assert(sizeof(CustomizePresetAppWidget_OnAddedToFocusPresetButton) == 0x000010, "Wrong size on CustomizePresetAppWidget_OnAddedToFocusPresetButton");
static_assert(offsetof(CustomizePresetAppWidget_OnAddedToFocusPresetButton, Widget) == 0x000000, "Member 'CustomizePresetAppWidget_OnAddedToFocusPresetButton::Widget' has a wrong offset!");
static_assert(offsetof(CustomizePresetAppWidget_OnAddedToFocusPresetButton, InputType) == 0x000008, "Member 'CustomizePresetAppWidget_OnAddedToFocusPresetButton::InputType' has a wrong offset!");

// Function OutGameModule.CustomizePresetAppWidget.OnCancelGeneralWindow
// 0x0010 (0x0010 - 0x0000)
struct CustomizePresetAppWidget_OnCancelGeneralWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizePresetAppWidget_OnCancelGeneralWindow) == 0x000008, "Wrong alignment on CustomizePresetAppWidget_OnCancelGeneralWindow");
static_assert(sizeof(CustomizePresetAppWidget_OnCancelGeneralWindow) == 0x000010, "Wrong size on CustomizePresetAppWidget_OnCancelGeneralWindow");
static_assert(offsetof(CustomizePresetAppWidget_OnCancelGeneralWindow, Widget) == 0x000000, "Member 'CustomizePresetAppWidget_OnCancelGeneralWindow::Widget' has a wrong offset!");
static_assert(offsetof(CustomizePresetAppWidget_OnCancelGeneralWindow, InputType) == 0x000008, "Member 'CustomizePresetAppWidget_OnCancelGeneralWindow::InputType' has a wrong offset!");

// Function OutGameModule.CustomizePresetAppWidget.OnDecideConfirmWindow
// 0x0010 (0x0010 - 0x0000)
struct CustomizePresetAppWidget_OnDecideConfirmWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLeft;                                            // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizePresetAppWidget_OnDecideConfirmWindow) == 0x000008, "Wrong alignment on CustomizePresetAppWidget_OnDecideConfirmWindow");
static_assert(sizeof(CustomizePresetAppWidget_OnDecideConfirmWindow) == 0x000010, "Wrong size on CustomizePresetAppWidget_OnDecideConfirmWindow");
static_assert(offsetof(CustomizePresetAppWidget_OnDecideConfirmWindow, Widget) == 0x000000, "Member 'CustomizePresetAppWidget_OnDecideConfirmWindow::Widget' has a wrong offset!");
static_assert(offsetof(CustomizePresetAppWidget_OnDecideConfirmWindow, InputType) == 0x000008, "Member 'CustomizePresetAppWidget_OnDecideConfirmWindow::InputType' has a wrong offset!");
static_assert(offsetof(CustomizePresetAppWidget_OnDecideConfirmWindow, IsLeft) == 0x000009, "Member 'CustomizePresetAppWidget_OnDecideConfirmWindow::IsLeft' has a wrong offset!");

// Function OutGameModule.CustomizePresetAppWidget.OnDecideGeneralWindow
// 0x0010 (0x0010 - 0x0000)
struct CustomizePresetAppWidget_OnDecideGeneralWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLeft;                                            // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizePresetAppWidget_OnDecideGeneralWindow) == 0x000008, "Wrong alignment on CustomizePresetAppWidget_OnDecideGeneralWindow");
static_assert(sizeof(CustomizePresetAppWidget_OnDecideGeneralWindow) == 0x000010, "Wrong size on CustomizePresetAppWidget_OnDecideGeneralWindow");
static_assert(offsetof(CustomizePresetAppWidget_OnDecideGeneralWindow, Widget) == 0x000000, "Member 'CustomizePresetAppWidget_OnDecideGeneralWindow::Widget' has a wrong offset!");
static_assert(offsetof(CustomizePresetAppWidget_OnDecideGeneralWindow, InputType) == 0x000008, "Member 'CustomizePresetAppWidget_OnDecideGeneralWindow::InputType' has a wrong offset!");
static_assert(offsetof(CustomizePresetAppWidget_OnDecideGeneralWindow, IsLeft) == 0x000009, "Member 'CustomizePresetAppWidget_OnDecideGeneralWindow::IsLeft' has a wrong offset!");

// Function OutGameModule.CustomizePresetAppWidget.OnDecidePresetButton
// 0x0010 (0x0010 - 0x0000)
struct CustomizePresetAppWidget_OnDecidePresetButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizePresetAppWidget_OnDecidePresetButton) == 0x000008, "Wrong alignment on CustomizePresetAppWidget_OnDecidePresetButton");
static_assert(sizeof(CustomizePresetAppWidget_OnDecidePresetButton) == 0x000010, "Wrong size on CustomizePresetAppWidget_OnDecidePresetButton");
static_assert(offsetof(CustomizePresetAppWidget_OnDecidePresetButton, Widget) == 0x000000, "Member 'CustomizePresetAppWidget_OnDecidePresetButton::Widget' has a wrong offset!");
static_assert(offsetof(CustomizePresetAppWidget_OnDecidePresetButton, InputType) == 0x000008, "Member 'CustomizePresetAppWidget_OnDecidePresetButton::InputType' has a wrong offset!");

// Function OutGameModule.CustomizePresetAppWidget.OnDecideShoppingWindow
// 0x0010 (0x0010 - 0x0000)
struct CustomizePresetAppWidget_OnDecideShoppingWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizePresetAppWidget_OnDecideShoppingWindow) == 0x000008, "Wrong alignment on CustomizePresetAppWidget_OnDecideShoppingWindow");
static_assert(sizeof(CustomizePresetAppWidget_OnDecideShoppingWindow) == 0x000010, "Wrong size on CustomizePresetAppWidget_OnDecideShoppingWindow");
static_assert(offsetof(CustomizePresetAppWidget_OnDecideShoppingWindow, Widget) == 0x000000, "Member 'CustomizePresetAppWidget_OnDecideShoppingWindow::Widget' has a wrong offset!");
static_assert(offsetof(CustomizePresetAppWidget_OnDecideShoppingWindow, InputType) == 0x000008, "Member 'CustomizePresetAppWidget_OnDecideShoppingWindow::InputType' has a wrong offset!");
static_assert(offsetof(CustomizePresetAppWidget_OnDecideShoppingWindow, LeftButton) == 0x000009, "Member 'CustomizePresetAppWidget_OnDecideShoppingWindow::LeftButton' has a wrong offset!");

// Function OutGameModule.CustomizePresetAppWidget.OnNegativePresetButton
// 0x0010 (0x0010 - 0x0000)
struct CustomizePresetAppWidget_OnNegativePresetButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizePresetAppWidget_OnNegativePresetButton) == 0x000008, "Wrong alignment on CustomizePresetAppWidget_OnNegativePresetButton");
static_assert(sizeof(CustomizePresetAppWidget_OnNegativePresetButton) == 0x000010, "Wrong size on CustomizePresetAppWidget_OnNegativePresetButton");
static_assert(offsetof(CustomizePresetAppWidget_OnNegativePresetButton, Widget) == 0x000000, "Member 'CustomizePresetAppWidget_OnNegativePresetButton::Widget' has a wrong offset!");
static_assert(offsetof(CustomizePresetAppWidget_OnNegativePresetButton, InputType) == 0x000008, "Member 'CustomizePresetAppWidget_OnNegativePresetButton::InputType' has a wrong offset!");

// Function OutGameModule.CustomizePresetAppWidget.OnSubMenuDecide
// 0x0004 (0x0004 - 0x0000)
struct CustomizePresetAppWidget_OnSubMenuDecide final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizePresetAppWidget_OnSubMenuDecide) == 0x000004, "Wrong alignment on CustomizePresetAppWidget_OnSubMenuDecide");
static_assert(sizeof(CustomizePresetAppWidget_OnSubMenuDecide) == 0x000004, "Wrong size on CustomizePresetAppWidget_OnSubMenuDecide");
static_assert(offsetof(CustomizePresetAppWidget_OnSubMenuDecide, Index_0) == 0x000000, "Member 'CustomizePresetAppWidget_OnSubMenuDecide::Index_0' has a wrong offset!");

// Function OutGameModule.CustomizePresetAppWidget.OnUpdateComplete
// 0x0004 (0x0004 - 0x0000)
struct CustomizePresetAppWidget_OnUpdateComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizePresetAppWidget_OnUpdateComplete) == 0x000004, "Wrong alignment on CustomizePresetAppWidget_OnUpdateComplete");
static_assert(sizeof(CustomizePresetAppWidget_OnUpdateComplete) == 0x000004, "Wrong size on CustomizePresetAppWidget_OnUpdateComplete");
static_assert(offsetof(CustomizePresetAppWidget_OnUpdateComplete, RequestId) == 0x000000, "Member 'CustomizePresetAppWidget_OnUpdateComplete::RequestId' has a wrong offset!");

// Function OutGameModule.CustomizePresetAppWidget.ReceivedOnLoadCompleteEvent
// 0x0004 (0x0004 - 0x0000)
struct CustomizePresetAppWidget_ReceivedOnLoadCompleteEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizePresetAppWidget_ReceivedOnLoadCompleteEvent) == 0x000004, "Wrong alignment on CustomizePresetAppWidget_ReceivedOnLoadCompleteEvent");
static_assert(sizeof(CustomizePresetAppWidget_ReceivedOnLoadCompleteEvent) == 0x000004, "Wrong size on CustomizePresetAppWidget_ReceivedOnLoadCompleteEvent");
static_assert(offsetof(CustomizePresetAppWidget_ReceivedOnLoadCompleteEvent, RequestId) == 0x000000, "Member 'CustomizePresetAppWidget_ReceivedOnLoadCompleteEvent::RequestId' has a wrong offset!");

// Function OutGameModule.CustomizePresetAppWidget.ReceivedOnUpdateCompleteEvent_InitializedPreset
// 0x0004 (0x0004 - 0x0000)
struct CustomizePresetAppWidget_ReceivedOnUpdateCompleteEvent_InitializedPreset final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizePresetAppWidget_ReceivedOnUpdateCompleteEvent_InitializedPreset) == 0x000004, "Wrong alignment on CustomizePresetAppWidget_ReceivedOnUpdateCompleteEvent_InitializedPreset");
static_assert(sizeof(CustomizePresetAppWidget_ReceivedOnUpdateCompleteEvent_InitializedPreset) == 0x000004, "Wrong size on CustomizePresetAppWidget_ReceivedOnUpdateCompleteEvent_InitializedPreset");
static_assert(offsetof(CustomizePresetAppWidget_ReceivedOnUpdateCompleteEvent_InitializedPreset, RequestId) == 0x000000, "Member 'CustomizePresetAppWidget_ReceivedOnUpdateCompleteEvent_InitializedPreset::RequestId' has a wrong offset!");

// Function OutGameModule.CustomizePresetAppWidget.ReceivedOnUpdateCompleteEvent_SavePreset
// 0x0004 (0x0004 - 0x0000)
struct CustomizePresetAppWidget_ReceivedOnUpdateCompleteEvent_SavePreset final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizePresetAppWidget_ReceivedOnUpdateCompleteEvent_SavePreset) == 0x000004, "Wrong alignment on CustomizePresetAppWidget_ReceivedOnUpdateCompleteEvent_SavePreset");
static_assert(sizeof(CustomizePresetAppWidget_ReceivedOnUpdateCompleteEvent_SavePreset) == 0x000004, "Wrong size on CustomizePresetAppWidget_ReceivedOnUpdateCompleteEvent_SavePreset");
static_assert(offsetof(CustomizePresetAppWidget_ReceivedOnUpdateCompleteEvent_SavePreset, RequestId) == 0x000000, "Member 'CustomizePresetAppWidget_ReceivedOnUpdateCompleteEvent_SavePreset::RequestId' has a wrong offset!");

// Function OutGameModule.CustomizePresetAppWidget.UpdatePresetData_NoEquipAppeal
// 0x0001 (0x0001 - 0x0000)
struct CustomizePresetAppWidget_UpdatePresetData_NoEquipAppeal final
{
public:
	bool                                          NoEquip;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizePresetAppWidget_UpdatePresetData_NoEquipAppeal) == 0x000001, "Wrong alignment on CustomizePresetAppWidget_UpdatePresetData_NoEquipAppeal");
static_assert(sizeof(CustomizePresetAppWidget_UpdatePresetData_NoEquipAppeal) == 0x000001, "Wrong size on CustomizePresetAppWidget_UpdatePresetData_NoEquipAppeal");
static_assert(offsetof(CustomizePresetAppWidget_UpdatePresetData_NoEquipAppeal, NoEquip) == 0x000000, "Member 'CustomizePresetAppWidget_UpdatePresetData_NoEquipAppeal::NoEquip' has a wrong offset!");

// Function OutGameModule.CustomizePresetAppWidget.UpdatePresetData_NoEquipVoice
// 0x0001 (0x0001 - 0x0000)
struct CustomizePresetAppWidget_UpdatePresetData_NoEquipVoice final
{
public:
	bool                                          NoEquip;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizePresetAppWidget_UpdatePresetData_NoEquipVoice) == 0x000001, "Wrong alignment on CustomizePresetAppWidget_UpdatePresetData_NoEquipVoice");
static_assert(sizeof(CustomizePresetAppWidget_UpdatePresetData_NoEquipVoice) == 0x000001, "Wrong size on CustomizePresetAppWidget_UpdatePresetData_NoEquipVoice");
static_assert(offsetof(CustomizePresetAppWidget_UpdatePresetData_NoEquipVoice, NoEquip) == 0x000000, "Member 'CustomizePresetAppWidget_UpdatePresetData_NoEquipVoice::NoEquip' has a wrong offset!");

// Function OutGameModule.ShopItemListWidgetBase.OnChangeSteamOverrayActive
// 0x0001 (0x0001 - 0x0000)
struct ShopItemListWidgetBase_OnChangeSteamOverrayActive final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopItemListWidgetBase_OnChangeSteamOverrayActive) == 0x000001, "Wrong alignment on ShopItemListWidgetBase_OnChangeSteamOverrayActive");
static_assert(sizeof(ShopItemListWidgetBase_OnChangeSteamOverrayActive) == 0x000001, "Wrong size on ShopItemListWidgetBase_OnChangeSteamOverrayActive");
static_assert(offsetof(ShopItemListWidgetBase_OnChangeSteamOverrayActive, bActive) == 0x000000, "Member 'ShopItemListWidgetBase_OnChangeSteamOverrayActive::bActive' has a wrong offset!");

// Function OutGameModule.ShopItemListWidgetBase.OnLoadComplete
// 0x0004 (0x0004 - 0x0000)
struct ShopItemListWidgetBase_OnLoadComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopItemListWidgetBase_OnLoadComplete) == 0x000004, "Wrong alignment on ShopItemListWidgetBase_OnLoadComplete");
static_assert(sizeof(ShopItemListWidgetBase_OnLoadComplete) == 0x000004, "Wrong size on ShopItemListWidgetBase_OnLoadComplete");
static_assert(offsetof(ShopItemListWidgetBase_OnLoadComplete, RequestId) == 0x000000, "Member 'ShopItemListWidgetBase_OnLoadComplete::RequestId' has a wrong offset!");

// Function OutGameModule.ShopItemListWidgetBase.OnMicroTxnAuthorizationResponse
// 0x0018 (0x0018 - 0x0000)
struct ShopItemListWidgetBase_OnMicroTxnAuthorizationResponse final
{
public:
	class FString                                 OrderId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAuthorized;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShopItemListWidgetBase_OnMicroTxnAuthorizationResponse) == 0x000008, "Wrong alignment on ShopItemListWidgetBase_OnMicroTxnAuthorizationResponse");
static_assert(sizeof(ShopItemListWidgetBase_OnMicroTxnAuthorizationResponse) == 0x000018, "Wrong size on ShopItemListWidgetBase_OnMicroTxnAuthorizationResponse");
static_assert(offsetof(ShopItemListWidgetBase_OnMicroTxnAuthorizationResponse, OrderId) == 0x000000, "Member 'ShopItemListWidgetBase_OnMicroTxnAuthorizationResponse::OrderId' has a wrong offset!");
static_assert(offsetof(ShopItemListWidgetBase_OnMicroTxnAuthorizationResponse, bAuthorized) == 0x000010, "Member 'ShopItemListWidgetBase_OnMicroTxnAuthorizationResponse::bAuthorized' has a wrong offset!");

// Function OutGameModule.ShopItemListWidgetBase.OnPlaySampleDelegate
// 0x0010 (0x0010 - 0x0000)
struct ShopItemListWidgetBase_OnPlaySampleDelegate final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShopItemListWidgetBase_OnPlaySampleDelegate) == 0x000008, "Wrong alignment on ShopItemListWidgetBase_OnPlaySampleDelegate");
static_assert(sizeof(ShopItemListWidgetBase_OnPlaySampleDelegate) == 0x000010, "Wrong size on ShopItemListWidgetBase_OnPlaySampleDelegate");
static_assert(offsetof(ShopItemListWidgetBase_OnPlaySampleDelegate, Widget) == 0x000000, "Member 'ShopItemListWidgetBase_OnPlaySampleDelegate::Widget' has a wrong offset!");
static_assert(offsetof(ShopItemListWidgetBase_OnPlaySampleDelegate, InputType) == 0x000008, "Member 'ShopItemListWidgetBase_OnPlaySampleDelegate::InputType' has a wrong offset!");

// Function OutGameModule.ShopItemListWidgetBase.OnPurchaseComplete
// 0x0018 (0x0018 - 0x0000)
struct ShopItemListWidgetBase_OnPurchaseComplete final
{
public:
	class FText                                   ItemName;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopItemListWidgetBase_OnPurchaseComplete) == 0x000008, "Wrong alignment on ShopItemListWidgetBase_OnPurchaseComplete");
static_assert(sizeof(ShopItemListWidgetBase_OnPurchaseComplete) == 0x000018, "Wrong size on ShopItemListWidgetBase_OnPurchaseComplete");
static_assert(offsetof(ShopItemListWidgetBase_OnPurchaseComplete, ItemName) == 0x000000, "Member 'ShopItemListWidgetBase_OnPurchaseComplete::ItemName' has a wrong offset!");

// Function OutGameModule.ShopItemListWidgetBase.OnShowNoneText
// 0x0001 (0x0001 - 0x0000)
struct ShopItemListWidgetBase_OnShowNoneText final
{
public:
	bool                                          bShowNoneText;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopItemListWidgetBase_OnShowNoneText) == 0x000001, "Wrong alignment on ShopItemListWidgetBase_OnShowNoneText");
static_assert(sizeof(ShopItemListWidgetBase_OnShowNoneText) == 0x000001, "Wrong size on ShopItemListWidgetBase_OnShowNoneText");
static_assert(offsetof(ShopItemListWidgetBase_OnShowNoneText, bShowNoneText) == 0x000000, "Member 'ShopItemListWidgetBase_OnShowNoneText::bShowNoneText' has a wrong offset!");

// Function OutGameModule.ShopItemListWidgetBase.OnUpdateComplete
// 0x0004 (0x0004 - 0x0000)
struct ShopItemListWidgetBase_OnUpdateComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopItemListWidgetBase_OnUpdateComplete) == 0x000004, "Wrong alignment on ShopItemListWidgetBase_OnUpdateComplete");
static_assert(sizeof(ShopItemListWidgetBase_OnUpdateComplete) == 0x000004, "Wrong size on ShopItemListWidgetBase_OnUpdateComplete");
static_assert(offsetof(ShopItemListWidgetBase_OnUpdateComplete, RequestId) == 0x000000, "Member 'ShopItemListWidgetBase_OnUpdateComplete::RequestId' has a wrong offset!");

// Function OutGameModule.CustomizeRealityWidget.ChangeItemDisplay
// 0x0001 (0x0001 - 0x0000)
struct CustomizeRealityWidget_ChangeItemDisplay final
{
public:
	bool                                          DisplayFlag;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizeRealityWidget_ChangeItemDisplay) == 0x000001, "Wrong alignment on CustomizeRealityWidget_ChangeItemDisplay");
static_assert(sizeof(CustomizeRealityWidget_ChangeItemDisplay) == 0x000001, "Wrong size on CustomizeRealityWidget_ChangeItemDisplay");
static_assert(offsetof(CustomizeRealityWidget_ChangeItemDisplay, DisplayFlag) == 0x000000, "Member 'CustomizeRealityWidget_ChangeItemDisplay::DisplayFlag' has a wrong offset!");

// Function OutGameModule.CustomizeRealityWidget.OnChangedDetailShowFlag
// 0x0001 (0x0001 - 0x0000)
struct CustomizeRealityWidget_OnChangedDetailShowFlag final
{
public:
	bool                                          DisplayFlag;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizeRealityWidget_OnChangedDetailShowFlag) == 0x000001, "Wrong alignment on CustomizeRealityWidget_OnChangedDetailShowFlag");
static_assert(sizeof(CustomizeRealityWidget_OnChangedDetailShowFlag) == 0x000001, "Wrong size on CustomizeRealityWidget_OnChangedDetailShowFlag");
static_assert(offsetof(CustomizeRealityWidget_OnChangedDetailShowFlag, DisplayFlag) == 0x000000, "Member 'CustomizeRealityWidget_OnChangedDetailShowFlag::DisplayFlag' has a wrong offset!");

// Function OutGameModule.SettingButtonSliderWidget.BP_GetValue
// 0x0004 (0x0004 - 0x0000)
struct SettingButtonSliderWidget_BP_GetValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingButtonSliderWidget_BP_GetValue) == 0x000004, "Wrong alignment on SettingButtonSliderWidget_BP_GetValue");
static_assert(sizeof(SettingButtonSliderWidget_BP_GetValue) == 0x000004, "Wrong size on SettingButtonSliderWidget_BP_GetValue");
static_assert(offsetof(SettingButtonSliderWidget_BP_GetValue, ReturnValue) == 0x000000, "Member 'SettingButtonSliderWidget_BP_GetValue::ReturnValue' has a wrong offset!");

// Function OutGameModule.SettingButtonSliderWidget.BP_InitParam
// 0x0028 (0x0028 - 0x0000)
struct SettingButtonSliderWidget_BP_InitParam final
{
public:
	class FText                                   Categories;                                        // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         Min;                                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Step;                                              // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultValue;                                      // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingButtonSliderWidget_BP_InitParam) == 0x000008, "Wrong alignment on SettingButtonSliderWidget_BP_InitParam");
static_assert(sizeof(SettingButtonSliderWidget_BP_InitParam) == 0x000028, "Wrong size on SettingButtonSliderWidget_BP_InitParam");
static_assert(offsetof(SettingButtonSliderWidget_BP_InitParam, Categories) == 0x000000, "Member 'SettingButtonSliderWidget_BP_InitParam::Categories' has a wrong offset!");
static_assert(offsetof(SettingButtonSliderWidget_BP_InitParam, Min) == 0x000018, "Member 'SettingButtonSliderWidget_BP_InitParam::Min' has a wrong offset!");
static_assert(offsetof(SettingButtonSliderWidget_BP_InitParam, Max) == 0x00001C, "Member 'SettingButtonSliderWidget_BP_InitParam::Max' has a wrong offset!");
static_assert(offsetof(SettingButtonSliderWidget_BP_InitParam, Step) == 0x000020, "Member 'SettingButtonSliderWidget_BP_InitParam::Step' has a wrong offset!");
static_assert(offsetof(SettingButtonSliderWidget_BP_InitParam, DefaultValue) == 0x000024, "Member 'SettingButtonSliderWidget_BP_InitParam::DefaultValue' has a wrong offset!");

// Function OutGameModule.SettingButtonSliderWidget.BP_SetBG
// 0x0001 (0x0001 - 0x0000)
struct SettingButtonSliderWidget_BP_SetBG final
{
public:
	ESettingButtonBGType                          bgType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingButtonSliderWidget_BP_SetBG) == 0x000001, "Wrong alignment on SettingButtonSliderWidget_BP_SetBG");
static_assert(sizeof(SettingButtonSliderWidget_BP_SetBG) == 0x000001, "Wrong size on SettingButtonSliderWidget_BP_SetBG");
static_assert(offsetof(SettingButtonSliderWidget_BP_SetBG, bgType) == 0x000000, "Member 'SettingButtonSliderWidget_BP_SetBG::bgType' has a wrong offset!");

// Function OutGameModule.SettingButtonSliderWidget.DoNavigation
// 0x0010 (0x0010 - 0x0000)
struct SettingButtonSliderWidget_DoNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingButtonSliderWidget_DoNavigation) == 0x000008, "Wrong alignment on SettingButtonSliderWidget_DoNavigation");
static_assert(sizeof(SettingButtonSliderWidget_DoNavigation) == 0x000010, "Wrong size on SettingButtonSliderWidget_DoNavigation");
static_assert(offsetof(SettingButtonSliderWidget_DoNavigation, UiNavigation) == 0x000000, "Member 'SettingButtonSliderWidget_DoNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(SettingButtonSliderWidget_DoNavigation, ReturnValue) == 0x000008, "Member 'SettingButtonSliderWidget_DoNavigation::ReturnValue' has a wrong offset!");

// Function OutGameModule.SettingButtonSliderWidget.OnLeftRightDecide
// 0x0010 (0x0010 - 0x0000)
struct SettingButtonSliderWidget_OnLeftRightDecide final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SettingButtonSliderWidget_OnLeftRightDecide) == 0x000008, "Wrong alignment on SettingButtonSliderWidget_OnLeftRightDecide");
static_assert(sizeof(SettingButtonSliderWidget_OnLeftRightDecide) == 0x000010, "Wrong size on SettingButtonSliderWidget_OnLeftRightDecide");
static_assert(offsetof(SettingButtonSliderWidget_OnLeftRightDecide, Widget) == 0x000000, "Member 'SettingButtonSliderWidget_OnLeftRightDecide::Widget' has a wrong offset!");
static_assert(offsetof(SettingButtonSliderWidget_OnLeftRightDecide, InputType) == 0x000008, "Member 'SettingButtonSliderWidget_OnLeftRightDecide::InputType' has a wrong offset!");

// DelegateFunction OutGameModule.SettingButtonSliderWidget.OnSliderAddedToFocusDelegate__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct SettingButtonSliderWidget_OnSliderAddedToFocusDelegate__DelegateSignature final
{
public:
	EWidgetInputType                              InputType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFocusEvent                            InFocusEvent;                                      // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingButtonSliderWidget_OnSliderAddedToFocusDelegate__DelegateSignature) == 0x000004, "Wrong alignment on SettingButtonSliderWidget_OnSliderAddedToFocusDelegate__DelegateSignature");
static_assert(sizeof(SettingButtonSliderWidget_OnSliderAddedToFocusDelegate__DelegateSignature) == 0x00000C, "Wrong size on SettingButtonSliderWidget_OnSliderAddedToFocusDelegate__DelegateSignature");
static_assert(offsetof(SettingButtonSliderWidget_OnSliderAddedToFocusDelegate__DelegateSignature, InputType) == 0x000000, "Member 'SettingButtonSliderWidget_OnSliderAddedToFocusDelegate__DelegateSignature::InputType' has a wrong offset!");
static_assert(offsetof(SettingButtonSliderWidget_OnSliderAddedToFocusDelegate__DelegateSignature, InFocusEvent) == 0x000004, "Member 'SettingButtonSliderWidget_OnSliderAddedToFocusDelegate__DelegateSignature::InFocusEvent' has a wrong offset!");

// DelegateFunction OutGameModule.SettingButtonSliderWidget.OnSliderValueChangedDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct SettingButtonSliderWidget_OnSliderValueChangedDelegate__DelegateSignature final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingButtonSliderWidget_OnSliderValueChangedDelegate__DelegateSignature) == 0x000004, "Wrong alignment on SettingButtonSliderWidget_OnSliderValueChangedDelegate__DelegateSignature");
static_assert(sizeof(SettingButtonSliderWidget_OnSliderValueChangedDelegate__DelegateSignature) == 0x000004, "Wrong size on SettingButtonSliderWidget_OnSliderValueChangedDelegate__DelegateSignature");
static_assert(offsetof(SettingButtonSliderWidget_OnSliderValueChangedDelegate__DelegateSignature, Value) == 0x000000, "Member 'SettingButtonSliderWidget_OnSliderValueChangedDelegate__DelegateSignature::Value' has a wrong offset!");

// Function OutGameModule.SettingButtonSliderWidget.OnValueChanged
// 0x0004 (0x0004 - 0x0000)
struct SettingButtonSliderWidget_OnValueChanged final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingButtonSliderWidget_OnValueChanged) == 0x000004, "Wrong alignment on SettingButtonSliderWidget_OnValueChanged");
static_assert(sizeof(SettingButtonSliderWidget_OnValueChanged) == 0x000004, "Wrong size on SettingButtonSliderWidget_OnValueChanged");
static_assert(offsetof(SettingButtonSliderWidget_OnValueChanged, Value) == 0x000000, "Member 'SettingButtonSliderWidget_OnValueChanged::Value' has a wrong offset!");

// Function OutGameModule.SettingButtonSliderWidget.SetCategoriesText
// 0x0018 (0x0018 - 0x0000)
struct SettingButtonSliderWidget_SetCategoriesText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingButtonSliderWidget_SetCategoriesText) == 0x000008, "Wrong alignment on SettingButtonSliderWidget_SetCategoriesText");
static_assert(sizeof(SettingButtonSliderWidget_SetCategoriesText) == 0x000018, "Wrong size on SettingButtonSliderWidget_SetCategoriesText");
static_assert(offsetof(SettingButtonSliderWidget_SetCategoriesText, Text) == 0x000000, "Member 'SettingButtonSliderWidget_SetCategoriesText::Text' has a wrong offset!");

// Function OutGameModule.CustomizeSelectButtonHasWidget.GetIsDisplayControllerKey
// 0x0001 (0x0001 - 0x0000)
struct CustomizeSelectButtonHasWidget_GetIsDisplayControllerKey final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizeSelectButtonHasWidget_GetIsDisplayControllerKey) == 0x000001, "Wrong alignment on CustomizeSelectButtonHasWidget_GetIsDisplayControllerKey");
static_assert(sizeof(CustomizeSelectButtonHasWidget_GetIsDisplayControllerKey) == 0x000001, "Wrong size on CustomizeSelectButtonHasWidget_GetIsDisplayControllerKey");
static_assert(offsetof(CustomizeSelectButtonHasWidget_GetIsDisplayControllerKey, ReturnValue) == 0x000000, "Member 'CustomizeSelectButtonHasWidget_GetIsDisplayControllerKey::ReturnValue' has a wrong offset!");

// Function OutGameModule.CustomizePreviewButtonWidget.OnPressButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct CustomizePreviewButtonWidget_OnPressButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizePreviewButtonWidget_OnPressButtonEvent) == 0x000008, "Wrong alignment on CustomizePreviewButtonWidget_OnPressButtonEvent");
static_assert(sizeof(CustomizePreviewButtonWidget_OnPressButtonEvent) == 0x000010, "Wrong size on CustomizePreviewButtonWidget_OnPressButtonEvent");
static_assert(offsetof(CustomizePreviewButtonWidget_OnPressButtonEvent, Widget) == 0x000000, "Member 'CustomizePreviewButtonWidget_OnPressButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(CustomizePreviewButtonWidget_OnPressButtonEvent, InputType) == 0x000008, "Member 'CustomizePreviewButtonWidget_OnPressButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.SeasonPassStockList.StockEmpty
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassStockList_StockEmpty final
{
public:
	bool                                          IsEmpty;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassStockList_StockEmpty) == 0x000001, "Wrong alignment on SeasonPassStockList_StockEmpty");
static_assert(sizeof(SeasonPassStockList_StockEmpty) == 0x000001, "Wrong size on SeasonPassStockList_StockEmpty");
static_assert(offsetof(SeasonPassStockList_StockEmpty, IsEmpty) == 0x000000, "Member 'SeasonPassStockList_StockEmpty::IsEmpty' has a wrong offset!");

// Function OutGameModule.CustomizeSelectButtonWidget.ActivateWheel
// 0x0002 (0x0002 - 0x0000)
struct CustomizeSelectButtonWidget_ActivateWheel final
{
public:
	bool                                          IsActivate;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSelected;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizeSelectButtonWidget_ActivateWheel) == 0x000001, "Wrong alignment on CustomizeSelectButtonWidget_ActivateWheel");
static_assert(sizeof(CustomizeSelectButtonWidget_ActivateWheel) == 0x000002, "Wrong size on CustomizeSelectButtonWidget_ActivateWheel");
static_assert(offsetof(CustomizeSelectButtonWidget_ActivateWheel, IsActivate) == 0x000000, "Member 'CustomizeSelectButtonWidget_ActivateWheel::IsActivate' has a wrong offset!");
static_assert(offsetof(CustomizeSelectButtonWidget_ActivateWheel, IsSelected) == 0x000001, "Member 'CustomizeSelectButtonWidget_ActivateWheel::IsSelected' has a wrong offset!");

// Function OutGameModule.CustomizeSelectButtonWidget.UpdateSoundIcon
// 0x0001 (0x0001 - 0x0000)
struct CustomizeSelectButtonWidget_UpdateSoundIcon final
{
public:
	bool                                          IsSelected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizeSelectButtonWidget_UpdateSoundIcon) == 0x000001, "Wrong alignment on CustomizeSelectButtonWidget_UpdateSoundIcon");
static_assert(sizeof(CustomizeSelectButtonWidget_UpdateSoundIcon) == 0x000001, "Wrong size on CustomizeSelectButtonWidget_UpdateSoundIcon");
static_assert(offsetof(CustomizeSelectButtonWidget_UpdateSoundIcon, IsSelected) == 0x000000, "Member 'CustomizeSelectButtonWidget_UpdateSoundIcon::IsSelected' has a wrong offset!");

// Function OutGameModule.CustomizeVoiceAppWidget.OnAddedToFocusWheelCancelButton
// 0x0010 (0x0010 - 0x0000)
struct CustomizeVoiceAppWidget_OnAddedToFocusWheelCancelButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizeVoiceAppWidget_OnAddedToFocusWheelCancelButton) == 0x000008, "Wrong alignment on CustomizeVoiceAppWidget_OnAddedToFocusWheelCancelButton");
static_assert(sizeof(CustomizeVoiceAppWidget_OnAddedToFocusWheelCancelButton) == 0x000010, "Wrong size on CustomizeVoiceAppWidget_OnAddedToFocusWheelCancelButton");
static_assert(offsetof(CustomizeVoiceAppWidget_OnAddedToFocusWheelCancelButton, Widget) == 0x000000, "Member 'CustomizeVoiceAppWidget_OnAddedToFocusWheelCancelButton::Widget' has a wrong offset!");
static_assert(offsetof(CustomizeVoiceAppWidget_OnAddedToFocusWheelCancelButton, InputType) == 0x000008, "Member 'CustomizeVoiceAppWidget_OnAddedToFocusWheelCancelButton::InputType' has a wrong offset!");

// Function OutGameModule.CustomizeVoiceAppWidget.OnDecideEquipButton
// 0x0010 (0x0010 - 0x0000)
struct CustomizeVoiceAppWidget_OnDecideEquipButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizeVoiceAppWidget_OnDecideEquipButton) == 0x000008, "Wrong alignment on CustomizeVoiceAppWidget_OnDecideEquipButton");
static_assert(sizeof(CustomizeVoiceAppWidget_OnDecideEquipButton) == 0x000010, "Wrong size on CustomizeVoiceAppWidget_OnDecideEquipButton");
static_assert(offsetof(CustomizeVoiceAppWidget_OnDecideEquipButton, Widget) == 0x000000, "Member 'CustomizeVoiceAppWidget_OnDecideEquipButton::Widget' has a wrong offset!");
static_assert(offsetof(CustomizeVoiceAppWidget_OnDecideEquipButton, InputType) == 0x000008, "Member 'CustomizeVoiceAppWidget_OnDecideEquipButton::InputType' has a wrong offset!");

// Function OutGameModule.CustomizeVoiceAppWidget.OnDecideWheelCancelButton
// 0x0010 (0x0010 - 0x0000)
struct CustomizeVoiceAppWidget_OnDecideWheelCancelButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizeVoiceAppWidget_OnDecideWheelCancelButton) == 0x000008, "Wrong alignment on CustomizeVoiceAppWidget_OnDecideWheelCancelButton");
static_assert(sizeof(CustomizeVoiceAppWidget_OnDecideWheelCancelButton) == 0x000010, "Wrong size on CustomizeVoiceAppWidget_OnDecideWheelCancelButton");
static_assert(offsetof(CustomizeVoiceAppWidget_OnDecideWheelCancelButton, Widget) == 0x000000, "Member 'CustomizeVoiceAppWidget_OnDecideWheelCancelButton::Widget' has a wrong offset!");
static_assert(offsetof(CustomizeVoiceAppWidget_OnDecideWheelCancelButton, InputType) == 0x000008, "Member 'CustomizeVoiceAppWidget_OnDecideWheelCancelButton::InputType' has a wrong offset!");

// Function OutGameModule.CustomizeVoiceAppWidget.OnRemovedFromFocusWheelCancelButton
// 0x0010 (0x0010 - 0x0000)
struct CustomizeVoiceAppWidget_OnRemovedFromFocusWheelCancelButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizeVoiceAppWidget_OnRemovedFromFocusWheelCancelButton) == 0x000008, "Wrong alignment on CustomizeVoiceAppWidget_OnRemovedFromFocusWheelCancelButton");
static_assert(sizeof(CustomizeVoiceAppWidget_OnRemovedFromFocusWheelCancelButton) == 0x000010, "Wrong size on CustomizeVoiceAppWidget_OnRemovedFromFocusWheelCancelButton");
static_assert(offsetof(CustomizeVoiceAppWidget_OnRemovedFromFocusWheelCancelButton, Widget) == 0x000000, "Member 'CustomizeVoiceAppWidget_OnRemovedFromFocusWheelCancelButton::Widget' has a wrong offset!");
static_assert(offsetof(CustomizeVoiceAppWidget_OnRemovedFromFocusWheelCancelButton, InputType) == 0x000008, "Member 'CustomizeVoiceAppWidget_OnRemovedFromFocusWheelCancelButton::InputType' has a wrong offset!");

// Function OutGameModule.CustomizeVoiceAppWidget.RequesetPlayVoice
// 0x0010 (0x0010 - 0x0000)
struct CustomizeVoiceAppWidget_RequesetPlayVoice final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizeVoiceAppWidget_RequesetPlayVoice) == 0x000008, "Wrong alignment on CustomizeVoiceAppWidget_RequesetPlayVoice");
static_assert(sizeof(CustomizeVoiceAppWidget_RequesetPlayVoice) == 0x000010, "Wrong size on CustomizeVoiceAppWidget_RequesetPlayVoice");
static_assert(offsetof(CustomizeVoiceAppWidget_RequesetPlayVoice, Widget) == 0x000000, "Member 'CustomizeVoiceAppWidget_RequesetPlayVoice::Widget' has a wrong offset!");
static_assert(offsetof(CustomizeVoiceAppWidget_RequesetPlayVoice, InputType) == 0x000008, "Member 'CustomizeVoiceAppWidget_RequesetPlayVoice::InputType' has a wrong offset!");

// Function OutGameModule.CustomMatchGameModeList.DoCustomWidgetNavigation
// 0x0001 (0x0001 - 0x0000)
struct CustomMatchGameModeList_DoCustomWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMatchGameModeList_DoCustomWidgetNavigation) == 0x000001, "Wrong alignment on CustomMatchGameModeList_DoCustomWidgetNavigation");
static_assert(sizeof(CustomMatchGameModeList_DoCustomWidgetNavigation) == 0x000001, "Wrong size on CustomMatchGameModeList_DoCustomWidgetNavigation");
static_assert(offsetof(CustomMatchGameModeList_DoCustomWidgetNavigation, UiNavigation) == 0x000000, "Member 'CustomMatchGameModeList_DoCustomWidgetNavigation::UiNavigation' has a wrong offset!");

// Function OutGameModule.CustomMatchGameModeList.OnAddedToFocusEvent
// 0x0010 (0x0010 - 0x0000)
struct CustomMatchGameModeList_OnAddedToFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomMatchGameModeList_OnAddedToFocusEvent) == 0x000008, "Wrong alignment on CustomMatchGameModeList_OnAddedToFocusEvent");
static_assert(sizeof(CustomMatchGameModeList_OnAddedToFocusEvent) == 0x000010, "Wrong size on CustomMatchGameModeList_OnAddedToFocusEvent");
static_assert(offsetof(CustomMatchGameModeList_OnAddedToFocusEvent, Widget) == 0x000000, "Member 'CustomMatchGameModeList_OnAddedToFocusEvent::Widget' has a wrong offset!");
static_assert(offsetof(CustomMatchGameModeList_OnAddedToFocusEvent, InputType) == 0x000008, "Member 'CustomMatchGameModeList_OnAddedToFocusEvent::InputType' has a wrong offset!");

// Function OutGameModule.CustomMatchGameModeList.OnDecideButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct CustomMatchGameModeList_OnDecideButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomMatchGameModeList_OnDecideButtonEvent) == 0x000008, "Wrong alignment on CustomMatchGameModeList_OnDecideButtonEvent");
static_assert(sizeof(CustomMatchGameModeList_OnDecideButtonEvent) == 0x000010, "Wrong size on CustomMatchGameModeList_OnDecideButtonEvent");
static_assert(offsetof(CustomMatchGameModeList_OnDecideButtonEvent, Widget) == 0x000000, "Member 'CustomMatchGameModeList_OnDecideButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(CustomMatchGameModeList_OnDecideButtonEvent, InputType) == 0x000008, "Member 'CustomMatchGameModeList_OnDecideButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.CustomMatchGameModeSelectTopWidget.DoCustomWidgetNavigation
// 0x0001 (0x0001 - 0x0000)
struct CustomMatchGameModeSelectTopWidget_DoCustomWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMatchGameModeSelectTopWidget_DoCustomWidgetNavigation) == 0x000001, "Wrong alignment on CustomMatchGameModeSelectTopWidget_DoCustomWidgetNavigation");
static_assert(sizeof(CustomMatchGameModeSelectTopWidget_DoCustomWidgetNavigation) == 0x000001, "Wrong size on CustomMatchGameModeSelectTopWidget_DoCustomWidgetNavigation");
static_assert(offsetof(CustomMatchGameModeSelectTopWidget_DoCustomWidgetNavigation, UiNavigation) == 0x000000, "Member 'CustomMatchGameModeSelectTopWidget_DoCustomWidgetNavigation::UiNavigation' has a wrong offset!");

// Function OutGameModule.RecommendAppWidget.OnDecideConfirmWindow
// 0x0010 (0x0010 - 0x0000)
struct RecommendAppWidget_OnDecideConfirmWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLeft;                                            // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RecommendAppWidget_OnDecideConfirmWindow) == 0x000008, "Wrong alignment on RecommendAppWidget_OnDecideConfirmWindow");
static_assert(sizeof(RecommendAppWidget_OnDecideConfirmWindow) == 0x000010, "Wrong size on RecommendAppWidget_OnDecideConfirmWindow");
static_assert(offsetof(RecommendAppWidget_OnDecideConfirmWindow, Widget) == 0x000000, "Member 'RecommendAppWidget_OnDecideConfirmWindow::Widget' has a wrong offset!");
static_assert(offsetof(RecommendAppWidget_OnDecideConfirmWindow, InputType) == 0x000008, "Member 'RecommendAppWidget_OnDecideConfirmWindow::InputType' has a wrong offset!");
static_assert(offsetof(RecommendAppWidget_OnDecideConfirmWindow, IsLeft) == 0x000009, "Member 'RecommendAppWidget_OnDecideConfirmWindow::IsLeft' has a wrong offset!");

// Function OutGameModule.RecommendAppWidget.OnDecideFriendRequestInfoButton
// 0x0010 (0x0010 - 0x0000)
struct RecommendAppWidget_OnDecideFriendRequestInfoButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RecommendAppWidget_OnDecideFriendRequestInfoButton) == 0x000008, "Wrong alignment on RecommendAppWidget_OnDecideFriendRequestInfoButton");
static_assert(sizeof(RecommendAppWidget_OnDecideFriendRequestInfoButton) == 0x000010, "Wrong size on RecommendAppWidget_OnDecideFriendRequestInfoButton");
static_assert(offsetof(RecommendAppWidget_OnDecideFriendRequestInfoButton, Widget) == 0x000000, "Member 'RecommendAppWidget_OnDecideFriendRequestInfoButton::Widget' has a wrong offset!");
static_assert(offsetof(RecommendAppWidget_OnDecideFriendRequestInfoButton, InputType) == 0x000008, "Member 'RecommendAppWidget_OnDecideFriendRequestInfoButton::InputType' has a wrong offset!");

// Function OutGameModule.RecommendAppWidget.OnDecideGuildInfoButton
// 0x0010 (0x0010 - 0x0000)
struct RecommendAppWidget_OnDecideGuildInfoButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RecommendAppWidget_OnDecideGuildInfoButton) == 0x000008, "Wrong alignment on RecommendAppWidget_OnDecideGuildInfoButton");
static_assert(sizeof(RecommendAppWidget_OnDecideGuildInfoButton) == 0x000010, "Wrong size on RecommendAppWidget_OnDecideGuildInfoButton");
static_assert(offsetof(RecommendAppWidget_OnDecideGuildInfoButton, Widget) == 0x000000, "Member 'RecommendAppWidget_OnDecideGuildInfoButton::Widget' has a wrong offset!");
static_assert(offsetof(RecommendAppWidget_OnDecideGuildInfoButton, InputType) == 0x000008, "Member 'RecommendAppWidget_OnDecideGuildInfoButton::InputType' has a wrong offset!");

// Function OutGameModule.RecommendAppWidget.OpenFriendRequestInfo
// 0x0010 (0x0010 - 0x0000)
struct RecommendAppWidget_OpenFriendRequestInfo final
{
public:
	class FString                                 SelectedPlayerId;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RecommendAppWidget_OpenFriendRequestInfo) == 0x000008, "Wrong alignment on RecommendAppWidget_OpenFriendRequestInfo");
static_assert(sizeof(RecommendAppWidget_OpenFriendRequestInfo) == 0x000010, "Wrong size on RecommendAppWidget_OpenFriendRequestInfo");
static_assert(offsetof(RecommendAppWidget_OpenFriendRequestInfo, SelectedPlayerId) == 0x000000, "Member 'RecommendAppWidget_OpenFriendRequestInfo::SelectedPlayerId' has a wrong offset!");

// Function OutGameModule.RecommendAppWidget.OpenFriendRequestSubLevel
// 0x0098 (0x0098 - 0x0000)
struct RecommendAppWidget_OpenFriendRequestSubLevel final
{
public:
	struct FDbRecommendNoticeParam                RecomendNoticeParam;                               // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RecommendAppWidget_OpenFriendRequestSubLevel) == 0x000008, "Wrong alignment on RecommendAppWidget_OpenFriendRequestSubLevel");
static_assert(sizeof(RecommendAppWidget_OpenFriendRequestSubLevel) == 0x000098, "Wrong size on RecommendAppWidget_OpenFriendRequestSubLevel");
static_assert(offsetof(RecommendAppWidget_OpenFriendRequestSubLevel, RecomendNoticeParam) == 0x000000, "Member 'RecommendAppWidget_OpenFriendRequestSubLevel::RecomendNoticeParam' has a wrong offset!");

// Function OutGameModule.RecommendAppWidget.OpenJoinGuildInfo
// 0x0010 (0x0010 - 0x0000)
struct RecommendAppWidget_OpenJoinGuildInfo final
{
public:
	class FString                                 SelectedGuildId;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RecommendAppWidget_OpenJoinGuildInfo) == 0x000008, "Wrong alignment on RecommendAppWidget_OpenJoinGuildInfo");
static_assert(sizeof(RecommendAppWidget_OpenJoinGuildInfo) == 0x000010, "Wrong size on RecommendAppWidget_OpenJoinGuildInfo");
static_assert(offsetof(RecommendAppWidget_OpenJoinGuildInfo, SelectedGuildId) == 0x000000, "Member 'RecommendAppWidget_OpenJoinGuildInfo::SelectedGuildId' has a wrong offset!");

// Function OutGameModule.RecommendAppWidget.OpenRequestInviteGuildSubLevel
// 0x0010 (0x0010 - 0x0000)
struct RecommendAppWidget_OpenRequestInviteGuildSubLevel final
{
public:
	class FString                                 SelectedPlayerId;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RecommendAppWidget_OpenRequestInviteGuildSubLevel) == 0x000008, "Wrong alignment on RecommendAppWidget_OpenRequestInviteGuildSubLevel");
static_assert(sizeof(RecommendAppWidget_OpenRequestInviteGuildSubLevel) == 0x000010, "Wrong size on RecommendAppWidget_OpenRequestInviteGuildSubLevel");
static_assert(offsetof(RecommendAppWidget_OpenRequestInviteGuildSubLevel, SelectedPlayerId) == 0x000000, "Member 'RecommendAppWidget_OpenRequestInviteGuildSubLevel::SelectedPlayerId' has a wrong offset!");

// Function OutGameModule.RecommendAppWidget.ReceivedOnLoadCompleteEvent
// 0x0004 (0x0004 - 0x0000)
struct RecommendAppWidget_ReceivedOnLoadCompleteEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RecommendAppWidget_ReceivedOnLoadCompleteEvent) == 0x000004, "Wrong alignment on RecommendAppWidget_ReceivedOnLoadCompleteEvent");
static_assert(sizeof(RecommendAppWidget_ReceivedOnLoadCompleteEvent) == 0x000004, "Wrong size on RecommendAppWidget_ReceivedOnLoadCompleteEvent");
static_assert(offsetof(RecommendAppWidget_ReceivedOnLoadCompleteEvent, RequestId) == 0x000000, "Member 'RecommendAppWidget_ReceivedOnLoadCompleteEvent::RequestId' has a wrong offset!");

// Function OutGameModule.RecommendAppWidget.ReceivedOnUpdateCompleteEvent
// 0x0004 (0x0004 - 0x0000)
struct RecommendAppWidget_ReceivedOnUpdateCompleteEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RecommendAppWidget_ReceivedOnUpdateCompleteEvent) == 0x000004, "Wrong alignment on RecommendAppWidget_ReceivedOnUpdateCompleteEvent");
static_assert(sizeof(RecommendAppWidget_ReceivedOnUpdateCompleteEvent) == 0x000004, "Wrong size on RecommendAppWidget_ReceivedOnUpdateCompleteEvent");
static_assert(offsetof(RecommendAppWidget_ReceivedOnUpdateCompleteEvent, RequestId) == 0x000000, "Member 'RecommendAppWidget_ReceivedOnUpdateCompleteEvent::RequestId' has a wrong offset!");

// Function OutGameModule.RecommendAppWidget.RequestJoinGuild
// 0x0010 (0x0010 - 0x0000)
struct RecommendAppWidget_RequestJoinGuild final
{
public:
	class FString                                 SelectedGuildId;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RecommendAppWidget_RequestJoinGuild) == 0x000008, "Wrong alignment on RecommendAppWidget_RequestJoinGuild");
static_assert(sizeof(RecommendAppWidget_RequestJoinGuild) == 0x000010, "Wrong size on RecommendAppWidget_RequestJoinGuild");
static_assert(offsetof(RecommendAppWidget_RequestJoinGuild, SelectedGuildId) == 0x000000, "Member 'RecommendAppWidget_RequestJoinGuild::SelectedGuildId' has a wrong offset!");

// Function OutGameModule.SettingWidget.BP_IsSavedActiveTab
// 0x0001 (0x0001 - 0x0000)
struct SettingWidget_BP_IsSavedActiveTab final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingWidget_BP_IsSavedActiveTab) == 0x000001, "Wrong alignment on SettingWidget_BP_IsSavedActiveTab");
static_assert(sizeof(SettingWidget_BP_IsSavedActiveTab) == 0x000001, "Wrong size on SettingWidget_BP_IsSavedActiveTab");
static_assert(offsetof(SettingWidget_BP_IsSavedActiveTab, ReturnValue) == 0x000000, "Member 'SettingWidget_BP_IsSavedActiveTab::ReturnValue' has a wrong offset!");

// Function OutGameModule.SettingWidget.BP_OpenParentalPopup
// 0x0001 (0x0001 - 0x0000)
struct SettingWidget_BP_OpenParentalPopup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingWidget_BP_OpenParentalPopup) == 0x000001, "Wrong alignment on SettingWidget_BP_OpenParentalPopup");
static_assert(sizeof(SettingWidget_BP_OpenParentalPopup) == 0x000001, "Wrong size on SettingWidget_BP_OpenParentalPopup");
static_assert(offsetof(SettingWidget_BP_OpenParentalPopup, ReturnValue) == 0x000000, "Member 'SettingWidget_BP_OpenParentalPopup::ReturnValue' has a wrong offset!");

// Function OutGameModule.SettingWidget.BP_SaveAndApplyActiveTab
// 0x0001 (0x0001 - 0x0000)
struct SettingWidget_BP_SaveAndApplyActiveTab final
{
public:
	ESettingSaveStatusType                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingWidget_BP_SaveAndApplyActiveTab) == 0x000001, "Wrong alignment on SettingWidget_BP_SaveAndApplyActiveTab");
static_assert(sizeof(SettingWidget_BP_SaveAndApplyActiveTab) == 0x000001, "Wrong size on SettingWidget_BP_SaveAndApplyActiveTab");
static_assert(offsetof(SettingWidget_BP_SaveAndApplyActiveTab, ReturnValue) == 0x000000, "Member 'SettingWidget_BP_SaveAndApplyActiveTab::ReturnValue' has a wrong offset!");

// Function OutGameModule.SettingWidget.DoMenuNavigation
// 0x0010 (0x0010 - 0x0000)
struct SettingWidget_DoMenuNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingWidget_DoMenuNavigation) == 0x000008, "Wrong alignment on SettingWidget_DoMenuNavigation");
static_assert(sizeof(SettingWidget_DoMenuNavigation) == 0x000010, "Wrong size on SettingWidget_DoMenuNavigation");
static_assert(offsetof(SettingWidget_DoMenuNavigation, UiNavigation) == 0x000000, "Member 'SettingWidget_DoMenuNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(SettingWidget_DoMenuNavigation, ReturnValue) == 0x000008, "Member 'SettingWidget_DoMenuNavigation::ReturnValue' has a wrong offset!");

// Function OutGameModule.SettingWidget.OnResetCheckButtonDecideDelegate
// 0x0010 (0x0010 - 0x0000)
struct SettingWidget_OnResetCheckButtonDecideDelegate final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SettingWidget_OnResetCheckButtonDecideDelegate) == 0x000008, "Wrong alignment on SettingWidget_OnResetCheckButtonDecideDelegate");
static_assert(sizeof(SettingWidget_OnResetCheckButtonDecideDelegate) == 0x000010, "Wrong size on SettingWidget_OnResetCheckButtonDecideDelegate");
static_assert(offsetof(SettingWidget_OnResetCheckButtonDecideDelegate, Widget) == 0x000000, "Member 'SettingWidget_OnResetCheckButtonDecideDelegate::Widget' has a wrong offset!");
static_assert(offsetof(SettingWidget_OnResetCheckButtonDecideDelegate, InputType) == 0x000008, "Member 'SettingWidget_OnResetCheckButtonDecideDelegate::InputType' has a wrong offset!");

// Function OutGameModule.SettingWidget.OnSaveButtonDecideDelegate
// 0x0010 (0x0010 - 0x0000)
struct SettingWidget_OnSaveButtonDecideDelegate final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SettingWidget_OnSaveButtonDecideDelegate) == 0x000008, "Wrong alignment on SettingWidget_OnSaveButtonDecideDelegate");
static_assert(sizeof(SettingWidget_OnSaveButtonDecideDelegate) == 0x000010, "Wrong size on SettingWidget_OnSaveButtonDecideDelegate");
static_assert(offsetof(SettingWidget_OnSaveButtonDecideDelegate, Widget) == 0x000000, "Member 'SettingWidget_OnSaveButtonDecideDelegate::Widget' has a wrong offset!");
static_assert(offsetof(SettingWidget_OnSaveButtonDecideDelegate, InputType) == 0x000008, "Member 'SettingWidget_OnSaveButtonDecideDelegate::InputType' has a wrong offset!");

// Function OutGameModule.SettingWidget.OnSwichTabWidget
// 0x0004 (0x0004 - 0x0000)
struct SettingWidget_OnSwichTabWidget final
{
public:
	int32                                         NewSelectTab;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingWidget_OnSwichTabWidget) == 0x000004, "Wrong alignment on SettingWidget_OnSwichTabWidget");
static_assert(sizeof(SettingWidget_OnSwichTabWidget) == 0x000004, "Wrong size on SettingWidget_OnSwichTabWidget");
static_assert(offsetof(SettingWidget_OnSwichTabWidget, NewSelectTab) == 0x000000, "Member 'SettingWidget_OnSwichTabWidget::NewSelectTab' has a wrong offset!");

// Function OutGameModule.SettingWidget.TrySwitchTab
// 0x0004 (0x0004 - 0x0000)
struct SettingWidget_TrySwitchTab final
{
public:
	int32                                         NewSelectTab;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingWidget_TrySwitchTab) == 0x000004, "Wrong alignment on SettingWidget_TrySwitchTab");
static_assert(sizeof(SettingWidget_TrySwitchTab) == 0x000004, "Wrong size on SettingWidget_TrySwitchTab");
static_assert(offsetof(SettingWidget_TrySwitchTab, NewSelectTab) == 0x000000, "Member 'SettingWidget_TrySwitchTab::NewSelectTab' has a wrong offset!");

// Function OutGameModule.CustomMatchGameRuleList.DoCustomWidgetNavigation
// 0x0001 (0x0001 - 0x0000)
struct CustomMatchGameRuleList_DoCustomWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMatchGameRuleList_DoCustomWidgetNavigation) == 0x000001, "Wrong alignment on CustomMatchGameRuleList_DoCustomWidgetNavigation");
static_assert(sizeof(CustomMatchGameRuleList_DoCustomWidgetNavigation) == 0x000001, "Wrong size on CustomMatchGameRuleList_DoCustomWidgetNavigation");
static_assert(offsetof(CustomMatchGameRuleList_DoCustomWidgetNavigation, UiNavigation) == 0x000000, "Member 'CustomMatchGameRuleList_DoCustomWidgetNavigation::UiNavigation' has a wrong offset!");

// Function OutGameModule.CustomMatchGameRuleList.OnAddedToFocusEvent
// 0x0010 (0x0010 - 0x0000)
struct CustomMatchGameRuleList_OnAddedToFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomMatchGameRuleList_OnAddedToFocusEvent) == 0x000008, "Wrong alignment on CustomMatchGameRuleList_OnAddedToFocusEvent");
static_assert(sizeof(CustomMatchGameRuleList_OnAddedToFocusEvent) == 0x000010, "Wrong size on CustomMatchGameRuleList_OnAddedToFocusEvent");
static_assert(offsetof(CustomMatchGameRuleList_OnAddedToFocusEvent, Widget) == 0x000000, "Member 'CustomMatchGameRuleList_OnAddedToFocusEvent::Widget' has a wrong offset!");
static_assert(offsetof(CustomMatchGameRuleList_OnAddedToFocusEvent, InputType) == 0x000008, "Member 'CustomMatchGameRuleList_OnAddedToFocusEvent::InputType' has a wrong offset!");

// Function OutGameModule.CustomMatchGameRuleList.OnDecideButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct CustomMatchGameRuleList_OnDecideButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomMatchGameRuleList_OnDecideButtonEvent) == 0x000008, "Wrong alignment on CustomMatchGameRuleList_OnDecideButtonEvent");
static_assert(sizeof(CustomMatchGameRuleList_OnDecideButtonEvent) == 0x000010, "Wrong size on CustomMatchGameRuleList_OnDecideButtonEvent");
static_assert(offsetof(CustomMatchGameRuleList_OnDecideButtonEvent, Widget) == 0x000000, "Member 'CustomMatchGameRuleList_OnDecideButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(CustomMatchGameRuleList_OnDecideButtonEvent, InputType) == 0x000008, "Member 'CustomMatchGameRuleList_OnDecideButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.CustomMatchJoinCodeWidget.BP_SendCheckFlag
// 0x0001 (0x0001 - 0x0000)
struct CustomMatchJoinCodeWidget_BP_SendCheckFlag final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMatchJoinCodeWidget_BP_SendCheckFlag) == 0x000001, "Wrong alignment on CustomMatchJoinCodeWidget_BP_SendCheckFlag");
static_assert(sizeof(CustomMatchJoinCodeWidget_BP_SendCheckFlag) == 0x000001, "Wrong size on CustomMatchJoinCodeWidget_BP_SendCheckFlag");
static_assert(offsetof(CustomMatchJoinCodeWidget_BP_SendCheckFlag, Enable) == 0x000000, "Member 'CustomMatchJoinCodeWidget_BP_SendCheckFlag::Enable' has a wrong offset!");

// Function OutGameModule.CustomMatchJoinCodeWidget.BP_SetHideJoinCode
// 0x0001 (0x0001 - 0x0000)
struct CustomMatchJoinCodeWidget_BP_SetHideJoinCode final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMatchJoinCodeWidget_BP_SetHideJoinCode) == 0x000001, "Wrong alignment on CustomMatchJoinCodeWidget_BP_SetHideJoinCode");
static_assert(sizeof(CustomMatchJoinCodeWidget_BP_SetHideJoinCode) == 0x000001, "Wrong size on CustomMatchJoinCodeWidget_BP_SetHideJoinCode");
static_assert(offsetof(CustomMatchJoinCodeWidget_BP_SetHideJoinCode, Enable) == 0x000000, "Member 'CustomMatchJoinCodeWidget_BP_SetHideJoinCode::Enable' has a wrong offset!");

// Function OutGameModule.CustomMatchJoinCodeWidget.DoCustomWidgetNavigation
// 0x0001 (0x0001 - 0x0000)
struct CustomMatchJoinCodeWidget_DoCustomWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMatchJoinCodeWidget_DoCustomWidgetNavigation) == 0x000001, "Wrong alignment on CustomMatchJoinCodeWidget_DoCustomWidgetNavigation");
static_assert(sizeof(CustomMatchJoinCodeWidget_DoCustomWidgetNavigation) == 0x000001, "Wrong size on CustomMatchJoinCodeWidget_DoCustomWidgetNavigation");
static_assert(offsetof(CustomMatchJoinCodeWidget_DoCustomWidgetNavigation, UiNavigation) == 0x000000, "Member 'CustomMatchJoinCodeWidget_DoCustomWidgetNavigation::UiNavigation' has a wrong offset!");

// Function OutGameModule.LeaderboardWidget.OnAddedToFocusEvent
// 0x0010 (0x0010 - 0x0000)
struct LeaderboardWidget_OnAddedToFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LeaderboardWidget_OnAddedToFocusEvent) == 0x000008, "Wrong alignment on LeaderboardWidget_OnAddedToFocusEvent");
static_assert(sizeof(LeaderboardWidget_OnAddedToFocusEvent) == 0x000010, "Wrong size on LeaderboardWidget_OnAddedToFocusEvent");
static_assert(offsetof(LeaderboardWidget_OnAddedToFocusEvent, Widget) == 0x000000, "Member 'LeaderboardWidget_OnAddedToFocusEvent::Widget' has a wrong offset!");
static_assert(offsetof(LeaderboardWidget_OnAddedToFocusEvent, InputType) == 0x000008, "Member 'LeaderboardWidget_OnAddedToFocusEvent::InputType' has a wrong offset!");

// Function OutGameModule.LeaderboardWidget.OnChangeIndex
// 0x0004 (0x0004 - 0x0000)
struct LeaderboardWidget_OnChangeIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LeaderboardWidget_OnChangeIndex) == 0x000004, "Wrong alignment on LeaderboardWidget_OnChangeIndex");
static_assert(sizeof(LeaderboardWidget_OnChangeIndex) == 0x000004, "Wrong size on LeaderboardWidget_OnChangeIndex");
static_assert(offsetof(LeaderboardWidget_OnChangeIndex, Index_0) == 0x000000, "Member 'LeaderboardWidget_OnChangeIndex::Index_0' has a wrong offset!");

// Function OutGameModule.LeaderboardWidget.OnRemovedFromFocusEvent
// 0x0010 (0x0010 - 0x0000)
struct LeaderboardWidget_OnRemovedFromFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LeaderboardWidget_OnRemovedFromFocusEvent) == 0x000008, "Wrong alignment on LeaderboardWidget_OnRemovedFromFocusEvent");
static_assert(sizeof(LeaderboardWidget_OnRemovedFromFocusEvent) == 0x000010, "Wrong size on LeaderboardWidget_OnRemovedFromFocusEvent");
static_assert(offsetof(LeaderboardWidget_OnRemovedFromFocusEvent, Widget) == 0x000000, "Member 'LeaderboardWidget_OnRemovedFromFocusEvent::Widget' has a wrong offset!");
static_assert(offsetof(LeaderboardWidget_OnRemovedFromFocusEvent, InputType) == 0x000008, "Member 'LeaderboardWidget_OnRemovedFromFocusEvent::InputType' has a wrong offset!");

// Function OutGameModule.LeaderboardWidget.SetupCharacterMaterial
// 0x0008 (0x0008 - 0x0000)
struct LeaderboardWidget_SetupCharacterMaterial final
{
public:
	class UMaterialInstance*                      CharaImageMaterial;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LeaderboardWidget_SetupCharacterMaterial) == 0x000008, "Wrong alignment on LeaderboardWidget_SetupCharacterMaterial");
static_assert(sizeof(LeaderboardWidget_SetupCharacterMaterial) == 0x000008, "Wrong size on LeaderboardWidget_SetupCharacterMaterial");
static_assert(offsetof(LeaderboardWidget_SetupCharacterMaterial, CharaImageMaterial) == 0x000000, "Member 'LeaderboardWidget_SetupCharacterMaterial::CharaImageMaterial' has a wrong offset!");

// Function OutGameModule.CustomMatchResultPlayerButtonWidget.OnDecideButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct CustomMatchResultPlayerButtonWidget_OnDecideButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomMatchResultPlayerButtonWidget_OnDecideButtonEvent) == 0x000008, "Wrong alignment on CustomMatchResultPlayerButtonWidget_OnDecideButtonEvent");
static_assert(sizeof(CustomMatchResultPlayerButtonWidget_OnDecideButtonEvent) == 0x000010, "Wrong size on CustomMatchResultPlayerButtonWidget_OnDecideButtonEvent");
static_assert(offsetof(CustomMatchResultPlayerButtonWidget_OnDecideButtonEvent, Widget) == 0x000000, "Member 'CustomMatchResultPlayerButtonWidget_OnDecideButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(CustomMatchResultPlayerButtonWidget_OnDecideButtonEvent, InputType) == 0x000008, "Member 'CustomMatchResultPlayerButtonWidget_OnDecideButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.CustomMatchResultTabItem.DoCustomWidgetNavigation
// 0x0001 (0x0001 - 0x0000)
struct CustomMatchResultTabItem_DoCustomWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMatchResultTabItem_DoCustomWidgetNavigation) == 0x000001, "Wrong alignment on CustomMatchResultTabItem_DoCustomWidgetNavigation");
static_assert(sizeof(CustomMatchResultTabItem_DoCustomWidgetNavigation) == 0x000001, "Wrong size on CustomMatchResultTabItem_DoCustomWidgetNavigation");
static_assert(offsetof(CustomMatchResultTabItem_DoCustomWidgetNavigation, UiNavigation) == 0x000000, "Member 'CustomMatchResultTabItem_DoCustomWidgetNavigation::UiNavigation' has a wrong offset!");

// Function OutGameModule.CustomMatchResultTabItem.OnDecidePanelEvent
// 0x0010 (0x0010 - 0x0000)
struct CustomMatchResultTabItem_OnDecidePanelEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomMatchResultTabItem_OnDecidePanelEvent) == 0x000008, "Wrong alignment on CustomMatchResultTabItem_OnDecidePanelEvent");
static_assert(sizeof(CustomMatchResultTabItem_OnDecidePanelEvent) == 0x000010, "Wrong size on CustomMatchResultTabItem_OnDecidePanelEvent");
static_assert(offsetof(CustomMatchResultTabItem_OnDecidePanelEvent, Widget) == 0x000000, "Member 'CustomMatchResultTabItem_OnDecidePanelEvent::Widget' has a wrong offset!");
static_assert(offsetof(CustomMatchResultTabItem_OnDecidePanelEvent, InputType) == 0x000008, "Member 'CustomMatchResultTabItem_OnDecidePanelEvent::InputType' has a wrong offset!");

// DelegateFunction OutGameModule.GeneralCountCarouselWidget.OnChangeIndexDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct GeneralCountCarouselWidget_OnChangeIndexDelegate__DelegateSignature final
{
public:
	int32                                         NewCount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFoucas;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneralCountCarouselWidget_OnChangeIndexDelegate__DelegateSignature) == 0x000004, "Wrong alignment on GeneralCountCarouselWidget_OnChangeIndexDelegate__DelegateSignature");
static_assert(sizeof(GeneralCountCarouselWidget_OnChangeIndexDelegate__DelegateSignature) == 0x000008, "Wrong size on GeneralCountCarouselWidget_OnChangeIndexDelegate__DelegateSignature");
static_assert(offsetof(GeneralCountCarouselWidget_OnChangeIndexDelegate__DelegateSignature, NewCount) == 0x000000, "Member 'GeneralCountCarouselWidget_OnChangeIndexDelegate__DelegateSignature::NewCount' has a wrong offset!");
static_assert(offsetof(GeneralCountCarouselWidget_OnChangeIndexDelegate__DelegateSignature, IsFoucas) == 0x000004, "Member 'GeneralCountCarouselWidget_OnChangeIndexDelegate__DelegateSignature::IsFoucas' has a wrong offset!");

// Function OutGameModule.GeneralCountCarouselWidget.OnDecideEvent
// 0x0010 (0x0010 - 0x0000)
struct GeneralCountCarouselWidget_OnDecideEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneralCountCarouselWidget_OnDecideEvent) == 0x000008, "Wrong alignment on GeneralCountCarouselWidget_OnDecideEvent");
static_assert(sizeof(GeneralCountCarouselWidget_OnDecideEvent) == 0x000010, "Wrong size on GeneralCountCarouselWidget_OnDecideEvent");
static_assert(offsetof(GeneralCountCarouselWidget_OnDecideEvent, Widget) == 0x000000, "Member 'GeneralCountCarouselWidget_OnDecideEvent::Widget' has a wrong offset!");
static_assert(offsetof(GeneralCountCarouselWidget_OnDecideEvent, InputType) == 0x000008, "Member 'GeneralCountCarouselWidget_OnDecideEvent::InputType' has a wrong offset!");

// Function OutGameModule.GeneralCountCarouselWidget.OnPressEvent
// 0x0010 (0x0010 - 0x0000)
struct GeneralCountCarouselWidget_OnPressEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneralCountCarouselWidget_OnPressEvent) == 0x000008, "Wrong alignment on GeneralCountCarouselWidget_OnPressEvent");
static_assert(sizeof(GeneralCountCarouselWidget_OnPressEvent) == 0x000010, "Wrong size on GeneralCountCarouselWidget_OnPressEvent");
static_assert(offsetof(GeneralCountCarouselWidget_OnPressEvent, Widget) == 0x000000, "Member 'GeneralCountCarouselWidget_OnPressEvent::Widget' has a wrong offset!");
static_assert(offsetof(GeneralCountCarouselWidget_OnPressEvent, InputType) == 0x000008, "Member 'GeneralCountCarouselWidget_OnPressEvent::InputType' has a wrong offset!");

// Function OutGameModule.GeneralCountCarouselWidget.OnReleaseEvent
// 0x0010 (0x0010 - 0x0000)
struct GeneralCountCarouselWidget_OnReleaseEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneralCountCarouselWidget_OnReleaseEvent) == 0x000008, "Wrong alignment on GeneralCountCarouselWidget_OnReleaseEvent");
static_assert(sizeof(GeneralCountCarouselWidget_OnReleaseEvent) == 0x000010, "Wrong size on GeneralCountCarouselWidget_OnReleaseEvent");
static_assert(offsetof(GeneralCountCarouselWidget_OnReleaseEvent, Widget) == 0x000000, "Member 'GeneralCountCarouselWidget_OnReleaseEvent::Widget' has a wrong offset!");
static_assert(offsetof(GeneralCountCarouselWidget_OnReleaseEvent, InputType) == 0x000008, "Member 'GeneralCountCarouselWidget_OnReleaseEvent::InputType' has a wrong offset!");

// Function OutGameModule.GeneralCountCarouselWidget.PressThisLeftButtonA
// 0x0001 (0x0001 - 0x0000)
struct GeneralCountCarouselWidget_PressThisLeftButtonA final
{
public:
	EWidgetInputType                              Input;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralCountCarouselWidget_PressThisLeftButtonA) == 0x000001, "Wrong alignment on GeneralCountCarouselWidget_PressThisLeftButtonA");
static_assert(sizeof(GeneralCountCarouselWidget_PressThisLeftButtonA) == 0x000001, "Wrong size on GeneralCountCarouselWidget_PressThisLeftButtonA");
static_assert(offsetof(GeneralCountCarouselWidget_PressThisLeftButtonA, Input) == 0x000000, "Member 'GeneralCountCarouselWidget_PressThisLeftButtonA::Input' has a wrong offset!");

// Function OutGameModule.GeneralCountCarouselWidget.PressThisLeftButtonB
// 0x0001 (0x0001 - 0x0000)
struct GeneralCountCarouselWidget_PressThisLeftButtonB final
{
public:
	EWidgetInputType                              Input;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralCountCarouselWidget_PressThisLeftButtonB) == 0x000001, "Wrong alignment on GeneralCountCarouselWidget_PressThisLeftButtonB");
static_assert(sizeof(GeneralCountCarouselWidget_PressThisLeftButtonB) == 0x000001, "Wrong size on GeneralCountCarouselWidget_PressThisLeftButtonB");
static_assert(offsetof(GeneralCountCarouselWidget_PressThisLeftButtonB, Input) == 0x000000, "Member 'GeneralCountCarouselWidget_PressThisLeftButtonB::Input' has a wrong offset!");

// Function OutGameModule.GeneralCountCarouselWidget.PressThisRightButtonA
// 0x0001 (0x0001 - 0x0000)
struct GeneralCountCarouselWidget_PressThisRightButtonA final
{
public:
	EWidgetInputType                              Input;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralCountCarouselWidget_PressThisRightButtonA) == 0x000001, "Wrong alignment on GeneralCountCarouselWidget_PressThisRightButtonA");
static_assert(sizeof(GeneralCountCarouselWidget_PressThisRightButtonA) == 0x000001, "Wrong size on GeneralCountCarouselWidget_PressThisRightButtonA");
static_assert(offsetof(GeneralCountCarouselWidget_PressThisRightButtonA, Input) == 0x000000, "Member 'GeneralCountCarouselWidget_PressThisRightButtonA::Input' has a wrong offset!");

// Function OutGameModule.GeneralCountCarouselWidget.PressThisRightButtonB
// 0x0001 (0x0001 - 0x0000)
struct GeneralCountCarouselWidget_PressThisRightButtonB final
{
public:
	EWidgetInputType                              Input;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralCountCarouselWidget_PressThisRightButtonB) == 0x000001, "Wrong alignment on GeneralCountCarouselWidget_PressThisRightButtonB");
static_assert(sizeof(GeneralCountCarouselWidget_PressThisRightButtonB) == 0x000001, "Wrong size on GeneralCountCarouselWidget_PressThisRightButtonB");
static_assert(offsetof(GeneralCountCarouselWidget_PressThisRightButtonB, Input) == 0x000000, "Member 'GeneralCountCarouselWidget_PressThisRightButtonB::Input' has a wrong offset!");

// Function OutGameModule.CustomMatchResultTabList.OnAddFocusEvent
// 0x0010 (0x0010 - 0x0000)
struct CustomMatchResultTabList_OnAddFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomMatchResultTabList_OnAddFocusEvent) == 0x000008, "Wrong alignment on CustomMatchResultTabList_OnAddFocusEvent");
static_assert(sizeof(CustomMatchResultTabList_OnAddFocusEvent) == 0x000010, "Wrong size on CustomMatchResultTabList_OnAddFocusEvent");
static_assert(offsetof(CustomMatchResultTabList_OnAddFocusEvent, Widget) == 0x000000, "Member 'CustomMatchResultTabList_OnAddFocusEvent::Widget' has a wrong offset!");
static_assert(offsetof(CustomMatchResultTabList_OnAddFocusEvent, InputType) == 0x000008, "Member 'CustomMatchResultTabList_OnAddFocusEvent::InputType' has a wrong offset!");

// Function OutGameModule.MissionDetails.OnDecideButton
// 0x0028 (0x0028 - 0x0000)
struct MissionDetails_OnDecideButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MissionDetails_OnDecideButton) == 0x000008, "Wrong alignment on MissionDetails_OnDecideButton");
static_assert(sizeof(MissionDetails_OnDecideButton) == 0x000028, "Wrong size on MissionDetails_OnDecideButton");
static_assert(offsetof(MissionDetails_OnDecideButton, Widget) == 0x000000, "Member 'MissionDetails_OnDecideButton::Widget' has a wrong offset!");
static_assert(offsetof(MissionDetails_OnDecideButton, Key) == 0x000008, "Member 'MissionDetails_OnDecideButton::Key' has a wrong offset!");
static_assert(offsetof(MissionDetails_OnDecideButton, InputType) == 0x000020, "Member 'MissionDetails_OnDecideButton::InputType' has a wrong offset!");

// Function OutGameModule.CustomMatchResultTeamItemBaseWidget.DoCustomWidgetNavigation
// 0x0001 (0x0001 - 0x0000)
struct CustomMatchResultTeamItemBaseWidget_DoCustomWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMatchResultTeamItemBaseWidget_DoCustomWidgetNavigation) == 0x000001, "Wrong alignment on CustomMatchResultTeamItemBaseWidget_DoCustomWidgetNavigation");
static_assert(sizeof(CustomMatchResultTeamItemBaseWidget_DoCustomWidgetNavigation) == 0x000001, "Wrong size on CustomMatchResultTeamItemBaseWidget_DoCustomWidgetNavigation");
static_assert(offsetof(CustomMatchResultTeamItemBaseWidget_DoCustomWidgetNavigation, UiNavigation) == 0x000000, "Member 'CustomMatchResultTeamItemBaseWidget_DoCustomWidgetNavigation::UiNavigation' has a wrong offset!");

// Function OutGameModule.ItemIconWidget.BP_GetItemId
// 0x0004 (0x0004 - 0x0000)
struct ItemIconWidget_BP_GetItemId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemIconWidget_BP_GetItemId) == 0x000004, "Wrong alignment on ItemIconWidget_BP_GetItemId");
static_assert(sizeof(ItemIconWidget_BP_GetItemId) == 0x000004, "Wrong size on ItemIconWidget_BP_GetItemId");
static_assert(offsetof(ItemIconWidget_BP_GetItemId, ReturnValue) == 0x000000, "Member 'ItemIconWidget_BP_GetItemId::ReturnValue' has a wrong offset!");

// Function OutGameModule.ItemIconWidget.BP_SetItemId
// 0x0018 (0x0018 - 0x0000)
struct ItemIconWidget_BP_SetItemId final
{
public:
	class FString                                 ItemCategory;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSmall;                                           // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemIconWidget_BP_SetItemId) == 0x000008, "Wrong alignment on ItemIconWidget_BP_SetItemId");
static_assert(sizeof(ItemIconWidget_BP_SetItemId) == 0x000018, "Wrong size on ItemIconWidget_BP_SetItemId");
static_assert(offsetof(ItemIconWidget_BP_SetItemId, ItemCategory) == 0x000000, "Member 'ItemIconWidget_BP_SetItemId::ItemCategory' has a wrong offset!");
static_assert(offsetof(ItemIconWidget_BP_SetItemId, ItemId) == 0x000010, "Member 'ItemIconWidget_BP_SetItemId::ItemId' has a wrong offset!");
static_assert(offsetof(ItemIconWidget_BP_SetItemId, IsSmall) == 0x000014, "Member 'ItemIconWidget_BP_SetItemId::IsSmall' has a wrong offset!");

// Function OutGameModule.ItemIconWidget.BP_SetItemIdForEnum
// 0x000C (0x000C - 0x0000)
struct ItemIconWidget_BP_SetItemIdForEnum final
{
public:
	EItemCategory                                 ItemCategory;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSmall;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemIconWidget_BP_SetItemIdForEnum) == 0x000004, "Wrong alignment on ItemIconWidget_BP_SetItemIdForEnum");
static_assert(sizeof(ItemIconWidget_BP_SetItemIdForEnum) == 0x00000C, "Wrong size on ItemIconWidget_BP_SetItemIdForEnum");
static_assert(offsetof(ItemIconWidget_BP_SetItemIdForEnum, ItemCategory) == 0x000000, "Member 'ItemIconWidget_BP_SetItemIdForEnum::ItemCategory' has a wrong offset!");
static_assert(offsetof(ItemIconWidget_BP_SetItemIdForEnum, ItemId) == 0x000004, "Member 'ItemIconWidget_BP_SetItemIdForEnum::ItemId' has a wrong offset!");
static_assert(offsetof(ItemIconWidget_BP_SetItemIdForEnum, IsSmall) == 0x000008, "Member 'ItemIconWidget_BP_SetItemIdForEnum::IsSmall' has a wrong offset!");

// Function OutGameModule.ItemIconWidget.OnLoadedIconImage
// 0x0008 (0x0008 - 0x0000)
struct ItemIconWidget_OnLoadedIconImage final
{
public:
	class UPaperSprite*                           Sprite;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemIconWidget_OnLoadedIconImage) == 0x000008, "Wrong alignment on ItemIconWidget_OnLoadedIconImage");
static_assert(sizeof(ItemIconWidget_OnLoadedIconImage) == 0x000008, "Wrong size on ItemIconWidget_OnLoadedIconImage");
static_assert(offsetof(ItemIconWidget_OnLoadedIconImage, Sprite) == 0x000000, "Member 'ItemIconWidget_OnLoadedIconImage::Sprite' has a wrong offset!");

// Function OutGameModule.CustomMatchResultTeamListWidget.OnAddFocusEvent
// 0x0010 (0x0010 - 0x0000)
struct CustomMatchResultTeamListWidget_OnAddFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomMatchResultTeamListWidget_OnAddFocusEvent) == 0x000008, "Wrong alignment on CustomMatchResultTeamListWidget_OnAddFocusEvent");
static_assert(sizeof(CustomMatchResultTeamListWidget_OnAddFocusEvent) == 0x000010, "Wrong size on CustomMatchResultTeamListWidget_OnAddFocusEvent");
static_assert(offsetof(CustomMatchResultTeamListWidget_OnAddFocusEvent, Widget) == 0x000000, "Member 'CustomMatchResultTeamListWidget_OnAddFocusEvent::Widget' has a wrong offset!");
static_assert(offsetof(CustomMatchResultTeamListWidget_OnAddFocusEvent, InputType) == 0x000008, "Member 'CustomMatchResultTeamListWidget_OnAddFocusEvent::InputType' has a wrong offset!");

// Function OutGameModule.GeneralCoinSelectItemWidget.RequesetItemSelectionChanged
// 0x0001 (0x0001 - 0x0000)
struct GeneralCoinSelectItemWidget_RequesetItemSelectionChanged final
{
public:
	bool                                          IsSelected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralCoinSelectItemWidget_RequesetItemSelectionChanged) == 0x000001, "Wrong alignment on GeneralCoinSelectItemWidget_RequesetItemSelectionChanged");
static_assert(sizeof(GeneralCoinSelectItemWidget_RequesetItemSelectionChanged) == 0x000001, "Wrong size on GeneralCoinSelectItemWidget_RequesetItemSelectionChanged");
static_assert(offsetof(GeneralCoinSelectItemWidget_RequesetItemSelectionChanged, IsSelected) == 0x000000, "Member 'GeneralCoinSelectItemWidget_RequesetItemSelectionChanged::IsSelected' has a wrong offset!");

// Function OutGameModule.GeneralCoinSelectItemWidget.BP_GetButton
// 0x0008 (0x0008 - 0x0000)
struct GeneralCoinSelectItemWidget_BP_GetButton final
{
public:
	class UGeneralCoinSelectButtonWidget*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralCoinSelectItemWidget_BP_GetButton) == 0x000008, "Wrong alignment on GeneralCoinSelectItemWidget_BP_GetButton");
static_assert(sizeof(GeneralCoinSelectItemWidget_BP_GetButton) == 0x000008, "Wrong size on GeneralCoinSelectItemWidget_BP_GetButton");
static_assert(offsetof(GeneralCoinSelectItemWidget_BP_GetButton, ReturnValue) == 0x000000, "Member 'GeneralCoinSelectItemWidget_BP_GetButton::ReturnValue' has a wrong offset!");

// Function OutGameModule.CustomMatchSelectTop.OnDecideKeyEvent
// 0x0028 (0x0028 - 0x0000)
struct CustomMatchSelectTop_OnDecideKeyEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomMatchSelectTop_OnDecideKeyEvent) == 0x000008, "Wrong alignment on CustomMatchSelectTop_OnDecideKeyEvent");
static_assert(sizeof(CustomMatchSelectTop_OnDecideKeyEvent) == 0x000028, "Wrong size on CustomMatchSelectTop_OnDecideKeyEvent");
static_assert(offsetof(CustomMatchSelectTop_OnDecideKeyEvent, Widget) == 0x000000, "Member 'CustomMatchSelectTop_OnDecideKeyEvent::Widget' has a wrong offset!");
static_assert(offsetof(CustomMatchSelectTop_OnDecideKeyEvent, Key) == 0x000008, "Member 'CustomMatchSelectTop_OnDecideKeyEvent::Key' has a wrong offset!");
static_assert(offsetof(CustomMatchSelectTop_OnDecideKeyEvent, InputType) == 0x000020, "Member 'CustomMatchSelectTop_OnDecideKeyEvent::InputType' has a wrong offset!");

// Function OutGameModule.CustomMatchSelectTop.SetTileViewItem
// 0x0001 (0x0001 - 0x0000)
struct CustomMatchSelectTop_SetTileViewItem final
{
public:
	bool                                          bStandbyListOnly;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMatchSelectTop_SetTileViewItem) == 0x000001, "Wrong alignment on CustomMatchSelectTop_SetTileViewItem");
static_assert(sizeof(CustomMatchSelectTop_SetTileViewItem) == 0x000001, "Wrong size on CustomMatchSelectTop_SetTileViewItem");
static_assert(offsetof(CustomMatchSelectTop_SetTileViewItem, bStandbyListOnly) == 0x000000, "Member 'CustomMatchSelectTop_SetTileViewItem::bStandbyListOnly' has a wrong offset!");

// Function OutGameModule.GeometryControllerAvatarCreate.SetAccumulatedRenderTransform
// 0x0078 (0x0078 - 0x0000)
struct GeometryControllerAvatarCreate_SetAccumulatedRenderTransform final
{
public:
	struct FGeometry                              Geometry;                                          // 0x0000(0x0038)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometry                              ReturnValue;                                       // 0x0040(0x0038)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryControllerAvatarCreate_SetAccumulatedRenderTransform) == 0x000004, "Wrong alignment on GeometryControllerAvatarCreate_SetAccumulatedRenderTransform");
static_assert(sizeof(GeometryControllerAvatarCreate_SetAccumulatedRenderTransform) == 0x000078, "Wrong size on GeometryControllerAvatarCreate_SetAccumulatedRenderTransform");
static_assert(offsetof(GeometryControllerAvatarCreate_SetAccumulatedRenderTransform, Geometry) == 0x000000, "Member 'GeometryControllerAvatarCreate_SetAccumulatedRenderTransform::Geometry' has a wrong offset!");
static_assert(offsetof(GeometryControllerAvatarCreate_SetAccumulatedRenderTransform, X) == 0x000038, "Member 'GeometryControllerAvatarCreate_SetAccumulatedRenderTransform::X' has a wrong offset!");
static_assert(offsetof(GeometryControllerAvatarCreate_SetAccumulatedRenderTransform, Y) == 0x00003C, "Member 'GeometryControllerAvatarCreate_SetAccumulatedRenderTransform::Y' has a wrong offset!");
static_assert(offsetof(GeometryControllerAvatarCreate_SetAccumulatedRenderTransform, ReturnValue) == 0x000040, "Member 'GeometryControllerAvatarCreate_SetAccumulatedRenderTransform::ReturnValue' has a wrong offset!");

// Function OutGameModule.CustomMatchSelectWidget.OnDecideGeneralWindow
// 0x0010 (0x0010 - 0x0000)
struct CustomMatchSelectWidget_OnDecideGeneralWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeft;                                             // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomMatchSelectWidget_OnDecideGeneralWindow) == 0x000008, "Wrong alignment on CustomMatchSelectWidget_OnDecideGeneralWindow");
static_assert(sizeof(CustomMatchSelectWidget_OnDecideGeneralWindow) == 0x000010, "Wrong size on CustomMatchSelectWidget_OnDecideGeneralWindow");
static_assert(offsetof(CustomMatchSelectWidget_OnDecideGeneralWindow, Widget) == 0x000000, "Member 'CustomMatchSelectWidget_OnDecideGeneralWindow::Widget' has a wrong offset!");
static_assert(offsetof(CustomMatchSelectWidget_OnDecideGeneralWindow, InputType) == 0x000008, "Member 'CustomMatchSelectWidget_OnDecideGeneralWindow::InputType' has a wrong offset!");
static_assert(offsetof(CustomMatchSelectWidget_OnDecideGeneralWindow, bLeft) == 0x000009, "Member 'CustomMatchSelectWidget_OnDecideGeneralWindow::bLeft' has a wrong offset!");

// Function OutGameModule.CustomMatchSelectWidget.SearchRoomEvent
// 0x0010 (0x0010 - 0x0000)
struct CustomMatchSelectWidget_SearchRoomEvent final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMatchSelectWidget_SearchRoomEvent) == 0x000008, "Wrong alignment on CustomMatchSelectWidget_SearchRoomEvent");
static_assert(sizeof(CustomMatchSelectWidget_SearchRoomEvent) == 0x000010, "Wrong size on CustomMatchSelectWidget_SearchRoomEvent");
static_assert(offsetof(CustomMatchSelectWidget_SearchRoomEvent, ID) == 0x000000, "Member 'CustomMatchSelectWidget_SearchRoomEvent::ID' has a wrong offset!");

// Function OutGameModule.CustomMatchStandbyListWidget.DoCustomWidgetNavigation
// 0x0001 (0x0001 - 0x0000)
struct CustomMatchStandbyListWidget_DoCustomWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMatchStandbyListWidget_DoCustomWidgetNavigation) == 0x000001, "Wrong alignment on CustomMatchStandbyListWidget_DoCustomWidgetNavigation");
static_assert(sizeof(CustomMatchStandbyListWidget_DoCustomWidgetNavigation) == 0x000001, "Wrong size on CustomMatchStandbyListWidget_DoCustomWidgetNavigation");
static_assert(offsetof(CustomMatchStandbyListWidget_DoCustomWidgetNavigation, UiNavigation) == 0x000000, "Member 'CustomMatchStandbyListWidget_DoCustomWidgetNavigation::UiNavigation' has a wrong offset!");

// Function OutGameModule.CustomMatchStandbyListWidget.OnAddedToFocusEvent
// 0x0010 (0x0010 - 0x0000)
struct CustomMatchStandbyListWidget_OnAddedToFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomMatchStandbyListWidget_OnAddedToFocusEvent) == 0x000008, "Wrong alignment on CustomMatchStandbyListWidget_OnAddedToFocusEvent");
static_assert(sizeof(CustomMatchStandbyListWidget_OnAddedToFocusEvent) == 0x000010, "Wrong size on CustomMatchStandbyListWidget_OnAddedToFocusEvent");
static_assert(offsetof(CustomMatchStandbyListWidget_OnAddedToFocusEvent, Widget) == 0x000000, "Member 'CustomMatchStandbyListWidget_OnAddedToFocusEvent::Widget' has a wrong offset!");
static_assert(offsetof(CustomMatchStandbyListWidget_OnAddedToFocusEvent, InputType) == 0x000008, "Member 'CustomMatchStandbyListWidget_OnAddedToFocusEvent::InputType' has a wrong offset!");

// Function OutGameModule.CustomMatchStandbyListWidget.OnDecideKeyEvent
// 0x0028 (0x0028 - 0x0000)
struct CustomMatchStandbyListWidget_OnDecideKeyEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomMatchStandbyListWidget_OnDecideKeyEvent) == 0x000008, "Wrong alignment on CustomMatchStandbyListWidget_OnDecideKeyEvent");
static_assert(sizeof(CustomMatchStandbyListWidget_OnDecideKeyEvent) == 0x000028, "Wrong size on CustomMatchStandbyListWidget_OnDecideKeyEvent");
static_assert(offsetof(CustomMatchStandbyListWidget_OnDecideKeyEvent, Widget) == 0x000000, "Member 'CustomMatchStandbyListWidget_OnDecideKeyEvent::Widget' has a wrong offset!");
static_assert(offsetof(CustomMatchStandbyListWidget_OnDecideKeyEvent, Key) == 0x000008, "Member 'CustomMatchStandbyListWidget_OnDecideKeyEvent::Key' has a wrong offset!");
static_assert(offsetof(CustomMatchStandbyListWidget_OnDecideKeyEvent, InputType) == 0x000020, "Member 'CustomMatchStandbyListWidget_OnDecideKeyEvent::InputType' has a wrong offset!");

// Function OutGameModule.CustomMatchTabWidget.ChangeCaroselIndex
// 0x0008 (0x0008 - 0x0000)
struct CustomMatchTabWidget_ChangeCaroselIndex final
{
public:
	int32                                         NewIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFocus;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomMatchTabWidget_ChangeCaroselIndex) == 0x000004, "Wrong alignment on CustomMatchTabWidget_ChangeCaroselIndex");
static_assert(sizeof(CustomMatchTabWidget_ChangeCaroselIndex) == 0x000008, "Wrong size on CustomMatchTabWidget_ChangeCaroselIndex");
static_assert(offsetof(CustomMatchTabWidget_ChangeCaroselIndex, NewIndex) == 0x000000, "Member 'CustomMatchTabWidget_ChangeCaroselIndex::NewIndex' has a wrong offset!");
static_assert(offsetof(CustomMatchTabWidget_ChangeCaroselIndex, IsFocus) == 0x000004, "Member 'CustomMatchTabWidget_ChangeCaroselIndex::IsFocus' has a wrong offset!");

// Function OutGameModule.CustomMatchTabWidget.OnChangeTabEvent
// 0x0004 (0x0004 - 0x0000)
struct CustomMatchTabWidget_OnChangeTabEvent final
{
public:
	int32                                         NewSelectTab;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMatchTabWidget_OnChangeTabEvent) == 0x000004, "Wrong alignment on CustomMatchTabWidget_OnChangeTabEvent");
static_assert(sizeof(CustomMatchTabWidget_OnChangeTabEvent) == 0x000004, "Wrong size on CustomMatchTabWidget_OnChangeTabEvent");
static_assert(offsetof(CustomMatchTabWidget_OnChangeTabEvent, NewSelectTab) == 0x000000, "Member 'CustomMatchTabWidget_OnChangeTabEvent::NewSelectTab' has a wrong offset!");

// Function OutGameModule.CustomMatchTabWidget.OnCheckTeamMenberAlone
// 0x0001 (0x0001 - 0x0000)
struct CustomMatchTabWidget_OnCheckTeamMenberAlone final
{
public:
	bool                                          bAlone;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMatchTabWidget_OnCheckTeamMenberAlone) == 0x000001, "Wrong alignment on CustomMatchTabWidget_OnCheckTeamMenberAlone");
static_assert(sizeof(CustomMatchTabWidget_OnCheckTeamMenberAlone) == 0x000001, "Wrong size on CustomMatchTabWidget_OnCheckTeamMenberAlone");
static_assert(offsetof(CustomMatchTabWidget_OnCheckTeamMenberAlone, bAlone) == 0x000000, "Member 'CustomMatchTabWidget_OnCheckTeamMenberAlone::bAlone' has a wrong offset!");

// Function OutGameModule.CustomMatchTabWidget.OnCompleteRequestResultData
// 0x0010 (0x0010 - 0x0000)
struct CustomMatchTabWidget_OnCompleteRequestResultData final
{
public:
	TArray<struct FCustomMatchResultData>         ResultDataList;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMatchTabWidget_OnCompleteRequestResultData) == 0x000008, "Wrong alignment on CustomMatchTabWidget_OnCompleteRequestResultData");
static_assert(sizeof(CustomMatchTabWidget_OnCompleteRequestResultData) == 0x000010, "Wrong size on CustomMatchTabWidget_OnCompleteRequestResultData");
static_assert(offsetof(CustomMatchTabWidget_OnCompleteRequestResultData, ResultDataList) == 0x000000, "Member 'CustomMatchTabWidget_OnCompleteRequestResultData::ResultDataList' has a wrong offset!");

// Function OutGameModule.CustomMatchTabWidget.OnDecideKickPopupEvent
// 0x0010 (0x0010 - 0x0000)
struct CustomMatchTabWidget_OnDecideKickPopupEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomMatchTabWidget_OnDecideKickPopupEvent) == 0x000008, "Wrong alignment on CustomMatchTabWidget_OnDecideKickPopupEvent");
static_assert(sizeof(CustomMatchTabWidget_OnDecideKickPopupEvent) == 0x000010, "Wrong size on CustomMatchTabWidget_OnDecideKickPopupEvent");
static_assert(offsetof(CustomMatchTabWidget_OnDecideKickPopupEvent, Widget) == 0x000000, "Member 'CustomMatchTabWidget_OnDecideKickPopupEvent::Widget' has a wrong offset!");
static_assert(offsetof(CustomMatchTabWidget_OnDecideKickPopupEvent, InputType) == 0x000008, "Member 'CustomMatchTabWidget_OnDecideKickPopupEvent::InputType' has a wrong offset!");
static_assert(offsetof(CustomMatchTabWidget_OnDecideKickPopupEvent, LeftButton) == 0x000009, "Member 'CustomMatchTabWidget_OnDecideKickPopupEvent::LeftButton' has a wrong offset!");

// Function OutGameModule.CustomMatchTabWidget.OnDecideRemoveRoomoPopupEvent
// 0x0010 (0x0010 - 0x0000)
struct CustomMatchTabWidget_OnDecideRemoveRoomoPopupEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomMatchTabWidget_OnDecideRemoveRoomoPopupEvent) == 0x000008, "Wrong alignment on CustomMatchTabWidget_OnDecideRemoveRoomoPopupEvent");
static_assert(sizeof(CustomMatchTabWidget_OnDecideRemoveRoomoPopupEvent) == 0x000010, "Wrong size on CustomMatchTabWidget_OnDecideRemoveRoomoPopupEvent");
static_assert(offsetof(CustomMatchTabWidget_OnDecideRemoveRoomoPopupEvent, Widget) == 0x000000, "Member 'CustomMatchTabWidget_OnDecideRemoveRoomoPopupEvent::Widget' has a wrong offset!");
static_assert(offsetof(CustomMatchTabWidget_OnDecideRemoveRoomoPopupEvent, InputType) == 0x000008, "Member 'CustomMatchTabWidget_OnDecideRemoveRoomoPopupEvent::InputType' has a wrong offset!");
static_assert(offsetof(CustomMatchTabWidget_OnDecideRemoveRoomoPopupEvent, LeftButton) == 0x000009, "Member 'CustomMatchTabWidget_OnDecideRemoveRoomoPopupEvent::LeftButton' has a wrong offset!");

// Function OutGameModule.CustomMatchTabWidget.SetSelectTeamCode
// 0x0004 (0x0004 - 0x0000)
struct CustomMatchTabWidget_SetSelectTeamCode final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMatchTabWidget_SetSelectTeamCode) == 0x000004, "Wrong alignment on CustomMatchTabWidget_SetSelectTeamCode");
static_assert(sizeof(CustomMatchTabWidget_SetSelectTeamCode) == 0x000004, "Wrong size on CustomMatchTabWidget_SetSelectTeamCode");
static_assert(offsetof(CustomMatchTabWidget_SetSelectTeamCode, Code) == 0x000000, "Member 'CustomMatchTabWidget_SetSelectTeamCode::Code' has a wrong offset!");

// Function OutGameModule.CustomMatchTabWidget.SetSelectTeamName
// 0x0018 (0x0018 - 0x0000)
struct CustomMatchTabWidget_SetSelectTeamName final
{
public:
	class FText                                   Name_0;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMatchTabWidget_SetSelectTeamName) == 0x000008, "Wrong alignment on CustomMatchTabWidget_SetSelectTeamName");
static_assert(sizeof(CustomMatchTabWidget_SetSelectTeamName) == 0x000018, "Wrong size on CustomMatchTabWidget_SetSelectTeamName");
static_assert(offsetof(CustomMatchTabWidget_SetSelectTeamName, Name_0) == 0x000000, "Member 'CustomMatchTabWidget_SetSelectTeamName::Name_0' has a wrong offset!");

// Function OutGameModule.CustomMatchTabWidget.SetStateBattleReadyEvent
// 0x0001 (0x0001 - 0x0000)
struct CustomMatchTabWidget_SetStateBattleReadyEvent final
{
public:
	bool                                          bReady;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMatchTabWidget_SetStateBattleReadyEvent) == 0x000001, "Wrong alignment on CustomMatchTabWidget_SetStateBattleReadyEvent");
static_assert(sizeof(CustomMatchTabWidget_SetStateBattleReadyEvent) == 0x000001, "Wrong size on CustomMatchTabWidget_SetStateBattleReadyEvent");
static_assert(offsetof(CustomMatchTabWidget_SetStateBattleReadyEvent, bReady) == 0x000000, "Member 'CustomMatchTabWidget_SetStateBattleReadyEvent::bReady' has a wrong offset!");

// Function OutGameModule.CustomMatchTabWidget.SetStateTextEvent
// 0x0004 (0x0004 - 0x0000)
struct CustomMatchTabWidget_SetStateTextEvent final
{
public:
	int32                                         StateCode;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMatchTabWidget_SetStateTextEvent) == 0x000004, "Wrong alignment on CustomMatchTabWidget_SetStateTextEvent");
static_assert(sizeof(CustomMatchTabWidget_SetStateTextEvent) == 0x000004, "Wrong size on CustomMatchTabWidget_SetStateTextEvent");
static_assert(offsetof(CustomMatchTabWidget_SetStateTextEvent, StateCode) == 0x000000, "Member 'CustomMatchTabWidget_SetStateTextEvent::StateCode' has a wrong offset!");

// Function OutGameModule.GeneralCarouselWidget.BP_AddMessage
// 0x0018 (0x0018 - 0x0000)
struct GeneralCarouselWidget_BP_AddMessage final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralCarouselWidget_BP_AddMessage) == 0x000008, "Wrong alignment on GeneralCarouselWidget_BP_AddMessage");
static_assert(sizeof(GeneralCarouselWidget_BP_AddMessage) == 0x000018, "Wrong size on GeneralCarouselWidget_BP_AddMessage");
static_assert(offsetof(GeneralCarouselWidget_BP_AddMessage, Message) == 0x000000, "Member 'GeneralCarouselWidget_BP_AddMessage::Message' has a wrong offset!");

// Function OutGameModule.GeneralCarouselWidget.BP_GetIndex
// 0x0004 (0x0004 - 0x0000)
struct GeneralCarouselWidget_BP_GetIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralCarouselWidget_BP_GetIndex) == 0x000004, "Wrong alignment on GeneralCarouselWidget_BP_GetIndex");
static_assert(sizeof(GeneralCarouselWidget_BP_GetIndex) == 0x000004, "Wrong size on GeneralCarouselWidget_BP_GetIndex");
static_assert(offsetof(GeneralCarouselWidget_BP_GetIndex, ReturnValue) == 0x000000, "Member 'GeneralCarouselWidget_BP_GetIndex::ReturnValue' has a wrong offset!");

// Function OutGameModule.GeneralCarouselWidget.BP_GetInputEnableFlag
// 0x0001 (0x0001 - 0x0000)
struct GeneralCarouselWidget_BP_GetInputEnableFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralCarouselWidget_BP_GetInputEnableFlag) == 0x000001, "Wrong alignment on GeneralCarouselWidget_BP_GetInputEnableFlag");
static_assert(sizeof(GeneralCarouselWidget_BP_GetInputEnableFlag) == 0x000001, "Wrong size on GeneralCarouselWidget_BP_GetInputEnableFlag");
static_assert(offsetof(GeneralCarouselWidget_BP_GetInputEnableFlag, ReturnValue) == 0x000000, "Member 'GeneralCarouselWidget_BP_GetInputEnableFlag::ReturnValue' has a wrong offset!");

// Function OutGameModule.GeneralCarouselWidget.BP_IsSelectedIndex
// 0x0001 (0x0001 - 0x0000)
struct GeneralCarouselWidget_BP_IsSelectedIndex final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralCarouselWidget_BP_IsSelectedIndex) == 0x000001, "Wrong alignment on GeneralCarouselWidget_BP_IsSelectedIndex");
static_assert(sizeof(GeneralCarouselWidget_BP_IsSelectedIndex) == 0x000001, "Wrong size on GeneralCarouselWidget_BP_IsSelectedIndex");
static_assert(offsetof(GeneralCarouselWidget_BP_IsSelectedIndex, ReturnValue) == 0x000000, "Member 'GeneralCarouselWidget_BP_IsSelectedIndex::ReturnValue' has a wrong offset!");

// Function OutGameModule.GeneralCarouselWidget.BP_SetIndex
// 0x0008 (0x0008 - 0x0000)
struct GeneralCarouselWidget_BP_SetIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateMessage;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneralCarouselWidget_BP_SetIndex) == 0x000004, "Wrong alignment on GeneralCarouselWidget_BP_SetIndex");
static_assert(sizeof(GeneralCarouselWidget_BP_SetIndex) == 0x000008, "Wrong size on GeneralCarouselWidget_BP_SetIndex");
static_assert(offsetof(GeneralCarouselWidget_BP_SetIndex, Index_0) == 0x000000, "Member 'GeneralCarouselWidget_BP_SetIndex::Index_0' has a wrong offset!");
static_assert(offsetof(GeneralCarouselWidget_BP_SetIndex, bUpdateMessage) == 0x000004, "Member 'GeneralCarouselWidget_BP_SetIndex::bUpdateMessage' has a wrong offset!");

// Function OutGameModule.GeneralCarouselWidget.BP_SetInputEnableFlag
// 0x0001 (0x0001 - 0x0000)
struct GeneralCarouselWidget_BP_SetInputEnableFlag final
{
public:
	bool                                          Val;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralCarouselWidget_BP_SetInputEnableFlag) == 0x000001, "Wrong alignment on GeneralCarouselWidget_BP_SetInputEnableFlag");
static_assert(sizeof(GeneralCarouselWidget_BP_SetInputEnableFlag) == 0x000001, "Wrong size on GeneralCarouselWidget_BP_SetInputEnableFlag");
static_assert(offsetof(GeneralCarouselWidget_BP_SetInputEnableFlag, Val) == 0x000000, "Member 'GeneralCarouselWidget_BP_SetInputEnableFlag::Val' has a wrong offset!");

// Function OutGameModule.GeneralCarouselWidget.BP_SetMessage
// 0x0018 (0x0018 - 0x0000)
struct GeneralCarouselWidget_BP_SetMessage final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralCarouselWidget_BP_SetMessage) == 0x000008, "Wrong alignment on GeneralCarouselWidget_BP_SetMessage");
static_assert(sizeof(GeneralCarouselWidget_BP_SetMessage) == 0x000018, "Wrong size on GeneralCarouselWidget_BP_SetMessage");
static_assert(offsetof(GeneralCarouselWidget_BP_SetMessage, Message) == 0x000000, "Member 'GeneralCarouselWidget_BP_SetMessage::Message' has a wrong offset!");

// Function OutGameModule.GeneralCarouselWidget.InputEnd
// 0x0004 (0x0004 - 0x0000)
struct GeneralCarouselWidget_InputEnd final
{
public:
	int32                                         NewIndex;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralCarouselWidget_InputEnd) == 0x000004, "Wrong alignment on GeneralCarouselWidget_InputEnd");
static_assert(sizeof(GeneralCarouselWidget_InputEnd) == 0x000004, "Wrong size on GeneralCarouselWidget_InputEnd");
static_assert(offsetof(GeneralCarouselWidget_InputEnd, NewIndex) == 0x000000, "Member 'GeneralCarouselWidget_InputEnd::NewIndex' has a wrong offset!");

// DelegateFunction OutGameModule.GeneralCarouselWidget.OnChangeIndexDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct GeneralCarouselWidget_OnChangeIndexDelegate__DelegateSignature final
{
public:
	int32                                         NewIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralCarouselWidget_OnChangeIndexDelegate__DelegateSignature) == 0x000004, "Wrong alignment on GeneralCarouselWidget_OnChangeIndexDelegate__DelegateSignature");
static_assert(sizeof(GeneralCarouselWidget_OnChangeIndexDelegate__DelegateSignature) == 0x000004, "Wrong size on GeneralCarouselWidget_OnChangeIndexDelegate__DelegateSignature");
static_assert(offsetof(GeneralCarouselWidget_OnChangeIndexDelegate__DelegateSignature, NewIndex) == 0x000000, "Member 'GeneralCarouselWidget_OnChangeIndexDelegate__DelegateSignature::NewIndex' has a wrong offset!");

// DelegateFunction OutGameModule.GeneralShoppingWidget.AddItemDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct GeneralShoppingWidget_AddItemDelegate__DelegateSignature final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralShoppingWidget_AddItemDelegate__DelegateSignature) == 0x000004, "Wrong alignment on GeneralShoppingWidget_AddItemDelegate__DelegateSignature");
static_assert(sizeof(GeneralShoppingWidget_AddItemDelegate__DelegateSignature) == 0x000004, "Wrong size on GeneralShoppingWidget_AddItemDelegate__DelegateSignature");
static_assert(offsetof(GeneralShoppingWidget_AddItemDelegate__DelegateSignature, Value) == 0x000000, "Member 'GeneralShoppingWidget_AddItemDelegate__DelegateSignature::Value' has a wrong offset!");

// Function OutGameModule.GeneralShoppingWidget.BP_AddBuyCount
// 0x0004 (0x0004 - 0x0000)
struct GeneralShoppingWidget_BP_AddBuyCount final
{
public:
	int32                                         AddBuyCount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralShoppingWidget_BP_AddBuyCount) == 0x000004, "Wrong alignment on GeneralShoppingWidget_BP_AddBuyCount");
static_assert(sizeof(GeneralShoppingWidget_BP_AddBuyCount) == 0x000004, "Wrong size on GeneralShoppingWidget_BP_AddBuyCount");
static_assert(offsetof(GeneralShoppingWidget_BP_AddBuyCount, AddBuyCount) == 0x000000, "Member 'GeneralShoppingWidget_BP_AddBuyCount::AddBuyCount' has a wrong offset!");

// Function OutGameModule.GeneralShoppingWidget.BP_SetBuyCount
// 0x0004 (0x0004 - 0x0000)
struct GeneralShoppingWidget_BP_SetBuyCount final
{
public:
	int32                                         buyCount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralShoppingWidget_BP_SetBuyCount) == 0x000004, "Wrong alignment on GeneralShoppingWidget_BP_SetBuyCount");
static_assert(sizeof(GeneralShoppingWidget_BP_SetBuyCount) == 0x000004, "Wrong size on GeneralShoppingWidget_BP_SetBuyCount");
static_assert(offsetof(GeneralShoppingWidget_BP_SetBuyCount, buyCount) == 0x000000, "Member 'GeneralShoppingWidget_BP_SetBuyCount::buyCount' has a wrong offset!");

// Function OutGameModule.GeneralShoppingWidget.BP_SetupImage
// 0x0048 (0x0048 - 0x0000)
struct GeneralShoppingWidget_BP_SetupImage final
{
public:
	ECurrencyType                                 Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NeedNum;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxBuyCount;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Target;                                            // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   Cmd;                                               // 0x0028(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          bUpdate;                                           // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneralShoppingWidget_BP_SetupImage) == 0x000008, "Wrong alignment on GeneralShoppingWidget_BP_SetupImage");
static_assert(sizeof(GeneralShoppingWidget_BP_SetupImage) == 0x000048, "Wrong size on GeneralShoppingWidget_BP_SetupImage");
static_assert(offsetof(GeneralShoppingWidget_BP_SetupImage, Type) == 0x000000, "Member 'GeneralShoppingWidget_BP_SetupImage::Type' has a wrong offset!");
static_assert(offsetof(GeneralShoppingWidget_BP_SetupImage, NeedNum) == 0x000004, "Member 'GeneralShoppingWidget_BP_SetupImage::NeedNum' has a wrong offset!");
static_assert(offsetof(GeneralShoppingWidget_BP_SetupImage, MaxBuyCount) == 0x000008, "Member 'GeneralShoppingWidget_BP_SetupImage::MaxBuyCount' has a wrong offset!");
static_assert(offsetof(GeneralShoppingWidget_BP_SetupImage, Target) == 0x000010, "Member 'GeneralShoppingWidget_BP_SetupImage::Target' has a wrong offset!");
static_assert(offsetof(GeneralShoppingWidget_BP_SetupImage, Cmd) == 0x000028, "Member 'GeneralShoppingWidget_BP_SetupImage::Cmd' has a wrong offset!");
static_assert(offsetof(GeneralShoppingWidget_BP_SetupImage, bUpdate) == 0x000040, "Member 'GeneralShoppingWidget_BP_SetupImage::bUpdate' has a wrong offset!");

// Function OutGameModule.GeneralShoppingWidget.BP_SetupItemGuage
// 0x000C (0x000C - 0x0000)
struct GeneralShoppingWidget_BP_SetupItemGuage final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NowExp;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxExp;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralShoppingWidget_BP_SetupItemGuage) == 0x000004, "Wrong alignment on GeneralShoppingWidget_BP_SetupItemGuage");
static_assert(sizeof(GeneralShoppingWidget_BP_SetupItemGuage) == 0x00000C, "Wrong size on GeneralShoppingWidget_BP_SetupItemGuage");
static_assert(offsetof(GeneralShoppingWidget_BP_SetupItemGuage, Rank) == 0x000000, "Member 'GeneralShoppingWidget_BP_SetupItemGuage::Rank' has a wrong offset!");
static_assert(offsetof(GeneralShoppingWidget_BP_SetupItemGuage, NowExp) == 0x000004, "Member 'GeneralShoppingWidget_BP_SetupItemGuage::NowExp' has a wrong offset!");
static_assert(offsetof(GeneralShoppingWidget_BP_SetupItemGuage, MaxExp) == 0x000008, "Member 'GeneralShoppingWidget_BP_SetupItemGuage::MaxExp' has a wrong offset!");

// Function OutGameModule.GeneralShoppingWidget.BP_UpdateItemGuage
// 0x0004 (0x0004 - 0x0000)
struct GeneralShoppingWidget_BP_UpdateItemGuage final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralShoppingWidget_BP_UpdateItemGuage) == 0x000004, "Wrong alignment on GeneralShoppingWidget_BP_UpdateItemGuage");
static_assert(sizeof(GeneralShoppingWidget_BP_UpdateItemGuage) == 0x000004, "Wrong size on GeneralShoppingWidget_BP_UpdateItemGuage");
static_assert(offsetof(GeneralShoppingWidget_BP_UpdateItemGuage, Value) == 0x000000, "Member 'GeneralShoppingWidget_BP_UpdateItemGuage::Value' has a wrong offset!");

// Function OutGameModule.GeneralShoppingWidget.OnShowTokusyouhouButton
// 0x0001 (0x0001 - 0x0000)
struct GeneralShoppingWidget_OnShowTokusyouhouButton final
{
public:
	bool                                          bShowButton;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralShoppingWidget_OnShowTokusyouhouButton) == 0x000001, "Wrong alignment on GeneralShoppingWidget_OnShowTokusyouhouButton");
static_assert(sizeof(GeneralShoppingWidget_OnShowTokusyouhouButton) == 0x000001, "Wrong size on GeneralShoppingWidget_OnShowTokusyouhouButton");
static_assert(offsetof(GeneralShoppingWidget_OnShowTokusyouhouButton, bShowButton) == 0x000000, "Member 'GeneralShoppingWidget_OnShowTokusyouhouButton::bShowButton' has a wrong offset!");

// Function OutGameModule.GeneralShoppingWidget.BP_GetBuyCount
// 0x0004 (0x0004 - 0x0000)
struct GeneralShoppingWidget_BP_GetBuyCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralShoppingWidget_BP_GetBuyCount) == 0x000004, "Wrong alignment on GeneralShoppingWidget_BP_GetBuyCount");
static_assert(sizeof(GeneralShoppingWidget_BP_GetBuyCount) == 0x000004, "Wrong size on GeneralShoppingWidget_BP_GetBuyCount");
static_assert(offsetof(GeneralShoppingWidget_BP_GetBuyCount, ReturnValue) == 0x000000, "Member 'GeneralShoppingWidget_BP_GetBuyCount::ReturnValue' has a wrong offset!");

// Function OutGameModule.GeneralShoppingWidget.BP_GetNotEnuogh
// 0x0001 (0x0001 - 0x0000)
struct GeneralShoppingWidget_BP_GetNotEnuogh final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralShoppingWidget_BP_GetNotEnuogh) == 0x000001, "Wrong alignment on GeneralShoppingWidget_BP_GetNotEnuogh");
static_assert(sizeof(GeneralShoppingWidget_BP_GetNotEnuogh) == 0x000001, "Wrong size on GeneralShoppingWidget_BP_GetNotEnuogh");
static_assert(offsetof(GeneralShoppingWidget_BP_GetNotEnuogh, ReturnValue) == 0x000000, "Member 'GeneralShoppingWidget_BP_GetNotEnuogh::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildApplicantListWindow.OnUpdateComplete
// 0x0004 (0x0004 - 0x0000)
struct GuildApplicantListWindow_OnUpdateComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildApplicantListWindow_OnUpdateComplete) == 0x000004, "Wrong alignment on GuildApplicantListWindow_OnUpdateComplete");
static_assert(sizeof(GuildApplicantListWindow_OnUpdateComplete) == 0x000004, "Wrong size on GuildApplicantListWindow_OnUpdateComplete");
static_assert(offsetof(GuildApplicantListWindow_OnUpdateComplete, RequestId) == 0x000000, "Member 'GuildApplicantListWindow_OnUpdateComplete::RequestId' has a wrong offset!");

// Function OutGameModule.GuildApplicantListWindow.RequestAcceptGuild
// 0x0010 (0x0010 - 0x0000)
struct GuildApplicantListWindow_RequestAcceptGuild final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildApplicantListWindow_RequestAcceptGuild) == 0x000008, "Wrong alignment on GuildApplicantListWindow_RequestAcceptGuild");
static_assert(sizeof(GuildApplicantListWindow_RequestAcceptGuild) == 0x000010, "Wrong size on GuildApplicantListWindow_RequestAcceptGuild");
static_assert(offsetof(GuildApplicantListWindow_RequestAcceptGuild, PlayerId) == 0x000000, "Member 'GuildApplicantListWindow_RequestAcceptGuild::PlayerId' has a wrong offset!");

// Function OutGameModule.GuildApplicantListWindow.RequestDenyGuild
// 0x0010 (0x0010 - 0x0000)
struct GuildApplicantListWindow_RequestDenyGuild final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildApplicantListWindow_RequestDenyGuild) == 0x000008, "Wrong alignment on GuildApplicantListWindow_RequestDenyGuild");
static_assert(sizeof(GuildApplicantListWindow_RequestDenyGuild) == 0x000010, "Wrong size on GuildApplicantListWindow_RequestDenyGuild");
static_assert(offsetof(GuildApplicantListWindow_RequestDenyGuild, PlayerId) == 0x000000, "Member 'GuildApplicantListWindow_RequestDenyGuild::PlayerId' has a wrong offset!");

// Function OutGameModule.GuildActivityStatusItemWidget.OnSetShowLikeRemainsView
// 0x0001 (0x0001 - 0x0000)
struct GuildActivityStatusItemWidget_OnSetShowLikeRemainsView final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildActivityStatusItemWidget_OnSetShowLikeRemainsView) == 0x000001, "Wrong alignment on GuildActivityStatusItemWidget_OnSetShowLikeRemainsView");
static_assert(sizeof(GuildActivityStatusItemWidget_OnSetShowLikeRemainsView) == 0x000001, "Wrong size on GuildActivityStatusItemWidget_OnSetShowLikeRemainsView");
static_assert(offsetof(GuildActivityStatusItemWidget_OnSetShowLikeRemainsView, bShow) == 0x000000, "Member 'GuildActivityStatusItemWidget_OnSetShowLikeRemainsView::bShow' has a wrong offset!");

// Function OutGameModule.GuildActivityStatusItemWidget.OnSetShowTimeView
// 0x0001 (0x0001 - 0x0000)
struct GuildActivityStatusItemWidget_OnSetShowTimeView final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildActivityStatusItemWidget_OnSetShowTimeView) == 0x000001, "Wrong alignment on GuildActivityStatusItemWidget_OnSetShowTimeView");
static_assert(sizeof(GuildActivityStatusItemWidget_OnSetShowTimeView) == 0x000001, "Wrong size on GuildActivityStatusItemWidget_OnSetShowTimeView");
static_assert(offsetof(GuildActivityStatusItemWidget_OnSetShowTimeView, bShow) == 0x000000, "Member 'GuildActivityStatusItemWidget_OnSetShowTimeView::bShow' has a wrong offset!");

// Function OutGameModule.GuildActivityStatusItemWidget.CanAddLike
// 0x0001 (0x0001 - 0x0000)
struct GuildActivityStatusItemWidget_CanAddLike final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildActivityStatusItemWidget_CanAddLike) == 0x000001, "Wrong alignment on GuildActivityStatusItemWidget_CanAddLike");
static_assert(sizeof(GuildActivityStatusItemWidget_CanAddLike) == 0x000001, "Wrong size on GuildActivityStatusItemWidget_CanAddLike");
static_assert(offsetof(GuildActivityStatusItemWidget_CanAddLike, ReturnValue) == 0x000000, "Member 'GuildActivityStatusItemWidget_CanAddLike::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildActivityStatusItemWidget.GetMyself
// 0x0001 (0x0001 - 0x0000)
struct GuildActivityStatusItemWidget_GetMyself final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildActivityStatusItemWidget_GetMyself) == 0x000001, "Wrong alignment on GuildActivityStatusItemWidget_GetMyself");
static_assert(sizeof(GuildActivityStatusItemWidget_GetMyself) == 0x000001, "Wrong size on GuildActivityStatusItemWidget_GetMyself");
static_assert(offsetof(GuildActivityStatusItemWidget_GetMyself, ReturnValue) == 0x000000, "Member 'GuildActivityStatusItemWidget_GetMyself::ReturnValue' has a wrong offset!");

// Function OutGameModule.GeneralPresetWidget.OnAddedToFocusPreset
// 0x0010 (0x0010 - 0x0000)
struct GeneralPresetWidget_OnAddedToFocusPreset final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneralPresetWidget_OnAddedToFocusPreset) == 0x000008, "Wrong alignment on GeneralPresetWidget_OnAddedToFocusPreset");
static_assert(sizeof(GeneralPresetWidget_OnAddedToFocusPreset) == 0x000010, "Wrong size on GeneralPresetWidget_OnAddedToFocusPreset");
static_assert(offsetof(GeneralPresetWidget_OnAddedToFocusPreset, Widget) == 0x000000, "Member 'GeneralPresetWidget_OnAddedToFocusPreset::Widget' has a wrong offset!");
static_assert(offsetof(GeneralPresetWidget_OnAddedToFocusPreset, InputType) == 0x000008, "Member 'GeneralPresetWidget_OnAddedToFocusPreset::InputType' has a wrong offset!");

// Function OutGameModule.GeneralPresetWidget.OnDecidePreset
// 0x0010 (0x0010 - 0x0000)
struct GeneralPresetWidget_OnDecidePreset final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneralPresetWidget_OnDecidePreset) == 0x000008, "Wrong alignment on GeneralPresetWidget_OnDecidePreset");
static_assert(sizeof(GeneralPresetWidget_OnDecidePreset) == 0x000010, "Wrong size on GeneralPresetWidget_OnDecidePreset");
static_assert(offsetof(GeneralPresetWidget_OnDecidePreset, Widget) == 0x000000, "Member 'GeneralPresetWidget_OnDecidePreset::Widget' has a wrong offset!");
static_assert(offsetof(GeneralPresetWidget_OnDecidePreset, InputType) == 0x000008, "Member 'GeneralPresetWidget_OnDecidePreset::InputType' has a wrong offset!");

// Function OutGameModule.GeneralPresetWidget.OnPressPreset
// 0x0010 (0x0010 - 0x0000)
struct GeneralPresetWidget_OnPressPreset final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneralPresetWidget_OnPressPreset) == 0x000008, "Wrong alignment on GeneralPresetWidget_OnPressPreset");
static_assert(sizeof(GeneralPresetWidget_OnPressPreset) == 0x000010, "Wrong size on GeneralPresetWidget_OnPressPreset");
static_assert(offsetof(GeneralPresetWidget_OnPressPreset, Widget) == 0x000000, "Member 'GeneralPresetWidget_OnPressPreset::Widget' has a wrong offset!");
static_assert(offsetof(GeneralPresetWidget_OnPressPreset, InputType) == 0x000008, "Member 'GeneralPresetWidget_OnPressPreset::InputType' has a wrong offset!");

// Function OutGameModule.GeneralPresetWidget.OnRemovedFromFocusPreset
// 0x0010 (0x0010 - 0x0000)
struct GeneralPresetWidget_OnRemovedFromFocusPreset final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneralPresetWidget_OnRemovedFromFocusPreset) == 0x000008, "Wrong alignment on GeneralPresetWidget_OnRemovedFromFocusPreset");
static_assert(sizeof(GeneralPresetWidget_OnRemovedFromFocusPreset) == 0x000010, "Wrong size on GeneralPresetWidget_OnRemovedFromFocusPreset");
static_assert(offsetof(GeneralPresetWidget_OnRemovedFromFocusPreset, Widget) == 0x000000, "Member 'GeneralPresetWidget_OnRemovedFromFocusPreset::Widget' has a wrong offset!");
static_assert(offsetof(GeneralPresetWidget_OnRemovedFromFocusPreset, InputType) == 0x000008, "Member 'GeneralPresetWidget_OnRemovedFromFocusPreset::InputType' has a wrong offset!");

// Function OutGameModule.GeneralPresetWidget.BP_GetCallButton
// 0x0008 (0x0008 - 0x0000)
struct GeneralPresetWidget_BP_GetCallButton final
{
public:
	class UWidgetButton*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralPresetWidget_BP_GetCallButton) == 0x000008, "Wrong alignment on GeneralPresetWidget_BP_GetCallButton");
static_assert(sizeof(GeneralPresetWidget_BP_GetCallButton) == 0x000008, "Wrong size on GeneralPresetWidget_BP_GetCallButton");
static_assert(offsetof(GeneralPresetWidget_BP_GetCallButton, ReturnValue) == 0x000000, "Member 'GeneralPresetWidget_BP_GetCallButton::ReturnValue' has a wrong offset!");

// Function OutGameModule.GeneralPresetWidget.BP_GetPresetIndex
// 0x0004 (0x0004 - 0x0000)
struct GeneralPresetWidget_BP_GetPresetIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralPresetWidget_BP_GetPresetIndex) == 0x000004, "Wrong alignment on GeneralPresetWidget_BP_GetPresetIndex");
static_assert(sizeof(GeneralPresetWidget_BP_GetPresetIndex) == 0x000004, "Wrong size on GeneralPresetWidget_BP_GetPresetIndex");
static_assert(offsetof(GeneralPresetWidget_BP_GetPresetIndex, ReturnValue) == 0x000000, "Member 'GeneralPresetWidget_BP_GetPresetIndex::ReturnValue' has a wrong offset!");

// Function OutGameModule.GeneralPresetWidget.BP_GetSaveButton
// 0x0008 (0x0008 - 0x0000)
struct GeneralPresetWidget_BP_GetSaveButton final
{
public:
	class UWidgetButton*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralPresetWidget_BP_GetSaveButton) == 0x000008, "Wrong alignment on GeneralPresetWidget_BP_GetSaveButton");
static_assert(sizeof(GeneralPresetWidget_BP_GetSaveButton) == 0x000008, "Wrong size on GeneralPresetWidget_BP_GetSaveButton");
static_assert(offsetof(GeneralPresetWidget_BP_GetSaveButton, ReturnValue) == 0x000000, "Member 'GeneralPresetWidget_BP_GetSaveButton::ReturnValue' has a wrong offset!");

// Function OutGameModule.CustomMatchTeamWidget.DoCustomTeamButtonNavigation
// 0x0001 (0x0001 - 0x0000)
struct CustomMatchTeamWidget_DoCustomTeamButtonNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMatchTeamWidget_DoCustomTeamButtonNavigation) == 0x000001, "Wrong alignment on CustomMatchTeamWidget_DoCustomTeamButtonNavigation");
static_assert(sizeof(CustomMatchTeamWidget_DoCustomTeamButtonNavigation) == 0x000001, "Wrong size on CustomMatchTeamWidget_DoCustomTeamButtonNavigation");
static_assert(offsetof(CustomMatchTeamWidget_DoCustomTeamButtonNavigation, UiNavigation) == 0x000000, "Member 'CustomMatchTeamWidget_DoCustomTeamButtonNavigation::UiNavigation' has a wrong offset!");

// Function OutGameModule.CustomMatchTeamWidget.DoCustomWidgetNavigation
// 0x0001 (0x0001 - 0x0000)
struct CustomMatchTeamWidget_DoCustomWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMatchTeamWidget_DoCustomWidgetNavigation) == 0x000001, "Wrong alignment on CustomMatchTeamWidget_DoCustomWidgetNavigation");
static_assert(sizeof(CustomMatchTeamWidget_DoCustomWidgetNavigation) == 0x000001, "Wrong size on CustomMatchTeamWidget_DoCustomWidgetNavigation");
static_assert(offsetof(CustomMatchTeamWidget_DoCustomWidgetNavigation, UiNavigation) == 0x000000, "Member 'CustomMatchTeamWidget_DoCustomWidgetNavigation::UiNavigation' has a wrong offset!");

// Function OutGameModule.CustomMatchTeamWidget.OnAddedToFocusEvent
// 0x0010 (0x0010 - 0x0000)
struct CustomMatchTeamWidget_OnAddedToFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomMatchTeamWidget_OnAddedToFocusEvent) == 0x000008, "Wrong alignment on CustomMatchTeamWidget_OnAddedToFocusEvent");
static_assert(sizeof(CustomMatchTeamWidget_OnAddedToFocusEvent) == 0x000010, "Wrong size on CustomMatchTeamWidget_OnAddedToFocusEvent");
static_assert(offsetof(CustomMatchTeamWidget_OnAddedToFocusEvent, Widget) == 0x000000, "Member 'CustomMatchTeamWidget_OnAddedToFocusEvent::Widget' has a wrong offset!");
static_assert(offsetof(CustomMatchTeamWidget_OnAddedToFocusEvent, InputType) == 0x000008, "Member 'CustomMatchTeamWidget_OnAddedToFocusEvent::InputType' has a wrong offset!");

// Function OutGameModule.CustomMatchTeamWidget.OnDecideKeyEvent
// 0x0028 (0x0028 - 0x0000)
struct CustomMatchTeamWidget_OnDecideKeyEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomMatchTeamWidget_OnDecideKeyEvent) == 0x000008, "Wrong alignment on CustomMatchTeamWidget_OnDecideKeyEvent");
static_assert(sizeof(CustomMatchTeamWidget_OnDecideKeyEvent) == 0x000028, "Wrong size on CustomMatchTeamWidget_OnDecideKeyEvent");
static_assert(offsetof(CustomMatchTeamWidget_OnDecideKeyEvent, Widget) == 0x000000, "Member 'CustomMatchTeamWidget_OnDecideKeyEvent::Widget' has a wrong offset!");
static_assert(offsetof(CustomMatchTeamWidget_OnDecideKeyEvent, Key) == 0x000008, "Member 'CustomMatchTeamWidget_OnDecideKeyEvent::Key' has a wrong offset!");
static_assert(offsetof(CustomMatchTeamWidget_OnDecideKeyEvent, InputType) == 0x000020, "Member 'CustomMatchTeamWidget_OnDecideKeyEvent::InputType' has a wrong offset!");

// Function OutGameModule.CustomMatchTeamWidget.OnDecideTeamButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct CustomMatchTeamWidget_OnDecideTeamButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomMatchTeamWidget_OnDecideTeamButtonEvent) == 0x000008, "Wrong alignment on CustomMatchTeamWidget_OnDecideTeamButtonEvent");
static_assert(sizeof(CustomMatchTeamWidget_OnDecideTeamButtonEvent) == 0x000010, "Wrong size on CustomMatchTeamWidget_OnDecideTeamButtonEvent");
static_assert(offsetof(CustomMatchTeamWidget_OnDecideTeamButtonEvent, Widget) == 0x000000, "Member 'CustomMatchTeamWidget_OnDecideTeamButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(CustomMatchTeamWidget_OnDecideTeamButtonEvent, InputType) == 0x000008, "Member 'CustomMatchTeamWidget_OnDecideTeamButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.CustomMatchTopWidget.GetCurrentLanguage
// 0x0008 (0x0008 - 0x0000)
struct CustomMatchTopWidget_GetCurrentLanguage final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMatchTopWidget_GetCurrentLanguage) == 0x000004, "Wrong alignment on CustomMatchTopWidget_GetCurrentLanguage");
static_assert(sizeof(CustomMatchTopWidget_GetCurrentLanguage) == 0x000008, "Wrong size on CustomMatchTopWidget_GetCurrentLanguage");
static_assert(offsetof(CustomMatchTopWidget_GetCurrentLanguage, ReturnValue) == 0x000000, "Member 'CustomMatchTopWidget_GetCurrentLanguage::ReturnValue' has a wrong offset!");

// Function OutGameModule.CustomMatchTopWidget.OnOpenSubMenu
// 0x0010 (0x0010 - 0x0000)
struct CustomMatchTopWidget_OnOpenSubMenu final
{
public:
	class UCustomMatchTeamItemWidget*             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHost;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomMatchTopWidget_OnOpenSubMenu) == 0x000008, "Wrong alignment on CustomMatchTopWidget_OnOpenSubMenu");
static_assert(sizeof(CustomMatchTopWidget_OnOpenSubMenu) == 0x000010, "Wrong size on CustomMatchTopWidget_OnOpenSubMenu");
static_assert(offsetof(CustomMatchTopWidget_OnOpenSubMenu, Widget) == 0x000000, "Member 'CustomMatchTopWidget_OnOpenSubMenu::Widget' has a wrong offset!");
static_assert(offsetof(CustomMatchTopWidget_OnOpenSubMenu, bHost) == 0x000008, "Member 'CustomMatchTopWidget_OnOpenSubMenu::bHost' has a wrong offset!");

// Function OutGameModule.CustomMatchTopWidget.OnOpenSubMenuTeamEdit
// 0x0010 (0x0010 - 0x0000)
struct CustomMatchTopWidget_OnOpenSubMenuTeamEdit final
{
public:
	class UWidgetBase*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRight;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomMatchTopWidget_OnOpenSubMenuTeamEdit) == 0x000008, "Wrong alignment on CustomMatchTopWidget_OnOpenSubMenuTeamEdit");
static_assert(sizeof(CustomMatchTopWidget_OnOpenSubMenuTeamEdit) == 0x000010, "Wrong size on CustomMatchTopWidget_OnOpenSubMenuTeamEdit");
static_assert(offsetof(CustomMatchTopWidget_OnOpenSubMenuTeamEdit, Widget) == 0x000000, "Member 'CustomMatchTopWidget_OnOpenSubMenuTeamEdit::Widget' has a wrong offset!");
static_assert(offsetof(CustomMatchTopWidget_OnOpenSubMenuTeamEdit, bRight) == 0x000008, "Member 'CustomMatchTopWidget_OnOpenSubMenuTeamEdit::bRight' has a wrong offset!");

// Function OutGameModule.CustomMatchTopWidget.OnOpenSubMenuTeamList
// 0x0010 (0x0010 - 0x0000)
struct CustomMatchTopWidget_OnOpenSubMenuTeamList final
{
public:
	class UCustomMatchTeamItemWidget*             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHost;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRight;                                            // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomMatchTopWidget_OnOpenSubMenuTeamList) == 0x000008, "Wrong alignment on CustomMatchTopWidget_OnOpenSubMenuTeamList");
static_assert(sizeof(CustomMatchTopWidget_OnOpenSubMenuTeamList) == 0x000010, "Wrong size on CustomMatchTopWidget_OnOpenSubMenuTeamList");
static_assert(offsetof(CustomMatchTopWidget_OnOpenSubMenuTeamList, Widget) == 0x000000, "Member 'CustomMatchTopWidget_OnOpenSubMenuTeamList::Widget' has a wrong offset!");
static_assert(offsetof(CustomMatchTopWidget_OnOpenSubMenuTeamList, bHost) == 0x000008, "Member 'CustomMatchTopWidget_OnOpenSubMenuTeamList::bHost' has a wrong offset!");
static_assert(offsetof(CustomMatchTopWidget_OnOpenSubMenuTeamList, bRight) == 0x000009, "Member 'CustomMatchTopWidget_OnOpenSubMenuTeamList::bRight' has a wrong offset!");

// Function OutGameModule.CustomMatchTopWidget.SetFocusTeamButton
// 0x0004 (0x0004 - 0x0000)
struct CustomMatchTopWidget_SetFocusTeamButton final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMatchTopWidget_SetFocusTeamButton) == 0x000004, "Wrong alignment on CustomMatchTopWidget_SetFocusTeamButton");
static_assert(sizeof(CustomMatchTopWidget_SetFocusTeamButton) == 0x000004, "Wrong size on CustomMatchTopWidget_SetFocusTeamButton");
static_assert(offsetof(CustomMatchTopWidget_SetFocusTeamButton, Num) == 0x000000, "Member 'CustomMatchTopWidget_SetFocusTeamButton::Num' has a wrong offset!");

// Function OutGameModule.GuildApplicantListItemWidget.OnSetLoginView
// 0x0001 (0x0001 - 0x0000)
struct GuildApplicantListItemWidget_OnSetLoginView final
{
public:
	bool                                          bLogin;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildApplicantListItemWidget_OnSetLoginView) == 0x000001, "Wrong alignment on GuildApplicantListItemWidget_OnSetLoginView");
static_assert(sizeof(GuildApplicantListItemWidget_OnSetLoginView) == 0x000001, "Wrong size on GuildApplicantListItemWidget_OnSetLoginView");
static_assert(offsetof(GuildApplicantListItemWidget_OnSetLoginView, bLogin) == 0x000000, "Member 'GuildApplicantListItemWidget_OnSetLoginView::bLogin' has a wrong offset!");

// Function OutGameModule.GuildApplicantListItemWidget.OnSetPlayerName
// 0x0018 (0x0018 - 0x0000)
struct GuildApplicantListItemWidget_OnSetPlayerName final
{
public:
	class FText                                   PlayerName;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildApplicantListItemWidget_OnSetPlayerName) == 0x000008, "Wrong alignment on GuildApplicantListItemWidget_OnSetPlayerName");
static_assert(sizeof(GuildApplicantListItemWidget_OnSetPlayerName) == 0x000018, "Wrong size on GuildApplicantListItemWidget_OnSetPlayerName");
static_assert(offsetof(GuildApplicantListItemWidget_OnSetPlayerName, PlayerName) == 0x000000, "Member 'GuildApplicantListItemWidget_OnSetPlayerName::PlayerName' has a wrong offset!");

// Function OutGameModule.GuildApplicantListItemWidget.OnSetTime
// 0x0008 (0x0008 - 0x0000)
struct GuildApplicantListItemWidget_OnSetTime final
{
public:
	struct FTimespan                              Timespan;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildApplicantListItemWidget_OnSetTime) == 0x000008, "Wrong alignment on GuildApplicantListItemWidget_OnSetTime");
static_assert(sizeof(GuildApplicantListItemWidget_OnSetTime) == 0x000008, "Wrong size on GuildApplicantListItemWidget_OnSetTime");
static_assert(offsetof(GuildApplicantListItemWidget_OnSetTime, Timespan) == 0x000000, "Member 'GuildApplicantListItemWidget_OnSetTime::Timespan' has a wrong offset!");

// Function OutGameModule.DeltaProgressBarWidget.BP_SetProgressValue
// 0x0008 (0x0008 - 0x0000)
struct DeltaProgressBarWidget_BP_SetProgressValue final
{
public:
	float                                         PreValue;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeltaProgressBarWidget_BP_SetProgressValue) == 0x000004, "Wrong alignment on DeltaProgressBarWidget_BP_SetProgressValue");
static_assert(sizeof(DeltaProgressBarWidget_BP_SetProgressValue) == 0x000008, "Wrong size on DeltaProgressBarWidget_BP_SetProgressValue");
static_assert(offsetof(DeltaProgressBarWidget_BP_SetProgressValue, PreValue) == 0x000000, "Member 'DeltaProgressBarWidget_BP_SetProgressValue::PreValue' has a wrong offset!");
static_assert(offsetof(DeltaProgressBarWidget_BP_SetProgressValue, MaxValue) == 0x000004, "Member 'DeltaProgressBarWidget_BP_SetProgressValue::MaxValue' has a wrong offset!");

// Function OutGameModule.DeltaProgressBarWidget.BP_SetProgressValueMaxArray
// 0x0018 (0x0018 - 0x0000)
struct DeltaProgressBarWidget_BP_SetProgressValueMaxArray final
{
public:
	float                                         PreValue;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NowValue;                                          // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 MaxValues;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeltaProgressBarWidget_BP_SetProgressValueMaxArray) == 0x000008, "Wrong alignment on DeltaProgressBarWidget_BP_SetProgressValueMaxArray");
static_assert(sizeof(DeltaProgressBarWidget_BP_SetProgressValueMaxArray) == 0x000018, "Wrong size on DeltaProgressBarWidget_BP_SetProgressValueMaxArray");
static_assert(offsetof(DeltaProgressBarWidget_BP_SetProgressValueMaxArray, PreValue) == 0x000000, "Member 'DeltaProgressBarWidget_BP_SetProgressValueMaxArray::PreValue' has a wrong offset!");
static_assert(offsetof(DeltaProgressBarWidget_BP_SetProgressValueMaxArray, NowValue) == 0x000004, "Member 'DeltaProgressBarWidget_BP_SetProgressValueMaxArray::NowValue' has a wrong offset!");
static_assert(offsetof(DeltaProgressBarWidget_BP_SetProgressValueMaxArray, MaxValues) == 0x000008, "Member 'DeltaProgressBarWidget_BP_SetProgressValueMaxArray::MaxValues' has a wrong offset!");

// Function OutGameModule.DeltaProgressBarWidget.BP_SetProgressValues
// 0x000C (0x000C - 0x0000)
struct DeltaProgressBarWidget_BP_SetProgressValues final
{
public:
	float                                         PreValue;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NowValue;                                          // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeltaProgressBarWidget_BP_SetProgressValues) == 0x000004, "Wrong alignment on DeltaProgressBarWidget_BP_SetProgressValues");
static_assert(sizeof(DeltaProgressBarWidget_BP_SetProgressValues) == 0x00000C, "Wrong size on DeltaProgressBarWidget_BP_SetProgressValues");
static_assert(offsetof(DeltaProgressBarWidget_BP_SetProgressValues, PreValue) == 0x000000, "Member 'DeltaProgressBarWidget_BP_SetProgressValues::PreValue' has a wrong offset!");
static_assert(offsetof(DeltaProgressBarWidget_BP_SetProgressValues, NowValue) == 0x000004, "Member 'DeltaProgressBarWidget_BP_SetProgressValues::NowValue' has a wrong offset!");
static_assert(offsetof(DeltaProgressBarWidget_BP_SetProgressValues, MaxValue) == 0x000008, "Member 'DeltaProgressBarWidget_BP_SetProgressValues::MaxValue' has a wrong offset!");

// DelegateFunction OutGameModule.DeltaProgressBarWidget.LevelUpDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct DeltaProgressBarWidget_LevelUpDelegate__DelegateSignature final
{
public:
	int32                                         LevelCount;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeltaProgressBarWidget_LevelUpDelegate__DelegateSignature) == 0x000004, "Wrong alignment on DeltaProgressBarWidget_LevelUpDelegate__DelegateSignature");
static_assert(sizeof(DeltaProgressBarWidget_LevelUpDelegate__DelegateSignature) == 0x000004, "Wrong size on DeltaProgressBarWidget_LevelUpDelegate__DelegateSignature");
static_assert(offsetof(DeltaProgressBarWidget_LevelUpDelegate__DelegateSignature, LevelCount) == 0x000000, "Member 'DeltaProgressBarWidget_LevelUpDelegate__DelegateSignature::LevelCount' has a wrong offset!");

// Function OutGameModule.GuildDetailWindow.GetGuildMemberBlock
// 0x0001 (0x0001 - 0x0000)
struct GuildDetailWindow_GetGuildMemberBlock final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildDetailWindow_GetGuildMemberBlock) == 0x000001, "Wrong alignment on GuildDetailWindow_GetGuildMemberBlock");
static_assert(sizeof(GuildDetailWindow_GetGuildMemberBlock) == 0x000001, "Wrong size on GuildDetailWindow_GetGuildMemberBlock");
static_assert(offsetof(GuildDetailWindow_GetGuildMemberBlock, ReturnValue) == 0x000000, "Member 'GuildDetailWindow_GetGuildMemberBlock::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildDetailWindow.OnApplyGuild
// 0x0001 (0x0001 - 0x0000)
struct GuildDetailWindow_OnApplyGuild final
{
public:
	bool                                          bApplyGuild;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildDetailWindow_OnApplyGuild) == 0x000001, "Wrong alignment on GuildDetailWindow_OnApplyGuild");
static_assert(sizeof(GuildDetailWindow_OnApplyGuild) == 0x000001, "Wrong size on GuildDetailWindow_OnApplyGuild");
static_assert(offsetof(GuildDetailWindow_OnApplyGuild, bApplyGuild) == 0x000000, "Member 'GuildDetailWindow_OnApplyGuild::bApplyGuild' has a wrong offset!");

// Function OutGameModule.GuildDetailWindow.OnGuildLevel
// 0x0004 (0x0004 - 0x0000)
struct GuildDetailWindow_OnGuildLevel final
{
public:
	int32                                         GuildLevel;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildDetailWindow_OnGuildLevel) == 0x000004, "Wrong alignment on GuildDetailWindow_OnGuildLevel");
static_assert(sizeof(GuildDetailWindow_OnGuildLevel) == 0x000004, "Wrong size on GuildDetailWindow_OnGuildLevel");
static_assert(offsetof(GuildDetailWindow_OnGuildLevel, GuildLevel) == 0x000000, "Member 'GuildDetailWindow_OnGuildLevel::GuildLevel' has a wrong offset!");

// Function OutGameModule.GuildDetailWindow.OnLoadComplete
// 0x0004 (0x0004 - 0x0000)
struct GuildDetailWindow_OnLoadComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildDetailWindow_OnLoadComplete) == 0x000004, "Wrong alignment on GuildDetailWindow_OnLoadComplete");
static_assert(sizeof(GuildDetailWindow_OnLoadComplete) == 0x000004, "Wrong size on GuildDetailWindow_OnLoadComplete");
static_assert(offsetof(GuildDetailWindow_OnLoadComplete, RequestId) == 0x000000, "Member 'GuildDetailWindow_OnLoadComplete::RequestId' has a wrong offset!");

// Function OutGameModule.GuildDetailWindow.OnSetLeaderNameText
// 0x0018 (0x0018 - 0x0000)
struct GuildDetailWindow_OnSetLeaderNameText final
{
public:
	class FText                                   LeaderNameText;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildDetailWindow_OnSetLeaderNameText) == 0x000008, "Wrong alignment on GuildDetailWindow_OnSetLeaderNameText");
static_assert(sizeof(GuildDetailWindow_OnSetLeaderNameText) == 0x000018, "Wrong size on GuildDetailWindow_OnSetLeaderNameText");
static_assert(offsetof(GuildDetailWindow_OnSetLeaderNameText, LeaderNameText) == 0x000000, "Member 'GuildDetailWindow_OnSetLeaderNameText::LeaderNameText' has a wrong offset!");

// Function OutGameModule.GuildDetailWindow.OnSetPolicyText
// 0x0018 (0x0018 - 0x0000)
struct GuildDetailWindow_OnSetPolicyText final
{
public:
	class FText                                   PolicyText;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildDetailWindow_OnSetPolicyText) == 0x000008, "Wrong alignment on GuildDetailWindow_OnSetPolicyText");
static_assert(sizeof(GuildDetailWindow_OnSetPolicyText) == 0x000018, "Wrong size on GuildDetailWindow_OnSetPolicyText");
static_assert(offsetof(GuildDetailWindow_OnSetPolicyText, PolicyText) == 0x000000, "Member 'GuildDetailWindow_OnSetPolicyText::PolicyText' has a wrong offset!");

// Function OutGameModule.GuildDetailWindow.OnSetTermsText
// 0x0018 (0x0018 - 0x0000)
struct GuildDetailWindow_OnSetTermsText final
{
public:
	class FText                                   TermsText;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildDetailWindow_OnSetTermsText) == 0x000008, "Wrong alignment on GuildDetailWindow_OnSetTermsText");
static_assert(sizeof(GuildDetailWindow_OnSetTermsText) == 0x000018, "Wrong size on GuildDetailWindow_OnSetTermsText");
static_assert(offsetof(GuildDetailWindow_OnSetTermsText, TermsText) == 0x000000, "Member 'GuildDetailWindow_OnSetTermsText::TermsText' has a wrong offset!");

// Function OutGameModule.GuildDetailWindow.OnShowLoadingView
// 0x0001 (0x0001 - 0x0000)
struct GuildDetailWindow_OnShowLoadingView final
{
public:
	bool                                          bLoading;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildDetailWindow_OnShowLoadingView) == 0x000001, "Wrong alignment on GuildDetailWindow_OnShowLoadingView");
static_assert(sizeof(GuildDetailWindow_OnShowLoadingView) == 0x000001, "Wrong size on GuildDetailWindow_OnShowLoadingView");
static_assert(offsetof(GuildDetailWindow_OnShowLoadingView, bLoading) == 0x000000, "Member 'GuildDetailWindow_OnShowLoadingView::bLoading' has a wrong offset!");

// Function OutGameModule.GuildDetailWindow.OnUpdateComplete
// 0x0004 (0x0004 - 0x0000)
struct GuildDetailWindow_OnUpdateComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildDetailWindow_OnUpdateComplete) == 0x000004, "Wrong alignment on GuildDetailWindow_OnUpdateComplete");
static_assert(sizeof(GuildDetailWindow_OnUpdateComplete) == 0x000004, "Wrong size on GuildDetailWindow_OnUpdateComplete");
static_assert(offsetof(GuildDetailWindow_OnUpdateComplete, RequestId) == 0x000000, "Member 'GuildDetailWindow_OnUpdateComplete::RequestId' has a wrong offset!");

// Function OutGameModule.GuildDetailWindow.RequestApplyGuild
// 0x0001 (0x0001 - 0x0000)
struct GuildDetailWindow_RequestApplyGuild final
{
public:
	bool                                          bSendJoinRequest;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildDetailWindow_RequestApplyGuild) == 0x000001, "Wrong alignment on GuildDetailWindow_RequestApplyGuild");
static_assert(sizeof(GuildDetailWindow_RequestApplyGuild) == 0x000001, "Wrong size on GuildDetailWindow_RequestApplyGuild");
static_assert(offsetof(GuildDetailWindow_RequestApplyGuild, bSendJoinRequest) == 0x000000, "Member 'GuildDetailWindow_RequestApplyGuild::bSendJoinRequest' has a wrong offset!");

// Function OutGameModule.GuildDetailWindow.RequestRecommendNotificationKpi
// 0x0001 (0x0001 - 0x0000)
struct GuildDetailWindow_RequestRecommendNotificationKpi final
{
public:
	bool                                          bRejection;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildDetailWindow_RequestRecommendNotificationKpi) == 0x000001, "Wrong alignment on GuildDetailWindow_RequestRecommendNotificationKpi");
static_assert(sizeof(GuildDetailWindow_RequestRecommendNotificationKpi) == 0x000001, "Wrong size on GuildDetailWindow_RequestRecommendNotificationKpi");
static_assert(offsetof(GuildDetailWindow_RequestRecommendNotificationKpi, bRejection) == 0x000000, "Member 'GuildDetailWindow_RequestRecommendNotificationKpi::bRejection' has a wrong offset!");

// Function OutGameModule.GuildDetailWindow.GetGuildId
// 0x0010 (0x0010 - 0x0000)
struct GuildDetailWindow_GetGuildId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildDetailWindow_GetGuildId) == 0x000008, "Wrong alignment on GuildDetailWindow_GetGuildId");
static_assert(sizeof(GuildDetailWindow_GetGuildId) == 0x000010, "Wrong size on GuildDetailWindow_GetGuildId");
static_assert(offsetof(GuildDetailWindow_GetGuildId, ReturnValue) == 0x000000, "Member 'GuildDetailWindow_GetGuildId::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildDetailWindow.GetGuildName
// 0x0010 (0x0010 - 0x0000)
struct GuildDetailWindow_GetGuildName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildDetailWindow_GetGuildName) == 0x000008, "Wrong alignment on GuildDetailWindow_GetGuildName");
static_assert(sizeof(GuildDetailWindow_GetGuildName) == 0x000010, "Wrong size on GuildDetailWindow_GetGuildName");
static_assert(offsetof(GuildDetailWindow_GetGuildName, ReturnValue) == 0x000000, "Member 'GuildDetailWindow_GetGuildName::ReturnValue' has a wrong offset!");

// Function OutGameModule.DetailsEventContents.OnDecideEvent
// 0x0008 (0x0008 - 0x0000)
struct DetailsEventContents_OnDecideEvent final
{
public:
	class UEventItemEntryObject*                  SelectObject;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DetailsEventContents_OnDecideEvent) == 0x000008, "Wrong alignment on DetailsEventContents_OnDecideEvent");
static_assert(sizeof(DetailsEventContents_OnDecideEvent) == 0x000008, "Wrong size on DetailsEventContents_OnDecideEvent");
static_assert(offsetof(DetailsEventContents_OnDecideEvent, SelectObject) == 0x000000, "Member 'DetailsEventContents_OnDecideEvent::SelectObject' has a wrong offset!");

// Function OutGameModule.GuildCardWidget.OnSetEmblemIcon
// 0x0004 (0x0004 - 0x0000)
struct GuildCardWidget_OnSetEmblemIcon final
{
public:
	int32                                         GuildEmblemCode;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildCardWidget_OnSetEmblemIcon) == 0x000004, "Wrong alignment on GuildCardWidget_OnSetEmblemIcon");
static_assert(sizeof(GuildCardWidget_OnSetEmblemIcon) == 0x000004, "Wrong size on GuildCardWidget_OnSetEmblemIcon");
static_assert(offsetof(GuildCardWidget_OnSetEmblemIcon, GuildEmblemCode) == 0x000000, "Member 'GuildCardWidget_OnSetEmblemIcon::GuildEmblemCode' has a wrong offset!");

// Function OutGameModule.GuildCardWidget.OnSetGuildIdText
// 0x0018 (0x0018 - 0x0000)
struct GuildCardWidget_OnSetGuildIdText final
{
public:
	class FText                                   GuildId;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildCardWidget_OnSetGuildIdText) == 0x000008, "Wrong alignment on GuildCardWidget_OnSetGuildIdText");
static_assert(sizeof(GuildCardWidget_OnSetGuildIdText) == 0x000018, "Wrong size on GuildCardWidget_OnSetGuildIdText");
static_assert(offsetof(GuildCardWidget_OnSetGuildIdText, GuildId) == 0x000000, "Member 'GuildCardWidget_OnSetGuildIdText::GuildId' has a wrong offset!");

// Function OutGameModule.GuildCardWidget.OnSetGuildNameText
// 0x0018 (0x0018 - 0x0000)
struct GuildCardWidget_OnSetGuildNameText final
{
public:
	class FText                                   GuildName;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildCardWidget_OnSetGuildNameText) == 0x000008, "Wrong alignment on GuildCardWidget_OnSetGuildNameText");
static_assert(sizeof(GuildCardWidget_OnSetGuildNameText) == 0x000018, "Wrong size on GuildCardWidget_OnSetGuildNameText");
static_assert(offsetof(GuildCardWidget_OnSetGuildNameText, GuildName) == 0x000000, "Member 'GuildCardWidget_OnSetGuildNameText::GuildName' has a wrong offset!");

// Function OutGameModule.GuildCardWidget.OnSetProfileText
// 0x0018 (0x0018 - 0x0000)
struct GuildCardWidget_OnSetProfileText final
{
public:
	class FText                                   ProfileText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildCardWidget_OnSetProfileText) == 0x000008, "Wrong alignment on GuildCardWidget_OnSetProfileText");
static_assert(sizeof(GuildCardWidget_OnSetProfileText) == 0x000018, "Wrong size on GuildCardWidget_OnSetProfileText");
static_assert(offsetof(GuildCardWidget_OnSetProfileText, ProfileText) == 0x000000, "Member 'GuildCardWidget_OnSetProfileText::ProfileText' has a wrong offset!");

// Function OutGameModule.GuildCardWidget.SetGuildCardView
// 0x0038 (0x0038 - 0x0000)
struct GuildCardWidget_SetGuildCardView final
{
public:
	class FString                                 GuildName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildSearchId;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildProfile;                                      // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildEmblemCode;                                   // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GuildCardWidget_SetGuildCardView) == 0x000008, "Wrong alignment on GuildCardWidget_SetGuildCardView");
static_assert(sizeof(GuildCardWidget_SetGuildCardView) == 0x000038, "Wrong size on GuildCardWidget_SetGuildCardView");
static_assert(offsetof(GuildCardWidget_SetGuildCardView, GuildName) == 0x000000, "Member 'GuildCardWidget_SetGuildCardView::GuildName' has a wrong offset!");
static_assert(offsetof(GuildCardWidget_SetGuildCardView, GuildSearchId) == 0x000010, "Member 'GuildCardWidget_SetGuildCardView::GuildSearchId' has a wrong offset!");
static_assert(offsetof(GuildCardWidget_SetGuildCardView, GuildProfile) == 0x000020, "Member 'GuildCardWidget_SetGuildCardView::GuildProfile' has a wrong offset!");
static_assert(offsetof(GuildCardWidget_SetGuildCardView, GuildEmblemCode) == 0x000030, "Member 'GuildCardWidget_SetGuildCardView::GuildEmblemCode' has a wrong offset!");

// Function OutGameModule.GuildCardWidget.SetSelect
// 0x0001 (0x0001 - 0x0000)
struct GuildCardWidget_SetSelect final
{
public:
	bool                                          bSelect;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildCardWidget_SetSelect) == 0x000001, "Wrong alignment on GuildCardWidget_SetSelect");
static_assert(sizeof(GuildCardWidget_SetSelect) == 0x000001, "Wrong size on GuildCardWidget_SetSelect");
static_assert(offsetof(GuildCardWidget_SetSelect, bSelect) == 0x000000, "Member 'GuildCardWidget_SetSelect::bSelect' has a wrong offset!");

// Function OutGameModule.DetailsRankingContentsBase.DoCustomWidgetNavigation
// 0x0001 (0x0001 - 0x0000)
struct DetailsRankingContentsBase_DoCustomWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DetailsRankingContentsBase_DoCustomWidgetNavigation) == 0x000001, "Wrong alignment on DetailsRankingContentsBase_DoCustomWidgetNavigation");
static_assert(sizeof(DetailsRankingContentsBase_DoCustomWidgetNavigation) == 0x000001, "Wrong size on DetailsRankingContentsBase_DoCustomWidgetNavigation");
static_assert(offsetof(DetailsRankingContentsBase_DoCustomWidgetNavigation, UiNavigation) == 0x000000, "Member 'DetailsRankingContentsBase_DoCustomWidgetNavigation::UiNavigation' has a wrong offset!");

// Function OutGameModule.DetailsRankingContentsBase.OnAddedToFocusEvent
// 0x0010 (0x0010 - 0x0000)
struct DetailsRankingContentsBase_OnAddedToFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DetailsRankingContentsBase_OnAddedToFocusEvent) == 0x000008, "Wrong alignment on DetailsRankingContentsBase_OnAddedToFocusEvent");
static_assert(sizeof(DetailsRankingContentsBase_OnAddedToFocusEvent) == 0x000010, "Wrong size on DetailsRankingContentsBase_OnAddedToFocusEvent");
static_assert(offsetof(DetailsRankingContentsBase_OnAddedToFocusEvent, Widget) == 0x000000, "Member 'DetailsRankingContentsBase_OnAddedToFocusEvent::Widget' has a wrong offset!");
static_assert(offsetof(DetailsRankingContentsBase_OnAddedToFocusEvent, InputType) == 0x000008, "Member 'DetailsRankingContentsBase_OnAddedToFocusEvent::InputType' has a wrong offset!");

// Function OutGameModule.DetailsRankingContentsBase.OnCloseTutorialWindow
// 0x0001 (0x0001 - 0x0000)
struct DetailsRankingContentsBase_OnCloseTutorialWindow final
{
public:
	ETutorialPopupScene                           Sence;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DetailsRankingContentsBase_OnCloseTutorialWindow) == 0x000001, "Wrong alignment on DetailsRankingContentsBase_OnCloseTutorialWindow");
static_assert(sizeof(DetailsRankingContentsBase_OnCloseTutorialWindow) == 0x000001, "Wrong size on DetailsRankingContentsBase_OnCloseTutorialWindow");
static_assert(offsetof(DetailsRankingContentsBase_OnCloseTutorialWindow, Sence) == 0x000000, "Member 'DetailsRankingContentsBase_OnCloseTutorialWindow::Sence' has a wrong offset!");

// Function OutGameModule.DetailsRankingContentsBase.OnLoadComplete
// 0x0004 (0x0004 - 0x0000)
struct DetailsRankingContentsBase_OnLoadComplete final
{
public:
	int32                                         RequestCode;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DetailsRankingContentsBase_OnLoadComplete) == 0x000004, "Wrong alignment on DetailsRankingContentsBase_OnLoadComplete");
static_assert(sizeof(DetailsRankingContentsBase_OnLoadComplete) == 0x000004, "Wrong size on DetailsRankingContentsBase_OnLoadComplete");
static_assert(offsetof(DetailsRankingContentsBase_OnLoadComplete, RequestCode) == 0x000000, "Member 'DetailsRankingContentsBase_OnLoadComplete::RequestCode' has a wrong offset!");

// Function OutGameModule.DetailsRankingContentsBase.RemoveFocusEvent
// 0x0010 (0x0010 - 0x0000)
struct DetailsRankingContentsBase_RemoveFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DetailsRankingContentsBase_RemoveFocusEvent) == 0x000008, "Wrong alignment on DetailsRankingContentsBase_RemoveFocusEvent");
static_assert(sizeof(DetailsRankingContentsBase_RemoveFocusEvent) == 0x000010, "Wrong size on DetailsRankingContentsBase_RemoveFocusEvent");
static_assert(offsetof(DetailsRankingContentsBase_RemoveFocusEvent, Widget) == 0x000000, "Member 'DetailsRankingContentsBase_RemoveFocusEvent::Widget' has a wrong offset!");
static_assert(offsetof(DetailsRankingContentsBase_RemoveFocusEvent, InputType) == 0x000008, "Member 'DetailsRankingContentsBase_RemoveFocusEvent::InputType' has a wrong offset!");

// Function OutGameModule.DetailsRankingContentsBase.RemunerationNavigation
// 0x0001 (0x0001 - 0x0000)
struct DetailsRankingContentsBase_RemunerationNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DetailsRankingContentsBase_RemunerationNavigation) == 0x000001, "Wrong alignment on DetailsRankingContentsBase_RemunerationNavigation");
static_assert(sizeof(DetailsRankingContentsBase_RemunerationNavigation) == 0x000001, "Wrong size on DetailsRankingContentsBase_RemunerationNavigation");
static_assert(offsetof(DetailsRankingContentsBase_RemunerationNavigation, UiNavigation) == 0x000000, "Member 'DetailsRankingContentsBase_RemunerationNavigation::UiNavigation' has a wrong offset!");

// Function OutGameModule.DetailsRankingContents.ButtonBind
// 0x0008 (0x0008 - 0x0000)
struct DetailsRankingContents_ButtonBind final
{
public:
	class UWidgetButton*                          Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DetailsRankingContents_ButtonBind) == 0x000008, "Wrong alignment on DetailsRankingContents_ButtonBind");
static_assert(sizeof(DetailsRankingContents_ButtonBind) == 0x000008, "Wrong size on DetailsRankingContents_ButtonBind");
static_assert(offsetof(DetailsRankingContents_ButtonBind, Button) == 0x000000, "Member 'DetailsRankingContents_ButtonBind::Button' has a wrong offset!");

// Function OutGameModule.DetailsRankingContents.UpdateList
// 0x0008 (0x0008 - 0x0000)
struct DetailsRankingContents_UpdateList final
{
public:
	int32                                         NewIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFocus;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DetailsRankingContents_UpdateList) == 0x000004, "Wrong alignment on DetailsRankingContents_UpdateList");
static_assert(sizeof(DetailsRankingContents_UpdateList) == 0x000008, "Wrong size on DetailsRankingContents_UpdateList");
static_assert(offsetof(DetailsRankingContents_UpdateList, NewIndex) == 0x000000, "Member 'DetailsRankingContents_UpdateList::NewIndex' has a wrong offset!");
static_assert(offsetof(DetailsRankingContents_UpdateList, IsFocus) == 0x000004, "Member 'DetailsRankingContents_UpdateList::IsFocus' has a wrong offset!");

// Function OutGameModule.DetailsRankingContents.IsOpen
// 0x0001 (0x0001 - 0x0000)
struct DetailsRankingContents_IsOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DetailsRankingContents_IsOpen) == 0x000001, "Wrong alignment on DetailsRankingContents_IsOpen");
static_assert(sizeof(DetailsRankingContents_IsOpen) == 0x000001, "Wrong size on DetailsRankingContents_IsOpen");
static_assert(offsetof(DetailsRankingContents_IsOpen, ReturnValue) == 0x000000, "Member 'DetailsRankingContents_IsOpen::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildPageWidgetBase.BP_SetGuildTop
// 0x0008 (0x0008 - 0x0000)
struct GuildPageWidgetBase_BP_SetGuildTop final
{
public:
	class UGuildTopWidget*                        GuildTopWidget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildPageWidgetBase_BP_SetGuildTop) == 0x000008, "Wrong alignment on GuildPageWidgetBase_BP_SetGuildTop");
static_assert(sizeof(GuildPageWidgetBase_BP_SetGuildTop) == 0x000008, "Wrong size on GuildPageWidgetBase_BP_SetGuildTop");
static_assert(offsetof(GuildPageWidgetBase_BP_SetGuildTop, GuildTopWidget) == 0x000000, "Member 'GuildPageWidgetBase_BP_SetGuildTop::GuildTopWidget' has a wrong offset!");

// Function OutGameModule.GuildActivityStatusWidget.AddLike
// 0x0010 (0x0010 - 0x0000)
struct GuildActivityStatusWidget_AddLike final
{
public:
	class UGuildActivityStatusItemWidget*         GuildActivityStatusItemWidget;                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GuildActivityStatusWidget_AddLike) == 0x000008, "Wrong alignment on GuildActivityStatusWidget_AddLike");
static_assert(sizeof(GuildActivityStatusWidget_AddLike) == 0x000010, "Wrong size on GuildActivityStatusWidget_AddLike");
static_assert(offsetof(GuildActivityStatusWidget_AddLike, GuildActivityStatusItemWidget) == 0x000000, "Member 'GuildActivityStatusWidget_AddLike::GuildActivityStatusItemWidget' has a wrong offset!");
static_assert(offsetof(GuildActivityStatusWidget_AddLike, ReturnValue) == 0x000008, "Member 'GuildActivityStatusWidget_AddLike::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildActivityStatusWidget.OnLoadComplete
// 0x0004 (0x0004 - 0x0000)
struct GuildActivityStatusWidget_OnLoadComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildActivityStatusWidget_OnLoadComplete) == 0x000004, "Wrong alignment on GuildActivityStatusWidget_OnLoadComplete");
static_assert(sizeof(GuildActivityStatusWidget_OnLoadComplete) == 0x000004, "Wrong size on GuildActivityStatusWidget_OnLoadComplete");
static_assert(offsetof(GuildActivityStatusWidget_OnLoadComplete, RequestId) == 0x000000, "Member 'GuildActivityStatusWidget_OnLoadComplete::RequestId' has a wrong offset!");

// Function OutGameModule.GuildActivityStatusWidget.OnUpdateComplete
// 0x0004 (0x0004 - 0x0000)
struct GuildActivityStatusWidget_OnUpdateComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildActivityStatusWidget_OnUpdateComplete) == 0x000004, "Wrong alignment on GuildActivityStatusWidget_OnUpdateComplete");
static_assert(sizeof(GuildActivityStatusWidget_OnUpdateComplete) == 0x000004, "Wrong size on GuildActivityStatusWidget_OnUpdateComplete");
static_assert(offsetof(GuildActivityStatusWidget_OnUpdateComplete, RequestId) == 0x000000, "Member 'GuildActivityStatusWidget_OnUpdateComplete::RequestId' has a wrong offset!");

// Function OutGameModule.EventBannerTitleWidget.BP_UpdateImage
// 0x0001 (0x0001 - 0x0000)
struct EventBannerTitleWidget_BP_UpdateImage final
{
public:
	EEventCategory                                Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventBannerTitleWidget_BP_UpdateImage) == 0x000001, "Wrong alignment on EventBannerTitleWidget_BP_UpdateImage");
static_assert(sizeof(EventBannerTitleWidget_BP_UpdateImage) == 0x000001, "Wrong size on EventBannerTitleWidget_BP_UpdateImage");
static_assert(offsetof(EventBannerTitleWidget_BP_UpdateImage, Category) == 0x000000, "Member 'EventBannerTitleWidget_BP_UpdateImage::Category' has a wrong offset!");

// Function OutGameModule.EventButtonListWidget.DoCustomWidgetNavigation
// 0x0001 (0x0001 - 0x0000)
struct EventButtonListWidget_DoCustomWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventButtonListWidget_DoCustomWidgetNavigation) == 0x000001, "Wrong alignment on EventButtonListWidget_DoCustomWidgetNavigation");
static_assert(sizeof(EventButtonListWidget_DoCustomWidgetNavigation) == 0x000001, "Wrong size on EventButtonListWidget_DoCustomWidgetNavigation");
static_assert(offsetof(EventButtonListWidget_DoCustomWidgetNavigation, UiNavigation) == 0x000000, "Member 'EventButtonListWidget_DoCustomWidgetNavigation::UiNavigation' has a wrong offset!");

// Function OutGameModule.EventButtonListWidget.OnDicedMissionButton
// 0x0010 (0x0010 - 0x0000)
struct EventButtonListWidget_OnDicedMissionButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventButtonListWidget_OnDicedMissionButton) == 0x000008, "Wrong alignment on EventButtonListWidget_OnDicedMissionButton");
static_assert(sizeof(EventButtonListWidget_OnDicedMissionButton) == 0x000010, "Wrong size on EventButtonListWidget_OnDicedMissionButton");
static_assert(offsetof(EventButtonListWidget_OnDicedMissionButton, Widget) == 0x000000, "Member 'EventButtonListWidget_OnDicedMissionButton::Widget' has a wrong offset!");
static_assert(offsetof(EventButtonListWidget_OnDicedMissionButton, InputType) == 0x000008, "Member 'EventButtonListWidget_OnDicedMissionButton::InputType' has a wrong offset!");

// Function OutGameModule.EventButtonListWidget.OnDicedRewardButton
// 0x0010 (0x0010 - 0x0000)
struct EventButtonListWidget_OnDicedRewardButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventButtonListWidget_OnDicedRewardButton) == 0x000008, "Wrong alignment on EventButtonListWidget_OnDicedRewardButton");
static_assert(sizeof(EventButtonListWidget_OnDicedRewardButton) == 0x000010, "Wrong size on EventButtonListWidget_OnDicedRewardButton");
static_assert(offsetof(EventButtonListWidget_OnDicedRewardButton, Widget) == 0x000000, "Member 'EventButtonListWidget_OnDicedRewardButton::Widget' has a wrong offset!");
static_assert(offsetof(EventButtonListWidget_OnDicedRewardButton, InputType) == 0x000008, "Member 'EventButtonListWidget_OnDicedRewardButton::InputType' has a wrong offset!");

// Function OutGameModule.EventButtonListWidget.OnDicedShopButton
// 0x0010 (0x0010 - 0x0000)
struct EventButtonListWidget_OnDicedShopButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventButtonListWidget_OnDicedShopButton) == 0x000008, "Wrong alignment on EventButtonListWidget_OnDicedShopButton");
static_assert(sizeof(EventButtonListWidget_OnDicedShopButton) == 0x000010, "Wrong size on EventButtonListWidget_OnDicedShopButton");
static_assert(offsetof(EventButtonListWidget_OnDicedShopButton, Widget) == 0x000000, "Member 'EventButtonListWidget_OnDicedShopButton::Widget' has a wrong offset!");
static_assert(offsetof(EventButtonListWidget_OnDicedShopButton, InputType) == 0x000008, "Member 'EventButtonListWidget_OnDicedShopButton::InputType' has a wrong offset!");

// Function OutGameModule.EventButtonListWidget.OnDicedSpecialEffectButton
// 0x0010 (0x0010 - 0x0000)
struct EventButtonListWidget_OnDicedSpecialEffectButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventButtonListWidget_OnDicedSpecialEffectButton) == 0x000008, "Wrong alignment on EventButtonListWidget_OnDicedSpecialEffectButton");
static_assert(sizeof(EventButtonListWidget_OnDicedSpecialEffectButton) == 0x000010, "Wrong size on EventButtonListWidget_OnDicedSpecialEffectButton");
static_assert(offsetof(EventButtonListWidget_OnDicedSpecialEffectButton, Widget) == 0x000000, "Member 'EventButtonListWidget_OnDicedSpecialEffectButton::Widget' has a wrong offset!");
static_assert(offsetof(EventButtonListWidget_OnDicedSpecialEffectButton, InputType) == 0x000008, "Member 'EventButtonListWidget_OnDicedSpecialEffectButton::InputType' has a wrong offset!");

// Function OutGameModule.EventItemListWidget.OnDecideEvent
// 0x0010 (0x0010 - 0x0000)
struct EventItemListWidget_OnDecideEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventItemListWidget_OnDecideEvent) == 0x000008, "Wrong alignment on EventItemListWidget_OnDecideEvent");
static_assert(sizeof(EventItemListWidget_OnDecideEvent) == 0x000010, "Wrong size on EventItemListWidget_OnDecideEvent");
static_assert(offsetof(EventItemListWidget_OnDecideEvent, Widget) == 0x000000, "Member 'EventItemListWidget_OnDecideEvent::Widget' has a wrong offset!");
static_assert(offsetof(EventItemListWidget_OnDecideEvent, InputType) == 0x000008, "Member 'EventItemListWidget_OnDecideEvent::InputType' has a wrong offset!");

// DelegateFunction OutGameModule.EventItemListWidget.OnDecideEventDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct EventItemListWidget_OnDecideEventDelegate__DelegateSignature final
{
public:
	class UEventItemEntryObject*                  EventItemEntryObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventItemListWidget_OnDecideEventDelegate__DelegateSignature) == 0x000008, "Wrong alignment on EventItemListWidget_OnDecideEventDelegate__DelegateSignature");
static_assert(sizeof(EventItemListWidget_OnDecideEventDelegate__DelegateSignature) == 0x000008, "Wrong size on EventItemListWidget_OnDecideEventDelegate__DelegateSignature");
static_assert(offsetof(EventItemListWidget_OnDecideEventDelegate__DelegateSignature, EventItemEntryObject) == 0x000000, "Member 'EventItemListWidget_OnDecideEventDelegate__DelegateSignature::EventItemEntryObject' has a wrong offset!");

// Function OutGameModule.EventItemListWidget.GetNumItems
// 0x0004 (0x0004 - 0x0000)
struct EventItemListWidget_GetNumItems final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventItemListWidget_GetNumItems) == 0x000004, "Wrong alignment on EventItemListWidget_GetNumItems");
static_assert(sizeof(EventItemListWidget_GetNumItems) == 0x000004, "Wrong size on EventItemListWidget_GetNumItems");
static_assert(offsetof(EventItemListWidget_GetNumItems, ReturnValue) == 0x000000, "Member 'EventItemListWidget_GetNumItems::ReturnValue' has a wrong offset!");

// Function OutGameModule.EventItemWidget.OnSetEventImage
// 0x0008 (0x0008 - 0x0000)
struct EventItemWidget_OnSetEventImage final
{
public:
	class UPaperSprite*                           PaperSprite;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventItemWidget_OnSetEventImage) == 0x000008, "Wrong alignment on EventItemWidget_OnSetEventImage");
static_assert(sizeof(EventItemWidget_OnSetEventImage) == 0x000008, "Wrong size on EventItemWidget_OnSetEventImage");
static_assert(offsetof(EventItemWidget_OnSetEventImage, PaperSprite) == 0x000000, "Member 'EventItemWidget_OnSetEventImage::PaperSprite' has a wrong offset!");

// Function OutGameModule.EventItemWidget.OnSetEventName
// 0x0018 (0x0018 - 0x0000)
struct EventItemWidget_OnSetEventName final
{
public:
	class FText                                   EventName;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventItemWidget_OnSetEventName) == 0x000008, "Wrong alignment on EventItemWidget_OnSetEventName");
static_assert(sizeof(EventItemWidget_OnSetEventName) == 0x000018, "Wrong size on EventItemWidget_OnSetEventName");
static_assert(offsetof(EventItemWidget_OnSetEventName, EventName) == 0x000000, "Member 'EventItemWidget_OnSetEventName::EventName' has a wrong offset!");

// Function OutGameModule.EventItemWidget.OnSetEventTime
// 0x0008 (0x0008 - 0x0000)
struct EventItemWidget_OnSetEventTime final
{
public:
	struct FTimespan                              Timespan;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventItemWidget_OnSetEventTime) == 0x000008, "Wrong alignment on EventItemWidget_OnSetEventTime");
static_assert(sizeof(EventItemWidget_OnSetEventTime) == 0x000008, "Wrong size on EventItemWidget_OnSetEventTime");
static_assert(offsetof(EventItemWidget_OnSetEventTime, Timespan) == 0x000000, "Member 'EventItemWidget_OnSetEventTime::Timespan' has a wrong offset!");

// Function OutGameModule.EventItemWidget.OnSetStateEvent
// 0x0004 (0x0004 - 0x0000)
struct EventItemWidget_OnSetStateEvent final
{
public:
	int32                                         State;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventItemWidget_OnSetStateEvent) == 0x000004, "Wrong alignment on EventItemWidget_OnSetStateEvent");
static_assert(sizeof(EventItemWidget_OnSetStateEvent) == 0x000004, "Wrong size on EventItemWidget_OnSetStateEvent");
static_assert(offsetof(EventItemWidget_OnSetStateEvent, State) == 0x000000, "Member 'EventItemWidget_OnSetStateEvent::State' has a wrong offset!");

// Function OutGameModule.EventItemWidget.GetEntryObject
// 0x0008 (0x0008 - 0x0000)
struct EventItemWidget_GetEntryObject final
{
public:
	class UEventItemEntryObject*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventItemWidget_GetEntryObject) == 0x000008, "Wrong alignment on EventItemWidget_GetEntryObject");
static_assert(sizeof(EventItemWidget_GetEntryObject) == 0x000008, "Wrong size on EventItemWidget_GetEntryObject");
static_assert(offsetof(EventItemWidget_GetEntryObject, ReturnValue) == 0x000000, "Member 'EventItemWidget_GetEntryObject::ReturnValue' has a wrong offset!");

// Function OutGameModule.EventMissionListItem.SwitchViewTimer
// 0x0001 (0x0001 - 0x0000)
struct EventMissionListItem_SwitchViewTimer final
{
public:
	bool                                          bViewRewardTimer;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventMissionListItem_SwitchViewTimer) == 0x000001, "Wrong alignment on EventMissionListItem_SwitchViewTimer");
static_assert(sizeof(EventMissionListItem_SwitchViewTimer) == 0x000001, "Wrong size on EventMissionListItem_SwitchViewTimer");
static_assert(offsetof(EventMissionListItem_SwitchViewTimer, bViewRewardTimer) == 0x000000, "Member 'EventMissionListItem_SwitchViewTimer::bViewRewardTimer' has a wrong offset!");

// Function OutGameModule.EventMissionListItemObject.OnDecide
// 0x0010 (0x0010 - 0x0000)
struct EventMissionListItemObject_OnDecide final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventMissionListItemObject_OnDecide) == 0x000008, "Wrong alignment on EventMissionListItemObject_OnDecide");
static_assert(sizeof(EventMissionListItemObject_OnDecide) == 0x000010, "Wrong size on EventMissionListItemObject_OnDecide");
static_assert(offsetof(EventMissionListItemObject_OnDecide, Widget) == 0x000000, "Member 'EventMissionListItemObject_OnDecide::Widget' has a wrong offset!");
static_assert(offsetof(EventMissionListItemObject_OnDecide, InputType) == 0x000008, "Member 'EventMissionListItemObject_OnDecide::InputType' has a wrong offset!");

// Function OutGameModule.GuildLevelUpResultWindow.GetLevelUpDetailText
// 0x0010 (0x0010 - 0x0000)
struct GuildLevelUpResultWindow_GetLevelUpDetailText final
{
public:
	TArray<class FText>                           LevelUpTextArray;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildLevelUpResultWindow_GetLevelUpDetailText) == 0x000008, "Wrong alignment on GuildLevelUpResultWindow_GetLevelUpDetailText");
static_assert(sizeof(GuildLevelUpResultWindow_GetLevelUpDetailText) == 0x000010, "Wrong size on GuildLevelUpResultWindow_GetLevelUpDetailText");
static_assert(offsetof(GuildLevelUpResultWindow_GetLevelUpDetailText, LevelUpTextArray) == 0x000000, "Member 'GuildLevelUpResultWindow_GetLevelUpDetailText::LevelUpTextArray' has a wrong offset!");

// Function OutGameModule.GuildLevelUpResultWindow.OnSetLevel
// 0x0008 (0x0008 - 0x0000)
struct GuildLevelUpResultWindow_OnSetLevel final
{
public:
	int32                                         PrevLevel;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextLevel;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildLevelUpResultWindow_OnSetLevel) == 0x000004, "Wrong alignment on GuildLevelUpResultWindow_OnSetLevel");
static_assert(sizeof(GuildLevelUpResultWindow_OnSetLevel) == 0x000008, "Wrong size on GuildLevelUpResultWindow_OnSetLevel");
static_assert(offsetof(GuildLevelUpResultWindow_OnSetLevel, PrevLevel) == 0x000000, "Member 'GuildLevelUpResultWindow_OnSetLevel::PrevLevel' has a wrong offset!");
static_assert(offsetof(GuildLevelUpResultWindow_OnSetLevel, NextLevel) == 0x000004, "Member 'GuildLevelUpResultWindow_OnSetLevel::NextLevel' has a wrong offset!");

// Function OutGameModule.GuildLevelUpResultWindow.SetLevel
// 0x0008 (0x0008 - 0x0000)
struct GuildLevelUpResultWindow_SetLevel final
{
public:
	int32                                         PrevLevel;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextLevel;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildLevelUpResultWindow_SetLevel) == 0x000004, "Wrong alignment on GuildLevelUpResultWindow_SetLevel");
static_assert(sizeof(GuildLevelUpResultWindow_SetLevel) == 0x000008, "Wrong size on GuildLevelUpResultWindow_SetLevel");
static_assert(offsetof(GuildLevelUpResultWindow_SetLevel, PrevLevel) == 0x000000, "Member 'GuildLevelUpResultWindow_SetLevel::PrevLevel' has a wrong offset!");
static_assert(offsetof(GuildLevelUpResultWindow_SetLevel, NextLevel) == 0x000004, "Member 'GuildLevelUpResultWindow_SetLevel::NextLevel' has a wrong offset!");

// Function OutGameModule.EventPanelListWidget.DoCustomWidgetNavigation
// 0x0001 (0x0001 - 0x0000)
struct EventPanelListWidget_DoCustomWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventPanelListWidget_DoCustomWidgetNavigation) == 0x000001, "Wrong alignment on EventPanelListWidget_DoCustomWidgetNavigation");
static_assert(sizeof(EventPanelListWidget_DoCustomWidgetNavigation) == 0x000001, "Wrong size on EventPanelListWidget_DoCustomWidgetNavigation");
static_assert(offsetof(EventPanelListWidget_DoCustomWidgetNavigation, UiNavigation) == 0x000000, "Member 'EventPanelListWidget_DoCustomWidgetNavigation::UiNavigation' has a wrong offset!");

// Function OutGameModule.EventPanelListWidget.OnFocusEvent
// 0x0010 (0x0010 - 0x0000)
struct EventPanelListWidget_OnFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventPanelListWidget_OnFocusEvent) == 0x000008, "Wrong alignment on EventPanelListWidget_OnFocusEvent");
static_assert(sizeof(EventPanelListWidget_OnFocusEvent) == 0x000010, "Wrong size on EventPanelListWidget_OnFocusEvent");
static_assert(offsetof(EventPanelListWidget_OnFocusEvent, Widget) == 0x000000, "Member 'EventPanelListWidget_OnFocusEvent::Widget' has a wrong offset!");
static_assert(offsetof(EventPanelListWidget_OnFocusEvent, InputType) == 0x000008, "Member 'EventPanelListWidget_OnFocusEvent::InputType' has a wrong offset!");

// Function OutGameModule.EventPanelWidget.OnSetEventState
// 0x0004 (0x0004 - 0x0000)
struct EventPanelWidget_OnSetEventState final
{
public:
	int32                                         AvtiveIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventPanelWidget_OnSetEventState) == 0x000004, "Wrong alignment on EventPanelWidget_OnSetEventState");
static_assert(sizeof(EventPanelWidget_OnSetEventState) == 0x000004, "Wrong size on EventPanelWidget_OnSetEventState");
static_assert(offsetof(EventPanelWidget_OnSetEventState, AvtiveIndex) == 0x000000, "Member 'EventPanelWidget_OnSetEventState::AvtiveIndex' has a wrong offset!");

// Function OutGameModule.GuildStatics.GetBgFullScreenTexture
// 0x0038 (0x0038 - 0x0000)
struct GuildStatics_GetBgFullScreenTexture final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             GuildDataTable;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildStatics_GetBgFullScreenTexture) == 0x000008, "Wrong alignment on GuildStatics_GetBgFullScreenTexture");
static_assert(sizeof(GuildStatics_GetBgFullScreenTexture) == 0x000038, "Wrong size on GuildStatics_GetBgFullScreenTexture");
static_assert(offsetof(GuildStatics_GetBgFullScreenTexture, Level) == 0x000000, "Member 'GuildStatics_GetBgFullScreenTexture::Level' has a wrong offset!");
static_assert(offsetof(GuildStatics_GetBgFullScreenTexture, GuildDataTable) == 0x000008, "Member 'GuildStatics_GetBgFullScreenTexture::GuildDataTable' has a wrong offset!");
static_assert(offsetof(GuildStatics_GetBgFullScreenTexture, ReturnValue) == 0x000010, "Member 'GuildStatics_GetBgFullScreenTexture::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildStatics.GetBgMainTexture
// 0x0038 (0x0038 - 0x0000)
struct GuildStatics_GetBgMainTexture final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             GuildDataTable;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildStatics_GetBgMainTexture) == 0x000008, "Wrong alignment on GuildStatics_GetBgMainTexture");
static_assert(sizeof(GuildStatics_GetBgMainTexture) == 0x000038, "Wrong size on GuildStatics_GetBgMainTexture");
static_assert(offsetof(GuildStatics_GetBgMainTexture, Level) == 0x000000, "Member 'GuildStatics_GetBgMainTexture::Level' has a wrong offset!");
static_assert(offsetof(GuildStatics_GetBgMainTexture, GuildDataTable) == 0x000008, "Member 'GuildStatics_GetBgMainTexture::GuildDataTable' has a wrong offset!");
static_assert(offsetof(GuildStatics_GetBgMainTexture, ReturnValue) == 0x000010, "Member 'GuildStatics_GetBgMainTexture::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildStatics.GetBgmControlValue
// 0x0018 (0x0018 - 0x0000)
struct GuildStatics_GetBgmControlValue final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             GuildDataTable;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GuildStatics_GetBgmControlValue) == 0x000008, "Wrong alignment on GuildStatics_GetBgmControlValue");
static_assert(sizeof(GuildStatics_GetBgmControlValue) == 0x000018, "Wrong size on GuildStatics_GetBgmControlValue");
static_assert(offsetof(GuildStatics_GetBgmControlValue, Level) == 0x000000, "Member 'GuildStatics_GetBgmControlValue::Level' has a wrong offset!");
static_assert(offsetof(GuildStatics_GetBgmControlValue, GuildDataTable) == 0x000008, "Member 'GuildStatics_GetBgmControlValue::GuildDataTable' has a wrong offset!");
static_assert(offsetof(GuildStatics_GetBgmControlValue, ReturnValue) == 0x000010, "Member 'GuildStatics_GetBgmControlValue::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildStatics.UpdateCheckGuildLevelUp
// 0x0018 (0x0018 - 0x0000)
struct GuildStatics_UpdateCheckGuildLevelUp final
{
public:
	int32                                         PrevLevel;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             GuildDataTable;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLevelUp;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GuildStatics_UpdateCheckGuildLevelUp) == 0x000008, "Wrong alignment on GuildStatics_UpdateCheckGuildLevelUp");
static_assert(sizeof(GuildStatics_UpdateCheckGuildLevelUp) == 0x000018, "Wrong size on GuildStatics_UpdateCheckGuildLevelUp");
static_assert(offsetof(GuildStatics_UpdateCheckGuildLevelUp, PrevLevel) == 0x000000, "Member 'GuildStatics_UpdateCheckGuildLevelUp::PrevLevel' has a wrong offset!");
static_assert(offsetof(GuildStatics_UpdateCheckGuildLevelUp, Level) == 0x000004, "Member 'GuildStatics_UpdateCheckGuildLevelUp::Level' has a wrong offset!");
static_assert(offsetof(GuildStatics_UpdateCheckGuildLevelUp, GuildDataTable) == 0x000008, "Member 'GuildStatics_UpdateCheckGuildLevelUp::GuildDataTable' has a wrong offset!");
static_assert(offsetof(GuildStatics_UpdateCheckGuildLevelUp, bLevelUp) == 0x000010, "Member 'GuildStatics_UpdateCheckGuildLevelUp::bLevelUp' has a wrong offset!");

// Function OutGameModule.EventPreviewWidget.SetClosedEventPanelEvent
// 0x0001 (0x0001 - 0x0000)
struct EventPreviewWidget_SetClosedEventPanelEvent final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventPreviewWidget_SetClosedEventPanelEvent) == 0x000001, "Wrong alignment on EventPreviewWidget_SetClosedEventPanelEvent");
static_assert(sizeof(EventPreviewWidget_SetClosedEventPanelEvent) == 0x000001, "Wrong size on EventPreviewWidget_SetClosedEventPanelEvent");
static_assert(offsetof(EventPreviewWidget_SetClosedEventPanelEvent, Visible) == 0x000000, "Member 'EventPreviewWidget_SetClosedEventPanelEvent::Visible' has a wrong offset!");

// Function OutGameModule.EventPreviewWidget.UpdateEventCategory
// 0x0001 (0x0001 - 0x0000)
struct EventPreviewWidget_UpdateEventCategory final
{
public:
	EEventCategory                                Categpry;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventPreviewWidget_UpdateEventCategory) == 0x000001, "Wrong alignment on EventPreviewWidget_UpdateEventCategory");
static_assert(sizeof(EventPreviewWidget_UpdateEventCategory) == 0x000001, "Wrong size on EventPreviewWidget_UpdateEventCategory");
static_assert(offsetof(EventPreviewWidget_UpdateEventCategory, Categpry) == 0x000000, "Member 'EventPreviewWidget_UpdateEventCategory::Categpry' has a wrong offset!");

// Function OutGameModule.GuildMemberWidget.AddLike
// 0x0010 (0x0010 - 0x0000)
struct GuildMemberWidget_AddLike final
{
public:
	class UGuildMemberItemWidget*                 MemberWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GuildMemberWidget_AddLike) == 0x000008, "Wrong alignment on GuildMemberWidget_AddLike");
static_assert(sizeof(GuildMemberWidget_AddLike) == 0x000010, "Wrong size on GuildMemberWidget_AddLike");
static_assert(offsetof(GuildMemberWidget_AddLike, MemberWidget) == 0x000000, "Member 'GuildMemberWidget_AddLike::MemberWidget' has a wrong offset!");
static_assert(offsetof(GuildMemberWidget_AddLike, ReturnValue) == 0x000008, "Member 'GuildMemberWidget_AddLike::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildMemberWidget.CreateMemberList
// 0x0004 (0x0004 - 0x0000)
struct GuildMemberWidget_CreateMemberList final
{
public:
	int32                                         PageIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMemberWidget_CreateMemberList) == 0x000004, "Wrong alignment on GuildMemberWidget_CreateMemberList");
static_assert(sizeof(GuildMemberWidget_CreateMemberList) == 0x000004, "Wrong size on GuildMemberWidget_CreateMemberList");
static_assert(offsetof(GuildMemberWidget_CreateMemberList, PageIndex) == 0x000000, "Member 'GuildMemberWidget_CreateMemberList::PageIndex' has a wrong offset!");

// Function OutGameModule.GuildMemberWidget.DoCustomWidgetNavigation
// 0x0010 (0x0010 - 0x0000)
struct GuildMemberWidget_DoCustomWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMemberWidget_DoCustomWidgetNavigation) == 0x000008, "Wrong alignment on GuildMemberWidget_DoCustomWidgetNavigation");
static_assert(sizeof(GuildMemberWidget_DoCustomWidgetNavigation) == 0x000010, "Wrong size on GuildMemberWidget_DoCustomWidgetNavigation");
static_assert(offsetof(GuildMemberWidget_DoCustomWidgetNavigation, UiNavigation) == 0x000000, "Member 'GuildMemberWidget_DoCustomWidgetNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(GuildMemberWidget_DoCustomWidgetNavigation, ReturnValue) == 0x000008, "Member 'GuildMemberWidget_DoCustomWidgetNavigation::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildMemberWidget.FocusMember
// 0x0008 (0x0008 - 0x0000)
struct GuildMemberWidget_FocusMember final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMemberWidget_FocusMember) == 0x000008, "Wrong alignment on GuildMemberWidget_FocusMember");
static_assert(sizeof(GuildMemberWidget_FocusMember) == 0x000008, "Wrong size on GuildMemberWidget_FocusMember");
static_assert(offsetof(GuildMemberWidget_FocusMember, ReturnValue) == 0x000000, "Member 'GuildMemberWidget_FocusMember::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildMemberWidget.OnLoadComplete
// 0x0004 (0x0004 - 0x0000)
struct GuildMemberWidget_OnLoadComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMemberWidget_OnLoadComplete) == 0x000004, "Wrong alignment on GuildMemberWidget_OnLoadComplete");
static_assert(sizeof(GuildMemberWidget_OnLoadComplete) == 0x000004, "Wrong size on GuildMemberWidget_OnLoadComplete");
static_assert(offsetof(GuildMemberWidget_OnLoadComplete, RequestId) == 0x000000, "Member 'GuildMemberWidget_OnLoadComplete::RequestId' has a wrong offset!");

// Function OutGameModule.GuildMemberWidget.OnUpdateComplete
// 0x0004 (0x0004 - 0x0000)
struct GuildMemberWidget_OnUpdateComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMemberWidget_OnUpdateComplete) == 0x000004, "Wrong alignment on GuildMemberWidget_OnUpdateComplete");
static_assert(sizeof(GuildMemberWidget_OnUpdateComplete) == 0x000004, "Wrong size on GuildMemberWidget_OnUpdateComplete");
static_assert(offsetof(GuildMemberWidget_OnUpdateComplete, RequestId) == 0x000000, "Member 'GuildMemberWidget_OnUpdateComplete::RequestId' has a wrong offset!");

// Function OutGameModule.GuildMemberWidget.RequestCommissionCalls_CancelSubLeader
// 0x0018 (0x0018 - 0x0000)
struct GuildMemberWidget_RequestCommissionCalls_CancelSubLeader final
{
public:
	class UGuildMemberItemWidget*                 MemberWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnFechFinishedDynamicDelegate;                     // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMemberWidget_RequestCommissionCalls_CancelSubLeader) == 0x000008, "Wrong alignment on GuildMemberWidget_RequestCommissionCalls_CancelSubLeader");
static_assert(sizeof(GuildMemberWidget_RequestCommissionCalls_CancelSubLeader) == 0x000018, "Wrong size on GuildMemberWidget_RequestCommissionCalls_CancelSubLeader");
static_assert(offsetof(GuildMemberWidget_RequestCommissionCalls_CancelSubLeader, MemberWidget) == 0x000000, "Member 'GuildMemberWidget_RequestCommissionCalls_CancelSubLeader::MemberWidget' has a wrong offset!");
static_assert(offsetof(GuildMemberWidget_RequestCommissionCalls_CancelSubLeader, OnFechFinishedDynamicDelegate) == 0x000008, "Member 'GuildMemberWidget_RequestCommissionCalls_CancelSubLeader::OnFechFinishedDynamicDelegate' has a wrong offset!");

// Function OutGameModule.GuildMemberWidget.RequestCommissionCalls_RemoveMember
// 0x0018 (0x0018 - 0x0000)
struct GuildMemberWidget_RequestCommissionCalls_RemoveMember final
{
public:
	class UGuildMemberItemWidget*                 MemberWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnFechFinishedDynamicDelegate;                     // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMemberWidget_RequestCommissionCalls_RemoveMember) == 0x000008, "Wrong alignment on GuildMemberWidget_RequestCommissionCalls_RemoveMember");
static_assert(sizeof(GuildMemberWidget_RequestCommissionCalls_RemoveMember) == 0x000018, "Wrong size on GuildMemberWidget_RequestCommissionCalls_RemoveMember");
static_assert(offsetof(GuildMemberWidget_RequestCommissionCalls_RemoveMember, MemberWidget) == 0x000000, "Member 'GuildMemberWidget_RequestCommissionCalls_RemoveMember::MemberWidget' has a wrong offset!");
static_assert(offsetof(GuildMemberWidget_RequestCommissionCalls_RemoveMember, OnFechFinishedDynamicDelegate) == 0x000008, "Member 'GuildMemberWidget_RequestCommissionCalls_RemoveMember::OnFechFinishedDynamicDelegate' has a wrong offset!");

// Function OutGameModule.GuildMemberWidget.RequestCommissionCalls_SubLeader
// 0x0018 (0x0018 - 0x0000)
struct GuildMemberWidget_RequestCommissionCalls_SubLeader final
{
public:
	class UGuildMemberItemWidget*                 MemberWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnFechFinishedDynamicDelegate;                     // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMemberWidget_RequestCommissionCalls_SubLeader) == 0x000008, "Wrong alignment on GuildMemberWidget_RequestCommissionCalls_SubLeader");
static_assert(sizeof(GuildMemberWidget_RequestCommissionCalls_SubLeader) == 0x000018, "Wrong size on GuildMemberWidget_RequestCommissionCalls_SubLeader");
static_assert(offsetof(GuildMemberWidget_RequestCommissionCalls_SubLeader, MemberWidget) == 0x000000, "Member 'GuildMemberWidget_RequestCommissionCalls_SubLeader::MemberWidget' has a wrong offset!");
static_assert(offsetof(GuildMemberWidget_RequestCommissionCalls_SubLeader, OnFechFinishedDynamicDelegate) == 0x000008, "Member 'GuildMemberWidget_RequestCommissionCalls_SubLeader::OnFechFinishedDynamicDelegate' has a wrong offset!");

// Function OutGameModule.GuildMemberWidget.RequestCommissionCalls_TakeOver
// 0x0018 (0x0018 - 0x0000)
struct GuildMemberWidget_RequestCommissionCalls_TakeOver final
{
public:
	class UGuildMemberItemWidget*                 MemberWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnFechFinishedDynamicDelegate;                     // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMemberWidget_RequestCommissionCalls_TakeOver) == 0x000008, "Wrong alignment on GuildMemberWidget_RequestCommissionCalls_TakeOver");
static_assert(sizeof(GuildMemberWidget_RequestCommissionCalls_TakeOver) == 0x000018, "Wrong size on GuildMemberWidget_RequestCommissionCalls_TakeOver");
static_assert(offsetof(GuildMemberWidget_RequestCommissionCalls_TakeOver, MemberWidget) == 0x000000, "Member 'GuildMemberWidget_RequestCommissionCalls_TakeOver::MemberWidget' has a wrong offset!");
static_assert(offsetof(GuildMemberWidget_RequestCommissionCalls_TakeOver, OnFechFinishedDynamicDelegate) == 0x000008, "Member 'GuildMemberWidget_RequestCommissionCalls_TakeOver::OnFechFinishedDynamicDelegate' has a wrong offset!");

// Function OutGameModule.GuildMemberWidget.RequestCreateMemberList
// 0x0004 (0x0004 - 0x0000)
struct GuildMemberWidget_RequestCreateMemberList final
{
public:
	int32                                         PageIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMemberWidget_RequestCreateMemberList) == 0x000004, "Wrong alignment on GuildMemberWidget_RequestCreateMemberList");
static_assert(sizeof(GuildMemberWidget_RequestCreateMemberList) == 0x000004, "Wrong size on GuildMemberWidget_RequestCreateMemberList");
static_assert(offsetof(GuildMemberWidget_RequestCreateMemberList, PageIndex) == 0x000000, "Member 'GuildMemberWidget_RequestCreateMemberList::PageIndex' has a wrong offset!");

// Function OutGameModule.GuildMemberWidget.SetFriendCount
// 0x0008 (0x0008 - 0x0000)
struct GuildMemberWidget_SetFriendCount final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMemberWidget_SetFriendCount) == 0x000004, "Wrong alignment on GuildMemberWidget_SetFriendCount");
static_assert(sizeof(GuildMemberWidget_SetFriendCount) == 0x000008, "Wrong size on GuildMemberWidget_SetFriendCount");
static_assert(offsetof(GuildMemberWidget_SetFriendCount, Num) == 0x000000, "Member 'GuildMemberWidget_SetFriendCount::Num' has a wrong offset!");
static_assert(offsetof(GuildMemberWidget_SetFriendCount, Max) == 0x000004, "Member 'GuildMemberWidget_SetFriendCount::Max' has a wrong offset!");

// Function OutGameModule.GuildMemberWidget.SetMemberSort
// 0x0001 (0x0001 - 0x0000)
struct GuildMemberWidget_SetMemberSort final
{
public:
	EGuildMemberSort                              MemberSort;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMemberWidget_SetMemberSort) == 0x000001, "Wrong alignment on GuildMemberWidget_SetMemberSort");
static_assert(sizeof(GuildMemberWidget_SetMemberSort) == 0x000001, "Wrong size on GuildMemberWidget_SetMemberSort");
static_assert(offsetof(GuildMemberWidget_SetMemberSort, MemberSort) == 0x000000, "Member 'GuildMemberWidget_SetMemberSort::MemberSort' has a wrong offset!");

// Function OutGameModule.GuildMemberWidget.GetMyLeaderFlg
// 0x0001 (0x0001 - 0x0000)
struct GuildMemberWidget_GetMyLeaderFlg final
{
public:
	EGuildPosition                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMemberWidget_GetMyLeaderFlg) == 0x000001, "Wrong alignment on GuildMemberWidget_GetMyLeaderFlg");
static_assert(sizeof(GuildMemberWidget_GetMyLeaderFlg) == 0x000001, "Wrong size on GuildMemberWidget_GetMyLeaderFlg");
static_assert(offsetof(GuildMemberWidget_GetMyLeaderFlg, ReturnValue) == 0x000000, "Member 'GuildMemberWidget_GetMyLeaderFlg::ReturnValue' has a wrong offset!");

// Function OutGameModule.EventsMissionContents.IsOpenMissionList
// 0x0001 (0x0001 - 0x0000)
struct EventsMissionContents_IsOpenMissionList final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventsMissionContents_IsOpenMissionList) == 0x000001, "Wrong alignment on EventsMissionContents_IsOpenMissionList");
static_assert(sizeof(EventsMissionContents_IsOpenMissionList) == 0x000001, "Wrong size on EventsMissionContents_IsOpenMissionList");
static_assert(offsetof(EventsMissionContents_IsOpenMissionList, ReturnValue) == 0x000000, "Member 'EventsMissionContents_IsOpenMissionList::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildInstitutionWidget.DecideAddCoin
// 0x0010 (0x0010 - 0x0000)
struct GuildInstitutionWidget_DecideAddCoin final
{
public:
	int32                                         AddCoin;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLevelUp;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NowLevel;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextLevel;                                         // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildInstitutionWidget_DecideAddCoin) == 0x000004, "Wrong alignment on GuildInstitutionWidget_DecideAddCoin");
static_assert(sizeof(GuildInstitutionWidget_DecideAddCoin) == 0x000010, "Wrong size on GuildInstitutionWidget_DecideAddCoin");
static_assert(offsetof(GuildInstitutionWidget_DecideAddCoin, AddCoin) == 0x000000, "Member 'GuildInstitutionWidget_DecideAddCoin::AddCoin' has a wrong offset!");
static_assert(offsetof(GuildInstitutionWidget_DecideAddCoin, bLevelUp) == 0x000004, "Member 'GuildInstitutionWidget_DecideAddCoin::bLevelUp' has a wrong offset!");
static_assert(offsetof(GuildInstitutionWidget_DecideAddCoin, NowLevel) == 0x000008, "Member 'GuildInstitutionWidget_DecideAddCoin::NowLevel' has a wrong offset!");
static_assert(offsetof(GuildInstitutionWidget_DecideAddCoin, NextLevel) == 0x00000C, "Member 'GuildInstitutionWidget_DecideAddCoin::NextLevel' has a wrong offset!");

// Function OutGameModule.GuildInstitutionWidget.OnBgColorView
// 0x00D0 (0x00D0 - 0x0000)
struct GuildInstitutionWidget_OnBgColorView final
{
public:
	struct FSlateBrush                            bgBrush;                                           // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildInstitutionWidget_OnBgColorView) == 0x000010, "Wrong alignment on GuildInstitutionWidget_OnBgColorView");
static_assert(sizeof(GuildInstitutionWidget_OnBgColorView) == 0x0000D0, "Wrong size on GuildInstitutionWidget_OnBgColorView");
static_assert(offsetof(GuildInstitutionWidget_OnBgColorView, bgBrush) == 0x000000, "Member 'GuildInstitutionWidget_OnBgColorView::bgBrush' has a wrong offset!");

// Function OutGameModule.GuildInstitutionWidget.OnBgImageView
// 0x00D0 (0x00D0 - 0x0000)
struct GuildInstitutionWidget_OnBgImageView final
{
public:
	struct FSlateBrush                            bgBrush;                                           // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildInstitutionWidget_OnBgImageView) == 0x000010, "Wrong alignment on GuildInstitutionWidget_OnBgImageView");
static_assert(sizeof(GuildInstitutionWidget_OnBgImageView) == 0x0000D0, "Wrong size on GuildInstitutionWidget_OnBgImageView");
static_assert(offsetof(GuildInstitutionWidget_OnBgImageView, bgBrush) == 0x000000, "Member 'GuildInstitutionWidget_OnBgImageView::bgBrush' has a wrong offset!");

// Function OutGameModule.GuildInstitutionWidget.OnCompleteDonateGuild
// 0x0001 (0x0001 - 0x0000)
struct GuildInstitutionWidget_OnCompleteDonateGuild final
{
public:
	bool                                          bLevelUp;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildInstitutionWidget_OnCompleteDonateGuild) == 0x000001, "Wrong alignment on GuildInstitutionWidget_OnCompleteDonateGuild");
static_assert(sizeof(GuildInstitutionWidget_OnCompleteDonateGuild) == 0x000001, "Wrong size on GuildInstitutionWidget_OnCompleteDonateGuild");
static_assert(offsetof(GuildInstitutionWidget_OnCompleteDonateGuild, bLevelUp) == 0x000000, "Member 'GuildInstitutionWidget_OnCompleteDonateGuild::bLevelUp' has a wrong offset!");

// Function OutGameModule.GuildInstitutionWidget.OnEffectNameView
// 0x0018 (0x0018 - 0x0000)
struct GuildInstitutionWidget_OnEffectNameView final
{
public:
	class FText                                   EffectName;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildInstitutionWidget_OnEffectNameView) == 0x000008, "Wrong alignment on GuildInstitutionWidget_OnEffectNameView");
static_assert(sizeof(GuildInstitutionWidget_OnEffectNameView) == 0x000018, "Wrong size on GuildInstitutionWidget_OnEffectNameView");
static_assert(offsetof(GuildInstitutionWidget_OnEffectNameView, EffectName) == 0x000000, "Member 'GuildInstitutionWidget_OnEffectNameView::EffectName' has a wrong offset!");

// Function OutGameModule.GuildInstitutionWidget.OnGaugeView
// 0x0004 (0x0004 - 0x0000)
struct GuildInstitutionWidget_OnGaugeView final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildInstitutionWidget_OnGaugeView) == 0x000004, "Wrong alignment on GuildInstitutionWidget_OnGaugeView");
static_assert(sizeof(GuildInstitutionWidget_OnGaugeView) == 0x000004, "Wrong size on GuildInstitutionWidget_OnGaugeView");
static_assert(offsetof(GuildInstitutionWidget_OnGaugeView, Percent) == 0x000000, "Member 'GuildInstitutionWidget_OnGaugeView::Percent' has a wrong offset!");

// Function OutGameModule.GuildInstitutionWidget.OnInstitutionNameView
// 0x0018 (0x0018 - 0x0000)
struct GuildInstitutionWidget_OnInstitutionNameView final
{
public:
	class FText                                   InstitutionName;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildInstitutionWidget_OnInstitutionNameView) == 0x000008, "Wrong alignment on GuildInstitutionWidget_OnInstitutionNameView");
static_assert(sizeof(GuildInstitutionWidget_OnInstitutionNameView) == 0x000018, "Wrong size on GuildInstitutionWidget_OnInstitutionNameView");
static_assert(offsetof(GuildInstitutionWidget_OnInstitutionNameView, InstitutionName) == 0x000000, "Member 'GuildInstitutionWidget_OnInstitutionNameView::InstitutionName' has a wrong offset!");

// Function OutGameModule.GuildInstitutionWidget.OnInstitutionView
// 0x0010 (0x0010 - 0x0000)
struct GuildInstitutionWidget_OnInstitutionView final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostNow;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostMax;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectPercent;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildInstitutionWidget_OnInstitutionView) == 0x000004, "Wrong alignment on GuildInstitutionWidget_OnInstitutionView");
static_assert(sizeof(GuildInstitutionWidget_OnInstitutionView) == 0x000010, "Wrong size on GuildInstitutionWidget_OnInstitutionView");
static_assert(offsetof(GuildInstitutionWidget_OnInstitutionView, Level) == 0x000000, "Member 'GuildInstitutionWidget_OnInstitutionView::Level' has a wrong offset!");
static_assert(offsetof(GuildInstitutionWidget_OnInstitutionView, CostNow) == 0x000004, "Member 'GuildInstitutionWidget_OnInstitutionView::CostNow' has a wrong offset!");
static_assert(offsetof(GuildInstitutionWidget_OnInstitutionView, CostMax) == 0x000008, "Member 'GuildInstitutionWidget_OnInstitutionView::CostMax' has a wrong offset!");
static_assert(offsetof(GuildInstitutionWidget_OnInstitutionView, EffectPercent) == 0x00000C, "Member 'GuildInstitutionWidget_OnInstitutionView::EffectPercent' has a wrong offset!");

// Function OutGameModule.GuildInstitutionWidget.OnProgressColorView
// 0x0010 (0x0010 - 0x0000)
struct GuildInstitutionWidget_OnProgressColorView final
{
public:
	struct FLinearColor                           ProgressColor;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildInstitutionWidget_OnProgressColorView) == 0x000004, "Wrong alignment on GuildInstitutionWidget_OnProgressColorView");
static_assert(sizeof(GuildInstitutionWidget_OnProgressColorView) == 0x000010, "Wrong size on GuildInstitutionWidget_OnProgressColorView");
static_assert(offsetof(GuildInstitutionWidget_OnProgressColorView, ProgressColor) == 0x000000, "Member 'GuildInstitutionWidget_OnProgressColorView::ProgressColor' has a wrong offset!");

// Function OutGameModule.GuildInstitutionWidget.OnUpdateComplete
// 0x0004 (0x0004 - 0x0000)
struct GuildInstitutionWidget_OnUpdateComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildInstitutionWidget_OnUpdateComplete) == 0x000004, "Wrong alignment on GuildInstitutionWidget_OnUpdateComplete");
static_assert(sizeof(GuildInstitutionWidget_OnUpdateComplete) == 0x000004, "Wrong size on GuildInstitutionWidget_OnUpdateComplete");
static_assert(offsetof(GuildInstitutionWidget_OnUpdateComplete, RequestId) == 0x000000, "Member 'GuildInstitutionWidget_OnUpdateComplete::RequestId' has a wrong offset!");

// Function OutGameModule.GuildInstitutionWidget.RequestDonateGuild
// 0x0004 (0x0004 - 0x0000)
struct GuildInstitutionWidget_RequestDonateGuild final
{
public:
	int32                                         AddCoin;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildInstitutionWidget_RequestDonateGuild) == 0x000004, "Wrong alignment on GuildInstitutionWidget_RequestDonateGuild");
static_assert(sizeof(GuildInstitutionWidget_RequestDonateGuild) == 0x000004, "Wrong size on GuildInstitutionWidget_RequestDonateGuild");
static_assert(offsetof(GuildInstitutionWidget_RequestDonateGuild, AddCoin) == 0x000000, "Member 'GuildInstitutionWidget_RequestDonateGuild::AddCoin' has a wrong offset!");

// Function OutGameModule.GuildInstitutionWidget.SetAddCoinView
// 0x0004 (0x0004 - 0x0000)
struct GuildInstitutionWidget_SetAddCoinView final
{
public:
	int32                                         AddCoin;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildInstitutionWidget_SetAddCoinView) == 0x000004, "Wrong alignment on GuildInstitutionWidget_SetAddCoinView");
static_assert(sizeof(GuildInstitutionWidget_SetAddCoinView) == 0x000004, "Wrong size on GuildInstitutionWidget_SetAddCoinView");
static_assert(offsetof(GuildInstitutionWidget_SetAddCoinView, AddCoin) == 0x000000, "Member 'GuildInstitutionWidget_SetAddCoinView::AddCoin' has a wrong offset!");

// Function OutGameModule.GuildInstitutionWidget.GetMaxLevelAddCoin
// 0x0004 (0x0004 - 0x0000)
struct GuildInstitutionWidget_GetMaxLevelAddCoin final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildInstitutionWidget_GetMaxLevelAddCoin) == 0x000004, "Wrong alignment on GuildInstitutionWidget_GetMaxLevelAddCoin");
static_assert(sizeof(GuildInstitutionWidget_GetMaxLevelAddCoin) == 0x000004, "Wrong size on GuildInstitutionWidget_GetMaxLevelAddCoin");
static_assert(offsetof(GuildInstitutionWidget_GetMaxLevelAddCoin, ReturnValue) == 0x000000, "Member 'GuildInstitutionWidget_GetMaxLevelAddCoin::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildInstitutionWidget.GetNextLevelAddCoin
// 0x0004 (0x0004 - 0x0000)
struct GuildInstitutionWidget_GetNextLevelAddCoin final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildInstitutionWidget_GetNextLevelAddCoin) == 0x000004, "Wrong alignment on GuildInstitutionWidget_GetNextLevelAddCoin");
static_assert(sizeof(GuildInstitutionWidget_GetNextLevelAddCoin) == 0x000004, "Wrong size on GuildInstitutionWidget_GetNextLevelAddCoin");
static_assert(offsetof(GuildInstitutionWidget_GetNextLevelAddCoin, ReturnValue) == 0x000000, "Member 'GuildInstitutionWidget_GetNextLevelAddCoin::ReturnValue' has a wrong offset!");

// Function OutGameModule.MissionContents.BulkReceiveNavigation
// 0x0001 (0x0001 - 0x0000)
struct MissionContents_BulkReceiveNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionContents_BulkReceiveNavigation) == 0x000001, "Wrong alignment on MissionContents_BulkReceiveNavigation");
static_assert(sizeof(MissionContents_BulkReceiveNavigation) == 0x000001, "Wrong size on MissionContents_BulkReceiveNavigation");
static_assert(offsetof(MissionContents_BulkReceiveNavigation, UiNavigation) == 0x000000, "Member 'MissionContents_BulkReceiveNavigation::UiNavigation' has a wrong offset!");

// Function OutGameModule.MissionContents.OnAddedToFocusMissionListItemWidget
// 0x0010 (0x0010 - 0x0000)
struct MissionContents_OnAddedToFocusMissionListItemWidget final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MissionContents_OnAddedToFocusMissionListItemWidget) == 0x000008, "Wrong alignment on MissionContents_OnAddedToFocusMissionListItemWidget");
static_assert(sizeof(MissionContents_OnAddedToFocusMissionListItemWidget) == 0x000010, "Wrong size on MissionContents_OnAddedToFocusMissionListItemWidget");
static_assert(offsetof(MissionContents_OnAddedToFocusMissionListItemWidget, Widget) == 0x000000, "Member 'MissionContents_OnAddedToFocusMissionListItemWidget::Widget' has a wrong offset!");
static_assert(offsetof(MissionContents_OnAddedToFocusMissionListItemWidget, InputType) == 0x000008, "Member 'MissionContents_OnAddedToFocusMissionListItemWidget::InputType' has a wrong offset!");

// Function OutGameModule.MissionContents.OnFocusNavigationMissionList
// 0x0001 (0x0001 - 0x0000)
struct MissionContents_OnFocusNavigationMissionList final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionContents_OnFocusNavigationMissionList) == 0x000001, "Wrong alignment on MissionContents_OnFocusNavigationMissionList");
static_assert(sizeof(MissionContents_OnFocusNavigationMissionList) == 0x000001, "Wrong size on MissionContents_OnFocusNavigationMissionList");
static_assert(offsetof(MissionContents_OnFocusNavigationMissionList, UiNavigation) == 0x000000, "Member 'MissionContents_OnFocusNavigationMissionList::UiNavigation' has a wrong offset!");

// Function OutGameModule.StarMissionContents.OnAddedToFocusStarListItemWidget
// 0x0010 (0x0010 - 0x0000)
struct StarMissionContents_OnAddedToFocusStarListItemWidget final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StarMissionContents_OnAddedToFocusStarListItemWidget) == 0x000008, "Wrong alignment on StarMissionContents_OnAddedToFocusStarListItemWidget");
static_assert(sizeof(StarMissionContents_OnAddedToFocusStarListItemWidget) == 0x000010, "Wrong size on StarMissionContents_OnAddedToFocusStarListItemWidget");
static_assert(offsetof(StarMissionContents_OnAddedToFocusStarListItemWidget, Widget) == 0x000000, "Member 'StarMissionContents_OnAddedToFocusStarListItemWidget::Widget' has a wrong offset!");
static_assert(offsetof(StarMissionContents_OnAddedToFocusStarListItemWidget, InputType) == 0x000008, "Member 'StarMissionContents_OnAddedToFocusStarListItemWidget::InputType' has a wrong offset!");

// Function OutGameModule.StarMissionContents.OnFocusNavigationStarList
// 0x0001 (0x0001 - 0x0000)
struct StarMissionContents_OnFocusNavigationStarList final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StarMissionContents_OnFocusNavigationStarList) == 0x000001, "Wrong alignment on StarMissionContents_OnFocusNavigationStarList");
static_assert(sizeof(StarMissionContents_OnFocusNavigationStarList) == 0x000001, "Wrong size on StarMissionContents_OnFocusNavigationStarList");
static_assert(offsetof(StarMissionContents_OnFocusNavigationStarList, UiNavigation) == 0x000000, "Member 'StarMissionContents_OnFocusNavigationStarList::UiNavigation' has a wrong offset!");

// Function OutGameModule.GuildSearchItemWidget.OnSetGuildName
// 0x0018 (0x0018 - 0x0000)
struct GuildSearchItemWidget_OnSetGuildName final
{
public:
	class FText                                   GuildName;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildSearchItemWidget_OnSetGuildName) == 0x000008, "Wrong alignment on GuildSearchItemWidget_OnSetGuildName");
static_assert(sizeof(GuildSearchItemWidget_OnSetGuildName) == 0x000018, "Wrong size on GuildSearchItemWidget_OnSetGuildName");
static_assert(offsetof(GuildSearchItemWidget_OnSetGuildName, GuildName) == 0x000000, "Member 'GuildSearchItemWidget_OnSetGuildName::GuildName' has a wrong offset!");

// Function OutGameModule.EventWidget.UpdateCompleted
// 0x0004 (0x0004 - 0x0000)
struct EventWidget_UpdateCompleted final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventWidget_UpdateCompleted) == 0x000004, "Wrong alignment on EventWidget_UpdateCompleted");
static_assert(sizeof(EventWidget_UpdateCompleted) == 0x000004, "Wrong size on EventWidget_UpdateCompleted");
static_assert(offsetof(EventWidget_UpdateCompleted, ID) == 0x000000, "Member 'EventWidget_UpdateCompleted::ID' has a wrong offset!");

// Function OutGameModule.FriendAppWidget.DoCustomWidgetNavigation_Button
// 0x0010 (0x0010 - 0x0000)
struct FriendAppWidget_DoCustomWidgetNavigation_Button final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendAppWidget_DoCustomWidgetNavigation_Button) == 0x000008, "Wrong alignment on FriendAppWidget_DoCustomWidgetNavigation_Button");
static_assert(sizeof(FriendAppWidget_DoCustomWidgetNavigation_Button) == 0x000010, "Wrong size on FriendAppWidget_DoCustomWidgetNavigation_Button");
static_assert(offsetof(FriendAppWidget_DoCustomWidgetNavigation_Button, UiNavigation) == 0x000000, "Member 'FriendAppWidget_DoCustomWidgetNavigation_Button::UiNavigation' has a wrong offset!");
static_assert(offsetof(FriendAppWidget_DoCustomWidgetNavigation_Button, ReturnValue) == 0x000008, "Member 'FriendAppWidget_DoCustomWidgetNavigation_Button::ReturnValue' has a wrong offset!");

// Function OutGameModule.FriendAppWidget.OnDecideButtonWidget
// 0x0010 (0x0010 - 0x0000)
struct FriendAppWidget_OnDecideButtonWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FriendAppWidget_OnDecideButtonWidget) == 0x000008, "Wrong alignment on FriendAppWidget_OnDecideButtonWidget");
static_assert(sizeof(FriendAppWidget_OnDecideButtonWidget) == 0x000010, "Wrong size on FriendAppWidget_OnDecideButtonWidget");
static_assert(offsetof(FriendAppWidget_OnDecideButtonWidget, Button) == 0x000000, "Member 'FriendAppWidget_OnDecideButtonWidget::Button' has a wrong offset!");
static_assert(offsetof(FriendAppWidget_OnDecideButtonWidget, InputType) == 0x000008, "Member 'FriendAppWidget_OnDecideButtonWidget::InputType' has a wrong offset!");

// Function OutGameModule.FriendAppWidget.OnReceivedCustomWidgetNavigation
// 0x0001 (0x0001 - 0x0000)
struct FriendAppWidget_OnReceivedCustomWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendAppWidget_OnReceivedCustomWidgetNavigation) == 0x000001, "Wrong alignment on FriendAppWidget_OnReceivedCustomWidgetNavigation");
static_assert(sizeof(FriendAppWidget_OnReceivedCustomWidgetNavigation) == 0x000001, "Wrong size on FriendAppWidget_OnReceivedCustomWidgetNavigation");
static_assert(offsetof(FriendAppWidget_OnReceivedCustomWidgetNavigation, UiNavigation) == 0x000000, "Member 'FriendAppWidget_OnReceivedCustomWidgetNavigation::UiNavigation' has a wrong offset!");

// Function OutGameModule.FriendAppWidget.OnReceivedRequestFriendListCustom
// 0x0002 (0x0002 - 0x0000)
struct FriendAppWidget_OnReceivedRequestFriendListCustom final
{
public:
	EFriendListType                               FriendType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFriendStatus                                 FriendStatus;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendAppWidget_OnReceivedRequestFriendListCustom) == 0x000001, "Wrong alignment on FriendAppWidget_OnReceivedRequestFriendListCustom");
static_assert(sizeof(FriendAppWidget_OnReceivedRequestFriendListCustom) == 0x000002, "Wrong size on FriendAppWidget_OnReceivedRequestFriendListCustom");
static_assert(offsetof(FriendAppWidget_OnReceivedRequestFriendListCustom, FriendType) == 0x000000, "Member 'FriendAppWidget_OnReceivedRequestFriendListCustom::FriendType' has a wrong offset!");
static_assert(offsetof(FriendAppWidget_OnReceivedRequestFriendListCustom, FriendStatus) == 0x000001, "Member 'FriendAppWidget_OnReceivedRequestFriendListCustom::FriendStatus' has a wrong offset!");

// Function OutGameModule.FriendListButtonWidget.BP_SetPlayerName
// 0x0018 (0x0018 - 0x0000)
struct FriendListButtonWidget_BP_SetPlayerName final
{
public:
	class FText                                   InName;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendListButtonWidget_BP_SetPlayerName) == 0x000008, "Wrong alignment on FriendListButtonWidget_BP_SetPlayerName");
static_assert(sizeof(FriendListButtonWidget_BP_SetPlayerName) == 0x000018, "Wrong size on FriendListButtonWidget_BP_SetPlayerName");
static_assert(offsetof(FriendListButtonWidget_BP_SetPlayerName, InName) == 0x000000, "Member 'FriendListButtonWidget_BP_SetPlayerName::InName' has a wrong offset!");

// Function OutGameModule.GuildScoreWidget.OnScoreView
// 0x0020 (0x0020 - 0x0000)
struct GuildScoreWidget_OnScoreView final
{
public:
	class FText                                   LeagueName;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Ranking;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Point;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildScoreWidget_OnScoreView) == 0x000008, "Wrong alignment on GuildScoreWidget_OnScoreView");
static_assert(sizeof(GuildScoreWidget_OnScoreView) == 0x000020, "Wrong size on GuildScoreWidget_OnScoreView");
static_assert(offsetof(GuildScoreWidget_OnScoreView, LeagueName) == 0x000000, "Member 'GuildScoreWidget_OnScoreView::LeagueName' has a wrong offset!");
static_assert(offsetof(GuildScoreWidget_OnScoreView, Ranking) == 0x000018, "Member 'GuildScoreWidget_OnScoreView::Ranking' has a wrong offset!");
static_assert(offsetof(GuildScoreWidget_OnScoreView, Point) == 0x00001C, "Member 'GuildScoreWidget_OnScoreView::Point' has a wrong offset!");

// Function OutGameModule.FriendListHasWidget.GeneralPageCarouselNavigation
// 0x0001 (0x0001 - 0x0000)
struct FriendListHasWidget_GeneralPageCarouselNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendListHasWidget_GeneralPageCarouselNavigation) == 0x000001, "Wrong alignment on FriendListHasWidget_GeneralPageCarouselNavigation");
static_assert(sizeof(FriendListHasWidget_GeneralPageCarouselNavigation) == 0x000001, "Wrong size on FriendListHasWidget_GeneralPageCarouselNavigation");
static_assert(offsetof(FriendListHasWidget_GeneralPageCarouselNavigation, UiNavigation) == 0x000000, "Member 'FriendListHasWidget_GeneralPageCarouselNavigation::UiNavigation' has a wrong offset!");

// Function OutGameModule.FriendListHasWidget.GeneralPageCarouselNavigationRight
// 0x0001 (0x0001 - 0x0000)
struct FriendListHasWidget_GeneralPageCarouselNavigationRight final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendListHasWidget_GeneralPageCarouselNavigationRight) == 0x000001, "Wrong alignment on FriendListHasWidget_GeneralPageCarouselNavigationRight");
static_assert(sizeof(FriendListHasWidget_GeneralPageCarouselNavigationRight) == 0x000001, "Wrong size on FriendListHasWidget_GeneralPageCarouselNavigationRight");
static_assert(offsetof(FriendListHasWidget_GeneralPageCarouselNavigationRight, UiNavigation) == 0x000000, "Member 'FriendListHasWidget_GeneralPageCarouselNavigationRight::UiNavigation' has a wrong offset!");

// Function OutGameModule.FriendListHasWidget.OnChangedIndexEvent
// 0x0008 (0x0008 - 0x0000)
struct FriendListHasWidget_OnChangedIndexEvent final
{
public:
	int32                                         NewIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFocus;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FriendListHasWidget_OnChangedIndexEvent) == 0x000004, "Wrong alignment on FriendListHasWidget_OnChangedIndexEvent");
static_assert(sizeof(FriendListHasWidget_OnChangedIndexEvent) == 0x000008, "Wrong size on FriendListHasWidget_OnChangedIndexEvent");
static_assert(offsetof(FriendListHasWidget_OnChangedIndexEvent, NewIndex) == 0x000000, "Member 'FriendListHasWidget_OnChangedIndexEvent::NewIndex' has a wrong offset!");
static_assert(offsetof(FriendListHasWidget_OnChangedIndexEvent, IsFocus) == 0x000004, "Member 'FriendListHasWidget_OnChangedIndexEvent::IsFocus' has a wrong offset!");

// Function OutGameModule.FriendListHasWidget.UpdateTextCount
// 0x000C (0x000C - 0x0000)
struct FriendListHasWidget_UpdateTextCount final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Maxnum;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Maxpage;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendListHasWidget_UpdateTextCount) == 0x000004, "Wrong alignment on FriendListHasWidget_UpdateTextCount");
static_assert(sizeof(FriendListHasWidget_UpdateTextCount) == 0x00000C, "Wrong size on FriendListHasWidget_UpdateTextCount");
static_assert(offsetof(FriendListHasWidget_UpdateTextCount, Num) == 0x000000, "Member 'FriendListHasWidget_UpdateTextCount::Num' has a wrong offset!");
static_assert(offsetof(FriendListHasWidget_UpdateTextCount, Maxnum) == 0x000004, "Member 'FriendListHasWidget_UpdateTextCount::Maxnum' has a wrong offset!");
static_assert(offsetof(FriendListHasWidget_UpdateTextCount, Maxpage) == 0x000008, "Member 'FriendListHasWidget_UpdateTextCount::Maxpage' has a wrong offset!");

// Function OutGameModule.FriendListItemSubWidget.BP_IsOpen
// 0x0001 (0x0001 - 0x0000)
struct FriendListItemSubWidget_BP_IsOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendListItemSubWidget_BP_IsOpen) == 0x000001, "Wrong alignment on FriendListItemSubWidget_BP_IsOpen");
static_assert(sizeof(FriendListItemSubWidget_BP_IsOpen) == 0x000001, "Wrong size on FriendListItemSubWidget_BP_IsOpen");
static_assert(offsetof(FriendListItemSubWidget_BP_IsOpen, ReturnValue) == 0x000000, "Member 'FriendListItemSubWidget_BP_IsOpen::ReturnValue' has a wrong offset!");

// Function OutGameModule.FriendListItemSubWidget.BP_Open
// 0x0002 (0x0002 - 0x0000)
struct FriendListItemSubWidget_BP_Open final
{
public:
	bool                                          IsOpen;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSoundRequeset;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendListItemSubWidget_BP_Open) == 0x000001, "Wrong alignment on FriendListItemSubWidget_BP_Open");
static_assert(sizeof(FriendListItemSubWidget_BP_Open) == 0x000002, "Wrong size on FriendListItemSubWidget_BP_Open");
static_assert(offsetof(FriendListItemSubWidget_BP_Open, IsOpen) == 0x000000, "Member 'FriendListItemSubWidget_BP_Open::IsOpen' has a wrong offset!");
static_assert(offsetof(FriendListItemSubWidget_BP_Open, IsSoundRequeset) == 0x000001, "Member 'FriendListItemSubWidget_BP_Open::IsSoundRequeset' has a wrong offset!");

// Function OutGameModule.FriendListItemSubWidget.OnAddedToFocusSubMenuEvent
// 0x0010 (0x0010 - 0x0000)
struct FriendListItemSubWidget_OnAddedToFocusSubMenuEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FriendListItemSubWidget_OnAddedToFocusSubMenuEvent) == 0x000008, "Wrong alignment on FriendListItemSubWidget_OnAddedToFocusSubMenuEvent");
static_assert(sizeof(FriendListItemSubWidget_OnAddedToFocusSubMenuEvent) == 0x000010, "Wrong size on FriendListItemSubWidget_OnAddedToFocusSubMenuEvent");
static_assert(offsetof(FriendListItemSubWidget_OnAddedToFocusSubMenuEvent, Widget) == 0x000000, "Member 'FriendListItemSubWidget_OnAddedToFocusSubMenuEvent::Widget' has a wrong offset!");
static_assert(offsetof(FriendListItemSubWidget_OnAddedToFocusSubMenuEvent, InputType) == 0x000008, "Member 'FriendListItemSubWidget_OnAddedToFocusSubMenuEvent::InputType' has a wrong offset!");

// Function OutGameModule.FriendListItemSubWidget.OnDecidedSubMenuEvent
// 0x0010 (0x0010 - 0x0000)
struct FriendListItemSubWidget_OnDecidedSubMenuEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FriendListItemSubWidget_OnDecidedSubMenuEvent) == 0x000008, "Wrong alignment on FriendListItemSubWidget_OnDecidedSubMenuEvent");
static_assert(sizeof(FriendListItemSubWidget_OnDecidedSubMenuEvent) == 0x000010, "Wrong size on FriendListItemSubWidget_OnDecidedSubMenuEvent");
static_assert(offsetof(FriendListItemSubWidget_OnDecidedSubMenuEvent, Widget) == 0x000000, "Member 'FriendListItemSubWidget_OnDecidedSubMenuEvent::Widget' has a wrong offset!");
static_assert(offsetof(FriendListItemSubWidget_OnDecidedSubMenuEvent, InputType) == 0x000008, "Member 'FriendListItemSubWidget_OnDecidedSubMenuEvent::InputType' has a wrong offset!");

// DelegateFunction OutGameModule.FriendListItemSubWidget.OnDecidedSubMenuEventDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct FriendListItemSubWidget_OnDecidedSubMenuEventDelegate__DelegateSignature final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendListItemSubWidget_OnDecidedSubMenuEventDelegate__DelegateSignature) == 0x000004, "Wrong alignment on FriendListItemSubWidget_OnDecidedSubMenuEventDelegate__DelegateSignature");
static_assert(sizeof(FriendListItemSubWidget_OnDecidedSubMenuEventDelegate__DelegateSignature) == 0x000004, "Wrong size on FriendListItemSubWidget_OnDecidedSubMenuEventDelegate__DelegateSignature");
static_assert(offsetof(FriendListItemSubWidget_OnDecidedSubMenuEventDelegate__DelegateSignature, Index_0) == 0x000000, "Member 'FriendListItemSubWidget_OnDecidedSubMenuEventDelegate__DelegateSignature::Index_0' has a wrong offset!");

// Function OutGameModule.ItemGetListItemWidget.GetParam
// 0x0014 (0x0014 - 0x0000)
struct ItemGetListItemWidget_GetParam final
{
public:
	struct FItemGetListItemParam                  ReturnValue;                                       // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemGetListItemWidget_GetParam) == 0x000004, "Wrong alignment on ItemGetListItemWidget_GetParam");
static_assert(sizeof(ItemGetListItemWidget_GetParam) == 0x000014, "Wrong size on ItemGetListItemWidget_GetParam");
static_assert(offsetof(ItemGetListItemWidget_GetParam, ReturnValue) == 0x000000, "Member 'ItemGetListItemWidget_GetParam::ReturnValue' has a wrong offset!");

// Function OutGameModule.FriendListWidget.BP_RequestFriendList
// 0x0002 (0x0002 - 0x0000)
struct FriendListWidget_BP_RequestFriendList final
{
public:
	bool                                          bIgnoreFriendStatus;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetPage;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendListWidget_BP_RequestFriendList) == 0x000001, "Wrong alignment on FriendListWidget_BP_RequestFriendList");
static_assert(sizeof(FriendListWidget_BP_RequestFriendList) == 0x000002, "Wrong size on FriendListWidget_BP_RequestFriendList");
static_assert(offsetof(FriendListWidget_BP_RequestFriendList, bIgnoreFriendStatus) == 0x000000, "Member 'FriendListWidget_BP_RequestFriendList::bIgnoreFriendStatus' has a wrong offset!");
static_assert(offsetof(FriendListWidget_BP_RequestFriendList, bResetPage) == 0x000001, "Member 'FriendListWidget_BP_RequestFriendList::bResetPage' has a wrong offset!");

// Function OutGameModule.FriendListWidget.BP_RequestFriendList_Friend
// 0x0002 (0x0002 - 0x0000)
struct FriendListWidget_BP_RequestFriendList_Friend final
{
public:
	bool                                          bIgnoreFriendStatus;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetPage;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendListWidget_BP_RequestFriendList_Friend) == 0x000001, "Wrong alignment on FriendListWidget_BP_RequestFriendList_Friend");
static_assert(sizeof(FriendListWidget_BP_RequestFriendList_Friend) == 0x000002, "Wrong size on FriendListWidget_BP_RequestFriendList_Friend");
static_assert(offsetof(FriendListWidget_BP_RequestFriendList_Friend, bIgnoreFriendStatus) == 0x000000, "Member 'FriendListWidget_BP_RequestFriendList_Friend::bIgnoreFriendStatus' has a wrong offset!");
static_assert(offsetof(FriendListWidget_BP_RequestFriendList_Friend, bResetPage) == 0x000001, "Member 'FriendListWidget_BP_RequestFriendList_Friend::bResetPage' has a wrong offset!");

// Function OutGameModule.FriendListWidget.BP_RequestFriendList_Guild
// 0x0002 (0x0002 - 0x0000)
struct FriendListWidget_BP_RequestFriendList_Guild final
{
public:
	bool                                          bIgnoreFriendStatus;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetPage;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendListWidget_BP_RequestFriendList_Guild) == 0x000001, "Wrong alignment on FriendListWidget_BP_RequestFriendList_Guild");
static_assert(sizeof(FriendListWidget_BP_RequestFriendList_Guild) == 0x000002, "Wrong size on FriendListWidget_BP_RequestFriendList_Guild");
static_assert(offsetof(FriendListWidget_BP_RequestFriendList_Guild, bIgnoreFriendStatus) == 0x000000, "Member 'FriendListWidget_BP_RequestFriendList_Guild::bIgnoreFriendStatus' has a wrong offset!");
static_assert(offsetof(FriendListWidget_BP_RequestFriendList_Guild, bResetPage) == 0x000001, "Member 'FriendListWidget_BP_RequestFriendList_Guild::bResetPage' has a wrong offset!");

// Function OutGameModule.FriendListWidget.BP_RequestFriendList_Platform
// 0x0002 (0x0002 - 0x0000)
struct FriendListWidget_BP_RequestFriendList_Platform final
{
public:
	bool                                          bIgnoreFriendStatus;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetPage;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendListWidget_BP_RequestFriendList_Platform) == 0x000001, "Wrong alignment on FriendListWidget_BP_RequestFriendList_Platform");
static_assert(sizeof(FriendListWidget_BP_RequestFriendList_Platform) == 0x000002, "Wrong size on FriendListWidget_BP_RequestFriendList_Platform");
static_assert(offsetof(FriendListWidget_BP_RequestFriendList_Platform, bIgnoreFriendStatus) == 0x000000, "Member 'FriendListWidget_BP_RequestFriendList_Platform::bIgnoreFriendStatus' has a wrong offset!");
static_assert(offsetof(FriendListWidget_BP_RequestFriendList_Platform, bResetPage) == 0x000001, "Member 'FriendListWidget_BP_RequestFriendList_Platform::bResetPage' has a wrong offset!");

// Function OutGameModule.FriendListWidget.BP_RequestFriendList_RecentlyPlayedWith
// 0x0002 (0x0002 - 0x0000)
struct FriendListWidget_BP_RequestFriendList_RecentlyPlayedWith final
{
public:
	bool                                          bIgnoreFriendStatus;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetPage;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendListWidget_BP_RequestFriendList_RecentlyPlayedWith) == 0x000001, "Wrong alignment on FriendListWidget_BP_RequestFriendList_RecentlyPlayedWith");
static_assert(sizeof(FriendListWidget_BP_RequestFriendList_RecentlyPlayedWith) == 0x000002, "Wrong size on FriendListWidget_BP_RequestFriendList_RecentlyPlayedWith");
static_assert(offsetof(FriendListWidget_BP_RequestFriendList_RecentlyPlayedWith, bIgnoreFriendStatus) == 0x000000, "Member 'FriendListWidget_BP_RequestFriendList_RecentlyPlayedWith::bIgnoreFriendStatus' has a wrong offset!");
static_assert(offsetof(FriendListWidget_BP_RequestFriendList_RecentlyPlayedWith, bResetPage) == 0x000001, "Member 'FriendListWidget_BP_RequestFriendList_RecentlyPlayedWith::bResetPage' has a wrong offset!");

// Function OutGameModule.FriendListWidget.BP_RequestFriendListByName
// 0x0018 (0x0018 - 0x0000)
struct FriendListWidget_BP_RequestFriendListByName final
{
public:
	bool                                          bIgnoreFriendStatus;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SearchName;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendListWidget_BP_RequestFriendListByName) == 0x000008, "Wrong alignment on FriendListWidget_BP_RequestFriendListByName");
static_assert(sizeof(FriendListWidget_BP_RequestFriendListByName) == 0x000018, "Wrong size on FriendListWidget_BP_RequestFriendListByName");
static_assert(offsetof(FriendListWidget_BP_RequestFriendListByName, bIgnoreFriendStatus) == 0x000000, "Member 'FriendListWidget_BP_RequestFriendListByName::bIgnoreFriendStatus' has a wrong offset!");
static_assert(offsetof(FriendListWidget_BP_RequestFriendListByName, SearchName) == 0x000008, "Member 'FriendListWidget_BP_RequestFriendListByName::SearchName' has a wrong offset!");

// Function OutGameModule.FriendListWidget.BP_RequestFriendListCustom
// 0x0004 (0x0004 - 0x0000)
struct FriendListWidget_BP_RequestFriendListCustom final
{
public:
	EFriendListType                               FriendType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFriendStatus                                 FriendStatus;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreFriendStatus;                               // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetPage;                                        // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendListWidget_BP_RequestFriendListCustom) == 0x000001, "Wrong alignment on FriendListWidget_BP_RequestFriendListCustom");
static_assert(sizeof(FriendListWidget_BP_RequestFriendListCustom) == 0x000004, "Wrong size on FriendListWidget_BP_RequestFriendListCustom");
static_assert(offsetof(FriendListWidget_BP_RequestFriendListCustom, FriendType) == 0x000000, "Member 'FriendListWidget_BP_RequestFriendListCustom::FriendType' has a wrong offset!");
static_assert(offsetof(FriendListWidget_BP_RequestFriendListCustom, FriendStatus) == 0x000001, "Member 'FriendListWidget_BP_RequestFriendListCustom::FriendStatus' has a wrong offset!");
static_assert(offsetof(FriendListWidget_BP_RequestFriendListCustom, bIgnoreFriendStatus) == 0x000002, "Member 'FriendListWidget_BP_RequestFriendListCustom::bIgnoreFriendStatus' has a wrong offset!");
static_assert(offsetof(FriendListWidget_BP_RequestFriendListCustom, bResetPage) == 0x000003, "Member 'FriendListWidget_BP_RequestFriendListCustom::bResetPage' has a wrong offset!");

// Function OutGameModule.FriendListWidget.BP_RequestGuildInvite_Friend
// 0x0002 (0x0002 - 0x0000)
struct FriendListWidget_BP_RequestGuildInvite_Friend final
{
public:
	bool                                          bIgnoreFriendStatus;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetPage;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendListWidget_BP_RequestGuildInvite_Friend) == 0x000001, "Wrong alignment on FriendListWidget_BP_RequestGuildInvite_Friend");
static_assert(sizeof(FriendListWidget_BP_RequestGuildInvite_Friend) == 0x000002, "Wrong size on FriendListWidget_BP_RequestGuildInvite_Friend");
static_assert(offsetof(FriendListWidget_BP_RequestGuildInvite_Friend, bIgnoreFriendStatus) == 0x000000, "Member 'FriendListWidget_BP_RequestGuildInvite_Friend::bIgnoreFriendStatus' has a wrong offset!");
static_assert(offsetof(FriendListWidget_BP_RequestGuildInvite_Friend, bResetPage) == 0x000001, "Member 'FriendListWidget_BP_RequestGuildInvite_Friend::bResetPage' has a wrong offset!");

// Function OutGameModule.FriendListWidget.BP_RequestGuildInvitePlatform
// 0x0002 (0x0002 - 0x0000)
struct FriendListWidget_BP_RequestGuildInvitePlatform final
{
public:
	bool                                          bIgnoreFriendStatus;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetPage;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendListWidget_BP_RequestGuildInvitePlatform) == 0x000001, "Wrong alignment on FriendListWidget_BP_RequestGuildInvitePlatform");
static_assert(sizeof(FriendListWidget_BP_RequestGuildInvitePlatform) == 0x000002, "Wrong size on FriendListWidget_BP_RequestGuildInvitePlatform");
static_assert(offsetof(FriendListWidget_BP_RequestGuildInvitePlatform, bIgnoreFriendStatus) == 0x000000, "Member 'FriendListWidget_BP_RequestGuildInvitePlatform::bIgnoreFriendStatus' has a wrong offset!");
static_assert(offsetof(FriendListWidget_BP_RequestGuildInvitePlatform, bResetPage) == 0x000001, "Member 'FriendListWidget_BP_RequestGuildInvitePlatform::bResetPage' has a wrong offset!");

// Function OutGameModule.FriendListWidget.BP_RequestGuildInviteRecentlyPlayedWith
// 0x0002 (0x0002 - 0x0000)
struct FriendListWidget_BP_RequestGuildInviteRecentlyPlayedWith final
{
public:
	bool                                          bIgnoreFriendStatus;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetPage;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendListWidget_BP_RequestGuildInviteRecentlyPlayedWith) == 0x000001, "Wrong alignment on FriendListWidget_BP_RequestGuildInviteRecentlyPlayedWith");
static_assert(sizeof(FriendListWidget_BP_RequestGuildInviteRecentlyPlayedWith) == 0x000002, "Wrong size on FriendListWidget_BP_RequestGuildInviteRecentlyPlayedWith");
static_assert(offsetof(FriendListWidget_BP_RequestGuildInviteRecentlyPlayedWith, bIgnoreFriendStatus) == 0x000000, "Member 'FriendListWidget_BP_RequestGuildInviteRecentlyPlayedWith::bIgnoreFriendStatus' has a wrong offset!");
static_assert(offsetof(FriendListWidget_BP_RequestGuildInviteRecentlyPlayedWith, bResetPage) == 0x000001, "Member 'FriendListWidget_BP_RequestGuildInviteRecentlyPlayedWith::bResetPage' has a wrong offset!");

// Function OutGameModule.FriendListWidget.DoCustomTileViewWidgetNavigation
// 0x0010 (0x0010 - 0x0000)
struct FriendListWidget_DoCustomTileViewWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendListWidget_DoCustomTileViewWidgetNavigation) == 0x000008, "Wrong alignment on FriendListWidget_DoCustomTileViewWidgetNavigation");
static_assert(sizeof(FriendListWidget_DoCustomTileViewWidgetNavigation) == 0x000010, "Wrong size on FriendListWidget_DoCustomTileViewWidgetNavigation");
static_assert(offsetof(FriendListWidget_DoCustomTileViewWidgetNavigation, UiNavigation) == 0x000000, "Member 'FriendListWidget_DoCustomTileViewWidgetNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(FriendListWidget_DoCustomTileViewWidgetNavigation, ReturnValue) == 0x000008, "Member 'FriendListWidget_DoCustomTileViewWidgetNavigation::ReturnValue' has a wrong offset!");

// Function OutGameModule.FriendListWidget.NavigationSet
// 0x0010 (0x0010 - 0x0000)
struct FriendListWidget_NavigationSet final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendListWidget_NavigationSet) == 0x000008, "Wrong alignment on FriendListWidget_NavigationSet");
static_assert(sizeof(FriendListWidget_NavigationSet) == 0x000010, "Wrong size on FriendListWidget_NavigationSet");
static_assert(offsetof(FriendListWidget_NavigationSet, Index_0) == 0x000000, "Member 'FriendListWidget_NavigationSet::Index_0' has a wrong offset!");
static_assert(offsetof(FriendListWidget_NavigationSet, ReturnValue) == 0x000008, "Member 'FriendListWidget_NavigationSet::ReturnValue' has a wrong offset!");

// Function OutGameModule.FriendListWidget.NavigationSetItem
// 0x0008 (0x0008 - 0x0000)
struct FriendListWidget_NavigationSetItem final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendListWidget_NavigationSetItem) == 0x000008, "Wrong alignment on FriendListWidget_NavigationSetItem");
static_assert(sizeof(FriendListWidget_NavigationSetItem) == 0x000008, "Wrong size on FriendListWidget_NavigationSetItem");
static_assert(offsetof(FriendListWidget_NavigationSetItem, ReturnValue) == 0x000000, "Member 'FriendListWidget_NavigationSetItem::ReturnValue' has a wrong offset!");

// Function OutGameModule.FriendListWidget.OnAddedToFocusItemWidget
// 0x0010 (0x0010 - 0x0000)
struct FriendListWidget_OnAddedToFocusItemWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FriendListWidget_OnAddedToFocusItemWidget) == 0x000008, "Wrong alignment on FriendListWidget_OnAddedToFocusItemWidget");
static_assert(sizeof(FriendListWidget_OnAddedToFocusItemWidget) == 0x000010, "Wrong size on FriendListWidget_OnAddedToFocusItemWidget");
static_assert(offsetof(FriendListWidget_OnAddedToFocusItemWidget, Button) == 0x000000, "Member 'FriendListWidget_OnAddedToFocusItemWidget::Button' has a wrong offset!");
static_assert(offsetof(FriendListWidget_OnAddedToFocusItemWidget, InputType) == 0x000008, "Member 'FriendListWidget_OnAddedToFocusItemWidget::InputType' has a wrong offset!");

// DelegateFunction OutGameModule.FriendListWidget.OnChangeFriendCount__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct FriendListWidget_OnChangeFriendCount__DelegateSignature final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Maxnum;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Maxpage;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendListWidget_OnChangeFriendCount__DelegateSignature) == 0x000004, "Wrong alignment on FriendListWidget_OnChangeFriendCount__DelegateSignature");
static_assert(sizeof(FriendListWidget_OnChangeFriendCount__DelegateSignature) == 0x00000C, "Wrong size on FriendListWidget_OnChangeFriendCount__DelegateSignature");
static_assert(offsetof(FriendListWidget_OnChangeFriendCount__DelegateSignature, Num) == 0x000000, "Member 'FriendListWidget_OnChangeFriendCount__DelegateSignature::Num' has a wrong offset!");
static_assert(offsetof(FriendListWidget_OnChangeFriendCount__DelegateSignature, Maxnum) == 0x000004, "Member 'FriendListWidget_OnChangeFriendCount__DelegateSignature::Maxnum' has a wrong offset!");
static_assert(offsetof(FriendListWidget_OnChangeFriendCount__DelegateSignature, Maxpage) == 0x000008, "Member 'FriendListWidget_OnChangeFriendCount__DelegateSignature::Maxpage' has a wrong offset!");

// Function OutGameModule.FriendListWidget.OnDecideButtonWidget
// 0x0010 (0x0010 - 0x0000)
struct FriendListWidget_OnDecideButtonWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FriendListWidget_OnDecideButtonWidget) == 0x000008, "Wrong alignment on FriendListWidget_OnDecideButtonWidget");
static_assert(sizeof(FriendListWidget_OnDecideButtonWidget) == 0x000010, "Wrong size on FriendListWidget_OnDecideButtonWidget");
static_assert(offsetof(FriendListWidget_OnDecideButtonWidget, Button) == 0x000000, "Member 'FriendListWidget_OnDecideButtonWidget::Button' has a wrong offset!");
static_assert(offsetof(FriendListWidget_OnDecideButtonWidget, InputType) == 0x000008, "Member 'FriendListWidget_OnDecideButtonWidget::InputType' has a wrong offset!");

// DelegateFunction OutGameModule.FriendListWidget.OnInputEventDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct FriendListWidget_OnInputEventDelegate__DelegateSignature final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FriendListWidget_OnInputEventDelegate__DelegateSignature) == 0x000008, "Wrong alignment on FriendListWidget_OnInputEventDelegate__DelegateSignature");
static_assert(sizeof(FriendListWidget_OnInputEventDelegate__DelegateSignature) == 0x000010, "Wrong size on FriendListWidget_OnInputEventDelegate__DelegateSignature");
static_assert(offsetof(FriendListWidget_OnInputEventDelegate__DelegateSignature, Widget) == 0x000000, "Member 'FriendListWidget_OnInputEventDelegate__DelegateSignature::Widget' has a wrong offset!");
static_assert(offsetof(FriendListWidget_OnInputEventDelegate__DelegateSignature, InputType) == 0x000008, "Member 'FriendListWidget_OnInputEventDelegate__DelegateSignature::InputType' has a wrong offset!");

// Function OutGameModule.FriendListWidget.ReceivedOnLoadCompleteEvent
// 0x0004 (0x0004 - 0x0000)
struct FriendListWidget_ReceivedOnLoadCompleteEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendListWidget_ReceivedOnLoadCompleteEvent) == 0x000004, "Wrong alignment on FriendListWidget_ReceivedOnLoadCompleteEvent");
static_assert(sizeof(FriendListWidget_ReceivedOnLoadCompleteEvent) == 0x000004, "Wrong size on FriendListWidget_ReceivedOnLoadCompleteEvent");
static_assert(offsetof(FriendListWidget_ReceivedOnLoadCompleteEvent, RequestId) == 0x000000, "Member 'FriendListWidget_ReceivedOnLoadCompleteEvent::RequestId' has a wrong offset!");

// Function OutGameModule.FriendListWidget.SetPageNo
// 0x0004 (0x0004 - 0x0000)
struct FriendListWidget_SetPageNo final
{
public:
	int32                                         PageNo;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendListWidget_SetPageNo) == 0x000004, "Wrong alignment on FriendListWidget_SetPageNo");
static_assert(sizeof(FriendListWidget_SetPageNo) == 0x000004, "Wrong size on FriendListWidget_SetPageNo");
static_assert(offsetof(FriendListWidget_SetPageNo, PageNo) == 0x000000, "Member 'FriendListWidget_SetPageNo::PageNo' has a wrong offset!");

// Function OutGameModule.FriendListWidget.GetSelectedItem
// 0x0008 (0x0008 - 0x0000)
struct FriendListWidget_GetSelectedItem final
{
public:
	const class UFriendListViewEntryObject*       ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendListWidget_GetSelectedItem) == 0x000008, "Wrong alignment on FriendListWidget_GetSelectedItem");
static_assert(sizeof(FriendListWidget_GetSelectedItem) == 0x000008, "Wrong size on FriendListWidget_GetSelectedItem");
static_assert(offsetof(FriendListWidget_GetSelectedItem, ReturnValue) == 0x000000, "Member 'FriendListWidget_GetSelectedItem::ReturnValue' has a wrong offset!");

// Function OutGameModule.FriendListWidget.GetSelectedUserId
// 0x0010 (0x0010 - 0x0000)
struct FriendListWidget_GetSelectedUserId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendListWidget_GetSelectedUserId) == 0x000008, "Wrong alignment on FriendListWidget_GetSelectedUserId");
static_assert(sizeof(FriendListWidget_GetSelectedUserId) == 0x000010, "Wrong size on FriendListWidget_GetSelectedUserId");
static_assert(offsetof(FriendListWidget_GetSelectedUserId, ReturnValue) == 0x000000, "Member 'FriendListWidget_GetSelectedUserId::ReturnValue' has a wrong offset!");

// Function OutGameModule.FriendListWidget.GetSelectedUserName
// 0x0010 (0x0010 - 0x0000)
struct FriendListWidget_GetSelectedUserName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendListWidget_GetSelectedUserName) == 0x000008, "Wrong alignment on FriendListWidget_GetSelectedUserName");
static_assert(sizeof(FriendListWidget_GetSelectedUserName) == 0x000010, "Wrong size on FriendListWidget_GetSelectedUserName");
static_assert(offsetof(FriendListWidget_GetSelectedUserName, ReturnValue) == 0x000000, "Member 'FriendListWidget_GetSelectedUserName::ReturnValue' has a wrong offset!");

// Function OutGameModule.FriendRequesetMenuAppWidget.OnCancelBlockListWindow
// 0x0010 (0x0010 - 0x0000)
struct FriendRequesetMenuAppWidget_OnCancelBlockListWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FriendRequesetMenuAppWidget_OnCancelBlockListWindow) == 0x000008, "Wrong alignment on FriendRequesetMenuAppWidget_OnCancelBlockListWindow");
static_assert(sizeof(FriendRequesetMenuAppWidget_OnCancelBlockListWindow) == 0x000010, "Wrong size on FriendRequesetMenuAppWidget_OnCancelBlockListWindow");
static_assert(offsetof(FriendRequesetMenuAppWidget_OnCancelBlockListWindow, Widget) == 0x000000, "Member 'FriendRequesetMenuAppWidget_OnCancelBlockListWindow::Widget' has a wrong offset!");
static_assert(offsetof(FriendRequesetMenuAppWidget_OnCancelBlockListWindow, InputType) == 0x000008, "Member 'FriendRequesetMenuAppWidget_OnCancelBlockListWindow::InputType' has a wrong offset!");

// Function OutGameModule.FriendRequesetMenuAppWidget.OnCancelConfirmWindow
// 0x0010 (0x0010 - 0x0000)
struct FriendRequesetMenuAppWidget_OnCancelConfirmWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FriendRequesetMenuAppWidget_OnCancelConfirmWindow) == 0x000008, "Wrong alignment on FriendRequesetMenuAppWidget_OnCancelConfirmWindow");
static_assert(sizeof(FriendRequesetMenuAppWidget_OnCancelConfirmWindow) == 0x000010, "Wrong size on FriendRequesetMenuAppWidget_OnCancelConfirmWindow");
static_assert(offsetof(FriendRequesetMenuAppWidget_OnCancelConfirmWindow, Widget) == 0x000000, "Member 'FriendRequesetMenuAppWidget_OnCancelConfirmWindow::Widget' has a wrong offset!");
static_assert(offsetof(FriendRequesetMenuAppWidget_OnCancelConfirmWindow, InputType) == 0x000008, "Member 'FriendRequesetMenuAppWidget_OnCancelConfirmWindow::InputType' has a wrong offset!");

// Function OutGameModule.FriendRequesetMenuAppWidget.OnCancelFriendRequestWindow
// 0x0010 (0x0010 - 0x0000)
struct FriendRequesetMenuAppWidget_OnCancelFriendRequestWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FriendRequesetMenuAppWidget_OnCancelFriendRequestWindow) == 0x000008, "Wrong alignment on FriendRequesetMenuAppWidget_OnCancelFriendRequestWindow");
static_assert(sizeof(FriendRequesetMenuAppWidget_OnCancelFriendRequestWindow) == 0x000010, "Wrong size on FriendRequesetMenuAppWidget_OnCancelFriendRequestWindow");
static_assert(offsetof(FriendRequesetMenuAppWidget_OnCancelFriendRequestWindow, Widget) == 0x000000, "Member 'FriendRequesetMenuAppWidget_OnCancelFriendRequestWindow::Widget' has a wrong offset!");
static_assert(offsetof(FriendRequesetMenuAppWidget_OnCancelFriendRequestWindow, InputType) == 0x000008, "Member 'FriendRequesetMenuAppWidget_OnCancelFriendRequestWindow::InputType' has a wrong offset!");

// Function OutGameModule.FriendRequesetMenuAppWidget.OnDecideBlockListWindow
// 0x0010 (0x0010 - 0x0000)
struct FriendRequesetMenuAppWidget_OnDecideBlockListWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FriendRequesetMenuAppWidget_OnDecideBlockListWindow) == 0x000008, "Wrong alignment on FriendRequesetMenuAppWidget_OnDecideBlockListWindow");
static_assert(sizeof(FriendRequesetMenuAppWidget_OnDecideBlockListWindow) == 0x000010, "Wrong size on FriendRequesetMenuAppWidget_OnDecideBlockListWindow");
static_assert(offsetof(FriendRequesetMenuAppWidget_OnDecideBlockListWindow, Widget) == 0x000000, "Member 'FriendRequesetMenuAppWidget_OnDecideBlockListWindow::Widget' has a wrong offset!");
static_assert(offsetof(FriendRequesetMenuAppWidget_OnDecideBlockListWindow, InputType) == 0x000008, "Member 'FriendRequesetMenuAppWidget_OnDecideBlockListWindow::InputType' has a wrong offset!");
static_assert(offsetof(FriendRequesetMenuAppWidget_OnDecideBlockListWindow, LeftButton) == 0x000009, "Member 'FriendRequesetMenuAppWidget_OnDecideBlockListWindow::LeftButton' has a wrong offset!");

// Function OutGameModule.FriendRequesetMenuAppWidget.OnDecideConfirmWindow
// 0x0010 (0x0010 - 0x0000)
struct FriendRequesetMenuAppWidget_OnDecideConfirmWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FriendRequesetMenuAppWidget_OnDecideConfirmWindow) == 0x000008, "Wrong alignment on FriendRequesetMenuAppWidget_OnDecideConfirmWindow");
static_assert(sizeof(FriendRequesetMenuAppWidget_OnDecideConfirmWindow) == 0x000010, "Wrong size on FriendRequesetMenuAppWidget_OnDecideConfirmWindow");
static_assert(offsetof(FriendRequesetMenuAppWidget_OnDecideConfirmWindow, Widget) == 0x000000, "Member 'FriendRequesetMenuAppWidget_OnDecideConfirmWindow::Widget' has a wrong offset!");
static_assert(offsetof(FriendRequesetMenuAppWidget_OnDecideConfirmWindow, InputType) == 0x000008, "Member 'FriendRequesetMenuAppWidget_OnDecideConfirmWindow::InputType' has a wrong offset!");
static_assert(offsetof(FriendRequesetMenuAppWidget_OnDecideConfirmWindow, LeftButton) == 0x000009, "Member 'FriendRequesetMenuAppWidget_OnDecideConfirmWindow::LeftButton' has a wrong offset!");

// Function OutGameModule.FriendRequesetMenuAppWidget.OnDecideFriendRequestWindow
// 0x0010 (0x0010 - 0x0000)
struct FriendRequesetMenuAppWidget_OnDecideFriendRequestWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FriendRequesetMenuAppWidget_OnDecideFriendRequestWindow) == 0x000008, "Wrong alignment on FriendRequesetMenuAppWidget_OnDecideFriendRequestWindow");
static_assert(sizeof(FriendRequesetMenuAppWidget_OnDecideFriendRequestWindow) == 0x000010, "Wrong size on FriendRequesetMenuAppWidget_OnDecideFriendRequestWindow");
static_assert(offsetof(FriendRequesetMenuAppWidget_OnDecideFriendRequestWindow, Widget) == 0x000000, "Member 'FriendRequesetMenuAppWidget_OnDecideFriendRequestWindow::Widget' has a wrong offset!");
static_assert(offsetof(FriendRequesetMenuAppWidget_OnDecideFriendRequestWindow, InputType) == 0x000008, "Member 'FriendRequesetMenuAppWidget_OnDecideFriendRequestWindow::InputType' has a wrong offset!");
static_assert(offsetof(FriendRequesetMenuAppWidget_OnDecideFriendRequestWindow, LeftButton) == 0x000009, "Member 'FriendRequesetMenuAppWidget_OnDecideFriendRequestWindow::LeftButton' has a wrong offset!");

// Function OutGameModule.FriendRequesetMenuAppWidget.OnFinishFetchDataEvent
// 0x0004 (0x0004 - 0x0000)
struct FriendRequesetMenuAppWidget_OnFinishFetchDataEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendRequesetMenuAppWidget_OnFinishFetchDataEvent) == 0x000004, "Wrong alignment on FriendRequesetMenuAppWidget_OnFinishFetchDataEvent");
static_assert(sizeof(FriendRequesetMenuAppWidget_OnFinishFetchDataEvent) == 0x000004, "Wrong size on FriendRequesetMenuAppWidget_OnFinishFetchDataEvent");
static_assert(offsetof(FriendRequesetMenuAppWidget_OnFinishFetchDataEvent, RequestId) == 0x000000, "Member 'FriendRequesetMenuAppWidget_OnFinishFetchDataEvent::RequestId' has a wrong offset!");

// Function OutGameModule.FriendSubMenuAppWidget.DoCustomNavigation
// 0x0010 (0x0010 - 0x0000)
struct FriendSubMenuAppWidget_DoCustomNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendSubMenuAppWidget_DoCustomNavigation) == 0x000008, "Wrong alignment on FriendSubMenuAppWidget_DoCustomNavigation");
static_assert(sizeof(FriendSubMenuAppWidget_DoCustomNavigation) == 0x000010, "Wrong size on FriendSubMenuAppWidget_DoCustomNavigation");
static_assert(offsetof(FriendSubMenuAppWidget_DoCustomNavigation, UiNavigation) == 0x000000, "Member 'FriendSubMenuAppWidget_DoCustomNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(FriendSubMenuAppWidget_DoCustomNavigation, ReturnValue) == 0x000008, "Member 'FriendSubMenuAppWidget_DoCustomNavigation::ReturnValue' has a wrong offset!");

// DelegateFunction OutGameModule.FriendSubMenuAppWidget.DoCustomWidgetNavigation__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct FriendSubMenuAppWidget_DoCustomWidgetNavigation__DelegateSignature final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendSubMenuAppWidget_DoCustomWidgetNavigation__DelegateSignature) == 0x000001, "Wrong alignment on FriendSubMenuAppWidget_DoCustomWidgetNavigation__DelegateSignature");
static_assert(sizeof(FriendSubMenuAppWidget_DoCustomWidgetNavigation__DelegateSignature) == 0x000001, "Wrong size on FriendSubMenuAppWidget_DoCustomWidgetNavigation__DelegateSignature");
static_assert(offsetof(FriendSubMenuAppWidget_DoCustomWidgetNavigation__DelegateSignature, UiNavigation) == 0x000000, "Member 'FriendSubMenuAppWidget_DoCustomWidgetNavigation__DelegateSignature::UiNavigation' has a wrong offset!");

// Function OutGameModule.FriendSubMenuAppWidget.OnAddedToFocusEvent
// 0x0010 (0x0010 - 0x0000)
struct FriendSubMenuAppWidget_OnAddedToFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FriendSubMenuAppWidget_OnAddedToFocusEvent) == 0x000008, "Wrong alignment on FriendSubMenuAppWidget_OnAddedToFocusEvent");
static_assert(sizeof(FriendSubMenuAppWidget_OnAddedToFocusEvent) == 0x000010, "Wrong size on FriendSubMenuAppWidget_OnAddedToFocusEvent");
static_assert(offsetof(FriendSubMenuAppWidget_OnAddedToFocusEvent, Widget) == 0x000000, "Member 'FriendSubMenuAppWidget_OnAddedToFocusEvent::Widget' has a wrong offset!");
static_assert(offsetof(FriendSubMenuAppWidget_OnAddedToFocusEvent, InputType) == 0x000008, "Member 'FriendSubMenuAppWidget_OnAddedToFocusEvent::InputType' has a wrong offset!");

// Function OutGameModule.FriendSubMenuAppWidget.OnDecideEvent
// 0x0010 (0x0010 - 0x0000)
struct FriendSubMenuAppWidget_OnDecideEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FriendSubMenuAppWidget_OnDecideEvent) == 0x000008, "Wrong alignment on FriendSubMenuAppWidget_OnDecideEvent");
static_assert(sizeof(FriendSubMenuAppWidget_OnDecideEvent) == 0x000010, "Wrong size on FriendSubMenuAppWidget_OnDecideEvent");
static_assert(offsetof(FriendSubMenuAppWidget_OnDecideEvent, Widget) == 0x000000, "Member 'FriendSubMenuAppWidget_OnDecideEvent::Widget' has a wrong offset!");
static_assert(offsetof(FriendSubMenuAppWidget_OnDecideEvent, InputType) == 0x000008, "Member 'FriendSubMenuAppWidget_OnDecideEvent::InputType' has a wrong offset!");

// DelegateFunction OutGameModule.FriendSubMenuAppWidget.OnRequestFetchEventDelegate__DelegateSignature
// 0x0002 (0x0002 - 0x0000)
struct FriendSubMenuAppWidget_OnRequestFetchEventDelegate__DelegateSignature final
{
public:
	EFriendListType                               FriendType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFriendStatus                                 FriendStatus;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendSubMenuAppWidget_OnRequestFetchEventDelegate__DelegateSignature) == 0x000001, "Wrong alignment on FriendSubMenuAppWidget_OnRequestFetchEventDelegate__DelegateSignature");
static_assert(sizeof(FriendSubMenuAppWidget_OnRequestFetchEventDelegate__DelegateSignature) == 0x000002, "Wrong size on FriendSubMenuAppWidget_OnRequestFetchEventDelegate__DelegateSignature");
static_assert(offsetof(FriendSubMenuAppWidget_OnRequestFetchEventDelegate__DelegateSignature, FriendType) == 0x000000, "Member 'FriendSubMenuAppWidget_OnRequestFetchEventDelegate__DelegateSignature::FriendType' has a wrong offset!");
static_assert(offsetof(FriendSubMenuAppWidget_OnRequestFetchEventDelegate__DelegateSignature, FriendStatus) == 0x000001, "Member 'FriendSubMenuAppWidget_OnRequestFetchEventDelegate__DelegateSignature::FriendStatus' has a wrong offset!");

// Function OutGameModule.FriendSubMenuAppWidget.RequestFriend
// 0x0001 (0x0001 - 0x0000)
struct FriendSubMenuAppWidget_RequestFriend final
{
public:
	bool                                          Focus;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendSubMenuAppWidget_RequestFriend) == 0x000001, "Wrong alignment on FriendSubMenuAppWidget_RequestFriend");
static_assert(sizeof(FriendSubMenuAppWidget_RequestFriend) == 0x000001, "Wrong size on FriendSubMenuAppWidget_RequestFriend");
static_assert(offsetof(FriendSubMenuAppWidget_RequestFriend, Focus) == 0x000000, "Member 'FriendSubMenuAppWidget_RequestFriend::Focus' has a wrong offset!");

// Function OutGameModule.ItemDetailsWidget.Show
// 0x0018 (0x0018 - 0x0000)
struct ItemDetailsWidget_Show final
{
public:
	int32                                         ItemCode;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemCategory;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDetailsWidget_Show) == 0x000008, "Wrong alignment on ItemDetailsWidget_Show");
static_assert(sizeof(ItemDetailsWidget_Show) == 0x000018, "Wrong size on ItemDetailsWidget_Show");
static_assert(offsetof(ItemDetailsWidget_Show, ItemCode) == 0x000000, "Member 'ItemDetailsWidget_Show::ItemCode' has a wrong offset!");
static_assert(offsetof(ItemDetailsWidget_Show, ItemCategory) == 0x000008, "Member 'ItemDetailsWidget_Show::ItemCategory' has a wrong offset!");

// Function OutGameModule.GalleryBlackPanelWidget.FinishAnimationEvent
// 0x0010 (0x0010 - 0x0000)
struct GalleryBlackPanelWidget_FinishAnimationEvent final
{
public:
	class UWidgetBase*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UWidgetAnimation*                 Animation;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GalleryBlackPanelWidget_FinishAnimationEvent) == 0x000008, "Wrong alignment on GalleryBlackPanelWidget_FinishAnimationEvent");
static_assert(sizeof(GalleryBlackPanelWidget_FinishAnimationEvent) == 0x000010, "Wrong size on GalleryBlackPanelWidget_FinishAnimationEvent");
static_assert(offsetof(GalleryBlackPanelWidget_FinishAnimationEvent, Widget) == 0x000000, "Member 'GalleryBlackPanelWidget_FinishAnimationEvent::Widget' has a wrong offset!");
static_assert(offsetof(GalleryBlackPanelWidget_FinishAnimationEvent, Animation) == 0x000008, "Member 'GalleryBlackPanelWidget_FinishAnimationEvent::Animation' has a wrong offset!");

// Function OutGameModule.GalleryBlackPanelWidget.OpenPanel
// 0x0001 (0x0001 - 0x0000)
struct GalleryBlackPanelWidget_OpenPanel final
{
public:
	bool                                          IsOpen;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GalleryBlackPanelWidget_OpenPanel) == 0x000001, "Wrong alignment on GalleryBlackPanelWidget_OpenPanel");
static_assert(sizeof(GalleryBlackPanelWidget_OpenPanel) == 0x000001, "Wrong size on GalleryBlackPanelWidget_OpenPanel");
static_assert(offsetof(GalleryBlackPanelWidget_OpenPanel, IsOpen) == 0x000000, "Member 'GalleryBlackPanelWidget_OpenPanel::IsOpen' has a wrong offset!");

// Function OutGameModule.GalleryDialogWidget.EnableAddButton
// 0x0001 (0x0001 - 0x0000)
struct GalleryDialogWidget_EnableAddButton final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GalleryDialogWidget_EnableAddButton) == 0x000001, "Wrong alignment on GalleryDialogWidget_EnableAddButton");
static_assert(sizeof(GalleryDialogWidget_EnableAddButton) == 0x000001, "Wrong size on GalleryDialogWidget_EnableAddButton");
static_assert(offsetof(GalleryDialogWidget_EnableAddButton, Enable) == 0x000000, "Member 'GalleryDialogWidget_EnableAddButton::Enable' has a wrong offset!");

// Function OutGameModule.GalleryDialogWidget.OnDecideAddButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct GalleryDialogWidget_OnDecideAddButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GalleryDialogWidget_OnDecideAddButtonEvent) == 0x000008, "Wrong alignment on GalleryDialogWidget_OnDecideAddButtonEvent");
static_assert(sizeof(GalleryDialogWidget_OnDecideAddButtonEvent) == 0x000010, "Wrong size on GalleryDialogWidget_OnDecideAddButtonEvent");
static_assert(offsetof(GalleryDialogWidget_OnDecideAddButtonEvent, Widget) == 0x000000, "Member 'GalleryDialogWidget_OnDecideAddButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(GalleryDialogWidget_OnDecideAddButtonEvent, InputType) == 0x000008, "Member 'GalleryDialogWidget_OnDecideAddButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.GalleryDialogWidget.OnDecideRemoveButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct GalleryDialogWidget_OnDecideRemoveButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GalleryDialogWidget_OnDecideRemoveButtonEvent) == 0x000008, "Wrong alignment on GalleryDialogWidget_OnDecideRemoveButtonEvent");
static_assert(sizeof(GalleryDialogWidget_OnDecideRemoveButtonEvent) == 0x000010, "Wrong size on GalleryDialogWidget_OnDecideRemoveButtonEvent");
static_assert(offsetof(GalleryDialogWidget_OnDecideRemoveButtonEvent, Widget) == 0x000000, "Member 'GalleryDialogWidget_OnDecideRemoveButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(GalleryDialogWidget_OnDecideRemoveButtonEvent, InputType) == 0x000008, "Member 'GalleryDialogWidget_OnDecideRemoveButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.GalleryDialogWidget.OnNagativButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct GalleryDialogWidget_OnNagativButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GalleryDialogWidget_OnNagativButtonEvent) == 0x000008, "Wrong alignment on GalleryDialogWidget_OnNagativButtonEvent");
static_assert(sizeof(GalleryDialogWidget_OnNagativButtonEvent) == 0x000010, "Wrong size on GalleryDialogWidget_OnNagativButtonEvent");
static_assert(offsetof(GalleryDialogWidget_OnNagativButtonEvent, Widget) == 0x000000, "Member 'GalleryDialogWidget_OnNagativButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(GalleryDialogWidget_OnNagativButtonEvent, InputType) == 0x000008, "Member 'GalleryDialogWidget_OnNagativButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.NoticeListWidget.DoCustomWidgetNavigation
// 0x0001 (0x0001 - 0x0000)
struct NoticeListWidget_DoCustomWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NoticeListWidget_DoCustomWidgetNavigation) == 0x000001, "Wrong alignment on NoticeListWidget_DoCustomWidgetNavigation");
static_assert(sizeof(NoticeListWidget_DoCustomWidgetNavigation) == 0x000001, "Wrong size on NoticeListWidget_DoCustomWidgetNavigation");
static_assert(offsetof(NoticeListWidget_DoCustomWidgetNavigation, UiNavigation) == 0x000000, "Member 'NoticeListWidget_DoCustomWidgetNavigation::UiNavigation' has a wrong offset!");

// Function OutGameModule.NoticeListWidget.OnAddFocusEvent
// 0x0010 (0x0010 - 0x0000)
struct NoticeListWidget_OnAddFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NoticeListWidget_OnAddFocusEvent) == 0x000008, "Wrong alignment on NoticeListWidget_OnAddFocusEvent");
static_assert(sizeof(NoticeListWidget_OnAddFocusEvent) == 0x000010, "Wrong size on NoticeListWidget_OnAddFocusEvent");
static_assert(offsetof(NoticeListWidget_OnAddFocusEvent, Widget) == 0x000000, "Member 'NoticeListWidget_OnAddFocusEvent::Widget' has a wrong offset!");
static_assert(offsetof(NoticeListWidget_OnAddFocusEvent, InputType) == 0x000008, "Member 'NoticeListWidget_OnAddFocusEvent::InputType' has a wrong offset!");

// Function OutGameModule.GalleryListWidget.BP_GetEntryObject
// 0x0008 (0x0008 - 0x0000)
struct GalleryListWidget_BP_GetEntryObject final
{
public:
	class UGalleryPanelEntryObject*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GalleryListWidget_BP_GetEntryObject) == 0x000008, "Wrong alignment on GalleryListWidget_BP_GetEntryObject");
static_assert(sizeof(GalleryListWidget_BP_GetEntryObject) == 0x000008, "Wrong size on GalleryListWidget_BP_GetEntryObject");
static_assert(offsetof(GalleryListWidget_BP_GetEntryObject, ReturnValue) == 0x000000, "Member 'GalleryListWidget_BP_GetEntryObject::ReturnValue' has a wrong offset!");

// Function OutGameModule.GalleryListWidget.DoCustomWidgetNavigation
// 0x0001 (0x0001 - 0x0000)
struct GalleryListWidget_DoCustomWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GalleryListWidget_DoCustomWidgetNavigation) == 0x000001, "Wrong alignment on GalleryListWidget_DoCustomWidgetNavigation");
static_assert(sizeof(GalleryListWidget_DoCustomWidgetNavigation) == 0x000001, "Wrong size on GalleryListWidget_DoCustomWidgetNavigation");
static_assert(offsetof(GalleryListWidget_DoCustomWidgetNavigation, UiNavigation) == 0x000000, "Member 'GalleryListWidget_DoCustomWidgetNavigation::UiNavigation' has a wrong offset!");

// Function OutGameModule.GalleryListWidget.OnAddedToFocusEvent
// 0x0010 (0x0010 - 0x0000)
struct GalleryListWidget_OnAddedToFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GalleryListWidget_OnAddedToFocusEvent) == 0x000008, "Wrong alignment on GalleryListWidget_OnAddedToFocusEvent");
static_assert(sizeof(GalleryListWidget_OnAddedToFocusEvent) == 0x000010, "Wrong size on GalleryListWidget_OnAddedToFocusEvent");
static_assert(offsetof(GalleryListWidget_OnAddedToFocusEvent, Widget) == 0x000000, "Member 'GalleryListWidget_OnAddedToFocusEvent::Widget' has a wrong offset!");
static_assert(offsetof(GalleryListWidget_OnAddedToFocusEvent, InputType) == 0x000008, "Member 'GalleryListWidget_OnAddedToFocusEvent::InputType' has a wrong offset!");

// Function OutGameModule.GalleryListWidget.OnCompleteLoad
// 0x0004 (0x0004 - 0x0000)
struct GalleryListWidget_OnCompleteLoad final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GalleryListWidget_OnCompleteLoad) == 0x000004, "Wrong alignment on GalleryListWidget_OnCompleteLoad");
static_assert(sizeof(GalleryListWidget_OnCompleteLoad) == 0x000004, "Wrong size on GalleryListWidget_OnCompleteLoad");
static_assert(offsetof(GalleryListWidget_OnCompleteLoad, Code) == 0x000000, "Member 'GalleryListWidget_OnCompleteLoad::Code' has a wrong offset!");

// Function OutGameModule.GalleryListWidget.OnDecideButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct GalleryListWidget_OnDecideButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GalleryListWidget_OnDecideButtonEvent) == 0x000008, "Wrong alignment on GalleryListWidget_OnDecideButtonEvent");
static_assert(sizeof(GalleryListWidget_OnDecideButtonEvent) == 0x000010, "Wrong size on GalleryListWidget_OnDecideButtonEvent");
static_assert(offsetof(GalleryListWidget_OnDecideButtonEvent, Widget) == 0x000000, "Member 'GalleryListWidget_OnDecideButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(GalleryListWidget_OnDecideButtonEvent, InputType) == 0x000008, "Member 'GalleryListWidget_OnDecideButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.GalleryListWidget.OnDicedeReturnButton
// 0x0010 (0x0010 - 0x0000)
struct GalleryListWidget_OnDicedeReturnButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GalleryListWidget_OnDicedeReturnButton) == 0x000008, "Wrong alignment on GalleryListWidget_OnDicedeReturnButton");
static_assert(sizeof(GalleryListWidget_OnDicedeReturnButton) == 0x000010, "Wrong size on GalleryListWidget_OnDicedeReturnButton");
static_assert(offsetof(GalleryListWidget_OnDicedeReturnButton, Widget) == 0x000000, "Member 'GalleryListWidget_OnDicedeReturnButton::Widget' has a wrong offset!");
static_assert(offsetof(GalleryListWidget_OnDicedeReturnButton, InputType) == 0x000008, "Member 'GalleryListWidget_OnDicedeReturnButton::InputType' has a wrong offset!");

// Function OutGameModule.GalleryListWidget.OpenFullScreenSubMenu
// 0x0008 (0x0008 - 0x0000)
struct GalleryListWidget_OpenFullScreenSubMenu final
{
public:
	class UGalleryPanelWidget*                    PanelWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GalleryListWidget_OpenFullScreenSubMenu) == 0x000008, "Wrong alignment on GalleryListWidget_OpenFullScreenSubMenu");
static_assert(sizeof(GalleryListWidget_OpenFullScreenSubMenu) == 0x000008, "Wrong size on GalleryListWidget_OpenFullScreenSubMenu");
static_assert(offsetof(GalleryListWidget_OpenFullScreenSubMenu, PanelWidget) == 0x000000, "Member 'GalleryListWidget_OpenFullScreenSubMenu::PanelWidget' has a wrong offset!");

// Function OutGameModule.GalleryListWidget.OpenSubMenu
// 0x0010 (0x0010 - 0x0000)
struct GalleryListWidget_OpenSubMenu final
{
public:
	class UGalleryPanelWidget*                    PanelWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubmenuType;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GalleryListWidget_OpenSubMenu) == 0x000008, "Wrong alignment on GalleryListWidget_OpenSubMenu");
static_assert(sizeof(GalleryListWidget_OpenSubMenu) == 0x000010, "Wrong size on GalleryListWidget_OpenSubMenu");
static_assert(offsetof(GalleryListWidget_OpenSubMenu, PanelWidget) == 0x000000, "Member 'GalleryListWidget_OpenSubMenu::PanelWidget' has a wrong offset!");
static_assert(offsetof(GalleryListWidget_OpenSubMenu, SubmenuType) == 0x000008, "Member 'GalleryListWidget_OpenSubMenu::SubmenuType' has a wrong offset!");

// Function OutGameModule.GalleryListWidget.SetTopFocusPanel
// 0x0001 (0x0001 - 0x0000)
struct GalleryListWidget_SetTopFocusPanel final
{
public:
	ETutorialPopupScene                           Scence;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GalleryListWidget_SetTopFocusPanel) == 0x000001, "Wrong alignment on GalleryListWidget_SetTopFocusPanel");
static_assert(sizeof(GalleryListWidget_SetTopFocusPanel) == 0x000001, "Wrong size on GalleryListWidget_SetTopFocusPanel");
static_assert(offsetof(GalleryListWidget_SetTopFocusPanel, Scence) == 0x000000, "Member 'GalleryListWidget_SetTopFocusPanel::Scence' has a wrong offset!");

// Function OutGameModule.GalleryListWidget.UpdateCompleted
// 0x0004 (0x0004 - 0x0000)
struct GalleryListWidget_UpdateCompleted final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GalleryListWidget_UpdateCompleted) == 0x000004, "Wrong alignment on GalleryListWidget_UpdateCompleted");
static_assert(sizeof(GalleryListWidget_UpdateCompleted) == 0x000004, "Wrong size on GalleryListWidget_UpdateCompleted");
static_assert(offsetof(GalleryListWidget_UpdateCompleted, ID) == 0x000000, "Member 'GalleryListWidget_UpdateCompleted::ID' has a wrong offset!");

// Function OutGameModule.GalleryPanelEntryObject.GetOpenPossiblePanelNum
// 0x0004 (0x0004 - 0x0000)
struct GalleryPanelEntryObject_GetOpenPossiblePanelNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GalleryPanelEntryObject_GetOpenPossiblePanelNum) == 0x000004, "Wrong alignment on GalleryPanelEntryObject_GetOpenPossiblePanelNum");
static_assert(sizeof(GalleryPanelEntryObject_GetOpenPossiblePanelNum) == 0x000004, "Wrong size on GalleryPanelEntryObject_GetOpenPossiblePanelNum");
static_assert(offsetof(GalleryPanelEntryObject_GetOpenPossiblePanelNum, ReturnValue) == 0x000000, "Member 'GalleryPanelEntryObject_GetOpenPossiblePanelNum::ReturnValue' has a wrong offset!");

// Function OutGameModule.NoticeTopWidget.OnChangeSelectPanelEvent
// 0x0008 (0x0008 - 0x0000)
struct NoticeTopWidget_OnChangeSelectPanelEvent final
{
public:
	const class UNoticePanelEntryObject*          EntryObject;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NoticeTopWidget_OnChangeSelectPanelEvent) == 0x000008, "Wrong alignment on NoticeTopWidget_OnChangeSelectPanelEvent");
static_assert(sizeof(NoticeTopWidget_OnChangeSelectPanelEvent) == 0x000008, "Wrong size on NoticeTopWidget_OnChangeSelectPanelEvent");
static_assert(offsetof(NoticeTopWidget_OnChangeSelectPanelEvent, EntryObject) == 0x000000, "Member 'NoticeTopWidget_OnChangeSelectPanelEvent::EntryObject' has a wrong offset!");

// Function OutGameModule.GalleryPanelWidget.OnOpenEvent
// 0x0001 (0x0001 - 0x0000)
struct GalleryPanelWidget_OnOpenEvent final
{
public:
	bool                                          bOpen;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GalleryPanelWidget_OnOpenEvent) == 0x000001, "Wrong alignment on GalleryPanelWidget_OnOpenEvent");
static_assert(sizeof(GalleryPanelWidget_OnOpenEvent) == 0x000001, "Wrong size on GalleryPanelWidget_OnOpenEvent");
static_assert(offsetof(GalleryPanelWidget_OnOpenEvent, bOpen) == 0x000000, "Member 'GalleryPanelWidget_OnOpenEvent::bOpen' has a wrong offset!");

// Function OutGameModule.GalleryStoryWidget.MoveScroll
// 0x0040 (0x0040 - 0x0000)
struct GalleryStoryWidget_MoveScroll final
{
public:
	struct FAnalogInputEvent                      KeyEvent;                                          // 0x0000(0x0040)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GalleryStoryWidget_MoveScroll) == 0x000008, "Wrong alignment on GalleryStoryWidget_MoveScroll");
static_assert(sizeof(GalleryStoryWidget_MoveScroll) == 0x000040, "Wrong size on GalleryStoryWidget_MoveScroll");
static_assert(offsetof(GalleryStoryWidget_MoveScroll, KeyEvent) == 0x000000, "Member 'GalleryStoryWidget_MoveScroll::KeyEvent' has a wrong offset!");

// Function OutGameModule.GalleryTexture.BP_SetImageCode
// 0x0004 (0x0004 - 0x0000)
struct GalleryTexture_BP_SetImageCode final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GalleryTexture_BP_SetImageCode) == 0x000004, "Wrong alignment on GalleryTexture_BP_SetImageCode");
static_assert(sizeof(GalleryTexture_BP_SetImageCode) == 0x000004, "Wrong size on GalleryTexture_BP_SetImageCode");
static_assert(offsetof(GalleryTexture_BP_SetImageCode, Code) == 0x000000, "Member 'GalleryTexture_BP_SetImageCode::Code' has a wrong offset!");

// Function OutGameModule.ItemRankUpWidget.AddRank
// 0x0004 (0x0004 - 0x0000)
struct ItemRankUpWidget_AddRank final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemRankUpWidget_AddRank) == 0x000004, "Wrong alignment on ItemRankUpWidget_AddRank");
static_assert(sizeof(ItemRankUpWidget_AddRank) == 0x000004, "Wrong size on ItemRankUpWidget_AddRank");
static_assert(offsetof(ItemRankUpWidget_AddRank, Value) == 0x000000, "Member 'ItemRankUpWidget_AddRank::Value' has a wrong offset!");

// Function OutGameModule.ItemRankUpWidget.CreateItemRankUpWidget
// 0x000C (0x000C - 0x0000)
struct ItemRankUpWidget_CreateItemRankUpWidget final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exp;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemRankUpWidget_CreateItemRankUpWidget) == 0x000004, "Wrong alignment on ItemRankUpWidget_CreateItemRankUpWidget");
static_assert(sizeof(ItemRankUpWidget_CreateItemRankUpWidget) == 0x00000C, "Wrong size on ItemRankUpWidget_CreateItemRankUpWidget");
static_assert(offsetof(ItemRankUpWidget_CreateItemRankUpWidget, Rank) == 0x000000, "Member 'ItemRankUpWidget_CreateItemRankUpWidget::Rank' has a wrong offset!");
static_assert(offsetof(ItemRankUpWidget_CreateItemRankUpWidget, Exp) == 0x000004, "Member 'ItemRankUpWidget_CreateItemRankUpWidget::Exp' has a wrong offset!");
static_assert(offsetof(ItemRankUpWidget_CreateItemRankUpWidget, Max) == 0x000008, "Member 'ItemRankUpWidget_CreateItemRankUpWidget::Max' has a wrong offset!");

// Function OutGameModule.GalleryTradeWidget.AddToFocusEvent
// 0x0010 (0x0010 - 0x0000)
struct GalleryTradeWidget_AddToFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GalleryTradeWidget_AddToFocusEvent) == 0x000008, "Wrong alignment on GalleryTradeWidget_AddToFocusEvent");
static_assert(sizeof(GalleryTradeWidget_AddToFocusEvent) == 0x000010, "Wrong size on GalleryTradeWidget_AddToFocusEvent");
static_assert(offsetof(GalleryTradeWidget_AddToFocusEvent, Widget) == 0x000000, "Member 'GalleryTradeWidget_AddToFocusEvent::Widget' has a wrong offset!");
static_assert(offsetof(GalleryTradeWidget_AddToFocusEvent, InputType) == 0x000008, "Member 'GalleryTradeWidget_AddToFocusEvent::InputType' has a wrong offset!");

// Function OutGameModule.GalleryTradeWidget.DoCustomMaxButtonNavigation
// 0x0001 (0x0001 - 0x0000)
struct GalleryTradeWidget_DoCustomMaxButtonNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GalleryTradeWidget_DoCustomMaxButtonNavigation) == 0x000001, "Wrong alignment on GalleryTradeWidget_DoCustomMaxButtonNavigation");
static_assert(sizeof(GalleryTradeWidget_DoCustomMaxButtonNavigation) == 0x000001, "Wrong size on GalleryTradeWidget_DoCustomMaxButtonNavigation");
static_assert(offsetof(GalleryTradeWidget_DoCustomMaxButtonNavigation, UiNavigation) == 0x000000, "Member 'GalleryTradeWidget_DoCustomMaxButtonNavigation::UiNavigation' has a wrong offset!");

// Function OutGameModule.GalleryTradeWidget.DoCustomWidgetNavigation
// 0x0001 (0x0001 - 0x0000)
struct GalleryTradeWidget_DoCustomWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GalleryTradeWidget_DoCustomWidgetNavigation) == 0x000001, "Wrong alignment on GalleryTradeWidget_DoCustomWidgetNavigation");
static_assert(sizeof(GalleryTradeWidget_DoCustomWidgetNavigation) == 0x000001, "Wrong size on GalleryTradeWidget_DoCustomWidgetNavigation");
static_assert(offsetof(GalleryTradeWidget_DoCustomWidgetNavigation, UiNavigation) == 0x000000, "Member 'GalleryTradeWidget_DoCustomWidgetNavigation::UiNavigation' has a wrong offset!");

// Function OutGameModule.GalleryTradeWidget.OnCompleteEvent
// 0x0004 (0x0004 - 0x0000)
struct GalleryTradeWidget_OnCompleteEvent final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GalleryTradeWidget_OnCompleteEvent) == 0x000004, "Wrong alignment on GalleryTradeWidget_OnCompleteEvent");
static_assert(sizeof(GalleryTradeWidget_OnCompleteEvent) == 0x000004, "Wrong size on GalleryTradeWidget_OnCompleteEvent");
static_assert(offsetof(GalleryTradeWidget_OnCompleteEvent, ID) == 0x000000, "Member 'GalleryTradeWidget_OnCompleteEvent::ID' has a wrong offset!");

// Function OutGameModule.GalleryTradeWidget.OnDecideMaxButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct GalleryTradeWidget_OnDecideMaxButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GalleryTradeWidget_OnDecideMaxButtonEvent) == 0x000008, "Wrong alignment on GalleryTradeWidget_OnDecideMaxButtonEvent");
static_assert(sizeof(GalleryTradeWidget_OnDecideMaxButtonEvent) == 0x000010, "Wrong size on GalleryTradeWidget_OnDecideMaxButtonEvent");
static_assert(offsetof(GalleryTradeWidget_OnDecideMaxButtonEvent, Widget) == 0x000000, "Member 'GalleryTradeWidget_OnDecideMaxButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(GalleryTradeWidget_OnDecideMaxButtonEvent, InputType) == 0x000008, "Member 'GalleryTradeWidget_OnDecideMaxButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.GalleryTradeWidget.SetTicketPanelEvent
// 0x0004 (0x0004 - 0x0000)
struct GalleryTradeWidget_SetTicketPanelEvent final
{
public:
	int32                                         TicketNum;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GalleryTradeWidget_SetTicketPanelEvent) == 0x000004, "Wrong alignment on GalleryTradeWidget_SetTicketPanelEvent");
static_assert(sizeof(GalleryTradeWidget_SetTicketPanelEvent) == 0x000004, "Wrong size on GalleryTradeWidget_SetTicketPanelEvent");
static_assert(offsetof(GalleryTradeWidget_SetTicketPanelEvent, TicketNum) == 0x000000, "Member 'GalleryTradeWidget_SetTicketPanelEvent::TicketNum' has a wrong offset!");

// Function OutGameModule.GalleryWindowWidget.DoCustomWidgetNavigation
// 0x0001 (0x0001 - 0x0000)
struct GalleryWindowWidget_DoCustomWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GalleryWindowWidget_DoCustomWidgetNavigation) == 0x000001, "Wrong alignment on GalleryWindowWidget_DoCustomWidgetNavigation");
static_assert(sizeof(GalleryWindowWidget_DoCustomWidgetNavigation) == 0x000001, "Wrong size on GalleryWindowWidget_DoCustomWidgetNavigation");
static_assert(offsetof(GalleryWindowWidget_DoCustomWidgetNavigation, UiNavigation) == 0x000000, "Member 'GalleryWindowWidget_DoCustomWidgetNavigation::UiNavigation' has a wrong offset!");

// Function OutGameModule.GalleryWindowWidget.OnAddToFocusEvent
// 0x0010 (0x0010 - 0x0000)
struct GalleryWindowWidget_OnAddToFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GalleryWindowWidget_OnAddToFocusEvent) == 0x000008, "Wrong alignment on GalleryWindowWidget_OnAddToFocusEvent");
static_assert(sizeof(GalleryWindowWidget_OnAddToFocusEvent) == 0x000010, "Wrong size on GalleryWindowWidget_OnAddToFocusEvent");
static_assert(offsetof(GalleryWindowWidget_OnAddToFocusEvent, Widget) == 0x000000, "Member 'GalleryWindowWidget_OnAddToFocusEvent::Widget' has a wrong offset!");
static_assert(offsetof(GalleryWindowWidget_OnAddToFocusEvent, InputType) == 0x000008, "Member 'GalleryWindowWidget_OnAddToFocusEvent::InputType' has a wrong offset!");

// Function OutGameModule.GalleryWindowWidget.OnDicideEvent
// 0x0010 (0x0010 - 0x0000)
struct GalleryWindowWidget_OnDicideEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GalleryWindowWidget_OnDicideEvent) == 0x000008, "Wrong alignment on GalleryWindowWidget_OnDicideEvent");
static_assert(sizeof(GalleryWindowWidget_OnDicideEvent) == 0x000010, "Wrong size on GalleryWindowWidget_OnDicideEvent");
static_assert(offsetof(GalleryWindowWidget_OnDicideEvent, Widget) == 0x000000, "Member 'GalleryWindowWidget_OnDicideEvent::Widget' has a wrong offset!");
static_assert(offsetof(GalleryWindowWidget_OnDicideEvent, InputType) == 0x000008, "Member 'GalleryWindowWidget_OnDicideEvent::InputType' has a wrong offset!");

// Function OutGameModule.GalleryWindowWidget.OnPressEvent
// 0x0010 (0x0010 - 0x0000)
struct GalleryWindowWidget_OnPressEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GalleryWindowWidget_OnPressEvent) == 0x000008, "Wrong alignment on GalleryWindowWidget_OnPressEvent");
static_assert(sizeof(GalleryWindowWidget_OnPressEvent) == 0x000010, "Wrong size on GalleryWindowWidget_OnPressEvent");
static_assert(offsetof(GalleryWindowWidget_OnPressEvent, Widget) == 0x000000, "Member 'GalleryWindowWidget_OnPressEvent::Widget' has a wrong offset!");
static_assert(offsetof(GalleryWindowWidget_OnPressEvent, InputType) == 0x000008, "Member 'GalleryWindowWidget_OnPressEvent::InputType' has a wrong offset!");

// Function OutGameModule.GalleryWindowWidget.OnRemoveToFocusEvent
// 0x0010 (0x0010 - 0x0000)
struct GalleryWindowWidget_OnRemoveToFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GalleryWindowWidget_OnRemoveToFocusEvent) == 0x000008, "Wrong alignment on GalleryWindowWidget_OnRemoveToFocusEvent");
static_assert(sizeof(GalleryWindowWidget_OnRemoveToFocusEvent) == 0x000010, "Wrong size on GalleryWindowWidget_OnRemoveToFocusEvent");
static_assert(offsetof(GalleryWindowWidget_OnRemoveToFocusEvent, Widget) == 0x000000, "Member 'GalleryWindowWidget_OnRemoveToFocusEvent::Widget' has a wrong offset!");
static_assert(offsetof(GalleryWindowWidget_OnRemoveToFocusEvent, InputType) == 0x000008, "Member 'GalleryWindowWidget_OnRemoveToFocusEvent::InputType' has a wrong offset!");

// Function OutGameModule.TermsOfServiceWidget.OnFinishedFadeIn
// 0x0001 (0x0001 - 0x0000)
struct TermsOfServiceWidget_OnFinishedFadeIn final
{
public:
	EPlatform                                     Platform;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TermsOfServiceWidget_OnFinishedFadeIn) == 0x000001, "Wrong alignment on TermsOfServiceWidget_OnFinishedFadeIn");
static_assert(sizeof(TermsOfServiceWidget_OnFinishedFadeIn) == 0x000001, "Wrong size on TermsOfServiceWidget_OnFinishedFadeIn");
static_assert(offsetof(TermsOfServiceWidget_OnFinishedFadeIn, Platform) == 0x000000, "Member 'TermsOfServiceWidget_OnFinishedFadeIn::Platform' has a wrong offset!");

// Function OutGameModule.TermsOfServiceWidget.OnLoginFinished
// 0x0001 (0x0001 - 0x0000)
struct TermsOfServiceWidget_OnLoginFinished final
{
public:
	bool                                          LoginCompleted;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TermsOfServiceWidget_OnLoginFinished) == 0x000001, "Wrong alignment on TermsOfServiceWidget_OnLoginFinished");
static_assert(sizeof(TermsOfServiceWidget_OnLoginFinished) == 0x000001, "Wrong size on TermsOfServiceWidget_OnLoginFinished");
static_assert(offsetof(TermsOfServiceWidget_OnLoginFinished, LoginCompleted) == 0x000000, "Member 'TermsOfServiceWidget_OnLoginFinished::LoginCompleted' has a wrong offset!");

// Function OutGameModule.GamePlaySettingWidget.OnAddedToFocusEndItem
// 0x000C (0x000C - 0x0000)
struct GamePlaySettingWidget_OnAddedToFocusEndItem final
{
public:
	EWidgetInputType                              InputType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFocusEvent                            InFocusEvent;                                      // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GamePlaySettingWidget_OnAddedToFocusEndItem) == 0x000004, "Wrong alignment on GamePlaySettingWidget_OnAddedToFocusEndItem");
static_assert(sizeof(GamePlaySettingWidget_OnAddedToFocusEndItem) == 0x00000C, "Wrong size on GamePlaySettingWidget_OnAddedToFocusEndItem");
static_assert(offsetof(GamePlaySettingWidget_OnAddedToFocusEndItem, InputType) == 0x000000, "Member 'GamePlaySettingWidget_OnAddedToFocusEndItem::InputType' has a wrong offset!");
static_assert(offsetof(GamePlaySettingWidget_OnAddedToFocusEndItem, InFocusEvent) == 0x000004, "Member 'GamePlaySettingWidget_OnAddedToFocusEndItem::InFocusEvent' has a wrong offset!");

// Function OutGameModule.GamePlaySettingWidget.OnAddedToFocusStartItem
// 0x000C (0x000C - 0x0000)
struct GamePlaySettingWidget_OnAddedToFocusStartItem final
{
public:
	EWidgetInputType                              InputType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFocusEvent                            InFocusEvent;                                      // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GamePlaySettingWidget_OnAddedToFocusStartItem) == 0x000004, "Wrong alignment on GamePlaySettingWidget_OnAddedToFocusStartItem");
static_assert(sizeof(GamePlaySettingWidget_OnAddedToFocusStartItem) == 0x00000C, "Wrong size on GamePlaySettingWidget_OnAddedToFocusStartItem");
static_assert(offsetof(GamePlaySettingWidget_OnAddedToFocusStartItem, InputType) == 0x000000, "Member 'GamePlaySettingWidget_OnAddedToFocusStartItem::InputType' has a wrong offset!");
static_assert(offsetof(GamePlaySettingWidget_OnAddedToFocusStartItem, InFocusEvent) == 0x000004, "Member 'GamePlaySettingWidget_OnAddedToFocusStartItem::InFocusEvent' has a wrong offset!");

// Function OutGameModule.GamePlaySettingWidget.OnCameraAccelerationTypeValueChanged
// 0x0004 (0x0004 - 0x0000)
struct GamePlaySettingWidget_OnCameraAccelerationTypeValueChanged final
{
public:
	int32                                         SelectedIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GamePlaySettingWidget_OnCameraAccelerationTypeValueChanged) == 0x000004, "Wrong alignment on GamePlaySettingWidget_OnCameraAccelerationTypeValueChanged");
static_assert(sizeof(GamePlaySettingWidget_OnCameraAccelerationTypeValueChanged) == 0x000004, "Wrong size on GamePlaySettingWidget_OnCameraAccelerationTypeValueChanged");
static_assert(offsetof(GamePlaySettingWidget_OnCameraAccelerationTypeValueChanged, SelectedIndex) == 0x000000, "Member 'GamePlaySettingWidget_OnCameraAccelerationTypeValueChanged::SelectedIndex' has a wrong offset!");

// Function OutGameModule.GamePlaySettingWidget.OnLoadSettingLoadComplete
// 0x0004 (0x0004 - 0x0000)
struct GamePlaySettingWidget_OnLoadSettingLoadComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GamePlaySettingWidget_OnLoadSettingLoadComplete) == 0x000004, "Wrong alignment on GamePlaySettingWidget_OnLoadSettingLoadComplete");
static_assert(sizeof(GamePlaySettingWidget_OnLoadSettingLoadComplete) == 0x000004, "Wrong size on GamePlaySettingWidget_OnLoadSettingLoadComplete");
static_assert(offsetof(GamePlaySettingWidget_OnLoadSettingLoadComplete, RequestId) == 0x000000, "Member 'GamePlaySettingWidget_OnLoadSettingLoadComplete::RequestId' has a wrong offset!");

// Function OutGameModule.GamePlaySettingWidget.OnSaveSettingLoadComplete
// 0x0004 (0x0004 - 0x0000)
struct GamePlaySettingWidget_OnSaveSettingLoadComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GamePlaySettingWidget_OnSaveSettingLoadComplete) == 0x000004, "Wrong alignment on GamePlaySettingWidget_OnSaveSettingLoadComplete");
static_assert(sizeof(GamePlaySettingWidget_OnSaveSettingLoadComplete) == 0x000004, "Wrong size on GamePlaySettingWidget_OnSaveSettingLoadComplete");
static_assert(offsetof(GamePlaySettingWidget_OnSaveSettingLoadComplete, RequestId) == 0x000000, "Member 'GamePlaySettingWidget_OnSaveSettingLoadComplete::RequestId' has a wrong offset!");

// Function OutGameModule.LeaderboardPanelWidget.OnDecideButton
// 0x0028 (0x0028 - 0x0000)
struct LeaderboardPanelWidget_OnDecideButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LeaderboardPanelWidget_OnDecideButton) == 0x000008, "Wrong alignment on LeaderboardPanelWidget_OnDecideButton");
static_assert(sizeof(LeaderboardPanelWidget_OnDecideButton) == 0x000028, "Wrong size on LeaderboardPanelWidget_OnDecideButton");
static_assert(offsetof(LeaderboardPanelWidget_OnDecideButton, Widget) == 0x000000, "Member 'LeaderboardPanelWidget_OnDecideButton::Widget' has a wrong offset!");
static_assert(offsetof(LeaderboardPanelWidget_OnDecideButton, Key) == 0x000008, "Member 'LeaderboardPanelWidget_OnDecideButton::Key' has a wrong offset!");
static_assert(offsetof(LeaderboardPanelWidget_OnDecideButton, InputType) == 0x000020, "Member 'LeaderboardPanelWidget_OnDecideButton::InputType' has a wrong offset!");

// Function OutGameModule.LeaderboardPanelWidget.UpdateFocusImage
// 0x0002 (0x0002 - 0x0000)
struct LeaderboardPanelWidget_UpdateFocusImage final
{
public:
	bool                                          bLeftArrow;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRightArrow;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LeaderboardPanelWidget_UpdateFocusImage) == 0x000001, "Wrong alignment on LeaderboardPanelWidget_UpdateFocusImage");
static_assert(sizeof(LeaderboardPanelWidget_UpdateFocusImage) == 0x000002, "Wrong size on LeaderboardPanelWidget_UpdateFocusImage");
static_assert(offsetof(LeaderboardPanelWidget_UpdateFocusImage, bLeftArrow) == 0x000000, "Member 'LeaderboardPanelWidget_UpdateFocusImage::bLeftArrow' has a wrong offset!");
static_assert(offsetof(LeaderboardPanelWidget_UpdateFocusImage, bRightArrow) == 0x000001, "Member 'LeaderboardPanelWidget_UpdateFocusImage::bRightArrow' has a wrong offset!");

// Function OutGameModule.LeaderboardPanelWidget.IsNull
// 0x0001 (0x0001 - 0x0000)
struct LeaderboardPanelWidget_IsNull final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LeaderboardPanelWidget_IsNull) == 0x000001, "Wrong alignment on LeaderboardPanelWidget_IsNull");
static_assert(sizeof(LeaderboardPanelWidget_IsNull) == 0x000001, "Wrong size on LeaderboardPanelWidget_IsNull");
static_assert(offsetof(LeaderboardPanelWidget_IsNull, ReturnValue) == 0x000000, "Member 'LeaderboardPanelWidget_IsNull::ReturnValue' has a wrong offset!");

// Function OutGameModule.LoginBonusWidget.OnBuyPremiumLoginBonus
// 0x0001 (0x0001 - 0x0000)
struct LoginBonusWidget_OnBuyPremiumLoginBonus final
{
public:
	bool                                          Buy;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginBonusWidget_OnBuyPremiumLoginBonus) == 0x000001, "Wrong alignment on LoginBonusWidget_OnBuyPremiumLoginBonus");
static_assert(sizeof(LoginBonusWidget_OnBuyPremiumLoginBonus) == 0x000001, "Wrong size on LoginBonusWidget_OnBuyPremiumLoginBonus");
static_assert(offsetof(LoginBonusWidget_OnBuyPremiumLoginBonus, Buy) == 0x000000, "Member 'LoginBonusWidget_OnBuyPremiumLoginBonus::Buy' has a wrong offset!");

// Function OutGameModule.LoginBonusWidget.OnChangeIdleStatusEvent
// 0x0001 (0x0001 - 0x0000)
struct LoginBonusWidget_OnChangeIdleStatusEvent final
{
public:
	bool                                          Idle;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginBonusWidget_OnChangeIdleStatusEvent) == 0x000001, "Wrong alignment on LoginBonusWidget_OnChangeIdleStatusEvent");
static_assert(sizeof(LoginBonusWidget_OnChangeIdleStatusEvent) == 0x000001, "Wrong size on LoginBonusWidget_OnChangeIdleStatusEvent");
static_assert(offsetof(LoginBonusWidget_OnChangeIdleStatusEvent, Idle) == 0x000000, "Member 'LoginBonusWidget_OnChangeIdleStatusEvent::Idle' has a wrong offset!");

// Function OutGameModule.LoginBonusWidget.OnReceiveDLoadCompleteEvent
// 0x0004 (0x0004 - 0x0000)
struct LoginBonusWidget_OnReceiveDLoadCompleteEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginBonusWidget_OnReceiveDLoadCompleteEvent) == 0x000004, "Wrong alignment on LoginBonusWidget_OnReceiveDLoadCompleteEvent");
static_assert(sizeof(LoginBonusWidget_OnReceiveDLoadCompleteEvent) == 0x000004, "Wrong size on LoginBonusWidget_OnReceiveDLoadCompleteEvent");
static_assert(offsetof(LoginBonusWidget_OnReceiveDLoadCompleteEvent, RequestId) == 0x000000, "Member 'LoginBonusWidget_OnReceiveDLoadCompleteEvent::RequestId' has a wrong offset!");

// Function OutGameModule.GameStateDevOnlineMenu.OnChanged_ExtListButton
// 0x0018 (0x0018 - 0x0000)
struct GameStateDevOnlineMenu_OnChanged_ExtListButton final
{
public:
	class FString                                 Str;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectInfo                                   Type;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameStateDevOnlineMenu_OnChanged_ExtListButton) == 0x000008, "Wrong alignment on GameStateDevOnlineMenu_OnChanged_ExtListButton");
static_assert(sizeof(GameStateDevOnlineMenu_OnChanged_ExtListButton) == 0x000018, "Wrong size on GameStateDevOnlineMenu_OnChanged_ExtListButton");
static_assert(offsetof(GameStateDevOnlineMenu_OnChanged_ExtListButton, Str) == 0x000000, "Member 'GameStateDevOnlineMenu_OnChanged_ExtListButton::Str' has a wrong offset!");
static_assert(offsetof(GameStateDevOnlineMenu_OnChanged_ExtListButton, Type) == 0x000010, "Member 'GameStateDevOnlineMenu_OnChanged_ExtListButton::Type' has a wrong offset!");

// Function OutGameModule.GameStateDevOnlineMenu.OnChanged_FriendListButton
// 0x0018 (0x0018 - 0x0000)
struct GameStateDevOnlineMenu_OnChanged_FriendListButton final
{
public:
	class FString                                 Str;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectInfo                                   Type;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameStateDevOnlineMenu_OnChanged_FriendListButton) == 0x000008, "Wrong alignment on GameStateDevOnlineMenu_OnChanged_FriendListButton");
static_assert(sizeof(GameStateDevOnlineMenu_OnChanged_FriendListButton) == 0x000018, "Wrong size on GameStateDevOnlineMenu_OnChanged_FriendListButton");
static_assert(offsetof(GameStateDevOnlineMenu_OnChanged_FriendListButton, Str) == 0x000000, "Member 'GameStateDevOnlineMenu_OnChanged_FriendListButton::Str' has a wrong offset!");
static_assert(offsetof(GameStateDevOnlineMenu_OnChanged_FriendListButton, Type) == 0x000010, "Member 'GameStateDevOnlineMenu_OnChanged_FriendListButton::Type' has a wrong offset!");

// Function OutGameModule.GameStateDevOnlineMenu.OnChanged_MatchModeButton
// 0x0018 (0x0018 - 0x0000)
struct GameStateDevOnlineMenu_OnChanged_MatchModeButton final
{
public:
	class FString                                 Str;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectInfo                                   Type;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameStateDevOnlineMenu_OnChanged_MatchModeButton) == 0x000008, "Wrong alignment on GameStateDevOnlineMenu_OnChanged_MatchModeButton");
static_assert(sizeof(GameStateDevOnlineMenu_OnChanged_MatchModeButton) == 0x000018, "Wrong size on GameStateDevOnlineMenu_OnChanged_MatchModeButton");
static_assert(offsetof(GameStateDevOnlineMenu_OnChanged_MatchModeButton, Str) == 0x000000, "Member 'GameStateDevOnlineMenu_OnChanged_MatchModeButton::Str' has a wrong offset!");
static_assert(offsetof(GameStateDevOnlineMenu_OnChanged_MatchModeButton, Type) == 0x000010, "Member 'GameStateDevOnlineMenu_OnChanged_MatchModeButton::Type' has a wrong offset!");

// Function OutGameModule.GameStateDevOnlineMenu.OnChanged_SessionListButton
// 0x0018 (0x0018 - 0x0000)
struct GameStateDevOnlineMenu_OnChanged_SessionListButton final
{
public:
	class FString                                 Str;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectInfo                                   Type;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameStateDevOnlineMenu_OnChanged_SessionListButton) == 0x000008, "Wrong alignment on GameStateDevOnlineMenu_OnChanged_SessionListButton");
static_assert(sizeof(GameStateDevOnlineMenu_OnChanged_SessionListButton) == 0x000018, "Wrong size on GameStateDevOnlineMenu_OnChanged_SessionListButton");
static_assert(offsetof(GameStateDevOnlineMenu_OnChanged_SessionListButton, Str) == 0x000000, "Member 'GameStateDevOnlineMenu_OnChanged_SessionListButton::Str' has a wrong offset!");
static_assert(offsetof(GameStateDevOnlineMenu_OnChanged_SessionListButton, Type) == 0x000010, "Member 'GameStateDevOnlineMenu_OnChanged_SessionListButton::Type' has a wrong offset!");

// Function OutGameModule.TrainingMenuOutGameWidget.OnGetAiCharacter
// 0x001C (0x001C - 0x0000)
struct TrainingMenuOutGameWidget_OnGetAiCharacter final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterId                                  CharacterId;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefUnique1Level;                                   // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefUnique2Level;                                   // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefUnique3Level;                                   // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillVariationCode;                                // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AiActionIndex;                                     // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingMenuOutGameWidget_OnGetAiCharacter) == 0x000004, "Wrong alignment on TrainingMenuOutGameWidget_OnGetAiCharacter");
static_assert(sizeof(TrainingMenuOutGameWidget_OnGetAiCharacter) == 0x00001C, "Wrong size on TrainingMenuOutGameWidget_OnGetAiCharacter");
static_assert(offsetof(TrainingMenuOutGameWidget_OnGetAiCharacter, Index_0) == 0x000000, "Member 'TrainingMenuOutGameWidget_OnGetAiCharacter::Index_0' has a wrong offset!");
static_assert(offsetof(TrainingMenuOutGameWidget_OnGetAiCharacter, CharacterId) == 0x000004, "Member 'TrainingMenuOutGameWidget_OnGetAiCharacter::CharacterId' has a wrong offset!");
static_assert(offsetof(TrainingMenuOutGameWidget_OnGetAiCharacter, DefUnique1Level) == 0x000008, "Member 'TrainingMenuOutGameWidget_OnGetAiCharacter::DefUnique1Level' has a wrong offset!");
static_assert(offsetof(TrainingMenuOutGameWidget_OnGetAiCharacter, DefUnique2Level) == 0x00000C, "Member 'TrainingMenuOutGameWidget_OnGetAiCharacter::DefUnique2Level' has a wrong offset!");
static_assert(offsetof(TrainingMenuOutGameWidget_OnGetAiCharacter, DefUnique3Level) == 0x000010, "Member 'TrainingMenuOutGameWidget_OnGetAiCharacter::DefUnique3Level' has a wrong offset!");
static_assert(offsetof(TrainingMenuOutGameWidget_OnGetAiCharacter, SkillVariationCode) == 0x000014, "Member 'TrainingMenuOutGameWidget_OnGetAiCharacter::SkillVariationCode' has a wrong offset!");
static_assert(offsetof(TrainingMenuOutGameWidget_OnGetAiCharacter, AiActionIndex) == 0x000018, "Member 'TrainingMenuOutGameWidget_OnGetAiCharacter::AiActionIndex' has a wrong offset!");

// Function OutGameModule.TrainingMenuOutGameWidget.OnGetPlayerCharacter
// 0x0014 (0x0014 - 0x0000)
struct TrainingMenuOutGameWidget_OnGetPlayerCharacter final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefUnique1Level;                                   // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefUnique2Level;                                   // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefUnique3Level;                                   // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillVariationCode;                                // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingMenuOutGameWidget_OnGetPlayerCharacter) == 0x000004, "Wrong alignment on TrainingMenuOutGameWidget_OnGetPlayerCharacter");
static_assert(sizeof(TrainingMenuOutGameWidget_OnGetPlayerCharacter) == 0x000014, "Wrong size on TrainingMenuOutGameWidget_OnGetPlayerCharacter");
static_assert(offsetof(TrainingMenuOutGameWidget_OnGetPlayerCharacter, CharacterId) == 0x000000, "Member 'TrainingMenuOutGameWidget_OnGetPlayerCharacter::CharacterId' has a wrong offset!");
static_assert(offsetof(TrainingMenuOutGameWidget_OnGetPlayerCharacter, DefUnique1Level) == 0x000004, "Member 'TrainingMenuOutGameWidget_OnGetPlayerCharacter::DefUnique1Level' has a wrong offset!");
static_assert(offsetof(TrainingMenuOutGameWidget_OnGetPlayerCharacter, DefUnique2Level) == 0x000008, "Member 'TrainingMenuOutGameWidget_OnGetPlayerCharacter::DefUnique2Level' has a wrong offset!");
static_assert(offsetof(TrainingMenuOutGameWidget_OnGetPlayerCharacter, DefUnique3Level) == 0x00000C, "Member 'TrainingMenuOutGameWidget_OnGetPlayerCharacter::DefUnique3Level' has a wrong offset!");
static_assert(offsetof(TrainingMenuOutGameWidget_OnGetPlayerCharacter, SkillVariationCode) == 0x000010, "Member 'TrainingMenuOutGameWidget_OnGetPlayerCharacter::SkillVariationCode' has a wrong offset!");

// Function OutGameModule.TrainingMenuOutGameWidget.OnGetSetting
// 0x0008 (0x0008 - 0x0000)
struct TrainingMenuOutGameWidget_OnGetSetting final
{
public:
	int32                                         DamageTypeIndex;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFriendlyFire;                                     // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TrainingMenuOutGameWidget_OnGetSetting) == 0x000004, "Wrong alignment on TrainingMenuOutGameWidget_OnGetSetting");
static_assert(sizeof(TrainingMenuOutGameWidget_OnGetSetting) == 0x000008, "Wrong size on TrainingMenuOutGameWidget_OnGetSetting");
static_assert(offsetof(TrainingMenuOutGameWidget_OnGetSetting, DamageTypeIndex) == 0x000000, "Member 'TrainingMenuOutGameWidget_OnGetSetting::DamageTypeIndex' has a wrong offset!");
static_assert(offsetof(TrainingMenuOutGameWidget_OnGetSetting, bFriendlyFire) == 0x000004, "Member 'TrainingMenuOutGameWidget_OnGetSetting::bFriendlyFire' has a wrong offset!");

// Function OutGameModule.TrainingMenuOutGameWidget.OnSetAiCharacter
// 0x001C (0x001C - 0x0000)
struct TrainingMenuOutGameWidget_OnSetAiCharacter final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterId                                  CharacterId;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefUnique1Level;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefUnique2Level;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefUnique3Level;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillVariationCode;                                // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AiActionIndex;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingMenuOutGameWidget_OnSetAiCharacter) == 0x000004, "Wrong alignment on TrainingMenuOutGameWidget_OnSetAiCharacter");
static_assert(sizeof(TrainingMenuOutGameWidget_OnSetAiCharacter) == 0x00001C, "Wrong size on TrainingMenuOutGameWidget_OnSetAiCharacter");
static_assert(offsetof(TrainingMenuOutGameWidget_OnSetAiCharacter, Index_0) == 0x000000, "Member 'TrainingMenuOutGameWidget_OnSetAiCharacter::Index_0' has a wrong offset!");
static_assert(offsetof(TrainingMenuOutGameWidget_OnSetAiCharacter, CharacterId) == 0x000004, "Member 'TrainingMenuOutGameWidget_OnSetAiCharacter::CharacterId' has a wrong offset!");
static_assert(offsetof(TrainingMenuOutGameWidget_OnSetAiCharacter, DefUnique1Level) == 0x000008, "Member 'TrainingMenuOutGameWidget_OnSetAiCharacter::DefUnique1Level' has a wrong offset!");
static_assert(offsetof(TrainingMenuOutGameWidget_OnSetAiCharacter, DefUnique2Level) == 0x00000C, "Member 'TrainingMenuOutGameWidget_OnSetAiCharacter::DefUnique2Level' has a wrong offset!");
static_assert(offsetof(TrainingMenuOutGameWidget_OnSetAiCharacter, DefUnique3Level) == 0x000010, "Member 'TrainingMenuOutGameWidget_OnSetAiCharacter::DefUnique3Level' has a wrong offset!");
static_assert(offsetof(TrainingMenuOutGameWidget_OnSetAiCharacter, SkillVariationCode) == 0x000014, "Member 'TrainingMenuOutGameWidget_OnSetAiCharacter::SkillVariationCode' has a wrong offset!");
static_assert(offsetof(TrainingMenuOutGameWidget_OnSetAiCharacter, AiActionIndex) == 0x000018, "Member 'TrainingMenuOutGameWidget_OnSetAiCharacter::AiActionIndex' has a wrong offset!");

// Function OutGameModule.TrainingMenuOutGameWidget.OnSetPlayerCharacter
// 0x0014 (0x0014 - 0x0000)
struct TrainingMenuOutGameWidget_OnSetPlayerCharacter final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefUnique1Level;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefUnique2Level;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefUnique3Level;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillVariationCode;                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingMenuOutGameWidget_OnSetPlayerCharacter) == 0x000004, "Wrong alignment on TrainingMenuOutGameWidget_OnSetPlayerCharacter");
static_assert(sizeof(TrainingMenuOutGameWidget_OnSetPlayerCharacter) == 0x000014, "Wrong size on TrainingMenuOutGameWidget_OnSetPlayerCharacter");
static_assert(offsetof(TrainingMenuOutGameWidget_OnSetPlayerCharacter, CharacterId) == 0x000000, "Member 'TrainingMenuOutGameWidget_OnSetPlayerCharacter::CharacterId' has a wrong offset!");
static_assert(offsetof(TrainingMenuOutGameWidget_OnSetPlayerCharacter, DefUnique1Level) == 0x000004, "Member 'TrainingMenuOutGameWidget_OnSetPlayerCharacter::DefUnique1Level' has a wrong offset!");
static_assert(offsetof(TrainingMenuOutGameWidget_OnSetPlayerCharacter, DefUnique2Level) == 0x000008, "Member 'TrainingMenuOutGameWidget_OnSetPlayerCharacter::DefUnique2Level' has a wrong offset!");
static_assert(offsetof(TrainingMenuOutGameWidget_OnSetPlayerCharacter, DefUnique3Level) == 0x00000C, "Member 'TrainingMenuOutGameWidget_OnSetPlayerCharacter::DefUnique3Level' has a wrong offset!");
static_assert(offsetof(TrainingMenuOutGameWidget_OnSetPlayerCharacter, SkillVariationCode) == 0x000010, "Member 'TrainingMenuOutGameWidget_OnSetPlayerCharacter::SkillVariationCode' has a wrong offset!");

// Function OutGameModule.TrainingMenuOutGameWidget.OnSetSetting
// 0x0008 (0x0008 - 0x0000)
struct TrainingMenuOutGameWidget_OnSetSetting final
{
public:
	int32                                         DamageTypeIndex;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFriendlyFire;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TrainingMenuOutGameWidget_OnSetSetting) == 0x000004, "Wrong alignment on TrainingMenuOutGameWidget_OnSetSetting");
static_assert(sizeof(TrainingMenuOutGameWidget_OnSetSetting) == 0x000008, "Wrong size on TrainingMenuOutGameWidget_OnSetSetting");
static_assert(offsetof(TrainingMenuOutGameWidget_OnSetSetting, DamageTypeIndex) == 0x000000, "Member 'TrainingMenuOutGameWidget_OnSetSetting::DamageTypeIndex' has a wrong offset!");
static_assert(offsetof(TrainingMenuOutGameWidget_OnSetSetting, bFriendlyFire) == 0x000004, "Member 'TrainingMenuOutGameWidget_OnSetSetting::bFriendlyFire' has a wrong offset!");

// Function OutGameModule.MainMenuBarWidget.GetBarTileIndex
// 0x0004 (0x0004 - 0x0000)
struct MainMenuBarWidget_GetBarTileIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuBarWidget_GetBarTileIndex) == 0x000004, "Wrong alignment on MainMenuBarWidget_GetBarTileIndex");
static_assert(sizeof(MainMenuBarWidget_GetBarTileIndex) == 0x000004, "Wrong size on MainMenuBarWidget_GetBarTileIndex");
static_assert(offsetof(MainMenuBarWidget_GetBarTileIndex, ReturnValue) == 0x000000, "Member 'MainMenuBarWidget_GetBarTileIndex::ReturnValue' has a wrong offset!");

// Function OutGameModule.MainMenuBarWidget.OnDecideNextButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct MainMenuBarWidget_OnDecideNextButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MainMenuBarWidget_OnDecideNextButtonEvent) == 0x000008, "Wrong alignment on MainMenuBarWidget_OnDecideNextButtonEvent");
static_assert(sizeof(MainMenuBarWidget_OnDecideNextButtonEvent) == 0x000010, "Wrong size on MainMenuBarWidget_OnDecideNextButtonEvent");
static_assert(offsetof(MainMenuBarWidget_OnDecideNextButtonEvent, Widget) == 0x000000, "Member 'MainMenuBarWidget_OnDecideNextButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(MainMenuBarWidget_OnDecideNextButtonEvent, InputType) == 0x000008, "Member 'MainMenuBarWidget_OnDecideNextButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.MainMenuBarWidget.OnDecidePrevButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct MainMenuBarWidget_OnDecidePrevButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MainMenuBarWidget_OnDecidePrevButtonEvent) == 0x000008, "Wrong alignment on MainMenuBarWidget_OnDecidePrevButtonEvent");
static_assert(sizeof(MainMenuBarWidget_OnDecidePrevButtonEvent) == 0x000010, "Wrong size on MainMenuBarWidget_OnDecidePrevButtonEvent");
static_assert(offsetof(MainMenuBarWidget_OnDecidePrevButtonEvent, Widget) == 0x000000, "Member 'MainMenuBarWidget_OnDecidePrevButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(MainMenuBarWidget_OnDecidePrevButtonEvent, InputType) == 0x000008, "Member 'MainMenuBarWidget_OnDecidePrevButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.MainMenuBarWidget.OnHoveredChangedEvent
// 0x0010 (0x0010 - 0x0000)
struct MainMenuBarWidget_OnHoveredChangedEvent final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHovered;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MainMenuBarWidget_OnHoveredChangedEvent) == 0x000008, "Wrong alignment on MainMenuBarWidget_OnHoveredChangedEvent");
static_assert(sizeof(MainMenuBarWidget_OnHoveredChangedEvent) == 0x000010, "Wrong size on MainMenuBarWidget_OnHoveredChangedEvent");
static_assert(offsetof(MainMenuBarWidget_OnHoveredChangedEvent, Item) == 0x000000, "Member 'MainMenuBarWidget_OnHoveredChangedEvent::Item' has a wrong offset!");
static_assert(offsetof(MainMenuBarWidget_OnHoveredChangedEvent, bHovered) == 0x000008, "Member 'MainMenuBarWidget_OnHoveredChangedEvent::bHovered' has a wrong offset!");

// Function OutGameModule.MainMenuBarWidget.SetBarTileEnable
// 0x0001 (0x0001 - 0x0000)
struct MainMenuBarWidget_SetBarTileEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuBarWidget_SetBarTileEnable) == 0x000001, "Wrong alignment on MainMenuBarWidget_SetBarTileEnable");
static_assert(sizeof(MainMenuBarWidget_SetBarTileEnable) == 0x000001, "Wrong size on MainMenuBarWidget_SetBarTileEnable");
static_assert(offsetof(MainMenuBarWidget_SetBarTileEnable, bEnable) == 0x000000, "Member 'MainMenuBarWidget_SetBarTileEnable::bEnable' has a wrong offset!");

// Function OutGameModule.MainMenuBarWidget.SetBarTileIndex
// 0x0004 (0x0004 - 0x0000)
struct MainMenuBarWidget_SetBarTileIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuBarWidget_SetBarTileIndex) == 0x000004, "Wrong alignment on MainMenuBarWidget_SetBarTileIndex");
static_assert(sizeof(MainMenuBarWidget_SetBarTileIndex) == 0x000004, "Wrong size on MainMenuBarWidget_SetBarTileIndex");
static_assert(offsetof(MainMenuBarWidget_SetBarTileIndex, Index_0) == 0x000000, "Member 'MainMenuBarWidget_SetBarTileIndex::Index_0' has a wrong offset!");

// Function OutGameModule.MainMenuBarWidget.SetLRButtonEnable
// 0x0001 (0x0001 - 0x0000)
struct MainMenuBarWidget_SetLRButtonEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuBarWidget_SetLRButtonEnable) == 0x000001, "Wrong alignment on MainMenuBarWidget_SetLRButtonEnable");
static_assert(sizeof(MainMenuBarWidget_SetLRButtonEnable) == 0x000001, "Wrong size on MainMenuBarWidget_SetLRButtonEnable");
static_assert(offsetof(MainMenuBarWidget_SetLRButtonEnable, bEnable) == 0x000000, "Member 'MainMenuBarWidget_SetLRButtonEnable::bEnable' has a wrong offset!");

// Function OutGameModule.MainMenuBarWidget.SwitchNextTab
// 0x0008 (0x0008 - 0x0000)
struct MainMenuBarWidget_SwitchNextTab final
{
public:
	int32                                         AddNum;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLoop;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MainMenuBarWidget_SwitchNextTab) == 0x000004, "Wrong alignment on MainMenuBarWidget_SwitchNextTab");
static_assert(sizeof(MainMenuBarWidget_SwitchNextTab) == 0x000008, "Wrong size on MainMenuBarWidget_SwitchNextTab");
static_assert(offsetof(MainMenuBarWidget_SwitchNextTab, AddNum) == 0x000000, "Member 'MainMenuBarWidget_SwitchNextTab::AddNum' has a wrong offset!");
static_assert(offsetof(MainMenuBarWidget_SwitchNextTab, bIsLoop) == 0x000004, "Member 'MainMenuBarWidget_SwitchNextTab::bIsLoop' has a wrong offset!");

// Function OutGameModule.MainMenuBarWidget.SwitchPrevTab
// 0x0008 (0x0008 - 0x0000)
struct MainMenuBarWidget_SwitchPrevTab final
{
public:
	int32                                         SubNum;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLoop;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MainMenuBarWidget_SwitchPrevTab) == 0x000004, "Wrong alignment on MainMenuBarWidget_SwitchPrevTab");
static_assert(sizeof(MainMenuBarWidget_SwitchPrevTab) == 0x000008, "Wrong size on MainMenuBarWidget_SwitchPrevTab");
static_assert(offsetof(MainMenuBarWidget_SwitchPrevTab, SubNum) == 0x000000, "Member 'MainMenuBarWidget_SwitchPrevTab::SubNum' has a wrong offset!");
static_assert(offsetof(MainMenuBarWidget_SwitchPrevTab, bIsLoop) == 0x000004, "Member 'MainMenuBarWidget_SwitchPrevTab::bIsLoop' has a wrong offset!");

// Function OutGameModule.GameStateResult.NextSequence
// 0x0008 (0x0008 - 0x0000)
struct GameStateResult_NextSequence final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateResult_NextSequence) == 0x000008, "Wrong alignment on GameStateResult_NextSequence");
static_assert(sizeof(GameStateResult_NextSequence) == 0x000008, "Wrong size on GameStateResult_NextSequence");
static_assert(offsetof(GameStateResult_NextSequence, Widget) == 0x000000, "Member 'GameStateResult_NextSequence::Widget' has a wrong offset!");

// Function OutGameModule.GameStateResult.OnCompletedSendPhaseLike
// 0x0004 (0x0004 - 0x0000)
struct GameStateResult_OnCompletedSendPhaseLike final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateResult_OnCompletedSendPhaseLike) == 0x000004, "Wrong alignment on GameStateResult_OnCompletedSendPhaseLike");
static_assert(sizeof(GameStateResult_OnCompletedSendPhaseLike) == 0x000004, "Wrong size on GameStateResult_OnCompletedSendPhaseLike");
static_assert(offsetof(GameStateResult_OnCompletedSendPhaseLike, RequestId) == 0x000000, "Member 'GameStateResult_OnCompletedSendPhaseLike::RequestId' has a wrong offset!");

// Function OutGameModule.GameStateResult.OnLoadedMission
// 0x0004 (0x0004 - 0x0000)
struct GameStateResult_OnLoadedMission final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateResult_OnLoadedMission) == 0x000004, "Wrong alignment on GameStateResult_OnLoadedMission");
static_assert(sizeof(GameStateResult_OnLoadedMission) == 0x000004, "Wrong size on GameStateResult_OnLoadedMission");
static_assert(offsetof(GameStateResult_OnLoadedMission, RequestId) == 0x000000, "Member 'GameStateResult_OnLoadedMission::RequestId' has a wrong offset!");

// Function OutGameModule.GameStateResult.OnLoadedResult
// 0x0004 (0x0004 - 0x0000)
struct GameStateResult_OnLoadedResult final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateResult_OnLoadedResult) == 0x000004, "Wrong alignment on GameStateResult_OnLoadedResult");
static_assert(sizeof(GameStateResult_OnLoadedResult) == 0x000004, "Wrong size on GameStateResult_OnLoadedResult");
static_assert(offsetof(GameStateResult_OnLoadedResult, RequestId) == 0x000000, "Member 'GameStateResult_OnLoadedResult::RequestId' has a wrong offset!");

// Function OutGameModule.TabWidget.BP_GetTabNum
// 0x0004 (0x0004 - 0x0000)
struct TabWidget_BP_GetTabNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TabWidget_BP_GetTabNum) == 0x000004, "Wrong alignment on TabWidget_BP_GetTabNum");
static_assert(sizeof(TabWidget_BP_GetTabNum) == 0x000004, "Wrong size on TabWidget_BP_GetTabNum");
static_assert(offsetof(TabWidget_BP_GetTabNum, ReturnValue) == 0x000000, "Member 'TabWidget_BP_GetTabNum::ReturnValue' has a wrong offset!");

// Function OutGameModule.TabWidget.BP_RequestSwitchTab
// 0x0008 (0x0008 - 0x0000)
struct TabWidget_BP_RequestSwitchTab final
{
public:
	int32                                         TabIdx;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSeRequeset;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TabWidget_BP_RequestSwitchTab) == 0x000004, "Wrong alignment on TabWidget_BP_RequestSwitchTab");
static_assert(sizeof(TabWidget_BP_RequestSwitchTab) == 0x000008, "Wrong size on TabWidget_BP_RequestSwitchTab");
static_assert(offsetof(TabWidget_BP_RequestSwitchTab, TabIdx) == 0x000000, "Member 'TabWidget_BP_RequestSwitchTab::TabIdx' has a wrong offset!");
static_assert(offsetof(TabWidget_BP_RequestSwitchTab, bSeRequeset) == 0x000004, "Member 'TabWidget_BP_RequestSwitchTab::bSeRequeset' has a wrong offset!");

// Function OutGameModule.TabWidget.BP_SetSpecifyTabEnable
// 0x0008 (0x0008 - 0x0000)
struct TabWidget_BP_SetSpecifyTabEnable final
{
public:
	int32                                         TabIdx;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TabWidget_BP_SetSpecifyTabEnable) == 0x000004, "Wrong alignment on TabWidget_BP_SetSpecifyTabEnable");
static_assert(sizeof(TabWidget_BP_SetSpecifyTabEnable) == 0x000008, "Wrong size on TabWidget_BP_SetSpecifyTabEnable");
static_assert(offsetof(TabWidget_BP_SetSpecifyTabEnable, TabIdx) == 0x000000, "Member 'TabWidget_BP_SetSpecifyTabEnable::TabIdx' has a wrong offset!");
static_assert(offsetof(TabWidget_BP_SetSpecifyTabEnable, bEnable) == 0x000004, "Member 'TabWidget_BP_SetSpecifyTabEnable::bEnable' has a wrong offset!");

// Function OutGameModule.TabWidget.BP_SetViewTabIcon
// 0x0008 (0x0008 - 0x0000)
struct TabWidget_BP_SetViewTabIcon final
{
public:
	int32                                         TabIdx;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bView;                                             // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TabWidget_BP_SetViewTabIcon) == 0x000004, "Wrong alignment on TabWidget_BP_SetViewTabIcon");
static_assert(sizeof(TabWidget_BP_SetViewTabIcon) == 0x000008, "Wrong size on TabWidget_BP_SetViewTabIcon");
static_assert(offsetof(TabWidget_BP_SetViewTabIcon, TabIdx) == 0x000000, "Member 'TabWidget_BP_SetViewTabIcon::TabIdx' has a wrong offset!");
static_assert(offsetof(TabWidget_BP_SetViewTabIcon, bView) == 0x000004, "Member 'TabWidget_BP_SetViewTabIcon::bView' has a wrong offset!");

// Function OutGameModule.TabWidget.OnSwitchLeft
// 0x0010 (0x0010 - 0x0000)
struct TabWidget_OnSwitchLeft final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TabWidget_OnSwitchLeft) == 0x000008, "Wrong alignment on TabWidget_OnSwitchLeft");
static_assert(sizeof(TabWidget_OnSwitchLeft) == 0x000010, "Wrong size on TabWidget_OnSwitchLeft");
static_assert(offsetof(TabWidget_OnSwitchLeft, Button) == 0x000000, "Member 'TabWidget_OnSwitchLeft::Button' has a wrong offset!");
static_assert(offsetof(TabWidget_OnSwitchLeft, InputType) == 0x000008, "Member 'TabWidget_OnSwitchLeft::InputType' has a wrong offset!");

// Function OutGameModule.TabWidget.OnSwitchRight
// 0x0010 (0x0010 - 0x0000)
struct TabWidget_OnSwitchRight final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TabWidget_OnSwitchRight) == 0x000008, "Wrong alignment on TabWidget_OnSwitchRight");
static_assert(sizeof(TabWidget_OnSwitchRight) == 0x000010, "Wrong size on TabWidget_OnSwitchRight");
static_assert(offsetof(TabWidget_OnSwitchRight, Button) == 0x000000, "Member 'TabWidget_OnSwitchRight::Button' has a wrong offset!");
static_assert(offsetof(TabWidget_OnSwitchRight, InputType) == 0x000008, "Member 'TabWidget_OnSwitchRight::InputType' has a wrong offset!");

// Function OutGameModule.GuildChatWindowWidget.CheckTextBoxFirstFocus
// 0x0002 (0x0002 - 0x0000)
struct GuildChatWindowWidget_CheckTextBoxFirstFocus final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildChatWindowWidget_CheckTextBoxFirstFocus) == 0x000001, "Wrong alignment on GuildChatWindowWidget_CheckTextBoxFirstFocus");
static_assert(sizeof(GuildChatWindowWidget_CheckTextBoxFirstFocus) == 0x000002, "Wrong size on GuildChatWindowWidget_CheckTextBoxFirstFocus");
static_assert(offsetof(GuildChatWindowWidget_CheckTextBoxFirstFocus, Value) == 0x000000, "Member 'GuildChatWindowWidget_CheckTextBoxFirstFocus::Value' has a wrong offset!");
static_assert(offsetof(GuildChatWindowWidget_CheckTextBoxFirstFocus, ReturnValue) == 0x000001, "Member 'GuildChatWindowWidget_CheckTextBoxFirstFocus::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildChatWindowWidget.GetScrollSpeedRate
// 0x0014 (0x0014 - 0x0000)
struct GuildChatWindowWidget_GetScrollSpeedRate final
{
public:
	float                                         AnalogValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultSpeedRate;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MasSpeedRate;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddSpeedRate;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildChatWindowWidget_GetScrollSpeedRate) == 0x000004, "Wrong alignment on GuildChatWindowWidget_GetScrollSpeedRate");
static_assert(sizeof(GuildChatWindowWidget_GetScrollSpeedRate) == 0x000014, "Wrong size on GuildChatWindowWidget_GetScrollSpeedRate");
static_assert(offsetof(GuildChatWindowWidget_GetScrollSpeedRate, AnalogValue) == 0x000000, "Member 'GuildChatWindowWidget_GetScrollSpeedRate::AnalogValue' has a wrong offset!");
static_assert(offsetof(GuildChatWindowWidget_GetScrollSpeedRate, DefaultSpeedRate) == 0x000004, "Member 'GuildChatWindowWidget_GetScrollSpeedRate::DefaultSpeedRate' has a wrong offset!");
static_assert(offsetof(GuildChatWindowWidget_GetScrollSpeedRate, MasSpeedRate) == 0x000008, "Member 'GuildChatWindowWidget_GetScrollSpeedRate::MasSpeedRate' has a wrong offset!");
static_assert(offsetof(GuildChatWindowWidget_GetScrollSpeedRate, AddSpeedRate) == 0x00000C, "Member 'GuildChatWindowWidget_GetScrollSpeedRate::AddSpeedRate' has a wrong offset!");
static_assert(offsetof(GuildChatWindowWidget_GetScrollSpeedRate, ReturnValue) == 0x000010, "Member 'GuildChatWindowWidget_GetScrollSpeedRate::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildChatWindowWidget.OnCommitChangeText
// 0x0002 (0x0002 - 0x0000)
struct GuildChatWindowWidget_OnCommitChangeText final
{
public:
	bool                                          IsEmpty;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _isFirstFocus;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildChatWindowWidget_OnCommitChangeText) == 0x000001, "Wrong alignment on GuildChatWindowWidget_OnCommitChangeText");
static_assert(sizeof(GuildChatWindowWidget_OnCommitChangeText) == 0x000002, "Wrong size on GuildChatWindowWidget_OnCommitChangeText");
static_assert(offsetof(GuildChatWindowWidget_OnCommitChangeText, IsEmpty) == 0x000000, "Member 'GuildChatWindowWidget_OnCommitChangeText::IsEmpty' has a wrong offset!");
static_assert(offsetof(GuildChatWindowWidget_OnCommitChangeText, _isFirstFocus) == 0x000001, "Member 'GuildChatWindowWidget_OnCommitChangeText::_isFirstFocus' has a wrong offset!");

// Function OutGameModule.GuildChatWindowWidget.SetActiveSendButton
// 0x0001 (0x0001 - 0x0000)
struct GuildChatWindowWidget_SetActiveSendButton final
{
public:
	bool                                          IsSendable;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildChatWindowWidget_SetActiveSendButton) == 0x000001, "Wrong alignment on GuildChatWindowWidget_SetActiveSendButton");
static_assert(sizeof(GuildChatWindowWidget_SetActiveSendButton) == 0x000001, "Wrong size on GuildChatWindowWidget_SetActiveSendButton");
static_assert(offsetof(GuildChatWindowWidget_SetActiveSendButton, IsSendable) == 0x000000, "Member 'GuildChatWindowWidget_SetActiveSendButton::IsSendable' has a wrong offset!");

// Function OutGameModule.GuildChatWindowWidget.SetupList
// 0x0008 (0x0008 - 0x0000)
struct GuildChatWindowWidget_SetupList final
{
public:
	class UGuildChatListObject*                   Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildChatWindowWidget_SetupList) == 0x000008, "Wrong alignment on GuildChatWindowWidget_SetupList");
static_assert(sizeof(GuildChatWindowWidget_SetupList) == 0x000008, "Wrong size on GuildChatWindowWidget_SetupList");
static_assert(offsetof(GuildChatWindowWidget_SetupList, Obj) == 0x000000, "Member 'GuildChatWindowWidget_SetupList::Obj' has a wrong offset!");

// Function OutGameModule.GashaAuraIconWidget.GetAuraLevel
// 0x0004 (0x0004 - 0x0000)
struct GashaAuraIconWidget_GetAuraLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaAuraIconWidget_GetAuraLevel) == 0x000004, "Wrong alignment on GashaAuraIconWidget_GetAuraLevel");
static_assert(sizeof(GashaAuraIconWidget_GetAuraLevel) == 0x000004, "Wrong size on GashaAuraIconWidget_GetAuraLevel");
static_assert(offsetof(GashaAuraIconWidget_GetAuraLevel, ReturnValue) == 0x000000, "Member 'GashaAuraIconWidget_GetAuraLevel::ReturnValue' has a wrong offset!");

// Function OutGameModule.GashaAuraIconWidget.IsHero
// 0x0001 (0x0001 - 0x0000)
struct GashaAuraIconWidget_IsHero final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaAuraIconWidget_IsHero) == 0x000001, "Wrong alignment on GashaAuraIconWidget_IsHero");
static_assert(sizeof(GashaAuraIconWidget_IsHero) == 0x000001, "Wrong size on GashaAuraIconWidget_IsHero");
static_assert(offsetof(GashaAuraIconWidget_IsHero, ReturnValue) == 0x000000, "Member 'GashaAuraIconWidget_IsHero::ReturnValue' has a wrong offset!");

// Function OutGameModule.MissionStatics.PlayFocusSound
// 0x0008 (0x0008 - 0x0000)
struct MissionStatics_PlayFocusSound final
{
public:
	const class UWidget*                          FocusWidget;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionStatics_PlayFocusSound) == 0x000008, "Wrong alignment on MissionStatics_PlayFocusSound");
static_assert(sizeof(MissionStatics_PlayFocusSound) == 0x000008, "Wrong size on MissionStatics_PlayFocusSound");
static_assert(offsetof(MissionStatics_PlayFocusSound, FocusWidget) == 0x000000, "Member 'MissionStatics_PlayFocusSound::FocusWidget' has a wrong offset!");

// Function OutGameModule.GashaBannerListItemWidget.OnDecide
// 0x0010 (0x0010 - 0x0000)
struct GashaBannerListItemWidget_OnDecide final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GashaBannerListItemWidget_OnDecide) == 0x000008, "Wrong alignment on GashaBannerListItemWidget_OnDecide");
static_assert(sizeof(GashaBannerListItemWidget_OnDecide) == 0x000010, "Wrong size on GashaBannerListItemWidget_OnDecide");
static_assert(offsetof(GashaBannerListItemWidget_OnDecide, Widget) == 0x000000, "Member 'GashaBannerListItemWidget_OnDecide::Widget' has a wrong offset!");
static_assert(offsetof(GashaBannerListItemWidget_OnDecide, InputType) == 0x000008, "Member 'GashaBannerListItemWidget_OnDecide::InputType' has a wrong offset!");

// Function OutGameModule.GuildEmblemListItemObject.BP_SetItemId
// 0x0004 (0x0004 - 0x0000)
struct GuildEmblemListItemObject_BP_SetItemId final
{
public:
	int32                                         ItemId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildEmblemListItemObject_BP_SetItemId) == 0x000004, "Wrong alignment on GuildEmblemListItemObject_BP_SetItemId");
static_assert(sizeof(GuildEmblemListItemObject_BP_SetItemId) == 0x000004, "Wrong size on GuildEmblemListItemObject_BP_SetItemId");
static_assert(offsetof(GuildEmblemListItemObject_BP_SetItemId, ItemId) == 0x000000, "Member 'GuildEmblemListItemObject_BP_SetItemId::ItemId' has a wrong offset!");

// Function OutGameModule.GuildEmblemListItemObject.BP_SetSelect
// 0x0001 (0x0001 - 0x0000)
struct GuildEmblemListItemObject_BP_SetSelect final
{
public:
	bool                                          bSelect;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildEmblemListItemObject_BP_SetSelect) == 0x000001, "Wrong alignment on GuildEmblemListItemObject_BP_SetSelect");
static_assert(sizeof(GuildEmblemListItemObject_BP_SetSelect) == 0x000001, "Wrong size on GuildEmblemListItemObject_BP_SetSelect");
static_assert(offsetof(GuildEmblemListItemObject_BP_SetSelect, bSelect) == 0x000000, "Member 'GuildEmblemListItemObject_BP_SetSelect::bSelect' has a wrong offset!");

// Function OutGameModule.GuildEmblemListItemObject.BP_GetItemId
// 0x0004 (0x0004 - 0x0000)
struct GuildEmblemListItemObject_BP_GetItemId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildEmblemListItemObject_BP_GetItemId) == 0x000004, "Wrong alignment on GuildEmblemListItemObject_BP_GetItemId");
static_assert(sizeof(GuildEmblemListItemObject_BP_GetItemId) == 0x000004, "Wrong size on GuildEmblemListItemObject_BP_GetItemId");
static_assert(offsetof(GuildEmblemListItemObject_BP_GetItemId, ReturnValue) == 0x000000, "Member 'GuildEmblemListItemObject_BP_GetItemId::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildEmblemListItemObject.BP_GetSelect
// 0x0001 (0x0001 - 0x0000)
struct GuildEmblemListItemObject_BP_GetSelect final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildEmblemListItemObject_BP_GetSelect) == 0x000001, "Wrong alignment on GuildEmblemListItemObject_BP_GetSelect");
static_assert(sizeof(GuildEmblemListItemObject_BP_GetSelect) == 0x000001, "Wrong size on GuildEmblemListItemObject_BP_GetSelect");
static_assert(offsetof(GuildEmblemListItemObject_BP_GetSelect, ReturnValue) == 0x000000, "Member 'GuildEmblemListItemObject_BP_GetSelect::ReturnValue' has a wrong offset!");

// Function OutGameModule.GashaBannerListWidget.OnListItemIsHoveredChanged
// 0x0010 (0x0010 - 0x0000)
struct GashaBannerListWidget_OnListItemIsHoveredChanged final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHovered;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GashaBannerListWidget_OnListItemIsHoveredChanged) == 0x000008, "Wrong alignment on GashaBannerListWidget_OnListItemIsHoveredChanged");
static_assert(sizeof(GashaBannerListWidget_OnListItemIsHoveredChanged) == 0x000010, "Wrong size on GashaBannerListWidget_OnListItemIsHoveredChanged");
static_assert(offsetof(GashaBannerListWidget_OnListItemIsHoveredChanged, Item) == 0x000000, "Member 'GashaBannerListWidget_OnListItemIsHoveredChanged::Item' has a wrong offset!");
static_assert(offsetof(GashaBannerListWidget_OnListItemIsHoveredChanged, bHovered) == 0x000008, "Member 'GashaBannerListWidget_OnListItemIsHoveredChanged::bHovered' has a wrong offset!");

// Function OutGameModule.GashaBaseWindow.BP_OpenCheckPopup
// 0x0004 (0x0004 - 0x0000)
struct GashaBaseWindow_BP_OpenCheckPopup final
{
public:
	int32                                         PaymentIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaBaseWindow_BP_OpenCheckPopup) == 0x000004, "Wrong alignment on GashaBaseWindow_BP_OpenCheckPopup");
static_assert(sizeof(GashaBaseWindow_BP_OpenCheckPopup) == 0x000004, "Wrong size on GashaBaseWindow_BP_OpenCheckPopup");
static_assert(offsetof(GashaBaseWindow_BP_OpenCheckPopup, PaymentIndex) == 0x000000, "Member 'GashaBaseWindow_BP_OpenCheckPopup::PaymentIndex' has a wrong offset!");

// Function OutGameModule.GashaBaseWindow.BP_SelectPickupItem
// 0x0008 (0x0008 - 0x0000)
struct GashaBaseWindow_BP_SelectPickupItem final
{
public:
	int32                                         Select;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInit;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GashaBaseWindow_BP_SelectPickupItem) == 0x000004, "Wrong alignment on GashaBaseWindow_BP_SelectPickupItem");
static_assert(sizeof(GashaBaseWindow_BP_SelectPickupItem) == 0x000008, "Wrong size on GashaBaseWindow_BP_SelectPickupItem");
static_assert(offsetof(GashaBaseWindow_BP_SelectPickupItem, Select) == 0x000000, "Member 'GashaBaseWindow_BP_SelectPickupItem::Select' has a wrong offset!");
static_assert(offsetof(GashaBaseWindow_BP_SelectPickupItem, bInit) == 0x000004, "Member 'GashaBaseWindow_BP_SelectPickupItem::bInit' has a wrong offset!");
static_assert(offsetof(GashaBaseWindow_BP_SelectPickupItem, ReturnValue) == 0x000005, "Member 'GashaBaseWindow_BP_SelectPickupItem::ReturnValue' has a wrong offset!");

// Function OutGameModule.GashaBaseWindow.DoExChangeButtonWidgetNavigation
// 0x0010 (0x0010 - 0x0000)
struct GashaBaseWindow_DoExChangeButtonWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaBaseWindow_DoExChangeButtonWidgetNavigation) == 0x000008, "Wrong alignment on GashaBaseWindow_DoExChangeButtonWidgetNavigation");
static_assert(sizeof(GashaBaseWindow_DoExChangeButtonWidgetNavigation) == 0x000010, "Wrong size on GashaBaseWindow_DoExChangeButtonWidgetNavigation");
static_assert(offsetof(GashaBaseWindow_DoExChangeButtonWidgetNavigation, UiNavigation) == 0x000000, "Member 'GashaBaseWindow_DoExChangeButtonWidgetNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(GashaBaseWindow_DoExChangeButtonWidgetNavigation, ReturnValue) == 0x000008, "Member 'GashaBaseWindow_DoExChangeButtonWidgetNavigation::ReturnValue' has a wrong offset!");

// Function OutGameModule.GashaBaseWindow.DoExplanationWidgetNavigation
// 0x0010 (0x0010 - 0x0000)
struct GashaBaseWindow_DoExplanationWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaBaseWindow_DoExplanationWidgetNavigation) == 0x000008, "Wrong alignment on GashaBaseWindow_DoExplanationWidgetNavigation");
static_assert(sizeof(GashaBaseWindow_DoExplanationWidgetNavigation) == 0x000010, "Wrong size on GashaBaseWindow_DoExplanationWidgetNavigation");
static_assert(offsetof(GashaBaseWindow_DoExplanationWidgetNavigation, UiNavigation) == 0x000000, "Member 'GashaBaseWindow_DoExplanationWidgetNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(GashaBaseWindow_DoExplanationWidgetNavigation, ReturnValue) == 0x000008, "Member 'GashaBaseWindow_DoExplanationWidgetNavigation::ReturnValue' has a wrong offset!");

// Function OutGameModule.GashaBaseWindow.DoFocuslistWidgetNavigation
// 0x0010 (0x0010 - 0x0000)
struct GashaBaseWindow_DoFocuslistWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaBaseWindow_DoFocuslistWidgetNavigation) == 0x000008, "Wrong alignment on GashaBaseWindow_DoFocuslistWidgetNavigation");
static_assert(sizeof(GashaBaseWindow_DoFocuslistWidgetNavigation) == 0x000010, "Wrong size on GashaBaseWindow_DoFocuslistWidgetNavigation");
static_assert(offsetof(GashaBaseWindow_DoFocuslistWidgetNavigation, UiNavigation) == 0x000000, "Member 'GashaBaseWindow_DoFocuslistWidgetNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(GashaBaseWindow_DoFocuslistWidgetNavigation, ReturnValue) == 0x000008, "Member 'GashaBaseWindow_DoFocuslistWidgetNavigation::ReturnValue' has a wrong offset!");

// Function OutGameModule.GashaBaseWindow.DoMultiButtonWidgetNavigation
// 0x0010 (0x0010 - 0x0000)
struct GashaBaseWindow_DoMultiButtonWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaBaseWindow_DoMultiButtonWidgetNavigation) == 0x000008, "Wrong alignment on GashaBaseWindow_DoMultiButtonWidgetNavigation");
static_assert(sizeof(GashaBaseWindow_DoMultiButtonWidgetNavigation) == 0x000010, "Wrong size on GashaBaseWindow_DoMultiButtonWidgetNavigation");
static_assert(offsetof(GashaBaseWindow_DoMultiButtonWidgetNavigation, UiNavigation) == 0x000000, "Member 'GashaBaseWindow_DoMultiButtonWidgetNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(GashaBaseWindow_DoMultiButtonWidgetNavigation, ReturnValue) == 0x000008, "Member 'GashaBaseWindow_DoMultiButtonWidgetNavigation::ReturnValue' has a wrong offset!");

// Function OutGameModule.GashaBaseWindow.DoOnceButtonWidgetNavigation
// 0x0010 (0x0010 - 0x0000)
struct GashaBaseWindow_DoOnceButtonWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaBaseWindow_DoOnceButtonWidgetNavigation) == 0x000008, "Wrong alignment on GashaBaseWindow_DoOnceButtonWidgetNavigation");
static_assert(sizeof(GashaBaseWindow_DoOnceButtonWidgetNavigation) == 0x000010, "Wrong size on GashaBaseWindow_DoOnceButtonWidgetNavigation");
static_assert(offsetof(GashaBaseWindow_DoOnceButtonWidgetNavigation, UiNavigation) == 0x000000, "Member 'GashaBaseWindow_DoOnceButtonWidgetNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(GashaBaseWindow_DoOnceButtonWidgetNavigation, ReturnValue) == 0x000008, "Member 'GashaBaseWindow_DoOnceButtonWidgetNavigation::ReturnValue' has a wrong offset!");

// DelegateFunction OutGameModule.GashaBaseWindow.OnBaseCharaChangeEventDelegate__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct GashaBaseWindow_OnBaseCharaChangeEventDelegate__DelegateSignature final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemCategory                                 Category;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GashaBaseWindow_OnBaseCharaChangeEventDelegate__DelegateSignature) == 0x000004, "Wrong alignment on GashaBaseWindow_OnBaseCharaChangeEventDelegate__DelegateSignature");
static_assert(sizeof(GashaBaseWindow_OnBaseCharaChangeEventDelegate__DelegateSignature) == 0x00000C, "Wrong size on GashaBaseWindow_OnBaseCharaChangeEventDelegate__DelegateSignature");
static_assert(offsetof(GashaBaseWindow_OnBaseCharaChangeEventDelegate__DelegateSignature, CharacterId) == 0x000000, "Member 'GashaBaseWindow_OnBaseCharaChangeEventDelegate__DelegateSignature::CharacterId' has a wrong offset!");
static_assert(offsetof(GashaBaseWindow_OnBaseCharaChangeEventDelegate__DelegateSignature, Code) == 0x000004, "Member 'GashaBaseWindow_OnBaseCharaChangeEventDelegate__DelegateSignature::Code' has a wrong offset!");
static_assert(offsetof(GashaBaseWindow_OnBaseCharaChangeEventDelegate__DelegateSignature, Category) == 0x000008, "Member 'GashaBaseWindow_OnBaseCharaChangeEventDelegate__DelegateSignature::Category' has a wrong offset!");

// Function OutGameModule.GashaBaseWindow.OnExplanation
// 0x0010 (0x0010 - 0x0000)
struct GashaBaseWindow_OnExplanation final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GashaBaseWindow_OnExplanation) == 0x000008, "Wrong alignment on GashaBaseWindow_OnExplanation");
static_assert(sizeof(GashaBaseWindow_OnExplanation) == 0x000010, "Wrong size on GashaBaseWindow_OnExplanation");
static_assert(offsetof(GashaBaseWindow_OnExplanation, Widget) == 0x000000, "Member 'GashaBaseWindow_OnExplanation::Widget' has a wrong offset!");
static_assert(offsetof(GashaBaseWindow_OnExplanation, InputType) == 0x000008, "Member 'GashaBaseWindow_OnExplanation::InputType' has a wrong offset!");

// Function OutGameModule.GashaBaseWindow.OnOfferRatio
// 0x0010 (0x0010 - 0x0000)
struct GashaBaseWindow_OnOfferRatio final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GashaBaseWindow_OnOfferRatio) == 0x000008, "Wrong alignment on GashaBaseWindow_OnOfferRatio");
static_assert(sizeof(GashaBaseWindow_OnOfferRatio) == 0x000010, "Wrong size on GashaBaseWindow_OnOfferRatio");
static_assert(offsetof(GashaBaseWindow_OnOfferRatio, Widget) == 0x000000, "Member 'GashaBaseWindow_OnOfferRatio::Widget' has a wrong offset!");
static_assert(offsetof(GashaBaseWindow_OnOfferRatio, InputType) == 0x000008, "Member 'GashaBaseWindow_OnOfferRatio::InputType' has a wrong offset!");

// Function OutGameModule.GashaBaseWindow.OnPaymentServicesAct
// 0x0010 (0x0010 - 0x0000)
struct GashaBaseWindow_OnPaymentServicesAct final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GashaBaseWindow_OnPaymentServicesAct) == 0x000008, "Wrong alignment on GashaBaseWindow_OnPaymentServicesAct");
static_assert(sizeof(GashaBaseWindow_OnPaymentServicesAct) == 0x000010, "Wrong size on GashaBaseWindow_OnPaymentServicesAct");
static_assert(offsetof(GashaBaseWindow_OnPaymentServicesAct, Widget) == 0x000000, "Member 'GashaBaseWindow_OnPaymentServicesAct::Widget' has a wrong offset!");
static_assert(offsetof(GashaBaseWindow_OnPaymentServicesAct, InputType) == 0x000008, "Member 'GashaBaseWindow_OnPaymentServicesAct::InputType' has a wrong offset!");

// Function OutGameModule.GashaBaseWindow.OnSpecifiedCommercialTransaction
// 0x0010 (0x0010 - 0x0000)
struct GashaBaseWindow_OnSpecifiedCommercialTransaction final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GashaBaseWindow_OnSpecifiedCommercialTransaction) == 0x000008, "Wrong alignment on GashaBaseWindow_OnSpecifiedCommercialTransaction");
static_assert(sizeof(GashaBaseWindow_OnSpecifiedCommercialTransaction) == 0x000010, "Wrong size on GashaBaseWindow_OnSpecifiedCommercialTransaction");
static_assert(offsetof(GashaBaseWindow_OnSpecifiedCommercialTransaction, Widget) == 0x000000, "Member 'GashaBaseWindow_OnSpecifiedCommercialTransaction::Widget' has a wrong offset!");
static_assert(offsetof(GashaBaseWindow_OnSpecifiedCommercialTransaction, InputType) == 0x000008, "Member 'GashaBaseWindow_OnSpecifiedCommercialTransaction::InputType' has a wrong offset!");

// Function OutGameModule.GashaButtonWidget.OpenUseCheck
// 0x000C (0x000C - 0x0000)
struct GashaButtonWidget_OpenUseCheck final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrencyCode;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrencyCost;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaButtonWidget_OpenUseCheck) == 0x000004, "Wrong alignment on GashaButtonWidget_OpenUseCheck");
static_assert(sizeof(GashaButtonWidget_OpenUseCheck) == 0x00000C, "Wrong size on GashaButtonWidget_OpenUseCheck");
static_assert(offsetof(GashaButtonWidget_OpenUseCheck, Index_0) == 0x000000, "Member 'GashaButtonWidget_OpenUseCheck::Index_0' has a wrong offset!");
static_assert(offsetof(GashaButtonWidget_OpenUseCheck, CurrencyCode) == 0x000004, "Member 'GashaButtonWidget_OpenUseCheck::CurrencyCode' has a wrong offset!");
static_assert(offsetof(GashaButtonWidget_OpenUseCheck, CurrencyCost) == 0x000008, "Member 'GashaButtonWidget_OpenUseCheck::CurrencyCost' has a wrong offset!");

// Function OutGameModule.GashaHelpWidget.SetHelpText
// 0x0008 (0x0008 - 0x0000)
struct GashaHelpWidget_SetHelpText final
{
public:
	class UTextBlock*                             Text;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaHelpWidget_SetHelpText) == 0x000008, "Wrong alignment on GashaHelpWidget_SetHelpText");
static_assert(sizeof(GashaHelpWidget_SetHelpText) == 0x000008, "Wrong size on GashaHelpWidget_SetHelpText");
static_assert(offsetof(GashaHelpWidget_SetHelpText, Text) == 0x000000, "Member 'GashaHelpWidget_SetHelpText::Text' has a wrong offset!");

// Function OutGameModule.GashaHelpWidget.SetImage
// 0x0008 (0x0008 - 0x0000)
struct GashaHelpWidget_SetImage final
{
public:
	class UImage*                                 Image;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaHelpWidget_SetImage) == 0x000008, "Wrong alignment on GashaHelpWidget_SetImage");
static_assert(sizeof(GashaHelpWidget_SetImage) == 0x000008, "Wrong size on GashaHelpWidget_SetImage");
static_assert(offsetof(GashaHelpWidget_SetImage, Image) == 0x000000, "Member 'GashaHelpWidget_SetImage::Image' has a wrong offset!");

// Function OutGameModule.GashaHelpWidget.SetTitleText
// 0x0008 (0x0008 - 0x0000)
struct GashaHelpWidget_SetTitleText final
{
public:
	class UTextBlock*                             Text;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaHelpWidget_SetTitleText) == 0x000008, "Wrong alignment on GashaHelpWidget_SetTitleText");
static_assert(sizeof(GashaHelpWidget_SetTitleText) == 0x000008, "Wrong size on GashaHelpWidget_SetTitleText");
static_assert(offsetof(GashaHelpWidget_SetTitleText, Text) == 0x000000, "Member 'GashaHelpWidget_SetTitleText::Text' has a wrong offset!");

// Function OutGameModule.GashaHistoryWidget.OnLoadLotteryHistoryCompleteEvent
// 0x0004 (0x0004 - 0x0000)
struct GashaHistoryWidget_OnLoadLotteryHistoryCompleteEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaHistoryWidget_OnLoadLotteryHistoryCompleteEvent) == 0x000004, "Wrong alignment on GashaHistoryWidget_OnLoadLotteryHistoryCompleteEvent");
static_assert(sizeof(GashaHistoryWidget_OnLoadLotteryHistoryCompleteEvent) == 0x000004, "Wrong size on GashaHistoryWidget_OnLoadLotteryHistoryCompleteEvent");
static_assert(offsetof(GashaHistoryWidget_OnLoadLotteryHistoryCompleteEvent, RequestId) == 0x000000, "Member 'GashaHistoryWidget_OnLoadLotteryHistoryCompleteEvent::RequestId' has a wrong offset!");

// Function OutGameModule.MyADDisplayWidget.BP_SetupDisplayData
// 0x0068 (0x0068 - 0x0000)
struct MyADDisplayWidget_BP_SetupDisplayData final
{
public:
	struct FMyADDisplayData                       Data;                                              // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          UpdateFlag;                                        // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MyADDisplayWidget_BP_SetupDisplayData) == 0x000008, "Wrong alignment on MyADDisplayWidget_BP_SetupDisplayData");
static_assert(sizeof(MyADDisplayWidget_BP_SetupDisplayData) == 0x000068, "Wrong size on MyADDisplayWidget_BP_SetupDisplayData");
static_assert(offsetof(MyADDisplayWidget_BP_SetupDisplayData, Data) == 0x000000, "Member 'MyADDisplayWidget_BP_SetupDisplayData::Data' has a wrong offset!");
static_assert(offsetof(MyADDisplayWidget_BP_SetupDisplayData, UpdateFlag) == 0x000060, "Member 'MyADDisplayWidget_BP_SetupDisplayData::UpdateFlag' has a wrong offset!");

// Function OutGameModule.MyADDisplayWidget.BP_SetupEmblemDisplayData
// 0x0010 (0x0010 - 0x0000)
struct MyADDisplayWidget_BP_SetupEmblemDisplayData final
{
public:
	struct FEmblemDisplayData                     Data;                                              // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          UpdateFlag;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MyADDisplayWidget_BP_SetupEmblemDisplayData) == 0x000004, "Wrong alignment on MyADDisplayWidget_BP_SetupEmblemDisplayData");
static_assert(sizeof(MyADDisplayWidget_BP_SetupEmblemDisplayData) == 0x000010, "Wrong size on MyADDisplayWidget_BP_SetupEmblemDisplayData");
static_assert(offsetof(MyADDisplayWidget_BP_SetupEmblemDisplayData, Data) == 0x000000, "Member 'MyADDisplayWidget_BP_SetupEmblemDisplayData::Data' has a wrong offset!");
static_assert(offsetof(MyADDisplayWidget_BP_SetupEmblemDisplayData, UpdateFlag) == 0x00000C, "Member 'MyADDisplayWidget_BP_SetupEmblemDisplayData::UpdateFlag' has a wrong offset!");

// Function OutGameModule.GashaIconWidget.OnDecide
// 0x0010 (0x0010 - 0x0000)
struct GashaIconWidget_OnDecide final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GashaIconWidget_OnDecide) == 0x000008, "Wrong alignment on GashaIconWidget_OnDecide");
static_assert(sizeof(GashaIconWidget_OnDecide) == 0x000010, "Wrong size on GashaIconWidget_OnDecide");
static_assert(offsetof(GashaIconWidget_OnDecide, Widget) == 0x000000, "Member 'GashaIconWidget_OnDecide::Widget' has a wrong offset!");
static_assert(offsetof(GashaIconWidget_OnDecide, InputType) == 0x000008, "Member 'GashaIconWidget_OnDecide::InputType' has a wrong offset!");

// Function OutGameModule.GashaIconWidget.OnLeftRightNavigation
// 0x0010 (0x0010 - 0x0000)
struct GashaIconWidget_OnLeftRightNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaIconWidget_OnLeftRightNavigation) == 0x000008, "Wrong alignment on GashaIconWidget_OnLeftRightNavigation");
static_assert(sizeof(GashaIconWidget_OnLeftRightNavigation) == 0x000010, "Wrong size on GashaIconWidget_OnLeftRightNavigation");
static_assert(offsetof(GashaIconWidget_OnLeftRightNavigation, UiNavigation) == 0x000000, "Member 'GashaIconWidget_OnLeftRightNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(GashaIconWidget_OnLeftRightNavigation, ReturnValue) == 0x000008, "Member 'GashaIconWidget_OnLeftRightNavigation::ReturnValue' has a wrong offset!");

// Function OutGameModule.GashaIconWidget.OnLoadedIconImage
// 0x0008 (0x0008 - 0x0000)
struct GashaIconWidget_OnLoadedIconImage final
{
public:
	class UPaperSprite*                           Sprite;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaIconWidget_OnLoadedIconImage) == 0x000008, "Wrong alignment on GashaIconWidget_OnLoadedIconImage");
static_assert(sizeof(GashaIconWidget_OnLoadedIconImage) == 0x000008, "Wrong size on GashaIconWidget_OnLoadedIconImage");
static_assert(offsetof(GashaIconWidget_OnLoadedIconImage, Sprite) == 0x000000, "Member 'GashaIconWidget_OnLoadedIconImage::Sprite' has a wrong offset!");

// Function OutGameModule.GashaOfferRatioWidget.OnLoadOfferRatioCompleteEvent
// 0x0004 (0x0004 - 0x0000)
struct GashaOfferRatioWidget_OnLoadOfferRatioCompleteEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaOfferRatioWidget_OnLoadOfferRatioCompleteEvent) == 0x000004, "Wrong alignment on GashaOfferRatioWidget_OnLoadOfferRatioCompleteEvent");
static_assert(sizeof(GashaOfferRatioWidget_OnLoadOfferRatioCompleteEvent) == 0x000004, "Wrong size on GashaOfferRatioWidget_OnLoadOfferRatioCompleteEvent");
static_assert(offsetof(GashaOfferRatioWidget_OnLoadOfferRatioCompleteEvent, RequestId) == 0x000000, "Member 'GashaOfferRatioWidget_OnLoadOfferRatioCompleteEvent::RequestId' has a wrong offset!");

// Function OutGameModule.GashaOfferRatioWidget.OnSwichTabWidgetEvent
// 0x0004 (0x0004 - 0x0000)
struct GashaOfferRatioWidget_OnSwichTabWidgetEvent final
{
public:
	int32                                         NewSelectTab;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaOfferRatioWidget_OnSwichTabWidgetEvent) == 0x000004, "Wrong alignment on GashaOfferRatioWidget_OnSwichTabWidgetEvent");
static_assert(sizeof(GashaOfferRatioWidget_OnSwichTabWidgetEvent) == 0x000004, "Wrong size on GashaOfferRatioWidget_OnSwichTabWidgetEvent");
static_assert(offsetof(GashaOfferRatioWidget_OnSwichTabWidgetEvent, NewSelectTab) == 0x000000, "Member 'GashaOfferRatioWidget_OnSwichTabWidgetEvent::NewSelectTab' has a wrong offset!");

// Function OutGameModule.GashaOpenUIWidget.BP_PlayOpenBox
// 0x0008 (0x0008 - 0x0000)
struct GashaOpenUIWidget_BP_PlayOpenBox final
{
public:
	int32                                         OpenIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFirst;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GashaOpenUIWidget_BP_PlayOpenBox) == 0x000004, "Wrong alignment on GashaOpenUIWidget_BP_PlayOpenBox");
static_assert(sizeof(GashaOpenUIWidget_BP_PlayOpenBox) == 0x000008, "Wrong size on GashaOpenUIWidget_BP_PlayOpenBox");
static_assert(offsetof(GashaOpenUIWidget_BP_PlayOpenBox, OpenIndex) == 0x000000, "Member 'GashaOpenUIWidget_BP_PlayOpenBox::OpenIndex' has a wrong offset!");
static_assert(offsetof(GashaOpenUIWidget_BP_PlayOpenBox, bFirst) == 0x000004, "Member 'GashaOpenUIWidget_BP_PlayOpenBox::bFirst' has a wrong offset!");

// Function OutGameModule.MyADEditWidget.OnAddedToFocusButton
// 0x0010 (0x0010 - 0x0000)
struct MyADEditWidget_OnAddedToFocusButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MyADEditWidget_OnAddedToFocusButton) == 0x000008, "Wrong alignment on MyADEditWidget_OnAddedToFocusButton");
static_assert(sizeof(MyADEditWidget_OnAddedToFocusButton) == 0x000010, "Wrong size on MyADEditWidget_OnAddedToFocusButton");
static_assert(offsetof(MyADEditWidget_OnAddedToFocusButton, Widget) == 0x000000, "Member 'MyADEditWidget_OnAddedToFocusButton::Widget' has a wrong offset!");
static_assert(offsetof(MyADEditWidget_OnAddedToFocusButton, InputType) == 0x000008, "Member 'MyADEditWidget_OnAddedToFocusButton::InputType' has a wrong offset!");

// DelegateFunction OutGameModule.MyADEditWidget.OnChangedEditCodeDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct MyADEditWidget_OnChangedEditCodeDelegate__DelegateSignature final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMyAdPartsCategory                            PartsType;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MyADEditWidget_OnChangedEditCodeDelegate__DelegateSignature) == 0x000004, "Wrong alignment on MyADEditWidget_OnChangedEditCodeDelegate__DelegateSignature");
static_assert(sizeof(MyADEditWidget_OnChangedEditCodeDelegate__DelegateSignature) == 0x000008, "Wrong size on MyADEditWidget_OnChangedEditCodeDelegate__DelegateSignature");
static_assert(offsetof(MyADEditWidget_OnChangedEditCodeDelegate__DelegateSignature, Code) == 0x000000, "Member 'MyADEditWidget_OnChangedEditCodeDelegate__DelegateSignature::Code' has a wrong offset!");
static_assert(offsetof(MyADEditWidget_OnChangedEditCodeDelegate__DelegateSignature, PartsType) == 0x000004, "Member 'MyADEditWidget_OnChangedEditCodeDelegate__DelegateSignature::PartsType' has a wrong offset!");

// DelegateFunction OutGameModule.MyADEditWidget.OnChangedEditMessageDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct MyADEditWidget_OnChangedEditMessageDelegate__DelegateSignature final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MyADEditWidget_OnChangedEditMessageDelegate__DelegateSignature) == 0x000004, "Wrong alignment on MyADEditWidget_OnChangedEditMessageDelegate__DelegateSignature");
static_assert(sizeof(MyADEditWidget_OnChangedEditMessageDelegate__DelegateSignature) == 0x000004, "Wrong size on MyADEditWidget_OnChangedEditMessageDelegate__DelegateSignature");
static_assert(offsetof(MyADEditWidget_OnChangedEditMessageDelegate__DelegateSignature, Code) == 0x000000, "Member 'MyADEditWidget_OnChangedEditMessageDelegate__DelegateSignature::Code' has a wrong offset!");

// Function OutGameModule.MyADEditWidget.OnDecideButton
// 0x0010 (0x0010 - 0x0000)
struct MyADEditWidget_OnDecideButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MyADEditWidget_OnDecideButton) == 0x000008, "Wrong alignment on MyADEditWidget_OnDecideButton");
static_assert(sizeof(MyADEditWidget_OnDecideButton) == 0x000010, "Wrong size on MyADEditWidget_OnDecideButton");
static_assert(offsetof(MyADEditWidget_OnDecideButton, Widget) == 0x000000, "Member 'MyADEditWidget_OnDecideButton::Widget' has a wrong offset!");
static_assert(offsetof(MyADEditWidget_OnDecideButton, InputType) == 0x000008, "Member 'MyADEditWidget_OnDecideButton::InputType' has a wrong offset!");

// Function OutGameModule.MyADEditWidget.OnNegativeButton
// 0x0010 (0x0010 - 0x0000)
struct MyADEditWidget_OnNegativeButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MyADEditWidget_OnNegativeButton) == 0x000008, "Wrong alignment on MyADEditWidget_OnNegativeButton");
static_assert(sizeof(MyADEditWidget_OnNegativeButton) == 0x000010, "Wrong size on MyADEditWidget_OnNegativeButton");
static_assert(offsetof(MyADEditWidget_OnNegativeButton, Widget) == 0x000000, "Member 'MyADEditWidget_OnNegativeButton::Widget' has a wrong offset!");
static_assert(offsetof(MyADEditWidget_OnNegativeButton, InputType) == 0x000008, "Member 'MyADEditWidget_OnNegativeButton::InputType' has a wrong offset!");

// Function OutGameModule.MyADEditWidget.OnPressButton
// 0x0010 (0x0010 - 0x0000)
struct MyADEditWidget_OnPressButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MyADEditWidget_OnPressButton) == 0x000008, "Wrong alignment on MyADEditWidget_OnPressButton");
static_assert(sizeof(MyADEditWidget_OnPressButton) == 0x000010, "Wrong size on MyADEditWidget_OnPressButton");
static_assert(offsetof(MyADEditWidget_OnPressButton, Widget) == 0x000000, "Member 'MyADEditWidget_OnPressButton::Widget' has a wrong offset!");
static_assert(offsetof(MyADEditWidget_OnPressButton, InputType) == 0x000008, "Member 'MyADEditWidget_OnPressButton::InputType' has a wrong offset!");

// Function OutGameModule.GashaOtherIconListItemWidget.OnLoadedIconImage
// 0x0008 (0x0008 - 0x0000)
struct GashaOtherIconListItemWidget_OnLoadedIconImage final
{
public:
	class UPaperSprite*                           Sprite;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaOtherIconListItemWidget_OnLoadedIconImage) == 0x000008, "Wrong alignment on GashaOtherIconListItemWidget_OnLoadedIconImage");
static_assert(sizeof(GashaOtherIconListItemWidget_OnLoadedIconImage) == 0x000008, "Wrong size on GashaOtherIconListItemWidget_OnLoadedIconImage");
static_assert(offsetof(GashaOtherIconListItemWidget_OnLoadedIconImage, Sprite) == 0x000000, "Member 'GashaOtherIconListItemWidget_OnLoadedIconImage::Sprite' has a wrong offset!");

// Function OutGameModule.GashaResultWidget.BP_DebugPlaySequenceList
// 0x0008 (0x0008 - 0x0000)
struct GashaResultWidget_BP_DebugPlaySequenceList final
{
public:
	int32                                         StartIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaResultWidget_BP_DebugPlaySequenceList) == 0x000004, "Wrong alignment on GashaResultWidget_BP_DebugPlaySequenceList");
static_assert(sizeof(GashaResultWidget_BP_DebugPlaySequenceList) == 0x000008, "Wrong size on GashaResultWidget_BP_DebugPlaySequenceList");
static_assert(offsetof(GashaResultWidget_BP_DebugPlaySequenceList, StartIndex) == 0x000000, "Member 'GashaResultWidget_BP_DebugPlaySequenceList::StartIndex' has a wrong offset!");
static_assert(offsetof(GashaResultWidget_BP_DebugPlaySequenceList, Num) == 0x000004, "Member 'GashaResultWidget_BP_DebugPlaySequenceList::Num' has a wrong offset!");

// Function OutGameModule.GashaResultWidget.BP_InitializeSequence
// 0x0002 (0x0002 - 0x0000)
struct GashaResultWidget_BP_InitializeSequence final
{
public:
	EGashaLevelSequenceRarity                     Rarity;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGashaLevelSequenceType                       SeqType;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaResultWidget_BP_InitializeSequence) == 0x000001, "Wrong alignment on GashaResultWidget_BP_InitializeSequence");
static_assert(sizeof(GashaResultWidget_BP_InitializeSequence) == 0x000002, "Wrong size on GashaResultWidget_BP_InitializeSequence");
static_assert(offsetof(GashaResultWidget_BP_InitializeSequence, Rarity) == 0x000000, "Member 'GashaResultWidget_BP_InitializeSequence::Rarity' has a wrong offset!");
static_assert(offsetof(GashaResultWidget_BP_InitializeSequence, SeqType) == 0x000001, "Member 'GashaResultWidget_BP_InitializeSequence::SeqType' has a wrong offset!");

// Function OutGameModule.GashaResultWidget.BP_PlayActionSequence
// 0x0004 (0x0004 - 0x0000)
struct GashaResultWidget_BP_PlayActionSequence final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaResultWidget_BP_PlayActionSequence) == 0x000004, "Wrong alignment on GashaResultWidget_BP_PlayActionSequence");
static_assert(sizeof(GashaResultWidget_BP_PlayActionSequence) == 0x000004, "Wrong size on GashaResultWidget_BP_PlayActionSequence");
static_assert(offsetof(GashaResultWidget_BP_PlayActionSequence, Index_0) == 0x000000, "Member 'GashaResultWidget_BP_PlayActionSequence::Index_0' has a wrong offset!");

// Function OutGameModule.GashaResultWidget.BP_PlaySequenceList
// 0x0004 (0x0004 - 0x0000)
struct GashaResultWidget_BP_PlaySequenceList final
{
public:
	int32                                         StartIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaResultWidget_BP_PlaySequenceList) == 0x000004, "Wrong alignment on GashaResultWidget_BP_PlaySequenceList");
static_assert(sizeof(GashaResultWidget_BP_PlaySequenceList) == 0x000004, "Wrong size on GashaResultWidget_BP_PlaySequenceList");
static_assert(offsetof(GashaResultWidget_BP_PlaySequenceList, StartIndex) == 0x000000, "Member 'GashaResultWidget_BP_PlaySequenceList::StartIndex' has a wrong offset!");

// Function OutGameModule.GashaResultWidget.BP_PlayVoice
// 0x0010 (0x0010 - 0x0000)
struct GashaResultWidget_BP_PlayVoice final
{
public:
	EMdRarityItemCategory                         Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdRarity                                     Rarity;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterId                                  CharacterId;                                       // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaResultWidget_BP_PlayVoice) == 0x000008, "Wrong alignment on GashaResultWidget_BP_PlayVoice");
static_assert(sizeof(GashaResultWidget_BP_PlayVoice) == 0x000010, "Wrong size on GashaResultWidget_BP_PlayVoice");
static_assert(offsetof(GashaResultWidget_BP_PlayVoice, Category) == 0x000000, "Member 'GashaResultWidget_BP_PlayVoice::Category' has a wrong offset!");
static_assert(offsetof(GashaResultWidget_BP_PlayVoice, Rarity) == 0x000001, "Member 'GashaResultWidget_BP_PlayVoice::Rarity' has a wrong offset!");
static_assert(offsetof(GashaResultWidget_BP_PlayVoice, CharacterId) == 0x000002, "Member 'GashaResultWidget_BP_PlayVoice::CharacterId' has a wrong offset!");
static_assert(offsetof(GashaResultWidget_BP_PlayVoice, ReturnValue) == 0x000008, "Member 'GashaResultWidget_BP_PlayVoice::ReturnValue' has a wrong offset!");

// Function OutGameModule.GashaResultWidget.BP_SetListView
// 0x0008 (0x0008 - 0x0000)
struct GashaResultWidget_BP_SetListView final
{
public:
	float                                         InDelayTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeDelayTime;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaResultWidget_BP_SetListView) == 0x000004, "Wrong alignment on GashaResultWidget_BP_SetListView");
static_assert(sizeof(GashaResultWidget_BP_SetListView) == 0x000008, "Wrong size on GashaResultWidget_BP_SetListView");
static_assert(offsetof(GashaResultWidget_BP_SetListView, InDelayTime) == 0x000000, "Member 'GashaResultWidget_BP_SetListView::InDelayTime' has a wrong offset!");
static_assert(offsetof(GashaResultWidget_BP_SetListView, ChangeDelayTime) == 0x000004, "Member 'GashaResultWidget_BP_SetListView::ChangeDelayTime' has a wrong offset!");

// Function OutGameModule.GashaResultWidget.BP_Skip
// 0x0004 (0x0004 - 0x0000)
struct GashaResultWidget_BP_Skip final
{
public:
	int32                                         Frame;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaResultWidget_BP_Skip) == 0x000004, "Wrong alignment on GashaResultWidget_BP_Skip");
static_assert(sizeof(GashaResultWidget_BP_Skip) == 0x000004, "Wrong size on GashaResultWidget_BP_Skip");
static_assert(offsetof(GashaResultWidget_BP_Skip, Frame) == 0x000000, "Member 'GashaResultWidget_BP_Skip::Frame' has a wrong offset!");

// Function OutGameModule.GashaResultWidget.BP_SpawnSSRCharacter
// 0x0004 (0x0004 - 0x0000)
struct GashaResultWidget_BP_SpawnSSRCharacter final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaResultWidget_BP_SpawnSSRCharacter) == 0x000004, "Wrong alignment on GashaResultWidget_BP_SpawnSSRCharacter");
static_assert(sizeof(GashaResultWidget_BP_SpawnSSRCharacter) == 0x000004, "Wrong size on GashaResultWidget_BP_SpawnSSRCharacter");
static_assert(offsetof(GashaResultWidget_BP_SpawnSSRCharacter, Index_0) == 0x000000, "Member 'GashaResultWidget_BP_SpawnSSRCharacter::Index_0' has a wrong offset!");

// Function OutGameModule.GashaResultWidget.BP_SwitchUI
// 0x0001 (0x0001 - 0x0000)
struct GashaResultWidget_BP_SwitchUI final
{
public:
	bool                                          IsPlaylevelSequence;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaResultWidget_BP_SwitchUI) == 0x000001, "Wrong alignment on GashaResultWidget_BP_SwitchUI");
static_assert(sizeof(GashaResultWidget_BP_SwitchUI) == 0x000001, "Wrong size on GashaResultWidget_BP_SwitchUI");
static_assert(offsetof(GashaResultWidget_BP_SwitchUI, IsPlaylevelSequence) == 0x000000, "Member 'GashaResultWidget_BP_SwitchUI::IsPlaylevelSequence' has a wrong offset!");

// Function OutGameModule.GashaResultWidget.DoNextButtonWidgetNavigation
// 0x0010 (0x0010 - 0x0000)
struct GashaResultWidget_DoNextButtonWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaResultWidget_DoNextButtonWidgetNavigation) == 0x000008, "Wrong alignment on GashaResultWidget_DoNextButtonWidgetNavigation");
static_assert(sizeof(GashaResultWidget_DoNextButtonWidgetNavigation) == 0x000010, "Wrong size on GashaResultWidget_DoNextButtonWidgetNavigation");
static_assert(offsetof(GashaResultWidget_DoNextButtonWidgetNavigation, UiNavigation) == 0x000000, "Member 'GashaResultWidget_DoNextButtonWidgetNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(GashaResultWidget_DoNextButtonWidgetNavigation, ReturnValue) == 0x000008, "Member 'GashaResultWidget_DoNextButtonWidgetNavigation::ReturnValue' has a wrong offset!");

// Function OutGameModule.GashaResultWidget.ResumeSequencer
// 0x0010 (0x0010 - 0x0000)
struct GashaResultWidget_ResumeSequencer final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GashaResultWidget_ResumeSequencer) == 0x000008, "Wrong alignment on GashaResultWidget_ResumeSequencer");
static_assert(sizeof(GashaResultWidget_ResumeSequencer) == 0x000010, "Wrong size on GashaResultWidget_ResumeSequencer");
static_assert(offsetof(GashaResultWidget_ResumeSequencer, Widget) == 0x000000, "Member 'GashaResultWidget_ResumeSequencer::Widget' has a wrong offset!");
static_assert(offsetof(GashaResultWidget_ResumeSequencer, InputType) == 0x000008, "Member 'GashaResultWidget_ResumeSequencer::InputType' has a wrong offset!");

// Function OutGameModule.MyADPartsWidget.OnLoadedEffectImage
// 0x0008 (0x0008 - 0x0000)
struct MyADPartsWidget_OnLoadedEffectImage final
{
public:
	TSubclassOf<class UWidgetBase>                WidgetClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MyADPartsWidget_OnLoadedEffectImage) == 0x000008, "Wrong alignment on MyADPartsWidget_OnLoadedEffectImage");
static_assert(sizeof(MyADPartsWidget_OnLoadedEffectImage) == 0x000008, "Wrong size on MyADPartsWidget_OnLoadedEffectImage");
static_assert(offsetof(MyADPartsWidget_OnLoadedEffectImage, WidgetClass) == 0x000000, "Member 'MyADPartsWidget_OnLoadedEffectImage::WidgetClass' has a wrong offset!");

// Function OutGameModule.MyADPartsWidget.OnLoadedImage
// 0x0008 (0x0008 - 0x0000)
struct MyADPartsWidget_OnLoadedImage final
{
public:
	TSubclassOf<class UWidgetBase>                WidgetClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MyADPartsWidget_OnLoadedImage) == 0x000008, "Wrong alignment on MyADPartsWidget_OnLoadedImage");
static_assert(sizeof(MyADPartsWidget_OnLoadedImage) == 0x000008, "Wrong size on MyADPartsWidget_OnLoadedImage");
static_assert(offsetof(MyADPartsWidget_OnLoadedImage, WidgetClass) == 0x000000, "Member 'MyADPartsWidget_OnLoadedImage::WidgetClass' has a wrong offset!");

// Function OutGameModule.GashaSSROpenUIWidget.BP_PlayGetAuraAnim
// 0x0004 (0x0004 - 0x0000)
struct GashaSSROpenUIWidget_BP_PlayGetAuraAnim final
{
public:
	int32                                         OpenIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaSSROpenUIWidget_BP_PlayGetAuraAnim) == 0x000004, "Wrong alignment on GashaSSROpenUIWidget_BP_PlayGetAuraAnim");
static_assert(sizeof(GashaSSROpenUIWidget_BP_PlayGetAuraAnim) == 0x000004, "Wrong size on GashaSSROpenUIWidget_BP_PlayGetAuraAnim");
static_assert(offsetof(GashaSSROpenUIWidget_BP_PlayGetAuraAnim, OpenIndex) == 0x000000, "Member 'GashaSSROpenUIWidget_BP_PlayGetAuraAnim::OpenIndex' has a wrong offset!");

// Function OutGameModule.GashaSSROpenUIWidget.BP_PlayInAnim
// 0x0004 (0x0004 - 0x0000)
struct GashaSSROpenUIWidget_BP_PlayInAnim final
{
public:
	int32                                         OpenIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaSSROpenUIWidget_BP_PlayInAnim) == 0x000004, "Wrong alignment on GashaSSROpenUIWidget_BP_PlayInAnim");
static_assert(sizeof(GashaSSROpenUIWidget_BP_PlayInAnim) == 0x000004, "Wrong size on GashaSSROpenUIWidget_BP_PlayInAnim");
static_assert(offsetof(GashaSSROpenUIWidget_BP_PlayInAnim, OpenIndex) == 0x000000, "Member 'GashaSSROpenUIWidget_BP_PlayInAnim::OpenIndex' has a wrong offset!");

// Function OutGameModule.GashaSSROpenUIWidget.BP_PlayPlayableCharacterAnim
// 0x0004 (0x0004 - 0x0000)
struct GashaSSROpenUIWidget_BP_PlayPlayableCharacterAnim final
{
public:
	int32                                         OpenIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaSSROpenUIWidget_BP_PlayPlayableCharacterAnim) == 0x000004, "Wrong alignment on GashaSSROpenUIWidget_BP_PlayPlayableCharacterAnim");
static_assert(sizeof(GashaSSROpenUIWidget_BP_PlayPlayableCharacterAnim) == 0x000004, "Wrong size on GashaSSROpenUIWidget_BP_PlayPlayableCharacterAnim");
static_assert(offsetof(GashaSSROpenUIWidget_BP_PlayPlayableCharacterAnim, OpenIndex) == 0x000000, "Member 'GashaSSROpenUIWidget_BP_PlayPlayableCharacterAnim::OpenIndex' has a wrong offset!");

// Function OutGameModule.GashaSSROpenUIWidget.BP_PlayPlayableVoiceTextAnim
// 0x0004 (0x0004 - 0x0000)
struct GashaSSROpenUIWidget_BP_PlayPlayableVoiceTextAnim final
{
public:
	int32                                         OpenIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaSSROpenUIWidget_BP_PlayPlayableVoiceTextAnim) == 0x000004, "Wrong alignment on GashaSSROpenUIWidget_BP_PlayPlayableVoiceTextAnim");
static_assert(sizeof(GashaSSROpenUIWidget_BP_PlayPlayableVoiceTextAnim) == 0x000004, "Wrong size on GashaSSROpenUIWidget_BP_PlayPlayableVoiceTextAnim");
static_assert(offsetof(GashaSSROpenUIWidget_BP_PlayPlayableVoiceTextAnim, OpenIndex) == 0x000000, "Member 'GashaSSROpenUIWidget_BP_PlayPlayableVoiceTextAnim::OpenIndex' has a wrong offset!");

// Function OutGameModule.GashaSSROpenUIWidget.PlayPlaybleVoice
// 0x0010 (0x0010 - 0x0000)
struct GashaSSROpenUIWidget_PlayPlaybleVoice final
{
public:
	ECharacterId                                  ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaSSROpenUIWidget_PlayPlaybleVoice) == 0x000008, "Wrong alignment on GashaSSROpenUIWidget_PlayPlaybleVoice");
static_assert(sizeof(GashaSSROpenUIWidget_PlayPlaybleVoice) == 0x000010, "Wrong size on GashaSSROpenUIWidget_PlayPlaybleVoice");
static_assert(offsetof(GashaSSROpenUIWidget_PlayPlaybleVoice, ID) == 0x000000, "Member 'GashaSSROpenUIWidget_PlayPlaybleVoice::ID' has a wrong offset!");
static_assert(offsetof(GashaSSROpenUIWidget_PlayPlaybleVoice, ReturnValue) == 0x000008, "Member 'GashaSSROpenUIWidget_PlayPlaybleVoice::ReturnValue' has a wrong offset!");

// Function OutGameModule.GashaSSROpenUIWidget.SetPlaybleVoiceText
// 0x0001 (0x0001 - 0x0000)
struct GashaSSROpenUIWidget_SetPlaybleVoiceText final
{
public:
	ECharacterId                                  ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaSSROpenUIWidget_SetPlaybleVoiceText) == 0x000001, "Wrong alignment on GashaSSROpenUIWidget_SetPlaybleVoiceText");
static_assert(sizeof(GashaSSROpenUIWidget_SetPlaybleVoiceText) == 0x000001, "Wrong size on GashaSSROpenUIWidget_SetPlaybleVoiceText");
static_assert(offsetof(GashaSSROpenUIWidget_SetPlaybleVoiceText, ID) == 0x000000, "Member 'GashaSSROpenUIWidget_SetPlaybleVoiceText::ID' has a wrong offset!");

// Function OutGameModule.GashaSuggestVoiceCutInWidget.SetImage
// 0x0008 (0x0008 - 0x0000)
struct GashaSuggestVoiceCutInWidget_SetImage final
{
public:
	class UImage*                                 Image;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaSuggestVoiceCutInWidget_SetImage) == 0x000008, "Wrong alignment on GashaSuggestVoiceCutInWidget_SetImage");
static_assert(sizeof(GashaSuggestVoiceCutInWidget_SetImage) == 0x000008, "Wrong size on GashaSuggestVoiceCutInWidget_SetImage");
static_assert(offsetof(GashaSuggestVoiceCutInWidget_SetImage, Image) == 0x000000, "Member 'GashaSuggestVoiceCutInWidget_SetImage::Image' has a wrong offset!");

// Function OutGameModule.GashaSuggestVoiceCutInWidget.SetText
// 0x0008 (0x0008 - 0x0000)
struct GashaSuggestVoiceCutInWidget_SetText final
{
public:
	class UAdjustTextWidget*                      AdjustText;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaSuggestVoiceCutInWidget_SetText) == 0x000008, "Wrong alignment on GashaSuggestVoiceCutInWidget_SetText");
static_assert(sizeof(GashaSuggestVoiceCutInWidget_SetText) == 0x000008, "Wrong size on GashaSuggestVoiceCutInWidget_SetText");
static_assert(offsetof(GashaSuggestVoiceCutInWidget_SetText, AdjustText) == 0x000000, "Member 'GashaSuggestVoiceCutInWidget_SetText::AdjustText' has a wrong offset!");

// Function OutGameModule.GashaUpperLimitExChangeListItemWidget.DoWindowButtonWidgetNavigation
// 0x0010 (0x0010 - 0x0000)
struct GashaUpperLimitExChangeListItemWidget_DoWindowButtonWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaUpperLimitExChangeListItemWidget_DoWindowButtonWidgetNavigation) == 0x000008, "Wrong alignment on GashaUpperLimitExChangeListItemWidget_DoWindowButtonWidgetNavigation");
static_assert(sizeof(GashaUpperLimitExChangeListItemWidget_DoWindowButtonWidgetNavigation) == 0x000010, "Wrong size on GashaUpperLimitExChangeListItemWidget_DoWindowButtonWidgetNavigation");
static_assert(offsetof(GashaUpperLimitExChangeListItemWidget_DoWindowButtonWidgetNavigation, UiNavigation) == 0x000000, "Member 'GashaUpperLimitExChangeListItemWidget_DoWindowButtonWidgetNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(GashaUpperLimitExChangeListItemWidget_DoWindowButtonWidgetNavigation, ReturnValue) == 0x000008, "Member 'GashaUpperLimitExChangeListItemWidget_DoWindowButtonWidgetNavigation::ReturnValue' has a wrong offset!");

// Function OutGameModule.GashaUpperLimitExChangeListItemWidget.OnDecide
// 0x0010 (0x0010 - 0x0000)
struct GashaUpperLimitExChangeListItemWidget_OnDecide final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GashaUpperLimitExChangeListItemWidget_OnDecide) == 0x000008, "Wrong alignment on GashaUpperLimitExChangeListItemWidget_OnDecide");
static_assert(sizeof(GashaUpperLimitExChangeListItemWidget_OnDecide) == 0x000010, "Wrong size on GashaUpperLimitExChangeListItemWidget_OnDecide");
static_assert(offsetof(GashaUpperLimitExChangeListItemWidget_OnDecide, Widget) == 0x000000, "Member 'GashaUpperLimitExChangeListItemWidget_OnDecide::Widget' has a wrong offset!");
static_assert(offsetof(GashaUpperLimitExChangeListItemWidget_OnDecide, InputType) == 0x000008, "Member 'GashaUpperLimitExChangeListItemWidget_OnDecide::InputType' has a wrong offset!");

// Function OutGameModule.GashaUpperLimitExChangeWidget.DoWindowButtonNavigation
// 0x0010 (0x0010 - 0x0000)
struct GashaUpperLimitExChangeWidget_DoWindowButtonNavigation final
{
public:
	EUINavigation                                 NavigationType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaUpperLimitExChangeWidget_DoWindowButtonNavigation) == 0x000008, "Wrong alignment on GashaUpperLimitExChangeWidget_DoWindowButtonNavigation");
static_assert(sizeof(GashaUpperLimitExChangeWidget_DoWindowButtonNavigation) == 0x000010, "Wrong size on GashaUpperLimitExChangeWidget_DoWindowButtonNavigation");
static_assert(offsetof(GashaUpperLimitExChangeWidget_DoWindowButtonNavigation, NavigationType) == 0x000000, "Member 'GashaUpperLimitExChangeWidget_DoWindowButtonNavigation::NavigationType' has a wrong offset!");
static_assert(offsetof(GashaUpperLimitExChangeWidget_DoWindowButtonNavigation, ReturnValue) == 0x000008, "Member 'GashaUpperLimitExChangeWidget_DoWindowButtonNavigation::ReturnValue' has a wrong offset!");

// Function OutGameModule.GashaUpperLimitExChangeWidget.OnExChangeItemClicked
// 0x0004 (0x0004 - 0x0000)
struct GashaUpperLimitExChangeWidget_OnExChangeItemClicked final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaUpperLimitExChangeWidget_OnExChangeItemClicked) == 0x000004, "Wrong alignment on GashaUpperLimitExChangeWidget_OnExChangeItemClicked");
static_assert(sizeof(GashaUpperLimitExChangeWidget_OnExChangeItemClicked) == 0x000004, "Wrong size on GashaUpperLimitExChangeWidget_OnExChangeItemClicked");
static_assert(offsetof(GashaUpperLimitExChangeWidget_OnExChangeItemClicked, Index_0) == 0x000000, "Member 'GashaUpperLimitExChangeWidget_OnExChangeItemClicked::Index_0' has a wrong offset!");

// Function OutGameModule.GashaUpperLimitExChangeWidget.OnMileageInfoLoadComplete
// 0x0004 (0x0004 - 0x0000)
struct GashaUpperLimitExChangeWidget_OnMileageInfoLoadComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaUpperLimitExChangeWidget_OnMileageInfoLoadComplete) == 0x000004, "Wrong alignment on GashaUpperLimitExChangeWidget_OnMileageInfoLoadComplete");
static_assert(sizeof(GashaUpperLimitExChangeWidget_OnMileageInfoLoadComplete) == 0x000004, "Wrong size on GashaUpperLimitExChangeWidget_OnMileageInfoLoadComplete");
static_assert(offsetof(GashaUpperLimitExChangeWidget_OnMileageInfoLoadComplete, RequestId) == 0x000000, "Member 'GashaUpperLimitExChangeWidget_OnMileageInfoLoadComplete::RequestId' has a wrong offset!");

// Function OutGameModule.GashaUpperLimitExChangeWidget.OnSubMenuClicked
// 0x0004 (0x0004 - 0x0000)
struct GashaUpperLimitExChangeWidget_OnSubMenuClicked final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaUpperLimitExChangeWidget_OnSubMenuClicked) == 0x000004, "Wrong alignment on GashaUpperLimitExChangeWidget_OnSubMenuClicked");
static_assert(sizeof(GashaUpperLimitExChangeWidget_OnSubMenuClicked) == 0x000004, "Wrong size on GashaUpperLimitExChangeWidget_OnSubMenuClicked");
static_assert(offsetof(GashaUpperLimitExChangeWidget_OnSubMenuClicked, Index_0) == 0x000000, "Member 'GashaUpperLimitExChangeWidget_OnSubMenuClicked::Index_0' has a wrong offset!");

// Function OutGameModule.GashaWidget.AddPickupItem
// 0x0004 (0x0004 - 0x0000)
struct GashaWidget_AddPickupItem final
{
public:
	int32                                         Add;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaWidget_AddPickupItem) == 0x000004, "Wrong alignment on GashaWidget_AddPickupItem");
static_assert(sizeof(GashaWidget_AddPickupItem) == 0x000004, "Wrong size on GashaWidget_AddPickupItem");
static_assert(offsetof(GashaWidget_AddPickupItem, Add) == 0x000000, "Member 'GashaWidget_AddPickupItem::Add' has a wrong offset!");

// Function OutGameModule.GashaWidget.DoBannerListWidgetNavigation
// 0x0010 (0x0010 - 0x0000)
struct GashaWidget_DoBannerListWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaWidget_DoBannerListWidgetNavigation) == 0x000008, "Wrong alignment on GashaWidget_DoBannerListWidgetNavigation");
static_assert(sizeof(GashaWidget_DoBannerListWidgetNavigation) == 0x000010, "Wrong size on GashaWidget_DoBannerListWidgetNavigation");
static_assert(offsetof(GashaWidget_DoBannerListWidgetNavigation, UiNavigation) == 0x000000, "Member 'GashaWidget_DoBannerListWidgetNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(GashaWidget_DoBannerListWidgetNavigation, ReturnValue) == 0x000008, "Member 'GashaWidget_DoBannerListWidgetNavigation::ReturnValue' has a wrong offset!");

// Function OutGameModule.GashaWidget.OnBannerSelect
// 0x0004 (0x0004 - 0x0000)
struct GashaWidget_OnBannerSelect final
{
public:
	int32                                         GashaCode;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaWidget_OnBannerSelect) == 0x000004, "Wrong alignment on GashaWidget_OnBannerSelect");
static_assert(sizeof(GashaWidget_OnBannerSelect) == 0x000004, "Wrong size on GashaWidget_OnBannerSelect");
static_assert(offsetof(GashaWidget_OnBannerSelect, GashaCode) == 0x000000, "Member 'GashaWidget_OnBannerSelect::GashaCode' has a wrong offset!");

// Function OutGameModule.GashaWidget.OnSetShowLoading
// 0x0001 (0x0001 - 0x0000)
struct GashaWidget_OnSetShowLoading final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaWidget_OnSetShowLoading) == 0x000001, "Wrong alignment on GashaWidget_OnSetShowLoading");
static_assert(sizeof(GashaWidget_OnSetShowLoading) == 0x000001, "Wrong size on GashaWidget_OnSetShowLoading");
static_assert(offsetof(GashaWidget_OnSetShowLoading, bShow) == 0x000000, "Member 'GashaWidget_OnSetShowLoading::bShow' has a wrong offset!");

// Function OutGameModule.GashaWindowWidget.DoUpperLimitExplanationWidgetNavigation
// 0x0010 (0x0010 - 0x0000)
struct GashaWindowWidget_DoUpperLimitExplanationWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaWindowWidget_DoUpperLimitExplanationWidgetNavigation) == 0x000008, "Wrong alignment on GashaWindowWidget_DoUpperLimitExplanationWidgetNavigation");
static_assert(sizeof(GashaWindowWidget_DoUpperLimitExplanationWidgetNavigation) == 0x000010, "Wrong size on GashaWindowWidget_DoUpperLimitExplanationWidgetNavigation");
static_assert(offsetof(GashaWindowWidget_DoUpperLimitExplanationWidgetNavigation, UiNavigation) == 0x000000, "Member 'GashaWindowWidget_DoUpperLimitExplanationWidgetNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(GashaWindowWidget_DoUpperLimitExplanationWidgetNavigation, ReturnValue) == 0x000008, "Member 'GashaWindowWidget_DoUpperLimitExplanationWidgetNavigation::ReturnValue' has a wrong offset!");

// Function OutGameModule.GashaWindowWidget.OnCharaChange
// 0x000C (0x000C - 0x0000)
struct GashaWindowWidget_OnCharaChange final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemCategory                                 Category;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GashaWindowWidget_OnCharaChange) == 0x000004, "Wrong alignment on GashaWindowWidget_OnCharaChange");
static_assert(sizeof(GashaWindowWidget_OnCharaChange) == 0x00000C, "Wrong size on GashaWindowWidget_OnCharaChange");
static_assert(offsetof(GashaWindowWidget_OnCharaChange, CharacterId) == 0x000000, "Member 'GashaWindowWidget_OnCharaChange::CharacterId' has a wrong offset!");
static_assert(offsetof(GashaWindowWidget_OnCharaChange, Code) == 0x000004, "Member 'GashaWindowWidget_OnCharaChange::Code' has a wrong offset!");
static_assert(offsetof(GashaWindowWidget_OnCharaChange, Category) == 0x000008, "Member 'GashaWindowWidget_OnCharaChange::Category' has a wrong offset!");

// Function OutGameModule.MyADWidget.OnAddedToFocusButton
// 0x0010 (0x0010 - 0x0000)
struct MyADWidget_OnAddedToFocusButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MyADWidget_OnAddedToFocusButton) == 0x000008, "Wrong alignment on MyADWidget_OnAddedToFocusButton");
static_assert(sizeof(MyADWidget_OnAddedToFocusButton) == 0x000010, "Wrong size on MyADWidget_OnAddedToFocusButton");
static_assert(offsetof(MyADWidget_OnAddedToFocusButton, Widget) == 0x000000, "Member 'MyADWidget_OnAddedToFocusButton::Widget' has a wrong offset!");
static_assert(offsetof(MyADWidget_OnAddedToFocusButton, InputType) == 0x000008, "Member 'MyADWidget_OnAddedToFocusButton::InputType' has a wrong offset!");

// Function OutGameModule.MyADWidget.OnDecideButton
// 0x0010 (0x0010 - 0x0000)
struct MyADWidget_OnDecideButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MyADWidget_OnDecideButton) == 0x000008, "Wrong alignment on MyADWidget_OnDecideButton");
static_assert(sizeof(MyADWidget_OnDecideButton) == 0x000010, "Wrong size on MyADWidget_OnDecideButton");
static_assert(offsetof(MyADWidget_OnDecideButton, Widget) == 0x000000, "Member 'MyADWidget_OnDecideButton::Widget' has a wrong offset!");
static_assert(offsetof(MyADWidget_OnDecideButton, InputType) == 0x000008, "Member 'MyADWidget_OnDecideButton::InputType' has a wrong offset!");

// Function OutGameModule.MyADWidget.OnDecideCancelButton
// 0x0010 (0x0010 - 0x0000)
struct MyADWidget_OnDecideCancelButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MyADWidget_OnDecideCancelButton) == 0x000008, "Wrong alignment on MyADWidget_OnDecideCancelButton");
static_assert(sizeof(MyADWidget_OnDecideCancelButton) == 0x000010, "Wrong size on MyADWidget_OnDecideCancelButton");
static_assert(offsetof(MyADWidget_OnDecideCancelButton, Widget) == 0x000000, "Member 'MyADWidget_OnDecideCancelButton::Widget' has a wrong offset!");
static_assert(offsetof(MyADWidget_OnDecideCancelButton, InputType) == 0x000008, "Member 'MyADWidget_OnDecideCancelButton::InputType' has a wrong offset!");

// Function OutGameModule.MyADWidget.OnDecideConfirm
// 0x0010 (0x0010 - 0x0000)
struct MyADWidget_OnDecideConfirm final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MyADWidget_OnDecideConfirm) == 0x000008, "Wrong alignment on MyADWidget_OnDecideConfirm");
static_assert(sizeof(MyADWidget_OnDecideConfirm) == 0x000010, "Wrong size on MyADWidget_OnDecideConfirm");
static_assert(offsetof(MyADWidget_OnDecideConfirm, Widget) == 0x000000, "Member 'MyADWidget_OnDecideConfirm::Widget' has a wrong offset!");
static_assert(offsetof(MyADWidget_OnDecideConfirm, InputType) == 0x000008, "Member 'MyADWidget_OnDecideConfirm::InputType' has a wrong offset!");
static_assert(offsetof(MyADWidget_OnDecideConfirm, LeftButton) == 0x000009, "Member 'MyADWidget_OnDecideConfirm::LeftButton' has a wrong offset!");

// Function OutGameModule.MyADWidget.OnDecideShopping
// 0x0010 (0x0010 - 0x0000)
struct MyADWidget_OnDecideShopping final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MyADWidget_OnDecideShopping) == 0x000008, "Wrong alignment on MyADWidget_OnDecideShopping");
static_assert(sizeof(MyADWidget_OnDecideShopping) == 0x000010, "Wrong size on MyADWidget_OnDecideShopping");
static_assert(offsetof(MyADWidget_OnDecideShopping, Widget) == 0x000000, "Member 'MyADWidget_OnDecideShopping::Widget' has a wrong offset!");
static_assert(offsetof(MyADWidget_OnDecideShopping, InputType) == 0x000008, "Member 'MyADWidget_OnDecideShopping::InputType' has a wrong offset!");
static_assert(offsetof(MyADWidget_OnDecideShopping, LeftButton) == 0x000009, "Member 'MyADWidget_OnDecideShopping::LeftButton' has a wrong offset!");

// Function OutGameModule.MyADWidget.OnNegativeButton
// 0x0010 (0x0010 - 0x0000)
struct MyADWidget_OnNegativeButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MyADWidget_OnNegativeButton) == 0x000008, "Wrong alignment on MyADWidget_OnNegativeButton");
static_assert(sizeof(MyADWidget_OnNegativeButton) == 0x000010, "Wrong size on MyADWidget_OnNegativeButton");
static_assert(offsetof(MyADWidget_OnNegativeButton, Widget) == 0x000000, "Member 'MyADWidget_OnNegativeButton::Widget' has a wrong offset!");
static_assert(offsetof(MyADWidget_OnNegativeButton, InputType) == 0x000008, "Member 'MyADWidget_OnNegativeButton::InputType' has a wrong offset!");

// Function OutGameModule.MyADWidget.OnPressButton
// 0x0010 (0x0010 - 0x0000)
struct MyADWidget_OnPressButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MyADWidget_OnPressButton) == 0x000008, "Wrong alignment on MyADWidget_OnPressButton");
static_assert(sizeof(MyADWidget_OnPressButton) == 0x000010, "Wrong size on MyADWidget_OnPressButton");
static_assert(offsetof(MyADWidget_OnPressButton, Widget) == 0x000000, "Member 'MyADWidget_OnPressButton::Widget' has a wrong offset!");
static_assert(offsetof(MyADWidget_OnPressButton, InputType) == 0x000008, "Member 'MyADWidget_OnPressButton::InputType' has a wrong offset!");

// Function OutGameModule.MyADWidget.OnRemovedFromFocusButton
// 0x0010 (0x0010 - 0x0000)
struct MyADWidget_OnRemovedFromFocusButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MyADWidget_OnRemovedFromFocusButton) == 0x000008, "Wrong alignment on MyADWidget_OnRemovedFromFocusButton");
static_assert(sizeof(MyADWidget_OnRemovedFromFocusButton) == 0x000010, "Wrong size on MyADWidget_OnRemovedFromFocusButton");
static_assert(offsetof(MyADWidget_OnRemovedFromFocusButton, Widget) == 0x000000, "Member 'MyADWidget_OnRemovedFromFocusButton::Widget' has a wrong offset!");
static_assert(offsetof(MyADWidget_OnRemovedFromFocusButton, InputType) == 0x000008, "Member 'MyADWidget_OnRemovedFromFocusButton::InputType' has a wrong offset!");

// Function OutGameModule.MyADWidget.OnUpdateComplete
// 0x0004 (0x0004 - 0x0000)
struct MyADWidget_OnUpdateComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MyADWidget_OnUpdateComplete) == 0x000004, "Wrong alignment on MyADWidget_OnUpdateComplete");
static_assert(sizeof(MyADWidget_OnUpdateComplete) == 0x000004, "Wrong size on MyADWidget_OnUpdateComplete");
static_assert(offsetof(MyADWidget_OnUpdateComplete, RequestId) == 0x000000, "Member 'MyADWidget_OnUpdateComplete::RequestId' has a wrong offset!");

// Function OutGameModule.MyADWidget.ReceivedOnLoadCompleteEvent
// 0x0004 (0x0004 - 0x0000)
struct MyADWidget_ReceivedOnLoadCompleteEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MyADWidget_ReceivedOnLoadCompleteEvent) == 0x000004, "Wrong alignment on MyADWidget_ReceivedOnLoadCompleteEvent");
static_assert(sizeof(MyADWidget_ReceivedOnLoadCompleteEvent) == 0x000004, "Wrong size on MyADWidget_ReceivedOnLoadCompleteEvent");
static_assert(offsetof(MyADWidget_ReceivedOnLoadCompleteEvent, RequestId) == 0x000000, "Member 'MyADWidget_ReceivedOnLoadCompleteEvent::RequestId' has a wrong offset!");

// Function OutGameModule.MyADWidget.SetSelectedButtonFocus
// 0x0001 (0x0001 - 0x0000)
struct MyADWidget_SetSelectedButtonFocus final
{
public:
	ETutorialPopupScene                           Scence;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MyADWidget_SetSelectedButtonFocus) == 0x000001, "Wrong alignment on MyADWidget_SetSelectedButtonFocus");
static_assert(sizeof(MyADWidget_SetSelectedButtonFocus) == 0x000001, "Wrong size on MyADWidget_SetSelectedButtonFocus");
static_assert(offsetof(MyADWidget_SetSelectedButtonFocus, Scence) == 0x000000, "Member 'MyADWidget_SetSelectedButtonFocus::Scence' has a wrong offset!");

// Function OutGameModule.GeneralCoinSelectWidget.OnDecideBackButton
// 0x0010 (0x0010 - 0x0000)
struct GeneralCoinSelectWidget_OnDecideBackButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneralCoinSelectWidget_OnDecideBackButton) == 0x000008, "Wrong alignment on GeneralCoinSelectWidget_OnDecideBackButton");
static_assert(sizeof(GeneralCoinSelectWidget_OnDecideBackButton) == 0x000010, "Wrong size on GeneralCoinSelectWidget_OnDecideBackButton");
static_assert(offsetof(GeneralCoinSelectWidget_OnDecideBackButton, Widget) == 0x000000, "Member 'GeneralCoinSelectWidget_OnDecideBackButton::Widget' has a wrong offset!");
static_assert(offsetof(GeneralCoinSelectWidget_OnDecideBackButton, InputType) == 0x000008, "Member 'GeneralCoinSelectWidget_OnDecideBackButton::InputType' has a wrong offset!");

// Function OutGameModule.GeneralCoinSelectWidget.OnDecideConfirm
// 0x0010 (0x0010 - 0x0000)
struct GeneralCoinSelectWidget_OnDecideConfirm final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneralCoinSelectWidget_OnDecideConfirm) == 0x000008, "Wrong alignment on GeneralCoinSelectWidget_OnDecideConfirm");
static_assert(sizeof(GeneralCoinSelectWidget_OnDecideConfirm) == 0x000010, "Wrong size on GeneralCoinSelectWidget_OnDecideConfirm");
static_assert(offsetof(GeneralCoinSelectWidget_OnDecideConfirm, Widget) == 0x000000, "Member 'GeneralCoinSelectWidget_OnDecideConfirm::Widget' has a wrong offset!");
static_assert(offsetof(GeneralCoinSelectWidget_OnDecideConfirm, InputType) == 0x000008, "Member 'GeneralCoinSelectWidget_OnDecideConfirm::InputType' has a wrong offset!");
static_assert(offsetof(GeneralCoinSelectWidget_OnDecideConfirm, LeftButton) == 0x000009, "Member 'GeneralCoinSelectWidget_OnDecideConfirm::LeftButton' has a wrong offset!");

// Function OutGameModule.GeneralCoinSelectWidget.OnDecideElement
// 0x0010 (0x0010 - 0x0000)
struct GeneralCoinSelectWidget_OnDecideElement final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneralCoinSelectWidget_OnDecideElement) == 0x000008, "Wrong alignment on GeneralCoinSelectWidget_OnDecideElement");
static_assert(sizeof(GeneralCoinSelectWidget_OnDecideElement) == 0x000010, "Wrong size on GeneralCoinSelectWidget_OnDecideElement");
static_assert(offsetof(GeneralCoinSelectWidget_OnDecideElement, Widget) == 0x000000, "Member 'GeneralCoinSelectWidget_OnDecideElement::Widget' has a wrong offset!");
static_assert(offsetof(GeneralCoinSelectWidget_OnDecideElement, InputType) == 0x000008, "Member 'GeneralCoinSelectWidget_OnDecideElement::InputType' has a wrong offset!");

// Function OutGameModule.GeneralCoinSelectWidget.OnDecideMoveConfirmWindow
// 0x0010 (0x0010 - 0x0000)
struct GeneralCoinSelectWidget_OnDecideMoveConfirmWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneralCoinSelectWidget_OnDecideMoveConfirmWindow) == 0x000008, "Wrong alignment on GeneralCoinSelectWidget_OnDecideMoveConfirmWindow");
static_assert(sizeof(GeneralCoinSelectWidget_OnDecideMoveConfirmWindow) == 0x000010, "Wrong size on GeneralCoinSelectWidget_OnDecideMoveConfirmWindow");
static_assert(offsetof(GeneralCoinSelectWidget_OnDecideMoveConfirmWindow, Widget) == 0x000000, "Member 'GeneralCoinSelectWidget_OnDecideMoveConfirmWindow::Widget' has a wrong offset!");
static_assert(offsetof(GeneralCoinSelectWidget_OnDecideMoveConfirmWindow, InputType) == 0x000008, "Member 'GeneralCoinSelectWidget_OnDecideMoveConfirmWindow::InputType' has a wrong offset!");
static_assert(offsetof(GeneralCoinSelectWidget_OnDecideMoveConfirmWindow, LeftButton) == 0x000009, "Member 'GeneralCoinSelectWidget_OnDecideMoveConfirmWindow::LeftButton' has a wrong offset!");

// Function OutGameModule.GeneralCoinSelectWidget.OnDecideShopping
// 0x0010 (0x0010 - 0x0000)
struct GeneralCoinSelectWidget_OnDecideShopping final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneralCoinSelectWidget_OnDecideShopping) == 0x000008, "Wrong alignment on GeneralCoinSelectWidget_OnDecideShopping");
static_assert(sizeof(GeneralCoinSelectWidget_OnDecideShopping) == 0x000010, "Wrong size on GeneralCoinSelectWidget_OnDecideShopping");
static_assert(offsetof(GeneralCoinSelectWidget_OnDecideShopping, Widget) == 0x000000, "Member 'GeneralCoinSelectWidget_OnDecideShopping::Widget' has a wrong offset!");
static_assert(offsetof(GeneralCoinSelectWidget_OnDecideShopping, InputType) == 0x000008, "Member 'GeneralCoinSelectWidget_OnDecideShopping::InputType' has a wrong offset!");
static_assert(offsetof(GeneralCoinSelectWidget_OnDecideShopping, LeftButton) == 0x000009, "Member 'GeneralCoinSelectWidget_OnDecideShopping::LeftButton' has a wrong offset!");

// DelegateFunction OutGameModule.GeneralCoinSelectWidget.OnGeneralCoinSelectInputEventDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct GeneralCoinSelectWidget_OnGeneralCoinSelectInputEventDelegate__DelegateSignature final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralCoinSelectWidget_OnGeneralCoinSelectInputEventDelegate__DelegateSignature) == 0x000008, "Wrong alignment on GeneralCoinSelectWidget_OnGeneralCoinSelectInputEventDelegate__DelegateSignature");
static_assert(sizeof(GeneralCoinSelectWidget_OnGeneralCoinSelectInputEventDelegate__DelegateSignature) == 0x000010, "Wrong size on GeneralCoinSelectWidget_OnGeneralCoinSelectInputEventDelegate__DelegateSignature");
static_assert(offsetof(GeneralCoinSelectWidget_OnGeneralCoinSelectInputEventDelegate__DelegateSignature, Widget) == 0x000000, "Member 'GeneralCoinSelectWidget_OnGeneralCoinSelectInputEventDelegate__DelegateSignature::Widget' has a wrong offset!");
static_assert(offsetof(GeneralCoinSelectWidget_OnGeneralCoinSelectInputEventDelegate__DelegateSignature, InputType) == 0x000008, "Member 'GeneralCoinSelectWidget_OnGeneralCoinSelectInputEventDelegate__DelegateSignature::InputType' has a wrong offset!");
static_assert(offsetof(GeneralCoinSelectWidget_OnGeneralCoinSelectInputEventDelegate__DelegateSignature, Index_0) == 0x00000C, "Member 'GeneralCoinSelectWidget_OnGeneralCoinSelectInputEventDelegate__DelegateSignature::Index_0' has a wrong offset!");

// Function OutGameModule.GeneralCoinSelectWidget.OnPressBackButton
// 0x0010 (0x0010 - 0x0000)
struct GeneralCoinSelectWidget_OnPressBackButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneralCoinSelectWidget_OnPressBackButton) == 0x000008, "Wrong alignment on GeneralCoinSelectWidget_OnPressBackButton");
static_assert(sizeof(GeneralCoinSelectWidget_OnPressBackButton) == 0x000010, "Wrong size on GeneralCoinSelectWidget_OnPressBackButton");
static_assert(offsetof(GeneralCoinSelectWidget_OnPressBackButton, Widget) == 0x000000, "Member 'GeneralCoinSelectWidget_OnPressBackButton::Widget' has a wrong offset!");
static_assert(offsetof(GeneralCoinSelectWidget_OnPressBackButton, InputType) == 0x000008, "Member 'GeneralCoinSelectWidget_OnPressBackButton::InputType' has a wrong offset!");

// Function OutGameModule.GeneralCoinSelectWidget.OnPressElement
// 0x0010 (0x0010 - 0x0000)
struct GeneralCoinSelectWidget_OnPressElement final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneralCoinSelectWidget_OnPressElement) == 0x000008, "Wrong alignment on GeneralCoinSelectWidget_OnPressElement");
static_assert(sizeof(GeneralCoinSelectWidget_OnPressElement) == 0x000010, "Wrong size on GeneralCoinSelectWidget_OnPressElement");
static_assert(offsetof(GeneralCoinSelectWidget_OnPressElement, Widget) == 0x000000, "Member 'GeneralCoinSelectWidget_OnPressElement::Widget' has a wrong offset!");
static_assert(offsetof(GeneralCoinSelectWidget_OnPressElement, InputType) == 0x000008, "Member 'GeneralCoinSelectWidget_OnPressElement::InputType' has a wrong offset!");

// Function OutGameModule.GeneralCoinSelectWidget.OnUpdateComplete
// 0x0004 (0x0004 - 0x0000)
struct GeneralCoinSelectWidget_OnUpdateComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralCoinSelectWidget_OnUpdateComplete) == 0x000004, "Wrong alignment on GeneralCoinSelectWidget_OnUpdateComplete");
static_assert(sizeof(GeneralCoinSelectWidget_OnUpdateComplete) == 0x000004, "Wrong size on GeneralCoinSelectWidget_OnUpdateComplete");
static_assert(offsetof(GeneralCoinSelectWidget_OnUpdateComplete, RequestId) == 0x000000, "Member 'GeneralCoinSelectWidget_OnUpdateComplete::RequestId' has a wrong offset!");

// Function OutGameModule.GeneralPageCarouselWidget.BP_SetNavigationRuleBaseAllButton
// 0x0002 (0x0002 - 0x0000)
struct GeneralPageCarouselWidget_BP_SetNavigationRuleBaseAllButton final
{
public:
	EUINavigation                                 Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUINavigationRule                             Rule;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralPageCarouselWidget_BP_SetNavigationRuleBaseAllButton) == 0x000001, "Wrong alignment on GeneralPageCarouselWidget_BP_SetNavigationRuleBaseAllButton");
static_assert(sizeof(GeneralPageCarouselWidget_BP_SetNavigationRuleBaseAllButton) == 0x000002, "Wrong size on GeneralPageCarouselWidget_BP_SetNavigationRuleBaseAllButton");
static_assert(offsetof(GeneralPageCarouselWidget_BP_SetNavigationRuleBaseAllButton, Direction) == 0x000000, "Member 'GeneralPageCarouselWidget_BP_SetNavigationRuleBaseAllButton::Direction' has a wrong offset!");
static_assert(offsetof(GeneralPageCarouselWidget_BP_SetNavigationRuleBaseAllButton, Rule) == 0x000001, "Member 'GeneralPageCarouselWidget_BP_SetNavigationRuleBaseAllButton::Rule' has a wrong offset!");

// Function OutGameModule.GeneralPageCarouselWidget.BP_SetNavigationRuleBaseLeftButtonA
// 0x0002 (0x0002 - 0x0000)
struct GeneralPageCarouselWidget_BP_SetNavigationRuleBaseLeftButtonA final
{
public:
	EUINavigation                                 Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUINavigationRule                             Rule;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralPageCarouselWidget_BP_SetNavigationRuleBaseLeftButtonA) == 0x000001, "Wrong alignment on GeneralPageCarouselWidget_BP_SetNavigationRuleBaseLeftButtonA");
static_assert(sizeof(GeneralPageCarouselWidget_BP_SetNavigationRuleBaseLeftButtonA) == 0x000002, "Wrong size on GeneralPageCarouselWidget_BP_SetNavigationRuleBaseLeftButtonA");
static_assert(offsetof(GeneralPageCarouselWidget_BP_SetNavigationRuleBaseLeftButtonA, Direction) == 0x000000, "Member 'GeneralPageCarouselWidget_BP_SetNavigationRuleBaseLeftButtonA::Direction' has a wrong offset!");
static_assert(offsetof(GeneralPageCarouselWidget_BP_SetNavigationRuleBaseLeftButtonA, Rule) == 0x000001, "Member 'GeneralPageCarouselWidget_BP_SetNavigationRuleBaseLeftButtonA::Rule' has a wrong offset!");

// Function OutGameModule.GeneralPageCarouselWidget.BP_SetNavigationRuleBaseLeftButtonB
// 0x0002 (0x0002 - 0x0000)
struct GeneralPageCarouselWidget_BP_SetNavigationRuleBaseLeftButtonB final
{
public:
	EUINavigation                                 Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUINavigationRule                             Rule;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralPageCarouselWidget_BP_SetNavigationRuleBaseLeftButtonB) == 0x000001, "Wrong alignment on GeneralPageCarouselWidget_BP_SetNavigationRuleBaseLeftButtonB");
static_assert(sizeof(GeneralPageCarouselWidget_BP_SetNavigationRuleBaseLeftButtonB) == 0x000002, "Wrong size on GeneralPageCarouselWidget_BP_SetNavigationRuleBaseLeftButtonB");
static_assert(offsetof(GeneralPageCarouselWidget_BP_SetNavigationRuleBaseLeftButtonB, Direction) == 0x000000, "Member 'GeneralPageCarouselWidget_BP_SetNavigationRuleBaseLeftButtonB::Direction' has a wrong offset!");
static_assert(offsetof(GeneralPageCarouselWidget_BP_SetNavigationRuleBaseLeftButtonB, Rule) == 0x000001, "Member 'GeneralPageCarouselWidget_BP_SetNavigationRuleBaseLeftButtonB::Rule' has a wrong offset!");

// Function OutGameModule.GeneralPageCarouselWidget.BP_SetNavigationRuleBaseRightButtonA
// 0x0002 (0x0002 - 0x0000)
struct GeneralPageCarouselWidget_BP_SetNavigationRuleBaseRightButtonA final
{
public:
	EUINavigation                                 Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUINavigationRule                             Rule;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralPageCarouselWidget_BP_SetNavigationRuleBaseRightButtonA) == 0x000001, "Wrong alignment on GeneralPageCarouselWidget_BP_SetNavigationRuleBaseRightButtonA");
static_assert(sizeof(GeneralPageCarouselWidget_BP_SetNavigationRuleBaseRightButtonA) == 0x000002, "Wrong size on GeneralPageCarouselWidget_BP_SetNavigationRuleBaseRightButtonA");
static_assert(offsetof(GeneralPageCarouselWidget_BP_SetNavigationRuleBaseRightButtonA, Direction) == 0x000000, "Member 'GeneralPageCarouselWidget_BP_SetNavigationRuleBaseRightButtonA::Direction' has a wrong offset!");
static_assert(offsetof(GeneralPageCarouselWidget_BP_SetNavigationRuleBaseRightButtonA, Rule) == 0x000001, "Member 'GeneralPageCarouselWidget_BP_SetNavigationRuleBaseRightButtonA::Rule' has a wrong offset!");

// Function OutGameModule.GeneralPageCarouselWidget.BP_SetNavigationRuleBaseRightButtonB
// 0x0002 (0x0002 - 0x0000)
struct GeneralPageCarouselWidget_BP_SetNavigationRuleBaseRightButtonB final
{
public:
	EUINavigation                                 Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUINavigationRule                             Rule;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralPageCarouselWidget_BP_SetNavigationRuleBaseRightButtonB) == 0x000001, "Wrong alignment on GeneralPageCarouselWidget_BP_SetNavigationRuleBaseRightButtonB");
static_assert(sizeof(GeneralPageCarouselWidget_BP_SetNavigationRuleBaseRightButtonB) == 0x000002, "Wrong size on GeneralPageCarouselWidget_BP_SetNavigationRuleBaseRightButtonB");
static_assert(offsetof(GeneralPageCarouselWidget_BP_SetNavigationRuleBaseRightButtonB, Direction) == 0x000000, "Member 'GeneralPageCarouselWidget_BP_SetNavigationRuleBaseRightButtonB::Direction' has a wrong offset!");
static_assert(offsetof(GeneralPageCarouselWidget_BP_SetNavigationRuleBaseRightButtonB, Rule) == 0x000001, "Member 'GeneralPageCarouselWidget_BP_SetNavigationRuleBaseRightButtonB::Rule' has a wrong offset!");

// Function OutGameModule.GeneralPageCarouselWidget.InputEnd
// 0x0004 (0x0004 - 0x0000)
struct GeneralPageCarouselWidget_InputEnd final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralPageCarouselWidget_InputEnd) == 0x000004, "Wrong alignment on GeneralPageCarouselWidget_InputEnd");
static_assert(sizeof(GeneralPageCarouselWidget_InputEnd) == 0x000004, "Wrong size on GeneralPageCarouselWidget_InputEnd");
static_assert(offsetof(GeneralPageCarouselWidget_InputEnd, Index_0) == 0x000000, "Member 'GeneralPageCarouselWidget_InputEnd::Index_0' has a wrong offset!");

// Function OutGameModule.GeneralPageCarouselWidget.NextCarousel
// 0x0010 (0x0010 - 0x0000)
struct GeneralPageCarouselWidget_NextCarousel final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneralPageCarouselWidget_NextCarousel) == 0x000008, "Wrong alignment on GeneralPageCarouselWidget_NextCarousel");
static_assert(sizeof(GeneralPageCarouselWidget_NextCarousel) == 0x000010, "Wrong size on GeneralPageCarouselWidget_NextCarousel");
static_assert(offsetof(GeneralPageCarouselWidget_NextCarousel, Widget) == 0x000000, "Member 'GeneralPageCarouselWidget_NextCarousel::Widget' has a wrong offset!");
static_assert(offsetof(GeneralPageCarouselWidget_NextCarousel, InputType) == 0x000008, "Member 'GeneralPageCarouselWidget_NextCarousel::InputType' has a wrong offset!");

// DelegateFunction OutGameModule.GeneralPageCarouselWidget.OnChangeIndexDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct GeneralPageCarouselWidget_OnChangeIndexDelegate__DelegateSignature final
{
public:
	int32                                         NewIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFoucas;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneralPageCarouselWidget_OnChangeIndexDelegate__DelegateSignature) == 0x000004, "Wrong alignment on GeneralPageCarouselWidget_OnChangeIndexDelegate__DelegateSignature");
static_assert(sizeof(GeneralPageCarouselWidget_OnChangeIndexDelegate__DelegateSignature) == 0x000008, "Wrong size on GeneralPageCarouselWidget_OnChangeIndexDelegate__DelegateSignature");
static_assert(offsetof(GeneralPageCarouselWidget_OnChangeIndexDelegate__DelegateSignature, NewIndex) == 0x000000, "Member 'GeneralPageCarouselWidget_OnChangeIndexDelegate__DelegateSignature::NewIndex' has a wrong offset!");
static_assert(offsetof(GeneralPageCarouselWidget_OnChangeIndexDelegate__DelegateSignature, IsFoucas) == 0x000004, "Member 'GeneralPageCarouselWidget_OnChangeIndexDelegate__DelegateSignature::IsFoucas' has a wrong offset!");

// Function OutGameModule.GeneralPageCarouselWidget.PrevCarousel
// 0x0010 (0x0010 - 0x0000)
struct GeneralPageCarouselWidget_PrevCarousel final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneralPageCarouselWidget_PrevCarousel) == 0x000008, "Wrong alignment on GeneralPageCarouselWidget_PrevCarousel");
static_assert(sizeof(GeneralPageCarouselWidget_PrevCarousel) == 0x000010, "Wrong size on GeneralPageCarouselWidget_PrevCarousel");
static_assert(offsetof(GeneralPageCarouselWidget_PrevCarousel, Widget) == 0x000000, "Member 'GeneralPageCarouselWidget_PrevCarousel::Widget' has a wrong offset!");
static_assert(offsetof(GeneralPageCarouselWidget_PrevCarousel, InputType) == 0x000008, "Member 'GeneralPageCarouselWidget_PrevCarousel::InputType' has a wrong offset!");

// Function OutGameModule.GeneralPageCarouselWidget.SkipNextCarousel
// 0x0010 (0x0010 - 0x0000)
struct GeneralPageCarouselWidget_SkipNextCarousel final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneralPageCarouselWidget_SkipNextCarousel) == 0x000008, "Wrong alignment on GeneralPageCarouselWidget_SkipNextCarousel");
static_assert(sizeof(GeneralPageCarouselWidget_SkipNextCarousel) == 0x000010, "Wrong size on GeneralPageCarouselWidget_SkipNextCarousel");
static_assert(offsetof(GeneralPageCarouselWidget_SkipNextCarousel, Widget) == 0x000000, "Member 'GeneralPageCarouselWidget_SkipNextCarousel::Widget' has a wrong offset!");
static_assert(offsetof(GeneralPageCarouselWidget_SkipNextCarousel, InputType) == 0x000008, "Member 'GeneralPageCarouselWidget_SkipNextCarousel::InputType' has a wrong offset!");

// Function OutGameModule.GeneralPageCarouselWidget.SkipPrevCarousel
// 0x0010 (0x0010 - 0x0000)
struct GeneralPageCarouselWidget_SkipPrevCarousel final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneralPageCarouselWidget_SkipPrevCarousel) == 0x000008, "Wrong alignment on GeneralPageCarouselWidget_SkipPrevCarousel");
static_assert(sizeof(GeneralPageCarouselWidget_SkipPrevCarousel) == 0x000010, "Wrong size on GeneralPageCarouselWidget_SkipPrevCarousel");
static_assert(offsetof(GeneralPageCarouselWidget_SkipPrevCarousel, Widget) == 0x000000, "Member 'GeneralPageCarouselWidget_SkipPrevCarousel::Widget' has a wrong offset!");
static_assert(offsetof(GeneralPageCarouselWidget_SkipPrevCarousel, InputType) == 0x000008, "Member 'GeneralPageCarouselWidget_SkipPrevCarousel::InputType' has a wrong offset!");

// Function OutGameModule.GeneralPresetAppWidget.BP_OpenWidget
// 0x0001 (0x0001 - 0x0000)
struct GeneralPresetAppWidget_BP_OpenWidget final
{
public:
	bool                                          IsOpen;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralPresetAppWidget_BP_OpenWidget) == 0x000001, "Wrong alignment on GeneralPresetAppWidget_BP_OpenWidget");
static_assert(sizeof(GeneralPresetAppWidget_BP_OpenWidget) == 0x000001, "Wrong size on GeneralPresetAppWidget_BP_OpenWidget");
static_assert(offsetof(GeneralPresetAppWidget_BP_OpenWidget, IsOpen) == 0x000000, "Member 'GeneralPresetAppWidget_BP_OpenWidget::IsOpen' has a wrong offset!");

// Function OutGameModule.GeneralPresetAppWidget.BP_SetCharacterText
// 0x0018 (0x0018 - 0x0000)
struct GeneralPresetAppWidget_BP_SetCharacterText final
{
public:
	class FText                                   CharacterText;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralPresetAppWidget_BP_SetCharacterText) == 0x000008, "Wrong alignment on GeneralPresetAppWidget_BP_SetCharacterText");
static_assert(sizeof(GeneralPresetAppWidget_BP_SetCharacterText) == 0x000018, "Wrong size on GeneralPresetAppWidget_BP_SetCharacterText");
static_assert(offsetof(GeneralPresetAppWidget_BP_SetCharacterText, CharacterText) == 0x000000, "Member 'GeneralPresetAppWidget_BP_SetCharacterText::CharacterText' has a wrong offset!");

// Function OutGameModule.GeneralPresetAppWidget.BP_SetCharacterType
// 0x0001 (0x0001 - 0x0000)
struct GeneralPresetAppWidget_BP_SetCharacterType final
{
public:
	ECharacterId                                  CharacterType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralPresetAppWidget_BP_SetCharacterType) == 0x000001, "Wrong alignment on GeneralPresetAppWidget_BP_SetCharacterType");
static_assert(sizeof(GeneralPresetAppWidget_BP_SetCharacterType) == 0x000001, "Wrong size on GeneralPresetAppWidget_BP_SetCharacterType");
static_assert(offsetof(GeneralPresetAppWidget_BP_SetCharacterType, CharacterType) == 0x000000, "Member 'GeneralPresetAppWidget_BP_SetCharacterType::CharacterType' has a wrong offset!");

// Function OutGameModule.GeneralPresetAppWidget.BP_SetHeaderText
// 0x0018 (0x0018 - 0x0000)
struct GeneralPresetAppWidget_BP_SetHeaderText final
{
public:
	class FText                                   HeaderText;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralPresetAppWidget_BP_SetHeaderText) == 0x000008, "Wrong alignment on GeneralPresetAppWidget_BP_SetHeaderText");
static_assert(sizeof(GeneralPresetAppWidget_BP_SetHeaderText) == 0x000018, "Wrong size on GeneralPresetAppWidget_BP_SetHeaderText");
static_assert(offsetof(GeneralPresetAppWidget_BP_SetHeaderText, HeaderText) == 0x000000, "Member 'GeneralPresetAppWidget_BP_SetHeaderText::HeaderText' has a wrong offset!");

// Function OutGameModule.GeneralPresetAppWidget.BP_SetOpen
// 0x0001 (0x0001 - 0x0000)
struct GeneralPresetAppWidget_BP_SetOpen final
{
public:
	bool                                          IsOpen;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralPresetAppWidget_BP_SetOpen) == 0x000001, "Wrong alignment on GeneralPresetAppWidget_BP_SetOpen");
static_assert(sizeof(GeneralPresetAppWidget_BP_SetOpen) == 0x000001, "Wrong size on GeneralPresetAppWidget_BP_SetOpen");
static_assert(offsetof(GeneralPresetAppWidget_BP_SetOpen, IsOpen) == 0x000000, "Member 'GeneralPresetAppWidget_BP_SetOpen::IsOpen' has a wrong offset!");

// Function OutGameModule.GeneralPresetAppWidget.DoCustomListNavigation
// 0x0010 (0x0010 - 0x0000)
struct GeneralPresetAppWidget_DoCustomListNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralPresetAppWidget_DoCustomListNavigation) == 0x000008, "Wrong alignment on GeneralPresetAppWidget_DoCustomListNavigation");
static_assert(sizeof(GeneralPresetAppWidget_DoCustomListNavigation) == 0x000010, "Wrong size on GeneralPresetAppWidget_DoCustomListNavigation");
static_assert(offsetof(GeneralPresetAppWidget_DoCustomListNavigation, UiNavigation) == 0x000000, "Member 'GeneralPresetAppWidget_DoCustomListNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(GeneralPresetAppWidget_DoCustomListNavigation, ReturnValue) == 0x000008, "Member 'GeneralPresetAppWidget_DoCustomListNavigation::ReturnValue' has a wrong offset!");

// Function OutGameModule.GeneralPresetAppWidget.OnAddedToFocusPreset
// 0x0010 (0x0010 - 0x0000)
struct GeneralPresetAppWidget_OnAddedToFocusPreset final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneralPresetAppWidget_OnAddedToFocusPreset) == 0x000008, "Wrong alignment on GeneralPresetAppWidget_OnAddedToFocusPreset");
static_assert(sizeof(GeneralPresetAppWidget_OnAddedToFocusPreset) == 0x000010, "Wrong size on GeneralPresetAppWidget_OnAddedToFocusPreset");
static_assert(offsetof(GeneralPresetAppWidget_OnAddedToFocusPreset, Widget) == 0x000000, "Member 'GeneralPresetAppWidget_OnAddedToFocusPreset::Widget' has a wrong offset!");
static_assert(offsetof(GeneralPresetAppWidget_OnAddedToFocusPreset, InputType) == 0x000008, "Member 'GeneralPresetAppWidget_OnAddedToFocusPreset::InputType' has a wrong offset!");

// Function OutGameModule.GeneralPresetAppWidget.OnDecidePreset
// 0x0018 (0x0018 - 0x0000)
struct GeneralPresetAppWidget_OnDecidePreset final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Presetindex;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPresetWidgetType                             PresetType;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneralPresetAppWidget_OnDecidePreset) == 0x000008, "Wrong alignment on GeneralPresetAppWidget_OnDecidePreset");
static_assert(sizeof(GeneralPresetAppWidget_OnDecidePreset) == 0x000018, "Wrong size on GeneralPresetAppWidget_OnDecidePreset");
static_assert(offsetof(GeneralPresetAppWidget_OnDecidePreset, Widget) == 0x000000, "Member 'GeneralPresetAppWidget_OnDecidePreset::Widget' has a wrong offset!");
static_assert(offsetof(GeneralPresetAppWidget_OnDecidePreset, InputType) == 0x000008, "Member 'GeneralPresetAppWidget_OnDecidePreset::InputType' has a wrong offset!");
static_assert(offsetof(GeneralPresetAppWidget_OnDecidePreset, Presetindex) == 0x00000C, "Member 'GeneralPresetAppWidget_OnDecidePreset::Presetindex' has a wrong offset!");
static_assert(offsetof(GeneralPresetAppWidget_OnDecidePreset, PresetType) == 0x000010, "Member 'GeneralPresetAppWidget_OnDecidePreset::PresetType' has a wrong offset!");

// Function OutGameModule.GeneralPresetAppWidget.BP_GetCharacterText
// 0x0018 (0x0018 - 0x0000)
struct GeneralPresetAppWidget_BP_GetCharacterText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralPresetAppWidget_BP_GetCharacterText) == 0x000008, "Wrong alignment on GeneralPresetAppWidget_BP_GetCharacterText");
static_assert(sizeof(GeneralPresetAppWidget_BP_GetCharacterText) == 0x000018, "Wrong size on GeneralPresetAppWidget_BP_GetCharacterText");
static_assert(offsetof(GeneralPresetAppWidget_BP_GetCharacterText, ReturnValue) == 0x000000, "Member 'GeneralPresetAppWidget_BP_GetCharacterText::ReturnValue' has a wrong offset!");

// Function OutGameModule.GeneralPresetAppWidget.BP_GetCharacterType
// 0x0001 (0x0001 - 0x0000)
struct GeneralPresetAppWidget_BP_GetCharacterType final
{
public:
	ECharacterId                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralPresetAppWidget_BP_GetCharacterType) == 0x000001, "Wrong alignment on GeneralPresetAppWidget_BP_GetCharacterType");
static_assert(sizeof(GeneralPresetAppWidget_BP_GetCharacterType) == 0x000001, "Wrong size on GeneralPresetAppWidget_BP_GetCharacterType");
static_assert(offsetof(GeneralPresetAppWidget_BP_GetCharacterType, ReturnValue) == 0x000000, "Member 'GeneralPresetAppWidget_BP_GetCharacterType::ReturnValue' has a wrong offset!");

// Function OutGameModule.GeneralPresetAppWidget.BP_GetHeaderText
// 0x0018 (0x0018 - 0x0000)
struct GeneralPresetAppWidget_BP_GetHeaderText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralPresetAppWidget_BP_GetHeaderText) == 0x000008, "Wrong alignment on GeneralPresetAppWidget_BP_GetHeaderText");
static_assert(sizeof(GeneralPresetAppWidget_BP_GetHeaderText) == 0x000018, "Wrong size on GeneralPresetAppWidget_BP_GetHeaderText");
static_assert(offsetof(GeneralPresetAppWidget_BP_GetHeaderText, ReturnValue) == 0x000000, "Member 'GeneralPresetAppWidget_BP_GetHeaderText::ReturnValue' has a wrong offset!");

// Function OutGameModule.GeneralPresetAppWidget.BP_GetSelectedPresetWidget
// 0x0008 (0x0008 - 0x0000)
struct GeneralPresetAppWidget_BP_GetSelectedPresetWidget final
{
public:
	class UGeneralPresetWidget*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralPresetAppWidget_BP_GetSelectedPresetWidget) == 0x000008, "Wrong alignment on GeneralPresetAppWidget_BP_GetSelectedPresetWidget");
static_assert(sizeof(GeneralPresetAppWidget_BP_GetSelectedPresetWidget) == 0x000008, "Wrong size on GeneralPresetAppWidget_BP_GetSelectedPresetWidget");
static_assert(offsetof(GeneralPresetAppWidget_BP_GetSelectedPresetWidget, ReturnValue) == 0x000000, "Member 'GeneralPresetAppWidget_BP_GetSelectedPresetWidget::ReturnValue' has a wrong offset!");

// Function OutGameModule.GeneralPresetAppWidget.BP_IsOpen
// 0x0001 (0x0001 - 0x0000)
struct GeneralPresetAppWidget_BP_IsOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralPresetAppWidget_BP_IsOpen) == 0x000001, "Wrong alignment on GeneralPresetAppWidget_BP_IsOpen");
static_assert(sizeof(GeneralPresetAppWidget_BP_IsOpen) == 0x000001, "Wrong size on GeneralPresetAppWidget_BP_IsOpen");
static_assert(offsetof(GeneralPresetAppWidget_BP_IsOpen, ReturnValue) == 0x000000, "Member 'GeneralPresetAppWidget_BP_IsOpen::ReturnValue' has a wrong offset!");

// Function OutGameModule.GeneralSelectionButtonWidget.BP_SetColorPaletteType
// 0x0001 (0x0001 - 0x0000)
struct GeneralSelectionButtonWidget_BP_SetColorPaletteType final
{
public:
	EAvatarColorParts                             Parts;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralSelectionButtonWidget_BP_SetColorPaletteType) == 0x000001, "Wrong alignment on GeneralSelectionButtonWidget_BP_SetColorPaletteType");
static_assert(sizeof(GeneralSelectionButtonWidget_BP_SetColorPaletteType) == 0x000001, "Wrong size on GeneralSelectionButtonWidget_BP_SetColorPaletteType");
static_assert(offsetof(GeneralSelectionButtonWidget_BP_SetColorPaletteType, Parts) == 0x000000, "Member 'GeneralSelectionButtonWidget_BP_SetColorPaletteType::Parts' has a wrong offset!");

// Function OutGameModule.GeneralSelectionButtonWidget.BP_SetElementIndexAndColorPaletteType
// 0x0008 (0x0008 - 0x0000)
struct GeneralSelectionButtonWidget_BP_SetElementIndexAndColorPaletteType final
{
public:
	EAvatarColorParts                             Parts;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ElementIndex;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralSelectionButtonWidget_BP_SetElementIndexAndColorPaletteType) == 0x000004, "Wrong alignment on GeneralSelectionButtonWidget_BP_SetElementIndexAndColorPaletteType");
static_assert(sizeof(GeneralSelectionButtonWidget_BP_SetElementIndexAndColorPaletteType) == 0x000008, "Wrong size on GeneralSelectionButtonWidget_BP_SetElementIndexAndColorPaletteType");
static_assert(offsetof(GeneralSelectionButtonWidget_BP_SetElementIndexAndColorPaletteType, Parts) == 0x000000, "Member 'GeneralSelectionButtonWidget_BP_SetElementIndexAndColorPaletteType::Parts' has a wrong offset!");
static_assert(offsetof(GeneralSelectionButtonWidget_BP_SetElementIndexAndColorPaletteType, ElementIndex) == 0x000004, "Member 'GeneralSelectionButtonWidget_BP_SetElementIndexAndColorPaletteType::ElementIndex' has a wrong offset!");

// Function OutGameModule.GeneralSelectionButtonWidget.BP_SetElementIndexAndSpriteFlipbook
// 0x0018 (0x0018 - 0x0000)
struct GeneralSelectionButtonWidget_BP_SetElementIndexAndSpriteFlipbook final
{
public:
	const class UPaperFlipbook*                   SpriteFlipbook;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              Material;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ElementIndex;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralSelectionButtonWidget_BP_SetElementIndexAndSpriteFlipbook) == 0x000008, "Wrong alignment on GeneralSelectionButtonWidget_BP_SetElementIndexAndSpriteFlipbook");
static_assert(sizeof(GeneralSelectionButtonWidget_BP_SetElementIndexAndSpriteFlipbook) == 0x000018, "Wrong size on GeneralSelectionButtonWidget_BP_SetElementIndexAndSpriteFlipbook");
static_assert(offsetof(GeneralSelectionButtonWidget_BP_SetElementIndexAndSpriteFlipbook, SpriteFlipbook) == 0x000000, "Member 'GeneralSelectionButtonWidget_BP_SetElementIndexAndSpriteFlipbook::SpriteFlipbook' has a wrong offset!");
static_assert(offsetof(GeneralSelectionButtonWidget_BP_SetElementIndexAndSpriteFlipbook, Material) == 0x000008, "Member 'GeneralSelectionButtonWidget_BP_SetElementIndexAndSpriteFlipbook::Material' has a wrong offset!");
static_assert(offsetof(GeneralSelectionButtonWidget_BP_SetElementIndexAndSpriteFlipbook, bMatchSize) == 0x000010, "Member 'GeneralSelectionButtonWidget_BP_SetElementIndexAndSpriteFlipbook::bMatchSize' has a wrong offset!");
static_assert(offsetof(GeneralSelectionButtonWidget_BP_SetElementIndexAndSpriteFlipbook, ElementIndex) == 0x000014, "Member 'GeneralSelectionButtonWidget_BP_SetElementIndexAndSpriteFlipbook::ElementIndex' has a wrong offset!");

// Function OutGameModule.GeneralSelectionButtonWidget.BP_SetSpriteFlipbook
// 0x0010 (0x0010 - 0x0000)
struct GeneralSelectionButtonWidget_BP_SetSpriteFlipbook final
{
public:
	const class UPaperFlipbook*                   SpriteFlipbook;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneralSelectionButtonWidget_BP_SetSpriteFlipbook) == 0x000008, "Wrong alignment on GeneralSelectionButtonWidget_BP_SetSpriteFlipbook");
static_assert(sizeof(GeneralSelectionButtonWidget_BP_SetSpriteFlipbook) == 0x000010, "Wrong size on GeneralSelectionButtonWidget_BP_SetSpriteFlipbook");
static_assert(offsetof(GeneralSelectionButtonWidget_BP_SetSpriteFlipbook, SpriteFlipbook) == 0x000000, "Member 'GeneralSelectionButtonWidget_BP_SetSpriteFlipbook::SpriteFlipbook' has a wrong offset!");
static_assert(offsetof(GeneralSelectionButtonWidget_BP_SetSpriteFlipbook, bMatchSize) == 0x000008, "Member 'GeneralSelectionButtonWidget_BP_SetSpriteFlipbook::bMatchSize' has a wrong offset!");

// Function OutGameModule.GeneralSelectionButtonWidget.BP_GetImage
// 0x0008 (0x0008 - 0x0000)
struct GeneralSelectionButtonWidget_BP_GetImage final
{
public:
	class UImage*                                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralSelectionButtonWidget_BP_GetImage) == 0x000008, "Wrong alignment on GeneralSelectionButtonWidget_BP_GetImage");
static_assert(sizeof(GeneralSelectionButtonWidget_BP_GetImage) == 0x000008, "Wrong size on GeneralSelectionButtonWidget_BP_GetImage");
static_assert(offsetof(GeneralSelectionButtonWidget_BP_GetImage, ReturnValue) == 0x000000, "Member 'GeneralSelectionButtonWidget_BP_GetImage::ReturnValue' has a wrong offset!");

// Function OutGameModule.GeneralTradeWidget.BP_CallTradeButton
// 0x0001 (0x0001 - 0x0000)
struct GeneralTradeWidget_BP_CallTradeButton final
{
public:
	bool                                          bTrade;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralTradeWidget_BP_CallTradeButton) == 0x000001, "Wrong alignment on GeneralTradeWidget_BP_CallTradeButton");
static_assert(sizeof(GeneralTradeWidget_BP_CallTradeButton) == 0x000001, "Wrong size on GeneralTradeWidget_BP_CallTradeButton");
static_assert(offsetof(GeneralTradeWidget_BP_CallTradeButton, bTrade) == 0x000000, "Member 'GeneralTradeWidget_BP_CallTradeButton::bTrade' has a wrong offset!");

// Function OutGameModule.GeneralTradeWidget.BP_SetBuyCount
// 0x0001 (0x0001 - 0x0000)
struct GeneralTradeWidget_BP_SetBuyCount final
{
public:
	bool                                          bPlus;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralTradeWidget_BP_SetBuyCount) == 0x000001, "Wrong alignment on GeneralTradeWidget_BP_SetBuyCount");
static_assert(sizeof(GeneralTradeWidget_BP_SetBuyCount) == 0x000001, "Wrong size on GeneralTradeWidget_BP_SetBuyCount");
static_assert(offsetof(GeneralTradeWidget_BP_SetBuyCount, bPlus) == 0x000000, "Member 'GeneralTradeWidget_BP_SetBuyCount::bPlus' has a wrong offset!");

// Function OutGameModule.GeneralTradeWidget.BP_SetupImage
// 0x0050 (0x0050 - 0x0000)
struct GeneralTradeWidget_BP_SetupImage final
{
public:
	ECurrencyType                                 Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NeedNum;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Target;                                            // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   Cmd;                                               // 0x0020(0x0018)(Parm, NativeAccessSpecifierPublic)
	int32                                         ItemCategory;                                      // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCode;                                          // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxBuyCount;                                       // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowCount;                                        // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdate;                                           // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneralTradeWidget_BP_SetupImage) == 0x000008, "Wrong alignment on GeneralTradeWidget_BP_SetupImage");
static_assert(sizeof(GeneralTradeWidget_BP_SetupImage) == 0x000050, "Wrong size on GeneralTradeWidget_BP_SetupImage");
static_assert(offsetof(GeneralTradeWidget_BP_SetupImage, Type) == 0x000000, "Member 'GeneralTradeWidget_BP_SetupImage::Type' has a wrong offset!");
static_assert(offsetof(GeneralTradeWidget_BP_SetupImage, NeedNum) == 0x000004, "Member 'GeneralTradeWidget_BP_SetupImage::NeedNum' has a wrong offset!");
static_assert(offsetof(GeneralTradeWidget_BP_SetupImage, Target) == 0x000008, "Member 'GeneralTradeWidget_BP_SetupImage::Target' has a wrong offset!");
static_assert(offsetof(GeneralTradeWidget_BP_SetupImage, Cmd) == 0x000020, "Member 'GeneralTradeWidget_BP_SetupImage::Cmd' has a wrong offset!");
static_assert(offsetof(GeneralTradeWidget_BP_SetupImage, ItemCategory) == 0x000038, "Member 'GeneralTradeWidget_BP_SetupImage::ItemCategory' has a wrong offset!");
static_assert(offsetof(GeneralTradeWidget_BP_SetupImage, ItemCode) == 0x00003C, "Member 'GeneralTradeWidget_BP_SetupImage::ItemCode' has a wrong offset!");
static_assert(offsetof(GeneralTradeWidget_BP_SetupImage, ItemCount) == 0x000040, "Member 'GeneralTradeWidget_BP_SetupImage::ItemCount' has a wrong offset!");
static_assert(offsetof(GeneralTradeWidget_BP_SetupImage, MaxBuyCount) == 0x000044, "Member 'GeneralTradeWidget_BP_SetupImage::MaxBuyCount' has a wrong offset!");
static_assert(offsetof(GeneralTradeWidget_BP_SetupImage, bShowCount) == 0x000048, "Member 'GeneralTradeWidget_BP_SetupImage::bShowCount' has a wrong offset!");
static_assert(offsetof(GeneralTradeWidget_BP_SetupImage, bUpdate) == 0x000049, "Member 'GeneralTradeWidget_BP_SetupImage::bUpdate' has a wrong offset!");

// DelegateFunction OutGameModule.GeneralTradeWidget.OnButtonEventDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GeneralTradeWidget_OnButtonEventDelegate__DelegateSignature final
{
public:
	bool                                          bTrade;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralTradeWidget_OnButtonEventDelegate__DelegateSignature) == 0x000001, "Wrong alignment on GeneralTradeWidget_OnButtonEventDelegate__DelegateSignature");
static_assert(sizeof(GeneralTradeWidget_OnButtonEventDelegate__DelegateSignature) == 0x000001, "Wrong size on GeneralTradeWidget_OnButtonEventDelegate__DelegateSignature");
static_assert(offsetof(GeneralTradeWidget_OnButtonEventDelegate__DelegateSignature, bTrade) == 0x000000, "Member 'GeneralTradeWidget_OnButtonEventDelegate__DelegateSignature::bTrade' has a wrong offset!");

// Function OutGameModule.GuildApplicantListWidget.NavigationSet
// 0x0010 (0x0010 - 0x0000)
struct GuildApplicantListWidget_NavigationSet final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildApplicantListWidget_NavigationSet) == 0x000008, "Wrong alignment on GuildApplicantListWidget_NavigationSet");
static_assert(sizeof(GuildApplicantListWidget_NavigationSet) == 0x000010, "Wrong size on GuildApplicantListWidget_NavigationSet");
static_assert(offsetof(GuildApplicantListWidget_NavigationSet, Index_0) == 0x000000, "Member 'GuildApplicantListWidget_NavigationSet::Index_0' has a wrong offset!");
static_assert(offsetof(GuildApplicantListWidget_NavigationSet, ReturnValue) == 0x000008, "Member 'GuildApplicantListWidget_NavigationSet::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildApplicantListWidget.NavigationSetItem
// 0x0008 (0x0008 - 0x0000)
struct GuildApplicantListWidget_NavigationSetItem final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildApplicantListWidget_NavigationSetItem) == 0x000008, "Wrong alignment on GuildApplicantListWidget_NavigationSetItem");
static_assert(sizeof(GuildApplicantListWidget_NavigationSetItem) == 0x000008, "Wrong size on GuildApplicantListWidget_NavigationSetItem");
static_assert(offsetof(GuildApplicantListWidget_NavigationSetItem, ReturnValue) == 0x000000, "Member 'GuildApplicantListWidget_NavigationSetItem::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildApplicantListWidget.OnAddedToFocusItemWidget
// 0x0010 (0x0010 - 0x0000)
struct GuildApplicantListWidget_OnAddedToFocusItemWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GuildApplicantListWidget_OnAddedToFocusItemWidget) == 0x000008, "Wrong alignment on GuildApplicantListWidget_OnAddedToFocusItemWidget");
static_assert(sizeof(GuildApplicantListWidget_OnAddedToFocusItemWidget) == 0x000010, "Wrong size on GuildApplicantListWidget_OnAddedToFocusItemWidget");
static_assert(offsetof(GuildApplicantListWidget_OnAddedToFocusItemWidget, Button) == 0x000000, "Member 'GuildApplicantListWidget_OnAddedToFocusItemWidget::Button' has a wrong offset!");
static_assert(offsetof(GuildApplicantListWidget_OnAddedToFocusItemWidget, InputType) == 0x000008, "Member 'GuildApplicantListWidget_OnAddedToFocusItemWidget::InputType' has a wrong offset!");

// DelegateFunction OutGameModule.GuildApplicantListWidget.OnChangeFriendCount__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct GuildApplicantListWidget_OnChangeFriendCount__DelegateSignature final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Maxnum;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Maxpage;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildApplicantListWidget_OnChangeFriendCount__DelegateSignature) == 0x000004, "Wrong alignment on GuildApplicantListWidget_OnChangeFriendCount__DelegateSignature");
static_assert(sizeof(GuildApplicantListWidget_OnChangeFriendCount__DelegateSignature) == 0x00000C, "Wrong size on GuildApplicantListWidget_OnChangeFriendCount__DelegateSignature");
static_assert(offsetof(GuildApplicantListWidget_OnChangeFriendCount__DelegateSignature, Num) == 0x000000, "Member 'GuildApplicantListWidget_OnChangeFriendCount__DelegateSignature::Num' has a wrong offset!");
static_assert(offsetof(GuildApplicantListWidget_OnChangeFriendCount__DelegateSignature, Maxnum) == 0x000004, "Member 'GuildApplicantListWidget_OnChangeFriendCount__DelegateSignature::Maxnum' has a wrong offset!");
static_assert(offsetof(GuildApplicantListWidget_OnChangeFriendCount__DelegateSignature, Maxpage) == 0x000008, "Member 'GuildApplicantListWidget_OnChangeFriendCount__DelegateSignature::Maxpage' has a wrong offset!");

// Function OutGameModule.GuildApplicantListWidget.OnDecideButtonWidget
// 0x0010 (0x0010 - 0x0000)
struct GuildApplicantListWidget_OnDecideButtonWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GuildApplicantListWidget_OnDecideButtonWidget) == 0x000008, "Wrong alignment on GuildApplicantListWidget_OnDecideButtonWidget");
static_assert(sizeof(GuildApplicantListWidget_OnDecideButtonWidget) == 0x000010, "Wrong size on GuildApplicantListWidget_OnDecideButtonWidget");
static_assert(offsetof(GuildApplicantListWidget_OnDecideButtonWidget, Button) == 0x000000, "Member 'GuildApplicantListWidget_OnDecideButtonWidget::Button' has a wrong offset!");
static_assert(offsetof(GuildApplicantListWidget_OnDecideButtonWidget, InputType) == 0x000008, "Member 'GuildApplicantListWidget_OnDecideButtonWidget::InputType' has a wrong offset!");

// DelegateFunction OutGameModule.GuildApplicantListWidget.OnInputEventDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct GuildApplicantListWidget_OnInputEventDelegate__DelegateSignature final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GuildApplicantListWidget_OnInputEventDelegate__DelegateSignature) == 0x000008, "Wrong alignment on GuildApplicantListWidget_OnInputEventDelegate__DelegateSignature");
static_assert(sizeof(GuildApplicantListWidget_OnInputEventDelegate__DelegateSignature) == 0x000010, "Wrong size on GuildApplicantListWidget_OnInputEventDelegate__DelegateSignature");
static_assert(offsetof(GuildApplicantListWidget_OnInputEventDelegate__DelegateSignature, Widget) == 0x000000, "Member 'GuildApplicantListWidget_OnInputEventDelegate__DelegateSignature::Widget' has a wrong offset!");
static_assert(offsetof(GuildApplicantListWidget_OnInputEventDelegate__DelegateSignature, InputType) == 0x000008, "Member 'GuildApplicantListWidget_OnInputEventDelegate__DelegateSignature::InputType' has a wrong offset!");

// Function OutGameModule.GuildApplicantListWidget.OnPressButtonWidget
// 0x0010 (0x0010 - 0x0000)
struct GuildApplicantListWidget_OnPressButtonWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GuildApplicantListWidget_OnPressButtonWidget) == 0x000008, "Wrong alignment on GuildApplicantListWidget_OnPressButtonWidget");
static_assert(sizeof(GuildApplicantListWidget_OnPressButtonWidget) == 0x000010, "Wrong size on GuildApplicantListWidget_OnPressButtonWidget");
static_assert(offsetof(GuildApplicantListWidget_OnPressButtonWidget, Button) == 0x000000, "Member 'GuildApplicantListWidget_OnPressButtonWidget::Button' has a wrong offset!");
static_assert(offsetof(GuildApplicantListWidget_OnPressButtonWidget, InputType) == 0x000008, "Member 'GuildApplicantListWidget_OnPressButtonWidget::InputType' has a wrong offset!");

// Function OutGameModule.GuildApplicantListWidget.OnRemovedFromFocusItemWidget
// 0x0010 (0x0010 - 0x0000)
struct GuildApplicantListWidget_OnRemovedFromFocusItemWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GuildApplicantListWidget_OnRemovedFromFocusItemWidget) == 0x000008, "Wrong alignment on GuildApplicantListWidget_OnRemovedFromFocusItemWidget");
static_assert(sizeof(GuildApplicantListWidget_OnRemovedFromFocusItemWidget) == 0x000010, "Wrong size on GuildApplicantListWidget_OnRemovedFromFocusItemWidget");
static_assert(offsetof(GuildApplicantListWidget_OnRemovedFromFocusItemWidget, Button) == 0x000000, "Member 'GuildApplicantListWidget_OnRemovedFromFocusItemWidget::Button' has a wrong offset!");
static_assert(offsetof(GuildApplicantListWidget_OnRemovedFromFocusItemWidget, InputType) == 0x000008, "Member 'GuildApplicantListWidget_OnRemovedFromFocusItemWidget::InputType' has a wrong offset!");

// Function OutGameModule.GuildApplicantListWidget.ReceivedOnLoadCompleteEvent
// 0x0004 (0x0004 - 0x0000)
struct GuildApplicantListWidget_ReceivedOnLoadCompleteEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildApplicantListWidget_ReceivedOnLoadCompleteEvent) == 0x000004, "Wrong alignment on GuildApplicantListWidget_ReceivedOnLoadCompleteEvent");
static_assert(sizeof(GuildApplicantListWidget_ReceivedOnLoadCompleteEvent) == 0x000004, "Wrong size on GuildApplicantListWidget_ReceivedOnLoadCompleteEvent");
static_assert(offsetof(GuildApplicantListWidget_ReceivedOnLoadCompleteEvent, RequestId) == 0x000000, "Member 'GuildApplicantListWidget_ReceivedOnLoadCompleteEvent::RequestId' has a wrong offset!");

// Function OutGameModule.GuildApplicantListWidget.RequestLoadGuildPendingMemberList
// 0x0008 (0x0008 - 0x0000)
struct GuildApplicantListWidget_RequestLoadGuildPendingMemberList final
{
public:
	int32                                         PageNo;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuildMemberSort                              GuildMemberSort;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GuildApplicantListWidget_RequestLoadGuildPendingMemberList) == 0x000004, "Wrong alignment on GuildApplicantListWidget_RequestLoadGuildPendingMemberList");
static_assert(sizeof(GuildApplicantListWidget_RequestLoadGuildPendingMemberList) == 0x000008, "Wrong size on GuildApplicantListWidget_RequestLoadGuildPendingMemberList");
static_assert(offsetof(GuildApplicantListWidget_RequestLoadGuildPendingMemberList, PageNo) == 0x000000, "Member 'GuildApplicantListWidget_RequestLoadGuildPendingMemberList::PageNo' has a wrong offset!");
static_assert(offsetof(GuildApplicantListWidget_RequestLoadGuildPendingMemberList, GuildMemberSort) == 0x000004, "Member 'GuildApplicantListWidget_RequestLoadGuildPendingMemberList::GuildMemberSort' has a wrong offset!");

// Function OutGameModule.GuildApplicantListWidget.GetSelectedItem
// 0x0008 (0x0008 - 0x0000)
struct GuildApplicantListWidget_GetSelectedItem final
{
public:
	const class UGuildApplicantListItemObject*    ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildApplicantListWidget_GetSelectedItem) == 0x000008, "Wrong alignment on GuildApplicantListWidget_GetSelectedItem");
static_assert(sizeof(GuildApplicantListWidget_GetSelectedItem) == 0x000008, "Wrong size on GuildApplicantListWidget_GetSelectedItem");
static_assert(offsetof(GuildApplicantListWidget_GetSelectedItem, ReturnValue) == 0x000000, "Member 'GuildApplicantListWidget_GetSelectedItem::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildApplicantListWidget.GetSelectedUserId
// 0x0010 (0x0010 - 0x0000)
struct GuildApplicantListWidget_GetSelectedUserId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildApplicantListWidget_GetSelectedUserId) == 0x000008, "Wrong alignment on GuildApplicantListWidget_GetSelectedUserId");
static_assert(sizeof(GuildApplicantListWidget_GetSelectedUserId) == 0x000010, "Wrong size on GuildApplicantListWidget_GetSelectedUserId");
static_assert(offsetof(GuildApplicantListWidget_GetSelectedUserId, ReturnValue) == 0x000000, "Member 'GuildApplicantListWidget_GetSelectedUserId::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildCancelWidget.OnUpdateComplete
// 0x0004 (0x0004 - 0x0000)
struct GuildCancelWidget_OnUpdateComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildCancelWidget_OnUpdateComplete) == 0x000004, "Wrong alignment on GuildCancelWidget_OnUpdateComplete");
static_assert(sizeof(GuildCancelWidget_OnUpdateComplete) == 0x000004, "Wrong size on GuildCancelWidget_OnUpdateComplete");
static_assert(offsetof(GuildCancelWidget_OnUpdateComplete, RequestId) == 0x000000, "Member 'GuildCancelWidget_OnUpdateComplete::RequestId' has a wrong offset!");

// Function OutGameModule.GuildChangeWidget.OnChangeCompleted
// 0x0001 (0x0001 - 0x0000)
struct GuildChangeWidget_OnChangeCompleted final
{
public:
	bool                                          bSucsses;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildChangeWidget_OnChangeCompleted) == 0x000001, "Wrong alignment on GuildChangeWidget_OnChangeCompleted");
static_assert(sizeof(GuildChangeWidget_OnChangeCompleted) == 0x000001, "Wrong size on GuildChangeWidget_OnChangeCompleted");
static_assert(offsetof(GuildChangeWidget_OnChangeCompleted, bSucsses) == 0x000000, "Member 'GuildChangeWidget_OnChangeCompleted::bSucsses' has a wrong offset!");

// Function OutGameModule.GuildChangeWidget.OnUpdateComplete
// 0x0004 (0x0004 - 0x0000)
struct GuildChangeWidget_OnUpdateComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildChangeWidget_OnUpdateComplete) == 0x000004, "Wrong alignment on GuildChangeWidget_OnUpdateComplete");
static_assert(sizeof(GuildChangeWidget_OnUpdateComplete) == 0x000004, "Wrong size on GuildChangeWidget_OnUpdateComplete");
static_assert(offsetof(GuildChangeWidget_OnUpdateComplete, RequestId) == 0x000000, "Member 'GuildChangeWidget_OnUpdateComplete::RequestId' has a wrong offset!");

// Function OutGameModule.GuildChangeWidget.RequestChangeGuildEmblem
// 0x0008 (0x0008 - 0x0000)
struct GuildChangeWidget_RequestChangeGuildEmblem final
{
public:
	int32                                         GuildEmblemId;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GuildChangeWidget_RequestChangeGuildEmblem) == 0x000004, "Wrong alignment on GuildChangeWidget_RequestChangeGuildEmblem");
static_assert(sizeof(GuildChangeWidget_RequestChangeGuildEmblem) == 0x000008, "Wrong size on GuildChangeWidget_RequestChangeGuildEmblem");
static_assert(offsetof(GuildChangeWidget_RequestChangeGuildEmblem, GuildEmblemId) == 0x000000, "Member 'GuildChangeWidget_RequestChangeGuildEmblem::GuildEmblemId' has a wrong offset!");
static_assert(offsetof(GuildChangeWidget_RequestChangeGuildEmblem, ReturnValue) == 0x000004, "Member 'GuildChangeWidget_RequestChangeGuildEmblem::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildChangeWidget.RequestChangeGuildName
// 0x0020 (0x0020 - 0x0000)
struct GuildChangeWidget_RequestChangeGuildName final
{
public:
	class FText                                   GuildName;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GuildChangeWidget_RequestChangeGuildName) == 0x000008, "Wrong alignment on GuildChangeWidget_RequestChangeGuildName");
static_assert(sizeof(GuildChangeWidget_RequestChangeGuildName) == 0x000020, "Wrong size on GuildChangeWidget_RequestChangeGuildName");
static_assert(offsetof(GuildChangeWidget_RequestChangeGuildName, GuildName) == 0x000000, "Member 'GuildChangeWidget_RequestChangeGuildName::GuildName' has a wrong offset!");
static_assert(offsetof(GuildChangeWidget_RequestChangeGuildName, ReturnValue) == 0x000018, "Member 'GuildChangeWidget_RequestChangeGuildName::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildChangeWidget.RequestChangeProfile
// 0x0020 (0x0020 - 0x0000)
struct GuildChangeWidget_RequestChangeProfile final
{
public:
	class FText                                   Profile;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GuildChangeWidget_RequestChangeProfile) == 0x000008, "Wrong alignment on GuildChangeWidget_RequestChangeProfile");
static_assert(sizeof(GuildChangeWidget_RequestChangeProfile) == 0x000020, "Wrong size on GuildChangeWidget_RequestChangeProfile");
static_assert(offsetof(GuildChangeWidget_RequestChangeProfile, Profile) == 0x000000, "Member 'GuildChangeWidget_RequestChangeProfile::Profile' has a wrong offset!");
static_assert(offsetof(GuildChangeWidget_RequestChangeProfile, ReturnValue) == 0x000018, "Member 'GuildChangeWidget_RequestChangeProfile::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildChangeWidget.RequestChangeTerms
// 0x0003 (0x0003 - 0x0000)
struct GuildChangeWidget_RequestChangeTerms final
{
public:
	EGuildPolicy                                  GuildPolicy;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuildJoinRule                                GuildJoinRule;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildChangeWidget_RequestChangeTerms) == 0x000001, "Wrong alignment on GuildChangeWidget_RequestChangeTerms");
static_assert(sizeof(GuildChangeWidget_RequestChangeTerms) == 0x000003, "Wrong size on GuildChangeWidget_RequestChangeTerms");
static_assert(offsetof(GuildChangeWidget_RequestChangeTerms, GuildPolicy) == 0x000000, "Member 'GuildChangeWidget_RequestChangeTerms::GuildPolicy' has a wrong offset!");
static_assert(offsetof(GuildChangeWidget_RequestChangeTerms, GuildJoinRule) == 0x000001, "Member 'GuildChangeWidget_RequestChangeTerms::GuildJoinRule' has a wrong offset!");
static_assert(offsetof(GuildChangeWidget_RequestChangeTerms, ReturnValue) == 0x000002, "Member 'GuildChangeWidget_RequestChangeTerms::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildChangeWidget.GetBeforeEmblemId
// 0x0004 (0x0004 - 0x0000)
struct GuildChangeWidget_GetBeforeEmblemId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildChangeWidget_GetBeforeEmblemId) == 0x000004, "Wrong alignment on GuildChangeWidget_GetBeforeEmblemId");
static_assert(sizeof(GuildChangeWidget_GetBeforeEmblemId) == 0x000004, "Wrong size on GuildChangeWidget_GetBeforeEmblemId");
static_assert(offsetof(GuildChangeWidget_GetBeforeEmblemId, ReturnValue) == 0x000000, "Member 'GuildChangeWidget_GetBeforeEmblemId::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildChangeWidget.GetGuildJoinRule
// 0x0001 (0x0001 - 0x0000)
struct GuildChangeWidget_GetGuildJoinRule final
{
public:
	EGuildJoinRule                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildChangeWidget_GetGuildJoinRule) == 0x000001, "Wrong alignment on GuildChangeWidget_GetGuildJoinRule");
static_assert(sizeof(GuildChangeWidget_GetGuildJoinRule) == 0x000001, "Wrong size on GuildChangeWidget_GetGuildJoinRule");
static_assert(offsetof(GuildChangeWidget_GetGuildJoinRule, ReturnValue) == 0x000000, "Member 'GuildChangeWidget_GetGuildJoinRule::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildChangeWidget.GetGuildPolicy
// 0x0001 (0x0001 - 0x0000)
struct GuildChangeWidget_GetGuildPolicy final
{
public:
	EGuildPolicy                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildChangeWidget_GetGuildPolicy) == 0x000001, "Wrong alignment on GuildChangeWidget_GetGuildPolicy");
static_assert(sizeof(GuildChangeWidget_GetGuildPolicy) == 0x000001, "Wrong size on GuildChangeWidget_GetGuildPolicy");
static_assert(offsetof(GuildChangeWidget_GetGuildPolicy, ReturnValue) == 0x000000, "Member 'GuildChangeWidget_GetGuildPolicy::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildChangeWidget.GetMyGuildName
// 0x0010 (0x0010 - 0x0000)
struct GuildChangeWidget_GetMyGuildName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildChangeWidget_GetMyGuildName) == 0x000008, "Wrong alignment on GuildChangeWidget_GetMyGuildName");
static_assert(sizeof(GuildChangeWidget_GetMyGuildName) == 0x000010, "Wrong size on GuildChangeWidget_GetMyGuildName");
static_assert(offsetof(GuildChangeWidget_GetMyGuildName, ReturnValue) == 0x000000, "Member 'GuildChangeWidget_GetMyGuildName::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildChangeWidget.GetMyGuildProfile
// 0x0010 (0x0010 - 0x0000)
struct GuildChangeWidget_GetMyGuildProfile final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildChangeWidget_GetMyGuildProfile) == 0x000008, "Wrong alignment on GuildChangeWidget_GetMyGuildProfile");
static_assert(sizeof(GuildChangeWidget_GetMyGuildProfile) == 0x000010, "Wrong size on GuildChangeWidget_GetMyGuildProfile");
static_assert(offsetof(GuildChangeWidget_GetMyGuildProfile, ReturnValue) == 0x000000, "Member 'GuildChangeWidget_GetMyGuildProfile::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildChatListObject.BP_SetItemText
// 0x0038 (0x0038 - 0x0000)
struct GuildChatListObject_BP_SetItemText final
{
public:
	bool                                          IsSelf;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DisplayName;                                       // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Date;                                              // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuildChatType                                Type;                                              // 0x0030(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GuildChatListObject_BP_SetItemText) == 0x000008, "Wrong alignment on GuildChatListObject_BP_SetItemText");
static_assert(sizeof(GuildChatListObject_BP_SetItemText) == 0x000038, "Wrong size on GuildChatListObject_BP_SetItemText");
static_assert(offsetof(GuildChatListObject_BP_SetItemText, IsSelf) == 0x000000, "Member 'GuildChatListObject_BP_SetItemText::IsSelf' has a wrong offset!");
static_assert(offsetof(GuildChatListObject_BP_SetItemText, DisplayName) == 0x000008, "Member 'GuildChatListObject_BP_SetItemText::DisplayName' has a wrong offset!");
static_assert(offsetof(GuildChatListObject_BP_SetItemText, Text) == 0x000018, "Member 'GuildChatListObject_BP_SetItemText::Text' has a wrong offset!");
static_assert(offsetof(GuildChatListObject_BP_SetItemText, Date) == 0x000028, "Member 'GuildChatListObject_BP_SetItemText::Date' has a wrong offset!");
static_assert(offsetof(GuildChatListObject_BP_SetItemText, Type) == 0x000030, "Member 'GuildChatListObject_BP_SetItemText::Type' has a wrong offset!");

// Function OutGameModule.GuildChatListObject.BP_GetDate
// 0x0008 (0x0008 - 0x0000)
struct GuildChatListObject_BP_GetDate final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildChatListObject_BP_GetDate) == 0x000008, "Wrong alignment on GuildChatListObject_BP_GetDate");
static_assert(sizeof(GuildChatListObject_BP_GetDate) == 0x000008, "Wrong size on GuildChatListObject_BP_GetDate");
static_assert(offsetof(GuildChatListObject_BP_GetDate, ReturnValue) == 0x000000, "Member 'GuildChatListObject_BP_GetDate::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildChatListObject.BP_GetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct GuildChatListObject_BP_GetDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildChatListObject_BP_GetDisplayName) == 0x000008, "Wrong alignment on GuildChatListObject_BP_GetDisplayName");
static_assert(sizeof(GuildChatListObject_BP_GetDisplayName) == 0x000010, "Wrong size on GuildChatListObject_BP_GetDisplayName");
static_assert(offsetof(GuildChatListObject_BP_GetDisplayName, ReturnValue) == 0x000000, "Member 'GuildChatListObject_BP_GetDisplayName::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildChatListObject.BP_GetGuildChatType
// 0x0001 (0x0001 - 0x0000)
struct GuildChatListObject_BP_GetGuildChatType final
{
public:
	EGuildChatType                                ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildChatListObject_BP_GetGuildChatType) == 0x000001, "Wrong alignment on GuildChatListObject_BP_GetGuildChatType");
static_assert(sizeof(GuildChatListObject_BP_GetGuildChatType) == 0x000001, "Wrong size on GuildChatListObject_BP_GetGuildChatType");
static_assert(offsetof(GuildChatListObject_BP_GetGuildChatType, ReturnValue) == 0x000000, "Member 'GuildChatListObject_BP_GetGuildChatType::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildChatListObject.BP_GetIsSelf
// 0x0001 (0x0001 - 0x0000)
struct GuildChatListObject_BP_GetIsSelf final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildChatListObject_BP_GetIsSelf) == 0x000001, "Wrong alignment on GuildChatListObject_BP_GetIsSelf");
static_assert(sizeof(GuildChatListObject_BP_GetIsSelf) == 0x000001, "Wrong size on GuildChatListObject_BP_GetIsSelf");
static_assert(offsetof(GuildChatListObject_BP_GetIsSelf, ReturnValue) == 0x000000, "Member 'GuildChatListObject_BP_GetIsSelf::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildChatListObject.BP_GetItemText
// 0x0010 (0x0010 - 0x0000)
struct GuildChatListObject_BP_GetItemText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildChatListObject_BP_GetItemText) == 0x000008, "Wrong alignment on GuildChatListObject_BP_GetItemText");
static_assert(sizeof(GuildChatListObject_BP_GetItemText) == 0x000010, "Wrong size on GuildChatListObject_BP_GetItemText");
static_assert(offsetof(GuildChatListObject_BP_GetItemText, ReturnValue) == 0x000000, "Member 'GuildChatListObject_BP_GetItemText::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildCreateWidget.OnUpdateComplete
// 0x0004 (0x0004 - 0x0000)
struct GuildCreateWidget_OnUpdateComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildCreateWidget_OnUpdateComplete) == 0x000004, "Wrong alignment on GuildCreateWidget_OnUpdateComplete");
static_assert(sizeof(GuildCreateWidget_OnUpdateComplete) == 0x000004, "Wrong size on GuildCreateWidget_OnUpdateComplete");
static_assert(offsetof(GuildCreateWidget_OnUpdateComplete, RequestId) == 0x000000, "Member 'GuildCreateWidget_OnUpdateComplete::RequestId' has a wrong offset!");

// Function OutGameModule.GuildCreateWidget.RequestCreateGuild
// 0x0030 (0x0030 - 0x0000)
struct GuildCreateWidget_RequestCreateGuild final
{
public:
	class FString                                 GuildName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuildPolicy                                  GuildPolicy;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuildJoinRule                                GuildJoinRule;                                     // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GuildProfile;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildEmblemCode;                                   // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GuildCreateWidget_RequestCreateGuild) == 0x000008, "Wrong alignment on GuildCreateWidget_RequestCreateGuild");
static_assert(sizeof(GuildCreateWidget_RequestCreateGuild) == 0x000030, "Wrong size on GuildCreateWidget_RequestCreateGuild");
static_assert(offsetof(GuildCreateWidget_RequestCreateGuild, GuildName) == 0x000000, "Member 'GuildCreateWidget_RequestCreateGuild::GuildName' has a wrong offset!");
static_assert(offsetof(GuildCreateWidget_RequestCreateGuild, GuildPolicy) == 0x000010, "Member 'GuildCreateWidget_RequestCreateGuild::GuildPolicy' has a wrong offset!");
static_assert(offsetof(GuildCreateWidget_RequestCreateGuild, GuildJoinRule) == 0x000011, "Member 'GuildCreateWidget_RequestCreateGuild::GuildJoinRule' has a wrong offset!");
static_assert(offsetof(GuildCreateWidget_RequestCreateGuild, GuildProfile) == 0x000018, "Member 'GuildCreateWidget_RequestCreateGuild::GuildProfile' has a wrong offset!");
static_assert(offsetof(GuildCreateWidget_RequestCreateGuild, GuildEmblemCode) == 0x000028, "Member 'GuildCreateWidget_RequestCreateGuild::GuildEmblemCode' has a wrong offset!");

// Function OutGameModule.GuildEmblemIconImage.BP_SetItemId
// 0x0004 (0x0004 - 0x0000)
struct GuildEmblemIconImage_BP_SetItemId final
{
public:
	int32                                         ItemId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildEmblemIconImage_BP_SetItemId) == 0x000004, "Wrong alignment on GuildEmblemIconImage_BP_SetItemId");
static_assert(sizeof(GuildEmblemIconImage_BP_SetItemId) == 0x000004, "Wrong size on GuildEmblemIconImage_BP_SetItemId");
static_assert(offsetof(GuildEmblemIconImage_BP_SetItemId, ItemId) == 0x000000, "Member 'GuildEmblemIconImage_BP_SetItemId::ItemId' has a wrong offset!");

// Function OutGameModule.GuildEmblemIconImage.OnLoadedIconImage
// 0x0008 (0x0008 - 0x0000)
struct GuildEmblemIconImage_OnLoadedIconImage final
{
public:
	class UPaperSprite*                           Sprite;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildEmblemIconImage_OnLoadedIconImage) == 0x000008, "Wrong alignment on GuildEmblemIconImage_OnLoadedIconImage");
static_assert(sizeof(GuildEmblemIconImage_OnLoadedIconImage) == 0x000008, "Wrong size on GuildEmblemIconImage_OnLoadedIconImage");
static_assert(offsetof(GuildEmblemIconImage_OnLoadedIconImage, Sprite) == 0x000000, "Member 'GuildEmblemIconImage_OnLoadedIconImage::Sprite' has a wrong offset!");

// Function OutGameModule.GuildInviteWidget.GeneralPageCarouselNavigation
// 0x0001 (0x0001 - 0x0000)
struct GuildInviteWidget_GeneralPageCarouselNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildInviteWidget_GeneralPageCarouselNavigation) == 0x000001, "Wrong alignment on GuildInviteWidget_GeneralPageCarouselNavigation");
static_assert(sizeof(GuildInviteWidget_GeneralPageCarouselNavigation) == 0x000001, "Wrong size on GuildInviteWidget_GeneralPageCarouselNavigation");
static_assert(offsetof(GuildInviteWidget_GeneralPageCarouselNavigation, UiNavigation) == 0x000000, "Member 'GuildInviteWidget_GeneralPageCarouselNavigation::UiNavigation' has a wrong offset!");

// Function OutGameModule.GuildInviteWidget.GeneralPageCarouselNavigationRight
// 0x0001 (0x0001 - 0x0000)
struct GuildInviteWidget_GeneralPageCarouselNavigationRight final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildInviteWidget_GeneralPageCarouselNavigationRight) == 0x000001, "Wrong alignment on GuildInviteWidget_GeneralPageCarouselNavigationRight");
static_assert(sizeof(GuildInviteWidget_GeneralPageCarouselNavigationRight) == 0x000001, "Wrong size on GuildInviteWidget_GeneralPageCarouselNavigationRight");
static_assert(offsetof(GuildInviteWidget_GeneralPageCarouselNavigationRight, UiNavigation) == 0x000000, "Member 'GuildInviteWidget_GeneralPageCarouselNavigationRight::UiNavigation' has a wrong offset!");

// Function OutGameModule.GuildInviteWidget.OnChangedIndexEvent
// 0x0008 (0x0008 - 0x0000)
struct GuildInviteWidget_OnChangedIndexEvent final
{
public:
	int32                                         NewIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFocus;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GuildInviteWidget_OnChangedIndexEvent) == 0x000004, "Wrong alignment on GuildInviteWidget_OnChangedIndexEvent");
static_assert(sizeof(GuildInviteWidget_OnChangedIndexEvent) == 0x000008, "Wrong size on GuildInviteWidget_OnChangedIndexEvent");
static_assert(offsetof(GuildInviteWidget_OnChangedIndexEvent, NewIndex) == 0x000000, "Member 'GuildInviteWidget_OnChangedIndexEvent::NewIndex' has a wrong offset!");
static_assert(offsetof(GuildInviteWidget_OnChangedIndexEvent, IsFocus) == 0x000004, "Member 'GuildInviteWidget_OnChangedIndexEvent::IsFocus' has a wrong offset!");

// Function OutGameModule.GuildInviteWidget.OnUpdateComplete
// 0x0004 (0x0004 - 0x0000)
struct GuildInviteWidget_OnUpdateComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildInviteWidget_OnUpdateComplete) == 0x000004, "Wrong alignment on GuildInviteWidget_OnUpdateComplete");
static_assert(sizeof(GuildInviteWidget_OnUpdateComplete) == 0x000004, "Wrong size on GuildInviteWidget_OnUpdateComplete");
static_assert(offsetof(GuildInviteWidget_OnUpdateComplete, RequestId) == 0x000000, "Member 'GuildInviteWidget_OnUpdateComplete::RequestId' has a wrong offset!");

// Function OutGameModule.GuildInviteWidget.RequestFriendList
// 0x0001 (0x0001 - 0x0000)
struct GuildInviteWidget_RequestFriendList final
{
public:
	bool                                          bIgnoreFriendStatus;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildInviteWidget_RequestFriendList) == 0x000001, "Wrong alignment on GuildInviteWidget_RequestFriendList");
static_assert(sizeof(GuildInviteWidget_RequestFriendList) == 0x000001, "Wrong size on GuildInviteWidget_RequestFriendList");
static_assert(offsetof(GuildInviteWidget_RequestFriendList, bIgnoreFriendStatus) == 0x000000, "Member 'GuildInviteWidget_RequestFriendList::bIgnoreFriendStatus' has a wrong offset!");

// Function OutGameModule.GuildInviteWidget.RequestInviteGuild_PlayerId
// 0x0010 (0x0010 - 0x0000)
struct GuildInviteWidget_RequestInviteGuild_PlayerId final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildInviteWidget_RequestInviteGuild_PlayerId) == 0x000008, "Wrong alignment on GuildInviteWidget_RequestInviteGuild_PlayerId");
static_assert(sizeof(GuildInviteWidget_RequestInviteGuild_PlayerId) == 0x000010, "Wrong size on GuildInviteWidget_RequestInviteGuild_PlayerId");
static_assert(offsetof(GuildInviteWidget_RequestInviteGuild_PlayerId, PlayerId) == 0x000000, "Member 'GuildInviteWidget_RequestInviteGuild_PlayerId::PlayerId' has a wrong offset!");

// Function OutGameModule.GuildInviteWidget.UpdateTextCount
// 0x0008 (0x0008 - 0x0000)
struct GuildInviteWidget_UpdateTextCount final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Maxpage;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildInviteWidget_UpdateTextCount) == 0x000004, "Wrong alignment on GuildInviteWidget_UpdateTextCount");
static_assert(sizeof(GuildInviteWidget_UpdateTextCount) == 0x000008, "Wrong size on GuildInviteWidget_UpdateTextCount");
static_assert(offsetof(GuildInviteWidget_UpdateTextCount, Num) == 0x000000, "Member 'GuildInviteWidget_UpdateTextCount::Num' has a wrong offset!");
static_assert(offsetof(GuildInviteWidget_UpdateTextCount, Maxpage) == 0x000004, "Member 'GuildInviteWidget_UpdateTextCount::Maxpage' has a wrong offset!");

// Function OutGameModule.GuildMainWidget.OnEnableBoostButton
// 0x0002 (0x0002 - 0x0000)
struct GuildMainWidget_OnEnableBoostButton final
{
public:
	bool                                          bButtonEnable;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanUsePosition;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMainWidget_OnEnableBoostButton) == 0x000001, "Wrong alignment on GuildMainWidget_OnEnableBoostButton");
static_assert(sizeof(GuildMainWidget_OnEnableBoostButton) == 0x000002, "Wrong size on GuildMainWidget_OnEnableBoostButton");
static_assert(offsetof(GuildMainWidget_OnEnableBoostButton, bButtonEnable) == 0x000000, "Member 'GuildMainWidget_OnEnableBoostButton::bButtonEnable' has a wrong offset!");
static_assert(offsetof(GuildMainWidget_OnEnableBoostButton, bCanUsePosition) == 0x000001, "Member 'GuildMainWidget_OnEnableBoostButton::bCanUsePosition' has a wrong offset!");

// Function OutGameModule.GuildMainWidget.OnGuildLevel
// 0x0004 (0x0004 - 0x0000)
struct GuildMainWidget_OnGuildLevel final
{
public:
	int32                                         GuildLevel;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMainWidget_OnGuildLevel) == 0x000004, "Wrong alignment on GuildMainWidget_OnGuildLevel");
static_assert(sizeof(GuildMainWidget_OnGuildLevel) == 0x000004, "Wrong size on GuildMainWidget_OnGuildLevel");
static_assert(offsetof(GuildMainWidget_OnGuildLevel, GuildLevel) == 0x000000, "Member 'GuildMainWidget_OnGuildLevel::GuildLevel' has a wrong offset!");

// Function OutGameModule.GuildMainWidget.OnLoadComplete
// 0x0004 (0x0004 - 0x0000)
struct GuildMainWidget_OnLoadComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMainWidget_OnLoadComplete) == 0x000004, "Wrong alignment on GuildMainWidget_OnLoadComplete");
static_assert(sizeof(GuildMainWidget_OnLoadComplete) == 0x000004, "Wrong size on GuildMainWidget_OnLoadComplete");
static_assert(offsetof(GuildMainWidget_OnLoadComplete, RequestId) == 0x000000, "Member 'GuildMainWidget_OnLoadComplete::RequestId' has a wrong offset!");

// Function OutGameModule.GuildMainWidget.OnSetLeaderNameText
// 0x0018 (0x0018 - 0x0000)
struct GuildMainWidget_OnSetLeaderNameText final
{
public:
	class FText                                   LeaderNameText;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMainWidget_OnSetLeaderNameText) == 0x000008, "Wrong alignment on GuildMainWidget_OnSetLeaderNameText");
static_assert(sizeof(GuildMainWidget_OnSetLeaderNameText) == 0x000018, "Wrong size on GuildMainWidget_OnSetLeaderNameText");
static_assert(offsetof(GuildMainWidget_OnSetLeaderNameText, LeaderNameText) == 0x000000, "Member 'GuildMainWidget_OnSetLeaderNameText::LeaderNameText' has a wrong offset!");

// Function OutGameModule.GuildMainWidget.OnSetPolicyTextBlock
// 0x0018 (0x0018 - 0x0000)
struct GuildMainWidget_OnSetPolicyTextBlock final
{
public:
	class FText                                   PolicyText;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMainWidget_OnSetPolicyTextBlock) == 0x000008, "Wrong alignment on GuildMainWidget_OnSetPolicyTextBlock");
static_assert(sizeof(GuildMainWidget_OnSetPolicyTextBlock) == 0x000018, "Wrong size on GuildMainWidget_OnSetPolicyTextBlock");
static_assert(offsetof(GuildMainWidget_OnSetPolicyTextBlock, PolicyText) == 0x000000, "Member 'GuildMainWidget_OnSetPolicyTextBlock::PolicyText' has a wrong offset!");

// Function OutGameModule.GuildMainWidget.OnShowBoostTime
// 0x0001 (0x0001 - 0x0000)
struct GuildMainWidget_OnShowBoostTime final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMainWidget_OnShowBoostTime) == 0x000001, "Wrong alignment on GuildMainWidget_OnShowBoostTime");
static_assert(sizeof(GuildMainWidget_OnShowBoostTime) == 0x000001, "Wrong size on GuildMainWidget_OnShowBoostTime");
static_assert(offsetof(GuildMainWidget_OnShowBoostTime, bShow) == 0x000000, "Member 'GuildMainWidget_OnShowBoostTime::bShow' has a wrong offset!");

// Function OutGameModule.GuildMainWidget.OnShowLoading
// 0x0001 (0x0001 - 0x0000)
struct GuildMainWidget_OnShowLoading final
{
public:
	bool                                          bLoading;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMainWidget_OnShowLoading) == 0x000001, "Wrong alignment on GuildMainWidget_OnShowLoading");
static_assert(sizeof(GuildMainWidget_OnShowLoading) == 0x000001, "Wrong size on GuildMainWidget_OnShowLoading");
static_assert(offsetof(GuildMainWidget_OnShowLoading, bLoading) == 0x000000, "Member 'GuildMainWidget_OnShowLoading::bLoading' has a wrong offset!");

// Function OutGameModule.GuildMainWidget.OnShowNewNotice
// 0x0001 (0x0001 - 0x0000)
struct GuildMainWidget_OnShowNewNotice final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMainWidget_OnShowNewNotice) == 0x000001, "Wrong alignment on GuildMainWidget_OnShowNewNotice");
static_assert(sizeof(GuildMainWidget_OnShowNewNotice) == 0x000001, "Wrong size on GuildMainWidget_OnShowNewNotice");
static_assert(offsetof(GuildMainWidget_OnShowNewNotice, bShow) == 0x000000, "Member 'GuildMainWidget_OnShowNewNotice::bShow' has a wrong offset!");

// Function OutGameModule.GuildMainWidget.OnUpdateComplete
// 0x0004 (0x0004 - 0x0000)
struct GuildMainWidget_OnUpdateComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMainWidget_OnUpdateComplete) == 0x000004, "Wrong alignment on GuildMainWidget_OnUpdateComplete");
static_assert(sizeof(GuildMainWidget_OnUpdateComplete) == 0x000004, "Wrong size on GuildMainWidget_OnUpdateComplete");
static_assert(offsetof(GuildMainWidget_OnUpdateComplete, RequestId) == 0x000000, "Member 'GuildMainWidget_OnUpdateComplete::RequestId' has a wrong offset!");

// Function OutGameModule.GuildMainWidget.SetBgmControlValue
// 0x0004 (0x0004 - 0x0000)
struct GuildMainWidget_SetBgmControlValue final
{
public:
	float                                         ControlValue;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMainWidget_SetBgmControlValue) == 0x000004, "Wrong alignment on GuildMainWidget_SetBgmControlValue");
static_assert(sizeof(GuildMainWidget_SetBgmControlValue) == 0x000004, "Wrong size on GuildMainWidget_SetBgmControlValue");
static_assert(offsetof(GuildMainWidget_SetBgmControlValue, ControlValue) == 0x000000, "Member 'GuildMainWidget_SetBgmControlValue::ControlValue' has a wrong offset!");

// Function OutGameModule.GuildMemberItemWidget.OnSetShowLikeRemainsView
// 0x0001 (0x0001 - 0x0000)
struct GuildMemberItemWidget_OnSetShowLikeRemainsView final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMemberItemWidget_OnSetShowLikeRemainsView) == 0x000001, "Wrong alignment on GuildMemberItemWidget_OnSetShowLikeRemainsView");
static_assert(sizeof(GuildMemberItemWidget_OnSetShowLikeRemainsView) == 0x000001, "Wrong size on GuildMemberItemWidget_OnSetShowLikeRemainsView");
static_assert(offsetof(GuildMemberItemWidget_OnSetShowLikeRemainsView, bShow) == 0x000000, "Member 'GuildMemberItemWidget_OnSetShowLikeRemainsView::bShow' has a wrong offset!");

// Function OutGameModule.GuildMemberItemWidget.OnSetShowLoginView
// 0x0001 (0x0001 - 0x0000)
struct GuildMemberItemWidget_OnSetShowLoginView final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMemberItemWidget_OnSetShowLoginView) == 0x000001, "Wrong alignment on GuildMemberItemWidget_OnSetShowLoginView");
static_assert(sizeof(GuildMemberItemWidget_OnSetShowLoginView) == 0x000001, "Wrong size on GuildMemberItemWidget_OnSetShowLoginView");
static_assert(offsetof(GuildMemberItemWidget_OnSetShowLoginView, bShow) == 0x000000, "Member 'GuildMemberItemWidget_OnSetShowLoginView::bShow' has a wrong offset!");

// Function OutGameModule.GuildMemberItemWidget.CanAddLike
// 0x0001 (0x0001 - 0x0000)
struct GuildMemberItemWidget_CanAddLike final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMemberItemWidget_CanAddLike) == 0x000001, "Wrong alignment on GuildMemberItemWidget_CanAddLike");
static_assert(sizeof(GuildMemberItemWidget_CanAddLike) == 0x000001, "Wrong size on GuildMemberItemWidget_CanAddLike");
static_assert(offsetof(GuildMemberItemWidget_CanAddLike, ReturnValue) == 0x000000, "Member 'GuildMemberItemWidget_CanAddLike::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildMemberItemWidget.GetLeaderFlg
// 0x0001 (0x0001 - 0x0000)
struct GuildMemberItemWidget_GetLeaderFlg final
{
public:
	EGuildPosition                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMemberItemWidget_GetLeaderFlg) == 0x000001, "Wrong alignment on GuildMemberItemWidget_GetLeaderFlg");
static_assert(sizeof(GuildMemberItemWidget_GetLeaderFlg) == 0x000001, "Wrong size on GuildMemberItemWidget_GetLeaderFlg");
static_assert(offsetof(GuildMemberItemWidget_GetLeaderFlg, ReturnValue) == 0x000000, "Member 'GuildMemberItemWidget_GetLeaderFlg::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildMemberItemWidget.GetMyself
// 0x0001 (0x0001 - 0x0000)
struct GuildMemberItemWidget_GetMyself final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMemberItemWidget_GetMyself) == 0x000001, "Wrong alignment on GuildMemberItemWidget_GetMyself");
static_assert(sizeof(GuildMemberItemWidget_GetMyself) == 0x000001, "Wrong size on GuildMemberItemWidget_GetMyself");
static_assert(offsetof(GuildMemberItemWidget_GetMyself, ReturnValue) == 0x000000, "Member 'GuildMemberItemWidget_GetMyself::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildMemberItemWidget.GetUserId
// 0x0010 (0x0010 - 0x0000)
struct GuildMemberItemWidget_GetUserId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMemberItemWidget_GetUserId) == 0x000008, "Wrong alignment on GuildMemberItemWidget_GetUserId");
static_assert(sizeof(GuildMemberItemWidget_GetUserId) == 0x000010, "Wrong size on GuildMemberItemWidget_GetUserId");
static_assert(offsetof(GuildMemberItemWidget_GetUserId, ReturnValue) == 0x000000, "Member 'GuildMemberItemWidget_GetUserId::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildMemberItemWidget.GetUserName
// 0x0010 (0x0010 - 0x0000)
struct GuildMemberItemWidget_GetUserName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMemberItemWidget_GetUserName) == 0x000008, "Wrong alignment on GuildMemberItemWidget_GetUserName");
static_assert(sizeof(GuildMemberItemWidget_GetUserName) == 0x000010, "Wrong size on GuildMemberItemWidget_GetUserName");
static_assert(offsetof(GuildMemberItemWidget_GetUserName, ReturnValue) == 0x000000, "Member 'GuildMemberItemWidget_GetUserName::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildMenuWindow.OnEnableApplicantButton
// 0x0001 (0x0001 - 0x0000)
struct GuildMenuWindow_OnEnableApplicantButton final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMenuWindow_OnEnableApplicantButton) == 0x000001, "Wrong alignment on GuildMenuWindow_OnEnableApplicantButton");
static_assert(sizeof(GuildMenuWindow_OnEnableApplicantButton) == 0x000001, "Wrong size on GuildMenuWindow_OnEnableApplicantButton");
static_assert(offsetof(GuildMenuWindow_OnEnableApplicantButton, bEnable) == 0x000000, "Member 'GuildMenuWindow_OnEnableApplicantButton::bEnable' has a wrong offset!");

// Function OutGameModule.GuildMenuWindow.OnEnableChangeButton
// 0x0001 (0x0001 - 0x0000)
struct GuildMenuWindow_OnEnableChangeButton final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMenuWindow_OnEnableChangeButton) == 0x000001, "Wrong alignment on GuildMenuWindow_OnEnableChangeButton");
static_assert(sizeof(GuildMenuWindow_OnEnableChangeButton) == 0x000001, "Wrong size on GuildMenuWindow_OnEnableChangeButton");
static_assert(offsetof(GuildMenuWindow_OnEnableChangeButton, bEnable) == 0x000000, "Member 'GuildMenuWindow_OnEnableChangeButton::bEnable' has a wrong offset!");

// Function OutGameModule.GuildMenuWindow.OnShowNewNotice
// 0x0001 (0x0001 - 0x0000)
struct GuildMenuWindow_OnShowNewNotice final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMenuWindow_OnShowNewNotice) == 0x000001, "Wrong alignment on GuildMenuWindow_OnShowNewNotice");
static_assert(sizeof(GuildMenuWindow_OnShowNewNotice) == 0x000001, "Wrong size on GuildMenuWindow_OnShowNewNotice");
static_assert(offsetof(GuildMenuWindow_OnShowNewNotice, bShow) == 0x000000, "Member 'GuildMenuWindow_OnShowNewNotice::bShow' has a wrong offset!");

// Function OutGameModule.GuildMenuWindow.SetButtonArray
// 0x0010 (0x0010 - 0x0000)
struct GuildMenuWindow_SetButtonArray final
{
public:
	TArray<class UWidgetBase*>                    buttonArray;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildMenuWindow_SetButtonArray) == 0x000008, "Wrong alignment on GuildMenuWindow_SetButtonArray");
static_assert(sizeof(GuildMenuWindow_SetButtonArray) == 0x000010, "Wrong size on GuildMenuWindow_SetButtonArray");
static_assert(offsetof(GuildMenuWindow_SetButtonArray, buttonArray) == 0x000000, "Member 'GuildMenuWindow_SetButtonArray::buttonArray' has a wrong offset!");

// Function OutGameModule.GuildSearchWidget.OnButtonOpenGuildDetail
// 0x0010 (0x0010 - 0x0000)
struct GuildSearchWidget_OnButtonOpenGuildDetail final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GuildSearchWidget_OnButtonOpenGuildDetail) == 0x000008, "Wrong alignment on GuildSearchWidget_OnButtonOpenGuildDetail");
static_assert(sizeof(GuildSearchWidget_OnButtonOpenGuildDetail) == 0x000010, "Wrong size on GuildSearchWidget_OnButtonOpenGuildDetail");
static_assert(offsetof(GuildSearchWidget_OnButtonOpenGuildDetail, Button) == 0x000000, "Member 'GuildSearchWidget_OnButtonOpenGuildDetail::Button' has a wrong offset!");
static_assert(offsetof(GuildSearchWidget_OnButtonOpenGuildDetail, InputType) == 0x000008, "Member 'GuildSearchWidget_OnButtonOpenGuildDetail::InputType' has a wrong offset!");

// Function OutGameModule.GuildSearchWidget.OnLoadComplete
// 0x0004 (0x0004 - 0x0000)
struct GuildSearchWidget_OnLoadComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildSearchWidget_OnLoadComplete) == 0x000004, "Wrong alignment on GuildSearchWidget_OnLoadComplete");
static_assert(sizeof(GuildSearchWidget_OnLoadComplete) == 0x000004, "Wrong size on GuildSearchWidget_OnLoadComplete");
static_assert(offsetof(GuildSearchWidget_OnLoadComplete, RequestId) == 0x000000, "Member 'GuildSearchWidget_OnLoadComplete::RequestId' has a wrong offset!");

// Function OutGameModule.GuildSearchWidget.SetSearchCondition
// 0x0030 (0x0030 - 0x0000)
struct GuildSearchWidget_SetSearchCondition final
{
public:
	struct FDbGuildSearchCondition                DbGuildSearchCondition;                            // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildSearchWidget_SetSearchCondition) == 0x000008, "Wrong alignment on GuildSearchWidget_SetSearchCondition");
static_assert(sizeof(GuildSearchWidget_SetSearchCondition) == 0x000030, "Wrong size on GuildSearchWidget_SetSearchCondition");
static_assert(offsetof(GuildSearchWidget_SetSearchCondition, DbGuildSearchCondition) == 0x000000, "Member 'GuildSearchWidget_SetSearchCondition::DbGuildSearchCondition' has a wrong offset!");

// Function OutGameModule.GuildSearchWidget.IsFilter
// 0x0001 (0x0001 - 0x0000)
struct GuildSearchWidget_IsFilter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildSearchWidget_IsFilter) == 0x000001, "Wrong alignment on GuildSearchWidget_IsFilter");
static_assert(sizeof(GuildSearchWidget_IsFilter) == 0x000001, "Wrong size on GuildSearchWidget_IsFilter");
static_assert(offsetof(GuildSearchWidget_IsFilter, ReturnValue) == 0x000000, "Member 'GuildSearchWidget_IsFilter::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildTopWidget.BP_CheckParentControl
// 0x0001 (0x0001 - 0x0000)
struct GuildTopWidget_BP_CheckParentControl final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildTopWidget_BP_CheckParentControl) == 0x000001, "Wrong alignment on GuildTopWidget_BP_CheckParentControl");
static_assert(sizeof(GuildTopWidget_BP_CheckParentControl) == 0x000001, "Wrong size on GuildTopWidget_BP_CheckParentControl");
static_assert(offsetof(GuildTopWidget_BP_CheckParentControl, ReturnValue) == 0x000000, "Member 'GuildTopWidget_BP_CheckParentControl::ReturnValue' has a wrong offset!");

// Function OutGameModule.GuildTopWidget.SetGuildPageWidget
// 0x0020 (0x0020 - 0x0000)
struct GuildTopWidget_SetGuildPageWidget final
{
public:
	TArray<class UGuildPageWidgetBase*>           CreateGuildPageWidgetArray;                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UGuildPageWidgetBase*>           JoinGuildPageWidgetArray;                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildTopWidget_SetGuildPageWidget) == 0x000008, "Wrong alignment on GuildTopWidget_SetGuildPageWidget");
static_assert(sizeof(GuildTopWidget_SetGuildPageWidget) == 0x000020, "Wrong size on GuildTopWidget_SetGuildPageWidget");
static_assert(offsetof(GuildTopWidget_SetGuildPageWidget, CreateGuildPageWidgetArray) == 0x000000, "Member 'GuildTopWidget_SetGuildPageWidget::CreateGuildPageWidgetArray' has a wrong offset!");
static_assert(offsetof(GuildTopWidget_SetGuildPageWidget, JoinGuildPageWidgetArray) == 0x000010, "Member 'GuildTopWidget_SetGuildPageWidget::JoinGuildPageWidgetArray' has a wrong offset!");

// Function OutGameModule.GuildTopWidget.SetJoinGuildView
// 0x0001 (0x0001 - 0x0000)
struct GuildTopWidget_SetJoinGuildView final
{
public:
	bool                                          bJoin;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuildTopWidget_SetJoinGuildView) == 0x000001, "Wrong alignment on GuildTopWidget_SetJoinGuildView");
static_assert(sizeof(GuildTopWidget_SetJoinGuildView) == 0x000001, "Wrong size on GuildTopWidget_SetJoinGuildView");
static_assert(offsetof(GuildTopWidget_SetJoinGuildView, bJoin) == 0x000000, "Member 'GuildTopWidget_SetJoinGuildView::bJoin' has a wrong offset!");

// Function OutGameModule.ItemGetListWidget.Do2LineLeftWidgetNavigation
// 0x0010 (0x0010 - 0x0000)
struct ItemGetListWidget_Do2LineLeftWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemGetListWidget_Do2LineLeftWidgetNavigation) == 0x000008, "Wrong alignment on ItemGetListWidget_Do2LineLeftWidgetNavigation");
static_assert(sizeof(ItemGetListWidget_Do2LineLeftWidgetNavigation) == 0x000010, "Wrong size on ItemGetListWidget_Do2LineLeftWidgetNavigation");
static_assert(offsetof(ItemGetListWidget_Do2LineLeftWidgetNavigation, UiNavigation) == 0x000000, "Member 'ItemGetListWidget_Do2LineLeftWidgetNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(ItemGetListWidget_Do2LineLeftWidgetNavigation, ReturnValue) == 0x000008, "Member 'ItemGetListWidget_Do2LineLeftWidgetNavigation::ReturnValue' has a wrong offset!");

// Function OutGameModule.ItemGetListWidget.Do2LineRightWidgetNavigation
// 0x0010 (0x0010 - 0x0000)
struct ItemGetListWidget_Do2LineRightWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemGetListWidget_Do2LineRightWidgetNavigation) == 0x000008, "Wrong alignment on ItemGetListWidget_Do2LineRightWidgetNavigation");
static_assert(sizeof(ItemGetListWidget_Do2LineRightWidgetNavigation) == 0x000010, "Wrong size on ItemGetListWidget_Do2LineRightWidgetNavigation");
static_assert(offsetof(ItemGetListWidget_Do2LineRightWidgetNavigation, UiNavigation) == 0x000000, "Member 'ItemGetListWidget_Do2LineRightWidgetNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(ItemGetListWidget_Do2LineRightWidgetNavigation, ReturnValue) == 0x000008, "Member 'ItemGetListWidget_Do2LineRightWidgetNavigation::ReturnValue' has a wrong offset!");

// Function OutGameModule.ItemGetListWidget.Do3LineCenterWidgetNavigation
// 0x0010 (0x0010 - 0x0000)
struct ItemGetListWidget_Do3LineCenterWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemGetListWidget_Do3LineCenterWidgetNavigation) == 0x000008, "Wrong alignment on ItemGetListWidget_Do3LineCenterWidgetNavigation");
static_assert(sizeof(ItemGetListWidget_Do3LineCenterWidgetNavigation) == 0x000010, "Wrong size on ItemGetListWidget_Do3LineCenterWidgetNavigation");
static_assert(offsetof(ItemGetListWidget_Do3LineCenterWidgetNavigation, UiNavigation) == 0x000000, "Member 'ItemGetListWidget_Do3LineCenterWidgetNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(ItemGetListWidget_Do3LineCenterWidgetNavigation, ReturnValue) == 0x000008, "Member 'ItemGetListWidget_Do3LineCenterWidgetNavigation::ReturnValue' has a wrong offset!");

// Function OutGameModule.ItemGetListWidget.Do3LineLeftWidgetNavigation
// 0x0010 (0x0010 - 0x0000)
struct ItemGetListWidget_Do3LineLeftWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemGetListWidget_Do3LineLeftWidgetNavigation) == 0x000008, "Wrong alignment on ItemGetListWidget_Do3LineLeftWidgetNavigation");
static_assert(sizeof(ItemGetListWidget_Do3LineLeftWidgetNavigation) == 0x000010, "Wrong size on ItemGetListWidget_Do3LineLeftWidgetNavigation");
static_assert(offsetof(ItemGetListWidget_Do3LineLeftWidgetNavigation, UiNavigation) == 0x000000, "Member 'ItemGetListWidget_Do3LineLeftWidgetNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(ItemGetListWidget_Do3LineLeftWidgetNavigation, ReturnValue) == 0x000008, "Member 'ItemGetListWidget_Do3LineLeftWidgetNavigation::ReturnValue' has a wrong offset!");

// Function OutGameModule.ItemGetListWidget.Do3LineRightWidgetNavigation
// 0x0010 (0x0010 - 0x0000)
struct ItemGetListWidget_Do3LineRightWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemGetListWidget_Do3LineRightWidgetNavigation) == 0x000008, "Wrong alignment on ItemGetListWidget_Do3LineRightWidgetNavigation");
static_assert(sizeof(ItemGetListWidget_Do3LineRightWidgetNavigation) == 0x000010, "Wrong size on ItemGetListWidget_Do3LineRightWidgetNavigation");
static_assert(offsetof(ItemGetListWidget_Do3LineRightWidgetNavigation, UiNavigation) == 0x000000, "Member 'ItemGetListWidget_Do3LineRightWidgetNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(ItemGetListWidget_Do3LineRightWidgetNavigation, ReturnValue) == 0x000008, "Member 'ItemGetListWidget_Do3LineRightWidgetNavigation::ReturnValue' has a wrong offset!");

// Function OutGameModule.ItemGetListWidget.DoNextButtonWidgetNavigation
// 0x0010 (0x0010 - 0x0000)
struct ItemGetListWidget_DoNextButtonWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemGetListWidget_DoNextButtonWidgetNavigation) == 0x000008, "Wrong alignment on ItemGetListWidget_DoNextButtonWidgetNavigation");
static_assert(sizeof(ItemGetListWidget_DoNextButtonWidgetNavigation) == 0x000010, "Wrong size on ItemGetListWidget_DoNextButtonWidgetNavigation");
static_assert(offsetof(ItemGetListWidget_DoNextButtonWidgetNavigation, UiNavigation) == 0x000000, "Member 'ItemGetListWidget_DoNextButtonWidgetNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(ItemGetListWidget_DoNextButtonWidgetNavigation, ReturnValue) == 0x000008, "Member 'ItemGetListWidget_DoNextButtonWidgetNavigation::ReturnValue' has a wrong offset!");

// Function OutGameModule.ItemIconImage.OnLoadedIconImage
// 0x0008 (0x0008 - 0x0000)
struct ItemIconImage_OnLoadedIconImage final
{
public:
	class UPaperSprite*                           Sprite;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemIconImage_OnLoadedIconImage) == 0x000008, "Wrong alignment on ItemIconImage_OnLoadedIconImage");
static_assert(sizeof(ItemIconImage_OnLoadedIconImage) == 0x000008, "Wrong size on ItemIconImage_OnLoadedIconImage");
static_assert(offsetof(ItemIconImage_OnLoadedIconImage, Sprite) == 0x000000, "Member 'ItemIconImage_OnLoadedIconImage::Sprite' has a wrong offset!");

// Function OutGameModule.ItemListObject.BP_GetItemId
// 0x0004 (0x0004 - 0x0000)
struct ItemListObject_BP_GetItemId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemListObject_BP_GetItemId) == 0x000004, "Wrong alignment on ItemListObject_BP_GetItemId");
static_assert(sizeof(ItemListObject_BP_GetItemId) == 0x000004, "Wrong size on ItemListObject_BP_GetItemId");
static_assert(offsetof(ItemListObject_BP_GetItemId, ReturnValue) == 0x000000, "Member 'ItemListObject_BP_GetItemId::ReturnValue' has a wrong offset!");

// Function OutGameModule.ItemListAppWidget.BP_HasItems
// 0x0001 (0x0001 - 0x0000)
struct ItemListAppWidget_BP_HasItems final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemListAppWidget_BP_HasItems) == 0x000001, "Wrong alignment on ItemListAppWidget_BP_HasItems");
static_assert(sizeof(ItemListAppWidget_BP_HasItems) == 0x000001, "Wrong size on ItemListAppWidget_BP_HasItems");
static_assert(offsetof(ItemListAppWidget_BP_HasItems, ReturnValue) == 0x000000, "Member 'ItemListAppWidget_BP_HasItems::ReturnValue' has a wrong offset!");

// Function OutGameModule.ItemListAppWidget.DoCustomListOpenButtonNavigation
// 0x0010 (0x0010 - 0x0000)
struct ItemListAppWidget_DoCustomListOpenButtonNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemListAppWidget_DoCustomListOpenButtonNavigation) == 0x000008, "Wrong alignment on ItemListAppWidget_DoCustomListOpenButtonNavigation");
static_assert(sizeof(ItemListAppWidget_DoCustomListOpenButtonNavigation) == 0x000010, "Wrong size on ItemListAppWidget_DoCustomListOpenButtonNavigation");
static_assert(offsetof(ItemListAppWidget_DoCustomListOpenButtonNavigation, UiNavigation) == 0x000000, "Member 'ItemListAppWidget_DoCustomListOpenButtonNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(ItemListAppWidget_DoCustomListOpenButtonNavigation, ReturnValue) == 0x000008, "Member 'ItemListAppWidget_DoCustomListOpenButtonNavigation::ReturnValue' has a wrong offset!");

// Function OutGameModule.ItemListAppWidget.OnAddedToFocusButtonWidget
// 0x0010 (0x0010 - 0x0000)
struct ItemListAppWidget_OnAddedToFocusButtonWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemListAppWidget_OnAddedToFocusButtonWidget) == 0x000008, "Wrong alignment on ItemListAppWidget_OnAddedToFocusButtonWidget");
static_assert(sizeof(ItemListAppWidget_OnAddedToFocusButtonWidget) == 0x000010, "Wrong size on ItemListAppWidget_OnAddedToFocusButtonWidget");
static_assert(offsetof(ItemListAppWidget_OnAddedToFocusButtonWidget, Button) == 0x000000, "Member 'ItemListAppWidget_OnAddedToFocusButtonWidget::Button' has a wrong offset!");
static_assert(offsetof(ItemListAppWidget_OnAddedToFocusButtonWidget, InputType) == 0x000008, "Member 'ItemListAppWidget_OnAddedToFocusButtonWidget::InputType' has a wrong offset!");

// Function OutGameModule.ItemListAppWidget.OnDecideButtonWidget
// 0x0010 (0x0010 - 0x0000)
struct ItemListAppWidget_OnDecideButtonWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemListAppWidget_OnDecideButtonWidget) == 0x000008, "Wrong alignment on ItemListAppWidget_OnDecideButtonWidget");
static_assert(sizeof(ItemListAppWidget_OnDecideButtonWidget) == 0x000010, "Wrong size on ItemListAppWidget_OnDecideButtonWidget");
static_assert(offsetof(ItemListAppWidget_OnDecideButtonWidget, Button) == 0x000000, "Member 'ItemListAppWidget_OnDecideButtonWidget::Button' has a wrong offset!");
static_assert(offsetof(ItemListAppWidget_OnDecideButtonWidget, InputType) == 0x000008, "Member 'ItemListAppWidget_OnDecideButtonWidget::InputType' has a wrong offset!");

// Function OutGameModule.ItemListAppWidget.OnFinishFetchDataEvent
// 0x0004 (0x0004 - 0x0000)
struct ItemListAppWidget_OnFinishFetchDataEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemListAppWidget_OnFinishFetchDataEvent) == 0x000004, "Wrong alignment on ItemListAppWidget_OnFinishFetchDataEvent");
static_assert(sizeof(ItemListAppWidget_OnFinishFetchDataEvent) == 0x000004, "Wrong size on ItemListAppWidget_OnFinishFetchDataEvent");
static_assert(offsetof(ItemListAppWidget_OnFinishFetchDataEvent, RequestId) == 0x000000, "Member 'ItemListAppWidget_OnFinishFetchDataEvent::RequestId' has a wrong offset!");

// Function OutGameModule.KeyConfigSettingWidget.BP_GetCommandList
// 0x0018 (0x0018 - 0x0000)
struct KeyConfigSettingWidget_BP_GetCommandList final
{
public:
	EKeyConfigCommandListType                     KeyType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EKeyConfigurableCommand>               ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeyConfigSettingWidget_BP_GetCommandList) == 0x000008, "Wrong alignment on KeyConfigSettingWidget_BP_GetCommandList");
static_assert(sizeof(KeyConfigSettingWidget_BP_GetCommandList) == 0x000018, "Wrong size on KeyConfigSettingWidget_BP_GetCommandList");
static_assert(offsetof(KeyConfigSettingWidget_BP_GetCommandList, KeyType) == 0x000000, "Member 'KeyConfigSettingWidget_BP_GetCommandList::KeyType' has a wrong offset!");
static_assert(offsetof(KeyConfigSettingWidget_BP_GetCommandList, ReturnValue) == 0x000008, "Member 'KeyConfigSettingWidget_BP_GetCommandList::ReturnValue' has a wrong offset!");

// Function OutGameModule.LoginBonusBuyWindowWidget.BP_GetNeedCoinNum
// 0x0004 (0x0004 - 0x0000)
struct LoginBonusBuyWindowWidget_BP_GetNeedCoinNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginBonusBuyWindowWidget_BP_GetNeedCoinNum) == 0x000004, "Wrong alignment on LoginBonusBuyWindowWidget_BP_GetNeedCoinNum");
static_assert(sizeof(LoginBonusBuyWindowWidget_BP_GetNeedCoinNum) == 0x000004, "Wrong size on LoginBonusBuyWindowWidget_BP_GetNeedCoinNum");
static_assert(offsetof(LoginBonusBuyWindowWidget_BP_GetNeedCoinNum, ReturnValue) == 0x000000, "Member 'LoginBonusBuyWindowWidget_BP_GetNeedCoinNum::ReturnValue' has a wrong offset!");

// Function OutGameModule.LoginBonusBuyWindowWidget.BP_GetNeedCoinType
// 0x0001 (0x0001 - 0x0000)
struct LoginBonusBuyWindowWidget_BP_GetNeedCoinType final
{
public:
	ECurrencyType                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginBonusBuyWindowWidget_BP_GetNeedCoinType) == 0x000001, "Wrong alignment on LoginBonusBuyWindowWidget_BP_GetNeedCoinType");
static_assert(sizeof(LoginBonusBuyWindowWidget_BP_GetNeedCoinType) == 0x000001, "Wrong size on LoginBonusBuyWindowWidget_BP_GetNeedCoinType");
static_assert(offsetof(LoginBonusBuyWindowWidget_BP_GetNeedCoinType, ReturnValue) == 0x000000, "Member 'LoginBonusBuyWindowWidget_BP_GetNeedCoinType::ReturnValue' has a wrong offset!");

// Function OutGameModule.LoginBonusBuyWindowWidget.OnLoadCompleteEvent
// 0x0004 (0x0004 - 0x0000)
struct LoginBonusBuyWindowWidget_OnLoadCompleteEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginBonusBuyWindowWidget_OnLoadCompleteEvent) == 0x000004, "Wrong alignment on LoginBonusBuyWindowWidget_OnLoadCompleteEvent");
static_assert(sizeof(LoginBonusBuyWindowWidget_OnLoadCompleteEvent) == 0x000004, "Wrong size on LoginBonusBuyWindowWidget_OnLoadCompleteEvent");
static_assert(offsetof(LoginBonusBuyWindowWidget_OnLoadCompleteEvent, RequestId) == 0x000000, "Member 'LoginBonusBuyWindowWidget_OnLoadCompleteEvent::RequestId' has a wrong offset!");

// Function OutGameModule.LoginBonusDailyWidget.BP_IsBuyNowPremium
// 0x0001 (0x0001 - 0x0000)
struct LoginBonusDailyWidget_BP_IsBuyNowPremium final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoginBonusDailyWidget_BP_IsBuyNowPremium) == 0x000001, "Wrong alignment on LoginBonusDailyWidget_BP_IsBuyNowPremium");
static_assert(sizeof(LoginBonusDailyWidget_BP_IsBuyNowPremium) == 0x000001, "Wrong size on LoginBonusDailyWidget_BP_IsBuyNowPremium");
static_assert(offsetof(LoginBonusDailyWidget_BP_IsBuyNowPremium, ReturnValue) == 0x000000, "Member 'LoginBonusDailyWidget_BP_IsBuyNowPremium::ReturnValue' has a wrong offset!");

// Function OutGameModule.MainMenuBarListEntryWidget.IsHoverChanged
// 0x0002 (0x0002 - 0x0000)
struct MainMenuBarListEntryWidget_IsHoverChanged final
{
public:
	bool                                          Select;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Hovered;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuBarListEntryWidget_IsHoverChanged) == 0x000001, "Wrong alignment on MainMenuBarListEntryWidget_IsHoverChanged");
static_assert(sizeof(MainMenuBarListEntryWidget_IsHoverChanged) == 0x000002, "Wrong size on MainMenuBarListEntryWidget_IsHoverChanged");
static_assert(offsetof(MainMenuBarListEntryWidget_IsHoverChanged, Select) == 0x000000, "Member 'MainMenuBarListEntryWidget_IsHoverChanged::Select' has a wrong offset!");
static_assert(offsetof(MainMenuBarListEntryWidget_IsHoverChanged, Hovered) == 0x000001, "Member 'MainMenuBarListEntryWidget_IsHoverChanged::Hovered' has a wrong offset!");

// Function OutGameModule.MainMenuBarListEntryWidget.OnChangeBattleSequence
// 0x0001 (0x0001 - 0x0000)
struct MainMenuBarListEntryWidget_OnChangeBattleSequence final
{
public:
	EBattleStartSequenceType                      Sequence;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuBarListEntryWidget_OnChangeBattleSequence) == 0x000001, "Wrong alignment on MainMenuBarListEntryWidget_OnChangeBattleSequence");
static_assert(sizeof(MainMenuBarListEntryWidget_OnChangeBattleSequence) == 0x000001, "Wrong size on MainMenuBarListEntryWidget_OnChangeBattleSequence");
static_assert(offsetof(MainMenuBarListEntryWidget_OnChangeBattleSequence, Sequence) == 0x000000, "Member 'MainMenuBarListEntryWidget_OnChangeBattleSequence::Sequence' has a wrong offset!");

// Function OutGameModule.MainMenuBarListEntryWidget.SetMainMenuBarEnable
// 0x0001 (0x0001 - 0x0000)
struct MainMenuBarListEntryWidget_SetMainMenuBarEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuBarListEntryWidget_SetMainMenuBarEnable) == 0x000001, "Wrong alignment on MainMenuBarListEntryWidget_SetMainMenuBarEnable");
static_assert(sizeof(MainMenuBarListEntryWidget_SetMainMenuBarEnable) == 0x000001, "Wrong size on MainMenuBarListEntryWidget_SetMainMenuBarEnable");
static_assert(offsetof(MainMenuBarListEntryWidget_SetMainMenuBarEnable, bEnable) == 0x000000, "Member 'MainMenuBarListEntryWidget_SetMainMenuBarEnable::bEnable' has a wrong offset!");

// Function OutGameModule.MainMenuInterface.GetBarTileWidget
// 0x0008 (0x0008 - 0x0000)
struct MainMenuInterface_GetBarTileWidget final
{
public:
	class UTileView*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuInterface_GetBarTileWidget) == 0x000008, "Wrong alignment on MainMenuInterface_GetBarTileWidget");
static_assert(sizeof(MainMenuInterface_GetBarTileWidget) == 0x000008, "Wrong size on MainMenuInterface_GetBarTileWidget");
static_assert(offsetof(MainMenuInterface_GetBarTileWidget, ReturnValue) == 0x000000, "Member 'MainMenuInterface_GetBarTileWidget::ReturnValue' has a wrong offset!");

// Function OutGameModule.TitleMenuWidget.OnDecideWindow
// 0x0010 (0x0010 - 0x0000)
struct TitleMenuWidget_OnDecideWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TitleMenuWidget_OnDecideWindow) == 0x000008, "Wrong alignment on TitleMenuWidget_OnDecideWindow");
static_assert(sizeof(TitleMenuWidget_OnDecideWindow) == 0x000010, "Wrong size on TitleMenuWidget_OnDecideWindow");
static_assert(offsetof(TitleMenuWidget_OnDecideWindow, Widget) == 0x000000, "Member 'TitleMenuWidget_OnDecideWindow::Widget' has a wrong offset!");
static_assert(offsetof(TitleMenuWidget_OnDecideWindow, InputType) == 0x000008, "Member 'TitleMenuWidget_OnDecideWindow::InputType' has a wrong offset!");
static_assert(offsetof(TitleMenuWidget_OnDecideWindow, LeftButton) == 0x000009, "Member 'TitleMenuWidget_OnDecideWindow::LeftButton' has a wrong offset!");

// Function OutGameModule.TitleMenuWidget.OnLoadCompletedCheckBnIdStatus
// 0x0004 (0x0004 - 0x0000)
struct TitleMenuWidget_OnLoadCompletedCheckBnIdStatus final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TitleMenuWidget_OnLoadCompletedCheckBnIdStatus) == 0x000004, "Wrong alignment on TitleMenuWidget_OnLoadCompletedCheckBnIdStatus");
static_assert(sizeof(TitleMenuWidget_OnLoadCompletedCheckBnIdStatus) == 0x000004, "Wrong size on TitleMenuWidget_OnLoadCompletedCheckBnIdStatus");
static_assert(offsetof(TitleMenuWidget_OnLoadCompletedCheckBnIdStatus, RequestId) == 0x000000, "Member 'TitleMenuWidget_OnLoadCompletedCheckBnIdStatus::RequestId' has a wrong offset!");

// Function OutGameModule.MainMenuWidget.BP_SetStageCamera
// 0x0008 (0x0008 - 0x0000)
struct MainMenuWidget_BP_SetStageCamera final
{
public:
	int32                                         CharacterNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuWidget_BP_SetStageCamera) == 0x000004, "Wrong alignment on MainMenuWidget_BP_SetStageCamera");
static_assert(sizeof(MainMenuWidget_BP_SetStageCamera) == 0x000008, "Wrong size on MainMenuWidget_BP_SetStageCamera");
static_assert(offsetof(MainMenuWidget_BP_SetStageCamera, CharacterNum) == 0x000000, "Member 'MainMenuWidget_BP_SetStageCamera::CharacterNum' has a wrong offset!");
static_assert(offsetof(MainMenuWidget_BP_SetStageCamera, Time) == 0x000004, "Member 'MainMenuWidget_BP_SetStageCamera::Time' has a wrong offset!");

// Function OutGameModule.MainMenuWidget.CallDebugSquadCountUp
// 0x0008 (0x0008 - 0x0000)
struct MainMenuWidget_CallDebugSquadCountUp final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuWidget_CallDebugSquadCountUp) == 0x000004, "Wrong alignment on MainMenuWidget_CallDebugSquadCountUp");
static_assert(sizeof(MainMenuWidget_CallDebugSquadCountUp) == 0x000008, "Wrong size on MainMenuWidget_CallDebugSquadCountUp");
static_assert(offsetof(MainMenuWidget_CallDebugSquadCountUp, CharacterId) == 0x000000, "Member 'MainMenuWidget_CallDebugSquadCountUp::CharacterId' has a wrong offset!");
static_assert(offsetof(MainMenuWidget_CallDebugSquadCountUp, ReturnValue) == 0x000004, "Member 'MainMenuWidget_CallDebugSquadCountUp::ReturnValue' has a wrong offset!");

// Function OutGameModule.MainMenuWidget.GetTabIndex
// 0x0004 (0x0004 - 0x0000)
struct MainMenuWidget_GetTabIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuWidget_GetTabIndex) == 0x000004, "Wrong alignment on MainMenuWidget_GetTabIndex");
static_assert(sizeof(MainMenuWidget_GetTabIndex) == 0x000004, "Wrong size on MainMenuWidget_GetTabIndex");
static_assert(offsetof(MainMenuWidget_GetTabIndex, ReturnValue) == 0x000000, "Member 'MainMenuWidget_GetTabIndex::ReturnValue' has a wrong offset!");

// Function OutGameModule.MainMenuWidget.OnChangedMainMenu
// 0x0004 (0x0004 - 0x0000)
struct MainMenuWidget_OnChangedMainMenu final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuWidget_OnChangedMainMenu) == 0x000004, "Wrong alignment on MainMenuWidget_OnChangedMainMenu");
static_assert(sizeof(MainMenuWidget_OnChangedMainMenu) == 0x000004, "Wrong size on MainMenuWidget_OnChangedMainMenu");
static_assert(offsetof(MainMenuWidget_OnChangedMainMenu, Index_0) == 0x000000, "Member 'MainMenuWidget_OnChangedMainMenu::Index_0' has a wrong offset!");

// Function OutGameModule.MainMenuWidget.OnChangeTab
// 0x0004 (0x0004 - 0x0000)
struct MainMenuWidget_OnChangeTab final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuWidget_OnChangeTab) == 0x000004, "Wrong alignment on MainMenuWidget_OnChangeTab");
static_assert(sizeof(MainMenuWidget_OnChangeTab) == 0x000004, "Wrong size on MainMenuWidget_OnChangeTab");
static_assert(offsetof(MainMenuWidget_OnChangeTab, Index_0) == 0x000000, "Member 'MainMenuWidget_OnChangeTab::Index_0' has a wrong offset!");

// Function OutGameModule.MainMenuWidget.OnSquadNumChanged
// 0x0004 (0x0004 - 0x0000)
struct MainMenuWidget_OnSquadNumChanged final
{
public:
	int32                                         SquadNum;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuWidget_OnSquadNumChanged) == 0x000004, "Wrong alignment on MainMenuWidget_OnSquadNumChanged");
static_assert(sizeof(MainMenuWidget_OnSquadNumChanged) == 0x000004, "Wrong size on MainMenuWidget_OnSquadNumChanged");
static_assert(offsetof(MainMenuWidget_OnSquadNumChanged, SquadNum) == 0x000000, "Member 'MainMenuWidget_OnSquadNumChanged::SquadNum' has a wrong offset!");

// Function OutGameModule.MainMenuWidget.OnTeamUpAutoStartBattleCompleteEvent
// 0x0001 (0x0001 - 0x0000)
struct MainMenuWidget_OnTeamUpAutoStartBattleCompleteEvent final
{
public:
	EAutoStartBattleState                         State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuWidget_OnTeamUpAutoStartBattleCompleteEvent) == 0x000001, "Wrong alignment on MainMenuWidget_OnTeamUpAutoStartBattleCompleteEvent");
static_assert(sizeof(MainMenuWidget_OnTeamUpAutoStartBattleCompleteEvent) == 0x000001, "Wrong size on MainMenuWidget_OnTeamUpAutoStartBattleCompleteEvent");
static_assert(offsetof(MainMenuWidget_OnTeamUpAutoStartBattleCompleteEvent, State) == 0x000000, "Member 'MainMenuWidget_OnTeamUpAutoStartBattleCompleteEvent::State' has a wrong offset!");

// Function OutGameModule.MainMenuWidget.ReceivedOnLoadCompleteEvent
// 0x0004 (0x0004 - 0x0000)
struct MainMenuWidget_ReceivedOnLoadCompleteEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuWidget_ReceivedOnLoadCompleteEvent) == 0x000004, "Wrong alignment on MainMenuWidget_ReceivedOnLoadCompleteEvent");
static_assert(sizeof(MainMenuWidget_ReceivedOnLoadCompleteEvent) == 0x000004, "Wrong size on MainMenuWidget_ReceivedOnLoadCompleteEvent");
static_assert(offsetof(MainMenuWidget_ReceivedOnLoadCompleteEvent, RequestId) == 0x000000, "Member 'MainMenuWidget_ReceivedOnLoadCompleteEvent::RequestId' has a wrong offset!");

// Function OutGameModule.MainMenuWidget.SetTabEnable
// 0x0001 (0x0001 - 0x0000)
struct MainMenuWidget_SetTabEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuWidget_SetTabEnable) == 0x000001, "Wrong alignment on MainMenuWidget_SetTabEnable");
static_assert(sizeof(MainMenuWidget_SetTabEnable) == 0x000001, "Wrong size on MainMenuWidget_SetTabEnable");
static_assert(offsetof(MainMenuWidget_SetTabEnable, bEnable) == 0x000000, "Member 'MainMenuWidget_SetTabEnable::bEnable' has a wrong offset!");

// Function OutGameModule.MainMenuWidget.SetUseStandbyVoice
// 0x0001 (0x0001 - 0x0000)
struct MainMenuWidget_SetUseStandbyVoice final
{
public:
	bool                                          bUse;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuWidget_SetUseStandbyVoice) == 0x000001, "Wrong alignment on MainMenuWidget_SetUseStandbyVoice");
static_assert(sizeof(MainMenuWidget_SetUseStandbyVoice) == 0x000001, "Wrong size on MainMenuWidget_SetUseStandbyVoice");
static_assert(offsetof(MainMenuWidget_SetUseStandbyVoice, bUse) == 0x000000, "Member 'MainMenuWidget_SetUseStandbyVoice::bUse' has a wrong offset!");

// Function OutGameModule.MainMenuWidget.StartBattle
// 0x0018 (0x0018 - 0x0000)
struct MainMenuWidget_StartBattle final
{
public:
	bool                                          bSpectatorOnly;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CustomServerAddress;                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuWidget_StartBattle) == 0x000008, "Wrong alignment on MainMenuWidget_StartBattle");
static_assert(sizeof(MainMenuWidget_StartBattle) == 0x000018, "Wrong size on MainMenuWidget_StartBattle");
static_assert(offsetof(MainMenuWidget_StartBattle, bSpectatorOnly) == 0x000000, "Member 'MainMenuWidget_StartBattle::bSpectatorOnly' has a wrong offset!");
static_assert(offsetof(MainMenuWidget_StartBattle, CustomServerAddress) == 0x000008, "Member 'MainMenuWidget_StartBattle::CustomServerAddress' has a wrong offset!");

// Function OutGameModule.MainMenuWidget.SubLevelHiddenTutorial
// 0x0001 (0x0001 - 0x0000)
struct MainMenuWidget_SubLevelHiddenTutorial final
{
public:
	ETutorialPopupScene                           Scene;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuWidget_SubLevelHiddenTutorial) == 0x000001, "Wrong alignment on MainMenuWidget_SubLevelHiddenTutorial");
static_assert(sizeof(MainMenuWidget_SubLevelHiddenTutorial) == 0x000001, "Wrong size on MainMenuWidget_SubLevelHiddenTutorial");
static_assert(offsetof(MainMenuWidget_SubLevelHiddenTutorial, Scene) == 0x000000, "Member 'MainMenuWidget_SubLevelHiddenTutorial::Scene' has a wrong offset!");

// Function OutGameModule.MissionBaseWidget.Receive
// 0x0010 (0x0010 - 0x0000)
struct MissionBaseWidget_Receive final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MissionBaseWidget_Receive) == 0x000008, "Wrong alignment on MissionBaseWidget_Receive");
static_assert(sizeof(MissionBaseWidget_Receive) == 0x000010, "Wrong size on MissionBaseWidget_Receive");
static_assert(offsetof(MissionBaseWidget_Receive, Widget) == 0x000000, "Member 'MissionBaseWidget_Receive::Widget' has a wrong offset!");
static_assert(offsetof(MissionBaseWidget_Receive, InputType) == 0x000008, "Member 'MissionBaseWidget_Receive::InputType' has a wrong offset!");

// Function OutGameModule.MissionBaseWidget.SwitchViewTimer
// 0x0001 (0x0001 - 0x0000)
struct MissionBaseWidget_SwitchViewTimer final
{
public:
	bool                                          bViewRewardTimer;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionBaseWidget_SwitchViewTimer) == 0x000001, "Wrong alignment on MissionBaseWidget_SwitchViewTimer");
static_assert(sizeof(MissionBaseWidget_SwitchViewTimer) == 0x000001, "Wrong size on MissionBaseWidget_SwitchViewTimer");
static_assert(offsetof(MissionBaseWidget_SwitchViewTimer, bViewRewardTimer) == 0x000000, "Member 'MissionBaseWidget_SwitchViewTimer::bViewRewardTimer' has a wrong offset!");

// Function OutGameModule.MissionDetailsWindow.Close
// 0x0010 (0x0010 - 0x0000)
struct MissionDetailsWindow_Close final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MissionDetailsWindow_Close) == 0x000008, "Wrong alignment on MissionDetailsWindow_Close");
static_assert(sizeof(MissionDetailsWindow_Close) == 0x000010, "Wrong size on MissionDetailsWindow_Close");
static_assert(offsetof(MissionDetailsWindow_Close, Widget) == 0x000000, "Member 'MissionDetailsWindow_Close::Widget' has a wrong offset!");
static_assert(offsetof(MissionDetailsWindow_Close, InputType) == 0x000008, "Member 'MissionDetailsWindow_Close::InputType' has a wrong offset!");

// Function OutGameModule.MissionDetailsWindow.Transition
// 0x0010 (0x0010 - 0x0000)
struct MissionDetailsWindow_Transition final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MissionDetailsWindow_Transition) == 0x000008, "Wrong alignment on MissionDetailsWindow_Transition");
static_assert(sizeof(MissionDetailsWindow_Transition) == 0x000010, "Wrong size on MissionDetailsWindow_Transition");
static_assert(offsetof(MissionDetailsWindow_Transition, Widget) == 0x000000, "Member 'MissionDetailsWindow_Transition::Widget' has a wrong offset!");
static_assert(offsetof(MissionDetailsWindow_Transition, InputType) == 0x000008, "Member 'MissionDetailsWindow_Transition::InputType' has a wrong offset!");

// Function OutGameModule.MissionTabWidget.EndTutorial
// 0x0004 (0x0004 - 0x0000)
struct MissionTabWidget_EndTutorial final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionTabWidget_EndTutorial) == 0x000004, "Wrong alignment on MissionTabWidget_EndTutorial");
static_assert(sizeof(MissionTabWidget_EndTutorial) == 0x000004, "Wrong size on MissionTabWidget_EndTutorial");
static_assert(offsetof(MissionTabWidget_EndTutorial, RequestId) == 0x000000, "Member 'MissionTabWidget_EndTutorial::RequestId' has a wrong offset!");

// Function OutGameModule.MissionTabWidget.OnLoadedMission
// 0x0004 (0x0004 - 0x0000)
struct MissionTabWidget_OnLoadedMission final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionTabWidget_OnLoadedMission) == 0x000004, "Wrong alignment on MissionTabWidget_OnLoadedMission");
static_assert(sizeof(MissionTabWidget_OnLoadedMission) == 0x000004, "Wrong size on MissionTabWidget_OnLoadedMission");
static_assert(offsetof(MissionTabWidget_OnLoadedMission, RequestId) == 0x000000, "Member 'MissionTabWidget_OnLoadedMission::RequestId' has a wrong offset!");

// Function OutGameModule.MissionTabWidget.OnReceivedMission
// 0x0004 (0x0004 - 0x0000)
struct MissionTabWidget_OnReceivedMission final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionTabWidget_OnReceivedMission) == 0x000004, "Wrong alignment on MissionTabWidget_OnReceivedMission");
static_assert(sizeof(MissionTabWidget_OnReceivedMission) == 0x000004, "Wrong size on MissionTabWidget_OnReceivedMission");
static_assert(offsetof(MissionTabWidget_OnReceivedMission, RequestId) == 0x000000, "Member 'MissionTabWidget_OnReceivedMission::RequestId' has a wrong offset!");

// Function OutGameModule.MissionTabWidget.OnSwitchTab
// 0x0004 (0x0004 - 0x0000)
struct MissionTabWidget_OnSwitchTab final
{
public:
	int32                                         NewSelectTab;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionTabWidget_OnSwitchTab) == 0x000004, "Wrong alignment on MissionTabWidget_OnSwitchTab");
static_assert(sizeof(MissionTabWidget_OnSwitchTab) == 0x000004, "Wrong size on MissionTabWidget_OnSwitchTab");
static_assert(offsetof(MissionTabWidget_OnSwitchTab, NewSelectTab) == 0x000000, "Member 'MissionTabWidget_OnSwitchTab::NewSelectTab' has a wrong offset!");

// Function OutGameModule.MissionTabWidget.OnSystemErrorEvent
// 0x0014 (0x0014 - 0x0000)
struct MissionTabWidget_OnSystemErrorEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Message;                                           // 0x000C(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionTabWidget_OnSystemErrorEvent) == 0x000004, "Wrong alignment on MissionTabWidget_OnSystemErrorEvent");
static_assert(sizeof(MissionTabWidget_OnSystemErrorEvent) == 0x000014, "Wrong size on MissionTabWidget_OnSystemErrorEvent");
static_assert(offsetof(MissionTabWidget_OnSystemErrorEvent, RequestId) == 0x000000, "Member 'MissionTabWidget_OnSystemErrorEvent::RequestId' has a wrong offset!");
static_assert(offsetof(MissionTabWidget_OnSystemErrorEvent, Key) == 0x000004, "Member 'MissionTabWidget_OnSystemErrorEvent::Key' has a wrong offset!");
static_assert(offsetof(MissionTabWidget_OnSystemErrorEvent, Message) == 0x00000C, "Member 'MissionTabWidget_OnSystemErrorEvent::Message' has a wrong offset!");

// Function OutGameModule.MissionTabWidget.SetTutorialFlag
// 0x0001 (0x0001 - 0x0000)
struct MissionTabWidget_SetTutorialFlag final
{
public:
	bool                                          bTutorial;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MissionTabWidget_SetTutorialFlag) == 0x000001, "Wrong alignment on MissionTabWidget_SetTutorialFlag");
static_assert(sizeof(MissionTabWidget_SetTutorialFlag) == 0x000001, "Wrong size on MissionTabWidget_SetTutorialFlag");
static_assert(offsetof(MissionTabWidget_SetTutorialFlag, bTutorial) == 0x000000, "Member 'MissionTabWidget_SetTutorialFlag::bTutorial' has a wrong offset!");

// Function OutGameModule.MyADEditSelectButtonWidget.OnReceivedChangedCustomizeMyADParts
// 0x000C (0x000C - 0x0000)
struct MyADEditSelectButtonWidget_OnReceivedChangedCustomizeMyADParts final
{
public:
	EMyAdPartsCategory                            Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Message;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MyADEditSelectButtonWidget_OnReceivedChangedCustomizeMyADParts) == 0x000004, "Wrong alignment on MyADEditSelectButtonWidget_OnReceivedChangedCustomizeMyADParts");
static_assert(sizeof(MyADEditSelectButtonWidget_OnReceivedChangedCustomizeMyADParts) == 0x00000C, "Wrong size on MyADEditSelectButtonWidget_OnReceivedChangedCustomizeMyADParts");
static_assert(offsetof(MyADEditSelectButtonWidget_OnReceivedChangedCustomizeMyADParts, Type) == 0x000000, "Member 'MyADEditSelectButtonWidget_OnReceivedChangedCustomizeMyADParts::Type' has a wrong offset!");
static_assert(offsetof(MyADEditSelectButtonWidget_OnReceivedChangedCustomizeMyADParts, Code) == 0x000004, "Member 'MyADEditSelectButtonWidget_OnReceivedChangedCustomizeMyADParts::Code' has a wrong offset!");
static_assert(offsetof(MyADEditSelectButtonWidget_OnReceivedChangedCustomizeMyADParts, Message) == 0x000008, "Member 'MyADEditSelectButtonWidget_OnReceivedChangedCustomizeMyADParts::Message' has a wrong offset!");

// Function OutGameModule.MyADEditTopWidget.OnReceivedChangeEditCode
// 0x0008 (0x0008 - 0x0000)
struct MyADEditTopWidget_OnReceivedChangeEditCode final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMyAdPartsCategory                            PartsType;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MyADEditTopWidget_OnReceivedChangeEditCode) == 0x000004, "Wrong alignment on MyADEditTopWidget_OnReceivedChangeEditCode");
static_assert(sizeof(MyADEditTopWidget_OnReceivedChangeEditCode) == 0x000008, "Wrong size on MyADEditTopWidget_OnReceivedChangeEditCode");
static_assert(offsetof(MyADEditTopWidget_OnReceivedChangeEditCode, Code) == 0x000000, "Member 'MyADEditTopWidget_OnReceivedChangeEditCode::Code' has a wrong offset!");
static_assert(offsetof(MyADEditTopWidget_OnReceivedChangeEditCode, PartsType) == 0x000004, "Member 'MyADEditTopWidget_OnReceivedChangeEditCode::PartsType' has a wrong offset!");

// Function OutGameModule.MyADEditTopWidget.OnReceivedChangeEditMessage
// 0x0004 (0x0004 - 0x0000)
struct MyADEditTopWidget_OnReceivedChangeEditMessage final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MyADEditTopWidget_OnReceivedChangeEditMessage) == 0x000004, "Wrong alignment on MyADEditTopWidget_OnReceivedChangeEditMessage");
static_assert(sizeof(MyADEditTopWidget_OnReceivedChangeEditMessage) == 0x000004, "Wrong size on MyADEditTopWidget_OnReceivedChangeEditMessage");
static_assert(offsetof(MyADEditTopWidget_OnReceivedChangeEditMessage, Code) == 0x000000, "Member 'MyADEditTopWidget_OnReceivedChangeEditMessage::Code' has a wrong offset!");

// Function OutGameModule.MyADEditWidgetMessage.OnReceivedLeftButtonDecideDelegateEvent
// 0x0010 (0x0010 - 0x0000)
struct MyADEditWidgetMessage_OnReceivedLeftButtonDecideDelegateEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MyADEditWidgetMessage_OnReceivedLeftButtonDecideDelegateEvent) == 0x000008, "Wrong alignment on MyADEditWidgetMessage_OnReceivedLeftButtonDecideDelegateEvent");
static_assert(sizeof(MyADEditWidgetMessage_OnReceivedLeftButtonDecideDelegateEvent) == 0x000010, "Wrong size on MyADEditWidgetMessage_OnReceivedLeftButtonDecideDelegateEvent");
static_assert(offsetof(MyADEditWidgetMessage_OnReceivedLeftButtonDecideDelegateEvent, Widget) == 0x000000, "Member 'MyADEditWidgetMessage_OnReceivedLeftButtonDecideDelegateEvent::Widget' has a wrong offset!");
static_assert(offsetof(MyADEditWidgetMessage_OnReceivedLeftButtonDecideDelegateEvent, InputType) == 0x000008, "Member 'MyADEditWidgetMessage_OnReceivedLeftButtonDecideDelegateEvent::InputType' has a wrong offset!");

// Function OutGameModule.MyADEditWidgetMessage.OnReceivedRightButtonDecideDelegateEvent
// 0x0010 (0x0010 - 0x0000)
struct MyADEditWidgetMessage_OnReceivedRightButtonDecideDelegateEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MyADEditWidgetMessage_OnReceivedRightButtonDecideDelegateEvent) == 0x000008, "Wrong alignment on MyADEditWidgetMessage_OnReceivedRightButtonDecideDelegateEvent");
static_assert(sizeof(MyADEditWidgetMessage_OnReceivedRightButtonDecideDelegateEvent) == 0x000010, "Wrong size on MyADEditWidgetMessage_OnReceivedRightButtonDecideDelegateEvent");
static_assert(offsetof(MyADEditWidgetMessage_OnReceivedRightButtonDecideDelegateEvent, Widget) == 0x000000, "Member 'MyADEditWidgetMessage_OnReceivedRightButtonDecideDelegateEvent::Widget' has a wrong offset!");
static_assert(offsetof(MyADEditWidgetMessage_OnReceivedRightButtonDecideDelegateEvent, InputType) == 0x000008, "Member 'MyADEditWidgetMessage_OnReceivedRightButtonDecideDelegateEvent::InputType' has a wrong offset!");

// Function OutGameModule.MyADEditWidgetMessage.OnReceivedSelectLanguageButtonDecideDelegateEvent
// 0x0010 (0x0010 - 0x0000)
struct MyADEditWidgetMessage_OnReceivedSelectLanguageButtonDecideDelegateEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MyADEditWidgetMessage_OnReceivedSelectLanguageButtonDecideDelegateEvent) == 0x000008, "Wrong alignment on MyADEditWidgetMessage_OnReceivedSelectLanguageButtonDecideDelegateEvent");
static_assert(sizeof(MyADEditWidgetMessage_OnReceivedSelectLanguageButtonDecideDelegateEvent) == 0x000010, "Wrong size on MyADEditWidgetMessage_OnReceivedSelectLanguageButtonDecideDelegateEvent");
static_assert(offsetof(MyADEditWidgetMessage_OnReceivedSelectLanguageButtonDecideDelegateEvent, Widget) == 0x000000, "Member 'MyADEditWidgetMessage_OnReceivedSelectLanguageButtonDecideDelegateEvent::Widget' has a wrong offset!");
static_assert(offsetof(MyADEditWidgetMessage_OnReceivedSelectLanguageButtonDecideDelegateEvent, InputType) == 0x000008, "Member 'MyADEditWidgetMessage_OnReceivedSelectLanguageButtonDecideDelegateEvent::InputType' has a wrong offset!");

// Function OutGameModule.MyADEditWidgetMessage.OnReceivedSelectLanguageDecideDelegateEvent
// 0x0018 (0x0018 - 0x0000)
struct MyADEditWidgetMessage_OnReceivedSelectLanguageDecideDelegateEvent final
{
public:
	int32                                         Selectindex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAppWidget*                             Widget;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MyADEditWidgetMessage_OnReceivedSelectLanguageDecideDelegateEvent) == 0x000008, "Wrong alignment on MyADEditWidgetMessage_OnReceivedSelectLanguageDecideDelegateEvent");
static_assert(sizeof(MyADEditWidgetMessage_OnReceivedSelectLanguageDecideDelegateEvent) == 0x000018, "Wrong size on MyADEditWidgetMessage_OnReceivedSelectLanguageDecideDelegateEvent");
static_assert(offsetof(MyADEditWidgetMessage_OnReceivedSelectLanguageDecideDelegateEvent, Selectindex) == 0x000000, "Member 'MyADEditWidgetMessage_OnReceivedSelectLanguageDecideDelegateEvent::Selectindex' has a wrong offset!");
static_assert(offsetof(MyADEditWidgetMessage_OnReceivedSelectLanguageDecideDelegateEvent, Widget) == 0x000008, "Member 'MyADEditWidgetMessage_OnReceivedSelectLanguageDecideDelegateEvent::Widget' has a wrong offset!");
static_assert(offsetof(MyADEditWidgetMessage_OnReceivedSelectLanguageDecideDelegateEvent, InputType) == 0x000010, "Member 'MyADEditWidgetMessage_OnReceivedSelectLanguageDecideDelegateEvent::InputType' has a wrong offset!");
static_assert(offsetof(MyADEditWidgetMessage_OnReceivedSelectLanguageDecideDelegateEvent, LeftButton) == 0x000011, "Member 'MyADEditWidgetMessage_OnReceivedSelectLanguageDecideDelegateEvent::LeftButton' has a wrong offset!");

// Function OutGameModule.MyADSelectButtonWidget.ReceivedOnChangedCustomize
// 0x0010 (0x0010 - 0x0000)
struct MyADSelectButtonWidget_ReceivedOnChangedCustomize final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MyADSelectButtonWidget_ReceivedOnChangedCustomize) == 0x000008, "Wrong alignment on MyADSelectButtonWidget_ReceivedOnChangedCustomize");
static_assert(sizeof(MyADSelectButtonWidget_ReceivedOnChangedCustomize) == 0x000010, "Wrong size on MyADSelectButtonWidget_ReceivedOnChangedCustomize");
static_assert(offsetof(MyADSelectButtonWidget_ReceivedOnChangedCustomize, Key) == 0x000000, "Member 'MyADSelectButtonWidget_ReceivedOnChangedCustomize::Key' has a wrong offset!");

// Function OutGameModule.NoticeExplanationText.MoveScroll
// 0x0040 (0x0040 - 0x0000)
struct NoticeExplanationText_MoveScroll final
{
public:
	struct FAnalogInputEvent                      KeyEvent;                                          // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NoticeExplanationText_MoveScroll) == 0x000008, "Wrong alignment on NoticeExplanationText_MoveScroll");
static_assert(sizeof(NoticeExplanationText_MoveScroll) == 0x000040, "Wrong size on NoticeExplanationText_MoveScroll");
static_assert(offsetof(NoticeExplanationText_MoveScroll, KeyEvent) == 0x000000, "Member 'NoticeExplanationText_MoveScroll::KeyEvent' has a wrong offset!");

// Function OutGameModule.OutGameCharacterWidget.ShowCharacterModel
// 0x0008 (0x0008 - 0x0000)
struct OutGameCharacterWidget_ShowCharacterModel final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VariationNo;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OutGameCharacterWidget_ShowCharacterModel) == 0x000004, "Wrong alignment on OutGameCharacterWidget_ShowCharacterModel");
static_assert(sizeof(OutGameCharacterWidget_ShowCharacterModel) == 0x000008, "Wrong size on OutGameCharacterWidget_ShowCharacterModel");
static_assert(offsetof(OutGameCharacterWidget_ShowCharacterModel, CharacterId) == 0x000000, "Member 'OutGameCharacterWidget_ShowCharacterModel::CharacterId' has a wrong offset!");
static_assert(offsetof(OutGameCharacterWidget_ShowCharacterModel, VariationNo) == 0x000004, "Member 'OutGameCharacterWidget_ShowCharacterModel::VariationNo' has a wrong offset!");

// Function OutGameModule.SquadMemberListWidget.KickSquadMember
// 0x0004 (0x0004 - 0x0000)
struct SquadMemberListWidget_KickSquadMember final
{
public:
	int32                                         Number;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SquadMemberListWidget_KickSquadMember) == 0x000004, "Wrong alignment on SquadMemberListWidget_KickSquadMember");
static_assert(sizeof(SquadMemberListWidget_KickSquadMember) == 0x000004, "Wrong size on SquadMemberListWidget_KickSquadMember");
static_assert(offsetof(SquadMemberListWidget_KickSquadMember, Number) == 0x000000, "Member 'SquadMemberListWidget_KickSquadMember::Number' has a wrong offset!");

// Function OutGameModule.SquadMemberListWidget.OpenSubMenu
// 0x0010 (0x0010 - 0x0000)
struct SquadMemberListWidget_OpenSubMenu final
{
public:
	class UWidgetBase*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Number;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SquadMemberListWidget_OpenSubMenu) == 0x000008, "Wrong alignment on SquadMemberListWidget_OpenSubMenu");
static_assert(sizeof(SquadMemberListWidget_OpenSubMenu) == 0x000010, "Wrong size on SquadMemberListWidget_OpenSubMenu");
static_assert(offsetof(SquadMemberListWidget_OpenSubMenu, Widget) == 0x000000, "Member 'SquadMemberListWidget_OpenSubMenu::Widget' has a wrong offset!");
static_assert(offsetof(SquadMemberListWidget_OpenSubMenu, Number) == 0x000008, "Member 'SquadMemberListWidget_OpenSubMenu::Number' has a wrong offset!");

// Function OutGameModule.SquadMemberListWidget.SetFocuse
// 0x0010 (0x0010 - 0x0000)
struct SquadMemberListWidget_SetFocuse final
{
public:
	int32                                         Number;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SquadMemberListWidget_SetFocuse) == 0x000008, "Wrong alignment on SquadMemberListWidget_SetFocuse");
static_assert(sizeof(SquadMemberListWidget_SetFocuse) == 0x000010, "Wrong size on SquadMemberListWidget_SetFocuse");
static_assert(offsetof(SquadMemberListWidget_SetFocuse, Number) == 0x000000, "Member 'SquadMemberListWidget_SetFocuse::Number' has a wrong offset!");
static_assert(offsetof(SquadMemberListWidget_SetFocuse, ReturnValue) == 0x000008, "Member 'SquadMemberListWidget_SetFocuse::ReturnValue' has a wrong offset!");

// Function OutGameModule.SquadMemberListWidget.SetSquadMember
// 0x0020 (0x0020 - 0x0000)
struct SquadMemberListWidget_SetSquadMember final
{
public:
	TArray<class FString>                         MemberNameList;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         MemberIdList;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SquadMemberListWidget_SetSquadMember) == 0x000008, "Wrong alignment on SquadMemberListWidget_SetSquadMember");
static_assert(sizeof(SquadMemberListWidget_SetSquadMember) == 0x000020, "Wrong size on SquadMemberListWidget_SetSquadMember");
static_assert(offsetof(SquadMemberListWidget_SetSquadMember, MemberNameList) == 0x000000, "Member 'SquadMemberListWidget_SetSquadMember::MemberNameList' has a wrong offset!");
static_assert(offsetof(SquadMemberListWidget_SetSquadMember, MemberIdList) == 0x000010, "Member 'SquadMemberListWidget_SetSquadMember::MemberIdList' has a wrong offset!");

// Function OutGameModule.SortPopupWidget.Close
// 0x0001 (0x0001 - 0x0000)
struct SortPopupWidget_Close final
{
public:
	bool                                          bPlaySound;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SortPopupWidget_Close) == 0x000001, "Wrong alignment on SortPopupWidget_Close");
static_assert(sizeof(SortPopupWidget_Close) == 0x000001, "Wrong size on SortPopupWidget_Close");
static_assert(offsetof(SortPopupWidget_Close, bPlaySound) == 0x000000, "Member 'SortPopupWidget_Close::bPlaySound' has a wrong offset!");

// Function OutGameModule.SortPopupWidget.OnButtonCancel
// 0x0010 (0x0010 - 0x0000)
struct SortPopupWidget_OnButtonCancel final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SortPopupWidget_OnButtonCancel) == 0x000008, "Wrong alignment on SortPopupWidget_OnButtonCancel");
static_assert(sizeof(SortPopupWidget_OnButtonCancel) == 0x000010, "Wrong size on SortPopupWidget_OnButtonCancel");
static_assert(offsetof(SortPopupWidget_OnButtonCancel, Widget) == 0x000000, "Member 'SortPopupWidget_OnButtonCancel::Widget' has a wrong offset!");
static_assert(offsetof(SortPopupWidget_OnButtonCancel, InputType) == 0x000008, "Member 'SortPopupWidget_OnButtonCancel::InputType' has a wrong offset!");

// Function OutGameModule.SortPopupWidget.OnButtonDecide
// 0x0010 (0x0010 - 0x0000)
struct SortPopupWidget_OnButtonDecide final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SortPopupWidget_OnButtonDecide) == 0x000008, "Wrong alignment on SortPopupWidget_OnButtonDecide");
static_assert(sizeof(SortPopupWidget_OnButtonDecide) == 0x000010, "Wrong size on SortPopupWidget_OnButtonDecide");
static_assert(offsetof(SortPopupWidget_OnButtonDecide, Widget) == 0x000000, "Member 'SortPopupWidget_OnButtonDecide::Widget' has a wrong offset!");
static_assert(offsetof(SortPopupWidget_OnButtonDecide, InputType) == 0x000008, "Member 'SortPopupWidget_OnButtonDecide::InputType' has a wrong offset!");

// Function OutGameModule.SortPopupWidget.Open
// 0x0001 (0x0001 - 0x0000)
struct SortPopupWidget_Open final
{
public:
	bool                                          bPlaySound;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SortPopupWidget_Open) == 0x000001, "Wrong alignment on SortPopupWidget_Open");
static_assert(sizeof(SortPopupWidget_Open) == 0x000001, "Wrong size on SortPopupWidget_Open");
static_assert(offsetof(SortPopupWidget_Open, bPlaySound) == 0x000000, "Member 'SortPopupWidget_Open::bPlaySound' has a wrong offset!");

// Function OutGameModule.SortPopupWidget.GetEmptyWindow
// 0x0008 (0x0008 - 0x0000)
struct SortPopupWidget_GetEmptyWindow final
{
public:
	class UWidgetGeneralEmptyWindow*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SortPopupWidget_GetEmptyWindow) == 0x000008, "Wrong alignment on SortPopupWidget_GetEmptyWindow");
static_assert(sizeof(SortPopupWidget_GetEmptyWindow) == 0x000008, "Wrong size on SortPopupWidget_GetEmptyWindow");
static_assert(offsetof(SortPopupWidget_GetEmptyWindow, ReturnValue) == 0x000000, "Member 'SortPopupWidget_GetEmptyWindow::ReturnValue' has a wrong offset!");

// Function OutGameModule.SortPopupWidget.GetSelectSortItemIndex
// 0x0008 (0x0008 - 0x0000)
struct SortPopupWidget_GetSelectSortItemIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SortPopupWidget_GetSelectSortItemIndex) == 0x000004, "Wrong alignment on SortPopupWidget_GetSelectSortItemIndex");
static_assert(sizeof(SortPopupWidget_GetSelectSortItemIndex) == 0x000008, "Wrong size on SortPopupWidget_GetSelectSortItemIndex");
static_assert(offsetof(SortPopupWidget_GetSelectSortItemIndex, Index_0) == 0x000000, "Member 'SortPopupWidget_GetSelectSortItemIndex::Index_0' has a wrong offset!");
static_assert(offsetof(SortPopupWidget_GetSelectSortItemIndex, ReturnValue) == 0x000004, "Member 'SortPopupWidget_GetSelectSortItemIndex::ReturnValue' has a wrong offset!");

// Function OutGameModule.SortPopupWidget.GetSelectSortItemText
// 0x0020 (0x0020 - 0x0000)
struct SortPopupWidget_GetSelectSortItemText final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SortPopupWidget_GetSelectSortItemText) == 0x000008, "Wrong alignment on SortPopupWidget_GetSelectSortItemText");
static_assert(sizeof(SortPopupWidget_GetSelectSortItemText) == 0x000020, "Wrong size on SortPopupWidget_GetSelectSortItemText");
static_assert(offsetof(SortPopupWidget_GetSelectSortItemText, Index_0) == 0x000000, "Member 'SortPopupWidget_GetSelectSortItemText::Index_0' has a wrong offset!");
static_assert(offsetof(SortPopupWidget_GetSelectSortItemText, ReturnValue) == 0x000008, "Member 'SortPopupWidget_GetSelectSortItemText::ReturnValue' has a wrong offset!");

// Function OutGameModule.SortPopupWidget.GetSelectSortItemTextOnView
// 0x0020 (0x0020 - 0x0000)
struct SortPopupWidget_GetSelectSortItemTextOnView final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SortPopupWidget_GetSelectSortItemTextOnView) == 0x000008, "Wrong alignment on SortPopupWidget_GetSelectSortItemTextOnView");
static_assert(sizeof(SortPopupWidget_GetSelectSortItemTextOnView) == 0x000020, "Wrong size on SortPopupWidget_GetSelectSortItemTextOnView");
static_assert(offsetof(SortPopupWidget_GetSelectSortItemTextOnView, Index_0) == 0x000000, "Member 'SortPopupWidget_GetSelectSortItemTextOnView::Index_0' has a wrong offset!");
static_assert(offsetof(SortPopupWidget_GetSelectSortItemTextOnView, ReturnValue) == 0x000008, "Member 'SortPopupWidget_GetSelectSortItemTextOnView::ReturnValue' has a wrong offset!");

// Function OutGameModule.PackItemWidget.OnSetItemName
// 0x0018 (0x0018 - 0x0000)
struct PackItemWidget_OnSetItemName final
{
public:
	class FText                                   ItemName;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PackItemWidget_OnSetItemName) == 0x000008, "Wrong alignment on PackItemWidget_OnSetItemName");
static_assert(sizeof(PackItemWidget_OnSetItemName) == 0x000018, "Wrong size on PackItemWidget_OnSetItemName");
static_assert(offsetof(PackItemWidget_OnSetItemName, ItemName) == 0x000000, "Member 'PackItemWidget_OnSetItemName::ItemName' has a wrong offset!");

// Function OutGameModule.PackItemWidget.OnSetQuantity
// 0x0004 (0x0004 - 0x0000)
struct PackItemWidget_OnSetQuantity final
{
public:
	int32                                         Quantity;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PackItemWidget_OnSetQuantity) == 0x000004, "Wrong alignment on PackItemWidget_OnSetQuantity");
static_assert(sizeof(PackItemWidget_OnSetQuantity) == 0x000004, "Wrong size on PackItemWidget_OnSetQuantity");
static_assert(offsetof(PackItemWidget_OnSetQuantity, Quantity) == 0x000000, "Member 'PackItemWidget_OnSetQuantity::Quantity' has a wrong offset!");

// Function OutGameModule.StaffRollCellSlot.BP_SetTextSlot
// 0x0028 (0x0028 - 0x0000)
struct StaffRollCellSlot_BP_SetTextSlot final
{
public:
	class FString                                 PositionName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StaffName;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStaffRollTextType                            Type;                                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHideEmptyText;                                   // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StaffRollCellSlot_BP_SetTextSlot) == 0x000008, "Wrong alignment on StaffRollCellSlot_BP_SetTextSlot");
static_assert(sizeof(StaffRollCellSlot_BP_SetTextSlot) == 0x000028, "Wrong size on StaffRollCellSlot_BP_SetTextSlot");
static_assert(offsetof(StaffRollCellSlot_BP_SetTextSlot, PositionName) == 0x000000, "Member 'StaffRollCellSlot_BP_SetTextSlot::PositionName' has a wrong offset!");
static_assert(offsetof(StaffRollCellSlot_BP_SetTextSlot, StaffName) == 0x000010, "Member 'StaffRollCellSlot_BP_SetTextSlot::StaffName' has a wrong offset!");
static_assert(offsetof(StaffRollCellSlot_BP_SetTextSlot, Type) == 0x000020, "Member 'StaffRollCellSlot_BP_SetTextSlot::Type' has a wrong offset!");
static_assert(offsetof(StaffRollCellSlot_BP_SetTextSlot, IsHideEmptyText) == 0x000021, "Member 'StaffRollCellSlot_BP_SetTextSlot::IsHideEmptyText' has a wrong offset!");

// Function OutGameModule.PlayerControllerDevOnlineMenu.SendStageIndexToClient
// 0x0004 (0x0004 - 0x0000)
struct PlayerControllerDevOnlineMenu_SendStageIndexToClient final
{
public:
	int32                                         Data;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerDevOnlineMenu_SendStageIndexToClient) == 0x000004, "Wrong alignment on PlayerControllerDevOnlineMenu_SendStageIndexToClient");
static_assert(sizeof(PlayerControllerDevOnlineMenu_SendStageIndexToClient) == 0x000004, "Wrong size on PlayerControllerDevOnlineMenu_SendStageIndexToClient");
static_assert(offsetof(PlayerControllerDevOnlineMenu_SendStageIndexToClient, Data) == 0x000000, "Member 'PlayerControllerDevOnlineMenu_SendStageIndexToClient::Data' has a wrong offset!");

// Function OutGameModule.PlayerControllerDevOnlineMenu.SendStageIndexToServer
// 0x0004 (0x0004 - 0x0000)
struct PlayerControllerDevOnlineMenu_SendStageIndexToServer final
{
public:
	int32                                         Data;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerDevOnlineMenu_SendStageIndexToServer) == 0x000004, "Wrong alignment on PlayerControllerDevOnlineMenu_SendStageIndexToServer");
static_assert(sizeof(PlayerControllerDevOnlineMenu_SendStageIndexToServer) == 0x000004, "Wrong size on PlayerControllerDevOnlineMenu_SendStageIndexToServer");
static_assert(offsetof(PlayerControllerDevOnlineMenu_SendStageIndexToServer, Data) == 0x000000, "Member 'PlayerControllerDevOnlineMenu_SendStageIndexToServer::Data' has a wrong offset!");

// Function OutGameModule.PlayerControllerDevOnlineMenu.SendStateToClient
// 0x0004 (0x0004 - 0x0000)
struct PlayerControllerDevOnlineMenu_SendStateToClient final
{
public:
	int32                                         Data;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerDevOnlineMenu_SendStateToClient) == 0x000004, "Wrong alignment on PlayerControllerDevOnlineMenu_SendStateToClient");
static_assert(sizeof(PlayerControllerDevOnlineMenu_SendStateToClient) == 0x000004, "Wrong size on PlayerControllerDevOnlineMenu_SendStateToClient");
static_assert(offsetof(PlayerControllerDevOnlineMenu_SendStateToClient, Data) == 0x000000, "Member 'PlayerControllerDevOnlineMenu_SendStateToClient::Data' has a wrong offset!");

// Function OutGameModule.PlayerControllerDevOnlineMenu.SendStateToServer
// 0x0004 (0x0004 - 0x0000)
struct PlayerControllerDevOnlineMenu_SendStateToServer final
{
public:
	int32                                         Data;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerDevOnlineMenu_SendStateToServer) == 0x000004, "Wrong alignment on PlayerControllerDevOnlineMenu_SendStateToServer");
static_assert(sizeof(PlayerControllerDevOnlineMenu_SendStateToServer) == 0x000004, "Wrong size on PlayerControllerDevOnlineMenu_SendStateToServer");
static_assert(offsetof(PlayerControllerDevOnlineMenu_SendStateToServer, Data) == 0x000000, "Member 'PlayerControllerDevOnlineMenu_SendStateToServer::Data' has a wrong offset!");

// Function OutGameModule.PlayerNameAppWidget.BP_RequestChangeName
// 0x0010 (0x0010 - 0x0000)
struct PlayerNameAppWidget_BP_RequestChangeName final
{
public:
	class FString                                 NewName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerNameAppWidget_BP_RequestChangeName) == 0x000008, "Wrong alignment on PlayerNameAppWidget_BP_RequestChangeName");
static_assert(sizeof(PlayerNameAppWidget_BP_RequestChangeName) == 0x000010, "Wrong size on PlayerNameAppWidget_BP_RequestChangeName");
static_assert(offsetof(PlayerNameAppWidget_BP_RequestChangeName, NewName) == 0x000000, "Member 'PlayerNameAppWidget_BP_RequestChangeName::NewName' has a wrong offset!");

// Function OutGameModule.PlayerNameAppWidget.OnCancelErrorPopupWindow
// 0x0010 (0x0010 - 0x0000)
struct PlayerNameAppWidget_OnCancelErrorPopupWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerNameAppWidget_OnCancelErrorPopupWindow) == 0x000008, "Wrong alignment on PlayerNameAppWidget_OnCancelErrorPopupWindow");
static_assert(sizeof(PlayerNameAppWidget_OnCancelErrorPopupWindow) == 0x000010, "Wrong size on PlayerNameAppWidget_OnCancelErrorPopupWindow");
static_assert(offsetof(PlayerNameAppWidget_OnCancelErrorPopupWindow, Widget) == 0x000000, "Member 'PlayerNameAppWidget_OnCancelErrorPopupWindow::Widget' has a wrong offset!");
static_assert(offsetof(PlayerNameAppWidget_OnCancelErrorPopupWindow, InputType) == 0x000008, "Member 'PlayerNameAppWidget_OnCancelErrorPopupWindow::InputType' has a wrong offset!");

// Function OutGameModule.PlayerNameAppWidget.OnClosedAgreeFreeTextPopupWindow
// 0x0001 (0x0001 - 0x0000)
struct PlayerNameAppWidget_OnClosedAgreeFreeTextPopupWindow final
{
public:
	bool                                          bAgree;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerNameAppWidget_OnClosedAgreeFreeTextPopupWindow) == 0x000001, "Wrong alignment on PlayerNameAppWidget_OnClosedAgreeFreeTextPopupWindow");
static_assert(sizeof(PlayerNameAppWidget_OnClosedAgreeFreeTextPopupWindow) == 0x000001, "Wrong size on PlayerNameAppWidget_OnClosedAgreeFreeTextPopupWindow");
static_assert(offsetof(PlayerNameAppWidget_OnClosedAgreeFreeTextPopupWindow, bAgree) == 0x000000, "Member 'PlayerNameAppWidget_OnClosedAgreeFreeTextPopupWindow::bAgree' has a wrong offset!");

// Function OutGameModule.PlayerNameAppWidget.OnDecideWindowErrorPopupWindow
// 0x0010 (0x0010 - 0x0000)
struct PlayerNameAppWidget_OnDecideWindowErrorPopupWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerNameAppWidget_OnDecideWindowErrorPopupWindow) == 0x000008, "Wrong alignment on PlayerNameAppWidget_OnDecideWindowErrorPopupWindow");
static_assert(sizeof(PlayerNameAppWidget_OnDecideWindowErrorPopupWindow) == 0x000010, "Wrong size on PlayerNameAppWidget_OnDecideWindowErrorPopupWindow");
static_assert(offsetof(PlayerNameAppWidget_OnDecideWindowErrorPopupWindow, Widget) == 0x000000, "Member 'PlayerNameAppWidget_OnDecideWindowErrorPopupWindow::Widget' has a wrong offset!");
static_assert(offsetof(PlayerNameAppWidget_OnDecideWindowErrorPopupWindow, InputType) == 0x000008, "Member 'PlayerNameAppWidget_OnDecideWindowErrorPopupWindow::InputType' has a wrong offset!");
static_assert(offsetof(PlayerNameAppWidget_OnDecideWindowErrorPopupWindow, LeftButton) == 0x000009, "Member 'PlayerNameAppWidget_OnDecideWindowErrorPopupWindow::LeftButton' has a wrong offset!");

// Function OutGameModule.PlayerNameAppWidget.OnFinishFetchDataEvent
// 0x0004 (0x0004 - 0x0000)
struct PlayerNameAppWidget_OnFinishFetchDataEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerNameAppWidget_OnFinishFetchDataEvent) == 0x000004, "Wrong alignment on PlayerNameAppWidget_OnFinishFetchDataEvent");
static_assert(sizeof(PlayerNameAppWidget_OnFinishFetchDataEvent) == 0x000004, "Wrong size on PlayerNameAppWidget_OnFinishFetchDataEvent");
static_assert(offsetof(PlayerNameAppWidget_OnFinishFetchDataEvent, RequestId) == 0x000000, "Member 'PlayerNameAppWidget_OnFinishFetchDataEvent::RequestId' has a wrong offset!");

// Function OutGameModule.PlayerNameAppWidget.BP_IsCheckBlank
// 0x0018 (0x0018 - 0x0000)
struct PlayerNameAppWidget_BP_IsCheckBlank final
{
public:
	class FString                                 CheckString;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerNameAppWidget_BP_IsCheckBlank) == 0x000008, "Wrong alignment on PlayerNameAppWidget_BP_IsCheckBlank");
static_assert(sizeof(PlayerNameAppWidget_BP_IsCheckBlank) == 0x000018, "Wrong size on PlayerNameAppWidget_BP_IsCheckBlank");
static_assert(offsetof(PlayerNameAppWidget_BP_IsCheckBlank, CheckString) == 0x000000, "Member 'PlayerNameAppWidget_BP_IsCheckBlank::CheckString' has a wrong offset!");
static_assert(offsetof(PlayerNameAppWidget_BP_IsCheckBlank, ReturnValue) == 0x000010, "Member 'PlayerNameAppWidget_BP_IsCheckBlank::ReturnValue' has a wrong offset!");

// Function OutGameModule.StaffRollWidget.BP_GetCellTextType
// 0x0001 (0x0001 - 0x0000)
struct StaffRollWidget_BP_GetCellTextType final
{
public:
	EStaffRollTextType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaffRollWidget_BP_GetCellTextType) == 0x000001, "Wrong alignment on StaffRollWidget_BP_GetCellTextType");
static_assert(sizeof(StaffRollWidget_BP_GetCellTextType) == 0x000001, "Wrong size on StaffRollWidget_BP_GetCellTextType");
static_assert(offsetof(StaffRollWidget_BP_GetCellTextType, ReturnValue) == 0x000000, "Member 'StaffRollWidget_BP_GetCellTextType::ReturnValue' has a wrong offset!");

// Function OutGameModule.StaffRollWidget.BP_GetStartAnimation
// 0x0008 (0x0008 - 0x0000)
struct StaffRollWidget_BP_GetStartAnimation final
{
public:
	class UMediaSource*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaffRollWidget_BP_GetStartAnimation) == 0x000008, "Wrong alignment on StaffRollWidget_BP_GetStartAnimation");
static_assert(sizeof(StaffRollWidget_BP_GetStartAnimation) == 0x000008, "Wrong size on StaffRollWidget_BP_GetStartAnimation");
static_assert(offsetof(StaffRollWidget_BP_GetStartAnimation, ReturnValue) == 0x000000, "Member 'StaffRollWidget_BP_GetStartAnimation::ReturnValue' has a wrong offset!");

// Function OutGameModule.StaffRollWidget.BP_MoveScroll
// 0x0004 (0x0004 - 0x0000)
struct StaffRollWidget_BP_MoveScroll final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaffRollWidget_BP_MoveScroll) == 0x000004, "Wrong alignment on StaffRollWidget_BP_MoveScroll");
static_assert(sizeof(StaffRollWidget_BP_MoveScroll) == 0x000004, "Wrong size on StaffRollWidget_BP_MoveScroll");
static_assert(offsetof(StaffRollWidget_BP_MoveScroll, DeltaTime) == 0x000000, "Member 'StaffRollWidget_BP_MoveScroll::DeltaTime' has a wrong offset!");

// Function OutGameModule.StaffRollWidget.BP_SetUpStaffRollParam
// 0x0001 (0x0001 - 0x0000)
struct StaffRollWidget_BP_SetUpStaffRollParam final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaffRollWidget_BP_SetUpStaffRollParam) == 0x000001, "Wrong alignment on StaffRollWidget_BP_SetUpStaffRollParam");
static_assert(sizeof(StaffRollWidget_BP_SetUpStaffRollParam) == 0x000001, "Wrong size on StaffRollWidget_BP_SetUpStaffRollParam");
static_assert(offsetof(StaffRollWidget_BP_SetUpStaffRollParam, ReturnValue) == 0x000000, "Member 'StaffRollWidget_BP_SetUpStaffRollParam::ReturnValue' has a wrong offset!");

// Function OutGameModule.StaffRollWidget.BP_SetUpTextCell
// 0x0008 (0x0008 - 0x0000)
struct StaffRollWidget_BP_SetUpTextCell final
{
public:
	class UStaffRollCell*                         Cell;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaffRollWidget_BP_SetUpTextCell) == 0x000008, "Wrong alignment on StaffRollWidget_BP_SetUpTextCell");
static_assert(sizeof(StaffRollWidget_BP_SetUpTextCell) == 0x000008, "Wrong size on StaffRollWidget_BP_SetUpTextCell");
static_assert(offsetof(StaffRollWidget_BP_SetUpTextCell, Cell) == 0x000000, "Member 'StaffRollWidget_BP_SetUpTextCell::Cell' has a wrong offset!");

// Function OutGameModule.StaffRollWidget.BP_SetUpTextLargeCell
// 0x0008 (0x0008 - 0x0000)
struct StaffRollWidget_BP_SetUpTextLargeCell final
{
public:
	class UStaffRollLargeCell*                    Cell;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaffRollWidget_BP_SetUpTextLargeCell) == 0x000008, "Wrong alignment on StaffRollWidget_BP_SetUpTextLargeCell");
static_assert(sizeof(StaffRollWidget_BP_SetUpTextLargeCell) == 0x000008, "Wrong size on StaffRollWidget_BP_SetUpTextLargeCell");
static_assert(offsetof(StaffRollWidget_BP_SetUpTextLargeCell, Cell) == 0x000000, "Member 'StaffRollWidget_BP_SetUpTextLargeCell::Cell' has a wrong offset!");

// Function OutGameModule.StaffRollWidget.GetDipNumberLines
// 0x0001 (0x0001 - 0x0000)
struct StaffRollWidget_GetDipNumberLines final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaffRollWidget_GetDipNumberLines) == 0x000001, "Wrong alignment on StaffRollWidget_GetDipNumberLines");
static_assert(sizeof(StaffRollWidget_GetDipNumberLines) == 0x000001, "Wrong size on StaffRollWidget_GetDipNumberLines");
static_assert(offsetof(StaffRollWidget_GetDipNumberLines, ReturnValue) == 0x000000, "Member 'StaffRollWidget_GetDipNumberLines::ReturnValue' has a wrong offset!");

// Function OutGameModule.StaffRollWidget.MoveScroll
// 0x0004 (0x0004 - 0x0000)
struct StaffRollWidget_MoveScroll final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaffRollWidget_MoveScroll) == 0x000004, "Wrong alignment on StaffRollWidget_MoveScroll");
static_assert(sizeof(StaffRollWidget_MoveScroll) == 0x000004, "Wrong size on StaffRollWidget_MoveScroll");
static_assert(offsetof(StaffRollWidget_MoveScroll, DeltaTime) == 0x000000, "Member 'StaffRollWidget_MoveScroll::DeltaTime' has a wrong offset!");

// DelegateFunction OutGameModule.StaffRollWidget.TickDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct StaffRollWidget_TickDelegate__DelegateSignature final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaffRollWidget_TickDelegate__DelegateSignature) == 0x000004, "Wrong alignment on StaffRollWidget_TickDelegate__DelegateSignature");
static_assert(sizeof(StaffRollWidget_TickDelegate__DelegateSignature) == 0x000004, "Wrong size on StaffRollWidget_TickDelegate__DelegateSignature");
static_assert(offsetof(StaffRollWidget_TickDelegate__DelegateSignature, DeltaTime) == 0x000000, "Member 'StaffRollWidget_TickDelegate__DelegateSignature::DeltaTime' has a wrong offset!");

// Function OutGameModule.PlayMenuBannerListWidget.DoCustomWidgetNavigation
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuBannerListWidget_DoCustomWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuBannerListWidget_DoCustomWidgetNavigation) == 0x000001, "Wrong alignment on PlayMenuBannerListWidget_DoCustomWidgetNavigation");
static_assert(sizeof(PlayMenuBannerListWidget_DoCustomWidgetNavigation) == 0x000001, "Wrong size on PlayMenuBannerListWidget_DoCustomWidgetNavigation");
static_assert(offsetof(PlayMenuBannerListWidget_DoCustomWidgetNavigation, UiNavigation) == 0x000000, "Member 'PlayMenuBannerListWidget_DoCustomWidgetNavigation::UiNavigation' has a wrong offset!");

// Function OutGameModule.PlayMenuBannerListWidget.OnAddFocusButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuBannerListWidget_OnAddFocusButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuBannerListWidget_OnAddFocusButtonEvent) == 0x000008, "Wrong alignment on PlayMenuBannerListWidget_OnAddFocusButtonEvent");
static_assert(sizeof(PlayMenuBannerListWidget_OnAddFocusButtonEvent) == 0x000010, "Wrong size on PlayMenuBannerListWidget_OnAddFocusButtonEvent");
static_assert(offsetof(PlayMenuBannerListWidget_OnAddFocusButtonEvent, Widget) == 0x000000, "Member 'PlayMenuBannerListWidget_OnAddFocusButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(PlayMenuBannerListWidget_OnAddFocusButtonEvent, InputType) == 0x000008, "Member 'PlayMenuBannerListWidget_OnAddFocusButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.PlayMenuBannerListWidget.OnDecideButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuBannerListWidget_OnDecideButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuBannerListWidget_OnDecideButtonEvent) == 0x000008, "Wrong alignment on PlayMenuBannerListWidget_OnDecideButtonEvent");
static_assert(sizeof(PlayMenuBannerListWidget_OnDecideButtonEvent) == 0x000010, "Wrong size on PlayMenuBannerListWidget_OnDecideButtonEvent");
static_assert(offsetof(PlayMenuBannerListWidget_OnDecideButtonEvent, Widget) == 0x000000, "Member 'PlayMenuBannerListWidget_OnDecideButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(PlayMenuBannerListWidget_OnDecideButtonEvent, InputType) == 0x000008, "Member 'PlayMenuBannerListWidget_OnDecideButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.PlayMenuBannerListWidget.SetFocusTop
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuBannerListWidget_SetFocusTop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuBannerListWidget_SetFocusTop) == 0x000001, "Wrong alignment on PlayMenuBannerListWidget_SetFocusTop");
static_assert(sizeof(PlayMenuBannerListWidget_SetFocusTop) == 0x000001, "Wrong size on PlayMenuBannerListWidget_SetFocusTop");
static_assert(offsetof(PlayMenuBannerListWidget_SetFocusTop, ReturnValue) == 0x000000, "Member 'PlayMenuBannerListWidget_SetFocusTop::ReturnValue' has a wrong offset!");

// Function OutGameModule.PlayMenuBattleStartButtonWidget.ChangeMarkImage
// 0x0004 (0x0004 - 0x0000)
struct PlayMenuBattleStartButtonWidget_ChangeMarkImage final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuBattleStartButtonWidget_ChangeMarkImage) == 0x000004, "Wrong alignment on PlayMenuBattleStartButtonWidget_ChangeMarkImage");
static_assert(sizeof(PlayMenuBattleStartButtonWidget_ChangeMarkImage) == 0x000004, "Wrong size on PlayMenuBattleStartButtonWidget_ChangeMarkImage");
static_assert(offsetof(PlayMenuBattleStartButtonWidget_ChangeMarkImage, Alpha) == 0x000000, "Member 'PlayMenuBattleStartButtonWidget_ChangeMarkImage::Alpha' has a wrong offset!");

// Function OutGameModule.PlayMenuBattleStartButtonWidget.SetCheckAnimation
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuBattleStartButtonWidget_SetCheckAnimation final
{
public:
	bool                                          Idle;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuBattleStartButtonWidget_SetCheckAnimation) == 0x000001, "Wrong alignment on PlayMenuBattleStartButtonWidget_SetCheckAnimation");
static_assert(sizeof(PlayMenuBattleStartButtonWidget_SetCheckAnimation) == 0x000001, "Wrong size on PlayMenuBattleStartButtonWidget_SetCheckAnimation");
static_assert(offsetof(PlayMenuBattleStartButtonWidget_SetCheckAnimation, Idle) == 0x000000, "Member 'PlayMenuBattleStartButtonWidget_SetCheckAnimation::Idle' has a wrong offset!");

// Function OutGameModule.PlayMenuBattleStartWidget.DoCustomNavigationBattleStart
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuBattleStartWidget_DoCustomNavigationBattleStart final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuBattleStartWidget_DoCustomNavigationBattleStart) == 0x000008, "Wrong alignment on PlayMenuBattleStartWidget_DoCustomNavigationBattleStart");
static_assert(sizeof(PlayMenuBattleStartWidget_DoCustomNavigationBattleStart) == 0x000010, "Wrong size on PlayMenuBattleStartWidget_DoCustomNavigationBattleStart");
static_assert(offsetof(PlayMenuBattleStartWidget_DoCustomNavigationBattleStart, UiNavigation) == 0x000000, "Member 'PlayMenuBattleStartWidget_DoCustomNavigationBattleStart::UiNavigation' has a wrong offset!");
static_assert(offsetof(PlayMenuBattleStartWidget_DoCustomNavigationBattleStart, ReturnValue) == 0x000008, "Member 'PlayMenuBattleStartWidget_DoCustomNavigationBattleStart::ReturnValue' has a wrong offset!");

// Function OutGameModule.PlayMenuBattleStartWidget.DoCustomNavigationCancelButton
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuBattleStartWidget_DoCustomNavigationCancelButton final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuBattleStartWidget_DoCustomNavigationCancelButton) == 0x000008, "Wrong alignment on PlayMenuBattleStartWidget_DoCustomNavigationCancelButton");
static_assert(sizeof(PlayMenuBattleStartWidget_DoCustomNavigationCancelButton) == 0x000010, "Wrong size on PlayMenuBattleStartWidget_DoCustomNavigationCancelButton");
static_assert(offsetof(PlayMenuBattleStartWidget_DoCustomNavigationCancelButton, UiNavigation) == 0x000000, "Member 'PlayMenuBattleStartWidget_DoCustomNavigationCancelButton::UiNavigation' has a wrong offset!");
static_assert(offsetof(PlayMenuBattleStartWidget_DoCustomNavigationCancelButton, ReturnValue) == 0x000008, "Member 'PlayMenuBattleStartWidget_DoCustomNavigationCancelButton::ReturnValue' has a wrong offset!");

// Function OutGameModule.PlayMenuBattleStartWidget.OnBattleSequenceCancel
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuBattleStartWidget_OnBattleSequenceCancel final
{
public:
	EBattleStartSequenceType                      SequenceType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuBattleStartWidget_OnBattleSequenceCancel) == 0x000001, "Wrong alignment on PlayMenuBattleStartWidget_OnBattleSequenceCancel");
static_assert(sizeof(PlayMenuBattleStartWidget_OnBattleSequenceCancel) == 0x000001, "Wrong size on PlayMenuBattleStartWidget_OnBattleSequenceCancel");
static_assert(offsetof(PlayMenuBattleStartWidget_OnBattleSequenceCancel, SequenceType) == 0x000000, "Member 'PlayMenuBattleStartWidget_OnBattleSequenceCancel::SequenceType' has a wrong offset!");

// Function OutGameModule.PlayMenuBattleStartWidget.OnChangeBattleSequence
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuBattleStartWidget_OnChangeBattleSequence final
{
public:
	EBattleStartSequenceType                      Sequence;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuBattleStartWidget_OnChangeBattleSequence) == 0x000001, "Wrong alignment on PlayMenuBattleStartWidget_OnChangeBattleSequence");
static_assert(sizeof(PlayMenuBattleStartWidget_OnChangeBattleSequence) == 0x000001, "Wrong size on PlayMenuBattleStartWidget_OnChangeBattleSequence");
static_assert(offsetof(PlayMenuBattleStartWidget_OnChangeBattleSequence, Sequence) == 0x000000, "Member 'PlayMenuBattleStartWidget_OnChangeBattleSequence::Sequence' has a wrong offset!");

// Function OutGameModule.PlayMenuBattleStartWidget.OnChangedSelectedCharacterEvent
// 0x0002 (0x0002 - 0x0000)
struct PlayMenuBattleStartWidget_OnChangedSelectedCharacterEvent final
{
public:
	bool                                          UnLocked;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableRental;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuBattleStartWidget_OnChangedSelectedCharacterEvent) == 0x000001, "Wrong alignment on PlayMenuBattleStartWidget_OnChangedSelectedCharacterEvent");
static_assert(sizeof(PlayMenuBattleStartWidget_OnChangedSelectedCharacterEvent) == 0x000002, "Wrong size on PlayMenuBattleStartWidget_OnChangedSelectedCharacterEvent");
static_assert(offsetof(PlayMenuBattleStartWidget_OnChangedSelectedCharacterEvent, UnLocked) == 0x000000, "Member 'PlayMenuBattleStartWidget_OnChangedSelectedCharacterEvent::UnLocked' has a wrong offset!");
static_assert(offsetof(PlayMenuBattleStartWidget_OnChangedSelectedCharacterEvent, EnableRental) == 0x000001, "Member 'PlayMenuBattleStartWidget_OnChangedSelectedCharacterEvent::EnableRental' has a wrong offset!");

// Function OutGameModule.PlayMenuBattleStartWidget.OnCloseTutorialWindow
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuBattleStartWidget_OnCloseTutorialWindow final
{
public:
	ETutorialPopupScene                           Scene;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuBattleStartWidget_OnCloseTutorialWindow) == 0x000001, "Wrong alignment on PlayMenuBattleStartWidget_OnCloseTutorialWindow");
static_assert(sizeof(PlayMenuBattleStartWidget_OnCloseTutorialWindow) == 0x000001, "Wrong size on PlayMenuBattleStartWidget_OnCloseTutorialWindow");
static_assert(offsetof(PlayMenuBattleStartWidget_OnCloseTutorialWindow, Scene) == 0x000000, "Member 'PlayMenuBattleStartWidget_OnCloseTutorialWindow::Scene' has a wrong offset!");

// Function OutGameModule.PlayMenuBattleStartWidget.OnDecideBattleStartEvent
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuBattleStartWidget_OnDecideBattleStartEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuBattleStartWidget_OnDecideBattleStartEvent) == 0x000008, "Wrong alignment on PlayMenuBattleStartWidget_OnDecideBattleStartEvent");
static_assert(sizeof(PlayMenuBattleStartWidget_OnDecideBattleStartEvent) == 0x000010, "Wrong size on PlayMenuBattleStartWidget_OnDecideBattleStartEvent");
static_assert(offsetof(PlayMenuBattleStartWidget_OnDecideBattleStartEvent, Widget) == 0x000000, "Member 'PlayMenuBattleStartWidget_OnDecideBattleStartEvent::Widget' has a wrong offset!");
static_assert(offsetof(PlayMenuBattleStartWidget_OnDecideBattleStartEvent, InputType) == 0x000008, "Member 'PlayMenuBattleStartWidget_OnDecideBattleStartEvent::InputType' has a wrong offset!");

// Function OutGameModule.PlayMenuBattleStartWidget.OnDecideButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuBattleStartWidget_OnDecideButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuBattleStartWidget_OnDecideButtonEvent) == 0x000008, "Wrong alignment on PlayMenuBattleStartWidget_OnDecideButtonEvent");
static_assert(sizeof(PlayMenuBattleStartWidget_OnDecideButtonEvent) == 0x000010, "Wrong size on PlayMenuBattleStartWidget_OnDecideButtonEvent");
static_assert(offsetof(PlayMenuBattleStartWidget_OnDecideButtonEvent, Widget) == 0x000000, "Member 'PlayMenuBattleStartWidget_OnDecideButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(PlayMenuBattleStartWidget_OnDecideButtonEvent, InputType) == 0x000008, "Member 'PlayMenuBattleStartWidget_OnDecideButtonEvent::InputType' has a wrong offset!");

// DelegateFunction OutGameModule.PlayMenuBattleStartWidget.OnNavigationOutEventDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuBattleStartWidget_OnNavigationOutEventDelegate__DelegateSignature final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuBattleStartWidget_OnNavigationOutEventDelegate__DelegateSignature) == 0x000001, "Wrong alignment on PlayMenuBattleStartWidget_OnNavigationOutEventDelegate__DelegateSignature");
static_assert(sizeof(PlayMenuBattleStartWidget_OnNavigationOutEventDelegate__DelegateSignature) == 0x000001, "Wrong size on PlayMenuBattleStartWidget_OnNavigationOutEventDelegate__DelegateSignature");
static_assert(offsetof(PlayMenuBattleStartWidget_OnNavigationOutEventDelegate__DelegateSignature, UiNavigation) == 0x000000, "Member 'PlayMenuBattleStartWidget_OnNavigationOutEventDelegate__DelegateSignature::UiNavigation' has a wrong offset!");

// Function OutGameModule.PlayMenuBattleStartWidget.OnRemovedFromFocusBattleStart
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuBattleStartWidget_OnRemovedFromFocusBattleStart final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuBattleStartWidget_OnRemovedFromFocusBattleStart) == 0x000008, "Wrong alignment on PlayMenuBattleStartWidget_OnRemovedFromFocusBattleStart");
static_assert(sizeof(PlayMenuBattleStartWidget_OnRemovedFromFocusBattleStart) == 0x000010, "Wrong size on PlayMenuBattleStartWidget_OnRemovedFromFocusBattleStart");
static_assert(offsetof(PlayMenuBattleStartWidget_OnRemovedFromFocusBattleStart, Widget) == 0x000000, "Member 'PlayMenuBattleStartWidget_OnRemovedFromFocusBattleStart::Widget' has a wrong offset!");
static_assert(offsetof(PlayMenuBattleStartWidget_OnRemovedFromFocusBattleStart, InputType) == 0x000008, "Member 'PlayMenuBattleStartWidget_OnRemovedFromFocusBattleStart::InputType' has a wrong offset!");

// Function OutGameModule.PlayMenuBattleStartWidget.OnRentalPointUpdatedEvent
// 0x0004 (0x0004 - 0x0000)
struct PlayMenuBattleStartWidget_OnRentalPointUpdatedEvent final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuBattleStartWidget_OnRentalPointUpdatedEvent) == 0x000004, "Wrong alignment on PlayMenuBattleStartWidget_OnRentalPointUpdatedEvent");
static_assert(sizeof(PlayMenuBattleStartWidget_OnRentalPointUpdatedEvent) == 0x000004, "Wrong size on PlayMenuBattleStartWidget_OnRentalPointUpdatedEvent");
static_assert(offsetof(PlayMenuBattleStartWidget_OnRentalPointUpdatedEvent, Value) == 0x000000, "Member 'PlayMenuBattleStartWidget_OnRentalPointUpdatedEvent::Value' has a wrong offset!");

// Function OutGameModule.PlayMenuBattleStartWidget.PlayBattleSequenceAnimation
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuBattleStartWidget_PlayBattleSequenceAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuBattleStartWidget_PlayBattleSequenceAnimation) == 0x000001, "Wrong alignment on PlayMenuBattleStartWidget_PlayBattleSequenceAnimation");
static_assert(sizeof(PlayMenuBattleStartWidget_PlayBattleSequenceAnimation) == 0x000001, "Wrong size on PlayMenuBattleStartWidget_PlayBattleSequenceAnimation");
static_assert(offsetof(PlayMenuBattleStartWidget_PlayBattleSequenceAnimation, ReturnValue) == 0x000000, "Member 'PlayMenuBattleStartWidget_PlayBattleSequenceAnimation::ReturnValue' has a wrong offset!");

// Function OutGameModule.PlayMenuBattleStartWidget.SetBattleStartButtonEnable
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuBattleStartWidget_SetBattleStartButtonEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuBattleStartWidget_SetBattleStartButtonEnable) == 0x000001, "Wrong alignment on PlayMenuBattleStartWidget_SetBattleStartButtonEnable");
static_assert(sizeof(PlayMenuBattleStartWidget_SetBattleStartButtonEnable) == 0x000001, "Wrong size on PlayMenuBattleStartWidget_SetBattleStartButtonEnable");
static_assert(offsetof(PlayMenuBattleStartWidget_SetBattleStartButtonEnable, bEnable) == 0x000000, "Member 'PlayMenuBattleStartWidget_SetBattleStartButtonEnable::bEnable' has a wrong offset!");

// Function OutGameModule.PlayMenuBattleStartWidget.SetFocuseBattleStartWidget
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuBattleStartWidget_SetFocuseBattleStartWidget final
{
public:
	EUINavigation                                 UiFromOtherNavigation;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuBattleStartWidget_SetFocuseBattleStartWidget) == 0x000008, "Wrong alignment on PlayMenuBattleStartWidget_SetFocuseBattleStartWidget");
static_assert(sizeof(PlayMenuBattleStartWidget_SetFocuseBattleStartWidget) == 0x000010, "Wrong size on PlayMenuBattleStartWidget_SetFocuseBattleStartWidget");
static_assert(offsetof(PlayMenuBattleStartWidget_SetFocuseBattleStartWidget, UiFromOtherNavigation) == 0x000000, "Member 'PlayMenuBattleStartWidget_SetFocuseBattleStartWidget::UiFromOtherNavigation' has a wrong offset!");
static_assert(offsetof(PlayMenuBattleStartWidget_SetFocuseBattleStartWidget, ReturnValue) == 0x000008, "Member 'PlayMenuBattleStartWidget_SetFocuseBattleStartWidget::ReturnValue' has a wrong offset!");

// Function OutGameModule.PlayMenuBattleStartWidget.SetGrayOutBattleStart
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuBattleStartWidget_SetGrayOutBattleStart final
{
public:
	bool                                          IsGrayOut;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuBattleStartWidget_SetGrayOutBattleStart) == 0x000001, "Wrong alignment on PlayMenuBattleStartWidget_SetGrayOutBattleStart");
static_assert(sizeof(PlayMenuBattleStartWidget_SetGrayOutBattleStart) == 0x000001, "Wrong size on PlayMenuBattleStartWidget_SetGrayOutBattleStart");
static_assert(offsetof(PlayMenuBattleStartWidget_SetGrayOutBattleStart, IsGrayOut) == 0x000000, "Member 'PlayMenuBattleStartWidget_SetGrayOutBattleStart::IsGrayOut' has a wrong offset!");

// Function OutGameModule.PlayMenuBattleStartWidget.SetGrayOutBattleStartImage
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuBattleStartWidget_SetGrayOutBattleStartImage final
{
public:
	bool                                          IsGrayOut;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuBattleStartWidget_SetGrayOutBattleStartImage) == 0x000001, "Wrong alignment on PlayMenuBattleStartWidget_SetGrayOutBattleStartImage");
static_assert(sizeof(PlayMenuBattleStartWidget_SetGrayOutBattleStartImage) == 0x000001, "Wrong size on PlayMenuBattleStartWidget_SetGrayOutBattleStartImage");
static_assert(offsetof(PlayMenuBattleStartWidget_SetGrayOutBattleStartImage, IsGrayOut) == 0x000000, "Member 'PlayMenuBattleStartWidget_SetGrayOutBattleStartImage::IsGrayOut' has a wrong offset!");

// Function OutGameModule.PlayMenuBattleStartWidget.SetOpenCharacterLevel
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuBattleStartWidget_SetOpenCharacterLevel final
{
public:
	bool                                          OpenCharacterLevel;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuBattleStartWidget_SetOpenCharacterLevel) == 0x000001, "Wrong alignment on PlayMenuBattleStartWidget_SetOpenCharacterLevel");
static_assert(sizeof(PlayMenuBattleStartWidget_SetOpenCharacterLevel) == 0x000001, "Wrong size on PlayMenuBattleStartWidget_SetOpenCharacterLevel");
static_assert(offsetof(PlayMenuBattleStartWidget_SetOpenCharacterLevel, OpenCharacterLevel) == 0x000000, "Member 'PlayMenuBattleStartWidget_SetOpenCharacterLevel::OpenCharacterLevel' has a wrong offset!");

// Function OutGameModule.ShopItemWidget.BuyItem
// 0x0010 (0x0010 - 0x0000)
struct ShopItemWidget_BuyItem final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShopItemWidget_BuyItem) == 0x000008, "Wrong alignment on ShopItemWidget_BuyItem");
static_assert(sizeof(ShopItemWidget_BuyItem) == 0x000010, "Wrong size on ShopItemWidget_BuyItem");
static_assert(offsetof(ShopItemWidget_BuyItem, Widget) == 0x000000, "Member 'ShopItemWidget_BuyItem::Widget' has a wrong offset!");
static_assert(offsetof(ShopItemWidget_BuyItem, InputType) == 0x000008, "Member 'ShopItemWidget_BuyItem::InputType' has a wrong offset!");

// Function OutGameModule.ShopItemWidget.OnDecidePlaySample
// 0x0010 (0x0010 - 0x0000)
struct ShopItemWidget_OnDecidePlaySample final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShopItemWidget_OnDecidePlaySample) == 0x000008, "Wrong alignment on ShopItemWidget_OnDecidePlaySample");
static_assert(sizeof(ShopItemWidget_OnDecidePlaySample) == 0x000010, "Wrong size on ShopItemWidget_OnDecidePlaySample");
static_assert(offsetof(ShopItemWidget_OnDecidePlaySample, Widget) == 0x000000, "Member 'ShopItemWidget_OnDecidePlaySample::Widget' has a wrong offset!");
static_assert(offsetof(ShopItemWidget_OnDecidePlaySample, InputType) == 0x000008, "Member 'ShopItemWidget_OnDecidePlaySample::InputType' has a wrong offset!");

// Function OutGameModule.ShopItemWidget.OnSetShowSale
// 0x0004 (0x0004 - 0x0000)
struct ShopItemWidget_OnSetShowSale final
{
public:
	int32                                         InPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopItemWidget_OnSetShowSale) == 0x000004, "Wrong alignment on ShopItemWidget_OnSetShowSale");
static_assert(sizeof(ShopItemWidget_OnSetShowSale) == 0x000004, "Wrong size on ShopItemWidget_OnSetShowSale");
static_assert(offsetof(ShopItemWidget_OnSetShowSale, InPercent) == 0x000000, "Member 'ShopItemWidget_OnSetShowSale::InPercent' has a wrong offset!");

// Function OutGameModule.ShopItemWidget.SetBg
// 0x00F0 (0x00F0 - 0x0000)
struct ShopItemWidget_SetBg final
{
public:
	struct FSlateBrush                            bgBrush;                                           // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector2D                              bgSize;                                            // 0x00D0(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WidgetSize;                                        // 0x00D8(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIconItemFit;                                      // 0x00E0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0xF];                                       // 0x00E1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShopItemWidget_SetBg) == 0x000010, "Wrong alignment on ShopItemWidget_SetBg");
static_assert(sizeof(ShopItemWidget_SetBg) == 0x0000F0, "Wrong size on ShopItemWidget_SetBg");
static_assert(offsetof(ShopItemWidget_SetBg, bgBrush) == 0x000000, "Member 'ShopItemWidget_SetBg::bgBrush' has a wrong offset!");
static_assert(offsetof(ShopItemWidget_SetBg, bgSize) == 0x0000D0, "Member 'ShopItemWidget_SetBg::bgSize' has a wrong offset!");
static_assert(offsetof(ShopItemWidget_SetBg, WidgetSize) == 0x0000D8, "Member 'ShopItemWidget_SetBg::WidgetSize' has a wrong offset!");
static_assert(offsetof(ShopItemWidget_SetBg, bIconItemFit) == 0x0000E0, "Member 'ShopItemWidget_SetBg::bIconItemFit' has a wrong offset!");

// Function OutGameModule.ShopItemWidget.SetCurrencyCount
// 0x0004 (0x0004 - 0x0000)
struct ShopItemWidget_SetCurrencyCount final
{
public:
	int32                                         CurrencyCount;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopItemWidget_SetCurrencyCount) == 0x000004, "Wrong alignment on ShopItemWidget_SetCurrencyCount");
static_assert(sizeof(ShopItemWidget_SetCurrencyCount) == 0x000004, "Wrong size on ShopItemWidget_SetCurrencyCount");
static_assert(offsetof(ShopItemWidget_SetCurrencyCount, CurrencyCount) == 0x000000, "Member 'ShopItemWidget_SetCurrencyCount::CurrencyCount' has a wrong offset!");

// Function OutGameModule.ShopItemWidget.SetEventView
// 0x0001 (0x0001 - 0x0000)
struct ShopItemWidget_SetEventView final
{
public:
	bool                                          bEvent;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopItemWidget_SetEventView) == 0x000001, "Wrong alignment on ShopItemWidget_SetEventView");
static_assert(sizeof(ShopItemWidget_SetEventView) == 0x000001, "Wrong size on ShopItemWidget_SetEventView");
static_assert(offsetof(ShopItemWidget_SetEventView, bEvent) == 0x000000, "Member 'ShopItemWidget_SetEventView::bEvent' has a wrong offset!");

// Function OutGameModule.ShopItemWidget.SetPurchased
// 0x0001 (0x0001 - 0x0000)
struct ShopItemWidget_SetPurchased final
{
public:
	bool                                          bPurchased;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopItemWidget_SetPurchased) == 0x000001, "Wrong alignment on ShopItemWidget_SetPurchased");
static_assert(sizeof(ShopItemWidget_SetPurchased) == 0x000001, "Wrong size on ShopItemWidget_SetPurchased");
static_assert(offsetof(ShopItemWidget_SetPurchased, bPurchased) == 0x000000, "Member 'ShopItemWidget_SetPurchased::bPurchased' has a wrong offset!");

// Function OutGameModule.ShopItemWidget.SetPurchaseLimit
// 0x0008 (0x0008 - 0x0000)
struct ShopItemWidget_SetPurchaseLimit final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopItemWidget_SetPurchaseLimit) == 0x000004, "Wrong alignment on ShopItemWidget_SetPurchaseLimit");
static_assert(sizeof(ShopItemWidget_SetPurchaseLimit) == 0x000008, "Wrong size on ShopItemWidget_SetPurchaseLimit");
static_assert(offsetof(ShopItemWidget_SetPurchaseLimit, Num) == 0x000000, "Member 'ShopItemWidget_SetPurchaseLimit::Num' has a wrong offset!");
static_assert(offsetof(ShopItemWidget_SetPurchaseLimit, Max) == 0x000004, "Member 'ShopItemWidget_SetPurchaseLimit::Max' has a wrong offset!");

// Function OutGameModule.ShopItemWidget.SetShopItemName
// 0x0018 (0x0018 - 0x0000)
struct ShopItemWidget_SetShopItemName final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopItemWidget_SetShopItemName) == 0x000008, "Wrong alignment on ShopItemWidget_SetShopItemName");
static_assert(sizeof(ShopItemWidget_SetShopItemName) == 0x000018, "Wrong size on ShopItemWidget_SetShopItemName");
static_assert(offsetof(ShopItemWidget_SetShopItemName, InText) == 0x000000, "Member 'ShopItemWidget_SetShopItemName::InText' has a wrong offset!");

// Function OutGameModule.PlayMenuBelt.OnChangeBattleSequence
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuBelt_OnChangeBattleSequence final
{
public:
	EBattleStartSequenceType                      Sequence;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuBelt_OnChangeBattleSequence) == 0x000001, "Wrong alignment on PlayMenuBelt_OnChangeBattleSequence");
static_assert(sizeof(PlayMenuBelt_OnChangeBattleSequence) == 0x000001, "Wrong size on PlayMenuBelt_OnChangeBattleSequence");
static_assert(offsetof(PlayMenuBelt_OnChangeBattleSequence, Sequence) == 0x000000, "Member 'PlayMenuBelt_OnChangeBattleSequence::Sequence' has a wrong offset!");

// Function OutGameModule.PlayMenuHamburgerEntryWidget.CallSelectEvent
// 0x0008 (0x0008 - 0x0000)
struct PlayMenuHamburgerEntryWidget_CallSelectEvent final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuHamburgerEntryWidget_CallSelectEvent) == 0x000008, "Wrong alignment on PlayMenuHamburgerEntryWidget_CallSelectEvent");
static_assert(sizeof(PlayMenuHamburgerEntryWidget_CallSelectEvent) == 0x000008, "Wrong size on PlayMenuHamburgerEntryWidget_CallSelectEvent");
static_assert(offsetof(PlayMenuHamburgerEntryWidget_CallSelectEvent, Widget) == 0x000000, "Member 'PlayMenuHamburgerEntryWidget_CallSelectEvent::Widget' has a wrong offset!");

// DelegateFunction OutGameModule.PlayMenuHamburgerEntryWidget.OnSelectEventDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct PlayMenuHamburgerEntryWidget_OnSelectEventDelegate__DelegateSignature final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuHamburgerEntryWidget_OnSelectEventDelegate__DelegateSignature) == 0x000008, "Wrong alignment on PlayMenuHamburgerEntryWidget_OnSelectEventDelegate__DelegateSignature");
static_assert(sizeof(PlayMenuHamburgerEntryWidget_OnSelectEventDelegate__DelegateSignature) == 0x000008, "Wrong size on PlayMenuHamburgerEntryWidget_OnSelectEventDelegate__DelegateSignature");
static_assert(offsetof(PlayMenuHamburgerEntryWidget_OnSelectEventDelegate__DelegateSignature, Widget) == 0x000000, "Member 'PlayMenuHamburgerEntryWidget_OnSelectEventDelegate__DelegateSignature::Widget' has a wrong offset!");

// Function OutGameModule.PlayMenuHamburgerLargeIconWidget.GetIconFocusable
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuHamburgerLargeIconWidget_GetIconFocusable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuHamburgerLargeIconWidget_GetIconFocusable) == 0x000001, "Wrong alignment on PlayMenuHamburgerLargeIconWidget_GetIconFocusable");
static_assert(sizeof(PlayMenuHamburgerLargeIconWidget_GetIconFocusable) == 0x000001, "Wrong size on PlayMenuHamburgerLargeIconWidget_GetIconFocusable");
static_assert(offsetof(PlayMenuHamburgerLargeIconWidget_GetIconFocusable, ReturnValue) == 0x000000, "Member 'PlayMenuHamburgerLargeIconWidget_GetIconFocusable::ReturnValue' has a wrong offset!");

// Function OutGameModule.PlayMenuHamburgerLargeIconWidget.GetIconIndex
// 0x0004 (0x0004 - 0x0000)
struct PlayMenuHamburgerLargeIconWidget_GetIconIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuHamburgerLargeIconWidget_GetIconIndex) == 0x000004, "Wrong alignment on PlayMenuHamburgerLargeIconWidget_GetIconIndex");
static_assert(sizeof(PlayMenuHamburgerLargeIconWidget_GetIconIndex) == 0x000004, "Wrong size on PlayMenuHamburgerLargeIconWidget_GetIconIndex");
static_assert(offsetof(PlayMenuHamburgerLargeIconWidget_GetIconIndex, ReturnValue) == 0x000000, "Member 'PlayMenuHamburgerLargeIconWidget_GetIconIndex::ReturnValue' has a wrong offset!");

// Function OutGameModule.PlayMenuHamburgerLargeIconWidget.GetLevel
// 0x0028 (0x0028 - 0x0000)
struct PlayMenuHamburgerLargeIconWidget_GetLevel final
{
public:
	TSoftObjectPtr<class UWorld>                  ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuHamburgerLargeIconWidget_GetLevel) == 0x000008, "Wrong alignment on PlayMenuHamburgerLargeIconWidget_GetLevel");
static_assert(sizeof(PlayMenuHamburgerLargeIconWidget_GetLevel) == 0x000028, "Wrong size on PlayMenuHamburgerLargeIconWidget_GetLevel");
static_assert(offsetof(PlayMenuHamburgerLargeIconWidget_GetLevel, ReturnValue) == 0x000000, "Member 'PlayMenuHamburgerLargeIconWidget_GetLevel::ReturnValue' has a wrong offset!");

// Function OutGameModule.PlayMenuHamburgerLargeIconWidget.OnDecideWidget
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuHamburgerLargeIconWidget_OnDecideWidget final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuHamburgerLargeIconWidget_OnDecideWidget) == 0x000008, "Wrong alignment on PlayMenuHamburgerLargeIconWidget_OnDecideWidget");
static_assert(sizeof(PlayMenuHamburgerLargeIconWidget_OnDecideWidget) == 0x000010, "Wrong size on PlayMenuHamburgerLargeIconWidget_OnDecideWidget");
static_assert(offsetof(PlayMenuHamburgerLargeIconWidget_OnDecideWidget, Widget) == 0x000000, "Member 'PlayMenuHamburgerLargeIconWidget_OnDecideWidget::Widget' has a wrong offset!");
static_assert(offsetof(PlayMenuHamburgerLargeIconWidget_OnDecideWidget, InputType) == 0x000008, "Member 'PlayMenuHamburgerLargeIconWidget_OnDecideWidget::InputType' has a wrong offset!");

// Function OutGameModule.PlayMenuHamburgerLargeIconWidget.OnPressButtonWidget
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuHamburgerLargeIconWidget_OnPressButtonWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuHamburgerLargeIconWidget_OnPressButtonWidget) == 0x000008, "Wrong alignment on PlayMenuHamburgerLargeIconWidget_OnPressButtonWidget");
static_assert(sizeof(PlayMenuHamburgerLargeIconWidget_OnPressButtonWidget) == 0x000010, "Wrong size on PlayMenuHamburgerLargeIconWidget_OnPressButtonWidget");
static_assert(offsetof(PlayMenuHamburgerLargeIconWidget_OnPressButtonWidget, Button) == 0x000000, "Member 'PlayMenuHamburgerLargeIconWidget_OnPressButtonWidget::Button' has a wrong offset!");
static_assert(offsetof(PlayMenuHamburgerLargeIconWidget_OnPressButtonWidget, InputType) == 0x000008, "Member 'PlayMenuHamburgerLargeIconWidget_OnPressButtonWidget::InputType' has a wrong offset!");

// Function OutGameModule.PlayMenuHamburgerLargeIconWidget.SetWidgetEnable
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuHamburgerLargeIconWidget_SetWidgetEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuHamburgerLargeIconWidget_SetWidgetEnable) == 0x000001, "Wrong alignment on PlayMenuHamburgerLargeIconWidget_SetWidgetEnable");
static_assert(sizeof(PlayMenuHamburgerLargeIconWidget_SetWidgetEnable) == 0x000001, "Wrong size on PlayMenuHamburgerLargeIconWidget_SetWidgetEnable");
static_assert(offsetof(PlayMenuHamburgerLargeIconWidget_SetWidgetEnable, Enable) == 0x000000, "Member 'PlayMenuHamburgerLargeIconWidget_SetWidgetEnable::Enable' has a wrong offset!");

// Function OutGameModule.PlayMenuHamburgerLargeIconWidget.SetWidgetEnableEvent
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuHamburgerLargeIconWidget_SetWidgetEnableEvent final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuHamburgerLargeIconWidget_SetWidgetEnableEvent) == 0x000001, "Wrong alignment on PlayMenuHamburgerLargeIconWidget_SetWidgetEnableEvent");
static_assert(sizeof(PlayMenuHamburgerLargeIconWidget_SetWidgetEnableEvent) == 0x000001, "Wrong size on PlayMenuHamburgerLargeIconWidget_SetWidgetEnableEvent");
static_assert(offsetof(PlayMenuHamburgerLargeIconWidget_SetWidgetEnableEvent, Enable) == 0x000000, "Member 'PlayMenuHamburgerLargeIconWidget_SetWidgetEnableEvent::Enable' has a wrong offset!");

// Function OutGameModule.PlayMenuIconEntryWidget.OnChangeBattleSequence
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuIconEntryWidget_OnChangeBattleSequence final
{
public:
	EBattleStartSequenceType                      Sequence;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuIconEntryWidget_OnChangeBattleSequence) == 0x000001, "Wrong alignment on PlayMenuIconEntryWidget_OnChangeBattleSequence");
static_assert(sizeof(PlayMenuIconEntryWidget_OnChangeBattleSequence) == 0x000001, "Wrong size on PlayMenuIconEntryWidget_OnChangeBattleSequence");
static_assert(offsetof(PlayMenuIconEntryWidget_OnChangeBattleSequence, Sequence) == 0x000000, "Member 'PlayMenuIconEntryWidget_OnChangeBattleSequence::Sequence' has a wrong offset!");

// Function OutGameModule.PlayMenuIconEntryWidget.OnGrayedOut
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuIconEntryWidget_OnGrayedOut final
{
public:
	bool                                          IsGrayedOut;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuIconEntryWidget_OnGrayedOut) == 0x000001, "Wrong alignment on PlayMenuIconEntryWidget_OnGrayedOut");
static_assert(sizeof(PlayMenuIconEntryWidget_OnGrayedOut) == 0x000001, "Wrong size on PlayMenuIconEntryWidget_OnGrayedOut");
static_assert(offsetof(PlayMenuIconEntryWidget_OnGrayedOut, IsGrayedOut) == 0x000000, "Member 'PlayMenuIconEntryWidget_OnGrayedOut::IsGrayedOut' has a wrong offset!");

// Function OutGameModule.PlayMenuIconEntryWidget.OnPressButtonWidget
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuIconEntryWidget_OnPressButtonWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuIconEntryWidget_OnPressButtonWidget) == 0x000008, "Wrong alignment on PlayMenuIconEntryWidget_OnPressButtonWidget");
static_assert(sizeof(PlayMenuIconEntryWidget_OnPressButtonWidget) == 0x000010, "Wrong size on PlayMenuIconEntryWidget_OnPressButtonWidget");
static_assert(offsetof(PlayMenuIconEntryWidget_OnPressButtonWidget, Button) == 0x000000, "Member 'PlayMenuIconEntryWidget_OnPressButtonWidget::Button' has a wrong offset!");
static_assert(offsetof(PlayMenuIconEntryWidget_OnPressButtonWidget, InputType) == 0x000008, "Member 'PlayMenuIconEntryWidget_OnPressButtonWidget::InputType' has a wrong offset!");

// Function OutGameModule.PlayMenuIconEntryWidget.SetIconCount
// 0x0004 (0x0004 - 0x0000)
struct PlayMenuIconEntryWidget_SetIconCount final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuIconEntryWidget_SetIconCount) == 0x000004, "Wrong alignment on PlayMenuIconEntryWidget_SetIconCount");
static_assert(sizeof(PlayMenuIconEntryWidget_SetIconCount) == 0x000004, "Wrong size on PlayMenuIconEntryWidget_SetIconCount");
static_assert(offsetof(PlayMenuIconEntryWidget_SetIconCount, Count) == 0x000000, "Member 'PlayMenuIconEntryWidget_SetIconCount::Count' has a wrong offset!");

// Function OutGameModule.PlayMenuMessage.OnChangeBattleSequence
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuMessage_OnChangeBattleSequence final
{
public:
	EBattleStartSequenceType                      Sequence;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuMessage_OnChangeBattleSequence) == 0x000001, "Wrong alignment on PlayMenuMessage_OnChangeBattleSequence");
static_assert(sizeof(PlayMenuMessage_OnChangeBattleSequence) == 0x000001, "Wrong size on PlayMenuMessage_OnChangeBattleSequence");
static_assert(offsetof(PlayMenuMessage_OnChangeBattleSequence, Sequence) == 0x000000, "Member 'PlayMenuMessage_OnChangeBattleSequence::Sequence' has a wrong offset!");

// Function OutGameModule.PlayMenuMessage.OnChangedSelectedCharacterEvent
// 0x0002 (0x0002 - 0x0000)
struct PlayMenuMessage_OnChangedSelectedCharacterEvent final
{
public:
	bool                                          UnLocked;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableRental;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuMessage_OnChangedSelectedCharacterEvent) == 0x000001, "Wrong alignment on PlayMenuMessage_OnChangedSelectedCharacterEvent");
static_assert(sizeof(PlayMenuMessage_OnChangedSelectedCharacterEvent) == 0x000002, "Wrong size on PlayMenuMessage_OnChangedSelectedCharacterEvent");
static_assert(offsetof(PlayMenuMessage_OnChangedSelectedCharacterEvent, UnLocked) == 0x000000, "Member 'PlayMenuMessage_OnChangedSelectedCharacterEvent::UnLocked' has a wrong offset!");
static_assert(offsetof(PlayMenuMessage_OnChangedSelectedCharacterEvent, EnableRental) == 0x000001, "Member 'PlayMenuMessage_OnChangedSelectedCharacterEvent::EnableRental' has a wrong offset!");

// Function OutGameModule.PlayMenuMessage.OnRentalPointUpdatedEvent
// 0x0004 (0x0004 - 0x0000)
struct PlayMenuMessage_OnRentalPointUpdatedEvent final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuMessage_OnRentalPointUpdatedEvent) == 0x000004, "Wrong alignment on PlayMenuMessage_OnRentalPointUpdatedEvent");
static_assert(sizeof(PlayMenuMessage_OnRentalPointUpdatedEvent) == 0x000004, "Wrong size on PlayMenuMessage_OnRentalPointUpdatedEvent");
static_assert(offsetof(PlayMenuMessage_OnRentalPointUpdatedEvent, Value) == 0x000000, "Member 'PlayMenuMessage_OnRentalPointUpdatedEvent::Value' has a wrong offset!");

// Function OutGameModule.PlayMenuMyAD.BP_SetButtonFocus
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuMyAD_BP_SetButtonFocus final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuMyAD_BP_SetButtonFocus) == 0x000008, "Wrong alignment on PlayMenuMyAD_BP_SetButtonFocus");
static_assert(sizeof(PlayMenuMyAD_BP_SetButtonFocus) == 0x000010, "Wrong size on PlayMenuMyAD_BP_SetButtonFocus");
static_assert(offsetof(PlayMenuMyAD_BP_SetButtonFocus, InNavigation) == 0x000000, "Member 'PlayMenuMyAD_BP_SetButtonFocus::InNavigation' has a wrong offset!");
static_assert(offsetof(PlayMenuMyAD_BP_SetButtonFocus, ReturnValue) == 0x000008, "Member 'PlayMenuMyAD_BP_SetButtonFocus::ReturnValue' has a wrong offset!");

// Function OutGameModule.PlayMenuMyAD.OnChangeBattleSequence
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuMyAD_OnChangeBattleSequence final
{
public:
	EBattleStartSequenceType                      Sequence;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuMyAD_OnChangeBattleSequence) == 0x000001, "Wrong alignment on PlayMenuMyAD_OnChangeBattleSequence");
static_assert(sizeof(PlayMenuMyAD_OnChangeBattleSequence) == 0x000001, "Wrong size on PlayMenuMyAD_OnChangeBattleSequence");
static_assert(offsetof(PlayMenuMyAD_OnChangeBattleSequence, Sequence) == 0x000000, "Member 'PlayMenuMyAD_OnChangeBattleSequence::Sequence' has a wrong offset!");

// Function OutGameModule.PlayMenuMyAD.OnDecideButton
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuMyAD_OnDecideButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuMyAD_OnDecideButton) == 0x000008, "Wrong alignment on PlayMenuMyAD_OnDecideButton");
static_assert(sizeof(PlayMenuMyAD_OnDecideButton) == 0x000010, "Wrong size on PlayMenuMyAD_OnDecideButton");
static_assert(offsetof(PlayMenuMyAD_OnDecideButton, Widget) == 0x000000, "Member 'PlayMenuMyAD_OnDecideButton::Widget' has a wrong offset!");
static_assert(offsetof(PlayMenuMyAD_OnDecideButton, InputType) == 0x000008, "Member 'PlayMenuMyAD_OnDecideButton::InputType' has a wrong offset!");

// Function OutGameModule.PlayMenuMyAD.OnGrayedOut
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuMyAD_OnGrayedOut final
{
public:
	bool                                          IsGrayedOut;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuMyAD_OnGrayedOut) == 0x000001, "Wrong alignment on PlayMenuMyAD_OnGrayedOut");
static_assert(sizeof(PlayMenuMyAD_OnGrayedOut) == 0x000001, "Wrong size on PlayMenuMyAD_OnGrayedOut");
static_assert(offsetof(PlayMenuMyAD_OnGrayedOut, IsGrayedOut) == 0x000000, "Member 'PlayMenuMyAD_OnGrayedOut::IsGrayedOut' has a wrong offset!");

// Function OutGameModule.PlayMenuMyAD.OnNegativeButton
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuMyAD_OnNegativeButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuMyAD_OnNegativeButton) == 0x000008, "Wrong alignment on PlayMenuMyAD_OnNegativeButton");
static_assert(sizeof(PlayMenuMyAD_OnNegativeButton) == 0x000010, "Wrong size on PlayMenuMyAD_OnNegativeButton");
static_assert(offsetof(PlayMenuMyAD_OnNegativeButton, Widget) == 0x000000, "Member 'PlayMenuMyAD_OnNegativeButton::Widget' has a wrong offset!");
static_assert(offsetof(PlayMenuMyAD_OnNegativeButton, InputType) == 0x000008, "Member 'PlayMenuMyAD_OnNegativeButton::InputType' has a wrong offset!");

// Function OutGameModule.PlayMenuMyAD.OnPressButton
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuMyAD_OnPressButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuMyAD_OnPressButton) == 0x000008, "Wrong alignment on PlayMenuMyAD_OnPressButton");
static_assert(sizeof(PlayMenuMyAD_OnPressButton) == 0x000010, "Wrong size on PlayMenuMyAD_OnPressButton");
static_assert(offsetof(PlayMenuMyAD_OnPressButton, Widget) == 0x000000, "Member 'PlayMenuMyAD_OnPressButton::Widget' has a wrong offset!");
static_assert(offsetof(PlayMenuMyAD_OnPressButton, InputType) == 0x000008, "Member 'PlayMenuMyAD_OnPressButton::InputType' has a wrong offset!");

// Function OutGameModule.PlayMenuMyAD.OnRemovedFromFocusButton
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuMyAD_OnRemovedFromFocusButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuMyAD_OnRemovedFromFocusButton) == 0x000008, "Wrong alignment on PlayMenuMyAD_OnRemovedFromFocusButton");
static_assert(sizeof(PlayMenuMyAD_OnRemovedFromFocusButton) == 0x000010, "Wrong size on PlayMenuMyAD_OnRemovedFromFocusButton");
static_assert(offsetof(PlayMenuMyAD_OnRemovedFromFocusButton, Widget) == 0x000000, "Member 'PlayMenuMyAD_OnRemovedFromFocusButton::Widget' has a wrong offset!");
static_assert(offsetof(PlayMenuMyAD_OnRemovedFromFocusButton, InputType) == 0x000008, "Member 'PlayMenuMyAD_OnRemovedFromFocusButton::InputType' has a wrong offset!");

// Function OutGameModule.PlayMenuPlayerStatusEntryWidget.DoCustomNavigationStatusButton
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuPlayerStatusEntryWidget_DoCustomNavigationStatusButton final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuPlayerStatusEntryWidget_DoCustomNavigationStatusButton) == 0x000008, "Wrong alignment on PlayMenuPlayerStatusEntryWidget_DoCustomNavigationStatusButton");
static_assert(sizeof(PlayMenuPlayerStatusEntryWidget_DoCustomNavigationStatusButton) == 0x000010, "Wrong size on PlayMenuPlayerStatusEntryWidget_DoCustomNavigationStatusButton");
static_assert(offsetof(PlayMenuPlayerStatusEntryWidget_DoCustomNavigationStatusButton, UiNavigation) == 0x000000, "Member 'PlayMenuPlayerStatusEntryWidget_DoCustomNavigationStatusButton::UiNavigation' has a wrong offset!");
static_assert(offsetof(PlayMenuPlayerStatusEntryWidget_DoCustomNavigationStatusButton, ReturnValue) == 0x000008, "Member 'PlayMenuPlayerStatusEntryWidget_DoCustomNavigationStatusButton::ReturnValue' has a wrong offset!");

// Function OutGameModule.PlayMenuPlayerStatusEntryWidget.OnAddedToFocusButtons
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuPlayerStatusEntryWidget_OnAddedToFocusButtons final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuPlayerStatusEntryWidget_OnAddedToFocusButtons) == 0x000008, "Wrong alignment on PlayMenuPlayerStatusEntryWidget_OnAddedToFocusButtons");
static_assert(sizeof(PlayMenuPlayerStatusEntryWidget_OnAddedToFocusButtons) == 0x000010, "Wrong size on PlayMenuPlayerStatusEntryWidget_OnAddedToFocusButtons");
static_assert(offsetof(PlayMenuPlayerStatusEntryWidget_OnAddedToFocusButtons, Widget) == 0x000000, "Member 'PlayMenuPlayerStatusEntryWidget_OnAddedToFocusButtons::Widget' has a wrong offset!");
static_assert(offsetof(PlayMenuPlayerStatusEntryWidget_OnAddedToFocusButtons, InputType) == 0x000008, "Member 'PlayMenuPlayerStatusEntryWidget_OnAddedToFocusButtons::InputType' has a wrong offset!");

// Function OutGameModule.PlayMenuPlayerStatusEntryWidget.OnAddedToFocusMouseAreaMyStatusButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuPlayerStatusEntryWidget_OnAddedToFocusMouseAreaMyStatusButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuPlayerStatusEntryWidget_OnAddedToFocusMouseAreaMyStatusButtonEvent) == 0x000008, "Wrong alignment on PlayMenuPlayerStatusEntryWidget_OnAddedToFocusMouseAreaMyStatusButtonEvent");
static_assert(sizeof(PlayMenuPlayerStatusEntryWidget_OnAddedToFocusMouseAreaMyStatusButtonEvent) == 0x000010, "Wrong size on PlayMenuPlayerStatusEntryWidget_OnAddedToFocusMouseAreaMyStatusButtonEvent");
static_assert(offsetof(PlayMenuPlayerStatusEntryWidget_OnAddedToFocusMouseAreaMyStatusButtonEvent, Widget) == 0x000000, "Member 'PlayMenuPlayerStatusEntryWidget_OnAddedToFocusMouseAreaMyStatusButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(PlayMenuPlayerStatusEntryWidget_OnAddedToFocusMouseAreaMyStatusButtonEvent, InputType) == 0x000008, "Member 'PlayMenuPlayerStatusEntryWidget_OnAddedToFocusMouseAreaMyStatusButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.PlayMenuPlayerStatusEntryWidget.OnAddedToFocusMyStatusButton
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuPlayerStatusEntryWidget_OnAddedToFocusMyStatusButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuPlayerStatusEntryWidget_OnAddedToFocusMyStatusButton) == 0x000008, "Wrong alignment on PlayMenuPlayerStatusEntryWidget_OnAddedToFocusMyStatusButton");
static_assert(sizeof(PlayMenuPlayerStatusEntryWidget_OnAddedToFocusMyStatusButton) == 0x000010, "Wrong size on PlayMenuPlayerStatusEntryWidget_OnAddedToFocusMyStatusButton");
static_assert(offsetof(PlayMenuPlayerStatusEntryWidget_OnAddedToFocusMyStatusButton, Widget) == 0x000000, "Member 'PlayMenuPlayerStatusEntryWidget_OnAddedToFocusMyStatusButton::Widget' has a wrong offset!");
static_assert(offsetof(PlayMenuPlayerStatusEntryWidget_OnAddedToFocusMyStatusButton, InputType) == 0x000008, "Member 'PlayMenuPlayerStatusEntryWidget_OnAddedToFocusMyStatusButton::InputType' has a wrong offset!");

// Function OutGameModule.PlayMenuPlayerStatusEntryWidget.OnDecideMouseAreaMyStatusButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuPlayerStatusEntryWidget_OnDecideMouseAreaMyStatusButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuPlayerStatusEntryWidget_OnDecideMouseAreaMyStatusButtonEvent) == 0x000008, "Wrong alignment on PlayMenuPlayerStatusEntryWidget_OnDecideMouseAreaMyStatusButtonEvent");
static_assert(sizeof(PlayMenuPlayerStatusEntryWidget_OnDecideMouseAreaMyStatusButtonEvent) == 0x000010, "Wrong size on PlayMenuPlayerStatusEntryWidget_OnDecideMouseAreaMyStatusButtonEvent");
static_assert(offsetof(PlayMenuPlayerStatusEntryWidget_OnDecideMouseAreaMyStatusButtonEvent, Widget) == 0x000000, "Member 'PlayMenuPlayerStatusEntryWidget_OnDecideMouseAreaMyStatusButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(PlayMenuPlayerStatusEntryWidget_OnDecideMouseAreaMyStatusButtonEvent, InputType) == 0x000008, "Member 'PlayMenuPlayerStatusEntryWidget_OnDecideMouseAreaMyStatusButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.PlayMenuPlayerStatusEntryWidget.OnDecideOthersMemeberButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuPlayerStatusEntryWidget_OnDecideOthersMemeberButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuPlayerStatusEntryWidget_OnDecideOthersMemeberButtonEvent) == 0x000008, "Wrong alignment on PlayMenuPlayerStatusEntryWidget_OnDecideOthersMemeberButtonEvent");
static_assert(sizeof(PlayMenuPlayerStatusEntryWidget_OnDecideOthersMemeberButtonEvent) == 0x000010, "Wrong size on PlayMenuPlayerStatusEntryWidget_OnDecideOthersMemeberButtonEvent");
static_assert(offsetof(PlayMenuPlayerStatusEntryWidget_OnDecideOthersMemeberButtonEvent, Widget) == 0x000000, "Member 'PlayMenuPlayerStatusEntryWidget_OnDecideOthersMemeberButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(PlayMenuPlayerStatusEntryWidget_OnDecideOthersMemeberButtonEvent, InputType) == 0x000008, "Member 'PlayMenuPlayerStatusEntryWidget_OnDecideOthersMemeberButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.PlayMenuPlayerStatusEntryWidget.OnDecideSelectButtonMyStatusEvent
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuPlayerStatusEntryWidget_OnDecideSelectButtonMyStatusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuPlayerStatusEntryWidget_OnDecideSelectButtonMyStatusEvent) == 0x000008, "Wrong alignment on PlayMenuPlayerStatusEntryWidget_OnDecideSelectButtonMyStatusEvent");
static_assert(sizeof(PlayMenuPlayerStatusEntryWidget_OnDecideSelectButtonMyStatusEvent) == 0x000010, "Wrong size on PlayMenuPlayerStatusEntryWidget_OnDecideSelectButtonMyStatusEvent");
static_assert(offsetof(PlayMenuPlayerStatusEntryWidget_OnDecideSelectButtonMyStatusEvent, Widget) == 0x000000, "Member 'PlayMenuPlayerStatusEntryWidget_OnDecideSelectButtonMyStatusEvent::Widget' has a wrong offset!");
static_assert(offsetof(PlayMenuPlayerStatusEntryWidget_OnDecideSelectButtonMyStatusEvent, InputType) == 0x000008, "Member 'PlayMenuPlayerStatusEntryWidget_OnDecideSelectButtonMyStatusEvent::InputType' has a wrong offset!");

// Function OutGameModule.PlayMenuPlayerStatusEntryWidget.OnDecideSelectKickButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuPlayerStatusEntryWidget_OnDecideSelectKickButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuPlayerStatusEntryWidget_OnDecideSelectKickButtonEvent) == 0x000008, "Wrong alignment on PlayMenuPlayerStatusEntryWidget_OnDecideSelectKickButtonEvent");
static_assert(sizeof(PlayMenuPlayerStatusEntryWidget_OnDecideSelectKickButtonEvent) == 0x000010, "Wrong size on PlayMenuPlayerStatusEntryWidget_OnDecideSelectKickButtonEvent");
static_assert(offsetof(PlayMenuPlayerStatusEntryWidget_OnDecideSelectKickButtonEvent, Widget) == 0x000000, "Member 'PlayMenuPlayerStatusEntryWidget_OnDecideSelectKickButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(PlayMenuPlayerStatusEntryWidget_OnDecideSelectKickButtonEvent, InputType) == 0x000008, "Member 'PlayMenuPlayerStatusEntryWidget_OnDecideSelectKickButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.PlayMenuPlayerStatusEntryWidget.OnMouseButtonDownMyStatus
// 0x0160 (0x0160 - 0x0000)
struct PlayMenuPlayerStatusEntryWidget_OnMouseButtonDownMyStatus final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuPlayerStatusEntryWidget_OnMouseButtonDownMyStatus) == 0x000008, "Wrong alignment on PlayMenuPlayerStatusEntryWidget_OnMouseButtonDownMyStatus");
static_assert(sizeof(PlayMenuPlayerStatusEntryWidget_OnMouseButtonDownMyStatus) == 0x000160, "Wrong size on PlayMenuPlayerStatusEntryWidget_OnMouseButtonDownMyStatus");
static_assert(offsetof(PlayMenuPlayerStatusEntryWidget_OnMouseButtonDownMyStatus, MyGeometry) == 0x000000, "Member 'PlayMenuPlayerStatusEntryWidget_OnMouseButtonDownMyStatus::MyGeometry' has a wrong offset!");
static_assert(offsetof(PlayMenuPlayerStatusEntryWidget_OnMouseButtonDownMyStatus, MouseEvent) == 0x000038, "Member 'PlayMenuPlayerStatusEntryWidget_OnMouseButtonDownMyStatus::MouseEvent' has a wrong offset!");
static_assert(offsetof(PlayMenuPlayerStatusEntryWidget_OnMouseButtonDownMyStatus, ReturnValue) == 0x0000A8, "Member 'PlayMenuPlayerStatusEntryWidget_OnMouseButtonDownMyStatus::ReturnValue' has a wrong offset!");

// DelegateFunction OutGameModule.PlayMenuPlayerStatusEntryWidget.OnNavigationOutButtonEventDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuPlayerStatusEntryWidget_OnNavigationOutButtonEventDelegate__DelegateSignature final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuPlayerStatusEntryWidget_OnNavigationOutButtonEventDelegate__DelegateSignature) == 0x000001, "Wrong alignment on PlayMenuPlayerStatusEntryWidget_OnNavigationOutButtonEventDelegate__DelegateSignature");
static_assert(sizeof(PlayMenuPlayerStatusEntryWidget_OnNavigationOutButtonEventDelegate__DelegateSignature) == 0x000001, "Wrong size on PlayMenuPlayerStatusEntryWidget_OnNavigationOutButtonEventDelegate__DelegateSignature");
static_assert(offsetof(PlayMenuPlayerStatusEntryWidget_OnNavigationOutButtonEventDelegate__DelegateSignature, UiNavigation) == 0x000000, "Member 'PlayMenuPlayerStatusEntryWidget_OnNavigationOutButtonEventDelegate__DelegateSignature::UiNavigation' has a wrong offset!");

// Function OutGameModule.PlayMenuPlayerStatusEntryWidget.OnRemovedFromFocusButtons
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuPlayerStatusEntryWidget_OnRemovedFromFocusButtons final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuPlayerStatusEntryWidget_OnRemovedFromFocusButtons) == 0x000008, "Wrong alignment on PlayMenuPlayerStatusEntryWidget_OnRemovedFromFocusButtons");
static_assert(sizeof(PlayMenuPlayerStatusEntryWidget_OnRemovedFromFocusButtons) == 0x000010, "Wrong size on PlayMenuPlayerStatusEntryWidget_OnRemovedFromFocusButtons");
static_assert(offsetof(PlayMenuPlayerStatusEntryWidget_OnRemovedFromFocusButtons, Widget) == 0x000000, "Member 'PlayMenuPlayerStatusEntryWidget_OnRemovedFromFocusButtons::Widget' has a wrong offset!");
static_assert(offsetof(PlayMenuPlayerStatusEntryWidget_OnRemovedFromFocusButtons, InputType) == 0x000008, "Member 'PlayMenuPlayerStatusEntryWidget_OnRemovedFromFocusButtons::InputType' has a wrong offset!");

// Function OutGameModule.PlayMenuPlayerStatusEntryWidget.OnRemovedFromFocusMyStatusButton
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuPlayerStatusEntryWidget_OnRemovedFromFocusMyStatusButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuPlayerStatusEntryWidget_OnRemovedFromFocusMyStatusButton) == 0x000008, "Wrong alignment on PlayMenuPlayerStatusEntryWidget_OnRemovedFromFocusMyStatusButton");
static_assert(sizeof(PlayMenuPlayerStatusEntryWidget_OnRemovedFromFocusMyStatusButton) == 0x000010, "Wrong size on PlayMenuPlayerStatusEntryWidget_OnRemovedFromFocusMyStatusButton");
static_assert(offsetof(PlayMenuPlayerStatusEntryWidget_OnRemovedFromFocusMyStatusButton, Widget) == 0x000000, "Member 'PlayMenuPlayerStatusEntryWidget_OnRemovedFromFocusMyStatusButton::Widget' has a wrong offset!");
static_assert(offsetof(PlayMenuPlayerStatusEntryWidget_OnRemovedFromFocusMyStatusButton, InputType) == 0x000008, "Member 'PlayMenuPlayerStatusEntryWidget_OnRemovedFromFocusMyStatusButton::InputType' has a wrong offset!");

// DelegateFunction OutGameModule.PlayMenuPlayerStatusEntryWidget.OnSelectKickMemberButtonEventDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuPlayerStatusEntryWidget_OnSelectKickMemberButtonEventDelegate__DelegateSignature final
{
public:
	class FString                                 MemberId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuPlayerStatusEntryWidget_OnSelectKickMemberButtonEventDelegate__DelegateSignature) == 0x000008, "Wrong alignment on PlayMenuPlayerStatusEntryWidget_OnSelectKickMemberButtonEventDelegate__DelegateSignature");
static_assert(sizeof(PlayMenuPlayerStatusEntryWidget_OnSelectKickMemberButtonEventDelegate__DelegateSignature) == 0x000010, "Wrong size on PlayMenuPlayerStatusEntryWidget_OnSelectKickMemberButtonEventDelegate__DelegateSignature");
static_assert(offsetof(PlayMenuPlayerStatusEntryWidget_OnSelectKickMemberButtonEventDelegate__DelegateSignature, MemberId) == 0x000000, "Member 'PlayMenuPlayerStatusEntryWidget_OnSelectKickMemberButtonEventDelegate__DelegateSignature::MemberId' has a wrong offset!");

// Function OutGameModule.PlayMenuPlayerStatusEntryWidget.OnSquadNumChanged
// 0x0004 (0x0004 - 0x0000)
struct PlayMenuPlayerStatusEntryWidget_OnSquadNumChanged final
{
public:
	int32                                         SquadNum;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuPlayerStatusEntryWidget_OnSquadNumChanged) == 0x000004, "Wrong alignment on PlayMenuPlayerStatusEntryWidget_OnSquadNumChanged");
static_assert(sizeof(PlayMenuPlayerStatusEntryWidget_OnSquadNumChanged) == 0x000004, "Wrong size on PlayMenuPlayerStatusEntryWidget_OnSquadNumChanged");
static_assert(offsetof(PlayMenuPlayerStatusEntryWidget_OnSquadNumChanged, SquadNum) == 0x000000, "Member 'PlayMenuPlayerStatusEntryWidget_OnSquadNumChanged::SquadNum' has a wrong offset!");

// Function OutGameModule.PlayMenuPlayerStatusEntryWidget.PlayAnimationStatusSequence
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuPlayerStatusEntryWidget_PlayAnimationStatusSequence final
{
public:
	bool                                          bIdleAnimationOnly;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuPlayerStatusEntryWidget_PlayAnimationStatusSequence) == 0x000001, "Wrong alignment on PlayMenuPlayerStatusEntryWidget_PlayAnimationStatusSequence");
static_assert(sizeof(PlayMenuPlayerStatusEntryWidget_PlayAnimationStatusSequence) == 0x000001, "Wrong size on PlayMenuPlayerStatusEntryWidget_PlayAnimationStatusSequence");
static_assert(offsetof(PlayMenuPlayerStatusEntryWidget_PlayAnimationStatusSequence, bIdleAnimationOnly) == 0x000000, "Member 'PlayMenuPlayerStatusEntryWidget_PlayAnimationStatusSequence::bIdleAnimationOnly' has a wrong offset!");

// Function OutGameModule.PlayMenuPlayerStatusEntryWidget.SetActive
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuPlayerStatusEntryWidget_SetActive final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuPlayerStatusEntryWidget_SetActive) == 0x000001, "Wrong alignment on PlayMenuPlayerStatusEntryWidget_SetActive");
static_assert(sizeof(PlayMenuPlayerStatusEntryWidget_SetActive) == 0x000001, "Wrong size on PlayMenuPlayerStatusEntryWidget_SetActive");
static_assert(offsetof(PlayMenuPlayerStatusEntryWidget_SetActive, Flag) == 0x000000, "Member 'PlayMenuPlayerStatusEntryWidget_SetActive::Flag' has a wrong offset!");

// Function OutGameModule.PlayMenuPlayerStatusWidget.OnChangeMaxPlayer
// 0x0004 (0x0004 - 0x0000)
struct PlayMenuPlayerStatusWidget_OnChangeMaxPlayer final
{
public:
	int32                                         GameRuleMaxPlayer;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuPlayerStatusWidget_OnChangeMaxPlayer) == 0x000004, "Wrong alignment on PlayMenuPlayerStatusWidget_OnChangeMaxPlayer");
static_assert(sizeof(PlayMenuPlayerStatusWidget_OnChangeMaxPlayer) == 0x000004, "Wrong size on PlayMenuPlayerStatusWidget_OnChangeMaxPlayer");
static_assert(offsetof(PlayMenuPlayerStatusWidget_OnChangeMaxPlayer, GameRuleMaxPlayer) == 0x000000, "Member 'PlayMenuPlayerStatusWidget_OnChangeMaxPlayer::GameRuleMaxPlayer' has a wrong offset!");

// Function OutGameModule.PlayMenuPlayerStatusWidget.OnDecideSelectMessageWindow
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuPlayerStatusWidget_OnDecideSelectMessageWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuPlayerStatusWidget_OnDecideSelectMessageWindow) == 0x000008, "Wrong alignment on PlayMenuPlayerStatusWidget_OnDecideSelectMessageWindow");
static_assert(sizeof(PlayMenuPlayerStatusWidget_OnDecideSelectMessageWindow) == 0x000010, "Wrong size on PlayMenuPlayerStatusWidget_OnDecideSelectMessageWindow");
static_assert(offsetof(PlayMenuPlayerStatusWidget_OnDecideSelectMessageWindow, Widget) == 0x000000, "Member 'PlayMenuPlayerStatusWidget_OnDecideSelectMessageWindow::Widget' has a wrong offset!");
static_assert(offsetof(PlayMenuPlayerStatusWidget_OnDecideSelectMessageWindow, InputType) == 0x000008, "Member 'PlayMenuPlayerStatusWidget_OnDecideSelectMessageWindow::InputType' has a wrong offset!");
static_assert(offsetof(PlayMenuPlayerStatusWidget_OnDecideSelectMessageWindow, LeftButton) == 0x000009, "Member 'PlayMenuPlayerStatusWidget_OnDecideSelectMessageWindow::LeftButton' has a wrong offset!");

// Function OutGameModule.PlayMenuPlayerStatusWidget.OnNavigationLeftEndStatus
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuPlayerStatusWidget_OnNavigationLeftEndStatus final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuPlayerStatusWidget_OnNavigationLeftEndStatus) == 0x000001, "Wrong alignment on PlayMenuPlayerStatusWidget_OnNavigationLeftEndStatus");
static_assert(sizeof(PlayMenuPlayerStatusWidget_OnNavigationLeftEndStatus) == 0x000001, "Wrong size on PlayMenuPlayerStatusWidget_OnNavigationLeftEndStatus");
static_assert(offsetof(PlayMenuPlayerStatusWidget_OnNavigationLeftEndStatus, UiNavigation) == 0x000000, "Member 'PlayMenuPlayerStatusWidget_OnNavigationLeftEndStatus::UiNavigation' has a wrong offset!");

// Function OutGameModule.PlayMenuPlayerStatusWidget.OnNavigationplayerStatusOne
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuPlayerStatusWidget_OnNavigationplayerStatusOne final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuPlayerStatusWidget_OnNavigationplayerStatusOne) == 0x000001, "Wrong alignment on PlayMenuPlayerStatusWidget_OnNavigationplayerStatusOne");
static_assert(sizeof(PlayMenuPlayerStatusWidget_OnNavigationplayerStatusOne) == 0x000001, "Wrong size on PlayMenuPlayerStatusWidget_OnNavigationplayerStatusOne");
static_assert(offsetof(PlayMenuPlayerStatusWidget_OnNavigationplayerStatusOne, UiNavigation) == 0x000000, "Member 'PlayMenuPlayerStatusWidget_OnNavigationplayerStatusOne::UiNavigation' has a wrong offset!");

// Function OutGameModule.PlayMenuPlayerStatusWidget.OnNavigationRightEndStatus
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuPlayerStatusWidget_OnNavigationRightEndStatus final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuPlayerStatusWidget_OnNavigationRightEndStatus) == 0x000001, "Wrong alignment on PlayMenuPlayerStatusWidget_OnNavigationRightEndStatus");
static_assert(sizeof(PlayMenuPlayerStatusWidget_OnNavigationRightEndStatus) == 0x000001, "Wrong size on PlayMenuPlayerStatusWidget_OnNavigationRightEndStatus");
static_assert(offsetof(PlayMenuPlayerStatusWidget_OnNavigationRightEndStatus, UiNavigation) == 0x000000, "Member 'PlayMenuPlayerStatusWidget_OnNavigationRightEndStatus::UiNavigation' has a wrong offset!");

// Function OutGameModule.PlayMenuPlayerStatusWidget.OnNavigationThreeTeamLeader
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuPlayerStatusWidget_OnNavigationThreeTeamLeader final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuPlayerStatusWidget_OnNavigationThreeTeamLeader) == 0x000001, "Wrong alignment on PlayMenuPlayerStatusWidget_OnNavigationThreeTeamLeader");
static_assert(sizeof(PlayMenuPlayerStatusWidget_OnNavigationThreeTeamLeader) == 0x000001, "Wrong size on PlayMenuPlayerStatusWidget_OnNavigationThreeTeamLeader");
static_assert(offsetof(PlayMenuPlayerStatusWidget_OnNavigationThreeTeamLeader, UiNavigation) == 0x000000, "Member 'PlayMenuPlayerStatusWidget_OnNavigationThreeTeamLeader::UiNavigation' has a wrong offset!");

// Function OutGameModule.PlayMenuPlayerStatusWidget.OnNavigationTwoTeamLeader
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuPlayerStatusWidget_OnNavigationTwoTeamLeader final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuPlayerStatusWidget_OnNavigationTwoTeamLeader) == 0x000001, "Wrong alignment on PlayMenuPlayerStatusWidget_OnNavigationTwoTeamLeader");
static_assert(sizeof(PlayMenuPlayerStatusWidget_OnNavigationTwoTeamLeader) == 0x000001, "Wrong size on PlayMenuPlayerStatusWidget_OnNavigationTwoTeamLeader");
static_assert(offsetof(PlayMenuPlayerStatusWidget_OnNavigationTwoTeamLeader, UiNavigation) == 0x000000, "Member 'PlayMenuPlayerStatusWidget_OnNavigationTwoTeamLeader::UiNavigation' has a wrong offset!");

// DelegateFunction OutGameModule.PlayMenuPlayerStatusWidget.OnOutNavigation__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuPlayerStatusWidget_OnOutNavigation__DelegateSignature final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuPlayerStatusWidget_OnOutNavigation__DelegateSignature) == 0x000001, "Wrong alignment on PlayMenuPlayerStatusWidget_OnOutNavigation__DelegateSignature");
static_assert(sizeof(PlayMenuPlayerStatusWidget_OnOutNavigation__DelegateSignature) == 0x000001, "Wrong size on PlayMenuPlayerStatusWidget_OnOutNavigation__DelegateSignature");
static_assert(offsetof(PlayMenuPlayerStatusWidget_OnOutNavigation__DelegateSignature, UiNavigation) == 0x000000, "Member 'PlayMenuPlayerStatusWidget_OnOutNavigation__DelegateSignature::UiNavigation' has a wrong offset!");

// Function OutGameModule.PlayMenuPlayerStatusWidget.OnSelectKickMemberButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuPlayerStatusWidget_OnSelectKickMemberButtonEvent final
{
public:
	class FString                                 MemberId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuPlayerStatusWidget_OnSelectKickMemberButtonEvent) == 0x000008, "Wrong alignment on PlayMenuPlayerStatusWidget_OnSelectKickMemberButtonEvent");
static_assert(sizeof(PlayMenuPlayerStatusWidget_OnSelectKickMemberButtonEvent) == 0x000010, "Wrong size on PlayMenuPlayerStatusWidget_OnSelectKickMemberButtonEvent");
static_assert(offsetof(PlayMenuPlayerStatusWidget_OnSelectKickMemberButtonEvent, MemberId) == 0x000000, "Member 'PlayMenuPlayerStatusWidget_OnSelectKickMemberButtonEvent::MemberId' has a wrong offset!");

// Function OutGameModule.PlayMenuPlayerStatusWidget.OnSquadNumChanged
// 0x0004 (0x0004 - 0x0000)
struct PlayMenuPlayerStatusWidget_OnSquadNumChanged final
{
public:
	int32                                         SquadNum;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuPlayerStatusWidget_OnSquadNumChanged) == 0x000004, "Wrong alignment on PlayMenuPlayerStatusWidget_OnSquadNumChanged");
static_assert(sizeof(PlayMenuPlayerStatusWidget_OnSquadNumChanged) == 0x000004, "Wrong size on PlayMenuPlayerStatusWidget_OnSquadNumChanged");
static_assert(offsetof(PlayMenuPlayerStatusWidget_OnSquadNumChanged, SquadNum) == 0x000000, "Member 'PlayMenuPlayerStatusWidget_OnSquadNumChanged::SquadNum' has a wrong offset!");

// Function OutGameModule.PlayMenuPlayerStatusWidget.SetPlayerStateFocus
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuPlayerStatusWidget_SetPlayerStateFocus final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuPlayerStatusWidget_SetPlayerStateFocus) == 0x000001, "Wrong alignment on PlayMenuPlayerStatusWidget_SetPlayerStateFocus");
static_assert(sizeof(PlayMenuPlayerStatusWidget_SetPlayerStateFocus) == 0x000001, "Wrong size on PlayMenuPlayerStatusWidget_SetPlayerStateFocus");
static_assert(offsetof(PlayMenuPlayerStatusWidget_SetPlayerStateFocus, UiNavigation) == 0x000000, "Member 'PlayMenuPlayerStatusWidget_SetPlayerStateFocus::UiNavigation' has a wrong offset!");

// Function OutGameModule.PlayMenuRankingResultWidget.OnDecidePressButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuRankingResultWidget_OnDecidePressButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuRankingResultWidget_OnDecidePressButtonEvent) == 0x000008, "Wrong alignment on PlayMenuRankingResultWidget_OnDecidePressButtonEvent");
static_assert(sizeof(PlayMenuRankingResultWidget_OnDecidePressButtonEvent) == 0x000010, "Wrong size on PlayMenuRankingResultWidget_OnDecidePressButtonEvent");
static_assert(offsetof(PlayMenuRankingResultWidget_OnDecidePressButtonEvent, Widget) == 0x000000, "Member 'PlayMenuRankingResultWidget_OnDecidePressButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(PlayMenuRankingResultWidget_OnDecidePressButtonEvent, InputType) == 0x000008, "Member 'PlayMenuRankingResultWidget_OnDecidePressButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.PlayMenuRankingResultWidget.OnPressButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuRankingResultWidget_OnPressButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuRankingResultWidget_OnPressButtonEvent) == 0x000008, "Wrong alignment on PlayMenuRankingResultWidget_OnPressButtonEvent");
static_assert(sizeof(PlayMenuRankingResultWidget_OnPressButtonEvent) == 0x000010, "Wrong size on PlayMenuRankingResultWidget_OnPressButtonEvent");
static_assert(offsetof(PlayMenuRankingResultWidget_OnPressButtonEvent, Widget) == 0x000000, "Member 'PlayMenuRankingResultWidget_OnPressButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(PlayMenuRankingResultWidget_OnPressButtonEvent, InputType) == 0x000008, "Member 'PlayMenuRankingResultWidget_OnPressButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.PlayMenuRankingResultWidget.OnPressEmptyButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuRankingResultWidget_OnPressEmptyButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuRankingResultWidget_OnPressEmptyButtonEvent) == 0x000008, "Wrong alignment on PlayMenuRankingResultWidget_OnPressEmptyButtonEvent");
static_assert(sizeof(PlayMenuRankingResultWidget_OnPressEmptyButtonEvent) == 0x000010, "Wrong size on PlayMenuRankingResultWidget_OnPressEmptyButtonEvent");
static_assert(offsetof(PlayMenuRankingResultWidget_OnPressEmptyButtonEvent, Widget) == 0x000000, "Member 'PlayMenuRankingResultWidget_OnPressEmptyButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(PlayMenuRankingResultWidget_OnPressEmptyButtonEvent, InputType) == 0x000008, "Member 'PlayMenuRankingResultWidget_OnPressEmptyButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.PlayMenuSauadIdWidget.OnSquadNumChanged
// 0x0004 (0x0004 - 0x0000)
struct PlayMenuSauadIdWidget_OnSquadNumChanged final
{
public:
	int32                                         SquadNum;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuSauadIdWidget_OnSquadNumChanged) == 0x000004, "Wrong alignment on PlayMenuSauadIdWidget_OnSquadNumChanged");
static_assert(sizeof(PlayMenuSauadIdWidget_OnSquadNumChanged) == 0x000004, "Wrong size on PlayMenuSauadIdWidget_OnSquadNumChanged");
static_assert(offsetof(PlayMenuSauadIdWidget_OnSquadNumChanged, SquadNum) == 0x000000, "Member 'PlayMenuSauadIdWidget_OnSquadNumChanged::SquadNum' has a wrong offset!");

// Function OutGameModule.PlayMenuShortcutList.OnChangeAvailableReceiveCount
// 0x0004 (0x0004 - 0x0000)
struct PlayMenuShortcutList_OnChangeAvailableReceiveCount final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuShortcutList_OnChangeAvailableReceiveCount) == 0x000004, "Wrong alignment on PlayMenuShortcutList_OnChangeAvailableReceiveCount");
static_assert(sizeof(PlayMenuShortcutList_OnChangeAvailableReceiveCount) == 0x000004, "Wrong size on PlayMenuShortcutList_OnChangeAvailableReceiveCount");
static_assert(offsetof(PlayMenuShortcutList_OnChangeAvailableReceiveCount, Count) == 0x000000, "Member 'PlayMenuShortcutList_OnChangeAvailableReceiveCount::Count' has a wrong offset!");

// Function OutGameModule.PlayMenuShortcutList.OnChangeBattleSequence
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuShortcutList_OnChangeBattleSequence final
{
public:
	EBattleStartSequenceType                      Sequence;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuShortcutList_OnChangeBattleSequence) == 0x000001, "Wrong alignment on PlayMenuShortcutList_OnChangeBattleSequence");
static_assert(sizeof(PlayMenuShortcutList_OnChangeBattleSequence) == 0x000001, "Wrong size on PlayMenuShortcutList_OnChangeBattleSequence");
static_assert(offsetof(PlayMenuShortcutList_OnChangeBattleSequence, Sequence) == 0x000000, "Member 'PlayMenuShortcutList_OnChangeBattleSequence::Sequence' has a wrong offset!");

// Function OutGameModule.PlayMenuShortcutList.OnChangeUnreadNoticeCont
// 0x0004 (0x0004 - 0x0000)
struct PlayMenuShortcutList_OnChangeUnreadNoticeCont final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuShortcutList_OnChangeUnreadNoticeCont) == 0x000004, "Wrong alignment on PlayMenuShortcutList_OnChangeUnreadNoticeCont");
static_assert(sizeof(PlayMenuShortcutList_OnChangeUnreadNoticeCont) == 0x000004, "Wrong size on PlayMenuShortcutList_OnChangeUnreadNoticeCont");
static_assert(offsetof(PlayMenuShortcutList_OnChangeUnreadNoticeCont, Count) == 0x000000, "Member 'PlayMenuShortcutList_OnChangeUnreadNoticeCont::Count' has a wrong offset!");

// Function OutGameModule.PlayMenuShortcutList.OnSetNoticeUnreadFlag
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuShortcutList_OnSetNoticeUnreadFlag final
{
public:
	bool                                          bUnread;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuShortcutList_OnSetNoticeUnreadFlag) == 0x000001, "Wrong alignment on PlayMenuShortcutList_OnSetNoticeUnreadFlag");
static_assert(sizeof(PlayMenuShortcutList_OnSetNoticeUnreadFlag) == 0x000001, "Wrong size on PlayMenuShortcutList_OnSetNoticeUnreadFlag");
static_assert(offsetof(PlayMenuShortcutList_OnSetNoticeUnreadFlag, bUnread) == 0x000000, "Member 'PlayMenuShortcutList_OnSetNoticeUnreadFlag::bUnread' has a wrong offset!");

// Function OutGameModule.PlayMenuShortcutList.OnSquadButtonDecideDelegate
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuShortcutList_OnSquadButtonDecideDelegate final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuShortcutList_OnSquadButtonDecideDelegate) == 0x000008, "Wrong alignment on PlayMenuShortcutList_OnSquadButtonDecideDelegate");
static_assert(sizeof(PlayMenuShortcutList_OnSquadButtonDecideDelegate) == 0x000010, "Wrong size on PlayMenuShortcutList_OnSquadButtonDecideDelegate");
static_assert(offsetof(PlayMenuShortcutList_OnSquadButtonDecideDelegate, Widget) == 0x000000, "Member 'PlayMenuShortcutList_OnSquadButtonDecideDelegate::Widget' has a wrong offset!");
static_assert(offsetof(PlayMenuShortcutList_OnSquadButtonDecideDelegate, InputType) == 0x000008, "Member 'PlayMenuShortcutList_OnSquadButtonDecideDelegate::InputType' has a wrong offset!");

// Function OutGameModule.PlayMenuShortcutList.SetMisstionIconCount
// 0x0004 (0x0004 - 0x0000)
struct PlayMenuShortcutList_SetMisstionIconCount final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuShortcutList_SetMisstionIconCount) == 0x000004, "Wrong alignment on PlayMenuShortcutList_SetMisstionIconCount");
static_assert(sizeof(PlayMenuShortcutList_SetMisstionIconCount) == 0x000004, "Wrong size on PlayMenuShortcutList_SetMisstionIconCount");
static_assert(offsetof(PlayMenuShortcutList_SetMisstionIconCount, Count) == 0x000000, "Member 'PlayMenuShortcutList_SetMisstionIconCount::Count' has a wrong offset!");

// Function OutGameModule.PlayMenuShortcutList.SetupSubMenuTextInfo
// 0x0030 (0x0030 - 0x0000)
struct PlayMenuShortcutList_SetupSubMenuTextInfo final
{
public:
	TArray<struct FSubMenuInfo>                   SoloSubMenuInfo;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSubMenuInfo>                   LeaderSubMenuInfo;                                 // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSubMenuInfo>                   MemberSubMenuInfo;                                 // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuShortcutList_SetupSubMenuTextInfo) == 0x000008, "Wrong alignment on PlayMenuShortcutList_SetupSubMenuTextInfo");
static_assert(sizeof(PlayMenuShortcutList_SetupSubMenuTextInfo) == 0x000030, "Wrong size on PlayMenuShortcutList_SetupSubMenuTextInfo");
static_assert(offsetof(PlayMenuShortcutList_SetupSubMenuTextInfo, SoloSubMenuInfo) == 0x000000, "Member 'PlayMenuShortcutList_SetupSubMenuTextInfo::SoloSubMenuInfo' has a wrong offset!");
static_assert(offsetof(PlayMenuShortcutList_SetupSubMenuTextInfo, LeaderSubMenuInfo) == 0x000010, "Member 'PlayMenuShortcutList_SetupSubMenuTextInfo::LeaderSubMenuInfo' has a wrong offset!");
static_assert(offsetof(PlayMenuShortcutList_SetupSubMenuTextInfo, MemberSubMenuInfo) == 0x000020, "Member 'PlayMenuShortcutList_SetupSubMenuTextInfo::MemberSubMenuInfo' has a wrong offset!");

// Function OutGameModule.PlayMenuStatusAddButtonWidget.DoCustomNavigationAddButton
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuStatusAddButtonWidget_DoCustomNavigationAddButton final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuStatusAddButtonWidget_DoCustomNavigationAddButton) == 0x000008, "Wrong alignment on PlayMenuStatusAddButtonWidget_DoCustomNavigationAddButton");
static_assert(sizeof(PlayMenuStatusAddButtonWidget_DoCustomNavigationAddButton) == 0x000010, "Wrong size on PlayMenuStatusAddButtonWidget_DoCustomNavigationAddButton");
static_assert(offsetof(PlayMenuStatusAddButtonWidget_DoCustomNavigationAddButton, UiNavigation) == 0x000000, "Member 'PlayMenuStatusAddButtonWidget_DoCustomNavigationAddButton::UiNavigation' has a wrong offset!");
static_assert(offsetof(PlayMenuStatusAddButtonWidget_DoCustomNavigationAddButton, ReturnValue) == 0x000008, "Member 'PlayMenuStatusAddButtonWidget_DoCustomNavigationAddButton::ReturnValue' has a wrong offset!");

// Function OutGameModule.PlayMenuStatusAddButtonWidget.OnAddedToFocusAddButton
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuStatusAddButtonWidget_OnAddedToFocusAddButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuStatusAddButtonWidget_OnAddedToFocusAddButton) == 0x000008, "Wrong alignment on PlayMenuStatusAddButtonWidget_OnAddedToFocusAddButton");
static_assert(sizeof(PlayMenuStatusAddButtonWidget_OnAddedToFocusAddButton) == 0x000010, "Wrong size on PlayMenuStatusAddButtonWidget_OnAddedToFocusAddButton");
static_assert(offsetof(PlayMenuStatusAddButtonWidget_OnAddedToFocusAddButton, Widget) == 0x000000, "Member 'PlayMenuStatusAddButtonWidget_OnAddedToFocusAddButton::Widget' has a wrong offset!");
static_assert(offsetof(PlayMenuStatusAddButtonWidget_OnAddedToFocusAddButton, InputType) == 0x000008, "Member 'PlayMenuStatusAddButtonWidget_OnAddedToFocusAddButton::InputType' has a wrong offset!");

// Function OutGameModule.PlayMenuStatusAddButtonWidget.OnAddedToFocusMouseAreaButton
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuStatusAddButtonWidget_OnAddedToFocusMouseAreaButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuStatusAddButtonWidget_OnAddedToFocusMouseAreaButton) == 0x000008, "Wrong alignment on PlayMenuStatusAddButtonWidget_OnAddedToFocusMouseAreaButton");
static_assert(sizeof(PlayMenuStatusAddButtonWidget_OnAddedToFocusMouseAreaButton) == 0x000010, "Wrong size on PlayMenuStatusAddButtonWidget_OnAddedToFocusMouseAreaButton");
static_assert(offsetof(PlayMenuStatusAddButtonWidget_OnAddedToFocusMouseAreaButton, Widget) == 0x000000, "Member 'PlayMenuStatusAddButtonWidget_OnAddedToFocusMouseAreaButton::Widget' has a wrong offset!");
static_assert(offsetof(PlayMenuStatusAddButtonWidget_OnAddedToFocusMouseAreaButton, InputType) == 0x000008, "Member 'PlayMenuStatusAddButtonWidget_OnAddedToFocusMouseAreaButton::InputType' has a wrong offset!");

// Function OutGameModule.PlayMenuStatusAddButtonWidget.OnChangeBattleSequence
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuStatusAddButtonWidget_OnChangeBattleSequence final
{
public:
	EBattleStartSequenceType                      Sequence;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuStatusAddButtonWidget_OnChangeBattleSequence) == 0x000001, "Wrong alignment on PlayMenuStatusAddButtonWidget_OnChangeBattleSequence");
static_assert(sizeof(PlayMenuStatusAddButtonWidget_OnChangeBattleSequence) == 0x000001, "Wrong size on PlayMenuStatusAddButtonWidget_OnChangeBattleSequence");
static_assert(offsetof(PlayMenuStatusAddButtonWidget_OnChangeBattleSequence, Sequence) == 0x000000, "Member 'PlayMenuStatusAddButtonWidget_OnChangeBattleSequence::Sequence' has a wrong offset!");

// Function OutGameModule.PlayMenuStatusAddButtonWidget.OnDecideSelectAddButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuStatusAddButtonWidget_OnDecideSelectAddButtonEvent final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuStatusAddButtonWidget_OnDecideSelectAddButtonEvent) == 0x000008, "Wrong alignment on PlayMenuStatusAddButtonWidget_OnDecideSelectAddButtonEvent");
static_assert(sizeof(PlayMenuStatusAddButtonWidget_OnDecideSelectAddButtonEvent) == 0x000010, "Wrong size on PlayMenuStatusAddButtonWidget_OnDecideSelectAddButtonEvent");
static_assert(offsetof(PlayMenuStatusAddButtonWidget_OnDecideSelectAddButtonEvent, Button) == 0x000000, "Member 'PlayMenuStatusAddButtonWidget_OnDecideSelectAddButtonEvent::Button' has a wrong offset!");
static_assert(offsetof(PlayMenuStatusAddButtonWidget_OnDecideSelectAddButtonEvent, InputType) == 0x000008, "Member 'PlayMenuStatusAddButtonWidget_OnDecideSelectAddButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.PlayMenuStatusAddButtonWidget.OnLoadCompletedLoadSquadSentInvitation
// 0x0004 (0x0004 - 0x0000)
struct PlayMenuStatusAddButtonWidget_OnLoadCompletedLoadSquadSentInvitation final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuStatusAddButtonWidget_OnLoadCompletedLoadSquadSentInvitation) == 0x000004, "Wrong alignment on PlayMenuStatusAddButtonWidget_OnLoadCompletedLoadSquadSentInvitation");
static_assert(sizeof(PlayMenuStatusAddButtonWidget_OnLoadCompletedLoadSquadSentInvitation) == 0x000004, "Wrong size on PlayMenuStatusAddButtonWidget_OnLoadCompletedLoadSquadSentInvitation");
static_assert(offsetof(PlayMenuStatusAddButtonWidget_OnLoadCompletedLoadSquadSentInvitation, RequestId) == 0x000000, "Member 'PlayMenuStatusAddButtonWidget_OnLoadCompletedLoadSquadSentInvitation::RequestId' has a wrong offset!");

// DelegateFunction OutGameModule.PlayMenuStatusAddButtonWidget.OnNavigationAddButtonEventDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuStatusAddButtonWidget_OnNavigationAddButtonEventDelegate__DelegateSignature final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuStatusAddButtonWidget_OnNavigationAddButtonEventDelegate__DelegateSignature) == 0x000001, "Wrong alignment on PlayMenuStatusAddButtonWidget_OnNavigationAddButtonEventDelegate__DelegateSignature");
static_assert(sizeof(PlayMenuStatusAddButtonWidget_OnNavigationAddButtonEventDelegate__DelegateSignature) == 0x000001, "Wrong size on PlayMenuStatusAddButtonWidget_OnNavigationAddButtonEventDelegate__DelegateSignature");
static_assert(offsetof(PlayMenuStatusAddButtonWidget_OnNavigationAddButtonEventDelegate__DelegateSignature, UiNavigation) == 0x000000, "Member 'PlayMenuStatusAddButtonWidget_OnNavigationAddButtonEventDelegate__DelegateSignature::UiNavigation' has a wrong offset!");

// Function OutGameModule.PlayMenuStatusAddButtonWidget.OnRemovedFromFocusAddButton
// 0x0010 (0x0010 - 0x0000)
struct PlayMenuStatusAddButtonWidget_OnRemovedFromFocusAddButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayMenuStatusAddButtonWidget_OnRemovedFromFocusAddButton) == 0x000008, "Wrong alignment on PlayMenuStatusAddButtonWidget_OnRemovedFromFocusAddButton");
static_assert(sizeof(PlayMenuStatusAddButtonWidget_OnRemovedFromFocusAddButton) == 0x000010, "Wrong size on PlayMenuStatusAddButtonWidget_OnRemovedFromFocusAddButton");
static_assert(offsetof(PlayMenuStatusAddButtonWidget_OnRemovedFromFocusAddButton, Widget) == 0x000000, "Member 'PlayMenuStatusAddButtonWidget_OnRemovedFromFocusAddButton::Widget' has a wrong offset!");
static_assert(offsetof(PlayMenuStatusAddButtonWidget_OnRemovedFromFocusAddButton, InputType) == 0x000008, "Member 'PlayMenuStatusAddButtonWidget_OnRemovedFromFocusAddButton::InputType' has a wrong offset!");

// Function OutGameModule.PlayMenuStatusAddButtonWidget.SetUseStandbyVoice
// 0x0001 (0x0001 - 0x0000)
struct PlayMenuStatusAddButtonWidget_SetUseStandbyVoice final
{
public:
	bool                                          bUse;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuStatusAddButtonWidget_SetUseStandbyVoice) == 0x000001, "Wrong alignment on PlayMenuStatusAddButtonWidget_SetUseStandbyVoice");
static_assert(sizeof(PlayMenuStatusAddButtonWidget_SetUseStandbyVoice) == 0x000001, "Wrong size on PlayMenuStatusAddButtonWidget_SetUseStandbyVoice");
static_assert(offsetof(PlayMenuStatusAddButtonWidget_SetUseStandbyVoice, bUse) == 0x000000, "Member 'PlayMenuStatusAddButtonWidget_SetUseStandbyVoice::bUse' has a wrong offset!");

// Function OutGameModule.PlayMenuStatusAddButtonWidget.SetVisibleInvitationPanel
// 0x0004 (0x0004 - 0x0000)
struct PlayMenuStatusAddButtonWidget_SetVisibleInvitationPanel final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMenuStatusAddButtonWidget_SetVisibleInvitationPanel) == 0x000004, "Wrong alignment on PlayMenuStatusAddButtonWidget_SetVisibleInvitationPanel");
static_assert(sizeof(PlayMenuStatusAddButtonWidget_SetVisibleInvitationPanel) == 0x000004, "Wrong size on PlayMenuStatusAddButtonWidget_SetVisibleInvitationPanel");
static_assert(offsetof(PlayMenuStatusAddButtonWidget_SetVisibleInvitationPanel, Num) == 0x000000, "Member 'PlayMenuStatusAddButtonWidget_SetVisibleInvitationPanel::Num' has a wrong offset!");

// Function OutGameModule.VideoSettingWidget.OnValueAntialiasing
// 0x0001 (0x0001 - 0x0000)
struct VideoSettingWidget_OnValueAntialiasing final
{
public:
	ESettingSwitchType                            Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VideoSettingWidget_OnValueAntialiasing) == 0x000001, "Wrong alignment on VideoSettingWidget_OnValueAntialiasing");
static_assert(sizeof(VideoSettingWidget_OnValueAntialiasing) == 0x000001, "Wrong size on VideoSettingWidget_OnValueAntialiasing");
static_assert(offsetof(VideoSettingWidget_OnValueAntialiasing, Value) == 0x000000, "Member 'VideoSettingWidget_OnValueAntialiasing::Value' has a wrong offset!");

// Function OutGameModule.VideoSettingWidget.OnValueBloom
// 0x0001 (0x0001 - 0x0000)
struct VideoSettingWidget_OnValueBloom final
{
public:
	ESettingSwitchType                            Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VideoSettingWidget_OnValueBloom) == 0x000001, "Wrong alignment on VideoSettingWidget_OnValueBloom");
static_assert(sizeof(VideoSettingWidget_OnValueBloom) == 0x000001, "Wrong size on VideoSettingWidget_OnValueBloom");
static_assert(offsetof(VideoSettingWidget_OnValueBloom, Value) == 0x000000, "Member 'VideoSettingWidget_OnValueBloom::Value' has a wrong offset!");

// Function OutGameModule.VideoSettingWidget.OnValueEffect
// 0x0004 (0x0004 - 0x0000)
struct VideoSettingWidget_OnValueEffect final
{
public:
	int32                                         SelectedIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VideoSettingWidget_OnValueEffect) == 0x000004, "Wrong alignment on VideoSettingWidget_OnValueEffect");
static_assert(sizeof(VideoSettingWidget_OnValueEffect) == 0x000004, "Wrong size on VideoSettingWidget_OnValueEffect");
static_assert(offsetof(VideoSettingWidget_OnValueEffect, SelectedIndex) == 0x000000, "Member 'VideoSettingWidget_OnValueEffect::SelectedIndex' has a wrong offset!");

// Function OutGameModule.VideoSettingWidget.OnValueFoliageQuality
// 0x0004 (0x0004 - 0x0000)
struct VideoSettingWidget_OnValueFoliageQuality final
{
public:
	int32                                         SelectedIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VideoSettingWidget_OnValueFoliageQuality) == 0x000004, "Wrong alignment on VideoSettingWidget_OnValueFoliageQuality");
static_assert(sizeof(VideoSettingWidget_OnValueFoliageQuality) == 0x000004, "Wrong size on VideoSettingWidget_OnValueFoliageQuality");
static_assert(offsetof(VideoSettingWidget_OnValueFoliageQuality, SelectedIndex) == 0x000000, "Member 'VideoSettingWidget_OnValueFoliageQuality::SelectedIndex' has a wrong offset!");

// Function OutGameModule.VideoSettingWidget.OnValueGraphicAutoSetting
// 0x0004 (0x0004 - 0x0000)
struct VideoSettingWidget_OnValueGraphicAutoSetting final
{
public:
	int32                                         SelectedIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VideoSettingWidget_OnValueGraphicAutoSetting) == 0x000004, "Wrong alignment on VideoSettingWidget_OnValueGraphicAutoSetting");
static_assert(sizeof(VideoSettingWidget_OnValueGraphicAutoSetting) == 0x000004, "Wrong size on VideoSettingWidget_OnValueGraphicAutoSetting");
static_assert(offsetof(VideoSettingWidget_OnValueGraphicAutoSetting, SelectedIndex) == 0x000000, "Member 'VideoSettingWidget_OnValueGraphicAutoSetting::SelectedIndex' has a wrong offset!");

// Function OutGameModule.VideoSettingWidget.OnValueMotionBlur
// 0x0001 (0x0001 - 0x0000)
struct VideoSettingWidget_OnValueMotionBlur final
{
public:
	ESettingSwitchType                            Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VideoSettingWidget_OnValueMotionBlur) == 0x000001, "Wrong alignment on VideoSettingWidget_OnValueMotionBlur");
static_assert(sizeof(VideoSettingWidget_OnValueMotionBlur) == 0x000001, "Wrong size on VideoSettingWidget_OnValueMotionBlur");
static_assert(offsetof(VideoSettingWidget_OnValueMotionBlur, Value) == 0x000000, "Member 'VideoSettingWidget_OnValueMotionBlur::Value' has a wrong offset!");

// Function OutGameModule.VideoSettingWidget.OnValueOcclude
// 0x0001 (0x0001 - 0x0000)
struct VideoSettingWidget_OnValueOcclude final
{
public:
	ESettingSwitchType                            Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VideoSettingWidget_OnValueOcclude) == 0x000001, "Wrong alignment on VideoSettingWidget_OnValueOcclude");
static_assert(sizeof(VideoSettingWidget_OnValueOcclude) == 0x000001, "Wrong size on VideoSettingWidget_OnValueOcclude");
static_assert(offsetof(VideoSettingWidget_OnValueOcclude, Value) == 0x000000, "Member 'VideoSettingWidget_OnValueOcclude::Value' has a wrong offset!");

// Function OutGameModule.VideoSettingWidget.OnValueShadow
// 0x0004 (0x0004 - 0x0000)
struct VideoSettingWidget_OnValueShadow final
{
public:
	int32                                         SelectedIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VideoSettingWidget_OnValueShadow) == 0x000004, "Wrong alignment on VideoSettingWidget_OnValueShadow");
static_assert(sizeof(VideoSettingWidget_OnValueShadow) == 0x000004, "Wrong size on VideoSettingWidget_OnValueShadow");
static_assert(offsetof(VideoSettingWidget_OnValueShadow, SelectedIndex) == 0x000000, "Member 'VideoSettingWidget_OnValueShadow::SelectedIndex' has a wrong offset!");

// Function OutGameModule.VideoSettingWidget.OnValueTextureQuality
// 0x0004 (0x0004 - 0x0000)
struct VideoSettingWidget_OnValueTextureQuality final
{
public:
	int32                                         SelectedIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VideoSettingWidget_OnValueTextureQuality) == 0x000004, "Wrong alignment on VideoSettingWidget_OnValueTextureQuality");
static_assert(sizeof(VideoSettingWidget_OnValueTextureQuality) == 0x000004, "Wrong size on VideoSettingWidget_OnValueTextureQuality");
static_assert(offsetof(VideoSettingWidget_OnValueTextureQuality, SelectedIndex) == 0x000000, "Member 'VideoSettingWidget_OnValueTextureQuality::SelectedIndex' has a wrong offset!");

// Function OutGameModule.VideoSettingWidget.SetBrightnessValue
// 0x0004 (0x0004 - 0x0000)
struct VideoSettingWidget_SetBrightnessValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VideoSettingWidget_SetBrightnessValue) == 0x000004, "Wrong alignment on VideoSettingWidget_SetBrightnessValue");
static_assert(sizeof(VideoSettingWidget_SetBrightnessValue) == 0x000004, "Wrong size on VideoSettingWidget_SetBrightnessValue");
static_assert(offsetof(VideoSettingWidget_SetBrightnessValue, Value) == 0x000000, "Member 'VideoSettingWidget_SetBrightnessValue::Value' has a wrong offset!");

// Function OutGameModule.ProfileAppWidget.BP_RequestSendLike
// 0x0001 (0x0001 - 0x0000)
struct ProfileAppWidget_BP_RequestSendLike final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileAppWidget_BP_RequestSendLike) == 0x000001, "Wrong alignment on ProfileAppWidget_BP_RequestSendLike");
static_assert(sizeof(ProfileAppWidget_BP_RequestSendLike) == 0x000001, "Wrong size on ProfileAppWidget_BP_RequestSendLike");
static_assert(offsetof(ProfileAppWidget_BP_RequestSendLike, ReturnValue) == 0x000000, "Member 'ProfileAppWidget_BP_RequestSendLike::ReturnValue' has a wrong offset!");

// Function OutGameModule.ProfileAppWidget.OnFinishSendLikeFetchDataEvent
// 0x0004 (0x0004 - 0x0000)
struct ProfileAppWidget_OnFinishSendLikeFetchDataEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileAppWidget_OnFinishSendLikeFetchDataEvent) == 0x000004, "Wrong alignment on ProfileAppWidget_OnFinishSendLikeFetchDataEvent");
static_assert(sizeof(ProfileAppWidget_OnFinishSendLikeFetchDataEvent) == 0x000004, "Wrong size on ProfileAppWidget_OnFinishSendLikeFetchDataEvent");
static_assert(offsetof(ProfileAppWidget_OnFinishSendLikeFetchDataEvent, RequestId) == 0x000000, "Member 'ProfileAppWidget_OnFinishSendLikeFetchDataEvent::RequestId' has a wrong offset!");

// Function OutGameModule.RankingBase.OnDecideRemuaertionButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct RankingBase_OnDecideRemuaertionButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RankingBase_OnDecideRemuaertionButtonEvent) == 0x000008, "Wrong alignment on RankingBase_OnDecideRemuaertionButtonEvent");
static_assert(sizeof(RankingBase_OnDecideRemuaertionButtonEvent) == 0x000010, "Wrong size on RankingBase_OnDecideRemuaertionButtonEvent");
static_assert(offsetof(RankingBase_OnDecideRemuaertionButtonEvent, Widget) == 0x000000, "Member 'RankingBase_OnDecideRemuaertionButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(RankingBase_OnDecideRemuaertionButtonEvent, InputType) == 0x000008, "Member 'RankingBase_OnDecideRemuaertionButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.RankingBase.OnDecideSendLikeEvent
// 0x0010 (0x0010 - 0x0000)
struct RankingBase_OnDecideSendLikeEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RankingBase_OnDecideSendLikeEvent) == 0x000008, "Wrong alignment on RankingBase_OnDecideSendLikeEvent");
static_assert(sizeof(RankingBase_OnDecideSendLikeEvent) == 0x000010, "Wrong size on RankingBase_OnDecideSendLikeEvent");
static_assert(offsetof(RankingBase_OnDecideSendLikeEvent, Widget) == 0x000000, "Member 'RankingBase_OnDecideSendLikeEvent::Widget' has a wrong offset!");
static_assert(offsetof(RankingBase_OnDecideSendLikeEvent, InputType) == 0x000008, "Member 'RankingBase_OnDecideSendLikeEvent::InputType' has a wrong offset!");

// Function OutGameModule.RankingEventDetails.SetStateEvent
// 0x0004 (0x0004 - 0x0000)
struct RankingEventDetails_SetStateEvent final
{
public:
	int32                                         State;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RankingEventDetails_SetStateEvent) == 0x000004, "Wrong alignment on RankingEventDetails_SetStateEvent");
static_assert(sizeof(RankingEventDetails_SetStateEvent) == 0x000004, "Wrong size on RankingEventDetails_SetStateEvent");
static_assert(offsetof(RankingEventDetails_SetStateEvent, State) == 0x000000, "Member 'RankingEventDetails_SetStateEvent::State' has a wrong offset!");

// Function OutGameModule.RankingLeagueWidget.SetLeagueBorderText
// 0x0001 (0x0001 - 0x0000)
struct RankingLeagueWidget_SetLeagueBorderText final
{
public:
	bool                                          bUp;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RankingLeagueWidget_SetLeagueBorderText) == 0x000001, "Wrong alignment on RankingLeagueWidget_SetLeagueBorderText");
static_assert(sizeof(RankingLeagueWidget_SetLeagueBorderText) == 0x000001, "Wrong size on RankingLeagueWidget_SetLeagueBorderText");
static_assert(offsetof(RankingLeagueWidget_SetLeagueBorderText, bUp) == 0x000000, "Member 'RankingLeagueWidget_SetLeagueBorderText::bUp' has a wrong offset!");

// Function OutGameModule.RankingLeagueWidget.SetLeagueText
// 0x0004 (0x0004 - 0x0000)
struct RankingLeagueWidget_SetLeagueText final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RankingLeagueWidget_SetLeagueText) == 0x000004, "Wrong alignment on RankingLeagueWidget_SetLeagueText");
static_assert(sizeof(RankingLeagueWidget_SetLeagueText) == 0x000004, "Wrong size on RankingLeagueWidget_SetLeagueText");
static_assert(offsetof(RankingLeagueWidget_SetLeagueText, Code) == 0x000000, "Member 'RankingLeagueWidget_SetLeagueText::Code' has a wrong offset!");

// Function OutGameModule.RankingRemunerationItemListWidget.DoCustomSelectWidgetNavigation
// 0x0001 (0x0001 - 0x0000)
struct RankingRemunerationItemListWidget_DoCustomSelectWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RankingRemunerationItemListWidget_DoCustomSelectWidgetNavigation) == 0x000001, "Wrong alignment on RankingRemunerationItemListWidget_DoCustomSelectWidgetNavigation");
static_assert(sizeof(RankingRemunerationItemListWidget_DoCustomSelectWidgetNavigation) == 0x000001, "Wrong size on RankingRemunerationItemListWidget_DoCustomSelectWidgetNavigation");
static_assert(offsetof(RankingRemunerationItemListWidget_DoCustomSelectWidgetNavigation, UiNavigation) == 0x000000, "Member 'RankingRemunerationItemListWidget_DoCustomSelectWidgetNavigation::UiNavigation' has a wrong offset!");

// Function OutGameModule.RankingRemunerationItemListWidget.OnDecideElement
// 0x0010 (0x0010 - 0x0000)
struct RankingRemunerationItemListWidget_OnDecideElement final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RankingRemunerationItemListWidget_OnDecideElement) == 0x000008, "Wrong alignment on RankingRemunerationItemListWidget_OnDecideElement");
static_assert(sizeof(RankingRemunerationItemListWidget_OnDecideElement) == 0x000010, "Wrong size on RankingRemunerationItemListWidget_OnDecideElement");
static_assert(offsetof(RankingRemunerationItemListWidget_OnDecideElement, Widget) == 0x000000, "Member 'RankingRemunerationItemListWidget_OnDecideElement::Widget' has a wrong offset!");
static_assert(offsetof(RankingRemunerationItemListWidget_OnDecideElement, InputType) == 0x000008, "Member 'RankingRemunerationItemListWidget_OnDecideElement::InputType' has a wrong offset!");

// Function OutGameModule.RankingRemunerationItemListWidget.OnRemoveFocusItem
// 0x0010 (0x0010 - 0x0000)
struct RankingRemunerationItemListWidget_OnRemoveFocusItem final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RankingRemunerationItemListWidget_OnRemoveFocusItem) == 0x000008, "Wrong alignment on RankingRemunerationItemListWidget_OnRemoveFocusItem");
static_assert(sizeof(RankingRemunerationItemListWidget_OnRemoveFocusItem) == 0x000010, "Wrong size on RankingRemunerationItemListWidget_OnRemoveFocusItem");
static_assert(offsetof(RankingRemunerationItemListWidget_OnRemoveFocusItem, Widget) == 0x000000, "Member 'RankingRemunerationItemListWidget_OnRemoveFocusItem::Widget' has a wrong offset!");
static_assert(offsetof(RankingRemunerationItemListWidget_OnRemoveFocusItem, InputType) == 0x000008, "Member 'RankingRemunerationItemListWidget_OnRemoveFocusItem::InputType' has a wrong offset!");

// Function OutGameModule.ShopTabWidget.OnDecideEvent
// 0x0008 (0x0008 - 0x0000)
struct ShopTabWidget_OnDecideEvent final
{
public:
	class UEventItemEntryObject*                  EventItemEntryObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopTabWidget_OnDecideEvent) == 0x000008, "Wrong alignment on ShopTabWidget_OnDecideEvent");
static_assert(sizeof(ShopTabWidget_OnDecideEvent) == 0x000008, "Wrong size on ShopTabWidget_OnDecideEvent");
static_assert(offsetof(ShopTabWidget_OnDecideEvent, EventItemEntryObject) == 0x000000, "Member 'ShopTabWidget_OnDecideEvent::EventItemEntryObject' has a wrong offset!");

// Function OutGameModule.ShopTabWidget.ReturnEventList
// 0x0001 (0x0001 - 0x0000)
struct ShopTabWidget_ReturnEventList final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopTabWidget_ReturnEventList) == 0x000001, "Wrong alignment on ShopTabWidget_ReturnEventList");
static_assert(sizeof(ShopTabWidget_ReturnEventList) == 0x000001, "Wrong size on ShopTabWidget_ReturnEventList");
static_assert(offsetof(ShopTabWidget_ReturnEventList, ReturnValue) == 0x000000, "Member 'ShopTabWidget_ReturnEventList::ReturnValue' has a wrong offset!");

// Function OutGameModule.ShopTabWidget.GetShopItemListWidget
// 0x0008 (0x0008 - 0x0000)
struct ShopTabWidget_GetShopItemListWidget final
{
public:
	class UShopItemListWidgetBase*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopTabWidget_GetShopItemListWidget) == 0x000008, "Wrong alignment on ShopTabWidget_GetShopItemListWidget");
static_assert(sizeof(ShopTabWidget_GetShopItemListWidget) == 0x000008, "Wrong size on ShopTabWidget_GetShopItemListWidget");
static_assert(offsetof(ShopTabWidget_GetShopItemListWidget, ReturnValue) == 0x000000, "Member 'ShopTabWidget_GetShopItemListWidget::ReturnValue' has a wrong offset!");

// Function OutGameModule.SoundSettingWidget.OnAddedToFocusEndItem
// 0x000C (0x000C - 0x0000)
struct SoundSettingWidget_OnAddedToFocusEndItem final
{
public:
	EWidgetInputType                              InputType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFocusEvent                            InFocusEvent;                                      // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundSettingWidget_OnAddedToFocusEndItem) == 0x000004, "Wrong alignment on SoundSettingWidget_OnAddedToFocusEndItem");
static_assert(sizeof(SoundSettingWidget_OnAddedToFocusEndItem) == 0x00000C, "Wrong size on SoundSettingWidget_OnAddedToFocusEndItem");
static_assert(offsetof(SoundSettingWidget_OnAddedToFocusEndItem, InputType) == 0x000000, "Member 'SoundSettingWidget_OnAddedToFocusEndItem::InputType' has a wrong offset!");
static_assert(offsetof(SoundSettingWidget_OnAddedToFocusEndItem, InFocusEvent) == 0x000004, "Member 'SoundSettingWidget_OnAddedToFocusEndItem::InFocusEvent' has a wrong offset!");

// Function OutGameModule.SoundSettingWidget.OnAddedToFocusStartItem
// 0x000C (0x000C - 0x0000)
struct SoundSettingWidget_OnAddedToFocusStartItem final
{
public:
	EWidgetInputType                              InputType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFocusEvent                            InFocusEvent;                                      // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundSettingWidget_OnAddedToFocusStartItem) == 0x000004, "Wrong alignment on SoundSettingWidget_OnAddedToFocusStartItem");
static_assert(sizeof(SoundSettingWidget_OnAddedToFocusStartItem) == 0x00000C, "Wrong size on SoundSettingWidget_OnAddedToFocusStartItem");
static_assert(offsetof(SoundSettingWidget_OnAddedToFocusStartItem, InputType) == 0x000000, "Member 'SoundSettingWidget_OnAddedToFocusStartItem::InputType' has a wrong offset!");
static_assert(offsetof(SoundSettingWidget_OnAddedToFocusStartItem, InFocusEvent) == 0x000004, "Member 'SoundSettingWidget_OnAddedToFocusStartItem::InFocusEvent' has a wrong offset!");

// Function OutGameModule.SoundSettingWidget.OnBattleBGMValueChanged
// 0x0004 (0x0004 - 0x0000)
struct SoundSettingWidget_OnBattleBGMValueChanged final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundSettingWidget_OnBattleBGMValueChanged) == 0x000004, "Wrong alignment on SoundSettingWidget_OnBattleBGMValueChanged");
static_assert(sizeof(SoundSettingWidget_OnBattleBGMValueChanged) == 0x000004, "Wrong size on SoundSettingWidget_OnBattleBGMValueChanged");
static_assert(offsetof(SoundSettingWidget_OnBattleBGMValueChanged, Value) == 0x000000, "Member 'SoundSettingWidget_OnBattleBGMValueChanged::Value' has a wrong offset!");

// Function OutGameModule.SoundSettingWidget.OnBGMValueChanged
// 0x0004 (0x0004 - 0x0000)
struct SoundSettingWidget_OnBGMValueChanged final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundSettingWidget_OnBGMValueChanged) == 0x000004, "Wrong alignment on SoundSettingWidget_OnBGMValueChanged");
static_assert(sizeof(SoundSettingWidget_OnBGMValueChanged) == 0x000004, "Wrong size on SoundSettingWidget_OnBGMValueChanged");
static_assert(offsetof(SoundSettingWidget_OnBGMValueChanged, Value) == 0x000000, "Member 'SoundSettingWidget_OnBGMValueChanged::Value' has a wrong offset!");

// Function OutGameModule.SoundSettingWidget.OnChangeIdleStatusEvent
// 0x0008 (0x0008 - 0x0000)
struct SoundSettingWidget_OnChangeIdleStatusEvent final
{
public:
	bool                                          Idle;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StateSetting;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundSettingWidget_OnChangeIdleStatusEvent) == 0x000004, "Wrong alignment on SoundSettingWidget_OnChangeIdleStatusEvent");
static_assert(sizeof(SoundSettingWidget_OnChangeIdleStatusEvent) == 0x000008, "Wrong size on SoundSettingWidget_OnChangeIdleStatusEvent");
static_assert(offsetof(SoundSettingWidget_OnChangeIdleStatusEvent, Idle) == 0x000000, "Member 'SoundSettingWidget_OnChangeIdleStatusEvent::Idle' has a wrong offset!");
static_assert(offsetof(SoundSettingWidget_OnChangeIdleStatusEvent, StateSetting) == 0x000004, "Member 'SoundSettingWidget_OnChangeIdleStatusEvent::StateSetting' has a wrong offset!");

// Function OutGameModule.SoundSettingWidget.OnMasterValueChanged
// 0x0004 (0x0004 - 0x0000)
struct SoundSettingWidget_OnMasterValueChanged final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundSettingWidget_OnMasterValueChanged) == 0x000004, "Wrong alignment on SoundSettingWidget_OnMasterValueChanged");
static_assert(sizeof(SoundSettingWidget_OnMasterValueChanged) == 0x000004, "Wrong size on SoundSettingWidget_OnMasterValueChanged");
static_assert(offsetof(SoundSettingWidget_OnMasterValueChanged, Value) == 0x000000, "Member 'SoundSettingWidget_OnMasterValueChanged::Value' has a wrong offset!");

// Function OutGameModule.SoundSettingWidget.OnSEValueChanged
// 0x0004 (0x0004 - 0x0000)
struct SoundSettingWidget_OnSEValueChanged final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundSettingWidget_OnSEValueChanged) == 0x000004, "Wrong alignment on SoundSettingWidget_OnSEValueChanged");
static_assert(sizeof(SoundSettingWidget_OnSEValueChanged) == 0x000004, "Wrong size on SoundSettingWidget_OnSEValueChanged");
static_assert(offsetof(SoundSettingWidget_OnSEValueChanged, Value) == 0x000000, "Member 'SoundSettingWidget_OnSEValueChanged::Value' has a wrong offset!");

// Function OutGameModule.SoundSettingWidget.OnVoiceChatIsChangeValue
// 0x0001 (0x0001 - 0x0000)
struct SoundSettingWidget_OnVoiceChatIsChangeValue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundSettingWidget_OnVoiceChatIsChangeValue) == 0x000001, "Wrong alignment on SoundSettingWidget_OnVoiceChatIsChangeValue");
static_assert(sizeof(SoundSettingWidget_OnVoiceChatIsChangeValue) == 0x000001, "Wrong size on SoundSettingWidget_OnVoiceChatIsChangeValue");
static_assert(offsetof(SoundSettingWidget_OnVoiceChatIsChangeValue, ReturnValue) == 0x000000, "Member 'SoundSettingWidget_OnVoiceChatIsChangeValue::ReturnValue' has a wrong offset!");

// Function OutGameModule.SoundSettingWidget.OnVoiceLanguageChanged
// 0x0001 (0x0001 - 0x0000)
struct SoundSettingWidget_OnVoiceLanguageChanged final
{
public:
	ESettingSwitchType                            Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundSettingWidget_OnVoiceLanguageChanged) == 0x000001, "Wrong alignment on SoundSettingWidget_OnVoiceLanguageChanged");
static_assert(sizeof(SoundSettingWidget_OnVoiceLanguageChanged) == 0x000001, "Wrong size on SoundSettingWidget_OnVoiceLanguageChanged");
static_assert(offsetof(SoundSettingWidget_OnVoiceLanguageChanged, Value) == 0x000000, "Member 'SoundSettingWidget_OnVoiceLanguageChanged::Value' has a wrong offset!");

// Function OutGameModule.SoundSettingWidget.OnVoiceValueChanged
// 0x0004 (0x0004 - 0x0000)
struct SoundSettingWidget_OnVoiceValueChanged final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundSettingWidget_OnVoiceValueChanged) == 0x000004, "Wrong alignment on SoundSettingWidget_OnVoiceValueChanged");
static_assert(sizeof(SoundSettingWidget_OnVoiceValueChanged) == 0x000004, "Wrong size on SoundSettingWidget_OnVoiceValueChanged");
static_assert(offsetof(SoundSettingWidget_OnVoiceValueChanged, Value) == 0x000000, "Member 'SoundSettingWidget_OnVoiceValueChanged::Value' has a wrong offset!");

// Function OutGameModule.SoundSettingWidget.PlayCheckVoice
// 0x0008 (0x0008 - 0x0000)
struct SoundSettingWidget_PlayCheckVoice final
{
public:
	class UAtomComponent*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundSettingWidget_PlayCheckVoice) == 0x000008, "Wrong alignment on SoundSettingWidget_PlayCheckVoice");
static_assert(sizeof(SoundSettingWidget_PlayCheckVoice) == 0x000008, "Wrong size on SoundSettingWidget_PlayCheckVoice");
static_assert(offsetof(SoundSettingWidget_PlayCheckVoice, ReturnValue) == 0x000000, "Member 'SoundSettingWidget_PlayCheckVoice::ReturnValue' has a wrong offset!");

// Function OutGameModule.SquadFindWidget.FindSquadRequest
// 0x0010 (0x0010 - 0x0000)
struct SquadFindWidget_FindSquadRequest final
{
public:
	class FString                                 Number;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SquadFindWidget_FindSquadRequest) == 0x000008, "Wrong alignment on SquadFindWidget_FindSquadRequest");
static_assert(sizeof(SquadFindWidget_FindSquadRequest) == 0x000010, "Wrong size on SquadFindWidget_FindSquadRequest");
static_assert(offsetof(SquadFindWidget_FindSquadRequest, Number) == 0x000000, "Member 'SquadFindWidget_FindSquadRequest::Number' has a wrong offset!");

// Function OutGameModule.SquadFindWidget.IsRequestedFindSquad
// 0x0001 (0x0001 - 0x0000)
struct SquadFindWidget_IsRequestedFindSquad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SquadFindWidget_IsRequestedFindSquad) == 0x000001, "Wrong alignment on SquadFindWidget_IsRequestedFindSquad");
static_assert(sizeof(SquadFindWidget_IsRequestedFindSquad) == 0x000001, "Wrong size on SquadFindWidget_IsRequestedFindSquad");
static_assert(offsetof(SquadFindWidget_IsRequestedFindSquad, ReturnValue) == 0x000000, "Member 'SquadFindWidget_IsRequestedFindSquad::ReturnValue' has a wrong offset!");

// Function OutGameModule.SquadFindWidget.OnAllButtonEnable
// 0x0001 (0x0001 - 0x0000)
struct SquadFindWidget_OnAllButtonEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SquadFindWidget_OnAllButtonEnable) == 0x000001, "Wrong alignment on SquadFindWidget_OnAllButtonEnable");
static_assert(sizeof(SquadFindWidget_OnAllButtonEnable) == 0x000001, "Wrong size on SquadFindWidget_OnAllButtonEnable");
static_assert(offsetof(SquadFindWidget_OnAllButtonEnable, Enable) == 0x000000, "Member 'SquadFindWidget_OnAllButtonEnable::Enable' has a wrong offset!");

// Function OutGameModule.SquadFindWidget.OnCancelSelectMessageWindow
// 0x0010 (0x0010 - 0x0000)
struct SquadFindWidget_OnCancelSelectMessageWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SquadFindWidget_OnCancelSelectMessageWindow) == 0x000008, "Wrong alignment on SquadFindWidget_OnCancelSelectMessageWindow");
static_assert(sizeof(SquadFindWidget_OnCancelSelectMessageWindow) == 0x000010, "Wrong size on SquadFindWidget_OnCancelSelectMessageWindow");
static_assert(offsetof(SquadFindWidget_OnCancelSelectMessageWindow, Widget) == 0x000000, "Member 'SquadFindWidget_OnCancelSelectMessageWindow::Widget' has a wrong offset!");
static_assert(offsetof(SquadFindWidget_OnCancelSelectMessageWindow, InputType) == 0x000008, "Member 'SquadFindWidget_OnCancelSelectMessageWindow::InputType' has a wrong offset!");

// Function OutGameModule.SquadFindWidget.OnDecidejoinButton
// 0x0010 (0x0010 - 0x0000)
struct SquadFindWidget_OnDecidejoinButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SquadFindWidget_OnDecidejoinButton) == 0x000008, "Wrong alignment on SquadFindWidget_OnDecidejoinButton");
static_assert(sizeof(SquadFindWidget_OnDecidejoinButton) == 0x000010, "Wrong size on SquadFindWidget_OnDecidejoinButton");
static_assert(offsetof(SquadFindWidget_OnDecidejoinButton, Widget) == 0x000000, "Member 'SquadFindWidget_OnDecidejoinButton::Widget' has a wrong offset!");
static_assert(offsetof(SquadFindWidget_OnDecidejoinButton, InputType) == 0x000008, "Member 'SquadFindWidget_OnDecidejoinButton::InputType' has a wrong offset!");

// Function OutGameModule.SquadFindWidget.OnDecideWindowSelectMessage
// 0x0010 (0x0010 - 0x0000)
struct SquadFindWidget_OnDecideWindowSelectMessage final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SquadFindWidget_OnDecideWindowSelectMessage) == 0x000008, "Wrong alignment on SquadFindWidget_OnDecideWindowSelectMessage");
static_assert(sizeof(SquadFindWidget_OnDecideWindowSelectMessage) == 0x000010, "Wrong size on SquadFindWidget_OnDecideWindowSelectMessage");
static_assert(offsetof(SquadFindWidget_OnDecideWindowSelectMessage, Widget) == 0x000000, "Member 'SquadFindWidget_OnDecideWindowSelectMessage::Widget' has a wrong offset!");
static_assert(offsetof(SquadFindWidget_OnDecideWindowSelectMessage, InputType) == 0x000008, "Member 'SquadFindWidget_OnDecideWindowSelectMessage::InputType' has a wrong offset!");
static_assert(offsetof(SquadFindWidget_OnDecideWindowSelectMessage, LeftButton) == 0x000009, "Member 'SquadFindWidget_OnDecideWindowSelectMessage::LeftButton' has a wrong offset!");

// Function OutGameModule.SquadFindWidget.OnDecideWindowSingleMessage
// 0x0010 (0x0010 - 0x0000)
struct SquadFindWidget_OnDecideWindowSingleMessage final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SquadFindWidget_OnDecideWindowSingleMessage) == 0x000008, "Wrong alignment on SquadFindWidget_OnDecideWindowSingleMessage");
static_assert(sizeof(SquadFindWidget_OnDecideWindowSingleMessage) == 0x000010, "Wrong size on SquadFindWidget_OnDecideWindowSingleMessage");
static_assert(offsetof(SquadFindWidget_OnDecideWindowSingleMessage, Widget) == 0x000000, "Member 'SquadFindWidget_OnDecideWindowSingleMessage::Widget' has a wrong offset!");
static_assert(offsetof(SquadFindWidget_OnDecideWindowSingleMessage, InputType) == 0x000008, "Member 'SquadFindWidget_OnDecideWindowSingleMessage::InputType' has a wrong offset!");
static_assert(offsetof(SquadFindWidget_OnDecideWindowSingleMessage, LeftButton) == 0x000009, "Member 'SquadFindWidget_OnDecideWindowSingleMessage::LeftButton' has a wrong offset!");

// Function OutGameModule.SquadFindWidget.OnLoadCompleteEvent
// 0x0004 (0x0004 - 0x0000)
struct SquadFindWidget_OnLoadCompleteEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SquadFindWidget_OnLoadCompleteEvent) == 0x000004, "Wrong alignment on SquadFindWidget_OnLoadCompleteEvent");
static_assert(sizeof(SquadFindWidget_OnLoadCompleteEvent) == 0x000004, "Wrong size on SquadFindWidget_OnLoadCompleteEvent");
static_assert(offsetof(SquadFindWidget_OnLoadCompleteEvent, RequestId) == 0x000000, "Member 'SquadFindWidget_OnLoadCompleteEvent::RequestId' has a wrong offset!");

// Function OutGameModule.SquadFindWidget.UpdateJoinSquadButton
// 0x0001 (0x0001 - 0x0000)
struct SquadFindWidget_UpdateJoinSquadButton final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SquadFindWidget_UpdateJoinSquadButton) == 0x000001, "Wrong alignment on SquadFindWidget_UpdateJoinSquadButton");
static_assert(sizeof(SquadFindWidget_UpdateJoinSquadButton) == 0x000001, "Wrong size on SquadFindWidget_UpdateJoinSquadButton");
static_assert(offsetof(SquadFindWidget_UpdateJoinSquadButton, Enable) == 0x000000, "Member 'SquadFindWidget_UpdateJoinSquadButton::Enable' has a wrong offset!");

// Function OutGameModule.RankingTabWidget.ChangeTab
// 0x0004 (0x0004 - 0x0000)
struct RankingTabWidget_ChangeTab final
{
public:
	int32                                         NewSelectTab;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RankingTabWidget_ChangeTab) == 0x000004, "Wrong alignment on RankingTabWidget_ChangeTab");
static_assert(sizeof(RankingTabWidget_ChangeTab) == 0x000004, "Wrong size on RankingTabWidget_ChangeTab");
static_assert(offsetof(RankingTabWidget_ChangeTab, NewSelectTab) == 0x000000, "Member 'RankingTabWidget_ChangeTab::NewSelectTab' has a wrong offset!");

// Function OutGameModule.RankingTabWidget.OnReturnDecideButton
// 0x0010 (0x0010 - 0x0000)
struct RankingTabWidget_OnReturnDecideButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RankingTabWidget_OnReturnDecideButton) == 0x000008, "Wrong alignment on RankingTabWidget_OnReturnDecideButton");
static_assert(sizeof(RankingTabWidget_OnReturnDecideButton) == 0x000010, "Wrong size on RankingTabWidget_OnReturnDecideButton");
static_assert(offsetof(RankingTabWidget_OnReturnDecideButton, Widget) == 0x000000, "Member 'RankingTabWidget_OnReturnDecideButton::Widget' has a wrong offset!");
static_assert(offsetof(RankingTabWidget_OnReturnDecideButton, InputType) == 0x000008, "Member 'RankingTabWidget_OnReturnDecideButton::InputType' has a wrong offset!");

// Function OutGameModule.RankMatchRewardWidget.FinishDirecting
// 0x0008 (0x0008 - 0x0000)
struct RankMatchRewardWidget_FinishDirecting final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RankMatchRewardWidget_FinishDirecting) == 0x000008, "Wrong alignment on RankMatchRewardWidget_FinishDirecting");
static_assert(sizeof(RankMatchRewardWidget_FinishDirecting) == 0x000008, "Wrong size on RankMatchRewardWidget_FinishDirecting");
static_assert(offsetof(RankMatchRewardWidget_FinishDirecting, Widget) == 0x000000, "Member 'RankMatchRewardWidget_FinishDirecting::Widget' has a wrong offset!");

// Function OutGameModule.RankMatchRewardWidget.FinishProgressExpBar
// 0x0008 (0x0008 - 0x0000)
struct RankMatchRewardWidget_FinishProgressExpBar final
{
public:
	class UProgressBarWidget*                     ProgressBar;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RankMatchRewardWidget_FinishProgressExpBar) == 0x000008, "Wrong alignment on RankMatchRewardWidget_FinishProgressExpBar");
static_assert(sizeof(RankMatchRewardWidget_FinishProgressExpBar) == 0x000008, "Wrong size on RankMatchRewardWidget_FinishProgressExpBar");
static_assert(offsetof(RankMatchRewardWidget_FinishProgressExpBar, ProgressBar) == 0x000000, "Member 'RankMatchRewardWidget_FinishProgressExpBar::ProgressBar' has a wrong offset!");

// Function OutGameModule.RankMatchRewardWidget.PlayRP
// 0x0008 (0x0008 - 0x0000)
struct RankMatchRewardWidget_PlayRP final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RankMatchRewardWidget_PlayRP) == 0x000008, "Wrong alignment on RankMatchRewardWidget_PlayRP");
static_assert(sizeof(RankMatchRewardWidget_PlayRP) == 0x000008, "Wrong size on RankMatchRewardWidget_PlayRP");
static_assert(offsetof(RankMatchRewardWidget_PlayRP, Widget) == 0x000000, "Member 'RankMatchRewardWidget_PlayRP::Widget' has a wrong offset!");

// Function OutGameModule.RentalIconWidget.OnChangedSelectedCharacterEvent
// 0x0002 (0x0002 - 0x0000)
struct RentalIconWidget_OnChangedSelectedCharacterEvent final
{
public:
	bool                                          UnLocked;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableRental;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RentalIconWidget_OnChangedSelectedCharacterEvent) == 0x000001, "Wrong alignment on RentalIconWidget_OnChangedSelectedCharacterEvent");
static_assert(sizeof(RentalIconWidget_OnChangedSelectedCharacterEvent) == 0x000002, "Wrong size on RentalIconWidget_OnChangedSelectedCharacterEvent");
static_assert(offsetof(RentalIconWidget_OnChangedSelectedCharacterEvent, UnLocked) == 0x000000, "Member 'RentalIconWidget_OnChangedSelectedCharacterEvent::UnLocked' has a wrong offset!");
static_assert(offsetof(RentalIconWidget_OnChangedSelectedCharacterEvent, EnableRental) == 0x000001, "Member 'RentalIconWidget_OnChangedSelectedCharacterEvent::EnableRental' has a wrong offset!");

// Function OutGameModule.RentalIconWidget.OnRentalPointUpdatedEvent
// 0x0004 (0x0004 - 0x0000)
struct RentalIconWidget_OnRentalPointUpdatedEvent final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RentalIconWidget_OnRentalPointUpdatedEvent) == 0x000004, "Wrong alignment on RentalIconWidget_OnRentalPointUpdatedEvent");
static_assert(sizeof(RentalIconWidget_OnRentalPointUpdatedEvent) == 0x000004, "Wrong size on RentalIconWidget_OnRentalPointUpdatedEvent");
static_assert(offsetof(RentalIconWidget_OnRentalPointUpdatedEvent, Value) == 0x000000, "Member 'RentalIconWidget_OnRentalPointUpdatedEvent::Value' has a wrong offset!");

// DelegateFunction OutGameModule.ResultItemDropWidget.FinishProgressDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ResultItemDropWidget_FinishProgressDelegate__DelegateSignature final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ResultItemDropWidget_FinishProgressDelegate__DelegateSignature) == 0x000008, "Wrong alignment on ResultItemDropWidget_FinishProgressDelegate__DelegateSignature");
static_assert(sizeof(ResultItemDropWidget_FinishProgressDelegate__DelegateSignature) == 0x000008, "Wrong size on ResultItemDropWidget_FinishProgressDelegate__DelegateSignature");
static_assert(offsetof(ResultItemDropWidget_FinishProgressDelegate__DelegateSignature, Widget) == 0x000000, "Member 'ResultItemDropWidget_FinishProgressDelegate__DelegateSignature::Widget' has a wrong offset!");

// Function OutGameModule.ResultMissionList.OnFocusNavigationMissionList
// 0x0001 (0x0001 - 0x0000)
struct ResultMissionList_OnFocusNavigationMissionList final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ResultMissionList_OnFocusNavigationMissionList) == 0x000001, "Wrong alignment on ResultMissionList_OnFocusNavigationMissionList");
static_assert(sizeof(ResultMissionList_OnFocusNavigationMissionList) == 0x000001, "Wrong size on ResultMissionList_OnFocusNavigationMissionList");
static_assert(offsetof(ResultMissionList_OnFocusNavigationMissionList, UiNavigation) == 0x000000, "Member 'ResultMissionList_OnFocusNavigationMissionList::UiNavigation' has a wrong offset!");

// Function OutGameModule.ResultNextWidget.OnPressNextButton
// 0x0010 (0x0010 - 0x0000)
struct ResultNextWidget_OnPressNextButton final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ResultNextWidget_OnPressNextButton) == 0x000008, "Wrong alignment on ResultNextWidget_OnPressNextButton");
static_assert(sizeof(ResultNextWidget_OnPressNextButton) == 0x000010, "Wrong size on ResultNextWidget_OnPressNextButton");
static_assert(offsetof(ResultNextWidget_OnPressNextButton, Button) == 0x000000, "Member 'ResultNextWidget_OnPressNextButton::Button' has a wrong offset!");
static_assert(offsetof(ResultNextWidget_OnPressNextButton, InputType) == 0x000008, "Member 'ResultNextWidget_OnPressNextButton::InputType' has a wrong offset!");

// DelegateFunction OutGameModule.ResultScoreDetailsWidget.FinishDetailAnimationDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ResultScoreDetailsWidget_FinishDetailAnimationDelegate__DelegateSignature final
{
public:
	class UWidgetAnimation*                       Animation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ResultScoreDetailsWidget_FinishDetailAnimationDelegate__DelegateSignature) == 0x000008, "Wrong alignment on ResultScoreDetailsWidget_FinishDetailAnimationDelegate__DelegateSignature");
static_assert(sizeof(ResultScoreDetailsWidget_FinishDetailAnimationDelegate__DelegateSignature) == 0x000008, "Wrong size on ResultScoreDetailsWidget_FinishDetailAnimationDelegate__DelegateSignature");
static_assert(offsetof(ResultScoreDetailsWidget_FinishDetailAnimationDelegate__DelegateSignature, Animation) == 0x000000, "Member 'ResultScoreDetailsWidget_FinishDetailAnimationDelegate__DelegateSignature::Animation' has a wrong offset!");

// Function OutGameModule.ResultScoreDetailsWidget.OnPressDetails
// 0x0010 (0x0010 - 0x0000)
struct ResultScoreDetailsWidget_OnPressDetails final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ResultScoreDetailsWidget_OnPressDetails) == 0x000008, "Wrong alignment on ResultScoreDetailsWidget_OnPressDetails");
static_assert(sizeof(ResultScoreDetailsWidget_OnPressDetails) == 0x000010, "Wrong size on ResultScoreDetailsWidget_OnPressDetails");
static_assert(offsetof(ResultScoreDetailsWidget_OnPressDetails, Button) == 0x000000, "Member 'ResultScoreDetailsWidget_OnPressDetails::Button' has a wrong offset!");
static_assert(offsetof(ResultScoreDetailsWidget_OnPressDetails, InputType) == 0x000008, "Member 'ResultScoreDetailsWidget_OnPressDetails::InputType' has a wrong offset!");

// Function OutGameModule.ResultScoreDetailsWidget.OnReleaseDetails
// 0x0010 (0x0010 - 0x0000)
struct ResultScoreDetailsWidget_OnReleaseDetails final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ResultScoreDetailsWidget_OnReleaseDetails) == 0x000008, "Wrong alignment on ResultScoreDetailsWidget_OnReleaseDetails");
static_assert(sizeof(ResultScoreDetailsWidget_OnReleaseDetails) == 0x000010, "Wrong size on ResultScoreDetailsWidget_OnReleaseDetails");
static_assert(offsetof(ResultScoreDetailsWidget_OnReleaseDetails, Button) == 0x000000, "Member 'ResultScoreDetailsWidget_OnReleaseDetails::Button' has a wrong offset!");
static_assert(offsetof(ResultScoreDetailsWidget_OnReleaseDetails, InputType) == 0x000008, "Member 'ResultScoreDetailsWidget_OnReleaseDetails::InputType' has a wrong offset!");

// DelegateFunction OutGameModule.ResultScoreDetailsWidget.ProgressAnimationDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct ResultScoreDetailsWidget_ProgressAnimationDelegate__DelegateSignature final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ResultScoreDetailsWidget_ProgressAnimationDelegate__DelegateSignature) == 0x000004, "Wrong alignment on ResultScoreDetailsWidget_ProgressAnimationDelegate__DelegateSignature");
static_assert(sizeof(ResultScoreDetailsWidget_ProgressAnimationDelegate__DelegateSignature) == 0x000004, "Wrong size on ResultScoreDetailsWidget_ProgressAnimationDelegate__DelegateSignature");
static_assert(offsetof(ResultScoreDetailsWidget_ProgressAnimationDelegate__DelegateSignature, Progress) == 0x000000, "Member 'ResultScoreDetailsWidget_ProgressAnimationDelegate__DelegateSignature::Progress' has a wrong offset!");

// Function OutGameModule.SceneCaptureCharacterWidget.BP_SetSceneCaptureCharacterLockWidget
// 0x0008 (0x0008 - 0x0000)
struct SceneCaptureCharacterWidget_BP_SetSceneCaptureCharacterLockWidget final
{
public:
	class USceneCaptureCharacterLockWidget*       Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SceneCaptureCharacterWidget_BP_SetSceneCaptureCharacterLockWidget) == 0x000008, "Wrong alignment on SceneCaptureCharacterWidget_BP_SetSceneCaptureCharacterLockWidget");
static_assert(sizeof(SceneCaptureCharacterWidget_BP_SetSceneCaptureCharacterLockWidget) == 0x000008, "Wrong size on SceneCaptureCharacterWidget_BP_SetSceneCaptureCharacterLockWidget");
static_assert(offsetof(SceneCaptureCharacterWidget_BP_SetSceneCaptureCharacterLockWidget, Widget) == 0x000000, "Member 'SceneCaptureCharacterWidget_BP_SetSceneCaptureCharacterLockWidget::Widget' has a wrong offset!");

// Function OutGameModule.SceneCaptureCharacterWidget.OnKeyDown_Internal
// 0x0128 (0x0128 - 0x0000)
struct SceneCaptureCharacterWidget_OnKeyDown_Internal final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0038(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x0070(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SceneCaptureCharacterWidget_OnKeyDown_Internal) == 0x000008, "Wrong alignment on SceneCaptureCharacterWidget_OnKeyDown_Internal");
static_assert(sizeof(SceneCaptureCharacterWidget_OnKeyDown_Internal) == 0x000128, "Wrong size on SceneCaptureCharacterWidget_OnKeyDown_Internal");
static_assert(offsetof(SceneCaptureCharacterWidget_OnKeyDown_Internal, MyGeometry) == 0x000000, "Member 'SceneCaptureCharacterWidget_OnKeyDown_Internal::MyGeometry' has a wrong offset!");
static_assert(offsetof(SceneCaptureCharacterWidget_OnKeyDown_Internal, InKeyEvent) == 0x000038, "Member 'SceneCaptureCharacterWidget_OnKeyDown_Internal::InKeyEvent' has a wrong offset!");
static_assert(offsetof(SceneCaptureCharacterWidget_OnKeyDown_Internal, ReturnValue) == 0x000070, "Member 'SceneCaptureCharacterWidget_OnKeyDown_Internal::ReturnValue' has a wrong offset!");

// Function OutGameModule.SceneCaptureCharacterWidget.OnLockPanelKeyButtonDown
// 0x0070 (0x0070 - 0x0000)
struct SceneCaptureCharacterWidget_OnLockPanelKeyButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0038(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SceneCaptureCharacterWidget_OnLockPanelKeyButtonDown) == 0x000008, "Wrong alignment on SceneCaptureCharacterWidget_OnLockPanelKeyButtonDown");
static_assert(sizeof(SceneCaptureCharacterWidget_OnLockPanelKeyButtonDown) == 0x000070, "Wrong size on SceneCaptureCharacterWidget_OnLockPanelKeyButtonDown");
static_assert(offsetof(SceneCaptureCharacterWidget_OnLockPanelKeyButtonDown, MyGeometry) == 0x000000, "Member 'SceneCaptureCharacterWidget_OnLockPanelKeyButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(SceneCaptureCharacterWidget_OnLockPanelKeyButtonDown, InKeyEvent) == 0x000038, "Member 'SceneCaptureCharacterWidget_OnLockPanelKeyButtonDown::InKeyEvent' has a wrong offset!");

// Function OutGameModule.SceneCaptureCharacterWidget.OnLockPanelMouseButtonDown
// 0x00A8 (0x00A8 - 0x0000)
struct SceneCaptureCharacterWidget_OnLockPanelMouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SceneCaptureCharacterWidget_OnLockPanelMouseButtonDown) == 0x000008, "Wrong alignment on SceneCaptureCharacterWidget_OnLockPanelMouseButtonDown");
static_assert(sizeof(SceneCaptureCharacterWidget_OnLockPanelMouseButtonDown) == 0x0000A8, "Wrong size on SceneCaptureCharacterWidget_OnLockPanelMouseButtonDown");
static_assert(offsetof(SceneCaptureCharacterWidget_OnLockPanelMouseButtonDown, MyGeometry) == 0x000000, "Member 'SceneCaptureCharacterWidget_OnLockPanelMouseButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(SceneCaptureCharacterWidget_OnLockPanelMouseButtonDown, MouseEvent) == 0x000038, "Member 'SceneCaptureCharacterWidget_OnLockPanelMouseButtonDown::MouseEvent' has a wrong offset!");

// Function OutGameModule.SceneCaptureCharacterWidget.OnLockPanelMouseButtonUp_Internal
// 0x00A8 (0x00A8 - 0x0000)
struct SceneCaptureCharacterWidget_OnLockPanelMouseButtonUp_Internal final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SceneCaptureCharacterWidget_OnLockPanelMouseButtonUp_Internal) == 0x000008, "Wrong alignment on SceneCaptureCharacterWidget_OnLockPanelMouseButtonUp_Internal");
static_assert(sizeof(SceneCaptureCharacterWidget_OnLockPanelMouseButtonUp_Internal) == 0x0000A8, "Wrong size on SceneCaptureCharacterWidget_OnLockPanelMouseButtonUp_Internal");
static_assert(offsetof(SceneCaptureCharacterWidget_OnLockPanelMouseButtonUp_Internal, MyGeometry) == 0x000000, "Member 'SceneCaptureCharacterWidget_OnLockPanelMouseButtonUp_Internal::MyGeometry' has a wrong offset!");
static_assert(offsetof(SceneCaptureCharacterWidget_OnLockPanelMouseButtonUp_Internal, MouseEvent) == 0x000038, "Member 'SceneCaptureCharacterWidget_OnLockPanelMouseButtonUp_Internal::MouseEvent' has a wrong offset!");

// Function OutGameModule.SceneCaptureCharacterWidget.OnMouseButtonDown_Internal
// 0x0160 (0x0160 - 0x0000)
struct SceneCaptureCharacterWidget_OnMouseButtonDown_Internal final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SceneCaptureCharacterWidget_OnMouseButtonDown_Internal) == 0x000008, "Wrong alignment on SceneCaptureCharacterWidget_OnMouseButtonDown_Internal");
static_assert(sizeof(SceneCaptureCharacterWidget_OnMouseButtonDown_Internal) == 0x000160, "Wrong size on SceneCaptureCharacterWidget_OnMouseButtonDown_Internal");
static_assert(offsetof(SceneCaptureCharacterWidget_OnMouseButtonDown_Internal, MyGeometry) == 0x000000, "Member 'SceneCaptureCharacterWidget_OnMouseButtonDown_Internal::MyGeometry' has a wrong offset!");
static_assert(offsetof(SceneCaptureCharacterWidget_OnMouseButtonDown_Internal, MouseEvent) == 0x000038, "Member 'SceneCaptureCharacterWidget_OnMouseButtonDown_Internal::MouseEvent' has a wrong offset!");
static_assert(offsetof(SceneCaptureCharacterWidget_OnMouseButtonDown_Internal, ReturnValue) == 0x0000A8, "Member 'SceneCaptureCharacterWidget_OnMouseButtonDown_Internal::ReturnValue' has a wrong offset!");

// Function OutGameModule.SceneCaptureCharacterWidget.OnMouseButtonUp_Internal
// 0x0160 (0x0160 - 0x0000)
struct SceneCaptureCharacterWidget_OnMouseButtonUp_Internal final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SceneCaptureCharacterWidget_OnMouseButtonUp_Internal) == 0x000008, "Wrong alignment on SceneCaptureCharacterWidget_OnMouseButtonUp_Internal");
static_assert(sizeof(SceneCaptureCharacterWidget_OnMouseButtonUp_Internal) == 0x000160, "Wrong size on SceneCaptureCharacterWidget_OnMouseButtonUp_Internal");
static_assert(offsetof(SceneCaptureCharacterWidget_OnMouseButtonUp_Internal, MyGeometry) == 0x000000, "Member 'SceneCaptureCharacterWidget_OnMouseButtonUp_Internal::MyGeometry' has a wrong offset!");
static_assert(offsetof(SceneCaptureCharacterWidget_OnMouseButtonUp_Internal, MouseEvent) == 0x000038, "Member 'SceneCaptureCharacterWidget_OnMouseButtonUp_Internal::MouseEvent' has a wrong offset!");
static_assert(offsetof(SceneCaptureCharacterWidget_OnMouseButtonUp_Internal, ReturnValue) == 0x0000A8, "Member 'SceneCaptureCharacterWidget_OnMouseButtonUp_Internal::ReturnValue' has a wrong offset!");

// Function OutGameModule.ScoreProgressBarWidget.Finish
// 0x0008 (0x0008 - 0x0000)
struct ScoreProgressBarWidget_Finish final
{
public:
	class UProgressBarWidget*                     ProgressBar;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScoreProgressBarWidget_Finish) == 0x000008, "Wrong alignment on ScoreProgressBarWidget_Finish");
static_assert(sizeof(ScoreProgressBarWidget_Finish) == 0x000008, "Wrong size on ScoreProgressBarWidget_Finish");
static_assert(offsetof(ScoreProgressBarWidget_Finish, ProgressBar) == 0x000000, "Member 'ScoreProgressBarWidget_Finish::ProgressBar' has a wrong offset!");

// Function OutGameModule.ScoreProgressBarWidget.Progress
// 0x0008 (0x0008 - 0x0000)
struct ScoreProgressBarWidget_Progress final
{
public:
	float                                         NowValue;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScoreProgressBarWidget_Progress) == 0x000004, "Wrong alignment on ScoreProgressBarWidget_Progress");
static_assert(sizeof(ScoreProgressBarWidget_Progress) == 0x000008, "Wrong size on ScoreProgressBarWidget_Progress");
static_assert(offsetof(ScoreProgressBarWidget_Progress, NowValue) == 0x000000, "Member 'ScoreProgressBarWidget_Progress::NowValue' has a wrong offset!");
static_assert(offsetof(ScoreProgressBarWidget_Progress, MaxValue) == 0x000004, "Member 'ScoreProgressBarWidget_Progress::MaxValue' has a wrong offset!");

// DelegateFunction OutGameModule.ScoreProgressBarWidget.ProgressRankUp__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct ScoreProgressBarWidget_ProgressRankUp__DelegateSignature final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScoreProgressBarWidget_ProgressRankUp__DelegateSignature) == 0x000004, "Wrong alignment on ScoreProgressBarWidget_ProgressRankUp__DelegateSignature");
static_assert(sizeof(ScoreProgressBarWidget_ProgressRankUp__DelegateSignature) == 0x000004, "Wrong size on ScoreProgressBarWidget_ProgressRankUp__DelegateSignature");
static_assert(offsetof(ScoreProgressBarWidget_ProgressRankUp__DelegateSignature, Rank) == 0x000000, "Member 'ScoreProgressBarWidget_ProgressRankUp__DelegateSignature::Rank' has a wrong offset!");

// Function OutGameModule.SeasonPassAboutLicense.BP_SetUpItem
// 0x0018 (0x0018 - 0x0000)
struct SeasonPassAboutLicense_BP_SetUpItem final
{
public:
	class USeasonPassEntryBase*                   base;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Code;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemType                                     Type;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USeasonPassList*                        Season;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassAboutLicense_BP_SetUpItem) == 0x000008, "Wrong alignment on SeasonPassAboutLicense_BP_SetUpItem");
static_assert(sizeof(SeasonPassAboutLicense_BP_SetUpItem) == 0x000018, "Wrong size on SeasonPassAboutLicense_BP_SetUpItem");
static_assert(offsetof(SeasonPassAboutLicense_BP_SetUpItem, base) == 0x000000, "Member 'SeasonPassAboutLicense_BP_SetUpItem::base' has a wrong offset!");
static_assert(offsetof(SeasonPassAboutLicense_BP_SetUpItem, Code) == 0x000008, "Member 'SeasonPassAboutLicense_BP_SetUpItem::Code' has a wrong offset!");
static_assert(offsetof(SeasonPassAboutLicense_BP_SetUpItem, Type) == 0x00000C, "Member 'SeasonPassAboutLicense_BP_SetUpItem::Type' has a wrong offset!");
static_assert(offsetof(SeasonPassAboutLicense_BP_SetUpItem, Season) == 0x000010, "Member 'SeasonPassAboutLicense_BP_SetUpItem::Season' has a wrong offset!");

// Function OutGameModule.SeasonPassAboutLicense.BP_SetUpRankCell
// 0x0018 (0x0018 - 0x0000)
struct SeasonPassAboutLicense_BP_SetUpRankCell final
{
public:
	class USeasonPassAboutLicenseCell*            Cell;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGridPanel*                             Panel;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassAboutLicense_BP_SetUpRankCell) == 0x000008, "Wrong alignment on SeasonPassAboutLicense_BP_SetUpRankCell");
static_assert(sizeof(SeasonPassAboutLicense_BP_SetUpRankCell) == 0x000018, "Wrong size on SeasonPassAboutLicense_BP_SetUpRankCell");
static_assert(offsetof(SeasonPassAboutLicense_BP_SetUpRankCell, Cell) == 0x000000, "Member 'SeasonPassAboutLicense_BP_SetUpRankCell::Cell' has a wrong offset!");
static_assert(offsetof(SeasonPassAboutLicense_BP_SetUpRankCell, Index_0) == 0x000008, "Member 'SeasonPassAboutLicense_BP_SetUpRankCell::Index_0' has a wrong offset!");
static_assert(offsetof(SeasonPassAboutLicense_BP_SetUpRankCell, Panel) == 0x000010, "Member 'SeasonPassAboutLicense_BP_SetUpRankCell::Panel' has a wrong offset!");

// Function OutGameModule.SeasonPassAboutLicense.CreateRankCellWidget
// 0x0008 (0x0008 - 0x0000)
struct SeasonPassAboutLicense_CreateRankCellWidget final
{
public:
	class UGridPanel*                             Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassAboutLicense_CreateRankCellWidget) == 0x000008, "Wrong alignment on SeasonPassAboutLicense_CreateRankCellWidget");
static_assert(sizeof(SeasonPassAboutLicense_CreateRankCellWidget) == 0x000008, "Wrong size on SeasonPassAboutLicense_CreateRankCellWidget");
static_assert(offsetof(SeasonPassAboutLicense_CreateRankCellWidget, Panel) == 0x000000, "Member 'SeasonPassAboutLicense_CreateRankCellWidget::Panel' has a wrong offset!");

// Function OutGameModule.SeasonPassAboutLicense.GetScrollSpeedRate
// 0x0014 (0x0014 - 0x0000)
struct SeasonPassAboutLicense_GetScrollSpeedRate final
{
public:
	float                                         AnalogValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultSpeedRate;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MasSpeedRate;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddSpeedRate;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassAboutLicense_GetScrollSpeedRate) == 0x000004, "Wrong alignment on SeasonPassAboutLicense_GetScrollSpeedRate");
static_assert(sizeof(SeasonPassAboutLicense_GetScrollSpeedRate) == 0x000014, "Wrong size on SeasonPassAboutLicense_GetScrollSpeedRate");
static_assert(offsetof(SeasonPassAboutLicense_GetScrollSpeedRate, AnalogValue) == 0x000000, "Member 'SeasonPassAboutLicense_GetScrollSpeedRate::AnalogValue' has a wrong offset!");
static_assert(offsetof(SeasonPassAboutLicense_GetScrollSpeedRate, DefaultSpeedRate) == 0x000004, "Member 'SeasonPassAboutLicense_GetScrollSpeedRate::DefaultSpeedRate' has a wrong offset!");
static_assert(offsetof(SeasonPassAboutLicense_GetScrollSpeedRate, MasSpeedRate) == 0x000008, "Member 'SeasonPassAboutLicense_GetScrollSpeedRate::MasSpeedRate' has a wrong offset!");
static_assert(offsetof(SeasonPassAboutLicense_GetScrollSpeedRate, AddSpeedRate) == 0x00000C, "Member 'SeasonPassAboutLicense_GetScrollSpeedRate::AddSpeedRate' has a wrong offset!");
static_assert(offsetof(SeasonPassAboutLicense_GetScrollSpeedRate, ReturnValue) == 0x000010, "Member 'SeasonPassAboutLicense_GetScrollSpeedRate::ReturnValue' has a wrong offset!");

// Function OutGameModule.SeasonPassAboutLicenseListPanel.BP_SetUpBbColor
// 0x0010 (0x0010 - 0x0000)
struct SeasonPassAboutLicenseListPanel_BP_SetUpBbColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassAboutLicenseListPanel_BP_SetUpBbColor) == 0x000004, "Wrong alignment on SeasonPassAboutLicenseListPanel_BP_SetUpBbColor");
static_assert(sizeof(SeasonPassAboutLicenseListPanel_BP_SetUpBbColor) == 0x000010, "Wrong size on SeasonPassAboutLicenseListPanel_BP_SetUpBbColor");
static_assert(offsetof(SeasonPassAboutLicenseListPanel_BP_SetUpBbColor, Color) == 0x000000, "Member 'SeasonPassAboutLicenseListPanel_BP_SetUpBbColor::Color' has a wrong offset!");

// Function OutGameModule.SeasonPassDayList.BP_SetDayText
// 0x0004 (0x0004 - 0x0000)
struct SeasonPassDayList_BP_SetDayText final
{
public:
	int32                                         Day;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassDayList_BP_SetDayText) == 0x000004, "Wrong alignment on SeasonPassDayList_BP_SetDayText");
static_assert(sizeof(SeasonPassDayList_BP_SetDayText) == 0x000004, "Wrong size on SeasonPassDayList_BP_SetDayText");
static_assert(offsetof(SeasonPassDayList_BP_SetDayText, Day) == 0x000000, "Member 'SeasonPassDayList_BP_SetDayText::Day' has a wrong offset!");

// Function OutGameModule.SeasonPassDayList.BP_SetLayout
// 0x000C (0x000C - 0x0000)
struct SeasonPassDayList_BP_SetLayout final
{
public:
	int32                                         CombineItem;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxItem;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Page;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassDayList_BP_SetLayout) == 0x000004, "Wrong alignment on SeasonPassDayList_BP_SetLayout");
static_assert(sizeof(SeasonPassDayList_BP_SetLayout) == 0x00000C, "Wrong size on SeasonPassDayList_BP_SetLayout");
static_assert(offsetof(SeasonPassDayList_BP_SetLayout, CombineItem) == 0x000000, "Member 'SeasonPassDayList_BP_SetLayout::CombineItem' has a wrong offset!");
static_assert(offsetof(SeasonPassDayList_BP_SetLayout, MaxItem) == 0x000004, "Member 'SeasonPassDayList_BP_SetLayout::MaxItem' has a wrong offset!");
static_assert(offsetof(SeasonPassDayList_BP_SetLayout, Page) == 0x000008, "Member 'SeasonPassDayList_BP_SetLayout::Page' has a wrong offset!");

// Function OutGameModule.SeasonPassEntry.BP_GetCurretnFocusWidget
// 0x0008 (0x0008 - 0x0000)
struct SeasonPassEntry_BP_GetCurretnFocusWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassEntry_BP_GetCurretnFocusWidget) == 0x000008, "Wrong alignment on SeasonPassEntry_BP_GetCurretnFocusWidget");
static_assert(sizeof(SeasonPassEntry_BP_GetCurretnFocusWidget) == 0x000008, "Wrong size on SeasonPassEntry_BP_GetCurretnFocusWidget");
static_assert(offsetof(SeasonPassEntry_BP_GetCurretnFocusWidget, ReturnValue) == 0x000000, "Member 'SeasonPassEntry_BP_GetCurretnFocusWidget::ReturnValue' has a wrong offset!");

// Function OutGameModule.SeasonPassEntry.BP_SetFocusFunction
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassEntry_BP_SetFocusFunction final
{
public:
	bool                                          bIsStock;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassEntry_BP_SetFocusFunction) == 0x000001, "Wrong alignment on SeasonPassEntry_BP_SetFocusFunction");
static_assert(sizeof(SeasonPassEntry_BP_SetFocusFunction) == 0x000001, "Wrong size on SeasonPassEntry_BP_SetFocusFunction");
static_assert(offsetof(SeasonPassEntry_BP_SetFocusFunction, bIsStock) == 0x000000, "Member 'SeasonPassEntry_BP_SetFocusFunction::bIsStock' has a wrong offset!");

// Function OutGameModule.SeasonPassEntry.OnCustomWidgetNavigation
// 0x0010 (0x0010 - 0x0000)
struct SeasonPassEntry_OnCustomWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassEntry_OnCustomWidgetNavigation) == 0x000008, "Wrong alignment on SeasonPassEntry_OnCustomWidgetNavigation");
static_assert(sizeof(SeasonPassEntry_OnCustomWidgetNavigation) == 0x000010, "Wrong size on SeasonPassEntry_OnCustomWidgetNavigation");
static_assert(offsetof(SeasonPassEntry_OnCustomWidgetNavigation, UiNavigation) == 0x000000, "Member 'SeasonPassEntry_OnCustomWidgetNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(SeasonPassEntry_OnCustomWidgetNavigation, ReturnValue) == 0x000008, "Member 'SeasonPassEntry_OnCustomWidgetNavigation::ReturnValue' has a wrong offset!");

// Function OutGameModule.SeasonPassEntry.GetIndex
// 0x0004 (0x0004 - 0x0000)
struct SeasonPassEntry_GetIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassEntry_GetIndex) == 0x000004, "Wrong alignment on SeasonPassEntry_GetIndex");
static_assert(sizeof(SeasonPassEntry_GetIndex) == 0x000004, "Wrong size on SeasonPassEntry_GetIndex");
static_assert(offsetof(SeasonPassEntry_GetIndex, ReturnValue) == 0x000000, "Member 'SeasonPassEntry_GetIndex::ReturnValue' has a wrong offset!");

// Function OutGameModule.SeasonPassEntry.GetItemSeasonType
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassEntry_GetItemSeasonType final
{
public:
	EItemSeasonType                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassEntry_GetItemSeasonType) == 0x000001, "Wrong alignment on SeasonPassEntry_GetItemSeasonType");
static_assert(sizeof(SeasonPassEntry_GetItemSeasonType) == 0x000001, "Wrong size on SeasonPassEntry_GetItemSeasonType");
static_assert(offsetof(SeasonPassEntry_GetItemSeasonType, ReturnValue) == 0x000000, "Member 'SeasonPassEntry_GetItemSeasonType::ReturnValue' has a wrong offset!");

// Function OutGameModule.SeasonPassEntry.GetStockIndex
// 0x0004 (0x0004 - 0x0000)
struct SeasonPassEntry_GetStockIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassEntry_GetStockIndex) == 0x000004, "Wrong alignment on SeasonPassEntry_GetStockIndex");
static_assert(sizeof(SeasonPassEntry_GetStockIndex) == 0x000004, "Wrong size on SeasonPassEntry_GetStockIndex");
static_assert(offsetof(SeasonPassEntry_GetStockIndex, ReturnValue) == 0x000000, "Member 'SeasonPassEntry_GetStockIndex::ReturnValue' has a wrong offset!");

// Function OutGameModule.SeasonPassLicensePurchase.BP_CheckSeasonExpired
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassLicensePurchase_BP_CheckSeasonExpired final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassLicensePurchase_BP_CheckSeasonExpired) == 0x000001, "Wrong alignment on SeasonPassLicensePurchase_BP_CheckSeasonExpired");
static_assert(sizeof(SeasonPassLicensePurchase_BP_CheckSeasonExpired) == 0x000001, "Wrong size on SeasonPassLicensePurchase_BP_CheckSeasonExpired");
static_assert(offsetof(SeasonPassLicensePurchase_BP_CheckSeasonExpired, ReturnValue) == 0x000000, "Member 'SeasonPassLicensePurchase_BP_CheckSeasonExpired::ReturnValue' has a wrong offset!");

// Function OutGameModule.SeasonPassLicensePurchase.SetUpButtonFlag
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassLicensePurchase_SetUpButtonFlag final
{
public:
	bool                                          buttonActive;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassLicensePurchase_SetUpButtonFlag) == 0x000001, "Wrong alignment on SeasonPassLicensePurchase_SetUpButtonFlag");
static_assert(sizeof(SeasonPassLicensePurchase_SetUpButtonFlag) == 0x000001, "Wrong size on SeasonPassLicensePurchase_SetUpButtonFlag");
static_assert(offsetof(SeasonPassLicensePurchase_SetUpButtonFlag, buttonActive) == 0x000000, "Member 'SeasonPassLicensePurchase_SetUpButtonFlag::buttonActive' has a wrong offset!");

// Function OutGameModule.SeasonPassLicensePurchase.BP_GetItemProLicenseExp
// 0x0004 (0x0004 - 0x0000)
struct SeasonPassLicensePurchase_BP_GetItemProLicenseExp final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassLicensePurchase_BP_GetItemProLicenseExp) == 0x000004, "Wrong alignment on SeasonPassLicensePurchase_BP_GetItemProLicenseExp");
static_assert(sizeof(SeasonPassLicensePurchase_BP_GetItemProLicenseExp) == 0x000004, "Wrong size on SeasonPassLicensePurchase_BP_GetItemProLicenseExp");
static_assert(offsetof(SeasonPassLicensePurchase_BP_GetItemProLicenseExp, ReturnValue) == 0x000000, "Member 'SeasonPassLicensePurchase_BP_GetItemProLicenseExp::ReturnValue' has a wrong offset!");

// Function OutGameModule.SeasonPassList.BP_ChangeScrollDestination
// 0x0008 (0x0008 - 0x0000)
struct SeasonPassList_BP_ChangeScrollDestination final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemSeasonType                               Type;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SeasonPassList_BP_ChangeScrollDestination) == 0x000004, "Wrong alignment on SeasonPassList_BP_ChangeScrollDestination");
static_assert(sizeof(SeasonPassList_BP_ChangeScrollDestination) == 0x000008, "Wrong size on SeasonPassList_BP_ChangeScrollDestination");
static_assert(offsetof(SeasonPassList_BP_ChangeScrollDestination, Index_0) == 0x000000, "Member 'SeasonPassList_BP_ChangeScrollDestination::Index_0' has a wrong offset!");
static_assert(offsetof(SeasonPassList_BP_ChangeScrollDestination, Type) == 0x000004, "Member 'SeasonPassList_BP_ChangeScrollDestination::Type' has a wrong offset!");

// Function OutGameModule.SeasonPassList.BP_CheckPlayableSound
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassList_BP_CheckPlayableSound final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassList_BP_CheckPlayableSound) == 0x000001, "Wrong alignment on SeasonPassList_BP_CheckPlayableSound");
static_assert(sizeof(SeasonPassList_BP_CheckPlayableSound) == 0x000001, "Wrong size on SeasonPassList_BP_CheckPlayableSound");
static_assert(offsetof(SeasonPassList_BP_CheckPlayableSound, ReturnValue) == 0x000000, "Member 'SeasonPassList_BP_CheckPlayableSound::ReturnValue' has a wrong offset!");

// Function OutGameModule.SeasonPassList.BP_GetCurretnFocusItem
// 0x0008 (0x0008 - 0x0000)
struct SeasonPassList_BP_GetCurretnFocusItem final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassList_BP_GetCurretnFocusItem) == 0x000008, "Wrong alignment on SeasonPassList_BP_GetCurretnFocusItem");
static_assert(sizeof(SeasonPassList_BP_GetCurretnFocusItem) == 0x000008, "Wrong size on SeasonPassList_BP_GetCurretnFocusItem");
static_assert(offsetof(SeasonPassList_BP_GetCurretnFocusItem, ReturnValue) == 0x000000, "Member 'SeasonPassList_BP_GetCurretnFocusItem::ReturnValue' has a wrong offset!");

// Function OutGameModule.SeasonPassList.BP_GetItemMax
// 0x0004 (0x0004 - 0x0000)
struct SeasonPassList_BP_GetItemMax final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassList_BP_GetItemMax) == 0x000004, "Wrong alignment on SeasonPassList_BP_GetItemMax");
static_assert(sizeof(SeasonPassList_BP_GetItemMax) == 0x000004, "Wrong size on SeasonPassList_BP_GetItemMax");
static_assert(offsetof(SeasonPassList_BP_GetItemMax, ReturnValue) == 0x000000, "Member 'SeasonPassList_BP_GetItemMax::ReturnValue' has a wrong offset!");

// Function OutGameModule.SeasonPassList.BP_GetPageMax
// 0x0004 (0x0004 - 0x0000)
struct SeasonPassList_BP_GetPageMax final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassList_BP_GetPageMax) == 0x000004, "Wrong alignment on SeasonPassList_BP_GetPageMax");
static_assert(sizeof(SeasonPassList_BP_GetPageMax) == 0x000004, "Wrong size on SeasonPassList_BP_GetPageMax");
static_assert(offsetof(SeasonPassList_BP_GetPageMax, ReturnValue) == 0x000000, "Member 'SeasonPassList_BP_GetPageMax::ReturnValue' has a wrong offset!");

// Function OutGameModule.SeasonPassList.BP_GetScrollPageIndex
// 0x0004 (0x0004 - 0x0000)
struct SeasonPassList_BP_GetScrollPageIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassList_BP_GetScrollPageIndex) == 0x000004, "Wrong alignment on SeasonPassList_BP_GetScrollPageIndex");
static_assert(sizeof(SeasonPassList_BP_GetScrollPageIndex) == 0x000004, "Wrong size on SeasonPassList_BP_GetScrollPageIndex");
static_assert(offsetof(SeasonPassList_BP_GetScrollPageIndex, ReturnValue) == 0x000000, "Member 'SeasonPassList_BP_GetScrollPageIndex::ReturnValue' has a wrong offset!");

// Function OutGameModule.SeasonPassList.BP_InitList
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassList_BP_InitList final
{
public:
	ESeasonType                                   Seasontype;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassList_BP_InitList) == 0x000001, "Wrong alignment on SeasonPassList_BP_InitList");
static_assert(sizeof(SeasonPassList_BP_InitList) == 0x000001, "Wrong size on SeasonPassList_BP_InitList");
static_assert(offsetof(SeasonPassList_BP_InitList, Seasontype) == 0x000000, "Member 'SeasonPassList_BP_InitList::Seasontype' has a wrong offset!");

// Function OutGameModule.SeasonPassList.BP_SetItemObject
// 0x0990 (0x0990 - 0x0000)
struct SeasonPassList_BP_SetItemObject final
{
public:
	struct FDbSeasonPassParam                     Param;                                             // 0x0000(0x0980)(Parm, NativeAccessSpecifierPublic)
	class UObject*                                Obj;                                               // 0x0980(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0988(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemType                                     ItemType;                                          // 0x098C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98D[0x3];                                      // 0x098D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SeasonPassList_BP_SetItemObject) == 0x000008, "Wrong alignment on SeasonPassList_BP_SetItemObject");
static_assert(sizeof(SeasonPassList_BP_SetItemObject) == 0x000990, "Wrong size on SeasonPassList_BP_SetItemObject");
static_assert(offsetof(SeasonPassList_BP_SetItemObject, Param) == 0x000000, "Member 'SeasonPassList_BP_SetItemObject::Param' has a wrong offset!");
static_assert(offsetof(SeasonPassList_BP_SetItemObject, Obj) == 0x000980, "Member 'SeasonPassList_BP_SetItemObject::Obj' has a wrong offset!");
static_assert(offsetof(SeasonPassList_BP_SetItemObject, Index_0) == 0x000988, "Member 'SeasonPassList_BP_SetItemObject::Index_0' has a wrong offset!");
static_assert(offsetof(SeasonPassList_BP_SetItemObject, ItemType) == 0x00098C, "Member 'SeasonPassList_BP_SetItemObject::ItemType' has a wrong offset!");

// Function OutGameModule.SeasonPassList.BP_SetItemSpecialObject
// 0x04D0 (0x04D0 - 0x0000)
struct SeasonPassList_BP_SetItemSpecialObject final
{
public:
	struct FDbSpecialLicenseParam                 Param;                                             // 0x0000(0x04C0)(Parm, NativeAccessSpecifierPublic)
	class UObject*                                Obj;                                               // 0x04C0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x04C8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemType                                     ItemType;                                          // 0x04CC(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4CD[0x3];                                      // 0x04CD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SeasonPassList_BP_SetItemSpecialObject) == 0x000008, "Wrong alignment on SeasonPassList_BP_SetItemSpecialObject");
static_assert(sizeof(SeasonPassList_BP_SetItemSpecialObject) == 0x0004D0, "Wrong size on SeasonPassList_BP_SetItemSpecialObject");
static_assert(offsetof(SeasonPassList_BP_SetItemSpecialObject, Param) == 0x000000, "Member 'SeasonPassList_BP_SetItemSpecialObject::Param' has a wrong offset!");
static_assert(offsetof(SeasonPassList_BP_SetItemSpecialObject, Obj) == 0x0004C0, "Member 'SeasonPassList_BP_SetItemSpecialObject::Obj' has a wrong offset!");
static_assert(offsetof(SeasonPassList_BP_SetItemSpecialObject, Index_0) == 0x0004C8, "Member 'SeasonPassList_BP_SetItemSpecialObject::Index_0' has a wrong offset!");
static_assert(offsetof(SeasonPassList_BP_SetItemSpecialObject, ItemType) == 0x0004CC, "Member 'SeasonPassList_BP_SetItemSpecialObject::ItemType' has a wrong offset!");

// Function OutGameModule.SeasonPassList.BP_SetUpEntryFocusMove
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassList_BP_SetUpEntryFocusMove final
{
public:
	bool                                          IsRight;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassList_BP_SetUpEntryFocusMove) == 0x000001, "Wrong alignment on SeasonPassList_BP_SetUpEntryFocusMove");
static_assert(sizeof(SeasonPassList_BP_SetUpEntryFocusMove) == 0x000001, "Wrong size on SeasonPassList_BP_SetUpEntryFocusMove");
static_assert(offsetof(SeasonPassList_BP_SetUpEntryFocusMove, IsRight) == 0x000000, "Member 'SeasonPassList_BP_SetUpEntryFocusMove::IsRight' has a wrong offset!");

// Function OutGameModule.SeasonPassList.BP_SetUpIndex
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassList_BP_SetUpIndex final
{
public:
	bool                                          SendNextIndexFlag;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassList_BP_SetUpIndex) == 0x000001, "Wrong alignment on SeasonPassList_BP_SetUpIndex");
static_assert(sizeof(SeasonPassList_BP_SetUpIndex) == 0x000001, "Wrong size on SeasonPassList_BP_SetUpIndex");
static_assert(offsetof(SeasonPassList_BP_SetUpIndex, SendNextIndexFlag) == 0x000000, "Member 'SeasonPassList_BP_SetUpIndex::SendNextIndexFlag' has a wrong offset!");

// Function OutGameModule.SeasonPassList.BP_SetUpListBGColor
// 0x0008 (0x0008 - 0x0000)
struct SeasonPassList_BP_SetUpListBGColor final
{
public:
	struct FColor                                 PurchaseColor;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 DefaultColor;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassList_BP_SetUpListBGColor) == 0x000004, "Wrong alignment on SeasonPassList_BP_SetUpListBGColor");
static_assert(sizeof(SeasonPassList_BP_SetUpListBGColor) == 0x000008, "Wrong size on SeasonPassList_BP_SetUpListBGColor");
static_assert(offsetof(SeasonPassList_BP_SetUpListBGColor, PurchaseColor) == 0x000000, "Member 'SeasonPassList_BP_SetUpListBGColor::PurchaseColor' has a wrong offset!");
static_assert(offsetof(SeasonPassList_BP_SetUpListBGColor, DefaultColor) == 0x000004, "Member 'SeasonPassList_BP_SetUpListBGColor::DefaultColor' has a wrong offset!");

// Function OutGameModule.SeasonPassList.BP_UpdateMouseScrollItem
// 0x0004 (0x0004 - 0x0000)
struct SeasonPassList_BP_UpdateMouseScrollItem final
{
public:
	float                                         CurrentOffset;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassList_BP_UpdateMouseScrollItem) == 0x000004, "Wrong alignment on SeasonPassList_BP_UpdateMouseScrollItem");
static_assert(sizeof(SeasonPassList_BP_UpdateMouseScrollItem) == 0x000004, "Wrong size on SeasonPassList_BP_UpdateMouseScrollItem");
static_assert(offsetof(SeasonPassList_BP_UpdateMouseScrollItem, CurrentOffset) == 0x000000, "Member 'SeasonPassList_BP_UpdateMouseScrollItem::CurrentOffset' has a wrong offset!");

// Function OutGameModule.SeasonPassList.BP_UpdatePager
// 0x0004 (0x0004 - 0x0000)
struct SeasonPassList_BP_UpdatePager final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassList_BP_UpdatePager) == 0x000004, "Wrong alignment on SeasonPassList_BP_UpdatePager");
static_assert(sizeof(SeasonPassList_BP_UpdatePager) == 0x000004, "Wrong size on SeasonPassList_BP_UpdatePager");
static_assert(offsetof(SeasonPassList_BP_UpdatePager, Index_0) == 0x000000, "Member 'SeasonPassList_BP_UpdatePager::Index_0' has a wrong offset!");

// Function OutGameModule.SeasonPassList.CreateEntryWidget
// 0x0008 (0x0008 - 0x0000)
struct SeasonPassList_CreateEntryWidget final
{
public:
	class USeasonEntry*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassList_CreateEntryWidget) == 0x000008, "Wrong alignment on SeasonPassList_CreateEntryWidget");
static_assert(sizeof(SeasonPassList_CreateEntryWidget) == 0x000008, "Wrong size on SeasonPassList_CreateEntryWidget");
static_assert(offsetof(SeasonPassList_CreateEntryWidget, ReturnValue) == 0x000000, "Member 'SeasonPassList_CreateEntryWidget::ReturnValue' has a wrong offset!");

// Function OutGameModule.SeasonPassList.GetSeasonImage
// 0x0010 (0x0010 - 0x0000)
struct SeasonPassList_GetSeasonImage final
{
public:
	ESeasonImageSize                              Size;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassList_GetSeasonImage) == 0x000008, "Wrong alignment on SeasonPassList_GetSeasonImage");
static_assert(sizeof(SeasonPassList_GetSeasonImage) == 0x000010, "Wrong size on SeasonPassList_GetSeasonImage");
static_assert(offsetof(SeasonPassList_GetSeasonImage, Size) == 0x000000, "Member 'SeasonPassList_GetSeasonImage::Size' has a wrong offset!");
static_assert(offsetof(SeasonPassList_GetSeasonImage, ReturnValue) == 0x000008, "Member 'SeasonPassList_GetSeasonImage::ReturnValue' has a wrong offset!");

// Function OutGameModule.SeasonPassList.SeasonitemIsEmpty
// 0x0988 (0x0988 - 0x0000)
struct SeasonPassList_SeasonitemIsEmpty final
{
public:
	struct FDbSeasonPassParam                     Param;                                             // 0x0000(0x0980)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0980(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_981[0x7];                                      // 0x0981(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SeasonPassList_SeasonitemIsEmpty) == 0x000008, "Wrong alignment on SeasonPassList_SeasonitemIsEmpty");
static_assert(sizeof(SeasonPassList_SeasonitemIsEmpty) == 0x000988, "Wrong size on SeasonPassList_SeasonitemIsEmpty");
static_assert(offsetof(SeasonPassList_SeasonitemIsEmpty, Param) == 0x000000, "Member 'SeasonPassList_SeasonitemIsEmpty::Param' has a wrong offset!");
static_assert(offsetof(SeasonPassList_SeasonitemIsEmpty, ReturnValue) == 0x000980, "Member 'SeasonPassList_SeasonitemIsEmpty::ReturnValue' has a wrong offset!");

// Function OutGameModule.SeasonPassList.SetUpScrollBox
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassList_SetUpScrollBox final
{
public:
	ESeasonType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassList_SetUpScrollBox) == 0x000001, "Wrong alignment on SeasonPassList_SetUpScrollBox");
static_assert(sizeof(SeasonPassList_SetUpScrollBox) == 0x000001, "Wrong size on SeasonPassList_SetUpScrollBox");
static_assert(offsetof(SeasonPassList_SetUpScrollBox, Type) == 0x000000, "Member 'SeasonPassList_SetUpScrollBox::Type' has a wrong offset!");

// Function OutGameModule.SeasonPassList.SetUpScrollBoxList
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassList_SetUpScrollBoxList final
{
public:
	ESeasonType                                   Seasontype;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassList_SetUpScrollBoxList) == 0x000001, "Wrong alignment on SeasonPassList_SetUpScrollBoxList");
static_assert(sizeof(SeasonPassList_SetUpScrollBoxList) == 0x000001, "Wrong size on SeasonPassList_SetUpScrollBoxList");
static_assert(offsetof(SeasonPassList_SetUpScrollBoxList, Seasontype) == 0x000000, "Member 'SeasonPassList_SetUpScrollBoxList::Seasontype' has a wrong offset!");

// Function OutGameModule.SeasonPassList.SpecialitemIsEmpty
// 0x04C8 (0x04C8 - 0x0000)
struct SeasonPassList_SpecialitemIsEmpty final
{
public:
	struct FDbSpecialLicenseParam                 Param;                                             // 0x0000(0x04C0)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x04C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C1[0x7];                                      // 0x04C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SeasonPassList_SpecialitemIsEmpty) == 0x000008, "Wrong alignment on SeasonPassList_SpecialitemIsEmpty");
static_assert(sizeof(SeasonPassList_SpecialitemIsEmpty) == 0x0004C8, "Wrong size on SeasonPassList_SpecialitemIsEmpty");
static_assert(offsetof(SeasonPassList_SpecialitemIsEmpty, Param) == 0x000000, "Member 'SeasonPassList_SpecialitemIsEmpty::Param' has a wrong offset!");
static_assert(offsetof(SeasonPassList_SpecialitemIsEmpty, ReturnValue) == 0x0004C0, "Member 'SeasonPassList_SpecialitemIsEmpty::ReturnValue' has a wrong offset!");

// Function OutGameModule.SeasonPassList.UpdateMouseScrollItem
// 0x0004 (0x0004 - 0x0000)
struct SeasonPassList_UpdateMouseScrollItem final
{
public:
	float                                         CurrentOffset;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassList_UpdateMouseScrollItem) == 0x000004, "Wrong alignment on SeasonPassList_UpdateMouseScrollItem");
static_assert(sizeof(SeasonPassList_UpdateMouseScrollItem) == 0x000004, "Wrong size on SeasonPassList_UpdateMouseScrollItem");
static_assert(offsetof(SeasonPassList_UpdateMouseScrollItem, CurrentOffset) == 0x000000, "Member 'SeasonPassList_UpdateMouseScrollItem::CurrentOffset' has a wrong offset!");

// Function OutGameModule.SeasonPassList.GetStockNum
// 0x0004 (0x0004 - 0x0000)
struct SeasonPassList_GetStockNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassList_GetStockNum) == 0x000004, "Wrong alignment on SeasonPassList_GetStockNum");
static_assert(sizeof(SeasonPassList_GetStockNum) == 0x000004, "Wrong size on SeasonPassList_GetStockNum");
static_assert(offsetof(SeasonPassList_GetStockNum, ReturnValue) == 0x000000, "Member 'SeasonPassList_GetStockNum::ReturnValue' has a wrong offset!");

// Function OutGameModule.SeasonPassListObject.BP_GetItemCategory
// 0x0010 (0x0010 - 0x0000)
struct SeasonPassListObject_BP_GetItemCategory final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassListObject_BP_GetItemCategory) == 0x000008, "Wrong alignment on SeasonPassListObject_BP_GetItemCategory");
static_assert(sizeof(SeasonPassListObject_BP_GetItemCategory) == 0x000010, "Wrong size on SeasonPassListObject_BP_GetItemCategory");
static_assert(offsetof(SeasonPassListObject_BP_GetItemCategory, ReturnValue) == 0x000000, "Member 'SeasonPassListObject_BP_GetItemCategory::ReturnValue' has a wrong offset!");

// Function OutGameModule.SeasonPassListObject.BP_GetItemId
// 0x0004 (0x0004 - 0x0000)
struct SeasonPassListObject_BP_GetItemId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassListObject_BP_GetItemId) == 0x000004, "Wrong alignment on SeasonPassListObject_BP_GetItemId");
static_assert(sizeof(SeasonPassListObject_BP_GetItemId) == 0x000004, "Wrong size on SeasonPassListObject_BP_GetItemId");
static_assert(offsetof(SeasonPassListObject_BP_GetItemId, ReturnValue) == 0x000000, "Member 'SeasonPassListObject_BP_GetItemId::ReturnValue' has a wrong offset!");

// Function OutGameModule.SeasonPassListObject.BP_GetItemType
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassListObject_BP_GetItemType final
{
public:
	EItemType                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassListObject_BP_GetItemType) == 0x000001, "Wrong alignment on SeasonPassListObject_BP_GetItemType");
static_assert(sizeof(SeasonPassListObject_BP_GetItemType) == 0x000001, "Wrong size on SeasonPassListObject_BP_GetItemType");
static_assert(offsetof(SeasonPassListObject_BP_GetItemType, ReturnValue) == 0x000000, "Member 'SeasonPassListObject_BP_GetItemType::ReturnValue' has a wrong offset!");

// Function OutGameModule.SeasonPassListObject.BP_GetRarity
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassListObject_BP_GetRarity final
{
public:
	EMdRarity                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassListObject_BP_GetRarity) == 0x000001, "Wrong alignment on SeasonPassListObject_BP_GetRarity");
static_assert(sizeof(SeasonPassListObject_BP_GetRarity) == 0x000001, "Wrong size on SeasonPassListObject_BP_GetRarity");
static_assert(offsetof(SeasonPassListObject_BP_GetRarity, ReturnValue) == 0x000000, "Member 'SeasonPassListObject_BP_GetRarity::ReturnValue' has a wrong offset!");

// Function OutGameModule.SeasonPassListObject.BP_SetItemCategory
// 0x0010 (0x0010 - 0x0000)
struct SeasonPassListObject_BP_SetItemCategory final
{
public:
	class FString                                 Category;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassListObject_BP_SetItemCategory) == 0x000008, "Wrong alignment on SeasonPassListObject_BP_SetItemCategory");
static_assert(sizeof(SeasonPassListObject_BP_SetItemCategory) == 0x000010, "Wrong size on SeasonPassListObject_BP_SetItemCategory");
static_assert(offsetof(SeasonPassListObject_BP_SetItemCategory, Category) == 0x000000, "Member 'SeasonPassListObject_BP_SetItemCategory::Category' has a wrong offset!");

// Function OutGameModule.SeasonPassListObject.BP_SetItemId
// 0x0004 (0x0004 - 0x0000)
struct SeasonPassListObject_BP_SetItemId final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassListObject_BP_SetItemId) == 0x000004, "Wrong alignment on SeasonPassListObject_BP_SetItemId");
static_assert(sizeof(SeasonPassListObject_BP_SetItemId) == 0x000004, "Wrong size on SeasonPassListObject_BP_SetItemId");
static_assert(offsetof(SeasonPassListObject_BP_SetItemId, ID) == 0x000000, "Member 'SeasonPassListObject_BP_SetItemId::ID' has a wrong offset!");

// Function OutGameModule.SeasonPassRankEntry.BP_SetImageSize
// 0x000C (0x000C - 0x0000)
struct SeasonPassRankEntry_BP_SetImageSize final
{
public:
	int32                                         SizeY;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CombineItem;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EntrySpacing;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassRankEntry_BP_SetImageSize) == 0x000004, "Wrong alignment on SeasonPassRankEntry_BP_SetImageSize");
static_assert(sizeof(SeasonPassRankEntry_BP_SetImageSize) == 0x00000C, "Wrong size on SeasonPassRankEntry_BP_SetImageSize");
static_assert(offsetof(SeasonPassRankEntry_BP_SetImageSize, SizeY) == 0x000000, "Member 'SeasonPassRankEntry_BP_SetImageSize::SizeY' has a wrong offset!");
static_assert(offsetof(SeasonPassRankEntry_BP_SetImageSize, CombineItem) == 0x000004, "Member 'SeasonPassRankEntry_BP_SetImageSize::CombineItem' has a wrong offset!");
static_assert(offsetof(SeasonPassRankEntry_BP_SetImageSize, EntrySpacing) == 0x000008, "Member 'SeasonPassRankEntry_BP_SetImageSize::EntrySpacing' has a wrong offset!");

// Function OutGameModule.SeasonPassScrollBar.BP_SetList
// 0x0008 (0x0008 - 0x0000)
struct SeasonPassScrollBar_BP_SetList final
{
public:
	class UWidgetBase*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassScrollBar_BP_SetList) == 0x000008, "Wrong alignment on SeasonPassScrollBar_BP_SetList");
static_assert(sizeof(SeasonPassScrollBar_BP_SetList) == 0x000008, "Wrong size on SeasonPassScrollBar_BP_SetList");
static_assert(offsetof(SeasonPassScrollBar_BP_SetList, Widget) == 0x000000, "Member 'SeasonPassScrollBar_BP_SetList::Widget' has a wrong offset!");

// Function OutGameModule.SeasonPassScrollBar.BP_SetListItemSelect
// 0x0004 (0x0004 - 0x0000)
struct SeasonPassScrollBar_BP_SetListItemSelect final
{
public:
	int32                                         SelectPage;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassScrollBar_BP_SetListItemSelect) == 0x000004, "Wrong alignment on SeasonPassScrollBar_BP_SetListItemSelect");
static_assert(sizeof(SeasonPassScrollBar_BP_SetListItemSelect) == 0x000004, "Wrong size on SeasonPassScrollBar_BP_SetListItemSelect");
static_assert(offsetof(SeasonPassScrollBar_BP_SetListItemSelect, SelectPage) == 0x000000, "Member 'SeasonPassScrollBar_BP_SetListItemSelect::SelectPage' has a wrong offset!");

// Function OutGameModule.SeasonPassScrollBar.BP_SetUpScrollBar
// 0x0004 (0x0004 - 0x0000)
struct SeasonPassScrollBar_BP_SetUpScrollBar final
{
public:
	int32                                         PageMax;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassScrollBar_BP_SetUpScrollBar) == 0x000004, "Wrong alignment on SeasonPassScrollBar_BP_SetUpScrollBar");
static_assert(sizeof(SeasonPassScrollBar_BP_SetUpScrollBar) == 0x000004, "Wrong size on SeasonPassScrollBar_BP_SetUpScrollBar");
static_assert(offsetof(SeasonPassScrollBar_BP_SetUpScrollBar, PageMax) == 0x000000, "Member 'SeasonPassScrollBar_BP_SetUpScrollBar::PageMax' has a wrong offset!");

// Function OutGameModule.SeasonPassTitle.BP_UpdateTime
// 0x0008 (0x0008 - 0x0000)
struct SeasonPassTitle_BP_UpdateTime final
{
public:
	struct FTimespan                              RemainingTime;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassTitle_BP_UpdateTime) == 0x000008, "Wrong alignment on SeasonPassTitle_BP_UpdateTime");
static_assert(sizeof(SeasonPassTitle_BP_UpdateTime) == 0x000008, "Wrong size on SeasonPassTitle_BP_UpdateTime");
static_assert(offsetof(SeasonPassTitle_BP_UpdateTime, RemainingTime) == 0x000000, "Member 'SeasonPassTitle_BP_UpdateTime::RemainingTime' has a wrong offset!");

// Function OutGameModule.SettingButtonChoicesWidget.BP_GetIndex
// 0x0004 (0x0004 - 0x0000)
struct SettingButtonChoicesWidget_BP_GetIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingButtonChoicesWidget_BP_GetIndex) == 0x000004, "Wrong alignment on SettingButtonChoicesWidget_BP_GetIndex");
static_assert(sizeof(SettingButtonChoicesWidget_BP_GetIndex) == 0x000004, "Wrong size on SettingButtonChoicesWidget_BP_GetIndex");
static_assert(offsetof(SettingButtonChoicesWidget_BP_GetIndex, ReturnValue) == 0x000000, "Member 'SettingButtonChoicesWidget_BP_GetIndex::ReturnValue' has a wrong offset!");

// Function OutGameModule.SettingButtonChoicesWidget.BP_GetIndexText
// 0x0018 (0x0018 - 0x0000)
struct SettingButtonChoicesWidget_BP_GetIndexText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingButtonChoicesWidget_BP_GetIndexText) == 0x000008, "Wrong alignment on SettingButtonChoicesWidget_BP_GetIndexText");
static_assert(sizeof(SettingButtonChoicesWidget_BP_GetIndexText) == 0x000018, "Wrong size on SettingButtonChoicesWidget_BP_GetIndexText");
static_assert(offsetof(SettingButtonChoicesWidget_BP_GetIndexText, ReturnValue) == 0x000000, "Member 'SettingButtonChoicesWidget_BP_GetIndexText::ReturnValue' has a wrong offset!");

// Function OutGameModule.SettingButtonChoicesWidget.BP_InitParam
// 0x0030 (0x0030 - 0x0000)
struct SettingButtonChoicesWidget_BP_InitParam final
{
public:
	class FText                                   Categories;                                        // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	TArray<class FText>                           SelectArray;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         DefaultIndex;                                      // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SettingButtonChoicesWidget_BP_InitParam) == 0x000008, "Wrong alignment on SettingButtonChoicesWidget_BP_InitParam");
static_assert(sizeof(SettingButtonChoicesWidget_BP_InitParam) == 0x000030, "Wrong size on SettingButtonChoicesWidget_BP_InitParam");
static_assert(offsetof(SettingButtonChoicesWidget_BP_InitParam, Categories) == 0x000000, "Member 'SettingButtonChoicesWidget_BP_InitParam::Categories' has a wrong offset!");
static_assert(offsetof(SettingButtonChoicesWidget_BP_InitParam, SelectArray) == 0x000018, "Member 'SettingButtonChoicesWidget_BP_InitParam::SelectArray' has a wrong offset!");
static_assert(offsetof(SettingButtonChoicesWidget_BP_InitParam, DefaultIndex) == 0x000028, "Member 'SettingButtonChoicesWidget_BP_InitParam::DefaultIndex' has a wrong offset!");

// Function OutGameModule.SettingButtonChoicesWidget.BP_SetBG
// 0x0001 (0x0001 - 0x0000)
struct SettingButtonChoicesWidget_BP_SetBG final
{
public:
	ESettingButtonBGType                          bgType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingButtonChoicesWidget_BP_SetBG) == 0x000001, "Wrong alignment on SettingButtonChoicesWidget_BP_SetBG");
static_assert(sizeof(SettingButtonChoicesWidget_BP_SetBG) == 0x000001, "Wrong size on SettingButtonChoicesWidget_BP_SetBG");
static_assert(offsetof(SettingButtonChoicesWidget_BP_SetBG, bgType) == 0x000000, "Member 'SettingButtonChoicesWidget_BP_SetBG::bgType' has a wrong offset!");

// Function OutGameModule.SettingButtonChoicesWidget.BP_SetSelectIndex
// 0x0004 (0x0004 - 0x0000)
struct SettingButtonChoicesWidget_BP_SetSelectIndex final
{
public:
	int32                                         Selectindex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingButtonChoicesWidget_BP_SetSelectIndex) == 0x000004, "Wrong alignment on SettingButtonChoicesWidget_BP_SetSelectIndex");
static_assert(sizeof(SettingButtonChoicesWidget_BP_SetSelectIndex) == 0x000004, "Wrong size on SettingButtonChoicesWidget_BP_SetSelectIndex");
static_assert(offsetof(SettingButtonChoicesWidget_BP_SetSelectIndex, Selectindex) == 0x000000, "Member 'SettingButtonChoicesWidget_BP_SetSelectIndex::Selectindex' has a wrong offset!");

// Function OutGameModule.SettingButtonChoicesWidget.DoNavigation
// 0x0010 (0x0010 - 0x0000)
struct SettingButtonChoicesWidget_DoNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingButtonChoicesWidget_DoNavigation) == 0x000008, "Wrong alignment on SettingButtonChoicesWidget_DoNavigation");
static_assert(sizeof(SettingButtonChoicesWidget_DoNavigation) == 0x000010, "Wrong size on SettingButtonChoicesWidget_DoNavigation");
static_assert(offsetof(SettingButtonChoicesWidget_DoNavigation, UiNavigation) == 0x000000, "Member 'SettingButtonChoicesWidget_DoNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(SettingButtonChoicesWidget_DoNavigation, ReturnValue) == 0x000008, "Member 'SettingButtonChoicesWidget_DoNavigation::ReturnValue' has a wrong offset!");

// DelegateFunction OutGameModule.SettingButtonChoicesWidget.OnChoicesAddedToFocusDelegate__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct SettingButtonChoicesWidget_OnChoicesAddedToFocusDelegate__DelegateSignature final
{
public:
	EWidgetInputType                              InputType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFocusEvent                            InFocusEvent;                                      // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingButtonChoicesWidget_OnChoicesAddedToFocusDelegate__DelegateSignature) == 0x000004, "Wrong alignment on SettingButtonChoicesWidget_OnChoicesAddedToFocusDelegate__DelegateSignature");
static_assert(sizeof(SettingButtonChoicesWidget_OnChoicesAddedToFocusDelegate__DelegateSignature) == 0x00000C, "Wrong size on SettingButtonChoicesWidget_OnChoicesAddedToFocusDelegate__DelegateSignature");
static_assert(offsetof(SettingButtonChoicesWidget_OnChoicesAddedToFocusDelegate__DelegateSignature, InputType) == 0x000000, "Member 'SettingButtonChoicesWidget_OnChoicesAddedToFocusDelegate__DelegateSignature::InputType' has a wrong offset!");
static_assert(offsetof(SettingButtonChoicesWidget_OnChoicesAddedToFocusDelegate__DelegateSignature, InFocusEvent) == 0x000004, "Member 'SettingButtonChoicesWidget_OnChoicesAddedToFocusDelegate__DelegateSignature::InFocusEvent' has a wrong offset!");

// DelegateFunction OutGameModule.SettingButtonChoicesWidget.OnChoicesValueChangedDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct SettingButtonChoicesWidget_OnChoicesValueChangedDelegate__DelegateSignature final
{
public:
	int32                                         SelectedIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingButtonChoicesWidget_OnChoicesValueChangedDelegate__DelegateSignature) == 0x000004, "Wrong alignment on SettingButtonChoicesWidget_OnChoicesValueChangedDelegate__DelegateSignature");
static_assert(sizeof(SettingButtonChoicesWidget_OnChoicesValueChangedDelegate__DelegateSignature) == 0x000004, "Wrong size on SettingButtonChoicesWidget_OnChoicesValueChangedDelegate__DelegateSignature");
static_assert(offsetof(SettingButtonChoicesWidget_OnChoicesValueChangedDelegate__DelegateSignature, SelectedIndex) == 0x000000, "Member 'SettingButtonChoicesWidget_OnChoicesValueChangedDelegate__DelegateSignature::SelectedIndex' has a wrong offset!");

// Function OutGameModule.SettingButtonChoicesWidget.OnLeftRightDecide
// 0x0010 (0x0010 - 0x0000)
struct SettingButtonChoicesWidget_OnLeftRightDecide final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SettingButtonChoicesWidget_OnLeftRightDecide) == 0x000008, "Wrong alignment on SettingButtonChoicesWidget_OnLeftRightDecide");
static_assert(sizeof(SettingButtonChoicesWidget_OnLeftRightDecide) == 0x000010, "Wrong size on SettingButtonChoicesWidget_OnLeftRightDecide");
static_assert(offsetof(SettingButtonChoicesWidget_OnLeftRightDecide, Widget) == 0x000000, "Member 'SettingButtonChoicesWidget_OnLeftRightDecide::Widget' has a wrong offset!");
static_assert(offsetof(SettingButtonChoicesWidget_OnLeftRightDecide, InputType) == 0x000008, "Member 'SettingButtonChoicesWidget_OnLeftRightDecide::InputType' has a wrong offset!");

// Function OutGameModule.SettingButtonChoicesWidget.SetCategoriesText
// 0x0018 (0x0018 - 0x0000)
struct SettingButtonChoicesWidget_SetCategoriesText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingButtonChoicesWidget_SetCategoriesText) == 0x000008, "Wrong alignment on SettingButtonChoicesWidget_SetCategoriesText");
static_assert(sizeof(SettingButtonChoicesWidget_SetCategoriesText) == 0x000018, "Wrong size on SettingButtonChoicesWidget_SetCategoriesText");
static_assert(offsetof(SettingButtonChoicesWidget_SetCategoriesText, Text) == 0x000000, "Member 'SettingButtonChoicesWidget_SetCategoriesText::Text' has a wrong offset!");

// Function OutGameModule.SettingButtonKeyWidget.BP_SetCommand
// 0x0001 (0x0001 - 0x0000)
struct SettingButtonKeyWidget_BP_SetCommand final
{
public:
	EKeyConfigurableCommand                       NextCommand;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingButtonKeyWidget_BP_SetCommand) == 0x000001, "Wrong alignment on SettingButtonKeyWidget_BP_SetCommand");
static_assert(sizeof(SettingButtonKeyWidget_BP_SetCommand) == 0x000001, "Wrong size on SettingButtonKeyWidget_BP_SetCommand");
static_assert(offsetof(SettingButtonKeyWidget_BP_SetCommand, NextCommand) == 0x000000, "Member 'SettingButtonKeyWidget_BP_SetCommand::NextCommand' has a wrong offset!");

// Function OutGameModule.SettingButtonKeyWidget.BP_SetKey
// 0x0018 (0x0018 - 0x0000)
struct SettingButtonKeyWidget_BP_SetKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingButtonKeyWidget_BP_SetKey) == 0x000008, "Wrong alignment on SettingButtonKeyWidget_BP_SetKey");
static_assert(sizeof(SettingButtonKeyWidget_BP_SetKey) == 0x000018, "Wrong size on SettingButtonKeyWidget_BP_SetKey");
static_assert(offsetof(SettingButtonKeyWidget_BP_SetKey, Key) == 0x000000, "Member 'SettingButtonKeyWidget_BP_SetKey::Key' has a wrong offset!");

// Function OutGameModule.SettingButtonSwitchWidget.BP_GetValue
// 0x0001 (0x0001 - 0x0000)
struct SettingButtonSwitchWidget_BP_GetValue final
{
public:
	ESettingSwitchType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingButtonSwitchWidget_BP_GetValue) == 0x000001, "Wrong alignment on SettingButtonSwitchWidget_BP_GetValue");
static_assert(sizeof(SettingButtonSwitchWidget_BP_GetValue) == 0x000001, "Wrong size on SettingButtonSwitchWidget_BP_GetValue");
static_assert(offsetof(SettingButtonSwitchWidget_BP_GetValue, ReturnValue) == 0x000000, "Member 'SettingButtonSwitchWidget_BP_GetValue::ReturnValue' has a wrong offset!");

// Function OutGameModule.SettingButtonSwitchWidget.BP_InitParam
// 0x0050 (0x0050 - 0x0000)
struct SettingButtonSwitchWidget_BP_InitParam final
{
public:
	class FText                                   Categories;                                        // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   LeftText;                                          // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   RightText;                                         // 0x0030(0x0018)(Parm, NativeAccessSpecifierPublic)
	ESettingSwitchType                            DefaultValue;                                      // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SettingButtonSwitchWidget_BP_InitParam) == 0x000008, "Wrong alignment on SettingButtonSwitchWidget_BP_InitParam");
static_assert(sizeof(SettingButtonSwitchWidget_BP_InitParam) == 0x000050, "Wrong size on SettingButtonSwitchWidget_BP_InitParam");
static_assert(offsetof(SettingButtonSwitchWidget_BP_InitParam, Categories) == 0x000000, "Member 'SettingButtonSwitchWidget_BP_InitParam::Categories' has a wrong offset!");
static_assert(offsetof(SettingButtonSwitchWidget_BP_InitParam, LeftText) == 0x000018, "Member 'SettingButtonSwitchWidget_BP_InitParam::LeftText' has a wrong offset!");
static_assert(offsetof(SettingButtonSwitchWidget_BP_InitParam, RightText) == 0x000030, "Member 'SettingButtonSwitchWidget_BP_InitParam::RightText' has a wrong offset!");
static_assert(offsetof(SettingButtonSwitchWidget_BP_InitParam, DefaultValue) == 0x000048, "Member 'SettingButtonSwitchWidget_BP_InitParam::DefaultValue' has a wrong offset!");

// Function OutGameModule.SettingButtonSwitchWidget.BP_IsChangeValue
// 0x0001 (0x0001 - 0x0000)
struct SettingButtonSwitchWidget_BP_IsChangeValue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingButtonSwitchWidget_BP_IsChangeValue) == 0x000001, "Wrong alignment on SettingButtonSwitchWidget_BP_IsChangeValue");
static_assert(sizeof(SettingButtonSwitchWidget_BP_IsChangeValue) == 0x000001, "Wrong size on SettingButtonSwitchWidget_BP_IsChangeValue");
static_assert(offsetof(SettingButtonSwitchWidget_BP_IsChangeValue, ReturnValue) == 0x000000, "Member 'SettingButtonSwitchWidget_BP_IsChangeValue::ReturnValue' has a wrong offset!");

// Function OutGameModule.SettingButtonSwitchWidget.BP_SetBG
// 0x0001 (0x0001 - 0x0000)
struct SettingButtonSwitchWidget_BP_SetBG final
{
public:
	ESettingButtonBGType                          bgType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingButtonSwitchWidget_BP_SetBG) == 0x000001, "Wrong alignment on SettingButtonSwitchWidget_BP_SetBG");
static_assert(sizeof(SettingButtonSwitchWidget_BP_SetBG) == 0x000001, "Wrong size on SettingButtonSwitchWidget_BP_SetBG");
static_assert(offsetof(SettingButtonSwitchWidget_BP_SetBG, bgType) == 0x000000, "Member 'SettingButtonSwitchWidget_BP_SetBG::bgType' has a wrong offset!");

// Function OutGameModule.SettingButtonSwitchWidget.BP_SetValue
// 0x0001 (0x0001 - 0x0000)
struct SettingButtonSwitchWidget_BP_SetValue final
{
public:
	ESettingSwitchType                            Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingButtonSwitchWidget_BP_SetValue) == 0x000001, "Wrong alignment on SettingButtonSwitchWidget_BP_SetValue");
static_assert(sizeof(SettingButtonSwitchWidget_BP_SetValue) == 0x000001, "Wrong size on SettingButtonSwitchWidget_BP_SetValue");
static_assert(offsetof(SettingButtonSwitchWidget_BP_SetValue, Value) == 0x000000, "Member 'SettingButtonSwitchWidget_BP_SetValue::Value' has a wrong offset!");

// Function OutGameModule.SettingButtonSwitchWidget.DoNavigation
// 0x0010 (0x0010 - 0x0000)
struct SettingButtonSwitchWidget_DoNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingButtonSwitchWidget_DoNavigation) == 0x000008, "Wrong alignment on SettingButtonSwitchWidget_DoNavigation");
static_assert(sizeof(SettingButtonSwitchWidget_DoNavigation) == 0x000010, "Wrong size on SettingButtonSwitchWidget_DoNavigation");
static_assert(offsetof(SettingButtonSwitchWidget_DoNavigation, UiNavigation) == 0x000000, "Member 'SettingButtonSwitchWidget_DoNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(SettingButtonSwitchWidget_DoNavigation, ReturnValue) == 0x000008, "Member 'SettingButtonSwitchWidget_DoNavigation::ReturnValue' has a wrong offset!");

// Function OutGameModule.SettingButtonSwitchWidget.OnLefRightButtonDecide
// 0x0010 (0x0010 - 0x0000)
struct SettingButtonSwitchWidget_OnLefRightButtonDecide final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SettingButtonSwitchWidget_OnLefRightButtonDecide) == 0x000008, "Wrong alignment on SettingButtonSwitchWidget_OnLefRightButtonDecide");
static_assert(sizeof(SettingButtonSwitchWidget_OnLefRightButtonDecide) == 0x000010, "Wrong size on SettingButtonSwitchWidget_OnLefRightButtonDecide");
static_assert(offsetof(SettingButtonSwitchWidget_OnLefRightButtonDecide, Widget) == 0x000000, "Member 'SettingButtonSwitchWidget_OnLefRightButtonDecide::Widget' has a wrong offset!");
static_assert(offsetof(SettingButtonSwitchWidget_OnLefRightButtonDecide, InputType) == 0x000008, "Member 'SettingButtonSwitchWidget_OnLefRightButtonDecide::InputType' has a wrong offset!");

// DelegateFunction OutGameModule.SettingButtonSwitchWidget.OnSwitchAddedToFocusDelegate__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct SettingButtonSwitchWidget_OnSwitchAddedToFocusDelegate__DelegateSignature final
{
public:
	EWidgetInputType                              InputType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFocusEvent                            InFocusEvent;                                      // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingButtonSwitchWidget_OnSwitchAddedToFocusDelegate__DelegateSignature) == 0x000004, "Wrong alignment on SettingButtonSwitchWidget_OnSwitchAddedToFocusDelegate__DelegateSignature");
static_assert(sizeof(SettingButtonSwitchWidget_OnSwitchAddedToFocusDelegate__DelegateSignature) == 0x00000C, "Wrong size on SettingButtonSwitchWidget_OnSwitchAddedToFocusDelegate__DelegateSignature");
static_assert(offsetof(SettingButtonSwitchWidget_OnSwitchAddedToFocusDelegate__DelegateSignature, InputType) == 0x000000, "Member 'SettingButtonSwitchWidget_OnSwitchAddedToFocusDelegate__DelegateSignature::InputType' has a wrong offset!");
static_assert(offsetof(SettingButtonSwitchWidget_OnSwitchAddedToFocusDelegate__DelegateSignature, InFocusEvent) == 0x000004, "Member 'SettingButtonSwitchWidget_OnSwitchAddedToFocusDelegate__DelegateSignature::InFocusEvent' has a wrong offset!");

// DelegateFunction OutGameModule.SettingButtonSwitchWidget.OnSwitchIsChangeValueDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct SettingButtonSwitchWidget_OnSwitchIsChangeValueDelegate__DelegateSignature final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingButtonSwitchWidget_OnSwitchIsChangeValueDelegate__DelegateSignature) == 0x000001, "Wrong alignment on SettingButtonSwitchWidget_OnSwitchIsChangeValueDelegate__DelegateSignature");
static_assert(sizeof(SettingButtonSwitchWidget_OnSwitchIsChangeValueDelegate__DelegateSignature) == 0x000001, "Wrong size on SettingButtonSwitchWidget_OnSwitchIsChangeValueDelegate__DelegateSignature");
static_assert(offsetof(SettingButtonSwitchWidget_OnSwitchIsChangeValueDelegate__DelegateSignature, ReturnValue) == 0x000000, "Member 'SettingButtonSwitchWidget_OnSwitchIsChangeValueDelegate__DelegateSignature::ReturnValue' has a wrong offset!");

// DelegateFunction OutGameModule.SettingButtonSwitchWidget.OnSwitchValueChangedDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct SettingButtonSwitchWidget_OnSwitchValueChangedDelegate__DelegateSignature final
{
public:
	ESettingSwitchType                            Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingButtonSwitchWidget_OnSwitchValueChangedDelegate__DelegateSignature) == 0x000001, "Wrong alignment on SettingButtonSwitchWidget_OnSwitchValueChangedDelegate__DelegateSignature");
static_assert(sizeof(SettingButtonSwitchWidget_OnSwitchValueChangedDelegate__DelegateSignature) == 0x000001, "Wrong size on SettingButtonSwitchWidget_OnSwitchValueChangedDelegate__DelegateSignature");
static_assert(offsetof(SettingButtonSwitchWidget_OnSwitchValueChangedDelegate__DelegateSignature, Value) == 0x000000, "Member 'SettingButtonSwitchWidget_OnSwitchValueChangedDelegate__DelegateSignature::Value' has a wrong offset!");

// Function OutGameModule.SettingButtonSwitchWidget.SetCategoriesText
// 0x0018 (0x0018 - 0x0000)
struct SettingButtonSwitchWidget_SetCategoriesText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingButtonSwitchWidget_SetCategoriesText) == 0x000008, "Wrong alignment on SettingButtonSwitchWidget_SetCategoriesText");
static_assert(sizeof(SettingButtonSwitchWidget_SetCategoriesText) == 0x000018, "Wrong size on SettingButtonSwitchWidget_SetCategoriesText");
static_assert(offsetof(SettingButtonSwitchWidget_SetCategoriesText, Text) == 0x000000, "Member 'SettingButtonSwitchWidget_SetCategoriesText::Text' has a wrong offset!");

// Function OutGameModule.ShopEventListWidget.OnDecideEvent
// 0x0008 (0x0008 - 0x0000)
struct ShopEventListWidget_OnDecideEvent final
{
public:
	class UEventItemEntryObject*                  EventItemEntryObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopEventListWidget_OnDecideEvent) == 0x000008, "Wrong alignment on ShopEventListWidget_OnDecideEvent");
static_assert(sizeof(ShopEventListWidget_OnDecideEvent) == 0x000008, "Wrong size on ShopEventListWidget_OnDecideEvent");
static_assert(offsetof(ShopEventListWidget_OnDecideEvent, EventItemEntryObject) == 0x000000, "Member 'ShopEventListWidget_OnDecideEvent::EventItemEntryObject' has a wrong offset!");

// DelegateFunction OutGameModule.ShopEventListWidget.OnDecideEventDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ShopEventListWidget_OnDecideEventDelegate__DelegateSignature final
{
public:
	class UEventItemEntryObject*                  EventItemEntryObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopEventListWidget_OnDecideEventDelegate__DelegateSignature) == 0x000008, "Wrong alignment on ShopEventListWidget_OnDecideEventDelegate__DelegateSignature");
static_assert(sizeof(ShopEventListWidget_OnDecideEventDelegate__DelegateSignature) == 0x000008, "Wrong size on ShopEventListWidget_OnDecideEventDelegate__DelegateSignature");
static_assert(offsetof(ShopEventListWidget_OnDecideEventDelegate__DelegateSignature, EventItemEntryObject) == 0x000000, "Member 'ShopEventListWidget_OnDecideEventDelegate__DelegateSignature::EventItemEntryObject' has a wrong offset!");

// Function OutGameModule.ShopEventListWidget.OnShowNoneText
// 0x0001 (0x0001 - 0x0000)
struct ShopEventListWidget_OnShowNoneText final
{
public:
	bool                                          bShowNoneText;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopEventListWidget_OnShowNoneText) == 0x000001, "Wrong alignment on ShopEventListWidget_OnShowNoneText");
static_assert(sizeof(ShopEventListWidget_OnShowNoneText) == 0x000001, "Wrong size on ShopEventListWidget_OnShowNoneText");
static_assert(offsetof(ShopEventListWidget_OnShowNoneText, bShowNoneText) == 0x000000, "Member 'ShopEventListWidget_OnShowNoneText::bShowNoneText' has a wrong offset!");

// Function OutGameModule.ShopItemIconWidget.OnSetShowMyAdLabel
// 0x0001 (0x0001 - 0x0000)
struct ShopItemIconWidget_OnSetShowMyAdLabel final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopItemIconWidget_OnSetShowMyAdLabel) == 0x000001, "Wrong alignment on ShopItemIconWidget_OnSetShowMyAdLabel");
static_assert(sizeof(ShopItemIconWidget_OnSetShowMyAdLabel) == 0x000001, "Wrong size on ShopItemIconWidget_OnSetShowMyAdLabel");
static_assert(offsetof(ShopItemIconWidget_OnSetShowMyAdLabel, bShow) == 0x000000, "Member 'ShopItemIconWidget_OnSetShowMyAdLabel::bShow' has a wrong offset!");

// Function OutGameModule.ShopItemListPanelWidget.ChangeOffset
// 0x0004 (0x0004 - 0x0000)
struct ShopItemListPanelWidget_ChangeOffset final
{
public:
	float                                         Offset;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopItemListPanelWidget_ChangeOffset) == 0x000004, "Wrong alignment on ShopItemListPanelWidget_ChangeOffset");
static_assert(sizeof(ShopItemListPanelWidget_ChangeOffset) == 0x000004, "Wrong size on ShopItemListPanelWidget_ChangeOffset");
static_assert(offsetof(ShopItemListPanelWidget_ChangeOffset, Offset) == 0x000000, "Member 'ShopItemListPanelWidget_ChangeOffset::Offset' has a wrong offset!");

// Function OutGameModule.ShopItemListPanelWidget.OnCustomWidgetShopNavigation
// 0x0010 (0x0010 - 0x0000)
struct ShopItemListPanelWidget_OnCustomWidgetShopNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopItemListPanelWidget_OnCustomWidgetShopNavigation) == 0x000008, "Wrong alignment on ShopItemListPanelWidget_OnCustomWidgetShopNavigation");
static_assert(sizeof(ShopItemListPanelWidget_OnCustomWidgetShopNavigation) == 0x000010, "Wrong size on ShopItemListPanelWidget_OnCustomWidgetShopNavigation");
static_assert(offsetof(ShopItemListPanelWidget_OnCustomWidgetShopNavigation, UiNavigation) == 0x000000, "Member 'ShopItemListPanelWidget_OnCustomWidgetShopNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(ShopItemListPanelWidget_OnCustomWidgetShopNavigation, ReturnValue) == 0x000008, "Member 'ShopItemListPanelWidget_OnCustomWidgetShopNavigation::ReturnValue' has a wrong offset!");

// Function OutGameModule.ShopItemListPanelWidget.SetScrollBar
// 0x0004 (0x0004 - 0x0000)
struct ShopItemListPanelWidget_SetScrollBar final
{
public:
	float                                         Offset;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopItemListPanelWidget_SetScrollBar) == 0x000004, "Wrong alignment on ShopItemListPanelWidget_SetScrollBar");
static_assert(sizeof(ShopItemListPanelWidget_SetScrollBar) == 0x000004, "Wrong size on ShopItemListPanelWidget_SetScrollBar");
static_assert(offsetof(ShopItemListPanelWidget_SetScrollBar, Offset) == 0x000000, "Member 'ShopItemListPanelWidget_SetScrollBar::Offset' has a wrong offset!");

// Function OutGameModule.ShopItemListPanelWidget.SetScrollSize
// 0x0004 (0x0004 - 0x0000)
struct ShopItemListPanelWidget_SetScrollSize final
{
public:
	float                                         Size;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopItemListPanelWidget_SetScrollSize) == 0x000004, "Wrong alignment on ShopItemListPanelWidget_SetScrollSize");
static_assert(sizeof(ShopItemListPanelWidget_SetScrollSize) == 0x000004, "Wrong size on ShopItemListPanelWidget_SetScrollSize");
static_assert(offsetof(ShopItemListPanelWidget_SetScrollSize, Size) == 0x000000, "Member 'ShopItemListPanelWidget_SetScrollSize::Size' has a wrong offset!");

// Function OutGameModule.ShopItemViewWidget.OnSetBgTexture
// 0x00E0 (0x00E0 - 0x0000)
struct ShopItemViewWidget_OnSetBgTexture final
{
public:
	struct FSlateBrush                            bgSlateBrush;                                      // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bShow;                                             // 0x00D0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0xF];                                       // 0x00D1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShopItemViewWidget_OnSetBgTexture) == 0x000010, "Wrong alignment on ShopItemViewWidget_OnSetBgTexture");
static_assert(sizeof(ShopItemViewWidget_OnSetBgTexture) == 0x0000E0, "Wrong size on ShopItemViewWidget_OnSetBgTexture");
static_assert(offsetof(ShopItemViewWidget_OnSetBgTexture, bgSlateBrush) == 0x000000, "Member 'ShopItemViewWidget_OnSetBgTexture::bgSlateBrush' has a wrong offset!");
static_assert(offsetof(ShopItemViewWidget_OnSetBgTexture, bShow) == 0x0000D0, "Member 'ShopItemViewWidget_OnSetBgTexture::bShow' has a wrong offset!");

// Function OutGameModule.ShopPickupWidget.SetShopItemName
// 0x0018 (0x0018 - 0x0000)
struct ShopPickupWidget_SetShopItemName final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopPickupWidget_SetShopItemName) == 0x000008, "Wrong alignment on ShopPickupWidget_SetShopItemName");
static_assert(sizeof(ShopPickupWidget_SetShopItemName) == 0x000018, "Wrong size on ShopPickupWidget_SetShopItemName");
static_assert(offsetof(ShopPickupWidget_SetShopItemName, InText) == 0x000000, "Member 'ShopPickupWidget_SetShopItemName::InText' has a wrong offset!");

// Function OutGameModule.ShopTopWidget.BP_GetStartTab
// 0x0001 (0x0001 - 0x0000)
struct ShopTopWidget_BP_GetStartTab final
{
public:
	EShopContentsType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopTopWidget_BP_GetStartTab) == 0x000001, "Wrong alignment on ShopTopWidget_BP_GetStartTab");
static_assert(sizeof(ShopTopWidget_BP_GetStartTab) == 0x000001, "Wrong size on ShopTopWidget_BP_GetStartTab");
static_assert(offsetof(ShopTopWidget_BP_GetStartTab, ReturnValue) == 0x000000, "Member 'ShopTopWidget_BP_GetStartTab::ReturnValue' has a wrong offset!");

// Function OutGameModule.ShopTopWidget.InitTabList
// 0x0008 (0x0008 - 0x0000)
struct ShopTopWidget_InitTabList final
{
public:
	class UWidgetSwitcher*                        TabContentsSwitcher;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopTopWidget_InitTabList) == 0x000008, "Wrong alignment on ShopTopWidget_InitTabList");
static_assert(sizeof(ShopTopWidget_InitTabList) == 0x000008, "Wrong size on ShopTopWidget_InitTabList");
static_assert(offsetof(ShopTopWidget_InitTabList, TabContentsSwitcher) == 0x000000, "Member 'ShopTopWidget_InitTabList::TabContentsSwitcher' has a wrong offset!");

// Function OutGameModule.ShopTopWidget.OnLoadComplete
// 0x0004 (0x0004 - 0x0000)
struct ShopTopWidget_OnLoadComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopTopWidget_OnLoadComplete) == 0x000004, "Wrong alignment on ShopTopWidget_OnLoadComplete");
static_assert(sizeof(ShopTopWidget_OnLoadComplete) == 0x000004, "Wrong size on ShopTopWidget_OnLoadComplete");
static_assert(offsetof(ShopTopWidget_OnLoadComplete, RequestId) == 0x000000, "Member 'ShopTopWidget_OnLoadComplete::RequestId' has a wrong offset!");

// Function OutGameModule.ShopTopWidget.OnSetIncTaxMessageSwitch
// 0x0018 (0x0018 - 0x0000)
struct ShopTopWidget_OnSetIncTaxMessageSwitch final
{
public:
	class FText                                   ItemName;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopTopWidget_OnSetIncTaxMessageSwitch) == 0x000008, "Wrong alignment on ShopTopWidget_OnSetIncTaxMessageSwitch");
static_assert(sizeof(ShopTopWidget_OnSetIncTaxMessageSwitch) == 0x000018, "Wrong size on ShopTopWidget_OnSetIncTaxMessageSwitch");
static_assert(offsetof(ShopTopWidget_OnSetIncTaxMessageSwitch, ItemName) == 0x000000, "Member 'ShopTopWidget_OnSetIncTaxMessageSwitch::ItemName' has a wrong offset!");

// Function OutGameModule.ShopTopWidget.OnShowOpenPurchaseCompleteWindow
// 0x0018 (0x0018 - 0x0000)
struct ShopTopWidget_OnShowOpenPurchaseCompleteWindow final
{
public:
	class FText                                   ItemName;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopTopWidget_OnShowOpenPurchaseCompleteWindow) == 0x000008, "Wrong alignment on ShopTopWidget_OnShowOpenPurchaseCompleteWindow");
static_assert(sizeof(ShopTopWidget_OnShowOpenPurchaseCompleteWindow) == 0x000018, "Wrong size on ShopTopWidget_OnShowOpenPurchaseCompleteWindow");
static_assert(offsetof(ShopTopWidget_OnShowOpenPurchaseCompleteWindow, ItemName) == 0x000000, "Member 'ShopTopWidget_OnShowOpenPurchaseCompleteWindow::ItemName' has a wrong offset!");

// Function OutGameModule.ShopTopWidget.ShowJpOnlyButton
// 0x0001 (0x0001 - 0x0000)
struct ShopTopWidget_ShowJpOnlyButton final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopTopWidget_ShowJpOnlyButton) == 0x000001, "Wrong alignment on ShopTopWidget_ShowJpOnlyButton");
static_assert(sizeof(ShopTopWidget_ShowJpOnlyButton) == 0x000001, "Wrong size on ShopTopWidget_ShowJpOnlyButton");
static_assert(offsetof(ShopTopWidget_ShowJpOnlyButton, bShow) == 0x000000, "Member 'ShopTopWidget_ShowJpOnlyButton::bShow' has a wrong offset!");

// Function OutGameModule.ShopTopWidget.ShowOpenPurchaseCompleteWindow
// 0x0018 (0x0018 - 0x0000)
struct ShopTopWidget_ShowOpenPurchaseCompleteWindow final
{
public:
	class FText                                   ItemName;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopTopWidget_ShowOpenPurchaseCompleteWindow) == 0x000008, "Wrong alignment on ShopTopWidget_ShowOpenPurchaseCompleteWindow");
static_assert(sizeof(ShopTopWidget_ShowOpenPurchaseCompleteWindow) == 0x000018, "Wrong size on ShopTopWidget_ShowOpenPurchaseCompleteWindow");
static_assert(offsetof(ShopTopWidget_ShowOpenPurchaseCompleteWindow, ItemName) == 0x000000, "Member 'ShopTopWidget_ShowOpenPurchaseCompleteWindow::ItemName' has a wrong offset!");

// Function OutGameModule.SortTextWidget.SetSortPopup
// 0x0010 (0x0010 - 0x0000)
struct SortTextWidget_SetSortPopup final
{
public:
	class USortPopupWidget*                       SortPopupWidget;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SortTextWidget_SetSortPopup) == 0x000008, "Wrong alignment on SortTextWidget_SetSortPopup");
static_assert(sizeof(SortTextWidget_SetSortPopup) == 0x000010, "Wrong size on SortTextWidget_SetSortPopup");
static_assert(offsetof(SortTextWidget_SetSortPopup, SortPopupWidget) == 0x000000, "Member 'SortTextWidget_SetSortPopup::SortPopupWidget' has a wrong offset!");
static_assert(offsetof(SortTextWidget_SetSortPopup, SortIndex) == 0x000008, "Member 'SortTextWidget_SetSortPopup::SortIndex' has a wrong offset!");

// Function OutGameModule.SortTextWidget.SetSortText
// 0x0018 (0x0018 - 0x0000)
struct SortTextWidget_SetSortText final
{
public:
	class FText                                   SortText;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SortTextWidget_SetSortText) == 0x000008, "Wrong alignment on SortTextWidget_SetSortText");
static_assert(sizeof(SortTextWidget_SetSortText) == 0x000018, "Wrong size on SortTextWidget_SetSortText");
static_assert(offsetof(SortTextWidget_SetSortText, SortText) == 0x000000, "Member 'SortTextWidget_SetSortText::SortText' has a wrong offset!");

// Function OutGameModule.SortTextWidget.SetTextColor
// 0x0010 (0x0010 - 0x0000)
struct SortTextWidget_SetTextColor final
{
public:
	struct FLinearColor                           TextColor;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SortTextWidget_SetTextColor) == 0x000004, "Wrong alignment on SortTextWidget_SetTextColor");
static_assert(sizeof(SortTextWidget_SetTextColor) == 0x000010, "Wrong size on SortTextWidget_SetTextColor");
static_assert(offsetof(SortTextWidget_SetTextColor, TextColor) == 0x000000, "Member 'SortTextWidget_SetTextColor::TextColor' has a wrong offset!");

// Function OutGameModule.SortTextWidget.SetTextCount
// 0x0008 (0x0008 - 0x0000)
struct SortTextWidget_SetTextCount final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SortTextWidget_SetTextCount) == 0x000004, "Wrong alignment on SortTextWidget_SetTextCount");
static_assert(sizeof(SortTextWidget_SetTextCount) == 0x000008, "Wrong size on SortTextWidget_SetTextCount");
static_assert(offsetof(SortTextWidget_SetTextCount, Num) == 0x000000, "Member 'SortTextWidget_SetTextCount::Num' has a wrong offset!");
static_assert(offsetof(SortTextWidget_SetTextCount, Max) == 0x000004, "Member 'SortTextWidget_SetTextCount::Max' has a wrong offset!");

// Function OutGameModule.SpaceAdjustmentList.OnAddedToFocusEvent
// 0x0010 (0x0010 - 0x0000)
struct SpaceAdjustmentList_OnAddedToFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpaceAdjustmentList_OnAddedToFocusEvent) == 0x000008, "Wrong alignment on SpaceAdjustmentList_OnAddedToFocusEvent");
static_assert(sizeof(SpaceAdjustmentList_OnAddedToFocusEvent) == 0x000010, "Wrong size on SpaceAdjustmentList_OnAddedToFocusEvent");
static_assert(offsetof(SpaceAdjustmentList_OnAddedToFocusEvent, Widget) == 0x000000, "Member 'SpaceAdjustmentList_OnAddedToFocusEvent::Widget' has a wrong offset!");
static_assert(offsetof(SpaceAdjustmentList_OnAddedToFocusEvent, InputType) == 0x000008, "Member 'SpaceAdjustmentList_OnAddedToFocusEvent::InputType' has a wrong offset!");

// Function OutGameModule.SpaceAdjustmentList.SetButtonFocus
// 0x0004 (0x0004 - 0x0000)
struct SpaceAdjustmentList_SetButtonFocus final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpaceAdjustmentList_SetButtonFocus) == 0x000004, "Wrong alignment on SpaceAdjustmentList_SetButtonFocus");
static_assert(sizeof(SpaceAdjustmentList_SetButtonFocus) == 0x000004, "Wrong size on SpaceAdjustmentList_SetButtonFocus");
static_assert(offsetof(SpaceAdjustmentList_SetButtonFocus, Idx) == 0x000000, "Member 'SpaceAdjustmentList_SetButtonFocus::Idx' has a wrong offset!");

// Function OutGameModule.SpecialLicenseRewardWidget.FinishProgressSpecialLicense
// 0x0008 (0x0008 - 0x0000)
struct SpecialLicenseRewardWidget_FinishProgressSpecialLicense final
{
public:
	class UProgressBarWidget*                     ProgressBar;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpecialLicenseRewardWidget_FinishProgressSpecialLicense) == 0x000008, "Wrong alignment on SpecialLicenseRewardWidget_FinishProgressSpecialLicense");
static_assert(sizeof(SpecialLicenseRewardWidget_FinishProgressSpecialLicense) == 0x000008, "Wrong size on SpecialLicenseRewardWidget_FinishProgressSpecialLicense");
static_assert(offsetof(SpecialLicenseRewardWidget_FinishProgressSpecialLicense, ProgressBar) == 0x000000, "Member 'SpecialLicenseRewardWidget_FinishProgressSpecialLicense::ProgressBar' has a wrong offset!");

// Function OutGameModule.SpecialLicenseRewardWidget.LevelUpSpecialLicense
// 0x0004 (0x0004 - 0x0000)
struct SpecialLicenseRewardWidget_LevelUpSpecialLicense final
{
public:
	int32                                         LevelCount;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpecialLicenseRewardWidget_LevelUpSpecialLicense) == 0x000004, "Wrong alignment on SpecialLicenseRewardWidget_LevelUpSpecialLicense");
static_assert(sizeof(SpecialLicenseRewardWidget_LevelUpSpecialLicense) == 0x000004, "Wrong size on SpecialLicenseRewardWidget_LevelUpSpecialLicense");
static_assert(offsetof(SpecialLicenseRewardWidget_LevelUpSpecialLicense, LevelCount) == 0x000000, "Member 'SpecialLicenseRewardWidget_LevelUpSpecialLicense::LevelCount' has a wrong offset!");

// Function OutGameModule.SpecialLicenseRewardWidget.ProgressSpecialLicense
// 0x0008 (0x0008 - 0x0000)
struct SpecialLicenseRewardWidget_ProgressSpecialLicense final
{
public:
	float                                         NowValue;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpecialLicenseRewardWidget_ProgressSpecialLicense) == 0x000004, "Wrong alignment on SpecialLicenseRewardWidget_ProgressSpecialLicense");
static_assert(sizeof(SpecialLicenseRewardWidget_ProgressSpecialLicense) == 0x000008, "Wrong size on SpecialLicenseRewardWidget_ProgressSpecialLicense");
static_assert(offsetof(SpecialLicenseRewardWidget_ProgressSpecialLicense, NowValue) == 0x000000, "Member 'SpecialLicenseRewardWidget_ProgressSpecialLicense::NowValue' has a wrong offset!");
static_assert(offsetof(SpecialLicenseRewardWidget_ProgressSpecialLicense, MaxValue) == 0x000004, "Member 'SpecialLicenseRewardWidget_ProgressSpecialLicense::MaxValue' has a wrong offset!");

// Function OutGameModule.SquadCreateWidget.OnDecideWindow
// 0x0010 (0x0010 - 0x0000)
struct SquadCreateWidget_OnDecideWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SquadCreateWidget_OnDecideWindow) == 0x000008, "Wrong alignment on SquadCreateWidget_OnDecideWindow");
static_assert(sizeof(SquadCreateWidget_OnDecideWindow) == 0x000010, "Wrong size on SquadCreateWidget_OnDecideWindow");
static_assert(offsetof(SquadCreateWidget_OnDecideWindow, Widget) == 0x000000, "Member 'SquadCreateWidget_OnDecideWindow::Widget' has a wrong offset!");
static_assert(offsetof(SquadCreateWidget_OnDecideWindow, InputType) == 0x000008, "Member 'SquadCreateWidget_OnDecideWindow::InputType' has a wrong offset!");
static_assert(offsetof(SquadCreateWidget_OnDecideWindow, LeftButton) == 0x000009, "Member 'SquadCreateWidget_OnDecideWindow::LeftButton' has a wrong offset!");

// Function OutGameModule.SquadCreateWidget.OnPressWindowRequestFinished
// 0x0010 (0x0010 - 0x0000)
struct SquadCreateWidget_OnPressWindowRequestFinished final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SquadCreateWidget_OnPressWindowRequestFinished) == 0x000008, "Wrong alignment on SquadCreateWidget_OnPressWindowRequestFinished");
static_assert(sizeof(SquadCreateWidget_OnPressWindowRequestFinished) == 0x000010, "Wrong size on SquadCreateWidget_OnPressWindowRequestFinished");
static_assert(offsetof(SquadCreateWidget_OnPressWindowRequestFinished, Widget) == 0x000000, "Member 'SquadCreateWidget_OnPressWindowRequestFinished::Widget' has a wrong offset!");
static_assert(offsetof(SquadCreateWidget_OnPressWindowRequestFinished, InputType) == 0x000008, "Member 'SquadCreateWidget_OnPressWindowRequestFinished::InputType' has a wrong offset!");
static_assert(offsetof(SquadCreateWidget_OnPressWindowRequestFinished, LeftButton) == 0x000009, "Member 'SquadCreateWidget_OnPressWindowRequestFinished::LeftButton' has a wrong offset!");

// Function OutGameModule.SquadLeaveWidget.OnDecideWindow
// 0x0010 (0x0010 - 0x0000)
struct SquadLeaveWidget_OnDecideWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SquadLeaveWidget_OnDecideWindow) == 0x000008, "Wrong alignment on SquadLeaveWidget_OnDecideWindow");
static_assert(sizeof(SquadLeaveWidget_OnDecideWindow) == 0x000010, "Wrong size on SquadLeaveWidget_OnDecideWindow");
static_assert(offsetof(SquadLeaveWidget_OnDecideWindow, Widget) == 0x000000, "Member 'SquadLeaveWidget_OnDecideWindow::Widget' has a wrong offset!");
static_assert(offsetof(SquadLeaveWidget_OnDecideWindow, InputType) == 0x000008, "Member 'SquadLeaveWidget_OnDecideWindow::InputType' has a wrong offset!");
static_assert(offsetof(SquadLeaveWidget_OnDecideWindow, LeftButton) == 0x000009, "Member 'SquadLeaveWidget_OnDecideWindow::LeftButton' has a wrong offset!");

// Function OutGameModule.SquadLeaveWidget.OnDecideWindowRequestFinished
// 0x0010 (0x0010 - 0x0000)
struct SquadLeaveWidget_OnDecideWindowRequestFinished final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SquadLeaveWidget_OnDecideWindowRequestFinished) == 0x000008, "Wrong alignment on SquadLeaveWidget_OnDecideWindowRequestFinished");
static_assert(sizeof(SquadLeaveWidget_OnDecideWindowRequestFinished) == 0x000010, "Wrong size on SquadLeaveWidget_OnDecideWindowRequestFinished");
static_assert(offsetof(SquadLeaveWidget_OnDecideWindowRequestFinished, Widget) == 0x000000, "Member 'SquadLeaveWidget_OnDecideWindowRequestFinished::Widget' has a wrong offset!");
static_assert(offsetof(SquadLeaveWidget_OnDecideWindowRequestFinished, InputType) == 0x000008, "Member 'SquadLeaveWidget_OnDecideWindowRequestFinished::InputType' has a wrong offset!");
static_assert(offsetof(SquadLeaveWidget_OnDecideWindowRequestFinished, LeftButton) == 0x000009, "Member 'SquadLeaveWidget_OnDecideWindowRequestFinished::LeftButton' has a wrong offset!");

// Function OutGameModule.SquadLeaveWidget.OnSquadNumChanged
// 0x0004 (0x0004 - 0x0000)
struct SquadLeaveWidget_OnSquadNumChanged final
{
public:
	int32                                         SquadNum;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SquadLeaveWidget_OnSquadNumChanged) == 0x000004, "Wrong alignment on SquadLeaveWidget_OnSquadNumChanged");
static_assert(sizeof(SquadLeaveWidget_OnSquadNumChanged) == 0x000004, "Wrong size on SquadLeaveWidget_OnSquadNumChanged");
static_assert(offsetof(SquadLeaveWidget_OnSquadNumChanged, SquadNum) == 0x000000, "Member 'SquadLeaveWidget_OnSquadNumChanged::SquadNum' has a wrong offset!");

// Function OutGameModule.SquadMemberInvitationList.DoCustomNavigationFromFilter
// 0x0008 (0x0008 - 0x0000)
struct SquadMemberInvitationList_DoCustomNavigationFromFilter final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SquadMemberInvitationList_DoCustomNavigationFromFilter) == 0x000008, "Wrong alignment on SquadMemberInvitationList_DoCustomNavigationFromFilter");
static_assert(sizeof(SquadMemberInvitationList_DoCustomNavigationFromFilter) == 0x000008, "Wrong size on SquadMemberInvitationList_DoCustomNavigationFromFilter");
static_assert(offsetof(SquadMemberInvitationList_DoCustomNavigationFromFilter, ReturnValue) == 0x000000, "Member 'SquadMemberInvitationList_DoCustomNavigationFromFilter::ReturnValue' has a wrong offset!");

// Function OutGameModule.SquadMemberInvitationList.DoCustomNavigationFromManager
// 0x0008 (0x0008 - 0x0000)
struct SquadMemberInvitationList_DoCustomNavigationFromManager final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SquadMemberInvitationList_DoCustomNavigationFromManager) == 0x000008, "Wrong alignment on SquadMemberInvitationList_DoCustomNavigationFromManager");
static_assert(sizeof(SquadMemberInvitationList_DoCustomNavigationFromManager) == 0x000008, "Wrong size on SquadMemberInvitationList_DoCustomNavigationFromManager");
static_assert(offsetof(SquadMemberInvitationList_DoCustomNavigationFromManager, ReturnValue) == 0x000000, "Member 'SquadMemberInvitationList_DoCustomNavigationFromManager::ReturnValue' has a wrong offset!");

// DelegateFunction OutGameModule.SquadMemberInvitationList.OnCancelSendSquadInvite__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct SquadMemberInvitationList_OnCancelSendSquadInvite__DelegateSignature final
{
public:
	class FString                                 InvitationId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SquadMemberInvitationList_OnCancelSendSquadInvite__DelegateSignature) == 0x000008, "Wrong alignment on SquadMemberInvitationList_OnCancelSendSquadInvite__DelegateSignature");
static_assert(sizeof(SquadMemberInvitationList_OnCancelSendSquadInvite__DelegateSignature) == 0x000010, "Wrong size on SquadMemberInvitationList_OnCancelSendSquadInvite__DelegateSignature");
static_assert(offsetof(SquadMemberInvitationList_OnCancelSendSquadInvite__DelegateSignature, InvitationId) == 0x000000, "Member 'SquadMemberInvitationList_OnCancelSendSquadInvite__DelegateSignature::InvitationId' has a wrong offset!");

// Function OutGameModule.SquadMemberInvitationList.OnDecideButtonWidget
// 0x0010 (0x0010 - 0x0000)
struct SquadMemberInvitationList_OnDecideButtonWidget final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SquadMemberInvitationList_OnDecideButtonWidget) == 0x000008, "Wrong alignment on SquadMemberInvitationList_OnDecideButtonWidget");
static_assert(sizeof(SquadMemberInvitationList_OnDecideButtonWidget) == 0x000010, "Wrong size on SquadMemberInvitationList_OnDecideButtonWidget");
static_assert(offsetof(SquadMemberInvitationList_OnDecideButtonWidget, Button) == 0x000000, "Member 'SquadMemberInvitationList_OnDecideButtonWidget::Button' has a wrong offset!");
static_assert(offsetof(SquadMemberInvitationList_OnDecideButtonWidget, InputType) == 0x000008, "Member 'SquadMemberInvitationList_OnDecideButtonWidget::InputType' has a wrong offset!");

// DelegateFunction OutGameModule.SquadMemberInvitationList.OnDecideSelectButton__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct SquadMemberInvitationList_OnDecideSelectButton__DelegateSignature final
{
public:
	ESquadMemberInvitationStatus                  SquadMemberInvitationStatus;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SquadMemberInvitationList_OnDecideSelectButton__DelegateSignature) == 0x000001, "Wrong alignment on SquadMemberInvitationList_OnDecideSelectButton__DelegateSignature");
static_assert(sizeof(SquadMemberInvitationList_OnDecideSelectButton__DelegateSignature) == 0x000001, "Wrong size on SquadMemberInvitationList_OnDecideSelectButton__DelegateSignature");
static_assert(offsetof(SquadMemberInvitationList_OnDecideSelectButton__DelegateSignature, SquadMemberInvitationStatus) == 0x000000, "Member 'SquadMemberInvitationList_OnDecideSelectButton__DelegateSignature::SquadMemberInvitationStatus' has a wrong offset!");

// Function OutGameModule.SquadMemberInvitationList.OnRequesetFriendList
// 0x0002 (0x0002 - 0x0000)
struct SquadMemberInvitationList_OnRequesetFriendList final
{
public:
	EFriendListType                               FriendType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFriendStatus                                 FriendStatus;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SquadMemberInvitationList_OnRequesetFriendList) == 0x000001, "Wrong alignment on SquadMemberInvitationList_OnRequesetFriendList");
static_assert(sizeof(SquadMemberInvitationList_OnRequesetFriendList) == 0x000002, "Wrong size on SquadMemberInvitationList_OnRequesetFriendList");
static_assert(offsetof(SquadMemberInvitationList_OnRequesetFriendList, FriendType) == 0x000000, "Member 'SquadMemberInvitationList_OnRequesetFriendList::FriendType' has a wrong offset!");
static_assert(offsetof(SquadMemberInvitationList_OnRequesetFriendList, FriendStatus) == 0x000001, "Member 'SquadMemberInvitationList_OnRequesetFriendList::FriendStatus' has a wrong offset!");

// DelegateFunction OutGameModule.SquadMemberInvitationList.OnSendSquadInvite__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct SquadMemberInvitationList_OnSendSquadInvite__DelegateSignature final
{
public:
	class FString                                 CosmosId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SquadMemberInvitationList_OnSendSquadInvite__DelegateSignature) == 0x000008, "Wrong alignment on SquadMemberInvitationList_OnSendSquadInvite__DelegateSignature");
static_assert(sizeof(SquadMemberInvitationList_OnSendSquadInvite__DelegateSignature) == 0x000010, "Wrong size on SquadMemberInvitationList_OnSendSquadInvite__DelegateSignature");
static_assert(offsetof(SquadMemberInvitationList_OnSendSquadInvite__DelegateSignature, CosmosId) == 0x000000, "Member 'SquadMemberInvitationList_OnSendSquadInvite__DelegateSignature::CosmosId' has a wrong offset!");

// Function OutGameModule.SquadMemberInvitationList.OnSubMenuDecide
// 0x0004 (0x0004 - 0x0000)
struct SquadMemberInvitationList_OnSubMenuDecide final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SquadMemberInvitationList_OnSubMenuDecide) == 0x000004, "Wrong alignment on SquadMemberInvitationList_OnSubMenuDecide");
static_assert(sizeof(SquadMemberInvitationList_OnSubMenuDecide) == 0x000004, "Wrong size on SquadMemberInvitationList_OnSubMenuDecide");
static_assert(offsetof(SquadMemberInvitationList_OnSubMenuDecide, Index_0) == 0x000000, "Member 'SquadMemberInvitationList_OnSubMenuDecide::Index_0' has a wrong offset!");

// Function OutGameModule.SquadMemberInvitationList.OnSwitchTabWidgetEvent
// 0x0004 (0x0004 - 0x0000)
struct SquadMemberInvitationList_OnSwitchTabWidgetEvent final
{
public:
	int32                                         NewSelectTab;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SquadMemberInvitationList_OnSwitchTabWidgetEvent) == 0x000004, "Wrong alignment on SquadMemberInvitationList_OnSwitchTabWidgetEvent");
static_assert(sizeof(SquadMemberInvitationList_OnSwitchTabWidgetEvent) == 0x000004, "Wrong size on SquadMemberInvitationList_OnSwitchTabWidgetEvent");
static_assert(offsetof(SquadMemberInvitationList_OnSwitchTabWidgetEvent, NewSelectTab) == 0x000000, "Member 'SquadMemberInvitationList_OnSwitchTabWidgetEvent::NewSelectTab' has a wrong offset!");

// Function OutGameModule.SquadWidget.CustomMatchInvitation
// 0x0010 (0x0010 - 0x0000)
struct SquadWidget_CustomMatchInvitation final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SquadWidget_CustomMatchInvitation) == 0x000008, "Wrong alignment on SquadWidget_CustomMatchInvitation");
static_assert(sizeof(SquadWidget_CustomMatchInvitation) == 0x000010, "Wrong size on SquadWidget_CustomMatchInvitation");
static_assert(offsetof(SquadWidget_CustomMatchInvitation, UserId) == 0x000000, "Member 'SquadWidget_CustomMatchInvitation::UserId' has a wrong offset!");

// Function OutGameModule.SquadWidget.OnBlockListDecideWindow
// 0x0010 (0x0010 - 0x0000)
struct SquadWidget_OnBlockListDecideWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SquadWidget_OnBlockListDecideWindow) == 0x000008, "Wrong alignment on SquadWidget_OnBlockListDecideWindow");
static_assert(sizeof(SquadWidget_OnBlockListDecideWindow) == 0x000010, "Wrong size on SquadWidget_OnBlockListDecideWindow");
static_assert(offsetof(SquadWidget_OnBlockListDecideWindow, Widget) == 0x000000, "Member 'SquadWidget_OnBlockListDecideWindow::Widget' has a wrong offset!");
static_assert(offsetof(SquadWidget_OnBlockListDecideWindow, InputType) == 0x000008, "Member 'SquadWidget_OnBlockListDecideWindow::InputType' has a wrong offset!");
static_assert(offsetof(SquadWidget_OnBlockListDecideWindow, LeftButton) == 0x000009, "Member 'SquadWidget_OnBlockListDecideWindow::LeftButton' has a wrong offset!");

// Function OutGameModule.SquadWidget.OnReceivedRequestFriendListCustom
// 0x0002 (0x0002 - 0x0000)
struct SquadWidget_OnReceivedRequestFriendListCustom final
{
public:
	EFriendListType                               FriendType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFriendStatus                                 FriendStatus;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SquadWidget_OnReceivedRequestFriendListCustom) == 0x000001, "Wrong alignment on SquadWidget_OnReceivedRequestFriendListCustom");
static_assert(sizeof(SquadWidget_OnReceivedRequestFriendListCustom) == 0x000002, "Wrong size on SquadWidget_OnReceivedRequestFriendListCustom");
static_assert(offsetof(SquadWidget_OnReceivedRequestFriendListCustom, FriendType) == 0x000000, "Member 'SquadWidget_OnReceivedRequestFriendListCustom::FriendType' has a wrong offset!");
static_assert(offsetof(SquadWidget_OnReceivedRequestFriendListCustom, FriendStatus) == 0x000001, "Member 'SquadWidget_OnReceivedRequestFriendListCustom::FriendStatus' has a wrong offset!");

// Function OutGameModule.SquadWidget.OnSquadCancelRequestDecideWindow
// 0x0010 (0x0010 - 0x0000)
struct SquadWidget_OnSquadCancelRequestDecideWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SquadWidget_OnSquadCancelRequestDecideWindow) == 0x000008, "Wrong alignment on SquadWidget_OnSquadCancelRequestDecideWindow");
static_assert(sizeof(SquadWidget_OnSquadCancelRequestDecideWindow) == 0x000010, "Wrong size on SquadWidget_OnSquadCancelRequestDecideWindow");
static_assert(offsetof(SquadWidget_OnSquadCancelRequestDecideWindow, Widget) == 0x000000, "Member 'SquadWidget_OnSquadCancelRequestDecideWindow::Widget' has a wrong offset!");
static_assert(offsetof(SquadWidget_OnSquadCancelRequestDecideWindow, InputType) == 0x000008, "Member 'SquadWidget_OnSquadCancelRequestDecideWindow::InputType' has a wrong offset!");
static_assert(offsetof(SquadWidget_OnSquadCancelRequestDecideWindow, LeftButton) == 0x000009, "Member 'SquadWidget_OnSquadCancelRequestDecideWindow::LeftButton' has a wrong offset!");

// Function OutGameModule.SquadWidget.OnSquadRequestDecideWindow
// 0x0010 (0x0010 - 0x0000)
struct SquadWidget_OnSquadRequestDecideWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SquadWidget_OnSquadRequestDecideWindow) == 0x000008, "Wrong alignment on SquadWidget_OnSquadRequestDecideWindow");
static_assert(sizeof(SquadWidget_OnSquadRequestDecideWindow) == 0x000010, "Wrong size on SquadWidget_OnSquadRequestDecideWindow");
static_assert(offsetof(SquadWidget_OnSquadRequestDecideWindow, Widget) == 0x000000, "Member 'SquadWidget_OnSquadRequestDecideWindow::Widget' has a wrong offset!");
static_assert(offsetof(SquadWidget_OnSquadRequestDecideWindow, InputType) == 0x000008, "Member 'SquadWidget_OnSquadRequestDecideWindow::InputType' has a wrong offset!");
static_assert(offsetof(SquadWidget_OnSquadRequestDecideWindow, LeftButton) == 0x000009, "Member 'SquadWidget_OnSquadRequestDecideWindow::LeftButton' has a wrong offset!");

// Function OutGameModule.SquadWidget.OnUpdateCompleteEvent
// 0x0004 (0x0004 - 0x0000)
struct SquadWidget_OnUpdateCompleteEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SquadWidget_OnUpdateCompleteEvent) == 0x000004, "Wrong alignment on SquadWidget_OnUpdateCompleteEvent");
static_assert(sizeof(SquadWidget_OnUpdateCompleteEvent) == 0x000004, "Wrong size on SquadWidget_OnUpdateCompleteEvent");
static_assert(offsetof(SquadWidget_OnUpdateCompleteEvent, RequestId) == 0x000000, "Member 'SquadWidget_OnUpdateCompleteEvent::RequestId' has a wrong offset!");

// Function OutGameModule.SquadWidget.SquadInvitation
// 0x0010 (0x0010 - 0x0000)
struct SquadWidget_SquadInvitation final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SquadWidget_SquadInvitation) == 0x000008, "Wrong alignment on SquadWidget_SquadInvitation");
static_assert(sizeof(SquadWidget_SquadInvitation) == 0x000010, "Wrong size on SquadWidget_SquadInvitation");
static_assert(offsetof(SquadWidget_SquadInvitation, UserId) == 0x000000, "Member 'SquadWidget_SquadInvitation::UserId' has a wrong offset!");

// Function OutGameModule.StaffRollCell.BP_GetTextType
// 0x0001 (0x0001 - 0x0000)
struct StaffRollCell_BP_GetTextType final
{
public:
	EStaffRollTextType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaffRollCell_BP_GetTextType) == 0x000001, "Wrong alignment on StaffRollCell_BP_GetTextType");
static_assert(sizeof(StaffRollCell_BP_GetTextType) == 0x000001, "Wrong size on StaffRollCell_BP_GetTextType");
static_assert(offsetof(StaffRollCell_BP_GetTextType, ReturnValue) == 0x000000, "Member 'StaffRollCell_BP_GetTextType::ReturnValue' has a wrong offset!");

// Function OutGameModule.StaffRollCell.BP_SetUpTextCell
// 0x0008 (0x0008 - 0x0000)
struct StaffRollCell_BP_SetUpTextCell final
{
public:
	class UStaffRollObject*                       Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaffRollCell_BP_SetUpTextCell) == 0x000008, "Wrong alignment on StaffRollCell_BP_SetUpTextCell");
static_assert(sizeof(StaffRollCell_BP_SetUpTextCell) == 0x000008, "Wrong size on StaffRollCell_BP_SetUpTextCell");
static_assert(offsetof(StaffRollCell_BP_SetUpTextCell, Obj) == 0x000000, "Member 'StaffRollCell_BP_SetUpTextCell::Obj' has a wrong offset!");

// Function OutGameModule.StaffRollSubsystem.GetMovieMaterial
// 0x0008 (0x0008 - 0x0000)
struct StaffRollSubsystem_GetMovieMaterial final
{
public:
	class UMaterial*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaffRollSubsystem_GetMovieMaterial) == 0x000008, "Wrong alignment on StaffRollSubsystem_GetMovieMaterial");
static_assert(sizeof(StaffRollSubsystem_GetMovieMaterial) == 0x000008, "Wrong size on StaffRollSubsystem_GetMovieMaterial");
static_assert(offsetof(StaffRollSubsystem_GetMovieMaterial, ReturnValue) == 0x000000, "Member 'StaffRollSubsystem_GetMovieMaterial::ReturnValue' has a wrong offset!");

// Function OutGameModule.StaffRollSubsystem.GetMovieTexture
// 0x0008 (0x0008 - 0x0000)
struct StaffRollSubsystem_GetMovieTexture final
{
public:
	class UTexture*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaffRollSubsystem_GetMovieTexture) == 0x000008, "Wrong alignment on StaffRollSubsystem_GetMovieTexture");
static_assert(sizeof(StaffRollSubsystem_GetMovieTexture) == 0x000008, "Wrong size on StaffRollSubsystem_GetMovieTexture");
static_assert(offsetof(StaffRollSubsystem_GetMovieTexture, ReturnValue) == 0x000000, "Member 'StaffRollSubsystem_GetMovieTexture::ReturnValue' has a wrong offset!");

// Function OutGameModule.StaffRollSubsystem.GetPlayIndex
// 0x0004 (0x0004 - 0x0000)
struct StaffRollSubsystem_GetPlayIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaffRollSubsystem_GetPlayIndex) == 0x000004, "Wrong alignment on StaffRollSubsystem_GetPlayIndex");
static_assert(sizeof(StaffRollSubsystem_GetPlayIndex) == 0x000004, "Wrong size on StaffRollSubsystem_GetPlayIndex");
static_assert(offsetof(StaffRollSubsystem_GetPlayIndex, ReturnValue) == 0x000000, "Member 'StaffRollSubsystem_GetPlayIndex::ReturnValue' has a wrong offset!");

// Function OutGameModule.StarDetails.OnDecideButton
// 0x0028 (0x0028 - 0x0000)
struct StarDetails_OnDecideButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StarDetails_OnDecideButton) == 0x000008, "Wrong alignment on StarDetails_OnDecideButton");
static_assert(sizeof(StarDetails_OnDecideButton) == 0x000028, "Wrong size on StarDetails_OnDecideButton");
static_assert(offsetof(StarDetails_OnDecideButton, Widget) == 0x000000, "Member 'StarDetails_OnDecideButton::Widget' has a wrong offset!");
static_assert(offsetof(StarDetails_OnDecideButton, Key) == 0x000008, "Member 'StarDetails_OnDecideButton::Key' has a wrong offset!");
static_assert(offsetof(StarDetails_OnDecideButton, InputType) == 0x000020, "Member 'StarDetails_OnDecideButton::InputType' has a wrong offset!");

// Function OutGameModule.StarDetails.GetItemParam
// 0x0014 (0x0014 - 0x0000)
struct StarDetails_GetItemParam final
{
public:
	struct FItemGetListItemParam                  ReturnValue;                                       // 0x0000(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StarDetails_GetItemParam) == 0x000004, "Wrong alignment on StarDetails_GetItemParam");
static_assert(sizeof(StarDetails_GetItemParam) == 0x000014, "Wrong size on StarDetails_GetItemParam");
static_assert(offsetof(StarDetails_GetItemParam, ReturnValue) == 0x000000, "Member 'StarDetails_GetItemParam::ReturnValue' has a wrong offset!");

// DelegateFunction OutGameModule.TenKey.DecideIdDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct TenKey_DecideIdDelegate__DelegateSignature final
{
public:
	class FString                                 Number;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TenKey_DecideIdDelegate__DelegateSignature) == 0x000008, "Wrong alignment on TenKey_DecideIdDelegate__DelegateSignature");
static_assert(sizeof(TenKey_DecideIdDelegate__DelegateSignature) == 0x000010, "Wrong size on TenKey_DecideIdDelegate__DelegateSignature");
static_assert(offsetof(TenKey_DecideIdDelegate__DelegateSignature, Number) == 0x000000, "Member 'TenKey_DecideIdDelegate__DelegateSignature::Number' has a wrong offset!");

// Function OutGameModule.TenKey.FocusButtonNumber
// 0x0004 (0x0004 - 0x0000)
struct TenKey_FocusButtonNumber final
{
public:
	int32                                         Number;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TenKey_FocusButtonNumber) == 0x000004, "Wrong alignment on TenKey_FocusButtonNumber");
static_assert(sizeof(TenKey_FocusButtonNumber) == 0x000004, "Wrong size on TenKey_FocusButtonNumber");
static_assert(offsetof(TenKey_FocusButtonNumber, Number) == 0x000000, "Member 'TenKey_FocusButtonNumber::Number' has a wrong offset!");

// Function OutGameModule.TermsOfServiceBaseWidget.GetCurrentLanguageName
// 0x0008 (0x0008 - 0x0000)
struct TermsOfServiceBaseWidget_GetCurrentLanguageName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TermsOfServiceBaseWidget_GetCurrentLanguageName) == 0x000004, "Wrong alignment on TermsOfServiceBaseWidget_GetCurrentLanguageName");
static_assert(sizeof(TermsOfServiceBaseWidget_GetCurrentLanguageName) == 0x000008, "Wrong size on TermsOfServiceBaseWidget_GetCurrentLanguageName");
static_assert(offsetof(TermsOfServiceBaseWidget_GetCurrentLanguageName, ReturnValue) == 0x000000, "Member 'TermsOfServiceBaseWidget_GetCurrentLanguageName::ReturnValue' has a wrong offset!");

// Function OutGameModule.TermsOfServiceBaseWidget.GetLanguageImageAsset
// 0x0010 (0x0010 - 0x0000)
struct TermsOfServiceBaseWidget_GetLanguageImageAsset final
{
public:
	ELanguageType                                 Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimaryAssetLanguageImage*             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TermsOfServiceBaseWidget_GetLanguageImageAsset) == 0x000008, "Wrong alignment on TermsOfServiceBaseWidget_GetLanguageImageAsset");
static_assert(sizeof(TermsOfServiceBaseWidget_GetLanguageImageAsset) == 0x000010, "Wrong size on TermsOfServiceBaseWidget_GetLanguageImageAsset");
static_assert(offsetof(TermsOfServiceBaseWidget_GetLanguageImageAsset, Type) == 0x000000, "Member 'TermsOfServiceBaseWidget_GetLanguageImageAsset::Type' has a wrong offset!");
static_assert(offsetof(TermsOfServiceBaseWidget_GetLanguageImageAsset, ReturnValue) == 0x000008, "Member 'TermsOfServiceBaseWidget_GetLanguageImageAsset::ReturnValue' has a wrong offset!");

// Function OutGameModule.TermsOfServiceBaseWidget.GetScrollSpeedRate
// 0x0014 (0x0014 - 0x0000)
struct TermsOfServiceBaseWidget_GetScrollSpeedRate final
{
public:
	float                                         AnalogValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultSpeedRate;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MasSpeedRate;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddSpeedRate;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TermsOfServiceBaseWidget_GetScrollSpeedRate) == 0x000004, "Wrong alignment on TermsOfServiceBaseWidget_GetScrollSpeedRate");
static_assert(sizeof(TermsOfServiceBaseWidget_GetScrollSpeedRate) == 0x000014, "Wrong size on TermsOfServiceBaseWidget_GetScrollSpeedRate");
static_assert(offsetof(TermsOfServiceBaseWidget_GetScrollSpeedRate, AnalogValue) == 0x000000, "Member 'TermsOfServiceBaseWidget_GetScrollSpeedRate::AnalogValue' has a wrong offset!");
static_assert(offsetof(TermsOfServiceBaseWidget_GetScrollSpeedRate, DefaultSpeedRate) == 0x000004, "Member 'TermsOfServiceBaseWidget_GetScrollSpeedRate::DefaultSpeedRate' has a wrong offset!");
static_assert(offsetof(TermsOfServiceBaseWidget_GetScrollSpeedRate, MasSpeedRate) == 0x000008, "Member 'TermsOfServiceBaseWidget_GetScrollSpeedRate::MasSpeedRate' has a wrong offset!");
static_assert(offsetof(TermsOfServiceBaseWidget_GetScrollSpeedRate, AddSpeedRate) == 0x00000C, "Member 'TermsOfServiceBaseWidget_GetScrollSpeedRate::AddSpeedRate' has a wrong offset!");
static_assert(offsetof(TermsOfServiceBaseWidget_GetScrollSpeedRate, ReturnValue) == 0x000010, "Member 'TermsOfServiceBaseWidget_GetScrollSpeedRate::ReturnValue' has a wrong offset!");

// Function OutGameModule.TermsOfServiceBaseWidget.IsOpenSubLevel
// 0x0001 (0x0001 - 0x0000)
struct TermsOfServiceBaseWidget_IsOpenSubLevel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TermsOfServiceBaseWidget_IsOpenSubLevel) == 0x000001, "Wrong alignment on TermsOfServiceBaseWidget_IsOpenSubLevel");
static_assert(sizeof(TermsOfServiceBaseWidget_IsOpenSubLevel) == 0x000001, "Wrong size on TermsOfServiceBaseWidget_IsOpenSubLevel");
static_assert(offsetof(TermsOfServiceBaseWidget_IsOpenSubLevel, ReturnValue) == 0x000000, "Member 'TermsOfServiceBaseWidget_IsOpenSubLevel::ReturnValue' has a wrong offset!");

// Function OutGameModule.TermsOfServiceBaseWidget.OnDecideButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct TermsOfServiceBaseWidget_OnDecideButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TermsOfServiceBaseWidget_OnDecideButtonEvent) == 0x000008, "Wrong alignment on TermsOfServiceBaseWidget_OnDecideButtonEvent");
static_assert(sizeof(TermsOfServiceBaseWidget_OnDecideButtonEvent) == 0x000010, "Wrong size on TermsOfServiceBaseWidget_OnDecideButtonEvent");
static_assert(offsetof(TermsOfServiceBaseWidget_OnDecideButtonEvent, Widget) == 0x000000, "Member 'TermsOfServiceBaseWidget_OnDecideButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(TermsOfServiceBaseWidget_OnDecideButtonEvent, InputType) == 0x000008, "Member 'TermsOfServiceBaseWidget_OnDecideButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.TermsOfServiceBaseWidget.SetSelectionSwitcher
// 0x0004 (0x0004 - 0x0000)
struct TermsOfServiceBaseWidget_SetSelectionSwitcher final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TermsOfServiceBaseWidget_SetSelectionSwitcher) == 0x000004, "Wrong alignment on TermsOfServiceBaseWidget_SetSelectionSwitcher");
static_assert(sizeof(TermsOfServiceBaseWidget_SetSelectionSwitcher) == 0x000004, "Wrong size on TermsOfServiceBaseWidget_SetSelectionSwitcher");
static_assert(offsetof(TermsOfServiceBaseWidget_SetSelectionSwitcher, Index_0) == 0x000000, "Member 'TermsOfServiceBaseWidget_SetSelectionSwitcher::Index_0' has a wrong offset!");

// Function OutGameModule.TileViewScrollBarWidget.UpdateScroll
// 0x0008 (0x0008 - 0x0000)
struct TileViewScrollBarWidget_UpdateScroll final
{
public:
	float                                         Num1;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Num2;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TileViewScrollBarWidget_UpdateScroll) == 0x000004, "Wrong alignment on TileViewScrollBarWidget_UpdateScroll");
static_assert(sizeof(TileViewScrollBarWidget_UpdateScroll) == 0x000008, "Wrong size on TileViewScrollBarWidget_UpdateScroll");
static_assert(offsetof(TileViewScrollBarWidget_UpdateScroll, Num1) == 0x000000, "Member 'TileViewScrollBarWidget_UpdateScroll::Num1' has a wrong offset!");
static_assert(offsetof(TileViewScrollBarWidget_UpdateScroll, Num2) == 0x000004, "Member 'TileViewScrollBarWidget_UpdateScroll::Num2' has a wrong offset!");

// Function OutGameModule.TitleInitSettingWidget.GetNextLevel
// 0x0001 (0x0001 - 0x0000)
struct TitleInitSettingWidget_GetNextLevel final
{
public:
	ETitleInitSettingNextLevel                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TitleInitSettingWidget_GetNextLevel) == 0x000001, "Wrong alignment on TitleInitSettingWidget_GetNextLevel");
static_assert(sizeof(TitleInitSettingWidget_GetNextLevel) == 0x000001, "Wrong size on TitleInitSettingWidget_GetNextLevel");
static_assert(offsetof(TitleInitSettingWidget_GetNextLevel, ReturnValue) == 0x000000, "Member 'TitleInitSettingWidget_GetNextLevel::ReturnValue' has a wrong offset!");

// Function OutGameModule.TitleInitSettingWidget.OnBrightnessSettingWindowDecideWindow
// 0x0010 (0x0010 - 0x0000)
struct TitleInitSettingWidget_OnBrightnessSettingWindowDecideWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TitleInitSettingWidget_OnBrightnessSettingWindowDecideWindow) == 0x000008, "Wrong alignment on TitleInitSettingWidget_OnBrightnessSettingWindowDecideWindow");
static_assert(sizeof(TitleInitSettingWidget_OnBrightnessSettingWindowDecideWindow) == 0x000010, "Wrong size on TitleInitSettingWidget_OnBrightnessSettingWindowDecideWindow");
static_assert(offsetof(TitleInitSettingWidget_OnBrightnessSettingWindowDecideWindow, Widget) == 0x000000, "Member 'TitleInitSettingWidget_OnBrightnessSettingWindowDecideWindow::Widget' has a wrong offset!");
static_assert(offsetof(TitleInitSettingWidget_OnBrightnessSettingWindowDecideWindow, InputType) == 0x000008, "Member 'TitleInitSettingWidget_OnBrightnessSettingWindowDecideWindow::InputType' has a wrong offset!");
static_assert(offsetof(TitleInitSettingWidget_OnBrightnessSettingWindowDecideWindow, LeftButton) == 0x000009, "Member 'TitleInitSettingWidget_OnBrightnessSettingWindowDecideWindow::LeftButton' has a wrong offset!");

// Function OutGameModule.TitleInitSettingWidget.OnCautionVoicechatWindowDecideWindow
// 0x0010 (0x0010 - 0x0000)
struct TitleInitSettingWidget_OnCautionVoicechatWindowDecideWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TitleInitSettingWidget_OnCautionVoicechatWindowDecideWindow) == 0x000008, "Wrong alignment on TitleInitSettingWidget_OnCautionVoicechatWindowDecideWindow");
static_assert(sizeof(TitleInitSettingWidget_OnCautionVoicechatWindowDecideWindow) == 0x000010, "Wrong size on TitleInitSettingWidget_OnCautionVoicechatWindowDecideWindow");
static_assert(offsetof(TitleInitSettingWidget_OnCautionVoicechatWindowDecideWindow, Widget) == 0x000000, "Member 'TitleInitSettingWidget_OnCautionVoicechatWindowDecideWindow::Widget' has a wrong offset!");
static_assert(offsetof(TitleInitSettingWidget_OnCautionVoicechatWindowDecideWindow, InputType) == 0x000008, "Member 'TitleInitSettingWidget_OnCautionVoicechatWindowDecideWindow::InputType' has a wrong offset!");
static_assert(offsetof(TitleInitSettingWidget_OnCautionVoicechatWindowDecideWindow, LeftButton) == 0x000009, "Member 'TitleInitSettingWidget_OnCautionVoicechatWindowDecideWindow::LeftButton' has a wrong offset!");

// Function OutGameModule.TitleInitSettingWidget.OnDecidePressButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct TitleInitSettingWidget_OnDecidePressButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TitleInitSettingWidget_OnDecidePressButtonEvent) == 0x000008, "Wrong alignment on TitleInitSettingWidget_OnDecidePressButtonEvent");
static_assert(sizeof(TitleInitSettingWidget_OnDecidePressButtonEvent) == 0x000010, "Wrong size on TitleInitSettingWidget_OnDecidePressButtonEvent");
static_assert(offsetof(TitleInitSettingWidget_OnDecidePressButtonEvent, Widget) == 0x000000, "Member 'TitleInitSettingWidget_OnDecidePressButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(TitleInitSettingWidget_OnDecidePressButtonEvent, InputType) == 0x000008, "Member 'TitleInitSettingWidget_OnDecidePressButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.TitleInitSettingWidget.OnDecideWindow
// 0x0010 (0x0010 - 0x0000)
struct TitleInitSettingWidget_OnDecideWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TitleInitSettingWidget_OnDecideWindow) == 0x000008, "Wrong alignment on TitleInitSettingWidget_OnDecideWindow");
static_assert(sizeof(TitleInitSettingWidget_OnDecideWindow) == 0x000010, "Wrong size on TitleInitSettingWidget_OnDecideWindow");
static_assert(offsetof(TitleInitSettingWidget_OnDecideWindow, Widget) == 0x000000, "Member 'TitleInitSettingWidget_OnDecideWindow::Widget' has a wrong offset!");
static_assert(offsetof(TitleInitSettingWidget_OnDecideWindow, InputType) == 0x000008, "Member 'TitleInitSettingWidget_OnDecideWindow::InputType' has a wrong offset!");
static_assert(offsetof(TitleInitSettingWidget_OnDecideWindow, LeftButton) == 0x000009, "Member 'TitleInitSettingWidget_OnDecideWindow::LeftButton' has a wrong offset!");

// Function OutGameModule.TitleInitSettingWidget.OnMasterValueChanged
// 0x0004 (0x0004 - 0x0000)
struct TitleInitSettingWidget_OnMasterValueChanged final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TitleInitSettingWidget_OnMasterValueChanged) == 0x000004, "Wrong alignment on TitleInitSettingWidget_OnMasterValueChanged");
static_assert(sizeof(TitleInitSettingWidget_OnMasterValueChanged) == 0x000004, "Wrong size on TitleInitSettingWidget_OnMasterValueChanged");
static_assert(offsetof(TitleInitSettingWidget_OnMasterValueChanged, Value) == 0x000000, "Member 'TitleInitSettingWidget_OnMasterValueChanged::Value' has a wrong offset!");

// Function OutGameModule.TitleInitSettingWidget.OnSelectVoicechatWindowDecideWindow
// 0x0010 (0x0010 - 0x0000)
struct TitleInitSettingWidget_OnSelectVoicechatWindowDecideWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TitleInitSettingWidget_OnSelectVoicechatWindowDecideWindow) == 0x000008, "Wrong alignment on TitleInitSettingWidget_OnSelectVoicechatWindowDecideWindow");
static_assert(sizeof(TitleInitSettingWidget_OnSelectVoicechatWindowDecideWindow) == 0x000010, "Wrong size on TitleInitSettingWidget_OnSelectVoicechatWindowDecideWindow");
static_assert(offsetof(TitleInitSettingWidget_OnSelectVoicechatWindowDecideWindow, Widget) == 0x000000, "Member 'TitleInitSettingWidget_OnSelectVoicechatWindowDecideWindow::Widget' has a wrong offset!");
static_assert(offsetof(TitleInitSettingWidget_OnSelectVoicechatWindowDecideWindow, InputType) == 0x000008, "Member 'TitleInitSettingWidget_OnSelectVoicechatWindowDecideWindow::InputType' has a wrong offset!");
static_assert(offsetof(TitleInitSettingWidget_OnSelectVoicechatWindowDecideWindow, LeftButton) == 0x000009, "Member 'TitleInitSettingWidget_OnSelectVoicechatWindowDecideWindow::LeftButton' has a wrong offset!");

// Function OutGameModule.TitleInitSettingWidget.SetBrightnessValue
// 0x0004 (0x0004 - 0x0000)
struct TitleInitSettingWidget_SetBrightnessValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TitleInitSettingWidget_SetBrightnessValue) == 0x000004, "Wrong alignment on TitleInitSettingWidget_SetBrightnessValue");
static_assert(sizeof(TitleInitSettingWidget_SetBrightnessValue) == 0x000004, "Wrong size on TitleInitSettingWidget_SetBrightnessValue");
static_assert(offsetof(TitleInitSettingWidget_SetBrightnessValue, Value) == 0x000000, "Member 'TitleInitSettingWidget_SetBrightnessValue::Value' has a wrong offset!");

// Function OutGameModule.TitleWidget.OnAddedToFocusPressButton
// 0x0010 (0x0010 - 0x0000)
struct TitleWidget_OnAddedToFocusPressButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TitleWidget_OnAddedToFocusPressButton) == 0x000008, "Wrong alignment on TitleWidget_OnAddedToFocusPressButton");
static_assert(sizeof(TitleWidget_OnAddedToFocusPressButton) == 0x000010, "Wrong size on TitleWidget_OnAddedToFocusPressButton");
static_assert(offsetof(TitleWidget_OnAddedToFocusPressButton, Widget) == 0x000000, "Member 'TitleWidget_OnAddedToFocusPressButton::Widget' has a wrong offset!");
static_assert(offsetof(TitleWidget_OnAddedToFocusPressButton, InputType) == 0x000008, "Member 'TitleWidget_OnAddedToFocusPressButton::InputType' has a wrong offset!");

// Function OutGameModule.TitleWidget.OnDecidePopup
// 0x0010 (0x0010 - 0x0000)
struct TitleWidget_OnDecidePopup final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TitleWidget_OnDecidePopup) == 0x000008, "Wrong alignment on TitleWidget_OnDecidePopup");
static_assert(sizeof(TitleWidget_OnDecidePopup) == 0x000010, "Wrong size on TitleWidget_OnDecidePopup");
static_assert(offsetof(TitleWidget_OnDecidePopup, Widget) == 0x000000, "Member 'TitleWidget_OnDecidePopup::Widget' has a wrong offset!");
static_assert(offsetof(TitleWidget_OnDecidePopup, InputType) == 0x000008, "Member 'TitleWidget_OnDecidePopup::InputType' has a wrong offset!");
static_assert(offsetof(TitleWidget_OnDecidePopup, LeftButton) == 0x000009, "Member 'TitleWidget_OnDecidePopup::LeftButton' has a wrong offset!");

// Function OutGameModule.TitleWidget.OnDecidePressButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct TitleWidget_OnDecidePressButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TitleWidget_OnDecidePressButtonEvent) == 0x000008, "Wrong alignment on TitleWidget_OnDecidePressButtonEvent");
static_assert(sizeof(TitleWidget_OnDecidePressButtonEvent) == 0x000010, "Wrong size on TitleWidget_OnDecidePressButtonEvent");
static_assert(offsetof(TitleWidget_OnDecidePressButtonEvent, Widget) == 0x000000, "Member 'TitleWidget_OnDecidePressButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(TitleWidget_OnDecidePressButtonEvent, InputType) == 0x000008, "Member 'TitleWidget_OnDecidePressButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.TitleWidget.OnDecideSettingButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct TitleWidget_OnDecideSettingButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TitleWidget_OnDecideSettingButtonEvent) == 0x000008, "Wrong alignment on TitleWidget_OnDecideSettingButtonEvent");
static_assert(sizeof(TitleWidget_OnDecideSettingButtonEvent) == 0x000010, "Wrong size on TitleWidget_OnDecideSettingButtonEvent");
static_assert(offsetof(TitleWidget_OnDecideSettingButtonEvent, Widget) == 0x000000, "Member 'TitleWidget_OnDecideSettingButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(TitleWidget_OnDecideSettingButtonEvent, InputType) == 0x000008, "Member 'TitleWidget_OnDecideSettingButtonEvent::InputType' has a wrong offset!");

// Function OutGameModule.TitleWidget.OnLoginFinished
// 0x0001 (0x0001 - 0x0000)
struct TitleWidget_OnLoginFinished final
{
public:
	bool                                          LoginCompleted;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TitleWidget_OnLoginFinished) == 0x000001, "Wrong alignment on TitleWidget_OnLoginFinished");
static_assert(sizeof(TitleWidget_OnLoginFinished) == 0x000001, "Wrong size on TitleWidget_OnLoginFinished");
static_assert(offsetof(TitleWidget_OnLoginFinished, LoginCompleted) == 0x000000, "Member 'TitleWidget_OnLoginFinished::LoginCompleted' has a wrong offset!");

// Function OutGameModule.TitleWidget.OnRemovedFromFocusPressButton
// 0x0010 (0x0010 - 0x0000)
struct TitleWidget_OnRemovedFromFocusPressButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TitleWidget_OnRemovedFromFocusPressButton) == 0x000008, "Wrong alignment on TitleWidget_OnRemovedFromFocusPressButton");
static_assert(sizeof(TitleWidget_OnRemovedFromFocusPressButton) == 0x000010, "Wrong size on TitleWidget_OnRemovedFromFocusPressButton");
static_assert(offsetof(TitleWidget_OnRemovedFromFocusPressButton, Widget) == 0x000000, "Member 'TitleWidget_OnRemovedFromFocusPressButton::Widget' has a wrong offset!");
static_assert(offsetof(TitleWidget_OnRemovedFromFocusPressButton, InputType) == 0x000008, "Member 'TitleWidget_OnRemovedFromFocusPressButton::InputType' has a wrong offset!");

// Function OutGameModule.TrainingCarouselWidget.OnAvatarCharacter
// 0x0001 (0x0001 - 0x0000)
struct TrainingCarouselWidget_OnAvatarCharacter final
{
public:
	bool                                          bAvatarCharacter;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingCarouselWidget_OnAvatarCharacter) == 0x000001, "Wrong alignment on TrainingCarouselWidget_OnAvatarCharacter");
static_assert(sizeof(TrainingCarouselWidget_OnAvatarCharacter) == 0x000001, "Wrong size on TrainingCarouselWidget_OnAvatarCharacter");
static_assert(offsetof(TrainingCarouselWidget_OnAvatarCharacter, bAvatarCharacter) == 0x000000, "Member 'TrainingCarouselWidget_OnAvatarCharacter::bAvatarCharacter' has a wrong offset!");

// Function OutGameModule.TrainingCarouselWidget.OnAvatarQuirk
// 0x0018 (0x0018 - 0x0000)
struct TrainingCarouselWidget_OnAvatarQuirk final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingCarouselWidget_OnAvatarQuirk) == 0x000008, "Wrong alignment on TrainingCarouselWidget_OnAvatarQuirk");
static_assert(sizeof(TrainingCarouselWidget_OnAvatarQuirk) == 0x000018, "Wrong size on TrainingCarouselWidget_OnAvatarQuirk");
static_assert(offsetof(TrainingCarouselWidget_OnAvatarQuirk, Message) == 0x000000, "Member 'TrainingCarouselWidget_OnAvatarQuirk::Message' has a wrong offset!");

// DelegateFunction OutGameModule.TrainingCarouselWidget.OnChangedIndexDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct TrainingCarouselWidget_OnChangedIndexDelegate__DelegateSignature final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingCarouselWidget_OnChangedIndexDelegate__DelegateSignature) == 0x000004, "Wrong alignment on TrainingCarouselWidget_OnChangedIndexDelegate__DelegateSignature");
static_assert(sizeof(TrainingCarouselWidget_OnChangedIndexDelegate__DelegateSignature) == 0x000004, "Wrong size on TrainingCarouselWidget_OnChangedIndexDelegate__DelegateSignature");
static_assert(offsetof(TrainingCarouselWidget_OnChangedIndexDelegate__DelegateSignature, Index_0) == 0x000000, "Member 'TrainingCarouselWidget_OnChangedIndexDelegate__DelegateSignature::Index_0' has a wrong offset!");

// Function OutGameModule.TrainingCarouselWidget.OnSetCategoryName
// 0x0018 (0x0018 - 0x0000)
struct TrainingCarouselWidget_OnSetCategoryName final
{
public:
	class FText                                   CategoryText;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingCarouselWidget_OnSetCategoryName) == 0x000008, "Wrong alignment on TrainingCarouselWidget_OnSetCategoryName");
static_assert(sizeof(TrainingCarouselWidget_OnSetCategoryName) == 0x000018, "Wrong size on TrainingCarouselWidget_OnSetCategoryName");
static_assert(offsetof(TrainingCarouselWidget_OnSetCategoryName, CategoryText) == 0x000000, "Member 'TrainingCarouselWidget_OnSetCategoryName::CategoryText' has a wrong offset!");

// Function OutGameModule.TrainingCarouselWidget.OnSetMessage
// 0x0018 (0x0018 - 0x0000)
struct TrainingCarouselWidget_OnSetMessage final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingCarouselWidget_OnSetMessage) == 0x000008, "Wrong alignment on TrainingCarouselWidget_OnSetMessage");
static_assert(sizeof(TrainingCarouselWidget_OnSetMessage) == 0x000018, "Wrong size on TrainingCarouselWidget_OnSetMessage");
static_assert(offsetof(TrainingCarouselWidget_OnSetMessage, Message) == 0x000000, "Member 'TrainingCarouselWidget_OnSetMessage::Message' has a wrong offset!");

// Function OutGameModule.TrainingCarouselWidget.SetAvatarCharacter
// 0x0001 (0x0001 - 0x0000)
struct TrainingCarouselWidget_SetAvatarCharacter final
{
public:
	bool                                          bAvatarCharacter;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingCarouselWidget_SetAvatarCharacter) == 0x000001, "Wrong alignment on TrainingCarouselWidget_SetAvatarCharacter");
static_assert(sizeof(TrainingCarouselWidget_SetAvatarCharacter) == 0x000001, "Wrong size on TrainingCarouselWidget_SetAvatarCharacter");
static_assert(offsetof(TrainingCarouselWidget_SetAvatarCharacter, bAvatarCharacter) == 0x000000, "Member 'TrainingCarouselWidget_SetAvatarCharacter::bAvatarCharacter' has a wrong offset!");

// Function OutGameModule.TrainingCarouselWidget.SetChangeIndex
// 0x0001 (0x0001 - 0x0000)
struct TrainingCarouselWidget_SetChangeIndex final
{
public:
	bool                                          bNext;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingCarouselWidget_SetChangeIndex) == 0x000001, "Wrong alignment on TrainingCarouselWidget_SetChangeIndex");
static_assert(sizeof(TrainingCarouselWidget_SetChangeIndex) == 0x000001, "Wrong size on TrainingCarouselWidget_SetChangeIndex");
static_assert(offsetof(TrainingCarouselWidget_SetChangeIndex, bNext) == 0x000000, "Member 'TrainingCarouselWidget_SetChangeIndex::bNext' has a wrong offset!");

// Function OutGameModule.TrainingCarouselWidget.SetIndex
// 0x0004 (0x0004 - 0x0000)
struct TrainingCarouselWidget_SetIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingCarouselWidget_SetIndex) == 0x000004, "Wrong alignment on TrainingCarouselWidget_SetIndex");
static_assert(sizeof(TrainingCarouselWidget_SetIndex) == 0x000004, "Wrong size on TrainingCarouselWidget_SetIndex");
static_assert(offsetof(TrainingCarouselWidget_SetIndex, Index_0) == 0x000000, "Member 'TrainingCarouselWidget_SetIndex::Index_0' has a wrong offset!");

// Function OutGameModule.TrainingCarouselWidget.GetAvatarCharacter
// 0x0001 (0x0001 - 0x0000)
struct TrainingCarouselWidget_GetAvatarCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingCarouselWidget_GetAvatarCharacter) == 0x000001, "Wrong alignment on TrainingCarouselWidget_GetAvatarCharacter");
static_assert(sizeof(TrainingCarouselWidget_GetAvatarCharacter) == 0x000001, "Wrong size on TrainingCarouselWidget_GetAvatarCharacter");
static_assert(offsetof(TrainingCarouselWidget_GetAvatarCharacter, ReturnValue) == 0x000000, "Member 'TrainingCarouselWidget_GetAvatarCharacter::ReturnValue' has a wrong offset!");

// Function OutGameModule.TrainingCarouselWidget.GetIndex
// 0x0004 (0x0004 - 0x0000)
struct TrainingCarouselWidget_GetIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingCarouselWidget_GetIndex) == 0x000004, "Wrong alignment on TrainingCarouselWidget_GetIndex");
static_assert(sizeof(TrainingCarouselWidget_GetIndex) == 0x000004, "Wrong size on TrainingCarouselWidget_GetIndex");
static_assert(offsetof(TrainingCarouselWidget_GetIndex, ReturnValue) == 0x000000, "Member 'TrainingCarouselWidget_GetIndex::ReturnValue' has a wrong offset!");

// Function OutGameModule.TrainingCharacterWidget.OnSetCharacterName
// 0x0018 (0x0018 - 0x0000)
struct TrainingCharacterWidget_OnSetCharacterName final
{
public:
	class FText                                   CharacterName;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingCharacterWidget_OnSetCharacterName) == 0x000008, "Wrong alignment on TrainingCharacterWidget_OnSetCharacterName");
static_assert(sizeof(TrainingCharacterWidget_OnSetCharacterName) == 0x000018, "Wrong size on TrainingCharacterWidget_OnSetCharacterName");
static_assert(offsetof(TrainingCharacterWidget_OnSetCharacterName, CharacterName) == 0x000000, "Member 'TrainingCharacterWidget_OnSetCharacterName::CharacterName' has a wrong offset!");

// Function OutGameModule.TrainingCharacterWidget.SetAiActionButton
// 0x0001 (0x0001 - 0x0000)
struct TrainingCharacterWidget_SetAiActionButton final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingCharacterWidget_SetAiActionButton) == 0x000001, "Wrong alignment on TrainingCharacterWidget_SetAiActionButton");
static_assert(sizeof(TrainingCharacterWidget_SetAiActionButton) == 0x000001, "Wrong size on TrainingCharacterWidget_SetAiActionButton");
static_assert(offsetof(TrainingCharacterWidget_SetAiActionButton, bEnable) == 0x000000, "Member 'TrainingCharacterWidget_SetAiActionButton::bEnable' has a wrong offset!");

// Function OutGameModule.TrainingCharacterWidget.SetAiActionIndex
// 0x0004 (0x0004 - 0x0000)
struct TrainingCharacterWidget_SetAiActionIndex final
{
public:
	int32                                         AiActionIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingCharacterWidget_SetAiActionIndex) == 0x000004, "Wrong alignment on TrainingCharacterWidget_SetAiActionIndex");
static_assert(sizeof(TrainingCharacterWidget_SetAiActionIndex) == 0x000004, "Wrong size on TrainingCharacterWidget_SetAiActionIndex");
static_assert(offsetof(TrainingCharacterWidget_SetAiActionIndex, AiActionIndex) == 0x000000, "Member 'TrainingCharacterWidget_SetAiActionIndex::AiActionIndex' has a wrong offset!");

// Function OutGameModule.TrainingCharacterWidget.SetCharacterId
// 0x0008 (0x0008 - 0x0000)
struct TrainingCharacterWidget_SetCharacterId final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SkillVariationCode;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingCharacterWidget_SetCharacterId) == 0x000004, "Wrong alignment on TrainingCharacterWidget_SetCharacterId");
static_assert(sizeof(TrainingCharacterWidget_SetCharacterId) == 0x000008, "Wrong size on TrainingCharacterWidget_SetCharacterId");
static_assert(offsetof(TrainingCharacterWidget_SetCharacterId, CharacterId) == 0x000000, "Member 'TrainingCharacterWidget_SetCharacterId::CharacterId' has a wrong offset!");
static_assert(offsetof(TrainingCharacterWidget_SetCharacterId, SkillVariationCode) == 0x000004, "Member 'TrainingCharacterWidget_SetCharacterId::SkillVariationCode' has a wrong offset!");

// Function OutGameModule.TrainingCharacterWidget.SetEnableCharacterChangeButton
// 0x0001 (0x0001 - 0x0000)
struct TrainingCharacterWidget_SetEnableCharacterChangeButton final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingCharacterWidget_SetEnableCharacterChangeButton) == 0x000001, "Wrong alignment on TrainingCharacterWidget_SetEnableCharacterChangeButton");
static_assert(sizeof(TrainingCharacterWidget_SetEnableCharacterChangeButton) == 0x000001, "Wrong size on TrainingCharacterWidget_SetEnableCharacterChangeButton");
static_assert(offsetof(TrainingCharacterWidget_SetEnableCharacterChangeButton, bEnable) == 0x000000, "Member 'TrainingCharacterWidget_SetEnableCharacterChangeButton::bEnable' has a wrong offset!");

// Function OutGameModule.TrainingCharacterWidget.SetTechniqueEnableButton
// 0x0001 (0x0001 - 0x0000)
struct TrainingCharacterWidget_SetTechniqueEnableButton final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingCharacterWidget_SetTechniqueEnableButton) == 0x000001, "Wrong alignment on TrainingCharacterWidget_SetTechniqueEnableButton");
static_assert(sizeof(TrainingCharacterWidget_SetTechniqueEnableButton) == 0x000001, "Wrong size on TrainingCharacterWidget_SetTechniqueEnableButton");
static_assert(offsetof(TrainingCharacterWidget_SetTechniqueEnableButton, bEnable) == 0x000000, "Member 'TrainingCharacterWidget_SetTechniqueEnableButton::bEnable' has a wrong offset!");

// Function OutGameModule.TrainingCharacterWidget.SetUniqueLevel
// 0x000C (0x000C - 0x0000)
struct TrainingCharacterWidget_SetUniqueLevel final
{
public:
	int32                                         Technique1Level;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Technique2Level;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Technique3Level;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingCharacterWidget_SetUniqueLevel) == 0x000004, "Wrong alignment on TrainingCharacterWidget_SetUniqueLevel");
static_assert(sizeof(TrainingCharacterWidget_SetUniqueLevel) == 0x00000C, "Wrong size on TrainingCharacterWidget_SetUniqueLevel");
static_assert(offsetof(TrainingCharacterWidget_SetUniqueLevel, Technique1Level) == 0x000000, "Member 'TrainingCharacterWidget_SetUniqueLevel::Technique1Level' has a wrong offset!");
static_assert(offsetof(TrainingCharacterWidget_SetUniqueLevel, Technique2Level) == 0x000004, "Member 'TrainingCharacterWidget_SetUniqueLevel::Technique2Level' has a wrong offset!");
static_assert(offsetof(TrainingCharacterWidget_SetUniqueLevel, Technique3Level) == 0x000008, "Member 'TrainingCharacterWidget_SetUniqueLevel::Technique3Level' has a wrong offset!");

// Function OutGameModule.TrainingCharacterWidget.GetAiActionIndex
// 0x0004 (0x0004 - 0x0000)
struct TrainingCharacterWidget_GetAiActionIndex final
{
public:
	int32                                         AiActionIndex;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingCharacterWidget_GetAiActionIndex) == 0x000004, "Wrong alignment on TrainingCharacterWidget_GetAiActionIndex");
static_assert(sizeof(TrainingCharacterWidget_GetAiActionIndex) == 0x000004, "Wrong size on TrainingCharacterWidget_GetAiActionIndex");
static_assert(offsetof(TrainingCharacterWidget_GetAiActionIndex, AiActionIndex) == 0x000000, "Member 'TrainingCharacterWidget_GetAiActionIndex::AiActionIndex' has a wrong offset!");

// Function OutGameModule.TrainingCharacterWidget.GetCharacterID
// 0x0008 (0x0008 - 0x0000)
struct TrainingCharacterWidget_GetCharacterID final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SkillVariationCode;                                // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingCharacterWidget_GetCharacterID) == 0x000004, "Wrong alignment on TrainingCharacterWidget_GetCharacterID");
static_assert(sizeof(TrainingCharacterWidget_GetCharacterID) == 0x000008, "Wrong size on TrainingCharacterWidget_GetCharacterID");
static_assert(offsetof(TrainingCharacterWidget_GetCharacterID, CharacterId) == 0x000000, "Member 'TrainingCharacterWidget_GetCharacterID::CharacterId' has a wrong offset!");
static_assert(offsetof(TrainingCharacterWidget_GetCharacterID, SkillVariationCode) == 0x000004, "Member 'TrainingCharacterWidget_GetCharacterID::SkillVariationCode' has a wrong offset!");

// Function OutGameModule.TrainingCharacterWidget.GetHaveSkillVariation
// 0x0004 (0x0004 - 0x0000)
struct TrainingCharacterWidget_GetHaveSkillVariation final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingCharacterWidget_GetHaveSkillVariation) == 0x000004, "Wrong alignment on TrainingCharacterWidget_GetHaveSkillVariation");
static_assert(sizeof(TrainingCharacterWidget_GetHaveSkillVariation) == 0x000004, "Wrong size on TrainingCharacterWidget_GetHaveSkillVariation");
static_assert(offsetof(TrainingCharacterWidget_GetHaveSkillVariation, ReturnValue) == 0x000000, "Member 'TrainingCharacterWidget_GetHaveSkillVariation::ReturnValue' has a wrong offset!");

// Function OutGameModule.TrainingCharacterWidget.GetUniqueLevel
// 0x000C (0x000C - 0x0000)
struct TrainingCharacterWidget_GetUniqueLevel final
{
public:
	int32                                         Technique1Level;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Technique2Level;                                   // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Technique3Level;                                   // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingCharacterWidget_GetUniqueLevel) == 0x000004, "Wrong alignment on TrainingCharacterWidget_GetUniqueLevel");
static_assert(sizeof(TrainingCharacterWidget_GetUniqueLevel) == 0x00000C, "Wrong size on TrainingCharacterWidget_GetUniqueLevel");
static_assert(offsetof(TrainingCharacterWidget_GetUniqueLevel, Technique1Level) == 0x000000, "Member 'TrainingCharacterWidget_GetUniqueLevel::Technique1Level' has a wrong offset!");
static_assert(offsetof(TrainingCharacterWidget_GetUniqueLevel, Technique2Level) == 0x000004, "Member 'TrainingCharacterWidget_GetUniqueLevel::Technique2Level' has a wrong offset!");
static_assert(offsetof(TrainingCharacterWidget_GetUniqueLevel, Technique3Level) == 0x000008, "Member 'TrainingCharacterWidget_GetUniqueLevel::Technique3Level' has a wrong offset!");

// Function OutGameModule.TrainingCharacterWidget.IsChange
// 0x0001 (0x0001 - 0x0000)
struct TrainingCharacterWidget_IsChange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingCharacterWidget_IsChange) == 0x000001, "Wrong alignment on TrainingCharacterWidget_IsChange");
static_assert(sizeof(TrainingCharacterWidget_IsChange) == 0x000001, "Wrong size on TrainingCharacterWidget_IsChange");
static_assert(offsetof(TrainingCharacterWidget_IsChange, ReturnValue) == 0x000000, "Member 'TrainingCharacterWidget_IsChange::ReturnValue' has a wrong offset!");

// Function OutGameModule.TutorialIconWidget.OnPressButton
// 0x0010 (0x0010 - 0x0000)
struct TutorialIconWidget_OnPressButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TutorialIconWidget_OnPressButton) == 0x000008, "Wrong alignment on TutorialIconWidget_OnPressButton");
static_assert(sizeof(TutorialIconWidget_OnPressButton) == 0x000010, "Wrong size on TutorialIconWidget_OnPressButton");
static_assert(offsetof(TutorialIconWidget_OnPressButton, Widget) == 0x000000, "Member 'TutorialIconWidget_OnPressButton::Widget' has a wrong offset!");
static_assert(offsetof(TutorialIconWidget_OnPressButton, InputType) == 0x000008, "Member 'TutorialIconWidget_OnPressButton::InputType' has a wrong offset!");

// Function OutGameModule.UseCurrencySelectItemWidget.DoTileViewnWidgetNavigation
// 0x0010 (0x0010 - 0x0000)
struct UseCurrencySelectItemWidget_DoTileViewnWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UseCurrencySelectItemWidget_DoTileViewnWidgetNavigation) == 0x000008, "Wrong alignment on UseCurrencySelectItemWidget_DoTileViewnWidgetNavigation");
static_assert(sizeof(UseCurrencySelectItemWidget_DoTileViewnWidgetNavigation) == 0x000010, "Wrong size on UseCurrencySelectItemWidget_DoTileViewnWidgetNavigation");
static_assert(offsetof(UseCurrencySelectItemWidget_DoTileViewnWidgetNavigation, UiNavigation) == 0x000000, "Member 'UseCurrencySelectItemWidget_DoTileViewnWidgetNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(UseCurrencySelectItemWidget_DoTileViewnWidgetNavigation, ReturnValue) == 0x000008, "Member 'UseCurrencySelectItemWidget_DoTileViewnWidgetNavigation::ReturnValue' has a wrong offset!");

// Function OutGameModule.UseCurrencySelectItemWidget.OnDecideButton
// 0x0010 (0x0010 - 0x0000)
struct UseCurrencySelectItemWidget_OnDecideButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UseCurrencySelectItemWidget_OnDecideButton) == 0x000008, "Wrong alignment on UseCurrencySelectItemWidget_OnDecideButton");
static_assert(sizeof(UseCurrencySelectItemWidget_OnDecideButton) == 0x000010, "Wrong size on UseCurrencySelectItemWidget_OnDecideButton");
static_assert(offsetof(UseCurrencySelectItemWidget_OnDecideButton, Widget) == 0x000000, "Member 'UseCurrencySelectItemWidget_OnDecideButton::Widget' has a wrong offset!");
static_assert(offsetof(UseCurrencySelectItemWidget_OnDecideButton, InputType) == 0x000008, "Member 'UseCurrencySelectItemWidget_OnDecideButton::InputType' has a wrong offset!");

// Function OutGameModule.UseCurrencySelectWidget.DoBackButtonWidgetNavigation
// 0x0010 (0x0010 - 0x0000)
struct UseCurrencySelectWidget_DoBackButtonWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UseCurrencySelectWidget_DoBackButtonWidgetNavigation) == 0x000008, "Wrong alignment on UseCurrencySelectWidget_DoBackButtonWidgetNavigation");
static_assert(sizeof(UseCurrencySelectWidget_DoBackButtonWidgetNavigation) == 0x000010, "Wrong size on UseCurrencySelectWidget_DoBackButtonWidgetNavigation");
static_assert(offsetof(UseCurrencySelectWidget_DoBackButtonWidgetNavigation, UiNavigation) == 0x000000, "Member 'UseCurrencySelectWidget_DoBackButtonWidgetNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(UseCurrencySelectWidget_DoBackButtonWidgetNavigation, ReturnValue) == 0x000008, "Member 'UseCurrencySelectWidget_DoBackButtonWidgetNavigation::ReturnValue' has a wrong offset!");

// Function OutGameModule.UseCurrencySelectWidget.DoTokushoButtonWidgetNavigation
// 0x0010 (0x0010 - 0x0000)
struct UseCurrencySelectWidget_DoTokushoButtonWidgetNavigation final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UseCurrencySelectWidget_DoTokushoButtonWidgetNavigation) == 0x000008, "Wrong alignment on UseCurrencySelectWidget_DoTokushoButtonWidgetNavigation");
static_assert(sizeof(UseCurrencySelectWidget_DoTokushoButtonWidgetNavigation) == 0x000010, "Wrong size on UseCurrencySelectWidget_DoTokushoButtonWidgetNavigation");
static_assert(offsetof(UseCurrencySelectWidget_DoTokushoButtonWidgetNavigation, UiNavigation) == 0x000000, "Member 'UseCurrencySelectWidget_DoTokushoButtonWidgetNavigation::UiNavigation' has a wrong offset!");
static_assert(offsetof(UseCurrencySelectWidget_DoTokushoButtonWidgetNavigation, ReturnValue) == 0x000008, "Member 'UseCurrencySelectWidget_DoTokushoButtonWidgetNavigation::ReturnValue' has a wrong offset!");

// Function OutGameModule.VersionWindowWidget.GetApplicationVersionText
// 0x0018 (0x0018 - 0x0000)
struct VersionWindowWidget_GetApplicationVersionText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VersionWindowWidget_GetApplicationVersionText) == 0x000008, "Wrong alignment on VersionWindowWidget_GetApplicationVersionText");
static_assert(sizeof(VersionWindowWidget_GetApplicationVersionText) == 0x000018, "Wrong size on VersionWindowWidget_GetApplicationVersionText");
static_assert(offsetof(VersionWindowWidget_GetApplicationVersionText, ReturnValue) == 0x000000, "Member 'VersionWindowWidget_GetApplicationVersionText::ReturnValue' has a wrong offset!");

// Function OutGameModule.VersionWindowWidget.GetInquiryCodeText
// 0x0018 (0x0018 - 0x0000)
struct VersionWindowWidget_GetInquiryCodeText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VersionWindowWidget_GetInquiryCodeText) == 0x000008, "Wrong alignment on VersionWindowWidget_GetInquiryCodeText");
static_assert(sizeof(VersionWindowWidget_GetInquiryCodeText) == 0x000018, "Wrong size on VersionWindowWidget_GetInquiryCodeText");
static_assert(offsetof(VersionWindowWidget_GetInquiryCodeText, ReturnValue) == 0x000000, "Member 'VersionWindowWidget_GetInquiryCodeText::ReturnValue' has a wrong offset!");

// Function OutGameModule.VersionWindowWidget.GetMasterVersionText
// 0x0018 (0x0018 - 0x0000)
struct VersionWindowWidget_GetMasterVersionText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VersionWindowWidget_GetMasterVersionText) == 0x000008, "Wrong alignment on VersionWindowWidget_GetMasterVersionText");
static_assert(sizeof(VersionWindowWidget_GetMasterVersionText) == 0x000018, "Wrong size on VersionWindowWidget_GetMasterVersionText");
static_assert(offsetof(VersionWindowWidget_GetMasterVersionText, ReturnValue) == 0x000000, "Member 'VersionWindowWidget_GetMasterVersionText::ReturnValue' has a wrong offset!");

// Function OutGameModule.VersionWindowWidget.GetServerVersionText
// 0x0018 (0x0018 - 0x0000)
struct VersionWindowWidget_GetServerVersionText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VersionWindowWidget_GetServerVersionText) == 0x000008, "Wrong alignment on VersionWindowWidget_GetServerVersionText");
static_assert(sizeof(VersionWindowWidget_GetServerVersionText) == 0x000018, "Wrong size on VersionWindowWidget_GetServerVersionText");
static_assert(offsetof(VersionWindowWidget_GetServerVersionText, ReturnValue) == 0x000000, "Member 'VersionWindowWidget_GetServerVersionText::ReturnValue' has a wrong offset!");

// Function OutGameModule.VersionWindowWidget.OnDecideGeneralWindowFrame
// 0x0010 (0x0010 - 0x0000)
struct VersionWindowWidget_OnDecideGeneralWindowFrame final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VersionWindowWidget_OnDecideGeneralWindowFrame) == 0x000008, "Wrong alignment on VersionWindowWidget_OnDecideGeneralWindowFrame");
static_assert(sizeof(VersionWindowWidget_OnDecideGeneralWindowFrame) == 0x000010, "Wrong size on VersionWindowWidget_OnDecideGeneralWindowFrame");
static_assert(offsetof(VersionWindowWidget_OnDecideGeneralWindowFrame, Widget) == 0x000000, "Member 'VersionWindowWidget_OnDecideGeneralWindowFrame::Widget' has a wrong offset!");
static_assert(offsetof(VersionWindowWidget_OnDecideGeneralWindowFrame, InputType) == 0x000008, "Member 'VersionWindowWidget_OnDecideGeneralWindowFrame::InputType' has a wrong offset!");
static_assert(offsetof(VersionWindowWidget_OnDecideGeneralWindowFrame, LeftButton) == 0x000009, "Member 'VersionWindowWidget_OnDecideGeneralWindowFrame::LeftButton' has a wrong offset!");

}

