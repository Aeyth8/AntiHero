#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InGameModule

#include "Basic.hpp"

#include "GameModule_structs.hpp"
#include "CommonModule_structs.hpp"
#include "UIFramework_structs.hpp"
#include "InGameModule_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "BykingUnrealModule_structs.hpp"
#include "SlateCore_structs.hpp"
#include "MasterDataModule_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function InGameModule.DogTagManagerComponent.ConsumeDogTag_ToClient
// 0x0008 (0x0008 - 0x0000)
struct DogTagManagerComponent_ConsumeDogTag_ToClient final
{
public:
	class APlayerStateBattle*                     PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DogTagManagerComponent_ConsumeDogTag_ToClient) == 0x000008, "Wrong alignment on DogTagManagerComponent_ConsumeDogTag_ToClient");
static_assert(sizeof(DogTagManagerComponent_ConsumeDogTag_ToClient) == 0x000008, "Wrong size on DogTagManagerComponent_ConsumeDogTag_ToClient");
static_assert(offsetof(DogTagManagerComponent_ConsumeDogTag_ToClient, PlayerState) == 0x000000, "Member 'DogTagManagerComponent_ConsumeDogTag_ToClient::PlayerState' has a wrong offset!");

// Function InGameModule.DogTagManagerComponent.ConsumeDogTag_ToServer
// 0x0008 (0x0008 - 0x0000)
struct DogTagManagerComponent_ConsumeDogTag_ToServer final
{
public:
	class APlayerStateBattle*                     PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DogTagManagerComponent_ConsumeDogTag_ToServer) == 0x000008, "Wrong alignment on DogTagManagerComponent_ConsumeDogTag_ToServer");
static_assert(sizeof(DogTagManagerComponent_ConsumeDogTag_ToServer) == 0x000008, "Wrong size on DogTagManagerComponent_ConsumeDogTag_ToServer");
static_assert(offsetof(DogTagManagerComponent_ConsumeDogTag_ToServer, PlayerState) == 0x000000, "Member 'DogTagManagerComponent_ConsumeDogTag_ToServer::PlayerState' has a wrong offset!");

// Function InGameModule.DogTagManagerComponent.LockDogTag_ToClient
// 0x0004 (0x0004 - 0x0000)
struct DogTagManagerComponent_LockDogTag_ToClient final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x1];                                        // 0x0001(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int16                                         PlayrId;                                           // 0x0002(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DogTagManagerComponent_LockDogTag_ToClient) == 0x000002, "Wrong alignment on DogTagManagerComponent_LockDogTag_ToClient");
static_assert(sizeof(DogTagManagerComponent_LockDogTag_ToClient) == 0x000004, "Wrong size on DogTagManagerComponent_LockDogTag_ToClient");
static_assert(offsetof(DogTagManagerComponent_LockDogTag_ToClient, TeamId) == 0x000000, "Member 'DogTagManagerComponent_LockDogTag_ToClient::TeamId' has a wrong offset!");
static_assert(offsetof(DogTagManagerComponent_LockDogTag_ToClient, PlayrId) == 0x000002, "Member 'DogTagManagerComponent_LockDogTag_ToClient::PlayrId' has a wrong offset!");

// Function InGameModule.DogTagManagerComponent.LockDogTag_ToServer
// 0x0004 (0x0004 - 0x0000)
struct DogTagManagerComponent_LockDogTag_ToServer final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x1];                                        // 0x0001(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int16                                         PlayrId;                                           // 0x0002(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DogTagManagerComponent_LockDogTag_ToServer) == 0x000002, "Wrong alignment on DogTagManagerComponent_LockDogTag_ToServer");
static_assert(sizeof(DogTagManagerComponent_LockDogTag_ToServer) == 0x000004, "Wrong size on DogTagManagerComponent_LockDogTag_ToServer");
static_assert(offsetof(DogTagManagerComponent_LockDogTag_ToServer, TeamId) == 0x000000, "Member 'DogTagManagerComponent_LockDogTag_ToServer::TeamId' has a wrong offset!");
static_assert(offsetof(DogTagManagerComponent_LockDogTag_ToServer, PlayrId) == 0x000002, "Member 'DogTagManagerComponent_LockDogTag_ToServer::PlayrId' has a wrong offset!");

// Function InGameModule.DogTagManagerComponent.OnPickupDogTag_ToClient
// 0x0004 (0x0004 - 0x0000)
struct DogTagManagerComponent_OnPickupDogTag_ToClient final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x1];                                        // 0x0001(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int16                                         PlayerId;                                          // 0x0002(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DogTagManagerComponent_OnPickupDogTag_ToClient) == 0x000002, "Wrong alignment on DogTagManagerComponent_OnPickupDogTag_ToClient");
static_assert(sizeof(DogTagManagerComponent_OnPickupDogTag_ToClient) == 0x000004, "Wrong size on DogTagManagerComponent_OnPickupDogTag_ToClient");
static_assert(offsetof(DogTagManagerComponent_OnPickupDogTag_ToClient, TeamId) == 0x000000, "Member 'DogTagManagerComponent_OnPickupDogTag_ToClient::TeamId' has a wrong offset!");
static_assert(offsetof(DogTagManagerComponent_OnPickupDogTag_ToClient, PlayerId) == 0x000002, "Member 'DogTagManagerComponent_OnPickupDogTag_ToClient::PlayerId' has a wrong offset!");

// Function InGameModule.DogTagManagerComponent.OnPickupDogTag_ToServer
// 0x0004 (0x0004 - 0x0000)
struct DogTagManagerComponent_OnPickupDogTag_ToServer final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x1];                                        // 0x0001(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int16                                         PlayerId;                                          // 0x0002(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DogTagManagerComponent_OnPickupDogTag_ToServer) == 0x000002, "Wrong alignment on DogTagManagerComponent_OnPickupDogTag_ToServer");
static_assert(sizeof(DogTagManagerComponent_OnPickupDogTag_ToServer) == 0x000004, "Wrong size on DogTagManagerComponent_OnPickupDogTag_ToServer");
static_assert(offsetof(DogTagManagerComponent_OnPickupDogTag_ToServer, TeamId) == 0x000000, "Member 'DogTagManagerComponent_OnPickupDogTag_ToServer::TeamId' has a wrong offset!");
static_assert(offsetof(DogTagManagerComponent_OnPickupDogTag_ToServer, PlayerId) == 0x000002, "Member 'DogTagManagerComponent_OnPickupDogTag_ToServer::PlayerId' has a wrong offset!");

// Function InGameModule.DogTagManagerComponent.UnlockDogTag_ToClient
// 0x0004 (0x0004 - 0x0000)
struct DogTagManagerComponent_UnlockDogTag_ToClient final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x1];                                        // 0x0001(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int16                                         PlayrId;                                           // 0x0002(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DogTagManagerComponent_UnlockDogTag_ToClient) == 0x000002, "Wrong alignment on DogTagManagerComponent_UnlockDogTag_ToClient");
static_assert(sizeof(DogTagManagerComponent_UnlockDogTag_ToClient) == 0x000004, "Wrong size on DogTagManagerComponent_UnlockDogTag_ToClient");
static_assert(offsetof(DogTagManagerComponent_UnlockDogTag_ToClient, TeamId) == 0x000000, "Member 'DogTagManagerComponent_UnlockDogTag_ToClient::TeamId' has a wrong offset!");
static_assert(offsetof(DogTagManagerComponent_UnlockDogTag_ToClient, PlayrId) == 0x000002, "Member 'DogTagManagerComponent_UnlockDogTag_ToClient::PlayrId' has a wrong offset!");

// Function InGameModule.DogTagManagerComponent.UnlockDogTag_ToServer
// 0x0004 (0x0004 - 0x0000)
struct DogTagManagerComponent_UnlockDogTag_ToServer final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x1];                                        // 0x0001(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int16                                         PlayrId;                                           // 0x0002(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DogTagManagerComponent_UnlockDogTag_ToServer) == 0x000002, "Wrong alignment on DogTagManagerComponent_UnlockDogTag_ToServer");
static_assert(sizeof(DogTagManagerComponent_UnlockDogTag_ToServer) == 0x000004, "Wrong size on DogTagManagerComponent_UnlockDogTag_ToServer");
static_assert(offsetof(DogTagManagerComponent_UnlockDogTag_ToServer, TeamId) == 0x000000, "Member 'DogTagManagerComponent_UnlockDogTag_ToServer::TeamId' has a wrong offset!");
static_assert(offsetof(DogTagManagerComponent_UnlockDogTag_ToServer, PlayrId) == 0x000002, "Member 'DogTagManagerComponent_UnlockDogTag_ToServer::PlayrId' has a wrong offset!");

// Function InGameModule.PlayerControllerBattle.BP_PlayCameraShakeParam
// 0x0064 (0x0064 - 0x0000)
struct PlayerControllerBattle_BP_PlayCameraShakeParam final
{
public:
	struct FCameraShakerParam                     Param;                                             // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerBattle_BP_PlayCameraShakeParam) == 0x000004, "Wrong alignment on PlayerControllerBattle_BP_PlayCameraShakeParam");
static_assert(sizeof(PlayerControllerBattle_BP_PlayCameraShakeParam) == 0x000064, "Wrong size on PlayerControllerBattle_BP_PlayCameraShakeParam");
static_assert(offsetof(PlayerControllerBattle_BP_PlayCameraShakeParam, Param) == 0x000000, "Member 'PlayerControllerBattle_BP_PlayCameraShakeParam::Param' has a wrong offset!");
static_assert(offsetof(PlayerControllerBattle_BP_PlayCameraShakeParam, Scale) == 0x000060, "Member 'PlayerControllerBattle_BP_PlayCameraShakeParam::Scale' has a wrong offset!");

// Function InGameModule.PlayerControllerBattle.BP_SendViolationReport_CallServer
// 0x0001 (0x0001 - 0x0000)
struct PlayerControllerBattle_BP_SendViolationReport_CallServer final
{
public:
	EMdPenaltyType                                PenaltyReportType;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerBattle_BP_SendViolationReport_CallServer) == 0x000001, "Wrong alignment on PlayerControllerBattle_BP_SendViolationReport_CallServer");
static_assert(sizeof(PlayerControllerBattle_BP_SendViolationReport_CallServer) == 0x000001, "Wrong size on PlayerControllerBattle_BP_SendViolationReport_CallServer");
static_assert(offsetof(PlayerControllerBattle_BP_SendViolationReport_CallServer, PenaltyReportType) == 0x000000, "Member 'PlayerControllerBattle_BP_SendViolationReport_CallServer::PenaltyReportType' has a wrong offset!");

// Function InGameModule.PlayerControllerBattle.BP_ServerTravel
// 0x0010 (0x0010 - 0x0000)
struct PlayerControllerBattle_BP_ServerTravel final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerBattle_BP_ServerTravel) == 0x000008, "Wrong alignment on PlayerControllerBattle_BP_ServerTravel");
static_assert(sizeof(PlayerControllerBattle_BP_ServerTravel) == 0x000010, "Wrong size on PlayerControllerBattle_BP_ServerTravel");
static_assert(offsetof(PlayerControllerBattle_BP_ServerTravel, URL) == 0x000000, "Member 'PlayerControllerBattle_BP_ServerTravel::URL' has a wrong offset!");

// Function InGameModule.PlayerControllerBattle.ClientSetBattleResultData
// 0x0028 (0x0028 - 0x0000)
struct PlayerControllerBattle_ClientSetBattleResultData final
{
public:
	TArray<struct FBattleResultData>              Data;                                              // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FDropItemParamInfo>             DropItems;                                         // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bRetire;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerControllerBattle_ClientSetBattleResultData) == 0x000008, "Wrong alignment on PlayerControllerBattle_ClientSetBattleResultData");
static_assert(sizeof(PlayerControllerBattle_ClientSetBattleResultData) == 0x000028, "Wrong size on PlayerControllerBattle_ClientSetBattleResultData");
static_assert(offsetof(PlayerControllerBattle_ClientSetBattleResultData, Data) == 0x000000, "Member 'PlayerControllerBattle_ClientSetBattleResultData::Data' has a wrong offset!");
static_assert(offsetof(PlayerControllerBattle_ClientSetBattleResultData, DropItems) == 0x000010, "Member 'PlayerControllerBattle_ClientSetBattleResultData::DropItems' has a wrong offset!");
static_assert(offsetof(PlayerControllerBattle_ClientSetBattleResultData, bRetire) == 0x000020, "Member 'PlayerControllerBattle_ClientSetBattleResultData::bRetire' has a wrong offset!");

// Function InGameModule.PlayerControllerBattle.DEBUG_DoEnvVfxCommandRPC_OnServer
// 0x0001 (0x0001 - 0x0000)
struct PlayerControllerBattle_DEBUG_DoEnvVfxCommandRPC_OnServer final
{
public:
	EDamageAttribute                              Element;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerBattle_DEBUG_DoEnvVfxCommandRPC_OnServer) == 0x000001, "Wrong alignment on PlayerControllerBattle_DEBUG_DoEnvVfxCommandRPC_OnServer");
static_assert(sizeof(PlayerControllerBattle_DEBUG_DoEnvVfxCommandRPC_OnServer) == 0x000001, "Wrong size on PlayerControllerBattle_DEBUG_DoEnvVfxCommandRPC_OnServer");
static_assert(offsetof(PlayerControllerBattle_DEBUG_DoEnvVfxCommandRPC_OnServer, Element) == 0x000000, "Member 'PlayerControllerBattle_DEBUG_DoEnvVfxCommandRPC_OnServer::Element' has a wrong offset!");

// Function InGameModule.PlayerControllerBattle.DEBUG_DoEnvVfxDebugCommand
// 0x0001 (0x0001 - 0x0000)
struct PlayerControllerBattle_DEBUG_DoEnvVfxDebugCommand final
{
public:
	EDamageAttribute                              Element;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerBattle_DEBUG_DoEnvVfxDebugCommand) == 0x000001, "Wrong alignment on PlayerControllerBattle_DEBUG_DoEnvVfxDebugCommand");
static_assert(sizeof(PlayerControllerBattle_DEBUG_DoEnvVfxDebugCommand) == 0x000001, "Wrong size on PlayerControllerBattle_DEBUG_DoEnvVfxDebugCommand");
static_assert(offsetof(PlayerControllerBattle_DEBUG_DoEnvVfxDebugCommand, Element) == 0x000000, "Member 'PlayerControllerBattle_DEBUG_DoEnvVfxDebugCommand::Element' has a wrong offset!");

// Function InGameModule.PlayerControllerBattle.DropItem_OnServer
// 0x0004 (0x0004 - 0x0000)
struct PlayerControllerBattle_DropItem_OnServer final
{
public:
	int32                                         DipIndex;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerBattle_DropItem_OnServer) == 0x000004, "Wrong alignment on PlayerControllerBattle_DropItem_OnServer");
static_assert(sizeof(PlayerControllerBattle_DropItem_OnServer) == 0x000004, "Wrong size on PlayerControllerBattle_DropItem_OnServer");
static_assert(offsetof(PlayerControllerBattle_DropItem_OnServer, DipIndex) == 0x000000, "Member 'PlayerControllerBattle_DropItem_OnServer::DipIndex' has a wrong offset!");

// Function InGameModule.PlayerControllerBattle.OnRemovePlayerStateSpectating
// 0x0010 (0x0010 - 0x0000)
struct PlayerControllerBattle_OnRemovePlayerStateSpectating final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerControllerBattle_OnRemovePlayerStateSpectating) == 0x000008, "Wrong alignment on PlayerControllerBattle_OnRemovePlayerStateSpectating");
static_assert(sizeof(PlayerControllerBattle_OnRemovePlayerStateSpectating) == 0x000010, "Wrong size on PlayerControllerBattle_OnRemovePlayerStateSpectating");
static_assert(offsetof(PlayerControllerBattle_OnRemovePlayerStateSpectating, Actor) == 0x000000, "Member 'PlayerControllerBattle_OnRemovePlayerStateSpectating::Actor' has a wrong offset!");
static_assert(offsetof(PlayerControllerBattle_OnRemovePlayerStateSpectating, EndPlayReason) == 0x000008, "Member 'PlayerControllerBattle_OnRemovePlayerStateSpectating::EndPlayReason' has a wrong offset!");

// Function InGameModule.PlayerControllerBattle.RequestPlayerDataActivityStatus
// 0x0008 (0x0008 - 0x0000)
struct PlayerControllerBattle_RequestPlayerDataActivityStatus final
{
public:
	struct FUniqueNetIdKey                        UniqueId;                                          // 0x0000(0x0008)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerBattle_RequestPlayerDataActivityStatus) == 0x000004, "Wrong alignment on PlayerControllerBattle_RequestPlayerDataActivityStatus");
static_assert(sizeof(PlayerControllerBattle_RequestPlayerDataActivityStatus) == 0x000008, "Wrong size on PlayerControllerBattle_RequestPlayerDataActivityStatus");
static_assert(offsetof(PlayerControllerBattle_RequestPlayerDataActivityStatus, UniqueId) == 0x000000, "Member 'PlayerControllerBattle_RequestPlayerDataActivityStatus::UniqueId' has a wrong offset!");

// Function InGameModule.PlayerControllerBattle.SendCheer_OnServer
// 0x0018 (0x0018 - 0x0000)
struct PlayerControllerBattle_SendCheer_OnServer final
{
public:
	class APlayerStateBattle*                     SendCheerPlayerState;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerStateBattle*                     RecvCheerPlayerState;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddCheerCount;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerControllerBattle_SendCheer_OnServer) == 0x000008, "Wrong alignment on PlayerControllerBattle_SendCheer_OnServer");
static_assert(sizeof(PlayerControllerBattle_SendCheer_OnServer) == 0x000018, "Wrong size on PlayerControllerBattle_SendCheer_OnServer");
static_assert(offsetof(PlayerControllerBattle_SendCheer_OnServer, SendCheerPlayerState) == 0x000000, "Member 'PlayerControllerBattle_SendCheer_OnServer::SendCheerPlayerState' has a wrong offset!");
static_assert(offsetof(PlayerControllerBattle_SendCheer_OnServer, RecvCheerPlayerState) == 0x000008, "Member 'PlayerControllerBattle_SendCheer_OnServer::RecvCheerPlayerState' has a wrong offset!");
static_assert(offsetof(PlayerControllerBattle_SendCheer_OnServer, AddCheerCount) == 0x000010, "Member 'PlayerControllerBattle_SendCheer_OnServer::AddCheerCount' has a wrong offset!");

// Function InGameModule.PlayerControllerBattle.SendPlayerDataActivityStatus
// 0x0020 (0x0020 - 0x0000)
struct PlayerControllerBattle_SendPlayerDataActivityStatus final
{
public:
	struct FPlayerDataActivityStatus              ScoreData;                                         // 0x0000(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerBattle_SendPlayerDataActivityStatus) == 0x000004, "Wrong alignment on PlayerControllerBattle_SendPlayerDataActivityStatus");
static_assert(sizeof(PlayerControllerBattle_SendPlayerDataActivityStatus) == 0x000020, "Wrong size on PlayerControllerBattle_SendPlayerDataActivityStatus");
static_assert(offsetof(PlayerControllerBattle_SendPlayerDataActivityStatus, ScoreData) == 0x000000, "Member 'PlayerControllerBattle_SendPlayerDataActivityStatus::ScoreData' has a wrong offset!");

// Function InGameModule.PlayerControllerBattle.SendViolationReport_OnServer
// 0x0028 (0x0028 - 0x0000)
struct PlayerControllerBattle_SendViolationReport_OnServer final
{
public:
	class FString                                 SendSelectedPlayerId;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RecvSelectedPlayerId;                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdPenaltyType                                PenaltyReportType;                                 // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerControllerBattle_SendViolationReport_OnServer) == 0x000008, "Wrong alignment on PlayerControllerBattle_SendViolationReport_OnServer");
static_assert(sizeof(PlayerControllerBattle_SendViolationReport_OnServer) == 0x000028, "Wrong size on PlayerControllerBattle_SendViolationReport_OnServer");
static_assert(offsetof(PlayerControllerBattle_SendViolationReport_OnServer, SendSelectedPlayerId) == 0x000000, "Member 'PlayerControllerBattle_SendViolationReport_OnServer::SendSelectedPlayerId' has a wrong offset!");
static_assert(offsetof(PlayerControllerBattle_SendViolationReport_OnServer, RecvSelectedPlayerId) == 0x000010, "Member 'PlayerControllerBattle_SendViolationReport_OnServer::RecvSelectedPlayerId' has a wrong offset!");
static_assert(offsetof(PlayerControllerBattle_SendViolationReport_OnServer, PenaltyReportType) == 0x000020, "Member 'PlayerControllerBattle_SendViolationReport_OnServer::PenaltyReportType' has a wrong offset!");

// Function InGameModule.PlayerControllerBattle.SendViolationReport_OnServerDebug
// 0x0018 (0x0018 - 0x0000)
struct PlayerControllerBattle_SendViolationReport_OnServerDebug final
{
public:
	class FString                                 RecvSelectedPlayerId;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdPenaltyType                                PenaltyReportType;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerControllerBattle_SendViolationReport_OnServerDebug) == 0x000008, "Wrong alignment on PlayerControllerBattle_SendViolationReport_OnServerDebug");
static_assert(sizeof(PlayerControllerBattle_SendViolationReport_OnServerDebug) == 0x000018, "Wrong size on PlayerControllerBattle_SendViolationReport_OnServerDebug");
static_assert(offsetof(PlayerControllerBattle_SendViolationReport_OnServerDebug, RecvSelectedPlayerId) == 0x000000, "Member 'PlayerControllerBattle_SendViolationReport_OnServerDebug::RecvSelectedPlayerId' has a wrong offset!");
static_assert(offsetof(PlayerControllerBattle_SendViolationReport_OnServerDebug, PenaltyReportType) == 0x000010, "Member 'PlayerControllerBattle_SendViolationReport_OnServerDebug::PenaltyReportType' has a wrong offset!");

// Function InGameModule.PlayerControllerBattle.ServerSpectatingChangePlayerView
// 0x0001 (0x0001 - 0x0000)
struct PlayerControllerBattle_ServerSpectatingChangePlayerView final
{
public:
	bool                                          bNext;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerBattle_ServerSpectatingChangePlayerView) == 0x000001, "Wrong alignment on PlayerControllerBattle_ServerSpectatingChangePlayerView");
static_assert(sizeof(PlayerControllerBattle_ServerSpectatingChangePlayerView) == 0x000001, "Wrong size on PlayerControllerBattle_ServerSpectatingChangePlayerView");
static_assert(offsetof(PlayerControllerBattle_ServerSpectatingChangePlayerView, bNext) == 0x000000, "Member 'PlayerControllerBattle_ServerSpectatingChangePlayerView::bNext' has a wrong offset!");

// Function InGameModule.PlayerControllerBattle.ServerTravelBattle
// 0x0020 (0x0020 - 0x0000)
struct PlayerControllerBattle_ServerTravelBattle final
{
public:
	class FString                                 InGameMode;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InStage;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerBattle_ServerTravelBattle) == 0x000008, "Wrong alignment on PlayerControllerBattle_ServerTravelBattle");
static_assert(sizeof(PlayerControllerBattle_ServerTravelBattle) == 0x000020, "Wrong size on PlayerControllerBattle_ServerTravelBattle");
static_assert(offsetof(PlayerControllerBattle_ServerTravelBattle, InGameMode) == 0x000000, "Member 'PlayerControllerBattle_ServerTravelBattle::InGameMode' has a wrong offset!");
static_assert(offsetof(PlayerControllerBattle_ServerTravelBattle, InStage) == 0x000010, "Member 'PlayerControllerBattle_ServerTravelBattle::InStage' has a wrong offset!");

// Function InGameModule.PlayerControllerBattle.StartBattle
// 0x0020 (0x0020 - 0x0000)
struct PlayerControllerBattle_StartBattle final
{
public:
	class FString                                 InGameMode;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InStage;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerBattle_StartBattle) == 0x000008, "Wrong alignment on PlayerControllerBattle_StartBattle");
static_assert(sizeof(PlayerControllerBattle_StartBattle) == 0x000020, "Wrong size on PlayerControllerBattle_StartBattle");
static_assert(offsetof(PlayerControllerBattle_StartBattle, InGameMode) == 0x000000, "Member 'PlayerControllerBattle_StartBattle::InGameMode' has a wrong offset!");
static_assert(offsetof(PlayerControllerBattle_StartBattle, InStage) == 0x000010, "Member 'PlayerControllerBattle_StartBattle::InStage' has a wrong offset!");

// Function InGameModule.PlayerControllerBattle.SwitchAbilityInfoVisibility
// 0x0001 (0x0001 - 0x0000)
struct PlayerControllerBattle_SwitchAbilityInfoVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerBattle_SwitchAbilityInfoVisibility) == 0x000001, "Wrong alignment on PlayerControllerBattle_SwitchAbilityInfoVisibility");
static_assert(sizeof(PlayerControllerBattle_SwitchAbilityInfoVisibility) == 0x000001, "Wrong size on PlayerControllerBattle_SwitchAbilityInfoVisibility");
static_assert(offsetof(PlayerControllerBattle_SwitchAbilityInfoVisibility, bVisible) == 0x000000, "Member 'PlayerControllerBattle_SwitchAbilityInfoVisibility::bVisible' has a wrong offset!");

// Function InGameModule.PlayerControllerBattle.SwitchAllyPlayerStatusInfo
// 0x0001 (0x0001 - 0x0000)
struct PlayerControllerBattle_SwitchAllyPlayerStatusInfo final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerBattle_SwitchAllyPlayerStatusInfo) == 0x000001, "Wrong alignment on PlayerControllerBattle_SwitchAllyPlayerStatusInfo");
static_assert(sizeof(PlayerControllerBattle_SwitchAllyPlayerStatusInfo) == 0x000001, "Wrong size on PlayerControllerBattle_SwitchAllyPlayerStatusInfo");
static_assert(offsetof(PlayerControllerBattle_SwitchAllyPlayerStatusInfo, bVisible) == 0x000000, "Member 'PlayerControllerBattle_SwitchAllyPlayerStatusInfo::bVisible' has a wrong offset!");

// Function InGameModule.PlayerControllerBattle.SwitchBattleCounterVisibility
// 0x0001 (0x0001 - 0x0000)
struct PlayerControllerBattle_SwitchBattleCounterVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerBattle_SwitchBattleCounterVisibility) == 0x000001, "Wrong alignment on PlayerControllerBattle_SwitchBattleCounterVisibility");
static_assert(sizeof(PlayerControllerBattle_SwitchBattleCounterVisibility) == 0x000001, "Wrong size on PlayerControllerBattle_SwitchBattleCounterVisibility");
static_assert(offsetof(PlayerControllerBattle_SwitchBattleCounterVisibility, bVisible) == 0x000000, "Member 'PlayerControllerBattle_SwitchBattleCounterVisibility::bVisible' has a wrong offset!");

// Function InGameModule.PlayerControllerBattle.SwitchCrossHairsVisibility
// 0x0001 (0x0001 - 0x0000)
struct PlayerControllerBattle_SwitchCrossHairsVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerBattle_SwitchCrossHairsVisibility) == 0x000001, "Wrong alignment on PlayerControllerBattle_SwitchCrossHairsVisibility");
static_assert(sizeof(PlayerControllerBattle_SwitchCrossHairsVisibility) == 0x000001, "Wrong size on PlayerControllerBattle_SwitchCrossHairsVisibility");
static_assert(offsetof(PlayerControllerBattle_SwitchCrossHairsVisibility, bVisible) == 0x000000, "Member 'PlayerControllerBattle_SwitchCrossHairsVisibility::bVisible' has a wrong offset!");

// Function InGameModule.PlayerControllerBattle.SwitchInGameButtonGuideVisibility
// 0x0001 (0x0001 - 0x0000)
struct PlayerControllerBattle_SwitchInGameButtonGuideVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerBattle_SwitchInGameButtonGuideVisibility) == 0x000001, "Wrong alignment on PlayerControllerBattle_SwitchInGameButtonGuideVisibility");
static_assert(sizeof(PlayerControllerBattle_SwitchInGameButtonGuideVisibility) == 0x000001, "Wrong size on PlayerControllerBattle_SwitchInGameButtonGuideVisibility");
static_assert(offsetof(PlayerControllerBattle_SwitchInGameButtonGuideVisibility, bVisible) == 0x000000, "Member 'PlayerControllerBattle_SwitchInGameButtonGuideVisibility::bVisible' has a wrong offset!");

// Function InGameModule.PlayerControllerBattle.SwitchLocalPlayerStatusInfo
// 0x0001 (0x0001 - 0x0000)
struct PlayerControllerBattle_SwitchLocalPlayerStatusInfo final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerBattle_SwitchLocalPlayerStatusInfo) == 0x000001, "Wrong alignment on PlayerControllerBattle_SwitchLocalPlayerStatusInfo");
static_assert(sizeof(PlayerControllerBattle_SwitchLocalPlayerStatusInfo) == 0x000001, "Wrong size on PlayerControllerBattle_SwitchLocalPlayerStatusInfo");
static_assert(offsetof(PlayerControllerBattle_SwitchLocalPlayerStatusInfo, bVisible) == 0x000000, "Member 'PlayerControllerBattle_SwitchLocalPlayerStatusInfo::bVisible' has a wrong offset!");

// Function InGameModule.PlayerControllerBattle.SwitchLvUpShortCutVisibility
// 0x0001 (0x0001 - 0x0000)
struct PlayerControllerBattle_SwitchLvUpShortCutVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerBattle_SwitchLvUpShortCutVisibility) == 0x000001, "Wrong alignment on PlayerControllerBattle_SwitchLvUpShortCutVisibility");
static_assert(sizeof(PlayerControllerBattle_SwitchLvUpShortCutVisibility) == 0x000001, "Wrong size on PlayerControllerBattle_SwitchLvUpShortCutVisibility");
static_assert(offsetof(PlayerControllerBattle_SwitchLvUpShortCutVisibility, bVisible) == 0x000000, "Member 'PlayerControllerBattle_SwitchLvUpShortCutVisibility::bVisible' has a wrong offset!");

// Function InGameModule.PlayerControllerBattle.SwitchMiscInfoVisibility
// 0x0001 (0x0001 - 0x0000)
struct PlayerControllerBattle_SwitchMiscInfoVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerBattle_SwitchMiscInfoVisibility) == 0x000001, "Wrong alignment on PlayerControllerBattle_SwitchMiscInfoVisibility");
static_assert(sizeof(PlayerControllerBattle_SwitchMiscInfoVisibility) == 0x000001, "Wrong size on PlayerControllerBattle_SwitchMiscInfoVisibility");
static_assert(offsetof(PlayerControllerBattle_SwitchMiscInfoVisibility, bVisible) == 0x000000, "Member 'PlayerControllerBattle_SwitchMiscInfoVisibility::bVisible' has a wrong offset!");

// Function InGameModule.PlayerControllerBattle.SwitchPlusUltraVisibility
// 0x0001 (0x0001 - 0x0000)
struct PlayerControllerBattle_SwitchPlusUltraVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerBattle_SwitchPlusUltraVisibility) == 0x000001, "Wrong alignment on PlayerControllerBattle_SwitchPlusUltraVisibility");
static_assert(sizeof(PlayerControllerBattle_SwitchPlusUltraVisibility) == 0x000001, "Wrong size on PlayerControllerBattle_SwitchPlusUltraVisibility");
static_assert(offsetof(PlayerControllerBattle_SwitchPlusUltraVisibility, bVisible) == 0x000000, "Member 'PlayerControllerBattle_SwitchPlusUltraVisibility::bVisible' has a wrong offset!");

// Function InGameModule.PlayerControllerBattle.SwitchShortcutInfoVisibility
// 0x0001 (0x0001 - 0x0000)
struct PlayerControllerBattle_SwitchShortcutInfoVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerBattle_SwitchShortcutInfoVisibility) == 0x000001, "Wrong alignment on PlayerControllerBattle_SwitchShortcutInfoVisibility");
static_assert(sizeof(PlayerControllerBattle_SwitchShortcutInfoVisibility) == 0x000001, "Wrong size on PlayerControllerBattle_SwitchShortcutInfoVisibility");
static_assert(offsetof(PlayerControllerBattle_SwitchShortcutInfoVisibility, bVisible) == 0x000000, "Member 'PlayerControllerBattle_SwitchShortcutInfoVisibility::bVisible' has a wrong offset!");

// Function InGameModule.PlayerControllerBattle.BP_GetCommandHUDControlComponent
// 0x0008 (0x0008 - 0x0000)
struct PlayerControllerBattle_BP_GetCommandHUDControlComponent final
{
public:
	class UHudCommandControlComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerBattle_BP_GetCommandHUDControlComponent) == 0x000008, "Wrong alignment on PlayerControllerBattle_BP_GetCommandHUDControlComponent");
static_assert(sizeof(PlayerControllerBattle_BP_GetCommandHUDControlComponent) == 0x000008, "Wrong size on PlayerControllerBattle_BP_GetCommandHUDControlComponent");
static_assert(offsetof(PlayerControllerBattle_BP_GetCommandHUDControlComponent, ReturnValue) == 0x000000, "Member 'PlayerControllerBattle_BP_GetCommandHUDControlComponent::ReturnValue' has a wrong offset!");

// Function InGameModule.PlayerControllerBattle.BP_GetControlledCharacter
// 0x0008 (0x0008 - 0x0000)
struct PlayerControllerBattle_BP_GetControlledCharacter final
{
public:
	class ACharacterBattle*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerBattle_BP_GetControlledCharacter) == 0x000008, "Wrong alignment on PlayerControllerBattle_BP_GetControlledCharacter");
static_assert(sizeof(PlayerControllerBattle_BP_GetControlledCharacter) == 0x000008, "Wrong size on PlayerControllerBattle_BP_GetControlledCharacter");
static_assert(offsetof(PlayerControllerBattle_BP_GetControlledCharacter, ReturnValue) == 0x000000, "Member 'PlayerControllerBattle_BP_GetControlledCharacter::ReturnValue' has a wrong offset!");

// Function InGameModule.PlayerControllerBattle.GetCommentaryVoiceComponent
// 0x0008 (0x0008 - 0x0000)
struct PlayerControllerBattle_GetCommentaryVoiceComponent final
{
public:
	class UCommentaryVoiceComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerBattle_GetCommentaryVoiceComponent) == 0x000008, "Wrong alignment on PlayerControllerBattle_GetCommentaryVoiceComponent");
static_assert(sizeof(PlayerControllerBattle_GetCommentaryVoiceComponent) == 0x000008, "Wrong size on PlayerControllerBattle_GetCommentaryVoiceComponent");
static_assert(offsetof(PlayerControllerBattle_GetCommentaryVoiceComponent, ReturnValue) == 0x000000, "Member 'PlayerControllerBattle_GetCommentaryVoiceComponent::ReturnValue' has a wrong offset!");

// Function InGameModule.PlayerControllerBattle.ServerTravel
// 0x0010 (0x0010 - 0x0000)
struct PlayerControllerBattle_ServerTravel final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerBattle_ServerTravel) == 0x000008, "Wrong alignment on PlayerControllerBattle_ServerTravel");
static_assert(sizeof(PlayerControllerBattle_ServerTravel) == 0x000010, "Wrong size on PlayerControllerBattle_ServerTravel");
static_assert(offsetof(PlayerControllerBattle_ServerTravel, URL) == 0x000000, "Member 'PlayerControllerBattle_ServerTravel::URL' has a wrong offset!");

// Function InGameModule.SupplyActorBase.OnCollapseInAirEvent
// 0x0008 (0x0008 - 0x0000)
struct SupplyActorBase_OnCollapseInAirEvent final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SupplyActorBase_OnCollapseInAirEvent) == 0x000008, "Wrong alignment on SupplyActorBase_OnCollapseInAirEvent");
static_assert(sizeof(SupplyActorBase_OnCollapseInAirEvent) == 0x000008, "Wrong size on SupplyActorBase_OnCollapseInAirEvent");
static_assert(offsetof(SupplyActorBase_OnCollapseInAirEvent, Actor) == 0x000000, "Member 'SupplyActorBase_OnCollapseInAirEvent::Actor' has a wrong offset!");

// Function InGameModule.ItemBase.OnInteractToClient_RPC
// 0x0008 (0x0008 - 0x0000)
struct ItemBase_OnInteractToClient_RPC final
{
public:
	class APlayerState*                           PalyerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemBase_OnInteractToClient_RPC) == 0x000008, "Wrong alignment on ItemBase_OnInteractToClient_RPC");
static_assert(sizeof(ItemBase_OnInteractToClient_RPC) == 0x000008, "Wrong size on ItemBase_OnInteractToClient_RPC");
static_assert(offsetof(ItemBase_OnInteractToClient_RPC, PalyerState) == 0x000000, "Member 'ItemBase_OnInteractToClient_RPC::PalyerState' has a wrong offset!");

// Function InGameModule.BattleBriefingSignalPinWidget.CommitPin
// 0x000C (0x000C - 0x0000)
struct BattleBriefingSignalPinWidget_CommitPin final
{
public:
	struct FVector2D                              PinUpPosition;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlert;                                            // 0x0008(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleBriefingSignalPinWidget_CommitPin) == 0x000004, "Wrong alignment on BattleBriefingSignalPinWidget_CommitPin");
static_assert(sizeof(BattleBriefingSignalPinWidget_CommitPin) == 0x00000C, "Wrong size on BattleBriefingSignalPinWidget_CommitPin");
static_assert(offsetof(BattleBriefingSignalPinWidget_CommitPin, PinUpPosition) == 0x000000, "Member 'BattleBriefingSignalPinWidget_CommitPin::PinUpPosition' has a wrong offset!");
static_assert(offsetof(BattleBriefingSignalPinWidget_CommitPin, bAlert) == 0x000008, "Member 'BattleBriefingSignalPinWidget_CommitPin::bAlert' has a wrong offset!");

// DelegateFunction InGameModule.BattleBriefingSignalPinWidget.CommitPinDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BattleBriefingSignalPinWidget_CommitPinDelegate__DelegateSignature final
{
public:
	bool                                          bAlert;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleBriefingSignalPinWidget_CommitPinDelegate__DelegateSignature) == 0x000001, "Wrong alignment on BattleBriefingSignalPinWidget_CommitPinDelegate__DelegateSignature");
static_assert(sizeof(BattleBriefingSignalPinWidget_CommitPinDelegate__DelegateSignature) == 0x000001, "Wrong size on BattleBriefingSignalPinWidget_CommitPinDelegate__DelegateSignature");
static_assert(offsetof(BattleBriefingSignalPinWidget_CommitPinDelegate__DelegateSignature, bAlert) == 0x000000, "Member 'BattleBriefingSignalPinWidget_CommitPinDelegate__DelegateSignature::bAlert' has a wrong offset!");

// Function InGameModule.AbilityIconWidget.BP_SetAvility
// 0x0008 (0x0008 - 0x0000)
struct AbilityIconWidget_BP_SetAvility final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackId                                     AttackId;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VariationNo;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityIconWidget_BP_SetAvility) == 0x000004, "Wrong alignment on AbilityIconWidget_BP_SetAvility");
static_assert(sizeof(AbilityIconWidget_BP_SetAvility) == 0x000008, "Wrong size on AbilityIconWidget_BP_SetAvility");
static_assert(offsetof(AbilityIconWidget_BP_SetAvility, CharacterId) == 0x000000, "Member 'AbilityIconWidget_BP_SetAvility::CharacterId' has a wrong offset!");
static_assert(offsetof(AbilityIconWidget_BP_SetAvility, AttackId) == 0x000001, "Member 'AbilityIconWidget_BP_SetAvility::AttackId' has a wrong offset!");
static_assert(offsetof(AbilityIconWidget_BP_SetAvility, VariationNo) == 0x000004, "Member 'AbilityIconWidget_BP_SetAvility::VariationNo' has a wrong offset!");

// Function InGameModule.AbilityIconWidget.BP_SetLevel
// 0x0004 (0x0004 - 0x0000)
struct AbilityIconWidget_BP_SetLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityIconWidget_BP_SetLevel) == 0x000004, "Wrong alignment on AbilityIconWidget_BP_SetLevel");
static_assert(sizeof(AbilityIconWidget_BP_SetLevel) == 0x000004, "Wrong size on AbilityIconWidget_BP_SetLevel");
static_assert(offsetof(AbilityIconWidget_BP_SetLevel, Level) == 0x000000, "Member 'AbilityIconWidget_BP_SetLevel::Level' has a wrong offset!");

// Function InGameModule.AbilityInfoWidget.FinishedAbilityTime
// 0x0008 (0x0008 - 0x0000)
struct AbilityInfoWidget_FinishedAbilityTime final
{
public:
	class UAbilityHolder*                         FinishedAbilityHolder;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityInfoWidget_FinishedAbilityTime) == 0x000008, "Wrong alignment on AbilityInfoWidget_FinishedAbilityTime");
static_assert(sizeof(AbilityInfoWidget_FinishedAbilityTime) == 0x000008, "Wrong size on AbilityInfoWidget_FinishedAbilityTime");
static_assert(offsetof(AbilityInfoWidget_FinishedAbilityTime, FinishedAbilityHolder) == 0x000000, "Member 'AbilityInfoWidget_FinishedAbilityTime::FinishedAbilityHolder' has a wrong offset!");

// Function InGameModule.AbilityInfoWidget.PlayAbilitySetAnimation
// 0x0008 (0x0008 - 0x0000)
struct AbilityInfoWidget_PlayAbilitySetAnimation final
{
public:
	class USupply*                                NewSupply;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityInfoWidget_PlayAbilitySetAnimation) == 0x000008, "Wrong alignment on AbilityInfoWidget_PlayAbilitySetAnimation");
static_assert(sizeof(AbilityInfoWidget_PlayAbilitySetAnimation) == 0x000008, "Wrong size on AbilityInfoWidget_PlayAbilitySetAnimation");
static_assert(offsetof(AbilityInfoWidget_PlayAbilitySetAnimation, NewSupply) == 0x000000, "Member 'AbilityInfoWidget_PlayAbilitySetAnimation::NewSupply' has a wrong offset!");

// Function InGameModule.AbilityInfoWidget.StartAbilityTimer
// 0x0008 (0x0008 - 0x0000)
struct AbilityInfoWidget_StartAbilityTimer final
{
public:
	class UAbilityHolder*                         beganAbilityHolder;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityInfoWidget_StartAbilityTimer) == 0x000008, "Wrong alignment on AbilityInfoWidget_StartAbilityTimer");
static_assert(sizeof(AbilityInfoWidget_StartAbilityTimer) == 0x000008, "Wrong size on AbilityInfoWidget_StartAbilityTimer");
static_assert(offsetof(AbilityInfoWidget_StartAbilityTimer, beganAbilityHolder) == 0x000000, "Member 'AbilityInfoWidget_StartAbilityTimer::beganAbilityHolder' has a wrong offset!");

// Function InGameModule.AbilityInfoWidget.UpdateEventAbility
// 0x0008 (0x0008 - 0x0000)
struct AbilityInfoWidget_UpdateEventAbility final
{
public:
	class USupply*                                NewSupply;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityInfoWidget_UpdateEventAbility) == 0x000008, "Wrong alignment on AbilityInfoWidget_UpdateEventAbility");
static_assert(sizeof(AbilityInfoWidget_UpdateEventAbility) == 0x000008, "Wrong size on AbilityInfoWidget_UpdateEventAbility");
static_assert(offsetof(AbilityInfoWidget_UpdateEventAbility, NewSupply) == 0x000000, "Member 'AbilityInfoWidget_UpdateEventAbility::NewSupply' has a wrong offset!");

// Function InGameModule.AbilityLevelCounter.SetLevel
// 0x0004 (0x0004 - 0x0000)
struct AbilityLevelCounter_SetLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityLevelCounter_SetLevel) == 0x000004, "Wrong alignment on AbilityLevelCounter_SetLevel");
static_assert(sizeof(AbilityLevelCounter_SetLevel) == 0x000004, "Wrong size on AbilityLevelCounter_SetLevel");
static_assert(offsetof(AbilityLevelCounter_SetLevel, Level) == 0x000000, "Member 'AbilityLevelCounter_SetLevel::Level' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_ActionPingDelay
// 0x0020 (0x0020 - 0x0000)
struct ActionBattleBase_BP_ActionPingDelay final
{
public:
	bool                                          bWaitForSpecificPing;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TargetPing;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_ActionPingDelay) == 0x000008, "Wrong alignment on ActionBattleBase_BP_ActionPingDelay");
static_assert(sizeof(ActionBattleBase_BP_ActionPingDelay) == 0x000020, "Wrong size on ActionBattleBase_BP_ActionPingDelay");
static_assert(offsetof(ActionBattleBase_BP_ActionPingDelay, bWaitForSpecificPing) == 0x000000, "Member 'ActionBattleBase_BP_ActionPingDelay::bWaitForSpecificPing' has a wrong offset!");
static_assert(offsetof(ActionBattleBase_BP_ActionPingDelay, TargetPing) == 0x000004, "Member 'ActionBattleBase_BP_ActionPingDelay::TargetPing' has a wrong offset!");
static_assert(offsetof(ActionBattleBase_BP_ActionPingDelay, LatentInfo) == 0x000008, "Member 'ActionBattleBase_BP_ActionPingDelay::LatentInfo' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_AddUniqueUseCount
// 0x0004 (0x0004 - 0x0000)
struct ActionBattleBase_BP_AddUniqueUseCount final
{
public:
	int32                                         UniqueNum;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_AddUniqueUseCount) == 0x000004, "Wrong alignment on ActionBattleBase_BP_AddUniqueUseCount");
static_assert(sizeof(ActionBattleBase_BP_AddUniqueUseCount) == 0x000004, "Wrong size on ActionBattleBase_BP_AddUniqueUseCount");
static_assert(offsetof(ActionBattleBase_BP_AddUniqueUseCount, UniqueNum) == 0x000000, "Member 'ActionBattleBase_BP_AddUniqueUseCount::UniqueNum' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_AnimEndDelay
// 0x0020 (0x0020 - 0x0000)
struct ActionBattleBase_BP_AnimEndDelay final
{
public:
	EAnimationSlot                                Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnBlendOut;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_AnimEndDelay) == 0x000008, "Wrong alignment on ActionBattleBase_BP_AnimEndDelay");
static_assert(sizeof(ActionBattleBase_BP_AnimEndDelay) == 0x000020, "Wrong size on ActionBattleBase_BP_AnimEndDelay");
static_assert(offsetof(ActionBattleBase_BP_AnimEndDelay, Slot) == 0x000000, "Member 'ActionBattleBase_BP_AnimEndDelay::Slot' has a wrong offset!");
static_assert(offsetof(ActionBattleBase_BP_AnimEndDelay, OnBlendOut) == 0x000001, "Member 'ActionBattleBase_BP_AnimEndDelay::OnBlendOut' has a wrong offset!");
static_assert(offsetof(ActionBattleBase_BP_AnimEndDelay, LatentInfo) == 0x000008, "Member 'ActionBattleBase_BP_AnimEndDelay::LatentInfo' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_ClearCenterRotation
// 0x0004 (0x0004 - 0x0000)
struct ActionBattleBase_BP_ClearCenterRotation final
{
public:
	float                                         ReverseRate;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_ClearCenterRotation) == 0x000004, "Wrong alignment on ActionBattleBase_BP_ClearCenterRotation");
static_assert(sizeof(ActionBattleBase_BP_ClearCenterRotation) == 0x000004, "Wrong size on ActionBattleBase_BP_ClearCenterRotation");
static_assert(offsetof(ActionBattleBase_BP_ClearCenterRotation, ReverseRate) == 0x000000, "Member 'ActionBattleBase_BP_ClearCenterRotation::ReverseRate' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_CommandDelay
// 0x0020 (0x0020 - 0x0000)
struct ActionBattleBase_BP_CommandDelay final
{
public:
	ECommandId                                    CommandID;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_CommandDelay) == 0x000008, "Wrong alignment on ActionBattleBase_BP_CommandDelay");
static_assert(sizeof(ActionBattleBase_BP_CommandDelay) == 0x000020, "Wrong size on ActionBattleBase_BP_CommandDelay");
static_assert(offsetof(ActionBattleBase_BP_CommandDelay, CommandID) == 0x000000, "Member 'ActionBattleBase_BP_CommandDelay::CommandID' has a wrong offset!");
static_assert(offsetof(ActionBattleBase_BP_CommandDelay, LatentInfo) == 0x000008, "Member 'ActionBattleBase_BP_CommandDelay::LatentInfo' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_NegotiationDelay
// 0x0020 (0x0020 - 0x0000)
struct ActionBattleBase_BP_NegotiationDelay final
{
public:
	float                                         MaxDuration;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_NegotiationDelay) == 0x000008, "Wrong alignment on ActionBattleBase_BP_NegotiationDelay");
static_assert(sizeof(ActionBattleBase_BP_NegotiationDelay) == 0x000020, "Wrong size on ActionBattleBase_BP_NegotiationDelay");
static_assert(offsetof(ActionBattleBase_BP_NegotiationDelay, MaxDuration) == 0x000000, "Member 'ActionBattleBase_BP_NegotiationDelay::MaxDuration' has a wrong offset!");
static_assert(offsetof(ActionBattleBase_BP_NegotiationDelay, LatentInfo) == 0x000008, "Member 'ActionBattleBase_BP_NegotiationDelay::LatentInfo' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_ProgressDelay
// 0x0020 (0x0020 - 0x0000)
struct ActionBattleBase_BP_ProgressDelay final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_ProgressDelay) == 0x000008, "Wrong alignment on ActionBattleBase_BP_ProgressDelay");
static_assert(sizeof(ActionBattleBase_BP_ProgressDelay) == 0x000020, "Wrong size on ActionBattleBase_BP_ProgressDelay");
static_assert(offsetof(ActionBattleBase_BP_ProgressDelay, Duration) == 0x000000, "Member 'ActionBattleBase_BP_ProgressDelay::Duration' has a wrong offset!");
static_assert(offsetof(ActionBattleBase_BP_ProgressDelay, LatentInfo) == 0x000008, "Member 'ActionBattleBase_BP_ProgressDelay::LatentInfo' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_RequestNegotiateAndWaitActionTarget
// 0x0008 (0x0008 - 0x0000)
struct ActionBattleBase_BP_RequestNegotiateAndWaitActionTarget final
{
public:
	class ACharacterBattle*                       NegotiationTargetCharacter;                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_RequestNegotiateAndWaitActionTarget) == 0x000008, "Wrong alignment on ActionBattleBase_BP_RequestNegotiateAndWaitActionTarget");
static_assert(sizeof(ActionBattleBase_BP_RequestNegotiateAndWaitActionTarget) == 0x000008, "Wrong size on ActionBattleBase_BP_RequestNegotiateAndWaitActionTarget");
static_assert(offsetof(ActionBattleBase_BP_RequestNegotiateAndWaitActionTarget, NegotiationTargetCharacter) == 0x000000, "Member 'ActionBattleBase_BP_RequestNegotiateAndWaitActionTarget::NegotiationTargetCharacter' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_RequestNegotiateTarget
// 0x0008 (0x0008 - 0x0000)
struct ActionBattleBase_BP_RequestNegotiateTarget final
{
public:
	class AActor*                                 NegotiationTarget;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_RequestNegotiateTarget) == 0x000008, "Wrong alignment on ActionBattleBase_BP_RequestNegotiateTarget");
static_assert(sizeof(ActionBattleBase_BP_RequestNegotiateTarget) == 0x000008, "Wrong size on ActionBattleBase_BP_RequestNegotiateTarget");
static_assert(offsetof(ActionBattleBase_BP_RequestNegotiateTarget, NegotiationTarget) == 0x000000, "Member 'ActionBattleBase_BP_RequestNegotiateTarget::NegotiationTarget' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_RequestShiftAction
// 0x0008 (0x0008 - 0x0000)
struct ActionBattleBase_BP_RequestShiftAction final
{
public:
	class FName                                   ShiftActionName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_RequestShiftAction) == 0x000004, "Wrong alignment on ActionBattleBase_BP_RequestShiftAction");
static_assert(sizeof(ActionBattleBase_BP_RequestShiftAction) == 0x000008, "Wrong size on ActionBattleBase_BP_RequestShiftAction");
static_assert(offsetof(ActionBattleBase_BP_RequestShiftAction, ShiftActionName) == 0x000000, "Member 'ActionBattleBase_BP_RequestShiftAction::ShiftActionName' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_SendActionPing
// 0x0004 (0x0004 - 0x0000)
struct ActionBattleBase_BP_SendActionPing final
{
public:
	int32                                         Ping;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_SendActionPing) == 0x000004, "Wrong alignment on ActionBattleBase_BP_SendActionPing");
static_assert(sizeof(ActionBattleBase_BP_SendActionPing) == 0x000004, "Wrong size on ActionBattleBase_BP_SendActionPing");
static_assert(offsetof(ActionBattleBase_BP_SendActionPing, Ping) == 0x000000, "Member 'ActionBattleBase_BP_SendActionPing::Ping' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_SetAnimationAdditionalTime
// 0x0004 (0x0004 - 0x0000)
struct ActionBattleBase_BP_SetAnimationAdditionalTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_SetAnimationAdditionalTime) == 0x000004, "Wrong alignment on ActionBattleBase_BP_SetAnimationAdditionalTime");
static_assert(sizeof(ActionBattleBase_BP_SetAnimationAdditionalTime) == 0x000004, "Wrong size on ActionBattleBase_BP_SetAnimationAdditionalTime");
static_assert(offsetof(ActionBattleBase_BP_SetAnimationAdditionalTime, Time) == 0x000000, "Member 'ActionBattleBase_BP_SetAnimationAdditionalTime::Time' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_SetDamageActionToGrabbedCharacter
// 0x0008 (0x0008 - 0x0000)
struct ActionBattleBase_BP_SetDamageActionToGrabbedCharacter final
{
public:
	class FName                                   DamageName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_SetDamageActionToGrabbedCharacter) == 0x000004, "Wrong alignment on ActionBattleBase_BP_SetDamageActionToGrabbedCharacter");
static_assert(sizeof(ActionBattleBase_BP_SetDamageActionToGrabbedCharacter) == 0x000008, "Wrong size on ActionBattleBase_BP_SetDamageActionToGrabbedCharacter");
static_assert(offsetof(ActionBattleBase_BP_SetDamageActionToGrabbedCharacter, DamageName) == 0x000000, "Member 'ActionBattleBase_BP_SetDamageActionToGrabbedCharacter::DamageName' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_SetEnableAiming
// 0x0001 (0x0001 - 0x0000)
struct ActionBattleBase_BP_SetEnableAiming final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_SetEnableAiming) == 0x000001, "Wrong alignment on ActionBattleBase_BP_SetEnableAiming");
static_assert(sizeof(ActionBattleBase_BP_SetEnableAiming) == 0x000001, "Wrong size on ActionBattleBase_BP_SetEnableAiming");
static_assert(offsetof(ActionBattleBase_BP_SetEnableAiming, Enable) == 0x000000, "Member 'ActionBattleBase_BP_SetEnableAiming::Enable' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_SetEnableUseSupply
// 0x0001 (0x0001 - 0x0000)
struct ActionBattleBase_BP_SetEnableUseSupply final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_SetEnableUseSupply) == 0x000001, "Wrong alignment on ActionBattleBase_BP_SetEnableUseSupply");
static_assert(sizeof(ActionBattleBase_BP_SetEnableUseSupply) == 0x000001, "Wrong size on ActionBattleBase_BP_SetEnableUseSupply");
static_assert(offsetof(ActionBattleBase_BP_SetEnableUseSupply, Flag) == 0x000000, "Member 'ActionBattleBase_BP_SetEnableUseSupply::Flag' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_SetForceGrabCharacter
// 0x0028 (0x0028 - 0x0000)
struct ActionBattleBase_BP_SetForceGrabCharacter final
{
public:
	class ACharacterBattle*                       GrabbedCharacter;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GrabJointName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GrabbedJointName;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationId                                  GrabbedAnimationId;                                // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   GrabbedActionName;                                 // 0x001C(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableGrabbedCamera;                              // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActionBattleBase_BP_SetForceGrabCharacter) == 0x000008, "Wrong alignment on ActionBattleBase_BP_SetForceGrabCharacter");
static_assert(sizeof(ActionBattleBase_BP_SetForceGrabCharacter) == 0x000028, "Wrong size on ActionBattleBase_BP_SetForceGrabCharacter");
static_assert(offsetof(ActionBattleBase_BP_SetForceGrabCharacter, GrabbedCharacter) == 0x000000, "Member 'ActionBattleBase_BP_SetForceGrabCharacter::GrabbedCharacter' has a wrong offset!");
static_assert(offsetof(ActionBattleBase_BP_SetForceGrabCharacter, GrabJointName) == 0x000008, "Member 'ActionBattleBase_BP_SetForceGrabCharacter::GrabJointName' has a wrong offset!");
static_assert(offsetof(ActionBattleBase_BP_SetForceGrabCharacter, GrabbedJointName) == 0x000010, "Member 'ActionBattleBase_BP_SetForceGrabCharacter::GrabbedJointName' has a wrong offset!");
static_assert(offsetof(ActionBattleBase_BP_SetForceGrabCharacter, GrabbedAnimationId) == 0x000018, "Member 'ActionBattleBase_BP_SetForceGrabCharacter::GrabbedAnimationId' has a wrong offset!");
static_assert(offsetof(ActionBattleBase_BP_SetForceGrabCharacter, GrabbedActionName) == 0x00001C, "Member 'ActionBattleBase_BP_SetForceGrabCharacter::GrabbedActionName' has a wrong offset!");
static_assert(offsetof(ActionBattleBase_BP_SetForceGrabCharacter, bEnableGrabbedCamera) == 0x000024, "Member 'ActionBattleBase_BP_SetForceGrabCharacter::bEnableGrabbedCamera' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_SetGrabbedCharacterAnimation
// 0x000C (0x000C - 0x0000)
struct ActionBattleBase_BP_SetGrabbedCharacterAnimation final
{
public:
	EAnimationId                                  AnimId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartPosition;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_SetGrabbedCharacterAnimation) == 0x000004, "Wrong alignment on ActionBattleBase_BP_SetGrabbedCharacterAnimation");
static_assert(sizeof(ActionBattleBase_BP_SetGrabbedCharacterAnimation) == 0x00000C, "Wrong size on ActionBattleBase_BP_SetGrabbedCharacterAnimation");
static_assert(offsetof(ActionBattleBase_BP_SetGrabbedCharacterAnimation, AnimId) == 0x000000, "Member 'ActionBattleBase_BP_SetGrabbedCharacterAnimation::AnimId' has a wrong offset!");
static_assert(offsetof(ActionBattleBase_BP_SetGrabbedCharacterAnimation, BlendTime) == 0x000004, "Member 'ActionBattleBase_BP_SetGrabbedCharacterAnimation::BlendTime' has a wrong offset!");
static_assert(offsetof(ActionBattleBase_BP_SetGrabbedCharacterAnimation, StartPosition) == 0x000008, "Member 'ActionBattleBase_BP_SetGrabbedCharacterAnimation::StartPosition' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_SetMoveDirection
// 0x000C (0x000C - 0x0000)
struct ActionBattleBase_BP_SetMoveDirection final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_SetMoveDirection) == 0x000004, "Wrong alignment on ActionBattleBase_BP_SetMoveDirection");
static_assert(sizeof(ActionBattleBase_BP_SetMoveDirection) == 0x00000C, "Wrong size on ActionBattleBase_BP_SetMoveDirection");
static_assert(offsetof(ActionBattleBase_BP_SetMoveDirection, Direction) == 0x000000, "Member 'ActionBattleBase_BP_SetMoveDirection::Direction' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_SetNormalActionToGrabbedCharacter
// 0x0008 (0x0008 - 0x0000)
struct ActionBattleBase_BP_SetNormalActionToGrabbedCharacter final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_SetNormalActionToGrabbedCharacter) == 0x000004, "Wrong alignment on ActionBattleBase_BP_SetNormalActionToGrabbedCharacter");
static_assert(sizeof(ActionBattleBase_BP_SetNormalActionToGrabbedCharacter) == 0x000008, "Wrong size on ActionBattleBase_BP_SetNormalActionToGrabbedCharacter");
static_assert(offsetof(ActionBattleBase_BP_SetNormalActionToGrabbedCharacter, ActionName) == 0x000000, "Member 'ActionBattleBase_BP_SetNormalActionToGrabbedCharacter::ActionName' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_SSetCameraType
// 0x0001 (0x0001 - 0x0000)
struct ActionBattleBase_BP_SSetCameraType final
{
public:
	EBattleCameraType                             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_SSetCameraType) == 0x000001, "Wrong alignment on ActionBattleBase_BP_SSetCameraType");
static_assert(sizeof(ActionBattleBase_BP_SSetCameraType) == 0x000001, "Wrong size on ActionBattleBase_BP_SSetCameraType");
static_assert(offsetof(ActionBattleBase_BP_SSetCameraType, Type) == 0x000000, "Member 'ActionBattleBase_BP_SSetCameraType::Type' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_StartRotationPitchToDirection
// 0x0008 (0x0008 - 0x0000)
struct ActionBattleBase_BP_StartRotationPitchToDirection final
{
public:
	float                                         Span;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActionAxis                                   TargetAxis;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActionBattleBase_BP_StartRotationPitchToDirection) == 0x000004, "Wrong alignment on ActionBattleBase_BP_StartRotationPitchToDirection");
static_assert(sizeof(ActionBattleBase_BP_StartRotationPitchToDirection) == 0x000008, "Wrong size on ActionBattleBase_BP_StartRotationPitchToDirection");
static_assert(offsetof(ActionBattleBase_BP_StartRotationPitchToDirection, Span) == 0x000000, "Member 'ActionBattleBase_BP_StartRotationPitchToDirection::Span' has a wrong offset!");
static_assert(offsetof(ActionBattleBase_BP_StartRotationPitchToDirection, TargetAxis) == 0x000004, "Member 'ActionBattleBase_BP_StartRotationPitchToDirection::TargetAxis' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_UpdateMoveDirection
// 0x0014 (0x0014 - 0x0000)
struct ActionBattleBase_BP_UpdateMoveDirection final
{
public:
	struct FVector                                DestDirection;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaSeconds;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_UpdateMoveDirection) == 0x000004, "Wrong alignment on ActionBattleBase_BP_UpdateMoveDirection");
static_assert(sizeof(ActionBattleBase_BP_UpdateMoveDirection) == 0x000014, "Wrong size on ActionBattleBase_BP_UpdateMoveDirection");
static_assert(offsetof(ActionBattleBase_BP_UpdateMoveDirection, DestDirection) == 0x000000, "Member 'ActionBattleBase_BP_UpdateMoveDirection::DestDirection' has a wrong offset!");
static_assert(offsetof(ActionBattleBase_BP_UpdateMoveDirection, Rate) == 0x00000C, "Member 'ActionBattleBase_BP_UpdateMoveDirection::Rate' has a wrong offset!");
static_assert(offsetof(ActionBattleBase_BP_UpdateMoveDirection, DeltaSeconds) == 0x000010, "Member 'ActionBattleBase_BP_UpdateMoveDirection::DeltaSeconds' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_UpdateRotationPitchToDirection
// 0x001C (0x001C - 0x0000)
struct ActionBattleBase_BP_UpdateRotationPitchToDirection final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0004(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDegrees;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActionBattleBase_BP_UpdateRotationPitchToDirection) == 0x000004, "Wrong alignment on ActionBattleBase_BP_UpdateRotationPitchToDirection");
static_assert(sizeof(ActionBattleBase_BP_UpdateRotationPitchToDirection) == 0x00001C, "Wrong size on ActionBattleBase_BP_UpdateRotationPitchToDirection");
static_assert(offsetof(ActionBattleBase_BP_UpdateRotationPitchToDirection, DeltaSeconds) == 0x000000, "Member 'ActionBattleBase_BP_UpdateRotationPitchToDirection::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(ActionBattleBase_BP_UpdateRotationPitchToDirection, Direction) == 0x000004, "Member 'ActionBattleBase_BP_UpdateRotationPitchToDirection::Direction' has a wrong offset!");
static_assert(offsetof(ActionBattleBase_BP_UpdateRotationPitchToDirection, Rate) == 0x000010, "Member 'ActionBattleBase_BP_UpdateRotationPitchToDirection::Rate' has a wrong offset!");
static_assert(offsetof(ActionBattleBase_BP_UpdateRotationPitchToDirection, MaxDegrees) == 0x000014, "Member 'ActionBattleBase_BP_UpdateRotationPitchToDirection::MaxDegrees' has a wrong offset!");
static_assert(offsetof(ActionBattleBase_BP_UpdateRotationPitchToDirection, ReturnValue) == 0x000018, "Member 'ActionBattleBase_BP_UpdateRotationPitchToDirection::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_GetActionArgment
// 0x0004 (0x0004 - 0x0000)
struct ActionBattleBase_BP_GetActionArgment final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_GetActionArgment) == 0x000004, "Wrong alignment on ActionBattleBase_BP_GetActionArgment");
static_assert(sizeof(ActionBattleBase_BP_GetActionArgment) == 0x000004, "Wrong size on ActionBattleBase_BP_GetActionArgment");
static_assert(offsetof(ActionBattleBase_BP_GetActionArgment, ReturnValue) == 0x000000, "Member 'ActionBattleBase_BP_GetActionArgment::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_GetActionPing
// 0x0004 (0x0004 - 0x0000)
struct ActionBattleBase_BP_GetActionPing final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_GetActionPing) == 0x000004, "Wrong alignment on ActionBattleBase_BP_GetActionPing");
static_assert(sizeof(ActionBattleBase_BP_GetActionPing) == 0x000004, "Wrong size on ActionBattleBase_BP_GetActionPing");
static_assert(offsetof(ActionBattleBase_BP_GetActionPing, ReturnValue) == 0x000000, "Member 'ActionBattleBase_BP_GetActionPing::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_GetActionTargetActor
// 0x0008 (0x0008 - 0x0000)
struct ActionBattleBase_BP_GetActionTargetActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_GetActionTargetActor) == 0x000008, "Wrong alignment on ActionBattleBase_BP_GetActionTargetActor");
static_assert(sizeof(ActionBattleBase_BP_GetActionTargetActor) == 0x000008, "Wrong size on ActionBattleBase_BP_GetActionTargetActor");
static_assert(offsetof(ActionBattleBase_BP_GetActionTargetActor, ReturnValue) == 0x000000, "Member 'ActionBattleBase_BP_GetActionTargetActor::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_GetActionTargetAsCharacterBattle
// 0x0008 (0x0008 - 0x0000)
struct ActionBattleBase_BP_GetActionTargetAsCharacterBattle final
{
public:
	class ACharacterBattle*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_GetActionTargetAsCharacterBattle) == 0x000008, "Wrong alignment on ActionBattleBase_BP_GetActionTargetAsCharacterBattle");
static_assert(sizeof(ActionBattleBase_BP_GetActionTargetAsCharacterBattle) == 0x000008, "Wrong size on ActionBattleBase_BP_GetActionTargetAsCharacterBattle");
static_assert(offsetof(ActionBattleBase_BP_GetActionTargetAsCharacterBattle, ReturnValue) == 0x000000, "Member 'ActionBattleBase_BP_GetActionTargetAsCharacterBattle::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_GetAnimation
// 0x0008 (0x0008 - 0x0000)
struct ActionBattleBase_BP_GetAnimation final
{
public:
	class UAnimation*                             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_GetAnimation) == 0x000008, "Wrong alignment on ActionBattleBase_BP_GetAnimation");
static_assert(sizeof(ActionBattleBase_BP_GetAnimation) == 0x000008, "Wrong size on ActionBattleBase_BP_GetAnimation");
static_assert(offsetof(ActionBattleBase_BP_GetAnimation, ReturnValue) == 0x000000, "Member 'ActionBattleBase_BP_GetAnimation::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_GetAnimationAdditionalTime
// 0x0004 (0x0004 - 0x0000)
struct ActionBattleBase_BP_GetAnimationAdditionalTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_GetAnimationAdditionalTime) == 0x000004, "Wrong alignment on ActionBattleBase_BP_GetAnimationAdditionalTime");
static_assert(sizeof(ActionBattleBase_BP_GetAnimationAdditionalTime) == 0x000004, "Wrong size on ActionBattleBase_BP_GetAnimationAdditionalTime");
static_assert(offsetof(ActionBattleBase_BP_GetAnimationAdditionalTime, ReturnValue) == 0x000000, "Member 'ActionBattleBase_BP_GetAnimationAdditionalTime::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_GetBattleEffect
// 0x0008 (0x0008 - 0x0000)
struct ActionBattleBase_BP_GetBattleEffect final
{
public:
	class UCharacterBattleEffectComponent*        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_GetBattleEffect) == 0x000008, "Wrong alignment on ActionBattleBase_BP_GetBattleEffect");
static_assert(sizeof(ActionBattleBase_BP_GetBattleEffect) == 0x000008, "Wrong size on ActionBattleBase_BP_GetBattleEffect");
static_assert(offsetof(ActionBattleBase_BP_GetBattleEffect, ReturnValue) == 0x000000, "Member 'ActionBattleBase_BP_GetBattleEffect::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_GetCameraDirection
// 0x000C (0x000C - 0x0000)
struct ActionBattleBase_BP_GetCameraDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_GetCameraDirection) == 0x000004, "Wrong alignment on ActionBattleBase_BP_GetCameraDirection");
static_assert(sizeof(ActionBattleBase_BP_GetCameraDirection) == 0x00000C, "Wrong size on ActionBattleBase_BP_GetCameraDirection");
static_assert(offsetof(ActionBattleBase_BP_GetCameraDirection, ReturnValue) == 0x000000, "Member 'ActionBattleBase_BP_GetCameraDirection::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_GetForwardDirectionForBaseActionMovement
// 0x0018 (0x0018 - 0x0000)
struct ActionBattleBase_BP_GetForwardDirectionForBaseActionMovement final
{
public:
	struct FVector                                SourceDirection;                                   // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_GetForwardDirectionForBaseActionMovement) == 0x000004, "Wrong alignment on ActionBattleBase_BP_GetForwardDirectionForBaseActionMovement");
static_assert(sizeof(ActionBattleBase_BP_GetForwardDirectionForBaseActionMovement) == 0x000018, "Wrong size on ActionBattleBase_BP_GetForwardDirectionForBaseActionMovement");
static_assert(offsetof(ActionBattleBase_BP_GetForwardDirectionForBaseActionMovement, SourceDirection) == 0x000000, "Member 'ActionBattleBase_BP_GetForwardDirectionForBaseActionMovement::SourceDirection' has a wrong offset!");
static_assert(offsetof(ActionBattleBase_BP_GetForwardDirectionForBaseActionMovement, ReturnValue) == 0x00000C, "Member 'ActionBattleBase_BP_GetForwardDirectionForBaseActionMovement::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_GetMagazine
// 0x0008 (0x0008 - 0x0000)
struct ActionBattleBase_BP_GetMagazine final
{
public:
	class UMagazineManagementComponent*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_GetMagazine) == 0x000008, "Wrong alignment on ActionBattleBase_BP_GetMagazine");
static_assert(sizeof(ActionBattleBase_BP_GetMagazine) == 0x000008, "Wrong size on ActionBattleBase_BP_GetMagazine");
static_assert(offsetof(ActionBattleBase_BP_GetMagazine, ReturnValue) == 0x000000, "Member 'ActionBattleBase_BP_GetMagazine::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_GetMoveDirection
// 0x000C (0x000C - 0x0000)
struct ActionBattleBase_BP_GetMoveDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_GetMoveDirection) == 0x000004, "Wrong alignment on ActionBattleBase_BP_GetMoveDirection");
static_assert(sizeof(ActionBattleBase_BP_GetMoveDirection) == 0x00000C, "Wrong size on ActionBattleBase_BP_GetMoveDirection");
static_assert(offsetof(ActionBattleBase_BP_GetMoveDirection, ReturnValue) == 0x000000, "Member 'ActionBattleBase_BP_GetMoveDirection::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_GetNearestCharacter
// 0x0010 (0x0010 - 0x0000)
struct ActionBattleBase_BP_GetNearestCharacter final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlly;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDying;                                            // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacterBattle*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_GetNearestCharacter) == 0x000008, "Wrong alignment on ActionBattleBase_BP_GetNearestCharacter");
static_assert(sizeof(ActionBattleBase_BP_GetNearestCharacter) == 0x000010, "Wrong size on ActionBattleBase_BP_GetNearestCharacter");
static_assert(offsetof(ActionBattleBase_BP_GetNearestCharacter, Radius) == 0x000000, "Member 'ActionBattleBase_BP_GetNearestCharacter::Radius' has a wrong offset!");
static_assert(offsetof(ActionBattleBase_BP_GetNearestCharacter, bAlly) == 0x000004, "Member 'ActionBattleBase_BP_GetNearestCharacter::bAlly' has a wrong offset!");
static_assert(offsetof(ActionBattleBase_BP_GetNearestCharacter, bDying) == 0x000005, "Member 'ActionBattleBase_BP_GetNearestCharacter::bDying' has a wrong offset!");
static_assert(offsetof(ActionBattleBase_BP_GetNearestCharacter, ReturnValue) == 0x000008, "Member 'ActionBattleBase_BP_GetNearestCharacter::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_GetOwnerCharacterBattle
// 0x0008 (0x0008 - 0x0000)
struct ActionBattleBase_BP_GetOwnerCharacterBattle final
{
public:
	class ACharacterBattle*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_GetOwnerCharacterBattle) == 0x000008, "Wrong alignment on ActionBattleBase_BP_GetOwnerCharacterBattle");
static_assert(sizeof(ActionBattleBase_BP_GetOwnerCharacterBattle) == 0x000008, "Wrong size on ActionBattleBase_BP_GetOwnerCharacterBattle");
static_assert(offsetof(ActionBattleBase_BP_GetOwnerCharacterBattle, ReturnValue) == 0x000000, "Member 'ActionBattleBase_BP_GetOwnerCharacterBattle::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_GetOwnerCommand
// 0x0008 (0x0008 - 0x0000)
struct ActionBattleBase_BP_GetOwnerCommand final
{
public:
	class UCharacterCommandComponent*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_GetOwnerCommand) == 0x000008, "Wrong alignment on ActionBattleBase_BP_GetOwnerCommand");
static_assert(sizeof(ActionBattleBase_BP_GetOwnerCommand) == 0x000008, "Wrong size on ActionBattleBase_BP_GetOwnerCommand");
static_assert(offsetof(ActionBattleBase_BP_GetOwnerCommand, ReturnValue) == 0x000000, "Member 'ActionBattleBase_BP_GetOwnerCommand::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_GetOwnerDamage
// 0x0008 (0x0008 - 0x0000)
struct ActionBattleBase_BP_GetOwnerDamage final
{
public:
	class UCharacterDamageComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_GetOwnerDamage) == 0x000008, "Wrong alignment on ActionBattleBase_BP_GetOwnerDamage");
static_assert(sizeof(ActionBattleBase_BP_GetOwnerDamage) == 0x000008, "Wrong size on ActionBattleBase_BP_GetOwnerDamage");
static_assert(offsetof(ActionBattleBase_BP_GetOwnerDamage, ReturnValue) == 0x000000, "Member 'ActionBattleBase_BP_GetOwnerDamage::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_GetOwnerMovementBattle
// 0x0008 (0x0008 - 0x0000)
struct ActionBattleBase_BP_GetOwnerMovementBattle final
{
public:
	class UMovementComponentBattle*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_GetOwnerMovementBattle) == 0x000008, "Wrong alignment on ActionBattleBase_BP_GetOwnerMovementBattle");
static_assert(sizeof(ActionBattleBase_BP_GetOwnerMovementBattle) == 0x000008, "Wrong size on ActionBattleBase_BP_GetOwnerMovementBattle");
static_assert(offsetof(ActionBattleBase_BP_GetOwnerMovementBattle, ReturnValue) == 0x000000, "Member 'ActionBattleBase_BP_GetOwnerMovementBattle::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_GetOwnerState
// 0x0008 (0x0008 - 0x0000)
struct ActionBattleBase_BP_GetOwnerState final
{
public:
	class UCharacterState*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_GetOwnerState) == 0x000008, "Wrong alignment on ActionBattleBase_BP_GetOwnerState");
static_assert(sizeof(ActionBattleBase_BP_GetOwnerState) == 0x000008, "Wrong size on ActionBattleBase_BP_GetOwnerState");
static_assert(offsetof(ActionBattleBase_BP_GetOwnerState, ReturnValue) == 0x000000, "Member 'ActionBattleBase_BP_GetOwnerState::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_GetParam
// 0x0008 (0x0008 - 0x0000)
struct ActionBattleBase_BP_GetParam final
{
public:
	class UCharacterParam*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_GetParam) == 0x000008, "Wrong alignment on ActionBattleBase_BP_GetParam");
static_assert(sizeof(ActionBattleBase_BP_GetParam) == 0x000008, "Wrong size on ActionBattleBase_BP_GetParam");
static_assert(offsetof(ActionBattleBase_BP_GetParam, ReturnValue) == 0x000000, "Member 'ActionBattleBase_BP_GetParam::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_GetPlayerStateBattle
// 0x0008 (0x0008 - 0x0000)
struct ActionBattleBase_BP_GetPlayerStateBattle final
{
public:
	class APlayerStateBattle*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBattleBase_BP_GetPlayerStateBattle) == 0x000008, "Wrong alignment on ActionBattleBase_BP_GetPlayerStateBattle");
static_assert(sizeof(ActionBattleBase_BP_GetPlayerStateBattle) == 0x000008, "Wrong size on ActionBattleBase_BP_GetPlayerStateBattle");
static_assert(offsetof(ActionBattleBase_BP_GetPlayerStateBattle, ReturnValue) == 0x000000, "Member 'ActionBattleBase_BP_GetPlayerStateBattle::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionBattleBase.BP_IsEnableShiftAction
// 0x000C (0x000C - 0x0000)
struct ActionBattleBase_BP_IsEnableShiftAction final
{
public:
	class FName                                   NextAction;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActionBattleBase_BP_IsEnableShiftAction) == 0x000004, "Wrong alignment on ActionBattleBase_BP_IsEnableShiftAction");
static_assert(sizeof(ActionBattleBase_BP_IsEnableShiftAction) == 0x00000C, "Wrong size on ActionBattleBase_BP_IsEnableShiftAction");
static_assert(offsetof(ActionBattleBase_BP_IsEnableShiftAction, NextAction) == 0x000000, "Member 'ActionBattleBase_BP_IsEnableShiftAction::NextAction' has a wrong offset!");
static_assert(offsetof(ActionBattleBase_BP_IsEnableShiftAction, ReturnValue) == 0x000008, "Member 'ActionBattleBase_BP_IsEnableShiftAction::ReturnValue' has a wrong offset!");

// Function InGameModule.BattleBriefingSwitchWidget.PressSwitchOnKey
// 0x000C (0x000C - 0x0000)
struct BattleBriefingSwitchWidget_PressSwitchOnKey final
{
public:
	class FName                                   CustomName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrg;                                              // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRapidFire;                                        // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleBriefingSwitchWidget_PressSwitchOnKey) == 0x000004, "Wrong alignment on BattleBriefingSwitchWidget_PressSwitchOnKey");
static_assert(sizeof(BattleBriefingSwitchWidget_PressSwitchOnKey) == 0x00000C, "Wrong size on BattleBriefingSwitchWidget_PressSwitchOnKey");
static_assert(offsetof(BattleBriefingSwitchWidget_PressSwitchOnKey, CustomName) == 0x000000, "Member 'BattleBriefingSwitchWidget_PressSwitchOnKey::CustomName' has a wrong offset!");
static_assert(offsetof(BattleBriefingSwitchWidget_PressSwitchOnKey, bTrg) == 0x000008, "Member 'BattleBriefingSwitchWidget_PressSwitchOnKey::bTrg' has a wrong offset!");
static_assert(offsetof(BattleBriefingSwitchWidget_PressSwitchOnKey, bRapidFire) == 0x000009, "Member 'BattleBriefingSwitchWidget_PressSwitchOnKey::bRapidFire' has a wrong offset!");

// Function InGameModule.BattleBriefingSwitchWidget.PushOffButton
// 0x0010 (0x0010 - 0x0000)
struct BattleBriefingSwitchWidget_PushOffButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleBriefingSwitchWidget_PushOffButton) == 0x000008, "Wrong alignment on BattleBriefingSwitchWidget_PushOffButton");
static_assert(sizeof(BattleBriefingSwitchWidget_PushOffButton) == 0x000010, "Wrong size on BattleBriefingSwitchWidget_PushOffButton");
static_assert(offsetof(BattleBriefingSwitchWidget_PushOffButton, Widget) == 0x000000, "Member 'BattleBriefingSwitchWidget_PushOffButton::Widget' has a wrong offset!");
static_assert(offsetof(BattleBriefingSwitchWidget_PushOffButton, InputType) == 0x000008, "Member 'BattleBriefingSwitchWidget_PushOffButton::InputType' has a wrong offset!");

// Function InGameModule.BattleBriefingSwitchWidget.PushOnButton
// 0x0010 (0x0010 - 0x0000)
struct BattleBriefingSwitchWidget_PushOnButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleBriefingSwitchWidget_PushOnButton) == 0x000008, "Wrong alignment on BattleBriefingSwitchWidget_PushOnButton");
static_assert(sizeof(BattleBriefingSwitchWidget_PushOnButton) == 0x000010, "Wrong size on BattleBriefingSwitchWidget_PushOnButton");
static_assert(offsetof(BattleBriefingSwitchWidget_PushOnButton, Widget) == 0x000000, "Member 'BattleBriefingSwitchWidget_PushOnButton::Widget' has a wrong offset!");
static_assert(offsetof(BattleBriefingSwitchWidget_PushOnButton, InputType) == 0x000008, "Member 'BattleBriefingSwitchWidget_PushOnButton::InputType' has a wrong offset!");

// Function InGameModule.BattleBriefingSwitchWidget.ReleaseSwitchOnKey
// 0x0008 (0x0008 - 0x0000)
struct BattleBriefingSwitchWidget_ReleaseSwitchOnKey final
{
public:
	class FName                                   CustomName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleBriefingSwitchWidget_ReleaseSwitchOnKey) == 0x000004, "Wrong alignment on BattleBriefingSwitchWidget_ReleaseSwitchOnKey");
static_assert(sizeof(BattleBriefingSwitchWidget_ReleaseSwitchOnKey) == 0x000008, "Wrong size on BattleBriefingSwitchWidget_ReleaseSwitchOnKey");
static_assert(offsetof(BattleBriefingSwitchWidget_ReleaseSwitchOnKey, CustomName) == 0x000000, "Member 'BattleBriefingSwitchWidget_ReleaseSwitchOnKey::CustomName' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_DisableActionCancel
// 0x0001 (0x0001 - 0x0000)
struct ActionAttackBase_BP_DisableActionCancel final
{
public:
	EActionCancelFlag                             Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_DisableActionCancel) == 0x000001, "Wrong alignment on ActionAttackBase_BP_DisableActionCancel");
static_assert(sizeof(ActionAttackBase_BP_DisableActionCancel) == 0x000001, "Wrong size on ActionAttackBase_BP_DisableActionCancel");
static_assert(offsetof(ActionAttackBase_BP_DisableActionCancel, Flag) == 0x000000, "Member 'ActionAttackBase_BP_DisableActionCancel::Flag' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_EnableActionCancel
// 0x0001 (0x0001 - 0x0000)
struct ActionAttackBase_BP_EnableActionCancel final
{
public:
	EActionCancelFlag                             Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_EnableActionCancel) == 0x000001, "Wrong alignment on ActionAttackBase_BP_EnableActionCancel");
static_assert(sizeof(ActionAttackBase_BP_EnableActionCancel) == 0x000001, "Wrong size on ActionAttackBase_BP_EnableActionCancel");
static_assert(offsetof(ActionAttackBase_BP_EnableActionCancel, Flag) == 0x000000, "Member 'ActionAttackBase_BP_EnableActionCancel::Flag' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnAnimSpeedChanged
// 0x000C (0x000C - 0x0000)
struct ActionAttackBase_BP_OnAnimSpeedChanged final
{
public:
	EAttackAnimationEventId                       EventId;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultRate;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNagara;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActionAttackBase_BP_OnAnimSpeedChanged) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnAnimSpeedChanged");
static_assert(sizeof(ActionAttackBase_BP_OnAnimSpeedChanged) == 0x00000C, "Wrong size on ActionAttackBase_BP_OnAnimSpeedChanged");
static_assert(offsetof(ActionAttackBase_BP_OnAnimSpeedChanged, EventId) == 0x000000, "Member 'ActionAttackBase_BP_OnAnimSpeedChanged::EventId' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnAnimSpeedChanged, DefaultRate) == 0x000004, "Member 'ActionAttackBase_BP_OnAnimSpeedChanged::DefaultRate' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnAnimSpeedChanged, bNagara) == 0x000008, "Member 'ActionAttackBase_BP_OnAnimSpeedChanged::bNagara' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnBeginActionAttackAir
// 0x0008 (0x0008 - 0x0000)
struct ActionAttackBase_BP_OnBeginActionAttackAir final
{
public:
	class FName                                   PrevAction;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnBeginActionAttackAir) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnBeginActionAttackAir");
static_assert(sizeof(ActionAttackBase_BP_OnBeginActionAttackAir) == 0x000008, "Wrong size on ActionAttackBase_BP_OnBeginActionAttackAir");
static_assert(offsetof(ActionAttackBase_BP_OnBeginActionAttackAir, PrevAction) == 0x000000, "Member 'ActionAttackBase_BP_OnBeginActionAttackAir::PrevAction' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnBeginActionAttackCharge
// 0x0008 (0x0008 - 0x0000)
struct ActionAttackBase_BP_OnBeginActionAttackCharge final
{
public:
	class FName                                   PrevAction;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnBeginActionAttackCharge) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnBeginActionAttackCharge");
static_assert(sizeof(ActionAttackBase_BP_OnBeginActionAttackCharge) == 0x000008, "Wrong size on ActionAttackBase_BP_OnBeginActionAttackCharge");
static_assert(offsetof(ActionAttackBase_BP_OnBeginActionAttackCharge, PrevAction) == 0x000000, "Member 'ActionAttackBase_BP_OnBeginActionAttackCharge::PrevAction' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnBeginActionAttackChargeAir
// 0x0008 (0x0008 - 0x0000)
struct ActionAttackBase_BP_OnBeginActionAttackChargeAir final
{
public:
	class FName                                   PrevAction;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnBeginActionAttackChargeAir) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnBeginActionAttackChargeAir");
static_assert(sizeof(ActionAttackBase_BP_OnBeginActionAttackChargeAir) == 0x000008, "Wrong size on ActionAttackBase_BP_OnBeginActionAttackChargeAir");
static_assert(offsetof(ActionAttackBase_BP_OnBeginActionAttackChargeAir, PrevAction) == 0x000000, "Member 'ActionAttackBase_BP_OnBeginActionAttackChargeAir::PrevAction' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnBeginActionAttackChargeGround
// 0x0008 (0x0008 - 0x0000)
struct ActionAttackBase_BP_OnBeginActionAttackChargeGround final
{
public:
	class FName                                   PrevAction;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnBeginActionAttackChargeGround) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnBeginActionAttackChargeGround");
static_assert(sizeof(ActionAttackBase_BP_OnBeginActionAttackChargeGround) == 0x000008, "Wrong size on ActionAttackBase_BP_OnBeginActionAttackChargeGround");
static_assert(offsetof(ActionAttackBase_BP_OnBeginActionAttackChargeGround, PrevAction) == 0x000000, "Member 'ActionAttackBase_BP_OnBeginActionAttackChargeGround::PrevAction' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnBeginActionAttackGround
// 0x0008 (0x0008 - 0x0000)
struct ActionAttackBase_BP_OnBeginActionAttackGround final
{
public:
	class FName                                   PrevAction;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnBeginActionAttackGround) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnBeginActionAttackGround");
static_assert(sizeof(ActionAttackBase_BP_OnBeginActionAttackGround) == 0x000008, "Wrong size on ActionAttackBase_BP_OnBeginActionAttackGround");
static_assert(offsetof(ActionAttackBase_BP_OnBeginActionAttackGround, PrevAction) == 0x000000, "Member 'ActionAttackBase_BP_OnBeginActionAttackGround::PrevAction' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnBootDamage
// 0x0002 (0x0002 - 0x0000)
struct ActionAttackBase_BP_OnBootDamage final
{
public:
	bool                                          bSuperArmor;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bZeroDamage;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnBootDamage) == 0x000001, "Wrong alignment on ActionAttackBase_BP_OnBootDamage");
static_assert(sizeof(ActionAttackBase_BP_OnBootDamage) == 0x000002, "Wrong size on ActionAttackBase_BP_OnBootDamage");
static_assert(offsetof(ActionAttackBase_BP_OnBootDamage, bSuperArmor) == 0x000000, "Member 'ActionAttackBase_BP_OnBootDamage::bSuperArmor' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnBootDamage, bZeroDamage) == 0x000001, "Member 'ActionAttackBase_BP_OnBootDamage::bZeroDamage' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnChangeAttackPhase
// 0x0004 (0x0004 - 0x0000)
struct ActionAttackBase_BP_OnChangeAttackPhase final
{
public:
	int32                                         NextPhase;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnChangeAttackPhase) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnChangeAttackPhase");
static_assert(sizeof(ActionAttackBase_BP_OnChangeAttackPhase) == 0x000004, "Wrong size on ActionAttackBase_BP_OnChangeAttackPhase");
static_assert(offsetof(ActionAttackBase_BP_OnChangeAttackPhase, NextPhase) == 0x000000, "Member 'ActionAttackBase_BP_OnChangeAttackPhase::NextPhase' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnChangeAttackPhaseAir
// 0x0004 (0x0004 - 0x0000)
struct ActionAttackBase_BP_OnChangeAttackPhaseAir final
{
public:
	int32                                         NextPhase;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnChangeAttackPhaseAir) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnChangeAttackPhaseAir");
static_assert(sizeof(ActionAttackBase_BP_OnChangeAttackPhaseAir) == 0x000004, "Wrong size on ActionAttackBase_BP_OnChangeAttackPhaseAir");
static_assert(offsetof(ActionAttackBase_BP_OnChangeAttackPhaseAir, NextPhase) == 0x000000, "Member 'ActionAttackBase_BP_OnChangeAttackPhaseAir::NextPhase' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnChangeAttackPhaseAirForRemote
// 0x0004 (0x0004 - 0x0000)
struct ActionAttackBase_BP_OnChangeAttackPhaseAirForRemote final
{
public:
	int32                                         NextPhase;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnChangeAttackPhaseAirForRemote) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnChangeAttackPhaseAirForRemote");
static_assert(sizeof(ActionAttackBase_BP_OnChangeAttackPhaseAirForRemote) == 0x000004, "Wrong size on ActionAttackBase_BP_OnChangeAttackPhaseAirForRemote");
static_assert(offsetof(ActionAttackBase_BP_OnChangeAttackPhaseAirForRemote, NextPhase) == 0x000000, "Member 'ActionAttackBase_BP_OnChangeAttackPhaseAirForRemote::NextPhase' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnChangeAttackPhaseCharge
// 0x0004 (0x0004 - 0x0000)
struct ActionAttackBase_BP_OnChangeAttackPhaseCharge final
{
public:
	int32                                         NextPhase;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnChangeAttackPhaseCharge) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnChangeAttackPhaseCharge");
static_assert(sizeof(ActionAttackBase_BP_OnChangeAttackPhaseCharge) == 0x000004, "Wrong size on ActionAttackBase_BP_OnChangeAttackPhaseCharge");
static_assert(offsetof(ActionAttackBase_BP_OnChangeAttackPhaseCharge, NextPhase) == 0x000000, "Member 'ActionAttackBase_BP_OnChangeAttackPhaseCharge::NextPhase' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnChangeAttackPhaseChargeAir
// 0x0004 (0x0004 - 0x0000)
struct ActionAttackBase_BP_OnChangeAttackPhaseChargeAir final
{
public:
	int32                                         NextPhase;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnChangeAttackPhaseChargeAir) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnChangeAttackPhaseChargeAir");
static_assert(sizeof(ActionAttackBase_BP_OnChangeAttackPhaseChargeAir) == 0x000004, "Wrong size on ActionAttackBase_BP_OnChangeAttackPhaseChargeAir");
static_assert(offsetof(ActionAttackBase_BP_OnChangeAttackPhaseChargeAir, NextPhase) == 0x000000, "Member 'ActionAttackBase_BP_OnChangeAttackPhaseChargeAir::NextPhase' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnChangeAttackPhaseChargeAirForRemote
// 0x0004 (0x0004 - 0x0000)
struct ActionAttackBase_BP_OnChangeAttackPhaseChargeAirForRemote final
{
public:
	int32                                         NextPhase;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnChangeAttackPhaseChargeAirForRemote) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnChangeAttackPhaseChargeAirForRemote");
static_assert(sizeof(ActionAttackBase_BP_OnChangeAttackPhaseChargeAirForRemote) == 0x000004, "Wrong size on ActionAttackBase_BP_OnChangeAttackPhaseChargeAirForRemote");
static_assert(offsetof(ActionAttackBase_BP_OnChangeAttackPhaseChargeAirForRemote, NextPhase) == 0x000000, "Member 'ActionAttackBase_BP_OnChangeAttackPhaseChargeAirForRemote::NextPhase' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnChangeAttackPhaseChargeForRemote
// 0x0004 (0x0004 - 0x0000)
struct ActionAttackBase_BP_OnChangeAttackPhaseChargeForRemote final
{
public:
	int32                                         NextPhase;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnChangeAttackPhaseChargeForRemote) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnChangeAttackPhaseChargeForRemote");
static_assert(sizeof(ActionAttackBase_BP_OnChangeAttackPhaseChargeForRemote) == 0x000004, "Wrong size on ActionAttackBase_BP_OnChangeAttackPhaseChargeForRemote");
static_assert(offsetof(ActionAttackBase_BP_OnChangeAttackPhaseChargeForRemote, NextPhase) == 0x000000, "Member 'ActionAttackBase_BP_OnChangeAttackPhaseChargeForRemote::NextPhase' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnChangeAttackPhaseChargeGround
// 0x0004 (0x0004 - 0x0000)
struct ActionAttackBase_BP_OnChangeAttackPhaseChargeGround final
{
public:
	int32                                         NextPhase;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnChangeAttackPhaseChargeGround) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnChangeAttackPhaseChargeGround");
static_assert(sizeof(ActionAttackBase_BP_OnChangeAttackPhaseChargeGround) == 0x000004, "Wrong size on ActionAttackBase_BP_OnChangeAttackPhaseChargeGround");
static_assert(offsetof(ActionAttackBase_BP_OnChangeAttackPhaseChargeGround, NextPhase) == 0x000000, "Member 'ActionAttackBase_BP_OnChangeAttackPhaseChargeGround::NextPhase' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnChangeAttackPhaseChargeGroundForRemote
// 0x0004 (0x0004 - 0x0000)
struct ActionAttackBase_BP_OnChangeAttackPhaseChargeGroundForRemote final
{
public:
	int32                                         NextPhase;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnChangeAttackPhaseChargeGroundForRemote) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnChangeAttackPhaseChargeGroundForRemote");
static_assert(sizeof(ActionAttackBase_BP_OnChangeAttackPhaseChargeGroundForRemote) == 0x000004, "Wrong size on ActionAttackBase_BP_OnChangeAttackPhaseChargeGroundForRemote");
static_assert(offsetof(ActionAttackBase_BP_OnChangeAttackPhaseChargeGroundForRemote, NextPhase) == 0x000000, "Member 'ActionAttackBase_BP_OnChangeAttackPhaseChargeGroundForRemote::NextPhase' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnChangeAttackPhaseForRemote
// 0x0004 (0x0004 - 0x0000)
struct ActionAttackBase_BP_OnChangeAttackPhaseForRemote final
{
public:
	int32                                         NextPhase;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnChangeAttackPhaseForRemote) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnChangeAttackPhaseForRemote");
static_assert(sizeof(ActionAttackBase_BP_OnChangeAttackPhaseForRemote) == 0x000004, "Wrong size on ActionAttackBase_BP_OnChangeAttackPhaseForRemote");
static_assert(offsetof(ActionAttackBase_BP_OnChangeAttackPhaseForRemote, NextPhase) == 0x000000, "Member 'ActionAttackBase_BP_OnChangeAttackPhaseForRemote::NextPhase' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnChangeAttackPhaseGround
// 0x0004 (0x0004 - 0x0000)
struct ActionAttackBase_BP_OnChangeAttackPhaseGround final
{
public:
	int32                                         NextPhase;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnChangeAttackPhaseGround) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnChangeAttackPhaseGround");
static_assert(sizeof(ActionAttackBase_BP_OnChangeAttackPhaseGround) == 0x000004, "Wrong size on ActionAttackBase_BP_OnChangeAttackPhaseGround");
static_assert(offsetof(ActionAttackBase_BP_OnChangeAttackPhaseGround, NextPhase) == 0x000000, "Member 'ActionAttackBase_BP_OnChangeAttackPhaseGround::NextPhase' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnChangeAttackPhaseGroundForRemote
// 0x0004 (0x0004 - 0x0000)
struct ActionAttackBase_BP_OnChangeAttackPhaseGroundForRemote final
{
public:
	int32                                         NextPhase;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnChangeAttackPhaseGroundForRemote) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnChangeAttackPhaseGroundForRemote");
static_assert(sizeof(ActionAttackBase_BP_OnChangeAttackPhaseGroundForRemote) == 0x000004, "Wrong size on ActionAttackBase_BP_OnChangeAttackPhaseGroundForRemote");
static_assert(offsetof(ActionAttackBase_BP_OnChangeAttackPhaseGroundForRemote, NextPhase) == 0x000000, "Member 'ActionAttackBase_BP_OnChangeAttackPhaseGroundForRemote::NextPhase' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnDestroyedProjectileEvent
// 0x000C (0x000C - 0x0000)
struct ActionAttackBase_BP_OnDestroyedProjectileEvent final
{
public:
	EBulletDestroyType                            Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ProjectileName;                                    // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnDestroyedProjectileEvent) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnDestroyedProjectileEvent");
static_assert(sizeof(ActionAttackBase_BP_OnDestroyedProjectileEvent) == 0x00000C, "Wrong size on ActionAttackBase_BP_OnDestroyedProjectileEvent");
static_assert(offsetof(ActionAttackBase_BP_OnDestroyedProjectileEvent, Type) == 0x000000, "Member 'ActionAttackBase_BP_OnDestroyedProjectileEvent::Type' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnDestroyedProjectileEvent, ProjectileName) == 0x000004, "Member 'ActionAttackBase_BP_OnDestroyedProjectileEvent::ProjectileName' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnDestroyedProjectileEventAir
// 0x000C (0x000C - 0x0000)
struct ActionAttackBase_BP_OnDestroyedProjectileEventAir final
{
public:
	EBulletDestroyType                            Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ProjectileName;                                    // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnDestroyedProjectileEventAir) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnDestroyedProjectileEventAir");
static_assert(sizeof(ActionAttackBase_BP_OnDestroyedProjectileEventAir) == 0x00000C, "Wrong size on ActionAttackBase_BP_OnDestroyedProjectileEventAir");
static_assert(offsetof(ActionAttackBase_BP_OnDestroyedProjectileEventAir, Type) == 0x000000, "Member 'ActionAttackBase_BP_OnDestroyedProjectileEventAir::Type' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnDestroyedProjectileEventAir, ProjectileName) == 0x000004, "Member 'ActionAttackBase_BP_OnDestroyedProjectileEventAir::ProjectileName' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnDestroyedProjectileEventCharge
// 0x000C (0x000C - 0x0000)
struct ActionAttackBase_BP_OnDestroyedProjectileEventCharge final
{
public:
	EBulletDestroyType                            Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ProjectileName;                                    // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnDestroyedProjectileEventCharge) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnDestroyedProjectileEventCharge");
static_assert(sizeof(ActionAttackBase_BP_OnDestroyedProjectileEventCharge) == 0x00000C, "Wrong size on ActionAttackBase_BP_OnDestroyedProjectileEventCharge");
static_assert(offsetof(ActionAttackBase_BP_OnDestroyedProjectileEventCharge, Type) == 0x000000, "Member 'ActionAttackBase_BP_OnDestroyedProjectileEventCharge::Type' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnDestroyedProjectileEventCharge, ProjectileName) == 0x000004, "Member 'ActionAttackBase_BP_OnDestroyedProjectileEventCharge::ProjectileName' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnDestroyedProjectileEventChargeAir
// 0x000C (0x000C - 0x0000)
struct ActionAttackBase_BP_OnDestroyedProjectileEventChargeAir final
{
public:
	EBulletDestroyType                            Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ProjectileName;                                    // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnDestroyedProjectileEventChargeAir) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnDestroyedProjectileEventChargeAir");
static_assert(sizeof(ActionAttackBase_BP_OnDestroyedProjectileEventChargeAir) == 0x00000C, "Wrong size on ActionAttackBase_BP_OnDestroyedProjectileEventChargeAir");
static_assert(offsetof(ActionAttackBase_BP_OnDestroyedProjectileEventChargeAir, Type) == 0x000000, "Member 'ActionAttackBase_BP_OnDestroyedProjectileEventChargeAir::Type' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnDestroyedProjectileEventChargeAir, ProjectileName) == 0x000004, "Member 'ActionAttackBase_BP_OnDestroyedProjectileEventChargeAir::ProjectileName' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnDestroyedProjectileEventChargeGround
// 0x000C (0x000C - 0x0000)
struct ActionAttackBase_BP_OnDestroyedProjectileEventChargeGround final
{
public:
	EBulletDestroyType                            Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ProjectileName;                                    // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnDestroyedProjectileEventChargeGround) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnDestroyedProjectileEventChargeGround");
static_assert(sizeof(ActionAttackBase_BP_OnDestroyedProjectileEventChargeGround) == 0x00000C, "Wrong size on ActionAttackBase_BP_OnDestroyedProjectileEventChargeGround");
static_assert(offsetof(ActionAttackBase_BP_OnDestroyedProjectileEventChargeGround, Type) == 0x000000, "Member 'ActionAttackBase_BP_OnDestroyedProjectileEventChargeGround::Type' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnDestroyedProjectileEventChargeGround, ProjectileName) == 0x000004, "Member 'ActionAttackBase_BP_OnDestroyedProjectileEventChargeGround::ProjectileName' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnDestroyedProjectileEventGround
// 0x000C (0x000C - 0x0000)
struct ActionAttackBase_BP_OnDestroyedProjectileEventGround final
{
public:
	EBulletDestroyType                            Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ProjectileName;                                    // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnDestroyedProjectileEventGround) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnDestroyedProjectileEventGround");
static_assert(sizeof(ActionAttackBase_BP_OnDestroyedProjectileEventGround) == 0x00000C, "Wrong size on ActionAttackBase_BP_OnDestroyedProjectileEventGround");
static_assert(offsetof(ActionAttackBase_BP_OnDestroyedProjectileEventGround, Type) == 0x000000, "Member 'ActionAttackBase_BP_OnDestroyedProjectileEventGround::Type' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnDestroyedProjectileEventGround, ProjectileName) == 0x000004, "Member 'ActionAttackBase_BP_OnDestroyedProjectileEventGround::ProjectileName' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnEndActionAttackAir
// 0x0008 (0x0008 - 0x0000)
struct ActionAttackBase_BP_OnEndActionAttackAir final
{
public:
	class FName                                   NextAction;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnEndActionAttackAir) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnEndActionAttackAir");
static_assert(sizeof(ActionAttackBase_BP_OnEndActionAttackAir) == 0x000008, "Wrong size on ActionAttackBase_BP_OnEndActionAttackAir");
static_assert(offsetof(ActionAttackBase_BP_OnEndActionAttackAir, NextAction) == 0x000000, "Member 'ActionAttackBase_BP_OnEndActionAttackAir::NextAction' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnEndActionAttackCharge
// 0x0008 (0x0008 - 0x0000)
struct ActionAttackBase_BP_OnEndActionAttackCharge final
{
public:
	class FName                                   NextAction;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnEndActionAttackCharge) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnEndActionAttackCharge");
static_assert(sizeof(ActionAttackBase_BP_OnEndActionAttackCharge) == 0x000008, "Wrong size on ActionAttackBase_BP_OnEndActionAttackCharge");
static_assert(offsetof(ActionAttackBase_BP_OnEndActionAttackCharge, NextAction) == 0x000000, "Member 'ActionAttackBase_BP_OnEndActionAttackCharge::NextAction' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnEndActionAttackChargeAir
// 0x0008 (0x0008 - 0x0000)
struct ActionAttackBase_BP_OnEndActionAttackChargeAir final
{
public:
	class FName                                   NextAction;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnEndActionAttackChargeAir) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnEndActionAttackChargeAir");
static_assert(sizeof(ActionAttackBase_BP_OnEndActionAttackChargeAir) == 0x000008, "Wrong size on ActionAttackBase_BP_OnEndActionAttackChargeAir");
static_assert(offsetof(ActionAttackBase_BP_OnEndActionAttackChargeAir, NextAction) == 0x000000, "Member 'ActionAttackBase_BP_OnEndActionAttackChargeAir::NextAction' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnEndActionAttackChargeGround
// 0x0008 (0x0008 - 0x0000)
struct ActionAttackBase_BP_OnEndActionAttackChargeGround final
{
public:
	class FName                                   NextAction;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnEndActionAttackChargeGround) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnEndActionAttackChargeGround");
static_assert(sizeof(ActionAttackBase_BP_OnEndActionAttackChargeGround) == 0x000008, "Wrong size on ActionAttackBase_BP_OnEndActionAttackChargeGround");
static_assert(offsetof(ActionAttackBase_BP_OnEndActionAttackChargeGround, NextAction) == 0x000000, "Member 'ActionAttackBase_BP_OnEndActionAttackChargeGround::NextAction' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnEndActionAttackGround
// 0x0008 (0x0008 - 0x0000)
struct ActionAttackBase_BP_OnEndActionAttackGround final
{
public:
	class FName                                   NextAction;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnEndActionAttackGround) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnEndActionAttackGround");
static_assert(sizeof(ActionAttackBase_BP_OnEndActionAttackGround) == 0x000008, "Wrong size on ActionAttackBase_BP_OnEndActionAttackGround");
static_assert(offsetof(ActionAttackBase_BP_OnEndActionAttackGround, NextAction) == 0x000000, "Member 'ActionAttackBase_BP_OnEndActionAttackGround::NextAction' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnHitAttackEvent
// 0x0020 (0x0020 - 0x0000)
struct ActionAttackBase_BP_OnHitAttackEvent final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProjectileName;                                    // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacterBattle*                       HitCharacter;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnHitAttackEvent) == 0x000008, "Wrong alignment on ActionAttackBase_BP_OnHitAttackEvent");
static_assert(sizeof(ActionAttackBase_BP_OnHitAttackEvent) == 0x000020, "Wrong size on ActionAttackBase_BP_OnHitAttackEvent");
static_assert(offsetof(ActionAttackBase_BP_OnHitAttackEvent, HitLocation) == 0x000000, "Member 'ActionAttackBase_BP_OnHitAttackEvent::HitLocation' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnHitAttackEvent, ProjectileName) == 0x00000C, "Member 'ActionAttackBase_BP_OnHitAttackEvent::ProjectileName' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnHitAttackEvent, HitCharacter) == 0x000018, "Member 'ActionAttackBase_BP_OnHitAttackEvent::HitCharacter' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnHitAttackEventAir
// 0x0020 (0x0020 - 0x0000)
struct ActionAttackBase_BP_OnHitAttackEventAir final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProjectileName;                                    // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacterBattle*                       HitCharacter;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnHitAttackEventAir) == 0x000008, "Wrong alignment on ActionAttackBase_BP_OnHitAttackEventAir");
static_assert(sizeof(ActionAttackBase_BP_OnHitAttackEventAir) == 0x000020, "Wrong size on ActionAttackBase_BP_OnHitAttackEventAir");
static_assert(offsetof(ActionAttackBase_BP_OnHitAttackEventAir, HitLocation) == 0x000000, "Member 'ActionAttackBase_BP_OnHitAttackEventAir::HitLocation' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnHitAttackEventAir, ProjectileName) == 0x00000C, "Member 'ActionAttackBase_BP_OnHitAttackEventAir::ProjectileName' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnHitAttackEventAir, HitCharacter) == 0x000018, "Member 'ActionAttackBase_BP_OnHitAttackEventAir::HitCharacter' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnHitAttackEventCharge
// 0x0020 (0x0020 - 0x0000)
struct ActionAttackBase_BP_OnHitAttackEventCharge final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProjectileName;                                    // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacterBattle*                       HitCharacter;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnHitAttackEventCharge) == 0x000008, "Wrong alignment on ActionAttackBase_BP_OnHitAttackEventCharge");
static_assert(sizeof(ActionAttackBase_BP_OnHitAttackEventCharge) == 0x000020, "Wrong size on ActionAttackBase_BP_OnHitAttackEventCharge");
static_assert(offsetof(ActionAttackBase_BP_OnHitAttackEventCharge, HitLocation) == 0x000000, "Member 'ActionAttackBase_BP_OnHitAttackEventCharge::HitLocation' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnHitAttackEventCharge, ProjectileName) == 0x00000C, "Member 'ActionAttackBase_BP_OnHitAttackEventCharge::ProjectileName' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnHitAttackEventCharge, HitCharacter) == 0x000018, "Member 'ActionAttackBase_BP_OnHitAttackEventCharge::HitCharacter' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnHitAttackEventChargeAir
// 0x0020 (0x0020 - 0x0000)
struct ActionAttackBase_BP_OnHitAttackEventChargeAir final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProjectileName;                                    // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacterBattle*                       HitCharacter;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnHitAttackEventChargeAir) == 0x000008, "Wrong alignment on ActionAttackBase_BP_OnHitAttackEventChargeAir");
static_assert(sizeof(ActionAttackBase_BP_OnHitAttackEventChargeAir) == 0x000020, "Wrong size on ActionAttackBase_BP_OnHitAttackEventChargeAir");
static_assert(offsetof(ActionAttackBase_BP_OnHitAttackEventChargeAir, HitLocation) == 0x000000, "Member 'ActionAttackBase_BP_OnHitAttackEventChargeAir::HitLocation' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnHitAttackEventChargeAir, ProjectileName) == 0x00000C, "Member 'ActionAttackBase_BP_OnHitAttackEventChargeAir::ProjectileName' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnHitAttackEventChargeAir, HitCharacter) == 0x000018, "Member 'ActionAttackBase_BP_OnHitAttackEventChargeAir::HitCharacter' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnHitAttackEventChargeGround
// 0x0020 (0x0020 - 0x0000)
struct ActionAttackBase_BP_OnHitAttackEventChargeGround final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProjectileName;                                    // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacterBattle*                       HitCharacter;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnHitAttackEventChargeGround) == 0x000008, "Wrong alignment on ActionAttackBase_BP_OnHitAttackEventChargeGround");
static_assert(sizeof(ActionAttackBase_BP_OnHitAttackEventChargeGround) == 0x000020, "Wrong size on ActionAttackBase_BP_OnHitAttackEventChargeGround");
static_assert(offsetof(ActionAttackBase_BP_OnHitAttackEventChargeGround, HitLocation) == 0x000000, "Member 'ActionAttackBase_BP_OnHitAttackEventChargeGround::HitLocation' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnHitAttackEventChargeGround, ProjectileName) == 0x00000C, "Member 'ActionAttackBase_BP_OnHitAttackEventChargeGround::ProjectileName' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnHitAttackEventChargeGround, HitCharacter) == 0x000018, "Member 'ActionAttackBase_BP_OnHitAttackEventChargeGround::HitCharacter' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnHitAttackEventGround
// 0x0020 (0x0020 - 0x0000)
struct ActionAttackBase_BP_OnHitAttackEventGround final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProjectileName;                                    // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacterBattle*                       HitCharacter;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnHitAttackEventGround) == 0x000008, "Wrong alignment on ActionAttackBase_BP_OnHitAttackEventGround");
static_assert(sizeof(ActionAttackBase_BP_OnHitAttackEventGround) == 0x000020, "Wrong size on ActionAttackBase_BP_OnHitAttackEventGround");
static_assert(offsetof(ActionAttackBase_BP_OnHitAttackEventGround, HitLocation) == 0x000000, "Member 'ActionAttackBase_BP_OnHitAttackEventGround::HitLocation' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnHitAttackEventGround, ProjectileName) == 0x00000C, "Member 'ActionAttackBase_BP_OnHitAttackEventGround::ProjectileName' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnHitAttackEventGround, HitCharacter) == 0x000018, "Member 'ActionAttackBase_BP_OnHitAttackEventGround::HitCharacter' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnHitProjectileEvent
// 0x0018 (0x0018 - 0x0000)
struct ActionAttackBase_BP_OnHitProjectileEvent final
{
public:
	EAttackId                                     ProjectileAttackId;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackHitResult                              Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 HitActor;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnHitProjectileEvent) == 0x000008, "Wrong alignment on ActionAttackBase_BP_OnHitProjectileEvent");
static_assert(sizeof(ActionAttackBase_BP_OnHitProjectileEvent) == 0x000018, "Wrong size on ActionAttackBase_BP_OnHitProjectileEvent");
static_assert(offsetof(ActionAttackBase_BP_OnHitProjectileEvent, ProjectileAttackId) == 0x000000, "Member 'ActionAttackBase_BP_OnHitProjectileEvent::ProjectileAttackId' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnHitProjectileEvent, Type) == 0x000001, "Member 'ActionAttackBase_BP_OnHitProjectileEvent::Type' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnHitProjectileEvent, Location) == 0x000004, "Member 'ActionAttackBase_BP_OnHitProjectileEvent::Location' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnHitProjectileEvent, HitActor) == 0x000010, "Member 'ActionAttackBase_BP_OnHitProjectileEvent::HitActor' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnHitProjectileEventAir
// 0x0018 (0x0018 - 0x0000)
struct ActionAttackBase_BP_OnHitProjectileEventAir final
{
public:
	EAttackId                                     ProjectileAttackId;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackHitResult                              Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 HitActor;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnHitProjectileEventAir) == 0x000008, "Wrong alignment on ActionAttackBase_BP_OnHitProjectileEventAir");
static_assert(sizeof(ActionAttackBase_BP_OnHitProjectileEventAir) == 0x000018, "Wrong size on ActionAttackBase_BP_OnHitProjectileEventAir");
static_assert(offsetof(ActionAttackBase_BP_OnHitProjectileEventAir, ProjectileAttackId) == 0x000000, "Member 'ActionAttackBase_BP_OnHitProjectileEventAir::ProjectileAttackId' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnHitProjectileEventAir, Type) == 0x000001, "Member 'ActionAttackBase_BP_OnHitProjectileEventAir::Type' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnHitProjectileEventAir, Location) == 0x000004, "Member 'ActionAttackBase_BP_OnHitProjectileEventAir::Location' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnHitProjectileEventAir, HitActor) == 0x000010, "Member 'ActionAttackBase_BP_OnHitProjectileEventAir::HitActor' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnHitProjectileEventCharge
// 0x0018 (0x0018 - 0x0000)
struct ActionAttackBase_BP_OnHitProjectileEventCharge final
{
public:
	EAttackId                                     ProjectileAttackId;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackHitResult                              Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 HitActor;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnHitProjectileEventCharge) == 0x000008, "Wrong alignment on ActionAttackBase_BP_OnHitProjectileEventCharge");
static_assert(sizeof(ActionAttackBase_BP_OnHitProjectileEventCharge) == 0x000018, "Wrong size on ActionAttackBase_BP_OnHitProjectileEventCharge");
static_assert(offsetof(ActionAttackBase_BP_OnHitProjectileEventCharge, ProjectileAttackId) == 0x000000, "Member 'ActionAttackBase_BP_OnHitProjectileEventCharge::ProjectileAttackId' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnHitProjectileEventCharge, Type) == 0x000001, "Member 'ActionAttackBase_BP_OnHitProjectileEventCharge::Type' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnHitProjectileEventCharge, Location) == 0x000004, "Member 'ActionAttackBase_BP_OnHitProjectileEventCharge::Location' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnHitProjectileEventCharge, HitActor) == 0x000010, "Member 'ActionAttackBase_BP_OnHitProjectileEventCharge::HitActor' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnHitProjectileEventChargeAir
// 0x0018 (0x0018 - 0x0000)
struct ActionAttackBase_BP_OnHitProjectileEventChargeAir final
{
public:
	EAttackId                                     ProjectileAttackId;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackHitResult                              Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 HitActor;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnHitProjectileEventChargeAir) == 0x000008, "Wrong alignment on ActionAttackBase_BP_OnHitProjectileEventChargeAir");
static_assert(sizeof(ActionAttackBase_BP_OnHitProjectileEventChargeAir) == 0x000018, "Wrong size on ActionAttackBase_BP_OnHitProjectileEventChargeAir");
static_assert(offsetof(ActionAttackBase_BP_OnHitProjectileEventChargeAir, ProjectileAttackId) == 0x000000, "Member 'ActionAttackBase_BP_OnHitProjectileEventChargeAir::ProjectileAttackId' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnHitProjectileEventChargeAir, Type) == 0x000001, "Member 'ActionAttackBase_BP_OnHitProjectileEventChargeAir::Type' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnHitProjectileEventChargeAir, Location) == 0x000004, "Member 'ActionAttackBase_BP_OnHitProjectileEventChargeAir::Location' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnHitProjectileEventChargeAir, HitActor) == 0x000010, "Member 'ActionAttackBase_BP_OnHitProjectileEventChargeAir::HitActor' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnHitProjectileEventChargeGround
// 0x0018 (0x0018 - 0x0000)
struct ActionAttackBase_BP_OnHitProjectileEventChargeGround final
{
public:
	EAttackId                                     ProjectileAttackId;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackHitResult                              Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 HitActor;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnHitProjectileEventChargeGround) == 0x000008, "Wrong alignment on ActionAttackBase_BP_OnHitProjectileEventChargeGround");
static_assert(sizeof(ActionAttackBase_BP_OnHitProjectileEventChargeGround) == 0x000018, "Wrong size on ActionAttackBase_BP_OnHitProjectileEventChargeGround");
static_assert(offsetof(ActionAttackBase_BP_OnHitProjectileEventChargeGround, ProjectileAttackId) == 0x000000, "Member 'ActionAttackBase_BP_OnHitProjectileEventChargeGround::ProjectileAttackId' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnHitProjectileEventChargeGround, Type) == 0x000001, "Member 'ActionAttackBase_BP_OnHitProjectileEventChargeGround::Type' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnHitProjectileEventChargeGround, Location) == 0x000004, "Member 'ActionAttackBase_BP_OnHitProjectileEventChargeGround::Location' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnHitProjectileEventChargeGround, HitActor) == 0x000010, "Member 'ActionAttackBase_BP_OnHitProjectileEventChargeGround::HitActor' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnHitProjectileEventGround
// 0x0018 (0x0018 - 0x0000)
struct ActionAttackBase_BP_OnHitProjectileEventGround final
{
public:
	EAttackId                                     ProjectileAttackId;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackHitResult                              Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 HitActor;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnHitProjectileEventGround) == 0x000008, "Wrong alignment on ActionAttackBase_BP_OnHitProjectileEventGround");
static_assert(sizeof(ActionAttackBase_BP_OnHitProjectileEventGround) == 0x000018, "Wrong size on ActionAttackBase_BP_OnHitProjectileEventGround");
static_assert(offsetof(ActionAttackBase_BP_OnHitProjectileEventGround, ProjectileAttackId) == 0x000000, "Member 'ActionAttackBase_BP_OnHitProjectileEventGround::ProjectileAttackId' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnHitProjectileEventGround, Type) == 0x000001, "Member 'ActionAttackBase_BP_OnHitProjectileEventGround::Type' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnHitProjectileEventGround, Location) == 0x000004, "Member 'ActionAttackBase_BP_OnHitProjectileEventGround::Location' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnHitProjectileEventGround, HitActor) == 0x000010, "Member 'ActionAttackBase_BP_OnHitProjectileEventGround::HitActor' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnHitReceiveBullet
// 0x0090 (0x0090 - 0x0000)
struct ActionAttackBase_BP_OnHitReceiveBullet final
{
public:
	const class ABullet*                          HitBullet;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnHitReceiveBullet) == 0x000008, "Wrong alignment on ActionAttackBase_BP_OnHitReceiveBullet");
static_assert(sizeof(ActionAttackBase_BP_OnHitReceiveBullet) == 0x000090, "Wrong size on ActionAttackBase_BP_OnHitReceiveBullet");
static_assert(offsetof(ActionAttackBase_BP_OnHitReceiveBullet, HitBullet) == 0x000000, "Member 'ActionAttackBase_BP_OnHitReceiveBullet::HitBullet' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnHitReceiveBullet, Hit) == 0x000008, "Member 'ActionAttackBase_BP_OnHitReceiveBullet::Hit' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnLoadParams
// 0x000C (0x000C - 0x0000)
struct ActionAttackBase_BP_OnLoadParams final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UniqueLevel;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnLoadParams) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnLoadParams");
static_assert(sizeof(ActionAttackBase_BP_OnLoadParams) == 0x00000C, "Wrong size on ActionAttackBase_BP_OnLoadParams");
static_assert(offsetof(ActionAttackBase_BP_OnLoadParams, ActionName) == 0x000000, "Member 'ActionAttackBase_BP_OnLoadParams::ActionName' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnLoadParams, UniqueLevel) == 0x000008, "Member 'ActionAttackBase_BP_OnLoadParams::UniqueLevel' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnLoadParamsForChargeAttack
// 0x000C (0x000C - 0x0000)
struct ActionAttackBase_BP_OnLoadParamsForChargeAttack final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UniqueLevel;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnLoadParamsForChargeAttack) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnLoadParamsForChargeAttack");
static_assert(sizeof(ActionAttackBase_BP_OnLoadParamsForChargeAttack) == 0x00000C, "Wrong size on ActionAttackBase_BP_OnLoadParamsForChargeAttack");
static_assert(offsetof(ActionAttackBase_BP_OnLoadParamsForChargeAttack, ActionName) == 0x000000, "Member 'ActionAttackBase_BP_OnLoadParamsForChargeAttack::ActionName' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnLoadParamsForChargeAttack, UniqueLevel) == 0x000008, "Member 'ActionAttackBase_BP_OnLoadParamsForChargeAttack::UniqueLevel' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnLoadParamsForDefaultAttack
// 0x000C (0x000C - 0x0000)
struct ActionAttackBase_BP_OnLoadParamsForDefaultAttack final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UniqueLevel;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnLoadParamsForDefaultAttack) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnLoadParamsForDefaultAttack");
static_assert(sizeof(ActionAttackBase_BP_OnLoadParamsForDefaultAttack) == 0x00000C, "Wrong size on ActionAttackBase_BP_OnLoadParamsForDefaultAttack");
static_assert(offsetof(ActionAttackBase_BP_OnLoadParamsForDefaultAttack, ActionName) == 0x000000, "Member 'ActionAttackBase_BP_OnLoadParamsForDefaultAttack::ActionName' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnLoadParamsForDefaultAttack, UniqueLevel) == 0x000008, "Member 'ActionAttackBase_BP_OnLoadParamsForDefaultAttack::UniqueLevel' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnNotificationAttackChargeDedicatedEvent
// 0x0001 (0x0001 - 0x0000)
struct ActionAttackBase_BP_OnNotificationAttackChargeDedicatedEvent final
{
public:
	EAttackDedicatedEventId                       ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnNotificationAttackChargeDedicatedEvent) == 0x000001, "Wrong alignment on ActionAttackBase_BP_OnNotificationAttackChargeDedicatedEvent");
static_assert(sizeof(ActionAttackBase_BP_OnNotificationAttackChargeDedicatedEvent) == 0x000001, "Wrong size on ActionAttackBase_BP_OnNotificationAttackChargeDedicatedEvent");
static_assert(offsetof(ActionAttackBase_BP_OnNotificationAttackChargeDedicatedEvent, ID) == 0x000000, "Member 'ActionAttackBase_BP_OnNotificationAttackChargeDedicatedEvent::ID' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnNotificationAttackDedicatedEvent
// 0x0001 (0x0001 - 0x0000)
struct ActionAttackBase_BP_OnNotificationAttackDedicatedEvent final
{
public:
	EAttackDedicatedEventId                       ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnNotificationAttackDedicatedEvent) == 0x000001, "Wrong alignment on ActionAttackBase_BP_OnNotificationAttackDedicatedEvent");
static_assert(sizeof(ActionAttackBase_BP_OnNotificationAttackDedicatedEvent) == 0x000001, "Wrong size on ActionAttackBase_BP_OnNotificationAttackDedicatedEvent");
static_assert(offsetof(ActionAttackBase_BP_OnNotificationAttackDedicatedEvent, ID) == 0x000000, "Member 'ActionAttackBase_BP_OnNotificationAttackDedicatedEvent::ID' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnRepHitProjectileEvent
// 0x000C (0x000C - 0x0000)
struct ActionAttackBase_BP_OnRepHitProjectileEvent final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnRepHitProjectileEvent) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnRepHitProjectileEvent");
static_assert(sizeof(ActionAttackBase_BP_OnRepHitProjectileEvent) == 0x00000C, "Wrong size on ActionAttackBase_BP_OnRepHitProjectileEvent");
static_assert(offsetof(ActionAttackBase_BP_OnRepHitProjectileEvent, HitLocation) == 0x000000, "Member 'ActionAttackBase_BP_OnRepHitProjectileEvent::HitLocation' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnRepHitProjectileEventAir
// 0x000C (0x000C - 0x0000)
struct ActionAttackBase_BP_OnRepHitProjectileEventAir final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnRepHitProjectileEventAir) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnRepHitProjectileEventAir");
static_assert(sizeof(ActionAttackBase_BP_OnRepHitProjectileEventAir) == 0x00000C, "Wrong size on ActionAttackBase_BP_OnRepHitProjectileEventAir");
static_assert(offsetof(ActionAttackBase_BP_OnRepHitProjectileEventAir, HitLocation) == 0x000000, "Member 'ActionAttackBase_BP_OnRepHitProjectileEventAir::HitLocation' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnRepHitProjectileEventCharge
// 0x000C (0x000C - 0x0000)
struct ActionAttackBase_BP_OnRepHitProjectileEventCharge final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnRepHitProjectileEventCharge) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnRepHitProjectileEventCharge");
static_assert(sizeof(ActionAttackBase_BP_OnRepHitProjectileEventCharge) == 0x00000C, "Wrong size on ActionAttackBase_BP_OnRepHitProjectileEventCharge");
static_assert(offsetof(ActionAttackBase_BP_OnRepHitProjectileEventCharge, HitLocation) == 0x000000, "Member 'ActionAttackBase_BP_OnRepHitProjectileEventCharge::HitLocation' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnRepHitProjectileEventChargeAir
// 0x000C (0x000C - 0x0000)
struct ActionAttackBase_BP_OnRepHitProjectileEventChargeAir final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnRepHitProjectileEventChargeAir) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnRepHitProjectileEventChargeAir");
static_assert(sizeof(ActionAttackBase_BP_OnRepHitProjectileEventChargeAir) == 0x00000C, "Wrong size on ActionAttackBase_BP_OnRepHitProjectileEventChargeAir");
static_assert(offsetof(ActionAttackBase_BP_OnRepHitProjectileEventChargeAir, HitLocation) == 0x000000, "Member 'ActionAttackBase_BP_OnRepHitProjectileEventChargeAir::HitLocation' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnRepHitProjectileEventChargeGround
// 0x000C (0x000C - 0x0000)
struct ActionAttackBase_BP_OnRepHitProjectileEventChargeGround final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnRepHitProjectileEventChargeGround) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnRepHitProjectileEventChargeGround");
static_assert(sizeof(ActionAttackBase_BP_OnRepHitProjectileEventChargeGround) == 0x00000C, "Wrong size on ActionAttackBase_BP_OnRepHitProjectileEventChargeGround");
static_assert(offsetof(ActionAttackBase_BP_OnRepHitProjectileEventChargeGround, HitLocation) == 0x000000, "Member 'ActionAttackBase_BP_OnRepHitProjectileEventChargeGround::HitLocation' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnRepHitProjectileEventGround
// 0x000C (0x000C - 0x0000)
struct ActionAttackBase_BP_OnRepHitProjectileEventGround final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnRepHitProjectileEventGround) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnRepHitProjectileEventGround");
static_assert(sizeof(ActionAttackBase_BP_OnRepHitProjectileEventGround) == 0x00000C, "Wrong size on ActionAttackBase_BP_OnRepHitProjectileEventGround");
static_assert(offsetof(ActionAttackBase_BP_OnRepHitProjectileEventGround, HitLocation) == 0x000000, "Member 'ActionAttackBase_BP_OnRepHitProjectileEventGround::HitLocation' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_OnSetAttackIdAndLevel_Avatar
// 0x0008 (0x0008 - 0x0000)
struct ActionAttackBase_BP_OnSetAttackIdAndLevel_Avatar final
{
public:
	EAttackId                                     AttackId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_OnSetAttackIdAndLevel_Avatar) == 0x000004, "Wrong alignment on ActionAttackBase_BP_OnSetAttackIdAndLevel_Avatar");
static_assert(sizeof(ActionAttackBase_BP_OnSetAttackIdAndLevel_Avatar) == 0x000008, "Wrong size on ActionAttackBase_BP_OnSetAttackIdAndLevel_Avatar");
static_assert(offsetof(ActionAttackBase_BP_OnSetAttackIdAndLevel_Avatar, AttackId) == 0x000000, "Member 'ActionAttackBase_BP_OnSetAttackIdAndLevel_Avatar::AttackId' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_OnSetAttackIdAndLevel_Avatar, Level) == 0x000004, "Member 'ActionAttackBase_BP_OnSetAttackIdAndLevel_Avatar::Level' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_SendToProjectileEvent
// 0x0008 (0x0008 - 0x0000)
struct ActionAttackBase_BP_SendToProjectileEvent final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_SendToProjectileEvent) == 0x000004, "Wrong alignment on ActionAttackBase_BP_SendToProjectileEvent");
static_assert(sizeof(ActionAttackBase_BP_SendToProjectileEvent) == 0x000008, "Wrong size on ActionAttackBase_BP_SendToProjectileEvent");
static_assert(offsetof(ActionAttackBase_BP_SendToProjectileEvent, EventName) == 0x000000, "Member 'ActionAttackBase_BP_SendToProjectileEvent::EventName' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_SetAttackPhaseEndDelay
// 0x0020 (0x0020 - 0x0000)
struct ActionAttackBase_BP_SetAttackPhaseEndDelay final
{
public:
	float                                         SleepTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_SetAttackPhaseEndDelay) == 0x000008, "Wrong alignment on ActionAttackBase_BP_SetAttackPhaseEndDelay");
static_assert(sizeof(ActionAttackBase_BP_SetAttackPhaseEndDelay) == 0x000020, "Wrong size on ActionAttackBase_BP_SetAttackPhaseEndDelay");
static_assert(offsetof(ActionAttackBase_BP_SetAttackPhaseEndDelay, SleepTime) == 0x000000, "Member 'ActionAttackBase_BP_SetAttackPhaseEndDelay::SleepTime' has a wrong offset!");
static_assert(offsetof(ActionAttackBase_BP_SetAttackPhaseEndDelay, LatentInfo) == 0x000008, "Member 'ActionAttackBase_BP_SetAttackPhaseEndDelay::LatentInfo' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_SetChargeEnabled
// 0x0001 (0x0001 - 0x0000)
struct ActionAttackBase_BP_SetChargeEnabled final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_SetChargeEnabled) == 0x000001, "Wrong alignment on ActionAttackBase_BP_SetChargeEnabled");
static_assert(sizeof(ActionAttackBase_BP_SetChargeEnabled) == 0x000001, "Wrong size on ActionAttackBase_BP_SetChargeEnabled");
static_assert(offsetof(ActionAttackBase_BP_SetChargeEnabled, Flag) == 0x000000, "Member 'ActionAttackBase_BP_SetChargeEnabled::Flag' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_SetEnableNagaraTurn
// 0x0001 (0x0001 - 0x0000)
struct ActionAttackBase_BP_SetEnableNagaraTurn final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_SetEnableNagaraTurn) == 0x000001, "Wrong alignment on ActionAttackBase_BP_SetEnableNagaraTurn");
static_assert(sizeof(ActionAttackBase_BP_SetEnableNagaraTurn) == 0x000001, "Wrong size on ActionAttackBase_BP_SetEnableNagaraTurn");
static_assert(offsetof(ActionAttackBase_BP_SetEnableNagaraTurn, Enable) == 0x000000, "Member 'ActionAttackBase_BP_SetEnableNagaraTurn::Enable' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_SetGrabDamage
// 0x0008 (0x0008 - 0x0000)
struct ActionAttackBase_BP_SetGrabDamage final
{
public:
	class FName                                   DamageParamName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_SetGrabDamage) == 0x000004, "Wrong alignment on ActionAttackBase_BP_SetGrabDamage");
static_assert(sizeof(ActionAttackBase_BP_SetGrabDamage) == 0x000008, "Wrong size on ActionAttackBase_BP_SetGrabDamage");
static_assert(offsetof(ActionAttackBase_BP_SetGrabDamage, DamageParamName) == 0x000000, "Member 'ActionAttackBase_BP_SetGrabDamage::DamageParamName' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_SetMovementSpeedDeltaRate
// 0x0004 (0x0004 - 0x0000)
struct ActionAttackBase_BP_SetMovementSpeedDeltaRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_SetMovementSpeedDeltaRate) == 0x000004, "Wrong alignment on ActionAttackBase_BP_SetMovementSpeedDeltaRate");
static_assert(sizeof(ActionAttackBase_BP_SetMovementSpeedDeltaRate) == 0x000004, "Wrong size on ActionAttackBase_BP_SetMovementSpeedDeltaRate");
static_assert(offsetof(ActionAttackBase_BP_SetMovementSpeedDeltaRate, Rate) == 0x000000, "Member 'ActionAttackBase_BP_SetMovementSpeedDeltaRate::Rate' has a wrong offset!");

// Function InGameModule.ActionAttackBase.PostSpawnProjectileBullet
// 0x0008 (0x0008 - 0x0000)
struct ActionAttackBase_PostSpawnProjectileBullet final
{
public:
	class ABullet*                                SpawnedBullet;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_PostSpawnProjectileBullet) == 0x000008, "Wrong alignment on ActionAttackBase_PostSpawnProjectileBullet");
static_assert(sizeof(ActionAttackBase_PostSpawnProjectileBullet) == 0x000008, "Wrong size on ActionAttackBase_PostSpawnProjectileBullet");
static_assert(offsetof(ActionAttackBase_PostSpawnProjectileBullet, SpawnedBullet) == 0x000000, "Member 'ActionAttackBase_PostSpawnProjectileBullet::SpawnedBullet' has a wrong offset!");

// Function InGameModule.ActionAttackBase.PostSpawnProjectileGenerator
// 0x0008 (0x0008 - 0x0000)
struct ActionAttackBase_PostSpawnProjectileGenerator final
{
public:
	class AProjectileGeneratorBattle*             SpawnedGenerator;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_PostSpawnProjectileGenerator) == 0x000008, "Wrong alignment on ActionAttackBase_PostSpawnProjectileGenerator");
static_assert(sizeof(ActionAttackBase_PostSpawnProjectileGenerator) == 0x000008, "Wrong size on ActionAttackBase_PostSpawnProjectileGenerator");
static_assert(offsetof(ActionAttackBase_PostSpawnProjectileGenerator, SpawnedGenerator) == 0x000000, "Member 'ActionAttackBase_PostSpawnProjectileGenerator::SpawnedGenerator' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_GetAttackComponent
// 0x0008 (0x0008 - 0x0000)
struct ActionAttackBase_BP_GetAttackComponent final
{
public:
	class UCharacterAttackComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_GetAttackComponent) == 0x000008, "Wrong alignment on ActionAttackBase_BP_GetAttackComponent");
static_assert(sizeof(ActionAttackBase_BP_GetAttackComponent) == 0x000008, "Wrong size on ActionAttackBase_BP_GetAttackComponent");
static_assert(offsetof(ActionAttackBase_BP_GetAttackComponent, ReturnValue) == 0x000000, "Member 'ActionAttackBase_BP_GetAttackComponent::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_GetAttackId
// 0x0001 (0x0001 - 0x0000)
struct ActionAttackBase_BP_GetAttackId final
{
public:
	EAttackId                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_GetAttackId) == 0x000001, "Wrong alignment on ActionAttackBase_BP_GetAttackId");
static_assert(sizeof(ActionAttackBase_BP_GetAttackId) == 0x000001, "Wrong size on ActionAttackBase_BP_GetAttackId");
static_assert(offsetof(ActionAttackBase_BP_GetAttackId, ReturnValue) == 0x000000, "Member 'ActionAttackBase_BP_GetAttackId::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_GetCurrentUniqueLevel
// 0x0004 (0x0004 - 0x0000)
struct ActionAttackBase_BP_GetCurrentUniqueLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_GetCurrentUniqueLevel) == 0x000004, "Wrong alignment on ActionAttackBase_BP_GetCurrentUniqueLevel");
static_assert(sizeof(ActionAttackBase_BP_GetCurrentUniqueLevel) == 0x000004, "Wrong size on ActionAttackBase_BP_GetCurrentUniqueLevel");
static_assert(offsetof(ActionAttackBase_BP_GetCurrentUniqueLevel, ReturnValue) == 0x000000, "Member 'ActionAttackBase_BP_GetCurrentUniqueLevel::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_GetMasterCharacter
// 0x0001 (0x0001 - 0x0000)
struct ActionAttackBase_BP_GetMasterCharacter final
{
public:
	ECharacterId                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_GetMasterCharacter) == 0x000001, "Wrong alignment on ActionAttackBase_BP_GetMasterCharacter");
static_assert(sizeof(ActionAttackBase_BP_GetMasterCharacter) == 0x000001, "Wrong size on ActionAttackBase_BP_GetMasterCharacter");
static_assert(offsetof(ActionAttackBase_BP_GetMasterCharacter, ReturnValue) == 0x000000, "Member 'ActionAttackBase_BP_GetMasterCharacter::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionAttackBase.BP_IsLaunchAttack
// 0x0001 (0x0001 - 0x0000)
struct ActionAttackBase_BP_IsLaunchAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackBase_BP_IsLaunchAttack) == 0x000001, "Wrong alignment on ActionAttackBase_BP_IsLaunchAttack");
static_assert(sizeof(ActionAttackBase_BP_IsLaunchAttack) == 0x000001, "Wrong size on ActionAttackBase_BP_IsLaunchAttack");
static_assert(offsetof(ActionAttackBase_BP_IsLaunchAttack, ReturnValue) == 0x000000, "Member 'ActionAttackBase_BP_IsLaunchAttack::ReturnValue' has a wrong offset!");

// Function InGameModule.JumpPadComponent.BeginOverlap_JumpPadComponent
// 0x00A8 (0x00A8 - 0x0000)
struct JumpPadComponent_BeginOverlap_JumpPadComponent final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(JumpPadComponent_BeginOverlap_JumpPadComponent) == 0x000008, "Wrong alignment on JumpPadComponent_BeginOverlap_JumpPadComponent");
static_assert(sizeof(JumpPadComponent_BeginOverlap_JumpPadComponent) == 0x0000A8, "Wrong size on JumpPadComponent_BeginOverlap_JumpPadComponent");
static_assert(offsetof(JumpPadComponent_BeginOverlap_JumpPadComponent, OverlappedComponent) == 0x000000, "Member 'JumpPadComponent_BeginOverlap_JumpPadComponent::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(JumpPadComponent_BeginOverlap_JumpPadComponent, OtherActor) == 0x000008, "Member 'JumpPadComponent_BeginOverlap_JumpPadComponent::OtherActor' has a wrong offset!");
static_assert(offsetof(JumpPadComponent_BeginOverlap_JumpPadComponent, OtherComp) == 0x000010, "Member 'JumpPadComponent_BeginOverlap_JumpPadComponent::OtherComp' has a wrong offset!");
static_assert(offsetof(JumpPadComponent_BeginOverlap_JumpPadComponent, OtherBodyIndex) == 0x000018, "Member 'JumpPadComponent_BeginOverlap_JumpPadComponent::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(JumpPadComponent_BeginOverlap_JumpPadComponent, bFromSweep) == 0x00001C, "Member 'JumpPadComponent_BeginOverlap_JumpPadComponent::bFromSweep' has a wrong offset!");
static_assert(offsetof(JumpPadComponent_BeginOverlap_JumpPadComponent, SweepResult) == 0x000020, "Member 'JumpPadComponent_BeginOverlap_JumpPadComponent::SweepResult' has a wrong offset!");

// Function InGameModule.JumpPadComponent.BP_BindOverlapEvents
// 0x0008 (0x0008 - 0x0000)
struct JumpPadComponent_BP_BindOverlapEvents final
{
public:
	class UShapeComponent*                        Hitshape;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JumpPadComponent_BP_BindOverlapEvents) == 0x000008, "Wrong alignment on JumpPadComponent_BP_BindOverlapEvents");
static_assert(sizeof(JumpPadComponent_BP_BindOverlapEvents) == 0x000008, "Wrong size on JumpPadComponent_BP_BindOverlapEvents");
static_assert(offsetof(JumpPadComponent_BP_BindOverlapEvents, Hitshape) == 0x000000, "Member 'JumpPadComponent_BP_BindOverlapEvents::Hitshape' has a wrong offset!");

// Function InGameModule.JumpPadComponent.EndOverlap_JumpPadComponent
// 0x0020 (0x0020 - 0x0000)
struct JumpPadComponent_EndOverlap_JumpPadComponent final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JumpPadComponent_EndOverlap_JumpPadComponent) == 0x000008, "Wrong alignment on JumpPadComponent_EndOverlap_JumpPadComponent");
static_assert(sizeof(JumpPadComponent_EndOverlap_JumpPadComponent) == 0x000020, "Wrong size on JumpPadComponent_EndOverlap_JumpPadComponent");
static_assert(offsetof(JumpPadComponent_EndOverlap_JumpPadComponent, OverlappedComponent) == 0x000000, "Member 'JumpPadComponent_EndOverlap_JumpPadComponent::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(JumpPadComponent_EndOverlap_JumpPadComponent, OtherActor) == 0x000008, "Member 'JumpPadComponent_EndOverlap_JumpPadComponent::OtherActor' has a wrong offset!");
static_assert(offsetof(JumpPadComponent_EndOverlap_JumpPadComponent, OtherComp) == 0x000010, "Member 'JumpPadComponent_EndOverlap_JumpPadComponent::OtherComp' has a wrong offset!");
static_assert(offsetof(JumpPadComponent_EndOverlap_JumpPadComponent, OtherBodyIndex) == 0x000018, "Member 'JumpPadComponent_EndOverlap_JumpPadComponent::OtherBodyIndex' has a wrong offset!");

// Function InGameModule.ActionAttackFinisher.BP_GetFirstTargetActor
// 0x0008 (0x0008 - 0x0000)
struct ActionAttackFinisher_BP_GetFirstTargetActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackFinisher_BP_GetFirstTargetActor) == 0x000008, "Wrong alignment on ActionAttackFinisher_BP_GetFirstTargetActor");
static_assert(sizeof(ActionAttackFinisher_BP_GetFirstTargetActor) == 0x000008, "Wrong size on ActionAttackFinisher_BP_GetFirstTargetActor");
static_assert(offsetof(ActionAttackFinisher_BP_GetFirstTargetActor, ReturnValue) == 0x000000, "Member 'ActionAttackFinisher_BP_GetFirstTargetActor::ReturnValue' has a wrong offset!");

// Function InGameModule.BattleEventEffectComponent.PlayEffect
// 0x0050 (0x0050 - 0x0000)
struct BattleEventEffectComponent_PlayEffect final
{
public:
	EBattleEventEffectType                        Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Trs;                                               // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0040(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleEventEffectComponent_PlayEffect) == 0x000010, "Wrong alignment on BattleEventEffectComponent_PlayEffect");
static_assert(sizeof(BattleEventEffectComponent_PlayEffect) == 0x000050, "Wrong size on BattleEventEffectComponent_PlayEffect");
static_assert(offsetof(BattleEventEffectComponent_PlayEffect, Type) == 0x000000, "Member 'BattleEventEffectComponent_PlayEffect::Type' has a wrong offset!");
static_assert(offsetof(BattleEventEffectComponent_PlayEffect, Trs) == 0x000010, "Member 'BattleEventEffectComponent_PlayEffect::Trs' has a wrong offset!");
static_assert(offsetof(BattleEventEffectComponent_PlayEffect, Tag) == 0x000040, "Member 'BattleEventEffectComponent_PlayEffect::Tag' has a wrong offset!");

// Function InGameModule.ActionAttackUseItem.BP_SetSupplyId
// 0x0008 (0x0008 - 0x0000)
struct ActionAttackUseItem_BP_SetSupplyId final
{
public:
	class FName                                   SupplyId;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackUseItem_BP_SetSupplyId) == 0x000004, "Wrong alignment on ActionAttackUseItem_BP_SetSupplyId");
static_assert(sizeof(ActionAttackUseItem_BP_SetSupplyId) == 0x000008, "Wrong size on ActionAttackUseItem_BP_SetSupplyId");
static_assert(offsetof(ActionAttackUseItem_BP_SetSupplyId, SupplyId) == 0x000000, "Member 'ActionAttackUseItem_BP_SetSupplyId::SupplyId' has a wrong offset!");

// Function InGameModule.ActionAttackUseItem.BP_GetSuuplyId
// 0x0008 (0x0008 - 0x0000)
struct ActionAttackUseItem_BP_GetSuuplyId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionAttackUseItem_BP_GetSuuplyId) == 0x000004, "Wrong alignment on ActionAttackUseItem_BP_GetSuuplyId");
static_assert(sizeof(ActionAttackUseItem_BP_GetSuuplyId) == 0x000008, "Wrong size on ActionAttackUseItem_BP_GetSuuplyId");
static_assert(offsetof(ActionAttackUseItem_BP_GetSuuplyId, ReturnValue) == 0x000000, "Member 'ActionAttackUseItem_BP_GetSuuplyId::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionDamageBase.BP_InitialTurnToDirection
// 0x0010 (0x0010 - 0x0000)
struct ActionDamageBase_BP_InitialTurnToDirection final
{
public:
	struct FVector                                DamageDirection;                                   // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageDirection                              FrontDirection;                                    // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActionDamageBase_BP_InitialTurnToDirection) == 0x000004, "Wrong alignment on ActionDamageBase_BP_InitialTurnToDirection");
static_assert(sizeof(ActionDamageBase_BP_InitialTurnToDirection) == 0x000010, "Wrong size on ActionDamageBase_BP_InitialTurnToDirection");
static_assert(offsetof(ActionDamageBase_BP_InitialTurnToDirection, DamageDirection) == 0x000000, "Member 'ActionDamageBase_BP_InitialTurnToDirection::DamageDirection' has a wrong offset!");
static_assert(offsetof(ActionDamageBase_BP_InitialTurnToDirection, FrontDirection) == 0x00000C, "Member 'ActionDamageBase_BP_InitialTurnToDirection::FrontDirection' has a wrong offset!");

// Function InGameModule.ActionDamageBase.BP_SetEnableRecover
// 0x0001 (0x0001 - 0x0000)
struct ActionDamageBase_BP_SetEnableRecover final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionDamageBase_BP_SetEnableRecover) == 0x000001, "Wrong alignment on ActionDamageBase_BP_SetEnableRecover");
static_assert(sizeof(ActionDamageBase_BP_SetEnableRecover) == 0x000001, "Wrong size on ActionDamageBase_BP_SetEnableRecover");
static_assert(offsetof(ActionDamageBase_BP_SetEnableRecover, bEnable) == 0x000000, "Member 'ActionDamageBase_BP_SetEnableRecover::bEnable' has a wrong offset!");

// Function InGameModule.ActionDamageBase.BP_SetPlayDamageVoice
// 0x0001 (0x0001 - 0x0000)
struct ActionDamageBase_BP_SetPlayDamageVoice final
{
public:
	bool                                          bPlayDamageVoice;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionDamageBase_BP_SetPlayDamageVoice) == 0x000001, "Wrong alignment on ActionDamageBase_BP_SetPlayDamageVoice");
static_assert(sizeof(ActionDamageBase_BP_SetPlayDamageVoice) == 0x000001, "Wrong size on ActionDamageBase_BP_SetPlayDamageVoice");
static_assert(offsetof(ActionDamageBase_BP_SetPlayDamageVoice, bPlayDamageVoice) == 0x000000, "Member 'ActionDamageBase_BP_SetPlayDamageVoice::bPlayDamageVoice' has a wrong offset!");

// Function InGameModule.ActionDamageBase.BP_SetSpeedAndRotationForDamageStrongBound
// 0x000C (0x000C - 0x0000)
struct ActionDamageBase_BP_SetSpeedAndRotationForDamageStrongBound final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionDamageBase_BP_SetSpeedAndRotationForDamageStrongBound) == 0x000004, "Wrong alignment on ActionDamageBase_BP_SetSpeedAndRotationForDamageStrongBound");
static_assert(sizeof(ActionDamageBase_BP_SetSpeedAndRotationForDamageStrongBound) == 0x00000C, "Wrong size on ActionDamageBase_BP_SetSpeedAndRotationForDamageStrongBound");
static_assert(offsetof(ActionDamageBase_BP_SetSpeedAndRotationForDamageStrongBound, Direction) == 0x000000, "Member 'ActionDamageBase_BP_SetSpeedAndRotationForDamageStrongBound::Direction' has a wrong offset!");

// Function InGameModule.ActionDamageBase.BP_ShiftDamageAction
// 0x0008 (0x0008 - 0x0000)
struct ActionDamageBase_BP_ShiftDamageAction final
{
public:
	class FName                                   DamageName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionDamageBase_BP_ShiftDamageAction) == 0x000004, "Wrong alignment on ActionDamageBase_BP_ShiftDamageAction");
static_assert(sizeof(ActionDamageBase_BP_ShiftDamageAction) == 0x000008, "Wrong size on ActionDamageBase_BP_ShiftDamageAction");
static_assert(offsetof(ActionDamageBase_BP_ShiftDamageAction, DamageName) == 0x000000, "Member 'ActionDamageBase_BP_ShiftDamageAction::DamageName' has a wrong offset!");

// Function InGameModule.ActionDamageBase.BP_GetDamageInfo
// 0x0080 (0x0080 - 0x0000)
struct ActionDamageBase_BP_GetDamageInfo final
{
public:
	struct FDamageInfo                            ReturnValue;                                       // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionDamageBase_BP_GetDamageInfo) == 0x000008, "Wrong alignment on ActionDamageBase_BP_GetDamageInfo");
static_assert(sizeof(ActionDamageBase_BP_GetDamageInfo) == 0x000080, "Wrong size on ActionDamageBase_BP_GetDamageInfo");
static_assert(offsetof(ActionDamageBase_BP_GetDamageInfo, ReturnValue) == 0x000000, "Member 'ActionDamageBase_BP_GetDamageInfo::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionDamageBase.BP_GetDamageParam
// 0x00A4 (0x00A4 - 0x0000)
struct ActionDamageBase_BP_GetDamageParam final
{
public:
	struct FDamageParam                           ReturnValue;                                       // 0x0000(0x00A4)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionDamageBase_BP_GetDamageParam) == 0x000004, "Wrong alignment on ActionDamageBase_BP_GetDamageParam");
static_assert(sizeof(ActionDamageBase_BP_GetDamageParam) == 0x0000A4, "Wrong size on ActionDamageBase_BP_GetDamageParam");
static_assert(offsetof(ActionDamageBase_BP_GetDamageParam, ReturnValue) == 0x000000, "Member 'ActionDamageBase_BP_GetDamageParam::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionDamageBase.BP_IsDead
// 0x0001 (0x0001 - 0x0000)
struct ActionDamageBase_BP_IsDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionDamageBase_BP_IsDead) == 0x000001, "Wrong alignment on ActionDamageBase_BP_IsDead");
static_assert(sizeof(ActionDamageBase_BP_IsDead) == 0x000001, "Wrong size on ActionDamageBase_BP_IsDead");
static_assert(offsetof(ActionDamageBase_BP_IsDead, ReturnValue) == 0x000000, "Member 'ActionDamageBase_BP_IsDead::ReturnValue' has a wrong offset!");

// Function InGameModule.DialogueWidget.OnBattleSequenceChanged
// 0x0001 (0x0001 - 0x0000)
struct DialogueWidget_OnBattleSequenceChanged final
{
public:
	EBattleSequence                               NewSequence;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DialogueWidget_OnBattleSequenceChanged) == 0x000001, "Wrong alignment on DialogueWidget_OnBattleSequenceChanged");
static_assert(sizeof(DialogueWidget_OnBattleSequenceChanged) == 0x000001, "Wrong size on DialogueWidget_OnBattleSequenceChanged");
static_assert(offsetof(DialogueWidget_OnBattleSequenceChanged, NewSequence) == 0x000000, "Member 'DialogueWidget_OnBattleSequenceChanged::NewSequence' has a wrong offset!");

// Function InGameModule.DialogueWidget.OnCharacterVoiceMessageReceived
// 0x0018 (0x0018 - 0x0000)
struct DialogueWidget_OnCharacterVoiceMessageReceived final
{
public:
	int16                                         SenderPlayerId;                                    // 0x0000(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InKeyForTable;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DialogueWidget_OnCharacterVoiceMessageReceived) == 0x000008, "Wrong alignment on DialogueWidget_OnCharacterVoiceMessageReceived");
static_assert(sizeof(DialogueWidget_OnCharacterVoiceMessageReceived) == 0x000018, "Wrong size on DialogueWidget_OnCharacterVoiceMessageReceived");
static_assert(offsetof(DialogueWidget_OnCharacterVoiceMessageReceived, SenderPlayerId) == 0x000000, "Member 'DialogueWidget_OnCharacterVoiceMessageReceived::SenderPlayerId' has a wrong offset!");
static_assert(offsetof(DialogueWidget_OnCharacterVoiceMessageReceived, InKeyForTable) == 0x000008, "Member 'DialogueWidget_OnCharacterVoiceMessageReceived::InKeyForTable' has a wrong offset!");

// Function InGameModule.DialogueWidget.PlayAllyBattleResultMessage
// 0x0010 (0x0010 - 0x0000)
struct DialogueWidget_PlayAllyBattleResultMessage final
{
public:
	const class ACharacterBattle*                 Victim;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ACharacterBattle*                 Aggriever;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DialogueWidget_PlayAllyBattleResultMessage) == 0x000008, "Wrong alignment on DialogueWidget_PlayAllyBattleResultMessage");
static_assert(sizeof(DialogueWidget_PlayAllyBattleResultMessage) == 0x000010, "Wrong size on DialogueWidget_PlayAllyBattleResultMessage");
static_assert(offsetof(DialogueWidget_PlayAllyBattleResultMessage, Victim) == 0x000000, "Member 'DialogueWidget_PlayAllyBattleResultMessage::Victim' has a wrong offset!");
static_assert(offsetof(DialogueWidget_PlayAllyBattleResultMessage, Aggriever) == 0x000008, "Member 'DialogueWidget_PlayAllyBattleResultMessage::Aggriever' has a wrong offset!");

// Function InGameModule.DialogueWidget.PlayAllyDyingMessage
// 0x0010 (0x0010 - 0x0000)
struct DialogueWidget_PlayAllyDyingMessage final
{
public:
	const class ACharacterBattle*                 Victim;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ACharacterBattle*                 Aggriever;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DialogueWidget_PlayAllyDyingMessage) == 0x000008, "Wrong alignment on DialogueWidget_PlayAllyDyingMessage");
static_assert(sizeof(DialogueWidget_PlayAllyDyingMessage) == 0x000010, "Wrong size on DialogueWidget_PlayAllyDyingMessage");
static_assert(offsetof(DialogueWidget_PlayAllyDyingMessage, Victim) == 0x000000, "Member 'DialogueWidget_PlayAllyDyingMessage::Victim' has a wrong offset!");
static_assert(offsetof(DialogueWidget_PlayAllyDyingMessage, Aggriever) == 0x000008, "Member 'DialogueWidget_PlayAllyDyingMessage::Aggriever' has a wrong offset!");

// Function InGameModule.DialogueWidget.PlayPlayerStateDeadVoice
// 0x0008 (0x0008 - 0x0000)
struct DialogueWidget_PlayPlayerStateDeadVoice final
{
public:
	class UAtomComponent*                         AtomComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DialogueWidget_PlayPlayerStateDeadVoice) == 0x000008, "Wrong alignment on DialogueWidget_PlayPlayerStateDeadVoice");
static_assert(sizeof(DialogueWidget_PlayPlayerStateDeadVoice) == 0x000008, "Wrong size on DialogueWidget_PlayPlayerStateDeadVoice");
static_assert(offsetof(DialogueWidget_PlayPlayerStateDeadVoice, AtomComponent) == 0x000000, "Member 'DialogueWidget_PlayPlayerStateDeadVoice::AtomComponent' has a wrong offset!");

// Function InGameModule.DialogueWidget.RemoveFromMessageArray
// 0x0008 (0x0008 - 0x0000)
struct DialogueWidget_RemoveFromMessageArray final
{
public:
	class UDialogueTextBlock*                     TargetMessage;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DialogueWidget_RemoveFromMessageArray) == 0x000008, "Wrong alignment on DialogueWidget_RemoveFromMessageArray");
static_assert(sizeof(DialogueWidget_RemoveFromMessageArray) == 0x000008, "Wrong size on DialogueWidget_RemoveFromMessageArray");
static_assert(offsetof(DialogueWidget_RemoveFromMessageArray, TargetMessage) == 0x000000, "Member 'DialogueWidget_RemoveFromMessageArray::TargetMessage' has a wrong offset!");

// Function InGameModule.CharacterLinkedAnimationControlComponent.BP_AttachToBullet
// 0x0008 (0x0008 - 0x0000)
struct CharacterLinkedAnimationControlComponent_BP_AttachToBullet final
{
public:
	class ACustomBullet*                          Bullet;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterLinkedAnimationControlComponent_BP_AttachToBullet) == 0x000008, "Wrong alignment on CharacterLinkedAnimationControlComponent_BP_AttachToBullet");
static_assert(sizeof(CharacterLinkedAnimationControlComponent_BP_AttachToBullet) == 0x000008, "Wrong size on CharacterLinkedAnimationControlComponent_BP_AttachToBullet");
static_assert(offsetof(CharacterLinkedAnimationControlComponent_BP_AttachToBullet, Bullet) == 0x000000, "Member 'CharacterLinkedAnimationControlComponent_BP_AttachToBullet::Bullet' has a wrong offset!");

// Function InGameModule.CharacterLinkedAnimationControlComponent.BP_AttachToCharacter
// 0x0010 (0x0010 - 0x0000)
struct CharacterLinkedAnimationControlComponent_BP_AttachToCharacter final
{
public:
	class ACharacterBattle*                       Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterLinkedAnimationControlComponent_BP_AttachToCharacter) == 0x000008, "Wrong alignment on CharacterLinkedAnimationControlComponent_BP_AttachToCharacter");
static_assert(sizeof(CharacterLinkedAnimationControlComponent_BP_AttachToCharacter) == 0x000010, "Wrong size on CharacterLinkedAnimationControlComponent_BP_AttachToCharacter");
static_assert(offsetof(CharacterLinkedAnimationControlComponent_BP_AttachToCharacter, Character) == 0x000000, "Member 'CharacterLinkedAnimationControlComponent_BP_AttachToCharacter::Character' has a wrong offset!");
static_assert(offsetof(CharacterLinkedAnimationControlComponent_BP_AttachToCharacter, SocketName) == 0x000008, "Member 'CharacterLinkedAnimationControlComponent_BP_AttachToCharacter::SocketName' has a wrong offset!");

// Function InGameModule.CharacterLinkedAnimationControlComponent.BP_LinkAnimation
// 0x0008 (0x0008 - 0x0000)
struct CharacterLinkedAnimationControlComponent_BP_LinkAnimation final
{
public:
	TSubclassOf<class UAnimInstanceAttack>        InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterLinkedAnimationControlComponent_BP_LinkAnimation) == 0x000008, "Wrong alignment on CharacterLinkedAnimationControlComponent_BP_LinkAnimation");
static_assert(sizeof(CharacterLinkedAnimationControlComponent_BP_LinkAnimation) == 0x000008, "Wrong size on CharacterLinkedAnimationControlComponent_BP_LinkAnimation");
static_assert(offsetof(CharacterLinkedAnimationControlComponent_BP_LinkAnimation, InClass) == 0x000000, "Member 'CharacterLinkedAnimationControlComponent_BP_LinkAnimation::InClass' has a wrong offset!");

// Function InGameModule.CharacterLinkedAnimationControlComponent.BP_LinkAnimationWithBlend
// 0x0010 (0x0010 - 0x0000)
struct CharacterLinkedAnimationControlComponent_BP_LinkAnimationWithBlend final
{
public:
	TSubclassOf<class UAnimInstanceAttack>        InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterLinkedAnimationControlComponent_BP_LinkAnimationWithBlend) == 0x000008, "Wrong alignment on CharacterLinkedAnimationControlComponent_BP_LinkAnimationWithBlend");
static_assert(sizeof(CharacterLinkedAnimationControlComponent_BP_LinkAnimationWithBlend) == 0x000010, "Wrong size on CharacterLinkedAnimationControlComponent_BP_LinkAnimationWithBlend");
static_assert(offsetof(CharacterLinkedAnimationControlComponent_BP_LinkAnimationWithBlend, InClass) == 0x000000, "Member 'CharacterLinkedAnimationControlComponent_BP_LinkAnimationWithBlend::InClass' has a wrong offset!");
static_assert(offsetof(CharacterLinkedAnimationControlComponent_BP_LinkAnimationWithBlend, BlendTime) == 0x000008, "Member 'CharacterLinkedAnimationControlComponent_BP_LinkAnimationWithBlend::BlendTime' has a wrong offset!");

// Function InGameModule.CharacterLinkedAnimationControlComponent.BP_OnHitToCharacter
// 0x0010 (0x0010 - 0x0000)
struct CharacterLinkedAnimationControlComponent_BP_OnHitToCharacter final
{
public:
	class ACharacterBattle*                       Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterLinkedAnimationControlComponent_BP_OnHitToCharacter) == 0x000008, "Wrong alignment on CharacterLinkedAnimationControlComponent_BP_OnHitToCharacter");
static_assert(sizeof(CharacterLinkedAnimationControlComponent_BP_OnHitToCharacter) == 0x000010, "Wrong size on CharacterLinkedAnimationControlComponent_BP_OnHitToCharacter");
static_assert(offsetof(CharacterLinkedAnimationControlComponent_BP_OnHitToCharacter, Character) == 0x000000, "Member 'CharacterLinkedAnimationControlComponent_BP_OnHitToCharacter::Character' has a wrong offset!");
static_assert(offsetof(CharacterLinkedAnimationControlComponent_BP_OnHitToCharacter, SocketName) == 0x000008, "Member 'CharacterLinkedAnimationControlComponent_BP_OnHitToCharacter::SocketName' has a wrong offset!");

// Function InGameModule.CharacterLinkedAnimationControlComponent.BP_SetTargetLocation
// 0x000C (0x000C - 0x0000)
struct CharacterLinkedAnimationControlComponent_BP_SetTargetLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterLinkedAnimationControlComponent_BP_SetTargetLocation) == 0x000004, "Wrong alignment on CharacterLinkedAnimationControlComponent_BP_SetTargetLocation");
static_assert(sizeof(CharacterLinkedAnimationControlComponent_BP_SetTargetLocation) == 0x00000C, "Wrong size on CharacterLinkedAnimationControlComponent_BP_SetTargetLocation");
static_assert(offsetof(CharacterLinkedAnimationControlComponent_BP_SetTargetLocation, Location) == 0x000000, "Member 'CharacterLinkedAnimationControlComponent_BP_SetTargetLocation::Location' has a wrong offset!");

// Function InGameModule.CharacterLinkedAnimationControlComponent.BP_UnlinkAnimationWithBlend
// 0x0004 (0x0004 - 0x0000)
struct CharacterLinkedAnimationControlComponent_BP_UnlinkAnimationWithBlend final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterLinkedAnimationControlComponent_BP_UnlinkAnimationWithBlend) == 0x000004, "Wrong alignment on CharacterLinkedAnimationControlComponent_BP_UnlinkAnimationWithBlend");
static_assert(sizeof(CharacterLinkedAnimationControlComponent_BP_UnlinkAnimationWithBlend) == 0x000004, "Wrong size on CharacterLinkedAnimationControlComponent_BP_UnlinkAnimationWithBlend");
static_assert(offsetof(CharacterLinkedAnimationControlComponent_BP_UnlinkAnimationWithBlend, BlendTime) == 0x000000, "Member 'CharacterLinkedAnimationControlComponent_BP_UnlinkAnimationWithBlend::BlendTime' has a wrong offset!");

// Function InGameModule.ActionOpenBox.BP_SetEnablePoisonMistReductionEvent
// 0x0001 (0x0001 - 0x0000)
struct ActionOpenBox_BP_SetEnablePoisonMistReductionEvent final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionOpenBox_BP_SetEnablePoisonMistReductionEvent) == 0x000001, "Wrong alignment on ActionOpenBox_BP_SetEnablePoisonMistReductionEvent");
static_assert(sizeof(ActionOpenBox_BP_SetEnablePoisonMistReductionEvent) == 0x000001, "Wrong size on ActionOpenBox_BP_SetEnablePoisonMistReductionEvent");
static_assert(offsetof(ActionOpenBox_BP_SetEnablePoisonMistReductionEvent, bEnable) == 0x000000, "Member 'ActionOpenBox_BP_SetEnablePoisonMistReductionEvent::bEnable' has a wrong offset!");

// Function InGameModule.ActionOpenBox.BP_GetRequiredOpenTime
// 0x0004 (0x0004 - 0x0000)
struct ActionOpenBox_BP_GetRequiredOpenTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionOpenBox_BP_GetRequiredOpenTime) == 0x000004, "Wrong alignment on ActionOpenBox_BP_GetRequiredOpenTime");
static_assert(sizeof(ActionOpenBox_BP_GetRequiredOpenTime) == 0x000004, "Wrong size on ActionOpenBox_BP_GetRequiredOpenTime");
static_assert(offsetof(ActionOpenBox_BP_GetRequiredOpenTime, ReturnValue) == 0x000000, "Member 'ActionOpenBox_BP_GetRequiredOpenTime::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionOpenBox.BP_IsLarge
// 0x0010 (0x0010 - 0x0000)
struct ActionOpenBox_BP_IsLarge final
{
public:
	const class AActor*                           ActionTarget;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActionOpenBox_BP_IsLarge) == 0x000008, "Wrong alignment on ActionOpenBox_BP_IsLarge");
static_assert(sizeof(ActionOpenBox_BP_IsLarge) == 0x000010, "Wrong size on ActionOpenBox_BP_IsLarge");
static_assert(offsetof(ActionOpenBox_BP_IsLarge, ActionTarget) == 0x000000, "Member 'ActionOpenBox_BP_IsLarge::ActionTarget' has a wrong offset!");
static_assert(offsetof(ActionOpenBox_BP_IsLarge, ReturnValue) == 0x000008, "Member 'ActionOpenBox_BP_IsLarge::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionParkourJump.BP_GetDestHeight
// 0x0004 (0x0004 - 0x0000)
struct ActionParkourJump_BP_GetDestHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionParkourJump_BP_GetDestHeight) == 0x000004, "Wrong alignment on ActionParkourJump_BP_GetDestHeight");
static_assert(sizeof(ActionParkourJump_BP_GetDestHeight) == 0x000004, "Wrong size on ActionParkourJump_BP_GetDestHeight");
static_assert(offsetof(ActionParkourJump_BP_GetDestHeight, ReturnValue) == 0x000000, "Member 'ActionParkourJump_BP_GetDestHeight::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionRecoverAlly.BP_GetRequiredRecoverTime
// 0x0004 (0x0004 - 0x0000)
struct ActionRecoverAlly_BP_GetRequiredRecoverTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionRecoverAlly_BP_GetRequiredRecoverTime) == 0x000004, "Wrong alignment on ActionRecoverAlly_BP_GetRequiredRecoverTime");
static_assert(sizeof(ActionRecoverAlly_BP_GetRequiredRecoverTime) == 0x000004, "Wrong size on ActionRecoverAlly_BP_GetRequiredRecoverTime");
static_assert(offsetof(ActionRecoverAlly_BP_GetRequiredRecoverTime, ReturnValue) == 0x000000, "Member 'ActionRecoverAlly_BP_GetRequiredRecoverTime::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionRecoverCitizen.BP_GetRequiredRecoverTime
// 0x0004 (0x0004 - 0x0000)
struct ActionRecoverCitizen_BP_GetRequiredRecoverTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionRecoverCitizen_BP_GetRequiredRecoverTime) == 0x000004, "Wrong alignment on ActionRecoverCitizen_BP_GetRequiredRecoverTime");
static_assert(sizeof(ActionRecoverCitizen_BP_GetRequiredRecoverTime) == 0x000004, "Wrong size on ActionRecoverCitizen_BP_GetRequiredRecoverTime");
static_assert(offsetof(ActionRecoverCitizen_BP_GetRequiredRecoverTime, ReturnValue) == 0x000000, "Member 'ActionRecoverCitizen_BP_GetRequiredRecoverTime::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionRespawnAlly.BP_GetRequiredRespawnTime
// 0x0004 (0x0004 - 0x0000)
struct ActionRespawnAlly_BP_GetRequiredRespawnTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionRespawnAlly_BP_GetRequiredRespawnTime) == 0x000004, "Wrong alignment on ActionRespawnAlly_BP_GetRequiredRespawnTime");
static_assert(sizeof(ActionRespawnAlly_BP_GetRequiredRespawnTime) == 0x000004, "Wrong size on ActionRespawnAlly_BP_GetRequiredRespawnTime");
static_assert(offsetof(ActionRespawnAlly_BP_GetRequiredRespawnTime, ReturnValue) == 0x000000, "Member 'ActionRespawnAlly_BP_GetRequiredRespawnTime::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionScoutEnemy.BP_OnScoutRequestCompleteEvent
// 0x0001 (0x0001 - 0x0000)
struct ActionScoutEnemy_BP_OnScoutRequestCompleteEvent final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionScoutEnemy_BP_OnScoutRequestCompleteEvent) == 0x000001, "Wrong alignment on ActionScoutEnemy_BP_OnScoutRequestCompleteEvent");
static_assert(sizeof(ActionScoutEnemy_BP_OnScoutRequestCompleteEvent) == 0x000001, "Wrong size on ActionScoutEnemy_BP_OnScoutRequestCompleteEvent");
static_assert(offsetof(ActionScoutEnemy_BP_OnScoutRequestCompleteEvent, bSuccess) == 0x000000, "Member 'ActionScoutEnemy_BP_OnScoutRequestCompleteEvent::bSuccess' has a wrong offset!");

// Function InGameModule.ActionScoutEnemy.BP_GetRequiredRecoverTime
// 0x0004 (0x0004 - 0x0000)
struct ActionScoutEnemy_BP_GetRequiredRecoverTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionScoutEnemy_BP_GetRequiredRecoverTime) == 0x000004, "Wrong alignment on ActionScoutEnemy_BP_GetRequiredRecoverTime");
static_assert(sizeof(ActionScoutEnemy_BP_GetRequiredRecoverTime) == 0x000004, "Wrong size on ActionScoutEnemy_BP_GetRequiredRecoverTime");
static_assert(offsetof(ActionScoutEnemy_BP_GetRequiredRecoverTime, ReturnValue) == 0x000000, "Member 'ActionScoutEnemy_BP_GetRequiredRecoverTime::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionThrowned.BP_GetThrownedDirection
// 0x000C (0x000C - 0x0000)
struct ActionThrowned_BP_GetThrownedDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionThrowned_BP_GetThrownedDirection) == 0x000004, "Wrong alignment on ActionThrowned_BP_GetThrownedDirection");
static_assert(sizeof(ActionThrowned_BP_GetThrownedDirection) == 0x00000C, "Wrong size on ActionThrowned_BP_GetThrownedDirection");
static_assert(offsetof(ActionThrowned_BP_GetThrownedDirection, ReturnValue) == 0x000000, "Member 'ActionThrowned_BP_GetThrownedDirection::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterBattleVoiceComponent.BP_PlayCharacterVoice
// 0x0018 (0x0018 - 0x0000)
struct CharacterBattleVoiceComponent_BP_PlayCharacterVoice final
{
public:
	class FString                                 VoiceName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseWholeCueName;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllMember;                                        // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterBattleVoiceComponent_BP_PlayCharacterVoice) == 0x000008, "Wrong alignment on CharacterBattleVoiceComponent_BP_PlayCharacterVoice");
static_assert(sizeof(CharacterBattleVoiceComponent_BP_PlayCharacterVoice) == 0x000018, "Wrong size on CharacterBattleVoiceComponent_BP_PlayCharacterVoice");
static_assert(offsetof(CharacterBattleVoiceComponent_BP_PlayCharacterVoice, VoiceName) == 0x000000, "Member 'CharacterBattleVoiceComponent_BP_PlayCharacterVoice::VoiceName' has a wrong offset!");
static_assert(offsetof(CharacterBattleVoiceComponent_BP_PlayCharacterVoice, UseWholeCueName) == 0x000010, "Member 'CharacterBattleVoiceComponent_BP_PlayCharacterVoice::UseWholeCueName' has a wrong offset!");
static_assert(offsetof(CharacterBattleVoiceComponent_BP_PlayCharacterVoice, bAllMember) == 0x000011, "Member 'CharacterBattleVoiceComponent_BP_PlayCharacterVoice::bAllMember' has a wrong offset!");

// Function InGameModule.CharacterBattleVoiceComponent.BP_PlayDamageVoice
// 0x0090 (0x0090 - 0x0000)
struct CharacterBattleVoiceComponent_BP_PlayDamageVoice final
{
public:
	class FString                                 VoiceName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDamageInfo                            DamageInfo;                                        // 0x0010(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattleVoiceComponent_BP_PlayDamageVoice) == 0x000008, "Wrong alignment on CharacterBattleVoiceComponent_BP_PlayDamageVoice");
static_assert(sizeof(CharacterBattleVoiceComponent_BP_PlayDamageVoice) == 0x000090, "Wrong size on CharacterBattleVoiceComponent_BP_PlayDamageVoice");
static_assert(offsetof(CharacterBattleVoiceComponent_BP_PlayDamageVoice, VoiceName) == 0x000000, "Member 'CharacterBattleVoiceComponent_BP_PlayDamageVoice::VoiceName' has a wrong offset!");
static_assert(offsetof(CharacterBattleVoiceComponent_BP_PlayDamageVoice, DamageInfo) == 0x000010, "Member 'CharacterBattleVoiceComponent_BP_PlayDamageVoice::DamageInfo' has a wrong offset!");

// Function InGameModule.CharacterBattleVoiceComponent.BP_SetIgnoreNotifyEvent
// 0x0001 (0x0001 - 0x0000)
struct CharacterBattleVoiceComponent_BP_SetIgnoreNotifyEvent final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattleVoiceComponent_BP_SetIgnoreNotifyEvent) == 0x000001, "Wrong alignment on CharacterBattleVoiceComponent_BP_SetIgnoreNotifyEvent");
static_assert(sizeof(CharacterBattleVoiceComponent_BP_SetIgnoreNotifyEvent) == 0x000001, "Wrong size on CharacterBattleVoiceComponent_BP_SetIgnoreNotifyEvent");
static_assert(offsetof(CharacterBattleVoiceComponent_BP_SetIgnoreNotifyEvent, Flag) == 0x000000, "Member 'CharacterBattleVoiceComponent_BP_SetIgnoreNotifyEvent::Flag' has a wrong offset!");

// Function InGameModule.ActionWallCrawl.BP_SetWallCrawlState
// 0x0001 (0x0001 - 0x0000)
struct ActionWallCrawl_BP_SetWallCrawlState final
{
public:
	EWallCrawlState                               State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionWallCrawl_BP_SetWallCrawlState) == 0x000001, "Wrong alignment on ActionWallCrawl_BP_SetWallCrawlState");
static_assert(sizeof(ActionWallCrawl_BP_SetWallCrawlState) == 0x000001, "Wrong size on ActionWallCrawl_BP_SetWallCrawlState");
static_assert(offsetof(ActionWallCrawl_BP_SetWallCrawlState, State) == 0x000000, "Member 'ActionWallCrawl_BP_SetWallCrawlState::State' has a wrong offset!");

// Function InGameModule.ActionWallCrawl.BP_GetDestForwardDirection
// 0x000C (0x000C - 0x0000)
struct ActionWallCrawl_BP_GetDestForwardDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionWallCrawl_BP_GetDestForwardDirection) == 0x000004, "Wrong alignment on ActionWallCrawl_BP_GetDestForwardDirection");
static_assert(sizeof(ActionWallCrawl_BP_GetDestForwardDirection) == 0x00000C, "Wrong size on ActionWallCrawl_BP_GetDestForwardDirection");
static_assert(offsetof(ActionWallCrawl_BP_GetDestForwardDirection, ReturnValue) == 0x000000, "Member 'ActionWallCrawl_BP_GetDestForwardDirection::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionWallCrawl.BP_GetDestVerticalDirection
// 0x000C (0x000C - 0x0000)
struct ActionWallCrawl_BP_GetDestVerticalDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionWallCrawl_BP_GetDestVerticalDirection) == 0x000004, "Wrong alignment on ActionWallCrawl_BP_GetDestVerticalDirection");
static_assert(sizeof(ActionWallCrawl_BP_GetDestVerticalDirection) == 0x00000C, "Wrong size on ActionWallCrawl_BP_GetDestVerticalDirection");
static_assert(offsetof(ActionWallCrawl_BP_GetDestVerticalDirection, ReturnValue) == 0x000000, "Member 'ActionWallCrawl_BP_GetDestVerticalDirection::ReturnValue' has a wrong offset!");

// Function InGameModule.ActionWallCrawl.BP_GetWallCrawlState
// 0x0001 (0x0001 - 0x0000)
struct ActionWallCrawl_BP_GetWallCrawlState final
{
public:
	EWallCrawlState                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionWallCrawl_BP_GetWallCrawlState) == 0x000001, "Wrong alignment on ActionWallCrawl_BP_GetWallCrawlState");
static_assert(sizeof(ActionWallCrawl_BP_GetWallCrawlState) == 0x000001, "Wrong size on ActionWallCrawl_BP_GetWallCrawlState");
static_assert(offsetof(ActionWallCrawl_BP_GetWallCrawlState, ReturnValue) == 0x000000, "Member 'ActionWallCrawl_BP_GetWallCrawlState::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.BP_ResetLimit
// 0x0008 (0x0008 - 0x0000)
struct Bullet_BP_ResetLimit final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bullet_BP_ResetLimit) == 0x000004, "Wrong alignment on Bullet_BP_ResetLimit");
static_assert(sizeof(Bullet_BP_ResetLimit) == 0x000008, "Wrong size on Bullet_BP_ResetLimit");
static_assert(offsetof(Bullet_BP_ResetLimit, Time) == 0x000000, "Member 'Bullet_BP_ResetLimit::Time' has a wrong offset!");
static_assert(offsetof(Bullet_BP_ResetLimit, ReturnValue) == 0x000004, "Member 'Bullet_BP_ResetLimit::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.BP_SetVelocity
// 0x0018 (0x0018 - 0x0000)
struct Bullet_BP_SetVelocity final
{
public:
	struct FVector                                NewVelocity;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bullet_BP_SetVelocity) == 0x000004, "Wrong alignment on Bullet_BP_SetVelocity");
static_assert(sizeof(Bullet_BP_SetVelocity) == 0x000018, "Wrong size on Bullet_BP_SetVelocity");
static_assert(offsetof(Bullet_BP_SetVelocity, NewVelocity) == 0x000000, "Member 'Bullet_BP_SetVelocity::NewVelocity' has a wrong offset!");
static_assert(offsetof(Bullet_BP_SetVelocity, ReturnValue) == 0x00000C, "Member 'Bullet_BP_SetVelocity::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.BP_TimeUp
// 0x0001 (0x0001 - 0x0000)
struct Bullet_BP_TimeUp final
{
public:
	EBulletDestroyType                            DestroyType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bullet_BP_TimeUp) == 0x000001, "Wrong alignment on Bullet_BP_TimeUp");
static_assert(sizeof(Bullet_BP_TimeUp) == 0x000001, "Wrong size on Bullet_BP_TimeUp");
static_assert(offsetof(Bullet_BP_TimeUp, DestroyType) == 0x000000, "Member 'Bullet_BP_TimeUp::DestroyType' has a wrong offset!");

// Function InGameModule.Bullet.OnBackgroundHitCountZero
// 0x0088 (0x0088 - 0x0000)
struct Bullet_OnBackgroundHitCountZero final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bullet_OnBackgroundHitCountZero) == 0x000004, "Wrong alignment on Bullet_OnBackgroundHitCountZero");
static_assert(sizeof(Bullet_OnBackgroundHitCountZero) == 0x000088, "Wrong size on Bullet_OnBackgroundHitCountZero");
static_assert(offsetof(Bullet_OnBackgroundHitCountZero, Hit) == 0x000000, "Member 'Bullet_OnBackgroundHitCountZero::Hit' has a wrong offset!");

// Function InGameModule.Bullet.OnCharacterHitCountZero
// 0x0088 (0x0088 - 0x0000)
struct Bullet_OnCharacterHitCountZero final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bullet_OnCharacterHitCountZero) == 0x000004, "Wrong alignment on Bullet_OnCharacterHitCountZero");
static_assert(sizeof(Bullet_OnCharacterHitCountZero) == 0x000088, "Wrong size on Bullet_OnCharacterHitCountZero");
static_assert(offsetof(Bullet_OnCharacterHitCountZero, Hit) == 0x000000, "Member 'Bullet_OnCharacterHitCountZero::Hit' has a wrong offset!");

// Function InGameModule.Bullet.OnCollisionComponentDestroyed
// 0x0008 (0x0008 - 0x0000)
struct Bullet_OnCollisionComponentDestroyed final
{
public:
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bullet_OnCollisionComponentDestroyed) == 0x000008, "Wrong alignment on Bullet_OnCollisionComponentDestroyed");
static_assert(sizeof(Bullet_OnCollisionComponentDestroyed) == 0x000008, "Wrong size on Bullet_OnCollisionComponentDestroyed");
static_assert(offsetof(Bullet_OnCollisionComponentDestroyed, PrimitiveComponent) == 0x000000, "Member 'Bullet_OnCollisionComponentDestroyed::PrimitiveComponent' has a wrong offset!");

// Function InGameModule.Bullet.OnFirstHitBackground
// 0x00B0 (0x00B0 - 0x0000)
struct Bullet_OnFirstHitBackground final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00AC(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Bullet_OnFirstHitBackground) == 0x000008, "Wrong alignment on Bullet_OnFirstHitBackground");
static_assert(sizeof(Bullet_OnFirstHitBackground) == 0x0000B0, "Wrong size on Bullet_OnFirstHitBackground");
static_assert(offsetof(Bullet_OnFirstHitBackground, HitComponent) == 0x000000, "Member 'Bullet_OnFirstHitBackground::HitComponent' has a wrong offset!");
static_assert(offsetof(Bullet_OnFirstHitBackground, OtherActor) == 0x000008, "Member 'Bullet_OnFirstHitBackground::OtherActor' has a wrong offset!");
static_assert(offsetof(Bullet_OnFirstHitBackground, OtherComp) == 0x000010, "Member 'Bullet_OnFirstHitBackground::OtherComp' has a wrong offset!");
static_assert(offsetof(Bullet_OnFirstHitBackground, NormalImpulse) == 0x000018, "Member 'Bullet_OnFirstHitBackground::NormalImpulse' has a wrong offset!");
static_assert(offsetof(Bullet_OnFirstHitBackground, Hit) == 0x000024, "Member 'Bullet_OnFirstHitBackground::Hit' has a wrong offset!");
static_assert(offsetof(Bullet_OnFirstHitBackground, ReturnValue) == 0x0000AC, "Member 'Bullet_OnFirstHitBackground::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.OnFirstHitCharacter
// 0x00B0 (0x00B0 - 0x0000)
struct Bullet_OnFirstHitCharacter final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00AC(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Bullet_OnFirstHitCharacter) == 0x000008, "Wrong alignment on Bullet_OnFirstHitCharacter");
static_assert(sizeof(Bullet_OnFirstHitCharacter) == 0x0000B0, "Wrong size on Bullet_OnFirstHitCharacter");
static_assert(offsetof(Bullet_OnFirstHitCharacter, HitComponent) == 0x000000, "Member 'Bullet_OnFirstHitCharacter::HitComponent' has a wrong offset!");
static_assert(offsetof(Bullet_OnFirstHitCharacter, OtherActor) == 0x000008, "Member 'Bullet_OnFirstHitCharacter::OtherActor' has a wrong offset!");
static_assert(offsetof(Bullet_OnFirstHitCharacter, OtherComp) == 0x000010, "Member 'Bullet_OnFirstHitCharacter::OtherComp' has a wrong offset!");
static_assert(offsetof(Bullet_OnFirstHitCharacter, NormalImpulse) == 0x000018, "Member 'Bullet_OnFirstHitCharacter::NormalImpulse' has a wrong offset!");
static_assert(offsetof(Bullet_OnFirstHitCharacter, Hit) == 0x000024, "Member 'Bullet_OnFirstHitCharacter::Hit' has a wrong offset!");
static_assert(offsetof(Bullet_OnFirstHitCharacter, ReturnValue) == 0x0000AC, "Member 'Bullet_OnFirstHitCharacter::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.OnHitBackground
// 0x00B0 (0x00B0 - 0x0000)
struct Bullet_OnHitBackground final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00AC(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Bullet_OnHitBackground) == 0x000008, "Wrong alignment on Bullet_OnHitBackground");
static_assert(sizeof(Bullet_OnHitBackground) == 0x0000B0, "Wrong size on Bullet_OnHitBackground");
static_assert(offsetof(Bullet_OnHitBackground, HitComponent) == 0x000000, "Member 'Bullet_OnHitBackground::HitComponent' has a wrong offset!");
static_assert(offsetof(Bullet_OnHitBackground, OtherActor) == 0x000008, "Member 'Bullet_OnHitBackground::OtherActor' has a wrong offset!");
static_assert(offsetof(Bullet_OnHitBackground, OtherComp) == 0x000010, "Member 'Bullet_OnHitBackground::OtherComp' has a wrong offset!");
static_assert(offsetof(Bullet_OnHitBackground, NormalImpulse) == 0x000018, "Member 'Bullet_OnHitBackground::NormalImpulse' has a wrong offset!");
static_assert(offsetof(Bullet_OnHitBackground, Hit) == 0x000024, "Member 'Bullet_OnHitBackground::Hit' has a wrong offset!");
static_assert(offsetof(Bullet_OnHitBackground, ReturnValue) == 0x0000AC, "Member 'Bullet_OnHitBackground::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.OnHitCharacter
// 0x00B0 (0x00B0 - 0x0000)
struct Bullet_OnHitCharacter final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00AC(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Bullet_OnHitCharacter) == 0x000008, "Wrong alignment on Bullet_OnHitCharacter");
static_assert(sizeof(Bullet_OnHitCharacter) == 0x0000B0, "Wrong size on Bullet_OnHitCharacter");
static_assert(offsetof(Bullet_OnHitCharacter, HitComponent) == 0x000000, "Member 'Bullet_OnHitCharacter::HitComponent' has a wrong offset!");
static_assert(offsetof(Bullet_OnHitCharacter, OtherActor) == 0x000008, "Member 'Bullet_OnHitCharacter::OtherActor' has a wrong offset!");
static_assert(offsetof(Bullet_OnHitCharacter, OtherComp) == 0x000010, "Member 'Bullet_OnHitCharacter::OtherComp' has a wrong offset!");
static_assert(offsetof(Bullet_OnHitCharacter, NormalImpulse) == 0x000018, "Member 'Bullet_OnHitCharacter::NormalImpulse' has a wrong offset!");
static_assert(offsetof(Bullet_OnHitCharacter, Hit) == 0x000024, "Member 'Bullet_OnHitCharacter::Hit' has a wrong offset!");
static_assert(offsetof(Bullet_OnHitCharacter, ReturnValue) == 0x0000AC, "Member 'Bullet_OnHitCharacter::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.OnHitReceiveBackground
// 0x00B0 (0x00B0 - 0x0000)
struct Bullet_OnHitReceiveBackground final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EHitThrowType                                 ReturnValue;                                       // 0x00AC(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Bullet_OnHitReceiveBackground) == 0x000008, "Wrong alignment on Bullet_OnHitReceiveBackground");
static_assert(sizeof(Bullet_OnHitReceiveBackground) == 0x0000B0, "Wrong size on Bullet_OnHitReceiveBackground");
static_assert(offsetof(Bullet_OnHitReceiveBackground, HitComponent) == 0x000000, "Member 'Bullet_OnHitReceiveBackground::HitComponent' has a wrong offset!");
static_assert(offsetof(Bullet_OnHitReceiveBackground, OtherActor) == 0x000008, "Member 'Bullet_OnHitReceiveBackground::OtherActor' has a wrong offset!");
static_assert(offsetof(Bullet_OnHitReceiveBackground, OtherComp) == 0x000010, "Member 'Bullet_OnHitReceiveBackground::OtherComp' has a wrong offset!");
static_assert(offsetof(Bullet_OnHitReceiveBackground, NormalImpulse) == 0x000018, "Member 'Bullet_OnHitReceiveBackground::NormalImpulse' has a wrong offset!");
static_assert(offsetof(Bullet_OnHitReceiveBackground, Hit) == 0x000024, "Member 'Bullet_OnHitReceiveBackground::Hit' has a wrong offset!");
static_assert(offsetof(Bullet_OnHitReceiveBackground, ReturnValue) == 0x0000AC, "Member 'Bullet_OnHitReceiveBackground::ReturnValue' has a wrong offset!");

// DelegateFunction InGameModule.Bullet.OnHitSPEventDelegate__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct Bullet_OnHitSPEventDelegate__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Bullet_OnHitSPEventDelegate__DelegateSignature) == 0x000008, "Wrong alignment on Bullet_OnHitSPEventDelegate__DelegateSignature");
static_assert(sizeof(Bullet_OnHitSPEventDelegate__DelegateSignature) == 0x0000B0, "Wrong size on Bullet_OnHitSPEventDelegate__DelegateSignature");
static_assert(offsetof(Bullet_OnHitSPEventDelegate__DelegateSignature, HitComponent) == 0x000000, "Member 'Bullet_OnHitSPEventDelegate__DelegateSignature::HitComponent' has a wrong offset!");
static_assert(offsetof(Bullet_OnHitSPEventDelegate__DelegateSignature, OtherActor) == 0x000008, "Member 'Bullet_OnHitSPEventDelegate__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Bullet_OnHitSPEventDelegate__DelegateSignature, OtherComp) == 0x000010, "Member 'Bullet_OnHitSPEventDelegate__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Bullet_OnHitSPEventDelegate__DelegateSignature, NormalImpulse) == 0x000018, "Member 'Bullet_OnHitSPEventDelegate__DelegateSignature::NormalImpulse' has a wrong offset!");
static_assert(offsetof(Bullet_OnHitSPEventDelegate__DelegateSignature, Hit) == 0x000024, "Member 'Bullet_OnHitSPEventDelegate__DelegateSignature::Hit' has a wrong offset!");

// Function InGameModule.Bullet.OnPostHit
// 0x0170 (0x0170 - 0x0000)
struct Bullet_OnPostHit final
{
public:
	struct FHeroHitCollisionInfo                  CastHitInfo;                                       // 0x0000(0x0160)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 HitActor;                                          // 0x0160(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Bullet_OnPostHit) == 0x000010, "Wrong alignment on Bullet_OnPostHit");
static_assert(sizeof(Bullet_OnPostHit) == 0x000170, "Wrong size on Bullet_OnPostHit");
static_assert(offsetof(Bullet_OnPostHit, CastHitInfo) == 0x000000, "Member 'Bullet_OnPostHit::CastHitInfo' has a wrong offset!");
static_assert(offsetof(Bullet_OnPostHit, HitActor) == 0x000160, "Member 'Bullet_OnPostHit::HitActor' has a wrong offset!");

// Function InGameModule.Bullet.OnPreHitBackground
// 0x00B0 (0x00B0 - 0x0000)
struct Bullet_OnPreHitBackground final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00AC(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Bullet_OnPreHitBackground) == 0x000008, "Wrong alignment on Bullet_OnPreHitBackground");
static_assert(sizeof(Bullet_OnPreHitBackground) == 0x0000B0, "Wrong size on Bullet_OnPreHitBackground");
static_assert(offsetof(Bullet_OnPreHitBackground, HitComponent) == 0x000000, "Member 'Bullet_OnPreHitBackground::HitComponent' has a wrong offset!");
static_assert(offsetof(Bullet_OnPreHitBackground, OtherActor) == 0x000008, "Member 'Bullet_OnPreHitBackground::OtherActor' has a wrong offset!");
static_assert(offsetof(Bullet_OnPreHitBackground, OtherComp) == 0x000010, "Member 'Bullet_OnPreHitBackground::OtherComp' has a wrong offset!");
static_assert(offsetof(Bullet_OnPreHitBackground, NormalImpulse) == 0x000018, "Member 'Bullet_OnPreHitBackground::NormalImpulse' has a wrong offset!");
static_assert(offsetof(Bullet_OnPreHitBackground, Hit) == 0x000024, "Member 'Bullet_OnPreHitBackground::Hit' has a wrong offset!");
static_assert(offsetof(Bullet_OnPreHitBackground, ReturnValue) == 0x0000AC, "Member 'Bullet_OnPreHitBackground::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.OnPreHitCharacter
// 0x00B0 (0x00B0 - 0x0000)
struct Bullet_OnPreHitCharacter final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00AC(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Bullet_OnPreHitCharacter) == 0x000008, "Wrong alignment on Bullet_OnPreHitCharacter");
static_assert(sizeof(Bullet_OnPreHitCharacter) == 0x0000B0, "Wrong size on Bullet_OnPreHitCharacter");
static_assert(offsetof(Bullet_OnPreHitCharacter, HitComponent) == 0x000000, "Member 'Bullet_OnPreHitCharacter::HitComponent' has a wrong offset!");
static_assert(offsetof(Bullet_OnPreHitCharacter, OtherActor) == 0x000008, "Member 'Bullet_OnPreHitCharacter::OtherActor' has a wrong offset!");
static_assert(offsetof(Bullet_OnPreHitCharacter, OtherComp) == 0x000010, "Member 'Bullet_OnPreHitCharacter::OtherComp' has a wrong offset!");
static_assert(offsetof(Bullet_OnPreHitCharacter, NormalImpulse) == 0x000018, "Member 'Bullet_OnPreHitCharacter::NormalImpulse' has a wrong offset!");
static_assert(offsetof(Bullet_OnPreHitCharacter, Hit) == 0x000024, "Member 'Bullet_OnPreHitCharacter::Hit' has a wrong offset!");
static_assert(offsetof(Bullet_OnPreHitCharacter, ReturnValue) == 0x0000AC, "Member 'Bullet_OnPreHitCharacter::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.BP_CharacterEqual
// 0x0010 (0x0010 - 0x0000)
struct Bullet_BP_CharacterEqual final
{
public:
	const class ABullet*                          Src;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Bullet_BP_CharacterEqual) == 0x000008, "Wrong alignment on Bullet_BP_CharacterEqual");
static_assert(sizeof(Bullet_BP_CharacterEqual) == 0x000010, "Wrong size on Bullet_BP_CharacterEqual");
static_assert(offsetof(Bullet_BP_CharacterEqual, Src) == 0x000000, "Member 'Bullet_BP_CharacterEqual::Src' has a wrong offset!");
static_assert(offsetof(Bullet_BP_CharacterEqual, ReturnValue) == 0x000008, "Member 'Bullet_BP_CharacterEqual::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.BP_GetCharacterId
// 0x0001 (0x0001 - 0x0000)
struct Bullet_BP_GetCharacterId final
{
public:
	ECharacterId                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bullet_BP_GetCharacterId) == 0x000001, "Wrong alignment on Bullet_BP_GetCharacterId");
static_assert(sizeof(Bullet_BP_GetCharacterId) == 0x000001, "Wrong size on Bullet_BP_GetCharacterId");
static_assert(offsetof(Bullet_BP_GetCharacterId, ReturnValue) == 0x000000, "Member 'Bullet_BP_GetCharacterId::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.BP_GetHitCols
// 0x0010 (0x0010 - 0x0000)
struct Bullet_BP_GetHitCols final
{
public:
	TArray<struct FHitCollision>                  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bullet_BP_GetHitCols) == 0x000008, "Wrong alignment on Bullet_BP_GetHitCols");
static_assert(sizeof(Bullet_BP_GetHitCols) == 0x000010, "Wrong size on Bullet_BP_GetHitCols");
static_assert(offsetof(Bullet_BP_GetHitCols, ReturnValue) == 0x000000, "Member 'Bullet_BP_GetHitCols::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.BP_GetLevel
// 0x0004 (0x0004 - 0x0000)
struct Bullet_BP_GetLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bullet_BP_GetLevel) == 0x000004, "Wrong alignment on Bullet_BP_GetLevel");
static_assert(sizeof(Bullet_BP_GetLevel) == 0x000004, "Wrong size on Bullet_BP_GetLevel");
static_assert(offsetof(Bullet_BP_GetLevel, ReturnValue) == 0x000000, "Member 'Bullet_BP_GetLevel::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.BP_GetLevelDB
// 0x03D0 (0x03D0 - 0x0000)
struct Bullet_BP_GetLevelDB final
{
public:
	struct FBulletLevelData                       ReturnValue;                                       // 0x0000(0x03D0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bullet_BP_GetLevelDB) == 0x000008, "Wrong alignment on Bullet_BP_GetLevelDB");
static_assert(sizeof(Bullet_BP_GetLevelDB) == 0x0003D0, "Wrong size on Bullet_BP_GetLevelDB");
static_assert(offsetof(Bullet_BP_GetLevelDB, ReturnValue) == 0x000000, "Member 'Bullet_BP_GetLevelDB::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.BP_GetLimit
// 0x0004 (0x0004 - 0x0000)
struct Bullet_BP_GetLimit final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bullet_BP_GetLimit) == 0x000004, "Wrong alignment on Bullet_BP_GetLimit");
static_assert(sizeof(Bullet_BP_GetLimit) == 0x000004, "Wrong size on Bullet_BP_GetLimit");
static_assert(offsetof(Bullet_BP_GetLimit, ReturnValue) == 0x000000, "Member 'Bullet_BP_GetLimit::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.BP_GetLimitMax
// 0x0008 (0x0008 - 0x0000)
struct Bullet_BP_GetLimitMax final
{
public:
	struct FLimit                                 ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bullet_BP_GetLimitMax) == 0x000004, "Wrong alignment on Bullet_BP_GetLimitMax");
static_assert(sizeof(Bullet_BP_GetLimitMax) == 0x000008, "Wrong size on Bullet_BP_GetLimitMax");
static_assert(offsetof(Bullet_BP_GetLimitMax, ReturnValue) == 0x000000, "Member 'Bullet_BP_GetLimitMax::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.BP_GetProjectileMovementComponent
// 0x0008 (0x0008 - 0x0000)
struct Bullet_BP_GetProjectileMovementComponent final
{
public:
	class UHeroProjectileMovementComponent*       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bullet_BP_GetProjectileMovementComponent) == 0x000008, "Wrong alignment on Bullet_BP_GetProjectileMovementComponent");
static_assert(sizeof(Bullet_BP_GetProjectileMovementComponent) == 0x000008, "Wrong size on Bullet_BP_GetProjectileMovementComponent");
static_assert(offsetof(Bullet_BP_GetProjectileMovementComponent, ReturnValue) == 0x000000, "Member 'Bullet_BP_GetProjectileMovementComponent::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.BP_GetRandStream
// 0x0008 (0x0008 - 0x0000)
struct Bullet_BP_GetRandStream final
{
public:
	struct FRandomStream                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bullet_BP_GetRandStream) == 0x000004, "Wrong alignment on Bullet_BP_GetRandStream");
static_assert(sizeof(Bullet_BP_GetRandStream) == 0x000008, "Wrong size on Bullet_BP_GetRandStream");
static_assert(offsetof(Bullet_BP_GetRandStream, ReturnValue) == 0x000000, "Member 'Bullet_BP_GetRandStream::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.BP_InitDirection
// 0x000C (0x000C - 0x0000)
struct Bullet_BP_InitDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bullet_BP_InitDirection) == 0x000004, "Wrong alignment on Bullet_BP_InitDirection");
static_assert(sizeof(Bullet_BP_InitDirection) == 0x00000C, "Wrong size on Bullet_BP_InitDirection");
static_assert(offsetof(Bullet_BP_InitDirection, ReturnValue) == 0x000000, "Member 'Bullet_BP_InitDirection::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.BP_InitLocation
// 0x000C (0x000C - 0x0000)
struct Bullet_BP_InitLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bullet_BP_InitLocation) == 0x000004, "Wrong alignment on Bullet_BP_InitLocation");
static_assert(sizeof(Bullet_BP_InitLocation) == 0x00000C, "Wrong size on Bullet_BP_InitLocation");
static_assert(offsetof(Bullet_BP_InitLocation, ReturnValue) == 0x000000, "Member 'Bullet_BP_InitLocation::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.BP_InitRotation
// 0x0010 (0x0010 - 0x0000)
struct Bullet_BP_InitRotation final
{
public:
	struct FQuat                                  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bullet_BP_InitRotation) == 0x000010, "Wrong alignment on Bullet_BP_InitRotation");
static_assert(sizeof(Bullet_BP_InitRotation) == 0x000010, "Wrong size on Bullet_BP_InitRotation");
static_assert(offsetof(Bullet_BP_InitRotation, ReturnValue) == 0x000000, "Member 'Bullet_BP_InitRotation::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.BP_InitScale
// 0x000C (0x000C - 0x0000)
struct Bullet_BP_InitScale final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bullet_BP_InitScale) == 0x000004, "Wrong alignment on Bullet_BP_InitScale");
static_assert(sizeof(Bullet_BP_InitScale) == 0x00000C, "Wrong size on Bullet_BP_InitScale");
static_assert(offsetof(Bullet_BP_InitScale, ReturnValue) == 0x000000, "Member 'Bullet_BP_InitScale::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.BP_InitTarget
// 0x000C (0x000C - 0x0000)
struct Bullet_BP_InitTarget final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bullet_BP_InitTarget) == 0x000004, "Wrong alignment on Bullet_BP_InitTarget");
static_assert(sizeof(Bullet_BP_InitTarget) == 0x00000C, "Wrong size on Bullet_BP_InitTarget");
static_assert(offsetof(Bullet_BP_InitTarget, ReturnValue) == 0x000000, "Member 'Bullet_BP_InitTarget::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.BP_IsLimit
// 0x0001 (0x0001 - 0x0000)
struct Bullet_BP_IsLimit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bullet_BP_IsLimit) == 0x000001, "Wrong alignment on Bullet_BP_IsLimit");
static_assert(sizeof(Bullet_BP_IsLimit) == 0x000001, "Wrong size on Bullet_BP_IsLimit");
static_assert(offsetof(Bullet_BP_IsLimit, ReturnValue) == 0x000000, "Member 'Bullet_BP_IsLimit::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.BP_PrevLocate
// 0x000C (0x000C - 0x0000)
struct Bullet_BP_PrevLocate final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bullet_BP_PrevLocate) == 0x000004, "Wrong alignment on Bullet_BP_PrevLocate");
static_assert(sizeof(Bullet_BP_PrevLocate) == 0x00000C, "Wrong size on Bullet_BP_PrevLocate");
static_assert(offsetof(Bullet_BP_PrevLocate, ReturnValue) == 0x000000, "Member 'Bullet_BP_PrevLocate::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.GetAttackId
// 0x0001 (0x0001 - 0x0000)
struct Bullet_GetAttackId final
{
public:
	EAttackId                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bullet_GetAttackId) == 0x000001, "Wrong alignment on Bullet_GetAttackId");
static_assert(sizeof(Bullet_GetAttackId) == 0x000001, "Wrong size on Bullet_GetAttackId");
static_assert(offsetof(Bullet_GetAttackId, ReturnValue) == 0x000000, "Member 'Bullet_GetAttackId::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.GetBaseOwnerCharacterBattle
// 0x0008 (0x0008 - 0x0000)
struct Bullet_GetBaseOwnerCharacterBattle final
{
public:
	class ACharacterBattle*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bullet_GetBaseOwnerCharacterBattle) == 0x000008, "Wrong alignment on Bullet_GetBaseOwnerCharacterBattle");
static_assert(sizeof(Bullet_GetBaseOwnerCharacterBattle) == 0x000008, "Wrong size on Bullet_GetBaseOwnerCharacterBattle");
static_assert(offsetof(Bullet_GetBaseOwnerCharacterBattle, ReturnValue) == 0x000000, "Member 'Bullet_GetBaseOwnerCharacterBattle::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.GetCharacterID
// 0x0001 (0x0001 - 0x0000)
struct Bullet_GetCharacterID final
{
public:
	ECharacterId                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bullet_GetCharacterID) == 0x000001, "Wrong alignment on Bullet_GetCharacterID");
static_assert(sizeof(Bullet_GetCharacterID) == 0x000001, "Wrong size on Bullet_GetCharacterID");
static_assert(offsetof(Bullet_GetCharacterID, ReturnValue) == 0x000000, "Member 'Bullet_GetCharacterID::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.GetCommandID
// 0x0001 (0x0001 - 0x0000)
struct Bullet_GetCommandID final
{
public:
	ECommandId                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bullet_GetCommandID) == 0x000001, "Wrong alignment on Bullet_GetCommandID");
static_assert(sizeof(Bullet_GetCommandID) == 0x000001, "Wrong size on Bullet_GetCommandID");
static_assert(offsetof(Bullet_GetCommandID, ReturnValue) == 0x000000, "Member 'Bullet_GetCommandID::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.GetIsProjectileCreatorMode
// 0x0001 (0x0001 - 0x0000)
struct Bullet_GetIsProjectileCreatorMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bullet_GetIsProjectileCreatorMode) == 0x000001, "Wrong alignment on Bullet_GetIsProjectileCreatorMode");
static_assert(sizeof(Bullet_GetIsProjectileCreatorMode) == 0x000001, "Wrong size on Bullet_GetIsProjectileCreatorMode");
static_assert(offsetof(Bullet_GetIsProjectileCreatorMode, ReturnValue) == 0x000000, "Member 'Bullet_GetIsProjectileCreatorMode::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.GetIsRestoreLoad
// 0x0001 (0x0001 - 0x0000)
struct Bullet_GetIsRestoreLoad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bullet_GetIsRestoreLoad) == 0x000001, "Wrong alignment on Bullet_GetIsRestoreLoad");
static_assert(sizeof(Bullet_GetIsRestoreLoad) == 0x000001, "Wrong size on Bullet_GetIsRestoreLoad");
static_assert(offsetof(Bullet_GetIsRestoreLoad, ReturnValue) == 0x000000, "Member 'Bullet_GetIsRestoreLoad::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.GetOverrideLimitTime
// 0x0004 (0x0004 - 0x0000)
struct Bullet_GetOverrideLimitTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bullet_GetOverrideLimitTime) == 0x000004, "Wrong alignment on Bullet_GetOverrideLimitTime");
static_assert(sizeof(Bullet_GetOverrideLimitTime) == 0x000004, "Wrong size on Bullet_GetOverrideLimitTime");
static_assert(offsetof(Bullet_GetOverrideLimitTime, ReturnValue) == 0x000000, "Member 'Bullet_GetOverrideLimitTime::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.GetOwnerCharacterBattle
// 0x0008 (0x0008 - 0x0000)
struct Bullet_GetOwnerCharacterBattle final
{
public:
	class ACharacterBattle*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bullet_GetOwnerCharacterBattle) == 0x000008, "Wrong alignment on Bullet_GetOwnerCharacterBattle");
static_assert(sizeof(Bullet_GetOwnerCharacterBattle) == 0x000008, "Wrong size on Bullet_GetOwnerCharacterBattle");
static_assert(offsetof(Bullet_GetOwnerCharacterBattle, ReturnValue) == 0x000000, "Member 'Bullet_GetOwnerCharacterBattle::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.GetOwnerGenerator
// 0x0008 (0x0008 - 0x0000)
struct Bullet_GetOwnerGenerator final
{
public:
	class AProjectileGeneratorBattle*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bullet_GetOwnerGenerator) == 0x000008, "Wrong alignment on Bullet_GetOwnerGenerator");
static_assert(sizeof(Bullet_GetOwnerGenerator) == 0x000008, "Wrong size on Bullet_GetOwnerGenerator");
static_assert(offsetof(Bullet_GetOwnerGenerator, ReturnValue) == 0x000000, "Member 'Bullet_GetOwnerGenerator::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.GetPlayerId
// 0x0001 (0x0001 - 0x0000)
struct Bullet_GetPlayerId final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bullet_GetPlayerId) == 0x000001, "Wrong alignment on Bullet_GetPlayerId");
static_assert(sizeof(Bullet_GetPlayerId) == 0x000001, "Wrong size on Bullet_GetPlayerId");
static_assert(offsetof(Bullet_GetPlayerId, ReturnValue) == 0x000000, "Member 'Bullet_GetPlayerId::ReturnValue' has a wrong offset!");

// Function InGameModule.Bullet.GetTeamID
// 0x0001 (0x0001 - 0x0000)
struct Bullet_GetTeamID final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bullet_GetTeamID) == 0x000001, "Wrong alignment on Bullet_GetTeamID");
static_assert(sizeof(Bullet_GetTeamID) == 0x000001, "Wrong size on Bullet_GetTeamID");
static_assert(offsetof(Bullet_GetTeamID, ReturnValue) == 0x000000, "Member 'Bullet_GetTeamID::ReturnValue' has a wrong offset!");

// Function InGameModule.AIControllerBattle.BP_CombatChaseCheck
// 0x0010 (0x0010 - 0x0000)
struct AIControllerBattle_BP_CombatChaseCheck final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIControllerBattle_BP_CombatChaseCheck) == 0x000008, "Wrong alignment on AIControllerBattle_BP_CombatChaseCheck");
static_assert(sizeof(AIControllerBattle_BP_CombatChaseCheck) == 0x000010, "Wrong size on AIControllerBattle_BP_CombatChaseCheck");
static_assert(offsetof(AIControllerBattle_BP_CombatChaseCheck, TargetActor) == 0x000000, "Member 'AIControllerBattle_BP_CombatChaseCheck::TargetActor' has a wrong offset!");
static_assert(offsetof(AIControllerBattle_BP_CombatChaseCheck, ReturnValue) == 0x000008, "Member 'AIControllerBattle_BP_CombatChaseCheck::ReturnValue' has a wrong offset!");

// Function InGameModule.AIControllerBattle.BP_CombatChaseFinish
// 0x0004 (0x0004 - 0x0000)
struct AIControllerBattle_BP_CombatChaseFinish final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIControllerBattle_BP_CombatChaseFinish) == 0x000004, "Wrong alignment on AIControllerBattle_BP_CombatChaseFinish");
static_assert(sizeof(AIControllerBattle_BP_CombatChaseFinish) == 0x000004, "Wrong size on AIControllerBattle_BP_CombatChaseFinish");
static_assert(offsetof(AIControllerBattle_BP_CombatChaseFinish, ReturnValue) == 0x000000, "Member 'AIControllerBattle_BP_CombatChaseFinish::ReturnValue' has a wrong offset!");

// Function InGameModule.AIControllerBattle.BP_CombatCheck
// 0x0001 (0x0001 - 0x0000)
struct AIControllerBattle_BP_CombatCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIControllerBattle_BP_CombatCheck) == 0x000001, "Wrong alignment on AIControllerBattle_BP_CombatCheck");
static_assert(sizeof(AIControllerBattle_BP_CombatCheck) == 0x000001, "Wrong size on AIControllerBattle_BP_CombatCheck");
static_assert(offsetof(AIControllerBattle_BP_CombatCheck, ReturnValue) == 0x000000, "Member 'AIControllerBattle_BP_CombatCheck::ReturnValue' has a wrong offset!");

// Function InGameModule.AIControllerBattle.BP_CombatStart
// 0x0001 (0x0001 - 0x0000)
struct AIControllerBattle_BP_CombatStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIControllerBattle_BP_CombatStart) == 0x000001, "Wrong alignment on AIControllerBattle_BP_CombatStart");
static_assert(sizeof(AIControllerBattle_BP_CombatStart) == 0x000001, "Wrong size on AIControllerBattle_BP_CombatStart");
static_assert(offsetof(AIControllerBattle_BP_CombatStart, ReturnValue) == 0x000000, "Member 'AIControllerBattle_BP_CombatStart::ReturnValue' has a wrong offset!");

// Function InGameModule.AIControllerBattle.BP_DodgeCheck
// 0x0001 (0x0001 - 0x0000)
struct AIControllerBattle_BP_DodgeCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIControllerBattle_BP_DodgeCheck) == 0x000001, "Wrong alignment on AIControllerBattle_BP_DodgeCheck");
static_assert(sizeof(AIControllerBattle_BP_DodgeCheck) == 0x000001, "Wrong size on AIControllerBattle_BP_DodgeCheck");
static_assert(offsetof(AIControllerBattle_BP_DodgeCheck, ReturnValue) == 0x000000, "Member 'AIControllerBattle_BP_DodgeCheck::ReturnValue' has a wrong offset!");

// Function InGameModule.AIControllerBattle.BP_DodgeStart
// 0x0001 (0x0001 - 0x0000)
struct AIControllerBattle_BP_DodgeStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIControllerBattle_BP_DodgeStart) == 0x000001, "Wrong alignment on AIControllerBattle_BP_DodgeStart");
static_assert(sizeof(AIControllerBattle_BP_DodgeStart) == 0x000001, "Wrong size on AIControllerBattle_BP_DodgeStart");
static_assert(offsetof(AIControllerBattle_BP_DodgeStart, ReturnValue) == 0x000000, "Member 'AIControllerBattle_BP_DodgeStart::ReturnValue' has a wrong offset!");

// Function InGameModule.AIControllerBattle.BP_EscapeCheck
// 0x0001 (0x0001 - 0x0000)
struct AIControllerBattle_BP_EscapeCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIControllerBattle_BP_EscapeCheck) == 0x000001, "Wrong alignment on AIControllerBattle_BP_EscapeCheck");
static_assert(sizeof(AIControllerBattle_BP_EscapeCheck) == 0x000001, "Wrong size on AIControllerBattle_BP_EscapeCheck");
static_assert(offsetof(AIControllerBattle_BP_EscapeCheck, ReturnValue) == 0x000000, "Member 'AIControllerBattle_BP_EscapeCheck::ReturnValue' has a wrong offset!");

// Function InGameModule.AIControllerBattle.BP_EscapeFinish
// 0x0004 (0x0004 - 0x0000)
struct AIControllerBattle_BP_EscapeFinish final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIControllerBattle_BP_EscapeFinish) == 0x000004, "Wrong alignment on AIControllerBattle_BP_EscapeFinish");
static_assert(sizeof(AIControllerBattle_BP_EscapeFinish) == 0x000004, "Wrong size on AIControllerBattle_BP_EscapeFinish");
static_assert(offsetof(AIControllerBattle_BP_EscapeFinish, ReturnValue) == 0x000000, "Member 'AIControllerBattle_BP_EscapeFinish::ReturnValue' has a wrong offset!");

// Function InGameModule.AIControllerBattle.BP_EscapeStart
// 0x0001 (0x0001 - 0x0000)
struct AIControllerBattle_BP_EscapeStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIControllerBattle_BP_EscapeStart) == 0x000001, "Wrong alignment on AIControllerBattle_BP_EscapeStart");
static_assert(sizeof(AIControllerBattle_BP_EscapeStart) == 0x000001, "Wrong size on AIControllerBattle_BP_EscapeStart");
static_assert(offsetof(AIControllerBattle_BP_EscapeStart, ReturnValue) == 0x000000, "Member 'AIControllerBattle_BP_EscapeStart::ReturnValue' has a wrong offset!");

// Function InGameModule.AIControllerBattle.BP_GetTargetMemory
// 0x0008 (0x0008 - 0x0000)
struct AIControllerBattle_BP_GetTargetMemory final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIControllerBattle_BP_GetTargetMemory) == 0x000008, "Wrong alignment on AIControllerBattle_BP_GetTargetMemory");
static_assert(sizeof(AIControllerBattle_BP_GetTargetMemory) == 0x000008, "Wrong size on AIControllerBattle_BP_GetTargetMemory");
static_assert(offsetof(AIControllerBattle_BP_GetTargetMemory, ReturnValue) == 0x000000, "Member 'AIControllerBattle_BP_GetTargetMemory::ReturnValue' has a wrong offset!");

// Function InGameModule.AIControllerBattle.BP_GetTargetPoint
// 0x0008 (0x0008 - 0x0000)
struct AIControllerBattle_BP_GetTargetPoint final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIControllerBattle_BP_GetTargetPoint) == 0x000008, "Wrong alignment on AIControllerBattle_BP_GetTargetPoint");
static_assert(sizeof(AIControllerBattle_BP_GetTargetPoint) == 0x000008, "Wrong size on AIControllerBattle_BP_GetTargetPoint");
static_assert(offsetof(AIControllerBattle_BP_GetTargetPoint, ReturnValue) == 0x000000, "Member 'AIControllerBattle_BP_GetTargetPoint::ReturnValue' has a wrong offset!");

// Function InGameModule.AIControllerBattle.BP_MoveAction
// 0x0020 (0x0020 - 0x0000)
struct AIControllerBattle_BP_MoveAction final
{
public:
	struct FAIMoveCommand                         Command;                                           // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIControllerBattle_BP_MoveAction) == 0x000004, "Wrong alignment on AIControllerBattle_BP_MoveAction");
static_assert(sizeof(AIControllerBattle_BP_MoveAction) == 0x000020, "Wrong size on AIControllerBattle_BP_MoveAction");
static_assert(offsetof(AIControllerBattle_BP_MoveAction, Command) == 0x000000, "Member 'AIControllerBattle_BP_MoveAction::Command' has a wrong offset!");

// Function InGameModule.AIControllerBattle.BP_MoveInput
// 0x0020 (0x0020 - 0x0000)
struct AIControllerBattle_BP_MoveInput final
{
public:
	struct FAIMoveCommand                         Command;                                           // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIControllerBattle_BP_MoveInput) == 0x000004, "Wrong alignment on AIControllerBattle_BP_MoveInput");
static_assert(sizeof(AIControllerBattle_BP_MoveInput) == 0x000020, "Wrong size on AIControllerBattle_BP_MoveInput");
static_assert(offsetof(AIControllerBattle_BP_MoveInput, Command) == 0x000000, "Member 'AIControllerBattle_BP_MoveInput::Command' has a wrong offset!");

// Function InGameModule.AIControllerBattle.BP_MoveTick
// 0x0008 (0x0008 - 0x0000)
struct AIControllerBattle_BP_MoveTick final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIControllerBattle_BP_MoveTick) == 0x000008, "Wrong alignment on AIControllerBattle_BP_MoveTick");
static_assert(sizeof(AIControllerBattle_BP_MoveTick) == 0x000008, "Wrong size on AIControllerBattle_BP_MoveTick");
static_assert(offsetof(AIControllerBattle_BP_MoveTick, TargetActor) == 0x000000, "Member 'AIControllerBattle_BP_MoveTick::TargetActor' has a wrong offset!");

// Function InGameModule.AIControllerBattle.BP_PatrolCheck
// 0x0001 (0x0001 - 0x0000)
struct AIControllerBattle_BP_PatrolCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIControllerBattle_BP_PatrolCheck) == 0x000001, "Wrong alignment on AIControllerBattle_BP_PatrolCheck");
static_assert(sizeof(AIControllerBattle_BP_PatrolCheck) == 0x000001, "Wrong size on AIControllerBattle_BP_PatrolCheck");
static_assert(offsetof(AIControllerBattle_BP_PatrolCheck, ReturnValue) == 0x000000, "Member 'AIControllerBattle_BP_PatrolCheck::ReturnValue' has a wrong offset!");

// Function InGameModule.AIControllerBattle.BP_PatrolFinish
// 0x0004 (0x0004 - 0x0000)
struct AIControllerBattle_BP_PatrolFinish final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIControllerBattle_BP_PatrolFinish) == 0x000004, "Wrong alignment on AIControllerBattle_BP_PatrolFinish");
static_assert(sizeof(AIControllerBattle_BP_PatrolFinish) == 0x000004, "Wrong size on AIControllerBattle_BP_PatrolFinish");
static_assert(offsetof(AIControllerBattle_BP_PatrolFinish, ReturnValue) == 0x000000, "Member 'AIControllerBattle_BP_PatrolFinish::ReturnValue' has a wrong offset!");

// Function InGameModule.AIControllerBattle.BP_PatrolStart
// 0x0001 (0x0001 - 0x0000)
struct AIControllerBattle_BP_PatrolStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIControllerBattle_BP_PatrolStart) == 0x000001, "Wrong alignment on AIControllerBattle_BP_PatrolStart");
static_assert(sizeof(AIControllerBattle_BP_PatrolStart) == 0x000001, "Wrong size on AIControllerBattle_BP_PatrolStart");
static_assert(offsetof(AIControllerBattle_BP_PatrolStart, ReturnValue) == 0x000000, "Member 'AIControllerBattle_BP_PatrolStart::ReturnValue' has a wrong offset!");

// Function InGameModule.AIControllerBattle.BP_PossibleNavigation
// 0x0010 (0x0010 - 0x0000)
struct AIControllerBattle_BP_PossibleNavigation final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIControllerBattle_BP_PossibleNavigation) == 0x000008, "Wrong alignment on AIControllerBattle_BP_PossibleNavigation");
static_assert(sizeof(AIControllerBattle_BP_PossibleNavigation) == 0x000010, "Wrong size on AIControllerBattle_BP_PossibleNavigation");
static_assert(offsetof(AIControllerBattle_BP_PossibleNavigation, TargetActor) == 0x000000, "Member 'AIControllerBattle_BP_PossibleNavigation::TargetActor' has a wrong offset!");
static_assert(offsetof(AIControllerBattle_BP_PossibleNavigation, ReturnValue) == 0x000008, "Member 'AIControllerBattle_BP_PossibleNavigation::ReturnValue' has a wrong offset!");

// Function InGameModule.AIControllerBattle.BP_RootStart
// 0x0001 (0x0001 - 0x0000)
struct AIControllerBattle_BP_RootStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIControllerBattle_BP_RootStart) == 0x000001, "Wrong alignment on AIControllerBattle_BP_RootStart");
static_assert(sizeof(AIControllerBattle_BP_RootStart) == 0x000001, "Wrong size on AIControllerBattle_BP_RootStart");
static_assert(offsetof(AIControllerBattle_BP_RootStart, ReturnValue) == 0x000000, "Member 'AIControllerBattle_BP_RootStart::ReturnValue' has a wrong offset!");

// Function InGameModule.AIControllerBattle.BP_SkillAction
// 0x0018 (0x0018 - 0x0000)
struct AIControllerBattle_BP_SkillAction final
{
public:
	TArray<struct FAISkillCommand>                Commands;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Instant;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Interval;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIControllerBattle_BP_SkillAction) == 0x000008, "Wrong alignment on AIControllerBattle_BP_SkillAction");
static_assert(sizeof(AIControllerBattle_BP_SkillAction) == 0x000018, "Wrong size on AIControllerBattle_BP_SkillAction");
static_assert(offsetof(AIControllerBattle_BP_SkillAction, Commands) == 0x000000, "Member 'AIControllerBattle_BP_SkillAction::Commands' has a wrong offset!");
static_assert(offsetof(AIControllerBattle_BP_SkillAction, Instant) == 0x000010, "Member 'AIControllerBattle_BP_SkillAction::Instant' has a wrong offset!");
static_assert(offsetof(AIControllerBattle_BP_SkillAction, Interval) == 0x000014, "Member 'AIControllerBattle_BP_SkillAction::Interval' has a wrong offset!");

// Function InGameModule.AIControllerBattle.BP_SkillExitCheck
// 0x0001 (0x0001 - 0x0000)
struct AIControllerBattle_BP_SkillExitCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIControllerBattle_BP_SkillExitCheck) == 0x000001, "Wrong alignment on AIControllerBattle_BP_SkillExitCheck");
static_assert(sizeof(AIControllerBattle_BP_SkillExitCheck) == 0x000001, "Wrong size on AIControllerBattle_BP_SkillExitCheck");
static_assert(offsetof(AIControllerBattle_BP_SkillExitCheck, ReturnValue) == 0x000000, "Member 'AIControllerBattle_BP_SkillExitCheck::ReturnValue' has a wrong offset!");

// Function InGameModule.AIControllerBattle.BP_SkillInput
// 0x002C (0x002C - 0x0000)
struct AIControllerBattle_BP_SkillInput final
{
public:
	struct FAISkillCommand                        Command;                                           // 0x0000(0x002C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIControllerBattle_BP_SkillInput) == 0x000004, "Wrong alignment on AIControllerBattle_BP_SkillInput");
static_assert(sizeof(AIControllerBattle_BP_SkillInput) == 0x00002C, "Wrong size on AIControllerBattle_BP_SkillInput");
static_assert(offsetof(AIControllerBattle_BP_SkillInput, Command) == 0x000000, "Member 'AIControllerBattle_BP_SkillInput::Command' has a wrong offset!");

// Function InGameModule.AIControllerBattle.BP_SkillPerform
// 0x0010 (0x0010 - 0x0000)
struct AIControllerBattle_BP_SkillPerform final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIControllerBattle_BP_SkillPerform) == 0x000008, "Wrong alignment on AIControllerBattle_BP_SkillPerform");
static_assert(sizeof(AIControllerBattle_BP_SkillPerform) == 0x000010, "Wrong size on AIControllerBattle_BP_SkillPerform");
static_assert(offsetof(AIControllerBattle_BP_SkillPerform, TargetActor) == 0x000000, "Member 'AIControllerBattle_BP_SkillPerform::TargetActor' has a wrong offset!");
static_assert(offsetof(AIControllerBattle_BP_SkillPerform, ReturnValue) == 0x000008, "Member 'AIControllerBattle_BP_SkillPerform::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterConditionBase.BP_OnChangeConditionLevel
// 0x0008 (0x0008 - 0x0000)
struct CharacterConditionBase_BP_OnChangeConditionLevel final
{
public:
	int32                                         OldLevel;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewLevel;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterConditionBase_BP_OnChangeConditionLevel) == 0x000004, "Wrong alignment on CharacterConditionBase_BP_OnChangeConditionLevel");
static_assert(sizeof(CharacterConditionBase_BP_OnChangeConditionLevel) == 0x000008, "Wrong size on CharacterConditionBase_BP_OnChangeConditionLevel");
static_assert(offsetof(CharacterConditionBase_BP_OnChangeConditionLevel, OldLevel) == 0x000000, "Member 'CharacterConditionBase_BP_OnChangeConditionLevel::OldLevel' has a wrong offset!");
static_assert(offsetof(CharacterConditionBase_BP_OnChangeConditionLevel, NewLevel) == 0x000004, "Member 'CharacterConditionBase_BP_OnChangeConditionLevel::NewLevel' has a wrong offset!");

// Function InGameModule.CharacterConditionBase.BP_OnChangeConditionSubLevel
// 0x0008 (0x0008 - 0x0000)
struct CharacterConditionBase_BP_OnChangeConditionSubLevel final
{
public:
	int32                                         OldLevel;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewLevel;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterConditionBase_BP_OnChangeConditionSubLevel) == 0x000004, "Wrong alignment on CharacterConditionBase_BP_OnChangeConditionSubLevel");
static_assert(sizeof(CharacterConditionBase_BP_OnChangeConditionSubLevel) == 0x000008, "Wrong size on CharacterConditionBase_BP_OnChangeConditionSubLevel");
static_assert(offsetof(CharacterConditionBase_BP_OnChangeConditionSubLevel, OldLevel) == 0x000000, "Member 'CharacterConditionBase_BP_OnChangeConditionSubLevel::OldLevel' has a wrong offset!");
static_assert(offsetof(CharacterConditionBase_BP_OnChangeConditionSubLevel, NewLevel) == 0x000004, "Member 'CharacterConditionBase_BP_OnChangeConditionSubLevel::NewLevel' has a wrong offset!");

// Function InGameModule.CharacterConditionBase.BP_OnUpdateIntervalValue
// 0x0004 (0x0004 - 0x0000)
struct CharacterConditionBase_BP_OnUpdateIntervalValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterConditionBase_BP_OnUpdateIntervalValue) == 0x000004, "Wrong alignment on CharacterConditionBase_BP_OnUpdateIntervalValue");
static_assert(sizeof(CharacterConditionBase_BP_OnUpdateIntervalValue) == 0x000004, "Wrong size on CharacterConditionBase_BP_OnUpdateIntervalValue");
static_assert(offsetof(CharacterConditionBase_BP_OnUpdateIntervalValue, Value) == 0x000000, "Member 'CharacterConditionBase_BP_OnUpdateIntervalValue::Value' has a wrong offset!");

// Function InGameModule.CharacterConditionBase.BP_PlayEffect
// 0x0038 (0x0038 - 0x0000)
struct CharacterConditionBase_BP_PlayEffect final
{
public:
	class UParticleSystem*                        ParticleSystem;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0010(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x001C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAttached;                                         // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomParticleSystemComponent*         ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterConditionBase_BP_PlayEffect) == 0x000008, "Wrong alignment on CharacterConditionBase_BP_PlayEffect");
static_assert(sizeof(CharacterConditionBase_BP_PlayEffect) == 0x000038, "Wrong size on CharacterConditionBase_BP_PlayEffect");
static_assert(offsetof(CharacterConditionBase_BP_PlayEffect, ParticleSystem) == 0x000000, "Member 'CharacterConditionBase_BP_PlayEffect::ParticleSystem' has a wrong offset!");
static_assert(offsetof(CharacterConditionBase_BP_PlayEffect, SocketName) == 0x000008, "Member 'CharacterConditionBase_BP_PlayEffect::SocketName' has a wrong offset!");
static_assert(offsetof(CharacterConditionBase_BP_PlayEffect, Offset) == 0x000010, "Member 'CharacterConditionBase_BP_PlayEffect::Offset' has a wrong offset!");
static_assert(offsetof(CharacterConditionBase_BP_PlayEffect, Rotation) == 0x00001C, "Member 'CharacterConditionBase_BP_PlayEffect::Rotation' has a wrong offset!");
static_assert(offsetof(CharacterConditionBase_BP_PlayEffect, bAttached) == 0x000028, "Member 'CharacterConditionBase_BP_PlayEffect::bAttached' has a wrong offset!");
static_assert(offsetof(CharacterConditionBase_BP_PlayEffect, ReturnValue) == 0x000030, "Member 'CharacterConditionBase_BP_PlayEffect::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterConditionBase.BP_RecoverHealth
// 0x0010 (0x0010 - 0x0000)
struct CharacterConditionBase_BP_RecoverHealth final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableRecoverCondition;                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerStateBattle*                     Healer;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterConditionBase_BP_RecoverHealth) == 0x000008, "Wrong alignment on CharacterConditionBase_BP_RecoverHealth");
static_assert(sizeof(CharacterConditionBase_BP_RecoverHealth) == 0x000010, "Wrong size on CharacterConditionBase_BP_RecoverHealth");
static_assert(offsetof(CharacterConditionBase_BP_RecoverHealth, Value) == 0x000000, "Member 'CharacterConditionBase_BP_RecoverHealth::Value' has a wrong offset!");
static_assert(offsetof(CharacterConditionBase_BP_RecoverHealth, bEnableRecoverCondition) == 0x000004, "Member 'CharacterConditionBase_BP_RecoverHealth::bEnableRecoverCondition' has a wrong offset!");
static_assert(offsetof(CharacterConditionBase_BP_RecoverHealth, Healer) == 0x000008, "Member 'CharacterConditionBase_BP_RecoverHealth::Healer' has a wrong offset!");

// Function InGameModule.CharacterConditionBase.BP_SetAnimationSpeedDeltaRate
// 0x0004 (0x0004 - 0x0000)
struct CharacterConditionBase_BP_SetAnimationSpeedDeltaRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterConditionBase_BP_SetAnimationSpeedDeltaRate) == 0x000004, "Wrong alignment on CharacterConditionBase_BP_SetAnimationSpeedDeltaRate");
static_assert(sizeof(CharacterConditionBase_BP_SetAnimationSpeedDeltaRate) == 0x000004, "Wrong size on CharacterConditionBase_BP_SetAnimationSpeedDeltaRate");
static_assert(offsetof(CharacterConditionBase_BP_SetAnimationSpeedDeltaRate, Rate) == 0x000000, "Member 'CharacterConditionBase_BP_SetAnimationSpeedDeltaRate::Rate' has a wrong offset!");

// Function InGameModule.CharacterConditionBase.BP_SetMoveSpeedDeltaRate
// 0x0004 (0x0004 - 0x0000)
struct CharacterConditionBase_BP_SetMoveSpeedDeltaRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterConditionBase_BP_SetMoveSpeedDeltaRate) == 0x000004, "Wrong alignment on CharacterConditionBase_BP_SetMoveSpeedDeltaRate");
static_assert(sizeof(CharacterConditionBase_BP_SetMoveSpeedDeltaRate) == 0x000004, "Wrong size on CharacterConditionBase_BP_SetMoveSpeedDeltaRate");
static_assert(offsetof(CharacterConditionBase_BP_SetMoveSpeedDeltaRate, Rate) == 0x000000, "Member 'CharacterConditionBase_BP_SetMoveSpeedDeltaRate::Rate' has a wrong offset!");

// Function InGameModule.CharacterConditionBase.BP_SpawnBeginParticles
// 0x0002 (0x0002 - 0x0000)
struct CharacterConditionBase_BP_SpawnBeginParticles final
{
public:
	bool                                          bChangeCondition;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAgainCondition;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterConditionBase_BP_SpawnBeginParticles) == 0x000001, "Wrong alignment on CharacterConditionBase_BP_SpawnBeginParticles");
static_assert(sizeof(CharacterConditionBase_BP_SpawnBeginParticles) == 0x000002, "Wrong size on CharacterConditionBase_BP_SpawnBeginParticles");
static_assert(offsetof(CharacterConditionBase_BP_SpawnBeginParticles, bChangeCondition) == 0x000000, "Member 'CharacterConditionBase_BP_SpawnBeginParticles::bChangeCondition' has a wrong offset!");
static_assert(offsetof(CharacterConditionBase_BP_SpawnBeginParticles, bAgainCondition) == 0x000001, "Member 'CharacterConditionBase_BP_SpawnBeginParticles::bAgainCondition' has a wrong offset!");

// Function InGameModule.CharacterConditionBase.BP_GetInstigatedPlayer
// 0x0008 (0x0008 - 0x0000)
struct CharacterConditionBase_BP_GetInstigatedPlayer final
{
public:
	class APlayerStateBattle*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterConditionBase_BP_GetInstigatedPlayer) == 0x000008, "Wrong alignment on CharacterConditionBase_BP_GetInstigatedPlayer");
static_assert(sizeof(CharacterConditionBase_BP_GetInstigatedPlayer) == 0x000008, "Wrong size on CharacterConditionBase_BP_GetInstigatedPlayer");
static_assert(offsetof(CharacterConditionBase_BP_GetInstigatedPlayer, ReturnValue) == 0x000000, "Member 'CharacterConditionBase_BP_GetInstigatedPlayer::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterConditionBase.BP_GetIntervalSpan
// 0x0004 (0x0004 - 0x0000)
struct CharacterConditionBase_BP_GetIntervalSpan final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterConditionBase_BP_GetIntervalSpan) == 0x000004, "Wrong alignment on CharacterConditionBase_BP_GetIntervalSpan");
static_assert(sizeof(CharacterConditionBase_BP_GetIntervalSpan) == 0x000004, "Wrong size on CharacterConditionBase_BP_GetIntervalSpan");
static_assert(offsetof(CharacterConditionBase_BP_GetIntervalSpan, ReturnValue) == 0x000000, "Member 'CharacterConditionBase_BP_GetIntervalSpan::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterConditionBase.BP_GetIntervalValue
// 0x0004 (0x0004 - 0x0000)
struct CharacterConditionBase_BP_GetIntervalValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterConditionBase_BP_GetIntervalValue) == 0x000004, "Wrong alignment on CharacterConditionBase_BP_GetIntervalValue");
static_assert(sizeof(CharacterConditionBase_BP_GetIntervalValue) == 0x000004, "Wrong size on CharacterConditionBase_BP_GetIntervalValue");
static_assert(offsetof(CharacterConditionBase_BP_GetIntervalValue, ReturnValue) == 0x000000, "Member 'CharacterConditionBase_BP_GetIntervalValue::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterConditionBase.BP_GetLevel
// 0x0004 (0x0004 - 0x0000)
struct CharacterConditionBase_BP_GetLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterConditionBase_BP_GetLevel) == 0x000004, "Wrong alignment on CharacterConditionBase_BP_GetLevel");
static_assert(sizeof(CharacterConditionBase_BP_GetLevel) == 0x000004, "Wrong size on CharacterConditionBase_BP_GetLevel");
static_assert(offsetof(CharacterConditionBase_BP_GetLevel, ReturnValue) == 0x000000, "Member 'CharacterConditionBase_BP_GetLevel::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterConditionBase.BP_GetOwnerCharacterBattle
// 0x0008 (0x0008 - 0x0000)
struct CharacterConditionBase_BP_GetOwnerCharacterBattle final
{
public:
	class ACharacterBattle*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterConditionBase_BP_GetOwnerCharacterBattle) == 0x000008, "Wrong alignment on CharacterConditionBase_BP_GetOwnerCharacterBattle");
static_assert(sizeof(CharacterConditionBase_BP_GetOwnerCharacterBattle) == 0x000008, "Wrong size on CharacterConditionBase_BP_GetOwnerCharacterBattle");
static_assert(offsetof(CharacterConditionBase_BP_GetOwnerCharacterBattle, ReturnValue) == 0x000000, "Member 'CharacterConditionBase_BP_GetOwnerCharacterBattle::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterConditionBase.BP_GetOwnerPlayerState
// 0x0008 (0x0008 - 0x0000)
struct CharacterConditionBase_BP_GetOwnerPlayerState final
{
public:
	class APlayerStateBattle*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterConditionBase_BP_GetOwnerPlayerState) == 0x000008, "Wrong alignment on CharacterConditionBase_BP_GetOwnerPlayerState");
static_assert(sizeof(CharacterConditionBase_BP_GetOwnerPlayerState) == 0x000008, "Wrong size on CharacterConditionBase_BP_GetOwnerPlayerState");
static_assert(offsetof(CharacterConditionBase_BP_GetOwnerPlayerState, ReturnValue) == 0x000000, "Member 'CharacterConditionBase_BP_GetOwnerPlayerState::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterConditionBase.BP_GetProgress
// 0x0004 (0x0004 - 0x0000)
struct CharacterConditionBase_BP_GetProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterConditionBase_BP_GetProgress) == 0x000004, "Wrong alignment on CharacterConditionBase_BP_GetProgress");
static_assert(sizeof(CharacterConditionBase_BP_GetProgress) == 0x000004, "Wrong size on CharacterConditionBase_BP_GetProgress");
static_assert(offsetof(CharacterConditionBase_BP_GetProgress, ReturnValue) == 0x000000, "Member 'CharacterConditionBase_BP_GetProgress::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterConditionBase.BP_GetRemainTime
// 0x0004 (0x0004 - 0x0000)
struct CharacterConditionBase_BP_GetRemainTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterConditionBase_BP_GetRemainTime) == 0x000004, "Wrong alignment on CharacterConditionBase_BP_GetRemainTime");
static_assert(sizeof(CharacterConditionBase_BP_GetRemainTime) == 0x000004, "Wrong size on CharacterConditionBase_BP_GetRemainTime");
static_assert(offsetof(CharacterConditionBase_BP_GetRemainTime, ReturnValue) == 0x000000, "Member 'CharacterConditionBase_BP_GetRemainTime::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterConditionBase.BP_IsEnableChangeCondition
// 0x0014 (0x0014 - 0x0000)
struct CharacterConditionBase_BP_IsEnableChangeCondition final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Span;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Interval;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterConditionBase_BP_IsEnableChangeCondition) == 0x000004, "Wrong alignment on CharacterConditionBase_BP_IsEnableChangeCondition");
static_assert(sizeof(CharacterConditionBase_BP_IsEnableChangeCondition) == 0x000014, "Wrong size on CharacterConditionBase_BP_IsEnableChangeCondition");
static_assert(offsetof(CharacterConditionBase_BP_IsEnableChangeCondition, Level) == 0x000000, "Member 'CharacterConditionBase_BP_IsEnableChangeCondition::Level' has a wrong offset!");
static_assert(offsetof(CharacterConditionBase_BP_IsEnableChangeCondition, Span) == 0x000004, "Member 'CharacterConditionBase_BP_IsEnableChangeCondition::Span' has a wrong offset!");
static_assert(offsetof(CharacterConditionBase_BP_IsEnableChangeCondition, Value) == 0x000008, "Member 'CharacterConditionBase_BP_IsEnableChangeCondition::Value' has a wrong offset!");
static_assert(offsetof(CharacterConditionBase_BP_IsEnableChangeCondition, Interval) == 0x00000C, "Member 'CharacterConditionBase_BP_IsEnableChangeCondition::Interval' has a wrong offset!");
static_assert(offsetof(CharacterConditionBase_BP_IsEnableChangeCondition, ReturnValue) == 0x000010, "Member 'CharacterConditionBase_BP_IsEnableChangeCondition::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_ChangeGrabInfo
// 0x001C (0x001C - 0x0000)
struct CharacterState_BP_ChangeGrabInfo final
{
public:
	class FName                                   GrabJointName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GrabbedJointName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationId                                  GrabbedAnimationId;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimationBlendTime;                                // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimationStartPosition;                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_ChangeGrabInfo) == 0x000004, "Wrong alignment on CharacterState_BP_ChangeGrabInfo");
static_assert(sizeof(CharacterState_BP_ChangeGrabInfo) == 0x00001C, "Wrong size on CharacterState_BP_ChangeGrabInfo");
static_assert(offsetof(CharacterState_BP_ChangeGrabInfo, GrabJointName) == 0x000000, "Member 'CharacterState_BP_ChangeGrabInfo::GrabJointName' has a wrong offset!");
static_assert(offsetof(CharacterState_BP_ChangeGrabInfo, GrabbedJointName) == 0x000008, "Member 'CharacterState_BP_ChangeGrabInfo::GrabbedJointName' has a wrong offset!");
static_assert(offsetof(CharacterState_BP_ChangeGrabInfo, GrabbedAnimationId) == 0x000010, "Member 'CharacterState_BP_ChangeGrabInfo::GrabbedAnimationId' has a wrong offset!");
static_assert(offsetof(CharacterState_BP_ChangeGrabInfo, AnimationBlendTime) == 0x000014, "Member 'CharacterState_BP_ChangeGrabInfo::AnimationBlendTime' has a wrong offset!");
static_assert(offsetof(CharacterState_BP_ChangeGrabInfo, AnimationStartPosition) == 0x000018, "Member 'CharacterState_BP_ChangeGrabInfo::AnimationStartPosition' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetAimExcluded
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_SetAimExcluded final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_SetAimExcluded) == 0x000001, "Wrong alignment on CharacterState_BP_SetAimExcluded");
static_assert(sizeof(CharacterState_BP_SetAimExcluded) == 0x000001, "Wrong size on CharacterState_BP_SetAimExcluded");
static_assert(offsetof(CharacterState_BP_SetAimExcluded, Flag) == 0x000000, "Member 'CharacterState_BP_SetAimExcluded::Flag' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetAirJump
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_SetAirJump final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_SetAirJump) == 0x000001, "Wrong alignment on CharacterState_BP_SetAirJump");
static_assert(sizeof(CharacterState_BP_SetAirJump) == 0x000001, "Wrong size on CharacterState_BP_SetAirJump");
static_assert(offsetof(CharacterState_BP_SetAirJump, Flag) == 0x000000, "Member 'CharacterState_BP_SetAirJump::Flag' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetBlowOff
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_SetBlowOff final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_SetBlowOff) == 0x000001, "Wrong alignment on CharacterState_BP_SetBlowOff");
static_assert(sizeof(CharacterState_BP_SetBlowOff) == 0x000001, "Wrong size on CharacterState_BP_SetBlowOff");
static_assert(offsetof(CharacterState_BP_SetBlowOff, Flag) == 0x000000, "Member 'CharacterState_BP_SetBlowOff::Flag' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetCantDashAirTime
// 0x0004 (0x0004 - 0x0000)
struct CharacterState_BP_SetCantDashAirTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_SetCantDashAirTime) == 0x000004, "Wrong alignment on CharacterState_BP_SetCantDashAirTime");
static_assert(sizeof(CharacterState_BP_SetCantDashAirTime) == 0x000004, "Wrong size on CharacterState_BP_SetCantDashAirTime");
static_assert(offsetof(CharacterState_BP_SetCantDashAirTime, Time) == 0x000000, "Member 'CharacterState_BP_SetCantDashAirTime::Time' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetCantDodgeTime
// 0x0004 (0x0004 - 0x0000)
struct CharacterState_BP_SetCantDodgeTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_SetCantDodgeTime) == 0x000004, "Wrong alignment on CharacterState_BP_SetCantDodgeTime");
static_assert(sizeof(CharacterState_BP_SetCantDodgeTime) == 0x000004, "Wrong size on CharacterState_BP_SetCantDodgeTime");
static_assert(offsetof(CharacterState_BP_SetCantDodgeTime, Time) == 0x000000, "Member 'CharacterState_BP_SetCantDodgeTime::Time' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetCrouch
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_SetCrouch final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_SetCrouch) == 0x000001, "Wrong alignment on CharacterState_BP_SetCrouch");
static_assert(sizeof(CharacterState_BP_SetCrouch) == 0x000001, "Wrong size on CharacterState_BP_SetCrouch");
static_assert(offsetof(CharacterState_BP_SetCrouch, Flag) == 0x000000, "Member 'CharacterState_BP_SetCrouch::Flag' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetDash
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_SetDash final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_SetDash) == 0x000001, "Wrong alignment on CharacterState_BP_SetDash");
static_assert(sizeof(CharacterState_BP_SetDash) == 0x000001, "Wrong size on CharacterState_BP_SetDash");
static_assert(offsetof(CharacterState_BP_SetDash, Flag) == 0x000000, "Member 'CharacterState_BP_SetDash::Flag' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetDashAir
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_SetDashAir final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_SetDashAir) == 0x000001, "Wrong alignment on CharacterState_BP_SetDashAir");
static_assert(sizeof(CharacterState_BP_SetDashAir) == 0x000001, "Wrong size on CharacterState_BP_SetDashAir");
static_assert(offsetof(CharacterState_BP_SetDashAir, Flag) == 0x000000, "Member 'CharacterState_BP_SetDashAir::Flag' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetDashAirInfinity
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_SetDashAirInfinity final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_SetDashAirInfinity) == 0x000001, "Wrong alignment on CharacterState_BP_SetDashAirInfinity");
static_assert(sizeof(CharacterState_BP_SetDashAirInfinity) == 0x000001, "Wrong size on CharacterState_BP_SetDashAirInfinity");
static_assert(offsetof(CharacterState_BP_SetDashAirInfinity, Flag) == 0x000000, "Member 'CharacterState_BP_SetDashAirInfinity::Flag' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetDashAirTime
// 0x0004 (0x0004 - 0x0000)
struct CharacterState_BP_SetDashAirTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_SetDashAirTime) == 0x000004, "Wrong alignment on CharacterState_BP_SetDashAirTime");
static_assert(sizeof(CharacterState_BP_SetDashAirTime) == 0x000004, "Wrong size on CharacterState_BP_SetDashAirTime");
static_assert(offsetof(CharacterState_BP_SetDashAirTime, Time) == 0x000000, "Member 'CharacterState_BP_SetDashAirTime::Time' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetDashJump
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_SetDashJump final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_SetDashJump) == 0x000001, "Wrong alignment on CharacterState_BP_SetDashJump");
static_assert(sizeof(CharacterState_BP_SetDashJump) == 0x000001, "Wrong size on CharacterState_BP_SetDashJump");
static_assert(offsetof(CharacterState_BP_SetDashJump, Flag) == 0x000000, "Member 'CharacterState_BP_SetDashJump::Flag' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetDodge
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_SetDodge final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_SetDodge) == 0x000001, "Wrong alignment on CharacterState_BP_SetDodge");
static_assert(sizeof(CharacterState_BP_SetDodge) == 0x000001, "Wrong size on CharacterState_BP_SetDodge");
static_assert(offsetof(CharacterState_BP_SetDodge, Flag) == 0x000000, "Member 'CharacterState_BP_SetDodge::Flag' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetDontFall
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_SetDontFall final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_SetDontFall) == 0x000001, "Wrong alignment on CharacterState_BP_SetDontFall");
static_assert(sizeof(CharacterState_BP_SetDontFall) == 0x000001, "Wrong size on CharacterState_BP_SetDontFall");
static_assert(offsetof(CharacterState_BP_SetDontFall, Flag) == 0x000000, "Member 'CharacterState_BP_SetDontFall::Flag' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetDown
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_SetDown final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_SetDown) == 0x000001, "Wrong alignment on CharacterState_BP_SetDown");
static_assert(sizeof(CharacterState_BP_SetDown) == 0x000001, "Wrong size on CharacterState_BP_SetDown");
static_assert(offsetof(CharacterState_BP_SetDown, Flag) == 0x000000, "Member 'CharacterState_BP_SetDown::Flag' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetDyingRecover
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_SetDyingRecover final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_SetDyingRecover) == 0x000001, "Wrong alignment on CharacterState_BP_SetDyingRecover");
static_assert(sizeof(CharacterState_BP_SetDyingRecover) == 0x000001, "Wrong size on CharacterState_BP_SetDyingRecover");
static_assert(offsetof(CharacterState_BP_SetDyingRecover, Flag) == 0x000000, "Member 'CharacterState_BP_SetDyingRecover::Flag' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetEnableJumpPad
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_SetEnableJumpPad final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_SetEnableJumpPad) == 0x000001, "Wrong alignment on CharacterState_BP_SetEnableJumpPad");
static_assert(sizeof(CharacterState_BP_SetEnableJumpPad) == 0x000001, "Wrong size on CharacterState_BP_SetEnableJumpPad");
static_assert(offsetof(CharacterState_BP_SetEnableJumpPad, Flag) == 0x000000, "Member 'CharacterState_BP_SetEnableJumpPad::Flag' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetEnableUseSupply
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_SetEnableUseSupply final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_SetEnableUseSupply) == 0x000001, "Wrong alignment on CharacterState_BP_SetEnableUseSupply");
static_assert(sizeof(CharacterState_BP_SetEnableUseSupply) == 0x000001, "Wrong size on CharacterState_BP_SetEnableUseSupply");
static_assert(offsetof(CharacterState_BP_SetEnableUseSupply, Flag) == 0x000000, "Member 'CharacterState_BP_SetEnableUseSupply::Flag' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetForwardJump
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_SetForwardJump final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_SetForwardJump) == 0x000001, "Wrong alignment on CharacterState_BP_SetForwardJump");
static_assert(sizeof(CharacterState_BP_SetForwardJump) == 0x000001, "Wrong size on CharacterState_BP_SetForwardJump");
static_assert(offsetof(CharacterState_BP_SetForwardJump, Flag) == 0x000000, "Member 'CharacterState_BP_SetForwardJump::Flag' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetFreeze
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_SetFreeze final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_SetFreeze) == 0x000001, "Wrong alignment on CharacterState_BP_SetFreeze");
static_assert(sizeof(CharacterState_BP_SetFreeze) == 0x000001, "Wrong size on CharacterState_BP_SetFreeze");
static_assert(offsetof(CharacterState_BP_SetFreeze, Flag) == 0x000000, "Member 'CharacterState_BP_SetFreeze::Flag' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetGiant
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_SetGiant final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_SetGiant) == 0x000001, "Wrong alignment on CharacterState_BP_SetGiant");
static_assert(sizeof(CharacterState_BP_SetGiant) == 0x000001, "Wrong size on CharacterState_BP_SetGiant");
static_assert(offsetof(CharacterState_BP_SetGiant, Flag) == 0x000000, "Member 'CharacterState_BP_SetGiant::Flag' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetGrabInfo
// 0x0014 (0x0014 - 0x0000)
struct CharacterState_BP_SetGrabInfo final
{
public:
	class FName                                   GrabJointName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GrabbedJointName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationId                                  GrabbedAnimationId;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterState_BP_SetGrabInfo) == 0x000004, "Wrong alignment on CharacterState_BP_SetGrabInfo");
static_assert(sizeof(CharacterState_BP_SetGrabInfo) == 0x000014, "Wrong size on CharacterState_BP_SetGrabInfo");
static_assert(offsetof(CharacterState_BP_SetGrabInfo, GrabJointName) == 0x000000, "Member 'CharacterState_BP_SetGrabInfo::GrabJointName' has a wrong offset!");
static_assert(offsetof(CharacterState_BP_SetGrabInfo, GrabbedJointName) == 0x000008, "Member 'CharacterState_BP_SetGrabInfo::GrabbedJointName' has a wrong offset!");
static_assert(offsetof(CharacterState_BP_SetGrabInfo, GrabbedAnimationId) == 0x000010, "Member 'CharacterState_BP_SetGrabInfo::GrabbedAnimationId' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetOpenBox
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_SetOpenBox final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_SetOpenBox) == 0x000001, "Wrong alignment on CharacterState_BP_SetOpenBox");
static_assert(sizeof(CharacterState_BP_SetOpenBox) == 0x000001, "Wrong size on CharacterState_BP_SetOpenBox");
static_assert(offsetof(CharacterState_BP_SetOpenBox, Flag) == 0x000000, "Member 'CharacterState_BP_SetOpenBox::Flag' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetPickUpItem
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_SetPickUpItem final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_SetPickUpItem) == 0x000001, "Wrong alignment on CharacterState_BP_SetPickUpItem");
static_assert(sizeof(CharacterState_BP_SetPickUpItem) == 0x000001, "Wrong size on CharacterState_BP_SetPickUpItem");
static_assert(offsetof(CharacterState_BP_SetPickUpItem, Flag) == 0x000000, "Member 'CharacterState_BP_SetPickUpItem::Flag' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetPlusUltraAction
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_SetPlusUltraAction final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_SetPlusUltraAction) == 0x000001, "Wrong alignment on CharacterState_BP_SetPlusUltraAction");
static_assert(sizeof(CharacterState_BP_SetPlusUltraAction) == 0x000001, "Wrong size on CharacterState_BP_SetPlusUltraAction");
static_assert(offsetof(CharacterState_BP_SetPlusUltraAction, Flag) == 0x000000, "Member 'CharacterState_BP_SetPlusUltraAction::Flag' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetRecoverAlly
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_SetRecoverAlly final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_SetRecoverAlly) == 0x000001, "Wrong alignment on CharacterState_BP_SetRecoverAlly");
static_assert(sizeof(CharacterState_BP_SetRecoverAlly) == 0x000001, "Wrong size on CharacterState_BP_SetRecoverAlly");
static_assert(offsetof(CharacterState_BP_SetRecoverAlly, Flag) == 0x000000, "Member 'CharacterState_BP_SetRecoverAlly::Flag' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetRecoverDamaging
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_SetRecoverDamaging final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_SetRecoverDamaging) == 0x000001, "Wrong alignment on CharacterState_BP_SetRecoverDamaging");
static_assert(sizeof(CharacterState_BP_SetRecoverDamaging) == 0x000001, "Wrong size on CharacterState_BP_SetRecoverDamaging");
static_assert(offsetof(CharacterState_BP_SetRecoverDamaging, Flag) == 0x000000, "Member 'CharacterState_BP_SetRecoverDamaging::Flag' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetScoutEnemy
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_SetScoutEnemy final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_SetScoutEnemy) == 0x000001, "Wrong alignment on CharacterState_BP_SetScoutEnemy");
static_assert(sizeof(CharacterState_BP_SetScoutEnemy) == 0x000001, "Wrong size on CharacterState_BP_SetScoutEnemy");
static_assert(offsetof(CharacterState_BP_SetScoutEnemy, Flag) == 0x000000, "Member 'CharacterState_BP_SetScoutEnemy::Flag' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetShock
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_SetShock final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_SetShock) == 0x000001, "Wrong alignment on CharacterState_BP_SetShock");
static_assert(sizeof(CharacterState_BP_SetShock) == 0x000001, "Wrong size on CharacterState_BP_SetShock");
static_assert(offsetof(CharacterState_BP_SetShock, Flag) == 0x000000, "Member 'CharacterState_BP_SetShock::Flag' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetStandUp
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_SetStandUp final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_SetStandUp) == 0x000001, "Wrong alignment on CharacterState_BP_SetStandUp");
static_assert(sizeof(CharacterState_BP_SetStandUp) == 0x000001, "Wrong size on CharacterState_BP_SetStandUp");
static_assert(offsetof(CharacterState_BP_SetStandUp, Flag) == 0x000000, "Member 'CharacterState_BP_SetStandUp::Flag' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetUseItem
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_SetUseItem final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_SetUseItem) == 0x000001, "Wrong alignment on CharacterState_BP_SetUseItem");
static_assert(sizeof(CharacterState_BP_SetUseItem) == 0x000001, "Wrong size on CharacterState_BP_SetUseItem");
static_assert(offsetof(CharacterState_BP_SetUseItem, Flag) == 0x000000, "Member 'CharacterState_BP_SetUseItem::Flag' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetWallCrawl
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_SetWallCrawl final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_SetWallCrawl) == 0x000001, "Wrong alignment on CharacterState_BP_SetWallCrawl");
static_assert(sizeof(CharacterState_BP_SetWallCrawl) == 0x000001, "Wrong size on CharacterState_BP_SetWallCrawl");
static_assert(offsetof(CharacterState_BP_SetWallCrawl, Flag) == 0x000000, "Member 'CharacterState_BP_SetWallCrawl::Flag' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetWallDash
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_SetWallDash final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_SetWallDash) == 0x000001, "Wrong alignment on CharacterState_BP_SetWallDash");
static_assert(sizeof(CharacterState_BP_SetWallDash) == 0x000001, "Wrong size on CharacterState_BP_SetWallDash");
static_assert(offsetof(CharacterState_BP_SetWallDash, Flag) == 0x000000, "Member 'CharacterState_BP_SetWallDash::Flag' has a wrong offset!");

// Function InGameModule.CharacterState.BP_SetWallWalk
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_SetWallWalk final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_SetWallWalk) == 0x000001, "Wrong alignment on CharacterState_BP_SetWallWalk");
static_assert(sizeof(CharacterState_BP_SetWallWalk) == 0x000001, "Wrong size on CharacterState_BP_SetWallWalk");
static_assert(offsetof(CharacterState_BP_SetWallWalk, Flag) == 0x000000, "Member 'CharacterState_BP_SetWallWalk::Flag' has a wrong offset!");

// Function InGameModule.CharacterState.OnRep_PlayerState
// 0x0008 (0x0008 - 0x0000)
struct CharacterState_OnRep_PlayerState final
{
public:
	class APlayerStateBattle*                     PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_OnRep_PlayerState) == 0x000008, "Wrong alignment on CharacterState_OnRep_PlayerState");
static_assert(sizeof(CharacterState_OnRep_PlayerState) == 0x000008, "Wrong size on CharacterState_OnRep_PlayerState");
static_assert(offsetof(CharacterState_OnRep_PlayerState, PlayerState) == 0x000000, "Member 'CharacterState_OnRep_PlayerState::PlayerState' has a wrong offset!");

// Function InGameModule.CharacterState.BP_GetDashAirTime
// 0x0004 (0x0004 - 0x0000)
struct CharacterState_BP_GetDashAirTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_GetDashAirTime) == 0x000004, "Wrong alignment on CharacterState_BP_GetDashAirTime");
static_assert(sizeof(CharacterState_BP_GetDashAirTime) == 0x000004, "Wrong size on CharacterState_BP_GetDashAirTime");
static_assert(offsetof(CharacterState_BP_GetDashAirTime, ReturnValue) == 0x000000, "Member 'CharacterState_BP_GetDashAirTime::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_GetGrabbedCharacter
// 0x0008 (0x0008 - 0x0000)
struct CharacterState_BP_GetGrabbedCharacter final
{
public:
	class ACharacterBattle*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_GetGrabbedCharacter) == 0x000008, "Wrong alignment on CharacterState_BP_GetGrabbedCharacter");
static_assert(sizeof(CharacterState_BP_GetGrabbedCharacter) == 0x000008, "Wrong size on CharacterState_BP_GetGrabbedCharacter");
static_assert(offsetof(CharacterState_BP_GetGrabbedCharacter, ReturnValue) == 0x000000, "Member 'CharacterState_BP_GetGrabbedCharacter::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_GetGrabCharacter
// 0x0008 (0x0008 - 0x0000)
struct CharacterState_BP_GetGrabCharacter final
{
public:
	class ACharacterBattle*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_GetGrabCharacter) == 0x000008, "Wrong alignment on CharacterState_BP_GetGrabCharacter");
static_assert(sizeof(CharacterState_BP_GetGrabCharacter) == 0x000008, "Wrong size on CharacterState_BP_GetGrabCharacter");
static_assert(offsetof(CharacterState_BP_GetGrabCharacter, ReturnValue) == 0x000000, "Member 'CharacterState_BP_GetGrabCharacter::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_GetTouchWallNormal
// 0x000C (0x000C - 0x0000)
struct CharacterState_BP_GetTouchWallNormal final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_GetTouchWallNormal) == 0x000004, "Wrong alignment on CharacterState_BP_GetTouchWallNormal");
static_assert(sizeof(CharacterState_BP_GetTouchWallNormal) == 0x00000C, "Wrong size on CharacterState_BP_GetTouchWallNormal");
static_assert(offsetof(CharacterState_BP_GetTouchWallNormal, ReturnValue) == 0x000000, "Member 'CharacterState_BP_GetTouchWallNormal::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_HasVerticalFixedWallCrawl
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_HasVerticalFixedWallCrawl final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_HasVerticalFixedWallCrawl) == 0x000001, "Wrong alignment on CharacterState_BP_HasVerticalFixedWallCrawl");
static_assert(sizeof(CharacterState_BP_HasVerticalFixedWallCrawl) == 0x000001, "Wrong size on CharacterState_BP_HasVerticalFixedWallCrawl");
static_assert(offsetof(CharacterState_BP_HasVerticalFixedWallCrawl, ReturnValue) == 0x000000, "Member 'CharacterState_BP_HasVerticalFixedWallCrawl::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_HasWallDash
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_HasWallDash final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_HasWallDash) == 0x000001, "Wrong alignment on CharacterState_BP_HasWallDash");
static_assert(sizeof(CharacterState_BP_HasWallDash) == 0x000001, "Wrong size on CharacterState_BP_HasWallDash");
static_assert(offsetof(CharacterState_BP_HasWallDash, ReturnValue) == 0x000000, "Member 'CharacterState_BP_HasWallDash::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsAimingMode
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsAimingMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsAimingMode) == 0x000001, "Wrong alignment on CharacterState_BP_IsAimingMode");
static_assert(sizeof(CharacterState_BP_IsAimingMode) == 0x000001, "Wrong size on CharacterState_BP_IsAimingMode");
static_assert(offsetof(CharacterState_BP_IsAimingMode, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsAimingMode::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsAirJump
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsAirJump final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsAirJump) == 0x000001, "Wrong alignment on CharacterState_BP_IsAirJump");
static_assert(sizeof(CharacterState_BP_IsAirJump) == 0x000001, "Wrong size on CharacterState_BP_IsAirJump");
static_assert(offsetof(CharacterState_BP_IsAirJump, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsAirJump::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsAttacking
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsAttacking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsAttacking) == 0x000001, "Wrong alignment on CharacterState_BP_IsAttacking");
static_assert(sizeof(CharacterState_BP_IsAttacking) == 0x000001, "Wrong size on CharacterState_BP_IsAttacking");
static_assert(offsetof(CharacterState_BP_IsAttacking, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsAttacking::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsBlowOff
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsBlowOff final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsBlowOff) == 0x000001, "Wrong alignment on CharacterState_BP_IsBlowOff");
static_assert(sizeof(CharacterState_BP_IsBlowOff) == 0x000001, "Wrong size on CharacterState_BP_IsBlowOff");
static_assert(offsetof(CharacterState_BP_IsBlowOff, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsBlowOff::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsCrouching
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsCrouching final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsCrouching) == 0x000001, "Wrong alignment on CharacterState_BP_IsCrouching");
static_assert(sizeof(CharacterState_BP_IsCrouching) == 0x000001, "Wrong size on CharacterState_BP_IsCrouching");
static_assert(offsetof(CharacterState_BP_IsCrouching, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsCrouching::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsDamaging
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsDamaging final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsDamaging) == 0x000001, "Wrong alignment on CharacterState_BP_IsDamaging");
static_assert(sizeof(CharacterState_BP_IsDamaging) == 0x000001, "Wrong size on CharacterState_BP_IsDamaging");
static_assert(offsetof(CharacterState_BP_IsDamaging, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsDamaging::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsDash
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsDash final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsDash) == 0x000001, "Wrong alignment on CharacterState_BP_IsDash");
static_assert(sizeof(CharacterState_BP_IsDash) == 0x000001, "Wrong size on CharacterState_BP_IsDash");
static_assert(offsetof(CharacterState_BP_IsDash, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsDash::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsDashAir
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsDashAir final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsDashAir) == 0x000001, "Wrong alignment on CharacterState_BP_IsDashAir");
static_assert(sizeof(CharacterState_BP_IsDashAir) == 0x000001, "Wrong size on CharacterState_BP_IsDashAir");
static_assert(offsetof(CharacterState_BP_IsDashAir, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsDashAir::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsDashAirLimit
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsDashAirLimit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsDashAirLimit) == 0x000001, "Wrong alignment on CharacterState_BP_IsDashAirLimit");
static_assert(sizeof(CharacterState_BP_IsDashAirLimit) == 0x000001, "Wrong size on CharacterState_BP_IsDashAirLimit");
static_assert(offsetof(CharacterState_BP_IsDashAirLimit, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsDashAirLimit::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsDashJump
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsDashJump final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsDashJump) == 0x000001, "Wrong alignment on CharacterState_BP_IsDashJump");
static_assert(sizeof(CharacterState_BP_IsDashJump) == 0x000001, "Wrong size on CharacterState_BP_IsDashJump");
static_assert(offsetof(CharacterState_BP_IsDashJump, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsDashJump::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsDodge
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsDodge final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsDodge) == 0x000001, "Wrong alignment on CharacterState_BP_IsDodge");
static_assert(sizeof(CharacterState_BP_IsDodge) == 0x000001, "Wrong size on CharacterState_BP_IsDodge");
static_assert(offsetof(CharacterState_BP_IsDodge, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsDodge::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsDontFall
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsDontFall final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsDontFall) == 0x000001, "Wrong alignment on CharacterState_BP_IsDontFall");
static_assert(sizeof(CharacterState_BP_IsDontFall) == 0x000001, "Wrong size on CharacterState_BP_IsDontFall");
static_assert(offsetof(CharacterState_BP_IsDontFall, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsDontFall::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsDown
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsDown) == 0x000001, "Wrong alignment on CharacterState_BP_IsDown");
static_assert(sizeof(CharacterState_BP_IsDown) == 0x000001, "Wrong size on CharacterState_BP_IsDown");
static_assert(offsetof(CharacterState_BP_IsDown, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsDown::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsDyingRecover
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsDyingRecover final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsDyingRecover) == 0x000001, "Wrong alignment on CharacterState_BP_IsDyingRecover");
static_assert(sizeof(CharacterState_BP_IsDyingRecover) == 0x000001, "Wrong size on CharacterState_BP_IsDyingRecover");
static_assert(offsetof(CharacterState_BP_IsDyingRecover, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsDyingRecover::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsForwardJump
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsForwardJump final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsForwardJump) == 0x000001, "Wrong alignment on CharacterState_BP_IsForwardJump");
static_assert(sizeof(CharacterState_BP_IsForwardJump) == 0x000001, "Wrong size on CharacterState_BP_IsForwardJump");
static_assert(offsetof(CharacterState_BP_IsForwardJump, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsForwardJump::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsFreeze
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsFreeze final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsFreeze) == 0x000001, "Wrong alignment on CharacterState_BP_IsFreeze");
static_assert(sizeof(CharacterState_BP_IsFreeze) == 0x000001, "Wrong size on CharacterState_BP_IsFreeze");
static_assert(offsetof(CharacterState_BP_IsFreeze, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsFreeze::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsGiant
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsGiant final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsGiant) == 0x000001, "Wrong alignment on CharacterState_BP_IsGiant");
static_assert(sizeof(CharacterState_BP_IsGiant) == 0x000001, "Wrong size on CharacterState_BP_IsGiant");
static_assert(offsetof(CharacterState_BP_IsGiant, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsGiant::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsGrab
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsGrab final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsGrab) == 0x000001, "Wrong alignment on CharacterState_BP_IsGrab");
static_assert(sizeof(CharacterState_BP_IsGrab) == 0x000001, "Wrong size on CharacterState_BP_IsGrab");
static_assert(offsetof(CharacterState_BP_IsGrab, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsGrab::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsGrabbed
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsGrabbed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsGrabbed) == 0x000001, "Wrong alignment on CharacterState_BP_IsGrabbed");
static_assert(sizeof(CharacterState_BP_IsGrabbed) == 0x000001, "Wrong size on CharacterState_BP_IsGrabbed");
static_assert(offsetof(CharacterState_BP_IsGrabbed, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsGrabbed::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsNagaraAttacking
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsNagaraAttacking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsNagaraAttacking) == 0x000001, "Wrong alignment on CharacterState_BP_IsNagaraAttacking");
static_assert(sizeof(CharacterState_BP_IsNagaraAttacking) == 0x000001, "Wrong size on CharacterState_BP_IsNagaraAttacking");
static_assert(offsetof(CharacterState_BP_IsNagaraAttacking, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsNagaraAttacking::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsNagaraDamaging
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsNagaraDamaging final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsNagaraDamaging) == 0x000001, "Wrong alignment on CharacterState_BP_IsNagaraDamaging");
static_assert(sizeof(CharacterState_BP_IsNagaraDamaging) == 0x000001, "Wrong size on CharacterState_BP_IsNagaraDamaging");
static_assert(offsetof(CharacterState_BP_IsNagaraDamaging, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsNagaraDamaging::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsOnWall
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsOnWall final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsOnWall) == 0x000001, "Wrong alignment on CharacterState_BP_IsOnWall");
static_assert(sizeof(CharacterState_BP_IsOnWall) == 0x000001, "Wrong size on CharacterState_BP_IsOnWall");
static_assert(offsetof(CharacterState_BP_IsOnWall, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsOnWall::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsOpenBox
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsOpenBox final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsOpenBox) == 0x000001, "Wrong alignment on CharacterState_BP_IsOpenBox");
static_assert(sizeof(CharacterState_BP_IsOpenBox) == 0x000001, "Wrong size on CharacterState_BP_IsOpenBox");
static_assert(offsetof(CharacterState_BP_IsOpenBox, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsOpenBox::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsPickUpItem
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsPickUpItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsPickUpItem) == 0x000001, "Wrong alignment on CharacterState_BP_IsPickUpItem");
static_assert(sizeof(CharacterState_BP_IsPickUpItem) == 0x000001, "Wrong size on CharacterState_BP_IsPickUpItem");
static_assert(offsetof(CharacterState_BP_IsPickUpItem, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsPickUpItem::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsPlusUltraAction
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsPlusUltraAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsPlusUltraAction) == 0x000001, "Wrong alignment on CharacterState_BP_IsPlusUltraAction");
static_assert(sizeof(CharacterState_BP_IsPlusUltraAction) == 0x000001, "Wrong size on CharacterState_BP_IsPlusUltraAction");
static_assert(offsetof(CharacterState_BP_IsPlusUltraAction, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsPlusUltraAction::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsRecoverDamaging
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsRecoverDamaging final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsRecoverDamaging) == 0x000001, "Wrong alignment on CharacterState_BP_IsRecoverDamaging");
static_assert(sizeof(CharacterState_BP_IsRecoverDamaging) == 0x000001, "Wrong size on CharacterState_BP_IsRecoverDamaging");
static_assert(offsetof(CharacterState_BP_IsRecoverDamaging, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsRecoverDamaging::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsRecoveringAlly
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsRecoveringAlly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsRecoveringAlly) == 0x000001, "Wrong alignment on CharacterState_BP_IsRecoveringAlly");
static_assert(sizeof(CharacterState_BP_IsRecoveringAlly) == 0x000001, "Wrong size on CharacterState_BP_IsRecoveringAlly");
static_assert(offsetof(CharacterState_BP_IsRecoveringAlly, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsRecoveringAlly::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsScoutingEnemy
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsScoutingEnemy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsScoutingEnemy) == 0x000001, "Wrong alignment on CharacterState_BP_IsScoutingEnemy");
static_assert(sizeof(CharacterState_BP_IsScoutingEnemy) == 0x000001, "Wrong size on CharacterState_BP_IsScoutingEnemy");
static_assert(offsetof(CharacterState_BP_IsScoutingEnemy, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsScoutingEnemy::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsShock
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsShock final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsShock) == 0x000001, "Wrong alignment on CharacterState_BP_IsShock");
static_assert(sizeof(CharacterState_BP_IsShock) == 0x000001, "Wrong size on CharacterState_BP_IsShock");
static_assert(offsetof(CharacterState_BP_IsShock, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsShock::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsStandUp
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsStandUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsStandUp) == 0x000001, "Wrong alignment on CharacterState_BP_IsStandUp");
static_assert(sizeof(CharacterState_BP_IsStandUp) == 0x000001, "Wrong size on CharacterState_BP_IsStandUp");
static_assert(offsetof(CharacterState_BP_IsStandUp, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsStandUp::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsTouchGround
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsTouchGround final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsTouchGround) == 0x000001, "Wrong alignment on CharacterState_BP_IsTouchGround");
static_assert(sizeof(CharacterState_BP_IsTouchGround) == 0x000001, "Wrong size on CharacterState_BP_IsTouchGround");
static_assert(offsetof(CharacterState_BP_IsTouchGround, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsTouchGround::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsTouchWall
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsTouchWall final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsTouchWall) == 0x000001, "Wrong alignment on CharacterState_BP_IsTouchWall");
static_assert(sizeof(CharacterState_BP_IsTouchWall) == 0x000001, "Wrong size on CharacterState_BP_IsTouchWall");
static_assert(offsetof(CharacterState_BP_IsTouchWall, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsTouchWall::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsUseItem
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsUseItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsUseItem) == 0x000001, "Wrong alignment on CharacterState_BP_IsUseItem");
static_assert(sizeof(CharacterState_BP_IsUseItem) == 0x000001, "Wrong size on CharacterState_BP_IsUseItem");
static_assert(offsetof(CharacterState_BP_IsUseItem, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsUseItem::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsWallCrawl
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsWallCrawl final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsWallCrawl) == 0x000001, "Wrong alignment on CharacterState_BP_IsWallCrawl");
static_assert(sizeof(CharacterState_BP_IsWallCrawl) == 0x000001, "Wrong size on CharacterState_BP_IsWallCrawl");
static_assert(offsetof(CharacterState_BP_IsWallCrawl, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsWallCrawl::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsWallDash
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsWallDash final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsWallDash) == 0x000001, "Wrong alignment on CharacterState_BP_IsWallDash");
static_assert(sizeof(CharacterState_BP_IsWallDash) == 0x000001, "Wrong size on CharacterState_BP_IsWallDash");
static_assert(offsetof(CharacterState_BP_IsWallDash, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsWallDash::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsWallWalk
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsWallWalk final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsWallWalk) == 0x000001, "Wrong alignment on CharacterState_BP_IsWallWalk");
static_assert(sizeof(CharacterState_BP_IsWallWalk) == 0x000001, "Wrong size on CharacterState_BP_IsWallWalk");
static_assert(offsetof(CharacterState_BP_IsWallWalk, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsWallWalk::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsWholeAttacking
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsWholeAttacking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsWholeAttacking) == 0x000001, "Wrong alignment on CharacterState_BP_IsWholeAttacking");
static_assert(sizeof(CharacterState_BP_IsWholeAttacking) == 0x000001, "Wrong size on CharacterState_BP_IsWholeAttacking");
static_assert(offsetof(CharacterState_BP_IsWholeAttacking, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsWholeAttacking::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterState.BP_IsWholeDamaging
// 0x0001 (0x0001 - 0x0000)
struct CharacterState_BP_IsWholeDamaging final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterState_BP_IsWholeDamaging) == 0x000001, "Wrong alignment on CharacterState_BP_IsWholeDamaging");
static_assert(sizeof(CharacterState_BP_IsWholeDamaging) == 0x000001, "Wrong size on CharacterState_BP_IsWholeDamaging");
static_assert(offsetof(CharacterState_BP_IsWholeDamaging, ReturnValue) == 0x000000, "Member 'CharacterState_BP_IsWholeDamaging::ReturnValue' has a wrong offset!");

// Function InGameModule.AIMove.BeAttackedDetection
// 0x0018 (0x0018 - 0x0000)
struct AIMove_BeAttackedDetection final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIMove_BeAttackedDetection) == 0x000008, "Wrong alignment on AIMove_BeAttackedDetection");
static_assert(sizeof(AIMove_BeAttackedDetection) == 0x000018, "Wrong size on AIMove_BeAttackedDetection");
static_assert(offsetof(AIMove_BeAttackedDetection, Actor) == 0x000000, "Member 'AIMove_BeAttackedDetection::Actor' has a wrong offset!");
static_assert(offsetof(AIMove_BeAttackedDetection, Location) == 0x000008, "Member 'AIMove_BeAttackedDetection::Location' has a wrong offset!");

// Function InGameModule.AIMove.OnDamageHit
// 0x0080 (0x0080 - 0x0000)
struct AIMove_OnDamageHit final
{
public:
	struct FDamageInfo                            NewInfo;                                           // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMove_OnDamageHit) == 0x000008, "Wrong alignment on AIMove_OnDamageHit");
static_assert(sizeof(AIMove_OnDamageHit) == 0x000080, "Wrong size on AIMove_OnDamageHit");
static_assert(offsetof(AIMove_OnDamageHit, NewInfo) == 0x000000, "Member 'AIMove_OnDamageHit::NewInfo' has a wrong offset!");

// Function InGameModule.GameStateBattle.AttackTutorialNPC
// 0x0010 (0x0010 - 0x0000)
struct GameStateBattle_AttackTutorialNPC final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_AttackTutorialNPC) == 0x000008, "Wrong alignment on GameStateBattle_AttackTutorialNPC");
static_assert(sizeof(GameStateBattle_AttackTutorialNPC) == 0x000010, "Wrong size on GameStateBattle_AttackTutorialNPC");
static_assert(offsetof(GameStateBattle_AttackTutorialNPC, Value) == 0x000000, "Member 'GameStateBattle_AttackTutorialNPC::Value' has a wrong offset!");

// Function InGameModule.GameStateBattle.CheckTutorialMockBattleTimer
// 0x0001 (0x0001 - 0x0000)
struct GameStateBattle_CheckTutorialMockBattleTimer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_CheckTutorialMockBattleTimer) == 0x000001, "Wrong alignment on GameStateBattle_CheckTutorialMockBattleTimer");
static_assert(sizeof(GameStateBattle_CheckTutorialMockBattleTimer) == 0x000001, "Wrong size on GameStateBattle_CheckTutorialMockBattleTimer");
static_assert(offsetof(GameStateBattle_CheckTutorialMockBattleTimer, ReturnValue) == 0x000000, "Member 'GameStateBattle_CheckTutorialMockBattleTimer::ReturnValue' has a wrong offset!");

// Function InGameModule.GameStateBattle.CheckTutorialPlayerAttack
// 0x0002 (0x0002 - 0x0000)
struct GameStateBattle_CheckTutorialPlayerAttack final
{
public:
	EAttackId                                     AttackId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_CheckTutorialPlayerAttack) == 0x000001, "Wrong alignment on GameStateBattle_CheckTutorialPlayerAttack");
static_assert(sizeof(GameStateBattle_CheckTutorialPlayerAttack) == 0x000002, "Wrong size on GameStateBattle_CheckTutorialPlayerAttack");
static_assert(offsetof(GameStateBattle_CheckTutorialPlayerAttack, AttackId) == 0x000000, "Member 'GameStateBattle_CheckTutorialPlayerAttack::AttackId' has a wrong offset!");
static_assert(offsetof(GameStateBattle_CheckTutorialPlayerAttack, ReturnValue) == 0x000001, "Member 'GameStateBattle_CheckTutorialPlayerAttack::ReturnValue' has a wrong offset!");

// Function InGameModule.GameStateBattle.CreateTutorialCh012
// 0x0040 (0x0040 - 0x0000)
struct GameStateBattle_CreateTutorialCh012 final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class ASimpleCharacter*                       ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameStateBattle_CreateTutorialCh012) == 0x000010, "Wrong alignment on GameStateBattle_CreateTutorialCh012");
static_assert(sizeof(GameStateBattle_CreateTutorialCh012) == 0x000040, "Wrong size on GameStateBattle_CreateTutorialCh012");
static_assert(offsetof(GameStateBattle_CreateTutorialCh012, Transform) == 0x000000, "Member 'GameStateBattle_CreateTutorialCh012::Transform' has a wrong offset!");
static_assert(offsetof(GameStateBattle_CreateTutorialCh012, ReturnValue) == 0x000030, "Member 'GameStateBattle_CreateTutorialCh012::ReturnValue' has a wrong offset!");

// Function InGameModule.GameStateBattle.CreateTutorialNPC
// 0x0010 (0x0010 - 0x0000)
struct GameStateBattle_CreateTutorialNPC final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_CreateTutorialNPC) == 0x000008, "Wrong alignment on GameStateBattle_CreateTutorialNPC");
static_assert(sizeof(GameStateBattle_CreateTutorialNPC) == 0x000010, "Wrong size on GameStateBattle_CreateTutorialNPC");
static_assert(offsetof(GameStateBattle_CreateTutorialNPC, Value) == 0x000000, "Member 'GameStateBattle_CreateTutorialNPC::Value' has a wrong offset!");

// Function InGameModule.GameStateBattle.DeleteMessageTag
// 0x0020 (0x0020 - 0x0000)
struct GameStateBattle_DeleteMessageTag final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_DeleteMessageTag) == 0x000008, "Wrong alignment on GameStateBattle_DeleteMessageTag");
static_assert(sizeof(GameStateBattle_DeleteMessageTag) == 0x000020, "Wrong size on GameStateBattle_DeleteMessageTag");
static_assert(offsetof(GameStateBattle_DeleteMessageTag, Message) == 0x000000, "Member 'GameStateBattle_DeleteMessageTag::Message' has a wrong offset!");
static_assert(offsetof(GameStateBattle_DeleteMessageTag, ReturnValue) == 0x000010, "Member 'GameStateBattle_DeleteMessageTag::ReturnValue' has a wrong offset!");

// Function InGameModule.GameStateBattle.DeleteTutorialNPC
// 0x0010 (0x0010 - 0x0000)
struct GameStateBattle_DeleteTutorialNPC final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_DeleteTutorialNPC) == 0x000008, "Wrong alignment on GameStateBattle_DeleteTutorialNPC");
static_assert(sizeof(GameStateBattle_DeleteTutorialNPC) == 0x000010, "Wrong size on GameStateBattle_DeleteTutorialNPC");
static_assert(offsetof(GameStateBattle_DeleteTutorialNPC, Value) == 0x000000, "Member 'GameStateBattle_DeleteTutorialNPC::Value' has a wrong offset!");

// Function InGameModule.GameStateBattle.DownTutorialNPC
// 0x0010 (0x0010 - 0x0000)
struct GameStateBattle_DownTutorialNPC final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_DownTutorialNPC) == 0x000008, "Wrong alignment on GameStateBattle_DownTutorialNPC");
static_assert(sizeof(GameStateBattle_DownTutorialNPC) == 0x000010, "Wrong size on GameStateBattle_DownTutorialNPC");
static_assert(offsetof(GameStateBattle_DownTutorialNPC, Value) == 0x000000, "Member 'GameStateBattle_DownTutorialNPC::Value' has a wrong offset!");

// Function InGameModule.GameStateBattle.GetButtonGuideFromCommand
// 0x0020 (0x0020 - 0x0000)
struct GameStateBattle_GetButtonGuideFromCommand final
{
public:
	class FString                                 TaskValue;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTutorialCheckListButtonGuideData> ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_GetButtonGuideFromCommand) == 0x000008, "Wrong alignment on GameStateBattle_GetButtonGuideFromCommand");
static_assert(sizeof(GameStateBattle_GetButtonGuideFromCommand) == 0x000020, "Wrong size on GameStateBattle_GetButtonGuideFromCommand");
static_assert(offsetof(GameStateBattle_GetButtonGuideFromCommand, TaskValue) == 0x000000, "Member 'GameStateBattle_GetButtonGuideFromCommand::TaskValue' has a wrong offset!");
static_assert(offsetof(GameStateBattle_GetButtonGuideFromCommand, ReturnValue) == 0x000010, "Member 'GameStateBattle_GetButtonGuideFromCommand::ReturnValue' has a wrong offset!");

// Function InGameModule.GameStateBattle.GetTutorialCheckKey
// 0x0018 (0x0018 - 0x0000)
struct GameStateBattle_GetTutorialCheckKey final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_GetTutorialCheckKey) == 0x000008, "Wrong alignment on GameStateBattle_GetTutorialCheckKey");
static_assert(sizeof(GameStateBattle_GetTutorialCheckKey) == 0x000018, "Wrong size on GameStateBattle_GetTutorialCheckKey");
static_assert(offsetof(GameStateBattle_GetTutorialCheckKey, Value) == 0x000000, "Member 'GameStateBattle_GetTutorialCheckKey::Value' has a wrong offset!");
static_assert(offsetof(GameStateBattle_GetTutorialCheckKey, ReturnValue) == 0x000010, "Member 'GameStateBattle_GetTutorialCheckKey::ReturnValue' has a wrong offset!");

// Function InGameModule.GameStateBattle.GetTutorialOperationMessage
// 0x0028 (0x0028 - 0x0000)
struct GameStateBattle_GetTutorialOperationMessage final
{
public:
	class FString                                 MessageKey;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_GetTutorialOperationMessage) == 0x000008, "Wrong alignment on GameStateBattle_GetTutorialOperationMessage");
static_assert(sizeof(GameStateBattle_GetTutorialOperationMessage) == 0x000028, "Wrong size on GameStateBattle_GetTutorialOperationMessage");
static_assert(offsetof(GameStateBattle_GetTutorialOperationMessage, MessageKey) == 0x000000, "Member 'GameStateBattle_GetTutorialOperationMessage::MessageKey' has a wrong offset!");
static_assert(offsetof(GameStateBattle_GetTutorialOperationMessage, ReturnValue) == 0x000010, "Member 'GameStateBattle_GetTutorialOperationMessage::ReturnValue' has a wrong offset!");

// Function InGameModule.GameStateBattle.GetTutorialPlatform
// 0x0001 (0x0001 - 0x0000)
struct GameStateBattle_GetTutorialPlatform final
{
public:
	EPlatform                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_GetTutorialPlatform) == 0x000001, "Wrong alignment on GameStateBattle_GetTutorialPlatform");
static_assert(sizeof(GameStateBattle_GetTutorialPlatform) == 0x000001, "Wrong size on GameStateBattle_GetTutorialPlatform");
static_assert(offsetof(GameStateBattle_GetTutorialPlatform, ReturnValue) == 0x000000, "Member 'GameStateBattle_GetTutorialPlatform::ReturnValue' has a wrong offset!");

// Function InGameModule.GameStateBattle.GetTutorialTaskTableIndex
// 0x0018 (0x0018 - 0x0000)
struct GameStateBattle_GetTutorialTaskTableIndex final
{
public:
	class FString                                 TaskValue;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameStateBattle_GetTutorialTaskTableIndex) == 0x000008, "Wrong alignment on GameStateBattle_GetTutorialTaskTableIndex");
static_assert(sizeof(GameStateBattle_GetTutorialTaskTableIndex) == 0x000018, "Wrong size on GameStateBattle_GetTutorialTaskTableIndex");
static_assert(offsetof(GameStateBattle_GetTutorialTaskTableIndex, TaskValue) == 0x000000, "Member 'GameStateBattle_GetTutorialTaskTableIndex::TaskValue' has a wrong offset!");
static_assert(offsetof(GameStateBattle_GetTutorialTaskTableIndex, ReturnValue) == 0x000010, "Member 'GameStateBattle_GetTutorialTaskTableIndex::ReturnValue' has a wrong offset!");

// Function InGameModule.GameStateBattle.GetWin
// 0x0001 (0x0001 - 0x0000)
struct GameStateBattle_GetWin final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_GetWin) == 0x000001, "Wrong alignment on GameStateBattle_GetWin");
static_assert(sizeof(GameStateBattle_GetWin) == 0x000001, "Wrong size on GameStateBattle_GetWin");
static_assert(offsetof(GameStateBattle_GetWin, ReturnValue) == 0x000000, "Member 'GameStateBattle_GetWin::ReturnValue' has a wrong offset!");

// Function InGameModule.GameStateBattle.HasNpcCharacterStarted
// 0x0001 (0x0001 - 0x0000)
struct GameStateBattle_HasNpcCharacterStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_HasNpcCharacterStarted) == 0x000001, "Wrong alignment on GameStateBattle_HasNpcCharacterStarted");
static_assert(sizeof(GameStateBattle_HasNpcCharacterStarted) == 0x000001, "Wrong size on GameStateBattle_HasNpcCharacterStarted");
static_assert(offsetof(GameStateBattle_HasNpcCharacterStarted, ReturnValue) == 0x000000, "Member 'GameStateBattle_HasNpcCharacterStarted::ReturnValue' has a wrong offset!");

// Function InGameModule.GameStateBattle.IsAttackTutorialNPC
// 0x0018 (0x0018 - 0x0000)
struct GameStateBattle_IsAttackTutorialNPC final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameStateBattle_IsAttackTutorialNPC) == 0x000008, "Wrong alignment on GameStateBattle_IsAttackTutorialNPC");
static_assert(sizeof(GameStateBattle_IsAttackTutorialNPC) == 0x000018, "Wrong size on GameStateBattle_IsAttackTutorialNPC");
static_assert(offsetof(GameStateBattle_IsAttackTutorialNPC, Value) == 0x000000, "Member 'GameStateBattle_IsAttackTutorialNPC::Value' has a wrong offset!");
static_assert(offsetof(GameStateBattle_IsAttackTutorialNPC, ReturnValue) == 0x000010, "Member 'GameStateBattle_IsAttackTutorialNPC::ReturnValue' has a wrong offset!");

// Function InGameModule.GameStateBattle.IsDeadTutorialNPC
// 0x0018 (0x0018 - 0x0000)
struct GameStateBattle_IsDeadTutorialNPC final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameStateBattle_IsDeadTutorialNPC) == 0x000008, "Wrong alignment on GameStateBattle_IsDeadTutorialNPC");
static_assert(sizeof(GameStateBattle_IsDeadTutorialNPC) == 0x000018, "Wrong size on GameStateBattle_IsDeadTutorialNPC");
static_assert(offsetof(GameStateBattle_IsDeadTutorialNPC, Value) == 0x000000, "Member 'GameStateBattle_IsDeadTutorialNPC::Value' has a wrong offset!");
static_assert(offsetof(GameStateBattle_IsDeadTutorialNPC, ReturnValue) == 0x000010, "Member 'GameStateBattle_IsDeadTutorialNPC::ReturnValue' has a wrong offset!");

// Function InGameModule.GameStateBattle.IsGameModeTraining
// 0x0001 (0x0001 - 0x0000)
struct GameStateBattle_IsGameModeTraining final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_IsGameModeTraining) == 0x000001, "Wrong alignment on GameStateBattle_IsGameModeTraining");
static_assert(sizeof(GameStateBattle_IsGameModeTraining) == 0x000001, "Wrong size on GameStateBattle_IsGameModeTraining");
static_assert(offsetof(GameStateBattle_IsGameModeTraining, ReturnValue) == 0x000000, "Member 'GameStateBattle_IsGameModeTraining::ReturnValue' has a wrong offset!");

// Function InGameModule.GameStateBattle.IsGameModeTutorial
// 0x0001 (0x0001 - 0x0000)
struct GameStateBattle_IsGameModeTutorial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_IsGameModeTutorial) == 0x000001, "Wrong alignment on GameStateBattle_IsGameModeTutorial");
static_assert(sizeof(GameStateBattle_IsGameModeTutorial) == 0x000001, "Wrong size on GameStateBattle_IsGameModeTutorial");
static_assert(offsetof(GameStateBattle_IsGameModeTutorial, ReturnValue) == 0x000000, "Member 'GameStateBattle_IsGameModeTutorial::ReturnValue' has a wrong offset!");

// Function InGameModule.GameStateBattle.IsKillEnemy
// 0x0001 (0x0001 - 0x0000)
struct GameStateBattle_IsKillEnemy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_IsKillEnemy) == 0x000001, "Wrong alignment on GameStateBattle_IsKillEnemy");
static_assert(sizeof(GameStateBattle_IsKillEnemy) == 0x000001, "Wrong size on GameStateBattle_IsKillEnemy");
static_assert(offsetof(GameStateBattle_IsKillEnemy, ReturnValue) == 0x000000, "Member 'GameStateBattle_IsKillEnemy::ReturnValue' has a wrong offset!");

// Function InGameModule.GameStateBattle.IsMoveTutorialNPC
// 0x0018 (0x0018 - 0x0000)
struct GameStateBattle_IsMoveTutorialNPC final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameStateBattle_IsMoveTutorialNPC) == 0x000008, "Wrong alignment on GameStateBattle_IsMoveTutorialNPC");
static_assert(sizeof(GameStateBattle_IsMoveTutorialNPC) == 0x000018, "Wrong size on GameStateBattle_IsMoveTutorialNPC");
static_assert(offsetof(GameStateBattle_IsMoveTutorialNPC, Value) == 0x000000, "Member 'GameStateBattle_IsMoveTutorialNPC::Value' has a wrong offset!");
static_assert(offsetof(GameStateBattle_IsMoveTutorialNPC, ReturnValue) == 0x000010, "Member 'GameStateBattle_IsMoveTutorialNPC::ReturnValue' has a wrong offset!");

// Function InGameModule.GameStateBattle.IsPoisonMistCondition
// 0x0001 (0x0001 - 0x0000)
struct GameStateBattle_IsPoisonMistCondition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_IsPoisonMistCondition) == 0x000001, "Wrong alignment on GameStateBattle_IsPoisonMistCondition");
static_assert(sizeof(GameStateBattle_IsPoisonMistCondition) == 0x000001, "Wrong size on GameStateBattle_IsPoisonMistCondition");
static_assert(offsetof(GameStateBattle_IsPoisonMistCondition, ReturnValue) == 0x000000, "Member 'GameStateBattle_IsPoisonMistCondition::ReturnValue' has a wrong offset!");

// Function InGameModule.GameStateBattle.IsRecoveringCitizen
// 0x0001 (0x0001 - 0x0000)
struct GameStateBattle_IsRecoveringCitizen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_IsRecoveringCitizen) == 0x000001, "Wrong alignment on GameStateBattle_IsRecoveringCitizen");
static_assert(sizeof(GameStateBattle_IsRecoveringCitizen) == 0x000001, "Wrong size on GameStateBattle_IsRecoveringCitizen");
static_assert(offsetof(GameStateBattle_IsRecoveringCitizen, ReturnValue) == 0x000000, "Member 'GameStateBattle_IsRecoveringCitizen::ReturnValue' has a wrong offset!");

// Function InGameModule.GameStateBattle.IsStartShrinkPoisonMist
// 0x0001 (0x0001 - 0x0000)
struct GameStateBattle_IsStartShrinkPoisonMist final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_IsStartShrinkPoisonMist) == 0x000001, "Wrong alignment on GameStateBattle_IsStartShrinkPoisonMist");
static_assert(sizeof(GameStateBattle_IsStartShrinkPoisonMist) == 0x000001, "Wrong size on GameStateBattle_IsStartShrinkPoisonMist");
static_assert(offsetof(GameStateBattle_IsStartShrinkPoisonMist, ReturnValue) == 0x000000, "Member 'GameStateBattle_IsStartShrinkPoisonMist::ReturnValue' has a wrong offset!");

// Function InGameModule.GameStateBattle.IsTutorial
// 0x0001 (0x0001 - 0x0000)
struct GameStateBattle_IsTutorial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_IsTutorial) == 0x000001, "Wrong alignment on GameStateBattle_IsTutorial");
static_assert(sizeof(GameStateBattle_IsTutorial) == 0x000001, "Wrong size on GameStateBattle_IsTutorial");
static_assert(offsetof(GameStateBattle_IsTutorial, ReturnValue) == 0x000000, "Member 'GameStateBattle_IsTutorial::ReturnValue' has a wrong offset!");

// Function InGameModule.GameStateBattle.MoveTutorialNPC
// 0x0010 (0x0010 - 0x0000)
struct GameStateBattle_MoveTutorialNPC final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_MoveTutorialNPC) == 0x000008, "Wrong alignment on GameStateBattle_MoveTutorialNPC");
static_assert(sizeof(GameStateBattle_MoveTutorialNPC) == 0x000010, "Wrong size on GameStateBattle_MoveTutorialNPC");
static_assert(offsetof(GameStateBattle_MoveTutorialNPC, Value) == 0x000000, "Member 'GameStateBattle_MoveTutorialNPC::Value' has a wrong offset!");

// Function InGameModule.GameStateBattle.OnCharacterDead_NetMulti
// 0x0010 (0x0010 - 0x0000)
struct GameStateBattle_OnCharacterDead_NetMulti final
{
public:
	class APlayerStateBattle*                     VictimPlayerState;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharacterBattle*                       Aggriever;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_OnCharacterDead_NetMulti) == 0x000008, "Wrong alignment on GameStateBattle_OnCharacterDead_NetMulti");
static_assert(sizeof(GameStateBattle_OnCharacterDead_NetMulti) == 0x000010, "Wrong size on GameStateBattle_OnCharacterDead_NetMulti");
static_assert(offsetof(GameStateBattle_OnCharacterDead_NetMulti, VictimPlayerState) == 0x000000, "Member 'GameStateBattle_OnCharacterDead_NetMulti::VictimPlayerState' has a wrong offset!");
static_assert(offsetof(GameStateBattle_OnCharacterDead_NetMulti, Aggriever) == 0x000008, "Member 'GameStateBattle_OnCharacterDead_NetMulti::Aggriever' has a wrong offset!");

// Function InGameModule.GameStateBattle.OnCharacterDying_NetMulti
// 0x0010 (0x0010 - 0x0000)
struct GameStateBattle_OnCharacterDying_NetMulti final
{
public:
	class APlayerStateBattle*                     VictimPlayerState;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharacterBattle*                       Aggriever;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_OnCharacterDying_NetMulti) == 0x000008, "Wrong alignment on GameStateBattle_OnCharacterDying_NetMulti");
static_assert(sizeof(GameStateBattle_OnCharacterDying_NetMulti) == 0x000010, "Wrong size on GameStateBattle_OnCharacterDying_NetMulti");
static_assert(offsetof(GameStateBattle_OnCharacterDying_NetMulti, VictimPlayerState) == 0x000000, "Member 'GameStateBattle_OnCharacterDying_NetMulti::VictimPlayerState' has a wrong offset!");
static_assert(offsetof(GameStateBattle_OnCharacterDying_NetMulti, Aggriever) == 0x000008, "Member 'GameStateBattle_OnCharacterDying_NetMulti::Aggriever' has a wrong offset!");

// Function InGameModule.GameStateBattle.OnHitAttackLastBattle
// 0x0080 (0x0080 - 0x0000)
struct GameStateBattle_OnHitAttackLastBattle final
{
public:
	struct FDamageInfo                            NewInfo;                                           // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_OnHitAttackLastBattle) == 0x000008, "Wrong alignment on GameStateBattle_OnHitAttackLastBattle");
static_assert(sizeof(GameStateBattle_OnHitAttackLastBattle) == 0x000080, "Wrong size on GameStateBattle_OnHitAttackLastBattle");
static_assert(offsetof(GameStateBattle_OnHitAttackLastBattle, NewInfo) == 0x000000, "Member 'GameStateBattle_OnHitAttackLastBattle::NewInfo' has a wrong offset!");

// Function InGameModule.GameStateBattle.RequestTeleportationTutorial
// 0x000C (0x000C - 0x0000)
struct GameStateBattle_RequestTeleportationTutorial final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Z;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_RequestTeleportationTutorial) == 0x000004, "Wrong alignment on GameStateBattle_RequestTeleportationTutorial");
static_assert(sizeof(GameStateBattle_RequestTeleportationTutorial) == 0x00000C, "Wrong size on GameStateBattle_RequestTeleportationTutorial");
static_assert(offsetof(GameStateBattle_RequestTeleportationTutorial, X) == 0x000000, "Member 'GameStateBattle_RequestTeleportationTutorial::X' has a wrong offset!");
static_assert(offsetof(GameStateBattle_RequestTeleportationTutorial, Y) == 0x000004, "Member 'GameStateBattle_RequestTeleportationTutorial::Y' has a wrong offset!");
static_assert(offsetof(GameStateBattle_RequestTeleportationTutorial, Z) == 0x000008, "Member 'GameStateBattle_RequestTeleportationTutorial::Z' has a wrong offset!");

// Function InGameModule.GameStateBattle.RequestTeleportationTutorialWithRotator
// 0x0018 (0x0018 - 0x0000)
struct GameStateBattle_RequestTeleportationTutorialWithRotator final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Z;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Pitch;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Yaw;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Roll;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_RequestTeleportationTutorialWithRotator) == 0x000004, "Wrong alignment on GameStateBattle_RequestTeleportationTutorialWithRotator");
static_assert(sizeof(GameStateBattle_RequestTeleportationTutorialWithRotator) == 0x000018, "Wrong size on GameStateBattle_RequestTeleportationTutorialWithRotator");
static_assert(offsetof(GameStateBattle_RequestTeleportationTutorialWithRotator, X) == 0x000000, "Member 'GameStateBattle_RequestTeleportationTutorialWithRotator::X' has a wrong offset!");
static_assert(offsetof(GameStateBattle_RequestTeleportationTutorialWithRotator, Y) == 0x000004, "Member 'GameStateBattle_RequestTeleportationTutorialWithRotator::Y' has a wrong offset!");
static_assert(offsetof(GameStateBattle_RequestTeleportationTutorialWithRotator, Z) == 0x000008, "Member 'GameStateBattle_RequestTeleportationTutorialWithRotator::Z' has a wrong offset!");
static_assert(offsetof(GameStateBattle_RequestTeleportationTutorialWithRotator, Pitch) == 0x00000C, "Member 'GameStateBattle_RequestTeleportationTutorialWithRotator::Pitch' has a wrong offset!");
static_assert(offsetof(GameStateBattle_RequestTeleportationTutorialWithRotator, Yaw) == 0x000010, "Member 'GameStateBattle_RequestTeleportationTutorialWithRotator::Yaw' has a wrong offset!");
static_assert(offsetof(GameStateBattle_RequestTeleportationTutorialWithRotator, Roll) == 0x000014, "Member 'GameStateBattle_RequestTeleportationTutorialWithRotator::Roll' has a wrong offset!");

// Function InGameModule.GameStateBattle.SetBattleSequence
// 0x0001 (0x0001 - 0x0000)
struct GameStateBattle_SetBattleSequence final
{
public:
	EBattleSequence                               Seq;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_SetBattleSequence) == 0x000001, "Wrong alignment on GameStateBattle_SetBattleSequence");
static_assert(sizeof(GameStateBattle_SetBattleSequence) == 0x000001, "Wrong size on GameStateBattle_SetBattleSequence");
static_assert(offsetof(GameStateBattle_SetBattleSequence, Seq) == 0x000000, "Member 'GameStateBattle_SetBattleSequence::Seq' has a wrong offset!");

// Function InGameModule.GameStateBattle.SetCanPlayAnnounceWidget
// 0x0001 (0x0001 - 0x0000)
struct GameStateBattle_SetCanPlayAnnounceWidget final
{
public:
	bool                                          bCanPlay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_SetCanPlayAnnounceWidget) == 0x000001, "Wrong alignment on GameStateBattle_SetCanPlayAnnounceWidget");
static_assert(sizeof(GameStateBattle_SetCanPlayAnnounceWidget) == 0x000001, "Wrong size on GameStateBattle_SetCanPlayAnnounceWidget");
static_assert(offsetof(GameStateBattle_SetCanPlayAnnounceWidget, bCanPlay) == 0x000000, "Member 'GameStateBattle_SetCanPlayAnnounceWidget::bCanPlay' has a wrong offset!");

// Function InGameModule.GameStateBattle.SetTutorialEnemyCount
// 0x0004 (0x0004 - 0x0000)
struct GameStateBattle_SetTutorialEnemyCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_SetTutorialEnemyCount) == 0x000004, "Wrong alignment on GameStateBattle_SetTutorialEnemyCount");
static_assert(sizeof(GameStateBattle_SetTutorialEnemyCount) == 0x000004, "Wrong size on GameStateBattle_SetTutorialEnemyCount");
static_assert(offsetof(GameStateBattle_SetTutorialEnemyCount, ReturnValue) == 0x000000, "Member 'GameStateBattle_SetTutorialEnemyCount::ReturnValue' has a wrong offset!");

// Function InGameModule.GameStateBattle.SetTutorialItem
// 0x0010 (0x0010 - 0x0000)
struct GameStateBattle_SetTutorialItem final
{
public:
	class FString                                 KindItem;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_SetTutorialItem) == 0x000008, "Wrong alignment on GameStateBattle_SetTutorialItem");
static_assert(sizeof(GameStateBattle_SetTutorialItem) == 0x000010, "Wrong size on GameStateBattle_SetTutorialItem");
static_assert(offsetof(GameStateBattle_SetTutorialItem, KindItem) == 0x000000, "Member 'GameStateBattle_SetTutorialItem::KindItem' has a wrong offset!");

// Function InGameModule.GameStateBattle.SetTutorialMockBattleTimer
// 0x0004 (0x0004 - 0x0000)
struct GameStateBattle_SetTutorialMockBattleTimer final
{
public:
	float                                         MockBattleTimeCount;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_SetTutorialMockBattleTimer) == 0x000004, "Wrong alignment on GameStateBattle_SetTutorialMockBattleTimer");
static_assert(sizeof(GameStateBattle_SetTutorialMockBattleTimer) == 0x000004, "Wrong size on GameStateBattle_SetTutorialMockBattleTimer");
static_assert(offsetof(GameStateBattle_SetTutorialMockBattleTimer, MockBattleTimeCount) == 0x000000, "Member 'GameStateBattle_SetTutorialMockBattleTimer::MockBattleTimeCount' has a wrong offset!");

// Function InGameModule.GameStateBattle.SetTutorialPlayerCommandValidity
// 0x0001 (0x0001 - 0x0000)
struct GameStateBattle_SetTutorialPlayerCommandValidity final
{
public:
	bool                                          bValidty;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_SetTutorialPlayerCommandValidity) == 0x000001, "Wrong alignment on GameStateBattle_SetTutorialPlayerCommandValidity");
static_assert(sizeof(GameStateBattle_SetTutorialPlayerCommandValidity) == 0x000001, "Wrong size on GameStateBattle_SetTutorialPlayerCommandValidity");
static_assert(offsetof(GameStateBattle_SetTutorialPlayerCommandValidity, bValidty) == 0x000000, "Member 'GameStateBattle_SetTutorialPlayerCommandValidity::bValidty' has a wrong offset!");

// Function InGameModule.GameStateBattle.SplitStringByCarriageReturn
// 0x0020 (0x0020 - 0x0000)
struct GameStateBattle_SplitStringByCarriageReturn final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_SplitStringByCarriageReturn) == 0x000008, "Wrong alignment on GameStateBattle_SplitStringByCarriageReturn");
static_assert(sizeof(GameStateBattle_SplitStringByCarriageReturn) == 0x000020, "Wrong size on GameStateBattle_SplitStringByCarriageReturn");
static_assert(offsetof(GameStateBattle_SplitStringByCarriageReturn, Message) == 0x000000, "Member 'GameStateBattle_SplitStringByCarriageReturn::Message' has a wrong offset!");
static_assert(offsetof(GameStateBattle_SplitStringByCarriageReturn, ReturnValue) == 0x000010, "Member 'GameStateBattle_SplitStringByCarriageReturn::ReturnValue' has a wrong offset!");

// Function InGameModule.GameStateBattle.SwitchAbilityInfoVisibility
// 0x0001 (0x0001 - 0x0000)
struct GameStateBattle_SwitchAbilityInfoVisibility final
{
public:
	bool                                          Sw;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_SwitchAbilityInfoVisibility) == 0x000001, "Wrong alignment on GameStateBattle_SwitchAbilityInfoVisibility");
static_assert(sizeof(GameStateBattle_SwitchAbilityInfoVisibility) == 0x000001, "Wrong size on GameStateBattle_SwitchAbilityInfoVisibility");
static_assert(offsetof(GameStateBattle_SwitchAbilityInfoVisibility, Sw) == 0x000000, "Member 'GameStateBattle_SwitchAbilityInfoVisibility::Sw' has a wrong offset!");

// Function InGameModule.GameStateBattle.SwitchAllyPlayerStatusInfo
// 0x0001 (0x0001 - 0x0000)
struct GameStateBattle_SwitchAllyPlayerStatusInfo final
{
public:
	bool                                          Sw;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_SwitchAllyPlayerStatusInfo) == 0x000001, "Wrong alignment on GameStateBattle_SwitchAllyPlayerStatusInfo");
static_assert(sizeof(GameStateBattle_SwitchAllyPlayerStatusInfo) == 0x000001, "Wrong size on GameStateBattle_SwitchAllyPlayerStatusInfo");
static_assert(offsetof(GameStateBattle_SwitchAllyPlayerStatusInfo, Sw) == 0x000000, "Member 'GameStateBattle_SwitchAllyPlayerStatusInfo::Sw' has a wrong offset!");

// Function InGameModule.GameStateBattle.SwitchBattleCounterVisibility
// 0x0001 (0x0001 - 0x0000)
struct GameStateBattle_SwitchBattleCounterVisibility final
{
public:
	bool                                          Sw;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_SwitchBattleCounterVisibility) == 0x000001, "Wrong alignment on GameStateBattle_SwitchBattleCounterVisibility");
static_assert(sizeof(GameStateBattle_SwitchBattleCounterVisibility) == 0x000001, "Wrong size on GameStateBattle_SwitchBattleCounterVisibility");
static_assert(offsetof(GameStateBattle_SwitchBattleCounterVisibility, Sw) == 0x000000, "Member 'GameStateBattle_SwitchBattleCounterVisibility::Sw' has a wrong offset!");

// Function InGameModule.GameStateBattle.SwitchCrossHairsVisibility
// 0x0001 (0x0001 - 0x0000)
struct GameStateBattle_SwitchCrossHairsVisibility final
{
public:
	bool                                          Sw;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_SwitchCrossHairsVisibility) == 0x000001, "Wrong alignment on GameStateBattle_SwitchCrossHairsVisibility");
static_assert(sizeof(GameStateBattle_SwitchCrossHairsVisibility) == 0x000001, "Wrong size on GameStateBattle_SwitchCrossHairsVisibility");
static_assert(offsetof(GameStateBattle_SwitchCrossHairsVisibility, Sw) == 0x000000, "Member 'GameStateBattle_SwitchCrossHairsVisibility::Sw' has a wrong offset!");

// Function InGameModule.GameStateBattle.SwitchInGameButtonGuideVisibility
// 0x0001 (0x0001 - 0x0000)
struct GameStateBattle_SwitchInGameButtonGuideVisibility final
{
public:
	bool                                          Sw;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_SwitchInGameButtonGuideVisibility) == 0x000001, "Wrong alignment on GameStateBattle_SwitchInGameButtonGuideVisibility");
static_assert(sizeof(GameStateBattle_SwitchInGameButtonGuideVisibility) == 0x000001, "Wrong size on GameStateBattle_SwitchInGameButtonGuideVisibility");
static_assert(offsetof(GameStateBattle_SwitchInGameButtonGuideVisibility, Sw) == 0x000000, "Member 'GameStateBattle_SwitchInGameButtonGuideVisibility::Sw' has a wrong offset!");

// Function InGameModule.GameStateBattle.SwitchLocalPlayerStatusInfoVisibility
// 0x0001 (0x0001 - 0x0000)
struct GameStateBattle_SwitchLocalPlayerStatusInfoVisibility final
{
public:
	bool                                          Sw;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_SwitchLocalPlayerStatusInfoVisibility) == 0x000001, "Wrong alignment on GameStateBattle_SwitchLocalPlayerStatusInfoVisibility");
static_assert(sizeof(GameStateBattle_SwitchLocalPlayerStatusInfoVisibility) == 0x000001, "Wrong size on GameStateBattle_SwitchLocalPlayerStatusInfoVisibility");
static_assert(offsetof(GameStateBattle_SwitchLocalPlayerStatusInfoVisibility, Sw) == 0x000000, "Member 'GameStateBattle_SwitchLocalPlayerStatusInfoVisibility::Sw' has a wrong offset!");

// Function InGameModule.GameStateBattle.SwitchLvUpShortCutVisibility
// 0x0001 (0x0001 - 0x0000)
struct GameStateBattle_SwitchLvUpShortCutVisibility final
{
public:
	bool                                          Sw;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_SwitchLvUpShortCutVisibility) == 0x000001, "Wrong alignment on GameStateBattle_SwitchLvUpShortCutVisibility");
static_assert(sizeof(GameStateBattle_SwitchLvUpShortCutVisibility) == 0x000001, "Wrong size on GameStateBattle_SwitchLvUpShortCutVisibility");
static_assert(offsetof(GameStateBattle_SwitchLvUpShortCutVisibility, Sw) == 0x000000, "Member 'GameStateBattle_SwitchLvUpShortCutVisibility::Sw' has a wrong offset!");

// Function InGameModule.GameStateBattle.SwitchMiscInfoVisibility
// 0x0001 (0x0001 - 0x0000)
struct GameStateBattle_SwitchMiscInfoVisibility final
{
public:
	bool                                          Sw;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_SwitchMiscInfoVisibility) == 0x000001, "Wrong alignment on GameStateBattle_SwitchMiscInfoVisibility");
static_assert(sizeof(GameStateBattle_SwitchMiscInfoVisibility) == 0x000001, "Wrong size on GameStateBattle_SwitchMiscInfoVisibility");
static_assert(offsetof(GameStateBattle_SwitchMiscInfoVisibility, Sw) == 0x000000, "Member 'GameStateBattle_SwitchMiscInfoVisibility::Sw' has a wrong offset!");

// Function InGameModule.GameStateBattle.SwitchPlusUltraVisibility
// 0x0001 (0x0001 - 0x0000)
struct GameStateBattle_SwitchPlusUltraVisibility final
{
public:
	bool                                          Sw;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_SwitchPlusUltraVisibility) == 0x000001, "Wrong alignment on GameStateBattle_SwitchPlusUltraVisibility");
static_assert(sizeof(GameStateBattle_SwitchPlusUltraVisibility) == 0x000001, "Wrong size on GameStateBattle_SwitchPlusUltraVisibility");
static_assert(offsetof(GameStateBattle_SwitchPlusUltraVisibility, Sw) == 0x000000, "Member 'GameStateBattle_SwitchPlusUltraVisibility::Sw' has a wrong offset!");

// Function InGameModule.GameStateBattle.SwitchShortcutInfoVisibility
// 0x0001 (0x0001 - 0x0000)
struct GameStateBattle_SwitchShortcutInfoVisibility final
{
public:
	bool                                          Sw;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_SwitchShortcutInfoVisibility) == 0x000001, "Wrong alignment on GameStateBattle_SwitchShortcutInfoVisibility");
static_assert(sizeof(GameStateBattle_SwitchShortcutInfoVisibility) == 0x000001, "Wrong size on GameStateBattle_SwitchShortcutInfoVisibility");
static_assert(offsetof(GameStateBattle_SwitchShortcutInfoVisibility, Sw) == 0x000000, "Member 'GameStateBattle_SwitchShortcutInfoVisibility::Sw' has a wrong offset!");

// Function InGameModule.GameStateBattle.SwitchTutorialAI
// 0x0001 (0x0001 - 0x0000)
struct GameStateBattle_SwitchTutorialAI final
{
public:
	bool                                          Sw;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_SwitchTutorialAI) == 0x000001, "Wrong alignment on GameStateBattle_SwitchTutorialAI");
static_assert(sizeof(GameStateBattle_SwitchTutorialAI) == 0x000001, "Wrong size on GameStateBattle_SwitchTutorialAI");
static_assert(offsetof(GameStateBattle_SwitchTutorialAI, Sw) == 0x000000, "Member 'GameStateBattle_SwitchTutorialAI::Sw' has a wrong offset!");

// Function InGameModule.GameStateBattle.CanPlayAnnounceWidget
// 0x0001 (0x0001 - 0x0000)
struct GameStateBattle_CanPlayAnnounceWidget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_CanPlayAnnounceWidget) == 0x000001, "Wrong alignment on GameStateBattle_CanPlayAnnounceWidget");
static_assert(sizeof(GameStateBattle_CanPlayAnnounceWidget) == 0x000001, "Wrong size on GameStateBattle_CanPlayAnnounceWidget");
static_assert(offsetof(GameStateBattle_CanPlayAnnounceWidget, ReturnValue) == 0x000000, "Member 'GameStateBattle_CanPlayAnnounceWidget::ReturnValue' has a wrong offset!");

// Function InGameModule.GameStateBattle.GetAlivePlayerNum
// 0x0008 (0x0008 - 0x0000)
struct GameStateBattle_GetAlivePlayerNum final
{
public:
	bool                                          bIncludeBot;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_GetAlivePlayerNum) == 0x000004, "Wrong alignment on GameStateBattle_GetAlivePlayerNum");
static_assert(sizeof(GameStateBattle_GetAlivePlayerNum) == 0x000008, "Wrong size on GameStateBattle_GetAlivePlayerNum");
static_assert(offsetof(GameStateBattle_GetAlivePlayerNum, bIncludeBot) == 0x000000, "Member 'GameStateBattle_GetAlivePlayerNum::bIncludeBot' has a wrong offset!");
static_assert(offsetof(GameStateBattle_GetAlivePlayerNum, ReturnValue) == 0x000004, "Member 'GameStateBattle_GetAlivePlayerNum::ReturnValue' has a wrong offset!");

// Function InGameModule.GameStateBattle.GetBattleSequence
// 0x0001 (0x0001 - 0x0000)
struct GameStateBattle_GetBattleSequence final
{
public:
	EBattleSequence                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_GetBattleSequence) == 0x000001, "Wrong alignment on GameStateBattle_GetBattleSequence");
static_assert(sizeof(GameStateBattle_GetBattleSequence) == 0x000001, "Wrong size on GameStateBattle_GetBattleSequence");
static_assert(offsetof(GameStateBattle_GetBattleSequence, ReturnValue) == 0x000000, "Member 'GameStateBattle_GetBattleSequence::ReturnValue' has a wrong offset!");

// Function InGameModule.GameStateBattle.GetCustomMatchComponent
// 0x0008 (0x0008 - 0x0000)
struct GameStateBattle_GetCustomMatchComponent final
{
public:
	class UCustomMatchComponent*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_GetCustomMatchComponent) == 0x000008, "Wrong alignment on GameStateBattle_GetCustomMatchComponent");
static_assert(sizeof(GameStateBattle_GetCustomMatchComponent) == 0x000008, "Wrong size on GameStateBattle_GetCustomMatchComponent");
static_assert(offsetof(GameStateBattle_GetCustomMatchComponent, ReturnValue) == 0x000000, "Member 'GameStateBattle_GetCustomMatchComponent::ReturnValue' has a wrong offset!");

// Function InGameModule.GameStateBattle.GetTutorialKeyCheck
// 0x0018 (0x0018 - 0x0000)
struct GameStateBattle_GetTutorialKeyCheck final
{
public:
	int64                                         CheckKey;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         beforeKey;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateBattle_GetTutorialKeyCheck) == 0x000008, "Wrong alignment on GameStateBattle_GetTutorialKeyCheck");
static_assert(sizeof(GameStateBattle_GetTutorialKeyCheck) == 0x000018, "Wrong size on GameStateBattle_GetTutorialKeyCheck");
static_assert(offsetof(GameStateBattle_GetTutorialKeyCheck, CheckKey) == 0x000000, "Member 'GameStateBattle_GetTutorialKeyCheck::CheckKey' has a wrong offset!");
static_assert(offsetof(GameStateBattle_GetTutorialKeyCheck, beforeKey) == 0x000008, "Member 'GameStateBattle_GetTutorialKeyCheck::beforeKey' has a wrong offset!");
static_assert(offsetof(GameStateBattle_GetTutorialKeyCheck, ReturnValue) == 0x000010, "Member 'GameStateBattle_GetTutorialKeyCheck::ReturnValue' has a wrong offset!");

// Function InGameModule.AISensor.OnPerceptionUpdated
// 0x0010 (0x0010 - 0x0000)
struct AISensor_OnPerceptionUpdated final
{
public:
	TArray<class AActor*>                         UpdatedActors;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AISensor_OnPerceptionUpdated) == 0x000008, "Wrong alignment on AISensor_OnPerceptionUpdated");
static_assert(sizeof(AISensor_OnPerceptionUpdated) == 0x000010, "Wrong size on AISensor_OnPerceptionUpdated");
static_assert(offsetof(AISensor_OnPerceptionUpdated, UpdatedActors) == 0x000000, "Member 'AISensor_OnPerceptionUpdated::UpdatedActors' has a wrong offset!");

// Function InGameModule.AIStatics.GetSkillCommandFixedDuration
// 0x0004 (0x0004 - 0x0000)
struct AIStatics_GetSkillCommandFixedDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIStatics_GetSkillCommandFixedDuration) == 0x000004, "Wrong alignment on AIStatics_GetSkillCommandFixedDuration");
static_assert(sizeof(AIStatics_GetSkillCommandFixedDuration) == 0x000004, "Wrong size on AIStatics_GetSkillCommandFixedDuration");
static_assert(offsetof(AIStatics_GetSkillCommandFixedDuration, ReturnValue) == 0x000000, "Member 'AIStatics_GetSkillCommandFixedDuration::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterInteractComponent.Interact_ToClient
// 0x0010 (0x0010 - 0x0000)
struct CharacterInteractComponent_Interact_ToClient final
{
public:
	class UInteractTargetComponent*               Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InteractArgument;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterInteractComponent_Interact_ToClient) == 0x000008, "Wrong alignment on CharacterInteractComponent_Interact_ToClient");
static_assert(sizeof(CharacterInteractComponent_Interact_ToClient) == 0x000010, "Wrong size on CharacterInteractComponent_Interact_ToClient");
static_assert(offsetof(CharacterInteractComponent_Interact_ToClient, Target) == 0x000000, "Member 'CharacterInteractComponent_Interact_ToClient::Target' has a wrong offset!");
static_assert(offsetof(CharacterInteractComponent_Interact_ToClient, InteractArgument) == 0x000008, "Member 'CharacterInteractComponent_Interact_ToClient::InteractArgument' has a wrong offset!");

// Function InGameModule.CharacterInteractComponent.Interact_ToServer
// 0x0018 (0x0018 - 0x0000)
struct CharacterInteractComponent_Interact_ToServer final
{
public:
	class UInteractTargetComponent*               Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerStateBattle*                     PlayerState;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InteractArgument;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterInteractComponent_Interact_ToServer) == 0x000008, "Wrong alignment on CharacterInteractComponent_Interact_ToServer");
static_assert(sizeof(CharacterInteractComponent_Interact_ToServer) == 0x000018, "Wrong size on CharacterInteractComponent_Interact_ToServer");
static_assert(offsetof(CharacterInteractComponent_Interact_ToServer, Target) == 0x000000, "Member 'CharacterInteractComponent_Interact_ToServer::Target' has a wrong offset!");
static_assert(offsetof(CharacterInteractComponent_Interact_ToServer, PlayerState) == 0x000008, "Member 'CharacterInteractComponent_Interact_ToServer::PlayerState' has a wrong offset!");
static_assert(offsetof(CharacterInteractComponent_Interact_ToServer, InteractArgument) == 0x000010, "Member 'CharacterInteractComponent_Interact_ToServer::InteractArgument' has a wrong offset!");

// Function InGameModule.CharacterInteractComponent.Negotiation_ToServer
// 0x0010 (0x0010 - 0x0000)
struct CharacterInteractComponent_Negotiation_ToServer final
{
public:
	class UInteractTargetComponent*               Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InteractArgument;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterInteractComponent_Negotiation_ToServer) == 0x000008, "Wrong alignment on CharacterInteractComponent_Negotiation_ToServer");
static_assert(sizeof(CharacterInteractComponent_Negotiation_ToServer) == 0x000010, "Wrong size on CharacterInteractComponent_Negotiation_ToServer");
static_assert(offsetof(CharacterInteractComponent_Negotiation_ToServer, Target) == 0x000000, "Member 'CharacterInteractComponent_Negotiation_ToServer::Target' has a wrong offset!");
static_assert(offsetof(CharacterInteractComponent_Negotiation_ToServer, InteractArgument) == 0x000008, "Member 'CharacterInteractComponent_Negotiation_ToServer::InteractArgument' has a wrong offset!");

// Function InGameModule.Ch043Unique3Trap.OnResponceHit
// 0x0008 (0x0008 - 0x0000)
struct Ch043Unique3Trap_OnResponceHit final
{
public:
	class AActor*                                 HitActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch043Unique3Trap_OnResponceHit) == 0x000008, "Wrong alignment on Ch043Unique3Trap_OnResponceHit");
static_assert(sizeof(Ch043Unique3Trap_OnResponceHit) == 0x000008, "Wrong size on Ch043Unique3Trap_OnResponceHit");
static_assert(offsetof(Ch043Unique3Trap_OnResponceHit, HitActor) == 0x000000, "Member 'Ch043Unique3Trap_OnResponceHit::HitActor' has a wrong offset!");

// DelegateFunction InGameModule.CustomBullet.OnHitDelegate__DelegateSignature
// 0x0088 (0x0088 - 0x0000)
struct CustomBullet_OnHitDelegate__DelegateSignature final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomBullet_OnHitDelegate__DelegateSignature) == 0x000004, "Wrong alignment on CustomBullet_OnHitDelegate__DelegateSignature");
static_assert(sizeof(CustomBullet_OnHitDelegate__DelegateSignature) == 0x000088, "Wrong size on CustomBullet_OnHitDelegate__DelegateSignature");
static_assert(offsetof(CustomBullet_OnHitDelegate__DelegateSignature, HitResult) == 0x000000, "Member 'CustomBullet_OnHitDelegate__DelegateSignature::HitResult' has a wrong offset!");

// Function InGameModule.CustomBullet.SetRotationFollowsVelocity
// 0x0001 (0x0001 - 0x0000)
struct CustomBullet_SetRotationFollowsVelocity final
{
public:
	bool                                          bRotate;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomBullet_SetRotationFollowsVelocity) == 0x000001, "Wrong alignment on CustomBullet_SetRotationFollowsVelocity");
static_assert(sizeof(CustomBullet_SetRotationFollowsVelocity) == 0x000001, "Wrong size on CustomBullet_SetRotationFollowsVelocity");
static_assert(offsetof(CustomBullet_SetRotationFollowsVelocity, bRotate) == 0x000000, "Member 'CustomBullet_SetRotationFollowsVelocity::bRotate' has a wrong offset!");

// Function InGameModule.Ch046Unique2BulletBase.GetShieldHp
// 0x0004 (0x0004 - 0x0000)
struct Ch046Unique2BulletBase_GetShieldHp final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch046Unique2BulletBase_GetShieldHp) == 0x000004, "Wrong alignment on Ch046Unique2BulletBase_GetShieldHp");
static_assert(sizeof(Ch046Unique2BulletBase_GetShieldHp) == 0x000004, "Wrong size on Ch046Unique2BulletBase_GetShieldHp");
static_assert(offsetof(Ch046Unique2BulletBase_GetShieldHp, ReturnValue) == 0x000000, "Member 'Ch046Unique2BulletBase_GetShieldHp::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_BeginChangeBoundsScale
// 0x0004 (0x0004 - 0x0000)
struct CharacterBattle_BP_BeginChangeBoundsScale final
{
public:
	float                                         BoundsScale;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_BP_BeginChangeBoundsScale) == 0x000004, "Wrong alignment on CharacterBattle_BP_BeginChangeBoundsScale");
static_assert(sizeof(CharacterBattle_BP_BeginChangeBoundsScale) == 0x000004, "Wrong size on CharacterBattle_BP_BeginChangeBoundsScale");
static_assert(offsetof(CharacterBattle_BP_BeginChangeBoundsScale, BoundsScale) == 0x000000, "Member 'CharacterBattle_BP_BeginChangeBoundsScale::BoundsScale' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_GetSpawnCharacterId
// 0x0001 (0x0001 - 0x0000)
struct CharacterBattle_BP_GetSpawnCharacterId final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_BP_GetSpawnCharacterId) == 0x000001, "Wrong alignment on CharacterBattle_BP_GetSpawnCharacterId");
static_assert(sizeof(CharacterBattle_BP_GetSpawnCharacterId) == 0x000001, "Wrong size on CharacterBattle_BP_GetSpawnCharacterId");
static_assert(offsetof(CharacterBattle_BP_GetSpawnCharacterId, ReturnValue) == 0x000000, "Member 'CharacterBattle_BP_GetSpawnCharacterId::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_GetTeamId
// 0x0001 (0x0001 - 0x0000)
struct CharacterBattle_BP_GetTeamId final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_BP_GetTeamId) == 0x000001, "Wrong alignment on CharacterBattle_BP_GetTeamId");
static_assert(sizeof(CharacterBattle_BP_GetTeamId) == 0x000001, "Wrong size on CharacterBattle_BP_GetTeamId");
static_assert(offsetof(CharacterBattle_BP_GetTeamId, ReturnValue) == 0x000000, "Member 'CharacterBattle_BP_GetTeamId::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_IsDuplicating
// 0x0001 (0x0001 - 0x0000)
struct CharacterBattle_BP_IsDuplicating final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_BP_IsDuplicating) == 0x000001, "Wrong alignment on CharacterBattle_BP_IsDuplicating");
static_assert(sizeof(CharacterBattle_BP_IsDuplicating) == 0x000001, "Wrong size on CharacterBattle_BP_IsDuplicating");
static_assert(offsetof(CharacterBattle_BP_IsDuplicating, ReturnValue) == 0x000000, "Member 'CharacterBattle_BP_IsDuplicating::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_IsTransforming
// 0x0001 (0x0001 - 0x0000)
struct CharacterBattle_BP_IsTransforming final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_BP_IsTransforming) == 0x000001, "Wrong alignment on CharacterBattle_BP_IsTransforming");
static_assert(sizeof(CharacterBattle_BP_IsTransforming) == 0x000001, "Wrong size on CharacterBattle_BP_IsTransforming");
static_assert(offsetof(CharacterBattle_BP_IsTransforming, ReturnValue) == 0x000000, "Member 'CharacterBattle_BP_IsTransforming::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_JumpPadDirection
// 0x000C (0x000C - 0x0000)
struct CharacterBattle_BP_JumpPadDirection final
{
public:
	struct FVector                                Normal;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_BP_JumpPadDirection) == 0x000004, "Wrong alignment on CharacterBattle_BP_JumpPadDirection");
static_assert(sizeof(CharacterBattle_BP_JumpPadDirection) == 0x00000C, "Wrong size on CharacterBattle_BP_JumpPadDirection");
static_assert(offsetof(CharacterBattle_BP_JumpPadDirection, Normal) == 0x000000, "Member 'CharacterBattle_BP_JumpPadDirection::Normal' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_OnJumpPad
// 0x0010 (0x0010 - 0x0000)
struct CharacterBattle_BP_OnJumpPad final
{
public:
	float                                         Power;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 JumpPadActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_BP_OnJumpPad) == 0x000008, "Wrong alignment on CharacterBattle_BP_OnJumpPad");
static_assert(sizeof(CharacterBattle_BP_OnJumpPad) == 0x000010, "Wrong size on CharacterBattle_BP_OnJumpPad");
static_assert(offsetof(CharacterBattle_BP_OnJumpPad, Power) == 0x000000, "Member 'CharacterBattle_BP_OnJumpPad::Power' has a wrong offset!");
static_assert(offsetof(CharacterBattle_BP_OnJumpPad, JumpPadActor) == 0x000008, "Member 'CharacterBattle_BP_OnJumpPad::JumpPadActor' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_RecoverDyingAlly
// 0x0010 (0x0010 - 0x0000)
struct CharacterBattle_BP_RecoverDyingAlly final
{
public:
	class AActor*                                 Ally;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpecialAction;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterBattle_BP_RecoverDyingAlly) == 0x000008, "Wrong alignment on CharacterBattle_BP_RecoverDyingAlly");
static_assert(sizeof(CharacterBattle_BP_RecoverDyingAlly) == 0x000010, "Wrong size on CharacterBattle_BP_RecoverDyingAlly");
static_assert(offsetof(CharacterBattle_BP_RecoverDyingAlly, Ally) == 0x000000, "Member 'CharacterBattle_BP_RecoverDyingAlly::Ally' has a wrong offset!");
static_assert(offsetof(CharacterBattle_BP_RecoverDyingAlly, bSpecialAction) == 0x000008, "Member 'CharacterBattle_BP_RecoverDyingAlly::bSpecialAction' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_SetCameraOffset
// 0x000C (0x000C - 0x0000)
struct CharacterBattle_BP_SetCameraOffset final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Seconds;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterBattle_BP_SetCameraOffset) == 0x000004, "Wrong alignment on CharacterBattle_BP_SetCameraOffset");
static_assert(sizeof(CharacterBattle_BP_SetCameraOffset) == 0x00000C, "Wrong size on CharacterBattle_BP_SetCameraOffset");
static_assert(offsetof(CharacterBattle_BP_SetCameraOffset, Scale) == 0x000000, "Member 'CharacterBattle_BP_SetCameraOffset::Scale' has a wrong offset!");
static_assert(offsetof(CharacterBattle_BP_SetCameraOffset, Seconds) == 0x000004, "Member 'CharacterBattle_BP_SetCameraOffset::Seconds' has a wrong offset!");
static_assert(offsetof(CharacterBattle_BP_SetCameraOffset, Type) == 0x000008, "Member 'CharacterBattle_BP_SetCameraOffset::Type' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_SetEnableWallThrough
// 0x0001 (0x0001 - 0x0000)
struct CharacterBattle_BP_SetEnableWallThrough final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_BP_SetEnableWallThrough) == 0x000001, "Wrong alignment on CharacterBattle_BP_SetEnableWallThrough");
static_assert(sizeof(CharacterBattle_BP_SetEnableWallThrough) == 0x000001, "Wrong size on CharacterBattle_BP_SetEnableWallThrough");
static_assert(offsetof(CharacterBattle_BP_SetEnableWallThrough, Flag) == 0x000000, "Member 'CharacterBattle_BP_SetEnableWallThrough::Flag' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_SetJumpPadPower
// 0x0004 (0x0004 - 0x0000)
struct CharacterBattle_BP_SetJumpPadPower final
{
public:
	float                                         Power;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_BP_SetJumpPadPower) == 0x000004, "Wrong alignment on CharacterBattle_BP_SetJumpPadPower");
static_assert(sizeof(CharacterBattle_BP_SetJumpPadPower) == 0x000004, "Wrong size on CharacterBattle_BP_SetJumpPadPower");
static_assert(offsetof(CharacterBattle_BP_SetJumpPadPower, Power) == 0x000000, "Member 'CharacterBattle_BP_SetJumpPadPower::Power' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_SetMeshVisiblity
// 0x0001 (0x0001 - 0x0000)
struct CharacterBattle_BP_SetMeshVisiblity final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_BP_SetMeshVisiblity) == 0x000001, "Wrong alignment on CharacterBattle_BP_SetMeshVisiblity");
static_assert(sizeof(CharacterBattle_BP_SetMeshVisiblity) == 0x000001, "Wrong size on CharacterBattle_BP_SetMeshVisiblity");
static_assert(offsetof(CharacterBattle_BP_SetMeshVisiblity, bEnable) == 0x000000, "Member 'CharacterBattle_BP_SetMeshVisiblity::bEnable' has a wrong offset!");

// Function InGameModule.CharacterBattle.ClearNegotiateInfo_ToClient
// 0x0001 (0x0001 - 0x0000)
struct CharacterBattle_ClearNegotiateInfo_ToClient final
{
public:
	uint8                                         MyActionIndex;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_ClearNegotiateInfo_ToClient) == 0x000001, "Wrong alignment on CharacterBattle_ClearNegotiateInfo_ToClient");
static_assert(sizeof(CharacterBattle_ClearNegotiateInfo_ToClient) == 0x000001, "Wrong size on CharacterBattle_ClearNegotiateInfo_ToClient");
static_assert(offsetof(CharacterBattle_ClearNegotiateInfo_ToClient, MyActionIndex) == 0x000000, "Member 'CharacterBattle_ClearNegotiateInfo_ToClient::MyActionIndex' has a wrong offset!");

// Function InGameModule.CharacterBattle.ClearNegotiateInfo_ToServer
// 0x0001 (0x0001 - 0x0000)
struct CharacterBattle_ClearNegotiateInfo_ToServer final
{
public:
	uint8                                         MyActionIndex;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_ClearNegotiateInfo_ToServer) == 0x000001, "Wrong alignment on CharacterBattle_ClearNegotiateInfo_ToServer");
static_assert(sizeof(CharacterBattle_ClearNegotiateInfo_ToServer) == 0x000001, "Wrong size on CharacterBattle_ClearNegotiateInfo_ToServer");
static_assert(offsetof(CharacterBattle_ClearNegotiateInfo_ToServer, MyActionIndex) == 0x000000, "Member 'CharacterBattle_ClearNegotiateInfo_ToServer::MyActionIndex' has a wrong offset!");

// Function InGameModule.CharacterBattle.EnableBlendingAimDirAndMoveDir
// 0x0001 (0x0001 - 0x0000)
struct CharacterBattle_EnableBlendingAimDirAndMoveDir final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_EnableBlendingAimDirAndMoveDir) == 0x000001, "Wrong alignment on CharacterBattle_EnableBlendingAimDirAndMoveDir");
static_assert(sizeof(CharacterBattle_EnableBlendingAimDirAndMoveDir) == 0x000001, "Wrong size on CharacterBattle_EnableBlendingAimDirAndMoveDir");
static_assert(offsetof(CharacterBattle_EnableBlendingAimDirAndMoveDir, Flag) == 0x000000, "Member 'CharacterBattle_EnableBlendingAimDirAndMoveDir::Flag' has a wrong offset!");

// Function InGameModule.CharacterBattle.NegotiateAndWaitActionTarget_ToServer
// 0x0010 (0x0010 - 0x0000)
struct CharacterBattle_NegotiateAndWaitActionTarget_ToServer final
{
public:
	class ACharacterBattle*                       NegotiationTargetCharacter;                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MyActionIndex;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterBattle_NegotiateAndWaitActionTarget_ToServer) == 0x000008, "Wrong alignment on CharacterBattle_NegotiateAndWaitActionTarget_ToServer");
static_assert(sizeof(CharacterBattle_NegotiateAndWaitActionTarget_ToServer) == 0x000010, "Wrong size on CharacterBattle_NegotiateAndWaitActionTarget_ToServer");
static_assert(offsetof(CharacterBattle_NegotiateAndWaitActionTarget_ToServer, NegotiationTargetCharacter) == 0x000000, "Member 'CharacterBattle_NegotiateAndWaitActionTarget_ToServer::NegotiationTargetCharacter' has a wrong offset!");
static_assert(offsetof(CharacterBattle_NegotiateAndWaitActionTarget_ToServer, MyActionIndex) == 0x000008, "Member 'CharacterBattle_NegotiateAndWaitActionTarget_ToServer::MyActionIndex' has a wrong offset!");

// Function InGameModule.CharacterBattle.NegotiateTarget_ToServer
// 0x0010 (0x0010 - 0x0000)
struct CharacterBattle_NegotiateTarget_ToServer final
{
public:
	class AActor*                                 NegotiationTarget;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MyActionIndex;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterBattle_NegotiateTarget_ToServer) == 0x000008, "Wrong alignment on CharacterBattle_NegotiateTarget_ToServer");
static_assert(sizeof(CharacterBattle_NegotiateTarget_ToServer) == 0x000010, "Wrong size on CharacterBattle_NegotiateTarget_ToServer");
static_assert(offsetof(CharacterBattle_NegotiateTarget_ToServer, NegotiationTarget) == 0x000000, "Member 'CharacterBattle_NegotiateTarget_ToServer::NegotiationTarget' has a wrong offset!");
static_assert(offsetof(CharacterBattle_NegotiateTarget_ToServer, MyActionIndex) == 0x000008, "Member 'CharacterBattle_NegotiateTarget_ToServer::MyActionIndex' has a wrong offset!");

// Function InGameModule.CharacterBattle.NegotiateTargetResult_ToClient
// 0x0010 (0x0010 - 0x0000)
struct CharacterBattle_NegotiateTargetResult_ToClient final
{
public:
	class AActor*                                 NegotiationTarget;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MyActionIndex;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterBattle_NegotiateTargetResult_ToClient) == 0x000008, "Wrong alignment on CharacterBattle_NegotiateTargetResult_ToClient");
static_assert(sizeof(CharacterBattle_NegotiateTargetResult_ToClient) == 0x000010, "Wrong size on CharacterBattle_NegotiateTargetResult_ToClient");
static_assert(offsetof(CharacterBattle_NegotiateTargetResult_ToClient, NegotiationTarget) == 0x000000, "Member 'CharacterBattle_NegotiateTargetResult_ToClient::NegotiationTarget' has a wrong offset!");
static_assert(offsetof(CharacterBattle_NegotiateTargetResult_ToClient, MyActionIndex) == 0x000008, "Member 'CharacterBattle_NegotiateTargetResult_ToClient::MyActionIndex' has a wrong offset!");

// Function InGameModule.CharacterBattle.OnBeginOverlapComponent
// 0x00A8 (0x00A8 - 0x0000)
struct CharacterBattle_OnBeginOverlapComponent final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_OnBeginOverlapComponent) == 0x000008, "Wrong alignment on CharacterBattle_OnBeginOverlapComponent");
static_assert(sizeof(CharacterBattle_OnBeginOverlapComponent) == 0x0000A8, "Wrong size on CharacterBattle_OnBeginOverlapComponent");
static_assert(offsetof(CharacterBattle_OnBeginOverlapComponent, OverlappedComponent) == 0x000000, "Member 'CharacterBattle_OnBeginOverlapComponent::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(CharacterBattle_OnBeginOverlapComponent, OtherActor) == 0x000008, "Member 'CharacterBattle_OnBeginOverlapComponent::OtherActor' has a wrong offset!");
static_assert(offsetof(CharacterBattle_OnBeginOverlapComponent, OtherComp) == 0x000010, "Member 'CharacterBattle_OnBeginOverlapComponent::OtherComp' has a wrong offset!");
static_assert(offsetof(CharacterBattle_OnBeginOverlapComponent, OtherBodyIndex) == 0x000018, "Member 'CharacterBattle_OnBeginOverlapComponent::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(CharacterBattle_OnBeginOverlapComponent, bFromSweep) == 0x00001C, "Member 'CharacterBattle_OnBeginOverlapComponent::bFromSweep' has a wrong offset!");
static_assert(offsetof(CharacterBattle_OnBeginOverlapComponent, SweepResult) == 0x000020, "Member 'CharacterBattle_OnBeginOverlapComponent::SweepResult' has a wrong offset!");

// Function InGameModule.CharacterBattle.OnEndOverlapComponent
// 0x0020 (0x0020 - 0x0000)
struct CharacterBattle_OnEndOverlapComponent final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterBattle_OnEndOverlapComponent) == 0x000008, "Wrong alignment on CharacterBattle_OnEndOverlapComponent");
static_assert(sizeof(CharacterBattle_OnEndOverlapComponent) == 0x000020, "Wrong size on CharacterBattle_OnEndOverlapComponent");
static_assert(offsetof(CharacterBattle_OnEndOverlapComponent, OverlappedComponent) == 0x000000, "Member 'CharacterBattle_OnEndOverlapComponent::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(CharacterBattle_OnEndOverlapComponent, OtherActor) == 0x000008, "Member 'CharacterBattle_OnEndOverlapComponent::OtherActor' has a wrong offset!");
static_assert(offsetof(CharacterBattle_OnEndOverlapComponent, OtherComp) == 0x000010, "Member 'CharacterBattle_OnEndOverlapComponent::OtherComp' has a wrong offset!");
static_assert(offsetof(CharacterBattle_OnEndOverlapComponent, OtherBodyIndex) == 0x000018, "Member 'CharacterBattle_OnEndOverlapComponent::OtherBodyIndex' has a wrong offset!");

// Function InGameModule.CharacterBattle.RecoverDyingAlly_ToServer
// 0x0010 (0x0010 - 0x0000)
struct CharacterBattle_RecoverDyingAlly_ToServer final
{
public:
	class ACharacterBattle*                       Ally;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpecialAction;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterBattle_RecoverDyingAlly_ToServer) == 0x000008, "Wrong alignment on CharacterBattle_RecoverDyingAlly_ToServer");
static_assert(sizeof(CharacterBattle_RecoverDyingAlly_ToServer) == 0x000010, "Wrong size on CharacterBattle_RecoverDyingAlly_ToServer");
static_assert(offsetof(CharacterBattle_RecoverDyingAlly_ToServer, Ally) == 0x000000, "Member 'CharacterBattle_RecoverDyingAlly_ToServer::Ally' has a wrong offset!");
static_assert(offsetof(CharacterBattle_RecoverDyingAlly_ToServer, bSpecialAction) == 0x000008, "Member 'CharacterBattle_RecoverDyingAlly_ToServer::bSpecialAction' has a wrong offset!");

// Function InGameModule.CharacterBattle.ReleaseNegotiateTarget_NetMulticast
// 0x0008 (0x0008 - 0x0000)
struct CharacterBattle_ReleaseNegotiateTarget_NetMulticast final
{
public:
	class AActor*                                 NegotiationTarget;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_ReleaseNegotiateTarget_NetMulticast) == 0x000008, "Wrong alignment on CharacterBattle_ReleaseNegotiateTarget_NetMulticast");
static_assert(sizeof(CharacterBattle_ReleaseNegotiateTarget_NetMulticast) == 0x000008, "Wrong size on CharacterBattle_ReleaseNegotiateTarget_NetMulticast");
static_assert(offsetof(CharacterBattle_ReleaseNegotiateTarget_NetMulticast, NegotiationTarget) == 0x000000, "Member 'CharacterBattle_ReleaseNegotiateTarget_NetMulticast::NegotiationTarget' has a wrong offset!");

// Function InGameModule.CharacterBattle.ReleaseNegotiateTarget_ToServer
// 0x0008 (0x0008 - 0x0000)
struct CharacterBattle_ReleaseNegotiateTarget_ToServer final
{
public:
	class AActor*                                 NegotiationTarget;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_ReleaseNegotiateTarget_ToServer) == 0x000008, "Wrong alignment on CharacterBattle_ReleaseNegotiateTarget_ToServer");
static_assert(sizeof(CharacterBattle_ReleaseNegotiateTarget_ToServer) == 0x000008, "Wrong size on CharacterBattle_ReleaseNegotiateTarget_ToServer");
static_assert(offsetof(CharacterBattle_ReleaseNegotiateTarget_ToServer, NegotiationTarget) == 0x000000, "Member 'CharacterBattle_ReleaseNegotiateTarget_ToServer::NegotiationTarget' has a wrong offset!");

// Function InGameModule.CharacterBattle.SetWaitActionAfterNegotiation_ToClient
// 0x0004 (0x0004 - 0x0000)
struct CharacterBattle_SetWaitActionAfterNegotiation_ToClient final
{
public:
	uint32                                        ServerPriorityActionSerialNo;                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_SetWaitActionAfterNegotiation_ToClient) == 0x000004, "Wrong alignment on CharacterBattle_SetWaitActionAfterNegotiation_ToClient");
static_assert(sizeof(CharacterBattle_SetWaitActionAfterNegotiation_ToClient) == 0x000004, "Wrong size on CharacterBattle_SetWaitActionAfterNegotiation_ToClient");
static_assert(offsetof(CharacterBattle_SetWaitActionAfterNegotiation_ToClient, ServerPriorityActionSerialNo) == 0x000000, "Member 'CharacterBattle_SetWaitActionAfterNegotiation_ToClient::ServerPriorityActionSerialNo' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_GetAddPartsComponent
// 0x0008 (0x0008 - 0x0000)
struct CharacterBattle_BP_GetAddPartsComponent final
{
public:
	class UCharacterAddPartsComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_BP_GetAddPartsComponent) == 0x000008, "Wrong alignment on CharacterBattle_BP_GetAddPartsComponent");
static_assert(sizeof(CharacterBattle_BP_GetAddPartsComponent) == 0x000008, "Wrong size on CharacterBattle_BP_GetAddPartsComponent");
static_assert(offsetof(CharacterBattle_BP_GetAddPartsComponent, ReturnValue) == 0x000000, "Member 'CharacterBattle_BP_GetAddPartsComponent::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_GetAttackComponent
// 0x0008 (0x0008 - 0x0000)
struct CharacterBattle_BP_GetAttackComponent final
{
public:
	class UCharacterAttackComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_BP_GetAttackComponent) == 0x000008, "Wrong alignment on CharacterBattle_BP_GetAttackComponent");
static_assert(sizeof(CharacterBattle_BP_GetAttackComponent) == 0x000008, "Wrong size on CharacterBattle_BP_GetAttackComponent");
static_assert(offsetof(CharacterBattle_BP_GetAttackComponent, ReturnValue) == 0x000000, "Member 'CharacterBattle_BP_GetAttackComponent::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_GetBattleVoiceComponent
// 0x0008 (0x0008 - 0x0000)
struct CharacterBattle_BP_GetBattleVoiceComponent final
{
public:
	class UCharacterBattleVoiceComponent*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_BP_GetBattleVoiceComponent) == 0x000008, "Wrong alignment on CharacterBattle_BP_GetBattleVoiceComponent");
static_assert(sizeof(CharacterBattle_BP_GetBattleVoiceComponent) == 0x000008, "Wrong size on CharacterBattle_BP_GetBattleVoiceComponent");
static_assert(offsetof(CharacterBattle_BP_GetBattleVoiceComponent, ReturnValue) == 0x000000, "Member 'CharacterBattle_BP_GetBattleVoiceComponent::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_GetCameraDirection
// 0x000C (0x000C - 0x0000)
struct CharacterBattle_BP_GetCameraDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_BP_GetCameraDirection) == 0x000004, "Wrong alignment on CharacterBattle_BP_GetCameraDirection");
static_assert(sizeof(CharacterBattle_BP_GetCameraDirection) == 0x00000C, "Wrong size on CharacterBattle_BP_GetCameraDirection");
static_assert(offsetof(CharacterBattle_BP_GetCameraDirection, ReturnValue) == 0x000000, "Member 'CharacterBattle_BP_GetCameraDirection::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_GetCharacterAssign
// 0x0001 (0x0001 - 0x0000)
struct CharacterBattle_BP_GetCharacterAssign final
{
public:
	ECharacterAssign                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_BP_GetCharacterAssign) == 0x000001, "Wrong alignment on CharacterBattle_BP_GetCharacterAssign");
static_assert(sizeof(CharacterBattle_BP_GetCharacterAssign) == 0x000001, "Wrong size on CharacterBattle_BP_GetCharacterAssign");
static_assert(offsetof(CharacterBattle_BP_GetCharacterAssign, ReturnValue) == 0x000000, "Member 'CharacterBattle_BP_GetCharacterAssign::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_GetCharacterBodySize
// 0x0001 (0x0001 - 0x0000)
struct CharacterBattle_BP_GetCharacterBodySize final
{
public:
	ECharacterBodySize                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_BP_GetCharacterBodySize) == 0x000001, "Wrong alignment on CharacterBattle_BP_GetCharacterBodySize");
static_assert(sizeof(CharacterBattle_BP_GetCharacterBodySize) == 0x000001, "Wrong size on CharacterBattle_BP_GetCharacterBodySize");
static_assert(offsetof(CharacterBattle_BP_GetCharacterBodySize, ReturnValue) == 0x000000, "Member 'CharacterBattle_BP_GetCharacterBodySize::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_GetCharacterMaterialControl
// 0x0008 (0x0008 - 0x0000)
struct CharacterBattle_BP_GetCharacterMaterialControl final
{
public:
	class UCharacterMaterialControlComponent*     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_BP_GetCharacterMaterialControl) == 0x000008, "Wrong alignment on CharacterBattle_BP_GetCharacterMaterialControl");
static_assert(sizeof(CharacterBattle_BP_GetCharacterMaterialControl) == 0x000008, "Wrong size on CharacterBattle_BP_GetCharacterMaterialControl");
static_assert(offsetof(CharacterBattle_BP_GetCharacterMaterialControl, ReturnValue) == 0x000000, "Member 'CharacterBattle_BP_GetCharacterMaterialControl::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_GetCommandComponent
// 0x0008 (0x0008 - 0x0000)
struct CharacterBattle_BP_GetCommandComponent final
{
public:
	class UCharacterCommandComponent*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_BP_GetCommandComponent) == 0x000008, "Wrong alignment on CharacterBattle_BP_GetCommandComponent");
static_assert(sizeof(CharacterBattle_BP_GetCommandComponent) == 0x000008, "Wrong size on CharacterBattle_BP_GetCommandComponent");
static_assert(offsetof(CharacterBattle_BP_GetCommandComponent, ReturnValue) == 0x000000, "Member 'CharacterBattle_BP_GetCommandComponent::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_GetConditionControlComponent
// 0x0008 (0x0008 - 0x0000)
struct CharacterBattle_BP_GetConditionControlComponent final
{
public:
	class UCharacterConditionControlComponent*    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_BP_GetConditionControlComponent) == 0x000008, "Wrong alignment on CharacterBattle_BP_GetConditionControlComponent");
static_assert(sizeof(CharacterBattle_BP_GetConditionControlComponent) == 0x000008, "Wrong size on CharacterBattle_BP_GetConditionControlComponent");
static_assert(offsetof(CharacterBattle_BP_GetConditionControlComponent, ReturnValue) == 0x000000, "Member 'CharacterBattle_BP_GetConditionControlComponent::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_GetDamageComponent
// 0x0008 (0x0008 - 0x0000)
struct CharacterBattle_BP_GetDamageComponent final
{
public:
	class UCharacterDamageComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_BP_GetDamageComponent) == 0x000008, "Wrong alignment on CharacterBattle_BP_GetDamageComponent");
static_assert(sizeof(CharacterBattle_BP_GetDamageComponent) == 0x000008, "Wrong size on CharacterBattle_BP_GetDamageComponent");
static_assert(offsetof(CharacterBattle_BP_GetDamageComponent, ReturnValue) == 0x000000, "Member 'CharacterBattle_BP_GetDamageComponent::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_GetGiantControlComponent
// 0x0008 (0x0008 - 0x0000)
struct CharacterBattle_BP_GetGiantControlComponent final
{
public:
	class UCharacterGiantControlComponent*        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_BP_GetGiantControlComponent) == 0x000008, "Wrong alignment on CharacterBattle_BP_GetGiantControlComponent");
static_assert(sizeof(CharacterBattle_BP_GetGiantControlComponent) == 0x000008, "Wrong size on CharacterBattle_BP_GetGiantControlComponent");
static_assert(offsetof(CharacterBattle_BP_GetGiantControlComponent, ReturnValue) == 0x000000, "Member 'CharacterBattle_BP_GetGiantControlComponent::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_GetIsEnableAttackDuringDash
// 0x0001 (0x0001 - 0x0000)
struct CharacterBattle_BP_GetIsEnableAttackDuringDash final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_BP_GetIsEnableAttackDuringDash) == 0x000001, "Wrong alignment on CharacterBattle_BP_GetIsEnableAttackDuringDash");
static_assert(sizeof(CharacterBattle_BP_GetIsEnableAttackDuringDash) == 0x000001, "Wrong size on CharacterBattle_BP_GetIsEnableAttackDuringDash");
static_assert(offsetof(CharacterBattle_BP_GetIsEnableAttackDuringDash, ReturnValue) == 0x000000, "Member 'CharacterBattle_BP_GetIsEnableAttackDuringDash::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_GetJumpPadDirection
// 0x000C (0x000C - 0x0000)
struct CharacterBattle_BP_GetJumpPadDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_BP_GetJumpPadDirection) == 0x000004, "Wrong alignment on CharacterBattle_BP_GetJumpPadDirection");
static_assert(sizeof(CharacterBattle_BP_GetJumpPadDirection) == 0x00000C, "Wrong size on CharacterBattle_BP_GetJumpPadDirection");
static_assert(offsetof(CharacterBattle_BP_GetJumpPadDirection, ReturnValue) == 0x000000, "Member 'CharacterBattle_BP_GetJumpPadDirection::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_GetJumpPadPower
// 0x0004 (0x0004 - 0x0000)
struct CharacterBattle_BP_GetJumpPadPower final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_BP_GetJumpPadPower) == 0x000004, "Wrong alignment on CharacterBattle_BP_GetJumpPadPower");
static_assert(sizeof(CharacterBattle_BP_GetJumpPadPower) == 0x000004, "Wrong size on CharacterBattle_BP_GetJumpPadPower");
static_assert(offsetof(CharacterBattle_BP_GetJumpPadPower, ReturnValue) == 0x000000, "Member 'CharacterBattle_BP_GetJumpPadPower::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_GetLinkAnimContorol
// 0x0008 (0x0008 - 0x0000)
struct CharacterBattle_BP_GetLinkAnimContorol final
{
public:
	class UCharacterLinkedAnimationControlComponent* ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_BP_GetLinkAnimContorol) == 0x000008, "Wrong alignment on CharacterBattle_BP_GetLinkAnimContorol");
static_assert(sizeof(CharacterBattle_BP_GetLinkAnimContorol) == 0x000008, "Wrong size on CharacterBattle_BP_GetLinkAnimContorol");
static_assert(offsetof(CharacterBattle_BP_GetLinkAnimContorol, ReturnValue) == 0x000000, "Member 'CharacterBattle_BP_GetLinkAnimContorol::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_GetMagazineManagementComponent
// 0x0008 (0x0008 - 0x0000)
struct CharacterBattle_BP_GetMagazineManagementComponent final
{
public:
	class UMagazineManagementComponent*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_BP_GetMagazineManagementComponent) == 0x000008, "Wrong alignment on CharacterBattle_BP_GetMagazineManagementComponent");
static_assert(sizeof(CharacterBattle_BP_GetMagazineManagementComponent) == 0x000008, "Wrong size on CharacterBattle_BP_GetMagazineManagementComponent");
static_assert(offsetof(CharacterBattle_BP_GetMagazineManagementComponent, ReturnValue) == 0x000000, "Member 'CharacterBattle_BP_GetMagazineManagementComponent::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_GetMovementBattle
// 0x0008 (0x0008 - 0x0000)
struct CharacterBattle_BP_GetMovementBattle final
{
public:
	class UMovementComponentBattle*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_BP_GetMovementBattle) == 0x000008, "Wrong alignment on CharacterBattle_BP_GetMovementBattle");
static_assert(sizeof(CharacterBattle_BP_GetMovementBattle) == 0x000008, "Wrong size on CharacterBattle_BP_GetMovementBattle");
static_assert(offsetof(CharacterBattle_BP_GetMovementBattle, ReturnValue) == 0x000000, "Member 'CharacterBattle_BP_GetMovementBattle::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_GetRespawnControlComponent
// 0x0008 (0x0008 - 0x0000)
struct CharacterBattle_BP_GetRespawnControlComponent final
{
public:
	class UCharacterRespawnControlCompnent*       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_BP_GetRespawnControlComponent) == 0x000008, "Wrong alignment on CharacterBattle_BP_GetRespawnControlComponent");
static_assert(sizeof(CharacterBattle_BP_GetRespawnControlComponent) == 0x000008, "Wrong size on CharacterBattle_BP_GetRespawnControlComponent");
static_assert(offsetof(CharacterBattle_BP_GetRespawnControlComponent, ReturnValue) == 0x000000, "Member 'CharacterBattle_BP_GetRespawnControlComponent::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_GetRestraintEffectComponent
// 0x0008 (0x0008 - 0x0000)
struct CharacterBattle_BP_GetRestraintEffectComponent final
{
public:
	class URestraintEffectComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_BP_GetRestraintEffectComponent) == 0x000008, "Wrong alignment on CharacterBattle_BP_GetRestraintEffectComponent");
static_assert(sizeof(CharacterBattle_BP_GetRestraintEffectComponent) == 0x000008, "Wrong size on CharacterBattle_BP_GetRestraintEffectComponent");
static_assert(offsetof(CharacterBattle_BP_GetRestraintEffectComponent, ReturnValue) == 0x000000, "Member 'CharacterBattle_BP_GetRestraintEffectComponent::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_GetSkillManagementCompnent
// 0x0008 (0x0008 - 0x0000)
struct CharacterBattle_BP_GetSkillManagementCompnent final
{
public:
	class USkillManagementComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_BP_GetSkillManagementCompnent) == 0x000008, "Wrong alignment on CharacterBattle_BP_GetSkillManagementCompnent");
static_assert(sizeof(CharacterBattle_BP_GetSkillManagementCompnent) == 0x000008, "Wrong size on CharacterBattle_BP_GetSkillManagementCompnent");
static_assert(offsetof(CharacterBattle_BP_GetSkillManagementCompnent, ReturnValue) == 0x000000, "Member 'CharacterBattle_BP_GetSkillManagementCompnent::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_GetState
// 0x0008 (0x0008 - 0x0000)
struct CharacterBattle_BP_GetState final
{
public:
	class UCharacterState*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_BP_GetState) == 0x000008, "Wrong alignment on CharacterBattle_BP_GetState");
static_assert(sizeof(CharacterBattle_BP_GetState) == 0x000008, "Wrong size on CharacterBattle_BP_GetState");
static_assert(offsetof(CharacterBattle_BP_GetState, ReturnValue) == 0x000000, "Member 'CharacterBattle_BP_GetState::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterBattle.BP_GetUBPInGameActorUtilityComponent
// 0x0008 (0x0008 - 0x0000)
struct CharacterBattle_BP_GetUBPInGameActorUtilityComponent final
{
public:
	class UBPInGameActorUtilityComponent*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_BP_GetUBPInGameActorUtilityComponent) == 0x000008, "Wrong alignment on CharacterBattle_BP_GetUBPInGameActorUtilityComponent");
static_assert(sizeof(CharacterBattle_BP_GetUBPInGameActorUtilityComponent) == 0x000008, "Wrong size on CharacterBattle_BP_GetUBPInGameActorUtilityComponent");
static_assert(offsetof(CharacterBattle_BP_GetUBPInGameActorUtilityComponent, ReturnValue) == 0x000000, "Member 'CharacterBattle_BP_GetUBPInGameActorUtilityComponent::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterBattle.GetLeftFootIKOffset
// 0x0004 (0x0004 - 0x0000)
struct CharacterBattle_GetLeftFootIKOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_GetLeftFootIKOffset) == 0x000004, "Wrong alignment on CharacterBattle_GetLeftFootIKOffset");
static_assert(sizeof(CharacterBattle_GetLeftFootIKOffset) == 0x000004, "Wrong size on CharacterBattle_GetLeftFootIKOffset");
static_assert(offsetof(CharacterBattle_GetLeftFootIKOffset, ReturnValue) == 0x000000, "Member 'CharacterBattle_GetLeftFootIKOffset::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterBattle.GetProjectileReplicator
// 0x0008 (0x0008 - 0x0000)
struct CharacterBattle_GetProjectileReplicator final
{
public:
	class UProjectileReplicateBattleComponent*    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_GetProjectileReplicator) == 0x000008, "Wrong alignment on CharacterBattle_GetProjectileReplicator");
static_assert(sizeof(CharacterBattle_GetProjectileReplicator) == 0x000008, "Wrong size on CharacterBattle_GetProjectileReplicator");
static_assert(offsetof(CharacterBattle_GetProjectileReplicator, ReturnValue) == 0x000000, "Member 'CharacterBattle_GetProjectileReplicator::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterBattle.GetRightFootIKOffset
// 0x0004 (0x0004 - 0x0000)
struct CharacterBattle_GetRightFootIKOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBattle_GetRightFootIKOffset) == 0x000004, "Wrong alignment on CharacterBattle_GetRightFootIKOffset");
static_assert(sizeof(CharacterBattle_GetRightFootIKOffset) == 0x000004, "Wrong size on CharacterBattle_GetRightFootIKOffset");
static_assert(offsetof(CharacterBattle_GetRightFootIKOffset, ReturnValue) == 0x000000, "Member 'CharacterBattle_GetRightFootIKOffset::ReturnValue' has a wrong offset!");

// Function InGameModule.Ch100.SetGiantSimulated_ToSever
// 0x0001 (0x0001 - 0x0000)
struct Ch100_SetGiantSimulated_ToSever final
{
public:
	bool                                          bGiant;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch100_SetGiantSimulated_ToSever) == 0x000001, "Wrong alignment on Ch100_SetGiantSimulated_ToSever");
static_assert(sizeof(Ch100_SetGiantSimulated_ToSever) == 0x000001, "Wrong size on Ch100_SetGiantSimulated_ToSever");
static_assert(offsetof(Ch100_SetGiantSimulated_ToSever, bGiant) == 0x000000, "Member 'Ch100_SetGiantSimulated_ToSever::bGiant' has a wrong offset!");

// Function InGameModule.CustomBulletPhysicsLikeComponent.OnHitBackground
// 0x0088 (0x0088 - 0x0000)
struct CustomBulletPhysicsLikeComponent_OnHitBackground final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomBulletPhysicsLikeComponent_OnHitBackground) == 0x000004, "Wrong alignment on CustomBulletPhysicsLikeComponent_OnHitBackground");
static_assert(sizeof(CustomBulletPhysicsLikeComponent_OnHitBackground) == 0x000088, "Wrong size on CustomBulletPhysicsLikeComponent_OnHitBackground");
static_assert(offsetof(CustomBulletPhysicsLikeComponent_OnHitBackground, HitResult) == 0x000000, "Member 'CustomBulletPhysicsLikeComponent_OnHitBackground::HitResult' has a wrong offset!");

// Function InGameModule.CustomBulletPhysicsLikeComponent.OnHitCharacter
// 0x0088 (0x0088 - 0x0000)
struct CustomBulletPhysicsLikeComponent_OnHitCharacter final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomBulletPhysicsLikeComponent_OnHitCharacter) == 0x000004, "Wrong alignment on CustomBulletPhysicsLikeComponent_OnHitCharacter");
static_assert(sizeof(CustomBulletPhysicsLikeComponent_OnHitCharacter) == 0x000088, "Wrong size on CustomBulletPhysicsLikeComponent_OnHitCharacter");
static_assert(offsetof(CustomBulletPhysicsLikeComponent_OnHitCharacter, HitResult) == 0x000000, "Member 'CustomBulletPhysicsLikeComponent_OnHitCharacter::HitResult' has a wrong offset!");

// DelegateFunction InGameModule.CustomBulletPhysicsLikeComponent.ReflectionDelegate__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct CustomBulletPhysicsLikeComponent_ReflectionDelegate__DelegateSignature final
{
public:
	struct FVector                                Normal;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomBulletPhysicsLikeComponent_ReflectionDelegate__DelegateSignature) == 0x000004, "Wrong alignment on CustomBulletPhysicsLikeComponent_ReflectionDelegate__DelegateSignature");
static_assert(sizeof(CustomBulletPhysicsLikeComponent_ReflectionDelegate__DelegateSignature) == 0x00000C, "Wrong size on CustomBulletPhysicsLikeComponent_ReflectionDelegate__DelegateSignature");
static_assert(offsetof(CustomBulletPhysicsLikeComponent_ReflectionDelegate__DelegateSignature, Normal) == 0x000000, "Member 'CustomBulletPhysicsLikeComponent_ReflectionDelegate__DelegateSignature::Normal' has a wrong offset!");

// Function InGameModule.ProjectileGeneratorBattle.BP_GetOwnerMovementComponent
// 0x0008 (0x0008 - 0x0000)
struct ProjectileGeneratorBattle_BP_GetOwnerMovementComponent final
{
public:
	class UMovementComponentBattle*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileGeneratorBattle_BP_GetOwnerMovementComponent) == 0x000008, "Wrong alignment on ProjectileGeneratorBattle_BP_GetOwnerMovementComponent");
static_assert(sizeof(ProjectileGeneratorBattle_BP_GetOwnerMovementComponent) == 0x000008, "Wrong size on ProjectileGeneratorBattle_BP_GetOwnerMovementComponent");
static_assert(offsetof(ProjectileGeneratorBattle_BP_GetOwnerMovementComponent, ReturnValue) == 0x000000, "Member 'ProjectileGeneratorBattle_BP_GetOwnerMovementComponent::ReturnValue' has a wrong offset!");

// Function InGameModule.ProjectileGeneratorBattle.BP_OnProjectileNotificationEvent
// 0x000C (0x000C - 0x0000)
struct ProjectileGeneratorBattle_BP_OnProjectileNotificationEvent final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackSerial;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileGeneratorBattle_BP_OnProjectileNotificationEvent) == 0x000004, "Wrong alignment on ProjectileGeneratorBattle_BP_OnProjectileNotificationEvent");
static_assert(sizeof(ProjectileGeneratorBattle_BP_OnProjectileNotificationEvent) == 0x00000C, "Wrong size on ProjectileGeneratorBattle_BP_OnProjectileNotificationEvent");
static_assert(offsetof(ProjectileGeneratorBattle_BP_OnProjectileNotificationEvent, EventName) == 0x000000, "Member 'ProjectileGeneratorBattle_BP_OnProjectileNotificationEvent::EventName' has a wrong offset!");
static_assert(offsetof(ProjectileGeneratorBattle_BP_OnProjectileNotificationEvent, AttackSerial) == 0x000008, "Member 'ProjectileGeneratorBattle_BP_OnProjectileNotificationEvent::AttackSerial' has a wrong offset!");

// Function InGameModule.ProjectileGeneratorBattle.DestroyBullet_RPC
// 0x000C (0x000C - 0x0000)
struct ProjectileGeneratorBattle_DestroyBullet_RPC final
{
public:
	struct FDestroyBulletGenRep                   Rep;                                               // 0x0000(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileGeneratorBattle_DestroyBullet_RPC) == 0x000004, "Wrong alignment on ProjectileGeneratorBattle_DestroyBullet_RPC");
static_assert(sizeof(ProjectileGeneratorBattle_DestroyBullet_RPC) == 0x00000C, "Wrong size on ProjectileGeneratorBattle_DestroyBullet_RPC");
static_assert(offsetof(ProjectileGeneratorBattle_DestroyBullet_RPC, Rep) == 0x000000, "Member 'ProjectileGeneratorBattle_DestroyBullet_RPC::Rep' has a wrong offset!");

// Function InGameModule.ProjectileGeneratorBattle.GetBullets
// 0x0010 (0x0010 - 0x0000)
struct ProjectileGeneratorBattle_GetBullets final
{
public:
	TArray<class ABullet*>                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileGeneratorBattle_GetBullets) == 0x000008, "Wrong alignment on ProjectileGeneratorBattle_GetBullets");
static_assert(sizeof(ProjectileGeneratorBattle_GetBullets) == 0x000010, "Wrong size on ProjectileGeneratorBattle_GetBullets");
static_assert(offsetof(ProjectileGeneratorBattle_GetBullets, ReturnValue) == 0x000000, "Member 'ProjectileGeneratorBattle_GetBullets::ReturnValue' has a wrong offset!");

// Function InGameModule.ProjectileGeneratorBattle.SpawnBullet
// 0x0050 (0x0050 - 0x0000)
struct ProjectileGeneratorBattle_SpawnBullet final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Dir;                                               // 0x0030(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         JsonIDX;                                           // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABullet*                                ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProjectileGeneratorBattle_SpawnBullet) == 0x000010, "Wrong alignment on ProjectileGeneratorBattle_SpawnBullet");
static_assert(sizeof(ProjectileGeneratorBattle_SpawnBullet) == 0x000050, "Wrong size on ProjectileGeneratorBattle_SpawnBullet");
static_assert(offsetof(ProjectileGeneratorBattle_SpawnBullet, Transform) == 0x000000, "Member 'ProjectileGeneratorBattle_SpawnBullet::Transform' has a wrong offset!");
static_assert(offsetof(ProjectileGeneratorBattle_SpawnBullet, Dir) == 0x000030, "Member 'ProjectileGeneratorBattle_SpawnBullet::Dir' has a wrong offset!");
static_assert(offsetof(ProjectileGeneratorBattle_SpawnBullet, JsonIDX) == 0x00003C, "Member 'ProjectileGeneratorBattle_SpawnBullet::JsonIDX' has a wrong offset!");
static_assert(offsetof(ProjectileGeneratorBattle_SpawnBullet, ReturnValue) == 0x000040, "Member 'ProjectileGeneratorBattle_SpawnBullet::ReturnValue' has a wrong offset!");

// Function InGameModule.ProjectileGeneratorBattle.BP_GetOwnerBtl
// 0x0008 (0x0008 - 0x0000)
struct ProjectileGeneratorBattle_BP_GetOwnerBtl final
{
public:
	class ACharacterBattle*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileGeneratorBattle_BP_GetOwnerBtl) == 0x000008, "Wrong alignment on ProjectileGeneratorBattle_BP_GetOwnerBtl");
static_assert(sizeof(ProjectileGeneratorBattle_BP_GetOwnerBtl) == 0x000008, "Wrong size on ProjectileGeneratorBattle_BP_GetOwnerBtl");
static_assert(offsetof(ProjectileGeneratorBattle_BP_GetOwnerBtl, ReturnValue) == 0x000000, "Member 'ProjectileGeneratorBattle_BP_GetOwnerBtl::ReturnValue' has a wrong offset!");

// Function InGameModule.AN_PlaySound.SetCue
// 0x0008 (0x0008 - 0x0000)
struct AN_PlaySound_SetCue final
{
public:
	class USoundAtomCue*                          Cue;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AN_PlaySound_SetCue) == 0x000008, "Wrong alignment on AN_PlaySound_SetCue");
static_assert(sizeof(AN_PlaySound_SetCue) == 0x000008, "Wrong size on AN_PlaySound_SetCue");
static_assert(offsetof(AN_PlaySound_SetCue, Cue) == 0x000000, "Member 'AN_PlaySound_SetCue::Cue' has a wrong offset!");

// Function InGameModule.CharacterConditionControlComponent.BP_ClearCondition
// 0x0001 (0x0001 - 0x0000)
struct CharacterConditionControlComponent_BP_ClearCondition final
{
public:
	ECharacterConditionId                         ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterConditionControlComponent_BP_ClearCondition) == 0x000001, "Wrong alignment on CharacterConditionControlComponent_BP_ClearCondition");
static_assert(sizeof(CharacterConditionControlComponent_BP_ClearCondition) == 0x000001, "Wrong size on CharacterConditionControlComponent_BP_ClearCondition");
static_assert(offsetof(CharacterConditionControlComponent_BP_ClearCondition, ID) == 0x000000, "Member 'CharacterConditionControlComponent_BP_ClearCondition::ID' has a wrong offset!");

// Function InGameModule.CharacterConditionControlComponent.BP_SetCondition
// 0x0020 (0x0020 - 0x0000)
struct CharacterConditionControlComponent_BP_SetCondition final
{
public:
	ECharacterConditionId                         ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Span;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Interval;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubLevel;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerStateBattle*                     InstigatedPlayer;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterConditionControlComponent_BP_SetCondition) == 0x000008, "Wrong alignment on CharacterConditionControlComponent_BP_SetCondition");
static_assert(sizeof(CharacterConditionControlComponent_BP_SetCondition) == 0x000020, "Wrong size on CharacterConditionControlComponent_BP_SetCondition");
static_assert(offsetof(CharacterConditionControlComponent_BP_SetCondition, ID) == 0x000000, "Member 'CharacterConditionControlComponent_BP_SetCondition::ID' has a wrong offset!");
static_assert(offsetof(CharacterConditionControlComponent_BP_SetCondition, Level) == 0x000004, "Member 'CharacterConditionControlComponent_BP_SetCondition::Level' has a wrong offset!");
static_assert(offsetof(CharacterConditionControlComponent_BP_SetCondition, Span) == 0x000008, "Member 'CharacterConditionControlComponent_BP_SetCondition::Span' has a wrong offset!");
static_assert(offsetof(CharacterConditionControlComponent_BP_SetCondition, Value) == 0x00000C, "Member 'CharacterConditionControlComponent_BP_SetCondition::Value' has a wrong offset!");
static_assert(offsetof(CharacterConditionControlComponent_BP_SetCondition, Interval) == 0x000010, "Member 'CharacterConditionControlComponent_BP_SetCondition::Interval' has a wrong offset!");
static_assert(offsetof(CharacterConditionControlComponent_BP_SetCondition, SubLevel) == 0x000014, "Member 'CharacterConditionControlComponent_BP_SetCondition::SubLevel' has a wrong offset!");
static_assert(offsetof(CharacterConditionControlComponent_BP_SetCondition, InstigatedPlayer) == 0x000018, "Member 'CharacterConditionControlComponent_BP_SetCondition::InstigatedPlayer' has a wrong offset!");

// Function InGameModule.CharacterConditionControlComponent.BP_SetConditionLocal
// 0x0020 (0x0020 - 0x0000)
struct CharacterConditionControlComponent_BP_SetConditionLocal final
{
public:
	ECharacterConditionId                         ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Span;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Interval;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubLevel;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerStateBattle*                     InstigatedPlayer;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterConditionControlComponent_BP_SetConditionLocal) == 0x000008, "Wrong alignment on CharacterConditionControlComponent_BP_SetConditionLocal");
static_assert(sizeof(CharacterConditionControlComponent_BP_SetConditionLocal) == 0x000020, "Wrong size on CharacterConditionControlComponent_BP_SetConditionLocal");
static_assert(offsetof(CharacterConditionControlComponent_BP_SetConditionLocal, ID) == 0x000000, "Member 'CharacterConditionControlComponent_BP_SetConditionLocal::ID' has a wrong offset!");
static_assert(offsetof(CharacterConditionControlComponent_BP_SetConditionLocal, Level) == 0x000004, "Member 'CharacterConditionControlComponent_BP_SetConditionLocal::Level' has a wrong offset!");
static_assert(offsetof(CharacterConditionControlComponent_BP_SetConditionLocal, Span) == 0x000008, "Member 'CharacterConditionControlComponent_BP_SetConditionLocal::Span' has a wrong offset!");
static_assert(offsetof(CharacterConditionControlComponent_BP_SetConditionLocal, Value) == 0x00000C, "Member 'CharacterConditionControlComponent_BP_SetConditionLocal::Value' has a wrong offset!");
static_assert(offsetof(CharacterConditionControlComponent_BP_SetConditionLocal, Interval) == 0x000010, "Member 'CharacterConditionControlComponent_BP_SetConditionLocal::Interval' has a wrong offset!");
static_assert(offsetof(CharacterConditionControlComponent_BP_SetConditionLocal, SubLevel) == 0x000014, "Member 'CharacterConditionControlComponent_BP_SetConditionLocal::SubLevel' has a wrong offset!");
static_assert(offsetof(CharacterConditionControlComponent_BP_SetConditionLocal, InstigatedPlayer) == 0x000018, "Member 'CharacterConditionControlComponent_BP_SetConditionLocal::InstigatedPlayer' has a wrong offset!");

// Function InGameModule.CharacterConditionControlComponent.BP_SetInstigatedPlayerInfection
// 0x0008 (0x0008 - 0x0000)
struct CharacterConditionControlComponent_BP_SetInstigatedPlayerInfection final
{
public:
	class APlayerStateBattle*                     InstigatedPlayer;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterConditionControlComponent_BP_SetInstigatedPlayerInfection) == 0x000008, "Wrong alignment on CharacterConditionControlComponent_BP_SetInstigatedPlayerInfection");
static_assert(sizeof(CharacterConditionControlComponent_BP_SetInstigatedPlayerInfection) == 0x000008, "Wrong size on CharacterConditionControlComponent_BP_SetInstigatedPlayerInfection");
static_assert(offsetof(CharacterConditionControlComponent_BP_SetInstigatedPlayerInfection, InstigatedPlayer) == 0x000000, "Member 'CharacterConditionControlComponent_BP_SetInstigatedPlayerInfection::InstigatedPlayer' has a wrong offset!");

// Function InGameModule.CharacterConditionControlComponent.ClearCondition_NetMulticast
// 0x0001 (0x0001 - 0x0000)
struct CharacterConditionControlComponent_ClearCondition_NetMulticast final
{
public:
	ECharacterConditionId                         ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterConditionControlComponent_ClearCondition_NetMulticast) == 0x000001, "Wrong alignment on CharacterConditionControlComponent_ClearCondition_NetMulticast");
static_assert(sizeof(CharacterConditionControlComponent_ClearCondition_NetMulticast) == 0x000001, "Wrong size on CharacterConditionControlComponent_ClearCondition_NetMulticast");
static_assert(offsetof(CharacterConditionControlComponent_ClearCondition_NetMulticast, ID) == 0x000000, "Member 'CharacterConditionControlComponent_ClearCondition_NetMulticast::ID' has a wrong offset!");

// Function InGameModule.CharacterConditionControlComponent.ClearCondition_ToServer
// 0x0001 (0x0001 - 0x0000)
struct CharacterConditionControlComponent_ClearCondition_ToServer final
{
public:
	ECharacterConditionId                         ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterConditionControlComponent_ClearCondition_ToServer) == 0x000001, "Wrong alignment on CharacterConditionControlComponent_ClearCondition_ToServer");
static_assert(sizeof(CharacterConditionControlComponent_ClearCondition_ToServer) == 0x000001, "Wrong size on CharacterConditionControlComponent_ClearCondition_ToServer");
static_assert(offsetof(CharacterConditionControlComponent_ClearCondition_ToServer, ID) == 0x000000, "Member 'CharacterConditionControlComponent_ClearCondition_ToServer::ID' has a wrong offset!");

// Function InGameModule.CharacterConditionControlComponent.SetCondition_NetMulticast
// 0x0028 (0x0028 - 0x0000)
struct CharacterConditionControlComponent_SetCondition_NetMulticast final
{
public:
	ECharacterConditionId                         ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Span;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Interval;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubLevel;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyAutonomousProxy;                             // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerStateBattle*                     InstigatedPlayer;                                  // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterConditionControlComponent_SetCondition_NetMulticast) == 0x000008, "Wrong alignment on CharacterConditionControlComponent_SetCondition_NetMulticast");
static_assert(sizeof(CharacterConditionControlComponent_SetCondition_NetMulticast) == 0x000028, "Wrong size on CharacterConditionControlComponent_SetCondition_NetMulticast");
static_assert(offsetof(CharacterConditionControlComponent_SetCondition_NetMulticast, ID) == 0x000000, "Member 'CharacterConditionControlComponent_SetCondition_NetMulticast::ID' has a wrong offset!");
static_assert(offsetof(CharacterConditionControlComponent_SetCondition_NetMulticast, Level) == 0x000004, "Member 'CharacterConditionControlComponent_SetCondition_NetMulticast::Level' has a wrong offset!");
static_assert(offsetof(CharacterConditionControlComponent_SetCondition_NetMulticast, Span) == 0x000008, "Member 'CharacterConditionControlComponent_SetCondition_NetMulticast::Span' has a wrong offset!");
static_assert(offsetof(CharacterConditionControlComponent_SetCondition_NetMulticast, Value) == 0x00000C, "Member 'CharacterConditionControlComponent_SetCondition_NetMulticast::Value' has a wrong offset!");
static_assert(offsetof(CharacterConditionControlComponent_SetCondition_NetMulticast, Interval) == 0x000010, "Member 'CharacterConditionControlComponent_SetCondition_NetMulticast::Interval' has a wrong offset!");
static_assert(offsetof(CharacterConditionControlComponent_SetCondition_NetMulticast, SubLevel) == 0x000014, "Member 'CharacterConditionControlComponent_SetCondition_NetMulticast::SubLevel' has a wrong offset!");
static_assert(offsetof(CharacterConditionControlComponent_SetCondition_NetMulticast, bApplyAutonomousProxy) == 0x000018, "Member 'CharacterConditionControlComponent_SetCondition_NetMulticast::bApplyAutonomousProxy' has a wrong offset!");
static_assert(offsetof(CharacterConditionControlComponent_SetCondition_NetMulticast, InstigatedPlayer) == 0x000020, "Member 'CharacterConditionControlComponent_SetCondition_NetMulticast::InstigatedPlayer' has a wrong offset!");

// Function InGameModule.CharacterConditionControlComponent.SetCondition_ToServer
// 0x0028 (0x0028 - 0x0000)
struct CharacterConditionControlComponent_SetCondition_ToServer final
{
public:
	ECharacterConditionId                         ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Span;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Interval;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubLevel;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyAutonomousProxy;                             // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerStateBattle*                     InstigatedPlayer;                                  // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterConditionControlComponent_SetCondition_ToServer) == 0x000008, "Wrong alignment on CharacterConditionControlComponent_SetCondition_ToServer");
static_assert(sizeof(CharacterConditionControlComponent_SetCondition_ToServer) == 0x000028, "Wrong size on CharacterConditionControlComponent_SetCondition_ToServer");
static_assert(offsetof(CharacterConditionControlComponent_SetCondition_ToServer, ID) == 0x000000, "Member 'CharacterConditionControlComponent_SetCondition_ToServer::ID' has a wrong offset!");
static_assert(offsetof(CharacterConditionControlComponent_SetCondition_ToServer, Level) == 0x000004, "Member 'CharacterConditionControlComponent_SetCondition_ToServer::Level' has a wrong offset!");
static_assert(offsetof(CharacterConditionControlComponent_SetCondition_ToServer, Span) == 0x000008, "Member 'CharacterConditionControlComponent_SetCondition_ToServer::Span' has a wrong offset!");
static_assert(offsetof(CharacterConditionControlComponent_SetCondition_ToServer, Value) == 0x00000C, "Member 'CharacterConditionControlComponent_SetCondition_ToServer::Value' has a wrong offset!");
static_assert(offsetof(CharacterConditionControlComponent_SetCondition_ToServer, Interval) == 0x000010, "Member 'CharacterConditionControlComponent_SetCondition_ToServer::Interval' has a wrong offset!");
static_assert(offsetof(CharacterConditionControlComponent_SetCondition_ToServer, SubLevel) == 0x000014, "Member 'CharacterConditionControlComponent_SetCondition_ToServer::SubLevel' has a wrong offset!");
static_assert(offsetof(CharacterConditionControlComponent_SetCondition_ToServer, bApplyAutonomousProxy) == 0x000018, "Member 'CharacterConditionControlComponent_SetCondition_ToServer::bApplyAutonomousProxy' has a wrong offset!");
static_assert(offsetof(CharacterConditionControlComponent_SetCondition_ToServer, InstigatedPlayer) == 0x000020, "Member 'CharacterConditionControlComponent_SetCondition_ToServer::InstigatedPlayer' has a wrong offset!");

// Function InGameModule.CharacterConditionControlComponent.BP_IsValidCondition
// 0x0002 (0x0002 - 0x0000)
struct CharacterConditionControlComponent_BP_IsValidCondition final
{
public:
	ECharacterConditionId                         ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterConditionControlComponent_BP_IsValidCondition) == 0x000001, "Wrong alignment on CharacterConditionControlComponent_BP_IsValidCondition");
static_assert(sizeof(CharacterConditionControlComponent_BP_IsValidCondition) == 0x000002, "Wrong size on CharacterConditionControlComponent_BP_IsValidCondition");
static_assert(offsetof(CharacterConditionControlComponent_BP_IsValidCondition, ID) == 0x000000, "Member 'CharacterConditionControlComponent_BP_IsValidCondition::ID' has a wrong offset!");
static_assert(offsetof(CharacterConditionControlComponent_BP_IsValidCondition, ReturnValue) == 0x000001, "Member 'CharacterConditionControlComponent_BP_IsValidCondition::ReturnValue' has a wrong offset!");

// DelegateFunction InGameModule.DurableBulletComponent.DamageEventWithValue__DelegateSignature
// 0x00A0 (0x00A0 - 0x0000)
struct DurableBulletComponent_DamageEventWithValue__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageAmount;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHitMarkType                                  HitMarkType;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0010(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          IsMeleeAttack;                                     // 0x0098(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DurableBulletComponent_DamageEventWithValue__DelegateSignature) == 0x000008, "Wrong alignment on DurableBulletComponent_DamageEventWithValue__DelegateSignature");
static_assert(sizeof(DurableBulletComponent_DamageEventWithValue__DelegateSignature) == 0x0000A0, "Wrong size on DurableBulletComponent_DamageEventWithValue__DelegateSignature");
static_assert(offsetof(DurableBulletComponent_DamageEventWithValue__DelegateSignature, HitComponent) == 0x000000, "Member 'DurableBulletComponent_DamageEventWithValue__DelegateSignature::HitComponent' has a wrong offset!");
static_assert(offsetof(DurableBulletComponent_DamageEventWithValue__DelegateSignature, DamageAmount) == 0x000008, "Member 'DurableBulletComponent_DamageEventWithValue__DelegateSignature::DamageAmount' has a wrong offset!");
static_assert(offsetof(DurableBulletComponent_DamageEventWithValue__DelegateSignature, HitMarkType) == 0x00000C, "Member 'DurableBulletComponent_DamageEventWithValue__DelegateSignature::HitMarkType' has a wrong offset!");
static_assert(offsetof(DurableBulletComponent_DamageEventWithValue__DelegateSignature, HitResult) == 0x000010, "Member 'DurableBulletComponent_DamageEventWithValue__DelegateSignature::HitResult' has a wrong offset!");
static_assert(offsetof(DurableBulletComponent_DamageEventWithValue__DelegateSignature, IsMeleeAttack) == 0x000098, "Member 'DurableBulletComponent_DamageEventWithValue__DelegateSignature::IsMeleeAttack' has a wrong offset!");

// Function InGameModule.DurableBulletComponent.GetHp
// 0x0004 (0x0004 - 0x0000)
struct DurableBulletComponent_GetHp final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DurableBulletComponent_GetHp) == 0x000004, "Wrong alignment on DurableBulletComponent_GetHp");
static_assert(sizeof(DurableBulletComponent_GetHp) == 0x000004, "Wrong size on DurableBulletComponent_GetHp");
static_assert(offsetof(DurableBulletComponent_GetHp, ReturnValue) == 0x000000, "Member 'DurableBulletComponent_GetHp::ReturnValue' has a wrong offset!");

// Function InGameModule.DurableBulletComponent.ReduceHp
// 0x0004 (0x0004 - 0x0000)
struct DurableBulletComponent_ReduceHp final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DurableBulletComponent_ReduceHp) == 0x000004, "Wrong alignment on DurableBulletComponent_ReduceHp");
static_assert(sizeof(DurableBulletComponent_ReduceHp) == 0x000004, "Wrong size on DurableBulletComponent_ReduceHp");
static_assert(offsetof(DurableBulletComponent_ReduceHp, Value) == 0x000000, "Member 'DurableBulletComponent_ReduceHp::Value' has a wrong offset!");

// Function InGameModule.GimmickSpawnPoint.BP_SetGimmickCode
// 0x0001 (0x0001 - 0x0000)
struct GimmickSpawnPoint_BP_SetGimmickCode final
{
public:
	EGimmickCode                                  Code;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickSpawnPoint_BP_SetGimmickCode) == 0x000001, "Wrong alignment on GimmickSpawnPoint_BP_SetGimmickCode");
static_assert(sizeof(GimmickSpawnPoint_BP_SetGimmickCode) == 0x000001, "Wrong size on GimmickSpawnPoint_BP_SetGimmickCode");
static_assert(offsetof(GimmickSpawnPoint_BP_SetGimmickCode, Code) == 0x000000, "Member 'GimmickSpawnPoint_BP_SetGimmickCode::Code' has a wrong offset!");

// Function InGameModule.GimmickSpawnPoint.BP_GetAlwaysSpawnFlag
// 0x0001 (0x0001 - 0x0000)
struct GimmickSpawnPoint_BP_GetAlwaysSpawnFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickSpawnPoint_BP_GetAlwaysSpawnFlag) == 0x000001, "Wrong alignment on GimmickSpawnPoint_BP_GetAlwaysSpawnFlag");
static_assert(sizeof(GimmickSpawnPoint_BP_GetAlwaysSpawnFlag) == 0x000001, "Wrong size on GimmickSpawnPoint_BP_GetAlwaysSpawnFlag");
static_assert(offsetof(GimmickSpawnPoint_BP_GetAlwaysSpawnFlag, ReturnValue) == 0x000000, "Member 'GimmickSpawnPoint_BP_GetAlwaysSpawnFlag::ReturnValue' has a wrong offset!");

// Function InGameModule.GimmickSpawnPoint.BP_GetGimmickCode
// 0x0001 (0x0001 - 0x0000)
struct GimmickSpawnPoint_BP_GetGimmickCode final
{
public:
	EGimmickCode                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GimmickSpawnPoint_BP_GetGimmickCode) == 0x000001, "Wrong alignment on GimmickSpawnPoint_BP_GetGimmickCode");
static_assert(sizeof(GimmickSpawnPoint_BP_GetGimmickCode) == 0x000001, "Wrong size on GimmickSpawnPoint_BP_GetGimmickCode");
static_assert(offsetof(GimmickSpawnPoint_BP_GetGimmickCode, ReturnValue) == 0x000000, "Member 'GimmickSpawnPoint_BP_GetGimmickCode::ReturnValue' has a wrong offset!");

// Function InGameModule.Ch023Unique2Child.SetMID
// 0x0010 (0x0010 - 0x0000)
struct Ch023Unique2Child_SetMID final
{
public:
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch023Unique2Child_SetMID) == 0x000008, "Wrong alignment on Ch023Unique2Child_SetMID");
static_assert(sizeof(Ch023Unique2Child_SetMID) == 0x000010, "Wrong size on Ch023Unique2Child_SetMID");
static_assert(offsetof(Ch023Unique2Child_SetMID, Mid) == 0x000000, "Member 'Ch023Unique2Child_SetMID::Mid' has a wrong offset!");
static_assert(offsetof(Ch023Unique2Child_SetMID, ReturnValue) == 0x000008, "Member 'Ch023Unique2Child_SetMID::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterTutorial.BP_PlayAnimation
// 0x0001 (0x0001 - 0x0000)
struct CharacterTutorial_BP_PlayAnimation final
{
public:
	EAnimationId                                  AnimationId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterTutorial_BP_PlayAnimation) == 0x000001, "Wrong alignment on CharacterTutorial_BP_PlayAnimation");
static_assert(sizeof(CharacterTutorial_BP_PlayAnimation) == 0x000001, "Wrong size on CharacterTutorial_BP_PlayAnimation");
static_assert(offsetof(CharacterTutorial_BP_PlayAnimation, AnimationId) == 0x000000, "Member 'CharacterTutorial_BP_PlayAnimation::AnimationId' has a wrong offset!");

// Function InGameModule.BattleBriefingSequenceWidget.TickClose
// 0x0004 (0x0004 - 0x0000)
struct BattleBriefingSequenceWidget_TickClose final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleBriefingSequenceWidget_TickClose) == 0x000004, "Wrong alignment on BattleBriefingSequenceWidget_TickClose");
static_assert(sizeof(BattleBriefingSequenceWidget_TickClose) == 0x000004, "Wrong size on BattleBriefingSequenceWidget_TickClose");
static_assert(offsetof(BattleBriefingSequenceWidget_TickClose, DeltaSeconds) == 0x000000, "Member 'BattleBriefingSequenceWidget_TickClose::DeltaSeconds' has a wrong offset!");

// Function InGameModule.BattleBriefingSequenceWidget.TickOpen
// 0x0004 (0x0004 - 0x0000)
struct BattleBriefingSequenceWidget_TickOpen final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleBriefingSequenceWidget_TickOpen) == 0x000004, "Wrong alignment on BattleBriefingSequenceWidget_TickOpen");
static_assert(sizeof(BattleBriefingSequenceWidget_TickOpen) == 0x000004, "Wrong size on BattleBriefingSequenceWidget_TickOpen");
static_assert(offsetof(BattleBriefingSequenceWidget_TickOpen, DeltaSeconds) == 0x000000, "Member 'BattleBriefingSequenceWidget_TickOpen::DeltaSeconds' has a wrong offset!");

// DelegateFunction InGameModule.BattleBriefingSequenceWidget.UpdateEvent__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct BattleBriefingSequenceWidget_UpdateEvent__DelegateSignature final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleBriefingSequenceWidget_UpdateEvent__DelegateSignature) == 0x000004, "Wrong alignment on BattleBriefingSequenceWidget_UpdateEvent__DelegateSignature");
static_assert(sizeof(BattleBriefingSequenceWidget_UpdateEvent__DelegateSignature) == 0x000004, "Wrong size on BattleBriefingSequenceWidget_UpdateEvent__DelegateSignature");
static_assert(offsetof(BattleBriefingSequenceWidget_UpdateEvent__DelegateSignature, DeltaSeconds) == 0x000000, "Member 'BattleBriefingSequenceWidget_UpdateEvent__DelegateSignature::DeltaSeconds' has a wrong offset!");

// Function InGameModule.SupplyDataAsset.GetFloatEffectValue
// 0x0008 (0x0008 - 0x0000)
struct SupplyDataAsset_GetFloatEffectValue final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SupplyDataAsset_GetFloatEffectValue) == 0x000004, "Wrong alignment on SupplyDataAsset_GetFloatEffectValue");
static_assert(sizeof(SupplyDataAsset_GetFloatEffectValue) == 0x000008, "Wrong size on SupplyDataAsset_GetFloatEffectValue");
static_assert(offsetof(SupplyDataAsset_GetFloatEffectValue, Index_0) == 0x000000, "Member 'SupplyDataAsset_GetFloatEffectValue::Index_0' has a wrong offset!");
static_assert(offsetof(SupplyDataAsset_GetFloatEffectValue, ReturnValue) == 0x000004, "Member 'SupplyDataAsset_GetFloatEffectValue::ReturnValue' has a wrong offset!");

// Function InGameModule.BattleBriefingSliderWidget.OnPressMinusButton
// 0x0010 (0x0010 - 0x0000)
struct BattleBriefingSliderWidget_OnPressMinusButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleBriefingSliderWidget_OnPressMinusButton) == 0x000008, "Wrong alignment on BattleBriefingSliderWidget_OnPressMinusButton");
static_assert(sizeof(BattleBriefingSliderWidget_OnPressMinusButton) == 0x000010, "Wrong size on BattleBriefingSliderWidget_OnPressMinusButton");
static_assert(offsetof(BattleBriefingSliderWidget_OnPressMinusButton, Widget) == 0x000000, "Member 'BattleBriefingSliderWidget_OnPressMinusButton::Widget' has a wrong offset!");
static_assert(offsetof(BattleBriefingSliderWidget_OnPressMinusButton, InputType) == 0x000008, "Member 'BattleBriefingSliderWidget_OnPressMinusButton::InputType' has a wrong offset!");

// Function InGameModule.BattleBriefingSliderWidget.OnPressPlusButton
// 0x0010 (0x0010 - 0x0000)
struct BattleBriefingSliderWidget_OnPressPlusButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleBriefingSliderWidget_OnPressPlusButton) == 0x000008, "Wrong alignment on BattleBriefingSliderWidget_OnPressPlusButton");
static_assert(sizeof(BattleBriefingSliderWidget_OnPressPlusButton) == 0x000010, "Wrong size on BattleBriefingSliderWidget_OnPressPlusButton");
static_assert(offsetof(BattleBriefingSliderWidget_OnPressPlusButton, Widget) == 0x000000, "Member 'BattleBriefingSliderWidget_OnPressPlusButton::Widget' has a wrong offset!");
static_assert(offsetof(BattleBriefingSliderWidget_OnPressPlusButton, InputType) == 0x000008, "Member 'BattleBriefingSliderWidget_OnPressPlusButton::InputType' has a wrong offset!");

// Function InGameModule.WarpCopyComponent.Init
// 0x0010 (0x0010 - 0x0000)
struct WarpCopyComponent_Init final
{
public:
	class UMultiTraceComponent*                   Src;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWarpCopyType                                 CopyType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WarpCopyComponent_Init) == 0x000008, "Wrong alignment on WarpCopyComponent_Init");
static_assert(sizeof(WarpCopyComponent_Init) == 0x000010, "Wrong size on WarpCopyComponent_Init");
static_assert(offsetof(WarpCopyComponent_Init, Src) == 0x000000, "Member 'WarpCopyComponent_Init::Src' has a wrong offset!");
static_assert(offsetof(WarpCopyComponent_Init, CopyType) == 0x000008, "Member 'WarpCopyComponent_Init::CopyType' has a wrong offset!");

// Function InGameModule.WarpCopyComponent.OnPortalBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct WarpCopyComponent_OnPortalBeginOverlap final
{
public:
	class APortal*                                Portal;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WarpCopyComponent_OnPortalBeginOverlap) == 0x000008, "Wrong alignment on WarpCopyComponent_OnPortalBeginOverlap");
static_assert(sizeof(WarpCopyComponent_OnPortalBeginOverlap) == 0x000010, "Wrong size on WarpCopyComponent_OnPortalBeginOverlap");
static_assert(offsetof(WarpCopyComponent_OnPortalBeginOverlap, Portal) == 0x000000, "Member 'WarpCopyComponent_OnPortalBeginOverlap::Portal' has a wrong offset!");
static_assert(offsetof(WarpCopyComponent_OnPortalBeginOverlap, ReturnValue) == 0x000008, "Member 'WarpCopyComponent_OnPortalBeginOverlap::ReturnValue' has a wrong offset!");

// Function InGameModule.WarpCopyComponent.TogglePrimitiveComponent
// 0x0010 (0x0010 - 0x0000)
struct WarpCopyComponent_TogglePrimitiveComponent final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          On;                                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WarpCopyComponent_TogglePrimitiveComponent) == 0x000008, "Wrong alignment on WarpCopyComponent_TogglePrimitiveComponent");
static_assert(sizeof(WarpCopyComponent_TogglePrimitiveComponent) == 0x000010, "Wrong size on WarpCopyComponent_TogglePrimitiveComponent");
static_assert(offsetof(WarpCopyComponent_TogglePrimitiveComponent, Component) == 0x000000, "Member 'WarpCopyComponent_TogglePrimitiveComponent::Component' has a wrong offset!");
static_assert(offsetof(WarpCopyComponent_TogglePrimitiveComponent, On) == 0x000008, "Member 'WarpCopyComponent_TogglePrimitiveComponent::On' has a wrong offset!");

// Function InGameModule.CommentaryVoiceComponent.PlayCountDown
// 0x0004 (0x0004 - 0x0000)
struct CommentaryVoiceComponent_PlayCountDown final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommentaryVoiceComponent_PlayCountDown) == 0x000004, "Wrong alignment on CommentaryVoiceComponent_PlayCountDown");
static_assert(sizeof(CommentaryVoiceComponent_PlayCountDown) == 0x000004, "Wrong size on CommentaryVoiceComponent_PlayCountDown");
static_assert(offsetof(CommentaryVoiceComponent_PlayCountDown, Count) == 0x000000, "Member 'CommentaryVoiceComponent_PlayCountDown::Count' has a wrong offset!");

// Function InGameModule.CommentaryVoiceComponent.PlayVoice
// 0x0008 (0x0008 - 0x0000)
struct CommentaryVoiceComponent_PlayVoice final
{
public:
	ECommentaryVoiceType                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CueIndex;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommentaryVoiceComponent_PlayVoice) == 0x000004, "Wrong alignment on CommentaryVoiceComponent_PlayVoice");
static_assert(sizeof(CommentaryVoiceComponent_PlayVoice) == 0x000008, "Wrong size on CommentaryVoiceComponent_PlayVoice");
static_assert(offsetof(CommentaryVoiceComponent_PlayVoice, Type) == 0x000000, "Member 'CommentaryVoiceComponent_PlayVoice::Type' has a wrong offset!");
static_assert(offsetof(CommentaryVoiceComponent_PlayVoice, CueIndex) == 0x000004, "Member 'CommentaryVoiceComponent_PlayVoice::CueIndex' has a wrong offset!");

// Function InGameModule.CommentaryVoiceComponent.PlayVoiceList
// 0x0010 (0x0010 - 0x0000)
struct CommentaryVoiceComponent_PlayVoiceList final
{
public:
	TArray<struct FCommentaryVoicePlayListInfo>   PlayListInfo;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommentaryVoiceComponent_PlayVoiceList) == 0x000008, "Wrong alignment on CommentaryVoiceComponent_PlayVoiceList");
static_assert(sizeof(CommentaryVoiceComponent_PlayVoiceList) == 0x000010, "Wrong size on CommentaryVoiceComponent_PlayVoiceList");
static_assert(offsetof(CommentaryVoiceComponent_PlayVoiceList, PlayListInfo) == 0x000000, "Member 'CommentaryVoiceComponent_PlayVoiceList::PlayListInfo' has a wrong offset!");

// Function InGameModule.GameTeamInfoComponent.GetAlivePlayerNum
// 0x0004 (0x0004 - 0x0000)
struct GameTeamInfoComponent_GetAlivePlayerNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameTeamInfoComponent_GetAlivePlayerNum) == 0x000004, "Wrong alignment on GameTeamInfoComponent_GetAlivePlayerNum");
static_assert(sizeof(GameTeamInfoComponent_GetAlivePlayerNum) == 0x000004, "Wrong size on GameTeamInfoComponent_GetAlivePlayerNum");
static_assert(offsetof(GameTeamInfoComponent_GetAlivePlayerNum, ReturnValue) == 0x000000, "Member 'GameTeamInfoComponent_GetAlivePlayerNum::ReturnValue' has a wrong offset!");

// Function InGameModule.GameTeamInfoComponent.GetAliveTeamNum
// 0x0004 (0x0004 - 0x0000)
struct GameTeamInfoComponent_GetAliveTeamNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameTeamInfoComponent_GetAliveTeamNum) == 0x000004, "Wrong alignment on GameTeamInfoComponent_GetAliveTeamNum");
static_assert(sizeof(GameTeamInfoComponent_GetAliveTeamNum) == 0x000004, "Wrong size on GameTeamInfoComponent_GetAliveTeamNum");
static_assert(offsetof(GameTeamInfoComponent_GetAliveTeamNum, ReturnValue) == 0x000000, "Member 'GameTeamInfoComponent_GetAliveTeamNum::ReturnValue' has a wrong offset!");

// Function InGameModule.BattleBriefingWidget.CreateOtherPins
// 0x0004 (0x0004 - 0x0000)
struct BattleBriefingWidget_CreateOtherPins final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleBriefingWidget_CreateOtherPins) == 0x000004, "Wrong alignment on BattleBriefingWidget_CreateOtherPins");
static_assert(sizeof(BattleBriefingWidget_CreateOtherPins) == 0x000004, "Wrong size on BattleBriefingWidget_CreateOtherPins");
static_assert(offsetof(BattleBriefingWidget_CreateOtherPins, DeltaSeconds) == 0x000000, "Member 'BattleBriefingWidget_CreateOtherPins::DeltaSeconds' has a wrong offset!");

// Function InGameModule.BattleBriefingWidget.Delay
// 0x0004 (0x0004 - 0x0000)
struct BattleBriefingWidget_Delay final
{
public:
	float                                         Delay_0;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleBriefingWidget_Delay) == 0x000004, "Wrong alignment on BattleBriefingWidget_Delay");
static_assert(sizeof(BattleBriefingWidget_Delay) == 0x000004, "Wrong size on BattleBriefingWidget_Delay");
static_assert(offsetof(BattleBriefingWidget_Delay, Delay_0) == 0x000000, "Member 'BattleBriefingWidget_Delay::Delay_0' has a wrong offset!");

// Function InGameModule.BattleBriefingWidget.DispAllPins
// 0x0004 (0x0004 - 0x0000)
struct BattleBriefingWidget_DispAllPins final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleBriefingWidget_DispAllPins) == 0x000004, "Wrong alignment on BattleBriefingWidget_DispAllPins");
static_assert(sizeof(BattleBriefingWidget_DispAllPins) == 0x000004, "Wrong size on BattleBriefingWidget_DispAllPins");
static_assert(offsetof(BattleBriefingWidget_DispAllPins, DeltaSeconds) == 0x000000, "Member 'BattleBriefingWidget_DispAllPins::DeltaSeconds' has a wrong offset!");

// Function InGameModule.BattleBriefingWidget.Init
// 0x0004 (0x0004 - 0x0000)
struct BattleBriefingWidget_Init final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleBriefingWidget_Init) == 0x000004, "Wrong alignment on BattleBriefingWidget_Init");
static_assert(sizeof(BattleBriefingWidget_Init) == 0x000004, "Wrong size on BattleBriefingWidget_Init");
static_assert(offsetof(BattleBriefingWidget_Init, DeltaSeconds) == 0x000000, "Member 'BattleBriefingWidget_Init::DeltaSeconds' has a wrong offset!");

// Function InGameModule.BattleBriefingWidget.PressPinUpKey
// 0x000C (0x000C - 0x0000)
struct BattleBriefingWidget_PressPinUpKey final
{
public:
	class FName                                   CustomName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrg;                                              // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRapidFire;                                        // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleBriefingWidget_PressPinUpKey) == 0x000004, "Wrong alignment on BattleBriefingWidget_PressPinUpKey");
static_assert(sizeof(BattleBriefingWidget_PressPinUpKey) == 0x00000C, "Wrong size on BattleBriefingWidget_PressPinUpKey");
static_assert(offsetof(BattleBriefingWidget_PressPinUpKey, CustomName) == 0x000000, "Member 'BattleBriefingWidget_PressPinUpKey::CustomName' has a wrong offset!");
static_assert(offsetof(BattleBriefingWidget_PressPinUpKey, bTrg) == 0x000008, "Member 'BattleBriefingWidget_PressPinUpKey::bTrg' has a wrong offset!");
static_assert(offsetof(BattleBriefingWidget_PressPinUpKey, bRapidFire) == 0x000009, "Member 'BattleBriefingWidget_PressPinUpKey::bRapidFire' has a wrong offset!");

// Function InGameModule.BattleBriefingWidget.ReleasePinUpKey
// 0x0008 (0x0008 - 0x0000)
struct BattleBriefingWidget_ReleasePinUpKey final
{
public:
	class FName                                   CustomName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleBriefingWidget_ReleasePinUpKey) == 0x000004, "Wrong alignment on BattleBriefingWidget_ReleasePinUpKey");
static_assert(sizeof(BattleBriefingWidget_ReleasePinUpKey) == 0x000008, "Wrong size on BattleBriefingWidget_ReleasePinUpKey");
static_assert(offsetof(BattleBriefingWidget_ReleasePinUpKey, CustomName) == 0x000000, "Member 'BattleBriefingWidget_ReleasePinUpKey::CustomName' has a wrong offset!");

// Function InGameModule.BattleBriefingWidget.StartProduction
// 0x0004 (0x0004 - 0x0000)
struct BattleBriefingWidget_StartProduction final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleBriefingWidget_StartProduction) == 0x000004, "Wrong alignment on BattleBriefingWidget_StartProduction");
static_assert(sizeof(BattleBriefingWidget_StartProduction) == 0x000004, "Wrong size on BattleBriefingWidget_StartProduction");
static_assert(offsetof(BattleBriefingWidget_StartProduction, DeltaSeconds) == 0x000000, "Member 'BattleBriefingWidget_StartProduction::DeltaSeconds' has a wrong offset!");

// Function InGameModule.BattleBriefingWidget.Update
// 0x0004 (0x0004 - 0x0000)
struct BattleBriefingWidget_Update final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleBriefingWidget_Update) == 0x000004, "Wrong alignment on BattleBriefingWidget_Update");
static_assert(sizeof(BattleBriefingWidget_Update) == 0x000004, "Wrong size on BattleBriefingWidget_Update");
static_assert(offsetof(BattleBriefingWidget_Update, DeltaSeconds) == 0x000000, "Member 'BattleBriefingWidget_Update::DeltaSeconds' has a wrong offset!");

// DelegateFunction InGameModule.BattleBriefingWidget.UpdateEvent__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct BattleBriefingWidget_UpdateEvent__DelegateSignature final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleBriefingWidget_UpdateEvent__DelegateSignature) == 0x000004, "Wrong alignment on BattleBriefingWidget_UpdateEvent__DelegateSignature");
static_assert(sizeof(BattleBriefingWidget_UpdateEvent__DelegateSignature) == 0x000004, "Wrong size on BattleBriefingWidget_UpdateEvent__DelegateSignature");
static_assert(offsetof(BattleBriefingWidget_UpdateEvent__DelegateSignature, DeltaSeconds) == 0x000000, "Member 'BattleBriefingWidget_UpdateEvent__DelegateSignature::DeltaSeconds' has a wrong offset!");

// Function InGameModule.BattleBriefingWidget.WaitPlayerState
// 0x0004 (0x0004 - 0x0000)
struct BattleBriefingWidget_WaitPlayerState final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleBriefingWidget_WaitPlayerState) == 0x000004, "Wrong alignment on BattleBriefingWidget_WaitPlayerState");
static_assert(sizeof(BattleBriefingWidget_WaitPlayerState) == 0x000004, "Wrong size on BattleBriefingWidget_WaitPlayerState");
static_assert(offsetof(BattleBriefingWidget_WaitPlayerState, DeltaSeconds) == 0x000000, "Member 'BattleBriefingWidget_WaitPlayerState::DeltaSeconds' has a wrong offset!");

// Function InGameModule.BattleBriefingWidget.WaitProduction
// 0x0004 (0x0004 - 0x0000)
struct BattleBriefingWidget_WaitProduction final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattleBriefingWidget_WaitProduction) == 0x000004, "Wrong alignment on BattleBriefingWidget_WaitProduction");
static_assert(sizeof(BattleBriefingWidget_WaitProduction) == 0x000004, "Wrong size on BattleBriefingWidget_WaitProduction");
static_assert(offsetof(BattleBriefingWidget_WaitProduction, DeltaSeconds) == 0x000000, "Member 'BattleBriefingWidget_WaitProduction::DeltaSeconds' has a wrong offset!");

// Function InGameModule.BattleCustomParticleSystemComponent.OnChangeCharacterAction
// 0x0010 (0x0010 - 0x0000)
struct BattleCustomParticleSystemComponent_OnChangeCharacterAction final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattleCustomParticleSystemComponent_OnChangeCharacterAction) == 0x000008, "Wrong alignment on BattleCustomParticleSystemComponent_OnChangeCharacterAction");
static_assert(sizeof(BattleCustomParticleSystemComponent_OnChangeCharacterAction) == 0x000010, "Wrong size on BattleCustomParticleSystemComponent_OnChangeCharacterAction");
static_assert(offsetof(BattleCustomParticleSystemComponent_OnChangeCharacterAction, Montage) == 0x000000, "Member 'BattleCustomParticleSystemComponent_OnChangeCharacterAction::Montage' has a wrong offset!");
static_assert(offsetof(BattleCustomParticleSystemComponent_OnChangeCharacterAction, bInterrupted) == 0x000008, "Member 'BattleCustomParticleSystemComponent_OnChangeCharacterAction::bInterrupted' has a wrong offset!");

// Function InGameModule.BeamParticleSystemComponent.BP_AttachTargetMesh
// 0x0010 (0x0010 - 0x0000)
struct BeamParticleSystemComponent_BP_AttachTargetMesh final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeamParticleSystemComponent_BP_AttachTargetMesh) == 0x000008, "Wrong alignment on BeamParticleSystemComponent_BP_AttachTargetMesh");
static_assert(sizeof(BeamParticleSystemComponent_BP_AttachTargetMesh) == 0x000010, "Wrong size on BeamParticleSystemComponent_BP_AttachTargetMesh");
static_assert(offsetof(BeamParticleSystemComponent_BP_AttachTargetMesh, Target) == 0x000000, "Member 'BeamParticleSystemComponent_BP_AttachTargetMesh::Target' has a wrong offset!");
static_assert(offsetof(BeamParticleSystemComponent_BP_AttachTargetMesh, SocketName) == 0x000008, "Member 'BeamParticleSystemComponent_BP_AttachTargetMesh::SocketName' has a wrong offset!");

// Function InGameModule.BeamParticleSystemComponent.BP_DetachTarget
// 0x0001 (0x0001 - 0x0000)
struct BeamParticleSystemComponent_BP_DetachTarget final
{
public:
	bool                                          Release;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeamParticleSystemComponent_BP_DetachTarget) == 0x000001, "Wrong alignment on BeamParticleSystemComponent_BP_DetachTarget");
static_assert(sizeof(BeamParticleSystemComponent_BP_DetachTarget) == 0x000001, "Wrong size on BeamParticleSystemComponent_BP_DetachTarget");
static_assert(offsetof(BeamParticleSystemComponent_BP_DetachTarget, Release) == 0x000000, "Member 'BeamParticleSystemComponent_BP_DetachTarget::Release' has a wrong offset!");

// Function InGameModule.BeamParticleSystemComponent.BP_Release
// 0x0008 (0x0008 - 0x0000)
struct BeamParticleSystemComponent_BP_Release final
{
public:
	float                                         Span;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   Type;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BeamParticleSystemComponent_BP_Release) == 0x000004, "Wrong alignment on BeamParticleSystemComponent_BP_Release");
static_assert(sizeof(BeamParticleSystemComponent_BP_Release) == 0x000008, "Wrong size on BeamParticleSystemComponent_BP_Release");
static_assert(offsetof(BeamParticleSystemComponent_BP_Release, Span) == 0x000000, "Member 'BeamParticleSystemComponent_BP_Release::Span' has a wrong offset!");
static_assert(offsetof(BeamParticleSystemComponent_BP_Release, Type) == 0x000004, "Member 'BeamParticleSystemComponent_BP_Release::Type' has a wrong offset!");

// Function InGameModule.BeamParticleSystemComponent.BP_SetSourceLocation
// 0x000C (0x000C - 0x0000)
struct BeamParticleSystemComponent_BP_SetSourceLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeamParticleSystemComponent_BP_SetSourceLocation) == 0x000004, "Wrong alignment on BeamParticleSystemComponent_BP_SetSourceLocation");
static_assert(sizeof(BeamParticleSystemComponent_BP_SetSourceLocation) == 0x00000C, "Wrong size on BeamParticleSystemComponent_BP_SetSourceLocation");
static_assert(offsetof(BeamParticleSystemComponent_BP_SetSourceLocation, Location) == 0x000000, "Member 'BeamParticleSystemComponent_BP_SetSourceLocation::Location' has a wrong offset!");

// Function InGameModule.BeamParticleSystemComponent.BP_SetSourceStrength
// 0x0004 (0x0004 - 0x0000)
struct BeamParticleSystemComponent_BP_SetSourceStrength final
{
public:
	float                                         Strength;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeamParticleSystemComponent_BP_SetSourceStrength) == 0x000004, "Wrong alignment on BeamParticleSystemComponent_BP_SetSourceStrength");
static_assert(sizeof(BeamParticleSystemComponent_BP_SetSourceStrength) == 0x000004, "Wrong size on BeamParticleSystemComponent_BP_SetSourceStrength");
static_assert(offsetof(BeamParticleSystemComponent_BP_SetSourceStrength, Strength) == 0x000000, "Member 'BeamParticleSystemComponent_BP_SetSourceStrength::Strength' has a wrong offset!");

// Function InGameModule.BeamParticleSystemComponent.BP_SetSourceTangent
// 0x000C (0x000C - 0x0000)
struct BeamParticleSystemComponent_BP_SetSourceTangent final
{
public:
	struct FVector                                Tangent;                                           // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeamParticleSystemComponent_BP_SetSourceTangent) == 0x000004, "Wrong alignment on BeamParticleSystemComponent_BP_SetSourceTangent");
static_assert(sizeof(BeamParticleSystemComponent_BP_SetSourceTangent) == 0x00000C, "Wrong size on BeamParticleSystemComponent_BP_SetSourceTangent");
static_assert(offsetof(BeamParticleSystemComponent_BP_SetSourceTangent, Tangent) == 0x000000, "Member 'BeamParticleSystemComponent_BP_SetSourceTangent::Tangent' has a wrong offset!");

// Function InGameModule.BeamParticleSystemComponent.BP_SetTargetLocation
// 0x000C (0x000C - 0x0000)
struct BeamParticleSystemComponent_BP_SetTargetLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeamParticleSystemComponent_BP_SetTargetLocation) == 0x000004, "Wrong alignment on BeamParticleSystemComponent_BP_SetTargetLocation");
static_assert(sizeof(BeamParticleSystemComponent_BP_SetTargetLocation) == 0x00000C, "Wrong size on BeamParticleSystemComponent_BP_SetTargetLocation");
static_assert(offsetof(BeamParticleSystemComponent_BP_SetTargetLocation, Location) == 0x000000, "Member 'BeamParticleSystemComponent_BP_SetTargetLocation::Location' has a wrong offset!");

// Function InGameModule.BeamParticleSystemComponent.BP_SetTargetStrength
// 0x0004 (0x0004 - 0x0000)
struct BeamParticleSystemComponent_BP_SetTargetStrength final
{
public:
	float                                         Strength;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeamParticleSystemComponent_BP_SetTargetStrength) == 0x000004, "Wrong alignment on BeamParticleSystemComponent_BP_SetTargetStrength");
static_assert(sizeof(BeamParticleSystemComponent_BP_SetTargetStrength) == 0x000004, "Wrong size on BeamParticleSystemComponent_BP_SetTargetStrength");
static_assert(offsetof(BeamParticleSystemComponent_BP_SetTargetStrength, Strength) == 0x000000, "Member 'BeamParticleSystemComponent_BP_SetTargetStrength::Strength' has a wrong offset!");

// Function InGameModule.BeamParticleSystemComponent.BP_SetTargetTangent
// 0x000C (0x000C - 0x0000)
struct BeamParticleSystemComponent_BP_SetTargetTangent final
{
public:
	struct FVector                                Tangent;                                           // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeamParticleSystemComponent_BP_SetTargetTangent) == 0x000004, "Wrong alignment on BeamParticleSystemComponent_BP_SetTargetTangent");
static_assert(sizeof(BeamParticleSystemComponent_BP_SetTargetTangent) == 0x00000C, "Wrong size on BeamParticleSystemComponent_BP_SetTargetTangent");
static_assert(offsetof(BeamParticleSystemComponent_BP_SetTargetTangent, Tangent) == 0x000000, "Member 'BeamParticleSystemComponent_BP_SetTargetTangent::Tangent' has a wrong offset!");

// Function InGameModule.BeamParticleSystemComponent.BP_SetUpSourceStrangthKeyData
// 0x0010 (0x0010 - 0x0000)
struct BeamParticleSystemComponent_BP_SetUpSourceStrangthKeyData final
{
public:
	TArray<struct FSimpleKeyScalarData>           Data;                                              // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeamParticleSystemComponent_BP_SetUpSourceStrangthKeyData) == 0x000008, "Wrong alignment on BeamParticleSystemComponent_BP_SetUpSourceStrangthKeyData");
static_assert(sizeof(BeamParticleSystemComponent_BP_SetUpSourceStrangthKeyData) == 0x000010, "Wrong size on BeamParticleSystemComponent_BP_SetUpSourceStrangthKeyData");
static_assert(offsetof(BeamParticleSystemComponent_BP_SetUpSourceStrangthKeyData, Data) == 0x000000, "Member 'BeamParticleSystemComponent_BP_SetUpSourceStrangthKeyData::Data' has a wrong offset!");

// Function InGameModule.BeamParticleSystemComponent.BP_SetUpSourceTangentKeyData
// 0x0010 (0x0010 - 0x0000)
struct BeamParticleSystemComponent_BP_SetUpSourceTangentKeyData final
{
public:
	TArray<struct FSimpleKeyVectorData>           Data;                                              // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeamParticleSystemComponent_BP_SetUpSourceTangentKeyData) == 0x000008, "Wrong alignment on BeamParticleSystemComponent_BP_SetUpSourceTangentKeyData");
static_assert(sizeof(BeamParticleSystemComponent_BP_SetUpSourceTangentKeyData) == 0x000010, "Wrong size on BeamParticleSystemComponent_BP_SetUpSourceTangentKeyData");
static_assert(offsetof(BeamParticleSystemComponent_BP_SetUpSourceTangentKeyData, Data) == 0x000000, "Member 'BeamParticleSystemComponent_BP_SetUpSourceTangentKeyData::Data' has a wrong offset!");

// Function InGameModule.BeamParticleSystemComponent.BP_SetUpTargetStrangthKeyData
// 0x0010 (0x0010 - 0x0000)
struct BeamParticleSystemComponent_BP_SetUpTargetStrangthKeyData final
{
public:
	TArray<struct FSimpleKeyScalarData>           Data;                                              // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeamParticleSystemComponent_BP_SetUpTargetStrangthKeyData) == 0x000008, "Wrong alignment on BeamParticleSystemComponent_BP_SetUpTargetStrangthKeyData");
static_assert(sizeof(BeamParticleSystemComponent_BP_SetUpTargetStrangthKeyData) == 0x000010, "Wrong size on BeamParticleSystemComponent_BP_SetUpTargetStrangthKeyData");
static_assert(offsetof(BeamParticleSystemComponent_BP_SetUpTargetStrangthKeyData, Data) == 0x000000, "Member 'BeamParticleSystemComponent_BP_SetUpTargetStrangthKeyData::Data' has a wrong offset!");

// Function InGameModule.BeamParticleSystemComponent.BP_SetUpTargetTangentKeyData
// 0x0010 (0x0010 - 0x0000)
struct BeamParticleSystemComponent_BP_SetUpTargetTangentKeyData final
{
public:
	TArray<struct FSimpleKeyVectorData>           Data;                                              // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BeamParticleSystemComponent_BP_SetUpTargetTangentKeyData) == 0x000008, "Wrong alignment on BeamParticleSystemComponent_BP_SetUpTargetTangentKeyData");
static_assert(sizeof(BeamParticleSystemComponent_BP_SetUpTargetTangentKeyData) == 0x000010, "Wrong size on BeamParticleSystemComponent_BP_SetUpTargetTangentKeyData");
static_assert(offsetof(BeamParticleSystemComponent_BP_SetUpTargetTangentKeyData, Data) == 0x000000, "Member 'BeamParticleSystemComponent_BP_SetUpTargetTangentKeyData::Data' has a wrong offset!");

// Function InGameModule.GameStateTraining.SetActiveFriendlyFire_NetMulticast
// 0x0001 (0x0001 - 0x0000)
struct GameStateTraining_SetActiveFriendlyFire_NetMulticast final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateTraining_SetActiveFriendlyFire_NetMulticast) == 0x000001, "Wrong alignment on GameStateTraining_SetActiveFriendlyFire_NetMulticast");
static_assert(sizeof(GameStateTraining_SetActiveFriendlyFire_NetMulticast) == 0x000001, "Wrong size on GameStateTraining_SetActiveFriendlyFire_NetMulticast");
static_assert(offsetof(GameStateTraining_SetActiveFriendlyFire_NetMulticast, IsActive) == 0x000000, "Member 'GameStateTraining_SetActiveFriendlyFire_NetMulticast::IsActive' has a wrong offset!");

// Function InGameModule.GameStateTraining.SetCharacterId_NetMulti
// 0x0010 (0x0010 - 0x0000)
struct GameStateTraining_SetCharacterId_NetMulti final
{
public:
	class APlayerStateBattle*                     PlayerStateBattle;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterId                                  CharaID;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VariationNo;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateTraining_SetCharacterId_NetMulti) == 0x000008, "Wrong alignment on GameStateTraining_SetCharacterId_NetMulti");
static_assert(sizeof(GameStateTraining_SetCharacterId_NetMulti) == 0x000010, "Wrong size on GameStateTraining_SetCharacterId_NetMulti");
static_assert(offsetof(GameStateTraining_SetCharacterId_NetMulti, PlayerStateBattle) == 0x000000, "Member 'GameStateTraining_SetCharacterId_NetMulti::PlayerStateBattle' has a wrong offset!");
static_assert(offsetof(GameStateTraining_SetCharacterId_NetMulti, CharaID) == 0x000008, "Member 'GameStateTraining_SetCharacterId_NetMulti::CharaID' has a wrong offset!");
static_assert(offsetof(GameStateTraining_SetCharacterId_NetMulti, VariationNo) == 0x00000C, "Member 'GameStateTraining_SetCharacterId_NetMulti::VariationNo' has a wrong offset!");

// Function InGameModule.GameStateTraining.StoreAITrainingType_NetMulti
// 0x0010 (0x0010 - 0x0000)
struct GameStateTraining_StoreAITrainingType_NetMulti final
{
public:
	class APlayerStateBattle*                     PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAITrainingType                               Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameStateTraining_StoreAITrainingType_NetMulti) == 0x000008, "Wrong alignment on GameStateTraining_StoreAITrainingType_NetMulti");
static_assert(sizeof(GameStateTraining_StoreAITrainingType_NetMulti) == 0x000010, "Wrong size on GameStateTraining_StoreAITrainingType_NetMulti");
static_assert(offsetof(GameStateTraining_StoreAITrainingType_NetMulti, PlayerState) == 0x000000, "Member 'GameStateTraining_StoreAITrainingType_NetMulti::PlayerState' has a wrong offset!");
static_assert(offsetof(GameStateTraining_StoreAITrainingType_NetMulti, Type) == 0x000008, "Member 'GameStateTraining_StoreAITrainingType_NetMulti::Type' has a wrong offset!");

// Function InGameModule.BgPostProcessVolume.OnBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct BgPostProcessVolume_OnBeginOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BgPostProcessVolume_OnBeginOverlap) == 0x000008, "Wrong alignment on BgPostProcessVolume_OnBeginOverlap");
static_assert(sizeof(BgPostProcessVolume_OnBeginOverlap) == 0x000010, "Wrong size on BgPostProcessVolume_OnBeginOverlap");
static_assert(offsetof(BgPostProcessVolume_OnBeginOverlap, OverlappedActor) == 0x000000, "Member 'BgPostProcessVolume_OnBeginOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(BgPostProcessVolume_OnBeginOverlap, OtherActor) == 0x000008, "Member 'BgPostProcessVolume_OnBeginOverlap::OtherActor' has a wrong offset!");

// Function InGameModule.BgProp.OnDependDestroyed
// 0x0008 (0x0008 - 0x0000)
struct BgProp_OnDependDestroyed final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BgProp_OnDependDestroyed) == 0x000008, "Wrong alignment on BgProp_OnDependDestroyed");
static_assert(sizeof(BgProp_OnDependDestroyed) == 0x000008, "Wrong size on BgProp_OnDependDestroyed");
static_assert(offsetof(BgProp_OnDependDestroyed, Actor) == 0x000000, "Member 'BgProp_OnDependDestroyed::Actor' has a wrong offset!");

// Function InGameModule.BgVfxComponent.ApplyEffects
// 0x0038 (0x0038 - 0x0000)
struct BgVfxComponent_ApplyEffects final
{
public:
	struct FPropDamageParam                       DamageParamProp;                                   // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BgVfxComponent_ApplyEffects) == 0x000008, "Wrong alignment on BgVfxComponent_ApplyEffects");
static_assert(sizeof(BgVfxComponent_ApplyEffects) == 0x000038, "Wrong size on BgVfxComponent_ApplyEffects");
static_assert(offsetof(BgVfxComponent_ApplyEffects, DamageParamProp) == 0x000000, "Member 'BgVfxComponent_ApplyEffects::DamageParamProp' has a wrong offset!");

// DelegateFunction InGameModule.BgVfxComponent.BgVfxEventOneParam__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct BgVfxComponent_BgVfxEventOneParam__DelegateSignature final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BgVfxComponent_BgVfxEventOneParam__DelegateSignature) == 0x000004, "Wrong alignment on BgVfxComponent_BgVfxEventOneParam__DelegateSignature");
static_assert(sizeof(BgVfxComponent_BgVfxEventOneParam__DelegateSignature) == 0x000004, "Wrong size on BgVfxComponent_BgVfxEventOneParam__DelegateSignature");
static_assert(offsetof(BgVfxComponent_BgVfxEventOneParam__DelegateSignature, Value) == 0x000000, "Member 'BgVfxComponent_BgVfxEventOneParam__DelegateSignature::Value' has a wrong offset!");

// Function InGameModule.BgVfxComponent.DEBUG_SetVFXStateBoolTrue_OnServer
// 0x0001 (0x0001 - 0x0000)
struct BgVfxComponent_DEBUG_SetVFXStateBoolTrue_OnServer final
{
public:
	EDamageAttribute                              Element;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BgVfxComponent_DEBUG_SetVFXStateBoolTrue_OnServer) == 0x000001, "Wrong alignment on BgVfxComponent_DEBUG_SetVFXStateBoolTrue_OnServer");
static_assert(sizeof(BgVfxComponent_DEBUG_SetVFXStateBoolTrue_OnServer) == 0x000001, "Wrong size on BgVfxComponent_DEBUG_SetVFXStateBoolTrue_OnServer");
static_assert(offsetof(BgVfxComponent_DEBUG_SetVFXStateBoolTrue_OnServer, Element) == 0x000000, "Member 'BgVfxComponent_DEBUG_SetVFXStateBoolTrue_OnServer::Element' has a wrong offset!");

// Function InGameModule.BgVfxComponent.FireTimelineFloatReturn
// 0x0004 (0x0004 - 0x0000)
struct BgVfxComponent_FireTimelineFloatReturn final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BgVfxComponent_FireTimelineFloatReturn) == 0x000004, "Wrong alignment on BgVfxComponent_FireTimelineFloatReturn");
static_assert(sizeof(BgVfxComponent_FireTimelineFloatReturn) == 0x000004, "Wrong size on BgVfxComponent_FireTimelineFloatReturn");
static_assert(offsetof(BgVfxComponent_FireTimelineFloatReturn, Value) == 0x000000, "Member 'BgVfxComponent_FireTimelineFloatReturn::Value' has a wrong offset!");

// Function InGameModule.BgVfxComponent.FreezeTimelineFloatReturn
// 0x0004 (0x0004 - 0x0000)
struct BgVfxComponent_FreezeTimelineFloatReturn final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BgVfxComponent_FreezeTimelineFloatReturn) == 0x000004, "Wrong alignment on BgVfxComponent_FreezeTimelineFloatReturn");
static_assert(sizeof(BgVfxComponent_FreezeTimelineFloatReturn) == 0x000004, "Wrong size on BgVfxComponent_FreezeTimelineFloatReturn");
static_assert(offsetof(BgVfxComponent_FreezeTimelineFloatReturn, Value) == 0x000000, "Member 'BgVfxComponent_FreezeTimelineFloatReturn::Value' has a wrong offset!");

// Function InGameModule.BgWater.OnBeginUnderwaterEvent
// 0x00A8 (0x00A8 - 0x0000)
struct BgWater_OnBeginUnderwaterEvent final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BgWater_OnBeginUnderwaterEvent) == 0x000008, "Wrong alignment on BgWater_OnBeginUnderwaterEvent");
static_assert(sizeof(BgWater_OnBeginUnderwaterEvent) == 0x0000A8, "Wrong size on BgWater_OnBeginUnderwaterEvent");
static_assert(offsetof(BgWater_OnBeginUnderwaterEvent, OverlappedComponent) == 0x000000, "Member 'BgWater_OnBeginUnderwaterEvent::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BgWater_OnBeginUnderwaterEvent, OtherActor) == 0x000008, "Member 'BgWater_OnBeginUnderwaterEvent::OtherActor' has a wrong offset!");
static_assert(offsetof(BgWater_OnBeginUnderwaterEvent, OtherComp) == 0x000010, "Member 'BgWater_OnBeginUnderwaterEvent::OtherComp' has a wrong offset!");
static_assert(offsetof(BgWater_OnBeginUnderwaterEvent, OtherBodyIndex) == 0x000018, "Member 'BgWater_OnBeginUnderwaterEvent::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BgWater_OnBeginUnderwaterEvent, bFromSweep) == 0x00001C, "Member 'BgWater_OnBeginUnderwaterEvent::bFromSweep' has a wrong offset!");
static_assert(offsetof(BgWater_OnBeginUnderwaterEvent, SweepResult) == 0x000020, "Member 'BgWater_OnBeginUnderwaterEvent::SweepResult' has a wrong offset!");

// Function InGameModule.BgWater.OnEndUnderwaterEvent
// 0x0020 (0x0020 - 0x0000)
struct BgWater_OnEndUnderwaterEvent final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BgWater_OnEndUnderwaterEvent) == 0x000008, "Wrong alignment on BgWater_OnEndUnderwaterEvent");
static_assert(sizeof(BgWater_OnEndUnderwaterEvent) == 0x000020, "Wrong size on BgWater_OnEndUnderwaterEvent");
static_assert(offsetof(BgWater_OnEndUnderwaterEvent, OverlappedComponent) == 0x000000, "Member 'BgWater_OnEndUnderwaterEvent::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BgWater_OnEndUnderwaterEvent, OtherActor) == 0x000008, "Member 'BgWater_OnEndUnderwaterEvent::OtherActor' has a wrong offset!");
static_assert(offsetof(BgWater_OnEndUnderwaterEvent, OtherComp) == 0x000010, "Member 'BgWater_OnEndUnderwaterEvent::OtherComp' has a wrong offset!");
static_assert(offsetof(BgWater_OnEndUnderwaterEvent, OtherBodyIndex) == 0x000018, "Member 'BgWater_OnEndUnderwaterEvent::OtherBodyIndex' has a wrong offset!");

// Function InGameModule.Ch017Unique1.OnFinishExplosionEvent
// 0x0008 (0x0008 - 0x0000)
struct Ch017Unique1_OnFinishExplosionEvent final
{
public:
	class UParticleSystemComponent*               Particle;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch017Unique1_OnFinishExplosionEvent) == 0x000008, "Wrong alignment on Ch017Unique1_OnFinishExplosionEvent");
static_assert(sizeof(Ch017Unique1_OnFinishExplosionEvent) == 0x000008, "Wrong size on Ch017Unique1_OnFinishExplosionEvent");
static_assert(offsetof(Ch017Unique1_OnFinishExplosionEvent, Particle) == 0x000000, "Member 'Ch017Unique1_OnFinishExplosionEvent::Particle' has a wrong offset!");

// Function InGameModule.BgWaterVolume.OnBeginUnderwaterEvent
// 0x00A8 (0x00A8 - 0x0000)
struct BgWaterVolume_OnBeginUnderwaterEvent final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BgWaterVolume_OnBeginUnderwaterEvent) == 0x000008, "Wrong alignment on BgWaterVolume_OnBeginUnderwaterEvent");
static_assert(sizeof(BgWaterVolume_OnBeginUnderwaterEvent) == 0x0000A8, "Wrong size on BgWaterVolume_OnBeginUnderwaterEvent");
static_assert(offsetof(BgWaterVolume_OnBeginUnderwaterEvent, OverlappedComponent) == 0x000000, "Member 'BgWaterVolume_OnBeginUnderwaterEvent::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BgWaterVolume_OnBeginUnderwaterEvent, OtherActor) == 0x000008, "Member 'BgWaterVolume_OnBeginUnderwaterEvent::OtherActor' has a wrong offset!");
static_assert(offsetof(BgWaterVolume_OnBeginUnderwaterEvent, OtherComp) == 0x000010, "Member 'BgWaterVolume_OnBeginUnderwaterEvent::OtherComp' has a wrong offset!");
static_assert(offsetof(BgWaterVolume_OnBeginUnderwaterEvent, OtherBodyIndex) == 0x000018, "Member 'BgWaterVolume_OnBeginUnderwaterEvent::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BgWaterVolume_OnBeginUnderwaterEvent, bFromSweep) == 0x00001C, "Member 'BgWaterVolume_OnBeginUnderwaterEvent::bFromSweep' has a wrong offset!");
static_assert(offsetof(BgWaterVolume_OnBeginUnderwaterEvent, SweepResult) == 0x000020, "Member 'BgWaterVolume_OnBeginUnderwaterEvent::SweepResult' has a wrong offset!");

// Function InGameModule.BgWaterVolume.OnEndUnderwaterEvent
// 0x0020 (0x0020 - 0x0000)
struct BgWaterVolume_OnEndUnderwaterEvent final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BgWaterVolume_OnEndUnderwaterEvent) == 0x000008, "Wrong alignment on BgWaterVolume_OnEndUnderwaterEvent");
static_assert(sizeof(BgWaterVolume_OnEndUnderwaterEvent) == 0x000020, "Wrong size on BgWaterVolume_OnEndUnderwaterEvent");
static_assert(offsetof(BgWaterVolume_OnEndUnderwaterEvent, OverlappedComponent) == 0x000000, "Member 'BgWaterVolume_OnEndUnderwaterEvent::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BgWaterVolume_OnEndUnderwaterEvent, OtherActor) == 0x000008, "Member 'BgWaterVolume_OnEndUnderwaterEvent::OtherActor' has a wrong offset!");
static_assert(offsetof(BgWaterVolume_OnEndUnderwaterEvent, OtherComp) == 0x000010, "Member 'BgWaterVolume_OnEndUnderwaterEvent::OtherComp' has a wrong offset!");
static_assert(offsetof(BgWaterVolume_OnEndUnderwaterEvent, OtherBodyIndex) == 0x000018, "Member 'BgWaterVolume_OnEndUnderwaterEvent::OtherBodyIndex' has a wrong offset!");

// Function InGameModule.Ch025Unique3Gen.SpawnBullet_RPC
// 0x0004 (0x0004 - 0x0000)
struct Ch025Unique3Gen_SpawnBullet_RPC final
{
public:
	float                                         SpawnScale;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch025Unique3Gen_SpawnBullet_RPC) == 0x000004, "Wrong alignment on Ch025Unique3Gen_SpawnBullet_RPC");
static_assert(sizeof(Ch025Unique3Gen_SpawnBullet_RPC) == 0x000004, "Wrong size on Ch025Unique3Gen_SpawnBullet_RPC");
static_assert(offsetof(Ch025Unique3Gen_SpawnBullet_RPC, SpawnScale) == 0x000000, "Member 'Ch025Unique3Gen_SpawnBullet_RPC::SpawnScale' has a wrong offset!");

// Function InGameModule.BPInGameActorUtilityComponent.BP_SpawnBeamEmitterAttached
// 0x0040 (0x0040 - 0x0000)
struct BPInGameActorUtilityComponent_BP_SpawnBeamEmitterAttached final
{
public:
	class UParticleSystem*                        EmitterTemplate;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBeamParticleSystemComponent*           ReturnValue;                                       // 0x0038(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPInGameActorUtilityComponent_BP_SpawnBeamEmitterAttached) == 0x000008, "Wrong alignment on BPInGameActorUtilityComponent_BP_SpawnBeamEmitterAttached");
static_assert(sizeof(BPInGameActorUtilityComponent_BP_SpawnBeamEmitterAttached) == 0x000040, "Wrong size on BPInGameActorUtilityComponent_BP_SpawnBeamEmitterAttached");
static_assert(offsetof(BPInGameActorUtilityComponent_BP_SpawnBeamEmitterAttached, EmitterTemplate) == 0x000000, "Member 'BPInGameActorUtilityComponent_BP_SpawnBeamEmitterAttached::EmitterTemplate' has a wrong offset!");
static_assert(offsetof(BPInGameActorUtilityComponent_BP_SpawnBeamEmitterAttached, AttachToComponent) == 0x000008, "Member 'BPInGameActorUtilityComponent_BP_SpawnBeamEmitterAttached::AttachToComponent' has a wrong offset!");
static_assert(offsetof(BPInGameActorUtilityComponent_BP_SpawnBeamEmitterAttached, AttachPointName) == 0x000010, "Member 'BPInGameActorUtilityComponent_BP_SpawnBeamEmitterAttached::AttachPointName' has a wrong offset!");
static_assert(offsetof(BPInGameActorUtilityComponent_BP_SpawnBeamEmitterAttached, Location) == 0x000018, "Member 'BPInGameActorUtilityComponent_BP_SpawnBeamEmitterAttached::Location' has a wrong offset!");
static_assert(offsetof(BPInGameActorUtilityComponent_BP_SpawnBeamEmitterAttached, Rotation) == 0x000024, "Member 'BPInGameActorUtilityComponent_BP_SpawnBeamEmitterAttached::Rotation' has a wrong offset!");
static_assert(offsetof(BPInGameActorUtilityComponent_BP_SpawnBeamEmitterAttached, LocationType) == 0x000030, "Member 'BPInGameActorUtilityComponent_BP_SpawnBeamEmitterAttached::LocationType' has a wrong offset!");
static_assert(offsetof(BPInGameActorUtilityComponent_BP_SpawnBeamEmitterAttached, bAutoDestroy) == 0x000031, "Member 'BPInGameActorUtilityComponent_BP_SpawnBeamEmitterAttached::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(BPInGameActorUtilityComponent_BP_SpawnBeamEmitterAttached, ReturnValue) == 0x000038, "Member 'BPInGameActorUtilityComponent_BP_SpawnBeamEmitterAttached::ReturnValue' has a wrong offset!");

// Function InGameModule.BPInGameActorUtilityComponent.BP_ConverAttackIdToChargeCommand
// 0x0002 (0x0002 - 0x0000)
struct BPInGameActorUtilityComponent_BP_ConverAttackIdToChargeCommand final
{
public:
	EAttackId                                     AttackId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommandId                                    ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPInGameActorUtilityComponent_BP_ConverAttackIdToChargeCommand) == 0x000001, "Wrong alignment on BPInGameActorUtilityComponent_BP_ConverAttackIdToChargeCommand");
static_assert(sizeof(BPInGameActorUtilityComponent_BP_ConverAttackIdToChargeCommand) == 0x000002, "Wrong size on BPInGameActorUtilityComponent_BP_ConverAttackIdToChargeCommand");
static_assert(offsetof(BPInGameActorUtilityComponent_BP_ConverAttackIdToChargeCommand, AttackId) == 0x000000, "Member 'BPInGameActorUtilityComponent_BP_ConverAttackIdToChargeCommand::AttackId' has a wrong offset!");
static_assert(offsetof(BPInGameActorUtilityComponent_BP_ConverAttackIdToChargeCommand, ReturnValue) == 0x000001, "Member 'BPInGameActorUtilityComponent_BP_ConverAttackIdToChargeCommand::ReturnValue' has a wrong offset!");

// Function InGameModule.BriefingComponent.SendDecision_NetMulticast
// 0x000C (0x000C - 0x0000)
struct BriefingComponent_SendDecision_NetMulticast final
{
public:
	bool                                          bDecision;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Location;                                          // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BriefingComponent_SendDecision_NetMulticast) == 0x000004, "Wrong alignment on BriefingComponent_SendDecision_NetMulticast");
static_assert(sizeof(BriefingComponent_SendDecision_NetMulticast) == 0x00000C, "Wrong size on BriefingComponent_SendDecision_NetMulticast");
static_assert(offsetof(BriefingComponent_SendDecision_NetMulticast, bDecision) == 0x000000, "Member 'BriefingComponent_SendDecision_NetMulticast::bDecision' has a wrong offset!");
static_assert(offsetof(BriefingComponent_SendDecision_NetMulticast, Location) == 0x000004, "Member 'BriefingComponent_SendDecision_NetMulticast::Location' has a wrong offset!");

// Function InGameModule.BriefingComponent.SendDecisionLocation_Server
// 0x000C (0x000C - 0x0000)
struct BriefingComponent_SendDecisionLocation_Server final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BriefingComponent_SendDecisionLocation_Server) == 0x000004, "Wrong alignment on BriefingComponent_SendDecisionLocation_Server");
static_assert(sizeof(BriefingComponent_SendDecisionLocation_Server) == 0x00000C, "Wrong size on BriefingComponent_SendDecisionLocation_Server");
static_assert(offsetof(BriefingComponent_SendDecisionLocation_Server, Location) == 0x000000, "Member 'BriefingComponent_SendDecisionLocation_Server::Location' has a wrong offset!");

// Function InGameModule.BriefingComponent.SendInitEnd_Server
// 0x000C (0x000C - 0x0000)
struct BriefingComponent_SendInitEnd_Server final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BriefingComponent_SendInitEnd_Server) == 0x000004, "Wrong alignment on BriefingComponent_SendInitEnd_Server");
static_assert(sizeof(BriefingComponent_SendInitEnd_Server) == 0x00000C, "Wrong size on BriefingComponent_SendInitEnd_Server");
static_assert(offsetof(BriefingComponent_SendInitEnd_Server, Location) == 0x000000, "Member 'BriefingComponent_SendInitEnd_Server::Location' has a wrong offset!");

// Function InGameModule.BriefingComponent.SendSpawnLocation_Server
// 0x000C (0x000C - 0x0000)
struct BriefingComponent_SendSpawnLocation_Server final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BriefingComponent_SendSpawnLocation_Server) == 0x000004, "Wrong alignment on BriefingComponent_SendSpawnLocation_Server");
static_assert(sizeof(BriefingComponent_SendSpawnLocation_Server) == 0x00000C, "Wrong size on BriefingComponent_SendSpawnLocation_Server");
static_assert(offsetof(BriefingComponent_SendSpawnLocation_Server, Location) == 0x000000, "Member 'BriefingComponent_SendSpawnLocation_Server::Location' has a wrong offset!");

// Function InGameModule.BriefingComponentLeadersBattle.SendChangeLeaderOrder_NetMulticast
// 0x0001 (0x0001 - 0x0000)
struct BriefingComponentLeadersBattle_SendChangeLeaderOrder_NetMulticast final
{
public:
	int8                                          Order;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BriefingComponentLeadersBattle_SendChangeLeaderOrder_NetMulticast) == 0x000001, "Wrong alignment on BriefingComponentLeadersBattle_SendChangeLeaderOrder_NetMulticast");
static_assert(sizeof(BriefingComponentLeadersBattle_SendChangeLeaderOrder_NetMulticast) == 0x000001, "Wrong size on BriefingComponentLeadersBattle_SendChangeLeaderOrder_NetMulticast");
static_assert(offsetof(BriefingComponentLeadersBattle_SendChangeLeaderOrder_NetMulticast, Order) == 0x000000, "Member 'BriefingComponentLeadersBattle_SendChangeLeaderOrder_NetMulticast::Order' has a wrong offset!");

// Function InGameModule.BuffParam.BP_SetAttackAdjustRate
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_SetAttackAdjustRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_SetAttackAdjustRate) == 0x000004, "Wrong alignment on BuffParam_BP_SetAttackAdjustRate");
static_assert(sizeof(BuffParam_BP_SetAttackAdjustRate) == 0x000004, "Wrong size on BuffParam_BP_SetAttackAdjustRate");
static_assert(offsetof(BuffParam_BP_SetAttackAdjustRate, Rate) == 0x000000, "Member 'BuffParam_BP_SetAttackAdjustRate::Rate' has a wrong offset!");

// Function InGameModule.BuffParam.BP_SetAttackAdjustRate_PlusUltra
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_SetAttackAdjustRate_PlusUltra final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_SetAttackAdjustRate_PlusUltra) == 0x000004, "Wrong alignment on BuffParam_BP_SetAttackAdjustRate_PlusUltra");
static_assert(sizeof(BuffParam_BP_SetAttackAdjustRate_PlusUltra) == 0x000004, "Wrong size on BuffParam_BP_SetAttackAdjustRate_PlusUltra");
static_assert(offsetof(BuffParam_BP_SetAttackAdjustRate_PlusUltra, Rate) == 0x000000, "Member 'BuffParam_BP_SetAttackAdjustRate_PlusUltra::Rate' has a wrong offset!");

// Function InGameModule.BuffParam.BP_SetAttackAdjustRate_SpecialRule
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_SetAttackAdjustRate_SpecialRule final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_SetAttackAdjustRate_SpecialRule) == 0x000004, "Wrong alignment on BuffParam_BP_SetAttackAdjustRate_SpecialRule");
static_assert(sizeof(BuffParam_BP_SetAttackAdjustRate_SpecialRule) == 0x000004, "Wrong size on BuffParam_BP_SetAttackAdjustRate_SpecialRule");
static_assert(offsetof(BuffParam_BP_SetAttackAdjustRate_SpecialRule, Rate) == 0x000000, "Member 'BuffParam_BP_SetAttackAdjustRate_SpecialRule::Rate' has a wrong offset!");

// Function InGameModule.BuffParam.BP_SetAttackAdjustRate_WearBlueFlame
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_SetAttackAdjustRate_WearBlueFlame final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_SetAttackAdjustRate_WearBlueFlame) == 0x000004, "Wrong alignment on BuffParam_BP_SetAttackAdjustRate_WearBlueFlame");
static_assert(sizeof(BuffParam_BP_SetAttackAdjustRate_WearBlueFlame) == 0x000004, "Wrong size on BuffParam_BP_SetAttackAdjustRate_WearBlueFlame");
static_assert(offsetof(BuffParam_BP_SetAttackAdjustRate_WearBlueFlame, Rate) == 0x000000, "Member 'BuffParam_BP_SetAttackAdjustRate_WearBlueFlame::Rate' has a wrong offset!");

// Function InGameModule.BuffParam.BP_SetDurableAdjustRate
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_SetDurableAdjustRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_SetDurableAdjustRate) == 0x000004, "Wrong alignment on BuffParam_BP_SetDurableAdjustRate");
static_assert(sizeof(BuffParam_BP_SetDurableAdjustRate) == 0x000004, "Wrong size on BuffParam_BP_SetDurableAdjustRate");
static_assert(offsetof(BuffParam_BP_SetDurableAdjustRate, Rate) == 0x000000, "Member 'BuffParam_BP_SetDurableAdjustRate::Rate' has a wrong offset!");

// Function InGameModule.BuffParam.BP_SetDurableAdjustRate_CharacterProperty
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_SetDurableAdjustRate_CharacterProperty final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_SetDurableAdjustRate_CharacterProperty) == 0x000004, "Wrong alignment on BuffParam_BP_SetDurableAdjustRate_CharacterProperty");
static_assert(sizeof(BuffParam_BP_SetDurableAdjustRate_CharacterProperty) == 0x000004, "Wrong size on BuffParam_BP_SetDurableAdjustRate_CharacterProperty");
static_assert(offsetof(BuffParam_BP_SetDurableAdjustRate_CharacterProperty, Rate) == 0x000000, "Member 'BuffParam_BP_SetDurableAdjustRate_CharacterProperty::Rate' has a wrong offset!");

// Function InGameModule.BuffParam.BP_SetDurableAdjustRate_Poisonmist
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_SetDurableAdjustRate_Poisonmist final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_SetDurableAdjustRate_Poisonmist) == 0x000004, "Wrong alignment on BuffParam_BP_SetDurableAdjustRate_Poisonmist");
static_assert(sizeof(BuffParam_BP_SetDurableAdjustRate_Poisonmist) == 0x000004, "Wrong size on BuffParam_BP_SetDurableAdjustRate_Poisonmist");
static_assert(offsetof(BuffParam_BP_SetDurableAdjustRate_Poisonmist, Rate) == 0x000000, "Member 'BuffParam_BP_SetDurableAdjustRate_Poisonmist::Rate' has a wrong offset!");

// Function InGameModule.BuffParam.BP_SetDurableAdjustRate_Unbreakable
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_SetDurableAdjustRate_Unbreakable final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_SetDurableAdjustRate_Unbreakable) == 0x000004, "Wrong alignment on BuffParam_BP_SetDurableAdjustRate_Unbreakable");
static_assert(sizeof(BuffParam_BP_SetDurableAdjustRate_Unbreakable) == 0x000004, "Wrong size on BuffParam_BP_SetDurableAdjustRate_Unbreakable");
static_assert(offsetof(BuffParam_BP_SetDurableAdjustRate_Unbreakable, Rate) == 0x000000, "Member 'BuffParam_BP_SetDurableAdjustRate_Unbreakable::Rate' has a wrong offset!");

// Function InGameModule.BuffParam.BP_SetGravityAdjustRate
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_SetGravityAdjustRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_SetGravityAdjustRate) == 0x000004, "Wrong alignment on BuffParam_BP_SetGravityAdjustRate");
static_assert(sizeof(BuffParam_BP_SetGravityAdjustRate) == 0x000004, "Wrong size on BuffParam_BP_SetGravityAdjustRate");
static_assert(offsetof(BuffParam_BP_SetGravityAdjustRate, Rate) == 0x000000, "Member 'BuffParam_BP_SetGravityAdjustRate::Rate' has a wrong offset!");

// Function InGameModule.BuffParam.BP_SetJumpAdjustRate
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_SetJumpAdjustRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_SetJumpAdjustRate) == 0x000004, "Wrong alignment on BuffParam_BP_SetJumpAdjustRate");
static_assert(sizeof(BuffParam_BP_SetJumpAdjustRate) == 0x000004, "Wrong size on BuffParam_BP_SetJumpAdjustRate");
static_assert(offsetof(BuffParam_BP_SetJumpAdjustRate, Rate) == 0x000000, "Member 'BuffParam_BP_SetJumpAdjustRate::Rate' has a wrong offset!");

// Function InGameModule.BuffParam.BP_SetJumpAdjustRateDivision
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_SetJumpAdjustRateDivision final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_SetJumpAdjustRateDivision) == 0x000004, "Wrong alignment on BuffParam_BP_SetJumpAdjustRateDivision");
static_assert(sizeof(BuffParam_BP_SetJumpAdjustRateDivision) == 0x000004, "Wrong size on BuffParam_BP_SetJumpAdjustRateDivision");
static_assert(offsetof(BuffParam_BP_SetJumpAdjustRateDivision, Rate) == 0x000000, "Member 'BuffParam_BP_SetJumpAdjustRateDivision::Rate' has a wrong offset!");

// Function InGameModule.BuffParam.BP_SetJumpAdjustRateMultiply
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_SetJumpAdjustRateMultiply final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_SetJumpAdjustRateMultiply) == 0x000004, "Wrong alignment on BuffParam_BP_SetJumpAdjustRateMultiply");
static_assert(sizeof(BuffParam_BP_SetJumpAdjustRateMultiply) == 0x000004, "Wrong size on BuffParam_BP_SetJumpAdjustRateMultiply");
static_assert(offsetof(BuffParam_BP_SetJumpAdjustRateMultiply, Rate) == 0x000000, "Member 'BuffParam_BP_SetJumpAdjustRateMultiply::Rate' has a wrong offset!");

// Function InGameModule.BuffParam.BP_SetMoveSpeedAdjustRate_TeamRole
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_SetMoveSpeedAdjustRate_TeamRole final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_SetMoveSpeedAdjustRate_TeamRole) == 0x000004, "Wrong alignment on BuffParam_BP_SetMoveSpeedAdjustRate_TeamRole");
static_assert(sizeof(BuffParam_BP_SetMoveSpeedAdjustRate_TeamRole) == 0x000004, "Wrong size on BuffParam_BP_SetMoveSpeedAdjustRate_TeamRole");
static_assert(offsetof(BuffParam_BP_SetMoveSpeedAdjustRate_TeamRole, Rate) == 0x000000, "Member 'BuffParam_BP_SetMoveSpeedAdjustRate_TeamRole::Rate' has a wrong offset!");

// Function InGameModule.BuffParam.BP_SetReloadAdjustRate
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_SetReloadAdjustRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_SetReloadAdjustRate) == 0x000004, "Wrong alignment on BuffParam_BP_SetReloadAdjustRate");
static_assert(sizeof(BuffParam_BP_SetReloadAdjustRate) == 0x000004, "Wrong size on BuffParam_BP_SetReloadAdjustRate");
static_assert(offsetof(BuffParam_BP_SetReloadAdjustRate, Rate) == 0x000000, "Member 'BuffParam_BP_SetReloadAdjustRate::Rate' has a wrong offset!");

// Function InGameModule.BuffParam.BP_SetReloadAdjustRate_PlusUltra
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_SetReloadAdjustRate_PlusUltra final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_SetReloadAdjustRate_PlusUltra) == 0x000004, "Wrong alignment on BuffParam_BP_SetReloadAdjustRate_PlusUltra");
static_assert(sizeof(BuffParam_BP_SetReloadAdjustRate_PlusUltra) == 0x000004, "Wrong size on BuffParam_BP_SetReloadAdjustRate_PlusUltra");
static_assert(offsetof(BuffParam_BP_SetReloadAdjustRate_PlusUltra, Rate) == 0x000000, "Member 'BuffParam_BP_SetReloadAdjustRate_PlusUltra::Rate' has a wrong offset!");

// Function InGameModule.BuffParam.BP_SetReloadAdjustRate_SpecialRule
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_SetReloadAdjustRate_SpecialRule final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_SetReloadAdjustRate_SpecialRule) == 0x000004, "Wrong alignment on BuffParam_BP_SetReloadAdjustRate_SpecialRule");
static_assert(sizeof(BuffParam_BP_SetReloadAdjustRate_SpecialRule) == 0x000004, "Wrong size on BuffParam_BP_SetReloadAdjustRate_SpecialRule");
static_assert(offsetof(BuffParam_BP_SetReloadAdjustRate_SpecialRule, Rate) == 0x000000, "Member 'BuffParam_BP_SetReloadAdjustRate_SpecialRule::Rate' has a wrong offset!");

// Function InGameModule.BuffParam.BP_SetReloadAdjustRate_TeamRole
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_SetReloadAdjustRate_TeamRole final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_SetReloadAdjustRate_TeamRole) == 0x000004, "Wrong alignment on BuffParam_BP_SetReloadAdjustRate_TeamRole");
static_assert(sizeof(BuffParam_BP_SetReloadAdjustRate_TeamRole) == 0x000004, "Wrong size on BuffParam_BP_SetReloadAdjustRate_TeamRole");
static_assert(offsetof(BuffParam_BP_SetReloadAdjustRate_TeamRole, Rate) == 0x000000, "Member 'BuffParam_BP_SetReloadAdjustRate_TeamRole::Rate' has a wrong offset!");

// Function InGameModule.BuffParam.BP_SetReloadAdjustRate_WearBlueFlame
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_SetReloadAdjustRate_WearBlueFlame final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_SetReloadAdjustRate_WearBlueFlame) == 0x000004, "Wrong alignment on BuffParam_BP_SetReloadAdjustRate_WearBlueFlame");
static_assert(sizeof(BuffParam_BP_SetReloadAdjustRate_WearBlueFlame) == 0x000004, "Wrong size on BuffParam_BP_SetReloadAdjustRate_WearBlueFlame");
static_assert(offsetof(BuffParam_BP_SetReloadAdjustRate_WearBlueFlame, Rate) == 0x000000, "Member 'BuffParam_BP_SetReloadAdjustRate_WearBlueFlame::Rate' has a wrong offset!");

// Function InGameModule.BuffParam.BP_GetAttackAdjustRate
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_GetAttackAdjustRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_GetAttackAdjustRate) == 0x000004, "Wrong alignment on BuffParam_BP_GetAttackAdjustRate");
static_assert(sizeof(BuffParam_BP_GetAttackAdjustRate) == 0x000004, "Wrong size on BuffParam_BP_GetAttackAdjustRate");
static_assert(offsetof(BuffParam_BP_GetAttackAdjustRate, ReturnValue) == 0x000000, "Member 'BuffParam_BP_GetAttackAdjustRate::ReturnValue' has a wrong offset!");

// Function InGameModule.BuffParam.BP_GetAttackAdjustRate_GuardPoint
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_GetAttackAdjustRate_GuardPoint final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_GetAttackAdjustRate_GuardPoint) == 0x000004, "Wrong alignment on BuffParam_BP_GetAttackAdjustRate_GuardPoint");
static_assert(sizeof(BuffParam_BP_GetAttackAdjustRate_GuardPoint) == 0x000004, "Wrong size on BuffParam_BP_GetAttackAdjustRate_GuardPoint");
static_assert(offsetof(BuffParam_BP_GetAttackAdjustRate_GuardPoint, ReturnValue) == 0x000000, "Member 'BuffParam_BP_GetAttackAdjustRate_GuardPoint::ReturnValue' has a wrong offset!");

// Function InGameModule.BuffParam.BP_GetAttackAdjustRate_PlusUltra
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_GetAttackAdjustRate_PlusUltra final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_GetAttackAdjustRate_PlusUltra) == 0x000004, "Wrong alignment on BuffParam_BP_GetAttackAdjustRate_PlusUltra");
static_assert(sizeof(BuffParam_BP_GetAttackAdjustRate_PlusUltra) == 0x000004, "Wrong size on BuffParam_BP_GetAttackAdjustRate_PlusUltra");
static_assert(offsetof(BuffParam_BP_GetAttackAdjustRate_PlusUltra, ReturnValue) == 0x000000, "Member 'BuffParam_BP_GetAttackAdjustRate_PlusUltra::ReturnValue' has a wrong offset!");

// Function InGameModule.BuffParam.BP_GetAttackAdjustRate_SpecialRule
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_GetAttackAdjustRate_SpecialRule final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_GetAttackAdjustRate_SpecialRule) == 0x000004, "Wrong alignment on BuffParam_BP_GetAttackAdjustRate_SpecialRule");
static_assert(sizeof(BuffParam_BP_GetAttackAdjustRate_SpecialRule) == 0x000004, "Wrong size on BuffParam_BP_GetAttackAdjustRate_SpecialRule");
static_assert(offsetof(BuffParam_BP_GetAttackAdjustRate_SpecialRule, ReturnValue) == 0x000000, "Member 'BuffParam_BP_GetAttackAdjustRate_SpecialRule::ReturnValue' has a wrong offset!");

// Function InGameModule.BuffParam.BP_GetAttackAdjustRate_TeamRole
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_GetAttackAdjustRate_TeamRole final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_GetAttackAdjustRate_TeamRole) == 0x000004, "Wrong alignment on BuffParam_BP_GetAttackAdjustRate_TeamRole");
static_assert(sizeof(BuffParam_BP_GetAttackAdjustRate_TeamRole) == 0x000004, "Wrong size on BuffParam_BP_GetAttackAdjustRate_TeamRole");
static_assert(offsetof(BuffParam_BP_GetAttackAdjustRate_TeamRole, ReturnValue) == 0x000000, "Member 'BuffParam_BP_GetAttackAdjustRate_TeamRole::ReturnValue' has a wrong offset!");

// Function InGameModule.BuffParam.BP_GetAttackAdjustRate_WearBlueFlame
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_GetAttackAdjustRate_WearBlueFlame final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_GetAttackAdjustRate_WearBlueFlame) == 0x000004, "Wrong alignment on BuffParam_BP_GetAttackAdjustRate_WearBlueFlame");
static_assert(sizeof(BuffParam_BP_GetAttackAdjustRate_WearBlueFlame) == 0x000004, "Wrong size on BuffParam_BP_GetAttackAdjustRate_WearBlueFlame");
static_assert(offsetof(BuffParam_BP_GetAttackAdjustRate_WearBlueFlame, ReturnValue) == 0x000000, "Member 'BuffParam_BP_GetAttackAdjustRate_WearBlueFlame::ReturnValue' has a wrong offset!");

// Function InGameModule.BuffParam.BP_GetDurableAdjustRate
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_GetDurableAdjustRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_GetDurableAdjustRate) == 0x000004, "Wrong alignment on BuffParam_BP_GetDurableAdjustRate");
static_assert(sizeof(BuffParam_BP_GetDurableAdjustRate) == 0x000004, "Wrong size on BuffParam_BP_GetDurableAdjustRate");
static_assert(offsetof(BuffParam_BP_GetDurableAdjustRate, ReturnValue) == 0x000000, "Member 'BuffParam_BP_GetDurableAdjustRate::ReturnValue' has a wrong offset!");

// Function InGameModule.BuffParam.BP_GetDurableAdjustRate_CharacterProperty
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_GetDurableAdjustRate_CharacterProperty final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_GetDurableAdjustRate_CharacterProperty) == 0x000004, "Wrong alignment on BuffParam_BP_GetDurableAdjustRate_CharacterProperty");
static_assert(sizeof(BuffParam_BP_GetDurableAdjustRate_CharacterProperty) == 0x000004, "Wrong size on BuffParam_BP_GetDurableAdjustRate_CharacterProperty");
static_assert(offsetof(BuffParam_BP_GetDurableAdjustRate_CharacterProperty, ReturnValue) == 0x000000, "Member 'BuffParam_BP_GetDurableAdjustRate_CharacterProperty::ReturnValue' has a wrong offset!");

// Function InGameModule.BuffParam.BP_GetDurableAdjustRate_PoisonMist
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_GetDurableAdjustRate_PoisonMist final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_GetDurableAdjustRate_PoisonMist) == 0x000004, "Wrong alignment on BuffParam_BP_GetDurableAdjustRate_PoisonMist");
static_assert(sizeof(BuffParam_BP_GetDurableAdjustRate_PoisonMist) == 0x000004, "Wrong size on BuffParam_BP_GetDurableAdjustRate_PoisonMist");
static_assert(offsetof(BuffParam_BP_GetDurableAdjustRate_PoisonMist, ReturnValue) == 0x000000, "Member 'BuffParam_BP_GetDurableAdjustRate_PoisonMist::ReturnValue' has a wrong offset!");

// Function InGameModule.BuffParam.BP_GetDurableAdjustRate_TeamRole
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_GetDurableAdjustRate_TeamRole final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_GetDurableAdjustRate_TeamRole) == 0x000004, "Wrong alignment on BuffParam_BP_GetDurableAdjustRate_TeamRole");
static_assert(sizeof(BuffParam_BP_GetDurableAdjustRate_TeamRole) == 0x000004, "Wrong size on BuffParam_BP_GetDurableAdjustRate_TeamRole");
static_assert(offsetof(BuffParam_BP_GetDurableAdjustRate_TeamRole, ReturnValue) == 0x000000, "Member 'BuffParam_BP_GetDurableAdjustRate_TeamRole::ReturnValue' has a wrong offset!");

// Function InGameModule.BuffParam.BP_GetDurableAdjustRate_Unbreakable
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_GetDurableAdjustRate_Unbreakable final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_GetDurableAdjustRate_Unbreakable) == 0x000004, "Wrong alignment on BuffParam_BP_GetDurableAdjustRate_Unbreakable");
static_assert(sizeof(BuffParam_BP_GetDurableAdjustRate_Unbreakable) == 0x000004, "Wrong size on BuffParam_BP_GetDurableAdjustRate_Unbreakable");
static_assert(offsetof(BuffParam_BP_GetDurableAdjustRate_Unbreakable, ReturnValue) == 0x000000, "Member 'BuffParam_BP_GetDurableAdjustRate_Unbreakable::ReturnValue' has a wrong offset!");

// Function InGameModule.BuffParam.BP_GetGravityAdjustRate
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_GetGravityAdjustRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_GetGravityAdjustRate) == 0x000004, "Wrong alignment on BuffParam_BP_GetGravityAdjustRate");
static_assert(sizeof(BuffParam_BP_GetGravityAdjustRate) == 0x000004, "Wrong size on BuffParam_BP_GetGravityAdjustRate");
static_assert(offsetof(BuffParam_BP_GetGravityAdjustRate, ReturnValue) == 0x000000, "Member 'BuffParam_BP_GetGravityAdjustRate::ReturnValue' has a wrong offset!");

// Function InGameModule.BuffParam.BP_GetJumpAdjustRate
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_GetJumpAdjustRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_GetJumpAdjustRate) == 0x000004, "Wrong alignment on BuffParam_BP_GetJumpAdjustRate");
static_assert(sizeof(BuffParam_BP_GetJumpAdjustRate) == 0x000004, "Wrong size on BuffParam_BP_GetJumpAdjustRate");
static_assert(offsetof(BuffParam_BP_GetJumpAdjustRate, ReturnValue) == 0x000000, "Member 'BuffParam_BP_GetJumpAdjustRate::ReturnValue' has a wrong offset!");

// Function InGameModule.BuffParam.BP_GetMoveSpeedAdjustRate_TeamRole
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_GetMoveSpeedAdjustRate_TeamRole final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_GetMoveSpeedAdjustRate_TeamRole) == 0x000004, "Wrong alignment on BuffParam_BP_GetMoveSpeedAdjustRate_TeamRole");
static_assert(sizeof(BuffParam_BP_GetMoveSpeedAdjustRate_TeamRole) == 0x000004, "Wrong size on BuffParam_BP_GetMoveSpeedAdjustRate_TeamRole");
static_assert(offsetof(BuffParam_BP_GetMoveSpeedAdjustRate_TeamRole, ReturnValue) == 0x000000, "Member 'BuffParam_BP_GetMoveSpeedAdjustRate_TeamRole::ReturnValue' has a wrong offset!");

// Function InGameModule.BuffParam.BP_GetRegenerationAdjustRate_TeamRole
// 0x0004 (0x0004 - 0x0000)
struct BuffParam_BP_GetRegenerationAdjustRate_TeamRole final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuffParam_BP_GetRegenerationAdjustRate_TeamRole) == 0x000004, "Wrong alignment on BuffParam_BP_GetRegenerationAdjustRate_TeamRole");
static_assert(sizeof(BuffParam_BP_GetRegenerationAdjustRate_TeamRole) == 0x000004, "Wrong size on BuffParam_BP_GetRegenerationAdjustRate_TeamRole");
static_assert(offsetof(BuffParam_BP_GetRegenerationAdjustRate_TeamRole, ReturnValue) == 0x000000, "Member 'BuffParam_BP_GetRegenerationAdjustRate_TeamRole::ReturnValue' has a wrong offset!");

// Function InGameModule.BulletCameraShakeComponent.OnHitBackground
// 0x0088 (0x0088 - 0x0000)
struct BulletCameraShakeComponent_OnHitBackground final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BulletCameraShakeComponent_OnHitBackground) == 0x000004, "Wrong alignment on BulletCameraShakeComponent_OnHitBackground");
static_assert(sizeof(BulletCameraShakeComponent_OnHitBackground) == 0x000088, "Wrong size on BulletCameraShakeComponent_OnHitBackground");
static_assert(offsetof(BulletCameraShakeComponent_OnHitBackground, HitResult) == 0x000000, "Member 'BulletCameraShakeComponent_OnHitBackground::HitResult' has a wrong offset!");

// Function InGameModule.BulletCameraShakeComponent.OnHitCharacter
// 0x0088 (0x0088 - 0x0000)
struct BulletCameraShakeComponent_OnHitCharacter final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BulletCameraShakeComponent_OnHitCharacter) == 0x000004, "Wrong alignment on BulletCameraShakeComponent_OnHitCharacter");
static_assert(sizeof(BulletCameraShakeComponent_OnHitCharacter) == 0x000088, "Wrong size on BulletCameraShakeComponent_OnHitCharacter");
static_assert(offsetof(BulletCameraShakeComponent_OnHitCharacter, HitResult) == 0x000000, "Member 'BulletCameraShakeComponent_OnHitCharacter::HitResult' has a wrong offset!");

// Function InGameModule.Ch017Unique1ChargeChild.OnFinishExplosionEffectEvent
// 0x0008 (0x0008 - 0x0000)
struct Ch017Unique1ChargeChild_OnFinishExplosionEffectEvent final
{
public:
	class UParticleSystemComponent*               Particle;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch017Unique1ChargeChild_OnFinishExplosionEffectEvent) == 0x000008, "Wrong alignment on Ch017Unique1ChargeChild_OnFinishExplosionEffectEvent");
static_assert(sizeof(Ch017Unique1ChargeChild_OnFinishExplosionEffectEvent) == 0x000008, "Wrong size on Ch017Unique1ChargeChild_OnFinishExplosionEffectEvent");
static_assert(offsetof(Ch017Unique1ChargeChild_OnFinishExplosionEffectEvent, Particle) == 0x000000, "Member 'Ch017Unique1ChargeChild_OnFinishExplosionEffectEvent::Particle' has a wrong offset!");

// Function InGameModule.BulletHoming.BP_GetOwnerBtl
// 0x0008 (0x0008 - 0x0000)
struct BulletHoming_BP_GetOwnerBtl final
{
public:
	class ACharacterBattle*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BulletHoming_BP_GetOwnerBtl) == 0x000008, "Wrong alignment on BulletHoming_BP_GetOwnerBtl");
static_assert(sizeof(BulletHoming_BP_GetOwnerBtl) == 0x000008, "Wrong size on BulletHoming_BP_GetOwnerBtl");
static_assert(offsetof(BulletHoming_BP_GetOwnerBtl, ReturnValue) == 0x000000, "Member 'BulletHoming_BP_GetOwnerBtl::ReturnValue' has a wrong offset!");

// Function InGameModule.BulletHoming.BP_GetSocketName
// 0x0008 (0x0008 - 0x0000)
struct BulletHoming_BP_GetSocketName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BulletHoming_BP_GetSocketName) == 0x000004, "Wrong alignment on BulletHoming_BP_GetSocketName");
static_assert(sizeof(BulletHoming_BP_GetSocketName) == 0x000008, "Wrong size on BulletHoming_BP_GetSocketName");
static_assert(offsetof(BulletHoming_BP_GetSocketName, ReturnValue) == 0x000000, "Member 'BulletHoming_BP_GetSocketName::ReturnValue' has a wrong offset!");

// Function InGameModule.PortalGen.WarpUsing_RPC
// 0x0008 (0x0008 - 0x0000)
struct PortalGen_WarpUsing_RPC final
{
public:
	struct FPortalGenRep                          GenPortal;                                         // 0x0000(0x0008)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PortalGen_WarpUsing_RPC) == 0x000004, "Wrong alignment on PortalGen_WarpUsing_RPC");
static_assert(sizeof(PortalGen_WarpUsing_RPC) == 0x000008, "Wrong size on PortalGen_WarpUsing_RPC");
static_assert(offsetof(PortalGen_WarpUsing_RPC, GenPortal) == 0x000000, "Member 'PortalGen_WarpUsing_RPC::GenPortal' has a wrong offset!");

// Function InGameModule.CementBase.GetCrackHP
// 0x0004 (0x0004 - 0x0000)
struct CementBase_GetCrackHP final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CementBase_GetCrackHP) == 0x000004, "Wrong alignment on CementBase_GetCrackHP");
static_assert(sizeof(CementBase_GetCrackHP) == 0x000004, "Wrong size on CementBase_GetCrackHP");
static_assert(offsetof(CementBase_GetCrackHP, ReturnValue) == 0x000000, "Member 'CementBase_GetCrackHP::ReturnValue' has a wrong offset!");

// Function InGameModule.Cement3Gen.GenCement3_RPC
// 0x0050 (0x0050 - 0x0000)
struct Cement3Gen_GenCement3_RPC final
{
public:
	struct FCement3GenRep                         Rep;                                               // 0x0000(0x0050)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cement3Gen_GenCement3_RPC) == 0x000010, "Wrong alignment on Cement3Gen_GenCement3_RPC");
static_assert(sizeof(Cement3Gen_GenCement3_RPC) == 0x000050, "Wrong size on Cement3Gen_GenCement3_RPC");
static_assert(offsetof(Cement3Gen_GenCement3_RPC, Rep) == 0x000000, "Member 'Cement3Gen_GenCement3_RPC::Rep' has a wrong offset!");

// Function InGameModule.Ch001Unique3.OnHitItem
// 0x00B0 (0x00B0 - 0x0000)
struct Ch001Unique3_OnHitItem final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00AC(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Ch001Unique3_OnHitItem) == 0x000008, "Wrong alignment on Ch001Unique3_OnHitItem");
static_assert(sizeof(Ch001Unique3_OnHitItem) == 0x0000B0, "Wrong size on Ch001Unique3_OnHitItem");
static_assert(offsetof(Ch001Unique3_OnHitItem, HitComponent) == 0x000000, "Member 'Ch001Unique3_OnHitItem::HitComponent' has a wrong offset!");
static_assert(offsetof(Ch001Unique3_OnHitItem, OtherActor) == 0x000008, "Member 'Ch001Unique3_OnHitItem::OtherActor' has a wrong offset!");
static_assert(offsetof(Ch001Unique3_OnHitItem, OtherComp) == 0x000010, "Member 'Ch001Unique3_OnHitItem::OtherComp' has a wrong offset!");
static_assert(offsetof(Ch001Unique3_OnHitItem, NormalImpulse) == 0x000018, "Member 'Ch001Unique3_OnHitItem::NormalImpulse' has a wrong offset!");
static_assert(offsetof(Ch001Unique3_OnHitItem, Hit) == 0x000024, "Member 'Ch001Unique3_OnHitItem::Hit' has a wrong offset!");
static_assert(offsetof(Ch001Unique3_OnHitItem, ReturnValue) == 0x0000AC, "Member 'Ch001Unique3_OnHitItem::ReturnValue' has a wrong offset!");

// Function InGameModule.Ch015Unique2_Var1ChildCrack.GetMID
// 0x0008 (0x0008 - 0x0000)
struct Ch015Unique2_Var1ChildCrack_GetMID final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch015Unique2_Var1ChildCrack_GetMID) == 0x000008, "Wrong alignment on Ch015Unique2_Var1ChildCrack_GetMID");
static_assert(sizeof(Ch015Unique2_Var1ChildCrack_GetMID) == 0x000008, "Wrong size on Ch015Unique2_Var1ChildCrack_GetMID");
static_assert(offsetof(Ch015Unique2_Var1ChildCrack_GetMID, ReturnValue) == 0x000000, "Member 'Ch015Unique2_Var1ChildCrack_GetMID::ReturnValue' has a wrong offset!");

// Function InGameModule.Ch015Unique2_Var1ChildCrack.GetRandomZRot
// 0x0004 (0x0004 - 0x0000)
struct Ch015Unique2_Var1ChildCrack_GetRandomZRot final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch015Unique2_Var1ChildCrack_GetRandomZRot) == 0x000004, "Wrong alignment on Ch015Unique2_Var1ChildCrack_GetRandomZRot");
static_assert(sizeof(Ch015Unique2_Var1ChildCrack_GetRandomZRot) == 0x000004, "Wrong size on Ch015Unique2_Var1ChildCrack_GetRandomZRot");
static_assert(offsetof(Ch015Unique2_Var1ChildCrack_GetRandomZRot, ReturnValue) == 0x000000, "Member 'Ch015Unique2_Var1ChildCrack_GetRandomZRot::ReturnValue' has a wrong offset!");

// Function InGameModule.Ch015Unique2_Var1ChildCrack.SetMID
// 0x0010 (0x0010 - 0x0000)
struct Ch015Unique2_Var1ChildCrack_SetMID final
{
public:
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch015Unique2_Var1ChildCrack_SetMID) == 0x000008, "Wrong alignment on Ch015Unique2_Var1ChildCrack_SetMID");
static_assert(sizeof(Ch015Unique2_Var1ChildCrack_SetMID) == 0x000010, "Wrong size on Ch015Unique2_Var1ChildCrack_SetMID");
static_assert(offsetof(Ch015Unique2_Var1ChildCrack_SetMID, Mid) == 0x000000, "Member 'Ch015Unique2_Var1ChildCrack_SetMID::Mid' has a wrong offset!");
static_assert(offsetof(Ch015Unique2_Var1ChildCrack_SetMID, ReturnValue) == 0x000008, "Member 'Ch015Unique2_Var1ChildCrack_SetMID::ReturnValue' has a wrong offset!");

// Function InGameModule.Ch003Unique1ChargeGen.OnChangeState_RPC
// 0x0001 (0x0001 - 0x0000)
struct Ch003Unique1ChargeGen_OnChangeState_RPC final
{
public:
	ECh003Unique1ChargeState                      State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch003Unique1ChargeGen_OnChangeState_RPC) == 0x000001, "Wrong alignment on Ch003Unique1ChargeGen_OnChangeState_RPC");
static_assert(sizeof(Ch003Unique1ChargeGen_OnChangeState_RPC) == 0x000001, "Wrong size on Ch003Unique1ChargeGen_OnChangeState_RPC");
static_assert(offsetof(Ch003Unique1ChargeGen_OnChangeState_RPC, State) == 0x000000, "Member 'Ch003Unique1ChargeGen_OnChangeState_RPC::State' has a wrong offset!");

// Function InGameModule.Ch023Unique3Shot.SetMID
// 0x0010 (0x0010 - 0x0000)
struct Ch023Unique3Shot_SetMID final
{
public:
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch023Unique3Shot_SetMID) == 0x000008, "Wrong alignment on Ch023Unique3Shot_SetMID");
static_assert(sizeof(Ch023Unique3Shot_SetMID) == 0x000010, "Wrong size on Ch023Unique3Shot_SetMID");
static_assert(offsetof(Ch023Unique3Shot_SetMID, Mid) == 0x000000, "Member 'Ch023Unique3Shot_SetMID::Mid' has a wrong offset!");
static_assert(offsetof(Ch023Unique3Shot_SetMID, ReturnValue) == 0x000008, "Member 'Ch023Unique3Shot_SetMID::ReturnValue' has a wrong offset!");

// Function InGameModule.Ch003Unique3Base.OnFinishImpactParticle
// 0x0008 (0x0008 - 0x0000)
struct Ch003Unique3Base_OnFinishImpactParticle final
{
public:
	class UParticleSystemComponent*               Particle;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch003Unique3Base_OnFinishImpactParticle) == 0x000008, "Wrong alignment on Ch003Unique3Base_OnFinishImpactParticle");
static_assert(sizeof(Ch003Unique3Base_OnFinishImpactParticle) == 0x000008, "Wrong size on Ch003Unique3Base_OnFinishImpactParticle");
static_assert(offsetof(Ch003Unique3Base_OnFinishImpactParticle, Particle) == 0x000000, "Member 'Ch003Unique3Base_OnFinishImpactParticle::Particle' has a wrong offset!");

// Function InGameModule.Ch003Unique3Base.StartFallInternal
// 0x000C (0x000C - 0x0000)
struct Ch003Unique3Base_StartFallInternal final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch003Unique3Base_StartFallInternal) == 0x000004, "Wrong alignment on Ch003Unique3Base_StartFallInternal");
static_assert(sizeof(Ch003Unique3Base_StartFallInternal) == 0x00000C, "Wrong size on Ch003Unique3Base_StartFallInternal");
static_assert(offsetof(Ch003Unique3Base_StartFallInternal, StartLocation) == 0x000000, "Member 'Ch003Unique3Base_StartFallInternal::StartLocation' has a wrong offset!");

// Function InGameModule.Ch043Unique1ShotGen.Ch043Unique1ShotGenRep_RPC
// 0x0028 (0x0028 - 0x0000)
struct Ch043Unique1ShotGen_Ch043Unique1ShotGenRep_RPC final
{
public:
	struct FCh043Unique1ShotGenRep                Rep;                                               // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch043Unique1ShotGen_Ch043Unique1ShotGenRep_RPC) == 0x000008, "Wrong alignment on Ch043Unique1ShotGen_Ch043Unique1ShotGenRep_RPC");
static_assert(sizeof(Ch043Unique1ShotGen_Ch043Unique1ShotGenRep_RPC) == 0x000028, "Wrong size on Ch043Unique1ShotGen_Ch043Unique1ShotGenRep_RPC");
static_assert(offsetof(Ch043Unique1ShotGen_Ch043Unique1ShotGenRep_RPC, Rep) == 0x000000, "Member 'Ch043Unique1ShotGen_Ch043Unique1ShotGenRep_RPC::Rep' has a wrong offset!");

// Function InGameModule.Ch003Unique3Gen.GetSpawnDecorationRangeRadius
// 0x0004 (0x0004 - 0x0000)
struct Ch003Unique3Gen_GetSpawnDecorationRangeRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch003Unique3Gen_GetSpawnDecorationRangeRadius) == 0x000004, "Wrong alignment on Ch003Unique3Gen_GetSpawnDecorationRangeRadius");
static_assert(sizeof(Ch003Unique3Gen_GetSpawnDecorationRangeRadius) == 0x000004, "Wrong size on Ch003Unique3Gen_GetSpawnDecorationRangeRadius");
static_assert(offsetof(Ch003Unique3Gen_GetSpawnDecorationRangeRadius, ReturnValue) == 0x000000, "Member 'Ch003Unique3Gen_GetSpawnDecorationRangeRadius::ReturnValue' has a wrong offset!");

// Function InGameModule.Ch043Unique3TrapGen.ResponceHit_RPC
// 0x0004 (0x0004 - 0x0000)
struct Ch043Unique3TrapGen_ResponceHit_RPC final
{
public:
	struct FResponceHitRep                        Rep;                                               // 0x0000(0x0004)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch043Unique3TrapGen_ResponceHit_RPC) == 0x000004, "Wrong alignment on Ch043Unique3TrapGen_ResponceHit_RPC");
static_assert(sizeof(Ch043Unique3TrapGen_ResponceHit_RPC) == 0x000004, "Wrong size on Ch043Unique3TrapGen_ResponceHit_RPC");
static_assert(offsetof(Ch043Unique3TrapGen_ResponceHit_RPC, Rep) == 0x000000, "Member 'Ch043Unique3TrapGen_ResponceHit_RPC::Rep' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_ChaseStart
// 0x0038 (0x0038 - 0x0000)
struct CharacterAttackComponent_BP_ChaseStart final
{
public:
	struct FAttackChaseInfo                       Info;                                              // 0x0000(0x0038)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_ChaseStart) == 0x000004, "Wrong alignment on CharacterAttackComponent_BP_ChaseStart");
static_assert(sizeof(CharacterAttackComponent_BP_ChaseStart) == 0x000038, "Wrong size on CharacterAttackComponent_BP_ChaseStart");
static_assert(offsetof(CharacterAttackComponent_BP_ChaseStart, Info) == 0x000000, "Member 'CharacterAttackComponent_BP_ChaseStart::Info' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_DuplicateInto
// 0x0010 (0x0010 - 0x0000)
struct CharacterAttackComponent_BP_DuplicateInto final
{
public:
	bool                                          UseStock;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_DuplicateInto) == 0x000004, "Wrong alignment on CharacterAttackComponent_BP_DuplicateInto");
static_assert(sizeof(CharacterAttackComponent_BP_DuplicateInto) == 0x000010, "Wrong size on CharacterAttackComponent_BP_DuplicateInto");
static_assert(offsetof(CharacterAttackComponent_BP_DuplicateInto, UseStock) == 0x000000, "Member 'CharacterAttackComponent_BP_DuplicateInto::UseStock' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_DuplicateInto, Position) == 0x000004, "Member 'CharacterAttackComponent_BP_DuplicateInto::Position' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_EnableChainComboFlag
// 0x0004 (0x0004 - 0x0000)
struct CharacterAttackComponent_BP_EnableChainComboFlag final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_EnableChainComboFlag) == 0x000004, "Wrong alignment on CharacterAttackComponent_BP_EnableChainComboFlag");
static_assert(sizeof(CharacterAttackComponent_BP_EnableChainComboFlag) == 0x000004, "Wrong size on CharacterAttackComponent_BP_EnableChainComboFlag");
static_assert(offsetof(CharacterAttackComponent_BP_EnableChainComboFlag, Time) == 0x000000, "Member 'CharacterAttackComponent_BP_EnableChainComboFlag::Time' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_IsStockingDuplication
// 0x0001 (0x0001 - 0x0000)
struct CharacterAttackComponent_BP_IsStockingDuplication final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_IsStockingDuplication) == 0x000001, "Wrong alignment on CharacterAttackComponent_BP_IsStockingDuplication");
static_assert(sizeof(CharacterAttackComponent_BP_IsStockingDuplication) == 0x000001, "Wrong size on CharacterAttackComponent_BP_IsStockingDuplication");
static_assert(offsetof(CharacterAttackComponent_BP_IsStockingDuplication, ReturnValue) == 0x000000, "Member 'CharacterAttackComponent_BP_IsStockingDuplication::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_IsStockingTransform
// 0x0001 (0x0001 - 0x0000)
struct CharacterAttackComponent_BP_IsStockingTransform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_IsStockingTransform) == 0x000001, "Wrong alignment on CharacterAttackComponent_BP_IsStockingTransform");
static_assert(sizeof(CharacterAttackComponent_BP_IsStockingTransform) == 0x000001, "Wrong size on CharacterAttackComponent_BP_IsStockingTransform");
static_assert(offsetof(CharacterAttackComponent_BP_IsStockingTransform, ReturnValue) == 0x000000, "Member 'CharacterAttackComponent_BP_IsStockingTransform::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_LoadMagazineParam
// 0x0020 (0x0020 - 0x0000)
struct CharacterAttackComponent_BP_LoadMagazineParam final
{
public:
	EAttackId                                     AttackId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ActionName;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterId                                  CharacterId;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AttackLevel;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_LoadMagazineParam) == 0x000008, "Wrong alignment on CharacterAttackComponent_BP_LoadMagazineParam");
static_assert(sizeof(CharacterAttackComponent_BP_LoadMagazineParam) == 0x000020, "Wrong size on CharacterAttackComponent_BP_LoadMagazineParam");
static_assert(offsetof(CharacterAttackComponent_BP_LoadMagazineParam, AttackId) == 0x000000, "Member 'CharacterAttackComponent_BP_LoadMagazineParam::AttackId' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_LoadMagazineParam, ActionName) == 0x000008, "Member 'CharacterAttackComponent_BP_LoadMagazineParam::ActionName' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_LoadMagazineParam, CharacterId) == 0x000018, "Member 'CharacterAttackComponent_BP_LoadMagazineParam::CharacterId' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_LoadMagazineParam, AttackLevel) == 0x00001C, "Member 'CharacterAttackComponent_BP_LoadMagazineParam::AttackLevel' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_PlayAttackSound
// 0x0020 (0x0020 - 0x0000)
struct CharacterAttackComponent_BP_PlayAttackSound final
{
public:
	class FString                                 CueName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtomComponent*                         ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_PlayAttackSound) == 0x000008, "Wrong alignment on CharacterAttackComponent_BP_PlayAttackSound");
static_assert(sizeof(CharacterAttackComponent_BP_PlayAttackSound) == 0x000020, "Wrong size on CharacterAttackComponent_BP_PlayAttackSound");
static_assert(offsetof(CharacterAttackComponent_BP_PlayAttackSound, CueName) == 0x000000, "Member 'CharacterAttackComponent_BP_PlayAttackSound::CueName' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_PlayAttackSound, SocketName) == 0x000010, "Member 'CharacterAttackComponent_BP_PlayAttackSound::SocketName' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_PlayAttackSound, ReturnValue) == 0x000018, "Member 'CharacterAttackComponent_BP_PlayAttackSound::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_RemoveStockTransformation
// 0x0004 (0x0004 - 0x0000)
struct CharacterAttackComponent_BP_RemoveStockTransformation final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_RemoveStockTransformation) == 0x000004, "Wrong alignment on CharacterAttackComponent_BP_RemoveStockTransformation");
static_assert(sizeof(CharacterAttackComponent_BP_RemoveStockTransformation) == 0x000004, "Wrong size on CharacterAttackComponent_BP_RemoveStockTransformation");
static_assert(offsetof(CharacterAttackComponent_BP_RemoveStockTransformation, Index_0) == 0x000000, "Member 'CharacterAttackComponent_BP_RemoveStockTransformation::Index_0' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_SendToProjectileEvent
// 0x0008 (0x0008 - 0x0000)
struct CharacterAttackComponent_BP_SendToProjectileEvent final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_SendToProjectileEvent) == 0x000004, "Wrong alignment on CharacterAttackComponent_BP_SendToProjectileEvent");
static_assert(sizeof(CharacterAttackComponent_BP_SendToProjectileEvent) == 0x000008, "Wrong size on CharacterAttackComponent_BP_SendToProjectileEvent");
static_assert(offsetof(CharacterAttackComponent_BP_SendToProjectileEvent, EventName) == 0x000000, "Member 'CharacterAttackComponent_BP_SendToProjectileEvent::EventName' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_SetAttackAnimationRate
// 0x0008 (0x0008 - 0x0000)
struct CharacterAttackComponent_BP_SetAttackAnimationRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNagara;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterAttackComponent_BP_SetAttackAnimationRate) == 0x000004, "Wrong alignment on CharacterAttackComponent_BP_SetAttackAnimationRate");
static_assert(sizeof(CharacterAttackComponent_BP_SetAttackAnimationRate) == 0x000008, "Wrong size on CharacterAttackComponent_BP_SetAttackAnimationRate");
static_assert(offsetof(CharacterAttackComponent_BP_SetAttackAnimationRate, Rate) == 0x000000, "Member 'CharacterAttackComponent_BP_SetAttackAnimationRate::Rate' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_SetAttackAnimationRate, bNagara) == 0x000004, "Member 'CharacterAttackComponent_BP_SetAttackAnimationRate::bNagara' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_SetAttackPhaseEndCondition
// 0x000C (0x000C - 0x0000)
struct CharacterAttackComponent_BP_SetAttackPhaseEndCondition final
{
public:
	bool                                          ComboCommand;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Grabed;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EndTimer;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Landing;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndAnim;                                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationSlot                                EndAnimSlot;                                       // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterAttackComponent_BP_SetAttackPhaseEndCondition) == 0x000004, "Wrong alignment on CharacterAttackComponent_BP_SetAttackPhaseEndCondition");
static_assert(sizeof(CharacterAttackComponent_BP_SetAttackPhaseEndCondition) == 0x00000C, "Wrong size on CharacterAttackComponent_BP_SetAttackPhaseEndCondition");
static_assert(offsetof(CharacterAttackComponent_BP_SetAttackPhaseEndCondition, ComboCommand) == 0x000000, "Member 'CharacterAttackComponent_BP_SetAttackPhaseEndCondition::ComboCommand' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_SetAttackPhaseEndCondition, Grabed) == 0x000001, "Member 'CharacterAttackComponent_BP_SetAttackPhaseEndCondition::Grabed' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_SetAttackPhaseEndCondition, EndTimer) == 0x000004, "Member 'CharacterAttackComponent_BP_SetAttackPhaseEndCondition::EndTimer' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_SetAttackPhaseEndCondition, Landing) == 0x000008, "Member 'CharacterAttackComponent_BP_SetAttackPhaseEndCondition::Landing' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_SetAttackPhaseEndCondition, EndAnim) == 0x000009, "Member 'CharacterAttackComponent_BP_SetAttackPhaseEndCondition::EndAnim' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_SetAttackPhaseEndCondition, EndAnimSlot) == 0x00000A, "Member 'CharacterAttackComponent_BP_SetAttackPhaseEndCondition::EndAnimSlot' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_SetChargeCommandTime
// 0x0008 (0x0008 - 0x0000)
struct CharacterAttackComponent_BP_SetChargeCommandTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackId                                     AttackId;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterAttackComponent_BP_SetChargeCommandTime) == 0x000004, "Wrong alignment on CharacterAttackComponent_BP_SetChargeCommandTime");
static_assert(sizeof(CharacterAttackComponent_BP_SetChargeCommandTime) == 0x000008, "Wrong size on CharacterAttackComponent_BP_SetChargeCommandTime");
static_assert(offsetof(CharacterAttackComponent_BP_SetChargeCommandTime, Time) == 0x000000, "Member 'CharacterAttackComponent_BP_SetChargeCommandTime::Time' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_SetChargeCommandTime, AttackId) == 0x000004, "Member 'CharacterAttackComponent_BP_SetChargeCommandTime::AttackId' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_SetDisableShiftActionAttack
// 0x0002 (0x0002 - 0x0000)
struct CharacterAttackComponent_BP_SetDisableShiftActionAttack final
{
public:
	EAttackId                                     AttackId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackDisabledFlags                          Flag;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_SetDisableShiftActionAttack) == 0x000001, "Wrong alignment on CharacterAttackComponent_BP_SetDisableShiftActionAttack");
static_assert(sizeof(CharacterAttackComponent_BP_SetDisableShiftActionAttack) == 0x000002, "Wrong size on CharacterAttackComponent_BP_SetDisableShiftActionAttack");
static_assert(offsetof(CharacterAttackComponent_BP_SetDisableShiftActionAttack, AttackId) == 0x000000, "Member 'CharacterAttackComponent_BP_SetDisableShiftActionAttack::AttackId' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_SetDisableShiftActionAttack, Flag) == 0x000001, "Member 'CharacterAttackComponent_BP_SetDisableShiftActionAttack::Flag' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_SetEnableAttackLanding
// 0x0001 (0x0001 - 0x0000)
struct CharacterAttackComponent_BP_SetEnableAttackLanding final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_SetEnableAttackLanding) == 0x000001, "Wrong alignment on CharacterAttackComponent_BP_SetEnableAttackLanding");
static_assert(sizeof(CharacterAttackComponent_BP_SetEnableAttackLanding) == 0x000001, "Wrong size on CharacterAttackComponent_BP_SetEnableAttackLanding");
static_assert(offsetof(CharacterAttackComponent_BP_SetEnableAttackLanding, Flag) == 0x000000, "Member 'CharacterAttackComponent_BP_SetEnableAttackLanding::Flag' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_SetEnableChaseFlag
// 0x0001 (0x0001 - 0x0000)
struct CharacterAttackComponent_BP_SetEnableChaseFlag final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_SetEnableChaseFlag) == 0x000001, "Wrong alignment on CharacterAttackComponent_BP_SetEnableChaseFlag");
static_assert(sizeof(CharacterAttackComponent_BP_SetEnableChaseFlag) == 0x000001, "Wrong size on CharacterAttackComponent_BP_SetEnableChaseFlag");
static_assert(offsetof(CharacterAttackComponent_BP_SetEnableChaseFlag, Flag) == 0x000000, "Member 'CharacterAttackComponent_BP_SetEnableChaseFlag::Flag' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_SetEnableShiftActionAttack
// 0x0002 (0x0002 - 0x0000)
struct CharacterAttackComponent_BP_SetEnableShiftActionAttack final
{
public:
	EAttackId                                     AttackId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackDisabledFlags                          Flag;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_SetEnableShiftActionAttack) == 0x000001, "Wrong alignment on CharacterAttackComponent_BP_SetEnableShiftActionAttack");
static_assert(sizeof(CharacterAttackComponent_BP_SetEnableShiftActionAttack) == 0x000002, "Wrong size on CharacterAttackComponent_BP_SetEnableShiftActionAttack");
static_assert(offsetof(CharacterAttackComponent_BP_SetEnableShiftActionAttack, AttackId) == 0x000000, "Member 'CharacterAttackComponent_BP_SetEnableShiftActionAttack::AttackId' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_SetEnableShiftActionAttack, Flag) == 0x000001, "Member 'CharacterAttackComponent_BP_SetEnableShiftActionAttack::Flag' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_SetEnableShiftAttackAction
// 0x0002 (0x0002 - 0x0000)
struct CharacterAttackComponent_BP_SetEnableShiftAttackAction final
{
public:
	EAttackId                                     AttackId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_SetEnableShiftAttackAction) == 0x000001, "Wrong alignment on CharacterAttackComponent_BP_SetEnableShiftAttackAction");
static_assert(sizeof(CharacterAttackComponent_BP_SetEnableShiftAttackAction) == 0x000002, "Wrong size on CharacterAttackComponent_BP_SetEnableShiftAttackAction");
static_assert(offsetof(CharacterAttackComponent_BP_SetEnableShiftAttackAction, AttackId) == 0x000000, "Member 'CharacterAttackComponent_BP_SetEnableShiftAttackAction::AttackId' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_SetEnableShiftAttackAction, Flag) == 0x000001, "Member 'CharacterAttackComponent_BP_SetEnableShiftAttackAction::Flag' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_SetEndAttackOnAirial
// 0x0001 (0x0001 - 0x0000)
struct CharacterAttackComponent_BP_SetEndAttackOnAirial final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_SetEndAttackOnAirial) == 0x000001, "Wrong alignment on CharacterAttackComponent_BP_SetEndAttackOnAirial");
static_assert(sizeof(CharacterAttackComponent_BP_SetEndAttackOnAirial) == 0x000001, "Wrong size on CharacterAttackComponent_BP_SetEndAttackOnAirial");
static_assert(offsetof(CharacterAttackComponent_BP_SetEndAttackOnAirial, bEnable) == 0x000000, "Member 'CharacterAttackComponent_BP_SetEndAttackOnAirial::bEnable' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_SetGrabDamageContinuity
// 0x0010 (0x0010 - 0x0000)
struct CharacterAttackComponent_BP_SetGrabDamageContinuity final
{
public:
	class FName                                   DamageParamName;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitCount;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitSpan;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_SetGrabDamageContinuity) == 0x000004, "Wrong alignment on CharacterAttackComponent_BP_SetGrabDamageContinuity");
static_assert(sizeof(CharacterAttackComponent_BP_SetGrabDamageContinuity) == 0x000010, "Wrong size on CharacterAttackComponent_BP_SetGrabDamageContinuity");
static_assert(offsetof(CharacterAttackComponent_BP_SetGrabDamageContinuity, DamageParamName) == 0x000000, "Member 'CharacterAttackComponent_BP_SetGrabDamageContinuity::DamageParamName' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_SetGrabDamageContinuity, HitCount) == 0x000008, "Member 'CharacterAttackComponent_BP_SetGrabDamageContinuity::HitCount' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_SetGrabDamageContinuity, HitSpan) == 0x00000C, "Member 'CharacterAttackComponent_BP_SetGrabDamageContinuity::HitSpan' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_SetHoldTimeIndex
// 0x0004 (0x0004 - 0x0000)
struct CharacterAttackComponent_BP_SetHoldTimeIndex final
{
public:
	float                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_SetHoldTimeIndex) == 0x000004, "Wrong alignment on CharacterAttackComponent_BP_SetHoldTimeIndex");
static_assert(sizeof(CharacterAttackComponent_BP_SetHoldTimeIndex) == 0x000004, "Wrong size on CharacterAttackComponent_BP_SetHoldTimeIndex");
static_assert(offsetof(CharacterAttackComponent_BP_SetHoldTimeIndex, Index_0) == 0x000000, "Member 'CharacterAttackComponent_BP_SetHoldTimeIndex::Index_0' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_SetIgnoreAdjustMoveRate
// 0x0001 (0x0001 - 0x0000)
struct CharacterAttackComponent_BP_SetIgnoreAdjustMoveRate final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_SetIgnoreAdjustMoveRate) == 0x000001, "Wrong alignment on CharacterAttackComponent_BP_SetIgnoreAdjustMoveRate");
static_assert(sizeof(CharacterAttackComponent_BP_SetIgnoreAdjustMoveRate) == 0x000001, "Wrong size on CharacterAttackComponent_BP_SetIgnoreAdjustMoveRate");
static_assert(offsetof(CharacterAttackComponent_BP_SetIgnoreAdjustMoveRate, Flag) == 0x000000, "Member 'CharacterAttackComponent_BP_SetIgnoreAdjustMoveRate::Flag' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_SetLockOnData
// 0x0014 (0x0014 - 0x0000)
struct CharacterAttackComponent_BP_SetLockOnData final
{
public:
	float                                         Span;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLockOnCount;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RaticleSize;                                       // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_SetLockOnData) == 0x000004, "Wrong alignment on CharacterAttackComponent_BP_SetLockOnData");
static_assert(sizeof(CharacterAttackComponent_BP_SetLockOnData) == 0x000014, "Wrong size on CharacterAttackComponent_BP_SetLockOnData");
static_assert(offsetof(CharacterAttackComponent_BP_SetLockOnData, Span) == 0x000000, "Member 'CharacterAttackComponent_BP_SetLockOnData::Span' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_SetLockOnData, Distance) == 0x000004, "Member 'CharacterAttackComponent_BP_SetLockOnData::Distance' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_SetLockOnData, MaxLockOnCount) == 0x000008, "Member 'CharacterAttackComponent_BP_SetLockOnData::MaxLockOnCount' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_SetLockOnData, RaticleSize) == 0x00000C, "Member 'CharacterAttackComponent_BP_SetLockOnData::RaticleSize' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_SetSpeedHForAttack
// 0x000C (0x000C - 0x0000)
struct CharacterAttackComponent_BP_SetSpeedHForAttack final
{
public:
	float                                         Initial;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Last;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Span;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_SetSpeedHForAttack) == 0x000004, "Wrong alignment on CharacterAttackComponent_BP_SetSpeedHForAttack");
static_assert(sizeof(CharacterAttackComponent_BP_SetSpeedHForAttack) == 0x00000C, "Wrong size on CharacterAttackComponent_BP_SetSpeedHForAttack");
static_assert(offsetof(CharacterAttackComponent_BP_SetSpeedHForAttack, Initial) == 0x000000, "Member 'CharacterAttackComponent_BP_SetSpeedHForAttack::Initial' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_SetSpeedHForAttack, Last) == 0x000004, "Member 'CharacterAttackComponent_BP_SetSpeedHForAttack::Last' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_SetSpeedHForAttack, Span) == 0x000008, "Member 'CharacterAttackComponent_BP_SetSpeedHForAttack::Span' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_SetSpeedVForAttack
// 0x000C (0x000C - 0x0000)
struct CharacterAttackComponent_BP_SetSpeedVForAttack final
{
public:
	float                                         Initial;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Last;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Span;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_SetSpeedVForAttack) == 0x000004, "Wrong alignment on CharacterAttackComponent_BP_SetSpeedVForAttack");
static_assert(sizeof(CharacterAttackComponent_BP_SetSpeedVForAttack) == 0x00000C, "Wrong size on CharacterAttackComponent_BP_SetSpeedVForAttack");
static_assert(offsetof(CharacterAttackComponent_BP_SetSpeedVForAttack, Initial) == 0x000000, "Member 'CharacterAttackComponent_BP_SetSpeedVForAttack::Initial' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_SetSpeedVForAttack, Last) == 0x000004, "Member 'CharacterAttackComponent_BP_SetSpeedVForAttack::Last' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_SetSpeedVForAttack, Span) == 0x000008, "Member 'CharacterAttackComponent_BP_SetSpeedVForAttack::Span' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_SetSuperArmor
// 0x0001 (0x0001 - 0x0000)
struct CharacterAttackComponent_BP_SetSuperArmor final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_SetSuperArmor) == 0x000001, "Wrong alignment on CharacterAttackComponent_BP_SetSuperArmor");
static_assert(sizeof(CharacterAttackComponent_BP_SetSuperArmor) == 0x000001, "Wrong size on CharacterAttackComponent_BP_SetSuperArmor");
static_assert(offsetof(CharacterAttackComponent_BP_SetSuperArmor, bEnable) == 0x000000, "Member 'CharacterAttackComponent_BP_SetSuperArmor::bEnable' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_SetTransfromTimer
// 0x0004 (0x0004 - 0x0000)
struct CharacterAttackComponent_BP_SetTransfromTimer final
{
public:
	float                                         Timer;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_SetTransfromTimer) == 0x000004, "Wrong alignment on CharacterAttackComponent_BP_SetTransfromTimer");
static_assert(sizeof(CharacterAttackComponent_BP_SetTransfromTimer) == 0x000004, "Wrong size on CharacterAttackComponent_BP_SetTransfromTimer");
static_assert(offsetof(CharacterAttackComponent_BP_SetTransfromTimer, Timer) == 0x000000, "Member 'CharacterAttackComponent_BP_SetTransfromTimer::Timer' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_SetUpRotationPitchToDirection
// 0x001C (0x001C - 0x0000)
struct CharacterAttackComponent_BP_SetUpRotationPitchToDirection final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActionAxis                                   TargetAxis;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Rate;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDegreesPerFrame;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_SetUpRotationPitchToDirection) == 0x000004, "Wrong alignment on CharacterAttackComponent_BP_SetUpRotationPitchToDirection");
static_assert(sizeof(CharacterAttackComponent_BP_SetUpRotationPitchToDirection) == 0x00001C, "Wrong size on CharacterAttackComponent_BP_SetUpRotationPitchToDirection");
static_assert(offsetof(CharacterAttackComponent_BP_SetUpRotationPitchToDirection, Time) == 0x000000, "Member 'CharacterAttackComponent_BP_SetUpRotationPitchToDirection::Time' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_SetUpRotationPitchToDirection, TargetAxis) == 0x000004, "Member 'CharacterAttackComponent_BP_SetUpRotationPitchToDirection::TargetAxis' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_SetUpRotationPitchToDirection, Rate) == 0x000008, "Member 'CharacterAttackComponent_BP_SetUpRotationPitchToDirection::Rate' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_SetUpRotationPitchToDirection, MaxDegreesPerFrame) == 0x00000C, "Member 'CharacterAttackComponent_BP_SetUpRotationPitchToDirection::MaxDegreesPerFrame' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_SetUpRotationPitchToDirection, Direction) == 0x000010, "Member 'CharacterAttackComponent_BP_SetUpRotationPitchToDirection::Direction' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_ShiftAttackPhase
// 0x0001 (0x0001 - 0x0000)
struct CharacterAttackComponent_BP_ShiftAttackPhase final
{
public:
	uint8                                         NextPhase;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_ShiftAttackPhase) == 0x000001, "Wrong alignment on CharacterAttackComponent_BP_ShiftAttackPhase");
static_assert(sizeof(CharacterAttackComponent_BP_ShiftAttackPhase) == 0x000001, "Wrong size on CharacterAttackComponent_BP_ShiftAttackPhase");
static_assert(offsetof(CharacterAttackComponent_BP_ShiftAttackPhase, NextPhase) == 0x000000, "Member 'CharacterAttackComponent_BP_ShiftAttackPhase::NextPhase' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_ShiftAttackPhaseForRemote
// 0x0001 (0x0001 - 0x0000)
struct CharacterAttackComponent_BP_ShiftAttackPhaseForRemote final
{
public:
	uint8                                         NextPhase;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_ShiftAttackPhaseForRemote) == 0x000001, "Wrong alignment on CharacterAttackComponent_BP_ShiftAttackPhaseForRemote");
static_assert(sizeof(CharacterAttackComponent_BP_ShiftAttackPhaseForRemote) == 0x000001, "Wrong size on CharacterAttackComponent_BP_ShiftAttackPhaseForRemote");
static_assert(offsetof(CharacterAttackComponent_BP_ShiftAttackPhaseForRemote, NextPhase) == 0x000000, "Member 'CharacterAttackComponent_BP_ShiftAttackPhaseForRemote::NextPhase' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_StockDuplication
// 0x0008 (0x0008 - 0x0000)
struct CharacterAttackComponent_BP_StockDuplication final
{
public:
	class ACharacterBattle*                       Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_StockDuplication) == 0x000008, "Wrong alignment on CharacterAttackComponent_BP_StockDuplication");
static_assert(sizeof(CharacterAttackComponent_BP_StockDuplication) == 0x000008, "Wrong size on CharacterAttackComponent_BP_StockDuplication");
static_assert(offsetof(CharacterAttackComponent_BP_StockDuplication, Character) == 0x000000, "Member 'CharacterAttackComponent_BP_StockDuplication::Character' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_StockTransformation
// 0x0008 (0x0008 - 0x0000)
struct CharacterAttackComponent_BP_StockTransformation final
{
public:
	class ACharacterBattle*                       Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_StockTransformation) == 0x000008, "Wrong alignment on CharacterAttackComponent_BP_StockTransformation");
static_assert(sizeof(CharacterAttackComponent_BP_StockTransformation) == 0x000008, "Wrong size on CharacterAttackComponent_BP_StockTransformation");
static_assert(offsetof(CharacterAttackComponent_BP_StockTransformation, Character) == 0x000000, "Member 'CharacterAttackComponent_BP_StockTransformation::Character' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.GenerateRandomSeed_OnServer
// 0x0004 (0x0004 - 0x0000)
struct CharacterAttackComponent_GenerateRandomSeed_OnServer final
{
public:
	int32                                         NewSeed;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_GenerateRandomSeed_OnServer) == 0x000004, "Wrong alignment on CharacterAttackComponent_GenerateRandomSeed_OnServer");
static_assert(sizeof(CharacterAttackComponent_GenerateRandomSeed_OnServer) == 0x000004, "Wrong size on CharacterAttackComponent_GenerateRandomSeed_OnServer");
static_assert(offsetof(CharacterAttackComponent_GenerateRandomSeed_OnServer, NewSeed) == 0x000000, "Member 'CharacterAttackComponent_GenerateRandomSeed_OnServer::NewSeed' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.OnHitAttack_ToServer
// 0x0018 (0x0018 - 0x0000)
struct CharacterAttackComponent_OnHitAttack_ToServer final
{
public:
	struct FNetAttackHitData                      Data;                                              // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_OnHitAttack_ToServer) == 0x000008, "Wrong alignment on CharacterAttackComponent_OnHitAttack_ToServer");
static_assert(sizeof(CharacterAttackComponent_OnHitAttack_ToServer) == 0x000018, "Wrong size on CharacterAttackComponent_OnHitAttack_ToServer");
static_assert(offsetof(CharacterAttackComponent_OnHitAttack_ToServer, Data) == 0x000000, "Member 'CharacterAttackComponent_OnHitAttack_ToServer::Data' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.OnHitProjectile_ToServer
// 0x0018 (0x0018 - 0x0000)
struct CharacterAttackComponent_OnHitProjectile_ToServer final
{
public:
	struct FNetAttackHitData                      Data;                                              // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_OnHitProjectile_ToServer) == 0x000008, "Wrong alignment on CharacterAttackComponent_OnHitProjectile_ToServer");
static_assert(sizeof(CharacterAttackComponent_OnHitProjectile_ToServer) == 0x000018, "Wrong size on CharacterAttackComponent_OnHitProjectile_ToServer");
static_assert(offsetof(CharacterAttackComponent_OnHitProjectile_ToServer, Data) == 0x000000, "Member 'CharacterAttackComponent_OnHitProjectile_ToServer::Data' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.SendAttackSerial_ToClient
// 0x0001 (0x0001 - 0x0000)
struct CharacterAttackComponent_SendAttackSerial_ToClient final
{
public:
	uint8                                         SerialNo;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_SendAttackSerial_ToClient) == 0x000001, "Wrong alignment on CharacterAttackComponent_SendAttackSerial_ToClient");
static_assert(sizeof(CharacterAttackComponent_SendAttackSerial_ToClient) == 0x000001, "Wrong size on CharacterAttackComponent_SendAttackSerial_ToClient");
static_assert(offsetof(CharacterAttackComponent_SendAttackSerial_ToClient, SerialNo) == 0x000000, "Member 'CharacterAttackComponent_SendAttackSerial_ToClient::SerialNo' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.SendAttackSerial_ToServer
// 0x0001 (0x0001 - 0x0000)
struct CharacterAttackComponent_SendAttackSerial_ToServer final
{
public:
	uint8                                         SerialNo;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_SendAttackSerial_ToServer) == 0x000001, "Wrong alignment on CharacterAttackComponent_SendAttackSerial_ToServer");
static_assert(sizeof(CharacterAttackComponent_SendAttackSerial_ToServer) == 0x000001, "Wrong size on CharacterAttackComponent_SendAttackSerial_ToServer");
static_assert(offsetof(CharacterAttackComponent_SendAttackSerial_ToServer, SerialNo) == 0x000000, "Member 'CharacterAttackComponent_SendAttackSerial_ToServer::SerialNo' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.SetNextAttackPhase_ToClient
// 0x0002 (0x0002 - 0x0000)
struct CharacterAttackComponent_SetNextAttackPhase_ToClient final
{
public:
	uint8                                         NextPhase;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AttackSerial;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_SetNextAttackPhase_ToClient) == 0x000001, "Wrong alignment on CharacterAttackComponent_SetNextAttackPhase_ToClient");
static_assert(sizeof(CharacterAttackComponent_SetNextAttackPhase_ToClient) == 0x000002, "Wrong size on CharacterAttackComponent_SetNextAttackPhase_ToClient");
static_assert(offsetof(CharacterAttackComponent_SetNextAttackPhase_ToClient, NextPhase) == 0x000000, "Member 'CharacterAttackComponent_SetNextAttackPhase_ToClient::NextPhase' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_SetNextAttackPhase_ToClient, AttackSerial) == 0x000001, "Member 'CharacterAttackComponent_SetNextAttackPhase_ToClient::AttackSerial' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.SetNextAttackPhase_ToServer
// 0x0002 (0x0002 - 0x0000)
struct CharacterAttackComponent_SetNextAttackPhase_ToServer final
{
public:
	uint8                                         NextPhase;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AttackSerial;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_SetNextAttackPhase_ToServer) == 0x000001, "Wrong alignment on CharacterAttackComponent_SetNextAttackPhase_ToServer");
static_assert(sizeof(CharacterAttackComponent_SetNextAttackPhase_ToServer) == 0x000002, "Wrong size on CharacterAttackComponent_SetNextAttackPhase_ToServer");
static_assert(offsetof(CharacterAttackComponent_SetNextAttackPhase_ToServer, NextPhase) == 0x000000, "Member 'CharacterAttackComponent_SetNextAttackPhase_ToServer::NextPhase' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_SetNextAttackPhase_ToServer, AttackSerial) == 0x000001, "Member 'CharacterAttackComponent_SetNextAttackPhase_ToServer::AttackSerial' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.SetTarget_ToServer
// 0x0018 (0x0018 - 0x0000)
struct CharacterAttackComponent_SetTarget_ToServer final
{
public:
	struct FNetAttackTargetData                   TargetData;                                        // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_SetTarget_ToServer) == 0x000008, "Wrong alignment on CharacterAttackComponent_SetTarget_ToServer");
static_assert(sizeof(CharacterAttackComponent_SetTarget_ToServer) == 0x000018, "Wrong size on CharacterAttackComponent_SetTarget_ToServer");
static_assert(offsetof(CharacterAttackComponent_SetTarget_ToServer, TargetData) == 0x000000, "Member 'CharacterAttackComponent_SetTarget_ToServer::TargetData' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.SetTargetLocal
// 0x0020 (0x0020 - 0x0000)
struct CharacterAttackComponent_SetTargetLocal final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RealtimeTargetLocation;                            // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_SetTargetLocal) == 0x000008, "Wrong alignment on CharacterAttackComponent_SetTargetLocal");
static_assert(sizeof(CharacterAttackComponent_SetTargetLocal) == 0x000020, "Wrong size on CharacterAttackComponent_SetTargetLocal");
static_assert(offsetof(CharacterAttackComponent_SetTargetLocal, TargetActor) == 0x000000, "Member 'CharacterAttackComponent_SetTargetLocal::TargetActor' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_SetTargetLocal, TargetLocation) == 0x000008, "Member 'CharacterAttackComponent_SetTargetLocal::TargetLocation' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_SetTargetLocal, RealtimeTargetLocation) == 0x000014, "Member 'CharacterAttackComponent_SetTargetLocal::RealtimeTargetLocation' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_GetAttackParamAsBool
// 0x0028 (0x0028 - 0x0000)
struct CharacterAttackComponent_BP_GetAttackParamAsBool final
{
public:
	class FString                                 ActionName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ParamPath;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackLevel;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterId                                  MasterId;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0025(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterAttackComponent_BP_GetAttackParamAsBool) == 0x000008, "Wrong alignment on CharacterAttackComponent_BP_GetAttackParamAsBool");
static_assert(sizeof(CharacterAttackComponent_BP_GetAttackParamAsBool) == 0x000028, "Wrong size on CharacterAttackComponent_BP_GetAttackParamAsBool");
static_assert(offsetof(CharacterAttackComponent_BP_GetAttackParamAsBool, ActionName) == 0x000000, "Member 'CharacterAttackComponent_BP_GetAttackParamAsBool::ActionName' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_GetAttackParamAsBool, ParamPath) == 0x000010, "Member 'CharacterAttackComponent_BP_GetAttackParamAsBool::ParamPath' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_GetAttackParamAsBool, AttackLevel) == 0x000020, "Member 'CharacterAttackComponent_BP_GetAttackParamAsBool::AttackLevel' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_GetAttackParamAsBool, MasterId) == 0x000024, "Member 'CharacterAttackComponent_BP_GetAttackParamAsBool::MasterId' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_GetAttackParamAsBool, ReturnValue) == 0x000025, "Member 'CharacterAttackComponent_BP_GetAttackParamAsBool::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_GetAttackParamAsFloat
// 0x0030 (0x0030 - 0x0000)
struct CharacterAttackComponent_BP_GetAttackParamAsFloat final
{
public:
	class FString                                 ActionName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ParamPath;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackLevel;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterId                                  MasterId;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterAttackComponent_BP_GetAttackParamAsFloat) == 0x000008, "Wrong alignment on CharacterAttackComponent_BP_GetAttackParamAsFloat");
static_assert(sizeof(CharacterAttackComponent_BP_GetAttackParamAsFloat) == 0x000030, "Wrong size on CharacterAttackComponent_BP_GetAttackParamAsFloat");
static_assert(offsetof(CharacterAttackComponent_BP_GetAttackParamAsFloat, ActionName) == 0x000000, "Member 'CharacterAttackComponent_BP_GetAttackParamAsFloat::ActionName' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_GetAttackParamAsFloat, ParamPath) == 0x000010, "Member 'CharacterAttackComponent_BP_GetAttackParamAsFloat::ParamPath' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_GetAttackParamAsFloat, AttackLevel) == 0x000020, "Member 'CharacterAttackComponent_BP_GetAttackParamAsFloat::AttackLevel' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_GetAttackParamAsFloat, MasterId) == 0x000024, "Member 'CharacterAttackComponent_BP_GetAttackParamAsFloat::MasterId' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_GetAttackParamAsFloat, ReturnValue) == 0x000028, "Member 'CharacterAttackComponent_BP_GetAttackParamAsFloat::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_GetAttackParamAsInt
// 0x0030 (0x0030 - 0x0000)
struct CharacterAttackComponent_BP_GetAttackParamAsInt final
{
public:
	class FString                                 ActionName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ParamPath;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackLevel;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterId                                  MasterId;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterAttackComponent_BP_GetAttackParamAsInt) == 0x000008, "Wrong alignment on CharacterAttackComponent_BP_GetAttackParamAsInt");
static_assert(sizeof(CharacterAttackComponent_BP_GetAttackParamAsInt) == 0x000030, "Wrong size on CharacterAttackComponent_BP_GetAttackParamAsInt");
static_assert(offsetof(CharacterAttackComponent_BP_GetAttackParamAsInt, ActionName) == 0x000000, "Member 'CharacterAttackComponent_BP_GetAttackParamAsInt::ActionName' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_GetAttackParamAsInt, ParamPath) == 0x000010, "Member 'CharacterAttackComponent_BP_GetAttackParamAsInt::ParamPath' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_GetAttackParamAsInt, AttackLevel) == 0x000020, "Member 'CharacterAttackComponent_BP_GetAttackParamAsInt::AttackLevel' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_GetAttackParamAsInt, MasterId) == 0x000024, "Member 'CharacterAttackComponent_BP_GetAttackParamAsInt::MasterId' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_GetAttackParamAsInt, ReturnValue) == 0x000028, "Member 'CharacterAttackComponent_BP_GetAttackParamAsInt::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_GetAttackParamAsString
// 0x0038 (0x0038 - 0x0000)
struct CharacterAttackComponent_BP_GetAttackParamAsString final
{
public:
	class FString                                 ActionName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ParamPath;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackLevel;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterId                                  MasterId;                                          // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_GetAttackParamAsString) == 0x000008, "Wrong alignment on CharacterAttackComponent_BP_GetAttackParamAsString");
static_assert(sizeof(CharacterAttackComponent_BP_GetAttackParamAsString) == 0x000038, "Wrong size on CharacterAttackComponent_BP_GetAttackParamAsString");
static_assert(offsetof(CharacterAttackComponent_BP_GetAttackParamAsString, ActionName) == 0x000000, "Member 'CharacterAttackComponent_BP_GetAttackParamAsString::ActionName' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_GetAttackParamAsString, ParamPath) == 0x000010, "Member 'CharacterAttackComponent_BP_GetAttackParamAsString::ParamPath' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_GetAttackParamAsString, AttackLevel) == 0x000020, "Member 'CharacterAttackComponent_BP_GetAttackParamAsString::AttackLevel' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_GetAttackParamAsString, MasterId) == 0x000024, "Member 'CharacterAttackComponent_BP_GetAttackParamAsString::MasterId' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_GetAttackParamAsString, ReturnValue) == 0x000028, "Member 'CharacterAttackComponent_BP_GetAttackParamAsString::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_GetAttackPhaseCurrentTimeSeconds
// 0x0004 (0x0004 - 0x0000)
struct CharacterAttackComponent_BP_GetAttackPhaseCurrentTimeSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_GetAttackPhaseCurrentTimeSeconds) == 0x000004, "Wrong alignment on CharacterAttackComponent_BP_GetAttackPhaseCurrentTimeSeconds");
static_assert(sizeof(CharacterAttackComponent_BP_GetAttackPhaseCurrentTimeSeconds) == 0x000004, "Wrong size on CharacterAttackComponent_BP_GetAttackPhaseCurrentTimeSeconds");
static_assert(offsetof(CharacterAttackComponent_BP_GetAttackPhaseCurrentTimeSeconds, ReturnValue) == 0x000000, "Member 'CharacterAttackComponent_BP_GetAttackPhaseCurrentTimeSeconds::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_GetAttackPhaseFinished
// 0x0001 (0x0001 - 0x0000)
struct CharacterAttackComponent_BP_GetAttackPhaseFinished final
{
public:
	EAttackPhaseEndFlag                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_GetAttackPhaseFinished) == 0x000001, "Wrong alignment on CharacterAttackComponent_BP_GetAttackPhaseFinished");
static_assert(sizeof(CharacterAttackComponent_BP_GetAttackPhaseFinished) == 0x000001, "Wrong size on CharacterAttackComponent_BP_GetAttackPhaseFinished");
static_assert(offsetof(CharacterAttackComponent_BP_GetAttackPhaseFinished, ReturnValue) == 0x000000, "Member 'CharacterAttackComponent_BP_GetAttackPhaseFinished::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_GetAttackTargetActor
// 0x0008 (0x0008 - 0x0000)
struct CharacterAttackComponent_BP_GetAttackTargetActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_GetAttackTargetActor) == 0x000008, "Wrong alignment on CharacterAttackComponent_BP_GetAttackTargetActor");
static_assert(sizeof(CharacterAttackComponent_BP_GetAttackTargetActor) == 0x000008, "Wrong size on CharacterAttackComponent_BP_GetAttackTargetActor");
static_assert(offsetof(CharacterAttackComponent_BP_GetAttackTargetActor, ReturnValue) == 0x000000, "Member 'CharacterAttackComponent_BP_GetAttackTargetActor::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_GetAttackTargetLocation
// 0x000C (0x000C - 0x0000)
struct CharacterAttackComponent_BP_GetAttackTargetLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_GetAttackTargetLocation) == 0x000004, "Wrong alignment on CharacterAttackComponent_BP_GetAttackTargetLocation");
static_assert(sizeof(CharacterAttackComponent_BP_GetAttackTargetLocation) == 0x00000C, "Wrong size on CharacterAttackComponent_BP_GetAttackTargetLocation");
static_assert(offsetof(CharacterAttackComponent_BP_GetAttackTargetLocation, ReturnValue) == 0x000000, "Member 'CharacterAttackComponent_BP_GetAttackTargetLocation::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_GetCurrentAttackCommandId
// 0x0001 (0x0001 - 0x0000)
struct CharacterAttackComponent_BP_GetCurrentAttackCommandId final
{
public:
	ECommandId                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_GetCurrentAttackCommandId) == 0x000001, "Wrong alignment on CharacterAttackComponent_BP_GetCurrentAttackCommandId");
static_assert(sizeof(CharacterAttackComponent_BP_GetCurrentAttackCommandId) == 0x000001, "Wrong size on CharacterAttackComponent_BP_GetCurrentAttackCommandId");
static_assert(offsetof(CharacterAttackComponent_BP_GetCurrentAttackCommandId, ReturnValue) == 0x000000, "Member 'CharacterAttackComponent_BP_GetCurrentAttackCommandId::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_GetCurrentAttackPhase
// 0x0004 (0x0004 - 0x0000)
struct CharacterAttackComponent_BP_GetCurrentAttackPhase final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_GetCurrentAttackPhase) == 0x000004, "Wrong alignment on CharacterAttackComponent_BP_GetCurrentAttackPhase");
static_assert(sizeof(CharacterAttackComponent_BP_GetCurrentAttackPhase) == 0x000004, "Wrong size on CharacterAttackComponent_BP_GetCurrentAttackPhase");
static_assert(offsetof(CharacterAttackComponent_BP_GetCurrentAttackPhase, ReturnValue) == 0x000000, "Member 'CharacterAttackComponent_BP_GetCurrentAttackPhase::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_GetCurrentAttackUniqueLevel
// 0x0004 (0x0004 - 0x0000)
struct CharacterAttackComponent_BP_GetCurrentAttackUniqueLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_GetCurrentAttackUniqueLevel) == 0x000004, "Wrong alignment on CharacterAttackComponent_BP_GetCurrentAttackUniqueLevel");
static_assert(sizeof(CharacterAttackComponent_BP_GetCurrentAttackUniqueLevel) == 0x000004, "Wrong size on CharacterAttackComponent_BP_GetCurrentAttackUniqueLevel");
static_assert(offsetof(CharacterAttackComponent_BP_GetCurrentAttackUniqueLevel, ReturnValue) == 0x000000, "Member 'CharacterAttackComponent_BP_GetCurrentAttackUniqueLevel::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_GetCurrentLockOnCount
// 0x0004 (0x0004 - 0x0000)
struct CharacterAttackComponent_BP_GetCurrentLockOnCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_GetCurrentLockOnCount) == 0x000004, "Wrong alignment on CharacterAttackComponent_BP_GetCurrentLockOnCount");
static_assert(sizeof(CharacterAttackComponent_BP_GetCurrentLockOnCount) == 0x000004, "Wrong size on CharacterAttackComponent_BP_GetCurrentLockOnCount");
static_assert(offsetof(CharacterAttackComponent_BP_GetCurrentLockOnCount, ReturnValue) == 0x000000, "Member 'CharacterAttackComponent_BP_GetCurrentLockOnCount::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_GetLastBullet
// 0x0008 (0x0008 - 0x0000)
struct CharacterAttackComponent_BP_GetLastBullet final
{
public:
	class ACustomBullet*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_GetLastBullet) == 0x000008, "Wrong alignment on CharacterAttackComponent_BP_GetLastBullet");
static_assert(sizeof(CharacterAttackComponent_BP_GetLastBullet) == 0x000008, "Wrong size on CharacterAttackComponent_BP_GetLastBullet");
static_assert(offsetof(CharacterAttackComponent_BP_GetLastBullet, ReturnValue) == 0x000000, "Member 'CharacterAttackComponent_BP_GetLastBullet::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_GetLastBulletLocation
// 0x0010 (0x0010 - 0x0000)
struct CharacterAttackComponent_BP_GetLastBulletLocation final
{
public:
	bool                                          bValidity;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_GetLastBulletLocation) == 0x000004, "Wrong alignment on CharacterAttackComponent_BP_GetLastBulletLocation");
static_assert(sizeof(CharacterAttackComponent_BP_GetLastBulletLocation) == 0x000010, "Wrong size on CharacterAttackComponent_BP_GetLastBulletLocation");
static_assert(offsetof(CharacterAttackComponent_BP_GetLastBulletLocation, bValidity) == 0x000000, "Member 'CharacterAttackComponent_BP_GetLastBulletLocation::bValidity' has a wrong offset!");
static_assert(offsetof(CharacterAttackComponent_BP_GetLastBulletLocation, ReturnValue) == 0x000004, "Member 'CharacterAttackComponent_BP_GetLastBulletLocation::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_GetMultiLockOnEnableTime
// 0x0004 (0x0004 - 0x0000)
struct CharacterAttackComponent_BP_GetMultiLockOnEnableTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_GetMultiLockOnEnableTime) == 0x000004, "Wrong alignment on CharacterAttackComponent_BP_GetMultiLockOnEnableTime");
static_assert(sizeof(CharacterAttackComponent_BP_GetMultiLockOnEnableTime) == 0x000004, "Wrong size on CharacterAttackComponent_BP_GetMultiLockOnEnableTime");
static_assert(offsetof(CharacterAttackComponent_BP_GetMultiLockOnEnableTime, ReturnValue) == 0x000000, "Member 'CharacterAttackComponent_BP_GetMultiLockOnEnableTime::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_GetRandomStream
// 0x0008 (0x0008 - 0x0000)
struct CharacterAttackComponent_BP_GetRandomStream final
{
public:
	struct FRandomStream                          ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_GetRandomStream) == 0x000004, "Wrong alignment on CharacterAttackComponent_BP_GetRandomStream");
static_assert(sizeof(CharacterAttackComponent_BP_GetRandomStream) == 0x000008, "Wrong size on CharacterAttackComponent_BP_GetRandomStream");
static_assert(offsetof(CharacterAttackComponent_BP_GetRandomStream, ReturnValue) == 0x000000, "Member 'CharacterAttackComponent_BP_GetRandomStream::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_GetRealtimeTargetDirection
// 0x000C (0x000C - 0x0000)
struct CharacterAttackComponent_BP_GetRealtimeTargetDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_GetRealtimeTargetDirection) == 0x000004, "Wrong alignment on CharacterAttackComponent_BP_GetRealtimeTargetDirection");
static_assert(sizeof(CharacterAttackComponent_BP_GetRealtimeTargetDirection) == 0x00000C, "Wrong size on CharacterAttackComponent_BP_GetRealtimeTargetDirection");
static_assert(offsetof(CharacterAttackComponent_BP_GetRealtimeTargetDirection, ReturnValue) == 0x000000, "Member 'CharacterAttackComponent_BP_GetRealtimeTargetDirection::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_GetStickDirection
// 0x0008 (0x0008 - 0x0000)
struct CharacterAttackComponent_BP_GetStickDirection final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_GetStickDirection) == 0x000004, "Wrong alignment on CharacterAttackComponent_BP_GetStickDirection");
static_assert(sizeof(CharacterAttackComponent_BP_GetStickDirection) == 0x000008, "Wrong size on CharacterAttackComponent_BP_GetStickDirection");
static_assert(offsetof(CharacterAttackComponent_BP_GetStickDirection, ReturnValue) == 0x000000, "Member 'CharacterAttackComponent_BP_GetStickDirection::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_GetStickDirectionSimple
// 0x0008 (0x0008 - 0x0000)
struct CharacterAttackComponent_BP_GetStickDirectionSimple final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_GetStickDirectionSimple) == 0x000004, "Wrong alignment on CharacterAttackComponent_BP_GetStickDirectionSimple");
static_assert(sizeof(CharacterAttackComponent_BP_GetStickDirectionSimple) == 0x000008, "Wrong size on CharacterAttackComponent_BP_GetStickDirectionSimple");
static_assert(offsetof(CharacterAttackComponent_BP_GetStickDirectionSimple, ReturnValue) == 0x000000, "Member 'CharacterAttackComponent_BP_GetStickDirectionSimple::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_GetTargetDirection
// 0x000C (0x000C - 0x0000)
struct CharacterAttackComponent_BP_GetTargetDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_GetTargetDirection) == 0x000004, "Wrong alignment on CharacterAttackComponent_BP_GetTargetDirection");
static_assert(sizeof(CharacterAttackComponent_BP_GetTargetDirection) == 0x00000C, "Wrong size on CharacterAttackComponent_BP_GetTargetDirection");
static_assert(offsetof(CharacterAttackComponent_BP_GetTargetDirection, ReturnValue) == 0x000000, "Member 'CharacterAttackComponent_BP_GetTargetDirection::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_IsCatchedBullet
// 0x0001 (0x0001 - 0x0000)
struct CharacterAttackComponent_BP_IsCatchedBullet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_IsCatchedBullet) == 0x000001, "Wrong alignment on CharacterAttackComponent_BP_IsCatchedBullet");
static_assert(sizeof(CharacterAttackComponent_BP_IsCatchedBullet) == 0x000001, "Wrong size on CharacterAttackComponent_BP_IsCatchedBullet");
static_assert(offsetof(CharacterAttackComponent_BP_IsCatchedBullet, ReturnValue) == 0x000000, "Member 'CharacterAttackComponent_BP_IsCatchedBullet::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_IsChaseState
// 0x0001 (0x0001 - 0x0000)
struct CharacterAttackComponent_BP_IsChaseState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_IsChaseState) == 0x000001, "Wrong alignment on CharacterAttackComponent_BP_IsChaseState");
static_assert(sizeof(CharacterAttackComponent_BP_IsChaseState) == 0x000001, "Wrong size on CharacterAttackComponent_BP_IsChaseState");
static_assert(offsetof(CharacterAttackComponent_BP_IsChaseState, ReturnValue) == 0x000000, "Member 'CharacterAttackComponent_BP_IsChaseState::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_IsEnableAttackLanding
// 0x0001 (0x0001 - 0x0000)
struct CharacterAttackComponent_BP_IsEnableAttackLanding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_IsEnableAttackLanding) == 0x000001, "Wrong alignment on CharacterAttackComponent_BP_IsEnableAttackLanding");
static_assert(sizeof(CharacterAttackComponent_BP_IsEnableAttackLanding) == 0x000001, "Wrong size on CharacterAttackComponent_BP_IsEnableAttackLanding");
static_assert(offsetof(CharacterAttackComponent_BP_IsEnableAttackLanding, ReturnValue) == 0x000000, "Member 'CharacterAttackComponent_BP_IsEnableAttackLanding::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_IsEndAttackOnAirial
// 0x0001 (0x0001 - 0x0000)
struct CharacterAttackComponent_BP_IsEndAttackOnAirial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_IsEndAttackOnAirial) == 0x000001, "Wrong alignment on CharacterAttackComponent_BP_IsEndAttackOnAirial");
static_assert(sizeof(CharacterAttackComponent_BP_IsEndAttackOnAirial) == 0x000001, "Wrong size on CharacterAttackComponent_BP_IsEndAttackOnAirial");
static_assert(offsetof(CharacterAttackComponent_BP_IsEndAttackOnAirial, ReturnValue) == 0x000000, "Member 'CharacterAttackComponent_BP_IsEndAttackOnAirial::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_IsHItAttack
// 0x0001 (0x0001 - 0x0000)
struct CharacterAttackComponent_BP_IsHItAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_IsHItAttack) == 0x000001, "Wrong alignment on CharacterAttackComponent_BP_IsHItAttack");
static_assert(sizeof(CharacterAttackComponent_BP_IsHItAttack) == 0x000001, "Wrong size on CharacterAttackComponent_BP_IsHItAttack");
static_assert(offsetof(CharacterAttackComponent_BP_IsHItAttack, ReturnValue) == 0x000000, "Member 'CharacterAttackComponent_BP_IsHItAttack::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_IsSatisfiedHoldCommand
// 0x0001 (0x0001 - 0x0000)
struct CharacterAttackComponent_BP_IsSatisfiedHoldCommand final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_IsSatisfiedHoldCommand) == 0x000001, "Wrong alignment on CharacterAttackComponent_BP_IsSatisfiedHoldCommand");
static_assert(sizeof(CharacterAttackComponent_BP_IsSatisfiedHoldCommand) == 0x000001, "Wrong size on CharacterAttackComponent_BP_IsSatisfiedHoldCommand");
static_assert(offsetof(CharacterAttackComponent_BP_IsSatisfiedHoldCommand, ReturnValue) == 0x000000, "Member 'CharacterAttackComponent_BP_IsSatisfiedHoldCommand::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.BP_IsValidAttackCommand
// 0x0001 (0x0001 - 0x0000)
struct CharacterAttackComponent_BP_IsValidAttackCommand final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_BP_IsValidAttackCommand) == 0x000001, "Wrong alignment on CharacterAttackComponent_BP_IsValidAttackCommand");
static_assert(sizeof(CharacterAttackComponent_BP_IsValidAttackCommand) == 0x000001, "Wrong size on CharacterAttackComponent_BP_IsValidAttackCommand");
static_assert(offsetof(CharacterAttackComponent_BP_IsValidAttackCommand, ReturnValue) == 0x000000, "Member 'CharacterAttackComponent_BP_IsValidAttackCommand::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterAttackComponent.GetRealtimeTargetLocation
// 0x000C (0x000C - 0x0000)
struct CharacterAttackComponent_GetRealtimeTargetLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackComponent_GetRealtimeTargetLocation) == 0x000004, "Wrong alignment on CharacterAttackComponent_GetRealtimeTargetLocation");
static_assert(sizeof(CharacterAttackComponent_GetRealtimeTargetLocation) == 0x00000C, "Wrong size on CharacterAttackComponent_GetRealtimeTargetLocation");
static_assert(offsetof(CharacterAttackComponent_GetRealtimeTargetLocation, ReturnValue) == 0x000000, "Member 'CharacterAttackComponent_GetRealtimeTargetLocation::ReturnValue' has a wrong offset!");

// Function InGameModule.Ch100_ActionAttack_Special.BP_SetGiantLocal
// 0x0001 (0x0001 - 0x0000)
struct Ch100_ActionAttack_Special_BP_SetGiantLocal final
{
public:
	bool                                          bGiant;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch100_ActionAttack_Special_BP_SetGiantLocal) == 0x000001, "Wrong alignment on Ch100_ActionAttack_Special_BP_SetGiantLocal");
static_assert(sizeof(Ch100_ActionAttack_Special_BP_SetGiantLocal) == 0x000001, "Wrong size on Ch100_ActionAttack_Special_BP_SetGiantLocal");
static_assert(offsetof(Ch100_ActionAttack_Special_BP_SetGiantLocal, bGiant) == 0x000000, "Member 'Ch100_ActionAttack_Special_BP_SetGiantLocal::bGiant' has a wrong offset!");

// Function InGameModule.Ch100_ActionAttack_Special.BP_SetParticleScale
// 0x0004 (0x0004 - 0x0000)
struct Ch100_ActionAttack_Special_BP_SetParticleScale final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch100_ActionAttack_Special_BP_SetParticleScale) == 0x000004, "Wrong alignment on Ch100_ActionAttack_Special_BP_SetParticleScale");
static_assert(sizeof(Ch100_ActionAttack_Special_BP_SetParticleScale) == 0x000004, "Wrong size on Ch100_ActionAttack_Special_BP_SetParticleScale");
static_assert(offsetof(Ch100_ActionAttack_Special_BP_SetParticleScale, Rate) == 0x000000, "Member 'Ch100_ActionAttack_Special_BP_SetParticleScale::Rate' has a wrong offset!");

// Function InGameModule.Ch004Unique3_Child_Var01.BP_PhysicsOnHitBackground
// 0x0088 (0x0088 - 0x0000)
struct Ch004Unique3_Child_Var01_BP_PhysicsOnHitBackground final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch004Unique3_Child_Var01_BP_PhysicsOnHitBackground) == 0x000004, "Wrong alignment on Ch004Unique3_Child_Var01_BP_PhysicsOnHitBackground");
static_assert(sizeof(Ch004Unique3_Child_Var01_BP_PhysicsOnHitBackground) == 0x000088, "Wrong size on Ch004Unique3_Child_Var01_BP_PhysicsOnHitBackground");
static_assert(offsetof(Ch004Unique3_Child_Var01_BP_PhysicsOnHitBackground, Hit) == 0x000000, "Member 'Ch004Unique3_Child_Var01_BP_PhysicsOnHitBackground::Hit' has a wrong offset!");

// Function InGameModule.Ch046Unique1Gen.Fire
// 0x000C (0x000C - 0x0000)
struct Ch046Unique1Gen_Fire final
{
public:
	struct FCh046BulletInfo                       bulletInfo;                                        // 0x0000(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch046Unique1Gen_Fire) == 0x000004, "Wrong alignment on Ch046Unique1Gen_Fire");
static_assert(sizeof(Ch046Unique1Gen_Fire) == 0x00000C, "Wrong size on Ch046Unique1Gen_Fire");
static_assert(offsetof(Ch046Unique1Gen_Fire, bulletInfo) == 0x000000, "Member 'Ch046Unique1Gen_Fire::bulletInfo' has a wrong offset!");

// Function InGameModule.Cracks.GetMID
// 0x0008 (0x0008 - 0x0000)
struct Cracks_GetMID final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cracks_GetMID) == 0x000008, "Wrong alignment on Cracks_GetMID");
static_assert(sizeof(Cracks_GetMID) == 0x000008, "Wrong size on Cracks_GetMID");
static_assert(offsetof(Cracks_GetMID, ReturnValue) == 0x000000, "Member 'Cracks_GetMID::ReturnValue' has a wrong offset!");

// Function InGameModule.Cracks.GetRandomZRot
// 0x0004 (0x0004 - 0x0000)
struct Cracks_GetRandomZRot final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cracks_GetRandomZRot) == 0x000004, "Wrong alignment on Cracks_GetRandomZRot");
static_assert(sizeof(Cracks_GetRandomZRot) == 0x000004, "Wrong size on Cracks_GetRandomZRot");
static_assert(offsetof(Cracks_GetRandomZRot, ReturnValue) == 0x000000, "Member 'Cracks_GetRandomZRot::ReturnValue' has a wrong offset!");

// Function InGameModule.Cracks.SetMID
// 0x0010 (0x0010 - 0x0000)
struct Cracks_SetMID final
{
public:
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cracks_SetMID) == 0x000008, "Wrong alignment on Cracks_SetMID");
static_assert(sizeof(Cracks_SetMID) == 0x000010, "Wrong size on Cracks_SetMID");
static_assert(offsetof(Cracks_SetMID, Mid) == 0x000000, "Member 'Cracks_SetMID::Mid' has a wrong offset!");
static_assert(offsetof(Cracks_SetMID, ReturnValue) == 0x000008, "Member 'Cracks_SetMID::ReturnValue' has a wrong offset!");

// Function InGameModule.Ch038.CatchSuccessed_ToClient
// 0x0008 (0x0008 - 0x0000)
struct Ch038_CatchSuccessed_ToClient final
{
public:
	class ACharacterBattle*                       Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch038_CatchSuccessed_ToClient) == 0x000008, "Wrong alignment on Ch038_CatchSuccessed_ToClient");
static_assert(sizeof(Ch038_CatchSuccessed_ToClient) == 0x000008, "Wrong size on Ch038_CatchSuccessed_ToClient");
static_assert(offsetof(Ch038_CatchSuccessed_ToClient, Target) == 0x000000, "Member 'Ch038_CatchSuccessed_ToClient::Target' has a wrong offset!");

// Function InGameModule.Ch038.CatchSuccessed_ToSever
// 0x0008 (0x0008 - 0x0000)
struct Ch038_CatchSuccessed_ToSever final
{
public:
	class ACharacterBattle*                       Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch038_CatchSuccessed_ToSever) == 0x000008, "Wrong alignment on Ch038_CatchSuccessed_ToSever");
static_assert(sizeof(Ch038_CatchSuccessed_ToSever) == 0x000008, "Wrong size on Ch038_CatchSuccessed_ToSever");
static_assert(offsetof(Ch038_CatchSuccessed_ToSever, Target) == 0x000000, "Member 'Ch038_CatchSuccessed_ToSever::Target' has a wrong offset!");

// Function InGameModule.Ch101SpecialGen.CreateCh101Special_RPC
// 0x0014 (0x0014 - 0x0000)
struct Ch101SpecialGen_CreateCh101Special_RPC final
{
public:
	struct FCh101SpecialGenRep                    Gen;                                               // 0x0000(0x0014)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch101SpecialGen_CreateCh101Special_RPC) == 0x000004, "Wrong alignment on Ch101SpecialGen_CreateCh101Special_RPC");
static_assert(sizeof(Ch101SpecialGen_CreateCh101Special_RPC) == 0x000014, "Wrong size on Ch101SpecialGen_CreateCh101Special_RPC");
static_assert(offsetof(Ch101SpecialGen_CreateCh101Special_RPC, Gen) == 0x000000, "Member 'Ch101SpecialGen_CreateCh101Special_RPC::Gen' has a wrong offset!");

// Function InGameModule.Ch007Unique1Gen.CreateConnectPoint_RPC
// 0x0010 (0x0010 - 0x0000)
struct Ch007Unique1Gen_CreateConnectPoint_RPC final
{
public:
	struct FThunderShotGenRep                     Gen;                                               // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch007Unique1Gen_CreateConnectPoint_RPC) == 0x000004, "Wrong alignment on Ch007Unique1Gen_CreateConnectPoint_RPC");
static_assert(sizeof(Ch007Unique1Gen_CreateConnectPoint_RPC) == 0x000010, "Wrong size on Ch007Unique1Gen_CreateConnectPoint_RPC");
static_assert(offsetof(Ch007Unique1Gen_CreateConnectPoint_RPC, Gen) == 0x000000, "Member 'Ch007Unique1Gen_CreateConnectPoint_RPC::Gen' has a wrong offset!");

// Function InGameModule.Portal.CharacterOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct Portal_CharacterOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Portal_CharacterOverlap) == 0x000008, "Wrong alignment on Portal_CharacterOverlap");
static_assert(sizeof(Portal_CharacterOverlap) == 0x0000A8, "Wrong size on Portal_CharacterOverlap");
static_assert(offsetof(Portal_CharacterOverlap, OverlappedComp) == 0x000000, "Member 'Portal_CharacterOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(Portal_CharacterOverlap, OtherActor) == 0x000008, "Member 'Portal_CharacterOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(Portal_CharacterOverlap, OtherComp) == 0x000010, "Member 'Portal_CharacterOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(Portal_CharacterOverlap, OtherBodyIndex) == 0x000018, "Member 'Portal_CharacterOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Portal_CharacterOverlap, bFromSweep) == 0x00001C, "Member 'Portal_CharacterOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(Portal_CharacterOverlap, SweepResult) == 0x000020, "Member 'Portal_CharacterOverlap::SweepResult' has a wrong offset!");

// Function InGameModule.Portal.OnEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct Portal_OnEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Portal_OnEndOverlap) == 0x000008, "Wrong alignment on Portal_OnEndOverlap");
static_assert(sizeof(Portal_OnEndOverlap) == 0x000020, "Wrong size on Portal_OnEndOverlap");
static_assert(offsetof(Portal_OnEndOverlap, OverlappedComp) == 0x000000, "Member 'Portal_OnEndOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(Portal_OnEndOverlap, OtherActor) == 0x000008, "Member 'Portal_OnEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(Portal_OnEndOverlap, OtherComp) == 0x000010, "Member 'Portal_OnEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(Portal_OnEndOverlap, OtherBodyIndex) == 0x000018, "Member 'Portal_OnEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function InGameModule.Portal.OnParticleEnd
// 0x0034 (0x0034 - 0x0000)
struct Portal_OnParticleEnd final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmitterTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParticleTime;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Portal_OnParticleEnd) == 0x000004, "Wrong alignment on Portal_OnParticleEnd");
static_assert(sizeof(Portal_OnParticleEnd) == 0x000034, "Wrong size on Portal_OnParticleEnd");
static_assert(offsetof(Portal_OnParticleEnd, EventName) == 0x000000, "Member 'Portal_OnParticleEnd::EventName' has a wrong offset!");
static_assert(offsetof(Portal_OnParticleEnd, EmitterTime) == 0x000008, "Member 'Portal_OnParticleEnd::EmitterTime' has a wrong offset!");
static_assert(offsetof(Portal_OnParticleEnd, ParticleTime) == 0x00000C, "Member 'Portal_OnParticleEnd::ParticleTime' has a wrong offset!");
static_assert(offsetof(Portal_OnParticleEnd, Location) == 0x000010, "Member 'Portal_OnParticleEnd::Location' has a wrong offset!");
static_assert(offsetof(Portal_OnParticleEnd, Velocity) == 0x00001C, "Member 'Portal_OnParticleEnd::Velocity' has a wrong offset!");
static_assert(offsetof(Portal_OnParticleEnd, Direction) == 0x000028, "Member 'Portal_OnParticleEnd::Direction' has a wrong offset!");

// Function InGameModule.Ch007Unique2.SetFoolVanish
// 0x0001 (0x0001 - 0x0000)
struct Ch007Unique2_SetFoolVanish final
{
public:
	bool                                          IsFool;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch007Unique2_SetFoolVanish) == 0x000001, "Wrong alignment on Ch007Unique2_SetFoolVanish");
static_assert(sizeof(Ch007Unique2_SetFoolVanish) == 0x000001, "Wrong size on Ch007Unique2_SetFoolVanish");
static_assert(offsetof(Ch007Unique2_SetFoolVanish, IsFool) == 0x000000, "Member 'Ch007Unique2_SetFoolVanish::IsFool' has a wrong offset!");

// Function InGameModule.Ch008.BP_IsUnbreakable
// 0x0001 (0x0001 - 0x0000)
struct Ch008_BP_IsUnbreakable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch008_BP_IsUnbreakable) == 0x000001, "Wrong alignment on Ch008_BP_IsUnbreakable");
static_assert(sizeof(Ch008_BP_IsUnbreakable) == 0x000001, "Wrong size on Ch008_BP_IsUnbreakable");
static_assert(offsetof(Ch008_BP_IsUnbreakable, ReturnValue) == 0x000000, "Member 'Ch008_BP_IsUnbreakable::ReturnValue' has a wrong offset!");

// Function InGameModule.Ch008.BP_SetUnbreakable
// 0x0001 (0x0001 - 0x0000)
struct Ch008_BP_SetUnbreakable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch008_BP_SetUnbreakable) == 0x000001, "Wrong alignment on Ch008_BP_SetUnbreakable");
static_assert(sizeof(Ch008_BP_SetUnbreakable) == 0x000001, "Wrong size on Ch008_BP_SetUnbreakable");
static_assert(offsetof(Ch008_BP_SetUnbreakable, bEnable) == 0x000000, "Member 'Ch008_BP_SetUnbreakable::bEnable' has a wrong offset!");

// Function InGameModule.CharacterAddPartsComponent.BP_DisableAddParts
// 0x0008 (0x0008 - 0x0000)
struct CharacterAddPartsComponent_BP_DisableAddParts final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAddPartsComponent_BP_DisableAddParts) == 0x000004, "Wrong alignment on CharacterAddPartsComponent_BP_DisableAddParts");
static_assert(sizeof(CharacterAddPartsComponent_BP_DisableAddParts) == 0x000008, "Wrong size on CharacterAddPartsComponent_BP_DisableAddParts");
static_assert(offsetof(CharacterAddPartsComponent_BP_DisableAddParts, Key) == 0x000000, "Member 'CharacterAddPartsComponent_BP_DisableAddParts::Key' has a wrong offset!");

// Function InGameModule.CharacterAddPartsComponent.BP_EnableAddParts
// 0x0008 (0x0008 - 0x0000)
struct CharacterAddPartsComponent_BP_EnableAddParts final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAddPartsComponent_BP_EnableAddParts) == 0x000004, "Wrong alignment on CharacterAddPartsComponent_BP_EnableAddParts");
static_assert(sizeof(CharacterAddPartsComponent_BP_EnableAddParts) == 0x000008, "Wrong size on CharacterAddPartsComponent_BP_EnableAddParts");
static_assert(offsetof(CharacterAddPartsComponent_BP_EnableAddParts, Key) == 0x000000, "Member 'CharacterAddPartsComponent_BP_EnableAddParts::Key' has a wrong offset!");

// Function InGameModule.CharacterAddPartsComponent.BP_IsEnableAddParts
// 0x000C (0x000C - 0x0000)
struct CharacterAddPartsComponent_BP_IsEnableAddParts final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterAddPartsComponent_BP_IsEnableAddParts) == 0x000004, "Wrong alignment on CharacterAddPartsComponent_BP_IsEnableAddParts");
static_assert(sizeof(CharacterAddPartsComponent_BP_IsEnableAddParts) == 0x00000C, "Wrong size on CharacterAddPartsComponent_BP_IsEnableAddParts");
static_assert(offsetof(CharacterAddPartsComponent_BP_IsEnableAddParts, Key) == 0x000000, "Member 'CharacterAddPartsComponent_BP_IsEnableAddParts::Key' has a wrong offset!");
static_assert(offsetof(CharacterAddPartsComponent_BP_IsEnableAddParts, ReturnValue) == 0x000008, "Member 'CharacterAddPartsComponent_BP_IsEnableAddParts::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterAddPartsComponent.BP_RegisterParticle
// 0x0060 (0x0060 - 0x0000)
struct CharacterAddPartsComponent_BP_RegisterParticle final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        ParticleSystem;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0020(0x0030)(ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0xE];                                       // 0x0052(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterAddPartsComponent_BP_RegisterParticle) == 0x000010, "Wrong alignment on CharacterAddPartsComponent_BP_RegisterParticle");
static_assert(sizeof(CharacterAddPartsComponent_BP_RegisterParticle) == 0x000060, "Wrong size on CharacterAddPartsComponent_BP_RegisterParticle");
static_assert(offsetof(CharacterAddPartsComponent_BP_RegisterParticle, Key) == 0x000000, "Member 'CharacterAddPartsComponent_BP_RegisterParticle::Key' has a wrong offset!");
static_assert(offsetof(CharacterAddPartsComponent_BP_RegisterParticle, ParticleSystem) == 0x000008, "Member 'CharacterAddPartsComponent_BP_RegisterParticle::ParticleSystem' has a wrong offset!");
static_assert(offsetof(CharacterAddPartsComponent_BP_RegisterParticle, SocketName) == 0x000010, "Member 'CharacterAddPartsComponent_BP_RegisterParticle::SocketName' has a wrong offset!");
static_assert(offsetof(CharacterAddPartsComponent_BP_RegisterParticle, Transform) == 0x000020, "Member 'CharacterAddPartsComponent_BP_RegisterParticle::Transform' has a wrong offset!");
static_assert(offsetof(CharacterAddPartsComponent_BP_RegisterParticle, LocationType) == 0x000050, "Member 'CharacterAddPartsComponent_BP_RegisterParticle::LocationType' has a wrong offset!");
static_assert(offsetof(CharacterAddPartsComponent_BP_RegisterParticle, bAutoDestroy) == 0x000051, "Member 'CharacterAddPartsComponent_BP_RegisterParticle::bAutoDestroy' has a wrong offset!");

// Function InGameModule.CharacterAddPartsComponent.BP_RegisterSkeletalMesh
// 0x0050 (0x0050 - 0x0000)
struct CharacterAddPartsComponent_BP_RegisterSkeletalMesh final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          Asset;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0020(0x0030)(ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAddPartsComponent_BP_RegisterSkeletalMesh) == 0x000010, "Wrong alignment on CharacterAddPartsComponent_BP_RegisterSkeletalMesh");
static_assert(sizeof(CharacterAddPartsComponent_BP_RegisterSkeletalMesh) == 0x000050, "Wrong size on CharacterAddPartsComponent_BP_RegisterSkeletalMesh");
static_assert(offsetof(CharacterAddPartsComponent_BP_RegisterSkeletalMesh, Key) == 0x000000, "Member 'CharacterAddPartsComponent_BP_RegisterSkeletalMesh::Key' has a wrong offset!");
static_assert(offsetof(CharacterAddPartsComponent_BP_RegisterSkeletalMesh, Asset) == 0x000008, "Member 'CharacterAddPartsComponent_BP_RegisterSkeletalMesh::Asset' has a wrong offset!");
static_assert(offsetof(CharacterAddPartsComponent_BP_RegisterSkeletalMesh, SocketName) == 0x000010, "Member 'CharacterAddPartsComponent_BP_RegisterSkeletalMesh::SocketName' has a wrong offset!");
static_assert(offsetof(CharacterAddPartsComponent_BP_RegisterSkeletalMesh, Transform) == 0x000020, "Member 'CharacterAddPartsComponent_BP_RegisterSkeletalMesh::Transform' has a wrong offset!");

// Function InGameModule.CharacterAddPartsComponent.BP_RegisterStaticMesh
// 0x0050 (0x0050 - 0x0000)
struct CharacterAddPartsComponent_BP_RegisterStaticMesh final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            Asset;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0020(0x0030)(ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAddPartsComponent_BP_RegisterStaticMesh) == 0x000010, "Wrong alignment on CharacterAddPartsComponent_BP_RegisterStaticMesh");
static_assert(sizeof(CharacterAddPartsComponent_BP_RegisterStaticMesh) == 0x000050, "Wrong size on CharacterAddPartsComponent_BP_RegisterStaticMesh");
static_assert(offsetof(CharacterAddPartsComponent_BP_RegisterStaticMesh, Key) == 0x000000, "Member 'CharacterAddPartsComponent_BP_RegisterStaticMesh::Key' has a wrong offset!");
static_assert(offsetof(CharacterAddPartsComponent_BP_RegisterStaticMesh, Asset) == 0x000008, "Member 'CharacterAddPartsComponent_BP_RegisterStaticMesh::Asset' has a wrong offset!");
static_assert(offsetof(CharacterAddPartsComponent_BP_RegisterStaticMesh, SocketName) == 0x000010, "Member 'CharacterAddPartsComponent_BP_RegisterStaticMesh::SocketName' has a wrong offset!");
static_assert(offsetof(CharacterAddPartsComponent_BP_RegisterStaticMesh, Transform) == 0x000020, "Member 'CharacterAddPartsComponent_BP_RegisterStaticMesh::Transform' has a wrong offset!");

// Function InGameModule.CharacterAddPartsComponent.BP_UnregisterParts
// 0x0008 (0x0008 - 0x0000)
struct CharacterAddPartsComponent_BP_UnregisterParts final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAddPartsComponent_BP_UnregisterParts) == 0x000004, "Wrong alignment on CharacterAddPartsComponent_BP_UnregisterParts");
static_assert(sizeof(CharacterAddPartsComponent_BP_UnregisterParts) == 0x000008, "Wrong size on CharacterAddPartsComponent_BP_UnregisterParts");
static_assert(offsetof(CharacterAddPartsComponent_BP_UnregisterParts, Key) == 0x000000, "Member 'CharacterAddPartsComponent_BP_UnregisterParts::Key' has a wrong offset!");

// Function InGameModule.CharacterAbilityWidget.BP_AnalogValueScroll
// 0x0040 (0x0040 - 0x0000)
struct CharacterAbilityWidget_BP_AnalogValueScroll final
{
public:
	struct FAnalogInputEvent                      InAnalogEvent;                                     // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAbilityWidget_BP_AnalogValueScroll) == 0x000008, "Wrong alignment on CharacterAbilityWidget_BP_AnalogValueScroll");
static_assert(sizeof(CharacterAbilityWidget_BP_AnalogValueScroll) == 0x000040, "Wrong size on CharacterAbilityWidget_BP_AnalogValueScroll");
static_assert(offsetof(CharacterAbilityWidget_BP_AnalogValueScroll, InAnalogEvent) == 0x000000, "Member 'CharacterAbilityWidget_BP_AnalogValueScroll::InAnalogEvent' has a wrong offset!");

// Function InGameModule.CharacterAbilityWidget.BP_UpdateCharacter
// 0x0008 (0x0008 - 0x0000)
struct CharacterAbilityWidget_BP_UpdateCharacter final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VariationNo;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAbilityWidget_BP_UpdateCharacter) == 0x000004, "Wrong alignment on CharacterAbilityWidget_BP_UpdateCharacter");
static_assert(sizeof(CharacterAbilityWidget_BP_UpdateCharacter) == 0x000008, "Wrong size on CharacterAbilityWidget_BP_UpdateCharacter");
static_assert(offsetof(CharacterAbilityWidget_BP_UpdateCharacter, CharacterId) == 0x000000, "Member 'CharacterAbilityWidget_BP_UpdateCharacter::CharacterId' has a wrong offset!");
static_assert(offsetof(CharacterAbilityWidget_BP_UpdateCharacter, VariationNo) == 0x000004, "Member 'CharacterAbilityWidget_BP_UpdateCharacter::VariationNo' has a wrong offset!");

// Function InGameModule.StateSwitchGen.BP_DecideJsonIndex
// 0x0004 (0x0004 - 0x0000)
struct StateSwitchGen_BP_DecideJsonIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateSwitchGen_BP_DecideJsonIndex) == 0x000004, "Wrong alignment on StateSwitchGen_BP_DecideJsonIndex");
static_assert(sizeof(StateSwitchGen_BP_DecideJsonIndex) == 0x000004, "Wrong size on StateSwitchGen_BP_DecideJsonIndex");
static_assert(offsetof(StateSwitchGen_BP_DecideJsonIndex, ReturnValue) == 0x000000, "Member 'StateSwitchGen_BP_DecideJsonIndex::ReturnValue' has a wrong offset!");

// Function InGameModule.StateSwitchGen.BP_GetOwnerCharacterBattle
// 0x0008 (0x0008 - 0x0000)
struct StateSwitchGen_BP_GetOwnerCharacterBattle final
{
public:
	class ACharacterBattle*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateSwitchGen_BP_GetOwnerCharacterBattle) == 0x000008, "Wrong alignment on StateSwitchGen_BP_GetOwnerCharacterBattle");
static_assert(sizeof(StateSwitchGen_BP_GetOwnerCharacterBattle) == 0x000008, "Wrong size on StateSwitchGen_BP_GetOwnerCharacterBattle");
static_assert(offsetof(StateSwitchGen_BP_GetOwnerCharacterBattle, ReturnValue) == 0x000000, "Member 'StateSwitchGen_BP_GetOwnerCharacterBattle::ReturnValue' has a wrong offset!");

// Function InGameModule.Ch102Unique1Gen.Spawn_RPC
// 0x0010 (0x0010 - 0x0000)
struct Ch102Unique1Gen_Spawn_RPC final
{
public:
	struct FHairShotGenRep                        Rep;                                               // 0x0000(0x0010)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch102Unique1Gen_Spawn_RPC) == 0x000004, "Wrong alignment on Ch102Unique1Gen_Spawn_RPC");
static_assert(sizeof(Ch102Unique1Gen_Spawn_RPC) == 0x000010, "Wrong size on Ch102Unique1Gen_Spawn_RPC");
static_assert(offsetof(Ch102Unique1Gen_Spawn_RPC, Rep) == 0x000000, "Member 'Ch102Unique1Gen_Spawn_RPC::Rep' has a wrong offset!");

// Function InGameModule.Ch010Unique3ShotGen.Create_RPC
// 0x000C (0x000C - 0x0000)
struct Ch010Unique3ShotGen_Create_RPC final
{
public:
	struct FCh010Unique3ShotGenRep                Gen;                                               // 0x0000(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch010Unique3ShotGen_Create_RPC) == 0x000004, "Wrong alignment on Ch010Unique3ShotGen_Create_RPC");
static_assert(sizeof(Ch010Unique3ShotGen_Create_RPC) == 0x00000C, "Wrong size on Ch010Unique3ShotGen_Create_RPC");
static_assert(offsetof(Ch010Unique3ShotGen_Create_RPC, Gen) == 0x000000, "Member 'Ch010Unique3ShotGen_Create_RPC::Gen' has a wrong offset!");

// Function InGameModule.Ch109SpecialGen.PutPoint_RPC
// 0x0010 (0x0010 - 0x0000)
struct Ch109SpecialGen_PutPoint_RPC final
{
public:
	struct FCh109SpecialGenRep                    Gen;                                               // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch109SpecialGen_PutPoint_RPC) == 0x000004, "Wrong alignment on Ch109SpecialGen_PutPoint_RPC");
static_assert(sizeof(Ch109SpecialGen_PutPoint_RPC) == 0x000010, "Wrong size on Ch109SpecialGen_PutPoint_RPC");
static_assert(offsetof(Ch109SpecialGen_PutPoint_RPC, Gen) == 0x000000, "Member 'Ch109SpecialGen_PutPoint_RPC::Gen' has a wrong offset!");

// Function InGameModule.Ch010Unique3ShotGrandChildGen.Create_RPC
// 0x0010 (0x0010 - 0x0000)
struct Ch010Unique3ShotGrandChildGen_Create_RPC final
{
public:
	struct FCh010Unique3ShotGrandChildGenRep      Gen;                                               // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch010Unique3ShotGrandChildGen_Create_RPC) == 0x000004, "Wrong alignment on Ch010Unique3ShotGrandChildGen_Create_RPC");
static_assert(sizeof(Ch010Unique3ShotGrandChildGen_Create_RPC) == 0x000010, "Wrong size on Ch010Unique3ShotGrandChildGen_Create_RPC");
static_assert(offsetof(Ch010Unique3ShotGrandChildGen_Create_RPC, Gen) == 0x000000, "Member 'Ch010Unique3ShotGrandChildGen_Create_RPC::Gen' has a wrong offset!");

// Function InGameModule.Ch016Unique2Shot.SetMIDEnemy
// 0x0010 (0x0010 - 0x0000)
struct Ch016Unique2Shot_SetMIDEnemy final
{
public:
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch016Unique2Shot_SetMIDEnemy) == 0x000008, "Wrong alignment on Ch016Unique2Shot_SetMIDEnemy");
static_assert(sizeof(Ch016Unique2Shot_SetMIDEnemy) == 0x000010, "Wrong size on Ch016Unique2Shot_SetMIDEnemy");
static_assert(offsetof(Ch016Unique2Shot_SetMIDEnemy, Mid) == 0x000000, "Member 'Ch016Unique2Shot_SetMIDEnemy::Mid' has a wrong offset!");
static_assert(offsetof(Ch016Unique2Shot_SetMIDEnemy, ReturnValue) == 0x000008, "Member 'Ch016Unique2Shot_SetMIDEnemy::ReturnValue' has a wrong offset!");

// Function InGameModule.Ch016Unique2Shot.SetMIDFriend
// 0x0010 (0x0010 - 0x0000)
struct Ch016Unique2Shot_SetMIDFriend final
{
public:
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch016Unique2Shot_SetMIDFriend) == 0x000008, "Wrong alignment on Ch016Unique2Shot_SetMIDFriend");
static_assert(sizeof(Ch016Unique2Shot_SetMIDFriend) == 0x000010, "Wrong size on Ch016Unique2Shot_SetMIDFriend");
static_assert(offsetof(Ch016Unique2Shot_SetMIDFriend, Mid) == 0x000000, "Member 'Ch016Unique2Shot_SetMIDFriend::Mid' has a wrong offset!");
static_assert(offsetof(Ch016Unique2Shot_SetMIDFriend, ReturnValue) == 0x000008, "Member 'Ch016Unique2Shot_SetMIDFriend::ReturnValue' has a wrong offset!");

// Function InGameModule.Ch023Unique2ChildGen.SetCreateInfo_ToServer
// 0x0018 (0x0018 - 0x0000)
struct Ch023Unique2ChildGen_SetCreateInfo_ToServer final
{
public:
	struct FCh023Unique2ShotChildGenRep           Gen;                                               // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch023Unique2ChildGen_SetCreateInfo_ToServer) == 0x000008, "Wrong alignment on Ch023Unique2ChildGen_SetCreateInfo_ToServer");
static_assert(sizeof(Ch023Unique2ChildGen_SetCreateInfo_ToServer) == 0x000018, "Wrong size on Ch023Unique2ChildGen_SetCreateInfo_ToServer");
static_assert(offsetof(Ch023Unique2ChildGen_SetCreateInfo_ToServer, Gen) == 0x000000, "Member 'Ch023Unique2ChildGen_SetCreateInfo_ToServer::Gen' has a wrong offset!");

// Function InGameModule.Ch034Unique1Gen.EndAction_RPC
// 0x0001 (0x0001 - 0x0000)
struct Ch034Unique1Gen_EndAction_RPC final
{
public:
	bool                                          bEndAction;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch034Unique1Gen_EndAction_RPC) == 0x000001, "Wrong alignment on Ch034Unique1Gen_EndAction_RPC");
static_assert(sizeof(Ch034Unique1Gen_EndAction_RPC) == 0x000001, "Wrong size on Ch034Unique1Gen_EndAction_RPC");
static_assert(offsetof(Ch034Unique1Gen_EndAction_RPC, bEndAction) == 0x000000, "Member 'Ch034Unique1Gen_EndAction_RPC::bEndAction' has a wrong offset!");

// Function InGameModule.Ch046Unique2Gen.ReceiveDamageT
// 0x00A0 (0x00A0 - 0x0000)
struct Ch046Unique2Gen_ReceiveDamageT final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageValue;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHitMarkType                                  HitMarkType;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0010(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          IsMeleeAttack;                                     // 0x0098(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Ch046Unique2Gen_ReceiveDamageT) == 0x000008, "Wrong alignment on Ch046Unique2Gen_ReceiveDamageT");
static_assert(sizeof(Ch046Unique2Gen_ReceiveDamageT) == 0x0000A0, "Wrong size on Ch046Unique2Gen_ReceiveDamageT");
static_assert(offsetof(Ch046Unique2Gen_ReceiveDamageT, HitComponent) == 0x000000, "Member 'Ch046Unique2Gen_ReceiveDamageT::HitComponent' has a wrong offset!");
static_assert(offsetof(Ch046Unique2Gen_ReceiveDamageT, DamageValue) == 0x000008, "Member 'Ch046Unique2Gen_ReceiveDamageT::DamageValue' has a wrong offset!");
static_assert(offsetof(Ch046Unique2Gen_ReceiveDamageT, HitMarkType) == 0x00000C, "Member 'Ch046Unique2Gen_ReceiveDamageT::HitMarkType' has a wrong offset!");
static_assert(offsetof(Ch046Unique2Gen_ReceiveDamageT, Hit) == 0x000010, "Member 'Ch046Unique2Gen_ReceiveDamageT::Hit' has a wrong offset!");
static_assert(offsetof(Ch046Unique2Gen_ReceiveDamageT, IsMeleeAttack) == 0x000098, "Member 'Ch046Unique2Gen_ReceiveDamageT::IsMeleeAttack' has a wrong offset!");

// Function InGameModule.Ch102SpecialGen.CreateCh102Special_RPC
// 0x0014 (0x0014 - 0x0000)
struct Ch102SpecialGen_CreateCh102Special_RPC final
{
public:
	struct FCh102SpecialGenRep                    Gen;                                               // 0x0000(0x0014)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch102SpecialGen_CreateCh102Special_RPC) == 0x000004, "Wrong alignment on Ch102SpecialGen_CreateCh102Special_RPC");
static_assert(sizeof(Ch102SpecialGen_CreateCh102Special_RPC) == 0x000014, "Wrong size on Ch102SpecialGen_CreateCh102Special_RPC");
static_assert(offsetof(Ch102SpecialGen_CreateCh102Special_RPC, Gen) == 0x000000, "Member 'Ch102SpecialGen_CreateCh102Special_RPC::Gen' has a wrong offset!");

// Function InGameModule.Ch102Unique2.OnReflection
// 0x000C (0x000C - 0x0000)
struct Ch102Unique2_OnReflection final
{
public:
	struct FVector                                Normal;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Ch102Unique2_OnReflection) == 0x000004, "Wrong alignment on Ch102Unique2_OnReflection");
static_assert(sizeof(Ch102Unique2_OnReflection) == 0x00000C, "Wrong size on Ch102Unique2_OnReflection");
static_assert(offsetof(Ch102Unique2_OnReflection, Normal) == 0x000000, "Member 'Ch102Unique2_OnReflection::Normal' has a wrong offset!");

// Function InGameModule.CharacterAbilityPopupWidget.OnDecideReturnButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct CharacterAbilityPopupWidget_OnDecideReturnButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterAbilityPopupWidget_OnDecideReturnButtonEvent) == 0x000008, "Wrong alignment on CharacterAbilityPopupWidget_OnDecideReturnButtonEvent");
static_assert(sizeof(CharacterAbilityPopupWidget_OnDecideReturnButtonEvent) == 0x000010, "Wrong size on CharacterAbilityPopupWidget_OnDecideReturnButtonEvent");
static_assert(offsetof(CharacterAbilityPopupWidget_OnDecideReturnButtonEvent, Widget) == 0x000000, "Member 'CharacterAbilityPopupWidget_OnDecideReturnButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(CharacterAbilityPopupWidget_OnDecideReturnButtonEvent, InputType) == 0x000008, "Member 'CharacterAbilityPopupWidget_OnDecideReturnButtonEvent::InputType' has a wrong offset!");

// Function InGameModule.CharacterActionControlComponent.OnRegisterAttackActionToSlot_ToClient
// 0x0020 (0x0020 - 0x0000)
struct CharacterActionControlComponent_OnRegisterAttackActionToSlot_ToClient final
{
public:
	struct FNetworkRegisterAttackActionData       ServerData;                                        // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EAttackId                                     AttackId;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMagazineRegisterType                         MagazineRegisterType;                              // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterActionControlComponent_OnRegisterAttackActionToSlot_ToClient) == 0x000008, "Wrong alignment on CharacterActionControlComponent_OnRegisterAttackActionToSlot_ToClient");
static_assert(sizeof(CharacterActionControlComponent_OnRegisterAttackActionToSlot_ToClient) == 0x000020, "Wrong size on CharacterActionControlComponent_OnRegisterAttackActionToSlot_ToClient");
static_assert(offsetof(CharacterActionControlComponent_OnRegisterAttackActionToSlot_ToClient, ServerData) == 0x000000, "Member 'CharacterActionControlComponent_OnRegisterAttackActionToSlot_ToClient::ServerData' has a wrong offset!");
static_assert(offsetof(CharacterActionControlComponent_OnRegisterAttackActionToSlot_ToClient, AttackId) == 0x000018, "Member 'CharacterActionControlComponent_OnRegisterAttackActionToSlot_ToClient::AttackId' has a wrong offset!");
static_assert(offsetof(CharacterActionControlComponent_OnRegisterAttackActionToSlot_ToClient, MagazineRegisterType) == 0x000019, "Member 'CharacterActionControlComponent_OnRegisterAttackActionToSlot_ToClient::MagazineRegisterType' has a wrong offset!");

// Function InGameModule.CharacterActionControlComponent.OnRegisterAttackActionToSlotArray_ToClient
// 0x0010 (0x0010 - 0x0000)
struct CharacterActionControlComponent_OnRegisterAttackActionToSlotArray_ToClient final
{
public:
	TArray<struct FNetworkRegisterAttackActionData> ServerDataList;                                    // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterActionControlComponent_OnRegisterAttackActionToSlotArray_ToClient) == 0x000008, "Wrong alignment on CharacterActionControlComponent_OnRegisterAttackActionToSlotArray_ToClient");
static_assert(sizeof(CharacterActionControlComponent_OnRegisterAttackActionToSlotArray_ToClient) == 0x000010, "Wrong size on CharacterActionControlComponent_OnRegisterAttackActionToSlotArray_ToClient");
static_assert(offsetof(CharacterActionControlComponent_OnRegisterAttackActionToSlotArray_ToClient, ServerDataList) == 0x000000, "Member 'CharacterActionControlComponent_OnRegisterAttackActionToSlotArray_ToClient::ServerDataList' has a wrong offset!");

// Function InGameModule.CharacterActionControlComponent.RegisterAttackActionToAttackSlot_ToServer
// 0x0018 (0x0018 - 0x0000)
struct CharacterActionControlComponent_RegisterAttackActionToAttackSlot_ToServer final
{
public:
	EAttackId                                     AttackId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UActionAttackBase>          AttackActionClass;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMagazineRegisterType                         MagazineRegisterType;                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterActionControlComponent_RegisterAttackActionToAttackSlot_ToServer) == 0x000008, "Wrong alignment on CharacterActionControlComponent_RegisterAttackActionToAttackSlot_ToServer");
static_assert(sizeof(CharacterActionControlComponent_RegisterAttackActionToAttackSlot_ToServer) == 0x000018, "Wrong size on CharacterActionControlComponent_RegisterAttackActionToAttackSlot_ToServer");
static_assert(offsetof(CharacterActionControlComponent_RegisterAttackActionToAttackSlot_ToServer, AttackId) == 0x000000, "Member 'CharacterActionControlComponent_RegisterAttackActionToAttackSlot_ToServer::AttackId' has a wrong offset!");
static_assert(offsetof(CharacterActionControlComponent_RegisterAttackActionToAttackSlot_ToServer, AttackActionClass) == 0x000008, "Member 'CharacterActionControlComponent_RegisterAttackActionToAttackSlot_ToServer::AttackActionClass' has a wrong offset!");
static_assert(offsetof(CharacterActionControlComponent_RegisterAttackActionToAttackSlot_ToServer, Level) == 0x000010, "Member 'CharacterActionControlComponent_RegisterAttackActionToAttackSlot_ToServer::Level' has a wrong offset!");
static_assert(offsetof(CharacterActionControlComponent_RegisterAttackActionToAttackSlot_ToServer, MagazineRegisterType) == 0x000014, "Member 'CharacterActionControlComponent_RegisterAttackActionToAttackSlot_ToServer::MagazineRegisterType' has a wrong offset!");

// Function InGameModule.CharacterActionControlComponent.RegisterAttackActionToAttackSlotArray_ToServer
// 0x0010 (0x0010 - 0x0000)
struct CharacterActionControlComponent_RegisterAttackActionToAttackSlotArray_ToServer final
{
public:
	TArray<struct FNetworkRegisterAttackActionData> ServerDataList;                                    // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterActionControlComponent_RegisterAttackActionToAttackSlotArray_ToServer) == 0x000008, "Wrong alignment on CharacterActionControlComponent_RegisterAttackActionToAttackSlotArray_ToServer");
static_assert(sizeof(CharacterActionControlComponent_RegisterAttackActionToAttackSlotArray_ToServer) == 0x000010, "Wrong size on CharacterActionControlComponent_RegisterAttackActionToAttackSlotArray_ToServer");
static_assert(offsetof(CharacterActionControlComponent_RegisterAttackActionToAttackSlotArray_ToServer, ServerDataList) == 0x000000, "Member 'CharacterActionControlComponent_RegisterAttackActionToAttackSlotArray_ToServer::ServerDataList' has a wrong offset!");

// Function InGameModule.CharacterActionControlComponent.SendActionPing_ToClient
// 0x0008 (0x0008 - 0x0000)
struct CharacterActionControlComponent_SendActionPing_ToClient final
{
public:
	uint8                                         ActionIndex;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Ping;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterActionControlComponent_SendActionPing_ToClient) == 0x000004, "Wrong alignment on CharacterActionControlComponent_SendActionPing_ToClient");
static_assert(sizeof(CharacterActionControlComponent_SendActionPing_ToClient) == 0x000008, "Wrong size on CharacterActionControlComponent_SendActionPing_ToClient");
static_assert(offsetof(CharacterActionControlComponent_SendActionPing_ToClient, ActionIndex) == 0x000000, "Member 'CharacterActionControlComponent_SendActionPing_ToClient::ActionIndex' has a wrong offset!");
static_assert(offsetof(CharacterActionControlComponent_SendActionPing_ToClient, Ping) == 0x000004, "Member 'CharacterActionControlComponent_SendActionPing_ToClient::Ping' has a wrong offset!");

// Function InGameModule.CharacterActionControlComponent.SendActionPing_ToServer
// 0x0008 (0x0008 - 0x0000)
struct CharacterActionControlComponent_SendActionPing_ToServer final
{
public:
	uint8                                         ActionIndex;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Ping;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterActionControlComponent_SendActionPing_ToServer) == 0x000004, "Wrong alignment on CharacterActionControlComponent_SendActionPing_ToServer");
static_assert(sizeof(CharacterActionControlComponent_SendActionPing_ToServer) == 0x000008, "Wrong size on CharacterActionControlComponent_SendActionPing_ToServer");
static_assert(offsetof(CharacterActionControlComponent_SendActionPing_ToServer, ActionIndex) == 0x000000, "Member 'CharacterActionControlComponent_SendActionPing_ToServer::ActionIndex' has a wrong offset!");
static_assert(offsetof(CharacterActionControlComponent_SendActionPing_ToServer, Ping) == 0x000004, "Member 'CharacterActionControlComponent_SendActionPing_ToServer::Ping' has a wrong offset!");

// Function InGameModule.CharacterActionControlComponent.SetAction_ToClient
// 0x0010 (0x0010 - 0x0000)
struct CharacterActionControlComponent_SetAction_ToClient final
{
public:
	uint8                                         ActionIndex;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ActionArgment;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActionKind                                   RequestActionKind;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        NetServerPriorityActionSerialNo;                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterActionControlComponent_SetAction_ToClient) == 0x000004, "Wrong alignment on CharacterActionControlComponent_SetAction_ToClient");
static_assert(sizeof(CharacterActionControlComponent_SetAction_ToClient) == 0x000010, "Wrong size on CharacterActionControlComponent_SetAction_ToClient");
static_assert(offsetof(CharacterActionControlComponent_SetAction_ToClient, ActionIndex) == 0x000000, "Member 'CharacterActionControlComponent_SetAction_ToClient::ActionIndex' has a wrong offset!");
static_assert(offsetof(CharacterActionControlComponent_SetAction_ToClient, ActionArgment) == 0x000004, "Member 'CharacterActionControlComponent_SetAction_ToClient::ActionArgment' has a wrong offset!");
static_assert(offsetof(CharacterActionControlComponent_SetAction_ToClient, RequestActionKind) == 0x000008, "Member 'CharacterActionControlComponent_SetAction_ToClient::RequestActionKind' has a wrong offset!");
static_assert(offsetof(CharacterActionControlComponent_SetAction_ToClient, NetServerPriorityActionSerialNo) == 0x00000C, "Member 'CharacterActionControlComponent_SetAction_ToClient::NetServerPriorityActionSerialNo' has a wrong offset!");

// Function InGameModule.CharacterActionControlComponent.SetAction_ToServer
// 0x0010 (0x0010 - 0x0000)
struct CharacterActionControlComponent_SetAction_ToServer final
{
public:
	uint8                                         ActionIndex;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ActionArgment;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActionKind                                   RequestActionKind;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        NetServerPriorityActionSerialNo;                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterActionControlComponent_SetAction_ToServer) == 0x000004, "Wrong alignment on CharacterActionControlComponent_SetAction_ToServer");
static_assert(sizeof(CharacterActionControlComponent_SetAction_ToServer) == 0x000010, "Wrong size on CharacterActionControlComponent_SetAction_ToServer");
static_assert(offsetof(CharacterActionControlComponent_SetAction_ToServer, ActionIndex) == 0x000000, "Member 'CharacterActionControlComponent_SetAction_ToServer::ActionIndex' has a wrong offset!");
static_assert(offsetof(CharacterActionControlComponent_SetAction_ToServer, ActionArgment) == 0x000004, "Member 'CharacterActionControlComponent_SetAction_ToServer::ActionArgment' has a wrong offset!");
static_assert(offsetof(CharacterActionControlComponent_SetAction_ToServer, RequestActionKind) == 0x000008, "Member 'CharacterActionControlComponent_SetAction_ToServer::RequestActionKind' has a wrong offset!");
static_assert(offsetof(CharacterActionControlComponent_SetAction_ToServer, NetServerPriorityActionSerialNo) == 0x00000C, "Member 'CharacterActionControlComponent_SetAction_ToServer::NetServerPriorityActionSerialNo' has a wrong offset!");

// Function InGameModule.CharacterActionControlComponent.SetAimingMode_ToServer
// 0x0001 (0x0001 - 0x0000)
struct CharacterActionControlComponent_SetAimingMode_ToServer final
{
public:
	bool                                          bAimingMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterActionControlComponent_SetAimingMode_ToServer) == 0x000001, "Wrong alignment on CharacterActionControlComponent_SetAimingMode_ToServer");
static_assert(sizeof(CharacterActionControlComponent_SetAimingMode_ToServer) == 0x000001, "Wrong size on CharacterActionControlComponent_SetAimingMode_ToServer");
static_assert(offsetof(CharacterActionControlComponent_SetAimingMode_ToServer, bAimingMode) == 0x000000, "Member 'CharacterActionControlComponent_SetAimingMode_ToServer::bAimingMode' has a wrong offset!");

// Function InGameModule.CharacterActionControlComponent.SetAttackAction_ToClient
// 0x0020 (0x0020 - 0x0000)
struct CharacterActionControlComponent_SetAttackAction_ToClient final
{
public:
	EAttackId                                     AttackId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize100                 TargetLocation;                                    // 0x0004(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UniqueLevel;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommandId                                    CommandID;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBeginGround;                                      // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterActionControlComponent_SetAttackAction_ToClient) == 0x000008, "Wrong alignment on CharacterActionControlComponent_SetAttackAction_ToClient");
static_assert(sizeof(CharacterActionControlComponent_SetAttackAction_ToClient) == 0x000020, "Wrong size on CharacterActionControlComponent_SetAttackAction_ToClient");
static_assert(offsetof(CharacterActionControlComponent_SetAttackAction_ToClient, AttackId) == 0x000000, "Member 'CharacterActionControlComponent_SetAttackAction_ToClient::AttackId' has a wrong offset!");
static_assert(offsetof(CharacterActionControlComponent_SetAttackAction_ToClient, TargetLocation) == 0x000004, "Member 'CharacterActionControlComponent_SetAttackAction_ToClient::TargetLocation' has a wrong offset!");
static_assert(offsetof(CharacterActionControlComponent_SetAttackAction_ToClient, TargetActor) == 0x000010, "Member 'CharacterActionControlComponent_SetAttackAction_ToClient::TargetActor' has a wrong offset!");
static_assert(offsetof(CharacterActionControlComponent_SetAttackAction_ToClient, UniqueLevel) == 0x000018, "Member 'CharacterActionControlComponent_SetAttackAction_ToClient::UniqueLevel' has a wrong offset!");
static_assert(offsetof(CharacterActionControlComponent_SetAttackAction_ToClient, CommandID) == 0x00001C, "Member 'CharacterActionControlComponent_SetAttackAction_ToClient::CommandID' has a wrong offset!");
static_assert(offsetof(CharacterActionControlComponent_SetAttackAction_ToClient, bBeginGround) == 0x00001D, "Member 'CharacterActionControlComponent_SetAttackAction_ToClient::bBeginGround' has a wrong offset!");

// Function InGameModule.CharacterActionControlComponent.SetAttackAction_ToServer
// 0x0028 (0x0028 - 0x0000)
struct CharacterActionControlComponent_SetAttackAction_ToServer final
{
public:
	EAttackId                                     AttackId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize100                 TargetLocation;                                    // 0x0004(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UniqueLevel;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommandId                                    CommandID;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBeginGround;                                      // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        NetServerPriorityActionSerialNo;                   // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterActionControlComponent_SetAttackAction_ToServer) == 0x000008, "Wrong alignment on CharacterActionControlComponent_SetAttackAction_ToServer");
static_assert(sizeof(CharacterActionControlComponent_SetAttackAction_ToServer) == 0x000028, "Wrong size on CharacterActionControlComponent_SetAttackAction_ToServer");
static_assert(offsetof(CharacterActionControlComponent_SetAttackAction_ToServer, AttackId) == 0x000000, "Member 'CharacterActionControlComponent_SetAttackAction_ToServer::AttackId' has a wrong offset!");
static_assert(offsetof(CharacterActionControlComponent_SetAttackAction_ToServer, TargetLocation) == 0x000004, "Member 'CharacterActionControlComponent_SetAttackAction_ToServer::TargetLocation' has a wrong offset!");
static_assert(offsetof(CharacterActionControlComponent_SetAttackAction_ToServer, TargetActor) == 0x000010, "Member 'CharacterActionControlComponent_SetAttackAction_ToServer::TargetActor' has a wrong offset!");
static_assert(offsetof(CharacterActionControlComponent_SetAttackAction_ToServer, UniqueLevel) == 0x000018, "Member 'CharacterActionControlComponent_SetAttackAction_ToServer::UniqueLevel' has a wrong offset!");
static_assert(offsetof(CharacterActionControlComponent_SetAttackAction_ToServer, CommandID) == 0x00001C, "Member 'CharacterActionControlComponent_SetAttackAction_ToServer::CommandID' has a wrong offset!");
static_assert(offsetof(CharacterActionControlComponent_SetAttackAction_ToServer, bBeginGround) == 0x00001D, "Member 'CharacterActionControlComponent_SetAttackAction_ToServer::bBeginGround' has a wrong offset!");
static_assert(offsetof(CharacterActionControlComponent_SetAttackAction_ToServer, NetServerPriorityActionSerialNo) == 0x000020, "Member 'CharacterActionControlComponent_SetAttackAction_ToServer::NetServerPriorityActionSerialNo' has a wrong offset!");

// Function InGameModule.CharacterAttackCollisionController.AttackHit_RPC
// 0x0060 (0x0060 - 0x0000)
struct CharacterAttackCollisionController_AttackHit_RPC final
{
public:
	struct FProjectileHitRep                      Rep;                                               // 0x0000(0x0060)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackCollisionController_AttackHit_RPC) == 0x000008, "Wrong alignment on CharacterAttackCollisionController_AttackHit_RPC");
static_assert(sizeof(CharacterAttackCollisionController_AttackHit_RPC) == 0x000060, "Wrong size on CharacterAttackCollisionController_AttackHit_RPC");
static_assert(offsetof(CharacterAttackCollisionController_AttackHit_RPC, Rep) == 0x000000, "Member 'CharacterAttackCollisionController_AttackHit_RPC::Rep' has a wrong offset!");

// Function InGameModule.CharacterAttackCollisionController.AttackHit_RPC_Client
// 0x0018 (0x0018 - 0x0000)
struct CharacterAttackCollisionController_AttackHit_RPC_Client final
{
public:
	struct FBulletHitRep                          Rep;                                               // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackCollisionController_AttackHit_RPC_Client) == 0x000004, "Wrong alignment on CharacterAttackCollisionController_AttackHit_RPC_Client");
static_assert(sizeof(CharacterAttackCollisionController_AttackHit_RPC_Client) == 0x000018, "Wrong size on CharacterAttackCollisionController_AttackHit_RPC_Client");
static_assert(offsetof(CharacterAttackCollisionController_AttackHit_RPC_Client, Rep) == 0x000000, "Member 'CharacterAttackCollisionController_AttackHit_RPC_Client::Rep' has a wrong offset!");

// Function InGameModule.CharacterAttackCollisionController.OnHitBackground
// 0x00B0 (0x00B0 - 0x0000)
struct CharacterAttackCollisionController_OnHitBackground final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterAttackCollisionController_OnHitBackground) == 0x000008, "Wrong alignment on CharacterAttackCollisionController_OnHitBackground");
static_assert(sizeof(CharacterAttackCollisionController_OnHitBackground) == 0x0000B0, "Wrong size on CharacterAttackCollisionController_OnHitBackground");
static_assert(offsetof(CharacterAttackCollisionController_OnHitBackground, HitComponent) == 0x000000, "Member 'CharacterAttackCollisionController_OnHitBackground::HitComponent' has a wrong offset!");
static_assert(offsetof(CharacterAttackCollisionController_OnHitBackground, OtherActor) == 0x000008, "Member 'CharacterAttackCollisionController_OnHitBackground::OtherActor' has a wrong offset!");
static_assert(offsetof(CharacterAttackCollisionController_OnHitBackground, OtherComp) == 0x000010, "Member 'CharacterAttackCollisionController_OnHitBackground::OtherComp' has a wrong offset!");
static_assert(offsetof(CharacterAttackCollisionController_OnHitBackground, NormalImpulse) == 0x000018, "Member 'CharacterAttackCollisionController_OnHitBackground::NormalImpulse' has a wrong offset!");
static_assert(offsetof(CharacterAttackCollisionController_OnHitBackground, Hit) == 0x000024, "Member 'CharacterAttackCollisionController_OnHitBackground::Hit' has a wrong offset!");

// Function InGameModule.CharacterAttackCollisionController.OnHitCharacter
// 0x00B0 (0x00B0 - 0x0000)
struct CharacterAttackCollisionController_OnHitCharacter final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterAttackCollisionController_OnHitCharacter) == 0x000008, "Wrong alignment on CharacterAttackCollisionController_OnHitCharacter");
static_assert(sizeof(CharacterAttackCollisionController_OnHitCharacter) == 0x0000B0, "Wrong size on CharacterAttackCollisionController_OnHitCharacter");
static_assert(offsetof(CharacterAttackCollisionController_OnHitCharacter, HitComponent) == 0x000000, "Member 'CharacterAttackCollisionController_OnHitCharacter::HitComponent' has a wrong offset!");
static_assert(offsetof(CharacterAttackCollisionController_OnHitCharacter, OtherActor) == 0x000008, "Member 'CharacterAttackCollisionController_OnHitCharacter::OtherActor' has a wrong offset!");
static_assert(offsetof(CharacterAttackCollisionController_OnHitCharacter, OtherComp) == 0x000010, "Member 'CharacterAttackCollisionController_OnHitCharacter::OtherComp' has a wrong offset!");
static_assert(offsetof(CharacterAttackCollisionController_OnHitCharacter, NormalImpulse) == 0x000018, "Member 'CharacterAttackCollisionController_OnHitCharacter::NormalImpulse' has a wrong offset!");
static_assert(offsetof(CharacterAttackCollisionController_OnHitCharacter, Hit) == 0x000024, "Member 'CharacterAttackCollisionController_OnHitCharacter::Hit' has a wrong offset!");

// Function InGameModule.CharacterAttackReplicateComponent.CharacterAttackHit_RPC
// 0x0038 (0x0038 - 0x0000)
struct CharacterAttackReplicateComponent_CharacterAttackHit_RPC final
{
public:
	struct FCharacterAttackHitRep                 Rep;                                               // 0x0000(0x0038)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAttackReplicateComponent_CharacterAttackHit_RPC) == 0x000008, "Wrong alignment on CharacterAttackReplicateComponent_CharacterAttackHit_RPC");
static_assert(sizeof(CharacterAttackReplicateComponent_CharacterAttackHit_RPC) == 0x000038, "Wrong size on CharacterAttackReplicateComponent_CharacterAttackHit_RPC");
static_assert(offsetof(CharacterAttackReplicateComponent_CharacterAttackHit_RPC, Rep) == 0x000000, "Member 'CharacterAttackReplicateComponent_CharacterAttackHit_RPC::Rep' has a wrong offset!");

// Function InGameModule.CharacterBuffControlCompnent.OnApplyTeamBuffs_ToClient
// 0x0014 (0x0014 - 0x0000)
struct CharacterBuffControlCompnent_OnApplyTeamBuffs_ToClient final
{
public:
	struct FNetTeamRollBuff                       Data;                                              // 0x0000(0x0014)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBuffControlCompnent_OnApplyTeamBuffs_ToClient) == 0x000004, "Wrong alignment on CharacterBuffControlCompnent_OnApplyTeamBuffs_ToClient");
static_assert(sizeof(CharacterBuffControlCompnent_OnApplyTeamBuffs_ToClient) == 0x000014, "Wrong size on CharacterBuffControlCompnent_OnApplyTeamBuffs_ToClient");
static_assert(offsetof(CharacterBuffControlCompnent_OnApplyTeamBuffs_ToClient, Data) == 0x000000, "Member 'CharacterBuffControlCompnent_OnApplyTeamBuffs_ToClient::Data' has a wrong offset!");

// Function InGameModule.CharacterCommandComponent.BP_ClearCommand
// 0x0001 (0x0001 - 0x0000)
struct CharacterCommandComponent_BP_ClearCommand final
{
public:
	ECommandId                                    CommandID;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCommandComponent_BP_ClearCommand) == 0x000001, "Wrong alignment on CharacterCommandComponent_BP_ClearCommand");
static_assert(sizeof(CharacterCommandComponent_BP_ClearCommand) == 0x000001, "Wrong size on CharacterCommandComponent_BP_ClearCommand");
static_assert(offsetof(CharacterCommandComponent_BP_ClearCommand, CommandID) == 0x000000, "Member 'CharacterCommandComponent_BP_ClearCommand::CommandID' has a wrong offset!");

// Function InGameModule.CharacterCommandComponent.BP_SetChargeEnabled
// 0x0002 (0x0002 - 0x0000)
struct CharacterCommandComponent_BP_SetChargeEnabled final
{
public:
	ECommandId                                    CommandID;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCommandComponent_BP_SetChargeEnabled) == 0x000001, "Wrong alignment on CharacterCommandComponent_BP_SetChargeEnabled");
static_assert(sizeof(CharacterCommandComponent_BP_SetChargeEnabled) == 0x000002, "Wrong size on CharacterCommandComponent_BP_SetChargeEnabled");
static_assert(offsetof(CharacterCommandComponent_BP_SetChargeEnabled, CommandID) == 0x000000, "Member 'CharacterCommandComponent_BP_SetChargeEnabled::CommandID' has a wrong offset!");
static_assert(offsetof(CharacterCommandComponent_BP_SetChargeEnabled, Flag) == 0x000001, "Member 'CharacterCommandComponent_BP_SetChargeEnabled::Flag' has a wrong offset!");

// Function InGameModule.CharacterCommandComponent.BP_SetChargeTime
// 0x0008 (0x0008 - 0x0000)
struct CharacterCommandComponent_BP_SetChargeTime final
{
public:
	ECommandId                                    CommandID;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCommandComponent_BP_SetChargeTime) == 0x000004, "Wrong alignment on CharacterCommandComponent_BP_SetChargeTime");
static_assert(sizeof(CharacterCommandComponent_BP_SetChargeTime) == 0x000008, "Wrong size on CharacterCommandComponent_BP_SetChargeTime");
static_assert(offsetof(CharacterCommandComponent_BP_SetChargeTime, CommandID) == 0x000000, "Member 'CharacterCommandComponent_BP_SetChargeTime::CommandID' has a wrong offset!");
static_assert(offsetof(CharacterCommandComponent_BP_SetChargeTime, Time) == 0x000004, "Member 'CharacterCommandComponent_BP_SetChargeTime::Time' has a wrong offset!");

// Function InGameModule.CharacterCommandComponent.BP_SetCommandValidity
// 0x0002 (0x0002 - 0x0000)
struct CharacterCommandComponent_BP_SetCommandValidity final
{
public:
	ECommandId                                    CommandID;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCommandComponent_BP_SetCommandValidity) == 0x000001, "Wrong alignment on CharacterCommandComponent_BP_SetCommandValidity");
static_assert(sizeof(CharacterCommandComponent_BP_SetCommandValidity) == 0x000002, "Wrong size on CharacterCommandComponent_BP_SetCommandValidity");
static_assert(offsetof(CharacterCommandComponent_BP_SetCommandValidity, CommandID) == 0x000000, "Member 'CharacterCommandComponent_BP_SetCommandValidity::CommandID' has a wrong offset!");
static_assert(offsetof(CharacterCommandComponent_BP_SetCommandValidity, Flag) == 0x000001, "Member 'CharacterCommandComponent_BP_SetCommandValidity::Flag' has a wrong offset!");

// Function InGameModule.CharacterCommandComponent.BP_GetMoveDirection
// 0x000C (0x000C - 0x0000)
struct CharacterCommandComponent_BP_GetMoveDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCommandComponent_BP_GetMoveDirection) == 0x000004, "Wrong alignment on CharacterCommandComponent_BP_GetMoveDirection");
static_assert(sizeof(CharacterCommandComponent_BP_GetMoveDirection) == 0x00000C, "Wrong size on CharacterCommandComponent_BP_GetMoveDirection");
static_assert(offsetof(CharacterCommandComponent_BP_GetMoveDirection, ReturnValue) == 0x000000, "Member 'CharacterCommandComponent_BP_GetMoveDirection::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterCommandComponent.BP_GetMoveDirectionForWall
// 0x000C (0x000C - 0x0000)
struct CharacterCommandComponent_BP_GetMoveDirectionForWall final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCommandComponent_BP_GetMoveDirectionForWall) == 0x000004, "Wrong alignment on CharacterCommandComponent_BP_GetMoveDirectionForWall");
static_assert(sizeof(CharacterCommandComponent_BP_GetMoveDirectionForWall) == 0x00000C, "Wrong size on CharacterCommandComponent_BP_GetMoveDirectionForWall");
static_assert(offsetof(CharacterCommandComponent_BP_GetMoveDirectionForWall, ReturnValue) == 0x000000, "Member 'CharacterCommandComponent_BP_GetMoveDirectionForWall::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterCommandComponent.BP_GetMoveRate
// 0x0004 (0x0004 - 0x0000)
struct CharacterCommandComponent_BP_GetMoveRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCommandComponent_BP_GetMoveRate) == 0x000004, "Wrong alignment on CharacterCommandComponent_BP_GetMoveRate");
static_assert(sizeof(CharacterCommandComponent_BP_GetMoveRate) == 0x000004, "Wrong size on CharacterCommandComponent_BP_GetMoveRate");
static_assert(offsetof(CharacterCommandComponent_BP_GetMoveRate, ReturnValue) == 0x000000, "Member 'CharacterCommandComponent_BP_GetMoveRate::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterCommandComponent.BP_IsSatisfiedCommand
// 0x0002 (0x0002 - 0x0000)
struct CharacterCommandComponent_BP_IsSatisfiedCommand final
{
public:
	ECommandId                                    CommandID;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCommandComponent_BP_IsSatisfiedCommand) == 0x000001, "Wrong alignment on CharacterCommandComponent_BP_IsSatisfiedCommand");
static_assert(sizeof(CharacterCommandComponent_BP_IsSatisfiedCommand) == 0x000002, "Wrong size on CharacterCommandComponent_BP_IsSatisfiedCommand");
static_assert(offsetof(CharacterCommandComponent_BP_IsSatisfiedCommand, CommandID) == 0x000000, "Member 'CharacterCommandComponent_BP_IsSatisfiedCommand::CommandID' has a wrong offset!");
static_assert(offsetof(CharacterCommandComponent_BP_IsSatisfiedCommand, ReturnValue) == 0x000001, "Member 'CharacterCommandComponent_BP_IsSatisfiedCommand::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterConditionAbility.BP_GetEfficacyValue
// 0x0004 (0x0004 - 0x0000)
struct CharacterConditionAbility_BP_GetEfficacyValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterConditionAbility_BP_GetEfficacyValue) == 0x000004, "Wrong alignment on CharacterConditionAbility_BP_GetEfficacyValue");
static_assert(sizeof(CharacterConditionAbility_BP_GetEfficacyValue) == 0x000004, "Wrong size on CharacterConditionAbility_BP_GetEfficacyValue");
static_assert(offsetof(CharacterConditionAbility_BP_GetEfficacyValue, ReturnValue) == 0x000000, "Member 'CharacterConditionAbility_BP_GetEfficacyValue::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterDamageComponent.BP_AddSlipDamage
// 0x0014 (0x0014 - 0x0000)
struct CharacterDamageComponent_BP_AddSlipDamage final
{
public:
	float                                         DamageValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterId                                  DamageParamCharaId;                                // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ParamName;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageCauserType                             DamageCauserType;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterDamageComponent_BP_AddSlipDamage) == 0x000004, "Wrong alignment on CharacterDamageComponent_BP_AddSlipDamage");
static_assert(sizeof(CharacterDamageComponent_BP_AddSlipDamage) == 0x000014, "Wrong size on CharacterDamageComponent_BP_AddSlipDamage");
static_assert(offsetof(CharacterDamageComponent_BP_AddSlipDamage, DamageValue) == 0x000000, "Member 'CharacterDamageComponent_BP_AddSlipDamage::DamageValue' has a wrong offset!");
static_assert(offsetof(CharacterDamageComponent_BP_AddSlipDamage, DamageParamCharaId) == 0x000004, "Member 'CharacterDamageComponent_BP_AddSlipDamage::DamageParamCharaId' has a wrong offset!");
static_assert(offsetof(CharacterDamageComponent_BP_AddSlipDamage, ParamName) == 0x000008, "Member 'CharacterDamageComponent_BP_AddSlipDamage::ParamName' has a wrong offset!");
static_assert(offsetof(CharacterDamageComponent_BP_AddSlipDamage, DamageCauserType) == 0x000010, "Member 'CharacterDamageComponent_BP_AddSlipDamage::DamageCauserType' has a wrong offset!");

// Function InGameModule.CharacterDamageComponent.BP_GetDamageDirection
// 0x000C (0x000C - 0x0000)
struct CharacterDamageComponent_BP_GetDamageDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDamageComponent_BP_GetDamageDirection) == 0x000004, "Wrong alignment on CharacterDamageComponent_BP_GetDamageDirection");
static_assert(sizeof(CharacterDamageComponent_BP_GetDamageDirection) == 0x00000C, "Wrong size on CharacterDamageComponent_BP_GetDamageDirection");
static_assert(offsetof(CharacterDamageComponent_BP_GetDamageDirection, ReturnValue) == 0x000000, "Member 'CharacterDamageComponent_BP_GetDamageDirection::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterDamageComponent.BP_SetDamageInvincible
// 0x0001 (0x0001 - 0x0000)
struct CharacterDamageComponent_BP_SetDamageInvincible final
{
public:
	bool                                          bEnableEffect;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDamageComponent_BP_SetDamageInvincible) == 0x000001, "Wrong alignment on CharacterDamageComponent_BP_SetDamageInvincible");
static_assert(sizeof(CharacterDamageComponent_BP_SetDamageInvincible) == 0x000001, "Wrong size on CharacterDamageComponent_BP_SetDamageInvincible");
static_assert(offsetof(CharacterDamageComponent_BP_SetDamageInvincible, bEnableEffect) == 0x000000, "Member 'CharacterDamageComponent_BP_SetDamageInvincible::bEnableEffect' has a wrong offset!");

// Function InGameModule.CharacterDamageComponent.ReceiveDamage_RPC_OnServer
// 0x0060 (0x0060 - 0x0000)
struct CharacterDamageComponent_ReceiveDamage_RPC_OnServer final
{
public:
	struct FTakeDamageArgument                    DamageArgument;                                    // 0x0000(0x0060)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDamageComponent_ReceiveDamage_RPC_OnServer) == 0x000008, "Wrong alignment on CharacterDamageComponent_ReceiveDamage_RPC_OnServer");
static_assert(sizeof(CharacterDamageComponent_ReceiveDamage_RPC_OnServer) == 0x000060, "Wrong size on CharacterDamageComponent_ReceiveDamage_RPC_OnServer");
static_assert(offsetof(CharacterDamageComponent_ReceiveDamage_RPC_OnServer, DamageArgument) == 0x000000, "Member 'CharacterDamageComponent_ReceiveDamage_RPC_OnServer::DamageArgument' has a wrong offset!");

// Function InGameModule.CharacterDamageComponent.SendDamageToClient_RPC_OnClient
// 0x0050 (0x0050 - 0x0000)
struct CharacterDamageComponent_SendDamageToClient_RPC_OnClient final
{
public:
	struct FNetDamageBootInfo                     DamageBootInfo;                                    // 0x0000(0x0050)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDamageComponent_SendDamageToClient_RPC_OnClient) == 0x000008, "Wrong alignment on CharacterDamageComponent_SendDamageToClient_RPC_OnClient");
static_assert(sizeof(CharacterDamageComponent_SendDamageToClient_RPC_OnClient) == 0x000050, "Wrong size on CharacterDamageComponent_SendDamageToClient_RPC_OnClient");
static_assert(offsetof(CharacterDamageComponent_SendDamageToClient_RPC_OnClient, DamageBootInfo) == 0x000000, "Member 'CharacterDamageComponent_SendDamageToClient_RPC_OnClient::DamageBootInfo' has a wrong offset!");

// Function InGameModule.CharacterGiantControlComponent.BP_RequestBecomeGiant
// 0x0008 (0x0008 - 0x0000)
struct CharacterGiantControlComponent_BP_RequestBecomeGiant final
{
public:
	float                                         DestinationScale;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Span;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterGiantControlComponent_BP_RequestBecomeGiant) == 0x000004, "Wrong alignment on CharacterGiantControlComponent_BP_RequestBecomeGiant");
static_assert(sizeof(CharacterGiantControlComponent_BP_RequestBecomeGiant) == 0x000008, "Wrong size on CharacterGiantControlComponent_BP_RequestBecomeGiant");
static_assert(offsetof(CharacterGiantControlComponent_BP_RequestBecomeGiant, DestinationScale) == 0x000000, "Member 'CharacterGiantControlComponent_BP_RequestBecomeGiant::DestinationScale' has a wrong offset!");
static_assert(offsetof(CharacterGiantControlComponent_BP_RequestBecomeGiant, Span) == 0x000004, "Member 'CharacterGiantControlComponent_BP_RequestBecomeGiant::Span' has a wrong offset!");

// Function InGameModule.CharacterGiantControlComponent.BP_RequestReturnNormal
// 0x0004 (0x0004 - 0x0000)
struct CharacterGiantControlComponent_BP_RequestReturnNormal final
{
public:
	float                                         Span;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterGiantControlComponent_BP_RequestReturnNormal) == 0x000004, "Wrong alignment on CharacterGiantControlComponent_BP_RequestReturnNormal");
static_assert(sizeof(CharacterGiantControlComponent_BP_RequestReturnNormal) == 0x000004, "Wrong size on CharacterGiantControlComponent_BP_RequestReturnNormal");
static_assert(offsetof(CharacterGiantControlComponent_BP_RequestReturnNormal, Span) == 0x000000, "Member 'CharacterGiantControlComponent_BP_RequestReturnNormal::Span' has a wrong offset!");

// Function InGameModule.AnimInstanceAttack.BP_EventOnHit
// 0x000C (0x000C - 0x0000)
struct AnimInstanceAttack_BP_EventOnHit final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInstanceAttack_BP_EventOnHit) == 0x000004, "Wrong alignment on AnimInstanceAttack_BP_EventOnHit");
static_assert(sizeof(AnimInstanceAttack_BP_EventOnHit) == 0x00000C, "Wrong size on AnimInstanceAttack_BP_EventOnHit");
static_assert(offsetof(AnimInstanceAttack_BP_EventOnHit, HitLocation) == 0x000000, "Member 'AnimInstanceAttack_BP_EventOnHit::HitLocation' has a wrong offset!");

// Function InGameModule.AnimInstanceAttack.BP_GetAdditiveDistance
// 0x0004 (0x0004 - 0x0000)
struct AnimInstanceAttack_BP_GetAdditiveDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInstanceAttack_BP_GetAdditiveDistance) == 0x000004, "Wrong alignment on AnimInstanceAttack_BP_GetAdditiveDistance");
static_assert(sizeof(AnimInstanceAttack_BP_GetAdditiveDistance) == 0x000004, "Wrong size on AnimInstanceAttack_BP_GetAdditiveDistance");
static_assert(offsetof(AnimInstanceAttack_BP_GetAdditiveDistance, ReturnValue) == 0x000000, "Member 'AnimInstanceAttack_BP_GetAdditiveDistance::ReturnValue' has a wrong offset!");

// Function InGameModule.AnimInstanceAttack.BP_GetAdditiveDistanceForVector
// 0x000C (0x000C - 0x0000)
struct AnimInstanceAttack_BP_GetAdditiveDistanceForVector final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInstanceAttack_BP_GetAdditiveDistanceForVector) == 0x000004, "Wrong alignment on AnimInstanceAttack_BP_GetAdditiveDistanceForVector");
static_assert(sizeof(AnimInstanceAttack_BP_GetAdditiveDistanceForVector) == 0x00000C, "Wrong size on AnimInstanceAttack_BP_GetAdditiveDistanceForVector");
static_assert(offsetof(AnimInstanceAttack_BP_GetAdditiveDistanceForVector, ReturnValue) == 0x000000, "Member 'AnimInstanceAttack_BP_GetAdditiveDistanceForVector::ReturnValue' has a wrong offset!");

// Function InGameModule.AnimInstanceAttack.BP_GetAdditiveRotator
// 0x000C (0x000C - 0x0000)
struct AnimInstanceAttack_BP_GetAdditiveRotator final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInstanceAttack_BP_GetAdditiveRotator) == 0x000004, "Wrong alignment on AnimInstanceAttack_BP_GetAdditiveRotator");
static_assert(sizeof(AnimInstanceAttack_BP_GetAdditiveRotator) == 0x00000C, "Wrong size on AnimInstanceAttack_BP_GetAdditiveRotator");
static_assert(offsetof(AnimInstanceAttack_BP_GetAdditiveRotator, ReturnValue) == 0x000000, "Member 'AnimInstanceAttack_BP_GetAdditiveRotator::ReturnValue' has a wrong offset!");

// Function InGameModule.AnimInstanceAttack.BP_GetBlendingAlpha
// 0x0004 (0x0004 - 0x0000)
struct AnimInstanceAttack_BP_GetBlendingAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInstanceAttack_BP_GetBlendingAlpha) == 0x000004, "Wrong alignment on AnimInstanceAttack_BP_GetBlendingAlpha");
static_assert(sizeof(AnimInstanceAttack_BP_GetBlendingAlpha) == 0x000004, "Wrong size on AnimInstanceAttack_BP_GetBlendingAlpha");
static_assert(offsetof(AnimInstanceAttack_BP_GetBlendingAlpha, ReturnValue) == 0x000000, "Member 'AnimInstanceAttack_BP_GetBlendingAlpha::ReturnValue' has a wrong offset!");

// Function InGameModule.AnimInstanceAttack.BP_GetTargetLocation
// 0x000C (0x000C - 0x0000)
struct AnimInstanceAttack_BP_GetTargetLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInstanceAttack_BP_GetTargetLocation) == 0x000004, "Wrong alignment on AnimInstanceAttack_BP_GetTargetLocation");
static_assert(sizeof(AnimInstanceAttack_BP_GetTargetLocation) == 0x00000C, "Wrong size on AnimInstanceAttack_BP_GetTargetLocation");
static_assert(offsetof(AnimInstanceAttack_BP_GetTargetLocation, ReturnValue) == 0x000000, "Member 'AnimInstanceAttack_BP_GetTargetLocation::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterMaterialControlComponent.BP_ClearPreset
// 0x0010 (0x0010 - 0x0000)
struct CharacterMaterialControlComponent_BP_ClearPreset final
{
public:
	class FName                                   PresetName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             DataTable;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMaterialControlComponent_BP_ClearPreset) == 0x000008, "Wrong alignment on CharacterMaterialControlComponent_BP_ClearPreset");
static_assert(sizeof(CharacterMaterialControlComponent_BP_ClearPreset) == 0x000010, "Wrong size on CharacterMaterialControlComponent_BP_ClearPreset");
static_assert(offsetof(CharacterMaterialControlComponent_BP_ClearPreset, PresetName) == 0x000000, "Member 'CharacterMaterialControlComponent_BP_ClearPreset::PresetName' has a wrong offset!");
static_assert(offsetof(CharacterMaterialControlComponent_BP_ClearPreset, DataTable) == 0x000008, "Member 'CharacterMaterialControlComponent_BP_ClearPreset::DataTable' has a wrong offset!");

// Function InGameModule.CharacterMaterialControlComponent.BP_ClearPresetCondition
// 0x0008 (0x0008 - 0x0000)
struct CharacterMaterialControlComponent_BP_ClearPresetCondition final
{
public:
	class FName                                   PresetName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMaterialControlComponent_BP_ClearPresetCondition) == 0x000004, "Wrong alignment on CharacterMaterialControlComponent_BP_ClearPresetCondition");
static_assert(sizeof(CharacterMaterialControlComponent_BP_ClearPresetCondition) == 0x000008, "Wrong size on CharacterMaterialControlComponent_BP_ClearPresetCondition");
static_assert(offsetof(CharacterMaterialControlComponent_BP_ClearPresetCondition, PresetName) == 0x000000, "Member 'CharacterMaterialControlComponent_BP_ClearPresetCondition::PresetName' has a wrong offset!");

// Function InGameModule.CharacterMaterialControlComponent.BP_LoopEnd
// 0x0008 (0x0008 - 0x0000)
struct CharacterMaterialControlComponent_BP_LoopEnd final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMaterialControlComponent_BP_LoopEnd) == 0x000004, "Wrong alignment on CharacterMaterialControlComponent_BP_LoopEnd");
static_assert(sizeof(CharacterMaterialControlComponent_BP_LoopEnd) == 0x000008, "Wrong size on CharacterMaterialControlComponent_BP_LoopEnd");
static_assert(offsetof(CharacterMaterialControlComponent_BP_LoopEnd, Key) == 0x000000, "Member 'CharacterMaterialControlComponent_BP_LoopEnd::Key' has a wrong offset!");

// Function InGameModule.CharacterMaterialControlComponent.BP_LoopStart
// 0x0028 (0x0028 - 0x0000)
struct CharacterMaterialControlComponent_BP_LoopStart final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartValue;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetValue;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Span;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CacheName;                                         // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaterialGroupFlag                            GroupFlag;                                         // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterMaterialControlComponent_BP_LoopStart) == 0x000004, "Wrong alignment on CharacterMaterialControlComponent_BP_LoopStart");
static_assert(sizeof(CharacterMaterialControlComponent_BP_LoopStart) == 0x000028, "Wrong size on CharacterMaterialControlComponent_BP_LoopStart");
static_assert(offsetof(CharacterMaterialControlComponent_BP_LoopStart, Key) == 0x000000, "Member 'CharacterMaterialControlComponent_BP_LoopStart::Key' has a wrong offset!");
static_assert(offsetof(CharacterMaterialControlComponent_BP_LoopStart, ParamName) == 0x000008, "Member 'CharacterMaterialControlComponent_BP_LoopStart::ParamName' has a wrong offset!");
static_assert(offsetof(CharacterMaterialControlComponent_BP_LoopStart, StartValue) == 0x000010, "Member 'CharacterMaterialControlComponent_BP_LoopStart::StartValue' has a wrong offset!");
static_assert(offsetof(CharacterMaterialControlComponent_BP_LoopStart, TargetValue) == 0x000014, "Member 'CharacterMaterialControlComponent_BP_LoopStart::TargetValue' has a wrong offset!");
static_assert(offsetof(CharacterMaterialControlComponent_BP_LoopStart, Span) == 0x000018, "Member 'CharacterMaterialControlComponent_BP_LoopStart::Span' has a wrong offset!");
static_assert(offsetof(CharacterMaterialControlComponent_BP_LoopStart, CacheName) == 0x00001C, "Member 'CharacterMaterialControlComponent_BP_LoopStart::CacheName' has a wrong offset!");
static_assert(offsetof(CharacterMaterialControlComponent_BP_LoopStart, GroupFlag) == 0x000024, "Member 'CharacterMaterialControlComponent_BP_LoopStart::GroupFlag' has a wrong offset!");

// Function InGameModule.CharacterMaterialControlComponent.BP_SetPreset
// 0x0010 (0x0010 - 0x0000)
struct CharacterMaterialControlComponent_BP_SetPreset final
{
public:
	class FName                                   PresetName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             DataTable;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMaterialControlComponent_BP_SetPreset) == 0x000008, "Wrong alignment on CharacterMaterialControlComponent_BP_SetPreset");
static_assert(sizeof(CharacterMaterialControlComponent_BP_SetPreset) == 0x000010, "Wrong size on CharacterMaterialControlComponent_BP_SetPreset");
static_assert(offsetof(CharacterMaterialControlComponent_BP_SetPreset, PresetName) == 0x000000, "Member 'CharacterMaterialControlComponent_BP_SetPreset::PresetName' has a wrong offset!");
static_assert(offsetof(CharacterMaterialControlComponent_BP_SetPreset, DataTable) == 0x000008, "Member 'CharacterMaterialControlComponent_BP_SetPreset::DataTable' has a wrong offset!");

// Function InGameModule.CharacterMaterialControlComponent.BP_SetPresetCondition
// 0x0008 (0x0008 - 0x0000)
struct CharacterMaterialControlComponent_BP_SetPresetCondition final
{
public:
	class FName                                   PresetName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMaterialControlComponent_BP_SetPresetCondition) == 0x000004, "Wrong alignment on CharacterMaterialControlComponent_BP_SetPresetCondition");
static_assert(sizeof(CharacterMaterialControlComponent_BP_SetPresetCondition) == 0x000008, "Wrong size on CharacterMaterialControlComponent_BP_SetPresetCondition");
static_assert(offsetof(CharacterMaterialControlComponent_BP_SetPresetCondition, PresetName) == 0x000000, "Member 'CharacterMaterialControlComponent_BP_SetPresetCondition::PresetName' has a wrong offset!");

// Function InGameModule.CharacterRespawnControlCompnent.BP_DestroyEffects
// 0x0008 (0x0008 - 0x0000)
struct CharacterRespawnControlCompnent_BP_DestroyEffects final
{
public:
	class UParticleSystem*                        EmitterTemplate;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterRespawnControlCompnent_BP_DestroyEffects) == 0x000008, "Wrong alignment on CharacterRespawnControlCompnent_BP_DestroyEffects");
static_assert(sizeof(CharacterRespawnControlCompnent_BP_DestroyEffects) == 0x000008, "Wrong size on CharacterRespawnControlCompnent_BP_DestroyEffects");
static_assert(offsetof(CharacterRespawnControlCompnent_BP_DestroyEffects, EmitterTemplate) == 0x000000, "Member 'CharacterRespawnControlCompnent_BP_DestroyEffects::EmitterTemplate' has a wrong offset!");

// Function InGameModule.CharacterRespawnControlCompnent.BP_PlayEffects
// 0x0008 (0x0008 - 0x0000)
struct CharacterRespawnControlCompnent_BP_PlayEffects final
{
public:
	class UParticleSystem*                        EmitterTemplate;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterRespawnControlCompnent_BP_PlayEffects) == 0x000008, "Wrong alignment on CharacterRespawnControlCompnent_BP_PlayEffects");
static_assert(sizeof(CharacterRespawnControlCompnent_BP_PlayEffects) == 0x000008, "Wrong size on CharacterRespawnControlCompnent_BP_PlayEffects");
static_assert(offsetof(CharacterRespawnControlCompnent_BP_PlayEffects, EmitterTemplate) == 0x000000, "Member 'CharacterRespawnControlCompnent_BP_PlayEffects::EmitterTemplate' has a wrong offset!");

// Function InGameModule.CharacterRespawnControlCompnent.SetRespawnLocation_ToNetMulticast
// 0x000C (0x000C - 0x0000)
struct CharacterRespawnControlCompnent_SetRespawnLocation_ToNetMulticast final
{
public:
	struct FVector_NetQuantize                    RespawnLocation;                                   // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterRespawnControlCompnent_SetRespawnLocation_ToNetMulticast) == 0x000004, "Wrong alignment on CharacterRespawnControlCompnent_SetRespawnLocation_ToNetMulticast");
static_assert(sizeof(CharacterRespawnControlCompnent_SetRespawnLocation_ToNetMulticast) == 0x00000C, "Wrong size on CharacterRespawnControlCompnent_SetRespawnLocation_ToNetMulticast");
static_assert(offsetof(CharacterRespawnControlCompnent_SetRespawnLocation_ToNetMulticast, RespawnLocation) == 0x000000, "Member 'CharacterRespawnControlCompnent_SetRespawnLocation_ToNetMulticast::RespawnLocation' has a wrong offset!");

// Function InGameModule.CharacterRespawnControlCompnent.BP_GetRespawnLocation
// 0x000C (0x000C - 0x0000)
struct CharacterRespawnControlCompnent_BP_GetRespawnLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterRespawnControlCompnent_BP_GetRespawnLocation) == 0x000004, "Wrong alignment on CharacterRespawnControlCompnent_BP_GetRespawnLocation");
static_assert(sizeof(CharacterRespawnControlCompnent_BP_GetRespawnLocation) == 0x00000C, "Wrong size on CharacterRespawnControlCompnent_BP_GetRespawnLocation");
static_assert(offsetof(CharacterRespawnControlCompnent_BP_GetRespawnLocation, ReturnValue) == 0x000000, "Member 'CharacterRespawnControlCompnent_BP_GetRespawnLocation::ReturnValue' has a wrong offset!");

// Function InGameModule.CharacterStatusWidget.RecvPlayerDataActivityStatus
// 0x0020 (0x0020 - 0x0000)
struct CharacterStatusWidget_RecvPlayerDataActivityStatus final
{
public:
	struct FPlayerDataActivityStatus              PlayerDataActivityStatus;                          // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterStatusWidget_RecvPlayerDataActivityStatus) == 0x000004, "Wrong alignment on CharacterStatusWidget_RecvPlayerDataActivityStatus");
static_assert(sizeof(CharacterStatusWidget_RecvPlayerDataActivityStatus) == 0x000020, "Wrong size on CharacterStatusWidget_RecvPlayerDataActivityStatus");
static_assert(offsetof(CharacterStatusWidget_RecvPlayerDataActivityStatus, PlayerDataActivityStatus) == 0x000000, "Member 'CharacterStatusWidget_RecvPlayerDataActivityStatus::PlayerDataActivityStatus' has a wrong offset!");

// Function InGameModule.CharacterStatusWidget.ShowCharacterModel
// 0x0008 (0x0008 - 0x0000)
struct CharacterStatusWidget_ShowCharacterModel final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CostumeCode;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterStatusWidget_ShowCharacterModel) == 0x000004, "Wrong alignment on CharacterStatusWidget_ShowCharacterModel");
static_assert(sizeof(CharacterStatusWidget_ShowCharacterModel) == 0x000008, "Wrong size on CharacterStatusWidget_ShowCharacterModel");
static_assert(offsetof(CharacterStatusWidget_ShowCharacterModel, CharacterId) == 0x000000, "Member 'CharacterStatusWidget_ShowCharacterModel::CharacterId' has a wrong offset!");
static_assert(offsetof(CharacterStatusWidget_ShowCharacterModel, CostumeCode) == 0x000004, "Member 'CharacterStatusWidget_ShowCharacterModel::CostumeCode' has a wrong offset!");

// Function InGameModule.CharacterWidget.OnDecideReturnButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct CharacterWidget_OnDecideReturnButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterWidget_OnDecideReturnButtonEvent) == 0x000008, "Wrong alignment on CharacterWidget_OnDecideReturnButtonEvent");
static_assert(sizeof(CharacterWidget_OnDecideReturnButtonEvent) == 0x000010, "Wrong size on CharacterWidget_OnDecideReturnButtonEvent");
static_assert(offsetof(CharacterWidget_OnDecideReturnButtonEvent, Widget) == 0x000000, "Member 'CharacterWidget_OnDecideReturnButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(CharacterWidget_OnDecideReturnButtonEvent, InputType) == 0x000008, "Member 'CharacterWidget_OnDecideReturnButtonEvent::InputType' has a wrong offset!");

// Function InGameModule.CharacterWidget.OnSwitchTabEvent
// 0x0004 (0x0004 - 0x0000)
struct CharacterWidget_OnSwitchTabEvent final
{
public:
	int32                                         NewSelectTab;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterWidget_OnSwitchTabEvent) == 0x000004, "Wrong alignment on CharacterWidget_OnSwitchTabEvent");
static_assert(sizeof(CharacterWidget_OnSwitchTabEvent) == 0x000004, "Wrong size on CharacterWidget_OnSwitchTabEvent");
static_assert(offsetof(CharacterWidget_OnSwitchTabEvent, NewSelectTab) == 0x000000, "Member 'CharacterWidget_OnSwitchTabEvent::NewSelectTab' has a wrong offset!");

// Function InGameModule.CharacterWidget.UpdateCharacter
// 0x0008 (0x0008 - 0x0000)
struct CharacterWidget_UpdateCharacter final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VariationNo;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterWidget_UpdateCharacter) == 0x000004, "Wrong alignment on CharacterWidget_UpdateCharacter");
static_assert(sizeof(CharacterWidget_UpdateCharacter) == 0x000008, "Wrong size on CharacterWidget_UpdateCharacter");
static_assert(offsetof(CharacterWidget_UpdateCharacter, CharacterId) == 0x000000, "Member 'CharacterWidget_UpdateCharacter::CharacterId' has a wrong offset!");
static_assert(offsetof(CharacterWidget_UpdateCharacter, VariationNo) == 0x000004, "Member 'CharacterWidget_UpdateCharacter::VariationNo' has a wrong offset!");

// Function InGameModule.CommandWheelBase.CalculateMaxPageNum
// 0x0008 (0x0008 - 0x0000)
struct CommandWheelBase_CalculateMaxPageNum final
{
public:
	int32                                         ElementNum;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommandWheelBase_CalculateMaxPageNum) == 0x000004, "Wrong alignment on CommandWheelBase_CalculateMaxPageNum");
static_assert(sizeof(CommandWheelBase_CalculateMaxPageNum) == 0x000008, "Wrong size on CommandWheelBase_CalculateMaxPageNum");
static_assert(offsetof(CommandWheelBase_CalculateMaxPageNum, ElementNum) == 0x000000, "Member 'CommandWheelBase_CalculateMaxPageNum::ElementNum' has a wrong offset!");
static_assert(offsetof(CommandWheelBase_CalculateMaxPageNum, ReturnValue) == 0x000004, "Member 'CommandWheelBase_CalculateMaxPageNum::ReturnValue' has a wrong offset!");

// Function InGameModule.CommandWheelBase.GetSerializedIndexFromWheelIdxAndPageNum
// 0x000C (0x000C - 0x0000)
struct CommandWheelBase_GetSerializedIndexFromWheelIdxAndPageNum final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Page;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommandWheelBase_GetSerializedIndexFromWheelIdxAndPageNum) == 0x000004, "Wrong alignment on CommandWheelBase_GetSerializedIndexFromWheelIdxAndPageNum");
static_assert(sizeof(CommandWheelBase_GetSerializedIndexFromWheelIdxAndPageNum) == 0x00000C, "Wrong size on CommandWheelBase_GetSerializedIndexFromWheelIdxAndPageNum");
static_assert(offsetof(CommandWheelBase_GetSerializedIndexFromWheelIdxAndPageNum, Index_0) == 0x000000, "Member 'CommandWheelBase_GetSerializedIndexFromWheelIdxAndPageNum::Index_0' has a wrong offset!");
static_assert(offsetof(CommandWheelBase_GetSerializedIndexFromWheelIdxAndPageNum, Page) == 0x000004, "Member 'CommandWheelBase_GetSerializedIndexFromWheelIdxAndPageNum::Page' has a wrong offset!");
static_assert(offsetof(CommandWheelBase_GetSerializedIndexFromWheelIdxAndPageNum, ReturnValue) == 0x000008, "Member 'CommandWheelBase_GetSerializedIndexFromWheelIdxAndPageNum::ReturnValue' has a wrong offset!");

// Function InGameModule.CommunicationPinActor.InitPinInfo
// 0x0030 (0x0030 - 0x0000)
struct CommunicationPinActor_InitPinInfo final
{
public:
	struct FPinInfo                               PinInfo;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommunicationPinActor_InitPinInfo) == 0x000008, "Wrong alignment on CommunicationPinActor_InitPinInfo");
static_assert(sizeof(CommunicationPinActor_InitPinInfo) == 0x000030, "Wrong size on CommunicationPinActor_InitPinInfo");
static_assert(offsetof(CommunicationPinActor_InitPinInfo, PinInfo) == 0x000000, "Member 'CommunicationPinActor_InitPinInfo::PinInfo' has a wrong offset!");

// Function InGameModule.CustomMatchComponent.SendResultData_Client
// 0x0018 (0x0018 - 0x0000)
struct CustomMatchComponent_SendResultData_Client final
{
public:
	struct FCustomMatchResultData                 ResultData;                                        // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMatchComponent_SendResultData_Client) == 0x000008, "Wrong alignment on CustomMatchComponent_SendResultData_Client");
static_assert(sizeof(CustomMatchComponent_SendResultData_Client) == 0x000018, "Wrong size on CustomMatchComponent_SendResultData_Client");
static_assert(offsetof(CustomMatchComponent_SendResultData_Client, ResultData) == 0x000000, "Member 'CustomMatchComponent_SendResultData_Client::ResultData' has a wrong offset!");

// Function InGameModule.DuplicateControlComponent.BP_DuplicateIntoForImitation
// 0x0020 (0x0020 - 0x0000)
struct DuplicateControlComponent_BP_DuplicateIntoForImitation final
{
public:
	class ACharacterBattle*                       TargetCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackId                                     AttackId;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LifeTime;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DuplicateControlComponent_BP_DuplicateIntoForImitation) == 0x000008, "Wrong alignment on DuplicateControlComponent_BP_DuplicateIntoForImitation");
static_assert(sizeof(DuplicateControlComponent_BP_DuplicateIntoForImitation) == 0x000020, "Wrong size on DuplicateControlComponent_BP_DuplicateIntoForImitation");
static_assert(offsetof(DuplicateControlComponent_BP_DuplicateIntoForImitation, TargetCharacter) == 0x000000, "Member 'DuplicateControlComponent_BP_DuplicateIntoForImitation::TargetCharacter' has a wrong offset!");
static_assert(offsetof(DuplicateControlComponent_BP_DuplicateIntoForImitation, Location) == 0x000008, "Member 'DuplicateControlComponent_BP_DuplicateIntoForImitation::Location' has a wrong offset!");
static_assert(offsetof(DuplicateControlComponent_BP_DuplicateIntoForImitation, AttackId) == 0x000014, "Member 'DuplicateControlComponent_BP_DuplicateIntoForImitation::AttackId' has a wrong offset!");
static_assert(offsetof(DuplicateControlComponent_BP_DuplicateIntoForImitation, LifeTime) == 0x000018, "Member 'DuplicateControlComponent_BP_DuplicateIntoForImitation::LifeTime' has a wrong offset!");

// Function InGameModule.DuplicateControlComponent.DuplicateInto_RPC_ToServer
// 0x0018 (0x0018 - 0x0000)
struct DuplicateControlComponent_DuplicateInto_RPC_ToServer final
{
public:
	const class ACharacterBattle*                 TargetCharacter;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DuplicateControlComponent_DuplicateInto_RPC_ToServer) == 0x000008, "Wrong alignment on DuplicateControlComponent_DuplicateInto_RPC_ToServer");
static_assert(sizeof(DuplicateControlComponent_DuplicateInto_RPC_ToServer) == 0x000018, "Wrong size on DuplicateControlComponent_DuplicateInto_RPC_ToServer");
static_assert(offsetof(DuplicateControlComponent_DuplicateInto_RPC_ToServer, TargetCharacter) == 0x000000, "Member 'DuplicateControlComponent_DuplicateInto_RPC_ToServer::TargetCharacter' has a wrong offset!");
static_assert(offsetof(DuplicateControlComponent_DuplicateInto_RPC_ToServer, SpawnLocation) == 0x000008, "Member 'DuplicateControlComponent_DuplicateInto_RPC_ToServer::SpawnLocation' has a wrong offset!");

// Function InGameModule.DuplicateControlComponent.DuplicateIntoForImitation_RPC_ToServer
// 0x0020 (0x0020 - 0x0000)
struct DuplicateControlComponent_DuplicateIntoForImitation_RPC_ToServer final
{
public:
	const class ACharacterBattle*                 TargetCharacter;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackId                                     AttackId;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LifeTime;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DuplicateControlComponent_DuplicateIntoForImitation_RPC_ToServer) == 0x000008, "Wrong alignment on DuplicateControlComponent_DuplicateIntoForImitation_RPC_ToServer");
static_assert(sizeof(DuplicateControlComponent_DuplicateIntoForImitation_RPC_ToServer) == 0x000020, "Wrong size on DuplicateControlComponent_DuplicateIntoForImitation_RPC_ToServer");
static_assert(offsetof(DuplicateControlComponent_DuplicateIntoForImitation_RPC_ToServer, TargetCharacter) == 0x000000, "Member 'DuplicateControlComponent_DuplicateIntoForImitation_RPC_ToServer::TargetCharacter' has a wrong offset!");
static_assert(offsetof(DuplicateControlComponent_DuplicateIntoForImitation_RPC_ToServer, SpawnLocation) == 0x000008, "Member 'DuplicateControlComponent_DuplicateIntoForImitation_RPC_ToServer::SpawnLocation' has a wrong offset!");
static_assert(offsetof(DuplicateControlComponent_DuplicateIntoForImitation_RPC_ToServer, AttackId) == 0x000014, "Member 'DuplicateControlComponent_DuplicateIntoForImitation_RPC_ToServer::AttackId' has a wrong offset!");
static_assert(offsetof(DuplicateControlComponent_DuplicateIntoForImitation_RPC_ToServer, LifeTime) == 0x000018, "Member 'DuplicateControlComponent_DuplicateIntoForImitation_RPC_ToServer::LifeTime' has a wrong offset!");

// Function InGameModule.DuplicateControlComponent.DuplicateIntoStockCharacter_RPC_ToServer
// 0x000C (0x000C - 0x0000)
struct DuplicateControlComponent_DuplicateIntoStockCharacter_RPC_ToServer final
{
public:
	struct FVector                                SpawnLocation;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DuplicateControlComponent_DuplicateIntoStockCharacter_RPC_ToServer) == 0x000004, "Wrong alignment on DuplicateControlComponent_DuplicateIntoStockCharacter_RPC_ToServer");
static_assert(sizeof(DuplicateControlComponent_DuplicateIntoStockCharacter_RPC_ToServer) == 0x00000C, "Wrong size on DuplicateControlComponent_DuplicateIntoStockCharacter_RPC_ToServer");
static_assert(offsetof(DuplicateControlComponent_DuplicateIntoStockCharacter_RPC_ToServer, SpawnLocation) == 0x000000, "Member 'DuplicateControlComponent_DuplicateIntoStockCharacter_RPC_ToServer::SpawnLocation' has a wrong offset!");

// Function InGameModule.DuplicateControlComponent.OnDeadCharacter
// 0x0010 (0x0010 - 0x0000)
struct DuplicateControlComponent_OnDeadCharacter final
{
public:
	const class ACharacterBattle*                 Victim;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ACharacterBattle*                 Aggriever;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DuplicateControlComponent_OnDeadCharacter) == 0x000008, "Wrong alignment on DuplicateControlComponent_OnDeadCharacter");
static_assert(sizeof(DuplicateControlComponent_OnDeadCharacter) == 0x000010, "Wrong size on DuplicateControlComponent_OnDeadCharacter");
static_assert(offsetof(DuplicateControlComponent_OnDeadCharacter, Victim) == 0x000000, "Member 'DuplicateControlComponent_OnDeadCharacter::Victim' has a wrong offset!");
static_assert(offsetof(DuplicateControlComponent_OnDeadCharacter, Aggriever) == 0x000008, "Member 'DuplicateControlComponent_OnDeadCharacter::Aggriever' has a wrong offset!");

// Function InGameModule.DuplicateControlComponent.StockDuplicationData_RPC_ToServer
// 0x0008 (0x0008 - 0x0000)
struct DuplicateControlComponent_StockDuplicationData_RPC_ToServer final
{
public:
	const class ACharacterBattle*                 TargetCharacter;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DuplicateControlComponent_StockDuplicationData_RPC_ToServer) == 0x000008, "Wrong alignment on DuplicateControlComponent_StockDuplicationData_RPC_ToServer");
static_assert(sizeof(DuplicateControlComponent_StockDuplicationData_RPC_ToServer) == 0x000008, "Wrong size on DuplicateControlComponent_StockDuplicationData_RPC_ToServer");
static_assert(offsetof(DuplicateControlComponent_StockDuplicationData_RPC_ToServer, TargetCharacter) == 0x000000, "Member 'DuplicateControlComponent_StockDuplicationData_RPC_ToServer::TargetCharacter' has a wrong offset!");

// Function InGameModule.GameModeLobby.CountRampage
// 0x0001 (0x0001 - 0x0000)
struct GameModeLobby_CountRampage final
{
public:
	EAttackId                                     ID;                                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeLobby_CountRampage) == 0x000001, "Wrong alignment on GameModeLobby_CountRampage");
static_assert(sizeof(GameModeLobby_CountRampage) == 0x000001, "Wrong size on GameModeLobby_CountRampage");
static_assert(offsetof(GameModeLobby_CountRampage, ID) == 0x000000, "Member 'GameModeLobby_CountRampage::ID' has a wrong offset!");

// Function InGameModule.GameModeLobby.DelaySpawnAICharacterBattle
// 0x0010 (0x0010 - 0x0000)
struct GameModeLobby_DelaySpawnAICharacterBattle final
{
public:
	struct FBotInfoToSpawn                        botSpawnInfo;                                      // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeLobby_DelaySpawnAICharacterBattle) == 0x000004, "Wrong alignment on GameModeLobby_DelaySpawnAICharacterBattle");
static_assert(sizeof(GameModeLobby_DelaySpawnAICharacterBattle) == 0x000010, "Wrong size on GameModeLobby_DelaySpawnAICharacterBattle");
static_assert(offsetof(GameModeLobby_DelaySpawnAICharacterBattle, botSpawnInfo) == 0x000000, "Member 'GameModeLobby_DelaySpawnAICharacterBattle::botSpawnInfo' has a wrong offset!");

// Function InGameModule.GameModeLobby.OnCompleteConsumeRentalPoint
// 0x0004 (0x0004 - 0x0000)
struct GameModeLobby_OnCompleteConsumeRentalPoint final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeLobby_OnCompleteConsumeRentalPoint) == 0x000004, "Wrong alignment on GameModeLobby_OnCompleteConsumeRentalPoint");
static_assert(sizeof(GameModeLobby_OnCompleteConsumeRentalPoint) == 0x000004, "Wrong size on GameModeLobby_OnCompleteConsumeRentalPoint");
static_assert(offsetof(GameModeLobby_OnCompleteConsumeRentalPoint, RequestId) == 0x000000, "Member 'GameModeLobby_OnCompleteConsumeRentalPoint::RequestId' has a wrong offset!");

// Function InGameModule.GameModeLobby.OnCompleteStartBattle
// 0x0004 (0x0004 - 0x0000)
struct GameModeLobby_OnCompleteStartBattle final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeLobby_OnCompleteStartBattle) == 0x000004, "Wrong alignment on GameModeLobby_OnCompleteStartBattle");
static_assert(sizeof(GameModeLobby_OnCompleteStartBattle) == 0x000004, "Wrong size on GameModeLobby_OnCompleteStartBattle");
static_assert(offsetof(GameModeLobby_OnCompleteStartBattle, RequestId) == 0x000000, "Member 'GameModeLobby_OnCompleteStartBattle::RequestId' has a wrong offset!");

// Function InGameModule.GameModeLobby.StartBattle
// 0x0001 (0x0001 - 0x0000)
struct GameModeLobby_StartBattle final
{
public:
	bool                                          bForceStart;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeLobby_StartBattle) == 0x000001, "Wrong alignment on GameModeLobby_StartBattle");
static_assert(sizeof(GameModeLobby_StartBattle) == 0x000001, "Wrong size on GameModeLobby_StartBattle");
static_assert(offsetof(GameModeLobby_StartBattle, bForceStart) == 0x000000, "Member 'GameModeLobby_StartBattle::bForceStart' has a wrong offset!");

// Function InGameModule.GameModeTakeCharacterImage.BP_PlayFaceAnimation
// 0x0004 (0x0004 - 0x0000)
struct GameModeTakeCharacterImage_BP_PlayFaceAnimation final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeTakeCharacterImage_BP_PlayFaceAnimation) == 0x000004, "Wrong alignment on GameModeTakeCharacterImage_BP_PlayFaceAnimation");
static_assert(sizeof(GameModeTakeCharacterImage_BP_PlayFaceAnimation) == 0x000004, "Wrong size on GameModeTakeCharacterImage_BP_PlayFaceAnimation");
static_assert(offsetof(GameModeTakeCharacterImage_BP_PlayFaceAnimation, Index_0) == 0x000000, "Member 'GameModeTakeCharacterImage_BP_PlayFaceAnimation::Index_0' has a wrong offset!");

// Function InGameModule.GameModeTakeCharacterImage.DisableCallSign
// 0x0001 (0x0001 - 0x0000)
struct GameModeTakeCharacterImage_DisableCallSign final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeTakeCharacterImage_DisableCallSign) == 0x000001, "Wrong alignment on GameModeTakeCharacterImage_DisableCallSign");
static_assert(sizeof(GameModeTakeCharacterImage_DisableCallSign) == 0x000001, "Wrong size on GameModeTakeCharacterImage_DisableCallSign");
static_assert(offsetof(GameModeTakeCharacterImage_DisableCallSign, bDisable) == 0x000000, "Member 'GameModeTakeCharacterImage_DisableCallSign::bDisable' has a wrong offset!");

// Function InGameModule.GameModeTakeCharacterImage.DisableEffect
// 0x0001 (0x0001 - 0x0000)
struct GameModeTakeCharacterImage_DisableEffect final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeTakeCharacterImage_DisableEffect) == 0x000001, "Wrong alignment on GameModeTakeCharacterImage_DisableEffect");
static_assert(sizeof(GameModeTakeCharacterImage_DisableEffect) == 0x000001, "Wrong size on GameModeTakeCharacterImage_DisableEffect");
static_assert(offsetof(GameModeTakeCharacterImage_DisableEffect, bDisable) == 0x000000, "Member 'GameModeTakeCharacterImage_DisableEffect::bDisable' has a wrong offset!");

// Function InGameModule.GameModeTakeCharacterImage.GetTexture
// 0x0018 (0x0018 - 0x0000)
struct GameModeTakeCharacterImage_GetTexture final
{
public:
	int32                                         TextureType;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTexture*>                       ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeTakeCharacterImage_GetTexture) == 0x000008, "Wrong alignment on GameModeTakeCharacterImage_GetTexture");
static_assert(sizeof(GameModeTakeCharacterImage_GetTexture) == 0x000018, "Wrong size on GameModeTakeCharacterImage_GetTexture");
static_assert(offsetof(GameModeTakeCharacterImage_GetTexture, TextureType) == 0x000000, "Member 'GameModeTakeCharacterImage_GetTexture::TextureType' has a wrong offset!");
static_assert(offsetof(GameModeTakeCharacterImage_GetTexture, ReturnValue) == 0x000008, "Member 'GameModeTakeCharacterImage_GetTexture::ReturnValue' has a wrong offset!");

// Function InGameModule.GameModeTakeCharacterImage.PlayCustomAnimation
// 0x0001 (0x0001 - 0x0000)
struct GameModeTakeCharacterImage_PlayCustomAnimation final
{
public:
	ETakeCharacterImageTypeCustom                 Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeTakeCharacterImage_PlayCustomAnimation) == 0x000001, "Wrong alignment on GameModeTakeCharacterImage_PlayCustomAnimation");
static_assert(sizeof(GameModeTakeCharacterImage_PlayCustomAnimation) == 0x000001, "Wrong size on GameModeTakeCharacterImage_PlayCustomAnimation");
static_assert(offsetof(GameModeTakeCharacterImage_PlayCustomAnimation, Type) == 0x000000, "Member 'GameModeTakeCharacterImage_PlayCustomAnimation::Type' has a wrong offset!");

// Function InGameModule.GameModeTakeCharacterImage.PlayEmote
// 0x0004 (0x0004 - 0x0000)
struct GameModeTakeCharacterImage_PlayEmote final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeTakeCharacterImage_PlayEmote) == 0x000004, "Wrong alignment on GameModeTakeCharacterImage_PlayEmote");
static_assert(sizeof(GameModeTakeCharacterImage_PlayEmote) == 0x000004, "Wrong size on GameModeTakeCharacterImage_PlayEmote");
static_assert(offsetof(GameModeTakeCharacterImage_PlayEmote, Index_0) == 0x000000, "Member 'GameModeTakeCharacterImage_PlayEmote::Index_0' has a wrong offset!");

// Function InGameModule.GameModeTakeCharacterImage.PlayUniqueActionUnique
// 0x0004 (0x0004 - 0x0000)
struct GameModeTakeCharacterImage_PlayUniqueActionUnique final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeTakeCharacterImage_PlayUniqueActionUnique) == 0x000004, "Wrong alignment on GameModeTakeCharacterImage_PlayUniqueActionUnique");
static_assert(sizeof(GameModeTakeCharacterImage_PlayUniqueActionUnique) == 0x000004, "Wrong size on GameModeTakeCharacterImage_PlayUniqueActionUnique");
static_assert(offsetof(GameModeTakeCharacterImage_PlayUniqueActionUnique, Index_0) == 0x000000, "Member 'GameModeTakeCharacterImage_PlayUniqueActionUnique::Index_0' has a wrong offset!");

// Function InGameModule.GameModeTakeCharacterImage.SpawnCharacter
// 0x0050 (0x0050 - 0x0000)
struct GameModeTakeCharacterImage_SpawnCharacter final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostumeId;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostumeColor;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterId                                  CharaID;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Variation;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacterBattle*                       ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeTakeCharacterImage_SpawnCharacter) == 0x000010, "Wrong alignment on GameModeTakeCharacterImage_SpawnCharacter");
static_assert(sizeof(GameModeTakeCharacterImage_SpawnCharacter) == 0x000050, "Wrong size on GameModeTakeCharacterImage_SpawnCharacter");
static_assert(offsetof(GameModeTakeCharacterImage_SpawnCharacter, PlayerId) == 0x000000, "Member 'GameModeTakeCharacterImage_SpawnCharacter::PlayerId' has a wrong offset!");
static_assert(offsetof(GameModeTakeCharacterImage_SpawnCharacter, CostumeId) == 0x000004, "Member 'GameModeTakeCharacterImage_SpawnCharacter::CostumeId' has a wrong offset!");
static_assert(offsetof(GameModeTakeCharacterImage_SpawnCharacter, CostumeColor) == 0x000008, "Member 'GameModeTakeCharacterImage_SpawnCharacter::CostumeColor' has a wrong offset!");
static_assert(offsetof(GameModeTakeCharacterImage_SpawnCharacter, CharaID) == 0x00000C, "Member 'GameModeTakeCharacterImage_SpawnCharacter::CharaID' has a wrong offset!");
static_assert(offsetof(GameModeTakeCharacterImage_SpawnCharacter, Transform) == 0x000010, "Member 'GameModeTakeCharacterImage_SpawnCharacter::Transform' has a wrong offset!");
static_assert(offsetof(GameModeTakeCharacterImage_SpawnCharacter, Variation) == 0x000040, "Member 'GameModeTakeCharacterImage_SpawnCharacter::Variation' has a wrong offset!");
static_assert(offsetof(GameModeTakeCharacterImage_SpawnCharacter, ReturnValue) == 0x000048, "Member 'GameModeTakeCharacterImage_SpawnCharacter::ReturnValue' has a wrong offset!");

// Function InGameModule.GameModeTakeCharacterImage.UpdateResource
// 0x0008 (0x0008 - 0x0000)
struct GameModeTakeCharacterImage_UpdateResource final
{
public:
	class UTexture*                               Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeTakeCharacterImage_UpdateResource) == 0x000008, "Wrong alignment on GameModeTakeCharacterImage_UpdateResource");
static_assert(sizeof(GameModeTakeCharacterImage_UpdateResource) == 0x000008, "Wrong size on GameModeTakeCharacterImage_UpdateResource");
static_assert(offsetof(GameModeTakeCharacterImage_UpdateResource, Texture) == 0x000000, "Member 'GameModeTakeCharacterImage_UpdateResource::Texture' has a wrong offset!");

// DelegateFunction InGameModule.GameStateLobby.CountDownEvent__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct GameStateLobby_CountDownEvent__DelegateSignature final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateLobby_CountDownEvent__DelegateSignature) == 0x000004, "Wrong alignment on GameStateLobby_CountDownEvent__DelegateSignature");
static_assert(sizeof(GameStateLobby_CountDownEvent__DelegateSignature) == 0x000004, "Wrong size on GameStateLobby_CountDownEvent__DelegateSignature");
static_assert(offsetof(GameStateLobby_CountDownEvent__DelegateSignature, Count) == 0x000000, "Member 'GameStateLobby_CountDownEvent__DelegateSignature::Count' has a wrong offset!");

// Function InGameModule.GameStateLobby.DisplayMatchingInfo
// 0x000C (0x000C - 0x0000)
struct GameStateLobby_DisplayMatchingInfo final
{
public:
	int32                                         PlayerNum;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBot;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameStateLobby_DisplayMatchingInfo) == 0x000004, "Wrong alignment on GameStateLobby_DisplayMatchingInfo");
static_assert(sizeof(GameStateLobby_DisplayMatchingInfo) == 0x00000C, "Wrong size on GameStateLobby_DisplayMatchingInfo");
static_assert(offsetof(GameStateLobby_DisplayMatchingInfo, PlayerNum) == 0x000000, "Member 'GameStateLobby_DisplayMatchingInfo::PlayerNum' has a wrong offset!");
static_assert(offsetof(GameStateLobby_DisplayMatchingInfo, Time) == 0x000004, "Member 'GameStateLobby_DisplayMatchingInfo::Time' has a wrong offset!");
static_assert(offsetof(GameStateLobby_DisplayMatchingInfo, bBot) == 0x000008, "Member 'GameStateLobby_DisplayMatchingInfo::bBot' has a wrong offset!");

// Function InGameModule.GameStateLobby.MulticastLoadSupplyAbility
// 0x0010 (0x0010 - 0x0000)
struct GameStateLobby_MulticastLoadSupplyAbility final
{
public:
	TArray<struct FCharacterAbilityInfo>          CharacterIdList;                                   // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateLobby_MulticastLoadSupplyAbility) == 0x000008, "Wrong alignment on GameStateLobby_MulticastLoadSupplyAbility");
static_assert(sizeof(GameStateLobby_MulticastLoadSupplyAbility) == 0x000010, "Wrong size on GameStateLobby_MulticastLoadSupplyAbility");
static_assert(offsetof(GameStateLobby_MulticastLoadSupplyAbility, CharacterIdList) == 0x000000, "Member 'GameStateLobby_MulticastLoadSupplyAbility::CharacterIdList' has a wrong offset!");

// Function InGameModule.GameStateLobby.GetLobbySequence
// 0x0001 (0x0001 - 0x0000)
struct GameStateLobby_GetLobbySequence final
{
public:
	ELobbySequence                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateLobby_GetLobbySequence) == 0x000001, "Wrong alignment on GameStateLobby_GetLobbySequence");
static_assert(sizeof(GameStateLobby_GetLobbySequence) == 0x000001, "Wrong size on GameStateLobby_GetLobbySequence");
static_assert(offsetof(GameStateLobby_GetLobbySequence, ReturnValue) == 0x000000, "Member 'GameStateLobby_GetLobbySequence::ReturnValue' has a wrong offset!");

// Function InGameModule.GenericCounter.SetCaptionColor
// 0x0028 (0x0028 - 0x0000)
struct GenericCounter_SetCaptionColor final
{
public:
	struct FSlateColor                            InColor;                                           // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GenericCounter_SetCaptionColor) == 0x000008, "Wrong alignment on GenericCounter_SetCaptionColor");
static_assert(sizeof(GenericCounter_SetCaptionColor) == 0x000028, "Wrong size on GenericCounter_SetCaptionColor");
static_assert(offsetof(GenericCounter_SetCaptionColor, InColor) == 0x000000, "Member 'GenericCounter_SetCaptionColor::InColor' has a wrong offset!");

// Function InGameModule.GenericCounter.SetCounterColor
// 0x0028 (0x0028 - 0x0000)
struct GenericCounter_SetCounterColor final
{
public:
	struct FSlateColor                            InColor;                                           // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GenericCounter_SetCounterColor) == 0x000008, "Wrong alignment on GenericCounter_SetCounterColor");
static_assert(sizeof(GenericCounter_SetCounterColor) == 0x000028, "Wrong size on GenericCounter_SetCounterColor");
static_assert(offsetof(GenericCounter_SetCounterColor, InColor) == 0x000000, "Member 'GenericCounter_SetCounterColor::InColor' has a wrong offset!");

// Function InGameModule.GenericCounter.SetCounterNum
// 0x0004 (0x0004 - 0x0000)
struct GenericCounter_SetCounterNum final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GenericCounter_SetCounterNum) == 0x000004, "Wrong alignment on GenericCounter_SetCounterNum");
static_assert(sizeof(GenericCounter_SetCounterNum) == 0x000004, "Wrong size on GenericCounter_SetCounterNum");
static_assert(offsetof(GenericCounter_SetCounterNum, Num) == 0x000000, "Member 'GenericCounter_SetCounterNum::Num' has a wrong offset!");

// Function InGameModule.GotoResultAppWidget.OnCancelEvent
// 0x0010 (0x0010 - 0x0000)
struct GotoResultAppWidget_OnCancelEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GotoResultAppWidget_OnCancelEvent) == 0x000008, "Wrong alignment on GotoResultAppWidget_OnCancelEvent");
static_assert(sizeof(GotoResultAppWidget_OnCancelEvent) == 0x000010, "Wrong size on GotoResultAppWidget_OnCancelEvent");
static_assert(offsetof(GotoResultAppWidget_OnCancelEvent, Widget) == 0x000000, "Member 'GotoResultAppWidget_OnCancelEvent::Widget' has a wrong offset!");
static_assert(offsetof(GotoResultAppWidget_OnCancelEvent, InputType) == 0x000008, "Member 'GotoResultAppWidget_OnCancelEvent::InputType' has a wrong offset!");

// Function InGameModule.GotoResultAppWidget.OnPopupButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct GotoResultAppWidget_OnPopupButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GotoResultAppWidget_OnPopupButtonEvent) == 0x000008, "Wrong alignment on GotoResultAppWidget_OnPopupButtonEvent");
static_assert(sizeof(GotoResultAppWidget_OnPopupButtonEvent) == 0x000010, "Wrong size on GotoResultAppWidget_OnPopupButtonEvent");
static_assert(offsetof(GotoResultAppWidget_OnPopupButtonEvent, Widget) == 0x000000, "Member 'GotoResultAppWidget_OnPopupButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(GotoResultAppWidget_OnPopupButtonEvent, InputType) == 0x000008, "Member 'GotoResultAppWidget_OnPopupButtonEvent::InputType' has a wrong offset!");
static_assert(offsetof(GotoResultAppWidget_OnPopupButtonEvent, LeftButton) == 0x000009, "Member 'GotoResultAppWidget_OnPopupButtonEvent::LeftButton' has a wrong offset!");

// Function InGameModule.GroundPositionEffectComponent.OnHitBackground
// 0x0088 (0x0088 - 0x0000)
struct GroundPositionEffectComponent_OnHitBackground final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroundPositionEffectComponent_OnHitBackground) == 0x000004, "Wrong alignment on GroundPositionEffectComponent_OnHitBackground");
static_assert(sizeof(GroundPositionEffectComponent_OnHitBackground) == 0x000088, "Wrong size on GroundPositionEffectComponent_OnHitBackground");
static_assert(offsetof(GroundPositionEffectComponent_OnHitBackground, HitResult) == 0x000000, "Member 'GroundPositionEffectComponent_OnHitBackground::HitResult' has a wrong offset!");

// Function InGameModule.GroundPositionEffectComponent.OnHitCharacter
// 0x0088 (0x0088 - 0x0000)
struct GroundPositionEffectComponent_OnHitCharacter final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroundPositionEffectComponent_OnHitCharacter) == 0x000004, "Wrong alignment on GroundPositionEffectComponent_OnHitCharacter");
static_assert(sizeof(GroundPositionEffectComponent_OnHitCharacter) == 0x000088, "Wrong size on GroundPositionEffectComponent_OnHitCharacter");
static_assert(offsetof(GroundPositionEffectComponent_OnHitCharacter, HitResult) == 0x000000, "Member 'GroundPositionEffectComponent_OnHitCharacter::HitResult' has a wrong offset!");

// Function InGameModule.HUDAbilityPresenter.SwitchShortcutInfoVisibility
// 0x0001 (0x0001 - 0x0000)
struct HUDAbilityPresenter_SwitchShortcutInfoVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDAbilityPresenter_SwitchShortcutInfoVisibility) == 0x000001, "Wrong alignment on HUDAbilityPresenter_SwitchShortcutInfoVisibility");
static_assert(sizeof(HUDAbilityPresenter_SwitchShortcutInfoVisibility) == 0x000001, "Wrong size on HUDAbilityPresenter_SwitchShortcutInfoVisibility");
static_assert(offsetof(HUDAbilityPresenter_SwitchShortcutInfoVisibility, bVisible) == 0x000000, "Member 'HUDAbilityPresenter_SwitchShortcutInfoVisibility::bVisible' has a wrong offset!");

// Function InGameModule.HUDBasePresenter.IsBlockMember
// 0x0018 (0x0018 - 0x0000)
struct HUDBasePresenter_IsBlockMember final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HUDBasePresenter_IsBlockMember) == 0x000008, "Wrong alignment on HUDBasePresenter_IsBlockMember");
static_assert(sizeof(HUDBasePresenter_IsBlockMember) == 0x000018, "Wrong size on HUDBasePresenter_IsBlockMember");
static_assert(offsetof(HUDBasePresenter_IsBlockMember, PlayerId) == 0x000000, "Member 'HUDBasePresenter_IsBlockMember::PlayerId' has a wrong offset!");
static_assert(offsetof(HUDBasePresenter_IsBlockMember, ReturnValue) == 0x000010, "Member 'HUDBasePresenter_IsBlockMember::ReturnValue' has a wrong offset!");

// Function InGameModule.HUDBasePresenter.ShowGuardBreak
// 0x0010 (0x0010 - 0x0000)
struct HUDBasePresenter_ShowGuardBreak final
{
public:
	class ACharacterBattle*                       GuardBrokenCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMyMurderer;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGuardBreakAndKO;                                  // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HUDBasePresenter_ShowGuardBreak) == 0x000008, "Wrong alignment on HUDBasePresenter_ShowGuardBreak");
static_assert(sizeof(HUDBasePresenter_ShowGuardBreak) == 0x000010, "Wrong size on HUDBasePresenter_ShowGuardBreak");
static_assert(offsetof(HUDBasePresenter_ShowGuardBreak, GuardBrokenCharacter) == 0x000000, "Member 'HUDBasePresenter_ShowGuardBreak::GuardBrokenCharacter' has a wrong offset!");
static_assert(offsetof(HUDBasePresenter_ShowGuardBreak, bMyMurderer) == 0x000008, "Member 'HUDBasePresenter_ShowGuardBreak::bMyMurderer' has a wrong offset!");
static_assert(offsetof(HUDBasePresenter_ShowGuardBreak, bGuardBreakAndKO) == 0x000009, "Member 'HUDBasePresenter_ShowGuardBreak::bGuardBreakAndKO' has a wrong offset!");

// Function InGameModule.HUDBasePresenter.ShowKnockDown
// 0x0010 (0x0010 - 0x0000)
struct HUDBasePresenter_ShowKnockDown final
{
public:
	class ACharacterBattle*                       DownCharacter;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMyMurderer;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGuardBreakAndKO;                                  // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HUDBasePresenter_ShowKnockDown) == 0x000008, "Wrong alignment on HUDBasePresenter_ShowKnockDown");
static_assert(sizeof(HUDBasePresenter_ShowKnockDown) == 0x000010, "Wrong size on HUDBasePresenter_ShowKnockDown");
static_assert(offsetof(HUDBasePresenter_ShowKnockDown, DownCharacter) == 0x000000, "Member 'HUDBasePresenter_ShowKnockDown::DownCharacter' has a wrong offset!");
static_assert(offsetof(HUDBasePresenter_ShowKnockDown, bMyMurderer) == 0x000008, "Member 'HUDBasePresenter_ShowKnockDown::bMyMurderer' has a wrong offset!");
static_assert(offsetof(HUDBasePresenter_ShowKnockDown, bGuardBreakAndKO) == 0x000009, "Member 'HUDBasePresenter_ShowKnockDown::bGuardBreakAndKO' has a wrong offset!");

// Function InGameModule.HudCommandControlComponent.CommitPin
// 0x0090 (0x0090 - 0x0000)
struct HudCommandControlComponent_CommitPin final
{
public:
	EMarkerType                                   MarkerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0004(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          IsAlert;                                           // 0x008C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlaceFromMap;                                     // 0x008D(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8E[0x2];                                       // 0x008E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HudCommandControlComponent_CommitPin) == 0x000004, "Wrong alignment on HudCommandControlComponent_CommitPin");
static_assert(sizeof(HudCommandControlComponent_CommitPin) == 0x000090, "Wrong size on HudCommandControlComponent_CommitPin");
static_assert(offsetof(HudCommandControlComponent_CommitPin, MarkerType) == 0x000000, "Member 'HudCommandControlComponent_CommitPin::MarkerType' has a wrong offset!");
static_assert(offsetof(HudCommandControlComponent_CommitPin, HitResult) == 0x000004, "Member 'HudCommandControlComponent_CommitPin::HitResult' has a wrong offset!");
static_assert(offsetof(HudCommandControlComponent_CommitPin, IsAlert) == 0x00008C, "Member 'HudCommandControlComponent_CommitPin::IsAlert' has a wrong offset!");
static_assert(offsetof(HudCommandControlComponent_CommitPin, bPlaceFromMap) == 0x00008D, "Member 'HudCommandControlComponent_CommitPin::bPlaceFromMap' has a wrong offset!");

// Function InGameModule.HudCommandControlComponent.DispatchDestructionToUI
// 0x0008 (0x0008 - 0x0000)
struct HudCommandControlComponent_DispatchDestructionToUI final
{
public:
	class ACommunicationPinActor*                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudCommandControlComponent_DispatchDestructionToUI) == 0x000008, "Wrong alignment on HudCommandControlComponent_DispatchDestructionToUI");
static_assert(sizeof(HudCommandControlComponent_DispatchDestructionToUI) == 0x000008, "Wrong size on HudCommandControlComponent_DispatchDestructionToUI");
static_assert(offsetof(HudCommandControlComponent_DispatchDestructionToUI, DestroyedActor) == 0x000000, "Member 'HudCommandControlComponent_DispatchDestructionToUI::DestroyedActor' has a wrong offset!");

// Function InGameModule.HudCommandControlComponent.GetAnimTable
// 0x0030 (0x0030 - 0x0000)
struct HudCommandControlComponent_GetAnimTable final
{
public:
	ECharacterId                                  Whose;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UDataTable>              ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudCommandControlComponent_GetAnimTable) == 0x000008, "Wrong alignment on HudCommandControlComponent_GetAnimTable");
static_assert(sizeof(HudCommandControlComponent_GetAnimTable) == 0x000030, "Wrong size on HudCommandControlComponent_GetAnimTable");
static_assert(offsetof(HudCommandControlComponent_GetAnimTable, Whose) == 0x000000, "Member 'HudCommandControlComponent_GetAnimTable::Whose' has a wrong offset!");
static_assert(offsetof(HudCommandControlComponent_GetAnimTable, ReturnValue) == 0x000008, "Member 'HudCommandControlComponent_GetAnimTable::ReturnValue' has a wrong offset!");

// Function InGameModule.HudCommandControlComponent.OnInteractionUpdated
// 0x0008 (0x0008 - 0x0000)
struct HudCommandControlComponent_OnInteractionUpdated final
{
public:
	class UInteractTargetComponent*               TargetComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudCommandControlComponent_OnInteractionUpdated) == 0x000008, "Wrong alignment on HudCommandControlComponent_OnInteractionUpdated");
static_assert(sizeof(HudCommandControlComponent_OnInteractionUpdated) == 0x000008, "Wrong size on HudCommandControlComponent_OnInteractionUpdated");
static_assert(offsetof(HudCommandControlComponent_OnInteractionUpdated, TargetComponent) == 0x000000, "Member 'HudCommandControlComponent_OnInteractionUpdated::TargetComponent' has a wrong offset!");

// DelegateFunction InGameModule.HudCommandControlComponent.PinLifeEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct HudCommandControlComponent_PinLifeEvent__DelegateSignature final
{
public:
	class ACommunicationPinActor*                 SpawnedPinActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudCommandControlComponent_PinLifeEvent__DelegateSignature) == 0x000008, "Wrong alignment on HudCommandControlComponent_PinLifeEvent__DelegateSignature");
static_assert(sizeof(HudCommandControlComponent_PinLifeEvent__DelegateSignature) == 0x000008, "Wrong size on HudCommandControlComponent_PinLifeEvent__DelegateSignature");
static_assert(offsetof(HudCommandControlComponent_PinLifeEvent__DelegateSignature, SpawnedPinActor) == 0x000000, "Member 'HudCommandControlComponent_PinLifeEvent__DelegateSignature::SpawnedPinActor' has a wrong offset!");

// Function InGameModule.HudCommandControlComponent.RegisterPin
// 0x0008 (0x0008 - 0x0000)
struct HudCommandControlComponent_RegisterPin final
{
public:
	class ACommunicationPinActor*                 Pin;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudCommandControlComponent_RegisterPin) == 0x000008, "Wrong alignment on HudCommandControlComponent_RegisterPin");
static_assert(sizeof(HudCommandControlComponent_RegisterPin) == 0x000008, "Wrong size on HudCommandControlComponent_RegisterPin");
static_assert(offsetof(HudCommandControlComponent_RegisterPin, Pin) == 0x000000, "Member 'HudCommandControlComponent_RegisterPin::Pin' has a wrong offset!");

// Function InGameModule.HudCommandControlComponent.RemovePinFromList
// 0x0001 (0x0001 - 0x0000)
struct HudCommandControlComponent_RemovePinFromList final
{
public:
	uint8                                         PinGuid;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudCommandControlComponent_RemovePinFromList) == 0x000001, "Wrong alignment on HudCommandControlComponent_RemovePinFromList");
static_assert(sizeof(HudCommandControlComponent_RemovePinFromList) == 0x000001, "Wrong size on HudCommandControlComponent_RemovePinFromList");
static_assert(offsetof(HudCommandControlComponent_RemovePinFromList, PinGuid) == 0x000000, "Member 'HudCommandControlComponent_RemovePinFromList::PinGuid' has a wrong offset!");

// Function InGameModule.HudCommandControlComponent.SendAbilityRequest_ToServer
// 0x0010 (0x0010 - 0x0000)
struct HudCommandControlComponent_SendAbilityRequest_ToServer final
{
public:
	const class APlayerStateBattle*               Sender;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdAbilityType                                AbilityType;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackId                                     AttackId;                                          // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HudCommandControlComponent_SendAbilityRequest_ToServer) == 0x000008, "Wrong alignment on HudCommandControlComponent_SendAbilityRequest_ToServer");
static_assert(sizeof(HudCommandControlComponent_SendAbilityRequest_ToServer) == 0x000010, "Wrong size on HudCommandControlComponent_SendAbilityRequest_ToServer");
static_assert(offsetof(HudCommandControlComponent_SendAbilityRequest_ToServer, Sender) == 0x000000, "Member 'HudCommandControlComponent_SendAbilityRequest_ToServer::Sender' has a wrong offset!");
static_assert(offsetof(HudCommandControlComponent_SendAbilityRequest_ToServer, AbilityType) == 0x000008, "Member 'HudCommandControlComponent_SendAbilityRequest_ToServer::AbilityType' has a wrong offset!");
static_assert(offsetof(HudCommandControlComponent_SendAbilityRequest_ToServer, AttackId) == 0x000009, "Member 'HudCommandControlComponent_SendAbilityRequest_ToServer::AttackId' has a wrong offset!");

// Function InGameModule.HudCommandControlComponent.SendMarkerCancelMessage
// 0x0008 (0x0008 - 0x0000)
struct HudCommandControlComponent_SendMarkerCancelMessage final
{
public:
	const class ACommunicationPinActor*           PinActor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudCommandControlComponent_SendMarkerCancelMessage) == 0x000008, "Wrong alignment on HudCommandControlComponent_SendMarkerCancelMessage");
static_assert(sizeof(HudCommandControlComponent_SendMarkerCancelMessage) == 0x000008, "Wrong size on HudCommandControlComponent_SendMarkerCancelMessage");
static_assert(offsetof(HudCommandControlComponent_SendMarkerCancelMessage, PinActor) == 0x000000, "Member 'HudCommandControlComponent_SendMarkerCancelMessage::PinActor' has a wrong offset!");

// Function InGameModule.HudCommandControlComponent.SendSupplyRequest_ToServer
// 0x0010 (0x0010 - 0x0000)
struct HudCommandControlComponent_SendSupplyRequest_ToServer final
{
public:
	const class APlayerStateBattle*               Sender;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SupplyId;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudCommandControlComponent_SendSupplyRequest_ToServer) == 0x000008, "Wrong alignment on HudCommandControlComponent_SendSupplyRequest_ToServer");
static_assert(sizeof(HudCommandControlComponent_SendSupplyRequest_ToServer) == 0x000010, "Wrong size on HudCommandControlComponent_SendSupplyRequest_ToServer");
static_assert(offsetof(HudCommandControlComponent_SendSupplyRequest_ToServer, Sender) == 0x000000, "Member 'HudCommandControlComponent_SendSupplyRequest_ToServer::Sender' has a wrong offset!");
static_assert(offsetof(HudCommandControlComponent_SendSupplyRequest_ToServer, SupplyId) == 0x000008, "Member 'HudCommandControlComponent_SendSupplyRequest_ToServer::SupplyId' has a wrong offset!");

// Function InGameModule.HudCommandControlComponent.SendTextMessage
// 0x0018 (0x0018 - 0x0000)
struct HudCommandControlComponent_SendTextMessage final
{
public:
	class FString                                 InKeyForTable;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SendToMyself;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HudCommandControlComponent_SendTextMessage) == 0x000008, "Wrong alignment on HudCommandControlComponent_SendTextMessage");
static_assert(sizeof(HudCommandControlComponent_SendTextMessage) == 0x000018, "Wrong size on HudCommandControlComponent_SendTextMessage");
static_assert(offsetof(HudCommandControlComponent_SendTextMessage, InKeyForTable) == 0x000000, "Member 'HudCommandControlComponent_SendTextMessage::InKeyForTable' has a wrong offset!");
static_assert(offsetof(HudCommandControlComponent_SendTextMessage, SendToMyself) == 0x000010, "Member 'HudCommandControlComponent_SendTextMessage::SendToMyself' has a wrong offset!");

// Function InGameModule.HudCommandControlComponent.ServerCancelPin
// 0x0008 (0x0008 - 0x0000)
struct HudCommandControlComponent_ServerCancelPin final
{
public:
	class ACommunicationPinActor*                 PinActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudCommandControlComponent_ServerCancelPin) == 0x000008, "Wrong alignment on HudCommandControlComponent_ServerCancelPin");
static_assert(sizeof(HudCommandControlComponent_ServerCancelPin) == 0x000008, "Wrong size on HudCommandControlComponent_ServerCancelPin");
static_assert(offsetof(HudCommandControlComponent_ServerCancelPin, PinActor) == 0x000000, "Member 'HudCommandControlComponent_ServerCancelPin::PinActor' has a wrong offset!");

// Function InGameModule.HudCommandControlComponent.ServerOutputDoubleClickTime
// 0x0004 (0x0004 - 0x0000)
struct HudCommandControlComponent_ServerOutputDoubleClickTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudCommandControlComponent_ServerOutputDoubleClickTime) == 0x000004, "Wrong alignment on HudCommandControlComponent_ServerOutputDoubleClickTime");
static_assert(sizeof(HudCommandControlComponent_ServerOutputDoubleClickTime) == 0x000004, "Wrong size on HudCommandControlComponent_ServerOutputDoubleClickTime");
static_assert(offsetof(HudCommandControlComponent_ServerOutputDoubleClickTime, Time) == 0x000000, "Member 'HudCommandControlComponent_ServerOutputDoubleClickTime::Time' has a wrong offset!");

// Function InGameModule.HudCommandControlComponent.ServerPlacePinEvent
// 0x0030 (0x0030 - 0x0000)
struct HudCommandControlComponent_ServerPlacePinEvent final
{
public:
	struct FPinInfo                               PinInfo;                                           // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudCommandControlComponent_ServerPlacePinEvent) == 0x000008, "Wrong alignment on HudCommandControlComponent_ServerPlacePinEvent");
static_assert(sizeof(HudCommandControlComponent_ServerPlacePinEvent) == 0x000030, "Wrong size on HudCommandControlComponent_ServerPlacePinEvent");
static_assert(offsetof(HudCommandControlComponent_ServerPlacePinEvent, PinInfo) == 0x000000, "Member 'HudCommandControlComponent_ServerPlacePinEvent::PinInfo' has a wrong offset!");

// Function InGameModule.HudCommandControlComponent.ServerSendTextMessage
// 0x0010 (0x0010 - 0x0000)
struct HudCommandControlComponent_ServerSendTextMessage final
{
public:
	class FString                                 InKeyForTable;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudCommandControlComponent_ServerSendTextMessage) == 0x000008, "Wrong alignment on HudCommandControlComponent_ServerSendTextMessage");
static_assert(sizeof(HudCommandControlComponent_ServerSendTextMessage) == 0x000010, "Wrong size on HudCommandControlComponent_ServerSendTextMessage");
static_assert(offsetof(HudCommandControlComponent_ServerSendTextMessage, InKeyForTable) == 0x000000, "Member 'HudCommandControlComponent_ServerSendTextMessage::InKeyForTable' has a wrong offset!");

// Function InGameModule.HudCommandControlComponent.SetFirstUseSupply
// 0x0008 (0x0008 - 0x0000)
struct HudCommandControlComponent_SetFirstUseSupply final
{
public:
	class FName                                   NewShortcut;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudCommandControlComponent_SetFirstUseSupply) == 0x000004, "Wrong alignment on HudCommandControlComponent_SetFirstUseSupply");
static_assert(sizeof(HudCommandControlComponent_SetFirstUseSupply) == 0x000008, "Wrong size on HudCommandControlComponent_SetFirstUseSupply");
static_assert(offsetof(HudCommandControlComponent_SetFirstUseSupply, NewShortcut) == 0x000000, "Member 'HudCommandControlComponent_SetFirstUseSupply::NewShortcut' has a wrong offset!");

// Function InGameModule.HudCommandControlComponent.GetCurrentSupplyNumber
// 0x000C (0x000C - 0x0000)
struct HudCommandControlComponent_GetCurrentSupplyNumber final
{
public:
	class FName                                   SupplyId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudCommandControlComponent_GetCurrentSupplyNumber) == 0x000004, "Wrong alignment on HudCommandControlComponent_GetCurrentSupplyNumber");
static_assert(sizeof(HudCommandControlComponent_GetCurrentSupplyNumber) == 0x00000C, "Wrong size on HudCommandControlComponent_GetCurrentSupplyNumber");
static_assert(offsetof(HudCommandControlComponent_GetCurrentSupplyNumber, SupplyId) == 0x000000, "Member 'HudCommandControlComponent_GetCurrentSupplyNumber::SupplyId' has a wrong offset!");
static_assert(offsetof(HudCommandControlComponent_GetCurrentSupplyNumber, ReturnValue) == 0x000008, "Member 'HudCommandControlComponent_GetCurrentSupplyNumber::ReturnValue' has a wrong offset!");

// Function InGameModule.HudCommandControlComponent.GetHitResult
// 0x008C (0x008C - 0x0000)
struct HudCommandControlComponent_GetHitResult final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HudCommandControlComponent_GetHitResult) == 0x000004, "Wrong alignment on HudCommandControlComponent_GetHitResult");
static_assert(sizeof(HudCommandControlComponent_GetHitResult) == 0x00008C, "Wrong size on HudCommandControlComponent_GetHitResult");
static_assert(offsetof(HudCommandControlComponent_GetHitResult, HitResult) == 0x000000, "Member 'HudCommandControlComponent_GetHitResult::HitResult' has a wrong offset!");
static_assert(offsetof(HudCommandControlComponent_GetHitResult, ReturnValue) == 0x000088, "Member 'HudCommandControlComponent_GetHitResult::ReturnValue' has a wrong offset!");

// Function InGameModule.HudCommandControlComponent.PlayEmote
// 0x0004 (0x0004 - 0x0000)
struct HudCommandControlComponent_PlayEmote final
{
public:
	int32                                         EmoteCode;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudCommandControlComponent_PlayEmote) == 0x000004, "Wrong alignment on HudCommandControlComponent_PlayEmote");
static_assert(sizeof(HudCommandControlComponent_PlayEmote) == 0x000004, "Wrong size on HudCommandControlComponent_PlayEmote");
static_assert(offsetof(HudCommandControlComponent_PlayEmote, EmoteCode) == 0x000000, "Member 'HudCommandControlComponent_PlayEmote::EmoteCode' has a wrong offset!");

// Function InGameModule.HUDCrossHairsPresenter.SwitchCrossHairsVisibility
// 0x0001 (0x0001 - 0x0000)
struct HUDCrossHairsPresenter_SwitchCrossHairsVisibility final
{
public:
	bool                                          bVisibility;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDCrossHairsPresenter_SwitchCrossHairsVisibility) == 0x000001, "Wrong alignment on HUDCrossHairsPresenter_SwitchCrossHairsVisibility");
static_assert(sizeof(HUDCrossHairsPresenter_SwitchCrossHairsVisibility) == 0x000001, "Wrong size on HUDCrossHairsPresenter_SwitchCrossHairsVisibility");
static_assert(offsetof(HUDCrossHairsPresenter_SwitchCrossHairsVisibility, bVisibility) == 0x000000, "Member 'HUDCrossHairsPresenter_SwitchCrossHairsVisibility::bVisibility' has a wrong offset!");

// Function InGameModule.HUDDispatchComponent.OnBeginSquadMemberCircularProgressRate_ToClient
// 0x0018 (0x0018 - 0x0000)
struct HUDDispatchComponent_OnBeginSquadMemberCircularProgressRate_ToClient final
{
public:
	ECircularProgressType                         Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerStateBattle*                     PLAYER;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OpenSpan;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HUDDispatchComponent_OnBeginSquadMemberCircularProgressRate_ToClient) == 0x000008, "Wrong alignment on HUDDispatchComponent_OnBeginSquadMemberCircularProgressRate_ToClient");
static_assert(sizeof(HUDDispatchComponent_OnBeginSquadMemberCircularProgressRate_ToClient) == 0x000018, "Wrong size on HUDDispatchComponent_OnBeginSquadMemberCircularProgressRate_ToClient");
static_assert(offsetof(HUDDispatchComponent_OnBeginSquadMemberCircularProgressRate_ToClient, Type) == 0x000000, "Member 'HUDDispatchComponent_OnBeginSquadMemberCircularProgressRate_ToClient::Type' has a wrong offset!");
static_assert(offsetof(HUDDispatchComponent_OnBeginSquadMemberCircularProgressRate_ToClient, PLAYER) == 0x000008, "Member 'HUDDispatchComponent_OnBeginSquadMemberCircularProgressRate_ToClient::PLAYER' has a wrong offset!");
static_assert(offsetof(HUDDispatchComponent_OnBeginSquadMemberCircularProgressRate_ToClient, OpenSpan) == 0x000010, "Member 'HUDDispatchComponent_OnBeginSquadMemberCircularProgressRate_ToClient::OpenSpan' has a wrong offset!");

// Function InGameModule.HUDDispatchComponent.OnEndSquadMemberCircularProgressRate_ToClient
// 0x0008 (0x0008 - 0x0000)
struct HUDDispatchComponent_OnEndSquadMemberCircularProgressRate_ToClient final
{
public:
	class APlayerStateBattle*                     PLAYER;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDDispatchComponent_OnEndSquadMemberCircularProgressRate_ToClient) == 0x000008, "Wrong alignment on HUDDispatchComponent_OnEndSquadMemberCircularProgressRate_ToClient");
static_assert(sizeof(HUDDispatchComponent_OnEndSquadMemberCircularProgressRate_ToClient) == 0x000008, "Wrong size on HUDDispatchComponent_OnEndSquadMemberCircularProgressRate_ToClient");
static_assert(offsetof(HUDDispatchComponent_OnEndSquadMemberCircularProgressRate_ToClient, PLAYER) == 0x000000, "Member 'HUDDispatchComponent_OnEndSquadMemberCircularProgressRate_ToClient::PLAYER' has a wrong offset!");

// Function InGameModule.HUDInGameMiscInfoPresenter.OnChangedViewTarget
// 0x0008 (0x0008 - 0x0000)
struct HUDInGameMiscInfoPresenter_OnChangedViewTarget final
{
public:
	class APlayerStateBattle*                     PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDInGameMiscInfoPresenter_OnChangedViewTarget) == 0x000008, "Wrong alignment on HUDInGameMiscInfoPresenter_OnChangedViewTarget");
static_assert(sizeof(HUDInGameMiscInfoPresenter_OnChangedViewTarget) == 0x000008, "Wrong size on HUDInGameMiscInfoPresenter_OnChangedViewTarget");
static_assert(offsetof(HUDInGameMiscInfoPresenter_OnChangedViewTarget, PlayerState) == 0x000000, "Member 'HUDInGameMiscInfoPresenter_OnChangedViewTarget::PlayerState' has a wrong offset!");

// Function InGameModule.HUDLevelUpShortCutPresenter.SwitchLvUpShortCutVisibility
// 0x0001 (0x0001 - 0x0000)
struct HUDLevelUpShortCutPresenter_SwitchLvUpShortCutVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDLevelUpShortCutPresenter_SwitchLvUpShortCutVisibility) == 0x000001, "Wrong alignment on HUDLevelUpShortCutPresenter_SwitchLvUpShortCutVisibility");
static_assert(sizeof(HUDLevelUpShortCutPresenter_SwitchLvUpShortCutVisibility) == 0x000001, "Wrong size on HUDLevelUpShortCutPresenter_SwitchLvUpShortCutVisibility");
static_assert(offsetof(HUDLevelUpShortCutPresenter_SwitchLvUpShortCutVisibility, bVisible) == 0x000000, "Member 'HUDLevelUpShortCutPresenter_SwitchLvUpShortCutVisibility::bVisible' has a wrong offset!");

// Function InGameModule.HUDMagazineInterface.ViewDoWorkOnLevelUp
// 0x0001 (0x0001 - 0x0000)
struct HUDMagazineInterface_ViewDoWorkOnLevelUp final
{
public:
	EAttackId                                     SlotAttackId;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDMagazineInterface_ViewDoWorkOnLevelUp) == 0x000001, "Wrong alignment on HUDMagazineInterface_ViewDoWorkOnLevelUp");
static_assert(sizeof(HUDMagazineInterface_ViewDoWorkOnLevelUp) == 0x000001, "Wrong size on HUDMagazineInterface_ViewDoWorkOnLevelUp");
static_assert(offsetof(HUDMagazineInterface_ViewDoWorkOnLevelUp, SlotAttackId) == 0x000000, "Member 'HUDMagazineInterface_ViewDoWorkOnLevelUp::SlotAttackId' has a wrong offset!");

// Function InGameModule.HUDMagazineInterface.ViewUpdateMagazineState
// 0x000C (0x000C - 0x0000)
struct HUDMagazineInterface_ViewUpdateMagazineState final
{
public:
	EAttackId                                     SlotAttackId;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NewAmmoNum;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewReloadRate;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDMagazineInterface_ViewUpdateMagazineState) == 0x000004, "Wrong alignment on HUDMagazineInterface_ViewUpdateMagazineState");
static_assert(sizeof(HUDMagazineInterface_ViewUpdateMagazineState) == 0x00000C, "Wrong size on HUDMagazineInterface_ViewUpdateMagazineState");
static_assert(offsetof(HUDMagazineInterface_ViewUpdateMagazineState, SlotAttackId) == 0x000000, "Member 'HUDMagazineInterface_ViewUpdateMagazineState::SlotAttackId' has a wrong offset!");
static_assert(offsetof(HUDMagazineInterface_ViewUpdateMagazineState, NewAmmoNum) == 0x000004, "Member 'HUDMagazineInterface_ViewUpdateMagazineState::NewAmmoNum' has a wrong offset!");
static_assert(offsetof(HUDMagazineInterface_ViewUpdateMagazineState, NewReloadRate) == 0x000008, "Member 'HUDMagazineInterface_ViewUpdateMagazineState::NewReloadRate' has a wrong offset!");

// Function InGameModule.HUDMagazineInterface.ViewUpdateSkillState
// 0x0008 (0x0008 - 0x0000)
struct HUDMagazineInterface_ViewUpdateSkillState final
{
public:
	EAttackId                                     SlotAttackId;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterId                                  SkillCharacterId;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackId                                     SkillAttackId;                                     // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDMagazineInterface_ViewUpdateSkillState) == 0x000004, "Wrong alignment on HUDMagazineInterface_ViewUpdateSkillState");
static_assert(sizeof(HUDMagazineInterface_ViewUpdateSkillState) == 0x000008, "Wrong size on HUDMagazineInterface_ViewUpdateSkillState");
static_assert(offsetof(HUDMagazineInterface_ViewUpdateSkillState, SlotAttackId) == 0x000000, "Member 'HUDMagazineInterface_ViewUpdateSkillState::SlotAttackId' has a wrong offset!");
static_assert(offsetof(HUDMagazineInterface_ViewUpdateSkillState, SkillCharacterId) == 0x000001, "Member 'HUDMagazineInterface_ViewUpdateSkillState::SkillCharacterId' has a wrong offset!");
static_assert(offsetof(HUDMagazineInterface_ViewUpdateSkillState, SkillAttackId) == 0x000002, "Member 'HUDMagazineInterface_ViewUpdateSkillState::SkillAttackId' has a wrong offset!");
static_assert(offsetof(HUDMagazineInterface_ViewUpdateSkillState, Level) == 0x000004, "Member 'HUDMagazineInterface_ViewUpdateSkillState::Level' has a wrong offset!");

// Function InGameModule.HUDMagazinePresenter.ChangeSkill
// 0x0008 (0x0008 - 0x0000)
struct HUDMagazinePresenter_ChangeSkill final
{
public:
	const class USkillChangeParam*                SkillChangeParam;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDMagazinePresenter_ChangeSkill) == 0x000008, "Wrong alignment on HUDMagazinePresenter_ChangeSkill");
static_assert(sizeof(HUDMagazinePresenter_ChangeSkill) == 0x000008, "Wrong size on HUDMagazinePresenter_ChangeSkill");
static_assert(offsetof(HUDMagazinePresenter_ChangeSkill, SkillChangeParam) == 0x000000, "Member 'HUDMagazinePresenter_ChangeSkill::SkillChangeParam' has a wrong offset!");

// Function InGameModule.HUDMagazinePresenter.DoWorkOnLevelUp
// 0x0001 (0x0001 - 0x0000)
struct HUDMagazinePresenter_DoWorkOnLevelUp final
{
public:
	EAttackId                                     SlotAttackId;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDMagazinePresenter_DoWorkOnLevelUp) == 0x000001, "Wrong alignment on HUDMagazinePresenter_DoWorkOnLevelUp");
static_assert(sizeof(HUDMagazinePresenter_DoWorkOnLevelUp) == 0x000001, "Wrong size on HUDMagazinePresenter_DoWorkOnLevelUp");
static_assert(offsetof(HUDMagazinePresenter_DoWorkOnLevelUp, SlotAttackId) == 0x000000, "Member 'HUDMagazinePresenter_DoWorkOnLevelUp::SlotAttackId' has a wrong offset!");

// Function InGameModule.HUDMagazinePresenter.OnSkillLevelUp
// 0x0001 (0x0001 - 0x0000)
struct HUDMagazinePresenter_OnSkillLevelUp final
{
public:
	EAttackId                                     AttackId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDMagazinePresenter_OnSkillLevelUp) == 0x000001, "Wrong alignment on HUDMagazinePresenter_OnSkillLevelUp");
static_assert(sizeof(HUDMagazinePresenter_OnSkillLevelUp) == 0x000001, "Wrong size on HUDMagazinePresenter_OnSkillLevelUp");
static_assert(offsetof(HUDMagazinePresenter_OnSkillLevelUp, AttackId) == 0x000000, "Member 'HUDMagazinePresenter_OnSkillLevelUp::AttackId' has a wrong offset!");

// Function InGameModule.HUDMagazinePresenter.SendMagazineInfoToWidget
// 0x0001 (0x0001 - 0x0000)
struct HUDMagazinePresenter_SendMagazineInfoToWidget final
{
public:
	EAttackId                                     SlotAttackId;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDMagazinePresenter_SendMagazineInfoToWidget) == 0x000001, "Wrong alignment on HUDMagazinePresenter_SendMagazineInfoToWidget");
static_assert(sizeof(HUDMagazinePresenter_SendMagazineInfoToWidget) == 0x000001, "Wrong size on HUDMagazinePresenter_SendMagazineInfoToWidget");
static_assert(offsetof(HUDMagazinePresenter_SendMagazineInfoToWidget, SlotAttackId) == 0x000000, "Member 'HUDMagazinePresenter_SendMagazineInfoToWidget::SlotAttackId' has a wrong offset!");

// Function InGameModule.HUDMagazinePresenter.SetSpecialActionParam
// 0x0028 (0x0028 - 0x0000)
struct HUDMagazinePresenter_SetSpecialActionParam final
{
public:
	struct FMagazineViewInfo                      Param;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDMagazinePresenter_SetSpecialActionParam) == 0x000008, "Wrong alignment on HUDMagazinePresenter_SetSpecialActionParam");
static_assert(sizeof(HUDMagazinePresenter_SetSpecialActionParam) == 0x000028, "Wrong size on HUDMagazinePresenter_SetSpecialActionParam");
static_assert(offsetof(HUDMagazinePresenter_SetSpecialActionParam, Param) == 0x000000, "Member 'HUDMagazinePresenter_SetSpecialActionParam::Param' has a wrong offset!");

// Function InGameModule.HUDMagazinePresenter.SwitchCharacterSpecialActionAvailability
// 0x0020 (0x0020 - 0x0000)
struct HUDMagazinePresenter_SwitchCharacterSpecialActionAvailability final
{
public:
	struct FRequestUIData                         Data;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDMagazinePresenter_SwitchCharacterSpecialActionAvailability) == 0x000008, "Wrong alignment on HUDMagazinePresenter_SwitchCharacterSpecialActionAvailability");
static_assert(sizeof(HUDMagazinePresenter_SwitchCharacterSpecialActionAvailability) == 0x000020, "Wrong size on HUDMagazinePresenter_SwitchCharacterSpecialActionAvailability");
static_assert(offsetof(HUDMagazinePresenter_SwitchCharacterSpecialActionAvailability, Data) == 0x000000, "Member 'HUDMagazinePresenter_SwitchCharacterSpecialActionAvailability::Data' has a wrong offset!");

// Function InGameModule.HUDMagazinePresenter.TrainingCharacterChanged
// 0x0008 (0x0008 - 0x0000)
struct HUDMagazinePresenter_TrainingCharacterChanged final
{
public:
	class APlayerStateBattle*                     PlayerStateBattle;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDMagazinePresenter_TrainingCharacterChanged) == 0x000008, "Wrong alignment on HUDMagazinePresenter_TrainingCharacterChanged");
static_assert(sizeof(HUDMagazinePresenter_TrainingCharacterChanged) == 0x000008, "Wrong size on HUDMagazinePresenter_TrainingCharacterChanged");
static_assert(offsetof(HUDMagazinePresenter_TrainingCharacterChanged, PlayerStateBattle) == 0x000000, "Member 'HUDMagazinePresenter_TrainingCharacterChanged::PlayerStateBattle' has a wrong offset!");

// Function InGameModule.HUDPlayerTagPresenter.ChangedViewTarget
// 0x0008 (0x0008 - 0x0000)
struct HUDPlayerTagPresenter_ChangedViewTarget final
{
public:
	class APlayerStateBattle*                     PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDPlayerTagPresenter_ChangedViewTarget) == 0x000008, "Wrong alignment on HUDPlayerTagPresenter_ChangedViewTarget");
static_assert(sizeof(HUDPlayerTagPresenter_ChangedViewTarget) == 0x000008, "Wrong size on HUDPlayerTagPresenter_ChangedViewTarget");
static_assert(offsetof(HUDPlayerTagPresenter_ChangedViewTarget, PlayerState) == 0x000000, "Member 'HUDPlayerTagPresenter_ChangedViewTarget::PlayerState' has a wrong offset!");

// Function InGameModule.HUDPlayerTagPresenter.SendDamageInfo
// 0x0048 (0x0048 - 0x0000)
struct HUDPlayerTagPresenter_SendDamageInfo final
{
public:
	struct FAttackHitData                         HitData;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDPlayerTagPresenter_SendDamageInfo) == 0x000008, "Wrong alignment on HUDPlayerTagPresenter_SendDamageInfo");
static_assert(sizeof(HUDPlayerTagPresenter_SendDamageInfo) == 0x000048, "Wrong size on HUDPlayerTagPresenter_SendDamageInfo");
static_assert(offsetof(HUDPlayerTagPresenter_SendDamageInfo, HitData) == 0x000000, "Member 'HUDPlayerTagPresenter_SendDamageInfo::HitData' has a wrong offset!");

// Function InGameModule.HUDPlusUltraPresenter.ChangeViewTarget
// 0x0008 (0x0008 - 0x0000)
struct HUDPlusUltraPresenter_ChangeViewTarget final
{
public:
	const class APlayerState*                     ViewTarget;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDPlusUltraPresenter_ChangeViewTarget) == 0x000008, "Wrong alignment on HUDPlusUltraPresenter_ChangeViewTarget");
static_assert(sizeof(HUDPlusUltraPresenter_ChangeViewTarget) == 0x000008, "Wrong size on HUDPlusUltraPresenter_ChangeViewTarget");
static_assert(offsetof(HUDPlusUltraPresenter_ChangeViewTarget, ViewTarget) == 0x000000, "Member 'HUDPlusUltraPresenter_ChangeViewTarget::ViewTarget' has a wrong offset!");

// Function InGameModule.HUDPlusUltraPresenter.SwitchPlusUltraVisibility
// 0x0001 (0x0001 - 0x0000)
struct HUDPlusUltraPresenter_SwitchPlusUltraVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDPlusUltraPresenter_SwitchPlusUltraVisibility) == 0x000001, "Wrong alignment on HUDPlusUltraPresenter_SwitchPlusUltraVisibility");
static_assert(sizeof(HUDPlusUltraPresenter_SwitchPlusUltraVisibility) == 0x000001, "Wrong size on HUDPlusUltraPresenter_SwitchPlusUltraVisibility");
static_assert(offsetof(HUDPlusUltraPresenter_SwitchPlusUltraVisibility, bVisible) == 0x000000, "Member 'HUDPlusUltraPresenter_SwitchPlusUltraVisibility::bVisible' has a wrong offset!");

// Function InGameModule.HUDStatusPresenter.BeginSquadMemberAction
// 0x0018 (0x0018 - 0x0000)
struct HUDStatusPresenter_BeginSquadMemberAction final
{
public:
	ECircularProgressType                         Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class APlayerStateBattle*               PLAYER;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OpenSpan;                                          // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HUDStatusPresenter_BeginSquadMemberAction) == 0x000008, "Wrong alignment on HUDStatusPresenter_BeginSquadMemberAction");
static_assert(sizeof(HUDStatusPresenter_BeginSquadMemberAction) == 0x000018, "Wrong size on HUDStatusPresenter_BeginSquadMemberAction");
static_assert(offsetof(HUDStatusPresenter_BeginSquadMemberAction, Type) == 0x000000, "Member 'HUDStatusPresenter_BeginSquadMemberAction::Type' has a wrong offset!");
static_assert(offsetof(HUDStatusPresenter_BeginSquadMemberAction, PLAYER) == 0x000008, "Member 'HUDStatusPresenter_BeginSquadMemberAction::PLAYER' has a wrong offset!");
static_assert(offsetof(HUDStatusPresenter_BeginSquadMemberAction, OpenSpan) == 0x000010, "Member 'HUDStatusPresenter_BeginSquadMemberAction::OpenSpan' has a wrong offset!");

// Function InGameModule.HUDStatusPresenter.BeginUsingSupply
// 0x0010 (0x0010 - 0x0000)
struct HUDStatusPresenter_BeginUsingSupply final
{
public:
	const class USupplyHolder*                    Holder;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UsedSupply;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDStatusPresenter_BeginUsingSupply) == 0x000008, "Wrong alignment on HUDStatusPresenter_BeginUsingSupply");
static_assert(sizeof(HUDStatusPresenter_BeginUsingSupply) == 0x000010, "Wrong size on HUDStatusPresenter_BeginUsingSupply");
static_assert(offsetof(HUDStatusPresenter_BeginUsingSupply, Holder) == 0x000000, "Member 'HUDStatusPresenter_BeginUsingSupply::Holder' has a wrong offset!");
static_assert(offsetof(HUDStatusPresenter_BeginUsingSupply, UsedSupply) == 0x000008, "Member 'HUDStatusPresenter_BeginUsingSupply::UsedSupply' has a wrong offset!");

// Function InGameModule.HUDStatusPresenter.ComparisonUpdateTargetStatus
// 0x0010 (0x0010 - 0x0000)
struct HUDStatusPresenter_ComparisonUpdateTargetStatus final
{
public:
	class APlayerStateBattle*                     Winner;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HUDStatusPresenter_ComparisonUpdateTargetStatus) == 0x000008, "Wrong alignment on HUDStatusPresenter_ComparisonUpdateTargetStatus");
static_assert(sizeof(HUDStatusPresenter_ComparisonUpdateTargetStatus) == 0x000010, "Wrong size on HUDStatusPresenter_ComparisonUpdateTargetStatus");
static_assert(offsetof(HUDStatusPresenter_ComparisonUpdateTargetStatus, Winner) == 0x000000, "Member 'HUDStatusPresenter_ComparisonUpdateTargetStatus::Winner' has a wrong offset!");
static_assert(offsetof(HUDStatusPresenter_ComparisonUpdateTargetStatus, Success) == 0x000008, "Member 'HUDStatusPresenter_ComparisonUpdateTargetStatus::Success' has a wrong offset!");

// Function InGameModule.HUDStatusPresenter.EndSquadMemberAction
// 0x0008 (0x0008 - 0x0000)
struct HUDStatusPresenter_EndSquadMemberAction final
{
public:
	const class APlayerStateBattle*               PLAYER;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDStatusPresenter_EndSquadMemberAction) == 0x000008, "Wrong alignment on HUDStatusPresenter_EndSquadMemberAction");
static_assert(sizeof(HUDStatusPresenter_EndSquadMemberAction) == 0x000008, "Wrong size on HUDStatusPresenter_EndSquadMemberAction");
static_assert(offsetof(HUDStatusPresenter_EndSquadMemberAction, PLAYER) == 0x000000, "Member 'HUDStatusPresenter_EndSquadMemberAction::PLAYER' has a wrong offset!");

// Function InGameModule.HUDStatusPresenter.EndUsingSupply
// 0x0008 (0x0008 - 0x0000)
struct HUDStatusPresenter_EndUsingSupply final
{
public:
	const class APlayerStateBattle*               UsedPlayer;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDStatusPresenter_EndUsingSupply) == 0x000008, "Wrong alignment on HUDStatusPresenter_EndUsingSupply");
static_assert(sizeof(HUDStatusPresenter_EndUsingSupply) == 0x000008, "Wrong size on HUDStatusPresenter_EndUsingSupply");
static_assert(offsetof(HUDStatusPresenter_EndUsingSupply, UsedPlayer) == 0x000000, "Member 'HUDStatusPresenter_EndUsingSupply::UsedPlayer' has a wrong offset!");

// Function InGameModule.HUDStatusPresenter.OnAddedPlayer
// 0x0008 (0x0008 - 0x0000)
struct HUDStatusPresenter_OnAddedPlayer final
{
public:
	class AHerovsPlayerState*                     AddedPlayer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDStatusPresenter_OnAddedPlayer) == 0x000008, "Wrong alignment on HUDStatusPresenter_OnAddedPlayer");
static_assert(sizeof(HUDStatusPresenter_OnAddedPlayer) == 0x000008, "Wrong size on HUDStatusPresenter_OnAddedPlayer");
static_assert(offsetof(HUDStatusPresenter_OnAddedPlayer, AddedPlayer) == 0x000000, "Member 'HUDStatusPresenter_OnAddedPlayer::AddedPlayer' has a wrong offset!");

// Function InGameModule.HUDStatusPresenter.OnPlayerChanged
// 0x0008 (0x0008 - 0x0000)
struct HUDStatusPresenter_OnPlayerChanged final
{
public:
	class APlayerStateBattle*                     PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDStatusPresenter_OnPlayerChanged) == 0x000008, "Wrong alignment on HUDStatusPresenter_OnPlayerChanged");
static_assert(sizeof(HUDStatusPresenter_OnPlayerChanged) == 0x000008, "Wrong size on HUDStatusPresenter_OnPlayerChanged");
static_assert(offsetof(HUDStatusPresenter_OnPlayerChanged, PlayerState) == 0x000000, "Member 'HUDStatusPresenter_OnPlayerChanged::PlayerState' has a wrong offset!");

// Function InGameModule.HUDStatusPresenter.PlayAbilityRequestSenderNotification
// 0x0004 (0x0004 - 0x0000)
struct HUDStatusPresenter_PlayAbilityRequestSenderNotification final
{
public:
	int16                                         SenderPlayerId;                                    // 0x0000(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdAbilityType                                AbilityType;                                       // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackId                                     AttackId;                                          // 0x0003(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDStatusPresenter_PlayAbilityRequestSenderNotification) == 0x000002, "Wrong alignment on HUDStatusPresenter_PlayAbilityRequestSenderNotification");
static_assert(sizeof(HUDStatusPresenter_PlayAbilityRequestSenderNotification) == 0x000004, "Wrong size on HUDStatusPresenter_PlayAbilityRequestSenderNotification");
static_assert(offsetof(HUDStatusPresenter_PlayAbilityRequestSenderNotification, SenderPlayerId) == 0x000000, "Member 'HUDStatusPresenter_PlayAbilityRequestSenderNotification::SenderPlayerId' has a wrong offset!");
static_assert(offsetof(HUDStatusPresenter_PlayAbilityRequestSenderNotification, AbilityType) == 0x000002, "Member 'HUDStatusPresenter_PlayAbilityRequestSenderNotification::AbilityType' has a wrong offset!");
static_assert(offsetof(HUDStatusPresenter_PlayAbilityRequestSenderNotification, AttackId) == 0x000003, "Member 'HUDStatusPresenter_PlayAbilityRequestSenderNotification::AttackId' has a wrong offset!");

// Function InGameModule.HUDStatusPresenter.PlaySupplyRequestSenderNotification
// 0x000C (0x000C - 0x0000)
struct HUDStatusPresenter_PlaySupplyRequestSenderNotification final
{
public:
	int16                                         SenderPlayerId;                                    // 0x0000(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SupplyId;                                          // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDStatusPresenter_PlaySupplyRequestSenderNotification) == 0x000004, "Wrong alignment on HUDStatusPresenter_PlaySupplyRequestSenderNotification");
static_assert(sizeof(HUDStatusPresenter_PlaySupplyRequestSenderNotification) == 0x00000C, "Wrong size on HUDStatusPresenter_PlaySupplyRequestSenderNotification");
static_assert(offsetof(HUDStatusPresenter_PlaySupplyRequestSenderNotification, SenderPlayerId) == 0x000000, "Member 'HUDStatusPresenter_PlaySupplyRequestSenderNotification::SenderPlayerId' has a wrong offset!");
static_assert(offsetof(HUDStatusPresenter_PlaySupplyRequestSenderNotification, SupplyId) == 0x000004, "Member 'HUDStatusPresenter_PlaySupplyRequestSenderNotification::SupplyId' has a wrong offset!");

// Function InGameModule.HUDStatusPresenter.SwitchAllyPlayerStatusVisibility
// 0x0001 (0x0001 - 0x0000)
struct HUDStatusPresenter_SwitchAllyPlayerStatusVisibility final
{
public:
	bool                                          bVisibility;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDStatusPresenter_SwitchAllyPlayerStatusVisibility) == 0x000001, "Wrong alignment on HUDStatusPresenter_SwitchAllyPlayerStatusVisibility");
static_assert(sizeof(HUDStatusPresenter_SwitchAllyPlayerStatusVisibility) == 0x000001, "Wrong size on HUDStatusPresenter_SwitchAllyPlayerStatusVisibility");
static_assert(offsetof(HUDStatusPresenter_SwitchAllyPlayerStatusVisibility, bVisibility) == 0x000000, "Member 'HUDStatusPresenter_SwitchAllyPlayerStatusVisibility::bVisibility' has a wrong offset!");

// Function InGameModule.HUDStatusPresenter.SwitchLocalPlayerStatusVisibility
// 0x0001 (0x0001 - 0x0000)
struct HUDStatusPresenter_SwitchLocalPlayerStatusVisibility final
{
public:
	bool                                          bVisibility;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDStatusPresenter_SwitchLocalPlayerStatusVisibility) == 0x000001, "Wrong alignment on HUDStatusPresenter_SwitchLocalPlayerStatusVisibility");
static_assert(sizeof(HUDStatusPresenter_SwitchLocalPlayerStatusVisibility) == 0x000001, "Wrong size on HUDStatusPresenter_SwitchLocalPlayerStatusVisibility");
static_assert(offsetof(HUDStatusPresenter_SwitchLocalPlayerStatusVisibility, bVisibility) == 0x000000, "Member 'HUDStatusPresenter_SwitchLocalPlayerStatusVisibility::bVisibility' has a wrong offset!");

// Function InGameModule.InBattlePlayerNotificationPresenter.LeadersKOSetUp
// 0x000C (0x000C - 0x0000)
struct InBattlePlayerNotificationPresenter_LeadersKOSetUp final
{
public:
	ELeadersBattleTeamType                        Team;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Score;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrevScore;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InBattlePlayerNotificationPresenter_LeadersKOSetUp) == 0x000004, "Wrong alignment on InBattlePlayerNotificationPresenter_LeadersKOSetUp");
static_assert(sizeof(InBattlePlayerNotificationPresenter_LeadersKOSetUp) == 0x00000C, "Wrong size on InBattlePlayerNotificationPresenter_LeadersKOSetUp");
static_assert(offsetof(InBattlePlayerNotificationPresenter_LeadersKOSetUp, Team) == 0x000000, "Member 'InBattlePlayerNotificationPresenter_LeadersKOSetUp::Team' has a wrong offset!");
static_assert(offsetof(InBattlePlayerNotificationPresenter_LeadersKOSetUp, Score) == 0x000004, "Member 'InBattlePlayerNotificationPresenter_LeadersKOSetUp::Score' has a wrong offset!");
static_assert(offsetof(InBattlePlayerNotificationPresenter_LeadersKOSetUp, PrevScore) == 0x000008, "Member 'InBattlePlayerNotificationPresenter_LeadersKOSetUp::PrevScore' has a wrong offset!");

// Function InGameModule.InGameAbilityWidget.BP_GetAttackId
// 0x0001 (0x0001 - 0x0000)
struct InGameAbilityWidget_BP_GetAttackId final
{
public:
	EAttackId                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameAbilityWidget_BP_GetAttackId) == 0x000001, "Wrong alignment on InGameAbilityWidget_BP_GetAttackId");
static_assert(sizeof(InGameAbilityWidget_BP_GetAttackId) == 0x000001, "Wrong size on InGameAbilityWidget_BP_GetAttackId");
static_assert(offsetof(InGameAbilityWidget_BP_GetAttackId, ReturnValue) == 0x000000, "Member 'InGameAbilityWidget_BP_GetAttackId::ReturnValue' has a wrong offset!");

// Function InGameModule.InGameButtonGuide.ForceSetNewVisibilityFlag
// 0x0001 (0x0001 - 0x0000)
struct InGameButtonGuide_ForceSetNewVisibilityFlag final
{
public:
	bool                                          NewVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameButtonGuide_ForceSetNewVisibilityFlag) == 0x000001, "Wrong alignment on InGameButtonGuide_ForceSetNewVisibilityFlag");
static_assert(sizeof(InGameButtonGuide_ForceSetNewVisibilityFlag) == 0x000001, "Wrong size on InGameButtonGuide_ForceSetNewVisibilityFlag");
static_assert(offsetof(InGameButtonGuide_ForceSetNewVisibilityFlag, NewVisibility) == 0x000000, "Member 'InGameButtonGuide_ForceSetNewVisibilityFlag::NewVisibility' has a wrong offset!");

// Function InGameModule.InGameButtonGuide.SetSholderImage
// 0x0004 (0x0004 - 0x0000)
struct InGameButtonGuide_SetSholderImage final
{
public:
	int32                                         MaxSholderHolder;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameButtonGuide_SetSholderImage) == 0x000004, "Wrong alignment on InGameButtonGuide_SetSholderImage");
static_assert(sizeof(InGameButtonGuide_SetSholderImage) == 0x000004, "Wrong size on InGameButtonGuide_SetSholderImage");
static_assert(offsetof(InGameButtonGuide_SetSholderImage, MaxSholderHolder) == 0x000000, "Member 'InGameButtonGuide_SetSholderImage::MaxSholderHolder' has a wrong offset!");

// Function InGameModule.InGameCheat.ChangeCharacter
// 0x0001 (0x0001 - 0x0000)
struct InGameCheat_ChangeCharacter final
{
public:
	ECharacterId                                  CharaID;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameCheat_ChangeCharacter) == 0x000001, "Wrong alignment on InGameCheat_ChangeCharacter");
static_assert(sizeof(InGameCheat_ChangeCharacter) == 0x000001, "Wrong size on InGameCheat_ChangeCharacter");
static_assert(offsetof(InGameCheat_ChangeCharacter, CharaID) == 0x000000, "Member 'InGameCheat_ChangeCharacter::CharaID' has a wrong offset!");

// Function InGameModule.InGameCheatManager.DiffMagazineParam
// 0x0010 (0x0010 - 0x0000)
struct InGameCheatManager_DiffMagazineParam final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameCheatManager_DiffMagazineParam) == 0x000008, "Wrong alignment on InGameCheatManager_DiffMagazineParam");
static_assert(sizeof(InGameCheatManager_DiffMagazineParam) == 0x000010, "Wrong size on InGameCheatManager_DiffMagazineParam");
static_assert(offsetof(InGameCheatManager_DiffMagazineParam, Message) == 0x000000, "Member 'InGameCheatManager_DiffMagazineParam::Message' has a wrong offset!");

// Function InGameModule.InGameDecalComponent.SetMID
// 0x0010 (0x0010 - 0x0000)
struct InGameDecalComponent_SetMID final
{
public:
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameDecalComponent_SetMID) == 0x000008, "Wrong alignment on InGameDecalComponent_SetMID");
static_assert(sizeof(InGameDecalComponent_SetMID) == 0x000010, "Wrong size on InGameDecalComponent_SetMID");
static_assert(offsetof(InGameDecalComponent_SetMID, Mid) == 0x000000, "Member 'InGameDecalComponent_SetMID::Mid' has a wrong offset!");
static_assert(offsetof(InGameDecalComponent_SetMID, ReturnValue) == 0x000008, "Member 'InGameDecalComponent_SetMID::ReturnValue' has a wrong offset!");

// Function InGameModule.InGameEffectSubsystemBlueprint.SpawnEmitterAtLocation
// 0x0040 (0x0040 - 0x0000)
struct InGameEffectSubsystemBlueprint_SpawnEmitterAtLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        EmitterTemplate;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Locate;                                            // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rot;                                               // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBattleCustomParticleSystemComponent*   ReturnValue;                                       // 0x0038(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameEffectSubsystemBlueprint_SpawnEmitterAtLocation) == 0x000008, "Wrong alignment on InGameEffectSubsystemBlueprint_SpawnEmitterAtLocation");
static_assert(sizeof(InGameEffectSubsystemBlueprint_SpawnEmitterAtLocation) == 0x000040, "Wrong size on InGameEffectSubsystemBlueprint_SpawnEmitterAtLocation");
static_assert(offsetof(InGameEffectSubsystemBlueprint_SpawnEmitterAtLocation, WorldContextObject) == 0x000000, "Member 'InGameEffectSubsystemBlueprint_SpawnEmitterAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(InGameEffectSubsystemBlueprint_SpawnEmitterAtLocation, EmitterTemplate) == 0x000008, "Member 'InGameEffectSubsystemBlueprint_SpawnEmitterAtLocation::EmitterTemplate' has a wrong offset!");
static_assert(offsetof(InGameEffectSubsystemBlueprint_SpawnEmitterAtLocation, Locate) == 0x000010, "Member 'InGameEffectSubsystemBlueprint_SpawnEmitterAtLocation::Locate' has a wrong offset!");
static_assert(offsetof(InGameEffectSubsystemBlueprint_SpawnEmitterAtLocation, Rot) == 0x00001C, "Member 'InGameEffectSubsystemBlueprint_SpawnEmitterAtLocation::Rot' has a wrong offset!");
static_assert(offsetof(InGameEffectSubsystemBlueprint_SpawnEmitterAtLocation, Scale) == 0x000028, "Member 'InGameEffectSubsystemBlueprint_SpawnEmitterAtLocation::Scale' has a wrong offset!");
static_assert(offsetof(InGameEffectSubsystemBlueprint_SpawnEmitterAtLocation, bAutoDestroy) == 0x000034, "Member 'InGameEffectSubsystemBlueprint_SpawnEmitterAtLocation::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(InGameEffectSubsystemBlueprint_SpawnEmitterAtLocation, ReturnValue) == 0x000038, "Member 'InGameEffectSubsystemBlueprint_SpawnEmitterAtLocation::ReturnValue' has a wrong offset!");

// Function InGameModule.InGameEffectSubsystemBlueprint.SpawnEmitterAttached
// 0x0048 (0x0048 - 0x0000)
struct InGameEffectSubsystemBlueprint_SpawnEmitterAttached final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        EmitterTemplate;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x002C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBattleCustomParticleSystemComponent*   ReturnValue;                                       // 0x0040(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameEffectSubsystemBlueprint_SpawnEmitterAttached) == 0x000008, "Wrong alignment on InGameEffectSubsystemBlueprint_SpawnEmitterAttached");
static_assert(sizeof(InGameEffectSubsystemBlueprint_SpawnEmitterAttached) == 0x000048, "Wrong size on InGameEffectSubsystemBlueprint_SpawnEmitterAttached");
static_assert(offsetof(InGameEffectSubsystemBlueprint_SpawnEmitterAttached, WorldContextObject) == 0x000000, "Member 'InGameEffectSubsystemBlueprint_SpawnEmitterAttached::WorldContextObject' has a wrong offset!");
static_assert(offsetof(InGameEffectSubsystemBlueprint_SpawnEmitterAttached, EmitterTemplate) == 0x000008, "Member 'InGameEffectSubsystemBlueprint_SpawnEmitterAttached::EmitterTemplate' has a wrong offset!");
static_assert(offsetof(InGameEffectSubsystemBlueprint_SpawnEmitterAttached, AttachToComponent) == 0x000010, "Member 'InGameEffectSubsystemBlueprint_SpawnEmitterAttached::AttachToComponent' has a wrong offset!");
static_assert(offsetof(InGameEffectSubsystemBlueprint_SpawnEmitterAttached, AttachPointName) == 0x000018, "Member 'InGameEffectSubsystemBlueprint_SpawnEmitterAttached::AttachPointName' has a wrong offset!");
static_assert(offsetof(InGameEffectSubsystemBlueprint_SpawnEmitterAttached, Location) == 0x000020, "Member 'InGameEffectSubsystemBlueprint_SpawnEmitterAttached::Location' has a wrong offset!");
static_assert(offsetof(InGameEffectSubsystemBlueprint_SpawnEmitterAttached, Rotation) == 0x00002C, "Member 'InGameEffectSubsystemBlueprint_SpawnEmitterAttached::Rotation' has a wrong offset!");
static_assert(offsetof(InGameEffectSubsystemBlueprint_SpawnEmitterAttached, LocationType) == 0x000038, "Member 'InGameEffectSubsystemBlueprint_SpawnEmitterAttached::LocationType' has a wrong offset!");
static_assert(offsetof(InGameEffectSubsystemBlueprint_SpawnEmitterAttached, bAutoDestroy) == 0x000039, "Member 'InGameEffectSubsystemBlueprint_SpawnEmitterAttached::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(InGameEffectSubsystemBlueprint_SpawnEmitterAttached, ReturnValue) == 0x000040, "Member 'InGameEffectSubsystemBlueprint_SpawnEmitterAttached::ReturnValue' has a wrong offset!");

// Function InGameModule.InGameEffectSubsystemBlueprint.SpawnEmitterAttachedLocateOnly
// 0x0048 (0x0048 - 0x0000)
struct InGameEffectSubsystemBlueprint_SpawnEmitterAttachedLocateOnly final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        EmitterTemplate;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x002C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBattleCustomParticleSystemComponent*   ReturnValue;                                       // 0x0040(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameEffectSubsystemBlueprint_SpawnEmitterAttachedLocateOnly) == 0x000008, "Wrong alignment on InGameEffectSubsystemBlueprint_SpawnEmitterAttachedLocateOnly");
static_assert(sizeof(InGameEffectSubsystemBlueprint_SpawnEmitterAttachedLocateOnly) == 0x000048, "Wrong size on InGameEffectSubsystemBlueprint_SpawnEmitterAttachedLocateOnly");
static_assert(offsetof(InGameEffectSubsystemBlueprint_SpawnEmitterAttachedLocateOnly, WorldContextObject) == 0x000000, "Member 'InGameEffectSubsystemBlueprint_SpawnEmitterAttachedLocateOnly::WorldContextObject' has a wrong offset!");
static_assert(offsetof(InGameEffectSubsystemBlueprint_SpawnEmitterAttachedLocateOnly, EmitterTemplate) == 0x000008, "Member 'InGameEffectSubsystemBlueprint_SpawnEmitterAttachedLocateOnly::EmitterTemplate' has a wrong offset!");
static_assert(offsetof(InGameEffectSubsystemBlueprint_SpawnEmitterAttachedLocateOnly, AttachToComponent) == 0x000010, "Member 'InGameEffectSubsystemBlueprint_SpawnEmitterAttachedLocateOnly::AttachToComponent' has a wrong offset!");
static_assert(offsetof(InGameEffectSubsystemBlueprint_SpawnEmitterAttachedLocateOnly, AttachPointName) == 0x000018, "Member 'InGameEffectSubsystemBlueprint_SpawnEmitterAttachedLocateOnly::AttachPointName' has a wrong offset!");
static_assert(offsetof(InGameEffectSubsystemBlueprint_SpawnEmitterAttachedLocateOnly, Location) == 0x000020, "Member 'InGameEffectSubsystemBlueprint_SpawnEmitterAttachedLocateOnly::Location' has a wrong offset!");
static_assert(offsetof(InGameEffectSubsystemBlueprint_SpawnEmitterAttachedLocateOnly, Rotation) == 0x00002C, "Member 'InGameEffectSubsystemBlueprint_SpawnEmitterAttachedLocateOnly::Rotation' has a wrong offset!");
static_assert(offsetof(InGameEffectSubsystemBlueprint_SpawnEmitterAttachedLocateOnly, LocationType) == 0x000038, "Member 'InGameEffectSubsystemBlueprint_SpawnEmitterAttachedLocateOnly::LocationType' has a wrong offset!");
static_assert(offsetof(InGameEffectSubsystemBlueprint_SpawnEmitterAttachedLocateOnly, bAutoDestroy) == 0x000039, "Member 'InGameEffectSubsystemBlueprint_SpawnEmitterAttachedLocateOnly::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(InGameEffectSubsystemBlueprint_SpawnEmitterAttachedLocateOnly, ReturnValue) == 0x000040, "Member 'InGameEffectSubsystemBlueprint_SpawnEmitterAttachedLocateOnly::ReturnValue' has a wrong offset!");

// Function InGameModule.InGameInventoryWidget.OnEndUsingSupplyEvent
// 0x0008 (0x0008 - 0x0000)
struct InGameInventoryWidget_OnEndUsingSupplyEvent final
{
public:
	const class USupplyHolder*                    SupplyHolder;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameInventoryWidget_OnEndUsingSupplyEvent) == 0x000008, "Wrong alignment on InGameInventoryWidget_OnEndUsingSupplyEvent");
static_assert(sizeof(InGameInventoryWidget_OnEndUsingSupplyEvent) == 0x000008, "Wrong size on InGameInventoryWidget_OnEndUsingSupplyEvent");
static_assert(offsetof(InGameInventoryWidget_OnEndUsingSupplyEvent, SupplyHolder) == 0x000000, "Member 'InGameInventoryWidget_OnEndUsingSupplyEvent::SupplyHolder' has a wrong offset!");

// Function InGameModule.InGameInventoryWidget.OnFocusNavigationEventByAbility
// 0x0010 (0x0010 - 0x0000)
struct InGameInventoryWidget_OnFocusNavigationEventByAbility final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameInventoryWidget_OnFocusNavigationEventByAbility) == 0x000008, "Wrong alignment on InGameInventoryWidget_OnFocusNavigationEventByAbility");
static_assert(sizeof(InGameInventoryWidget_OnFocusNavigationEventByAbility) == 0x000010, "Wrong size on InGameInventoryWidget_OnFocusNavigationEventByAbility");
static_assert(offsetof(InGameInventoryWidget_OnFocusNavigationEventByAbility, InNavigation) == 0x000000, "Member 'InGameInventoryWidget_OnFocusNavigationEventByAbility::InNavigation' has a wrong offset!");
static_assert(offsetof(InGameInventoryWidget_OnFocusNavigationEventByAbility, ReturnValue) == 0x000008, "Member 'InGameInventoryWidget_OnFocusNavigationEventByAbility::ReturnValue' has a wrong offset!");

// Function InGameModule.InGameInventoryWidget.OnFocusNavigationEventByShoulder
// 0x0010 (0x0010 - 0x0000)
struct InGameInventoryWidget_OnFocusNavigationEventByShoulder final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameInventoryWidget_OnFocusNavigationEventByShoulder) == 0x000008, "Wrong alignment on InGameInventoryWidget_OnFocusNavigationEventByShoulder");
static_assert(sizeof(InGameInventoryWidget_OnFocusNavigationEventByShoulder) == 0x000010, "Wrong size on InGameInventoryWidget_OnFocusNavigationEventByShoulder");
static_assert(offsetof(InGameInventoryWidget_OnFocusNavigationEventByShoulder, InNavigation) == 0x000000, "Member 'InGameInventoryWidget_OnFocusNavigationEventByShoulder::InNavigation' has a wrong offset!");
static_assert(offsetof(InGameInventoryWidget_OnFocusNavigationEventByShoulder, ReturnValue) == 0x000008, "Member 'InGameInventoryWidget_OnFocusNavigationEventByShoulder::ReturnValue' has a wrong offset!");

// Function InGameModule.InGameInventoryWidget.OnFocusNavigationEventBySkill
// 0x0010 (0x0010 - 0x0000)
struct InGameInventoryWidget_OnFocusNavigationEventBySkill final
{
public:
	EUINavigation                                 InNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameInventoryWidget_OnFocusNavigationEventBySkill) == 0x000008, "Wrong alignment on InGameInventoryWidget_OnFocusNavigationEventBySkill");
static_assert(sizeof(InGameInventoryWidget_OnFocusNavigationEventBySkill) == 0x000010, "Wrong size on InGameInventoryWidget_OnFocusNavigationEventBySkill");
static_assert(offsetof(InGameInventoryWidget_OnFocusNavigationEventBySkill, InNavigation) == 0x000000, "Member 'InGameInventoryWidget_OnFocusNavigationEventBySkill::InNavigation' has a wrong offset!");
static_assert(offsetof(InGameInventoryWidget_OnFocusNavigationEventBySkill, ReturnValue) == 0x000008, "Member 'InGameInventoryWidget_OnFocusNavigationEventBySkill::ReturnValue' has a wrong offset!");

// Function InGameModule.InGameInventoryWidget.OnInputEnterEvent
// 0x0010 (0x0010 - 0x0000)
struct InGameInventoryWidget_OnInputEnterEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InGameInventoryWidget_OnInputEnterEvent) == 0x000008, "Wrong alignment on InGameInventoryWidget_OnInputEnterEvent");
static_assert(sizeof(InGameInventoryWidget_OnInputEnterEvent) == 0x000010, "Wrong size on InGameInventoryWidget_OnInputEnterEvent");
static_assert(offsetof(InGameInventoryWidget_OnInputEnterEvent, Widget) == 0x000000, "Member 'InGameInventoryWidget_OnInputEnterEvent::Widget' has a wrong offset!");
static_assert(offsetof(InGameInventoryWidget_OnInputEnterEvent, InputType) == 0x000008, "Member 'InGameInventoryWidget_OnInputEnterEvent::InputType' has a wrong offset!");

// Function InGameModule.InGameInventoryWidget.OnRepPlayerStateEvent
// 0x0008 (0x0008 - 0x0000)
struct InGameInventoryWidget_OnRepPlayerStateEvent final
{
public:
	class APlayerStateBattle*                     PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameInventoryWidget_OnRepPlayerStateEvent) == 0x000008, "Wrong alignment on InGameInventoryWidget_OnRepPlayerStateEvent");
static_assert(sizeof(InGameInventoryWidget_OnRepPlayerStateEvent) == 0x000008, "Wrong size on InGameInventoryWidget_OnRepPlayerStateEvent");
static_assert(offsetof(InGameInventoryWidget_OnRepPlayerStateEvent, PlayerState) == 0x000000, "Member 'InGameInventoryWidget_OnRepPlayerStateEvent::PlayerState' has a wrong offset!");

// Function InGameModule.InGameInventoryWidget.OnStartUsingSupplyEvent
// 0x0008 (0x0008 - 0x0000)
struct InGameInventoryWidget_OnStartUsingSupplyEvent final
{
public:
	const class USupplyHolder*                    SupplyHolder;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameInventoryWidget_OnStartUsingSupplyEvent) == 0x000008, "Wrong alignment on InGameInventoryWidget_OnStartUsingSupplyEvent");
static_assert(sizeof(InGameInventoryWidget_OnStartUsingSupplyEvent) == 0x000008, "Wrong size on InGameInventoryWidget_OnStartUsingSupplyEvent");
static_assert(offsetof(InGameInventoryWidget_OnStartUsingSupplyEvent, SupplyHolder) == 0x000000, "Member 'InGameInventoryWidget_OnStartUsingSupplyEvent::SupplyHolder' has a wrong offset!");

// Function InGameModule.InGameInventoryWidget.OnUpdateSupplyEvent
// 0x0010 (0x0010 - 0x0000)
struct InGameInventoryWidget_OnUpdateSupplyEvent final
{
public:
	TArray<class USupplyHolder*>                  List;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameInventoryWidget_OnUpdateSupplyEvent) == 0x000008, "Wrong alignment on InGameInventoryWidget_OnUpdateSupplyEvent");
static_assert(sizeof(InGameInventoryWidget_OnUpdateSupplyEvent) == 0x000010, "Wrong size on InGameInventoryWidget_OnUpdateSupplyEvent");
static_assert(offsetof(InGameInventoryWidget_OnUpdateSupplyEvent, List) == 0x000000, "Member 'InGameInventoryWidget_OnUpdateSupplyEvent::List' has a wrong offset!");

// Function InGameModule.InGameInventoryWidget.Update
// 0x0010 (0x0010 - 0x0000)
struct InGameInventoryWidget_Update final
{
public:
	TArray<class USupplyHolder*>                  List;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameInventoryWidget_Update) == 0x000008, "Wrong alignment on InGameInventoryWidget_Update");
static_assert(sizeof(InGameInventoryWidget_Update) == 0x000010, "Wrong size on InGameInventoryWidget_Update");
static_assert(offsetof(InGameInventoryWidget_Update, List) == 0x000000, "Member 'InGameInventoryWidget_Update::List' has a wrong offset!");

// Function InGameModule.InGameInventoryWidget.GetCanFocusFarShoulderWidget
// 0x0018 (0x0018 - 0x0000)
struct InGameInventoryWidget_GetCanFocusFarShoulderWidget final
{
public:
	class UWidget*                                CheckWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNearWidth;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UItemWidget*                            ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameInventoryWidget_GetCanFocusFarShoulderWidget) == 0x000008, "Wrong alignment on InGameInventoryWidget_GetCanFocusFarShoulderWidget");
static_assert(sizeof(InGameInventoryWidget_GetCanFocusFarShoulderWidget) == 0x000018, "Wrong size on InGameInventoryWidget_GetCanFocusFarShoulderWidget");
static_assert(offsetof(InGameInventoryWidget_GetCanFocusFarShoulderWidget, CheckWidget) == 0x000000, "Member 'InGameInventoryWidget_GetCanFocusFarShoulderWidget::CheckWidget' has a wrong offset!");
static_assert(offsetof(InGameInventoryWidget_GetCanFocusFarShoulderWidget, bNearWidth) == 0x000008, "Member 'InGameInventoryWidget_GetCanFocusFarShoulderWidget::bNearWidth' has a wrong offset!");
static_assert(offsetof(InGameInventoryWidget_GetCanFocusFarShoulderWidget, ReturnValue) == 0x000010, "Member 'InGameInventoryWidget_GetCanFocusFarShoulderWidget::ReturnValue' has a wrong offset!");

// Function InGameModule.InGameInventoryWidget.GetCanFocusNearAbilityWidget
// 0x0018 (0x0018 - 0x0000)
struct InGameInventoryWidget_GetCanFocusNearAbilityWidget final
{
public:
	class UWidget*                                ShoulderWidget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUINavigation                                 NavigationType;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UItemWidget*                            ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameInventoryWidget_GetCanFocusNearAbilityWidget) == 0x000008, "Wrong alignment on InGameInventoryWidget_GetCanFocusNearAbilityWidget");
static_assert(sizeof(InGameInventoryWidget_GetCanFocusNearAbilityWidget) == 0x000018, "Wrong size on InGameInventoryWidget_GetCanFocusNearAbilityWidget");
static_assert(offsetof(InGameInventoryWidget_GetCanFocusNearAbilityWidget, ShoulderWidget) == 0x000000, "Member 'InGameInventoryWidget_GetCanFocusNearAbilityWidget::ShoulderWidget' has a wrong offset!");
static_assert(offsetof(InGameInventoryWidget_GetCanFocusNearAbilityWidget, NavigationType) == 0x000008, "Member 'InGameInventoryWidget_GetCanFocusNearAbilityWidget::NavigationType' has a wrong offset!");
static_assert(offsetof(InGameInventoryWidget_GetCanFocusNearAbilityWidget, ReturnValue) == 0x000010, "Member 'InGameInventoryWidget_GetCanFocusNearAbilityWidget::ReturnValue' has a wrong offset!");

// Function InGameModule.InGameInventoryWidget.GetCanFocusNearShoulderWidget
// 0x0010 (0x0010 - 0x0000)
struct InGameInventoryWidget_GetCanFocusNearShoulderWidget final
{
public:
	class UWidget*                                CheckWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UItemWidget*                            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameInventoryWidget_GetCanFocusNearShoulderWidget) == 0x000008, "Wrong alignment on InGameInventoryWidget_GetCanFocusNearShoulderWidget");
static_assert(sizeof(InGameInventoryWidget_GetCanFocusNearShoulderWidget) == 0x000010, "Wrong size on InGameInventoryWidget_GetCanFocusNearShoulderWidget");
static_assert(offsetof(InGameInventoryWidget_GetCanFocusNearShoulderWidget, CheckWidget) == 0x000000, "Member 'InGameInventoryWidget_GetCanFocusNearShoulderWidget::CheckWidget' has a wrong offset!");
static_assert(offsetof(InGameInventoryWidget_GetCanFocusNearShoulderWidget, ReturnValue) == 0x000008, "Member 'InGameInventoryWidget_GetCanFocusNearShoulderWidget::ReturnValue' has a wrong offset!");

// Function InGameModule.InGameInventoryWidget.GetCanFocusNearSkillWidget
// 0x0018 (0x0018 - 0x0000)
struct InGameInventoryWidget_GetCanFocusNearSkillWidget final
{
public:
	class UWidget*                                ShoulderWidget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUINavigation                                 NavigationType;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UItemWidget*                            ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameInventoryWidget_GetCanFocusNearSkillWidget) == 0x000008, "Wrong alignment on InGameInventoryWidget_GetCanFocusNearSkillWidget");
static_assert(sizeof(InGameInventoryWidget_GetCanFocusNearSkillWidget) == 0x000018, "Wrong size on InGameInventoryWidget_GetCanFocusNearSkillWidget");
static_assert(offsetof(InGameInventoryWidget_GetCanFocusNearSkillWidget, ShoulderWidget) == 0x000000, "Member 'InGameInventoryWidget_GetCanFocusNearSkillWidget::ShoulderWidget' has a wrong offset!");
static_assert(offsetof(InGameInventoryWidget_GetCanFocusNearSkillWidget, NavigationType) == 0x000008, "Member 'InGameInventoryWidget_GetCanFocusNearSkillWidget::NavigationType' has a wrong offset!");
static_assert(offsetof(InGameInventoryWidget_GetCanFocusNearSkillWidget, ReturnValue) == 0x000010, "Member 'InGameInventoryWidget_GetCanFocusNearSkillWidget::ReturnValue' has a wrong offset!");

// Function InGameModule.InGameInventoryWidget.GetFocusByRightRowShoulderWidget
// 0x0010 (0x0010 - 0x0000)
struct InGameInventoryWidget_GetFocusByRightRowShoulderWidget final
{
public:
	int32                                         HeightRow;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameInventoryWidget_GetFocusByRightRowShoulderWidget) == 0x000008, "Wrong alignment on InGameInventoryWidget_GetFocusByRightRowShoulderWidget");
static_assert(sizeof(InGameInventoryWidget_GetFocusByRightRowShoulderWidget) == 0x000010, "Wrong size on InGameInventoryWidget_GetFocusByRightRowShoulderWidget");
static_assert(offsetof(InGameInventoryWidget_GetFocusByRightRowShoulderWidget, HeightRow) == 0x000000, "Member 'InGameInventoryWidget_GetFocusByRightRowShoulderWidget::HeightRow' has a wrong offset!");
static_assert(offsetof(InGameInventoryWidget_GetFocusByRightRowShoulderWidget, ReturnValue) == 0x000008, "Member 'InGameInventoryWidget_GetFocusByRightRowShoulderWidget::ReturnValue' has a wrong offset!");

// Function InGameModule.InGameInventoryWidget.GetNavigationCanFocusNearShoulderWidget
// 0x0018 (0x0018 - 0x0000)
struct InGameInventoryWidget_GetNavigationCanFocusNearShoulderWidget final
{
public:
	class UWidget*                                CheckWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUINavigation                                 NavigationType;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UItemWidget*                            ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameInventoryWidget_GetNavigationCanFocusNearShoulderWidget) == 0x000008, "Wrong alignment on InGameInventoryWidget_GetNavigationCanFocusNearShoulderWidget");
static_assert(sizeof(InGameInventoryWidget_GetNavigationCanFocusNearShoulderWidget) == 0x000018, "Wrong size on InGameInventoryWidget_GetNavigationCanFocusNearShoulderWidget");
static_assert(offsetof(InGameInventoryWidget_GetNavigationCanFocusNearShoulderWidget, CheckWidget) == 0x000000, "Member 'InGameInventoryWidget_GetNavigationCanFocusNearShoulderWidget::CheckWidget' has a wrong offset!");
static_assert(offsetof(InGameInventoryWidget_GetNavigationCanFocusNearShoulderWidget, NavigationType) == 0x000008, "Member 'InGameInventoryWidget_GetNavigationCanFocusNearShoulderWidget::NavigationType' has a wrong offset!");
static_assert(offsetof(InGameInventoryWidget_GetNavigationCanFocusNearShoulderWidget, ReturnValue) == 0x000010, "Member 'InGameInventoryWidget_GetNavigationCanFocusNearShoulderWidget::ReturnValue' has a wrong offset!");

// Function InGameModule.InGameInventoryWidget.GetSelectStatusType
// 0x0001 (0x0001 - 0x0000)
struct InGameInventoryWidget_GetSelectStatusType final
{
public:
	EInventorySelectStatus                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameInventoryWidget_GetSelectStatusType) == 0x000001, "Wrong alignment on InGameInventoryWidget_GetSelectStatusType");
static_assert(sizeof(InGameInventoryWidget_GetSelectStatusType) == 0x000001, "Wrong size on InGameInventoryWidget_GetSelectStatusType");
static_assert(offsetof(InGameInventoryWidget_GetSelectStatusType, ReturnValue) == 0x000000, "Member 'InGameInventoryWidget_GetSelectStatusType::ReturnValue' has a wrong offset!");

// Function InGameModule.InGameInventoryWidget.SetFocusByRightRowBottomWidget
// 0x0008 (0x0008 - 0x0000)
struct InGameInventoryWidget_SetFocusByRightRowBottomWidget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameInventoryWidget_SetFocusByRightRowBottomWidget) == 0x000008, "Wrong alignment on InGameInventoryWidget_SetFocusByRightRowBottomWidget");
static_assert(sizeof(InGameInventoryWidget_SetFocusByRightRowBottomWidget) == 0x000008, "Wrong size on InGameInventoryWidget_SetFocusByRightRowBottomWidget");
static_assert(offsetof(InGameInventoryWidget_SetFocusByRightRowBottomWidget, ReturnValue) == 0x000000, "Member 'InGameInventoryWidget_SetFocusByRightRowBottomWidget::ReturnValue' has a wrong offset!");

// Function InGameModule.InGameMiscInfo.OnRecvCheerEvent
// 0x0008 (0x0008 - 0x0000)
struct InGameMiscInfo_OnRecvCheerEvent final
{
public:
	int32                                         CheerCount;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocalCheerCount;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameMiscInfo_OnRecvCheerEvent) == 0x000004, "Wrong alignment on InGameMiscInfo_OnRecvCheerEvent");
static_assert(sizeof(InGameMiscInfo_OnRecvCheerEvent) == 0x000008, "Wrong size on InGameMiscInfo_OnRecvCheerEvent");
static_assert(offsetof(InGameMiscInfo_OnRecvCheerEvent, CheerCount) == 0x000000, "Member 'InGameMiscInfo_OnRecvCheerEvent::CheerCount' has a wrong offset!");
static_assert(offsetof(InGameMiscInfo_OnRecvCheerEvent, LocalCheerCount) == 0x000004, "Member 'InGameMiscInfo_OnRecvCheerEvent::LocalCheerCount' has a wrong offset!");

// Function InGameModule.InGameStatics.CheckWorldStatics
// 0x0050 (0x0050 - 0x0000)
struct InGameStatics_CheckWorldStatics final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartLocation;                                     // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndLocation;                                       // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     ResultHits;                                        // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoreList;                                        // 0x0038(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0049(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InGameStatics_CheckWorldStatics) == 0x000008, "Wrong alignment on InGameStatics_CheckWorldStatics");
static_assert(sizeof(InGameStatics_CheckWorldStatics) == 0x000050, "Wrong size on InGameStatics_CheckWorldStatics");
static_assert(offsetof(InGameStatics_CheckWorldStatics, WorldContextObject) == 0x000000, "Member 'InGameStatics_CheckWorldStatics::WorldContextObject' has a wrong offset!");
static_assert(offsetof(InGameStatics_CheckWorldStatics, StartLocation) == 0x000008, "Member 'InGameStatics_CheckWorldStatics::StartLocation' has a wrong offset!");
static_assert(offsetof(InGameStatics_CheckWorldStatics, EndLocation) == 0x000014, "Member 'InGameStatics_CheckWorldStatics::EndLocation' has a wrong offset!");
static_assert(offsetof(InGameStatics_CheckWorldStatics, SphereRadius) == 0x000020, "Member 'InGameStatics_CheckWorldStatics::SphereRadius' has a wrong offset!");
static_assert(offsetof(InGameStatics_CheckWorldStatics, ResultHits) == 0x000028, "Member 'InGameStatics_CheckWorldStatics::ResultHits' has a wrong offset!");
static_assert(offsetof(InGameStatics_CheckWorldStatics, IgnoreList) == 0x000038, "Member 'InGameStatics_CheckWorldStatics::IgnoreList' has a wrong offset!");
static_assert(offsetof(InGameStatics_CheckWorldStatics, DrawDebugType) == 0x000048, "Member 'InGameStatics_CheckWorldStatics::DrawDebugType' has a wrong offset!");
static_assert(offsetof(InGameStatics_CheckWorldStatics, ReturnValue) == 0x000049, "Member 'InGameStatics_CheckWorldStatics::ReturnValue' has a wrong offset!");

// Function InGameModule.InGameStatics.GetGroundHeight
// 0x0048 (0x0048 - 0x0000)
struct InGameStatics_GetGroundHeight final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartLocation;                                     // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CheckDistance;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckNormal;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HitActor;                                          // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoreList;                                        // 0x0028(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UCapsuleComponent*                      Capsule;                                           // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InGameStatics_GetGroundHeight) == 0x000008, "Wrong alignment on InGameStatics_GetGroundHeight");
static_assert(sizeof(InGameStatics_GetGroundHeight) == 0x000048, "Wrong size on InGameStatics_GetGroundHeight");
static_assert(offsetof(InGameStatics_GetGroundHeight, WorldContextObject) == 0x000000, "Member 'InGameStatics_GetGroundHeight::WorldContextObject' has a wrong offset!");
static_assert(offsetof(InGameStatics_GetGroundHeight, StartLocation) == 0x000008, "Member 'InGameStatics_GetGroundHeight::StartLocation' has a wrong offset!");
static_assert(offsetof(InGameStatics_GetGroundHeight, CheckDistance) == 0x000014, "Member 'InGameStatics_GetGroundHeight::CheckDistance' has a wrong offset!");
static_assert(offsetof(InGameStatics_GetGroundHeight, bCheckNormal) == 0x000018, "Member 'InGameStatics_GetGroundHeight::bCheckNormal' has a wrong offset!");
static_assert(offsetof(InGameStatics_GetGroundHeight, HitActor) == 0x000020, "Member 'InGameStatics_GetGroundHeight::HitActor' has a wrong offset!");
static_assert(offsetof(InGameStatics_GetGroundHeight, IgnoreList) == 0x000028, "Member 'InGameStatics_GetGroundHeight::IgnoreList' has a wrong offset!");
static_assert(offsetof(InGameStatics_GetGroundHeight, Capsule) == 0x000038, "Member 'InGameStatics_GetGroundHeight::Capsule' has a wrong offset!");
static_assert(offsetof(InGameStatics_GetGroundHeight, ReturnValue) == 0x000040, "Member 'InGameStatics_GetGroundHeight::ReturnValue' has a wrong offset!");

// Function InGameModule.InGameStatics.GetGroundHeightFromParam
// 0x0048 (0x0048 - 0x0000)
struct InGameStatics_GetGroundHeightFromParam final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 HitActor;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGroundCheckParam                      Param;                                             // 0x0010(0x0030)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InGameStatics_GetGroundHeightFromParam) == 0x000008, "Wrong alignment on InGameStatics_GetGroundHeightFromParam");
static_assert(sizeof(InGameStatics_GetGroundHeightFromParam) == 0x000048, "Wrong size on InGameStatics_GetGroundHeightFromParam");
static_assert(offsetof(InGameStatics_GetGroundHeightFromParam, WorldContextObject) == 0x000000, "Member 'InGameStatics_GetGroundHeightFromParam::WorldContextObject' has a wrong offset!");
static_assert(offsetof(InGameStatics_GetGroundHeightFromParam, HitActor) == 0x000008, "Member 'InGameStatics_GetGroundHeightFromParam::HitActor' has a wrong offset!");
static_assert(offsetof(InGameStatics_GetGroundHeightFromParam, Param) == 0x000010, "Member 'InGameStatics_GetGroundHeightFromParam::Param' has a wrong offset!");
static_assert(offsetof(InGameStatics_GetGroundHeightFromParam, ReturnValue) == 0x000040, "Member 'InGameStatics_GetGroundHeightFromParam::ReturnValue' has a wrong offset!");

// Function InGameModule.InGameStatics.GetHitSurfaceType
// 0x008C (0x008C - 0x0000)
struct InGameStatics_GetHitSurfaceType final
{
public:
	struct FHitResult                             ResultHit;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	ESurfaceType                                  ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InGameStatics_GetHitSurfaceType) == 0x000004, "Wrong alignment on InGameStatics_GetHitSurfaceType");
static_assert(sizeof(InGameStatics_GetHitSurfaceType) == 0x00008C, "Wrong size on InGameStatics_GetHitSurfaceType");
static_assert(offsetof(InGameStatics_GetHitSurfaceType, ResultHit) == 0x000000, "Member 'InGameStatics_GetHitSurfaceType::ResultHit' has a wrong offset!");
static_assert(offsetof(InGameStatics_GetHitSurfaceType, ReturnValue) == 0x000088, "Member 'InGameStatics_GetHitSurfaceType::ReturnValue' has a wrong offset!");

// Function InGameModule.InGameStatics.GetPlaneDegree
// 0x0010 (0x0010 - 0x0000)
struct InGameStatics_GetPlaneDegree final
{
public:
	struct FVector                                Normal;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameStatics_GetPlaneDegree) == 0x000004, "Wrong alignment on InGameStatics_GetPlaneDegree");
static_assert(sizeof(InGameStatics_GetPlaneDegree) == 0x000010, "Wrong size on InGameStatics_GetPlaneDegree");
static_assert(offsetof(InGameStatics_GetPlaneDegree, Normal) == 0x000000, "Member 'InGameStatics_GetPlaneDegree::Normal' has a wrong offset!");
static_assert(offsetof(InGameStatics_GetPlaneDegree, ReturnValue) == 0x00000C, "Member 'InGameStatics_GetPlaneDegree::ReturnValue' has a wrong offset!");

// Function InGameModule.InGameStatics.GetSurfaceType
// 0x00C8 (0x00C8 - 0x0000)
struct InGameStatics_GetSurfaceType final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartLocation;                                     // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndLocation;                                       // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             ResultHit;                                         // 0x0024(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoreList;                                        // 0x00B0(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	ESurfaceType                                  ReturnValue;                                       // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InGameStatics_GetSurfaceType) == 0x000008, "Wrong alignment on InGameStatics_GetSurfaceType");
static_assert(sizeof(InGameStatics_GetSurfaceType) == 0x0000C8, "Wrong size on InGameStatics_GetSurfaceType");
static_assert(offsetof(InGameStatics_GetSurfaceType, WorldContextObject) == 0x000000, "Member 'InGameStatics_GetSurfaceType::WorldContextObject' has a wrong offset!");
static_assert(offsetof(InGameStatics_GetSurfaceType, StartLocation) == 0x000008, "Member 'InGameStatics_GetSurfaceType::StartLocation' has a wrong offset!");
static_assert(offsetof(InGameStatics_GetSurfaceType, EndLocation) == 0x000014, "Member 'InGameStatics_GetSurfaceType::EndLocation' has a wrong offset!");
static_assert(offsetof(InGameStatics_GetSurfaceType, SphereRadius) == 0x000020, "Member 'InGameStatics_GetSurfaceType::SphereRadius' has a wrong offset!");
static_assert(offsetof(InGameStatics_GetSurfaceType, ResultHit) == 0x000024, "Member 'InGameStatics_GetSurfaceType::ResultHit' has a wrong offset!");
static_assert(offsetof(InGameStatics_GetSurfaceType, IgnoreList) == 0x0000B0, "Member 'InGameStatics_GetSurfaceType::IgnoreList' has a wrong offset!");
static_assert(offsetof(InGameStatics_GetSurfaceType, ReturnValue) == 0x0000C0, "Member 'InGameStatics_GetSurfaceType::ReturnValue' has a wrong offset!");

// Function InGameModule.InGameStatics.MakeCharacterJsonPath
// 0x0018 (0x0018 - 0x0000)
struct InGameStatics_MakeCharacterJsonPath final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameStatics_MakeCharacterJsonPath) == 0x000008, "Wrong alignment on InGameStatics_MakeCharacterJsonPath");
static_assert(sizeof(InGameStatics_MakeCharacterJsonPath) == 0x000018, "Wrong size on InGameStatics_MakeCharacterJsonPath");
static_assert(offsetof(InGameStatics_MakeCharacterJsonPath, CharacterId) == 0x000000, "Member 'InGameStatics_MakeCharacterJsonPath::CharacterId' has a wrong offset!");
static_assert(offsetof(InGameStatics_MakeCharacterJsonPath, ReturnValue) == 0x000008, "Member 'InGameStatics_MakeCharacterJsonPath::ReturnValue' has a wrong offset!");

// Function InGameModule.InteractTargetComponent.BeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct InteractTargetComponent_BeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractTargetComponent_BeginOverlap) == 0x000008, "Wrong alignment on InteractTargetComponent_BeginOverlap");
static_assert(sizeof(InteractTargetComponent_BeginOverlap) == 0x0000A8, "Wrong size on InteractTargetComponent_BeginOverlap");
static_assert(offsetof(InteractTargetComponent_BeginOverlap, OverlappedComponent) == 0x000000, "Member 'InteractTargetComponent_BeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(InteractTargetComponent_BeginOverlap, OtherActor) == 0x000008, "Member 'InteractTargetComponent_BeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(InteractTargetComponent_BeginOverlap, OtherComp) == 0x000010, "Member 'InteractTargetComponent_BeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(InteractTargetComponent_BeginOverlap, OtherBodyIndex) == 0x000018, "Member 'InteractTargetComponent_BeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(InteractTargetComponent_BeginOverlap, bFromSweep) == 0x00001C, "Member 'InteractTargetComponent_BeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(InteractTargetComponent_BeginOverlap, SweepResult) == 0x000020, "Member 'InteractTargetComponent_BeginOverlap::SweepResult' has a wrong offset!");

// Function InGameModule.InteractTargetComponent.EndOverlap
// 0x0020 (0x0020 - 0x0000)
struct InteractTargetComponent_EndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractTargetComponent_EndOverlap) == 0x000008, "Wrong alignment on InteractTargetComponent_EndOverlap");
static_assert(sizeof(InteractTargetComponent_EndOverlap) == 0x000020, "Wrong size on InteractTargetComponent_EndOverlap");
static_assert(offsetof(InteractTargetComponent_EndOverlap, OverlappedComponent) == 0x000000, "Member 'InteractTargetComponent_EndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(InteractTargetComponent_EndOverlap, OtherActor) == 0x000008, "Member 'InteractTargetComponent_EndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(InteractTargetComponent_EndOverlap, OtherComp) == 0x000010, "Member 'InteractTargetComponent_EndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(InteractTargetComponent_EndOverlap, OtherBodyIndex) == 0x000018, "Member 'InteractTargetComponent_EndOverlap::OtherBodyIndex' has a wrong offset!");

// Function InGameModule.InventoryAbilityWidget.OnBeginUseAbilityEvent
// 0x0008 (0x0008 - 0x0000)
struct InventoryAbilityWidget_OnBeginUseAbilityEvent final
{
public:
	class UAbilityHolder*                         Ability;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryAbilityWidget_OnBeginUseAbilityEvent) == 0x000008, "Wrong alignment on InventoryAbilityWidget_OnBeginUseAbilityEvent");
static_assert(sizeof(InventoryAbilityWidget_OnBeginUseAbilityEvent) == 0x000008, "Wrong size on InventoryAbilityWidget_OnBeginUseAbilityEvent");
static_assert(offsetof(InventoryAbilityWidget_OnBeginUseAbilityEvent, Ability) == 0x000000, "Member 'InventoryAbilityWidget_OnBeginUseAbilityEvent::Ability' has a wrong offset!");

// Function InGameModule.InventoryAbilityWidget.OnEndUseAbilityEvent
// 0x0008 (0x0008 - 0x0000)
struct InventoryAbilityWidget_OnEndUseAbilityEvent final
{
public:
	class UAbilityHolder*                         Ability;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryAbilityWidget_OnEndUseAbilityEvent) == 0x000008, "Wrong alignment on InventoryAbilityWidget_OnEndUseAbilityEvent");
static_assert(sizeof(InventoryAbilityWidget_OnEndUseAbilityEvent) == 0x000008, "Wrong size on InventoryAbilityWidget_OnEndUseAbilityEvent");
static_assert(offsetof(InventoryAbilityWidget_OnEndUseAbilityEvent, Ability) == 0x000000, "Member 'InventoryAbilityWidget_OnEndUseAbilityEvent::Ability' has a wrong offset!");

// Function InGameModule.InventoryAbilityWidget.OnFocusEvent
// 0x0008 (0x0008 - 0x0000)
struct InventoryAbilityWidget_OnFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryAbilityWidget_OnFocusEvent) == 0x000008, "Wrong alignment on InventoryAbilityWidget_OnFocusEvent");
static_assert(sizeof(InventoryAbilityWidget_OnFocusEvent) == 0x000008, "Wrong size on InventoryAbilityWidget_OnFocusEvent");
static_assert(offsetof(InventoryAbilityWidget_OnFocusEvent, Widget) == 0x000000, "Member 'InventoryAbilityWidget_OnFocusEvent::Widget' has a wrong offset!");

// Function InGameModule.InventoryAbilityWidget.OnRemoveFocusEvent
// 0x0008 (0x0008 - 0x0000)
struct InventoryAbilityWidget_OnRemoveFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryAbilityWidget_OnRemoveFocusEvent) == 0x000008, "Wrong alignment on InventoryAbilityWidget_OnRemoveFocusEvent");
static_assert(sizeof(InventoryAbilityWidget_OnRemoveFocusEvent) == 0x000008, "Wrong size on InventoryAbilityWidget_OnRemoveFocusEvent");
static_assert(offsetof(InventoryAbilityWidget_OnRemoveFocusEvent, Widget) == 0x000000, "Member 'InventoryAbilityWidget_OnRemoveFocusEvent::Widget' has a wrong offset!");

// Function InGameModule.InventoryAllySkillListWidget.OnRepOwnerPlayerStateEvent
// 0x0008 (0x0008 - 0x0000)
struct InventoryAllySkillListWidget_OnRepOwnerPlayerStateEvent final
{
public:
	class APlayerStateBattle*                     PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryAllySkillListWidget_OnRepOwnerPlayerStateEvent) == 0x000008, "Wrong alignment on InventoryAllySkillListWidget_OnRepOwnerPlayerStateEvent");
static_assert(sizeof(InventoryAllySkillListWidget_OnRepOwnerPlayerStateEvent) == 0x000008, "Wrong size on InventoryAllySkillListWidget_OnRepOwnerPlayerStateEvent");
static_assert(offsetof(InventoryAllySkillListWidget_OnRepOwnerPlayerStateEvent, PlayerState) == 0x000000, "Member 'InventoryAllySkillListWidget_OnRepOwnerPlayerStateEvent::PlayerState' has a wrong offset!");

// Function InGameModule.InventoryItemShoulderWidget.OnEndUsingSupplyEvent
// 0x0008 (0x0008 - 0x0000)
struct InventoryItemShoulderWidget_OnEndUsingSupplyEvent final
{
public:
	const class USupplyHolder*                    SupplyHolder;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryItemShoulderWidget_OnEndUsingSupplyEvent) == 0x000008, "Wrong alignment on InventoryItemShoulderWidget_OnEndUsingSupplyEvent");
static_assert(sizeof(InventoryItemShoulderWidget_OnEndUsingSupplyEvent) == 0x000008, "Wrong size on InventoryItemShoulderWidget_OnEndUsingSupplyEvent");
static_assert(offsetof(InventoryItemShoulderWidget_OnEndUsingSupplyEvent, SupplyHolder) == 0x000000, "Member 'InventoryItemShoulderWidget_OnEndUsingSupplyEvent::SupplyHolder' has a wrong offset!");

// Function InGameModule.InventoryItemShoulderWidget.OnFocusEvent
// 0x0008 (0x0008 - 0x0000)
struct InventoryItemShoulderWidget_OnFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryItemShoulderWidget_OnFocusEvent) == 0x000008, "Wrong alignment on InventoryItemShoulderWidget_OnFocusEvent");
static_assert(sizeof(InventoryItemShoulderWidget_OnFocusEvent) == 0x000008, "Wrong size on InventoryItemShoulderWidget_OnFocusEvent");
static_assert(offsetof(InventoryItemShoulderWidget_OnFocusEvent, Widget) == 0x000000, "Member 'InventoryItemShoulderWidget_OnFocusEvent::Widget' has a wrong offset!");

// Function InGameModule.InventoryItemShoulderWidget.OnStartUsingSupplyEvent
// 0x0008 (0x0008 - 0x0000)
struct InventoryItemShoulderWidget_OnStartUsingSupplyEvent final
{
public:
	const class USupplyHolder*                    SupplyHolder;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryItemShoulderWidget_OnStartUsingSupplyEvent) == 0x000008, "Wrong alignment on InventoryItemShoulderWidget_OnStartUsingSupplyEvent");
static_assert(sizeof(InventoryItemShoulderWidget_OnStartUsingSupplyEvent) == 0x000008, "Wrong size on InventoryItemShoulderWidget_OnStartUsingSupplyEvent");
static_assert(offsetof(InventoryItemShoulderWidget_OnStartUsingSupplyEvent, SupplyHolder) == 0x000000, "Member 'InventoryItemShoulderWidget_OnStartUsingSupplyEvent::SupplyHolder' has a wrong offset!");

// Function InGameModule.InventorySkillWidget.OnAnimationFinished_Implementation
// 0x0008 (0x0008 - 0x0000)
struct InventorySkillWidget_OnAnimationFinished_Implementation final
{
public:
	const class UWidgetAnimation*                 InAnimation;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventorySkillWidget_OnAnimationFinished_Implementation) == 0x000008, "Wrong alignment on InventorySkillWidget_OnAnimationFinished_Implementation");
static_assert(sizeof(InventorySkillWidget_OnAnimationFinished_Implementation) == 0x000008, "Wrong size on InventorySkillWidget_OnAnimationFinished_Implementation");
static_assert(offsetof(InventorySkillWidget_OnAnimationFinished_Implementation, InAnimation) == 0x000000, "Member 'InventorySkillWidget_OnAnimationFinished_Implementation::InAnimation' has a wrong offset!");

// Function InGameModule.InventorySkillWidget.OnFocusEvent
// 0x0008 (0x0008 - 0x0000)
struct InventorySkillWidget_OnFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventorySkillWidget_OnFocusEvent) == 0x000008, "Wrong alignment on InventorySkillWidget_OnFocusEvent");
static_assert(sizeof(InventorySkillWidget_OnFocusEvent) == 0x000008, "Wrong size on InventorySkillWidget_OnFocusEvent");
static_assert(offsetof(InventorySkillWidget_OnFocusEvent, Widget) == 0x000000, "Member 'InventorySkillWidget_OnFocusEvent::Widget' has a wrong offset!");

// Function InGameModule.InventorySkillWidget.OnRemoveFocusEvent
// 0x0008 (0x0008 - 0x0000)
struct InventorySkillWidget_OnRemoveFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventorySkillWidget_OnRemoveFocusEvent) == 0x000008, "Wrong alignment on InventorySkillWidget_OnRemoveFocusEvent");
static_assert(sizeof(InventorySkillWidget_OnRemoveFocusEvent) == 0x000008, "Wrong size on InventorySkillWidget_OnRemoveFocusEvent");
static_assert(offsetof(InventorySkillWidget_OnRemoveFocusEvent, Widget) == 0x000000, "Member 'InventorySkillWidget_OnRemoveFocusEvent::Widget' has a wrong offset!");

// Function InGameModule.ItemWidget.BP_ChangeAbilityIcon
// 0x0018 (0x0018 - 0x0000)
struct ItemWidget_BP_ChangeAbilityIcon final
{
public:
	class UPaperSprite*                           InPaperSprite;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AbilityType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackId                                     AttackId;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Level;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSkillIcon;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemWidget_BP_ChangeAbilityIcon) == 0x000008, "Wrong alignment on ItemWidget_BP_ChangeAbilityIcon");
static_assert(sizeof(ItemWidget_BP_ChangeAbilityIcon) == 0x000018, "Wrong size on ItemWidget_BP_ChangeAbilityIcon");
static_assert(offsetof(ItemWidget_BP_ChangeAbilityIcon, InPaperSprite) == 0x000000, "Member 'ItemWidget_BP_ChangeAbilityIcon::InPaperSprite' has a wrong offset!");
static_assert(offsetof(ItemWidget_BP_ChangeAbilityIcon, AbilityType) == 0x000008, "Member 'ItemWidget_BP_ChangeAbilityIcon::AbilityType' has a wrong offset!");
static_assert(offsetof(ItemWidget_BP_ChangeAbilityIcon, AttackId) == 0x000009, "Member 'ItemWidget_BP_ChangeAbilityIcon::AttackId' has a wrong offset!");
static_assert(offsetof(ItemWidget_BP_ChangeAbilityIcon, Level) == 0x00000C, "Member 'ItemWidget_BP_ChangeAbilityIcon::Level' has a wrong offset!");
static_assert(offsetof(ItemWidget_BP_ChangeAbilityIcon, IsSkillIcon) == 0x000010, "Member 'ItemWidget_BP_ChangeAbilityIcon::IsSkillIcon' has a wrong offset!");

// Function InGameModule.ItemWidget.BP_ChangeSupplyIcon
// 0x0010 (0x0010 - 0x0000)
struct ItemWidget_BP_ChangeSupplyIcon final
{
public:
	class UPaperSprite*                           InPaperSprite;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackCount;                                        // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxStack;                                          // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemWidget_BP_ChangeSupplyIcon) == 0x000008, "Wrong alignment on ItemWidget_BP_ChangeSupplyIcon");
static_assert(sizeof(ItemWidget_BP_ChangeSupplyIcon) == 0x000010, "Wrong size on ItemWidget_BP_ChangeSupplyIcon");
static_assert(offsetof(ItemWidget_BP_ChangeSupplyIcon, InPaperSprite) == 0x000000, "Member 'ItemWidget_BP_ChangeSupplyIcon::InPaperSprite' has a wrong offset!");
static_assert(offsetof(ItemWidget_BP_ChangeSupplyIcon, StackCount) == 0x000008, "Member 'ItemWidget_BP_ChangeSupplyIcon::StackCount' has a wrong offset!");
static_assert(offsetof(ItemWidget_BP_ChangeSupplyIcon, MaxStack) == 0x00000C, "Member 'ItemWidget_BP_ChangeSupplyIcon::MaxStack' has a wrong offset!");

// Function InGameModule.ItemWidget.OnDecideEvent
// 0x0010 (0x0010 - 0x0000)
struct ItemWidget_OnDecideEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemWidget_OnDecideEvent) == 0x000008, "Wrong alignment on ItemWidget_OnDecideEvent");
static_assert(sizeof(ItemWidget_OnDecideEvent) == 0x000010, "Wrong size on ItemWidget_OnDecideEvent");
static_assert(offsetof(ItemWidget_OnDecideEvent, Widget) == 0x000000, "Member 'ItemWidget_OnDecideEvent::Widget' has a wrong offset!");
static_assert(offsetof(ItemWidget_OnDecideEvent, InputType) == 0x000008, "Member 'ItemWidget_OnDecideEvent::InputType' has a wrong offset!");

// Function InGameModule.ItemWidget.OnDropEvent
// 0x0010 (0x0010 - 0x0000)
struct ItemWidget_OnDropEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemWidget_OnDropEvent) == 0x000008, "Wrong alignment on ItemWidget_OnDropEvent");
static_assert(sizeof(ItemWidget_OnDropEvent) == 0x000010, "Wrong size on ItemWidget_OnDropEvent");
static_assert(offsetof(ItemWidget_OnDropEvent, Widget) == 0x000000, "Member 'ItemWidget_OnDropEvent::Widget' has a wrong offset!");
static_assert(offsetof(ItemWidget_OnDropEvent, InputType) == 0x000008, "Member 'ItemWidget_OnDropEvent::InputType' has a wrong offset!");

// Function InGameModule.ItemWidget.OnFocusEvent
// 0x0010 (0x0010 - 0x0000)
struct ItemWidget_OnFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemWidget_OnFocusEvent) == 0x000008, "Wrong alignment on ItemWidget_OnFocusEvent");
static_assert(sizeof(ItemWidget_OnFocusEvent) == 0x000010, "Wrong size on ItemWidget_OnFocusEvent");
static_assert(offsetof(ItemWidget_OnFocusEvent, Widget) == 0x000000, "Member 'ItemWidget_OnFocusEvent::Widget' has a wrong offset!");
static_assert(offsetof(ItemWidget_OnFocusEvent, InputType) == 0x000008, "Member 'ItemWidget_OnFocusEvent::InputType' has a wrong offset!");

// Function InGameModule.ItemWidget.OnPressEvent
// 0x0010 (0x0010 - 0x0000)
struct ItemWidget_OnPressEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemWidget_OnPressEvent) == 0x000008, "Wrong alignment on ItemWidget_OnPressEvent");
static_assert(sizeof(ItemWidget_OnPressEvent) == 0x000010, "Wrong size on ItemWidget_OnPressEvent");
static_assert(offsetof(ItemWidget_OnPressEvent, Widget) == 0x000000, "Member 'ItemWidget_OnPressEvent::Widget' has a wrong offset!");
static_assert(offsetof(ItemWidget_OnPressEvent, InputType) == 0x000008, "Member 'ItemWidget_OnPressEvent::InputType' has a wrong offset!");

// Function InGameModule.ItemWidget.OnRemovedFocusEvent
// 0x0010 (0x0010 - 0x0000)
struct ItemWidget_OnRemovedFocusEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemWidget_OnRemovedFocusEvent) == 0x000008, "Wrong alignment on ItemWidget_OnRemovedFocusEvent");
static_assert(sizeof(ItemWidget_OnRemovedFocusEvent) == 0x000010, "Wrong size on ItemWidget_OnRemovedFocusEvent");
static_assert(offsetof(ItemWidget_OnRemovedFocusEvent, Widget) == 0x000000, "Member 'ItemWidget_OnRemovedFocusEvent::Widget' has a wrong offset!");
static_assert(offsetof(ItemWidget_OnRemovedFocusEvent, InputType) == 0x000008, "Member 'ItemWidget_OnRemovedFocusEvent::InputType' has a wrong offset!");

// Function InGameModule.ItemWidget.SetDragVisual
// 0x0001 (0x0001 - 0x0000)
struct ItemWidget_SetDragVisual final
{
public:
	bool                                          bDragVisual;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemWidget_SetDragVisual) == 0x000001, "Wrong alignment on ItemWidget_SetDragVisual");
static_assert(sizeof(ItemWidget_SetDragVisual) == 0x000001, "Wrong size on ItemWidget_SetDragVisual");
static_assert(offsetof(ItemWidget_SetDragVisual, bDragVisual) == 0x000000, "Member 'ItemWidget_SetDragVisual::bDragVisual' has a wrong offset!");

// Function InGameModule.ItemWidget.CanFocusWidget
// 0x0001 (0x0001 - 0x0000)
struct ItemWidget_CanFocusWidget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemWidget_CanFocusWidget) == 0x000001, "Wrong alignment on ItemWidget_CanFocusWidget");
static_assert(sizeof(ItemWidget_CanFocusWidget) == 0x000001, "Wrong size on ItemWidget_CanFocusWidget");
static_assert(offsetof(ItemWidget_CanFocusWidget, ReturnValue) == 0x000000, "Member 'ItemWidget_CanFocusWidget::ReturnValue' has a wrong offset!");

// Function InGameModule.ItemWidget.GetAbilityType
// 0x0001 (0x0001 - 0x0000)
struct ItemWidget_GetAbilityType final
{
public:
	EMdAbilityType                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemWidget_GetAbilityType) == 0x000001, "Wrong alignment on ItemWidget_GetAbilityType");
static_assert(sizeof(ItemWidget_GetAbilityType) == 0x000001, "Wrong size on ItemWidget_GetAbilityType");
static_assert(offsetof(ItemWidget_GetAbilityType, ReturnValue) == 0x000000, "Member 'ItemWidget_GetAbilityType::ReturnValue' has a wrong offset!");

// Function InGameModule.ItemWidget.GetCurrentAttackId
// 0x0001 (0x0001 - 0x0000)
struct ItemWidget_GetCurrentAttackId final
{
public:
	EAttackId                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemWidget_GetCurrentAttackId) == 0x000001, "Wrong alignment on ItemWidget_GetCurrentAttackId");
static_assert(sizeof(ItemWidget_GetCurrentAttackId) == 0x000001, "Wrong size on ItemWidget_GetCurrentAttackId");
static_assert(offsetof(ItemWidget_GetCurrentAttackId, ReturnValue) == 0x000000, "Member 'ItemWidget_GetCurrentAttackId::ReturnValue' has a wrong offset!");

// Function InGameModule.ItemWidget.GetCurrentLevel
// 0x0004 (0x0004 - 0x0000)
struct ItemWidget_GetCurrentLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemWidget_GetCurrentLevel) == 0x000004, "Wrong alignment on ItemWidget_GetCurrentLevel");
static_assert(sizeof(ItemWidget_GetCurrentLevel) == 0x000004, "Wrong size on ItemWidget_GetCurrentLevel");
static_assert(offsetof(ItemWidget_GetCurrentLevel, ReturnValue) == 0x000000, "Member 'ItemWidget_GetCurrentLevel::ReturnValue' has a wrong offset!");

// Function InGameModule.ItemWidget.GetCurrentPaperSprite
// 0x0008 (0x0008 - 0x0000)
struct ItemWidget_GetCurrentPaperSprite final
{
public:
	class UPaperSprite*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemWidget_GetCurrentPaperSprite) == 0x000008, "Wrong alignment on ItemWidget_GetCurrentPaperSprite");
static_assert(sizeof(ItemWidget_GetCurrentPaperSprite) == 0x000008, "Wrong size on ItemWidget_GetCurrentPaperSprite");
static_assert(offsetof(ItemWidget_GetCurrentPaperSprite, ReturnValue) == 0x000000, "Member 'ItemWidget_GetCurrentPaperSprite::ReturnValue' has a wrong offset!");

// Function InGameModule.ItemWidget.GetCurrentSupplyStackCont
// 0x0004 (0x0004 - 0x0000)
struct ItemWidget_GetCurrentSupplyStackCont final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemWidget_GetCurrentSupplyStackCont) == 0x000004, "Wrong alignment on ItemWidget_GetCurrentSupplyStackCont");
static_assert(sizeof(ItemWidget_GetCurrentSupplyStackCont) == 0x000004, "Wrong size on ItemWidget_GetCurrentSupplyStackCont");
static_assert(offsetof(ItemWidget_GetCurrentSupplyStackCont, ReturnValue) == 0x000000, "Member 'ItemWidget_GetCurrentSupplyStackCont::ReturnValue' has a wrong offset!");

// Function InGameModule.ItemWidget.GetMaxSupplyStackCount
// 0x0004 (0x0004 - 0x0000)
struct ItemWidget_GetMaxSupplyStackCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemWidget_GetMaxSupplyStackCount) == 0x000004, "Wrong alignment on ItemWidget_GetMaxSupplyStackCount");
static_assert(sizeof(ItemWidget_GetMaxSupplyStackCount) == 0x000004, "Wrong size on ItemWidget_GetMaxSupplyStackCount");
static_assert(offsetof(ItemWidget_GetMaxSupplyStackCount, ReturnValue) == 0x000000, "Member 'ItemWidget_GetMaxSupplyStackCount::ReturnValue' has a wrong offset!");

// Function InGameModule.ItemWidget.GetProgressSeconds
// 0x0004 (0x0004 - 0x0000)
struct ItemWidget_GetProgressSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemWidget_GetProgressSeconds) == 0x000004, "Wrong alignment on ItemWidget_GetProgressSeconds");
static_assert(sizeof(ItemWidget_GetProgressSeconds) == 0x000004, "Wrong size on ItemWidget_GetProgressSeconds");
static_assert(offsetof(ItemWidget_GetProgressSeconds, ReturnValue) == 0x000000, "Member 'ItemWidget_GetProgressSeconds::ReturnValue' has a wrong offset!");

// Function InGameModule.ItemWidget.GetSelectType
// 0x0001 (0x0001 - 0x0000)
struct ItemWidget_GetSelectType final
{
public:
	EInventorySelectStatus                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemWidget_GetSelectType) == 0x000001, "Wrong alignment on ItemWidget_GetSelectType");
static_assert(sizeof(ItemWidget_GetSelectType) == 0x000001, "Wrong size on ItemWidget_GetSelectType");
static_assert(offsetof(ItemWidget_GetSelectType, ReturnValue) == 0x000000, "Member 'ItemWidget_GetSelectType::ReturnValue' has a wrong offset!");

// Function InGameModule.ItemWidget.GetSelectWidgetType
// 0x0001 (0x0001 - 0x0000)
struct ItemWidget_GetSelectWidgetType final
{
public:
	EInventoryWidgetType                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemWidget_GetSelectWidgetType) == 0x000001, "Wrong alignment on ItemWidget_GetSelectWidgetType");
static_assert(sizeof(ItemWidget_GetSelectWidgetType) == 0x000001, "Wrong size on ItemWidget_GetSelectWidgetType");
static_assert(offsetof(ItemWidget_GetSelectWidgetType, ReturnValue) == 0x000000, "Member 'ItemWidget_GetSelectWidgetType::ReturnValue' has a wrong offset!");

// Function InGameModule.ItemWidget.IsAbilityIcon
// 0x0001 (0x0001 - 0x0000)
struct ItemWidget_IsAbilityIcon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemWidget_IsAbilityIcon) == 0x000001, "Wrong alignment on ItemWidget_IsAbilityIcon");
static_assert(sizeof(ItemWidget_IsAbilityIcon) == 0x000001, "Wrong size on ItemWidget_IsAbilityIcon");
static_assert(offsetof(ItemWidget_IsAbilityIcon, ReturnValue) == 0x000000, "Member 'ItemWidget_IsAbilityIcon::ReturnValue' has a wrong offset!");

// Function InGameModule.ItemWidget.IsAvatarCharacter
// 0x0001 (0x0001 - 0x0000)
struct ItemWidget_IsAvatarCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemWidget_IsAvatarCharacter) == 0x000001, "Wrong alignment on ItemWidget_IsAvatarCharacter");
static_assert(sizeof(ItemWidget_IsAvatarCharacter) == 0x000001, "Wrong size on ItemWidget_IsAvatarCharacter");
static_assert(offsetof(ItemWidget_IsAvatarCharacter, ReturnValue) == 0x000000, "Member 'ItemWidget_IsAvatarCharacter::ReturnValue' has a wrong offset!");

// Function InGameModule.ItemWidget.IsFaceIcon
// 0x0001 (0x0001 - 0x0000)
struct ItemWidget_IsFaceIcon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemWidget_IsFaceIcon) == 0x000001, "Wrong alignment on ItemWidget_IsFaceIcon");
static_assert(sizeof(ItemWidget_IsFaceIcon) == 0x000001, "Wrong size on ItemWidget_IsFaceIcon");
static_assert(offsetof(ItemWidget_IsFaceIcon, ReturnValue) == 0x000000, "Member 'ItemWidget_IsFaceIcon::ReturnValue' has a wrong offset!");

// Function InGameModule.KillLogManagerComponent.SetupKillLog
// 0x0068 (0x0068 - 0x0000)
struct KillLogManagerComponent_SetupKillLog final
{
public:
	struct FKillLogInfo                           KillLogInfo;                                       // 0x0000(0x004C)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKillEventAssistPersona>        AssistPeople;                                      // 0x0050(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         ThisKillLogInfoIndex;                              // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KillLogManagerComponent_SetupKillLog) == 0x000008, "Wrong alignment on KillLogManagerComponent_SetupKillLog");
static_assert(sizeof(KillLogManagerComponent_SetupKillLog) == 0x000068, "Wrong size on KillLogManagerComponent_SetupKillLog");
static_assert(offsetof(KillLogManagerComponent_SetupKillLog, KillLogInfo) == 0x000000, "Member 'KillLogManagerComponent_SetupKillLog::KillLogInfo' has a wrong offset!");
static_assert(offsetof(KillLogManagerComponent_SetupKillLog, AssistPeople) == 0x000050, "Member 'KillLogManagerComponent_SetupKillLog::AssistPeople' has a wrong offset!");
static_assert(offsetof(KillLogManagerComponent_SetupKillLog, ThisKillLogInfoIndex) == 0x000060, "Member 'KillLogManagerComponent_SetupKillLog::ThisKillLogInfoIndex' has a wrong offset!");

// Function InGameModule.MagazineManagementComponent.BP_Consume
// 0x000C (0x000C - 0x0000)
struct MagazineManagementComponent_BP_Consume final
{
public:
	EAttackId                                     AttackId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Ammo;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagazineManagementComponent_BP_Consume) == 0x000004, "Wrong alignment on MagazineManagementComponent_BP_Consume");
static_assert(sizeof(MagazineManagementComponent_BP_Consume) == 0x00000C, "Wrong size on MagazineManagementComponent_BP_Consume");
static_assert(offsetof(MagazineManagementComponent_BP_Consume, AttackId) == 0x000000, "Member 'MagazineManagementComponent_BP_Consume::AttackId' has a wrong offset!");
static_assert(offsetof(MagazineManagementComponent_BP_Consume, Ammo) == 0x000004, "Member 'MagazineManagementComponent_BP_Consume::Ammo' has a wrong offset!");
static_assert(offsetof(MagazineManagementComponent_BP_Consume, ReturnValue) == 0x000008, "Member 'MagazineManagementComponent_BP_Consume::ReturnValue' has a wrong offset!");

// Function InGameModule.MagazineManagementComponent.BP_Empty
// 0x0001 (0x0001 - 0x0000)
struct MagazineManagementComponent_BP_Empty final
{
public:
	EAttackId                                     AttackId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagazineManagementComponent_BP_Empty) == 0x000001, "Wrong alignment on MagazineManagementComponent_BP_Empty");
static_assert(sizeof(MagazineManagementComponent_BP_Empty) == 0x000001, "Wrong size on MagazineManagementComponent_BP_Empty");
static_assert(offsetof(MagazineManagementComponent_BP_Empty, AttackId) == 0x000000, "Member 'MagazineManagementComponent_BP_Empty::AttackId' has a wrong offset!");

// Function InGameModule.MagazineManagementComponent.BP_GetMagazineState
// 0x0030 (0x0030 - 0x0000)
struct MagazineManagementComponent_BP_GetMagazineState final
{
public:
	EAttackId                                     AttackId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMagazineState                         ReturnValue;                                       // 0x0004(0x002C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagazineManagementComponent_BP_GetMagazineState) == 0x000004, "Wrong alignment on MagazineManagementComponent_BP_GetMagazineState");
static_assert(sizeof(MagazineManagementComponent_BP_GetMagazineState) == 0x000030, "Wrong size on MagazineManagementComponent_BP_GetMagazineState");
static_assert(offsetof(MagazineManagementComponent_BP_GetMagazineState, AttackId) == 0x000000, "Member 'MagazineManagementComponent_BP_GetMagazineState::AttackId' has a wrong offset!");
static_assert(offsetof(MagazineManagementComponent_BP_GetMagazineState, ReturnValue) == 0x000004, "Member 'MagazineManagementComponent_BP_GetMagazineState::ReturnValue' has a wrong offset!");

// Function InGameModule.MagazineManagementComponent.BP_IsEmpty
// 0x0002 (0x0002 - 0x0000)
struct MagazineManagementComponent_BP_IsEmpty final
{
public:
	EAttackId                                     AttackId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagazineManagementComponent_BP_IsEmpty) == 0x000001, "Wrong alignment on MagazineManagementComponent_BP_IsEmpty");
static_assert(sizeof(MagazineManagementComponent_BP_IsEmpty) == 0x000002, "Wrong size on MagazineManagementComponent_BP_IsEmpty");
static_assert(offsetof(MagazineManagementComponent_BP_IsEmpty, AttackId) == 0x000000, "Member 'MagazineManagementComponent_BP_IsEmpty::AttackId' has a wrong offset!");
static_assert(offsetof(MagazineManagementComponent_BP_IsEmpty, ReturnValue) == 0x000001, "Member 'MagazineManagementComponent_BP_IsEmpty::ReturnValue' has a wrong offset!");

// Function InGameModule.MagazineManagementComponent.BP_IsStarting
// 0x0002 (0x0002 - 0x0000)
struct MagazineManagementComponent_BP_IsStarting final
{
public:
	EAttackId                                     AttackId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagazineManagementComponent_BP_IsStarting) == 0x000001, "Wrong alignment on MagazineManagementComponent_BP_IsStarting");
static_assert(sizeof(MagazineManagementComponent_BP_IsStarting) == 0x000002, "Wrong size on MagazineManagementComponent_BP_IsStarting");
static_assert(offsetof(MagazineManagementComponent_BP_IsStarting, AttackId) == 0x000000, "Member 'MagazineManagementComponent_BP_IsStarting::AttackId' has a wrong offset!");
static_assert(offsetof(MagazineManagementComponent_BP_IsStarting, ReturnValue) == 0x000001, "Member 'MagazineManagementComponent_BP_IsStarting::ReturnValue' has a wrong offset!");

// Function InGameModule.MagazineManagementComponent.BP_Replenishment
// 0x0001 (0x0001 - 0x0000)
struct MagazineManagementComponent_BP_Replenishment final
{
public:
	EAttackId                                     AttackId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagazineManagementComponent_BP_Replenishment) == 0x000001, "Wrong alignment on MagazineManagementComponent_BP_Replenishment");
static_assert(sizeof(MagazineManagementComponent_BP_Replenishment) == 0x000001, "Wrong size on MagazineManagementComponent_BP_Replenishment");
static_assert(offsetof(MagazineManagementComponent_BP_Replenishment, AttackId) == 0x000000, "Member 'MagazineManagementComponent_BP_Replenishment::AttackId' has a wrong offset!");

// Function InGameModule.MagazineManagementComponent.BP_Shoot
// 0x0001 (0x0001 - 0x0000)
struct MagazineManagementComponent_BP_Shoot final
{
public:
	EAttackId                                     AttackId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagazineManagementComponent_BP_Shoot) == 0x000001, "Wrong alignment on MagazineManagementComponent_BP_Shoot");
static_assert(sizeof(MagazineManagementComponent_BP_Shoot) == 0x000001, "Wrong size on MagazineManagementComponent_BP_Shoot");
static_assert(offsetof(MagazineManagementComponent_BP_Shoot, AttackId) == 0x000000, "Member 'MagazineManagementComponent_BP_Shoot::AttackId' has a wrong offset!");

// Function InGameModule.MagazineManagementComponent.BP_Start
// 0x0008 (0x0008 - 0x0000)
struct MagazineManagementComponent_BP_Start final
{
public:
	EAttackId                                     AttackId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Rate;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagazineManagementComponent_BP_Start) == 0x000004, "Wrong alignment on MagazineManagementComponent_BP_Start");
static_assert(sizeof(MagazineManagementComponent_BP_Start) == 0x000008, "Wrong size on MagazineManagementComponent_BP_Start");
static_assert(offsetof(MagazineManagementComponent_BP_Start, AttackId) == 0x000000, "Member 'MagazineManagementComponent_BP_Start::AttackId' has a wrong offset!");
static_assert(offsetof(MagazineManagementComponent_BP_Start, Rate) == 0x000004, "Member 'MagazineManagementComponent_BP_Start::Rate' has a wrong offset!");

// Function InGameModule.MagazineManagementComponent.BP_Stop
// 0x0001 (0x0001 - 0x0000)
struct MagazineManagementComponent_BP_Stop final
{
public:
	EAttackId                                     AttackId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagazineManagementComponent_BP_Stop) == 0x000001, "Wrong alignment on MagazineManagementComponent_BP_Stop");
static_assert(sizeof(MagazineManagementComponent_BP_Stop) == 0x000001, "Wrong size on MagazineManagementComponent_BP_Stop");
static_assert(offsetof(MagazineManagementComponent_BP_Stop, AttackId) == 0x000000, "Member 'MagazineManagementComponent_BP_Stop::AttackId' has a wrong offset!");

// Function InGameModule.MagazineManagementComponent.SetAmmoNum
// 0x0008 (0x0008 - 0x0000)
struct MagazineManagementComponent_SetAmmoNum final
{
public:
	EAttackId                                     SlotId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Ammo;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagazineManagementComponent_SetAmmoNum) == 0x000004, "Wrong alignment on MagazineManagementComponent_SetAmmoNum");
static_assert(sizeof(MagazineManagementComponent_SetAmmoNum) == 0x000008, "Wrong size on MagazineManagementComponent_SetAmmoNum");
static_assert(offsetof(MagazineManagementComponent_SetAmmoNum, SlotId) == 0x000000, "Member 'MagazineManagementComponent_SetAmmoNum::SlotId' has a wrong offset!");
static_assert(offsetof(MagazineManagementComponent_SetAmmoNum, Ammo) == 0x000004, "Member 'MagazineManagementComponent_SetAmmoNum::Ammo' has a wrong offset!");

// Function InGameModule.MapIconsWidget.UpdateViewPlayer
// 0x0008 (0x0008 - 0x0000)
struct MapIconsWidget_UpdateViewPlayer final
{
public:
	class APlayerStateBattle*                     ViewPlayer;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapIconsWidget_UpdateViewPlayer) == 0x000008, "Wrong alignment on MapIconsWidget_UpdateViewPlayer");
static_assert(sizeof(MapIconsWidget_UpdateViewPlayer) == 0x000008, "Wrong size on MapIconsWidget_UpdateViewPlayer");
static_assert(offsetof(MapIconsWidget_UpdateViewPlayer, ViewPlayer) == 0x000000, "Member 'MapIconsWidget_UpdateViewPlayer::ViewPlayer' has a wrong offset!");

// Function InGameModule.MaterialCurveControl.GetBeginCurveTimeRange
// 0x000C (0x000C - 0x0000)
struct MaterialCurveControl_GetBeginCurveTimeRange final
{
public:
	float                                         MinT;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxT;                                              // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaterialCurveControl_GetBeginCurveTimeRange) == 0x000004, "Wrong alignment on MaterialCurveControl_GetBeginCurveTimeRange");
static_assert(sizeof(MaterialCurveControl_GetBeginCurveTimeRange) == 0x00000C, "Wrong size on MaterialCurveControl_GetBeginCurveTimeRange");
static_assert(offsetof(MaterialCurveControl_GetBeginCurveTimeRange, MinT) == 0x000000, "Member 'MaterialCurveControl_GetBeginCurveTimeRange::MinT' has a wrong offset!");
static_assert(offsetof(MaterialCurveControl_GetBeginCurveTimeRange, MaxT) == 0x000004, "Member 'MaterialCurveControl_GetBeginCurveTimeRange::MaxT' has a wrong offset!");
static_assert(offsetof(MaterialCurveControl_GetBeginCurveTimeRange, ReturnValue) == 0x000008, "Member 'MaterialCurveControl_GetBeginCurveTimeRange::ReturnValue' has a wrong offset!");

// Function InGameModule.MaterialCurveControl.GetEndCurveTimeRange
// 0x000C (0x000C - 0x0000)
struct MaterialCurveControl_GetEndCurveTimeRange final
{
public:
	float                                         MinT;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxT;                                              // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaterialCurveControl_GetEndCurveTimeRange) == 0x000004, "Wrong alignment on MaterialCurveControl_GetEndCurveTimeRange");
static_assert(sizeof(MaterialCurveControl_GetEndCurveTimeRange) == 0x00000C, "Wrong size on MaterialCurveControl_GetEndCurveTimeRange");
static_assert(offsetof(MaterialCurveControl_GetEndCurveTimeRange, MinT) == 0x000000, "Member 'MaterialCurveControl_GetEndCurveTimeRange::MinT' has a wrong offset!");
static_assert(offsetof(MaterialCurveControl_GetEndCurveTimeRange, MaxT) == 0x000004, "Member 'MaterialCurveControl_GetEndCurveTimeRange::MaxT' has a wrong offset!");
static_assert(offsetof(MaterialCurveControl_GetEndCurveTimeRange, ReturnValue) == 0x000008, "Member 'MaterialCurveControl_GetEndCurveTimeRange::ReturnValue' has a wrong offset!");

// Function InGameModule.MaterialCurveControl.SetMaterialInstanceDynamic
// 0x0008 (0x0008 - 0x0000)
struct MaterialCurveControl_SetMaterialInstanceDynamic final
{
public:
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialCurveControl_SetMaterialInstanceDynamic) == 0x000008, "Wrong alignment on MaterialCurveControl_SetMaterialInstanceDynamic");
static_assert(sizeof(MaterialCurveControl_SetMaterialInstanceDynamic) == 0x000008, "Wrong size on MaterialCurveControl_SetMaterialInstanceDynamic");
static_assert(offsetof(MaterialCurveControl_SetMaterialInstanceDynamic, Mid) == 0x000000, "Member 'MaterialCurveControl_SetMaterialInstanceDynamic::Mid' has a wrong offset!");

// Function InGameModule.MaterialCurveControl.SetWaitTime
// 0x0004 (0x0004 - 0x0000)
struct MaterialCurveControl_SetWaitTime final
{
public:
	float                                         Wait;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialCurveControl_SetWaitTime) == 0x000004, "Wrong alignment on MaterialCurveControl_SetWaitTime");
static_assert(sizeof(MaterialCurveControl_SetWaitTime) == 0x000004, "Wrong size on MaterialCurveControl_SetWaitTime");
static_assert(offsetof(MaterialCurveControl_SetWaitTime, Wait) == 0x000000, "Member 'MaterialCurveControl_SetWaitTime::Wait' has a wrong offset!");

// Function InGameModule.MaterialCurveControl.IsEnd
// 0x0001 (0x0001 - 0x0000)
struct MaterialCurveControl_IsEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialCurveControl_IsEnd) == 0x000001, "Wrong alignment on MaterialCurveControl_IsEnd");
static_assert(sizeof(MaterialCurveControl_IsEnd) == 0x000001, "Wrong size on MaterialCurveControl_IsEnd");
static_assert(offsetof(MaterialCurveControl_IsEnd, ReturnValue) == 0x000000, "Member 'MaterialCurveControl_IsEnd::ReturnValue' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_ApplyInertia
// 0x000C (0x000C - 0x0000)
struct MovementComponentBattle_BP_ApplyInertia final
{
public:
	float                                         Span;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizonRate;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalRate;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_ApplyInertia) == 0x000004, "Wrong alignment on MovementComponentBattle_BP_ApplyInertia");
static_assert(sizeof(MovementComponentBattle_BP_ApplyInertia) == 0x00000C, "Wrong size on MovementComponentBattle_BP_ApplyInertia");
static_assert(offsetof(MovementComponentBattle_BP_ApplyInertia, Span) == 0x000000, "Member 'MovementComponentBattle_BP_ApplyInertia::Span' has a wrong offset!");
static_assert(offsetof(MovementComponentBattle_BP_ApplyInertia, HorizonRate) == 0x000004, "Member 'MovementComponentBattle_BP_ApplyInertia::HorizonRate' has a wrong offset!");
static_assert(offsetof(MovementComponentBattle_BP_ApplyInertia, VerticalRate) == 0x000008, "Member 'MovementComponentBattle_BP_ApplyInertia::VerticalRate' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_ClearCenterRotation
// 0x0004 (0x0004 - 0x0000)
struct MovementComponentBattle_BP_ClearCenterRotation final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_ClearCenterRotation) == 0x000004, "Wrong alignment on MovementComponentBattle_BP_ClearCenterRotation");
static_assert(sizeof(MovementComponentBattle_BP_ClearCenterRotation) == 0x000004, "Wrong size on MovementComponentBattle_BP_ClearCenterRotation");
static_assert(offsetof(MovementComponentBattle_BP_ClearCenterRotation, Rate) == 0x000000, "Member 'MovementComponentBattle_BP_ClearCenterRotation::Rate' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_EnableGravity
// 0x0001 (0x0001 - 0x0000)
struct MovementComponentBattle_BP_EnableGravity final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_EnableGravity) == 0x000001, "Wrong alignment on MovementComponentBattle_BP_EnableGravity");
static_assert(sizeof(MovementComponentBattle_BP_EnableGravity) == 0x000001, "Wrong size on MovementComponentBattle_BP_EnableGravity");
static_assert(offsetof(MovementComponentBattle_BP_EnableGravity, Flag) == 0x000000, "Member 'MovementComponentBattle_BP_EnableGravity::Flag' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_GetGravitySpeed
// 0x0004 (0x0004 - 0x0000)
struct MovementComponentBattle_BP_GetGravitySpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_GetGravitySpeed) == 0x000004, "Wrong alignment on MovementComponentBattle_BP_GetGravitySpeed");
static_assert(sizeof(MovementComponentBattle_BP_GetGravitySpeed) == 0x000004, "Wrong size on MovementComponentBattle_BP_GetGravitySpeed");
static_assert(offsetof(MovementComponentBattle_BP_GetGravitySpeed, ReturnValue) == 0x000000, "Member 'MovementComponentBattle_BP_GetGravitySpeed::ReturnValue' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_GetGravitySpeedWholeRate
// 0x0004 (0x0004 - 0x0000)
struct MovementComponentBattle_BP_GetGravitySpeedWholeRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_GetGravitySpeedWholeRate) == 0x000004, "Wrong alignment on MovementComponentBattle_BP_GetGravitySpeedWholeRate");
static_assert(sizeof(MovementComponentBattle_BP_GetGravitySpeedWholeRate) == 0x000004, "Wrong size on MovementComponentBattle_BP_GetGravitySpeedWholeRate");
static_assert(offsetof(MovementComponentBattle_BP_GetGravitySpeedWholeRate, ReturnValue) == 0x000000, "Member 'MovementComponentBattle_BP_GetGravitySpeedWholeRate::ReturnValue' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_GetInertiaSpeed
// 0x0004 (0x0004 - 0x0000)
struct MovementComponentBattle_BP_GetInertiaSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_GetInertiaSpeed) == 0x000004, "Wrong alignment on MovementComponentBattle_BP_GetInertiaSpeed");
static_assert(sizeof(MovementComponentBattle_BP_GetInertiaSpeed) == 0x000004, "Wrong size on MovementComponentBattle_BP_GetInertiaSpeed");
static_assert(offsetof(MovementComponentBattle_BP_GetInertiaSpeed, ReturnValue) == 0x000000, "Member 'MovementComponentBattle_BP_GetInertiaSpeed::ReturnValue' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_GetMoveSpeedVirtical
// 0x0004 (0x0004 - 0x0000)
struct MovementComponentBattle_BP_GetMoveSpeedVirtical final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_GetMoveSpeedVirtical) == 0x000004, "Wrong alignment on MovementComponentBattle_BP_GetMoveSpeedVirtical");
static_assert(sizeof(MovementComponentBattle_BP_GetMoveSpeedVirtical) == 0x000004, "Wrong size on MovementComponentBattle_BP_GetMoveSpeedVirtical");
static_assert(offsetof(MovementComponentBattle_BP_GetMoveSpeedVirtical, ReturnValue) == 0x000000, "Member 'MovementComponentBattle_BP_GetMoveSpeedVirtical::ReturnValue' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_GetSpeed
// 0x0004 (0x0004 - 0x0000)
struct MovementComponentBattle_BP_GetSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_GetSpeed) == 0x000004, "Wrong alignment on MovementComponentBattle_BP_GetSpeed");
static_assert(sizeof(MovementComponentBattle_BP_GetSpeed) == 0x000004, "Wrong size on MovementComponentBattle_BP_GetSpeed");
static_assert(offsetof(MovementComponentBattle_BP_GetSpeed, ReturnValue) == 0x000000, "Member 'MovementComponentBattle_BP_GetSpeed::ReturnValue' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_InheritSpeed
// 0x0005 (0x0005 - 0x0000)
struct MovementComponentBattle_BP_InheritSpeed final
{
public:
	bool                                          bSpeed;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVertical;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGravity;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInertia;                                          // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSlide;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_InheritSpeed) == 0x000001, "Wrong alignment on MovementComponentBattle_BP_InheritSpeed");
static_assert(sizeof(MovementComponentBattle_BP_InheritSpeed) == 0x000005, "Wrong size on MovementComponentBattle_BP_InheritSpeed");
static_assert(offsetof(MovementComponentBattle_BP_InheritSpeed, bSpeed) == 0x000000, "Member 'MovementComponentBattle_BP_InheritSpeed::bSpeed' has a wrong offset!");
static_assert(offsetof(MovementComponentBattle_BP_InheritSpeed, bVertical) == 0x000001, "Member 'MovementComponentBattle_BP_InheritSpeed::bVertical' has a wrong offset!");
static_assert(offsetof(MovementComponentBattle_BP_InheritSpeed, bGravity) == 0x000002, "Member 'MovementComponentBattle_BP_InheritSpeed::bGravity' has a wrong offset!");
static_assert(offsetof(MovementComponentBattle_BP_InheritSpeed, bInertia) == 0x000003, "Member 'MovementComponentBattle_BP_InheritSpeed::bInertia' has a wrong offset!");
static_assert(offsetof(MovementComponentBattle_BP_InheritSpeed, bSlide) == 0x000004, "Member 'MovementComponentBattle_BP_InheritSpeed::bSlide' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_IsSpeedAcceleration
// 0x0001 (0x0001 - 0x0000)
struct MovementComponentBattle_BP_IsSpeedAcceleration final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_IsSpeedAcceleration) == 0x000001, "Wrong alignment on MovementComponentBattle_BP_IsSpeedAcceleration");
static_assert(sizeof(MovementComponentBattle_BP_IsSpeedAcceleration) == 0x000001, "Wrong size on MovementComponentBattle_BP_IsSpeedAcceleration");
static_assert(offsetof(MovementComponentBattle_BP_IsSpeedAcceleration, ReturnValue) == 0x000000, "Member 'MovementComponentBattle_BP_IsSpeedAcceleration::ReturnValue' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_RequestTeleportation
// 0x001C (0x001C - 0x0000)
struct MovementComponentBattle_BP_RequestTeleportation final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TargetRotation;                                    // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsIgnoreObstacle;                                 // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovementComponentBattle_BP_RequestTeleportation) == 0x000004, "Wrong alignment on MovementComponentBattle_BP_RequestTeleportation");
static_assert(sizeof(MovementComponentBattle_BP_RequestTeleportation) == 0x00001C, "Wrong size on MovementComponentBattle_BP_RequestTeleportation");
static_assert(offsetof(MovementComponentBattle_BP_RequestTeleportation, TargetLocation) == 0x000000, "Member 'MovementComponentBattle_BP_RequestTeleportation::TargetLocation' has a wrong offset!");
static_assert(offsetof(MovementComponentBattle_BP_RequestTeleportation, TargetRotation) == 0x00000C, "Member 'MovementComponentBattle_BP_RequestTeleportation::TargetRotation' has a wrong offset!");
static_assert(offsetof(MovementComponentBattle_BP_RequestTeleportation, bIsIgnoreObstacle) == 0x000018, "Member 'MovementComponentBattle_BP_RequestTeleportation::bIsIgnoreObstacle' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_ResetVerticalDirection
// 0x0004 (0x0004 - 0x0000)
struct MovementComponentBattle_BP_ResetVerticalDirection final
{
public:
	float                                         TurnTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_ResetVerticalDirection) == 0x000004, "Wrong alignment on MovementComponentBattle_BP_ResetVerticalDirection");
static_assert(sizeof(MovementComponentBattle_BP_ResetVerticalDirection) == 0x000004, "Wrong size on MovementComponentBattle_BP_ResetVerticalDirection");
static_assert(offsetof(MovementComponentBattle_BP_ResetVerticalDirection, TurnTime) == 0x000000, "Member 'MovementComponentBattle_BP_ResetVerticalDirection::TurnTime' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_SetGravityRate
// 0x0004 (0x0004 - 0x0000)
struct MovementComponentBattle_BP_SetGravityRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_SetGravityRate) == 0x000004, "Wrong alignment on MovementComponentBattle_BP_SetGravityRate");
static_assert(sizeof(MovementComponentBattle_BP_SetGravityRate) == 0x000004, "Wrong size on MovementComponentBattle_BP_SetGravityRate");
static_assert(offsetof(MovementComponentBattle_BP_SetGravityRate, Rate) == 0x000000, "Member 'MovementComponentBattle_BP_SetGravityRate::Rate' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_SetGravitySpeed
// 0x0004 (0x0004 - 0x0000)
struct MovementComponentBattle_BP_SetGravitySpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_SetGravitySpeed) == 0x000004, "Wrong alignment on MovementComponentBattle_BP_SetGravitySpeed");
static_assert(sizeof(MovementComponentBattle_BP_SetGravitySpeed) == 0x000004, "Wrong size on MovementComponentBattle_BP_SetGravitySpeed");
static_assert(offsetof(MovementComponentBattle_BP_SetGravitySpeed, Speed) == 0x000000, "Member 'MovementComponentBattle_BP_SetGravitySpeed::Speed' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_SetInertiaSpan
// 0x0004 (0x0004 - 0x0000)
struct MovementComponentBattle_BP_SetInertiaSpan final
{
public:
	float                                         Span;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_SetInertiaSpan) == 0x000004, "Wrong alignment on MovementComponentBattle_BP_SetInertiaSpan");
static_assert(sizeof(MovementComponentBattle_BP_SetInertiaSpan) == 0x000004, "Wrong size on MovementComponentBattle_BP_SetInertiaSpan");
static_assert(offsetof(MovementComponentBattle_BP_SetInertiaSpan, Span) == 0x000000, "Member 'MovementComponentBattle_BP_SetInertiaSpan::Span' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_SetMoveDirection
// 0x000C (0x000C - 0x0000)
struct MovementComponentBattle_BP_SetMoveDirection final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_SetMoveDirection) == 0x000004, "Wrong alignment on MovementComponentBattle_BP_SetMoveDirection");
static_assert(sizeof(MovementComponentBattle_BP_SetMoveDirection) == 0x00000C, "Wrong size on MovementComponentBattle_BP_SetMoveDirection");
static_assert(offsetof(MovementComponentBattle_BP_SetMoveDirection, Direction) == 0x000000, "Member 'MovementComponentBattle_BP_SetMoveDirection::Direction' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_SetRootMotionScale
// 0x0004 (0x0004 - 0x0000)
struct MovementComponentBattle_BP_SetRootMotionScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_SetRootMotionScale) == 0x000004, "Wrong alignment on MovementComponentBattle_BP_SetRootMotionScale");
static_assert(sizeof(MovementComponentBattle_BP_SetRootMotionScale) == 0x000004, "Wrong size on MovementComponentBattle_BP_SetRootMotionScale");
static_assert(offsetof(MovementComponentBattle_BP_SetRootMotionScale, Scale) == 0x000000, "Member 'MovementComponentBattle_BP_SetRootMotionScale::Scale' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_SetSlideAdjust
// 0x0010 (0x0010 - 0x0000)
struct MovementComponentBattle_BP_SetSlideAdjust final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_SetSlideAdjust) == 0x000004, "Wrong alignment on MovementComponentBattle_BP_SetSlideAdjust");
static_assert(sizeof(MovementComponentBattle_BP_SetSlideAdjust) == 0x000010, "Wrong size on MovementComponentBattle_BP_SetSlideAdjust");
static_assert(offsetof(MovementComponentBattle_BP_SetSlideAdjust, Direction) == 0x000000, "Member 'MovementComponentBattle_BP_SetSlideAdjust::Direction' has a wrong offset!");
static_assert(offsetof(MovementComponentBattle_BP_SetSlideAdjust, Speed) == 0x00000C, "Member 'MovementComponentBattle_BP_SetSlideAdjust::Speed' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_SetSpeed
// 0x000C (0x000C - 0x0000)
struct MovementComponentBattle_BP_SetSpeed final
{
public:
	float                                         Initial;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Accel;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Limit;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_SetSpeed) == 0x000004, "Wrong alignment on MovementComponentBattle_BP_SetSpeed");
static_assert(sizeof(MovementComponentBattle_BP_SetSpeed) == 0x00000C, "Wrong size on MovementComponentBattle_BP_SetSpeed");
static_assert(offsetof(MovementComponentBattle_BP_SetSpeed, Initial) == 0x000000, "Member 'MovementComponentBattle_BP_SetSpeed::Initial' has a wrong offset!");
static_assert(offsetof(MovementComponentBattle_BP_SetSpeed, Accel) == 0x000004, "Member 'MovementComponentBattle_BP_SetSpeed::Accel' has a wrong offset!");
static_assert(offsetof(MovementComponentBattle_BP_SetSpeed, Limit) == 0x000008, "Member 'MovementComponentBattle_BP_SetSpeed::Limit' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_SetSpeedDecreaseRate
// 0x0004 (0x0004 - 0x0000)
struct MovementComponentBattle_BP_SetSpeedDecreaseRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_SetSpeedDecreaseRate) == 0x000004, "Wrong alignment on MovementComponentBattle_BP_SetSpeedDecreaseRate");
static_assert(sizeof(MovementComponentBattle_BP_SetSpeedDecreaseRate) == 0x000004, "Wrong size on MovementComponentBattle_BP_SetSpeedDecreaseRate");
static_assert(offsetof(MovementComponentBattle_BP_SetSpeedDecreaseRate, Rate) == 0x000000, "Member 'MovementComponentBattle_BP_SetSpeedDecreaseRate::Rate' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_SetSpeedEasy
// 0x000C (0x000C - 0x0000)
struct MovementComponentBattle_BP_SetSpeedEasy final
{
public:
	float                                         Initial;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Last;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Span;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_SetSpeedEasy) == 0x000004, "Wrong alignment on MovementComponentBattle_BP_SetSpeedEasy");
static_assert(sizeof(MovementComponentBattle_BP_SetSpeedEasy) == 0x00000C, "Wrong size on MovementComponentBattle_BP_SetSpeedEasy");
static_assert(offsetof(MovementComponentBattle_BP_SetSpeedEasy, Initial) == 0x000000, "Member 'MovementComponentBattle_BP_SetSpeedEasy::Initial' has a wrong offset!");
static_assert(offsetof(MovementComponentBattle_BP_SetSpeedEasy, Last) == 0x000004, "Member 'MovementComponentBattle_BP_SetSpeedEasy::Last' has a wrong offset!");
static_assert(offsetof(MovementComponentBattle_BP_SetSpeedEasy, Span) == 0x000008, "Member 'MovementComponentBattle_BP_SetSpeedEasy::Span' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_SetSpeedInertia
// 0x0018 (0x0018 - 0x0000)
struct MovementComponentBattle_BP_SetSpeedInertia final
{
public:
	float                                         Initial;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Last;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Span;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_SetSpeedInertia) == 0x000004, "Wrong alignment on MovementComponentBattle_BP_SetSpeedInertia");
static_assert(sizeof(MovementComponentBattle_BP_SetSpeedInertia) == 0x000018, "Wrong size on MovementComponentBattle_BP_SetSpeedInertia");
static_assert(offsetof(MovementComponentBattle_BP_SetSpeedInertia, Initial) == 0x000000, "Member 'MovementComponentBattle_BP_SetSpeedInertia::Initial' has a wrong offset!");
static_assert(offsetof(MovementComponentBattle_BP_SetSpeedInertia, Last) == 0x000004, "Member 'MovementComponentBattle_BP_SetSpeedInertia::Last' has a wrong offset!");
static_assert(offsetof(MovementComponentBattle_BP_SetSpeedInertia, Span) == 0x000008, "Member 'MovementComponentBattle_BP_SetSpeedInertia::Span' has a wrong offset!");
static_assert(offsetof(MovementComponentBattle_BP_SetSpeedInertia, Direction) == 0x00000C, "Member 'MovementComponentBattle_BP_SetSpeedInertia::Direction' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_SetSpeedJump
// 0x0008 (0x0008 - 0x0000)
struct MovementComponentBattle_BP_SetSpeedJump final
{
public:
	float                                         Height;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Span;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_SetSpeedJump) == 0x000004, "Wrong alignment on MovementComponentBattle_BP_SetSpeedJump");
static_assert(sizeof(MovementComponentBattle_BP_SetSpeedJump) == 0x000008, "Wrong size on MovementComponentBattle_BP_SetSpeedJump");
static_assert(offsetof(MovementComponentBattle_BP_SetSpeedJump, Height) == 0x000000, "Member 'MovementComponentBattle_BP_SetSpeedJump::Height' has a wrong offset!");
static_assert(offsetof(MovementComponentBattle_BP_SetSpeedJump, Span) == 0x000004, "Member 'MovementComponentBattle_BP_SetSpeedJump::Span' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_SetSpeedRate
// 0x0004 (0x0004 - 0x0000)
struct MovementComponentBattle_BP_SetSpeedRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_SetSpeedRate) == 0x000004, "Wrong alignment on MovementComponentBattle_BP_SetSpeedRate");
static_assert(sizeof(MovementComponentBattle_BP_SetSpeedRate) == 0x000004, "Wrong size on MovementComponentBattle_BP_SetSpeedRate");
static_assert(offsetof(MovementComponentBattle_BP_SetSpeedRate, Rate) == 0x000000, "Member 'MovementComponentBattle_BP_SetSpeedRate::Rate' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_SetSpeedVirtical
// 0x000C (0x000C - 0x0000)
struct MovementComponentBattle_BP_SetSpeedVirtical final
{
public:
	float                                         Initial;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Accel;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Limit;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_SetSpeedVirtical) == 0x000004, "Wrong alignment on MovementComponentBattle_BP_SetSpeedVirtical");
static_assert(sizeof(MovementComponentBattle_BP_SetSpeedVirtical) == 0x00000C, "Wrong size on MovementComponentBattle_BP_SetSpeedVirtical");
static_assert(offsetof(MovementComponentBattle_BP_SetSpeedVirtical, Initial) == 0x000000, "Member 'MovementComponentBattle_BP_SetSpeedVirtical::Initial' has a wrong offset!");
static_assert(offsetof(MovementComponentBattle_BP_SetSpeedVirtical, Accel) == 0x000004, "Member 'MovementComponentBattle_BP_SetSpeedVirtical::Accel' has a wrong offset!");
static_assert(offsetof(MovementComponentBattle_BP_SetSpeedVirtical, Limit) == 0x000008, "Member 'MovementComponentBattle_BP_SetSpeedVirtical::Limit' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_SetupTurnToDirection
// 0x001C (0x001C - 0x0000)
struct MovementComponentBattle_BP_SetupTurnToDirection final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnTime;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   EasingType;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Steps;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_SetupTurnToDirection) == 0x000004, "Wrong alignment on MovementComponentBattle_BP_SetupTurnToDirection");
static_assert(sizeof(MovementComponentBattle_BP_SetupTurnToDirection) == 0x00001C, "Wrong size on MovementComponentBattle_BP_SetupTurnToDirection");
static_assert(offsetof(MovementComponentBattle_BP_SetupTurnToDirection, Direction) == 0x000000, "Member 'MovementComponentBattle_BP_SetupTurnToDirection::Direction' has a wrong offset!");
static_assert(offsetof(MovementComponentBattle_BP_SetupTurnToDirection, TurnTime) == 0x00000C, "Member 'MovementComponentBattle_BP_SetupTurnToDirection::TurnTime' has a wrong offset!");
static_assert(offsetof(MovementComponentBattle_BP_SetupTurnToDirection, EasingType) == 0x000010, "Member 'MovementComponentBattle_BP_SetupTurnToDirection::EasingType' has a wrong offset!");
static_assert(offsetof(MovementComponentBattle_BP_SetupTurnToDirection, BlendExp) == 0x000014, "Member 'MovementComponentBattle_BP_SetupTurnToDirection::BlendExp' has a wrong offset!");
static_assert(offsetof(MovementComponentBattle_BP_SetupTurnToDirection, Steps) == 0x000018, "Member 'MovementComponentBattle_BP_SetupTurnToDirection::Steps' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_SetupVerticalDirection
// 0x001C (0x001C - 0x0000)
struct MovementComponentBattle_BP_SetupVerticalDirection final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnTime;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RotationAxis;                                      // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_SetupVerticalDirection) == 0x000004, "Wrong alignment on MovementComponentBattle_BP_SetupVerticalDirection");
static_assert(sizeof(MovementComponentBattle_BP_SetupVerticalDirection) == 0x00001C, "Wrong size on MovementComponentBattle_BP_SetupVerticalDirection");
static_assert(offsetof(MovementComponentBattle_BP_SetupVerticalDirection, Direction) == 0x000000, "Member 'MovementComponentBattle_BP_SetupVerticalDirection::Direction' has a wrong offset!");
static_assert(offsetof(MovementComponentBattle_BP_SetupVerticalDirection, TurnTime) == 0x00000C, "Member 'MovementComponentBattle_BP_SetupVerticalDirection::TurnTime' has a wrong offset!");
static_assert(offsetof(MovementComponentBattle_BP_SetupVerticalDirection, RotationAxis) == 0x000010, "Member 'MovementComponentBattle_BP_SetupVerticalDirection::RotationAxis' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_UpdateTurnDirection
// 0x000C (0x000C - 0x0000)
struct MovementComponentBattle_BP_UpdateTurnDirection final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_UpdateTurnDirection) == 0x000004, "Wrong alignment on MovementComponentBattle_BP_UpdateTurnDirection");
static_assert(sizeof(MovementComponentBattle_BP_UpdateTurnDirection) == 0x00000C, "Wrong size on MovementComponentBattle_BP_UpdateTurnDirection");
static_assert(offsetof(MovementComponentBattle_BP_UpdateTurnDirection, Direction) == 0x000000, "Member 'MovementComponentBattle_BP_UpdateTurnDirection::Direction' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_UpdateVerticalDirection
// 0x0018 (0x0018 - 0x0000)
struct MovementComponentBattle_BP_UpdateVerticalDirection final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RotationAxis;                                      // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_UpdateVerticalDirection) == 0x000004, "Wrong alignment on MovementComponentBattle_BP_UpdateVerticalDirection");
static_assert(sizeof(MovementComponentBattle_BP_UpdateVerticalDirection) == 0x000018, "Wrong size on MovementComponentBattle_BP_UpdateVerticalDirection");
static_assert(offsetof(MovementComponentBattle_BP_UpdateVerticalDirection, Direction) == 0x000000, "Member 'MovementComponentBattle_BP_UpdateVerticalDirection::Direction' has a wrong offset!");
static_assert(offsetof(MovementComponentBattle_BP_UpdateVerticalDirection, RotationAxis) == 0x00000C, "Member 'MovementComponentBattle_BP_UpdateVerticalDirection::RotationAxis' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BreakBgProp_RPC_ToServer
// 0x0018 (0x0018 - 0x0000)
struct MovementComponentBattle_BreakBgProp_RPC_ToServer final
{
public:
	class ABgProp*                                breakActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 DamageLocation;                                    // 0x0008(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovementComponentBattle_BreakBgProp_RPC_ToServer) == 0x000008, "Wrong alignment on MovementComponentBattle_BreakBgProp_RPC_ToServer");
static_assert(sizeof(MovementComponentBattle_BreakBgProp_RPC_ToServer) == 0x000018, "Wrong size on MovementComponentBattle_BreakBgProp_RPC_ToServer");
static_assert(offsetof(MovementComponentBattle_BreakBgProp_RPC_ToServer, breakActor) == 0x000000, "Member 'MovementComponentBattle_BreakBgProp_RPC_ToServer::breakActor' has a wrong offset!");
static_assert(offsetof(MovementComponentBattle_BreakBgProp_RPC_ToServer, DamageLocation) == 0x000008, "Member 'MovementComponentBattle_BreakBgProp_RPC_ToServer::DamageLocation' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.RequestTeleportation_ToClient
// 0x0020 (0x0020 - 0x0000)
struct MovementComponentBattle_RequestTeleportation_ToClient final
{
public:
	struct FVector_NetQuantize                    TargetLocation;                                    // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  TargetRotation;                                    // 0x0010(0x0010)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_RequestTeleportation_ToClient) == 0x000010, "Wrong alignment on MovementComponentBattle_RequestTeleportation_ToClient");
static_assert(sizeof(MovementComponentBattle_RequestTeleportation_ToClient) == 0x000020, "Wrong size on MovementComponentBattle_RequestTeleportation_ToClient");
static_assert(offsetof(MovementComponentBattle_RequestTeleportation_ToClient, TargetLocation) == 0x000000, "Member 'MovementComponentBattle_RequestTeleportation_ToClient::TargetLocation' has a wrong offset!");
static_assert(offsetof(MovementComponentBattle_RequestTeleportation_ToClient, TargetRotation) == 0x000010, "Member 'MovementComponentBattle_RequestTeleportation_ToClient::TargetRotation' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.RequestTeleportation_ToServer
// 0x0020 (0x0020 - 0x0000)
struct MovementComponentBattle_RequestTeleportation_ToServer final
{
public:
	struct FVector_NetQuantize                    TargetLocation;                                    // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  TargetRotation;                                    // 0x0010(0x0010)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_RequestTeleportation_ToServer) == 0x000010, "Wrong alignment on MovementComponentBattle_RequestTeleportation_ToServer");
static_assert(sizeof(MovementComponentBattle_RequestTeleportation_ToServer) == 0x000020, "Wrong size on MovementComponentBattle_RequestTeleportation_ToServer");
static_assert(offsetof(MovementComponentBattle_RequestTeleportation_ToServer, TargetLocation) == 0x000000, "Member 'MovementComponentBattle_RequestTeleportation_ToServer::TargetLocation' has a wrong offset!");
static_assert(offsetof(MovementComponentBattle_RequestTeleportation_ToServer, TargetRotation) == 0x000010, "Member 'MovementComponentBattle_RequestTeleportation_ToServer::TargetRotation' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.ServerMove
// 0x0034 (0x0034 - 0x0000)
struct MovementComponentBattle_ServerMove final
{
public:
	struct FServerMoveArgument                    Arg;                                               // 0x0000(0x0034)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_ServerMove) == 0x000004, "Wrong alignment on MovementComponentBattle_ServerMove");
static_assert(sizeof(MovementComponentBattle_ServerMove) == 0x000034, "Wrong size on MovementComponentBattle_ServerMove");
static_assert(offsetof(MovementComponentBattle_ServerMove, Arg) == 0x000000, "Member 'MovementComponentBattle_ServerMove::Arg' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_CalculatePenaltyTimeForLand
// 0x0004 (0x0004 - 0x0000)
struct MovementComponentBattle_BP_CalculatePenaltyTimeForLand final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_CalculatePenaltyTimeForLand) == 0x000004, "Wrong alignment on MovementComponentBattle_BP_CalculatePenaltyTimeForLand");
static_assert(sizeof(MovementComponentBattle_BP_CalculatePenaltyTimeForLand) == 0x000004, "Wrong size on MovementComponentBattle_BP_CalculatePenaltyTimeForLand");
static_assert(offsetof(MovementComponentBattle_BP_CalculatePenaltyTimeForLand, ReturnValue) == 0x000000, "Member 'MovementComponentBattle_BP_CalculatePenaltyTimeForLand::ReturnValue' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_GetCurrentGroundNormal
// 0x000C (0x000C - 0x0000)
struct MovementComponentBattle_BP_GetCurrentGroundNormal final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_GetCurrentGroundNormal) == 0x000004, "Wrong alignment on MovementComponentBattle_BP_GetCurrentGroundNormal");
static_assert(sizeof(MovementComponentBattle_BP_GetCurrentGroundNormal) == 0x00000C, "Wrong size on MovementComponentBattle_BP_GetCurrentGroundNormal");
static_assert(offsetof(MovementComponentBattle_BP_GetCurrentGroundNormal, ReturnValue) == 0x000000, "Member 'MovementComponentBattle_BP_GetCurrentGroundNormal::ReturnValue' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_GetCurrentWallImpactNormal
// 0x000C (0x000C - 0x0000)
struct MovementComponentBattle_BP_GetCurrentWallImpactNormal final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_GetCurrentWallImpactNormal) == 0x000004, "Wrong alignment on MovementComponentBattle_BP_GetCurrentWallImpactNormal");
static_assert(sizeof(MovementComponentBattle_BP_GetCurrentWallImpactNormal) == 0x00000C, "Wrong size on MovementComponentBattle_BP_GetCurrentWallImpactNormal");
static_assert(offsetof(MovementComponentBattle_BP_GetCurrentWallImpactNormal, ReturnValue) == 0x000000, "Member 'MovementComponentBattle_BP_GetCurrentWallImpactNormal::ReturnValue' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_GetCurrentWallNormal
// 0x000C (0x000C - 0x0000)
struct MovementComponentBattle_BP_GetCurrentWallNormal final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_GetCurrentWallNormal) == 0x000004, "Wrong alignment on MovementComponentBattle_BP_GetCurrentWallNormal");
static_assert(sizeof(MovementComponentBattle_BP_GetCurrentWallNormal) == 0x00000C, "Wrong size on MovementComponentBattle_BP_GetCurrentWallNormal");
static_assert(offsetof(MovementComponentBattle_BP_GetCurrentWallNormal, ReturnValue) == 0x000000, "Member 'MovementComponentBattle_BP_GetCurrentWallNormal::ReturnValue' has a wrong offset!");

// Function InGameModule.MovementComponentBattle.BP_GetCurrentWallUp
// 0x000C (0x000C - 0x0000)
struct MovementComponentBattle_BP_GetCurrentWallUp final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementComponentBattle_BP_GetCurrentWallUp) == 0x000004, "Wrong alignment on MovementComponentBattle_BP_GetCurrentWallUp");
static_assert(sizeof(MovementComponentBattle_BP_GetCurrentWallUp) == 0x00000C, "Wrong size on MovementComponentBattle_BP_GetCurrentWallUp");
static_assert(offsetof(MovementComponentBattle_BP_GetCurrentWallUp, ReturnValue) == 0x000000, "Member 'MovementComponentBattle_BP_GetCurrentWallUp::ReturnValue' has a wrong offset!");

// Function InGameModule.MultiTraceComponent.Add
// 0x0008 (0x0008 - 0x0000)
struct MultiTraceComponent_Add final
{
public:
	class UPrimitiveComponent*                    Prim;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MultiTraceComponent_Add) == 0x000008, "Wrong alignment on MultiTraceComponent_Add");
static_assert(sizeof(MultiTraceComponent_Add) == 0x000008, "Wrong size on MultiTraceComponent_Add");
static_assert(offsetof(MultiTraceComponent_Add, Prim) == 0x000000, "Member 'MultiTraceComponent_Add::Prim' has a wrong offset!");

// Function InGameModule.NPCManagerComponent.OnDestroyed
// 0x0008 (0x0008 - 0x0000)
struct NPCManagerComponent_OnDestroyed final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManagerComponent_OnDestroyed) == 0x000008, "Wrong alignment on NPCManagerComponent_OnDestroyed");
static_assert(sizeof(NPCManagerComponent_OnDestroyed) == 0x000008, "Wrong size on NPCManagerComponent_OnDestroyed");
static_assert(offsetof(NPCManagerComponent_OnDestroyed, Actor) == 0x000000, "Member 'NPCManagerComponent_OnDestroyed::Actor' has a wrong offset!");

// Function InGameModule.NPCManagerComponent.RegisterNpcCharacter
// 0x0008 (0x0008 - 0x0000)
struct NPCManagerComponent_RegisterNpcCharacter final
{
public:
	class ANPCCitizen*                            Npcs;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManagerComponent_RegisterNpcCharacter) == 0x000008, "Wrong alignment on NPCManagerComponent_RegisterNpcCharacter");
static_assert(sizeof(NPCManagerComponent_RegisterNpcCharacter) == 0x000008, "Wrong size on NPCManagerComponent_RegisterNpcCharacter");
static_assert(offsetof(NPCManagerComponent_RegisterNpcCharacter, Npcs) == 0x000000, "Member 'NPCManagerComponent_RegisterNpcCharacter::Npcs' has a wrong offset!");

// Function InGameModule.NPCManagerComponent.Unregister
// 0x0008 (0x0008 - 0x0000)
struct NPCManagerComponent_Unregister final
{
public:
	class ANPCCitizen*                            NPC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManagerComponent_Unregister) == 0x000008, "Wrong alignment on NPCManagerComponent_Unregister");
static_assert(sizeof(NPCManagerComponent_Unregister) == 0x000008, "Wrong size on NPCManagerComponent_Unregister");
static_assert(offsetof(NPCManagerComponent_Unregister, NPC) == 0x000000, "Member 'NPCManagerComponent_Unregister::NPC' has a wrong offset!");

// Function InGameModule.NPCManagerComponent.GetCurrentNPCsNum
// 0x0004 (0x0004 - 0x0000)
struct NPCManagerComponent_GetCurrentNPCsNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NPCManagerComponent_GetCurrentNPCsNum) == 0x000004, "Wrong alignment on NPCManagerComponent_GetCurrentNPCsNum");
static_assert(sizeof(NPCManagerComponent_GetCurrentNPCsNum) == 0x000004, "Wrong size on NPCManagerComponent_GetCurrentNPCsNum");
static_assert(offsetof(NPCManagerComponent_GetCurrentNPCsNum, ReturnValue) == 0x000000, "Member 'NPCManagerComponent_GetCurrentNPCsNum::ReturnValue' has a wrong offset!");

// Function InGameModule.NumberOnImageDrawPrimitive.SetBaseImageTintColor
// 0x0028 (0x0028 - 0x0000)
struct NumberOnImageDrawPrimitive_SetBaseImageTintColor final
{
public:
	struct FSlateColor                            InTintColor;                                       // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NumberOnImageDrawPrimitive_SetBaseImageTintColor) == 0x000008, "Wrong alignment on NumberOnImageDrawPrimitive_SetBaseImageTintColor");
static_assert(sizeof(NumberOnImageDrawPrimitive_SetBaseImageTintColor) == 0x000028, "Wrong size on NumberOnImageDrawPrimitive_SetBaseImageTintColor");
static_assert(offsetof(NumberOnImageDrawPrimitive_SetBaseImageTintColor, InTintColor) == 0x000000, "Member 'NumberOnImageDrawPrimitive_SetBaseImageTintColor::InTintColor' has a wrong offset!");

// Function InGameModule.NumberOnImageDrawPrimitive.SetNumber
// 0x0004 (0x0004 - 0x0000)
struct NumberOnImageDrawPrimitive_SetNumber final
{
public:
	int32                                         InInt;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NumberOnImageDrawPrimitive_SetNumber) == 0x000004, "Wrong alignment on NumberOnImageDrawPrimitive_SetNumber");
static_assert(sizeof(NumberOnImageDrawPrimitive_SetNumber) == 0x000004, "Wrong size on NumberOnImageDrawPrimitive_SetNumber");
static_assert(offsetof(NumberOnImageDrawPrimitive_SetNumber, InInt) == 0x000000, "Member 'NumberOnImageDrawPrimitive_SetNumber::InInt' has a wrong offset!");

// Function InGameModule.NumberOnImageDrawPrimitive.SetNumberFontColor
// 0x0028 (0x0028 - 0x0000)
struct NumberOnImageDrawPrimitive_SetNumberFontColor final
{
public:
	struct FSlateColor                            InFontColor;                                       // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NumberOnImageDrawPrimitive_SetNumberFontColor) == 0x000008, "Wrong alignment on NumberOnImageDrawPrimitive_SetNumberFontColor");
static_assert(sizeof(NumberOnImageDrawPrimitive_SetNumberFontColor) == 0x000028, "Wrong size on NumberOnImageDrawPrimitive_SetNumberFontColor");
static_assert(offsetof(NumberOnImageDrawPrimitive_SetNumberFontColor, InFontColor) == 0x000000, "Member 'NumberOnImageDrawPrimitive_SetNumberFontColor::InFontColor' has a wrong offset!");

// Function InGameModule.PinnedActorComponent.OnPinnedActorDeactivated
// 0x0008 (0x0008 - 0x0000)
struct PinnedActorComponent_OnPinnedActorDeactivated final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PinnedActorComponent_OnPinnedActorDeactivated) == 0x000008, "Wrong alignment on PinnedActorComponent_OnPinnedActorDeactivated");
static_assert(sizeof(PinnedActorComponent_OnPinnedActorDeactivated) == 0x000008, "Wrong size on PinnedActorComponent_OnPinnedActorDeactivated");
static_assert(offsetof(PinnedActorComponent_OnPinnedActorDeactivated, DestroyedActor) == 0x000000, "Member 'PinnedActorComponent_OnPinnedActorDeactivated::DestroyedActor' has a wrong offset!");

// Function InGameModule.PinnedActorInterface.GetPinnedActorInfo
// 0x0010 (0x0010 - 0x0000)
struct PinnedActorInterface_GetPinnedActorInfo final
{
public:
	struct FPinnedActorInfo                       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PinnedActorInterface_GetPinnedActorInfo) == 0x000008, "Wrong alignment on PinnedActorInterface_GetPinnedActorInfo");
static_assert(sizeof(PinnedActorInterface_GetPinnedActorInfo) == 0x000010, "Wrong size on PinnedActorInterface_GetPinnedActorInfo");
static_assert(offsetof(PinnedActorInterface_GetPinnedActorInfo, ReturnValue) == 0x000000, "Member 'PinnedActorInterface_GetPinnedActorInfo::ReturnValue' has a wrong offset!");

// Function InGameModule.PinWidget.RemoveThisWidget
// 0x0008 (0x0008 - 0x0000)
struct PinWidget_RemoveThisWidget final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PinWidget_RemoveThisWidget) == 0x000008, "Wrong alignment on PinWidget_RemoveThisWidget");
static_assert(sizeof(PinWidget_RemoveThisWidget) == 0x000008, "Wrong size on PinWidget_RemoveThisWidget");
static_assert(offsetof(PinWidget_RemoveThisWidget, DestroyedActor) == 0x000000, "Member 'PinWidget_RemoveThisWidget::DestroyedActor' has a wrong offset!");

// Function InGameModule.PinWidgetInterface.ChangePinArrowDirection
// 0x0001 (0x0001 - 0x0000)
struct PinWidgetInterface_ChangePinArrowDirection final
{
public:
	EPinArrowDirection                            NewArrowDirection;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PinWidgetInterface_ChangePinArrowDirection) == 0x000001, "Wrong alignment on PinWidgetInterface_ChangePinArrowDirection");
static_assert(sizeof(PinWidgetInterface_ChangePinArrowDirection) == 0x000001, "Wrong size on PinWidgetInterface_ChangePinArrowDirection");
static_assert(offsetof(PinWidgetInterface_ChangePinArrowDirection, NewArrowDirection) == 0x000000, "Member 'PinWidgetInterface_ChangePinArrowDirection::NewArrowDirection' has a wrong offset!");

// Function InGameModule.PlayerAbilityWidget.PlayerChangeEvent
// 0x0008 (0x0008 - 0x0000)
struct PlayerAbilityWidget_PlayerChangeEvent final
{
public:
	const class APlayerStateBattle*               PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerAbilityWidget_PlayerChangeEvent) == 0x000008, "Wrong alignment on PlayerAbilityWidget_PlayerChangeEvent");
static_assert(sizeof(PlayerAbilityWidget_PlayerChangeEvent) == 0x000008, "Wrong size on PlayerAbilityWidget_PlayerChangeEvent");
static_assert(offsetof(PlayerAbilityWidget_PlayerChangeEvent, PlayerState) == 0x000000, "Member 'PlayerAbilityWidget_PlayerChangeEvent::PlayerState' has a wrong offset!");

// Function InGameModule.PlayerBuffWidget.OnUpStart
// 0x0004 (0x0004 - 0x0000)
struct PlayerBuffWidget_OnUpStart final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerBuffWidget_OnUpStart) == 0x000004, "Wrong alignment on PlayerBuffWidget_OnUpStart");
static_assert(sizeof(PlayerBuffWidget_OnUpStart) == 0x000004, "Wrong size on PlayerBuffWidget_OnUpStart");
static_assert(offsetof(PlayerBuffWidget_OnUpStart, Time) == 0x000000, "Member 'PlayerBuffWidget_OnUpStart::Time' has a wrong offset!");

// Function InGameModule.PlayerCameraManagerBattle.OnBeginUnderwaterEvent
// 0x00A8 (0x00A8 - 0x0000)
struct PlayerCameraManagerBattle_OnBeginUnderwaterEvent final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCameraManagerBattle_OnBeginUnderwaterEvent) == 0x000008, "Wrong alignment on PlayerCameraManagerBattle_OnBeginUnderwaterEvent");
static_assert(sizeof(PlayerCameraManagerBattle_OnBeginUnderwaterEvent) == 0x0000A8, "Wrong size on PlayerCameraManagerBattle_OnBeginUnderwaterEvent");
static_assert(offsetof(PlayerCameraManagerBattle_OnBeginUnderwaterEvent, OverlappedComponent) == 0x000000, "Member 'PlayerCameraManagerBattle_OnBeginUnderwaterEvent::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(PlayerCameraManagerBattle_OnBeginUnderwaterEvent, OtherActor) == 0x000008, "Member 'PlayerCameraManagerBattle_OnBeginUnderwaterEvent::OtherActor' has a wrong offset!");
static_assert(offsetof(PlayerCameraManagerBattle_OnBeginUnderwaterEvent, OtherComp) == 0x000010, "Member 'PlayerCameraManagerBattle_OnBeginUnderwaterEvent::OtherComp' has a wrong offset!");
static_assert(offsetof(PlayerCameraManagerBattle_OnBeginUnderwaterEvent, OtherBodyIndex) == 0x000018, "Member 'PlayerCameraManagerBattle_OnBeginUnderwaterEvent::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(PlayerCameraManagerBattle_OnBeginUnderwaterEvent, bFromSweep) == 0x00001C, "Member 'PlayerCameraManagerBattle_OnBeginUnderwaterEvent::bFromSweep' has a wrong offset!");
static_assert(offsetof(PlayerCameraManagerBattle_OnBeginUnderwaterEvent, SweepResult) == 0x000020, "Member 'PlayerCameraManagerBattle_OnBeginUnderwaterEvent::SweepResult' has a wrong offset!");

// Function InGameModule.PlayerCameraManagerBattle.OnEndUnderwaterEvent
// 0x0020 (0x0020 - 0x0000)
struct PlayerCameraManagerBattle_OnEndUnderwaterEvent final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerCameraManagerBattle_OnEndUnderwaterEvent) == 0x000008, "Wrong alignment on PlayerCameraManagerBattle_OnEndUnderwaterEvent");
static_assert(sizeof(PlayerCameraManagerBattle_OnEndUnderwaterEvent) == 0x000020, "Wrong size on PlayerCameraManagerBattle_OnEndUnderwaterEvent");
static_assert(offsetof(PlayerCameraManagerBattle_OnEndUnderwaterEvent, OverlappedComponent) == 0x000000, "Member 'PlayerCameraManagerBattle_OnEndUnderwaterEvent::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(PlayerCameraManagerBattle_OnEndUnderwaterEvent, OtherActor) == 0x000008, "Member 'PlayerCameraManagerBattle_OnEndUnderwaterEvent::OtherActor' has a wrong offset!");
static_assert(offsetof(PlayerCameraManagerBattle_OnEndUnderwaterEvent, OtherComp) == 0x000010, "Member 'PlayerCameraManagerBattle_OnEndUnderwaterEvent::OtherComp' has a wrong offset!");
static_assert(offsetof(PlayerCameraManagerBattle_OnEndUnderwaterEvent, OtherBodyIndex) == 0x000018, "Member 'PlayerCameraManagerBattle_OnEndUnderwaterEvent::OtherBodyIndex' has a wrong offset!");

// Function InGameModule.PlayerControllerServerEntry.BP_ServerTravel
// 0x0010 (0x0010 - 0x0000)
struct PlayerControllerServerEntry_BP_ServerTravel final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerServerEntry_BP_ServerTravel) == 0x000008, "Wrong alignment on PlayerControllerServerEntry_BP_ServerTravel");
static_assert(sizeof(PlayerControllerServerEntry_BP_ServerTravel) == 0x000010, "Wrong size on PlayerControllerServerEntry_BP_ServerTravel");
static_assert(offsetof(PlayerControllerServerEntry_BP_ServerTravel, URL) == 0x000000, "Member 'PlayerControllerServerEntry_BP_ServerTravel::URL' has a wrong offset!");

// Function InGameModule.PlayerControllerServerEntry.ServerTravel
// 0x0010 (0x0010 - 0x0000)
struct PlayerControllerServerEntry_ServerTravel final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerServerEntry_ServerTravel) == 0x000008, "Wrong alignment on PlayerControllerServerEntry_ServerTravel");
static_assert(sizeof(PlayerControllerServerEntry_ServerTravel) == 0x000010, "Wrong size on PlayerControllerServerEntry_ServerTravel");
static_assert(offsetof(PlayerControllerServerEntry_ServerTravel, URL) == 0x000000, "Member 'PlayerControllerServerEntry_ServerTravel::URL' has a wrong offset!");

// Function InGameModule.PlayerControllerTraining.ChangeCharacter_OnServer
// 0x0048 (0x0048 - 0x0000)
struct PlayerControllerTraining_ChangeCharacter_OnServer final
{
public:
	class ACharacterBattle*                       CurrentCharacter;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTrainingBattleCharacterData           Data;                                              // 0x0008(0x0040)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerTraining_ChangeCharacter_OnServer) == 0x000008, "Wrong alignment on PlayerControllerTraining_ChangeCharacter_OnServer");
static_assert(sizeof(PlayerControllerTraining_ChangeCharacter_OnServer) == 0x000048, "Wrong size on PlayerControllerTraining_ChangeCharacter_OnServer");
static_assert(offsetof(PlayerControllerTraining_ChangeCharacter_OnServer, CurrentCharacter) == 0x000000, "Member 'PlayerControllerTraining_ChangeCharacter_OnServer::CurrentCharacter' has a wrong offset!");
static_assert(offsetof(PlayerControllerTraining_ChangeCharacter_OnServer, Data) == 0x000008, "Member 'PlayerControllerTraining_ChangeCharacter_OnServer::Data' has a wrong offset!");

// Function InGameModule.PlayerControllerTraining.ChangeUniqueLevel_OnServer
// 0x0018 (0x0018 - 0x0000)
struct PlayerControllerTraining_ChangeUniqueLevel_OnServer final
{
public:
	class ACharacterBattle*                       CurrentCharacter;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefUnique1Level;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefUnique2Level;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefUnique3Level;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerControllerTraining_ChangeUniqueLevel_OnServer) == 0x000008, "Wrong alignment on PlayerControllerTraining_ChangeUniqueLevel_OnServer");
static_assert(sizeof(PlayerControllerTraining_ChangeUniqueLevel_OnServer) == 0x000018, "Wrong size on PlayerControllerTraining_ChangeUniqueLevel_OnServer");
static_assert(offsetof(PlayerControllerTraining_ChangeUniqueLevel_OnServer, CurrentCharacter) == 0x000000, "Member 'PlayerControllerTraining_ChangeUniqueLevel_OnServer::CurrentCharacter' has a wrong offset!");
static_assert(offsetof(PlayerControllerTraining_ChangeUniqueLevel_OnServer, DefUnique1Level) == 0x000008, "Member 'PlayerControllerTraining_ChangeUniqueLevel_OnServer::DefUnique1Level' has a wrong offset!");
static_assert(offsetof(PlayerControllerTraining_ChangeUniqueLevel_OnServer, DefUnique2Level) == 0x00000C, "Member 'PlayerControllerTraining_ChangeUniqueLevel_OnServer::DefUnique2Level' has a wrong offset!");
static_assert(offsetof(PlayerControllerTraining_ChangeUniqueLevel_OnServer, DefUnique3Level) == 0x000010, "Member 'PlayerControllerTraining_ChangeUniqueLevel_OnServer::DefUnique3Level' has a wrong offset!");

// Function InGameModule.PlayerControllerTraining.SetAITrainingType_OnServer
// 0x0010 (0x0010 - 0x0000)
struct PlayerControllerTraining_SetAITrainingType_OnServer final
{
public:
	class APlayerStateBattle*                     PlayerStateBattle;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAITrainingType                               Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStoreTypeOnClient;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerControllerTraining_SetAITrainingType_OnServer) == 0x000008, "Wrong alignment on PlayerControllerTraining_SetAITrainingType_OnServer");
static_assert(sizeof(PlayerControllerTraining_SetAITrainingType_OnServer) == 0x000010, "Wrong size on PlayerControllerTraining_SetAITrainingType_OnServer");
static_assert(offsetof(PlayerControllerTraining_SetAITrainingType_OnServer, PlayerStateBattle) == 0x000000, "Member 'PlayerControllerTraining_SetAITrainingType_OnServer::PlayerStateBattle' has a wrong offset!");
static_assert(offsetof(PlayerControllerTraining_SetAITrainingType_OnServer, Type) == 0x000008, "Member 'PlayerControllerTraining_SetAITrainingType_OnServer::Type' has a wrong offset!");
static_assert(offsetof(PlayerControllerTraining_SetAITrainingType_OnServer, bStoreTypeOnClient) == 0x000009, "Member 'PlayerControllerTraining_SetAITrainingType_OnServer::bStoreTypeOnClient' has a wrong offset!");

// Function InGameModule.PlayerControllerTraining.SetChangedTrainingKPI_OnServer
// 0x0008 (0x0008 - 0x0000)
struct PlayerControllerTraining_SetChangedTrainingKPI_OnServer final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharacterCode;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerTraining_SetChangedTrainingKPI_OnServer) == 0x000004, "Wrong alignment on PlayerControllerTraining_SetChangedTrainingKPI_OnServer");
static_assert(sizeof(PlayerControllerTraining_SetChangedTrainingKPI_OnServer) == 0x000008, "Wrong size on PlayerControllerTraining_SetChangedTrainingKPI_OnServer");
static_assert(offsetof(PlayerControllerTraining_SetChangedTrainingKPI_OnServer, IsActive) == 0x000000, "Member 'PlayerControllerTraining_SetChangedTrainingKPI_OnServer::IsActive' has a wrong offset!");
static_assert(offsetof(PlayerControllerTraining_SetChangedTrainingKPI_OnServer, CharacterCode) == 0x000004, "Member 'PlayerControllerTraining_SetChangedTrainingKPI_OnServer::CharacterCode' has a wrong offset!");

// Function InGameModule.PlayerControllerTraining.SetTakeDamageType_OnServer
// 0x0001 (0x0001 - 0x0000)
struct PlayerControllerTraining_SetTakeDamageType_OnServer final
{
public:
	ETakeDamageType                               DamageType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerTraining_SetTakeDamageType_OnServer) == 0x000001, "Wrong alignment on PlayerControllerTraining_SetTakeDamageType_OnServer");
static_assert(sizeof(PlayerControllerTraining_SetTakeDamageType_OnServer) == 0x000001, "Wrong size on PlayerControllerTraining_SetTakeDamageType_OnServer");
static_assert(offsetof(PlayerControllerTraining_SetTakeDamageType_OnServer, DamageType) == 0x000000, "Member 'PlayerControllerTraining_SetTakeDamageType_OnServer::DamageType' has a wrong offset!");

// Function InGameModule.PlayerControllerVisualLobby.SetupTrainingCharacterData_OnServer
// 0x0068 (0x0068 - 0x0000)
struct PlayerControllerVisualLobby_SetupTrainingCharacterData_OnServer final
{
public:
	int32                                         TrainingDamageTypeIndex;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrainingFriendlyFire;                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTrainingCharacterData                 TrainingPlayerCharacterData;                       // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTrainingCharacterData                 TrainingCPUCharacterData1;                         // 0x0020(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTrainingCharacterData                 TrainingCPUCharacterData2;                         // 0x0038(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTrainingCharacterData                 TrainingCPUCharacterData3;                         // 0x0050(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerVisualLobby_SetupTrainingCharacterData_OnServer) == 0x000004, "Wrong alignment on PlayerControllerVisualLobby_SetupTrainingCharacterData_OnServer");
static_assert(sizeof(PlayerControllerVisualLobby_SetupTrainingCharacterData_OnServer) == 0x000068, "Wrong size on PlayerControllerVisualLobby_SetupTrainingCharacterData_OnServer");
static_assert(offsetof(PlayerControllerVisualLobby_SetupTrainingCharacterData_OnServer, TrainingDamageTypeIndex) == 0x000000, "Member 'PlayerControllerVisualLobby_SetupTrainingCharacterData_OnServer::TrainingDamageTypeIndex' has a wrong offset!");
static_assert(offsetof(PlayerControllerVisualLobby_SetupTrainingCharacterData_OnServer, bTrainingFriendlyFire) == 0x000004, "Member 'PlayerControllerVisualLobby_SetupTrainingCharacterData_OnServer::bTrainingFriendlyFire' has a wrong offset!");
static_assert(offsetof(PlayerControllerVisualLobby_SetupTrainingCharacterData_OnServer, TrainingPlayerCharacterData) == 0x000008, "Member 'PlayerControllerVisualLobby_SetupTrainingCharacterData_OnServer::TrainingPlayerCharacterData' has a wrong offset!");
static_assert(offsetof(PlayerControllerVisualLobby_SetupTrainingCharacterData_OnServer, TrainingCPUCharacterData1) == 0x000020, "Member 'PlayerControllerVisualLobby_SetupTrainingCharacterData_OnServer::TrainingCPUCharacterData1' has a wrong offset!");
static_assert(offsetof(PlayerControllerVisualLobby_SetupTrainingCharacterData_OnServer, TrainingCPUCharacterData2) == 0x000038, "Member 'PlayerControllerVisualLobby_SetupTrainingCharacterData_OnServer::TrainingCPUCharacterData2' has a wrong offset!");
static_assert(offsetof(PlayerControllerVisualLobby_SetupTrainingCharacterData_OnServer, TrainingCPUCharacterData3) == 0x000050, "Member 'PlayerControllerVisualLobby_SetupTrainingCharacterData_OnServer::TrainingCPUCharacterData3' has a wrong offset!");

// Function InGameModule.PlayerScoutBattleInfo.ScoutRequest
// 0x0010 (0x0010 - 0x0000)
struct PlayerScoutBattleInfo_ScoutRequest final
{
public:
	const class APlayerStateBattle*               SendPlayer;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlock;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerScoutBattleInfo_ScoutRequest) == 0x000008, "Wrong alignment on PlayerScoutBattleInfo_ScoutRequest");
static_assert(sizeof(PlayerScoutBattleInfo_ScoutRequest) == 0x000010, "Wrong size on PlayerScoutBattleInfo_ScoutRequest");
static_assert(offsetof(PlayerScoutBattleInfo_ScoutRequest, SendPlayer) == 0x000000, "Member 'PlayerScoutBattleInfo_ScoutRequest::SendPlayer' has a wrong offset!");
static_assert(offsetof(PlayerScoutBattleInfo_ScoutRequest, bBlock) == 0x000008, "Member 'PlayerScoutBattleInfo_ScoutRequest::bBlock' has a wrong offset!");

// Function InGameModule.PlayerScoutComponent.ReplyToScoutRequet_ToServer
// 0x0010 (0x0010 - 0x0000)
struct PlayerScoutComponent_ReplyToScoutRequet_ToServer final
{
public:
	class UPlayerScoutComponent*                  Winner;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPositive;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerScoutComponent_ReplyToScoutRequet_ToServer) == 0x000008, "Wrong alignment on PlayerScoutComponent_ReplyToScoutRequet_ToServer");
static_assert(sizeof(PlayerScoutComponent_ReplyToScoutRequet_ToServer) == 0x000010, "Wrong size on PlayerScoutComponent_ReplyToScoutRequet_ToServer");
static_assert(offsetof(PlayerScoutComponent_ReplyToScoutRequet_ToServer, Winner) == 0x000000, "Member 'PlayerScoutComponent_ReplyToScoutRequet_ToServer::Winner' has a wrong offset!");
static_assert(offsetof(PlayerScoutComponent_ReplyToScoutRequet_ToServer, bPositive) == 0x000008, "Member 'PlayerScoutComponent_ReplyToScoutRequet_ToServer::bPositive' has a wrong offset!");

// Function InGameModule.PlayerScoutComponent.ScoutRequest_ToClient
// 0x0008 (0x0008 - 0x0000)
struct PlayerScoutComponent_ScoutRequest_ToClient final
{
public:
	class APlayerStateBattle*                     Winner;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerScoutComponent_ScoutRequest_ToClient) == 0x000008, "Wrong alignment on PlayerScoutComponent_ScoutRequest_ToClient");
static_assert(sizeof(PlayerScoutComponent_ScoutRequest_ToClient) == 0x000008, "Wrong size on PlayerScoutComponent_ScoutRequest_ToClient");
static_assert(offsetof(PlayerScoutComponent_ScoutRequest_ToClient, Winner) == 0x000000, "Member 'PlayerScoutComponent_ScoutRequest_ToClient::Winner' has a wrong offset!");

// Function InGameModule.PlayerScoutComponent.ScoutRequest_ToServer
// 0x0008 (0x0008 - 0x0000)
struct PlayerScoutComponent_ScoutRequest_ToServer final
{
public:
	class APlayerStateBattle*                     Loser;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerScoutComponent_ScoutRequest_ToServer) == 0x000008, "Wrong alignment on PlayerScoutComponent_ScoutRequest_ToServer");
static_assert(sizeof(PlayerScoutComponent_ScoutRequest_ToServer) == 0x000008, "Wrong size on PlayerScoutComponent_ScoutRequest_ToServer");
static_assert(offsetof(PlayerScoutComponent_ScoutRequest_ToServer, Loser) == 0x000000, "Member 'PlayerScoutComponent_ScoutRequest_ToServer::Loser' has a wrong offset!");

// Function InGameModule.PlayerScoutComponent.ScoutRequestComplete_NetMulticast
// 0x0010 (0x0010 - 0x0000)
struct PlayerScoutComponent_ScoutRequestComplete_NetMulticast final
{
public:
	class UPlayerScoutComponent*                  Winner;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerScoutComponent_ScoutRequestComplete_NetMulticast) == 0x000008, "Wrong alignment on PlayerScoutComponent_ScoutRequestComplete_NetMulticast");
static_assert(sizeof(PlayerScoutComponent_ScoutRequestComplete_NetMulticast) == 0x000010, "Wrong size on PlayerScoutComponent_ScoutRequestComplete_NetMulticast");
static_assert(offsetof(PlayerScoutComponent_ScoutRequestComplete_NetMulticast, Winner) == 0x000000, "Member 'PlayerScoutComponent_ScoutRequestComplete_NetMulticast::Winner' has a wrong offset!");
static_assert(offsetof(PlayerScoutComponent_ScoutRequestComplete_NetMulticast, bSuccess) == 0x000008, "Member 'PlayerScoutComponent_ScoutRequestComplete_NetMulticast::bSuccess' has a wrong offset!");

// Function InGameModule.PlayerScreenInfoWidget.OnBattleSequenceChanged
// 0x0001 (0x0001 - 0x0000)
struct PlayerScreenInfoWidget_OnBattleSequenceChanged final
{
public:
	EBattleSequence                               NewSequence;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerScreenInfoWidget_OnBattleSequenceChanged) == 0x000001, "Wrong alignment on PlayerScreenInfoWidget_OnBattleSequenceChanged");
static_assert(sizeof(PlayerScreenInfoWidget_OnBattleSequenceChanged) == 0x000001, "Wrong size on PlayerScreenInfoWidget_OnBattleSequenceChanged");
static_assert(offsetof(PlayerScreenInfoWidget_OnBattleSequenceChanged, NewSequence) == 0x000000, "Member 'PlayerScreenInfoWidget_OnBattleSequenceChanged::NewSequence' has a wrong offset!");

// Function InGameModule.PlayerScreenInfoWidget.SwitchCharacterActionGuide
// 0x0020 (0x0020 - 0x0000)
struct PlayerScreenInfoWidget_SwitchCharacterActionGuide final
{
public:
	struct FRequestUIData                         Data;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerScreenInfoWidget_SwitchCharacterActionGuide) == 0x000008, "Wrong alignment on PlayerScreenInfoWidget_SwitchCharacterActionGuide");
static_assert(sizeof(PlayerScreenInfoWidget_SwitchCharacterActionGuide) == 0x000020, "Wrong size on PlayerScreenInfoWidget_SwitchCharacterActionGuide");
static_assert(offsetof(PlayerScreenInfoWidget_SwitchCharacterActionGuide, Data) == 0x000000, "Member 'PlayerScreenInfoWidget_SwitchCharacterActionGuide::Data' has a wrong offset!");

// Function InGameModule.PlayerScreenInfoWidget.UpdateInteractPopUpWidget
// 0x0010 (0x0010 - 0x0000)
struct PlayerScreenInfoWidget_UpdateInteractPopUpWidget final
{
public:
	const class UInteractTargetComponent*         CurrentTarget;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanInteract;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerScreenInfoWidget_UpdateInteractPopUpWidget) == 0x000008, "Wrong alignment on PlayerScreenInfoWidget_UpdateInteractPopUpWidget");
static_assert(sizeof(PlayerScreenInfoWidget_UpdateInteractPopUpWidget) == 0x000010, "Wrong size on PlayerScreenInfoWidget_UpdateInteractPopUpWidget");
static_assert(offsetof(PlayerScreenInfoWidget_UpdateInteractPopUpWidget, CurrentTarget) == 0x000000, "Member 'PlayerScreenInfoWidget_UpdateInteractPopUpWidget::CurrentTarget' has a wrong offset!");
static_assert(offsetof(PlayerScreenInfoWidget_UpdateInteractPopUpWidget, bCanInteract) == 0x000008, "Member 'PlayerScreenInfoWidget_UpdateInteractPopUpWidget::bCanInteract' has a wrong offset!");

// Function InGameModule.PlayerStateBattle.BP_ClearDyingState
// 0x0001 (0x0001 - 0x0000)
struct PlayerStateBattle_BP_ClearDyingState final
{
public:
	bool                                          bWithRecovery;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateBattle_BP_ClearDyingState) == 0x000001, "Wrong alignment on PlayerStateBattle_BP_ClearDyingState");
static_assert(sizeof(PlayerStateBattle_BP_ClearDyingState) == 0x000001, "Wrong size on PlayerStateBattle_BP_ClearDyingState");
static_assert(offsetof(PlayerStateBattle_BP_ClearDyingState, bWithRecovery) == 0x000000, "Member 'PlayerStateBattle_BP_ClearDyingState::bWithRecovery' has a wrong offset!");

// Function InGameModule.PlayerStateBattle.BP_GetBuffParam
// 0x0008 (0x0008 - 0x0000)
struct PlayerStateBattle_BP_GetBuffParam final
{
public:
	class UBuffParam*                             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateBattle_BP_GetBuffParam) == 0x000008, "Wrong alignment on PlayerStateBattle_BP_GetBuffParam");
static_assert(sizeof(PlayerStateBattle_BP_GetBuffParam) == 0x000008, "Wrong size on PlayerStateBattle_BP_GetBuffParam");
static_assert(offsetof(PlayerStateBattle_BP_GetBuffParam, ReturnValue) == 0x000000, "Member 'PlayerStateBattle_BP_GetBuffParam::ReturnValue' has a wrong offset!");

// Function InGameModule.PlayerStateBattle.BP_GetRescueCharacter
// 0x0008 (0x0008 - 0x0000)
struct PlayerStateBattle_BP_GetRescueCharacter final
{
public:
	class ACharacterBattle*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateBattle_BP_GetRescueCharacter) == 0x000008, "Wrong alignment on PlayerStateBattle_BP_GetRescueCharacter");
static_assert(sizeof(PlayerStateBattle_BP_GetRescueCharacter) == 0x000008, "Wrong size on PlayerStateBattle_BP_GetRescueCharacter");
static_assert(offsetof(PlayerStateBattle_BP_GetRescueCharacter, ReturnValue) == 0x000000, "Member 'PlayerStateBattle_BP_GetRescueCharacter::ReturnValue' has a wrong offset!");

// Function InGameModule.PlayerStateBattle.BP_IsDead
// 0x0001 (0x0001 - 0x0000)
struct PlayerStateBattle_BP_IsDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateBattle_BP_IsDead) == 0x000001, "Wrong alignment on PlayerStateBattle_BP_IsDead");
static_assert(sizeof(PlayerStateBattle_BP_IsDead) == 0x000001, "Wrong size on PlayerStateBattle_BP_IsDead");
static_assert(offsetof(PlayerStateBattle_BP_IsDead, ReturnValue) == 0x000000, "Member 'PlayerStateBattle_BP_IsDead::ReturnValue' has a wrong offset!");

// Function InGameModule.PlayerStateBattle.BP_IsDying
// 0x0001 (0x0001 - 0x0000)
struct PlayerStateBattle_BP_IsDying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateBattle_BP_IsDying) == 0x000001, "Wrong alignment on PlayerStateBattle_BP_IsDying");
static_assert(sizeof(PlayerStateBattle_BP_IsDying) == 0x000001, "Wrong size on PlayerStateBattle_BP_IsDying");
static_assert(offsetof(PlayerStateBattle_BP_IsDying, ReturnValue) == 0x000000, "Member 'PlayerStateBattle_BP_IsDying::ReturnValue' has a wrong offset!");

// Function InGameModule.PlayerStateBattle.BP_IsInvincible
// 0x0001 (0x0001 - 0x0000)
struct PlayerStateBattle_BP_IsInvincible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateBattle_BP_IsInvincible) == 0x000001, "Wrong alignment on PlayerStateBattle_BP_IsInvincible");
static_assert(sizeof(PlayerStateBattle_BP_IsInvincible) == 0x000001, "Wrong size on PlayerStateBattle_BP_IsInvincible");
static_assert(offsetof(PlayerStateBattle_BP_IsInvincible, ReturnValue) == 0x000000, "Member 'PlayerStateBattle_BP_IsInvincible::ReturnValue' has a wrong offset!");

// Function InGameModule.PlayerStateBattle.BP_IsPlusUltraPermanency
// 0x0001 (0x0001 - 0x0000)
struct PlayerStateBattle_BP_IsPlusUltraPermanency final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateBattle_BP_IsPlusUltraPermanency) == 0x000001, "Wrong alignment on PlayerStateBattle_BP_IsPlusUltraPermanency");
static_assert(sizeof(PlayerStateBattle_BP_IsPlusUltraPermanency) == 0x000001, "Wrong size on PlayerStateBattle_BP_IsPlusUltraPermanency");
static_assert(offsetof(PlayerStateBattle_BP_IsPlusUltraPermanency, ReturnValue) == 0x000000, "Member 'PlayerStateBattle_BP_IsPlusUltraPermanency::ReturnValue' has a wrong offset!");

// Function InGameModule.PlayerStateBattle.BP_RecoverGuardPoint
// 0x0018 (0x0018 - 0x0000)
struct PlayerStateBattle_BP_RecoverGuardPoint final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerStateBattle*                     Healer;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableCondition;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerStateBattle_BP_RecoverGuardPoint) == 0x000008, "Wrong alignment on PlayerStateBattle_BP_RecoverGuardPoint");
static_assert(sizeof(PlayerStateBattle_BP_RecoverGuardPoint) == 0x000018, "Wrong size on PlayerStateBattle_BP_RecoverGuardPoint");
static_assert(offsetof(PlayerStateBattle_BP_RecoverGuardPoint, Value) == 0x000000, "Member 'PlayerStateBattle_BP_RecoverGuardPoint::Value' has a wrong offset!");
static_assert(offsetof(PlayerStateBattle_BP_RecoverGuardPoint, Healer) == 0x000008, "Member 'PlayerStateBattle_BP_RecoverGuardPoint::Healer' has a wrong offset!");
static_assert(offsetof(PlayerStateBattle_BP_RecoverGuardPoint, EnableCondition) == 0x000010, "Member 'PlayerStateBattle_BP_RecoverGuardPoint::EnableCondition' has a wrong offset!");

// Function InGameModule.PlayerStateBattle.BP_RecoverHealth
// 0x0010 (0x0010 - 0x0000)
struct PlayerStateBattle_BP_RecoverHealth final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCondition;                                  // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerStateBattle*                     Healer;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateBattle_BP_RecoverHealth) == 0x000008, "Wrong alignment on PlayerStateBattle_BP_RecoverHealth");
static_assert(sizeof(PlayerStateBattle_BP_RecoverHealth) == 0x000010, "Wrong size on PlayerStateBattle_BP_RecoverHealth");
static_assert(offsetof(PlayerStateBattle_BP_RecoverHealth, Value) == 0x000000, "Member 'PlayerStateBattle_BP_RecoverHealth::Value' has a wrong offset!");
static_assert(offsetof(PlayerStateBattle_BP_RecoverHealth, bEnableCondition) == 0x000004, "Member 'PlayerStateBattle_BP_RecoverHealth::bEnableCondition' has a wrong offset!");
static_assert(offsetof(PlayerStateBattle_BP_RecoverHealth, Healer) == 0x000008, "Member 'PlayerStateBattle_BP_RecoverHealth::Healer' has a wrong offset!");

// Function InGameModule.PlayerStateBattle.BP_SetDyingInteracted
// 0x0001 (0x0001 - 0x0000)
struct PlayerStateBattle_BP_SetDyingInteracted final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateBattle_BP_SetDyingInteracted) == 0x000001, "Wrong alignment on PlayerStateBattle_BP_SetDyingInteracted");
static_assert(sizeof(PlayerStateBattle_BP_SetDyingInteracted) == 0x000001, "Wrong size on PlayerStateBattle_BP_SetDyingInteracted");
static_assert(offsetof(PlayerStateBattle_BP_SetDyingInteracted, Flag) == 0x000000, "Member 'PlayerStateBattle_BP_SetDyingInteracted::Flag' has a wrong offset!");

// Function InGameModule.PlayerStateBattle.BP_SetDyingInteracted_ToServer
// 0x0001 (0x0001 - 0x0000)
struct PlayerStateBattle_BP_SetDyingInteracted_ToServer final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateBattle_BP_SetDyingInteracted_ToServer) == 0x000001, "Wrong alignment on PlayerStateBattle_BP_SetDyingInteracted_ToServer");
static_assert(sizeof(PlayerStateBattle_BP_SetDyingInteracted_ToServer) == 0x000001, "Wrong size on PlayerStateBattle_BP_SetDyingInteracted_ToServer");
static_assert(offsetof(PlayerStateBattle_BP_SetDyingInteracted_ToServer, Flag) == 0x000000, "Member 'PlayerStateBattle_BP_SetDyingInteracted_ToServer::Flag' has a wrong offset!");

// Function InGameModule.PlayerStateBattle.BP_SetInvincible
// 0x000C (0x000C - 0x0000)
struct PlayerStateBattle_BP_SetInvincible final
{
public:
	float                                         FixTime;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTime;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableEffect;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ProjectileThrough;                                 // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SlipDamageThrough;                                 // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerStateBattle_BP_SetInvincible) == 0x000004, "Wrong alignment on PlayerStateBattle_BP_SetInvincible");
static_assert(sizeof(PlayerStateBattle_BP_SetInvincible) == 0x00000C, "Wrong size on PlayerStateBattle_BP_SetInvincible");
static_assert(offsetof(PlayerStateBattle_BP_SetInvincible, FixTime) == 0x000000, "Member 'PlayerStateBattle_BP_SetInvincible::FixTime' has a wrong offset!");
static_assert(offsetof(PlayerStateBattle_BP_SetInvincible, MaxTime) == 0x000004, "Member 'PlayerStateBattle_BP_SetInvincible::MaxTime' has a wrong offset!");
static_assert(offsetof(PlayerStateBattle_BP_SetInvincible, EnableEffect) == 0x000008, "Member 'PlayerStateBattle_BP_SetInvincible::EnableEffect' has a wrong offset!");
static_assert(offsetof(PlayerStateBattle_BP_SetInvincible, ProjectileThrough) == 0x000009, "Member 'PlayerStateBattle_BP_SetInvincible::ProjectileThrough' has a wrong offset!");
static_assert(offsetof(PlayerStateBattle_BP_SetInvincible, SlipDamageThrough) == 0x00000A, "Member 'PlayerStateBattle_BP_SetInvincible::SlipDamageThrough' has a wrong offset!");

// Function InGameModule.PlayerStateBattle.CalcExitPlayerScore_RPC
// 0x0008 (0x0008 - 0x0000)
struct PlayerStateBattle_CalcExitPlayerScore_RPC final
{
public:
	struct FUniqueNetIdKey                        ExitPlayerId;                                      // 0x0000(0x0008)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateBattle_CalcExitPlayerScore_RPC) == 0x000004, "Wrong alignment on PlayerStateBattle_CalcExitPlayerScore_RPC");
static_assert(sizeof(PlayerStateBattle_CalcExitPlayerScore_RPC) == 0x000008, "Wrong size on PlayerStateBattle_CalcExitPlayerScore_RPC");
static_assert(offsetof(PlayerStateBattle_CalcExitPlayerScore_RPC, ExitPlayerId) == 0x000000, "Member 'PlayerStateBattle_CalcExitPlayerScore_RPC::ExitPlayerId' has a wrong offset!");

// Function InGameModule.PlayerStateBattle.ClientTextMessageReceived
// 0x0018 (0x0018 - 0x0000)
struct PlayerStateBattle_ClientTextMessageReceived final
{
public:
	int16                                         SenderPlayerId;                                    // 0x0000(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InKeyForTable;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateBattle_ClientTextMessageReceived) == 0x000008, "Wrong alignment on PlayerStateBattle_ClientTextMessageReceived");
static_assert(sizeof(PlayerStateBattle_ClientTextMessageReceived) == 0x000018, "Wrong size on PlayerStateBattle_ClientTextMessageReceived");
static_assert(offsetof(PlayerStateBattle_ClientTextMessageReceived, SenderPlayerId) == 0x000000, "Member 'PlayerStateBattle_ClientTextMessageReceived::SenderPlayerId' has a wrong offset!");
static_assert(offsetof(PlayerStateBattle_ClientTextMessageReceived, InKeyForTable) == 0x000008, "Member 'PlayerStateBattle_ClientTextMessageReceived::InKeyForTable' has a wrong offset!");

// Function InGameModule.PlayerStateBattle.EnableToRise
// 0x0008 (0x0008 - 0x0000)
struct PlayerStateBattle_EnableToRise final
{
public:
	bool                                          bIsGuard;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateBattle_EnableToRise) == 0x000004, "Wrong alignment on PlayerStateBattle_EnableToRise");
static_assert(sizeof(PlayerStateBattle_EnableToRise) == 0x000008, "Wrong size on PlayerStateBattle_EnableToRise");
static_assert(offsetof(PlayerStateBattle_EnableToRise, bIsGuard) == 0x000000, "Member 'PlayerStateBattle_EnableToRise::bIsGuard' has a wrong offset!");
static_assert(offsetof(PlayerStateBattle_EnableToRise, Index_0) == 0x000004, "Member 'PlayerStateBattle_EnableToRise::Index_0' has a wrong offset!");

// Function InGameModule.PlayerStateBattle.OnAudioFinished_AppearSquad
// 0x0008 (0x0008 - 0x0000)
struct PlayerStateBattle_OnAudioFinished_AppearSquad final
{
public:
	class UAtomComponent*                         AtomComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateBattle_OnAudioFinished_AppearSquad) == 0x000008, "Wrong alignment on PlayerStateBattle_OnAudioFinished_AppearSquad");
static_assert(sizeof(PlayerStateBattle_OnAudioFinished_AppearSquad) == 0x000008, "Wrong size on PlayerStateBattle_OnAudioFinished_AppearSquad");
static_assert(offsetof(PlayerStateBattle_OnAudioFinished_AppearSquad, AtomComponent) == 0x000000, "Member 'PlayerStateBattle_OnAudioFinished_AppearSquad::AtomComponent' has a wrong offset!");

// Function InGameModule.PlayerStateBattle.ReceiveAbilityRequest_ToClient
// 0x0004 (0x0004 - 0x0000)
struct PlayerStateBattle_ReceiveAbilityRequest_ToClient final
{
public:
	int16                                         SenderPlayerId;                                    // 0x0000(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdAbilityType                                AbilityType;                                       // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackId                                     AttackId;                                          // 0x0003(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateBattle_ReceiveAbilityRequest_ToClient) == 0x000002, "Wrong alignment on PlayerStateBattle_ReceiveAbilityRequest_ToClient");
static_assert(sizeof(PlayerStateBattle_ReceiveAbilityRequest_ToClient) == 0x000004, "Wrong size on PlayerStateBattle_ReceiveAbilityRequest_ToClient");
static_assert(offsetof(PlayerStateBattle_ReceiveAbilityRequest_ToClient, SenderPlayerId) == 0x000000, "Member 'PlayerStateBattle_ReceiveAbilityRequest_ToClient::SenderPlayerId' has a wrong offset!");
static_assert(offsetof(PlayerStateBattle_ReceiveAbilityRequest_ToClient, AbilityType) == 0x000002, "Member 'PlayerStateBattle_ReceiveAbilityRequest_ToClient::AbilityType' has a wrong offset!");
static_assert(offsetof(PlayerStateBattle_ReceiveAbilityRequest_ToClient, AttackId) == 0x000003, "Member 'PlayerStateBattle_ReceiveAbilityRequest_ToClient::AttackId' has a wrong offset!");

// Function InGameModule.PlayerStateBattle.ReceiveSupplyRequest_ToClient
// 0x000C (0x000C - 0x0000)
struct PlayerStateBattle_ReceiveSupplyRequest_ToClient final
{
public:
	int16                                         SenderPlayerId;                                    // 0x0000(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SupplyId;                                          // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateBattle_ReceiveSupplyRequest_ToClient) == 0x000004, "Wrong alignment on PlayerStateBattle_ReceiveSupplyRequest_ToClient");
static_assert(sizeof(PlayerStateBattle_ReceiveSupplyRequest_ToClient) == 0x00000C, "Wrong size on PlayerStateBattle_ReceiveSupplyRequest_ToClient");
static_assert(offsetof(PlayerStateBattle_ReceiveSupplyRequest_ToClient, SenderPlayerId) == 0x000000, "Member 'PlayerStateBattle_ReceiveSupplyRequest_ToClient::SenderPlayerId' has a wrong offset!");
static_assert(offsetof(PlayerStateBattle_ReceiveSupplyRequest_ToClient, SupplyId) == 0x000004, "Member 'PlayerStateBattle_ReceiveSupplyRequest_ToClient::SupplyId' has a wrong offset!");

// Function InGameModule.PlayerStateBattle.RecoverDying_ToClient
// 0x0008 (0x0008 - 0x0000)
struct PlayerStateBattle_RecoverDying_ToClient final
{
public:
	class ACharacterBattle*                       RescueCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateBattle_RecoverDying_ToClient) == 0x000008, "Wrong alignment on PlayerStateBattle_RecoverDying_ToClient");
static_assert(sizeof(PlayerStateBattle_RecoverDying_ToClient) == 0x000008, "Wrong size on PlayerStateBattle_RecoverDying_ToClient");
static_assert(offsetof(PlayerStateBattle_RecoverDying_ToClient, RescueCharacter) == 0x000000, "Member 'PlayerStateBattle_RecoverDying_ToClient::RescueCharacter' has a wrong offset!");

// Function InGameModule.PlayerStateBattle.SendTotalMoveDistanceToServer_RPC
// 0x0004 (0x0004 - 0x0000)
struct PlayerStateBattle_SendTotalMoveDistanceToServer_RPC final
{
public:
	float                                         TotalDistance;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateBattle_SendTotalMoveDistanceToServer_RPC) == 0x000004, "Wrong alignment on PlayerStateBattle_SendTotalMoveDistanceToServer_RPC");
static_assert(sizeof(PlayerStateBattle_SendTotalMoveDistanceToServer_RPC) == 0x000004, "Wrong size on PlayerStateBattle_SendTotalMoveDistanceToServer_RPC");
static_assert(offsetof(PlayerStateBattle_SendTotalMoveDistanceToServer_RPC, TotalDistance) == 0x000000, "Member 'PlayerStateBattle_SendTotalMoveDistanceToServer_RPC::TotalDistance' has a wrong offset!");

// Function InGameModule.PlayerStateBattle.ServerSealUnique
// 0x0010 (0x0010 - 0x0000)
struct PlayerStateBattle_ServerSealUnique final
{
public:
	TArray<class ACharacterBattle*>               Targets;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateBattle_ServerSealUnique) == 0x000008, "Wrong alignment on PlayerStateBattle_ServerSealUnique");
static_assert(sizeof(PlayerStateBattle_ServerSealUnique) == 0x000010, "Wrong size on PlayerStateBattle_ServerSealUnique");
static_assert(offsetof(PlayerStateBattle_ServerSealUnique, Targets) == 0x000000, "Member 'PlayerStateBattle_ServerSealUnique::Targets' has a wrong offset!");

// Function InGameModule.PlayerStateBattle.SetDyingInteracted_ToServer
// 0x0001 (0x0001 - 0x0000)
struct PlayerStateBattle_SetDyingInteracted_ToServer final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateBattle_SetDyingInteracted_ToServer) == 0x000001, "Wrong alignment on PlayerStateBattle_SetDyingInteracted_ToServer");
static_assert(sizeof(PlayerStateBattle_SetDyingInteracted_ToServer) == 0x000001, "Wrong size on PlayerStateBattle_SetDyingInteracted_ToServer");
static_assert(offsetof(PlayerStateBattle_SetDyingInteracted_ToServer, Flag) == 0x000000, "Member 'PlayerStateBattle_SetDyingInteracted_ToServer::Flag' has a wrong offset!");

// Function InGameModule.PlayerStateBattle.WinDemoCompleteFlag_RPC
// 0x0001 (0x0001 - 0x0000)
struct PlayerStateBattle_WinDemoCompleteFlag_RPC final
{
public:
	bool                                          bComplate;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateBattle_WinDemoCompleteFlag_RPC) == 0x000001, "Wrong alignment on PlayerStateBattle_WinDemoCompleteFlag_RPC");
static_assert(sizeof(PlayerStateBattle_WinDemoCompleteFlag_RPC) == 0x000001, "Wrong size on PlayerStateBattle_WinDemoCompleteFlag_RPC");
static_assert(offsetof(PlayerStateBattle_WinDemoCompleteFlag_RPC, bComplate) == 0x000000, "Member 'PlayerStateBattle_WinDemoCompleteFlag_RPC::bComplate' has a wrong offset!");

// Function InGameModule.PlayerStateBattle.BP_GetDeltaRateComponent
// 0x0008 (0x0008 - 0x0000)
struct PlayerStateBattle_BP_GetDeltaRateComponent final
{
public:
	class UDeltaRateComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateBattle_BP_GetDeltaRateComponent) == 0x000008, "Wrong alignment on PlayerStateBattle_BP_GetDeltaRateComponent");
static_assert(sizeof(PlayerStateBattle_BP_GetDeltaRateComponent) == 0x000008, "Wrong size on PlayerStateBattle_BP_GetDeltaRateComponent");
static_assert(offsetof(PlayerStateBattle_BP_GetDeltaRateComponent, ReturnValue) == 0x000000, "Member 'PlayerStateBattle_BP_GetDeltaRateComponent::ReturnValue' has a wrong offset!");

// Function InGameModule.PlayerStateBattle.BP_GetDuplicateController
// 0x0008 (0x0008 - 0x0000)
struct PlayerStateBattle_BP_GetDuplicateController final
{
public:
	class UDuplicateControlComponent*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateBattle_BP_GetDuplicateController) == 0x000008, "Wrong alignment on PlayerStateBattle_BP_GetDuplicateController");
static_assert(sizeof(PlayerStateBattle_BP_GetDuplicateController) == 0x000008, "Wrong size on PlayerStateBattle_BP_GetDuplicateController");
static_assert(offsetof(PlayerStateBattle_BP_GetDuplicateController, ReturnValue) == 0x000000, "Member 'PlayerStateBattle_BP_GetDuplicateController::ReturnValue' has a wrong offset!");

// Function InGameModule.PlayerStateBattle.BP_GetPlusUltraMaxTime
// 0x0004 (0x0004 - 0x0000)
struct PlayerStateBattle_BP_GetPlusUltraMaxTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateBattle_BP_GetPlusUltraMaxTime) == 0x000004, "Wrong alignment on PlayerStateBattle_BP_GetPlusUltraMaxTime");
static_assert(sizeof(PlayerStateBattle_BP_GetPlusUltraMaxTime) == 0x000004, "Wrong size on PlayerStateBattle_BP_GetPlusUltraMaxTime");
static_assert(offsetof(PlayerStateBattle_BP_GetPlusUltraMaxTime, ReturnValue) == 0x000000, "Member 'PlayerStateBattle_BP_GetPlusUltraMaxTime::ReturnValue' has a wrong offset!");

// Function InGameModule.PlayerStateBattle.BP_IsDyingInteracted
// 0x0001 (0x0001 - 0x0000)
struct PlayerStateBattle_BP_IsDyingInteracted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateBattle_BP_IsDyingInteracted) == 0x000001, "Wrong alignment on PlayerStateBattle_BP_IsDyingInteracted");
static_assert(sizeof(PlayerStateBattle_BP_IsDyingInteracted) == 0x000001, "Wrong size on PlayerStateBattle_BP_IsDyingInteracted");
static_assert(offsetof(PlayerStateBattle_BP_IsDyingInteracted, ReturnValue) == 0x000000, "Member 'PlayerStateBattle_BP_IsDyingInteracted::ReturnValue' has a wrong offset!");

// Function InGameModule.PlayerStateBattle.BP_IsImitation
// 0x0001 (0x0001 - 0x0000)
struct PlayerStateBattle_BP_IsImitation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateBattle_BP_IsImitation) == 0x000001, "Wrong alignment on PlayerStateBattle_BP_IsImitation");
static_assert(sizeof(PlayerStateBattle_BP_IsImitation) == 0x000001, "Wrong size on PlayerStateBattle_BP_IsImitation");
static_assert(offsetof(PlayerStateBattle_BP_IsImitation, ReturnValue) == 0x000000, "Member 'PlayerStateBattle_BP_IsImitation::ReturnValue' has a wrong offset!");

// Function InGameModule.PlayerStateBattle.ClientRemoveMessage
// 0x0002 (0x0002 - 0x0000)
struct PlayerStateBattle_ClientRemoveMessage final
{
public:
	int16                                         PlayerIdToRemove;                                  // 0x0000(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateBattle_ClientRemoveMessage) == 0x000002, "Wrong alignment on PlayerStateBattle_ClientRemoveMessage");
static_assert(sizeof(PlayerStateBattle_ClientRemoveMessage) == 0x000002, "Wrong size on PlayerStateBattle_ClientRemoveMessage");
static_assert(offsetof(PlayerStateBattle_ClientRemoveMessage, PlayerIdToRemove) == 0x000000, "Member 'PlayerStateBattle_ClientRemoveMessage::PlayerIdToRemove' has a wrong offset!");

// Function InGameModule.PlayerStateBattle.GetCurrentEmoteId
// 0x0004 (0x0004 - 0x0000)
struct PlayerStateBattle_GetCurrentEmoteId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateBattle_GetCurrentEmoteId) == 0x000004, "Wrong alignment on PlayerStateBattle_GetCurrentEmoteId");
static_assert(sizeof(PlayerStateBattle_GetCurrentEmoteId) == 0x000004, "Wrong size on PlayerStateBattle_GetCurrentEmoteId");
static_assert(offsetof(PlayerStateBattle_GetCurrentEmoteId, ReturnValue) == 0x000000, "Member 'PlayerStateBattle_GetCurrentEmoteId::ReturnValue' has a wrong offset!");

// Function InGameModule.PlusUltraLevel.SetPluslevelSwitcher
// 0x0004 (0x0004 - 0x0000)
struct PlusUltraLevel_SetPluslevelSwitcher final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlusUltraLevel_SetPluslevelSwitcher) == 0x000004, "Wrong alignment on PlusUltraLevel_SetPluslevelSwitcher");
static_assert(sizeof(PlusUltraLevel_SetPluslevelSwitcher) == 0x000004, "Wrong size on PlusUltraLevel_SetPluslevelSwitcher");
static_assert(offsetof(PlusUltraLevel_SetPluslevelSwitcher, Type) == 0x000000, "Member 'PlusUltraLevel_SetPluslevelSwitcher::Type' has a wrong offset!");

// Function InGameModule.PoisonMistTimerWidget.StoppingPoisonMist
// 0x0004 (0x0004 - 0x0000)
struct PoisonMistTimerWidget_StoppingPoisonMist final
{
public:
	float                                         PoisonMistSeconds;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PoisonMistTimerWidget_StoppingPoisonMist) == 0x000004, "Wrong alignment on PoisonMistTimerWidget_StoppingPoisonMist");
static_assert(sizeof(PoisonMistTimerWidget_StoppingPoisonMist) == 0x000004, "Wrong size on PoisonMistTimerWidget_StoppingPoisonMist");
static_assert(offsetof(PoisonMistTimerWidget_StoppingPoisonMist, PoisonMistSeconds) == 0x000000, "Member 'PoisonMistTimerWidget_StoppingPoisonMist::PoisonMistSeconds' has a wrong offset!");

// Function InGameModule.PortalShotGen.CreatePortal_RPC
// 0x0010 (0x0010 - 0x0000)
struct PortalShotGen_CreatePortal_RPC final
{
public:
	struct FPortalShotGenRep                      GenPortal;                                         // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PortalShotGen_CreatePortal_RPC) == 0x000004, "Wrong alignment on PortalShotGen_CreatePortal_RPC");
static_assert(sizeof(PortalShotGen_CreatePortal_RPC) == 0x000010, "Wrong size on PortalShotGen_CreatePortal_RPC");
static_assert(offsetof(PortalShotGen_CreatePortal_RPC, GenPortal) == 0x000000, "Member 'PortalShotGen_CreatePortal_RPC::GenPortal' has a wrong offset!");

// Function InGameModule.PredictionLineComponent.AddIgnoreActor
// 0x0008 (0x0008 - 0x0000)
struct PredictionLineComponent_AddIgnoreActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PredictionLineComponent_AddIgnoreActor) == 0x000008, "Wrong alignment on PredictionLineComponent_AddIgnoreActor");
static_assert(sizeof(PredictionLineComponent_AddIgnoreActor) == 0x000008, "Wrong size on PredictionLineComponent_AddIgnoreActor");
static_assert(offsetof(PredictionLineComponent_AddIgnoreActor, Actor) == 0x000000, "Member 'PredictionLineComponent_AddIgnoreActor::Actor' has a wrong offset!");

// Function InGameModule.PredictionLineComponent.Begin
// 0x0018 (0x0018 - 0x0000)
struct PredictionLineComponent_Begin final
{
public:
	float                                         LineRadius;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitRadius;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SimulateTime;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Frequency;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideGravity;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HitParticleAlwaysDisp;                             // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PredictionLineComponent_Begin) == 0x000004, "Wrong alignment on PredictionLineComponent_Begin");
static_assert(sizeof(PredictionLineComponent_Begin) == 0x000018, "Wrong size on PredictionLineComponent_Begin");
static_assert(offsetof(PredictionLineComponent_Begin, LineRadius) == 0x000000, "Member 'PredictionLineComponent_Begin::LineRadius' has a wrong offset!");
static_assert(offsetof(PredictionLineComponent_Begin, HitRadius) == 0x000004, "Member 'PredictionLineComponent_Begin::HitRadius' has a wrong offset!");
static_assert(offsetof(PredictionLineComponent_Begin, SimulateTime) == 0x000008, "Member 'PredictionLineComponent_Begin::SimulateTime' has a wrong offset!");
static_assert(offsetof(PredictionLineComponent_Begin, Frequency) == 0x00000C, "Member 'PredictionLineComponent_Begin::Frequency' has a wrong offset!");
static_assert(offsetof(PredictionLineComponent_Begin, OverrideGravity) == 0x000010, "Member 'PredictionLineComponent_Begin::OverrideGravity' has a wrong offset!");
static_assert(offsetof(PredictionLineComponent_Begin, HitParticleAlwaysDisp) == 0x000014, "Member 'PredictionLineComponent_Begin::HitParticleAlwaysDisp' has a wrong offset!");

// Function InGameModule.PredictionLineComponent.SetHitParticleTemplate
// 0x0008 (0x0008 - 0x0000)
struct PredictionLineComponent_SetHitParticleTemplate final
{
public:
	class UParticleSystem*                        Particle;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PredictionLineComponent_SetHitParticleTemplate) == 0x000008, "Wrong alignment on PredictionLineComponent_SetHitParticleTemplate");
static_assert(sizeof(PredictionLineComponent_SetHitParticleTemplate) == 0x000008, "Wrong size on PredictionLineComponent_SetHitParticleTemplate");
static_assert(offsetof(PredictionLineComponent_SetHitParticleTemplate, Particle) == 0x000000, "Member 'PredictionLineComponent_SetHitParticleTemplate::Particle' has a wrong offset!");

// Function InGameModule.PredictionLineComponent.SetLineMeshMateral
// 0x0008 (0x0008 - 0x0000)
struct PredictionLineComponent_SetLineMeshMateral final
{
public:
	class UMaterial*                              Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PredictionLineComponent_SetLineMeshMateral) == 0x000008, "Wrong alignment on PredictionLineComponent_SetLineMeshMateral");
static_assert(sizeof(PredictionLineComponent_SetLineMeshMateral) == 0x000008, "Wrong size on PredictionLineComponent_SetLineMeshMateral");
static_assert(offsetof(PredictionLineComponent_SetLineMeshMateral, Material) == 0x000000, "Member 'PredictionLineComponent_SetLineMeshMateral::Material' has a wrong offset!");

// Function InGameModule.PredictionLineComponent.SetViewType
// 0x0001 (0x0001 - 0x0000)
struct PredictionLineComponent_SetViewType final
{
public:
	EViewType                                     Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PredictionLineComponent_SetViewType) == 0x000001, "Wrong alignment on PredictionLineComponent_SetViewType");
static_assert(sizeof(PredictionLineComponent_SetViewType) == 0x000001, "Wrong size on PredictionLineComponent_SetViewType");
static_assert(offsetof(PredictionLineComponent_SetViewType, Type) == 0x000000, "Member 'PredictionLineComponent_SetViewType::Type' has a wrong offset!");

// Function InGameModule.PredictionLineComponent.Simulate
// 0x00C8 (0x00C8 - 0x0000)
struct PredictionLineComponent_Simulate final
{
public:
	struct FPredictProjectilePathResult           ResPathData;                                       // 0x0000(0x00B8)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                StartDir;                                          // 0x00B8(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x00C4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PredictionLineComponent_Simulate) == 0x000008, "Wrong alignment on PredictionLineComponent_Simulate");
static_assert(sizeof(PredictionLineComponent_Simulate) == 0x0000C8, "Wrong size on PredictionLineComponent_Simulate");
static_assert(offsetof(PredictionLineComponent_Simulate, ResPathData) == 0x000000, "Member 'PredictionLineComponent_Simulate::ResPathData' has a wrong offset!");
static_assert(offsetof(PredictionLineComponent_Simulate, StartDir) == 0x0000B8, "Member 'PredictionLineComponent_Simulate::StartDir' has a wrong offset!");
static_assert(offsetof(PredictionLineComponent_Simulate, Speed) == 0x0000C4, "Member 'PredictionLineComponent_Simulate::Speed' has a wrong offset!");

// Function InGameModule.PredictionLineComponent.Simulate_ToEndPos
// 0x00C8 (0x00C8 - 0x0000)
struct PredictionLineComponent_Simulate_ToEndPos final
{
public:
	struct FPredictProjectilePathResult           ResPathData;                                       // 0x0000(0x00B8)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                EndPos;                                            // 0x00B8(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArcParam;                                          // 0x00C4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PredictionLineComponent_Simulate_ToEndPos) == 0x000008, "Wrong alignment on PredictionLineComponent_Simulate_ToEndPos");
static_assert(sizeof(PredictionLineComponent_Simulate_ToEndPos) == 0x0000C8, "Wrong size on PredictionLineComponent_Simulate_ToEndPos");
static_assert(offsetof(PredictionLineComponent_Simulate_ToEndPos, ResPathData) == 0x000000, "Member 'PredictionLineComponent_Simulate_ToEndPos::ResPathData' has a wrong offset!");
static_assert(offsetof(PredictionLineComponent_Simulate_ToEndPos, EndPos) == 0x0000B8, "Member 'PredictionLineComponent_Simulate_ToEndPos::EndPos' has a wrong offset!");
static_assert(offsetof(PredictionLineComponent_Simulate_ToEndPos, ArcParam) == 0x0000C4, "Member 'PredictionLineComponent_Simulate_ToEndPos::ArcParam' has a wrong offset!");

// Function InGameModule.ProjectileReplicateBattleComponent.CreateGenerate_RPC
// 0x0070 (0x0070 - 0x0000)
struct ProjectileReplicateBattleComponent_CreateGenerate_RPC final
{
public:
	struct FProjectileGenerateRep                 Rep;                                               // 0x0000(0x0070)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileReplicateBattleComponent_CreateGenerate_RPC) == 0x000010, "Wrong alignment on ProjectileReplicateBattleComponent_CreateGenerate_RPC");
static_assert(sizeof(ProjectileReplicateBattleComponent_CreateGenerate_RPC) == 0x000070, "Wrong size on ProjectileReplicateBattleComponent_CreateGenerate_RPC");
static_assert(offsetof(ProjectileReplicateBattleComponent_CreateGenerate_RPC, Rep) == 0x000000, "Member 'ProjectileReplicateBattleComponent_CreateGenerate_RPC::Rep' has a wrong offset!");

// Function InGameModule.ProjectileReplicateBattleComponent.DelaySpawnReplicateTest_RPC
// 0x0001 (0x0001 - 0x0000)
struct ProjectileReplicateBattleComponent_DelaySpawnReplicateTest_RPC final
{
public:
	struct FDelaySpawnReplicateTestRep            Data;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileReplicateBattleComponent_DelaySpawnReplicateTest_RPC) == 0x000001, "Wrong alignment on ProjectileReplicateBattleComponent_DelaySpawnReplicateTest_RPC");
static_assert(sizeof(ProjectileReplicateBattleComponent_DelaySpawnReplicateTest_RPC) == 0x000001, "Wrong size on ProjectileReplicateBattleComponent_DelaySpawnReplicateTest_RPC");
static_assert(offsetof(ProjectileReplicateBattleComponent_DelaySpawnReplicateTest_RPC, Data) == 0x000000, "Member 'ProjectileReplicateBattleComponent_DelaySpawnReplicateTest_RPC::Data' has a wrong offset!");

// Function InGameModule.ProjectileReplicateBattleComponent.DestroyBullet_RPC
// 0x0020 (0x0020 - 0x0000)
struct ProjectileReplicateBattleComponent_DestroyBullet_RPC final
{
public:
	struct FDestroyBulletRepImpl                  Data;                                              // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileReplicateBattleComponent_DestroyBullet_RPC) == 0x000008, "Wrong alignment on ProjectileReplicateBattleComponent_DestroyBullet_RPC");
static_assert(sizeof(ProjectileReplicateBattleComponent_DestroyBullet_RPC) == 0x000020, "Wrong size on ProjectileReplicateBattleComponent_DestroyBullet_RPC");
static_assert(offsetof(ProjectileReplicateBattleComponent_DestroyBullet_RPC, Data) == 0x000000, "Member 'ProjectileReplicateBattleComponent_DestroyBullet_RPC::Data' has a wrong offset!");

// Function InGameModule.ProjectileReplicateBattleComponent.DestroyGenerator_RPC
// 0x0008 (0x0008 - 0x0000)
struct ProjectileReplicateBattleComponent_DestroyGenerator_RPC final
{
public:
	struct FDestroyGeneratorRep                   Rep;                                               // 0x0000(0x0008)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileReplicateBattleComponent_DestroyGenerator_RPC) == 0x000004, "Wrong alignment on ProjectileReplicateBattleComponent_DestroyGenerator_RPC");
static_assert(sizeof(ProjectileReplicateBattleComponent_DestroyGenerator_RPC) == 0x000008, "Wrong size on ProjectileReplicateBattleComponent_DestroyGenerator_RPC");
static_assert(offsetof(ProjectileReplicateBattleComponent_DestroyGenerator_RPC, Rep) == 0x000000, "Member 'ProjectileReplicateBattleComponent_DestroyGenerator_RPC::Rep' has a wrong offset!");

// Function InGameModule.ProjectileReplicateBattleComponent.GeneralData_RPC
// 0x0020 (0x0020 - 0x0000)
struct ProjectileReplicateBattleComponent_GeneralData_RPC final
{
public:
	struct FGeneralDataRep                        Data;                                              // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileReplicateBattleComponent_GeneralData_RPC) == 0x000008, "Wrong alignment on ProjectileReplicateBattleComponent_GeneralData_RPC");
static_assert(sizeof(ProjectileReplicateBattleComponent_GeneralData_RPC) == 0x000020, "Wrong size on ProjectileReplicateBattleComponent_GeneralData_RPC");
static_assert(offsetof(ProjectileReplicateBattleComponent_GeneralData_RPC, Data) == 0x000000, "Member 'ProjectileReplicateBattleComponent_GeneralData_RPC::Data' has a wrong offset!");

// Function InGameModule.ProjectileReplicateBattleComponent.GeneratorRestoration_RPC
// 0x0D04 (0x0D04 - 0x0000)
struct ProjectileReplicateBattleComponent_GeneratorRestoration_RPC final
{
public:
	struct FRestorationGeneratorRep               Data;                                              // 0x0000(0x0D04)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileReplicateBattleComponent_GeneratorRestoration_RPC) == 0x000004, "Wrong alignment on ProjectileReplicateBattleComponent_GeneratorRestoration_RPC");
static_assert(sizeof(ProjectileReplicateBattleComponent_GeneratorRestoration_RPC) == 0x000D04, "Wrong size on ProjectileReplicateBattleComponent_GeneratorRestoration_RPC");
static_assert(offsetof(ProjectileReplicateBattleComponent_GeneratorRestoration_RPC, Data) == 0x000000, "Member 'ProjectileReplicateBattleComponent_GeneratorRestoration_RPC::Data' has a wrong offset!");

// Function InGameModule.ProjectileReplicateBattleComponent.State_RPC
// 0x0008 (0x0008 - 0x0000)
struct ProjectileReplicateBattleComponent_State_RPC final
{
public:
	int32                                         State;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenID;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileReplicateBattleComponent_State_RPC) == 0x000004, "Wrong alignment on ProjectileReplicateBattleComponent_State_RPC");
static_assert(sizeof(ProjectileReplicateBattleComponent_State_RPC) == 0x000008, "Wrong size on ProjectileReplicateBattleComponent_State_RPC");
static_assert(offsetof(ProjectileReplicateBattleComponent_State_RPC, State) == 0x000000, "Member 'ProjectileReplicateBattleComponent_State_RPC::State' has a wrong offset!");
static_assert(offsetof(ProjectileReplicateBattleComponent_State_RPC, GenID) == 0x000004, "Member 'ProjectileReplicateBattleComponent_State_RPC::GenID' has a wrong offset!");

// Function InGameModule.Reflect.OnHitBullet
// 0x00B0 (0x00B0 - 0x0000)
struct Reflect_OnHitBullet final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABullet*                                OtherBullet;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00AC(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Reflect_OnHitBullet) == 0x000008, "Wrong alignment on Reflect_OnHitBullet");
static_assert(sizeof(Reflect_OnHitBullet) == 0x0000B0, "Wrong size on Reflect_OnHitBullet");
static_assert(offsetof(Reflect_OnHitBullet, HitComponent) == 0x000000, "Member 'Reflect_OnHitBullet::HitComponent' has a wrong offset!");
static_assert(offsetof(Reflect_OnHitBullet, OtherBullet) == 0x000008, "Member 'Reflect_OnHitBullet::OtherBullet' has a wrong offset!");
static_assert(offsetof(Reflect_OnHitBullet, OtherComp) == 0x000010, "Member 'Reflect_OnHitBullet::OtherComp' has a wrong offset!");
static_assert(offsetof(Reflect_OnHitBullet, NormalImpulse) == 0x000018, "Member 'Reflect_OnHitBullet::NormalImpulse' has a wrong offset!");
static_assert(offsetof(Reflect_OnHitBullet, Hit) == 0x000024, "Member 'Reflect_OnHitBullet::Hit' has a wrong offset!");
static_assert(offsetof(Reflect_OnHitBullet, ReturnValue) == 0x0000AC, "Member 'Reflect_OnHitBullet::ReturnValue' has a wrong offset!");

// Function InGameModule.RestraintEffectComponent.BP_RegisterEffect
// 0x0001 (0x0001 - 0x0000)
struct RestraintEffectComponent_BP_RegisterEffect final
{
public:
	ERestraintType                                InEffectType;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RestraintEffectComponent_BP_RegisterEffect) == 0x000001, "Wrong alignment on RestraintEffectComponent_BP_RegisterEffect");
static_assert(sizeof(RestraintEffectComponent_BP_RegisterEffect) == 0x000001, "Wrong size on RestraintEffectComponent_BP_RegisterEffect");
static_assert(offsetof(RestraintEffectComponent_BP_RegisterEffect, InEffectType) == 0x000000, "Member 'RestraintEffectComponent_BP_RegisterEffect::InEffectType' has a wrong offset!");

// Function InGameModule.RestraintEffectComponent.OnFinishParticle
// 0x0008 (0x0008 - 0x0000)
struct RestraintEffectComponent_OnFinishParticle final
{
public:
	class UParticleSystemComponent*               Particle;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RestraintEffectComponent_OnFinishParticle) == 0x000008, "Wrong alignment on RestraintEffectComponent_OnFinishParticle");
static_assert(sizeof(RestraintEffectComponent_OnFinishParticle) == 0x000008, "Wrong size on RestraintEffectComponent_OnFinishParticle");
static_assert(offsetof(RestraintEffectComponent_OnFinishParticle, Particle) == 0x000000, "Member 'RestraintEffectComponent_OnFinishParticle::Particle' has a wrong offset!");

// Function InGameModule.RetireAppWidget.OnCancelEvent
// 0x0010 (0x0010 - 0x0000)
struct RetireAppWidget_OnCancelEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RetireAppWidget_OnCancelEvent) == 0x000008, "Wrong alignment on RetireAppWidget_OnCancelEvent");
static_assert(sizeof(RetireAppWidget_OnCancelEvent) == 0x000010, "Wrong size on RetireAppWidget_OnCancelEvent");
static_assert(offsetof(RetireAppWidget_OnCancelEvent, Widget) == 0x000000, "Member 'RetireAppWidget_OnCancelEvent::Widget' has a wrong offset!");
static_assert(offsetof(RetireAppWidget_OnCancelEvent, InputType) == 0x000008, "Member 'RetireAppWidget_OnCancelEvent::InputType' has a wrong offset!");

// Function InGameModule.RetireAppWidget.OnPopupButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct RetireAppWidget_OnPopupButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RetireAppWidget_OnPopupButtonEvent) == 0x000008, "Wrong alignment on RetireAppWidget_OnPopupButtonEvent");
static_assert(sizeof(RetireAppWidget_OnPopupButtonEvent) == 0x000010, "Wrong size on RetireAppWidget_OnPopupButtonEvent");
static_assert(offsetof(RetireAppWidget_OnPopupButtonEvent, Widget) == 0x000000, "Member 'RetireAppWidget_OnPopupButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(RetireAppWidget_OnPopupButtonEvent, InputType) == 0x000008, "Member 'RetireAppWidget_OnPopupButtonEvent::InputType' has a wrong offset!");
static_assert(offsetof(RetireAppWidget_OnPopupButtonEvent, LeftButton) == 0x000009, "Member 'RetireAppWidget_OnPopupButtonEvent::LeftButton' has a wrong offset!");

// Function InGameModule.ReturnMainMenuAppWidget.OnCancelEvent
// 0x0010 (0x0010 - 0x0000)
struct ReturnMainMenuAppWidget_OnCancelEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ReturnMainMenuAppWidget_OnCancelEvent) == 0x000008, "Wrong alignment on ReturnMainMenuAppWidget_OnCancelEvent");
static_assert(sizeof(ReturnMainMenuAppWidget_OnCancelEvent) == 0x000010, "Wrong size on ReturnMainMenuAppWidget_OnCancelEvent");
static_assert(offsetof(ReturnMainMenuAppWidget_OnCancelEvent, Widget) == 0x000000, "Member 'ReturnMainMenuAppWidget_OnCancelEvent::Widget' has a wrong offset!");
static_assert(offsetof(ReturnMainMenuAppWidget_OnCancelEvent, InputType) == 0x000008, "Member 'ReturnMainMenuAppWidget_OnCancelEvent::InputType' has a wrong offset!");

// Function InGameModule.ReturnMainMenuAppWidget.OnPopupButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct ReturnMainMenuAppWidget_OnPopupButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ReturnMainMenuAppWidget_OnPopupButtonEvent) == 0x000008, "Wrong alignment on ReturnMainMenuAppWidget_OnPopupButtonEvent");
static_assert(sizeof(ReturnMainMenuAppWidget_OnPopupButtonEvent) == 0x000010, "Wrong size on ReturnMainMenuAppWidget_OnPopupButtonEvent");
static_assert(offsetof(ReturnMainMenuAppWidget_OnPopupButtonEvent, Widget) == 0x000000, "Member 'ReturnMainMenuAppWidget_OnPopupButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(ReturnMainMenuAppWidget_OnPopupButtonEvent, InputType) == 0x000008, "Member 'ReturnMainMenuAppWidget_OnPopupButtonEvent::InputType' has a wrong offset!");
static_assert(offsetof(ReturnMainMenuAppWidget_OnPopupButtonEvent, LeftButton) == 0x000009, "Member 'ReturnMainMenuAppWidget_OnPopupButtonEvent::LeftButton' has a wrong offset!");

// Function InGameModule.RiseCementGen.RiseCement_RPC
// 0x0003 (0x0003 - 0x0000)
struct RiseCementGen_RiseCement_RPC final
{
public:
	struct FRiseCementGenRep                      Rep;                                               // 0x0000(0x0003)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiseCementGen_RiseCement_RPC) == 0x000001, "Wrong alignment on RiseCementGen_RiseCement_RPC");
static_assert(sizeof(RiseCementGen_RiseCement_RPC) == 0x000003, "Wrong size on RiseCementGen_RiseCement_RPC");
static_assert(offsetof(RiseCementGen_RiseCement_RPC, Rep) == 0x000000, "Member 'RiseCementGen_RiseCement_RPC::Rep' has a wrong offset!");

// Function InGameModule.ShortcutItemWidget.OnBeginUsingSupply
// 0x0008 (0x0008 - 0x0000)
struct ShortcutItemWidget_OnBeginUsingSupply final
{
public:
	const class USupplyHolder*                    Holder;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShortcutItemWidget_OnBeginUsingSupply) == 0x000008, "Wrong alignment on ShortcutItemWidget_OnBeginUsingSupply");
static_assert(sizeof(ShortcutItemWidget_OnBeginUsingSupply) == 0x000008, "Wrong size on ShortcutItemWidget_OnBeginUsingSupply");
static_assert(offsetof(ShortcutItemWidget_OnBeginUsingSupply, Holder) == 0x000000, "Member 'ShortcutItemWidget_OnBeginUsingSupply::Holder' has a wrong offset!");

// Function InGameModule.ShortcutItemWidget.OnEndUsingSupply
// 0x0008 (0x0008 - 0x0000)
struct ShortcutItemWidget_OnEndUsingSupply final
{
public:
	const class USupplyHolder*                    Holder;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShortcutItemWidget_OnEndUsingSupply) == 0x000008, "Wrong alignment on ShortcutItemWidget_OnEndUsingSupply");
static_assert(sizeof(ShortcutItemWidget_OnEndUsingSupply) == 0x000008, "Wrong size on ShortcutItemWidget_OnEndUsingSupply");
static_assert(offsetof(ShortcutItemWidget_OnEndUsingSupply, Holder) == 0x000000, "Member 'ShortcutItemWidget_OnEndUsingSupply::Holder' has a wrong offset!");

// Function InGameModule.SimpleCharacter.BP_ChangeState
// 0x0008 (0x0008 - 0x0000)
struct SimpleCharacter_BP_ChangeState final
{
public:
	class FName                                   StateName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleCharacter_BP_ChangeState) == 0x000004, "Wrong alignment on SimpleCharacter_BP_ChangeState");
static_assert(sizeof(SimpleCharacter_BP_ChangeState) == 0x000008, "Wrong size on SimpleCharacter_BP_ChangeState");
static_assert(offsetof(SimpleCharacter_BP_ChangeState, StateName) == 0x000000, "Member 'SimpleCharacter_BP_ChangeState::StateName' has a wrong offset!");

// Function InGameModule.SimulatedPlayerHudManager.BeginChangeGuard
// 0x0001 (0x0001 - 0x0000)
struct SimulatedPlayerHudManager_BeginChangeGuard final
{
public:
	bool                                          bIsDamage;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimulatedPlayerHudManager_BeginChangeGuard) == 0x000001, "Wrong alignment on SimulatedPlayerHudManager_BeginChangeGuard");
static_assert(sizeof(SimulatedPlayerHudManager_BeginChangeGuard) == 0x000001, "Wrong size on SimulatedPlayerHudManager_BeginChangeGuard");
static_assert(offsetof(SimulatedPlayerHudManager_BeginChangeGuard, bIsDamage) == 0x000000, "Member 'SimulatedPlayerHudManager_BeginChangeGuard::bIsDamage' has a wrong offset!");

// Function InGameModule.SimulatedPlayerHudManager.BeginChangeHealth
// 0x0001 (0x0001 - 0x0000)
struct SimulatedPlayerHudManager_BeginChangeHealth final
{
public:
	bool                                          bIsDamage;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimulatedPlayerHudManager_BeginChangeHealth) == 0x000001, "Wrong alignment on SimulatedPlayerHudManager_BeginChangeHealth");
static_assert(sizeof(SimulatedPlayerHudManager_BeginChangeHealth) == 0x000001, "Wrong size on SimulatedPlayerHudManager_BeginChangeHealth");
static_assert(offsetof(SimulatedPlayerHudManager_BeginChangeHealth, bIsDamage) == 0x000000, "Member 'SimulatedPlayerHudManager_BeginChangeHealth::bIsDamage' has a wrong offset!");

// Function InGameModule.SimulatedPlayerHudManager.OnChangeGuardValue
// 0x0004 (0x0004 - 0x0000)
struct SimulatedPlayerHudManager_OnChangeGuardValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimulatedPlayerHudManager_OnChangeGuardValue) == 0x000004, "Wrong alignment on SimulatedPlayerHudManager_OnChangeGuardValue");
static_assert(sizeof(SimulatedPlayerHudManager_OnChangeGuardValue) == 0x000004, "Wrong size on SimulatedPlayerHudManager_OnChangeGuardValue");
static_assert(offsetof(SimulatedPlayerHudManager_OnChangeGuardValue, Value) == 0x000000, "Member 'SimulatedPlayerHudManager_OnChangeGuardValue::Value' has a wrong offset!");

// Function InGameModule.SimulatedPlayerHudManager.OnChangeHealthValue
// 0x0004 (0x0004 - 0x0000)
struct SimulatedPlayerHudManager_OnChangeHealthValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimulatedPlayerHudManager_OnChangeHealthValue) == 0x000004, "Wrong alignment on SimulatedPlayerHudManager_OnChangeHealthValue");
static_assert(sizeof(SimulatedPlayerHudManager_OnChangeHealthValue) == 0x000004, "Wrong size on SimulatedPlayerHudManager_OnChangeHealthValue");
static_assert(offsetof(SimulatedPlayerHudManager_OnChangeHealthValue, Value) == 0x000000, "Member 'SimulatedPlayerHudManager_OnChangeHealthValue::Value' has a wrong offset!");

// Function InGameModule.SimulatedPlayerHudManager.OnVCBeginTalk
// 0x0010 (0x0010 - 0x0000)
struct SimulatedPlayerHudManager_OnVCBeginTalk final
{
public:
	class FString                                 UniqueNetId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimulatedPlayerHudManager_OnVCBeginTalk) == 0x000008, "Wrong alignment on SimulatedPlayerHudManager_OnVCBeginTalk");
static_assert(sizeof(SimulatedPlayerHudManager_OnVCBeginTalk) == 0x000010, "Wrong size on SimulatedPlayerHudManager_OnVCBeginTalk");
static_assert(offsetof(SimulatedPlayerHudManager_OnVCBeginTalk, UniqueNetId) == 0x000000, "Member 'SimulatedPlayerHudManager_OnVCBeginTalk::UniqueNetId' has a wrong offset!");

// Function InGameModule.SimulatedPlayerHudManager.OnVCConnected
// 0x0010 (0x0010 - 0x0000)
struct SimulatedPlayerHudManager_OnVCConnected final
{
public:
	class FString                                 UniqueNetId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimulatedPlayerHudManager_OnVCConnected) == 0x000008, "Wrong alignment on SimulatedPlayerHudManager_OnVCConnected");
static_assert(sizeof(SimulatedPlayerHudManager_OnVCConnected) == 0x000010, "Wrong size on SimulatedPlayerHudManager_OnVCConnected");
static_assert(offsetof(SimulatedPlayerHudManager_OnVCConnected, UniqueNetId) == 0x000000, "Member 'SimulatedPlayerHudManager_OnVCConnected::UniqueNetId' has a wrong offset!");

// Function InGameModule.SimulatedPlayerHudManager.OnVCDisconnected
// 0x0010 (0x0010 - 0x0000)
struct SimulatedPlayerHudManager_OnVCDisconnected final
{
public:
	class FString                                 UniqueNetId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimulatedPlayerHudManager_OnVCDisconnected) == 0x000008, "Wrong alignment on SimulatedPlayerHudManager_OnVCDisconnected");
static_assert(sizeof(SimulatedPlayerHudManager_OnVCDisconnected) == 0x000010, "Wrong size on SimulatedPlayerHudManager_OnVCDisconnected");
static_assert(offsetof(SimulatedPlayerHudManager_OnVCDisconnected, UniqueNetId) == 0x000000, "Member 'SimulatedPlayerHudManager_OnVCDisconnected::UniqueNetId' has a wrong offset!");

// Function InGameModule.SimulatedPlayerHudManager.OnVCEndTalk
// 0x0010 (0x0010 - 0x0000)
struct SimulatedPlayerHudManager_OnVCEndTalk final
{
public:
	class FString                                 UniqueNetId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimulatedPlayerHudManager_OnVCEndTalk) == 0x000008, "Wrong alignment on SimulatedPlayerHudManager_OnVCEndTalk");
static_assert(sizeof(SimulatedPlayerHudManager_OnVCEndTalk) == 0x000010, "Wrong size on SimulatedPlayerHudManager_OnVCEndTalk");
static_assert(offsetof(SimulatedPlayerHudManager_OnVCEndTalk, UniqueNetId) == 0x000000, "Member 'SimulatedPlayerHudManager_OnVCEndTalk::UniqueNetId' has a wrong offset!");

// Function InGameModule.SimulatedPlayerHudManager.OnVCMute
// 0x0010 (0x0010 - 0x0000)
struct SimulatedPlayerHudManager_OnVCMute final
{
public:
	class FString                                 UniqueNetId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimulatedPlayerHudManager_OnVCMute) == 0x000008, "Wrong alignment on SimulatedPlayerHudManager_OnVCMute");
static_assert(sizeof(SimulatedPlayerHudManager_OnVCMute) == 0x000010, "Wrong size on SimulatedPlayerHudManager_OnVCMute");
static_assert(offsetof(SimulatedPlayerHudManager_OnVCMute, UniqueNetId) == 0x000000, "Member 'SimulatedPlayerHudManager_OnVCMute::UniqueNetId' has a wrong offset!");

// Function InGameModule.SimulatedPlayerHudManager.OnVCUnMute
// 0x0010 (0x0010 - 0x0000)
struct SimulatedPlayerHudManager_OnVCUnMute final
{
public:
	class FString                                 UniqueNetId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimulatedPlayerHudManager_OnVCUnMute) == 0x000008, "Wrong alignment on SimulatedPlayerHudManager_OnVCUnMute");
static_assert(sizeof(SimulatedPlayerHudManager_OnVCUnMute) == 0x000010, "Wrong size on SimulatedPlayerHudManager_OnVCUnMute");
static_assert(offsetof(SimulatedPlayerHudManager_OnVCUnMute, UniqueNetId) == 0x000000, "Member 'SimulatedPlayerHudManager_OnVCUnMute::UniqueNetId' has a wrong offset!");

// Function InGameModule.SkillManagementComponent.BP_SetCopyCharacter
// 0x0008 (0x0008 - 0x0000)
struct SkillManagementComponent_BP_SetCopyCharacter final
{
public:
	class ACharacterBattle*                       Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillManagementComponent_BP_SetCopyCharacter) == 0x000008, "Wrong alignment on SkillManagementComponent_BP_SetCopyCharacter");
static_assert(sizeof(SkillManagementComponent_BP_SetCopyCharacter) == 0x000008, "Wrong size on SkillManagementComponent_BP_SetCopyCharacter");
static_assert(offsetof(SkillManagementComponent_BP_SetCopyCharacter, Character) == 0x000000, "Member 'SkillManagementComponent_BP_SetCopyCharacter::Character' has a wrong offset!");

// Function InGameModule.SkillManagementComponent.BP_StartCopyMode
// 0x0004 (0x0004 - 0x0000)
struct SkillManagementComponent_BP_StartCopyMode final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillManagementComponent_BP_StartCopyMode) == 0x000004, "Wrong alignment on SkillManagementComponent_BP_StartCopyMode");
static_assert(sizeof(SkillManagementComponent_BP_StartCopyMode) == 0x000004, "Wrong size on SkillManagementComponent_BP_StartCopyMode");
static_assert(offsetof(SkillManagementComponent_BP_StartCopyMode, Time) == 0x000000, "Member 'SkillManagementComponent_BP_StartCopyMode::Time' has a wrong offset!");

// Function InGameModule.SkillManagementComponent.SetOriginalSkill_ToClient
// 0x0018 (0x0018 - 0x0000)
struct SkillManagementComponent_SetOriginalSkill_ToClient final
{
public:
	EAttackId                                     AttackId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkillInfo                             NewInfo;                                           // 0x0008(0x0010)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillManagementComponent_SetOriginalSkill_ToClient) == 0x000008, "Wrong alignment on SkillManagementComponent_SetOriginalSkill_ToClient");
static_assert(sizeof(SkillManagementComponent_SetOriginalSkill_ToClient) == 0x000018, "Wrong size on SkillManagementComponent_SetOriginalSkill_ToClient");
static_assert(offsetof(SkillManagementComponent_SetOriginalSkill_ToClient, AttackId) == 0x000000, "Member 'SkillManagementComponent_SetOriginalSkill_ToClient::AttackId' has a wrong offset!");
static_assert(offsetof(SkillManagementComponent_SetOriginalSkill_ToClient, NewInfo) == 0x000008, "Member 'SkillManagementComponent_SetOriginalSkill_ToClient::NewInfo' has a wrong offset!");

// Function InGameModule.SkillManagementComponent.SetOriginalSkill_ToServer
// 0x0018 (0x0018 - 0x0000)
struct SkillManagementComponent_SetOriginalSkill_ToServer final
{
public:
	EAttackId                                     AttackId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkillInfo                             NewInfo;                                           // 0x0008(0x0010)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillManagementComponent_SetOriginalSkill_ToServer) == 0x000008, "Wrong alignment on SkillManagementComponent_SetOriginalSkill_ToServer");
static_assert(sizeof(SkillManagementComponent_SetOriginalSkill_ToServer) == 0x000018, "Wrong size on SkillManagementComponent_SetOriginalSkill_ToServer");
static_assert(offsetof(SkillManagementComponent_SetOriginalSkill_ToServer, AttackId) == 0x000000, "Member 'SkillManagementComponent_SetOriginalSkill_ToServer::AttackId' has a wrong offset!");
static_assert(offsetof(SkillManagementComponent_SetOriginalSkill_ToServer, NewInfo) == 0x000008, "Member 'SkillManagementComponent_SetOriginalSkill_ToServer::NewInfo' has a wrong offset!");

// Function InGameModule.SkillManagementComponent.BP_IsCopyStocked
// 0x0001 (0x0001 - 0x0000)
struct SkillManagementComponent_BP_IsCopyStocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillManagementComponent_BP_IsCopyStocked) == 0x000001, "Wrong alignment on SkillManagementComponent_BP_IsCopyStocked");
static_assert(sizeof(SkillManagementComponent_BP_IsCopyStocked) == 0x000001, "Wrong size on SkillManagementComponent_BP_IsCopyStocked");
static_assert(offsetof(SkillManagementComponent_BP_IsCopyStocked, ReturnValue) == 0x000000, "Member 'SkillManagementComponent_BP_IsCopyStocked::ReturnValue' has a wrong offset!");

// Function InGameModule.SkillManagementComponent.BP_IsEnableCopyMode
// 0x0001 (0x0001 - 0x0000)
struct SkillManagementComponent_BP_IsEnableCopyMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillManagementComponent_BP_IsEnableCopyMode) == 0x000001, "Wrong alignment on SkillManagementComponent_BP_IsEnableCopyMode");
static_assert(sizeof(SkillManagementComponent_BP_IsEnableCopyMode) == 0x000001, "Wrong size on SkillManagementComponent_BP_IsEnableCopyMode");
static_assert(offsetof(SkillManagementComponent_BP_IsEnableCopyMode, ReturnValue) == 0x000000, "Member 'SkillManagementComponent_BP_IsEnableCopyMode::ReturnValue' has a wrong offset!");

// Function InGameModule.SpectatingButtonGuideWidget.AddedPlayer
// 0x0008 (0x0008 - 0x0000)
struct SpectatingButtonGuideWidget_AddedPlayer final
{
public:
	class AHerovsPlayerState*                     AddedPlayer_0;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatingButtonGuideWidget_AddedPlayer) == 0x000008, "Wrong alignment on SpectatingButtonGuideWidget_AddedPlayer");
static_assert(sizeof(SpectatingButtonGuideWidget_AddedPlayer) == 0x000008, "Wrong size on SpectatingButtonGuideWidget_AddedPlayer");
static_assert(offsetof(SpectatingButtonGuideWidget_AddedPlayer, AddedPlayer_0) == 0x000000, "Member 'SpectatingButtonGuideWidget_AddedPlayer::AddedPlayer_0' has a wrong offset!");

// Function InGameModule.SpectatingButtonGuideWidget.OnDecideChangePlayerViewNextButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct SpectatingButtonGuideWidget_OnDecideChangePlayerViewNextButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpectatingButtonGuideWidget_OnDecideChangePlayerViewNextButtonEvent) == 0x000008, "Wrong alignment on SpectatingButtonGuideWidget_OnDecideChangePlayerViewNextButtonEvent");
static_assert(sizeof(SpectatingButtonGuideWidget_OnDecideChangePlayerViewNextButtonEvent) == 0x000010, "Wrong size on SpectatingButtonGuideWidget_OnDecideChangePlayerViewNextButtonEvent");
static_assert(offsetof(SpectatingButtonGuideWidget_OnDecideChangePlayerViewNextButtonEvent, Widget) == 0x000000, "Member 'SpectatingButtonGuideWidget_OnDecideChangePlayerViewNextButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(SpectatingButtonGuideWidget_OnDecideChangePlayerViewNextButtonEvent, InputType) == 0x000008, "Member 'SpectatingButtonGuideWidget_OnDecideChangePlayerViewNextButtonEvent::InputType' has a wrong offset!");

// Function InGameModule.SpectatingButtonGuideWidget.OnDecideChangePlayerViewPrevButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct SpectatingButtonGuideWidget_OnDecideChangePlayerViewPrevButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpectatingButtonGuideWidget_OnDecideChangePlayerViewPrevButtonEvent) == 0x000008, "Wrong alignment on SpectatingButtonGuideWidget_OnDecideChangePlayerViewPrevButtonEvent");
static_assert(sizeof(SpectatingButtonGuideWidget_OnDecideChangePlayerViewPrevButtonEvent) == 0x000010, "Wrong size on SpectatingButtonGuideWidget_OnDecideChangePlayerViewPrevButtonEvent");
static_assert(offsetof(SpectatingButtonGuideWidget_OnDecideChangePlayerViewPrevButtonEvent, Widget) == 0x000000, "Member 'SpectatingButtonGuideWidget_OnDecideChangePlayerViewPrevButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(SpectatingButtonGuideWidget_OnDecideChangePlayerViewPrevButtonEvent, InputType) == 0x000008, "Member 'SpectatingButtonGuideWidget_OnDecideChangePlayerViewPrevButtonEvent::InputType' has a wrong offset!");

// Function InGameModule.SpectatingButtonGuideWidget.OnDecideCheerButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct SpectatingButtonGuideWidget_OnDecideCheerButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpectatingButtonGuideWidget_OnDecideCheerButtonEvent) == 0x000008, "Wrong alignment on SpectatingButtonGuideWidget_OnDecideCheerButtonEvent");
static_assert(sizeof(SpectatingButtonGuideWidget_OnDecideCheerButtonEvent) == 0x000010, "Wrong size on SpectatingButtonGuideWidget_OnDecideCheerButtonEvent");
static_assert(offsetof(SpectatingButtonGuideWidget_OnDecideCheerButtonEvent, Widget) == 0x000000, "Member 'SpectatingButtonGuideWidget_OnDecideCheerButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(SpectatingButtonGuideWidget_OnDecideCheerButtonEvent, InputType) == 0x000008, "Member 'SpectatingButtonGuideWidget_OnDecideCheerButtonEvent::InputType' has a wrong offset!");

// Function InGameModule.SpectatingButtonGuideWidget.OnDecideGoToResulttButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct SpectatingButtonGuideWidget_OnDecideGoToResulttButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpectatingButtonGuideWidget_OnDecideGoToResulttButtonEvent) == 0x000008, "Wrong alignment on SpectatingButtonGuideWidget_OnDecideGoToResulttButtonEvent");
static_assert(sizeof(SpectatingButtonGuideWidget_OnDecideGoToResulttButtonEvent) == 0x000010, "Wrong size on SpectatingButtonGuideWidget_OnDecideGoToResulttButtonEvent");
static_assert(offsetof(SpectatingButtonGuideWidget_OnDecideGoToResulttButtonEvent, Widget) == 0x000000, "Member 'SpectatingButtonGuideWidget_OnDecideGoToResulttButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(SpectatingButtonGuideWidget_OnDecideGoToResulttButtonEvent, InputType) == 0x000008, "Member 'SpectatingButtonGuideWidget_OnDecideGoToResulttButtonEvent::InputType' has a wrong offset!");

// Function InGameModule.SpectatingButtonGuideWidget.OnDecideOpenProfileButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct SpectatingButtonGuideWidget_OnDecideOpenProfileButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpectatingButtonGuideWidget_OnDecideOpenProfileButtonEvent) == 0x000008, "Wrong alignment on SpectatingButtonGuideWidget_OnDecideOpenProfileButtonEvent");
static_assert(sizeof(SpectatingButtonGuideWidget_OnDecideOpenProfileButtonEvent) == 0x000010, "Wrong size on SpectatingButtonGuideWidget_OnDecideOpenProfileButtonEvent");
static_assert(offsetof(SpectatingButtonGuideWidget_OnDecideOpenProfileButtonEvent, Widget) == 0x000000, "Member 'SpectatingButtonGuideWidget_OnDecideOpenProfileButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(SpectatingButtonGuideWidget_OnDecideOpenProfileButtonEvent, InputType) == 0x000008, "Member 'SpectatingButtonGuideWidget_OnDecideOpenProfileButtonEvent::InputType' has a wrong offset!");

// Function InGameModule.SpectatingButtonGuideWidget.OnDecideOpenStatusButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct SpectatingButtonGuideWidget_OnDecideOpenStatusButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpectatingButtonGuideWidget_OnDecideOpenStatusButtonEvent) == 0x000008, "Wrong alignment on SpectatingButtonGuideWidget_OnDecideOpenStatusButtonEvent");
static_assert(sizeof(SpectatingButtonGuideWidget_OnDecideOpenStatusButtonEvent) == 0x000010, "Wrong size on SpectatingButtonGuideWidget_OnDecideOpenStatusButtonEvent");
static_assert(offsetof(SpectatingButtonGuideWidget_OnDecideOpenStatusButtonEvent, Widget) == 0x000000, "Member 'SpectatingButtonGuideWidget_OnDecideOpenStatusButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(SpectatingButtonGuideWidget_OnDecideOpenStatusButtonEvent, InputType) == 0x000008, "Member 'SpectatingButtonGuideWidget_OnDecideOpenStatusButtonEvent::InputType' has a wrong offset!");

// Function InGameModule.SpectatingButtonGuideWidget.OnDecideOpenViolationReportButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct SpectatingButtonGuideWidget_OnDecideOpenViolationReportButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpectatingButtonGuideWidget_OnDecideOpenViolationReportButtonEvent) == 0x000008, "Wrong alignment on SpectatingButtonGuideWidget_OnDecideOpenViolationReportButtonEvent");
static_assert(sizeof(SpectatingButtonGuideWidget_OnDecideOpenViolationReportButtonEvent) == 0x000010, "Wrong size on SpectatingButtonGuideWidget_OnDecideOpenViolationReportButtonEvent");
static_assert(offsetof(SpectatingButtonGuideWidget_OnDecideOpenViolationReportButtonEvent, Widget) == 0x000000, "Member 'SpectatingButtonGuideWidget_OnDecideOpenViolationReportButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(SpectatingButtonGuideWidget_OnDecideOpenViolationReportButtonEvent, InputType) == 0x000008, "Member 'SpectatingButtonGuideWidget_OnDecideOpenViolationReportButtonEvent::InputType' has a wrong offset!");

// Function InGameModule.SpectatingButtonGuideWidget.OnDecideRoomButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct SpectatingButtonGuideWidget_OnDecideRoomButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpectatingButtonGuideWidget_OnDecideRoomButtonEvent) == 0x000008, "Wrong alignment on SpectatingButtonGuideWidget_OnDecideRoomButtonEvent");
static_assert(sizeof(SpectatingButtonGuideWidget_OnDecideRoomButtonEvent) == 0x000010, "Wrong size on SpectatingButtonGuideWidget_OnDecideRoomButtonEvent");
static_assert(offsetof(SpectatingButtonGuideWidget_OnDecideRoomButtonEvent, Widget) == 0x000000, "Member 'SpectatingButtonGuideWidget_OnDecideRoomButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(SpectatingButtonGuideWidget_OnDecideRoomButtonEvent, InputType) == 0x000008, "Member 'SpectatingButtonGuideWidget_OnDecideRoomButtonEvent::InputType' has a wrong offset!");

// Function InGameModule.SpectatingButtonGuideWidget.OnRecvCheerEvent
// 0x0008 (0x0008 - 0x0000)
struct SpectatingButtonGuideWidget_OnRecvCheerEvent final
{
public:
	int32                                         CheerCount;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocalCheerCount;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatingButtonGuideWidget_OnRecvCheerEvent) == 0x000004, "Wrong alignment on SpectatingButtonGuideWidget_OnRecvCheerEvent");
static_assert(sizeof(SpectatingButtonGuideWidget_OnRecvCheerEvent) == 0x000008, "Wrong size on SpectatingButtonGuideWidget_OnRecvCheerEvent");
static_assert(offsetof(SpectatingButtonGuideWidget_OnRecvCheerEvent, CheerCount) == 0x000000, "Member 'SpectatingButtonGuideWidget_OnRecvCheerEvent::CheerCount' has a wrong offset!");
static_assert(offsetof(SpectatingButtonGuideWidget_OnRecvCheerEvent, LocalCheerCount) == 0x000004, "Member 'SpectatingButtonGuideWidget_OnRecvCheerEvent::LocalCheerCount' has a wrong offset!");

// Function InGameModule.SpectatingButtonGuideWidget.OnSetMyAd
// 0x001C (0x001C - 0x0000)
struct SpectatingButtonGuideWidget_OnSetMyAd final
{
public:
	int32                                         backgroundId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectId;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MessageId;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Message;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LeftId;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MiddId;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RightId;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatingButtonGuideWidget_OnSetMyAd) == 0x000004, "Wrong alignment on SpectatingButtonGuideWidget_OnSetMyAd");
static_assert(sizeof(SpectatingButtonGuideWidget_OnSetMyAd) == 0x00001C, "Wrong size on SpectatingButtonGuideWidget_OnSetMyAd");
static_assert(offsetof(SpectatingButtonGuideWidget_OnSetMyAd, backgroundId) == 0x000000, "Member 'SpectatingButtonGuideWidget_OnSetMyAd::backgroundId' has a wrong offset!");
static_assert(offsetof(SpectatingButtonGuideWidget_OnSetMyAd, EffectId) == 0x000004, "Member 'SpectatingButtonGuideWidget_OnSetMyAd::EffectId' has a wrong offset!");
static_assert(offsetof(SpectatingButtonGuideWidget_OnSetMyAd, MessageId) == 0x000008, "Member 'SpectatingButtonGuideWidget_OnSetMyAd::MessageId' has a wrong offset!");
static_assert(offsetof(SpectatingButtonGuideWidget_OnSetMyAd, Message) == 0x00000C, "Member 'SpectatingButtonGuideWidget_OnSetMyAd::Message' has a wrong offset!");
static_assert(offsetof(SpectatingButtonGuideWidget_OnSetMyAd, LeftId) == 0x000010, "Member 'SpectatingButtonGuideWidget_OnSetMyAd::LeftId' has a wrong offset!");
static_assert(offsetof(SpectatingButtonGuideWidget_OnSetMyAd, MiddId) == 0x000014, "Member 'SpectatingButtonGuideWidget_OnSetMyAd::MiddId' has a wrong offset!");
static_assert(offsetof(SpectatingButtonGuideWidget_OnSetMyAd, RightId) == 0x000018, "Member 'SpectatingButtonGuideWidget_OnSetMyAd::RightId' has a wrong offset!");

// Function InGameModule.SpectatingButtonGuideWidget.RemovedPlayer
// 0x0008 (0x0008 - 0x0000)
struct SpectatingButtonGuideWidget_RemovedPlayer final
{
public:
	class AHerovsPlayerState*                     RemovePlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatingButtonGuideWidget_RemovedPlayer) == 0x000008, "Wrong alignment on SpectatingButtonGuideWidget_RemovedPlayer");
static_assert(sizeof(SpectatingButtonGuideWidget_RemovedPlayer) == 0x000008, "Wrong size on SpectatingButtonGuideWidget_RemovedPlayer");
static_assert(offsetof(SpectatingButtonGuideWidget_RemovedPlayer, RemovePlayer) == 0x000000, "Member 'SpectatingButtonGuideWidget_RemovedPlayer::RemovePlayer' has a wrong offset!");

// Function InGameModule.SpectatingChangeFadeWidget.BP_StartFade
// 0x0001 (0x0001 - 0x0000)
struct SpectatingChangeFadeWidget_BP_StartFade final
{
public:
	bool                                          bNext;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatingChangeFadeWidget_BP_StartFade) == 0x000001, "Wrong alignment on SpectatingChangeFadeWidget_BP_StartFade");
static_assert(sizeof(SpectatingChangeFadeWidget_BP_StartFade) == 0x000001, "Wrong size on SpectatingChangeFadeWidget_BP_StartFade");
static_assert(offsetof(SpectatingChangeFadeWidget_BP_StartFade, bNext) == 0x000000, "Member 'SpectatingChangeFadeWidget_BP_StartFade::bNext' has a wrong offset!");

// Function InGameModule.SpectatingChangeFadeWidget.StartFade
// 0x0001 (0x0001 - 0x0000)
struct SpectatingChangeFadeWidget_StartFade final
{
public:
	bool                                          bNext;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatingChangeFadeWidget_StartFade) == 0x000001, "Wrong alignment on SpectatingChangeFadeWidget_StartFade");
static_assert(sizeof(SpectatingChangeFadeWidget_StartFade) == 0x000001, "Wrong size on SpectatingChangeFadeWidget_StartFade");
static_assert(offsetof(SpectatingChangeFadeWidget_StartFade, bNext) == 0x000000, "Member 'SpectatingChangeFadeWidget_StartFade::bNext' has a wrong offset!");

// Function InGameModule.StagePostProcessManager.OnChangeAO
// 0x0001 (0x0001 - 0x0000)
struct StagePostProcessManager_OnChangeAO final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StagePostProcessManager_OnChangeAO) == 0x000001, "Wrong alignment on StagePostProcessManager_OnChangeAO");
static_assert(sizeof(StagePostProcessManager_OnChangeAO) == 0x000001, "Wrong size on StagePostProcessManager_OnChangeAO");
static_assert(offsetof(StagePostProcessManager_OnChangeAO, bEnable) == 0x000000, "Member 'StagePostProcessManager_OnChangeAO::bEnable' has a wrong offset!");

// Function InGameModule.StatusBoxBase.BoxTick
// 0x0004 (0x0004 - 0x0000)
struct StatusBoxBase_BoxTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusBoxBase_BoxTick) == 0x000004, "Wrong alignment on StatusBoxBase_BoxTick");
static_assert(sizeof(StatusBoxBase_BoxTick) == 0x000004, "Wrong size on StatusBoxBase_BoxTick");
static_assert(offsetof(StatusBoxBase_BoxTick, DeltaTime) == 0x000000, "Member 'StatusBoxBase_BoxTick::DeltaTime' has a wrong offset!");

// Function InGameModule.StatusBoxBase.SetStatusBox
// 0x0008 (0x0008 - 0x0000)
struct StatusBoxBase_SetStatusBox final
{
public:
	class APlayerStateBattle*                     boxPlayerState;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusBoxBase_SetStatusBox) == 0x000008, "Wrong alignment on StatusBoxBase_SetStatusBox");
static_assert(sizeof(StatusBoxBase_SetStatusBox) == 0x000008, "Wrong size on StatusBoxBase_SetStatusBox");
static_assert(offsetof(StatusBoxBase_SetStatusBox, boxPlayerState) == 0x000000, "Member 'StatusBoxBase_SetStatusBox::boxPlayerState' has a wrong offset!");

// Function InGameModule.SupplyBox.OnChangeCollisionEvent
// 0x0001 (0x0001 - 0x0000)
struct SupplyBox_OnChangeCollisionEvent final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SupplyBox_OnChangeCollisionEvent) == 0x000001, "Wrong alignment on SupplyBox_OnChangeCollisionEvent");
static_assert(sizeof(SupplyBox_OnChangeCollisionEvent) == 0x000001, "Wrong size on SupplyBox_OnChangeCollisionEvent");
static_assert(offsetof(SupplyBox_OnChangeCollisionEvent, Enable) == 0x000000, "Member 'SupplyBox_OnChangeCollisionEvent::Enable' has a wrong offset!");

// Function InGameModule.SupplyBox.UnlockBegin
// 0x0008 (0x0008 - 0x0000)
struct SupplyBox_UnlockBegin final
{
public:
	class APlayerStateBattle*                     PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SupplyBox_UnlockBegin) == 0x000008, "Wrong alignment on SupplyBox_UnlockBegin");
static_assert(sizeof(SupplyBox_UnlockBegin) == 0x000008, "Wrong size on SupplyBox_UnlockBegin");
static_assert(offsetof(SupplyBox_UnlockBegin, PlayerState) == 0x000000, "Member 'SupplyBox_UnlockBegin::PlayerState' has a wrong offset!");

// Function InGameModule.SupplyBox.UnlockEnd
// 0x0008 (0x0008 - 0x0000)
struct SupplyBox_UnlockEnd final
{
public:
	class APlayerStateBattle*                     PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SupplyBox_UnlockEnd) == 0x000008, "Wrong alignment on SupplyBox_UnlockEnd");
static_assert(sizeof(SupplyBox_UnlockEnd) == 0x000008, "Wrong size on SupplyBox_UnlockEnd");
static_assert(offsetof(SupplyBox_UnlockEnd, PlayerState) == 0x000000, "Member 'SupplyBox_UnlockEnd::PlayerState' has a wrong offset!");

// Function InGameModule.SupplyBox.IsDisappear
// 0x0001 (0x0001 - 0x0000)
struct SupplyBox_IsDisappear final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SupplyBox_IsDisappear) == 0x000001, "Wrong alignment on SupplyBox_IsDisappear");
static_assert(sizeof(SupplyBox_IsDisappear) == 0x000001, "Wrong size on SupplyBox_IsDisappear");
static_assert(offsetof(SupplyBox_IsDisappear, ReturnValue) == 0x000000, "Member 'SupplyBox_IsDisappear::ReturnValue' has a wrong offset!");

// Function InGameModule.SupplyBoxManagerComponent.RemoveFromManager
// 0x0008 (0x0008 - 0x0000)
struct SupplyBoxManagerComponent_RemoveFromManager final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SupplyBoxManagerComponent_RemoveFromManager) == 0x000008, "Wrong alignment on SupplyBoxManagerComponent_RemoveFromManager");
static_assert(sizeof(SupplyBoxManagerComponent_RemoveFromManager) == 0x000008, "Wrong size on SupplyBoxManagerComponent_RemoveFromManager");
static_assert(offsetof(SupplyBoxManagerComponent_RemoveFromManager, DestroyedActor) == 0x000000, "Member 'SupplyBoxManagerComponent_RemoveFromManager::DestroyedActor' has a wrong offset!");

// Function InGameModule.SupplyBoxSpawnPoint.BP_GetAlwaysSpawnFlag
// 0x0001 (0x0001 - 0x0000)
struct SupplyBoxSpawnPoint_BP_GetAlwaysSpawnFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SupplyBoxSpawnPoint_BP_GetAlwaysSpawnFlag) == 0x000001, "Wrong alignment on SupplyBoxSpawnPoint_BP_GetAlwaysSpawnFlag");
static_assert(sizeof(SupplyBoxSpawnPoint_BP_GetAlwaysSpawnFlag) == 0x000001, "Wrong size on SupplyBoxSpawnPoint_BP_GetAlwaysSpawnFlag");
static_assert(offsetof(SupplyBoxSpawnPoint_BP_GetAlwaysSpawnFlag, ReturnValue) == 0x000000, "Member 'SupplyBoxSpawnPoint_BP_GetAlwaysSpawnFlag::ReturnValue' has a wrong offset!");

// Function InGameModule.SupplyBoxSpawnPoint.BP_GetAreaCode
// 0x0004 (0x0004 - 0x0000)
struct SupplyBoxSpawnPoint_BP_GetAreaCode final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SupplyBoxSpawnPoint_BP_GetAreaCode) == 0x000004, "Wrong alignment on SupplyBoxSpawnPoint_BP_GetAreaCode");
static_assert(sizeof(SupplyBoxSpawnPoint_BP_GetAreaCode) == 0x000004, "Wrong size on SupplyBoxSpawnPoint_BP_GetAreaCode");
static_assert(offsetof(SupplyBoxSpawnPoint_BP_GetAreaCode, ReturnValue) == 0x000000, "Member 'SupplyBoxSpawnPoint_BP_GetAreaCode::ReturnValue' has a wrong offset!");

// Function InGameModule.SupplyBoxSpawnPoint.BP_GetSupplyBoxSize
// 0x0001 (0x0001 - 0x0000)
struct SupplyBoxSpawnPoint_BP_GetSupplyBoxSize final
{
public:
	ESupplyBoxSize                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SupplyBoxSpawnPoint_BP_GetSupplyBoxSize) == 0x000001, "Wrong alignment on SupplyBoxSpawnPoint_BP_GetSupplyBoxSize");
static_assert(sizeof(SupplyBoxSpawnPoint_BP_GetSupplyBoxSize) == 0x000001, "Wrong size on SupplyBoxSpawnPoint_BP_GetSupplyBoxSize");
static_assert(offsetof(SupplyBoxSpawnPoint_BP_GetSupplyBoxSize, ReturnValue) == 0x000000, "Member 'SupplyBoxSpawnPoint_BP_GetSupplyBoxSize::ReturnValue' has a wrong offset!");

// Function InGameModule.SupplyBoxSpawnPoint.BP_SpawnType
// 0x0001 (0x0001 - 0x0000)
struct SupplyBoxSpawnPoint_BP_SpawnType final
{
public:
	ESupplyBoxSpawnType                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SupplyBoxSpawnPoint_BP_SpawnType) == 0x000001, "Wrong alignment on SupplyBoxSpawnPoint_BP_SpawnType");
static_assert(sizeof(SupplyBoxSpawnPoint_BP_SpawnType) == 0x000001, "Wrong size on SupplyBoxSpawnPoint_BP_SpawnType");
static_assert(offsetof(SupplyBoxSpawnPoint_BP_SpawnType, ReturnValue) == 0x000000, "Member 'SupplyBoxSpawnPoint_BP_SpawnType::ReturnValue' has a wrong offset!");

// Function InGameModule.SupplyGenerator.OnEndPlaySupplyActor
// 0x0010 (0x0010 - 0x0000)
struct SupplyGenerator_OnEndPlaySupplyActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SupplyGenerator_OnEndPlaySupplyActor) == 0x000008, "Wrong alignment on SupplyGenerator_OnEndPlaySupplyActor");
static_assert(sizeof(SupplyGenerator_OnEndPlaySupplyActor) == 0x000010, "Wrong size on SupplyGenerator_OnEndPlaySupplyActor");
static_assert(offsetof(SupplyGenerator_OnEndPlaySupplyActor, Actor) == 0x000000, "Member 'SupplyGenerator_OnEndPlaySupplyActor::Actor' has a wrong offset!");
static_assert(offsetof(SupplyGenerator_OnEndPlaySupplyActor, EndPlayReason) == 0x000008, "Member 'SupplyGenerator_OnEndPlaySupplyActor::EndPlayReason' has a wrong offset!");

// Function InGameModule.SupplyHolderComponent.OnChangeShoulder_NetMulticast
// 0x0004 (0x0004 - 0x0000)
struct SupplyHolderComponent_OnChangeShoulder_NetMulticast final
{
public:
	int32                                         ShoulderSize;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SupplyHolderComponent_OnChangeShoulder_NetMulticast) == 0x000004, "Wrong alignment on SupplyHolderComponent_OnChangeShoulder_NetMulticast");
static_assert(sizeof(SupplyHolderComponent_OnChangeShoulder_NetMulticast) == 0x000004, "Wrong size on SupplyHolderComponent_OnChangeShoulder_NetMulticast");
static_assert(offsetof(SupplyHolderComponent_OnChangeShoulder_NetMulticast, ShoulderSize) == 0x000000, "Member 'SupplyHolderComponent_OnChangeShoulder_NetMulticast::ShoulderSize' has a wrong offset!");

// Function InGameModule.SupplyHolderComponent.OnChangeShoulder_ToServer
// 0x0004 (0x0004 - 0x0000)
struct SupplyHolderComponent_OnChangeShoulder_ToServer final
{
public:
	uint32                                        SerialID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SupplyHolderComponent_OnChangeShoulder_ToServer) == 0x000004, "Wrong alignment on SupplyHolderComponent_OnChangeShoulder_ToServer");
static_assert(sizeof(SupplyHolderComponent_OnChangeShoulder_ToServer) == 0x000004, "Wrong size on SupplyHolderComponent_OnChangeShoulder_ToServer");
static_assert(offsetof(SupplyHolderComponent_OnChangeShoulder_ToServer, SerialID) == 0x000000, "Member 'SupplyHolderComponent_OnChangeShoulder_ToServer::SerialID' has a wrong offset!");

// Function InGameModule.SupplyHolderComponent.OnChangeSupplyRespawnCounts_NetMulticast
// 0x0002 (0x0002 - 0x0000)
struct SupplyHolderComponent_OnChangeSupplyRespawnCounts_NetMulticast final
{
public:
	uint8                                         Flagments;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RespawnSupplies;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SupplyHolderComponent_OnChangeSupplyRespawnCounts_NetMulticast) == 0x000001, "Wrong alignment on SupplyHolderComponent_OnChangeSupplyRespawnCounts_NetMulticast");
static_assert(sizeof(SupplyHolderComponent_OnChangeSupplyRespawnCounts_NetMulticast) == 0x000002, "Wrong size on SupplyHolderComponent_OnChangeSupplyRespawnCounts_NetMulticast");
static_assert(offsetof(SupplyHolderComponent_OnChangeSupplyRespawnCounts_NetMulticast, Flagments) == 0x000000, "Member 'SupplyHolderComponent_OnChangeSupplyRespawnCounts_NetMulticast::Flagments' has a wrong offset!");
static_assert(offsetof(SupplyHolderComponent_OnChangeSupplyRespawnCounts_NetMulticast, RespawnSupplies) == 0x000001, "Member 'SupplyHolderComponent_OnChangeSupplyRespawnCounts_NetMulticast::RespawnSupplies' has a wrong offset!");

// Function InGameModule.SupplyHolderComponent.OnDrop_ToServer
// 0x0018 (0x0018 - 0x0000)
struct SupplyHolderComponent_OnDrop_ToServer final
{
public:
	TArray<uint32>                                SerialID;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         LevelOverWrite;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SupplyHolderComponent_OnDrop_ToServer) == 0x000008, "Wrong alignment on SupplyHolderComponent_OnDrop_ToServer");
static_assert(sizeof(SupplyHolderComponent_OnDrop_ToServer) == 0x000018, "Wrong size on SupplyHolderComponent_OnDrop_ToServer");
static_assert(offsetof(SupplyHolderComponent_OnDrop_ToServer, SerialID) == 0x000000, "Member 'SupplyHolderComponent_OnDrop_ToServer::SerialID' has a wrong offset!");
static_assert(offsetof(SupplyHolderComponent_OnDrop_ToServer, LevelOverWrite) == 0x000010, "Member 'SupplyHolderComponent_OnDrop_ToServer::LevelOverWrite' has a wrong offset!");

// Function InGameModule.SupplyHolderComponent.OnDropForDead_ToServer
// 0x0010 (0x0010 - 0x0000)
struct SupplyHolderComponent_OnDropForDead_ToServer final
{
public:
	TArray<uint32>                                SerialID;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SupplyHolderComponent_OnDropForDead_ToServer) == 0x000008, "Wrong alignment on SupplyHolderComponent_OnDropForDead_ToServer");
static_assert(sizeof(SupplyHolderComponent_OnDropForDead_ToServer) == 0x000010, "Wrong size on SupplyHolderComponent_OnDropForDead_ToServer");
static_assert(offsetof(SupplyHolderComponent_OnDropForDead_ToServer, SerialID) == 0x000000, "Member 'SupplyHolderComponent_OnDropForDead_ToServer::SerialID' has a wrong offset!");

// Function InGameModule.SupplyHolderComponent.OnEndUsing_ToClient
// 0x0001 (0x0001 - 0x0000)
struct SupplyHolderComponent_OnEndUsing_ToClient final
{
public:
	struct FNetUseSupplyResult                    Result;                                            // 0x0000(0x0001)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SupplyHolderComponent_OnEndUsing_ToClient) == 0x000001, "Wrong alignment on SupplyHolderComponent_OnEndUsing_ToClient");
static_assert(sizeof(SupplyHolderComponent_OnEndUsing_ToClient) == 0x000001, "Wrong size on SupplyHolderComponent_OnEndUsing_ToClient");
static_assert(offsetof(SupplyHolderComponent_OnEndUsing_ToClient, Result) == 0x000000, "Member 'SupplyHolderComponent_OnEndUsing_ToClient::Result' has a wrong offset!");

// Function InGameModule.SupplyHolderComponent.OnManipulation_ToClient
// 0x0010 (0x0010 - 0x0000)
struct SupplyHolderComponent_OnManipulation_ToClient final
{
public:
	TArray<struct FNetSupplyHolderData>           List;                                              // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SupplyHolderComponent_OnManipulation_ToClient) == 0x000008, "Wrong alignment on SupplyHolderComponent_OnManipulation_ToClient");
static_assert(sizeof(SupplyHolderComponent_OnManipulation_ToClient) == 0x000010, "Wrong size on SupplyHolderComponent_OnManipulation_ToClient");
static_assert(offsetof(SupplyHolderComponent_OnManipulation_ToClient, List) == 0x000000, "Member 'SupplyHolderComponent_OnManipulation_ToClient::List' has a wrong offset!");

// Function InGameModule.SupplyHolderComponent.OnManipulation_ToServer
// 0x0010 (0x0010 - 0x0000)
struct SupplyHolderComponent_OnManipulation_ToServer final
{
public:
	TArray<struct FNetSupplyHolderData>           List;                                              // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SupplyHolderComponent_OnManipulation_ToServer) == 0x000008, "Wrong alignment on SupplyHolderComponent_OnManipulation_ToServer");
static_assert(sizeof(SupplyHolderComponent_OnManipulation_ToServer) == 0x000010, "Wrong size on SupplyHolderComponent_OnManipulation_ToServer");
static_assert(offsetof(SupplyHolderComponent_OnManipulation_ToServer, List) == 0x000000, "Member 'SupplyHolderComponent_OnManipulation_ToServer::List' has a wrong offset!");

// Function InGameModule.SupplyHolderComponent.OnPickup_ToServer
// 0x000C (0x000C - 0x0000)
struct SupplyHolderComponent_OnPickup_ToServer final
{
public:
	uint32                                        SerialID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SupplyId;                                          // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SupplyHolderComponent_OnPickup_ToServer) == 0x000004, "Wrong alignment on SupplyHolderComponent_OnPickup_ToServer");
static_assert(sizeof(SupplyHolderComponent_OnPickup_ToServer) == 0x00000C, "Wrong size on SupplyHolderComponent_OnPickup_ToServer");
static_assert(offsetof(SupplyHolderComponent_OnPickup_ToServer, SerialID) == 0x000000, "Member 'SupplyHolderComponent_OnPickup_ToServer::SerialID' has a wrong offset!");
static_assert(offsetof(SupplyHolderComponent_OnPickup_ToServer, SupplyId) == 0x000004, "Member 'SupplyHolderComponent_OnPickup_ToServer::SupplyId' has a wrong offset!");

// Function InGameModule.SupplyHolderComponent.OnSupplyEndUsedTeamMember_ToClient
// 0x0008 (0x0008 - 0x0000)
struct SupplyHolderComponent_OnSupplyEndUsedTeamMember_ToClient final
{
public:
	const class APlayerStateBattle*               UsedPlayer;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SupplyHolderComponent_OnSupplyEndUsedTeamMember_ToClient) == 0x000008, "Wrong alignment on SupplyHolderComponent_OnSupplyEndUsedTeamMember_ToClient");
static_assert(sizeof(SupplyHolderComponent_OnSupplyEndUsedTeamMember_ToClient) == 0x000008, "Wrong size on SupplyHolderComponent_OnSupplyEndUsedTeamMember_ToClient");
static_assert(offsetof(SupplyHolderComponent_OnSupplyEndUsedTeamMember_ToClient, UsedPlayer) == 0x000000, "Member 'SupplyHolderComponent_OnSupplyEndUsedTeamMember_ToClient::UsedPlayer' has a wrong offset!");

// Function InGameModule.SupplyHolderComponent.OnSupplyUpgrade_ToClient
// 0x0040 (0x0040 - 0x0000)
struct SupplyHolderComponent_OnSupplyUpgrade_ToClient final
{
public:
	struct FNetSupplyHolderData                   Data;                                              // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	uint32                                        SerialNo;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UpgradeSupplyKey;                                  // 0x0034(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SupplyHolderComponent_OnSupplyUpgrade_ToClient) == 0x000008, "Wrong alignment on SupplyHolderComponent_OnSupplyUpgrade_ToClient");
static_assert(sizeof(SupplyHolderComponent_OnSupplyUpgrade_ToClient) == 0x000040, "Wrong size on SupplyHolderComponent_OnSupplyUpgrade_ToClient");
static_assert(offsetof(SupplyHolderComponent_OnSupplyUpgrade_ToClient, Data) == 0x000000, "Member 'SupplyHolderComponent_OnSupplyUpgrade_ToClient::Data' has a wrong offset!");
static_assert(offsetof(SupplyHolderComponent_OnSupplyUpgrade_ToClient, SerialNo) == 0x000030, "Member 'SupplyHolderComponent_OnSupplyUpgrade_ToClient::SerialNo' has a wrong offset!");
static_assert(offsetof(SupplyHolderComponent_OnSupplyUpgrade_ToClient, UpgradeSupplyKey) == 0x000034, "Member 'SupplyHolderComponent_OnSupplyUpgrade_ToClient::UpgradeSupplyKey' has a wrong offset!");

// Function InGameModule.SupplyHolderComponent.OnSupplyUsedTeamMember_ToClient
// 0x0010 (0x0010 - 0x0000)
struct SupplyHolderComponent_OnSupplyUsedTeamMember_ToClient final
{
public:
	const class USupplyHolder*                    MemberHolder;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UsedSupply;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SupplyHolderComponent_OnSupplyUsedTeamMember_ToClient) == 0x000008, "Wrong alignment on SupplyHolderComponent_OnSupplyUsedTeamMember_ToClient");
static_assert(sizeof(SupplyHolderComponent_OnSupplyUsedTeamMember_ToClient) == 0x000010, "Wrong size on SupplyHolderComponent_OnSupplyUsedTeamMember_ToClient");
static_assert(offsetof(SupplyHolderComponent_OnSupplyUsedTeamMember_ToClient, MemberHolder) == 0x000000, "Member 'SupplyHolderComponent_OnSupplyUsedTeamMember_ToClient::MemberHolder' has a wrong offset!");
static_assert(offsetof(SupplyHolderComponent_OnSupplyUsedTeamMember_ToClient, UsedSupply) == 0x000008, "Member 'SupplyHolderComponent_OnSupplyUsedTeamMember_ToClient::UsedSupply' has a wrong offset!");

// Function InGameModule.SupplyHolderComponent.OnUseSupply_ToServer
// 0x0030 (0x0030 - 0x0000)
struct SupplyHolderComponent_OnUseSupply_ToServer final
{
public:
	struct FNetSupplyHolderData                   Data;                                              // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SupplyHolderComponent_OnUseSupply_ToServer) == 0x000008, "Wrong alignment on SupplyHolderComponent_OnUseSupply_ToServer");
static_assert(sizeof(SupplyHolderComponent_OnUseSupply_ToServer) == 0x000030, "Wrong size on SupplyHolderComponent_OnUseSupply_ToServer");
static_assert(offsetof(SupplyHolderComponent_OnUseSupply_ToServer, Data) == 0x000000, "Member 'SupplyHolderComponent_OnUseSupply_ToServer::Data' has a wrong offset!");

// Function InGameModule.SupplyHolderComponent.SetSkillLevel_NetMulticast
// 0x0008 (0x0008 - 0x0000)
struct SupplyHolderComponent_SetSkillLevel_NetMulticast final
{
public:
	EAttackId                                     AttackId;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SupplyHolderComponent_SetSkillLevel_NetMulticast) == 0x000004, "Wrong alignment on SupplyHolderComponent_SetSkillLevel_NetMulticast");
static_assert(sizeof(SupplyHolderComponent_SetSkillLevel_NetMulticast) == 0x000008, "Wrong size on SupplyHolderComponent_SetSkillLevel_NetMulticast");
static_assert(offsetof(SupplyHolderComponent_SetSkillLevel_NetMulticast, AttackId) == 0x000000, "Member 'SupplyHolderComponent_SetSkillLevel_NetMulticast::AttackId' has a wrong offset!");
static_assert(offsetof(SupplyHolderComponent_SetSkillLevel_NetMulticast, Level) == 0x000004, "Member 'SupplyHolderComponent_SetSkillLevel_NetMulticast::Level' has a wrong offset!");

// Function InGameModule.SupplyHolderComponent.SetSkillLevel_ToServer
// 0x0008 (0x0008 - 0x0000)
struct SupplyHolderComponent_SetSkillLevel_ToServer final
{
public:
	EAttackId                                     AttackId;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SupplyHolderComponent_SetSkillLevel_ToServer) == 0x000004, "Wrong alignment on SupplyHolderComponent_SetSkillLevel_ToServer");
static_assert(sizeof(SupplyHolderComponent_SetSkillLevel_ToServer) == 0x000008, "Wrong size on SupplyHolderComponent_SetSkillLevel_ToServer");
static_assert(offsetof(SupplyHolderComponent_SetSkillLevel_ToServer, AttackId) == 0x000000, "Member 'SupplyHolderComponent_SetSkillLevel_ToServer::AttackId' has a wrong offset!");
static_assert(offsetof(SupplyHolderComponent_SetSkillLevel_ToServer, Level) == 0x000004, "Member 'SupplyHolderComponent_SetSkillLevel_ToServer::Level' has a wrong offset!");

// Function InGameModule.SystemMenuAppWidget.BP_GrayOutTeamMemberMute
// 0x0001 (0x0001 - 0x0000)
struct SystemMenuAppWidget_BP_GrayOutTeamMemberMute final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SystemMenuAppWidget_BP_GrayOutTeamMemberMute) == 0x000001, "Wrong alignment on SystemMenuAppWidget_BP_GrayOutTeamMemberMute");
static_assert(sizeof(SystemMenuAppWidget_BP_GrayOutTeamMemberMute) == 0x000001, "Wrong size on SystemMenuAppWidget_BP_GrayOutTeamMemberMute");
static_assert(offsetof(SystemMenuAppWidget_BP_GrayOutTeamMemberMute, ReturnValue) == 0x000000, "Member 'SystemMenuAppWidget_BP_GrayOutTeamMemberMute::ReturnValue' has a wrong offset!");

// Function InGameModule.SystemMenuAppWidget.BP_OpenLevel
// 0x0030 (0x0030 - 0x0000)
struct SystemMenuAppWidget_BP_OpenLevel final
{
public:
	TSoftObjectPtr<class UWorld>                  Level;                                             // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHiddenWorldRending;                               // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SystemMenuAppWidget_BP_OpenLevel) == 0x000008, "Wrong alignment on SystemMenuAppWidget_BP_OpenLevel");
static_assert(sizeof(SystemMenuAppWidget_BP_OpenLevel) == 0x000030, "Wrong size on SystemMenuAppWidget_BP_OpenLevel");
static_assert(offsetof(SystemMenuAppWidget_BP_OpenLevel, Level) == 0x000000, "Member 'SystemMenuAppWidget_BP_OpenLevel::Level' has a wrong offset!");
static_assert(offsetof(SystemMenuAppWidget_BP_OpenLevel, bHiddenWorldRending) == 0x000028, "Member 'SystemMenuAppWidget_BP_OpenLevel::bHiddenWorldRending' has a wrong offset!");

// Function InGameModule.SystemMenuAppWidget.GetFocusButton
// 0x0008 (0x0008 - 0x0000)
struct SystemMenuAppWidget_GetFocusButton final
{
public:
	class UWidgetBase*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SystemMenuAppWidget_GetFocusButton) == 0x000008, "Wrong alignment on SystemMenuAppWidget_GetFocusButton");
static_assert(sizeof(SystemMenuAppWidget_GetFocusButton) == 0x000008, "Wrong size on SystemMenuAppWidget_GetFocusButton");
static_assert(offsetof(SystemMenuAppWidget_GetFocusButton, ReturnValue) == 0x000000, "Member 'SystemMenuAppWidget_GetFocusButton::ReturnValue' has a wrong offset!");

// Function InGameModule.SystemMenuAppWidget.OnChangeSquad
// 0x0004 (0x0004 - 0x0000)
struct SystemMenuAppWidget_OnChangeSquad final
{
public:
	int32                                         SquadNum;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SystemMenuAppWidget_OnChangeSquad) == 0x000004, "Wrong alignment on SystemMenuAppWidget_OnChangeSquad");
static_assert(sizeof(SystemMenuAppWidget_OnChangeSquad) == 0x000004, "Wrong size on SystemMenuAppWidget_OnChangeSquad");
static_assert(offsetof(SystemMenuAppWidget_OnChangeSquad, SquadNum) == 0x000000, "Member 'SystemMenuAppWidget_OnChangeSquad::SquadNum' has a wrong offset!");

// Function InGameModule.SystemMenuAppWidget.OnSetEnableRetireButton
// 0x0001 (0x0001 - 0x0000)
struct SystemMenuAppWidget_OnSetEnableRetireButton final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SystemMenuAppWidget_OnSetEnableRetireButton) == 0x000001, "Wrong alignment on SystemMenuAppWidget_OnSetEnableRetireButton");
static_assert(sizeof(SystemMenuAppWidget_OnSetEnableRetireButton) == 0x000001, "Wrong size on SystemMenuAppWidget_OnSetEnableRetireButton");
static_assert(offsetof(SystemMenuAppWidget_OnSetEnableRetireButton, bShow) == 0x000000, "Member 'SystemMenuAppWidget_OnSetEnableRetireButton::bShow' has a wrong offset!");

// Function InGameModule.SystemMenuAppWidget.ShowDebugButton
// 0x0001 (0x0001 - 0x0000)
struct SystemMenuAppWidget_ShowDebugButton final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SystemMenuAppWidget_ShowDebugButton) == 0x000001, "Wrong alignment on SystemMenuAppWidget_ShowDebugButton");
static_assert(sizeof(SystemMenuAppWidget_ShowDebugButton) == 0x000001, "Wrong size on SystemMenuAppWidget_ShowDebugButton");
static_assert(offsetof(SystemMenuAppWidget_ShowDebugButton, bShow) == 0x000000, "Member 'SystemMenuAppWidget_ShowDebugButton::bShow' has a wrong offset!");

// Function InGameModule.TakeCharacterImageWidget.CopyInfo
// 0x0060 (0x0060 - 0x0000)
struct TakeCharacterImageWidget_CopyInfo final
{
public:
	int32                                         DelayTiming;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CameraTransform;                                   // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CameraLength;                                      // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LightRotation;                                     // 0x0044(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ColorType;                                         // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0xC];                                       // 0x0054(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TakeCharacterImageWidget_CopyInfo) == 0x000010, "Wrong alignment on TakeCharacterImageWidget_CopyInfo");
static_assert(sizeof(TakeCharacterImageWidget_CopyInfo) == 0x000060, "Wrong size on TakeCharacterImageWidget_CopyInfo");
static_assert(offsetof(TakeCharacterImageWidget_CopyInfo, DelayTiming) == 0x000000, "Member 'TakeCharacterImageWidget_CopyInfo::DelayTiming' has a wrong offset!");
static_assert(offsetof(TakeCharacterImageWidget_CopyInfo, CameraTransform) == 0x000010, "Member 'TakeCharacterImageWidget_CopyInfo::CameraTransform' has a wrong offset!");
static_assert(offsetof(TakeCharacterImageWidget_CopyInfo, CameraLength) == 0x000040, "Member 'TakeCharacterImageWidget_CopyInfo::CameraLength' has a wrong offset!");
static_assert(offsetof(TakeCharacterImageWidget_CopyInfo, LightRotation) == 0x000044, "Member 'TakeCharacterImageWidget_CopyInfo::LightRotation' has a wrong offset!");
static_assert(offsetof(TakeCharacterImageWidget_CopyInfo, ColorType) == 0x000050, "Member 'TakeCharacterImageWidget_CopyInfo::ColorType' has a wrong offset!");

// Function InGameModule.TakeCharacterImageWidget.LoadInfo
// 0x0070 (0x0070 - 0x0000)
struct TakeCharacterImageWidget_LoadInfo final
{
public:
	bool                                          IsReset;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Chara1P;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Variation;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSubmissionOnly;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OutChara2P;                                        // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutDelayTiming;                                    // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OutCameraTransform;                                // 0x0020(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         OutCameraLength;                                   // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OutLightRotation;                                  // 0x0054(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         OutColorType;                                      // 0x0060(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FovValue;                                          // 0x0064(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TakeCharacterImageWidget_LoadInfo) == 0x000010, "Wrong alignment on TakeCharacterImageWidget_LoadInfo");
static_assert(sizeof(TakeCharacterImageWidget_LoadInfo) == 0x000070, "Wrong size on TakeCharacterImageWidget_LoadInfo");
static_assert(offsetof(TakeCharacterImageWidget_LoadInfo, IsReset) == 0x000000, "Member 'TakeCharacterImageWidget_LoadInfo::IsReset' has a wrong offset!");
static_assert(offsetof(TakeCharacterImageWidget_LoadInfo, Chara1P) == 0x000004, "Member 'TakeCharacterImageWidget_LoadInfo::Chara1P' has a wrong offset!");
static_assert(offsetof(TakeCharacterImageWidget_LoadInfo, Type) == 0x000008, "Member 'TakeCharacterImageWidget_LoadInfo::Type' has a wrong offset!");
static_assert(offsetof(TakeCharacterImageWidget_LoadInfo, Variation) == 0x00000C, "Member 'TakeCharacterImageWidget_LoadInfo::Variation' has a wrong offset!");
static_assert(offsetof(TakeCharacterImageWidget_LoadInfo, IsSubmissionOnly) == 0x000010, "Member 'TakeCharacterImageWidget_LoadInfo::IsSubmissionOnly' has a wrong offset!");
static_assert(offsetof(TakeCharacterImageWidget_LoadInfo, OutChara2P) == 0x000014, "Member 'TakeCharacterImageWidget_LoadInfo::OutChara2P' has a wrong offset!");
static_assert(offsetof(TakeCharacterImageWidget_LoadInfo, OutDelayTiming) == 0x000018, "Member 'TakeCharacterImageWidget_LoadInfo::OutDelayTiming' has a wrong offset!");
static_assert(offsetof(TakeCharacterImageWidget_LoadInfo, OutCameraTransform) == 0x000020, "Member 'TakeCharacterImageWidget_LoadInfo::OutCameraTransform' has a wrong offset!");
static_assert(offsetof(TakeCharacterImageWidget_LoadInfo, OutCameraLength) == 0x000050, "Member 'TakeCharacterImageWidget_LoadInfo::OutCameraLength' has a wrong offset!");
static_assert(offsetof(TakeCharacterImageWidget_LoadInfo, OutLightRotation) == 0x000054, "Member 'TakeCharacterImageWidget_LoadInfo::OutLightRotation' has a wrong offset!");
static_assert(offsetof(TakeCharacterImageWidget_LoadInfo, OutColorType) == 0x000060, "Member 'TakeCharacterImageWidget_LoadInfo::OutColorType' has a wrong offset!");
static_assert(offsetof(TakeCharacterImageWidget_LoadInfo, FovValue) == 0x000064, "Member 'TakeCharacterImageWidget_LoadInfo::FovValue' has a wrong offset!");

// Function InGameModule.TakeCharacterImageWidget.PasteInfo
// 0x0060 (0x0060 - 0x0000)
struct TakeCharacterImageWidget_PasteInfo final
{
public:
	int32                                         OutDelayTiming;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OutCameraTransform;                                // 0x0010(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         OutCameraLength;                                   // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OutLightRotation;                                  // 0x0044(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         OutColorType;                                      // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0xC];                                       // 0x0054(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TakeCharacterImageWidget_PasteInfo) == 0x000010, "Wrong alignment on TakeCharacterImageWidget_PasteInfo");
static_assert(sizeof(TakeCharacterImageWidget_PasteInfo) == 0x000060, "Wrong size on TakeCharacterImageWidget_PasteInfo");
static_assert(offsetof(TakeCharacterImageWidget_PasteInfo, OutDelayTiming) == 0x000000, "Member 'TakeCharacterImageWidget_PasteInfo::OutDelayTiming' has a wrong offset!");
static_assert(offsetof(TakeCharacterImageWidget_PasteInfo, OutCameraTransform) == 0x000010, "Member 'TakeCharacterImageWidget_PasteInfo::OutCameraTransform' has a wrong offset!");
static_assert(offsetof(TakeCharacterImageWidget_PasteInfo, OutCameraLength) == 0x000040, "Member 'TakeCharacterImageWidget_PasteInfo::OutCameraLength' has a wrong offset!");
static_assert(offsetof(TakeCharacterImageWidget_PasteInfo, OutLightRotation) == 0x000044, "Member 'TakeCharacterImageWidget_PasteInfo::OutLightRotation' has a wrong offset!");
static_assert(offsetof(TakeCharacterImageWidget_PasteInfo, OutColorType) == 0x000050, "Member 'TakeCharacterImageWidget_PasteInfo::OutColorType' has a wrong offset!");

// Function InGameModule.TakeCharacterImageWidget.SaveInfo
// 0x0070 (0x0070 - 0x0000)
struct TakeCharacterImageWidget_SaveInfo final
{
public:
	int32                                         Chara1P;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chara2P;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DelayTiming;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSubmissionOnly;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0xF];                                       // 0x0011(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CameraTransform;                                   // 0x0020(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CameraLength;                                      // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LightRotation;                                     // 0x0054(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ColorType;                                         // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FovValue;                                          // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Variation;                                         // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TakeCharacterImageWidget_SaveInfo) == 0x000010, "Wrong alignment on TakeCharacterImageWidget_SaveInfo");
static_assert(sizeof(TakeCharacterImageWidget_SaveInfo) == 0x000070, "Wrong size on TakeCharacterImageWidget_SaveInfo");
static_assert(offsetof(TakeCharacterImageWidget_SaveInfo, Chara1P) == 0x000000, "Member 'TakeCharacterImageWidget_SaveInfo::Chara1P' has a wrong offset!");
static_assert(offsetof(TakeCharacterImageWidget_SaveInfo, Type) == 0x000004, "Member 'TakeCharacterImageWidget_SaveInfo::Type' has a wrong offset!");
static_assert(offsetof(TakeCharacterImageWidget_SaveInfo, Chara2P) == 0x000008, "Member 'TakeCharacterImageWidget_SaveInfo::Chara2P' has a wrong offset!");
static_assert(offsetof(TakeCharacterImageWidget_SaveInfo, DelayTiming) == 0x00000C, "Member 'TakeCharacterImageWidget_SaveInfo::DelayTiming' has a wrong offset!");
static_assert(offsetof(TakeCharacterImageWidget_SaveInfo, IsSubmissionOnly) == 0x000010, "Member 'TakeCharacterImageWidget_SaveInfo::IsSubmissionOnly' has a wrong offset!");
static_assert(offsetof(TakeCharacterImageWidget_SaveInfo, CameraTransform) == 0x000020, "Member 'TakeCharacterImageWidget_SaveInfo::CameraTransform' has a wrong offset!");
static_assert(offsetof(TakeCharacterImageWidget_SaveInfo, CameraLength) == 0x000050, "Member 'TakeCharacterImageWidget_SaveInfo::CameraLength' has a wrong offset!");
static_assert(offsetof(TakeCharacterImageWidget_SaveInfo, LightRotation) == 0x000054, "Member 'TakeCharacterImageWidget_SaveInfo::LightRotation' has a wrong offset!");
static_assert(offsetof(TakeCharacterImageWidget_SaveInfo, ColorType) == 0x000060, "Member 'TakeCharacterImageWidget_SaveInfo::ColorType' has a wrong offset!");
static_assert(offsetof(TakeCharacterImageWidget_SaveInfo, FovValue) == 0x000064, "Member 'TakeCharacterImageWidget_SaveInfo::FovValue' has a wrong offset!");
static_assert(offsetof(TakeCharacterImageWidget_SaveInfo, Variation) == 0x000068, "Member 'TakeCharacterImageWidget_SaveInfo::Variation' has a wrong offset!");

// Function InGameModule.TakeCharacterImageWidget.SetEnableAntialias
// 0x0001 (0x0001 - 0x0000)
struct TakeCharacterImageWidget_SetEnableAntialias final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TakeCharacterImageWidget_SetEnableAntialias) == 0x000001, "Wrong alignment on TakeCharacterImageWidget_SetEnableAntialias");
static_assert(sizeof(TakeCharacterImageWidget_SetEnableAntialias) == 0x000001, "Wrong size on TakeCharacterImageWidget_SetEnableAntialias");
static_assert(offsetof(TakeCharacterImageWidget_SetEnableAntialias, Enable) == 0x000000, "Member 'TakeCharacterImageWidget_SetEnableAntialias::Enable' has a wrong offset!");

// Function InGameModule.TrainingMenuWidget.OnGetAiAction
// 0x0008 (0x0008 - 0x0000)
struct TrainingMenuWidget_OnGetAiAction final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AiActionIndex;                                     // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingMenuWidget_OnGetAiAction) == 0x000004, "Wrong alignment on TrainingMenuWidget_OnGetAiAction");
static_assert(sizeof(TrainingMenuWidget_OnGetAiAction) == 0x000008, "Wrong size on TrainingMenuWidget_OnGetAiAction");
static_assert(offsetof(TrainingMenuWidget_OnGetAiAction, Index_0) == 0x000000, "Member 'TrainingMenuWidget_OnGetAiAction::Index_0' has a wrong offset!");
static_assert(offsetof(TrainingMenuWidget_OnGetAiAction, AiActionIndex) == 0x000004, "Member 'TrainingMenuWidget_OnGetAiAction::AiActionIndex' has a wrong offset!");

// Function InGameModule.TrainingMenuWidget.OnGetAiCharacter
// 0x001C (0x001C - 0x0000)
struct TrainingMenuWidget_OnGetAiCharacter final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterId                                  CharacterId;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefUnique1Level;                                   // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefUnique2Level;                                   // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefUnique3Level;                                   // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillVariationCode;                                // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AiActionIndex;                                     // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingMenuWidget_OnGetAiCharacter) == 0x000004, "Wrong alignment on TrainingMenuWidget_OnGetAiCharacter");
static_assert(sizeof(TrainingMenuWidget_OnGetAiCharacter) == 0x00001C, "Wrong size on TrainingMenuWidget_OnGetAiCharacter");
static_assert(offsetof(TrainingMenuWidget_OnGetAiCharacter, Index_0) == 0x000000, "Member 'TrainingMenuWidget_OnGetAiCharacter::Index_0' has a wrong offset!");
static_assert(offsetof(TrainingMenuWidget_OnGetAiCharacter, CharacterId) == 0x000004, "Member 'TrainingMenuWidget_OnGetAiCharacter::CharacterId' has a wrong offset!");
static_assert(offsetof(TrainingMenuWidget_OnGetAiCharacter, DefUnique1Level) == 0x000008, "Member 'TrainingMenuWidget_OnGetAiCharacter::DefUnique1Level' has a wrong offset!");
static_assert(offsetof(TrainingMenuWidget_OnGetAiCharacter, DefUnique2Level) == 0x00000C, "Member 'TrainingMenuWidget_OnGetAiCharacter::DefUnique2Level' has a wrong offset!");
static_assert(offsetof(TrainingMenuWidget_OnGetAiCharacter, DefUnique3Level) == 0x000010, "Member 'TrainingMenuWidget_OnGetAiCharacter::DefUnique3Level' has a wrong offset!");
static_assert(offsetof(TrainingMenuWidget_OnGetAiCharacter, SkillVariationCode) == 0x000014, "Member 'TrainingMenuWidget_OnGetAiCharacter::SkillVariationCode' has a wrong offset!");
static_assert(offsetof(TrainingMenuWidget_OnGetAiCharacter, AiActionIndex) == 0x000018, "Member 'TrainingMenuWidget_OnGetAiCharacter::AiActionIndex' has a wrong offset!");

// Function InGameModule.TrainingMenuWidget.OnGetPlayerCharacter
// 0x0014 (0x0014 - 0x0000)
struct TrainingMenuWidget_OnGetPlayerCharacter final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefUnique1Level;                                   // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefUnique2Level;                                   // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefUnique3Level;                                   // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillVariationCode;                                // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingMenuWidget_OnGetPlayerCharacter) == 0x000004, "Wrong alignment on TrainingMenuWidget_OnGetPlayerCharacter");
static_assert(sizeof(TrainingMenuWidget_OnGetPlayerCharacter) == 0x000014, "Wrong size on TrainingMenuWidget_OnGetPlayerCharacter");
static_assert(offsetof(TrainingMenuWidget_OnGetPlayerCharacter, CharacterId) == 0x000000, "Member 'TrainingMenuWidget_OnGetPlayerCharacter::CharacterId' has a wrong offset!");
static_assert(offsetof(TrainingMenuWidget_OnGetPlayerCharacter, DefUnique1Level) == 0x000004, "Member 'TrainingMenuWidget_OnGetPlayerCharacter::DefUnique1Level' has a wrong offset!");
static_assert(offsetof(TrainingMenuWidget_OnGetPlayerCharacter, DefUnique2Level) == 0x000008, "Member 'TrainingMenuWidget_OnGetPlayerCharacter::DefUnique2Level' has a wrong offset!");
static_assert(offsetof(TrainingMenuWidget_OnGetPlayerCharacter, DefUnique3Level) == 0x00000C, "Member 'TrainingMenuWidget_OnGetPlayerCharacter::DefUnique3Level' has a wrong offset!");
static_assert(offsetof(TrainingMenuWidget_OnGetPlayerCharacter, SkillVariationCode) == 0x000010, "Member 'TrainingMenuWidget_OnGetPlayerCharacter::SkillVariationCode' has a wrong offset!");

// Function InGameModule.TrainingMenuWidget.OnGetSetting
// 0x0008 (0x0008 - 0x0000)
struct TrainingMenuWidget_OnGetSetting final
{
public:
	int32                                         DamageTypeIndex;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFriendlyFire;                                     // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TrainingMenuWidget_OnGetSetting) == 0x000004, "Wrong alignment on TrainingMenuWidget_OnGetSetting");
static_assert(sizeof(TrainingMenuWidget_OnGetSetting) == 0x000008, "Wrong size on TrainingMenuWidget_OnGetSetting");
static_assert(offsetof(TrainingMenuWidget_OnGetSetting, DamageTypeIndex) == 0x000000, "Member 'TrainingMenuWidget_OnGetSetting::DamageTypeIndex' has a wrong offset!");
static_assert(offsetof(TrainingMenuWidget_OnGetSetting, bFriendlyFire) == 0x000004, "Member 'TrainingMenuWidget_OnGetSetting::bFriendlyFire' has a wrong offset!");

// Function InGameModule.TrainingMenuWidget.OnSetAiCharacter
// 0x001C (0x001C - 0x0000)
struct TrainingMenuWidget_OnSetAiCharacter final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterId                                  CharacterId;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefUnique1Level;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefUnique2Level;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefUnique3Level;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillVariationCode;                                // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AiActionIndex;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingMenuWidget_OnSetAiCharacter) == 0x000004, "Wrong alignment on TrainingMenuWidget_OnSetAiCharacter");
static_assert(sizeof(TrainingMenuWidget_OnSetAiCharacter) == 0x00001C, "Wrong size on TrainingMenuWidget_OnSetAiCharacter");
static_assert(offsetof(TrainingMenuWidget_OnSetAiCharacter, Index_0) == 0x000000, "Member 'TrainingMenuWidget_OnSetAiCharacter::Index_0' has a wrong offset!");
static_assert(offsetof(TrainingMenuWidget_OnSetAiCharacter, CharacterId) == 0x000004, "Member 'TrainingMenuWidget_OnSetAiCharacter::CharacterId' has a wrong offset!");
static_assert(offsetof(TrainingMenuWidget_OnSetAiCharacter, DefUnique1Level) == 0x000008, "Member 'TrainingMenuWidget_OnSetAiCharacter::DefUnique1Level' has a wrong offset!");
static_assert(offsetof(TrainingMenuWidget_OnSetAiCharacter, DefUnique2Level) == 0x00000C, "Member 'TrainingMenuWidget_OnSetAiCharacter::DefUnique2Level' has a wrong offset!");
static_assert(offsetof(TrainingMenuWidget_OnSetAiCharacter, DefUnique3Level) == 0x000010, "Member 'TrainingMenuWidget_OnSetAiCharacter::DefUnique3Level' has a wrong offset!");
static_assert(offsetof(TrainingMenuWidget_OnSetAiCharacter, SkillVariationCode) == 0x000014, "Member 'TrainingMenuWidget_OnSetAiCharacter::SkillVariationCode' has a wrong offset!");
static_assert(offsetof(TrainingMenuWidget_OnSetAiCharacter, AiActionIndex) == 0x000018, "Member 'TrainingMenuWidget_OnSetAiCharacter::AiActionIndex' has a wrong offset!");

// Function InGameModule.TrainingMenuWidget.OnSetLeaderMode
// 0x0001 (0x0001 - 0x0000)
struct TrainingMenuWidget_OnSetLeaderMode final
{
public:
	bool                                          bLeader;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingMenuWidget_OnSetLeaderMode) == 0x000001, "Wrong alignment on TrainingMenuWidget_OnSetLeaderMode");
static_assert(sizeof(TrainingMenuWidget_OnSetLeaderMode) == 0x000001, "Wrong size on TrainingMenuWidget_OnSetLeaderMode");
static_assert(offsetof(TrainingMenuWidget_OnSetLeaderMode, bLeader) == 0x000000, "Member 'TrainingMenuWidget_OnSetLeaderMode::bLeader' has a wrong offset!");

// Function InGameModule.TrainingMenuWidget.OnSetPlayerCharacter
// 0x0014 (0x0014 - 0x0000)
struct TrainingMenuWidget_OnSetPlayerCharacter final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefUnique1Level;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefUnique2Level;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefUnique3Level;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillVariationCode;                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrainingMenuWidget_OnSetPlayerCharacter) == 0x000004, "Wrong alignment on TrainingMenuWidget_OnSetPlayerCharacter");
static_assert(sizeof(TrainingMenuWidget_OnSetPlayerCharacter) == 0x000014, "Wrong size on TrainingMenuWidget_OnSetPlayerCharacter");
static_assert(offsetof(TrainingMenuWidget_OnSetPlayerCharacter, CharacterId) == 0x000000, "Member 'TrainingMenuWidget_OnSetPlayerCharacter::CharacterId' has a wrong offset!");
static_assert(offsetof(TrainingMenuWidget_OnSetPlayerCharacter, DefUnique1Level) == 0x000004, "Member 'TrainingMenuWidget_OnSetPlayerCharacter::DefUnique1Level' has a wrong offset!");
static_assert(offsetof(TrainingMenuWidget_OnSetPlayerCharacter, DefUnique2Level) == 0x000008, "Member 'TrainingMenuWidget_OnSetPlayerCharacter::DefUnique2Level' has a wrong offset!");
static_assert(offsetof(TrainingMenuWidget_OnSetPlayerCharacter, DefUnique3Level) == 0x00000C, "Member 'TrainingMenuWidget_OnSetPlayerCharacter::DefUnique3Level' has a wrong offset!");
static_assert(offsetof(TrainingMenuWidget_OnSetPlayerCharacter, SkillVariationCode) == 0x000010, "Member 'TrainingMenuWidget_OnSetPlayerCharacter::SkillVariationCode' has a wrong offset!");

// Function InGameModule.TrainingMenuWidget.OnSetSetting
// 0x0008 (0x0008 - 0x0000)
struct TrainingMenuWidget_OnSetSetting final
{
public:
	int32                                         DamageTypeIndex;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFriendlyFire;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TrainingMenuWidget_OnSetSetting) == 0x000004, "Wrong alignment on TrainingMenuWidget_OnSetSetting");
static_assert(sizeof(TrainingMenuWidget_OnSetSetting) == 0x000008, "Wrong size on TrainingMenuWidget_OnSetSetting");
static_assert(offsetof(TrainingMenuWidget_OnSetSetting, DamageTypeIndex) == 0x000000, "Member 'TrainingMenuWidget_OnSetSetting::DamageTypeIndex' has a wrong offset!");
static_assert(offsetof(TrainingMenuWidget_OnSetSetting, bFriendlyFire) == 0x000004, "Member 'TrainingMenuWidget_OnSetSetting::bFriendlyFire' has a wrong offset!");

// Function InGameModule.TransformControlComponent.RemoveTransformaionData_RPC_ToServer
// 0x0004 (0x0004 - 0x0000)
struct TransformControlComponent_RemoveTransformaionData_RPC_ToServer final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformControlComponent_RemoveTransformaionData_RPC_ToServer) == 0x000004, "Wrong alignment on TransformControlComponent_RemoveTransformaionData_RPC_ToServer");
static_assert(sizeof(TransformControlComponent_RemoveTransformaionData_RPC_ToServer) == 0x000004, "Wrong size on TransformControlComponent_RemoveTransformaionData_RPC_ToServer");
static_assert(offsetof(TransformControlComponent_RemoveTransformaionData_RPC_ToServer, Index_0) == 0x000000, "Member 'TransformControlComponent_RemoveTransformaionData_RPC_ToServer::Index_0' has a wrong offset!");

// Function InGameModule.TransformControlComponent.StockTransformationData_RPC_ToServer
// 0x0010 (0x0010 - 0x0000)
struct TransformControlComponent_StockTransformationData_RPC_ToServer final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class ACharacterBattle*                 TargetCharacter;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformControlComponent_StockTransformationData_RPC_ToServer) == 0x000008, "Wrong alignment on TransformControlComponent_StockTransformationData_RPC_ToServer");
static_assert(sizeof(TransformControlComponent_StockTransformationData_RPC_ToServer) == 0x000010, "Wrong size on TransformControlComponent_StockTransformationData_RPC_ToServer");
static_assert(offsetof(TransformControlComponent_StockTransformationData_RPC_ToServer, Index_0) == 0x000000, "Member 'TransformControlComponent_StockTransformationData_RPC_ToServer::Index_0' has a wrong offset!");
static_assert(offsetof(TransformControlComponent_StockTransformationData_RPC_ToServer, TargetCharacter) == 0x000008, "Member 'TransformControlComponent_StockTransformationData_RPC_ToServer::TargetCharacter' has a wrong offset!");

// Function InGameModule.TransformControlComponent.TransformInto_RPC_ToServer
// 0x0008 (0x0008 - 0x0000)
struct TransformControlComponent_TransformInto_RPC_ToServer final
{
public:
	const class ACharacterBattle*                 TargetCharacter;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformControlComponent_TransformInto_RPC_ToServer) == 0x000008, "Wrong alignment on TransformControlComponent_TransformInto_RPC_ToServer");
static_assert(sizeof(TransformControlComponent_TransformInto_RPC_ToServer) == 0x000008, "Wrong size on TransformControlComponent_TransformInto_RPC_ToServer");
static_assert(offsetof(TransformControlComponent_TransformInto_RPC_ToServer, TargetCharacter) == 0x000000, "Member 'TransformControlComponent_TransformInto_RPC_ToServer::TargetCharacter' has a wrong offset!");

// Function InGameModule.TransformControlComponent.TransformIntoStockCharacter_RPC_ToServer
// 0x0004 (0x0004 - 0x0000)
struct TransformControlComponent_TransformIntoStockCharacter_RPC_ToServer final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TransformControlComponent_TransformIntoStockCharacter_RPC_ToServer) == 0x000004, "Wrong alignment on TransformControlComponent_TransformIntoStockCharacter_RPC_ToServer");
static_assert(sizeof(TransformControlComponent_TransformIntoStockCharacter_RPC_ToServer) == 0x000004, "Wrong size on TransformControlComponent_TransformIntoStockCharacter_RPC_ToServer");
static_assert(offsetof(TransformControlComponent_TransformIntoStockCharacter_RPC_ToServer, Index_0) == 0x000000, "Member 'TransformControlComponent_TransformIntoStockCharacter_RPC_ToServer::Index_0' has a wrong offset!");

// Function InGameModule.UISubsystemComponent.OnLoadedCostume
// 0x0004 (0x0004 - 0x0000)
struct UISubsystemComponent_OnLoadedCostume final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISubsystemComponent_OnLoadedCostume) == 0x000004, "Wrong alignment on UISubsystemComponent_OnLoadedCostume");
static_assert(sizeof(UISubsystemComponent_OnLoadedCostume) == 0x000004, "Wrong size on UISubsystemComponent_OnLoadedCostume");
static_assert(offsetof(UISubsystemComponent_OnLoadedCostume, RequestId) == 0x000000, "Member 'UISubsystemComponent_OnLoadedCostume::RequestId' has a wrong offset!");

// Function InGameModule.UISubsystemComponent.OnLoadedMission
// 0x0004 (0x0004 - 0x0000)
struct UISubsystemComponent_OnLoadedMission final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISubsystemComponent_OnLoadedMission) == 0x000004, "Wrong alignment on UISubsystemComponent_OnLoadedMission");
static_assert(sizeof(UISubsystemComponent_OnLoadedMission) == 0x000004, "Wrong size on UISubsystemComponent_OnLoadedMission");
static_assert(offsetof(UISubsystemComponent_OnLoadedMission, RequestId) == 0x000000, "Member 'UISubsystemComponent_OnLoadedMission::RequestId' has a wrong offset!");

// Function InGameModule.UISubsystemComponent.OnLoadedSeasonLicense
// 0x0004 (0x0004 - 0x0000)
struct UISubsystemComponent_OnLoadedSeasonLicense final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISubsystemComponent_OnLoadedSeasonLicense) == 0x000004, "Wrong alignment on UISubsystemComponent_OnLoadedSeasonLicense");
static_assert(sizeof(UISubsystemComponent_OnLoadedSeasonLicense) == 0x000004, "Wrong size on UISubsystemComponent_OnLoadedSeasonLicense");
static_assert(offsetof(UISubsystemComponent_OnLoadedSeasonLicense, RequestId) == 0x000000, "Member 'UISubsystemComponent_OnLoadedSeasonLicense::RequestId' has a wrong offset!");

// Function InGameModule.UISubsystemComponent.OnLoadedSpecialLicense
// 0x0004 (0x0004 - 0x0000)
struct UISubsystemComponent_OnLoadedSpecialLicense final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISubsystemComponent_OnLoadedSpecialLicense) == 0x000004, "Wrong alignment on UISubsystemComponent_OnLoadedSpecialLicense");
static_assert(sizeof(UISubsystemComponent_OnLoadedSpecialLicense) == 0x000004, "Wrong size on UISubsystemComponent_OnLoadedSpecialLicense");
static_assert(offsetof(UISubsystemComponent_OnLoadedSpecialLicense, RequestId) == 0x000000, "Member 'UISubsystemComponent_OnLoadedSpecialLicense::RequestId' has a wrong offset!");

// Function InGameModule.UISubsystemComponent.SendClientLicenseData
// 0x0014 (0x0014 - 0x0000)
struct UISubsystemComponent_SendClientLicenseData final
{
public:
	struct FUniqueNetIdKey                        UniqueId;                                          // 0x0000(0x0008)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialLicenseExp;                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonLicenseExp;                                  // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPremium;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UISubsystemComponent_SendClientLicenseData) == 0x000004, "Wrong alignment on UISubsystemComponent_SendClientLicenseData");
static_assert(sizeof(UISubsystemComponent_SendClientLicenseData) == 0x000014, "Wrong size on UISubsystemComponent_SendClientLicenseData");
static_assert(offsetof(UISubsystemComponent_SendClientLicenseData, UniqueId) == 0x000000, "Member 'UISubsystemComponent_SendClientLicenseData::UniqueId' has a wrong offset!");
static_assert(offsetof(UISubsystemComponent_SendClientLicenseData, SpecialLicenseExp) == 0x000008, "Member 'UISubsystemComponent_SendClientLicenseData::SpecialLicenseExp' has a wrong offset!");
static_assert(offsetof(UISubsystemComponent_SendClientLicenseData, SeasonLicenseExp) == 0x00000C, "Member 'UISubsystemComponent_SendClientLicenseData::SeasonLicenseExp' has a wrong offset!");
static_assert(offsetof(UISubsystemComponent_SendClientLicenseData, bPremium) == 0x000010, "Member 'UISubsystemComponent_SendClientLicenseData::bPremium' has a wrong offset!");

// Function InGameModule.UISubsystemComponent.SendClientMissionData
// 0x0028 (0x0028 - 0x0000)
struct UISubsystemComponent_SendClientMissionData final
{
public:
	struct FUniqueNetIdKey                        UniqueId;                                          // 0x0000(0x0008)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ClearMissionCodeList;                              // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 UnlockedCostumeCodeList;                           // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISubsystemComponent_SendClientMissionData) == 0x000008, "Wrong alignment on UISubsystemComponent_SendClientMissionData");
static_assert(sizeof(UISubsystemComponent_SendClientMissionData) == 0x000028, "Wrong size on UISubsystemComponent_SendClientMissionData");
static_assert(offsetof(UISubsystemComponent_SendClientMissionData, UniqueId) == 0x000000, "Member 'UISubsystemComponent_SendClientMissionData::UniqueId' has a wrong offset!");
static_assert(offsetof(UISubsystemComponent_SendClientMissionData, ClearMissionCodeList) == 0x000008, "Member 'UISubsystemComponent_SendClientMissionData::ClearMissionCodeList' has a wrong offset!");
static_assert(offsetof(UISubsystemComponent_SendClientMissionData, UnlockedCostumeCodeList) == 0x000018, "Member 'UISubsystemComponent_SendClientMissionData::UnlockedCostumeCodeList' has a wrong offset!");

// Function InGameModule.UMGBattleJoinedPlayerList.OnCancelEvent
// 0x0010 (0x0010 - 0x0000)
struct UMGBattleJoinedPlayerList_OnCancelEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBattleJoinedPlayerList_OnCancelEvent) == 0x000008, "Wrong alignment on UMGBattleJoinedPlayerList_OnCancelEvent");
static_assert(sizeof(UMGBattleJoinedPlayerList_OnCancelEvent) == 0x000010, "Wrong size on UMGBattleJoinedPlayerList_OnCancelEvent");
static_assert(offsetof(UMGBattleJoinedPlayerList_OnCancelEvent, Widget) == 0x000000, "Member 'UMGBattleJoinedPlayerList_OnCancelEvent::Widget' has a wrong offset!");
static_assert(offsetof(UMGBattleJoinedPlayerList_OnCancelEvent, InputType) == 0x000008, "Member 'UMGBattleJoinedPlayerList_OnCancelEvent::InputType' has a wrong offset!");
static_assert(offsetof(UMGBattleJoinedPlayerList_OnCancelEvent, Index_0) == 0x00000C, "Member 'UMGBattleJoinedPlayerList_OnCancelEvent::Index_0' has a wrong offset!");

// Function InGameModule.UMGBattleJoinedPlayerListViewItem.OnDecide
// 0x0010 (0x0010 - 0x0000)
struct UMGBattleJoinedPlayerListViewItem_OnDecide final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UMGBattleJoinedPlayerListViewItem_OnDecide) == 0x000008, "Wrong alignment on UMGBattleJoinedPlayerListViewItem_OnDecide");
static_assert(sizeof(UMGBattleJoinedPlayerListViewItem_OnDecide) == 0x000010, "Wrong size on UMGBattleJoinedPlayerListViewItem_OnDecide");
static_assert(offsetof(UMGBattleJoinedPlayerListViewItem_OnDecide, Widget) == 0x000000, "Member 'UMGBattleJoinedPlayerListViewItem_OnDecide::Widget' has a wrong offset!");
static_assert(offsetof(UMGBattleJoinedPlayerListViewItem_OnDecide, InputType) == 0x000008, "Member 'UMGBattleJoinedPlayerListViewItem_OnDecide::InputType' has a wrong offset!");

// Function InGameModule.UMGBattleTutorialBase.CommandExecution
// 0x0028 (0x0028 - 0x0000)
struct UMGBattleTutorialBase_CommandExecution final
{
public:
	class FString                                 CommandName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScriptCommandFinishType                      ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UMGBattleTutorialBase_CommandExecution) == 0x000008, "Wrong alignment on UMGBattleTutorialBase_CommandExecution");
static_assert(sizeof(UMGBattleTutorialBase_CommandExecution) == 0x000028, "Wrong size on UMGBattleTutorialBase_CommandExecution");
static_assert(offsetof(UMGBattleTutorialBase_CommandExecution, CommandName) == 0x000000, "Member 'UMGBattleTutorialBase_CommandExecution::CommandName' has a wrong offset!");
static_assert(offsetof(UMGBattleTutorialBase_CommandExecution, Value) == 0x000010, "Member 'UMGBattleTutorialBase_CommandExecution::Value' has a wrong offset!");
static_assert(offsetof(UMGBattleTutorialBase_CommandExecution, ReturnValue) == 0x000020, "Member 'UMGBattleTutorialBase_CommandExecution::ReturnValue' has a wrong offset!");

// Function InGameModule.UMGBattleTutorialBase.DispCutIn
// 0x0008 (0x0008 - 0x0000)
struct UMGBattleTutorialBase_DispCutIn final
{
public:
	int32                                         Selection;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              Visibiliy;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UMGBattleTutorialBase_DispCutIn) == 0x000004, "Wrong alignment on UMGBattleTutorialBase_DispCutIn");
static_assert(sizeof(UMGBattleTutorialBase_DispCutIn) == 0x000008, "Wrong size on UMGBattleTutorialBase_DispCutIn");
static_assert(offsetof(UMGBattleTutorialBase_DispCutIn, Selection) == 0x000000, "Member 'UMGBattleTutorialBase_DispCutIn::Selection' has a wrong offset!");
static_assert(offsetof(UMGBattleTutorialBase_DispCutIn, Visibiliy) == 0x000004, "Member 'UMGBattleTutorialBase_DispCutIn::Visibiliy' has a wrong offset!");

// Function InGameModule.UMGBattleTutorialBase.ForceOnAutoLevelUp
// 0x0001 (0x0001 - 0x0000)
struct UMGBattleTutorialBase_ForceOnAutoLevelUp final
{
public:
	bool                                          Force;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBattleTutorialBase_ForceOnAutoLevelUp) == 0x000001, "Wrong alignment on UMGBattleTutorialBase_ForceOnAutoLevelUp");
static_assert(sizeof(UMGBattleTutorialBase_ForceOnAutoLevelUp) == 0x000001, "Wrong size on UMGBattleTutorialBase_ForceOnAutoLevelUp");
static_assert(offsetof(UMGBattleTutorialBase_ForceOnAutoLevelUp, Force) == 0x000000, "Member 'UMGBattleTutorialBase_ForceOnAutoLevelUp::Force' has a wrong offset!");

// Function InGameModule.UMGBattleTutorialBase.GetDebugTagValue
// 0x0010 (0x0010 - 0x0000)
struct UMGBattleTutorialBase_GetDebugTagValue final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBattleTutorialBase_GetDebugTagValue) == 0x000008, "Wrong alignment on UMGBattleTutorialBase_GetDebugTagValue");
static_assert(sizeof(UMGBattleTutorialBase_GetDebugTagValue) == 0x000010, "Wrong size on UMGBattleTutorialBase_GetDebugTagValue");
static_assert(offsetof(UMGBattleTutorialBase_GetDebugTagValue, ReturnValue) == 0x000000, "Member 'UMGBattleTutorialBase_GetDebugTagValue::ReturnValue' has a wrong offset!");

// Function InGameModule.UMGBattleTutorialBase.GetTaskMaterial
// 0x0018 (0x0018 - 0x0000)
struct UMGBattleTutorialBase_GetTaskMaterial final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBattleTutorialBase_GetTaskMaterial) == 0x000008, "Wrong alignment on UMGBattleTutorialBase_GetTaskMaterial");
static_assert(sizeof(UMGBattleTutorialBase_GetTaskMaterial) == 0x000018, "Wrong size on UMGBattleTutorialBase_GetTaskMaterial");
static_assert(offsetof(UMGBattleTutorialBase_GetTaskMaterial, Key) == 0x000000, "Member 'UMGBattleTutorialBase_GetTaskMaterial::Key' has a wrong offset!");
static_assert(offsetof(UMGBattleTutorialBase_GetTaskMaterial, ReturnValue) == 0x000010, "Member 'UMGBattleTutorialBase_GetTaskMaterial::ReturnValue' has a wrong offset!");

// Function InGameModule.UMGBattleTutorialBase.GetTaskText
// 0x0028 (0x0028 - 0x0000)
struct UMGBattleTutorialBase_GetTaskText final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBattleTutorialBase_GetTaskText) == 0x000008, "Wrong alignment on UMGBattleTutorialBase_GetTaskText");
static_assert(sizeof(UMGBattleTutorialBase_GetTaskText) == 0x000028, "Wrong size on UMGBattleTutorialBase_GetTaskText");
static_assert(offsetof(UMGBattleTutorialBase_GetTaskText, Key) == 0x000000, "Member 'UMGBattleTutorialBase_GetTaskText::Key' has a wrong offset!");
static_assert(offsetof(UMGBattleTutorialBase_GetTaskText, ReturnValue) == 0x000010, "Member 'UMGBattleTutorialBase_GetTaskText::ReturnValue' has a wrong offset!");

// Function InGameModule.UMGBattleTutorialBase.GetTextSize
// 0x0018 (0x0018 - 0x0000)
struct UMGBattleTutorialBase_GetTextSize final
{
public:
	class FString                                 MessageKey;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UMGBattleTutorialBase_GetTextSize) == 0x000008, "Wrong alignment on UMGBattleTutorialBase_GetTextSize");
static_assert(sizeof(UMGBattleTutorialBase_GetTextSize) == 0x000018, "Wrong size on UMGBattleTutorialBase_GetTextSize");
static_assert(offsetof(UMGBattleTutorialBase_GetTextSize, MessageKey) == 0x000000, "Member 'UMGBattleTutorialBase_GetTextSize::MessageKey' has a wrong offset!");
static_assert(offsetof(UMGBattleTutorialBase_GetTextSize, ReturnValue) == 0x000010, "Member 'UMGBattleTutorialBase_GetTextSize::ReturnValue' has a wrong offset!");

// Function InGameModule.UMGBattleTutorialBase.GetWidgetVisibility
// 0x0002 (0x0002 - 0x0000)
struct UMGBattleTutorialBase_GetWidgetVisibility final
{
public:
	ETutorialDisplayUI                            UI;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBattleTutorialBase_GetWidgetVisibility) == 0x000001, "Wrong alignment on UMGBattleTutorialBase_GetWidgetVisibility");
static_assert(sizeof(UMGBattleTutorialBase_GetWidgetVisibility) == 0x000002, "Wrong size on UMGBattleTutorialBase_GetWidgetVisibility");
static_assert(offsetof(UMGBattleTutorialBase_GetWidgetVisibility, UI) == 0x000000, "Member 'UMGBattleTutorialBase_GetWidgetVisibility::UI' has a wrong offset!");
static_assert(offsetof(UMGBattleTutorialBase_GetWidgetVisibility, ReturnValue) == 0x000001, "Member 'UMGBattleTutorialBase_GetWidgetVisibility::ReturnValue' has a wrong offset!");

// Function InGameModule.UMGBattleTutorialBase.IsPlaySequencer
// 0x0001 (0x0001 - 0x0000)
struct UMGBattleTutorialBase_IsPlaySequencer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBattleTutorialBase_IsPlaySequencer) == 0x000001, "Wrong alignment on UMGBattleTutorialBase_IsPlaySequencer");
static_assert(sizeof(UMGBattleTutorialBase_IsPlaySequencer) == 0x000001, "Wrong size on UMGBattleTutorialBase_IsPlaySequencer");
static_assert(offsetof(UMGBattleTutorialBase_IsPlaySequencer, ReturnValue) == 0x000000, "Member 'UMGBattleTutorialBase_IsPlaySequencer::ReturnValue' has a wrong offset!");

// Function InGameModule.UMGBattleTutorialBase.IsPlayVoice
// 0x0001 (0x0001 - 0x0000)
struct UMGBattleTutorialBase_IsPlayVoice final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBattleTutorialBase_IsPlayVoice) == 0x000001, "Wrong alignment on UMGBattleTutorialBase_IsPlayVoice");
static_assert(sizeof(UMGBattleTutorialBase_IsPlayVoice) == 0x000001, "Wrong size on UMGBattleTutorialBase_IsPlayVoice");
static_assert(offsetof(UMGBattleTutorialBase_IsPlayVoice, ReturnValue) == 0x000000, "Member 'UMGBattleTutorialBase_IsPlayVoice::ReturnValue' has a wrong offset!");

// Function InGameModule.UMGBattleTutorialBase.PlayBGM
// 0x0010 (0x0010 - 0x0000)
struct UMGBattleTutorialBase_PlayBGM final
{
public:
	class FString                                 bgmName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBattleTutorialBase_PlayBGM) == 0x000008, "Wrong alignment on UMGBattleTutorialBase_PlayBGM");
static_assert(sizeof(UMGBattleTutorialBase_PlayBGM) == 0x000010, "Wrong size on UMGBattleTutorialBase_PlayBGM");
static_assert(offsetof(UMGBattleTutorialBase_PlayBGM, bgmName) == 0x000000, "Member 'UMGBattleTutorialBase_PlayBGM::bgmName' has a wrong offset!");

// Function InGameModule.UMGBattleTutorialBase.PlayVoice
// 0x0010 (0x0010 - 0x0000)
struct UMGBattleTutorialBase_PlayVoice final
{
public:
	class FString                                 CueName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBattleTutorialBase_PlayVoice) == 0x000008, "Wrong alignment on UMGBattleTutorialBase_PlayVoice");
static_assert(sizeof(UMGBattleTutorialBase_PlayVoice) == 0x000010, "Wrong size on UMGBattleTutorialBase_PlayVoice");
static_assert(offsetof(UMGBattleTutorialBase_PlayVoice, CueName) == 0x000000, "Member 'UMGBattleTutorialBase_PlayVoice::CueName' has a wrong offset!");

// Function InGameModule.UMGBattleTutorialBase.SetAllWidgetVisibility
// 0x0001 (0x0001 - 0x0000)
struct UMGBattleTutorialBase_SetAllWidgetVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBattleTutorialBase_SetAllWidgetVisibility) == 0x000001, "Wrong alignment on UMGBattleTutorialBase_SetAllWidgetVisibility");
static_assert(sizeof(UMGBattleTutorialBase_SetAllWidgetVisibility) == 0x000001, "Wrong size on UMGBattleTutorialBase_SetAllWidgetVisibility");
static_assert(offsetof(UMGBattleTutorialBase_SetAllWidgetVisibility, bVisible) == 0x000000, "Member 'UMGBattleTutorialBase_SetAllWidgetVisibility::bVisible' has a wrong offset!");

// Function InGameModule.UMGBattleTutorialBase.SetCanAbilitySwaping
// 0x0001 (0x0001 - 0x0000)
struct UMGBattleTutorialBase_SetCanAbilitySwaping final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBattleTutorialBase_SetCanAbilitySwaping) == 0x000001, "Wrong alignment on UMGBattleTutorialBase_SetCanAbilitySwaping");
static_assert(sizeof(UMGBattleTutorialBase_SetCanAbilitySwaping) == 0x000001, "Wrong size on UMGBattleTutorialBase_SetCanAbilitySwaping");
static_assert(offsetof(UMGBattleTutorialBase_SetCanAbilitySwaping, bEnable) == 0x000000, "Member 'UMGBattleTutorialBase_SetCanAbilitySwaping::bEnable' has a wrong offset!");

// Function InGameModule.UMGBattleTutorialBase.SetEnableUpdateAddPlusUltraPoint
// 0x0001 (0x0001 - 0x0000)
struct UMGBattleTutorialBase_SetEnableUpdateAddPlusUltraPoint final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBattleTutorialBase_SetEnableUpdateAddPlusUltraPoint) == 0x000001, "Wrong alignment on UMGBattleTutorialBase_SetEnableUpdateAddPlusUltraPoint");
static_assert(sizeof(UMGBattleTutorialBase_SetEnableUpdateAddPlusUltraPoint) == 0x000001, "Wrong size on UMGBattleTutorialBase_SetEnableUpdateAddPlusUltraPoint");
static_assert(offsetof(UMGBattleTutorialBase_SetEnableUpdateAddPlusUltraPoint, Enable) == 0x000000, "Member 'UMGBattleTutorialBase_SetEnableUpdateAddPlusUltraPoint::Enable' has a wrong offset!");

// Function InGameModule.UMGBattleTutorialBase.SetHUDVisibleItemGrayOut
// 0x0001 (0x0001 - 0x0000)
struct UMGBattleTutorialBase_SetHUDVisibleItemGrayOut final
{
public:
	bool                                          GrayOut;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBattleTutorialBase_SetHUDVisibleItemGrayOut) == 0x000001, "Wrong alignment on UMGBattleTutorialBase_SetHUDVisibleItemGrayOut");
static_assert(sizeof(UMGBattleTutorialBase_SetHUDVisibleItemGrayOut) == 0x000001, "Wrong size on UMGBattleTutorialBase_SetHUDVisibleItemGrayOut");
static_assert(offsetof(UMGBattleTutorialBase_SetHUDVisibleItemGrayOut, GrayOut) == 0x000000, "Member 'UMGBattleTutorialBase_SetHUDVisibleItemGrayOut::GrayOut' has a wrong offset!");

// Function InGameModule.UMGBattleTutorialBase.SetPlusUltraPermanency
// 0x0001 (0x0001 - 0x0000)
struct UMGBattleTutorialBase_SetPlusUltraPermanency final
{
public:
	bool                                          Permanency;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBattleTutorialBase_SetPlusUltraPermanency) == 0x000001, "Wrong alignment on UMGBattleTutorialBase_SetPlusUltraPermanency");
static_assert(sizeof(UMGBattleTutorialBase_SetPlusUltraPermanency) == 0x000001, "Wrong size on UMGBattleTutorialBase_SetPlusUltraPermanency");
static_assert(offsetof(UMGBattleTutorialBase_SetPlusUltraPermanency, Permanency) == 0x000000, "Member 'UMGBattleTutorialBase_SetPlusUltraPermanency::Permanency' has a wrong offset!");

// Function InGameModule.UMGBattleTutorialBase.SetPlusUltraPoint
// 0x0004 (0x0004 - 0x0000)
struct UMGBattleTutorialBase_SetPlusUltraPoint final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBattleTutorialBase_SetPlusUltraPoint) == 0x000004, "Wrong alignment on UMGBattleTutorialBase_SetPlusUltraPoint");
static_assert(sizeof(UMGBattleTutorialBase_SetPlusUltraPoint) == 0x000004, "Wrong size on UMGBattleTutorialBase_SetPlusUltraPoint");
static_assert(offsetof(UMGBattleTutorialBase_SetPlusUltraPoint, Value) == 0x000000, "Member 'UMGBattleTutorialBase_SetPlusUltraPoint::Value' has a wrong offset!");

// Function InGameModule.UMGBattleTutorialBase.SetPoisonMistState
// 0x0001 (0x0001 - 0x0000)
struct UMGBattleTutorialBase_SetPoisonMistState final
{
public:
	bool                                          Start;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBattleTutorialBase_SetPoisonMistState) == 0x000001, "Wrong alignment on UMGBattleTutorialBase_SetPoisonMistState");
static_assert(sizeof(UMGBattleTutorialBase_SetPoisonMistState) == 0x000001, "Wrong size on UMGBattleTutorialBase_SetPoisonMistState");
static_assert(offsetof(UMGBattleTutorialBase_SetPoisonMistState, Start) == 0x000000, "Member 'UMGBattleTutorialBase_SetPoisonMistState::Start' has a wrong offset!");

// Function InGameModule.UMGBattleTutorialBase.SwitchWidgetVisibility
// 0x0002 (0x0002 - 0x0000)
struct UMGBattleTutorialBase_SwitchWidgetVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETutorialDisplayUI                            bit;                                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBattleTutorialBase_SwitchWidgetVisibility) == 0x000001, "Wrong alignment on UMGBattleTutorialBase_SwitchWidgetVisibility");
static_assert(sizeof(UMGBattleTutorialBase_SwitchWidgetVisibility) == 0x000002, "Wrong size on UMGBattleTutorialBase_SwitchWidgetVisibility");
static_assert(offsetof(UMGBattleTutorialBase_SwitchWidgetVisibility, bVisible) == 0x000000, "Member 'UMGBattleTutorialBase_SwitchWidgetVisibility::bVisible' has a wrong offset!");
static_assert(offsetof(UMGBattleTutorialBase_SwitchWidgetVisibility, bit) == 0x000001, "Member 'UMGBattleTutorialBase_SwitchWidgetVisibility::bit' has a wrong offset!");

// Function InGameModule.UMGBattleTutorialBase.TakeInputToWidget
// 0x0001 (0x0001 - 0x0000)
struct UMGBattleTutorialBase_TakeInputToWidget final
{
public:
	bool                                          bAllInput;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBattleTutorialBase_TakeInputToWidget) == 0x000001, "Wrong alignment on UMGBattleTutorialBase_TakeInputToWidget");
static_assert(sizeof(UMGBattleTutorialBase_TakeInputToWidget) == 0x000001, "Wrong size on UMGBattleTutorialBase_TakeInputToWidget");
static_assert(offsetof(UMGBattleTutorialBase_TakeInputToWidget, bAllInput) == 0x000000, "Member 'UMGBattleTutorialBase_TakeInputToWidget::bAllInput' has a wrong offset!");

// Function InGameModule.UMGBattleTutorialClearConditional.GetReNumberText
// 0x0020 (0x0020 - 0x0000)
struct UMGBattleTutorialClearConditional_GetReNumberText final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBattleTutorialClearConditional_GetReNumberText) == 0x000008, "Wrong alignment on UMGBattleTutorialClearConditional_GetReNumberText");
static_assert(sizeof(UMGBattleTutorialClearConditional_GetReNumberText) == 0x000020, "Wrong size on UMGBattleTutorialClearConditional_GetReNumberText");
static_assert(offsetof(UMGBattleTutorialClearConditional_GetReNumberText, Count) == 0x000000, "Member 'UMGBattleTutorialClearConditional_GetReNumberText::Count' has a wrong offset!");
static_assert(offsetof(UMGBattleTutorialClearConditional_GetReNumberText, ReturnValue) == 0x000008, "Member 'UMGBattleTutorialClearConditional_GetReNumberText::ReturnValue' has a wrong offset!");

// Function InGameModule.UMGBattleTutorialCutIn.BP_DispCutIn
// 0x0008 (0x0008 - 0x0000)
struct UMGBattleTutorialCutIn_BP_DispCutIn final
{
public:
	int32                                         Selection;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              Visibiliy;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UMGBattleTutorialCutIn_BP_DispCutIn) == 0x000004, "Wrong alignment on UMGBattleTutorialCutIn_BP_DispCutIn");
static_assert(sizeof(UMGBattleTutorialCutIn_BP_DispCutIn) == 0x000008, "Wrong size on UMGBattleTutorialCutIn_BP_DispCutIn");
static_assert(offsetof(UMGBattleTutorialCutIn_BP_DispCutIn, Selection) == 0x000000, "Member 'UMGBattleTutorialCutIn_BP_DispCutIn::Selection' has a wrong offset!");
static_assert(offsetof(UMGBattleTutorialCutIn_BP_DispCutIn, Visibiliy) == 0x000004, "Member 'UMGBattleTutorialCutIn_BP_DispCutIn::Visibiliy' has a wrong offset!");

// Function InGameModule.UMGBattleTutorialProgress.BP_SetNowProgress
// 0x0004 (0x0004 - 0x0000)
struct UMGBattleTutorialProgress_BP_SetNowProgress final
{
public:
	int32                                         Now;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBattleTutorialProgress_BP_SetNowProgress) == 0x000004, "Wrong alignment on UMGBattleTutorialProgress_BP_SetNowProgress");
static_assert(sizeof(UMGBattleTutorialProgress_BP_SetNowProgress) == 0x000004, "Wrong size on UMGBattleTutorialProgress_BP_SetNowProgress");
static_assert(offsetof(UMGBattleTutorialProgress_BP_SetNowProgress, Now) == 0x000000, "Member 'UMGBattleTutorialProgress_BP_SetNowProgress::Now' has a wrong offset!");

// Function InGameModule.UMGBattleTutorialProgress.BP_SetNumProgress
// 0x0004 (0x0004 - 0x0000)
struct UMGBattleTutorialProgress_BP_SetNumProgress final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBattleTutorialProgress_BP_SetNumProgress) == 0x000004, "Wrong alignment on UMGBattleTutorialProgress_BP_SetNumProgress");
static_assert(sizeof(UMGBattleTutorialProgress_BP_SetNumProgress) == 0x000004, "Wrong size on UMGBattleTutorialProgress_BP_SetNumProgress");
static_assert(offsetof(UMGBattleTutorialProgress_BP_SetNumProgress, Num) == 0x000000, "Member 'UMGBattleTutorialProgress_BP_SetNumProgress::Num' has a wrong offset!");

// Function InGameModule.TutorialCustomRichTextBlock.GetTextSize
// 0x0004 (0x0004 - 0x0000)
struct TutorialCustomRichTextBlock_GetTextSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialCustomRichTextBlock_GetTextSize) == 0x000004, "Wrong alignment on TutorialCustomRichTextBlock_GetTextSize");
static_assert(sizeof(TutorialCustomRichTextBlock_GetTextSize) == 0x000004, "Wrong size on TutorialCustomRichTextBlock_GetTextSize");
static_assert(offsetof(TutorialCustomRichTextBlock_GetTextSize, ReturnValue) == 0x000000, "Member 'TutorialCustomRichTextBlock_GetTextSize::ReturnValue' has a wrong offset!");

// Function InGameModule.TutorialCustomRichTextBlock.SetTextSize
// 0x0004 (0x0004 - 0x0000)
struct TutorialCustomRichTextBlock_SetTextSize final
{
public:
	int32                                         Size;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialCustomRichTextBlock_SetTextSize) == 0x000004, "Wrong alignment on TutorialCustomRichTextBlock_SetTextSize");
static_assert(sizeof(TutorialCustomRichTextBlock_SetTextSize) == 0x000004, "Wrong size on TutorialCustomRichTextBlock_SetTextSize");
static_assert(offsetof(TutorialCustomRichTextBlock_SetTextSize, Size) == 0x000000, "Member 'TutorialCustomRichTextBlock_SetTextSize::Size' has a wrong offset!");

// Function InGameModule.TutorialCustomRichTextBlock.SetWrapTextAt
// 0x0004 (0x0004 - 0x0000)
struct TutorialCustomRichTextBlock_SetWrapTextAt final
{
public:
	float                                         InWrapTextAt;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialCustomRichTextBlock_SetWrapTextAt) == 0x000004, "Wrong alignment on TutorialCustomRichTextBlock_SetWrapTextAt");
static_assert(sizeof(TutorialCustomRichTextBlock_SetWrapTextAt) == 0x000004, "Wrong size on TutorialCustomRichTextBlock_SetWrapTextAt");
static_assert(offsetof(TutorialCustomRichTextBlock_SetWrapTextAt, InWrapTextAt) == 0x000000, "Member 'TutorialCustomRichTextBlock_SetWrapTextAt::InWrapTextAt' has a wrong offset!");

// Function InGameModule.UMGLobbyInfo.ContinueCounting
// 0x0004 (0x0004 - 0x0000)
struct UMGLobbyInfo_ContinueCounting final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLobbyInfo_ContinueCounting) == 0x000004, "Wrong alignment on UMGLobbyInfo_ContinueCounting");
static_assert(sizeof(UMGLobbyInfo_ContinueCounting) == 0x000004, "Wrong size on UMGLobbyInfo_ContinueCounting");
static_assert(offsetof(UMGLobbyInfo_ContinueCounting, Count) == 0x000000, "Member 'UMGLobbyInfo_ContinueCounting::Count' has a wrong offset!");

// Function InGameModule.UMGSkillActions.UpdateMagazineState
// 0x000C (0x000C - 0x0000)
struct UMGSkillActions_UpdateMagazineState final
{
public:
	EAttackId                                     SlotAttackId;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NewAmmoNum;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewReloadRate;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSkillActions_UpdateMagazineState) == 0x000004, "Wrong alignment on UMGSkillActions_UpdateMagazineState");
static_assert(sizeof(UMGSkillActions_UpdateMagazineState) == 0x00000C, "Wrong size on UMGSkillActions_UpdateMagazineState");
static_assert(offsetof(UMGSkillActions_UpdateMagazineState, SlotAttackId) == 0x000000, "Member 'UMGSkillActions_UpdateMagazineState::SlotAttackId' has a wrong offset!");
static_assert(offsetof(UMGSkillActions_UpdateMagazineState, NewAmmoNum) == 0x000004, "Member 'UMGSkillActions_UpdateMagazineState::NewAmmoNum' has a wrong offset!");
static_assert(offsetof(UMGSkillActions_UpdateMagazineState, NewReloadRate) == 0x000008, "Member 'UMGSkillActions_UpdateMagazineState::NewReloadRate' has a wrong offset!");

// Function InGameModule.UMGSkillMagazine.OnPress
// 0x0010 (0x0010 - 0x0000)
struct UMGSkillMagazine_OnPress final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UMGSkillMagazine_OnPress) == 0x000008, "Wrong alignment on UMGSkillMagazine_OnPress");
static_assert(sizeof(UMGSkillMagazine_OnPress) == 0x000010, "Wrong size on UMGSkillMagazine_OnPress");
static_assert(offsetof(UMGSkillMagazine_OnPress, Button) == 0x000000, "Member 'UMGSkillMagazine_OnPress::Button' has a wrong offset!");
static_assert(offsetof(UMGSkillMagazine_OnPress, InputType) == 0x000008, "Member 'UMGSkillMagazine_OnPress::InputType' has a wrong offset!");

// Function InGameModule.UMGSkillMagazine.OnRelease
// 0x0010 (0x0010 - 0x0000)
struct UMGSkillMagazine_OnRelease final
{
public:
	class UAppWidget*                             Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UMGSkillMagazine_OnRelease) == 0x000008, "Wrong alignment on UMGSkillMagazine_OnRelease");
static_assert(sizeof(UMGSkillMagazine_OnRelease) == 0x000010, "Wrong size on UMGSkillMagazine_OnRelease");
static_assert(offsetof(UMGSkillMagazine_OnRelease, Button) == 0x000000, "Member 'UMGSkillMagazine_OnRelease::Button' has a wrong offset!");
static_assert(offsetof(UMGSkillMagazine_OnRelease, InputType) == 0x000008, "Member 'UMGSkillMagazine_OnRelease::InputType' has a wrong offset!");

// Function InGameModule.UMGSkillMagazine.OnSwitchMagazineAvailability
// 0x0001 (0x0001 - 0x0000)
struct UMGSkillMagazine_OnSwitchMagazineAvailability final
{
public:
	EMagazineAvailability                         NewAvailability;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSkillMagazine_OnSwitchMagazineAvailability) == 0x000001, "Wrong alignment on UMGSkillMagazine_OnSwitchMagazineAvailability");
static_assert(sizeof(UMGSkillMagazine_OnSwitchMagazineAvailability) == 0x000001, "Wrong size on UMGSkillMagazine_OnSwitchMagazineAvailability");
static_assert(offsetof(UMGSkillMagazine_OnSwitchMagazineAvailability, NewAvailability) == 0x000000, "Member 'UMGSkillMagazine_OnSwitchMagazineAvailability::NewAvailability' has a wrong offset!");

// Function InGameModule.UseItemEffectComponent.OnFinishParticle
// 0x0008 (0x0008 - 0x0000)
struct UseItemEffectComponent_OnFinishParticle final
{
public:
	class UParticleSystemComponent*               Particle;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UseItemEffectComponent_OnFinishParticle) == 0x000008, "Wrong alignment on UseItemEffectComponent_OnFinishParticle");
static_assert(sizeof(UseItemEffectComponent_OnFinishParticle) == 0x000008, "Wrong size on UseItemEffectComponent_OnFinishParticle");
static_assert(offsetof(UseItemEffectComponent_OnFinishParticle, Particle) == 0x000000, "Member 'UseItemEffectComponent_OnFinishParticle::Particle' has a wrong offset!");

}

