#pragma once
#undef EVENT_MAX

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UIFramework

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// Enum UIFramework.EWidgetBaseEventChannel
// NumValues: 0x0009
enum class EWidgetBaseEventChannel : uint8
{
	EVENT_A                                  = 0,
	EVENT_B                                  = 1,
	EVENT_C                                  = 2,
	EVENT_D                                  = 3,
	EVENT_E                                  = 4,
	EVENT_F                                  = 5,
	EVENT_G                                  = 6,
	EVENT_H                                  = 7,
	EVENT_MAX                                = 8,
};

// Enum UIFramework.EInputKey
// NumValues: 0x0020
enum class EInputKey : uint8
{
	NONE                                     = 0,
	D_UP                                     = 1,
	D_LEFT                                   = 2,
	D_RIGHT                                  = 3,
	D_DOWN                                   = 4,
	FACE_BUTTON_TOP                          = 5,
	FACE_BUTTON_LEFT                         = 6,
	FACE_BUTTON_RIGHT                        = 7,
	FACE_BUTTON_BOTTOM                       = 8,
	LEFT_SHOULDER                            = 9,
	RIGHT_SHOULDER                           = 10,
	LEFT_TRIGGER                             = 11,
	RIGHT_TRIGGER                            = 12,
	SPECIAL_RIGHT                            = 13,
	SPECIAL_LEFT                             = 14,
	VIRTUAL_ACCEPT                           = 15,
	VIRTUAL_BACK                             = 16,
	LEFT_THUMB_STICK_BUTTON                  = 17,
	RIGHT_THUMB_STICK_BUTTON                 = 18,
	MOUSE_BACK                               = 19,
	MOUSE_FORWARD                            = 20,
	MOUSE_SCROLL_UP                          = 21,
	MOUSE_SCROLL_DOWN                        = 22,
	ENTER                                    = 23,
	SPACE_BAR                                = 24,
	BACK_SPACE                               = 25,
	TAB                                      = 26,
	ESCAPE                                   = 27,
	F                                        = 28,
	R                                        = 29,
	U                                        = 30,
	MAX                                      = 31,
};

// Enum UIFramework.EWidgetInputType
// NumValues: 0x0005
enum class EWidgetInputType : uint8
{
	Key                                      = 0,
	Mouse                                    = 1,
	Touch                                    = 2,
	Cleared                                  = 3,
	EWidgetInputType_MAX                     = 4,
};

// Enum UIFramework.EAppWidgetPriority
// NumValues: 0x0009
enum class EAppWidgetPriority : uint8
{
	Background                               = 0,
	HUDBackground                            = 1,
	HUDForeground                            = 2,
	UIBackground                             = 3,
	UIForeground                             = 4,
	SystemBackground                         = 5,
	SystemForeground                         = 6,
	Foreground                               = 7,
	EAppWidgetPriority_MAX                   = 8,
};

// Enum UIFramework.EWidgetTransitionFadeType
// NumValues: 0x0004
enum class EWidgetTransitionFadeType : uint8
{
	SHORT                                    = 0,
	NORMAL                                   = 1,
	MOMENT                                   = 2,
	MAX                                      = 3,
};

// Enum UIFramework.EGeneralWindowButtonFocus
// NumValues: 0x0005
enum class EGeneralWindowButtonFocus : uint8
{
	None                                     = 0,
	OneButton                                = 1,
	LeftButton                               = 2,
	RightButton                              = 3,
	EGeneralWindowButtonFocus_MAX            = 4,
};

// Enum UIFramework.EGeneralWindowSelectType
// NumValues: 0x0003
enum class EGeneralWindowSelectType : uint8
{
	Loop                                     = 0,
	Stop                                     = 1,
	Max                                      = 2,
};

// Enum UIFramework.ERichTextImagePlatformType
// NumValues: 0x0007
enum class ERichTextImagePlatformType : uint8
{
	PlayStation                              = 0,
	Xbox                                     = 1,
	GamePad                                  = 2,
	WindowsKeyboard                          = 3,
	Mobile                                   = 4,
	Switch                                   = 5,
	Max                                      = 6,
};

// Enum UIFramework.EUIInstanceCreationStep
// NumValues: 0x0006
enum class EUIInstanceCreationStep : uint8
{
	PreRegisterAllComponents                 = 0,
	PostRegisterAllComponents                = 1,
	PreInitializeComponents                  = 2,
	PostInitializeComponents                 = 3,
	BeginPlay                                = 4,
	EUIInstanceCreationStep_MAX              = 5,
};

// Enum UIFramework.EMapDrawType
// NumValues: 0x0005
enum class EMapDrawType : uint8
{
	None                                     = 0,
	Character                                = 1,
	PoisonMist                               = 2,
	FieldObject                              = 3,
	EMapDrawType_MAX                         = 4,
};

// Enum UIFramework.EGeneralSelectiveWindowDisplay
// NumValues: 0x0004
enum class EGeneralSelectiveWindowDisplay : uint8
{
	LeftOnly                                 = 0,
	RightOnly                                = 1,
	LeftAndRight                             = 2,
	Max                                      = 3,
};

// ScriptStruct UIFramework.SubMenuInfo
// 0x0038 (0x0038 - 0x0000)
struct FSubMenuInfo final
{
public:
	class FText                                   _buttonText;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   _buttonIconText;                                   // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          _enable;                                           // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bClosedButton;                                    // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSubMenuInfo) == 0x000008, "Wrong alignment on FSubMenuInfo");
static_assert(sizeof(FSubMenuInfo) == 0x000038, "Wrong size on FSubMenuInfo");
static_assert(offsetof(FSubMenuInfo, _buttonText) == 0x000000, "Member 'FSubMenuInfo::_buttonText' has a wrong offset!");
static_assert(offsetof(FSubMenuInfo, _buttonIconText) == 0x000018, "Member 'FSubMenuInfo::_buttonIconText' has a wrong offset!");
static_assert(offsetof(FSubMenuInfo, _enable) == 0x000030, "Member 'FSubMenuInfo::_enable' has a wrong offset!");
static_assert(offsetof(FSubMenuInfo, _bClosedButton) == 0x000031, "Member 'FSubMenuInfo::_bClosedButton' has a wrong offset!");

// ScriptStruct UIFramework.OnFadeFinished
// 0x0010 (0x0010 - 0x0000)
struct FOnFadeFinished final
{
public:
	TDelegate<void()>                             _delegate;                                         // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOnFadeFinished) == 0x000004, "Wrong alignment on FOnFadeFinished");
static_assert(sizeof(FOnFadeFinished) == 0x000010, "Wrong size on FOnFadeFinished");
static_assert(offsetof(FOnFadeFinished, _delegate) == 0x000000, "Member 'FOnFadeFinished::_delegate' has a wrong offset!");

// ScriptStruct UIFramework.OutInputShortcutInfo
// 0x0020 (0x0020 - 0x0000)
struct FOutInputShortcutInfo final
{
public:
	struct FKey                                   _inputKey;                                         // 0x0000(0x0018)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputKey                                     _inputShortcutEnum;                                // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOutInputShortcutInfo) == 0x000008, "Wrong alignment on FOutInputShortcutInfo");
static_assert(sizeof(FOutInputShortcutInfo) == 0x000020, "Wrong size on FOutInputShortcutInfo");
static_assert(offsetof(FOutInputShortcutInfo, _inputKey) == 0x000000, "Member 'FOutInputShortcutInfo::_inputKey' has a wrong offset!");
static_assert(offsetof(FOutInputShortcutInfo, _inputShortcutEnum) == 0x000018, "Member 'FOutInputShortcutInfo::_inputShortcutEnum' has a wrong offset!");

// ScriptStruct UIFramework.GeneralButtonText
// 0x0058 (0x0058 - 0x0000)
struct FGeneralButtonText final
{
public:
	class FText                                   _textIcon;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   _text;                                             // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   _style;                                            // 0x0030(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLinearColor                           _textColor;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeneralButtonText) == 0x000008, "Wrong alignment on FGeneralButtonText");
static_assert(sizeof(FGeneralButtonText) == 0x000058, "Wrong size on FGeneralButtonText");
static_assert(offsetof(FGeneralButtonText, _textIcon) == 0x000000, "Member 'FGeneralButtonText::_textIcon' has a wrong offset!");
static_assert(offsetof(FGeneralButtonText, _text) == 0x000018, "Member 'FGeneralButtonText::_text' has a wrong offset!");
static_assert(offsetof(FGeneralButtonText, _style) == 0x000030, "Member 'FGeneralButtonText::_style' has a wrong offset!");
static_assert(offsetof(FGeneralButtonText, _textColor) == 0x000048, "Member 'FGeneralButtonText::_textColor' has a wrong offset!");

// ScriptStruct UIFramework.GeneralWindowBaseText
// 0x0078 (0x0078 - 0x0000)
struct FGeneralWindowBaseText final
{
public:
	struct FGeneralButtonText                     _buttonText;                                       // 0x0000(0x0058)(Edit, NativeAccessSpecifierPublic)
	struct FLinearColor                           _color;                                            // 0x0058(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EInputKey>                             _shortcutKeys;                                     // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeneralWindowBaseText) == 0x000008, "Wrong alignment on FGeneralWindowBaseText");
static_assert(sizeof(FGeneralWindowBaseText) == 0x000078, "Wrong size on FGeneralWindowBaseText");
static_assert(offsetof(FGeneralWindowBaseText, _buttonText) == 0x000000, "Member 'FGeneralWindowBaseText::_buttonText' has a wrong offset!");
static_assert(offsetof(FGeneralWindowBaseText, _color) == 0x000058, "Member 'FGeneralWindowBaseText::_color' has a wrong offset!");
static_assert(offsetof(FGeneralWindowBaseText, _shortcutKeys) == 0x000068, "Member 'FGeneralWindowBaseText::_shortcutKeys' has a wrong offset!");

// ScriptStruct UIFramework.GeneralWindowText
// 0x0028 (0x0028 - 0x0000)
struct FGeneralWindowText final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FLinearColor                           _color;                                            // 0x0018(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeneralWindowText) == 0x000008, "Wrong alignment on FGeneralWindowText");
static_assert(sizeof(FGeneralWindowText) == 0x000028, "Wrong size on FGeneralWindowText");
static_assert(offsetof(FGeneralWindowText, _text) == 0x000000, "Member 'FGeneralWindowText::_text' has a wrong offset!");
static_assert(offsetof(FGeneralWindowText, _color) == 0x000018, "Member 'FGeneralWindowText::_color' has a wrong offset!");

// ScriptStruct UIFramework.WidgetCreationData
// 0x0018 (0x0018 - 0x0000)
struct FWidgetCreationData final
{
public:
	TSubclassOf<class UWidgetBase>                _widgetClass;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAppWidgetPriority                            _priority;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _subPriority;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bAddToScreen;                                     // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bBlockLowPriorityInput;                           // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _totalPriority;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetCreationData) == 0x000008, "Wrong alignment on FWidgetCreationData");
static_assert(sizeof(FWidgetCreationData) == 0x000018, "Wrong size on FWidgetCreationData");
static_assert(offsetof(FWidgetCreationData, _widgetClass) == 0x000000, "Member 'FWidgetCreationData::_widgetClass' has a wrong offset!");
static_assert(offsetof(FWidgetCreationData, _priority) == 0x000008, "Member 'FWidgetCreationData::_priority' has a wrong offset!");
static_assert(offsetof(FWidgetCreationData, _subPriority) == 0x00000C, "Member 'FWidgetCreationData::_subPriority' has a wrong offset!");
static_assert(offsetof(FWidgetCreationData, _bAddToScreen) == 0x000010, "Member 'FWidgetCreationData::_bAddToScreen' has a wrong offset!");
static_assert(offsetof(FWidgetCreationData, _bBlockLowPriorityInput) == 0x000011, "Member 'FWidgetCreationData::_bBlockLowPriorityInput' has a wrong offset!");
static_assert(offsetof(FWidgetCreationData, _totalPriority) == 0x000014, "Member 'FWidgetCreationData::_totalPriority' has a wrong offset!");

}

