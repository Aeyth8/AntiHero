#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BykingUnrealModule

#include "Basic.hpp"

#include "BykingUnrealModule_classes.hpp"
#include "BykingUnrealModule_parameters.hpp"


namespace SDK
{

// Function BykingUnrealModule.ActionBase.BP_ActionDelay
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UActionBase::BP_ActionDelay(float Duration, const struct FLatentActionInfo& LatentInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBase", "BP_ActionDelay");

	Params::ActionBase_BP_ActionDelay Parms{};

	Parms.Duration = Duration;
	Parms.LatentInfo = std::move(LatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BykingUnrealModule.ActionBase.BP_ActionMain
// (Event, Protected, BlueprintEvent)

void UActionBase::BP_ActionMain()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBase", "BP_ActionMain");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BykingUnrealModule.ActionBase.BP_ActionRemote
// (Event, Protected, BlueprintEvent)

void UActionBase::BP_ActionRemote()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBase", "BP_ActionRemote");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BykingUnrealModule.ActionBase.BP_InitializeAction
// (Event, Protected, BlueprintEvent)

void UActionBase::BP_InitializeAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBase", "BP_InitializeAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BykingUnrealModule.ActionBase.BP_LoadParams
// (Event, Protected, BlueprintEvent)

void UActionBase::BP_LoadParams()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBase", "BP_LoadParams");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BykingUnrealModule.ActionBase.BP_OnAnimNotify
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             Type                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Event                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionBase::BP_OnAnimNotify(const class FName& Type, const class FName& Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBase", "BP_OnAnimNotify");

	Params::ActionBase_BP_OnAnimNotify Parms{};

	Parms.Type = Type;
	Parms.Event = Event;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BykingUnrealModule.ActionBase.BP_OnBeginAction
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             PrevAction                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionBase::BP_OnBeginAction(const class FName& PrevAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBase", "BP_OnBeginAction");

	Params::ActionBase_BP_OnBeginAction Parms{};

	Parms.PrevAction = PrevAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BykingUnrealModule.ActionBase.BP_OnEndAction
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             NextAction                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActionBase::BP_OnEndAction(const class FName& NextAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBase", "BP_OnEndAction");

	Params::ActionBase_BP_OnEndAction Parms{};

	Parms.NextAction = NextAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BykingUnrealModule.ActionBase.BP_GetActionName
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FName                       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class FName UActionBase::BP_GetActionName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBase", "BP_GetActionName");

	Params::ActionBase_BP_GetActionName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BykingUnrealModule.ActionBase.BP_GetDeltaSeconds
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UActionBase::BP_GetDeltaSeconds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBase", "BP_GetDeltaSeconds");

	Params::ActionBase_BP_GetDeltaSeconds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BykingUnrealModule.ActionBase.BP_GetOwnerCharacter
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ACharacterBase*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ACharacterBase* UActionBase::BP_GetOwnerCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBase", "BP_GetOwnerCharacter");

	Params::ActionBase_BP_GetOwnerCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BykingUnrealModule.ActionBase.BP_GetSerialNo
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UActionBase::BP_GetSerialNo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBase", "BP_GetSerialNo");

	Params::ActionBase_BP_GetSerialNo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BykingUnrealModule.ActionBase.BP_IsActive
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UActionBase::BP_IsActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBase", "BP_IsActive");

	Params::ActionBase_BP_IsActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BykingUnrealModule.ActionBase.BP_IsBootLayer
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UActionBase::BP_IsBootLayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBase", "BP_IsBootLayer");

	Params::ActionBase_BP_IsBootLayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BykingUnrealModule.CharacterBase.HasCharacterStarted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ACharacterBase::HasCharacterStarted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterBase", "HasCharacterStarted");

	Params::CharacterBase_HasCharacterStarted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BykingUnrealModule.CPP_SequenceActorBase.OnCollbackStop
// (Final, Native, Protected, BlueprintCallable)

void ACPP_SequenceActorBase::OnCollbackStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CPP_SequenceActorBase", "OnCollbackStop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BykingUnrealModule.OutlineSkeletalMeshComponent.SetBpOutlineType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMeshOutlineType                        Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOutlineSkeletalMeshComponent::SetBpOutlineType(EMeshOutlineType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OutlineSkeletalMeshComponent", "SetBpOutlineType");

	Params::OutlineSkeletalMeshComponent_SetBpOutlineType Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BykingUnrealModule.OutlineSkeletalMeshComponent.SetIsEnableOutline
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOutlineSkeletalMeshComponent::SetIsEnableOutline(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OutlineSkeletalMeshComponent", "SetIsEnableOutline");

	Params::OutlineSkeletalMeshComponent_SetIsEnableOutline Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BykingUnrealModule.OutlineSkeletalMeshComponent.SetOutlineType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMeshOutlineType                        Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOutlineSkeletalMeshComponent::SetOutlineType(EMeshOutlineType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OutlineSkeletalMeshComponent", "SetOutlineType");

	Params::OutlineSkeletalMeshComponent_SetOutlineType Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BykingUnrealModule.OutlineSkeletalMeshComponent.GetBpOutlineType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMeshOutlineType                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMeshOutlineType UOutlineSkeletalMeshComponent::GetBpOutlineType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OutlineSkeletalMeshComponent", "GetBpOutlineType");

	Params::OutlineSkeletalMeshComponent_GetBpOutlineType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BykingUnrealModule.OutlineSkeletalMeshComponent.GetOutlineType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMeshOutlineType                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMeshOutlineType UOutlineSkeletalMeshComponent::GetOutlineType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OutlineSkeletalMeshComponent", "GetOutlineType");

	Params::OutlineSkeletalMeshComponent_GetOutlineType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BykingUnrealModule.OutlineSkeletalMeshComponent.IsEnableOutline
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UOutlineSkeletalMeshComponent::IsEnableOutline() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OutlineSkeletalMeshComponent", "IsEnableOutline");

	Params::OutlineSkeletalMeshComponent_IsEnableOutline Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BykingUnrealModule.EnhancedSkeletalMeshComponent.FreezeBone
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFreeze                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEnhancedSkeletalMeshComponent::FreezeBone(class FName BoneName, bool bFreeze)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EnhancedSkeletalMeshComponent", "FreezeBone");

	Params::EnhancedSkeletalMeshComponent_FreezeBone Parms{};

	Parms.BoneName = BoneName;
	Parms.bFreeze = bFreeze;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BykingUnrealModule.HttpChunkBPFunctionLibrary.GetBundleAssets
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FPrimaryAssetId                  BundleScope                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BundleName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSoftObjectPath>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FSoftObjectPath> UHttpChunkBPFunctionLibrary::GetBundleAssets(const struct FPrimaryAssetId& BundleScope, class FName BundleName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HttpChunkBPFunctionLibrary", "GetBundleAssets");

	Params::HttpChunkBPFunctionLibrary_GetBundleAssets Parms{};

	Parms.BundleScope = std::move(BundleScope);
	Parms.BundleName = BundleName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BykingUnrealModule.HttpChunkBPFunctionLibrary.GetChunkLocation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ChunkId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UHttpChunkBPFunctionLibrary::GetChunkLocation(int32 ChunkId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HttpChunkBPFunctionLibrary", "GetChunkLocation");

	Params::HttpChunkBPFunctionLibrary_GetChunkLocation Parms{};

	Parms.ChunkId = ChunkId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BykingUnrealModule.HttpChunkBPFunctionLibrary.GetChunkProgress
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ChunkId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsETA                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHttpChunkBPFunctionLibrary::GetChunkProgress(int32 ChunkId, bool IsETA)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HttpChunkBPFunctionLibrary", "GetChunkProgress");

	Params::HttpChunkBPFunctionLibrary_GetChunkProgress Parms{};

	Parms.ChunkId = ChunkId;
	Parms.IsETA = IsETA;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BykingUnrealModule.HttpChunkBPFunctionLibrary.GetInstallSpeed
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UHttpChunkBPFunctionLibrary::GetInstallSpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HttpChunkBPFunctionLibrary", "GetInstallSpeed");

	Params::HttpChunkBPFunctionLibrary_GetInstallSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BykingUnrealModule.HttpChunkBPFunctionLibrary.PrioritizeChunk
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ChunkId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHttpChunkBPFunctionLibrary::PrioritizeChunk(int32 ChunkId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HttpChunkBPFunctionLibrary", "PrioritizeChunk");

	Params::HttpChunkBPFunctionLibrary_PrioritizeChunk Parms{};

	Parms.ChunkId = ChunkId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BykingUnrealModule.HttpChunkBPFunctionLibrary.SetInstallSpeed
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHttpChunkBPFunctionLibrary::SetInstallSpeed(int32 Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HttpChunkBPFunctionLibrary", "SetInstallSpeed");

	Params::HttpChunkBPFunctionLibrary_SetInstallSpeed Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BykingUnrealModule.MathStatics.BP_CheckNearlyZeroVector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                          InVector                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMathStatics::BP_CheckNearlyZeroVector(const struct FVector& InVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MathStatics", "BP_CheckNearlyZeroVector");

	Params::MathStatics_BP_CheckNearlyZeroVector Parms{};

	Parms.InVector = std::move(InVector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BykingUnrealModule.MathStatics.BP_CheckZeroVector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                          InVector                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMathStatics::BP_CheckZeroVector(const struct FVector& InVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MathStatics", "BP_CheckZeroVector");

	Params::MathStatics_BP_CheckZeroVector Parms{};

	Parms.InVector = std::move(InVector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BykingUnrealModule.MyBlueprintFunctionLibrary.DisableGameLocalizationPreview
// (Final, Native, Static, Public, BlueprintCallable)

void UMyBlueprintFunctionLibrary::DisableGameLocalizationPreview()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MyBlueprintFunctionLibrary", "DisableGameLocalizationPreview");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BykingUnrealModule.MyBlueprintFunctionLibrary.EnableGameLocalizationPreview
// (Final, Native, Static, Public, BlueprintCallable)

void UMyBlueprintFunctionLibrary::EnableGameLocalizationPreview()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MyBlueprintFunctionLibrary", "EnableGameLocalizationPreview");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BykingUnrealModule.MyBlueprintFunctionLibrary.IsEditor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMyBlueprintFunctionLibrary::IsEditor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MyBlueprintFunctionLibrary", "IsEditor");

	Params::MyBlueprintFunctionLibrary_IsEditor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BykingUnrealModule.MyBlueprintFunctionLibrary.IsGameLocalizationPreviewEnabled
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMyBlueprintFunctionLibrary::IsGameLocalizationPreviewEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MyBlueprintFunctionLibrary", "IsGameLocalizationPreviewEnabled");

	Params::MyBlueprintFunctionLibrary_IsGameLocalizationPreviewEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BykingUnrealModule.MyBlueprintFunctionLibrary.SetLocalizationPreviewLanguage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           InCulture                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMyBlueprintFunctionLibrary::SetLocalizationPreviewLanguage(const class FString& InCulture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MyBlueprintFunctionLibrary", "SetLocalizationPreviewLanguage");

	Params::MyBlueprintFunctionLibrary_SetLocalizationPreviewLanguage Parms{};

	Parms.InCulture = std::move(InCulture);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BykingUnrealModule.MyBlueprintFunctionLibrary.StringArraySort
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   In                                                     (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bReverse                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMyBlueprintFunctionLibrary::StringArraySort(TArray<class FString>& In, bool bReverse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MyBlueprintFunctionLibrary", "StringArraySort");

	Params::MyBlueprintFunctionLibrary_StringArraySort Parms{};

	Parms.In = std::move(In);
	Parms.bReverse = bReverse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	In = std::move(Parms.In);
}


// Function BykingUnrealModule.PlatformSubsystem.GetPlatform
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EPlatform                               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EPlatform UPlatformSubsystem::GetPlatform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PlatformSubsystem", "GetPlatform");

	Params::PlatformSubsystem_GetPlatform Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BykingUnrealModule.PlatformSubsystem.ChangePlatformList
// (Final, Native, Protected)

void UPlatformSubsystem::ChangePlatformList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformSubsystem", "ChangePlatformList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BykingUnrealModule.PlatformSubsystem.GetPlatformInputController
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    OutLog                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPlatform                               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EPlatform UPlatformSubsystem::GetPlatformInputController(bool OutLog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformSubsystem", "GetPlatformInputController");

	Params::PlatformSubsystem_GetPlatformInputController Parms{};

	Parms.OutLog = OutLog;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction BykingUnrealModule.PlatformSubsystem.PlatformChangeDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UPlatformSubsystem::PlatformChangeDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformSubsystem", "PlatformChangeDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BykingUnrealModule.PlatformSubsystem.SetFlagFloatingGamePadTextInputCmd
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UPlatformSubsystem::SetFlagFloatingGamePadTextInputCmd(const TArray<class FString>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformSubsystem", "SetFlagFloatingGamePadTextInputCmd");

	Params::PlatformSubsystem_SetFlagFloatingGamePadTextInputCmd Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BykingUnrealModule.PlatformSubsystem.SetFlagOverrideTextInputCmd
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UPlatformSubsystem::SetFlagOverrideTextInputCmd(const TArray<class FString>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformSubsystem", "SetFlagOverrideTextInputCmd");

	Params::PlatformSubsystem_SetFlagOverrideTextInputCmd Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BykingUnrealModule.PlatformSubsystem.SetTextFieldHeightCmd
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UPlatformSubsystem::SetTextFieldHeightCmd(const TArray<class FString>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformSubsystem", "SetTextFieldHeightCmd");

	Params::PlatformSubsystem_SetTextFieldHeightCmd Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BykingUnrealModule.PlatformSubsystem.SetTextFieldWidthCmd
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UPlatformSubsystem::SetTextFieldWidthCmd(const TArray<class FString>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformSubsystem", "SetTextFieldWidthCmd");

	Params::PlatformSubsystem_SetTextFieldWidthCmd Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BykingUnrealModule.PlatformSubsystem.SetTextFieldXPositionCmd
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UPlatformSubsystem::SetTextFieldXPositionCmd(const TArray<class FString>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformSubsystem", "SetTextFieldXPositionCmd");

	Params::PlatformSubsystem_SetTextFieldXPositionCmd Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BykingUnrealModule.PlatformSubsystem.SetTextFieldYPositionCmd
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Args                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UPlatformSubsystem::SetTextFieldYPositionCmd(const TArray<class FString>& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformSubsystem", "SetTextFieldYPositionCmd");

	Params::PlatformSubsystem_SetTextFieldYPositionCmd Parms{};

	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BykingUnrealModule.PlatformSubsystem.ShowSteamGamePadTextInput
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOnGamePadTextInputDismissed     OnEvent                                                (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class FText                             InDescriptionText                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             InExistingText                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   LimitTextNum                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPlatformSubsystem::ShowSteamGamePadTextInput(const struct FOnGamePadTextInputDismissed& OnEvent, const class FText& InDescriptionText, const class FText& InExistingText, int32 LimitTextNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformSubsystem", "ShowSteamGamePadTextInput");

	Params::PlatformSubsystem_ShowSteamGamePadTextInput Parms{};

	Parms.OnEvent = std::move(OnEvent);
	Parms.InDescriptionText = std::move(InDescriptionText);
	Parms.InExistingText = std::move(InExistingText);
	Parms.LimitTextNum = LimitTextNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BykingUnrealModule.PlatformSubsystem.GetSteamGamePadInputText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UPlatformSubsystem::GetSteamGamePadInputText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformSubsystem", "GetSteamGamePadInputText");

	Params::PlatformSubsystem_GetSteamGamePadInputText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BykingUnrealModule.SystemUtility.BytesArrayToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<uint8>                           Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USystemUtility::BytesArrayToString(const TArray<uint8>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SystemUtility", "BytesArrayToString");

	Params::SystemUtility_BytesArrayToString Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BykingUnrealModule.SystemUtility.GetMdLocale
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EMdLocalization                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMdLocalization USystemUtility::GetMdLocale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SystemUtility", "GetMdLocale");

	Params::SystemUtility_GetMdLocale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BykingUnrealModule.SystemUtility.AnsiToUTF8
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<uint8>                           Ansichar                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USystemUtility::AnsiToUTF8(const TArray<uint8>& Ansichar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SystemUtility", "AnsiToUTF8");

	Params::SystemUtility_AnsiToUTF8 Parms{};

	Parms.Ansichar = std::move(Ansichar);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BykingUnrealModule.SystemUtility.FindActorWorld
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UWorld*                           World                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ActorName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* USystemUtility::FindActorWorld(const class UWorld* World, const class FString& ActorName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SystemUtility", "FindActorWorld");

	Params::SystemUtility_FindActorWorld Parms{};

	Parms.World = World;
	Parms.ActorName = std::move(ActorName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BykingUnrealModule.SystemUtility.IsDigitFString
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Str                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USystemUtility::IsDigitFString(const class FString& Str)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SystemUtility", "IsDigitFString");

	Params::SystemUtility_IsDigitFString Parms{};

	Parms.Str = std::move(Str);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

