#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameModule

#include "Basic.hpp"

#include "BackendSubsystem_structs.hpp"
#include "Slate_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CommonModule_structs.hpp"
#include "GameModule_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "UIFramework_structs.hpp"
#include "InputCore_structs.hpp"
#include "BykingUnrealModule_structs.hpp"
#include "MasterDataModule_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "DevelopMenu_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function GameModule.AchievementWork.OnAddItem
// 0x0490 (0x0490 - 0x0000)
struct AchievementWork_OnAddItem final
{
public:
	struct FDbItemCategoryParam                   Item;                                              // 0x0000(0x0488)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0488(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48C[0x4];                                      // 0x048C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AchievementWork_OnAddItem) == 0x000008, "Wrong alignment on AchievementWork_OnAddItem");
static_assert(sizeof(AchievementWork_OnAddItem) == 0x000490, "Wrong size on AchievementWork_OnAddItem");
static_assert(offsetof(AchievementWork_OnAddItem, Item) == 0x000000, "Member 'AchievementWork_OnAddItem::Item' has a wrong offset!");
static_assert(offsetof(AchievementWork_OnAddItem, Quantity) == 0x000488, "Member 'AchievementWork_OnAddItem::Quantity' has a wrong offset!");

// Function GameModule.AchievementWork.SetSendLike
// 0x0004 (0x0004 - 0x0000)
struct AchievementWork_SetSendLike final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AchievementWork_SetSendLike) == 0x000004, "Wrong alignment on AchievementWork_SetSendLike");
static_assert(sizeof(AchievementWork_SetSendLike) == 0x000004, "Wrong size on AchievementWork_SetSendLike");
static_assert(offsetof(AchievementWork_SetSendLike, Count) == 0x000000, "Member 'AchievementWork_SetSendLike::Count' has a wrong offset!");

// Function GameModule.AdjustTextWidget.BP_GetFont
// 0x0058 (0x0058 - 0x0000)
struct AdjustTextWidget_BP_GetFont final
{
public:
	struct FSlateFontInfo                         ReturnValue;                                       // 0x0000(0x0058)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdjustTextWidget_BP_GetFont) == 0x000008, "Wrong alignment on AdjustTextWidget_BP_GetFont");
static_assert(sizeof(AdjustTextWidget_BP_GetFont) == 0x000058, "Wrong size on AdjustTextWidget_BP_GetFont");
static_assert(offsetof(AdjustTextWidget_BP_GetFont, ReturnValue) == 0x000000, "Member 'AdjustTextWidget_BP_GetFont::ReturnValue' has a wrong offset!");

// Function GameModule.AdjustTextWidget.BP_GetText
// 0x0018 (0x0018 - 0x0000)
struct AdjustTextWidget_BP_GetText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdjustTextWidget_BP_GetText) == 0x000008, "Wrong alignment on AdjustTextWidget_BP_GetText");
static_assert(sizeof(AdjustTextWidget_BP_GetText) == 0x000018, "Wrong size on AdjustTextWidget_BP_GetText");
static_assert(offsetof(AdjustTextWidget_BP_GetText, ReturnValue) == 0x000000, "Member 'AdjustTextWidget_BP_GetText::ReturnValue' has a wrong offset!");

// Function GameModule.AdjustTextWidget.BP_SetFont
// 0x0058 (0x0058 - 0x0000)
struct AdjustTextWidget_BP_SetFont final
{
public:
	struct FSlateFontInfo                         Font;                                              // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdjustTextWidget_BP_SetFont) == 0x000008, "Wrong alignment on AdjustTextWidget_BP_SetFont");
static_assert(sizeof(AdjustTextWidget_BP_SetFont) == 0x000058, "Wrong size on AdjustTextWidget_BP_SetFont");
static_assert(offsetof(AdjustTextWidget_BP_SetFont, Font) == 0x000000, "Member 'AdjustTextWidget_BP_SetFont::Font' has a wrong offset!");

// Function GameModule.AdjustTextWidget.BP_SetJustification
// 0x0001 (0x0001 - 0x0000)
struct AdjustTextWidget_BP_SetJustification final
{
public:
	ETextJustify                                  Justification;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdjustTextWidget_BP_SetJustification) == 0x000001, "Wrong alignment on AdjustTextWidget_BP_SetJustification");
static_assert(sizeof(AdjustTextWidget_BP_SetJustification) == 0x000001, "Wrong size on AdjustTextWidget_BP_SetJustification");
static_assert(offsetof(AdjustTextWidget_BP_SetJustification, Justification) == 0x000000, "Member 'AdjustTextWidget_BP_SetJustification::Justification' has a wrong offset!");

// Function GameModule.AdjustTextWidget.BP_SetLineBreak
// 0x0001 (0x0001 - 0x0000)
struct AdjustTextWidget_BP_SetLineBreak final
{
public:
	bool                                          LineBreak;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdjustTextWidget_BP_SetLineBreak) == 0x000001, "Wrong alignment on AdjustTextWidget_BP_SetLineBreak");
static_assert(sizeof(AdjustTextWidget_BP_SetLineBreak) == 0x000001, "Wrong size on AdjustTextWidget_BP_SetLineBreak");
static_assert(offsetof(AdjustTextWidget_BP_SetLineBreak, LineBreak) == 0x000000, "Member 'AdjustTextWidget_BP_SetLineBreak::LineBreak' has a wrong offset!");

// Function GameModule.AdjustTextWidget.BP_SetText
// 0x0018 (0x0018 - 0x0000)
struct AdjustTextWidget_BP_SetText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdjustTextWidget_BP_SetText) == 0x000008, "Wrong alignment on AdjustTextWidget_BP_SetText");
static_assert(sizeof(AdjustTextWidget_BP_SetText) == 0x000018, "Wrong size on AdjustTextWidget_BP_SetText");
static_assert(offsetof(AdjustTextWidget_BP_SetText, Text) == 0x000000, "Member 'AdjustTextWidget_BP_SetText::Text' has a wrong offset!");

// Function GameModule.AdjustTextWidget.BP_SetTextColorAndOpacity
// 0x0028 (0x0028 - 0x0000)
struct AdjustTextWidget_BP_SetTextColorAndOpacity final
{
public:
	struct FSlateColor                            InColorAndOpacity;                                 // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdjustTextWidget_BP_SetTextColorAndOpacity) == 0x000008, "Wrong alignment on AdjustTextWidget_BP_SetTextColorAndOpacity");
static_assert(sizeof(AdjustTextWidget_BP_SetTextColorAndOpacity) == 0x000028, "Wrong size on AdjustTextWidget_BP_SetTextColorAndOpacity");
static_assert(offsetof(AdjustTextWidget_BP_SetTextColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'AdjustTextWidget_BP_SetTextColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function GameModule.Animation.BP_AnimationBlendingOutStartedDelegate
// 0x0014 (0x0014 - 0x0000)
struct Animation_BP_AnimationBlendingOutStartedDelegate final
{
public:
	TDelegate<void()>                             Delegate;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	EAnimationId                                  ID;                                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Animation_BP_AnimationBlendingOutStartedDelegate) == 0x000004, "Wrong alignment on Animation_BP_AnimationBlendingOutStartedDelegate");
static_assert(sizeof(Animation_BP_AnimationBlendingOutStartedDelegate) == 0x000014, "Wrong size on Animation_BP_AnimationBlendingOutStartedDelegate");
static_assert(offsetof(Animation_BP_AnimationBlendingOutStartedDelegate, Delegate) == 0x000000, "Member 'Animation_BP_AnimationBlendingOutStartedDelegate::Delegate' has a wrong offset!");
static_assert(offsetof(Animation_BP_AnimationBlendingOutStartedDelegate, ID) == 0x000010, "Member 'Animation_BP_AnimationBlendingOutStartedDelegate::ID' has a wrong offset!");

// Function GameModule.Animation.BP_AnimationEndedDelegate
// 0x0014 (0x0014 - 0x0000)
struct Animation_BP_AnimationEndedDelegate final
{
public:
	TDelegate<void()>                             Delegate;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	EAnimationId                                  ID;                                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Animation_BP_AnimationEndedDelegate) == 0x000004, "Wrong alignment on Animation_BP_AnimationEndedDelegate");
static_assert(sizeof(Animation_BP_AnimationEndedDelegate) == 0x000014, "Wrong size on Animation_BP_AnimationEndedDelegate");
static_assert(offsetof(Animation_BP_AnimationEndedDelegate, Delegate) == 0x000000, "Member 'Animation_BP_AnimationEndedDelegate::Delegate' has a wrong offset!");
static_assert(offsetof(Animation_BP_AnimationEndedDelegate, ID) == 0x000010, "Member 'Animation_BP_AnimationEndedDelegate::ID' has a wrong offset!");

// Function GameModule.Animation.BP_ChangeAnimationAsset
// 0x0028 (0x0028 - 0x0000)
struct Animation_BP_ChangeAnimationAsset final
{
public:
	ECharacterId                                  CharaID;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EAnimationId>                          SrcIds;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FName>                           DstIds;                                            // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_ChangeAnimationAsset) == 0x000008, "Wrong alignment on Animation_BP_ChangeAnimationAsset");
static_assert(sizeof(Animation_BP_ChangeAnimationAsset) == 0x000028, "Wrong size on Animation_BP_ChangeAnimationAsset");
static_assert(offsetof(Animation_BP_ChangeAnimationAsset, CharaID) == 0x000000, "Member 'Animation_BP_ChangeAnimationAsset::CharaID' has a wrong offset!");
static_assert(offsetof(Animation_BP_ChangeAnimationAsset, SrcIds) == 0x000008, "Member 'Animation_BP_ChangeAnimationAsset::SrcIds' has a wrong offset!");
static_assert(offsetof(Animation_BP_ChangeAnimationAsset, DstIds) == 0x000018, "Member 'Animation_BP_ChangeAnimationAsset::DstIds' has a wrong offset!");

// Function GameModule.Animation.BP_ChangeNagaraGuard
// 0x0001 (0x0001 - 0x0000)
struct Animation_BP_ChangeNagaraGuard final
{
public:
	ECharacterId                                  CharaID;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_ChangeNagaraGuard) == 0x000001, "Wrong alignment on Animation_BP_ChangeNagaraGuard");
static_assert(sizeof(Animation_BP_ChangeNagaraGuard) == 0x000001, "Wrong size on Animation_BP_ChangeNagaraGuard");
static_assert(offsetof(Animation_BP_ChangeNagaraGuard, CharaID) == 0x000000, "Member 'Animation_BP_ChangeNagaraGuard::CharaID' has a wrong offset!");

// Function GameModule.Animation.BP_ChangeNagaraOtherCharacter
// 0x0002 (0x0002 - 0x0000)
struct Animation_BP_ChangeNagaraOtherCharacter final
{
public:
	ECharacterId                                  CharaID;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         VariationNo;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_ChangeNagaraOtherCharacter) == 0x000001, "Wrong alignment on Animation_BP_ChangeNagaraOtherCharacter");
static_assert(sizeof(Animation_BP_ChangeNagaraOtherCharacter) == 0x000002, "Wrong size on Animation_BP_ChangeNagaraOtherCharacter");
static_assert(offsetof(Animation_BP_ChangeNagaraOtherCharacter, CharaID) == 0x000000, "Member 'Animation_BP_ChangeNagaraOtherCharacter::CharaID' has a wrong offset!");
static_assert(offsetof(Animation_BP_ChangeNagaraOtherCharacter, VariationNo) == 0x000001, "Member 'Animation_BP_ChangeNagaraOtherCharacter::VariationNo' has a wrong offset!");

// Function GameModule.Animation.BP_ChangeNagaraOtherUnique
// 0x0008 (0x0008 - 0x0000)
struct Animation_BP_ChangeNagaraOtherUnique final
{
public:
	int32                                         UniqueNo;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterId                                  CharaID;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         VariationNo;                                       // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Animation_BP_ChangeNagaraOtherUnique) == 0x000004, "Wrong alignment on Animation_BP_ChangeNagaraOtherUnique");
static_assert(sizeof(Animation_BP_ChangeNagaraOtherUnique) == 0x000008, "Wrong size on Animation_BP_ChangeNagaraOtherUnique");
static_assert(offsetof(Animation_BP_ChangeNagaraOtherUnique, UniqueNo) == 0x000000, "Member 'Animation_BP_ChangeNagaraOtherUnique::UniqueNo' has a wrong offset!");
static_assert(offsetof(Animation_BP_ChangeNagaraOtherUnique, CharaID) == 0x000004, "Member 'Animation_BP_ChangeNagaraOtherUnique::CharaID' has a wrong offset!");
static_assert(offsetof(Animation_BP_ChangeNagaraOtherUnique, VariationNo) == 0x000005, "Member 'Animation_BP_ChangeNagaraOtherUnique::VariationNo' has a wrong offset!");

// Function GameModule.Animation.BP_ChangeUniqueOtherCharacter
// 0x0008 (0x0008 - 0x0000)
struct Animation_BP_ChangeUniqueOtherCharacter final
{
public:
	int32                                         UniqueNo;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterId                                  CharaID;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         VariationNo;                                       // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Animation_BP_ChangeUniqueOtherCharacter) == 0x000004, "Wrong alignment on Animation_BP_ChangeUniqueOtherCharacter");
static_assert(sizeof(Animation_BP_ChangeUniqueOtherCharacter) == 0x000008, "Wrong size on Animation_BP_ChangeUniqueOtherCharacter");
static_assert(offsetof(Animation_BP_ChangeUniqueOtherCharacter, UniqueNo) == 0x000000, "Member 'Animation_BP_ChangeUniqueOtherCharacter::UniqueNo' has a wrong offset!");
static_assert(offsetof(Animation_BP_ChangeUniqueOtherCharacter, CharaID) == 0x000004, "Member 'Animation_BP_ChangeUniqueOtherCharacter::CharaID' has a wrong offset!");
static_assert(offsetof(Animation_BP_ChangeUniqueOtherCharacter, VariationNo) == 0x000005, "Member 'Animation_BP_ChangeUniqueOtherCharacter::VariationNo' has a wrong offset!");

// Function GameModule.Animation.BP_DisableAnimNotify
// 0x0004 (0x0004 - 0x0000)
struct Animation_BP_DisableAnimNotify final
{
public:
	int32                                         NotifyTypeFlags;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_DisableAnimNotify) == 0x000004, "Wrong alignment on Animation_BP_DisableAnimNotify");
static_assert(sizeof(Animation_BP_DisableAnimNotify) == 0x000004, "Wrong size on Animation_BP_DisableAnimNotify");
static_assert(offsetof(Animation_BP_DisableAnimNotify, NotifyTypeFlags) == 0x000000, "Member 'Animation_BP_DisableAnimNotify::NotifyTypeFlags' has a wrong offset!");

// Function GameModule.Animation.BP_DisableRootMotion
// 0x0002 (0x0002 - 0x0000)
struct Animation_BP_DisableRootMotion final
{
public:
	EAnimationSlot                                Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisable;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_DisableRootMotion) == 0x000001, "Wrong alignment on Animation_BP_DisableRootMotion");
static_assert(sizeof(Animation_BP_DisableRootMotion) == 0x000002, "Wrong size on Animation_BP_DisableRootMotion");
static_assert(offsetof(Animation_BP_DisableRootMotion, Slot) == 0x000000, "Member 'Animation_BP_DisableRootMotion::Slot' has a wrong offset!");
static_assert(offsetof(Animation_BP_DisableRootMotion, bDisable) == 0x000001, "Member 'Animation_BP_DisableRootMotion::bDisable' has a wrong offset!");

// Function GameModule.Animation.BP_EmoteCodeToAnimIdName
// 0x000C (0x000C - 0x0000)
struct Animation_BP_EmoteCodeToAnimIdName final
{
public:
	int32                                         EmoteCode;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_EmoteCodeToAnimIdName) == 0x000004, "Wrong alignment on Animation_BP_EmoteCodeToAnimIdName");
static_assert(sizeof(Animation_BP_EmoteCodeToAnimIdName) == 0x00000C, "Wrong size on Animation_BP_EmoteCodeToAnimIdName");
static_assert(offsetof(Animation_BP_EmoteCodeToAnimIdName, EmoteCode) == 0x000000, "Member 'Animation_BP_EmoteCodeToAnimIdName::EmoteCode' has a wrong offset!");
static_assert(offsetof(Animation_BP_EmoteCodeToAnimIdName, ReturnValue) == 0x000004, "Member 'Animation_BP_EmoteCodeToAnimIdName::ReturnValue' has a wrong offset!");

// Function GameModule.Animation.BP_JumpToSection
// 0x000C (0x000C - 0x0000)
struct Animation_BP_JumpToSection final
{
public:
	class FName                                   SectionName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationSlot                                Slot;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Animation_BP_JumpToSection) == 0x000004, "Wrong alignment on Animation_BP_JumpToSection");
static_assert(sizeof(Animation_BP_JumpToSection) == 0x00000C, "Wrong size on Animation_BP_JumpToSection");
static_assert(offsetof(Animation_BP_JumpToSection, SectionName) == 0x000000, "Member 'Animation_BP_JumpToSection::SectionName' has a wrong offset!");
static_assert(offsetof(Animation_BP_JumpToSection, Slot) == 0x000008, "Member 'Animation_BP_JumpToSection::Slot' has a wrong offset!");

// Function GameModule.Animation.BP_PlayAnimation
// 0x0010 (0x0010 - 0x0000)
struct Animation_BP_PlayAnimation final
{
public:
	EAnimationId                                  ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayRate;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotReplay;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Animation_BP_PlayAnimation) == 0x000004, "Wrong alignment on Animation_BP_PlayAnimation");
static_assert(sizeof(Animation_BP_PlayAnimation) == 0x000010, "Wrong size on Animation_BP_PlayAnimation");
static_assert(offsetof(Animation_BP_PlayAnimation, ID) == 0x000000, "Member 'Animation_BP_PlayAnimation::ID' has a wrong offset!");
static_assert(offsetof(Animation_BP_PlayAnimation, PlayRate) == 0x000004, "Member 'Animation_BP_PlayAnimation::PlayRate' has a wrong offset!");
static_assert(offsetof(Animation_BP_PlayAnimation, BlendInTime) == 0x000008, "Member 'Animation_BP_PlayAnimation::BlendInTime' has a wrong offset!");
static_assert(offsetof(Animation_BP_PlayAnimation, bNotReplay) == 0x00000C, "Member 'Animation_BP_PlayAnimation::bNotReplay' has a wrong offset!");

// Function GameModule.Animation.BP_PlayAnimationAsync
// 0x001C (0x001C - 0x0000)
struct Animation_BP_PlayAnimationAsync final
{
public:
	ECharacterId                                  CharaID;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ID;                                                // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationSlot                                Slot;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayRate;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_PlayAnimationAsync) == 0x000004, "Wrong alignment on Animation_BP_PlayAnimationAsync");
static_assert(sizeof(Animation_BP_PlayAnimationAsync) == 0x00001C, "Wrong size on Animation_BP_PlayAnimationAsync");
static_assert(offsetof(Animation_BP_PlayAnimationAsync, CharaID) == 0x000000, "Member 'Animation_BP_PlayAnimationAsync::CharaID' has a wrong offset!");
static_assert(offsetof(Animation_BP_PlayAnimationAsync, ID) == 0x000004, "Member 'Animation_BP_PlayAnimationAsync::ID' has a wrong offset!");
static_assert(offsetof(Animation_BP_PlayAnimationAsync, Slot) == 0x00000C, "Member 'Animation_BP_PlayAnimationAsync::Slot' has a wrong offset!");
static_assert(offsetof(Animation_BP_PlayAnimationAsync, PlayRate) == 0x000010, "Member 'Animation_BP_PlayAnimationAsync::PlayRate' has a wrong offset!");
static_assert(offsetof(Animation_BP_PlayAnimationAsync, BlendInTime) == 0x000014, "Member 'Animation_BP_PlayAnimationAsync::BlendInTime' has a wrong offset!");
static_assert(offsetof(Animation_BP_PlayAnimationAsync, BlendOutTime) == 0x000018, "Member 'Animation_BP_PlayAnimationAsync::BlendOutTime' has a wrong offset!");

// Function GameModule.Animation.BP_PlayAnimationEmote
// 0x000C (0x000C - 0x0000)
struct Animation_BP_PlayAnimationEmote final
{
public:
	int32                                         EmoteCode;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_PlayAnimationEmote) == 0x000004, "Wrong alignment on Animation_BP_PlayAnimationEmote");
static_assert(sizeof(Animation_BP_PlayAnimationEmote) == 0x00000C, "Wrong size on Animation_BP_PlayAnimationEmote");
static_assert(offsetof(Animation_BP_PlayAnimationEmote, EmoteCode) == 0x000000, "Member 'Animation_BP_PlayAnimationEmote::EmoteCode' has a wrong offset!");
static_assert(offsetof(Animation_BP_PlayAnimationEmote, PlayRate) == 0x000004, "Member 'Animation_BP_PlayAnimationEmote::PlayRate' has a wrong offset!");
static_assert(offsetof(Animation_BP_PlayAnimationEmote, BlendInTime) == 0x000008, "Member 'Animation_BP_PlayAnimationEmote::BlendInTime' has a wrong offset!");

// Function GameModule.Animation.BP_PlayAnimationFace
// 0x000C (0x000C - 0x0000)
struct Animation_BP_PlayAnimationFace final
{
public:
	EAnimationId                                  ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayRate;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_PlayAnimationFace) == 0x000004, "Wrong alignment on Animation_BP_PlayAnimationFace");
static_assert(sizeof(Animation_BP_PlayAnimationFace) == 0x00000C, "Wrong size on Animation_BP_PlayAnimationFace");
static_assert(offsetof(Animation_BP_PlayAnimationFace, ID) == 0x000000, "Member 'Animation_BP_PlayAnimationFace::ID' has a wrong offset!");
static_assert(offsetof(Animation_BP_PlayAnimationFace, PlayRate) == 0x000004, "Member 'Animation_BP_PlayAnimationFace::PlayRate' has a wrong offset!");
static_assert(offsetof(Animation_BP_PlayAnimationFace, BlendInTime) == 0x000008, "Member 'Animation_BP_PlayAnimationFace::BlendInTime' has a wrong offset!");

// Function GameModule.Animation.BP_PlayAnimationNagara
// 0x000C (0x000C - 0x0000)
struct Animation_BP_PlayAnimationNagara final
{
public:
	EAnimationId                                  ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayRate;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_PlayAnimationNagara) == 0x000004, "Wrong alignment on Animation_BP_PlayAnimationNagara");
static_assert(sizeof(Animation_BP_PlayAnimationNagara) == 0x00000C, "Wrong size on Animation_BP_PlayAnimationNagara");
static_assert(offsetof(Animation_BP_PlayAnimationNagara, ID) == 0x000000, "Member 'Animation_BP_PlayAnimationNagara::ID' has a wrong offset!");
static_assert(offsetof(Animation_BP_PlayAnimationNagara, PlayRate) == 0x000004, "Member 'Animation_BP_PlayAnimationNagara::PlayRate' has a wrong offset!");
static_assert(offsetof(Animation_BP_PlayAnimationNagara, BlendInTime) == 0x000008, "Member 'Animation_BP_PlayAnimationNagara::BlendInTime' has a wrong offset!");

// Function GameModule.Animation.BP_PlayAnimationNagaraDamage
// 0x000C (0x000C - 0x0000)
struct Animation_BP_PlayAnimationNagaraDamage final
{
public:
	EAnimationId                                  ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayRate;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_PlayAnimationNagaraDamage) == 0x000004, "Wrong alignment on Animation_BP_PlayAnimationNagaraDamage");
static_assert(sizeof(Animation_BP_PlayAnimationNagaraDamage) == 0x00000C, "Wrong size on Animation_BP_PlayAnimationNagaraDamage");
static_assert(offsetof(Animation_BP_PlayAnimationNagaraDamage, ID) == 0x000000, "Member 'Animation_BP_PlayAnimationNagaraDamage::ID' has a wrong offset!");
static_assert(offsetof(Animation_BP_PlayAnimationNagaraDamage, PlayRate) == 0x000004, "Member 'Animation_BP_PlayAnimationNagaraDamage::PlayRate' has a wrong offset!");
static_assert(offsetof(Animation_BP_PlayAnimationNagaraDamage, BlendInTime) == 0x000008, "Member 'Animation_BP_PlayAnimationNagaraDamage::BlendInTime' has a wrong offset!");

// Function GameModule.Animation.BP_PlayAnimationNagaraGuard
// 0x000C (0x000C - 0x0000)
struct Animation_BP_PlayAnimationNagaraGuard final
{
public:
	EAnimationId                                  ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayRate;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_PlayAnimationNagaraGuard) == 0x000004, "Wrong alignment on Animation_BP_PlayAnimationNagaraGuard");
static_assert(sizeof(Animation_BP_PlayAnimationNagaraGuard) == 0x00000C, "Wrong size on Animation_BP_PlayAnimationNagaraGuard");
static_assert(offsetof(Animation_BP_PlayAnimationNagaraGuard, ID) == 0x000000, "Member 'Animation_BP_PlayAnimationNagaraGuard::ID' has a wrong offset!");
static_assert(offsetof(Animation_BP_PlayAnimationNagaraGuard, PlayRate) == 0x000004, "Member 'Animation_BP_PlayAnimationNagaraGuard::PlayRate' has a wrong offset!");
static_assert(offsetof(Animation_BP_PlayAnimationNagaraGuard, BlendInTime) == 0x000008, "Member 'Animation_BP_PlayAnimationNagaraGuard::BlendInTime' has a wrong offset!");

// Function GameModule.Animation.BP_PlayAnimationReplicate
// 0x0008 (0x0008 - 0x0000)
struct Animation_BP_PlayAnimationReplicate final
{
public:
	EAnimationId                                  ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationSlot                                Slot;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayRate;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_PlayAnimationReplicate) == 0x000004, "Wrong alignment on Animation_BP_PlayAnimationReplicate");
static_assert(sizeof(Animation_BP_PlayAnimationReplicate) == 0x000008, "Wrong size on Animation_BP_PlayAnimationReplicate");
static_assert(offsetof(Animation_BP_PlayAnimationReplicate, ID) == 0x000000, "Member 'Animation_BP_PlayAnimationReplicate::ID' has a wrong offset!");
static_assert(offsetof(Animation_BP_PlayAnimationReplicate, Slot) == 0x000001, "Member 'Animation_BP_PlayAnimationReplicate::Slot' has a wrong offset!");
static_assert(offsetof(Animation_BP_PlayAnimationReplicate, PlayRate) == 0x000004, "Member 'Animation_BP_PlayAnimationReplicate::PlayRate' has a wrong offset!");

// Function GameModule.Animation.BP_ResetDynamics
// 0x0008 (0x0008 - 0x0000)
struct Animation_BP_ResetDynamics final
{
public:
	ETeleportType                                 TeleportType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_ResetDynamics) == 0x000004, "Wrong alignment on Animation_BP_ResetDynamics");
static_assert(sizeof(Animation_BP_ResetDynamics) == 0x000008, "Wrong size on Animation_BP_ResetDynamics");
static_assert(offsetof(Animation_BP_ResetDynamics, TeleportType) == 0x000000, "Member 'Animation_BP_ResetDynamics::TeleportType' has a wrong offset!");
static_assert(offsetof(Animation_BP_ResetDynamics, Duration) == 0x000004, "Member 'Animation_BP_ResetDynamics::Duration' has a wrong offset!");

// Function GameModule.Animation.BP_SetAimingRate
// 0x0008 (0x0008 - 0x0000)
struct Animation_BP_SetAimingRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_SetAimingRate) == 0x000004, "Wrong alignment on Animation_BP_SetAimingRate");
static_assert(sizeof(Animation_BP_SetAimingRate) == 0x000008, "Wrong size on Animation_BP_SetAimingRate");
static_assert(offsetof(Animation_BP_SetAimingRate, Rate) == 0x000000, "Member 'Animation_BP_SetAimingRate::Rate' has a wrong offset!");
static_assert(offsetof(Animation_BP_SetAimingRate, BlendTime) == 0x000004, "Member 'Animation_BP_SetAimingRate::BlendTime' has a wrong offset!");

// Function GameModule.Animation.BP_SetAimTargetLocation
// 0x000C (0x000C - 0x0000)
struct Animation_BP_SetAimTargetLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_SetAimTargetLocation) == 0x000004, "Wrong alignment on Animation_BP_SetAimTargetLocation");
static_assert(sizeof(Animation_BP_SetAimTargetLocation) == 0x00000C, "Wrong size on Animation_BP_SetAimTargetLocation");
static_assert(offsetof(Animation_BP_SetAimTargetLocation, Location) == 0x000000, "Member 'Animation_BP_SetAimTargetLocation::Location' has a wrong offset!");

// Function GameModule.Animation.BP_SetAnimationSpeedRate
// 0x0004 (0x0004 - 0x0000)
struct Animation_BP_SetAnimationSpeedRate final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_SetAnimationSpeedRate) == 0x000004, "Wrong alignment on Animation_BP_SetAnimationSpeedRate");
static_assert(sizeof(Animation_BP_SetAnimationSpeedRate) == 0x000004, "Wrong size on Animation_BP_SetAnimationSpeedRate");
static_assert(offsetof(Animation_BP_SetAnimationSpeedRate, Speed) == 0x000000, "Member 'Animation_BP_SetAnimationSpeedRate::Speed' has a wrong offset!");

// Function GameModule.Animation.BP_SetCenterRotationOffset
// 0x000C (0x000C - 0x0000)
struct Animation_BP_SetCenterRotationOffset final
{
public:
	struct FRotator                               Rot;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_SetCenterRotationOffset) == 0x000004, "Wrong alignment on Animation_BP_SetCenterRotationOffset");
static_assert(sizeof(Animation_BP_SetCenterRotationOffset) == 0x00000C, "Wrong size on Animation_BP_SetCenterRotationOffset");
static_assert(offsetof(Animation_BP_SetCenterRotationOffset, Rot) == 0x000000, "Member 'Animation_BP_SetCenterRotationOffset::Rot' has a wrong offset!");

// Function GameModule.Animation.BP_SetCenterTransOffset
// 0x000C (0x000C - 0x0000)
struct Animation_BP_SetCenterTransOffset final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_SetCenterTransOffset) == 0x000004, "Wrong alignment on Animation_BP_SetCenterTransOffset");
static_assert(sizeof(Animation_BP_SetCenterTransOffset) == 0x00000C, "Wrong size on Animation_BP_SetCenterTransOffset");
static_assert(offsetof(Animation_BP_SetCenterTransOffset, Offset) == 0x000000, "Member 'Animation_BP_SetCenterTransOffset::Offset' has a wrong offset!");

// Function GameModule.Animation.BP_SetCurrentPlayPosition
// 0x0008 (0x0008 - 0x0000)
struct Animation_BP_SetCurrentPlayPosition final
{
public:
	EAnimationSlot                                Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Position;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_SetCurrentPlayPosition) == 0x000004, "Wrong alignment on Animation_BP_SetCurrentPlayPosition");
static_assert(sizeof(Animation_BP_SetCurrentPlayPosition) == 0x000008, "Wrong size on Animation_BP_SetCurrentPlayPosition");
static_assert(offsetof(Animation_BP_SetCurrentPlayPosition, Slot) == 0x000000, "Member 'Animation_BP_SetCurrentPlayPosition::Slot' has a wrong offset!");
static_assert(offsetof(Animation_BP_SetCurrentPlayPosition, Position) == 0x000004, "Member 'Animation_BP_SetCurrentPlayPosition::Position' has a wrong offset!");

// Function GameModule.Animation.BP_SetFaceAimingRate
// 0x0008 (0x0008 - 0x0000)
struct Animation_BP_SetFaceAimingRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_SetFaceAimingRate) == 0x000004, "Wrong alignment on Animation_BP_SetFaceAimingRate");
static_assert(sizeof(Animation_BP_SetFaceAimingRate) == 0x000008, "Wrong size on Animation_BP_SetFaceAimingRate");
static_assert(offsetof(Animation_BP_SetFaceAimingRate, Rate) == 0x000000, "Member 'Animation_BP_SetFaceAimingRate::Rate' has a wrong offset!");
static_assert(offsetof(Animation_BP_SetFaceAimingRate, BlendTime) == 0x000004, "Member 'Animation_BP_SetFaceAimingRate::BlendTime' has a wrong offset!");

// Function GameModule.Animation.BP_SetFaceDamageOneShot
// 0x0014 (0x0014 - 0x0000)
struct Animation_BP_SetFaceDamageOneShot final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_SetFaceDamageOneShot) == 0x000004, "Wrong alignment on Animation_BP_SetFaceDamageOneShot");
static_assert(sizeof(Animation_BP_SetFaceDamageOneShot) == 0x000014, "Wrong size on Animation_BP_SetFaceDamageOneShot");
static_assert(offsetof(Animation_BP_SetFaceDamageOneShot, Location) == 0x000000, "Member 'Animation_BP_SetFaceDamageOneShot::Location' has a wrong offset!");
static_assert(offsetof(Animation_BP_SetFaceDamageOneShot, Rate) == 0x00000C, "Member 'Animation_BP_SetFaceDamageOneShot::Rate' has a wrong offset!");
static_assert(offsetof(Animation_BP_SetFaceDamageOneShot, BlendTime) == 0x000010, "Member 'Animation_BP_SetFaceDamageOneShot::BlendTime' has a wrong offset!");

// Function GameModule.Animation.BP_SetLeanRate
// 0x0008 (0x0008 - 0x0000)
struct Animation_BP_SetLeanRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_SetLeanRate) == 0x000004, "Wrong alignment on Animation_BP_SetLeanRate");
static_assert(sizeof(Animation_BP_SetLeanRate) == 0x000008, "Wrong size on Animation_BP_SetLeanRate");
static_assert(offsetof(Animation_BP_SetLeanRate, Rate) == 0x000000, "Member 'Animation_BP_SetLeanRate::Rate' has a wrong offset!");
static_assert(offsetof(Animation_BP_SetLeanRate, MaxSpeed) == 0x000004, "Member 'Animation_BP_SetLeanRate::MaxSpeed' has a wrong offset!");

// Function GameModule.Animation.BP_SetMoveType
// 0x0001 (0x0001 - 0x0000)
struct Animation_BP_SetMoveType final
{
public:
	EAnimationMoveType                            Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_SetMoveType) == 0x000001, "Wrong alignment on Animation_BP_SetMoveType");
static_assert(sizeof(Animation_BP_SetMoveType) == 0x000001, "Wrong size on Animation_BP_SetMoveType");
static_assert(offsetof(Animation_BP_SetMoveType, Type) == 0x000000, "Member 'Animation_BP_SetMoveType::Type' has a wrong offset!");

// Function GameModule.Animation.BP_SetPlayRate
// 0x0008 (0x0008 - 0x0000)
struct Animation_BP_SetPlayRate final
{
public:
	EAnimationSlot                                Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayRate;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_SetPlayRate) == 0x000004, "Wrong alignment on Animation_BP_SetPlayRate");
static_assert(sizeof(Animation_BP_SetPlayRate) == 0x000008, "Wrong size on Animation_BP_SetPlayRate");
static_assert(offsetof(Animation_BP_SetPlayRate, Slot) == 0x000000, "Member 'Animation_BP_SetPlayRate::Slot' has a wrong offset!");
static_assert(offsetof(Animation_BP_SetPlayRate, PlayRate) == 0x000004, "Member 'Animation_BP_SetPlayRate::PlayRate' has a wrong offset!");

// Function GameModule.Animation.BP_SetRunMoveDistance
// 0x0004 (0x0004 - 0x0000)
struct Animation_BP_SetRunMoveDistance final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_SetRunMoveDistance) == 0x000004, "Wrong alignment on Animation_BP_SetRunMoveDistance");
static_assert(sizeof(Animation_BP_SetRunMoveDistance) == 0x000004, "Wrong size on Animation_BP_SetRunMoveDistance");
static_assert(offsetof(Animation_BP_SetRunMoveDistance, Distance) == 0x000000, "Member 'Animation_BP_SetRunMoveDistance::Distance' has a wrong offset!");

// Function GameModule.Animation.BP_SetWalkMoveDistance
// 0x0004 (0x0004 - 0x0000)
struct Animation_BP_SetWalkMoveDistance final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_SetWalkMoveDistance) == 0x000004, "Wrong alignment on Animation_BP_SetWalkMoveDistance");
static_assert(sizeof(Animation_BP_SetWalkMoveDistance) == 0x000004, "Wrong size on Animation_BP_SetWalkMoveDistance");
static_assert(offsetof(Animation_BP_SetWalkMoveDistance, Distance) == 0x000000, "Member 'Animation_BP_SetWalkMoveDistance::Distance' has a wrong offset!");

// Function GameModule.Animation.BP_SetWholeAimingRate
// 0x0008 (0x0008 - 0x0000)
struct Animation_BP_SetWholeAimingRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_SetWholeAimingRate) == 0x000004, "Wrong alignment on Animation_BP_SetWholeAimingRate");
static_assert(sizeof(Animation_BP_SetWholeAimingRate) == 0x000008, "Wrong size on Animation_BP_SetWholeAimingRate");
static_assert(offsetof(Animation_BP_SetWholeAimingRate, Rate) == 0x000000, "Member 'Animation_BP_SetWholeAimingRate::Rate' has a wrong offset!");
static_assert(offsetof(Animation_BP_SetWholeAimingRate, BlendTime) == 0x000004, "Member 'Animation_BP_SetWholeAimingRate::BlendTime' has a wrong offset!");

// Function GameModule.Animation.BP_StopAnimation
// 0x0008 (0x0008 - 0x0000)
struct Animation_BP_StopAnimation final
{
public:
	EAnimationSlot                                Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendOutTime;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_StopAnimation) == 0x000004, "Wrong alignment on Animation_BP_StopAnimation");
static_assert(sizeof(Animation_BP_StopAnimation) == 0x000008, "Wrong size on Animation_BP_StopAnimation");
static_assert(offsetof(Animation_BP_StopAnimation, Slot) == 0x000000, "Member 'Animation_BP_StopAnimation::Slot' has a wrong offset!");
static_assert(offsetof(Animation_BP_StopAnimation, BlendOutTime) == 0x000004, "Member 'Animation_BP_StopAnimation::BlendOutTime' has a wrong offset!");

// Function GameModule.Animation.OnMontageBlendingOutStarted
// 0x0010 (0x0010 - 0x0000)
struct Animation_OnMontageBlendingOutStarted final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Animation_OnMontageBlendingOutStarted) == 0x000008, "Wrong alignment on Animation_OnMontageBlendingOutStarted");
static_assert(sizeof(Animation_OnMontageBlendingOutStarted) == 0x000010, "Wrong size on Animation_OnMontageBlendingOutStarted");
static_assert(offsetof(Animation_OnMontageBlendingOutStarted, Montage) == 0x000000, "Member 'Animation_OnMontageBlendingOutStarted::Montage' has a wrong offset!");
static_assert(offsetof(Animation_OnMontageBlendingOutStarted, bInterrupted) == 0x000008, "Member 'Animation_OnMontageBlendingOutStarted::bInterrupted' has a wrong offset!");

// Function GameModule.Animation.OnMontageEnded
// 0x0010 (0x0010 - 0x0000)
struct Animation_OnMontageEnded final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Animation_OnMontageEnded) == 0x000008, "Wrong alignment on Animation_OnMontageEnded");
static_assert(sizeof(Animation_OnMontageEnded) == 0x000010, "Wrong size on Animation_OnMontageEnded");
static_assert(offsetof(Animation_OnMontageEnded, Montage) == 0x000000, "Member 'Animation_OnMontageEnded::Montage' has a wrong offset!");
static_assert(offsetof(Animation_OnMontageEnded, bInterrupted) == 0x000008, "Member 'Animation_OnMontageEnded::bInterrupted' has a wrong offset!");

// Function GameModule.Animation.OnMontageStarted
// 0x0008 (0x0008 - 0x0000)
struct Animation_OnMontageStarted final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_OnMontageStarted) == 0x000008, "Wrong alignment on Animation_OnMontageStarted");
static_assert(sizeof(Animation_OnMontageStarted) == 0x000008, "Wrong size on Animation_OnMontageStarted");
static_assert(offsetof(Animation_OnMontageStarted, Montage) == 0x000000, "Member 'Animation_OnMontageStarted::Montage' has a wrong offset!");

// Function GameModule.Animation.ServerPlayAnimation
// 0x0004 (0x0004 - 0x0000)
struct Animation_ServerPlayAnimation final
{
public:
	struct FAnimationPlayParams                   Param;                                             // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_ServerPlayAnimation) == 0x000002, "Wrong alignment on Animation_ServerPlayAnimation");
static_assert(sizeof(Animation_ServerPlayAnimation) == 0x000004, "Wrong size on Animation_ServerPlayAnimation");
static_assert(offsetof(Animation_ServerPlayAnimation, Param) == 0x000000, "Member 'Animation_ServerPlayAnimation::Param' has a wrong offset!");

// Function GameModule.Animation.BP_GetCurrentAnimationId
// 0x0002 (0x0002 - 0x0000)
struct Animation_BP_GetCurrentAnimationId final
{
public:
	EAnimationSlot                                Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationId                                  ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_GetCurrentAnimationId) == 0x000001, "Wrong alignment on Animation_BP_GetCurrentAnimationId");
static_assert(sizeof(Animation_BP_GetCurrentAnimationId) == 0x000002, "Wrong size on Animation_BP_GetCurrentAnimationId");
static_assert(offsetof(Animation_BP_GetCurrentAnimationId, Slot) == 0x000000, "Member 'Animation_BP_GetCurrentAnimationId::Slot' has a wrong offset!");
static_assert(offsetof(Animation_BP_GetCurrentAnimationId, ReturnValue) == 0x000001, "Member 'Animation_BP_GetCurrentAnimationId::ReturnValue' has a wrong offset!");

// Function GameModule.Animation.BP_GetCurrentPlayLength
// 0x0008 (0x0008 - 0x0000)
struct Animation_BP_GetCurrentPlayLength final
{
public:
	EAnimationSlot                                Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_GetCurrentPlayLength) == 0x000004, "Wrong alignment on Animation_BP_GetCurrentPlayLength");
static_assert(sizeof(Animation_BP_GetCurrentPlayLength) == 0x000008, "Wrong size on Animation_BP_GetCurrentPlayLength");
static_assert(offsetof(Animation_BP_GetCurrentPlayLength, Slot) == 0x000000, "Member 'Animation_BP_GetCurrentPlayLength::Slot' has a wrong offset!");
static_assert(offsetof(Animation_BP_GetCurrentPlayLength, ReturnValue) == 0x000004, "Member 'Animation_BP_GetCurrentPlayLength::ReturnValue' has a wrong offset!");

// Function GameModule.Animation.BP_GetCurrentPlayPosition
// 0x0008 (0x0008 - 0x0000)
struct Animation_BP_GetCurrentPlayPosition final
{
public:
	EAnimationSlot                                Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_GetCurrentPlayPosition) == 0x000004, "Wrong alignment on Animation_BP_GetCurrentPlayPosition");
static_assert(sizeof(Animation_BP_GetCurrentPlayPosition) == 0x000008, "Wrong size on Animation_BP_GetCurrentPlayPosition");
static_assert(offsetof(Animation_BP_GetCurrentPlayPosition, Slot) == 0x000000, "Member 'Animation_BP_GetCurrentPlayPosition::Slot' has a wrong offset!");
static_assert(offsetof(Animation_BP_GetCurrentPlayPosition, ReturnValue) == 0x000004, "Member 'Animation_BP_GetCurrentPlayPosition::ReturnValue' has a wrong offset!");

// Function GameModule.Animation.BP_IsActiveAnimation
// 0x0003 (0x0003 - 0x0000)
struct Animation_BP_IsActiveAnimation final
{
public:
	EAnimationSlot                                Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationId                                  ID;                                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_IsActiveAnimation) == 0x000001, "Wrong alignment on Animation_BP_IsActiveAnimation");
static_assert(sizeof(Animation_BP_IsActiveAnimation) == 0x000003, "Wrong size on Animation_BP_IsActiveAnimation");
static_assert(offsetof(Animation_BP_IsActiveAnimation, Slot) == 0x000000, "Member 'Animation_BP_IsActiveAnimation::Slot' has a wrong offset!");
static_assert(offsetof(Animation_BP_IsActiveAnimation, ID) == 0x000001, "Member 'Animation_BP_IsActiveAnimation::ID' has a wrong offset!");
static_assert(offsetof(Animation_BP_IsActiveAnimation, ReturnValue) == 0x000002, "Member 'Animation_BP_IsActiveAnimation::ReturnValue' has a wrong offset!");

// Function GameModule.Animation.BP_IsBaseCommon
// 0x0001 (0x0001 - 0x0000)
struct Animation_BP_IsBaseCommon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_IsBaseCommon) == 0x000001, "Wrong alignment on Animation_BP_IsBaseCommon");
static_assert(sizeof(Animation_BP_IsBaseCommon) == 0x000001, "Wrong size on Animation_BP_IsBaseCommon");
static_assert(offsetof(Animation_BP_IsBaseCommon, ReturnValue) == 0x000000, "Member 'Animation_BP_IsBaseCommon::ReturnValue' has a wrong offset!");

// Function GameModule.Animation.BP_IsInitialized
// 0x0001 (0x0001 - 0x0000)
struct Animation_BP_IsInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_IsInitialized) == 0x000001, "Wrong alignment on Animation_BP_IsInitialized");
static_assert(sizeof(Animation_BP_IsInitialized) == 0x000001, "Wrong size on Animation_BP_IsInitialized");
static_assert(offsetof(Animation_BP_IsInitialized, ReturnValue) == 0x000000, "Member 'Animation_BP_IsInitialized::ReturnValue' has a wrong offset!");

// Function GameModule.Animation.BP_IsPlayingAnimation
// 0x0003 (0x0003 - 0x0000)
struct Animation_BP_IsPlayingAnimation final
{
public:
	EAnimationSlot                                Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationId                                  ID;                                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Animation_BP_IsPlayingAnimation) == 0x000001, "Wrong alignment on Animation_BP_IsPlayingAnimation");
static_assert(sizeof(Animation_BP_IsPlayingAnimation) == 0x000003, "Wrong size on Animation_BP_IsPlayingAnimation");
static_assert(offsetof(Animation_BP_IsPlayingAnimation, Slot) == 0x000000, "Member 'Animation_BP_IsPlayingAnimation::Slot' has a wrong offset!");
static_assert(offsetof(Animation_BP_IsPlayingAnimation, ID) == 0x000001, "Member 'Animation_BP_IsPlayingAnimation::ID' has a wrong offset!");
static_assert(offsetof(Animation_BP_IsPlayingAnimation, ReturnValue) == 0x000002, "Member 'Animation_BP_IsPlayingAnimation::ReturnValue' has a wrong offset!");

// Function GameModule.AnimInstancePostProcess.IsBaseCommon
// 0x0001 (0x0001 - 0x0000)
struct AnimInstancePostProcess_IsBaseCommon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInstancePostProcess_IsBaseCommon) == 0x000001, "Wrong alignment on AnimInstancePostProcess_IsBaseCommon");
static_assert(sizeof(AnimInstancePostProcess_IsBaseCommon) == 0x000001, "Wrong size on AnimInstancePostProcess_IsBaseCommon");
static_assert(offsetof(AnimInstancePostProcess_IsBaseCommon, ReturnValue) == 0x000000, "Member 'AnimInstancePostProcess_IsBaseCommon::ReturnValue' has a wrong offset!");

// Function GameModule.AsyncSaveGameOption.AsyncSaveGameOption
// 0x0010 (0x0010 - 0x0000)
struct AsyncSaveGameOption_AsyncSaveGameOption final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncSaveGameOption*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncSaveGameOption_AsyncSaveGameOption) == 0x000008, "Wrong alignment on AsyncSaveGameOption_AsyncSaveGameOption");
static_assert(sizeof(AsyncSaveGameOption_AsyncSaveGameOption) == 0x000010, "Wrong size on AsyncSaveGameOption_AsyncSaveGameOption");
static_assert(offsetof(AsyncSaveGameOption_AsyncSaveGameOption, WorldContext) == 0x000000, "Member 'AsyncSaveGameOption_AsyncSaveGameOption::WorldContext' has a wrong offset!");
static_assert(offsetof(AsyncSaveGameOption_AsyncSaveGameOption, ReturnValue) == 0x000008, "Member 'AsyncSaveGameOption_AsyncSaveGameOption::ReturnValue' has a wrong offset!");

// Function GameModule.AsyncSaveGameOption.Complete
// 0x0001 (0x0001 - 0x0000)
struct AsyncSaveGameOption_Complete final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncSaveGameOption_Complete) == 0x000001, "Wrong alignment on AsyncSaveGameOption_Complete");
static_assert(sizeof(AsyncSaveGameOption_Complete) == 0x000001, "Wrong size on AsyncSaveGameOption_Complete");
static_assert(offsetof(AsyncSaveGameOption_Complete, bSuccess) == 0x000000, "Member 'AsyncSaveGameOption_Complete::bSuccess' has a wrong offset!");

// Function GameModule.BGMSubsystem.IsPlayingAnyMusic
// 0x0001 (0x0001 - 0x0000)
struct BGMSubsystem_IsPlayingAnyMusic final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BGMSubsystem_IsPlayingAnyMusic) == 0x000001, "Wrong alignment on BGMSubsystem_IsPlayingAnyMusic");
static_assert(sizeof(BGMSubsystem_IsPlayingAnyMusic) == 0x000001, "Wrong size on BGMSubsystem_IsPlayingAnyMusic");
static_assert(offsetof(BGMSubsystem_IsPlayingAnyMusic, ReturnValue) == 0x000000, "Member 'BGMSubsystem_IsPlayingAnyMusic::ReturnValue' has a wrong offset!");

// Function GameModule.BGMSubsystem.PlayMusic
// 0x0008 (0x0008 - 0x0000)
struct BGMSubsystem_PlayMusic final
{
public:
	class USoundAtomCue*                          Cue;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BGMSubsystem_PlayMusic) == 0x000008, "Wrong alignment on BGMSubsystem_PlayMusic");
static_assert(sizeof(BGMSubsystem_PlayMusic) == 0x000008, "Wrong size on BGMSubsystem_PlayMusic");
static_assert(offsetof(BGMSubsystem_PlayMusic, Cue) == 0x000000, "Member 'BGMSubsystem_PlayMusic::Cue' has a wrong offset!");

// Function GameModule.BGMSubsystem.SetAisacByName
// 0x0018 (0x0018 - 0x0000)
struct BGMSubsystem_SetAisacByName final
{
public:
	class FString                                 ControlName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControlValue;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BGMSubsystem_SetAisacByName) == 0x000008, "Wrong alignment on BGMSubsystem_SetAisacByName");
static_assert(sizeof(BGMSubsystem_SetAisacByName) == 0x000018, "Wrong size on BGMSubsystem_SetAisacByName");
static_assert(offsetof(BGMSubsystem_SetAisacByName, ControlName) == 0x000000, "Member 'BGMSubsystem_SetAisacByName::ControlName' has a wrong offset!");
static_assert(offsetof(BGMSubsystem_SetAisacByName, ControlValue) == 0x000010, "Member 'BGMSubsystem_SetAisacByName::ControlValue' has a wrong offset!");

// Function GameModule.BGMSubsystem.StartMusic
// 0x0014 (0x0014 - 0x0000)
struct BGMSubsystem_StartMusic final
{
public:
	class FName                                   bgmType;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCrossFadeOnReleaseTimeBegin;                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToCrossFadeStartOnReleaseTimeBegin;            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceReplay;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BGMSubsystem_StartMusic) == 0x000004, "Wrong alignment on BGMSubsystem_StartMusic");
static_assert(sizeof(BGMSubsystem_StartMusic) == 0x000014, "Wrong size on BGMSubsystem_StartMusic");
static_assert(offsetof(BGMSubsystem_StartMusic, bgmType) == 0x000000, "Member 'BGMSubsystem_StartMusic::bgmType' has a wrong offset!");
static_assert(offsetof(BGMSubsystem_StartMusic, bCrossFadeOnReleaseTimeBegin) == 0x000008, "Member 'BGMSubsystem_StartMusic::bCrossFadeOnReleaseTimeBegin' has a wrong offset!");
static_assert(offsetof(BGMSubsystem_StartMusic, TimeToCrossFadeStartOnReleaseTimeBegin) == 0x00000C, "Member 'BGMSubsystem_StartMusic::TimeToCrossFadeStartOnReleaseTimeBegin' has a wrong offset!");
static_assert(offsetof(BGMSubsystem_StartMusic, bForceReplay) == 0x000010, "Member 'BGMSubsystem_StartMusic::bForceReplay' has a wrong offset!");

// Function GameModule.BGMSubsystem.StopNowPlayingMusic
// 0x0001 (0x0001 - 0x0000)
struct BGMSubsystem_StopNowPlayingMusic final
{
public:
	bool                                          bWithReleaseTime;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BGMSubsystem_StopNowPlayingMusic) == 0x000001, "Wrong alignment on BGMSubsystem_StopNowPlayingMusic");
static_assert(sizeof(BGMSubsystem_StopNowPlayingMusic) == 0x000001, "Wrong size on BGMSubsystem_StopNowPlayingMusic");
static_assert(offsetof(BGMSubsystem_StopNowPlayingMusic, bWithReleaseTime) == 0x000000, "Member 'BGMSubsystem_StopNowPlayingMusic::bWithReleaseTime' has a wrong offset!");

// Function GameModule.BGMSubsystem.TransitNowPlayingMusicBlock
// 0x0004 (0x0004 - 0x0000)
struct BGMSubsystem_TransitNowPlayingMusicBlock final
{
public:
	int32                                         BlockIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BGMSubsystem_TransitNowPlayingMusicBlock) == 0x000004, "Wrong alignment on BGMSubsystem_TransitNowPlayingMusicBlock");
static_assert(sizeof(BGMSubsystem_TransitNowPlayingMusicBlock) == 0x000004, "Wrong size on BGMSubsystem_TransitNowPlayingMusicBlock");
static_assert(offsetof(BGMSubsystem_TransitNowPlayingMusicBlock, BlockIndex) == 0x000000, "Member 'BGMSubsystem_TransitNowPlayingMusicBlock::BlockIndex' has a wrong offset!");

// DelegateFunction GameModule.BlockListWidget.OnClosedDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BlockListWidget_OnClosedDelegate__DelegateSignature final
{
public:
	bool                                          bDecide;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlockListWidget_OnClosedDelegate__DelegateSignature) == 0x000001, "Wrong alignment on BlockListWidget_OnClosedDelegate__DelegateSignature");
static_assert(sizeof(BlockListWidget_OnClosedDelegate__DelegateSignature) == 0x000001, "Wrong size on BlockListWidget_OnClosedDelegate__DelegateSignature");
static_assert(offsetof(BlockListWidget_OnClosedDelegate__DelegateSignature, bDecide) == 0x000000, "Member 'BlockListWidget_OnClosedDelegate__DelegateSignature::bDecide' has a wrong offset!");

// Function GameModule.BlockListWidget.OnWindowInputEvent
// 0x0010 (0x0010 - 0x0000)
struct BlockListWidget_OnWindowInputEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlockListWidget_OnWindowInputEvent) == 0x000008, "Wrong alignment on BlockListWidget_OnWindowInputEvent");
static_assert(sizeof(BlockListWidget_OnWindowInputEvent) == 0x000010, "Wrong size on BlockListWidget_OnWindowInputEvent");
static_assert(offsetof(BlockListWidget_OnWindowInputEvent, Widget) == 0x000000, "Member 'BlockListWidget_OnWindowInputEvent::Widget' has a wrong offset!");
static_assert(offsetof(BlockListWidget_OnWindowInputEvent, InputType) == 0x000008, "Member 'BlockListWidget_OnWindowInputEvent::InputType' has a wrong offset!");
static_assert(offsetof(BlockListWidget_OnWindowInputEvent, LeftButton) == 0x000009, "Member 'BlockListWidget_OnWindowInputEvent::LeftButton' has a wrong offset!");

// Function GameModule.BPActorUtilityComponent.BP_SpawnEmitterAtLocation
// 0x0050 (0x0050 - 0x0000)
struct BPActorUtilityComponent_BP_SpawnEmitterAtLocation final
{
public:
	class UParticleSystem*                        EmitterTemplate;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0030)(ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomParticleSystemComponent*         ReturnValue;                                       // 0x0048(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPActorUtilityComponent_BP_SpawnEmitterAtLocation) == 0x000010, "Wrong alignment on BPActorUtilityComponent_BP_SpawnEmitterAtLocation");
static_assert(sizeof(BPActorUtilityComponent_BP_SpawnEmitterAtLocation) == 0x000050, "Wrong size on BPActorUtilityComponent_BP_SpawnEmitterAtLocation");
static_assert(offsetof(BPActorUtilityComponent_BP_SpawnEmitterAtLocation, EmitterTemplate) == 0x000000, "Member 'BPActorUtilityComponent_BP_SpawnEmitterAtLocation::EmitterTemplate' has a wrong offset!");
static_assert(offsetof(BPActorUtilityComponent_BP_SpawnEmitterAtLocation, SpawnTransform) == 0x000010, "Member 'BPActorUtilityComponent_BP_SpawnEmitterAtLocation::SpawnTransform' has a wrong offset!");
static_assert(offsetof(BPActorUtilityComponent_BP_SpawnEmitterAtLocation, bAutoDestroy) == 0x000040, "Member 'BPActorUtilityComponent_BP_SpawnEmitterAtLocation::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(BPActorUtilityComponent_BP_SpawnEmitterAtLocation, ReturnValue) == 0x000048, "Member 'BPActorUtilityComponent_BP_SpawnEmitterAtLocation::ReturnValue' has a wrong offset!");

// Function GameModule.BPActorUtilityComponent.BP_SpawnEmitterAttached
// 0x0040 (0x0040 - 0x0000)
struct BPActorUtilityComponent_BP_SpawnEmitterAttached final
{
public:
	class UParticleSystem*                        EmitterTemplate;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomParticleSystemComponent*         ReturnValue;                                       // 0x0038(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPActorUtilityComponent_BP_SpawnEmitterAttached) == 0x000008, "Wrong alignment on BPActorUtilityComponent_BP_SpawnEmitterAttached");
static_assert(sizeof(BPActorUtilityComponent_BP_SpawnEmitterAttached) == 0x000040, "Wrong size on BPActorUtilityComponent_BP_SpawnEmitterAttached");
static_assert(offsetof(BPActorUtilityComponent_BP_SpawnEmitterAttached, EmitterTemplate) == 0x000000, "Member 'BPActorUtilityComponent_BP_SpawnEmitterAttached::EmitterTemplate' has a wrong offset!");
static_assert(offsetof(BPActorUtilityComponent_BP_SpawnEmitterAttached, AttachToComponent) == 0x000008, "Member 'BPActorUtilityComponent_BP_SpawnEmitterAttached::AttachToComponent' has a wrong offset!");
static_assert(offsetof(BPActorUtilityComponent_BP_SpawnEmitterAttached, AttachPointName) == 0x000010, "Member 'BPActorUtilityComponent_BP_SpawnEmitterAttached::AttachPointName' has a wrong offset!");
static_assert(offsetof(BPActorUtilityComponent_BP_SpawnEmitterAttached, Location) == 0x000018, "Member 'BPActorUtilityComponent_BP_SpawnEmitterAttached::Location' has a wrong offset!");
static_assert(offsetof(BPActorUtilityComponent_BP_SpawnEmitterAttached, Rotation) == 0x000024, "Member 'BPActorUtilityComponent_BP_SpawnEmitterAttached::Rotation' has a wrong offset!");
static_assert(offsetof(BPActorUtilityComponent_BP_SpawnEmitterAttached, LocationType) == 0x000030, "Member 'BPActorUtilityComponent_BP_SpawnEmitterAttached::LocationType' has a wrong offset!");
static_assert(offsetof(BPActorUtilityComponent_BP_SpawnEmitterAttached, bAutoDestroy) == 0x000031, "Member 'BPActorUtilityComponent_BP_SpawnEmitterAttached::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(BPActorUtilityComponent_BP_SpawnEmitterAttached, ReturnValue) == 0x000038, "Member 'BPActorUtilityComponent_BP_SpawnEmitterAttached::ReturnValue' has a wrong offset!");

// Function GameModule.BPActorUtilityComponent.BP_SpawnEmitterVertex
// 0x0018 (0x0018 - 0x0000)
struct BPActorUtilityComponent_BP_SpawnEmitterVertex final
{
public:
	class UParticleSystem*                        EmitterTemplate;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCustomParticleSystemComponent*         ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPActorUtilityComponent_BP_SpawnEmitterVertex) == 0x000008, "Wrong alignment on BPActorUtilityComponent_BP_SpawnEmitterVertex");
static_assert(sizeof(BPActorUtilityComponent_BP_SpawnEmitterVertex) == 0x000018, "Wrong size on BPActorUtilityComponent_BP_SpawnEmitterVertex");
static_assert(offsetof(BPActorUtilityComponent_BP_SpawnEmitterVertex, EmitterTemplate) == 0x000000, "Member 'BPActorUtilityComponent_BP_SpawnEmitterVertex::EmitterTemplate' has a wrong offset!");
static_assert(offsetof(BPActorUtilityComponent_BP_SpawnEmitterVertex, Mesh) == 0x000008, "Member 'BPActorUtilityComponent_BP_SpawnEmitterVertex::Mesh' has a wrong offset!");
static_assert(offsetof(BPActorUtilityComponent_BP_SpawnEmitterVertex, ReturnValue) == 0x000010, "Member 'BPActorUtilityComponent_BP_SpawnEmitterVertex::ReturnValue' has a wrong offset!");

// Function GameModule.BPActorUtilityComponent.BP_IsAvatar
// 0x0002 (0x0002 - 0x0000)
struct BPActorUtilityComponent_BP_IsAvatar final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPActorUtilityComponent_BP_IsAvatar) == 0x000001, "Wrong alignment on BPActorUtilityComponent_BP_IsAvatar");
static_assert(sizeof(BPActorUtilityComponent_BP_IsAvatar) == 0x000002, "Wrong size on BPActorUtilityComponent_BP_IsAvatar");
static_assert(offsetof(BPActorUtilityComponent_BP_IsAvatar, CharacterId) == 0x000000, "Member 'BPActorUtilityComponent_BP_IsAvatar::CharacterId' has a wrong offset!");
static_assert(offsetof(BPActorUtilityComponent_BP_IsAvatar, ReturnValue) == 0x000001, "Member 'BPActorUtilityComponent_BP_IsAvatar::ReturnValue' has a wrong offset!");

// Function GameModule.CharacterAvatarComponent.BP_GetAvatarBodyPhysique
// 0x0004 (0x0004 - 0x0000)
struct CharacterAvatarComponent_BP_GetAvatarBodyPhysique final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAvatarComponent_BP_GetAvatarBodyPhysique) == 0x000004, "Wrong alignment on CharacterAvatarComponent_BP_GetAvatarBodyPhysique");
static_assert(sizeof(CharacterAvatarComponent_BP_GetAvatarBodyPhysique) == 0x000004, "Wrong size on CharacterAvatarComponent_BP_GetAvatarBodyPhysique");
static_assert(offsetof(CharacterAvatarComponent_BP_GetAvatarBodyPhysique, ReturnValue) == 0x000000, "Member 'CharacterAvatarComponent_BP_GetAvatarBodyPhysique::ReturnValue' has a wrong offset!");

// Function GameModule.CharacterAvatarComponent.BP_GetAvatarBodyScale
// 0x0004 (0x0004 - 0x0000)
struct CharacterAvatarComponent_BP_GetAvatarBodyScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterAvatarComponent_BP_GetAvatarBodyScale) == 0x000004, "Wrong alignment on CharacterAvatarComponent_BP_GetAvatarBodyScale");
static_assert(sizeof(CharacterAvatarComponent_BP_GetAvatarBodyScale) == 0x000004, "Wrong size on CharacterAvatarComponent_BP_GetAvatarBodyScale");
static_assert(offsetof(CharacterAvatarComponent_BP_GetAvatarBodyScale, ReturnValue) == 0x000000, "Member 'CharacterAvatarComponent_BP_GetAvatarBodyScale::ReturnValue' has a wrong offset!");

// Function GameModule.CharacterGame.BP_ChangeAnimBlueprint
// 0x0008 (0x0008 - 0x0000)
struct CharacterGame_BP_ChangeAnimBlueprint final
{
public:
	class UClass*                                 AnimBPClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterGame_BP_ChangeAnimBlueprint) == 0x000008, "Wrong alignment on CharacterGame_BP_ChangeAnimBlueprint");
static_assert(sizeof(CharacterGame_BP_ChangeAnimBlueprint) == 0x000008, "Wrong size on CharacterGame_BP_ChangeAnimBlueprint");
static_assert(offsetof(CharacterGame_BP_ChangeAnimBlueprint, AnimBPClass) == 0x000000, "Member 'CharacterGame_BP_ChangeAnimBlueprint::AnimBPClass' has a wrong offset!");

// Function GameModule.CharacterGame.BP_UnHideImpersonationBone
// 0x0008 (0x0008 - 0x0000)
struct CharacterGame_BP_UnHideImpersonationBone final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterGame_BP_UnHideImpersonationBone) == 0x000004, "Wrong alignment on CharacterGame_BP_UnHideImpersonationBone");
static_assert(sizeof(CharacterGame_BP_UnHideImpersonationBone) == 0x000008, "Wrong size on CharacterGame_BP_UnHideImpersonationBone");
static_assert(offsetof(CharacterGame_BP_UnHideImpersonationBone, BoneName) == 0x000000, "Member 'CharacterGame_BP_UnHideImpersonationBone::BoneName' has a wrong offset!");

// Function GameModule.CharacterGame.EnableAuraEffect
// 0x0010 (0x0010 - 0x0000)
struct CharacterGame_EnableAuraEffect final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomParticleSystemComponent*         ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterGame_EnableAuraEffect) == 0x000008, "Wrong alignment on CharacterGame_EnableAuraEffect");
static_assert(sizeof(CharacterGame_EnableAuraEffect) == 0x000010, "Wrong size on CharacterGame_EnableAuraEffect");
static_assert(offsetof(CharacterGame_EnableAuraEffect, Flag) == 0x000000, "Member 'CharacterGame_EnableAuraEffect::Flag' has a wrong offset!");
static_assert(offsetof(CharacterGame_EnableAuraEffect, ReturnValue) == 0x000008, "Member 'CharacterGame_EnableAuraEffect::ReturnValue' has a wrong offset!");

// Function GameModule.CharacterGame.BP_GetAnimation
// 0x0008 (0x0008 - 0x0000)
struct CharacterGame_BP_GetAnimation final
{
public:
	class UAnimation*                             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterGame_BP_GetAnimation) == 0x000008, "Wrong alignment on CharacterGame_BP_GetAnimation");
static_assert(sizeof(CharacterGame_BP_GetAnimation) == 0x000008, "Wrong size on CharacterGame_BP_GetAnimation");
static_assert(offsetof(CharacterGame_BP_GetAnimation, ReturnValue) == 0x000000, "Member 'CharacterGame_BP_GetAnimation::ReturnValue' has a wrong offset!");

// Function GameModule.CharacterGame.BP_GetBPActorUtilityComponent
// 0x0008 (0x0008 - 0x0000)
struct CharacterGame_BP_GetBPActorUtilityComponent final
{
public:
	class UBPActorUtilityComponent*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterGame_BP_GetBPActorUtilityComponent) == 0x000008, "Wrong alignment on CharacterGame_BP_GetBPActorUtilityComponent");
static_assert(sizeof(CharacterGame_BP_GetBPActorUtilityComponent) == 0x000008, "Wrong size on CharacterGame_BP_GetBPActorUtilityComponent");
static_assert(offsetof(CharacterGame_BP_GetBPActorUtilityComponent, ReturnValue) == 0x000000, "Member 'CharacterGame_BP_GetBPActorUtilityComponent::ReturnValue' has a wrong offset!");

// Function GameModule.CharacterGame.BP_GetCharacterId
// 0x0001 (0x0001 - 0x0000)
struct CharacterGame_BP_GetCharacterId final
{
public:
	ECharacterId                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterGame_BP_GetCharacterId) == 0x000001, "Wrong alignment on CharacterGame_BP_GetCharacterId");
static_assert(sizeof(CharacterGame_BP_GetCharacterId) == 0x000001, "Wrong size on CharacterGame_BP_GetCharacterId");
static_assert(offsetof(CharacterGame_BP_GetCharacterId, ReturnValue) == 0x000000, "Member 'CharacterGame_BP_GetCharacterId::ReturnValue' has a wrong offset!");

// Function GameModule.CharacterGame.BP_GetCostumeMesh
// 0x0008 (0x0008 - 0x0000)
struct CharacterGame_BP_GetCostumeMesh final
{
public:
	class USkeletalMesh*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterGame_BP_GetCostumeMesh) == 0x000008, "Wrong alignment on CharacterGame_BP_GetCostumeMesh");
static_assert(sizeof(CharacterGame_BP_GetCostumeMesh) == 0x000008, "Wrong size on CharacterGame_BP_GetCostumeMesh");
static_assert(offsetof(CharacterGame_BP_GetCostumeMesh, ReturnValue) == 0x000000, "Member 'CharacterGame_BP_GetCostumeMesh::ReturnValue' has a wrong offset!");

// Function GameModule.CharacterGame.BP_GetMaterialControl
// 0x0008 (0x0008 - 0x0000)
struct CharacterGame_BP_GetMaterialControl final
{
public:
	class UMaterialControlComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterGame_BP_GetMaterialControl) == 0x000008, "Wrong alignment on CharacterGame_BP_GetMaterialControl");
static_assert(sizeof(CharacterGame_BP_GetMaterialControl) == 0x000008, "Wrong size on CharacterGame_BP_GetMaterialControl");
static_assert(offsetof(CharacterGame_BP_GetMaterialControl, ReturnValue) == 0x000000, "Member 'CharacterGame_BP_GetMaterialControl::ReturnValue' has a wrong offset!");

// Function GameModule.CharacterGame.BP_GetOptionMesh
// 0x0010 (0x0010 - 0x0000)
struct CharacterGame_BP_GetOptionMesh final
{
public:
	class FName                                   PotionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterGame_BP_GetOptionMesh) == 0x000008, "Wrong alignment on CharacterGame_BP_GetOptionMesh");
static_assert(sizeof(CharacterGame_BP_GetOptionMesh) == 0x000010, "Wrong size on CharacterGame_BP_GetOptionMesh");
static_assert(offsetof(CharacterGame_BP_GetOptionMesh, PotionName) == 0x000000, "Member 'CharacterGame_BP_GetOptionMesh::PotionName' has a wrong offset!");
static_assert(offsetof(CharacterGame_BP_GetOptionMesh, ReturnValue) == 0x000008, "Member 'CharacterGame_BP_GetOptionMesh::ReturnValue' has a wrong offset!");

// Function GameModule.CharacterGame.BP_GetVariationNo
// 0x0004 (0x0004 - 0x0000)
struct CharacterGame_BP_GetVariationNo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterGame_BP_GetVariationNo) == 0x000004, "Wrong alignment on CharacterGame_BP_GetVariationNo");
static_assert(sizeof(CharacterGame_BP_GetVariationNo) == 0x000004, "Wrong size on CharacterGame_BP_GetVariationNo");
static_assert(offsetof(CharacterGame_BP_GetVariationNo, ReturnValue) == 0x000000, "Member 'CharacterGame_BP_GetVariationNo::ReturnValue' has a wrong offset!");

// Function GameModule.CharacterGame.BP_IsImpersonator
// 0x0001 (0x0001 - 0x0000)
struct CharacterGame_BP_IsImpersonator final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterGame_BP_IsImpersonator) == 0x000001, "Wrong alignment on CharacterGame_BP_IsImpersonator");
static_assert(sizeof(CharacterGame_BP_IsImpersonator) == 0x000001, "Wrong size on CharacterGame_BP_IsImpersonator");
static_assert(offsetof(CharacterGame_BP_IsImpersonator, ReturnValue) == 0x000000, "Member 'CharacterGame_BP_IsImpersonator::ReturnValue' has a wrong offset!");

// Function GameModule.CharacterGame.GetAvatarComponent
// 0x0008 (0x0008 - 0x0000)
struct CharacterGame_GetAvatarComponent final
{
public:
	class UCharacterAvatarComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterGame_GetAvatarComponent) == 0x000008, "Wrong alignment on CharacterGame_GetAvatarComponent");
static_assert(sizeof(CharacterGame_GetAvatarComponent) == 0x000008, "Wrong size on CharacterGame_GetAvatarComponent");
static_assert(offsetof(CharacterGame_GetAvatarComponent, ReturnValue) == 0x000000, "Member 'CharacterGame_GetAvatarComponent::ReturnValue' has a wrong offset!");

// Function GameModule.CharacterGame.GetVisualMesh
// 0x0008 (0x0008 - 0x0000)
struct CharacterGame_GetVisualMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterGame_GetVisualMesh) == 0x000008, "Wrong alignment on CharacterGame_GetVisualMesh");
static_assert(sizeof(CharacterGame_GetVisualMesh) == 0x000008, "Wrong size on CharacterGame_GetVisualMesh");
static_assert(offsetof(CharacterGame_GetVisualMesh, ReturnValue) == 0x000000, "Member 'CharacterGame_GetVisualMesh::ReturnValue' has a wrong offset!");

// Function GameModule.CharacterGame.IsAvatarCharacter
// 0x0001 (0x0001 - 0x0000)
struct CharacterGame_IsAvatarCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterGame_IsAvatarCharacter) == 0x000001, "Wrong alignment on CharacterGame_IsAvatarCharacter");
static_assert(sizeof(CharacterGame_IsAvatarCharacter) == 0x000001, "Wrong size on CharacterGame_IsAvatarCharacter");
static_assert(offsetof(CharacterGame_IsAvatarCharacter, ReturnValue) == 0x000000, "Member 'CharacterGame_IsAvatarCharacter::ReturnValue' has a wrong offset!");

// Function GameModule.CharacterStateBase.BP_IsOnGround
// 0x0001 (0x0001 - 0x0000)
struct CharacterStateBase_BP_IsOnGround final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterStateBase_BP_IsOnGround) == 0x000001, "Wrong alignment on CharacterStateBase_BP_IsOnGround");
static_assert(sizeof(CharacterStateBase_BP_IsOnGround) == 0x000001, "Wrong size on CharacterStateBase_BP_IsOnGround");
static_assert(offsetof(CharacterStateBase_BP_IsOnGround, ReturnValue) == 0x000000, "Member 'CharacterStateBase_BP_IsOnGround::ReturnValue' has a wrong offset!");

// Function GameModule.CharacterVoiceComponent.OnAudioFinishedEvent
// 0x0008 (0x0008 - 0x0000)
struct CharacterVoiceComponent_OnAudioFinishedEvent final
{
public:
	class UAtomComponent*                         AtomComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterVoiceComponent_OnAudioFinishedEvent) == 0x000008, "Wrong alignment on CharacterVoiceComponent_OnAudioFinishedEvent");
static_assert(sizeof(CharacterVoiceComponent_OnAudioFinishedEvent) == 0x000008, "Wrong size on CharacterVoiceComponent_OnAudioFinishedEvent");
static_assert(offsetof(CharacterVoiceComponent_OnAudioFinishedEvent, AtomComponent) == 0x000000, "Member 'CharacterVoiceComponent_OnAudioFinishedEvent::AtomComponent' has a wrong offset!");

// Function GameModule.ChatMute.Close
// 0x0010 (0x0010 - 0x0000)
struct ChatMute_Close final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChatMute_Close) == 0x000008, "Wrong alignment on ChatMute_Close");
static_assert(sizeof(ChatMute_Close) == 0x000010, "Wrong size on ChatMute_Close");
static_assert(offsetof(ChatMute_Close, Widget) == 0x000000, "Member 'ChatMute_Close::Widget' has a wrong offset!");
static_assert(offsetof(ChatMute_Close, InputType) == 0x000008, "Member 'ChatMute_Close::InputType' has a wrong offset!");

// Function GameModule.ChatMute.OnChangeSquad
// 0x0004 (0x0004 - 0x0000)
struct ChatMute_OnChangeSquad final
{
public:
	int32                                         SquadNum;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatMute_OnChangeSquad) == 0x000004, "Wrong alignment on ChatMute_OnChangeSquad");
static_assert(sizeof(ChatMute_OnChangeSquad) == 0x000004, "Wrong size on ChatMute_OnChangeSquad");
static_assert(offsetof(ChatMute_OnChangeSquad, SquadNum) == 0x000000, "Member 'ChatMute_OnChangeSquad::SquadNum' has a wrong offset!");

// Function GameModule.ChatMute.PressMuteButton
// 0x0010 (0x0010 - 0x0000)
struct ChatMute_PressMuteButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChatMute_PressMuteButton) == 0x000008, "Wrong alignment on ChatMute_PressMuteButton");
static_assert(sizeof(ChatMute_PressMuteButton) == 0x000010, "Wrong size on ChatMute_PressMuteButton");
static_assert(offsetof(ChatMute_PressMuteButton, Widget) == 0x000000, "Member 'ChatMute_PressMuteButton::Widget' has a wrong offset!");
static_assert(offsetof(ChatMute_PressMuteButton, InputType) == 0x000008, "Member 'ChatMute_PressMuteButton::InputType' has a wrong offset!");

// Function GameModule.ChatStatusWidget.OnVCBeginTalk
// 0x0010 (0x0010 - 0x0000)
struct ChatStatusWidget_OnVCBeginTalk final
{
public:
	class FString                                 UniqueNetId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatStatusWidget_OnVCBeginTalk) == 0x000008, "Wrong alignment on ChatStatusWidget_OnVCBeginTalk");
static_assert(sizeof(ChatStatusWidget_OnVCBeginTalk) == 0x000010, "Wrong size on ChatStatusWidget_OnVCBeginTalk");
static_assert(offsetof(ChatStatusWidget_OnVCBeginTalk, UniqueNetId) == 0x000000, "Member 'ChatStatusWidget_OnVCBeginTalk::UniqueNetId' has a wrong offset!");

// Function GameModule.ChatStatusWidget.OnVCDisconnected
// 0x0010 (0x0010 - 0x0000)
struct ChatStatusWidget_OnVCDisconnected final
{
public:
	class FString                                 UniqueNetId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatStatusWidget_OnVCDisconnected) == 0x000008, "Wrong alignment on ChatStatusWidget_OnVCDisconnected");
static_assert(sizeof(ChatStatusWidget_OnVCDisconnected) == 0x000010, "Wrong size on ChatStatusWidget_OnVCDisconnected");
static_assert(offsetof(ChatStatusWidget_OnVCDisconnected, UniqueNetId) == 0x000000, "Member 'ChatStatusWidget_OnVCDisconnected::UniqueNetId' has a wrong offset!");

// Function GameModule.ChatStatusWidget.OnVCEndTalk
// 0x0010 (0x0010 - 0x0000)
struct ChatStatusWidget_OnVCEndTalk final
{
public:
	class FString                                 UniqueNetId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatStatusWidget_OnVCEndTalk) == 0x000008, "Wrong alignment on ChatStatusWidget_OnVCEndTalk");
static_assert(sizeof(ChatStatusWidget_OnVCEndTalk) == 0x000010, "Wrong size on ChatStatusWidget_OnVCEndTalk");
static_assert(offsetof(ChatStatusWidget_OnVCEndTalk, UniqueNetId) == 0x000000, "Member 'ChatStatusWidget_OnVCEndTalk::UniqueNetId' has a wrong offset!");

// Function GameModule.Cheat.SetTrophy
// 0x0004 (0x0004 - 0x0000)
struct Cheat_SetTrophy final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Cheat_SetTrophy) == 0x000004, "Wrong alignment on Cheat_SetTrophy");
static_assert(sizeof(Cheat_SetTrophy) == 0x000004, "Wrong size on Cheat_SetTrophy");
static_assert(offsetof(Cheat_SetTrophy, Index_0) == 0x000000, "Member 'Cheat_SetTrophy::Index_0' has a wrong offset!");

// Function GameModule.PlatformWidgetButton.BP_SetEnable
// 0x0001 (0x0001 - 0x0000)
struct PlatformWidgetButton_BP_SetEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformWidgetButton_BP_SetEnable) == 0x000001, "Wrong alignment on PlatformWidgetButton_BP_SetEnable");
static_assert(sizeof(PlatformWidgetButton_BP_SetEnable) == 0x000001, "Wrong size on PlatformWidgetButton_BP_SetEnable");
static_assert(offsetof(PlatformWidgetButton_BP_SetEnable, Enable) == 0x000000, "Member 'PlatformWidgetButton_BP_SetEnable::Enable' has a wrong offset!");

// Function GameModule.PlatformWidgetButton.BP_SetOverrideFocusAtomCue
// 0x0008 (0x0008 - 0x0000)
struct PlatformWidgetButton_BP_SetOverrideFocusAtomCue final
{
public:
	class USoundAtomCue*                          AtomCue;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformWidgetButton_BP_SetOverrideFocusAtomCue) == 0x000008, "Wrong alignment on PlatformWidgetButton_BP_SetOverrideFocusAtomCue");
static_assert(sizeof(PlatformWidgetButton_BP_SetOverrideFocusAtomCue) == 0x000008, "Wrong size on PlatformWidgetButton_BP_SetOverrideFocusAtomCue");
static_assert(offsetof(PlatformWidgetButton_BP_SetOverrideFocusAtomCue, AtomCue) == 0x000000, "Member 'PlatformWidgetButton_BP_SetOverrideFocusAtomCue::AtomCue' has a wrong offset!");

// Function GameModule.PlatformWidgetButton.BP_SetOverrideNegativeAtomCue
// 0x0008 (0x0008 - 0x0000)
struct PlatformWidgetButton_BP_SetOverrideNegativeAtomCue final
{
public:
	class USoundAtomCue*                          AtomCue;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformWidgetButton_BP_SetOverrideNegativeAtomCue) == 0x000008, "Wrong alignment on PlatformWidgetButton_BP_SetOverrideNegativeAtomCue");
static_assert(sizeof(PlatformWidgetButton_BP_SetOverrideNegativeAtomCue) == 0x000008, "Wrong size on PlatformWidgetButton_BP_SetOverrideNegativeAtomCue");
static_assert(offsetof(PlatformWidgetButton_BP_SetOverrideNegativeAtomCue, AtomCue) == 0x000000, "Member 'PlatformWidgetButton_BP_SetOverrideNegativeAtomCue::AtomCue' has a wrong offset!");

// Function GameModule.PlatformWidgetButton.BP_SetOverridePressAtomCue
// 0x0008 (0x0008 - 0x0000)
struct PlatformWidgetButton_BP_SetOverridePressAtomCue final
{
public:
	class USoundAtomCue*                          AtomCue;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformWidgetButton_BP_SetOverridePressAtomCue) == 0x000008, "Wrong alignment on PlatformWidgetButton_BP_SetOverridePressAtomCue");
static_assert(sizeof(PlatformWidgetButton_BP_SetOverridePressAtomCue) == 0x000008, "Wrong size on PlatformWidgetButton_BP_SetOverridePressAtomCue");
static_assert(offsetof(PlatformWidgetButton_BP_SetOverridePressAtomCue, AtomCue) == 0x000000, "Member 'PlatformWidgetButton_BP_SetOverridePressAtomCue::AtomCue' has a wrong offset!");

// Function GameModule.PlatformWidgetButton.BP_SetOverrideShortcutAtomCue
// 0x0008 (0x0008 - 0x0000)
struct PlatformWidgetButton_BP_SetOverrideShortcutAtomCue final
{
public:
	class USoundAtomCue*                          AtomCue;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformWidgetButton_BP_SetOverrideShortcutAtomCue) == 0x000008, "Wrong alignment on PlatformWidgetButton_BP_SetOverrideShortcutAtomCue");
static_assert(sizeof(PlatformWidgetButton_BP_SetOverrideShortcutAtomCue) == 0x000008, "Wrong size on PlatformWidgetButton_BP_SetOverrideShortcutAtomCue");
static_assert(offsetof(PlatformWidgetButton_BP_SetOverrideShortcutAtomCue, AtomCue) == 0x000000, "Member 'PlatformWidgetButton_BP_SetOverrideShortcutAtomCue::AtomCue' has a wrong offset!");

// Function GameModule.PlatformWidgetButton.SetAdjustmentJustSize
// 0x0001 (0x0001 - 0x0000)
struct PlatformWidgetButton_SetAdjustmentJustSize final
{
public:
	bool                                          bAdjustmentJustSize;                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformWidgetButton_SetAdjustmentJustSize) == 0x000001, "Wrong alignment on PlatformWidgetButton_SetAdjustmentJustSize");
static_assert(sizeof(PlatformWidgetButton_SetAdjustmentJustSize) == 0x000001, "Wrong size on PlatformWidgetButton_SetAdjustmentJustSize");
static_assert(offsetof(PlatformWidgetButton_SetAdjustmentJustSize, bAdjustmentJustSize) == 0x000000, "Member 'PlatformWidgetButton_SetAdjustmentJustSize::bAdjustmentJustSize' has a wrong offset!");

// Function GameModule.PlatformWidgetButton.SetViewButtonGuide
// 0x0001 (0x0001 - 0x0000)
struct PlatformWidgetButton_SetViewButtonGuide final
{
public:
	bool                                          bView;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformWidgetButton_SetViewButtonGuide) == 0x000001, "Wrong alignment on PlatformWidgetButton_SetViewButtonGuide");
static_assert(sizeof(PlatformWidgetButton_SetViewButtonGuide) == 0x000001, "Wrong size on PlatformWidgetButton_SetViewButtonGuide");
static_assert(offsetof(PlatformWidgetButton_SetViewButtonGuide, bView) == 0x000000, "Member 'PlatformWidgetButton_SetViewButtonGuide::bView' has a wrong offset!");

// DelegateFunction GameModule.CheckButtonWidget.OnChangeStateDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct CheckButtonWidget_OnChangeStateDelegate__DelegateSignature final
{
public:
	bool                                          bCheck;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheckButtonWidget_OnChangeStateDelegate__DelegateSignature) == 0x000001, "Wrong alignment on CheckButtonWidget_OnChangeStateDelegate__DelegateSignature");
static_assert(sizeof(CheckButtonWidget_OnChangeStateDelegate__DelegateSignature) == 0x000001, "Wrong size on CheckButtonWidget_OnChangeStateDelegate__DelegateSignature");
static_assert(offsetof(CheckButtonWidget_OnChangeStateDelegate__DelegateSignature, bCheck) == 0x000000, "Member 'CheckButtonWidget_OnChangeStateDelegate__DelegateSignature::bCheck' has a wrong offset!");

// Function GameModule.CheckButtonWidget.OnDecideEvent
// 0x0010 (0x0010 - 0x0000)
struct CheckButtonWidget_OnDecideEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CheckButtonWidget_OnDecideEvent) == 0x000008, "Wrong alignment on CheckButtonWidget_OnDecideEvent");
static_assert(sizeof(CheckButtonWidget_OnDecideEvent) == 0x000010, "Wrong size on CheckButtonWidget_OnDecideEvent");
static_assert(offsetof(CheckButtonWidget_OnDecideEvent, Widget) == 0x000000, "Member 'CheckButtonWidget_OnDecideEvent::Widget' has a wrong offset!");
static_assert(offsetof(CheckButtonWidget_OnDecideEvent, InputType) == 0x000008, "Member 'CheckButtonWidget_OnDecideEvent::InputType' has a wrong offset!");

// Function GameModule.CheckButtonWidget.SetCheck
// 0x0002 (0x0002 - 0x0000)
struct CheckButtonWidget_SetCheck final
{
public:
	bool                                          bCheck;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCallDelegate;                                     // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheckButtonWidget_SetCheck) == 0x000001, "Wrong alignment on CheckButtonWidget_SetCheck");
static_assert(sizeof(CheckButtonWidget_SetCheck) == 0x000002, "Wrong size on CheckButtonWidget_SetCheck");
static_assert(offsetof(CheckButtonWidget_SetCheck, bCheck) == 0x000000, "Member 'CheckButtonWidget_SetCheck::bCheck' has a wrong offset!");
static_assert(offsetof(CheckButtonWidget_SetCheck, bCallDelegate) == 0x000001, "Member 'CheckButtonWidget_SetCheck::bCallDelegate' has a wrong offset!");

// Function GameModule.CheckButtonWidget.SetOffText
// 0x0018 (0x0018 - 0x0000)
struct CheckButtonWidget_SetOffText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheckButtonWidget_SetOffText) == 0x000008, "Wrong alignment on CheckButtonWidget_SetOffText");
static_assert(sizeof(CheckButtonWidget_SetOffText) == 0x000018, "Wrong size on CheckButtonWidget_SetOffText");
static_assert(offsetof(CheckButtonWidget_SetOffText, Text) == 0x000000, "Member 'CheckButtonWidget_SetOffText::Text' has a wrong offset!");

// Function GameModule.CheckButtonWidget.SetOnText
// 0x0018 (0x0018 - 0x0000)
struct CheckButtonWidget_SetOnText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheckButtonWidget_SetOnText) == 0x000008, "Wrong alignment on CheckButtonWidget_SetOnText");
static_assert(sizeof(CheckButtonWidget_SetOnText) == 0x000018, "Wrong size on CheckButtonWidget_SetOnText");
static_assert(offsetof(CheckButtonWidget_SetOnText, Text) == 0x000000, "Member 'CheckButtonWidget_SetOnText::Text' has a wrong offset!");

// Function GameModule.CheckButtonWidget.IsCheck
// 0x0001 (0x0001 - 0x0000)
struct CheckButtonWidget_IsCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheckButtonWidget_IsCheck) == 0x000001, "Wrong alignment on CheckButtonWidget_IsCheck");
static_assert(sizeof(CheckButtonWidget_IsCheck) == 0x000001, "Wrong size on CheckButtonWidget_IsCheck");
static_assert(offsetof(CheckButtonWidget_IsCheck, ReturnValue) == 0x000000, "Member 'CheckButtonWidget_IsCheck::ReturnValue' has a wrong offset!");

// Function GameModule.CustomInputKey.AddCustomInputKey
// 0x0028 (0x0028 - 0x0000)
struct CustomInputKey_AddCustomInputKey final
{
public:
	class FName                                   CustomName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomInputKey_AddCustomInputKey) == 0x000008, "Wrong alignment on CustomInputKey_AddCustomInputKey");
static_assert(sizeof(CustomInputKey_AddCustomInputKey) == 0x000028, "Wrong size on CustomInputKey_AddCustomInputKey");
static_assert(offsetof(CustomInputKey_AddCustomInputKey, CustomName) == 0x000000, "Member 'CustomInputKey_AddCustomInputKey::CustomName' has a wrong offset!");
static_assert(offsetof(CustomInputKey_AddCustomInputKey, Key) == 0x000008, "Member 'CustomInputKey_AddCustomInputKey::Key' has a wrong offset!");
static_assert(offsetof(CustomInputKey_AddCustomInputKey, ReturnValue) == 0x000020, "Member 'CustomInputKey_AddCustomInputKey::ReturnValue' has a wrong offset!");

// Function GameModule.CustomInputKey.AddCustomInputKeys
// 0x0020 (0x0020 - 0x0000)
struct CustomInputKey_AddCustomInputKeys final
{
public:
	class FName                                   CustomName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           Keys;                                              // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomInputKey_AddCustomInputKeys) == 0x000008, "Wrong alignment on CustomInputKey_AddCustomInputKeys");
static_assert(sizeof(CustomInputKey_AddCustomInputKeys) == 0x000020, "Wrong size on CustomInputKey_AddCustomInputKeys");
static_assert(offsetof(CustomInputKey_AddCustomInputKeys, CustomName) == 0x000000, "Member 'CustomInputKey_AddCustomInputKeys::CustomName' has a wrong offset!");
static_assert(offsetof(CustomInputKey_AddCustomInputKeys, Keys) == 0x000008, "Member 'CustomInputKey_AddCustomInputKeys::Keys' has a wrong offset!");
static_assert(offsetof(CustomInputKey_AddCustomInputKeys, ReturnValue) == 0x000018, "Member 'CustomInputKey_AddCustomInputKeys::ReturnValue' has a wrong offset!");

// Function GameModule.CustomInputKey.AddMousePressStartKey
// 0x0018 (0x0018 - 0x0000)
struct CustomInputKey_AddMousePressStartKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomInputKey_AddMousePressStartKey) == 0x000008, "Wrong alignment on CustomInputKey_AddMousePressStartKey");
static_assert(sizeof(CustomInputKey_AddMousePressStartKey) == 0x000018, "Wrong size on CustomInputKey_AddMousePressStartKey");
static_assert(offsetof(CustomInputKey_AddMousePressStartKey, Key) == 0x000000, "Member 'CustomInputKey_AddMousePressStartKey::Key' has a wrong offset!");

// Function GameModule.CustomInputKey.AddMousePressStartKeys
// 0x0010 (0x0010 - 0x0000)
struct CustomInputKey_AddMousePressStartKeys final
{
public:
	TArray<struct FKey>                           Keys;                                              // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomInputKey_AddMousePressStartKeys) == 0x000008, "Wrong alignment on CustomInputKey_AddMousePressStartKeys");
static_assert(sizeof(CustomInputKey_AddMousePressStartKeys) == 0x000010, "Wrong size on CustomInputKey_AddMousePressStartKeys");
static_assert(offsetof(CustomInputKey_AddMousePressStartKeys, Keys) == 0x000000, "Member 'CustomInputKey_AddMousePressStartKeys::Keys' has a wrong offset!");

// Function GameModule.CustomInputKey.GetViewportSize
// 0x0008 (0x0008 - 0x0000)
struct CustomInputKey_GetViewportSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomInputKey_GetViewportSize) == 0x000004, "Wrong alignment on CustomInputKey_GetViewportSize");
static_assert(sizeof(CustomInputKey_GetViewportSize) == 0x000008, "Wrong size on CustomInputKey_GetViewportSize");
static_assert(offsetof(CustomInputKey_GetViewportSize, ReturnValue) == 0x000000, "Member 'CustomInputKey_GetViewportSize::ReturnValue' has a wrong offset!");

// Function GameModule.CustomInputKey.IsPressKey
// 0x000C (0x000C - 0x0000)
struct CustomInputKey_IsPressKey final
{
public:
	class FName                                   CustomName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomInputKey_IsPressKey) == 0x000004, "Wrong alignment on CustomInputKey_IsPressKey");
static_assert(sizeof(CustomInputKey_IsPressKey) == 0x00000C, "Wrong size on CustomInputKey_IsPressKey");
static_assert(offsetof(CustomInputKey_IsPressKey, CustomName) == 0x000000, "Member 'CustomInputKey_IsPressKey::CustomName' has a wrong offset!");
static_assert(offsetof(CustomInputKey_IsPressKey, ReturnValue) == 0x000008, "Member 'CustomInputKey_IsPressKey::ReturnValue' has a wrong offset!");

// Function GameModule.CustomInputKey.IsPressRapidFire
// 0x000C (0x000C - 0x0000)
struct CustomInputKey_IsPressRapidFire final
{
public:
	class FName                                   CustomName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomInputKey_IsPressRapidFire) == 0x000004, "Wrong alignment on CustomInputKey_IsPressRapidFire");
static_assert(sizeof(CustomInputKey_IsPressRapidFire) == 0x00000C, "Wrong size on CustomInputKey_IsPressRapidFire");
static_assert(offsetof(CustomInputKey_IsPressRapidFire, CustomName) == 0x000000, "Member 'CustomInputKey_IsPressRapidFire::CustomName' has a wrong offset!");
static_assert(offsetof(CustomInputKey_IsPressRapidFire, ReturnValue) == 0x000008, "Member 'CustomInputKey_IsPressRapidFire::ReturnValue' has a wrong offset!");

// Function GameModule.CustomInputKey.IsPressTrg
// 0x000C (0x000C - 0x0000)
struct CustomInputKey_IsPressTrg final
{
public:
	class FName                                   CustomName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomInputKey_IsPressTrg) == 0x000004, "Wrong alignment on CustomInputKey_IsPressTrg");
static_assert(sizeof(CustomInputKey_IsPressTrg) == 0x00000C, "Wrong size on CustomInputKey_IsPressTrg");
static_assert(offsetof(CustomInputKey_IsPressTrg, CustomName) == 0x000000, "Member 'CustomInputKey_IsPressTrg::CustomName' has a wrong offset!");
static_assert(offsetof(CustomInputKey_IsPressTrg, ReturnValue) == 0x000008, "Member 'CustomInputKey_IsPressTrg::ReturnValue' has a wrong offset!");

// DelegateFunction GameModule.CustomInputKey.PressEvent__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct CustomInputKey_PressEvent__DelegateSignature final
{
public:
	class FName                                   CustomName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrg;                                              // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRapidFire;                                        // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomInputKey_PressEvent__DelegateSignature) == 0x000004, "Wrong alignment on CustomInputKey_PressEvent__DelegateSignature");
static_assert(sizeof(CustomInputKey_PressEvent__DelegateSignature) == 0x00000C, "Wrong size on CustomInputKey_PressEvent__DelegateSignature");
static_assert(offsetof(CustomInputKey_PressEvent__DelegateSignature, CustomName) == 0x000000, "Member 'CustomInputKey_PressEvent__DelegateSignature::CustomName' has a wrong offset!");
static_assert(offsetof(CustomInputKey_PressEvent__DelegateSignature, bTrg) == 0x000008, "Member 'CustomInputKey_PressEvent__DelegateSignature::bTrg' has a wrong offset!");
static_assert(offsetof(CustomInputKey_PressEvent__DelegateSignature, bRapidFire) == 0x000009, "Member 'CustomInputKey_PressEvent__DelegateSignature::bRapidFire' has a wrong offset!");

// DelegateFunction GameModule.CustomInputKey.ReleaseEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct CustomInputKey_ReleaseEvent__DelegateSignature final
{
public:
	class FName                                   CustomName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomInputKey_ReleaseEvent__DelegateSignature) == 0x000004, "Wrong alignment on CustomInputKey_ReleaseEvent__DelegateSignature");
static_assert(sizeof(CustomInputKey_ReleaseEvent__DelegateSignature) == 0x000008, "Wrong size on CustomInputKey_ReleaseEvent__DelegateSignature");
static_assert(offsetof(CustomInputKey_ReleaseEvent__DelegateSignature, CustomName) == 0x000000, "Member 'CustomInputKey_ReleaseEvent__DelegateSignature::CustomName' has a wrong offset!");

// Function GameModule.CustomInputKey.RemoveCustomInputKey
// 0x0020 (0x0020 - 0x0000)
struct CustomInputKey_RemoveCustomInputKey final
{
public:
	class FName                                   CustomName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomInputKey_RemoveCustomInputKey) == 0x000008, "Wrong alignment on CustomInputKey_RemoveCustomInputKey");
static_assert(sizeof(CustomInputKey_RemoveCustomInputKey) == 0x000020, "Wrong size on CustomInputKey_RemoveCustomInputKey");
static_assert(offsetof(CustomInputKey_RemoveCustomInputKey, CustomName) == 0x000000, "Member 'CustomInputKey_RemoveCustomInputKey::CustomName' has a wrong offset!");
static_assert(offsetof(CustomInputKey_RemoveCustomInputKey, Key) == 0x000008, "Member 'CustomInputKey_RemoveCustomInputKey::Key' has a wrong offset!");

// Function GameModule.CustomInputKey.RemoveCustomInputKeys
// 0x0018 (0x0018 - 0x0000)
struct CustomInputKey_RemoveCustomInputKeys final
{
public:
	class FName                                   CustomName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           Keys;                                              // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomInputKey_RemoveCustomInputKeys) == 0x000008, "Wrong alignment on CustomInputKey_RemoveCustomInputKeys");
static_assert(sizeof(CustomInputKey_RemoveCustomInputKeys) == 0x000018, "Wrong size on CustomInputKey_RemoveCustomInputKeys");
static_assert(offsetof(CustomInputKey_RemoveCustomInputKeys, CustomName) == 0x000000, "Member 'CustomInputKey_RemoveCustomInputKeys::CustomName' has a wrong offset!");
static_assert(offsetof(CustomInputKey_RemoveCustomInputKeys, Keys) == 0x000008, "Member 'CustomInputKey_RemoveCustomInputKeys::Keys' has a wrong offset!");

// Function GameModule.CustomInputKey.RemoveCustomInputName
// 0x0008 (0x0008 - 0x0000)
struct CustomInputKey_RemoveCustomInputName final
{
public:
	class FName                                   CustomName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomInputKey_RemoveCustomInputName) == 0x000004, "Wrong alignment on CustomInputKey_RemoveCustomInputName");
static_assert(sizeof(CustomInputKey_RemoveCustomInputName) == 0x000008, "Wrong size on CustomInputKey_RemoveCustomInputName");
static_assert(offsetof(CustomInputKey_RemoveCustomInputName, CustomName) == 0x000000, "Member 'CustomInputKey_RemoveCustomInputName::CustomName' has a wrong offset!");

// Function GameModule.CustomInputKey.RemoveMousePressStartKey
// 0x0018 (0x0018 - 0x0000)
struct CustomInputKey_RemoveMousePressStartKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomInputKey_RemoveMousePressStartKey) == 0x000008, "Wrong alignment on CustomInputKey_RemoveMousePressStartKey");
static_assert(sizeof(CustomInputKey_RemoveMousePressStartKey) == 0x000018, "Wrong size on CustomInputKey_RemoveMousePressStartKey");
static_assert(offsetof(CustomInputKey_RemoveMousePressStartKey, Key) == 0x000000, "Member 'CustomInputKey_RemoveMousePressStartKey::Key' has a wrong offset!");

// Function GameModule.CustomInputKey.RemoveMousePressStartKeys
// 0x0010 (0x0010 - 0x0000)
struct CustomInputKey_RemoveMousePressStartKeys final
{
public:
	TArray<struct FKey>                           Keys;                                              // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomInputKey_RemoveMousePressStartKeys) == 0x000008, "Wrong alignment on CustomInputKey_RemoveMousePressStartKeys");
static_assert(sizeof(CustomInputKey_RemoveMousePressStartKeys) == 0x000010, "Wrong size on CustomInputKey_RemoveMousePressStartKeys");
static_assert(offsetof(CustomInputKey_RemoveMousePressStartKeys, Keys) == 0x000000, "Member 'CustomInputKey_RemoveMousePressStartKeys::Keys' has a wrong offset!");

// Function GameModule.CustomInputKey.SetTickFlag
// 0x0001 (0x0001 - 0x0000)
struct CustomInputKey_SetTickFlag final
{
public:
	bool                                          bTick;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomInputKey_SetTickFlag) == 0x000001, "Wrong alignment on CustomInputKey_SetTickFlag");
static_assert(sizeof(CustomInputKey_SetTickFlag) == 0x000001, "Wrong size on CustomInputKey_SetTickFlag");
static_assert(offsetof(CustomInputKey_SetTickFlag, bTick) == 0x000000, "Member 'CustomInputKey_SetTickFlag::bTick' has a wrong offset!");

// Function GameModule.CustomInputKey.GetClickStartPosition
// 0x0008 (0x0008 - 0x0000)
struct CustomInputKey_GetClickStartPosition final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomInputKey_GetClickStartPosition) == 0x000004, "Wrong alignment on CustomInputKey_GetClickStartPosition");
static_assert(sizeof(CustomInputKey_GetClickStartPosition) == 0x000008, "Wrong size on CustomInputKey_GetClickStartPosition");
static_assert(offsetof(CustomInputKey_GetClickStartPosition, ReturnValue) == 0x000000, "Member 'CustomInputKey_GetClickStartPosition::ReturnValue' has a wrong offset!");

// Function GameModule.CustomInputKey.GetClickStartPositionDPI
// 0x0008 (0x0008 - 0x0000)
struct CustomInputKey_GetClickStartPositionDPI final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomInputKey_GetClickStartPositionDPI) == 0x000004, "Wrong alignment on CustomInputKey_GetClickStartPositionDPI");
static_assert(sizeof(CustomInputKey_GetClickStartPositionDPI) == 0x000008, "Wrong size on CustomInputKey_GetClickStartPositionDPI");
static_assert(offsetof(CustomInputKey_GetClickStartPositionDPI, ReturnValue) == 0x000000, "Member 'CustomInputKey_GetClickStartPositionDPI::ReturnValue' has a wrong offset!");

// Function GameModule.CustomInputKey.GetMouseDelta
// 0x0008 (0x0008 - 0x0000)
struct CustomInputKey_GetMouseDelta final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomInputKey_GetMouseDelta) == 0x000004, "Wrong alignment on CustomInputKey_GetMouseDelta");
static_assert(sizeof(CustomInputKey_GetMouseDelta) == 0x000008, "Wrong size on CustomInputKey_GetMouseDelta");
static_assert(offsetof(CustomInputKey_GetMouseDelta, ReturnValue) == 0x000000, "Member 'CustomInputKey_GetMouseDelta::ReturnValue' has a wrong offset!");

// Function GameModule.CustomInputKey.GetMouseDeltaDPI
// 0x0008 (0x0008 - 0x0000)
struct CustomInputKey_GetMouseDeltaDPI final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomInputKey_GetMouseDeltaDPI) == 0x000004, "Wrong alignment on CustomInputKey_GetMouseDeltaDPI");
static_assert(sizeof(CustomInputKey_GetMouseDeltaDPI) == 0x000008, "Wrong size on CustomInputKey_GetMouseDeltaDPI");
static_assert(offsetof(CustomInputKey_GetMouseDeltaDPI, ReturnValue) == 0x000000, "Member 'CustomInputKey_GetMouseDeltaDPI::ReturnValue' has a wrong offset!");

// Function GameModule.CustomInputKey.GetMousePosition
// 0x0008 (0x0008 - 0x0000)
struct CustomInputKey_GetMousePosition final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomInputKey_GetMousePosition) == 0x000004, "Wrong alignment on CustomInputKey_GetMousePosition");
static_assert(sizeof(CustomInputKey_GetMousePosition) == 0x000008, "Wrong size on CustomInputKey_GetMousePosition");
static_assert(offsetof(CustomInputKey_GetMousePosition, ReturnValue) == 0x000000, "Member 'CustomInputKey_GetMousePosition::ReturnValue' has a wrong offset!");

// Function GameModule.CustomInputKey.GetMousePositionDPI
// 0x0008 (0x0008 - 0x0000)
struct CustomInputKey_GetMousePositionDPI final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomInputKey_GetMousePositionDPI) == 0x000004, "Wrong alignment on CustomInputKey_GetMousePositionDPI");
static_assert(sizeof(CustomInputKey_GetMousePositionDPI) == 0x000008, "Wrong size on CustomInputKey_GetMousePositionDPI");
static_assert(offsetof(CustomInputKey_GetMousePositionDPI, ReturnValue) == 0x000000, "Member 'CustomInputKey_GetMousePositionDPI::ReturnValue' has a wrong offset!");

// Function GameModule.CustomInputKey.GetMouseWheel
// 0x0004 (0x0004 - 0x0000)
struct CustomInputKey_GetMouseWheel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomInputKey_GetMouseWheel) == 0x000004, "Wrong alignment on CustomInputKey_GetMouseWheel");
static_assert(sizeof(CustomInputKey_GetMouseWheel) == 0x000004, "Wrong size on CustomInputKey_GetMouseWheel");
static_assert(offsetof(CustomInputKey_GetMouseWheel, ReturnValue) == 0x000000, "Member 'CustomInputKey_GetMouseWheel::ReturnValue' has a wrong offset!");

// Function GameModule.CustomInputKey.GetTouchDelta
// 0x000C (0x000C - 0x0000)
struct CustomInputKey_GetTouchDelta final
{
public:
	ETouchIndex                                   Finger;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomInputKey_GetTouchDelta) == 0x000004, "Wrong alignment on CustomInputKey_GetTouchDelta");
static_assert(sizeof(CustomInputKey_GetTouchDelta) == 0x00000C, "Wrong size on CustomInputKey_GetTouchDelta");
static_assert(offsetof(CustomInputKey_GetTouchDelta, Finger) == 0x000000, "Member 'CustomInputKey_GetTouchDelta::Finger' has a wrong offset!");
static_assert(offsetof(CustomInputKey_GetTouchDelta, ReturnValue) == 0x000004, "Member 'CustomInputKey_GetTouchDelta::ReturnValue' has a wrong offset!");

// Function GameModule.CustomInputKey.GetTouchDeltaDPI
// 0x000C (0x000C - 0x0000)
struct CustomInputKey_GetTouchDeltaDPI final
{
public:
	ETouchIndex                                   Finger;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomInputKey_GetTouchDeltaDPI) == 0x000004, "Wrong alignment on CustomInputKey_GetTouchDeltaDPI");
static_assert(sizeof(CustomInputKey_GetTouchDeltaDPI) == 0x00000C, "Wrong size on CustomInputKey_GetTouchDeltaDPI");
static_assert(offsetof(CustomInputKey_GetTouchDeltaDPI, Finger) == 0x000000, "Member 'CustomInputKey_GetTouchDeltaDPI::Finger' has a wrong offset!");
static_assert(offsetof(CustomInputKey_GetTouchDeltaDPI, ReturnValue) == 0x000004, "Member 'CustomInputKey_GetTouchDeltaDPI::ReturnValue' has a wrong offset!");

// Function GameModule.CustomInputKey.GetTouchPosition
// 0x000C (0x000C - 0x0000)
struct CustomInputKey_GetTouchPosition final
{
public:
	ETouchIndex                                   Finger;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomInputKey_GetTouchPosition) == 0x000004, "Wrong alignment on CustomInputKey_GetTouchPosition");
static_assert(sizeof(CustomInputKey_GetTouchPosition) == 0x00000C, "Wrong size on CustomInputKey_GetTouchPosition");
static_assert(offsetof(CustomInputKey_GetTouchPosition, Finger) == 0x000000, "Member 'CustomInputKey_GetTouchPosition::Finger' has a wrong offset!");
static_assert(offsetof(CustomInputKey_GetTouchPosition, ReturnValue) == 0x000004, "Member 'CustomInputKey_GetTouchPosition::ReturnValue' has a wrong offset!");

// Function GameModule.CustomInputKey.GetTouchPositionDPI
// 0x000C (0x000C - 0x0000)
struct CustomInputKey_GetTouchPositionDPI final
{
public:
	ETouchIndex                                   Finger;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomInputKey_GetTouchPositionDPI) == 0x000004, "Wrong alignment on CustomInputKey_GetTouchPositionDPI");
static_assert(sizeof(CustomInputKey_GetTouchPositionDPI) == 0x00000C, "Wrong size on CustomInputKey_GetTouchPositionDPI");
static_assert(offsetof(CustomInputKey_GetTouchPositionDPI, Finger) == 0x000000, "Member 'CustomInputKey_GetTouchPositionDPI::Finger' has a wrong offset!");
static_assert(offsetof(CustomInputKey_GetTouchPositionDPI, ReturnValue) == 0x000004, "Member 'CustomInputKey_GetTouchPositionDPI::ReturnValue' has a wrong offset!");

// Function GameModule.CustomInputKey.GetTouchStartPosition
// 0x000C (0x000C - 0x0000)
struct CustomInputKey_GetTouchStartPosition final
{
public:
	ETouchIndex                                   Finger;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomInputKey_GetTouchStartPosition) == 0x000004, "Wrong alignment on CustomInputKey_GetTouchStartPosition");
static_assert(sizeof(CustomInputKey_GetTouchStartPosition) == 0x00000C, "Wrong size on CustomInputKey_GetTouchStartPosition");
static_assert(offsetof(CustomInputKey_GetTouchStartPosition, Finger) == 0x000000, "Member 'CustomInputKey_GetTouchStartPosition::Finger' has a wrong offset!");
static_assert(offsetof(CustomInputKey_GetTouchStartPosition, ReturnValue) == 0x000004, "Member 'CustomInputKey_GetTouchStartPosition::ReturnValue' has a wrong offset!");

// Function GameModule.CustomInputKey.GetTouchStartPositionDPI
// 0x000C (0x000C - 0x0000)
struct CustomInputKey_GetTouchStartPositionDPI final
{
public:
	ETouchIndex                                   Finger;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomInputKey_GetTouchStartPositionDPI) == 0x000004, "Wrong alignment on CustomInputKey_GetTouchStartPositionDPI");
static_assert(sizeof(CustomInputKey_GetTouchStartPositionDPI) == 0x00000C, "Wrong size on CustomInputKey_GetTouchStartPositionDPI");
static_assert(offsetof(CustomInputKey_GetTouchStartPositionDPI, Finger) == 0x000000, "Member 'CustomInputKey_GetTouchStartPositionDPI::Finger' has a wrong offset!");
static_assert(offsetof(CustomInputKey_GetTouchStartPositionDPI, ReturnValue) == 0x000004, "Member 'CustomInputKey_GetTouchStartPositionDPI::ReturnValue' has a wrong offset!");

// Function GameModule.CustomInputKey.GetViewPortSizeDPI
// 0x0008 (0x0008 - 0x0000)
struct CustomInputKey_GetViewPortSizeDPI final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomInputKey_GetViewPortSizeDPI) == 0x000004, "Wrong alignment on CustomInputKey_GetViewPortSizeDPI");
static_assert(sizeof(CustomInputKey_GetViewPortSizeDPI) == 0x000008, "Wrong size on CustomInputKey_GetViewPortSizeDPI");
static_assert(offsetof(CustomInputKey_GetViewPortSizeDPI, ReturnValue) == 0x000000, "Member 'CustomInputKey_GetViewPortSizeDPI::ReturnValue' has a wrong offset!");

// Function GameModule.CustomInputTextBox.BP_CheckCommit
// 0x0010 (0x0010 - 0x0000)
struct CustomInputTextBox_BP_CheckCommit final
{
public:
	class FString                                 Input;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomInputTextBox_BP_CheckCommit) == 0x000008, "Wrong alignment on CustomInputTextBox_BP_CheckCommit");
static_assert(sizeof(CustomInputTextBox_BP_CheckCommit) == 0x000010, "Wrong size on CustomInputTextBox_BP_CheckCommit");
static_assert(offsetof(CustomInputTextBox_BP_CheckCommit, Input) == 0x000000, "Member 'CustomInputTextBox_BP_CheckCommit::Input' has a wrong offset!");

// Function GameModule.CustomInputTextBox.BP_CheckFirstFocus
// 0x0002 (0x0002 - 0x0000)
struct CustomInputTextBox_BP_CheckFirstFocus final
{
public:
	bool                                          Focus;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomInputTextBox_BP_CheckFirstFocus) == 0x000001, "Wrong alignment on CustomInputTextBox_BP_CheckFirstFocus");
static_assert(sizeof(CustomInputTextBox_BP_CheckFirstFocus) == 0x000002, "Wrong size on CustomInputTextBox_BP_CheckFirstFocus");
static_assert(offsetof(CustomInputTextBox_BP_CheckFirstFocus, Focus) == 0x000000, "Member 'CustomInputTextBox_BP_CheckFirstFocus::Focus' has a wrong offset!");
static_assert(offsetof(CustomInputTextBox_BP_CheckFirstFocus, ReturnValue) == 0x000001, "Member 'CustomInputTextBox_BP_CheckFirstFocus::ReturnValue' has a wrong offset!");

// Function GameModule.CustomInputTextBox.BP_CheckMessageEmpty
// 0x0018 (0x0018 - 0x0000)
struct CustomInputTextBox_BP_CheckMessageEmpty final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomInputTextBox_BP_CheckMessageEmpty) == 0x000008, "Wrong alignment on CustomInputTextBox_BP_CheckMessageEmpty");
static_assert(sizeof(CustomInputTextBox_BP_CheckMessageEmpty) == 0x000018, "Wrong size on CustomInputTextBox_BP_CheckMessageEmpty");
static_assert(offsetof(CustomInputTextBox_BP_CheckMessageEmpty, Message) == 0x000000, "Member 'CustomInputTextBox_BP_CheckMessageEmpty::Message' has a wrong offset!");
static_assert(offsetof(CustomInputTextBox_BP_CheckMessageEmpty, ReturnValue) == 0x000010, "Member 'CustomInputTextBox_BP_CheckMessageEmpty::ReturnValue' has a wrong offset!");

// Function GameModule.CustomInputTextBox.BP_GetText
// 0x0010 (0x0010 - 0x0000)
struct CustomInputTextBox_BP_GetText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomInputTextBox_BP_GetText) == 0x000008, "Wrong alignment on CustomInputTextBox_BP_GetText");
static_assert(sizeof(CustomInputTextBox_BP_GetText) == 0x000010, "Wrong size on CustomInputTextBox_BP_GetText");
static_assert(offsetof(CustomInputTextBox_BP_GetText, ReturnValue) == 0x000000, "Member 'CustomInputTextBox_BP_GetText::ReturnValue' has a wrong offset!");

// Function GameModule.CustomInputTextBox.CallChangeTextEvent
// 0x0020 (0x0020 - 0x0000)
struct CustomInputTextBox_CallChangeTextEvent final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          IsEmpty;                                           // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomInputTextBox_CallChangeTextEvent) == 0x000008, "Wrong alignment on CustomInputTextBox_CallChangeTextEvent");
static_assert(sizeof(CustomInputTextBox_CallChangeTextEvent) == 0x000020, "Wrong size on CustomInputTextBox_CallChangeTextEvent");
static_assert(offsetof(CustomInputTextBox_CallChangeTextEvent, Text) == 0x000000, "Member 'CustomInputTextBox_CallChangeTextEvent::Text' has a wrong offset!");
static_assert(offsetof(CustomInputTextBox_CallChangeTextEvent, IsEmpty) == 0x000018, "Member 'CustomInputTextBox_CallChangeTextEvent::IsEmpty' has a wrong offset!");

// Function GameModule.CustomInputTextBox.CallSendableEvent
// 0x0002 (0x0002 - 0x0000)
struct CustomInputTextBox_CallSendableEvent final
{
public:
	bool                                          Commit;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlatform                                     Platform;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomInputTextBox_CallSendableEvent) == 0x000001, "Wrong alignment on CustomInputTextBox_CallSendableEvent");
static_assert(sizeof(CustomInputTextBox_CallSendableEvent) == 0x000002, "Wrong size on CustomInputTextBox_CallSendableEvent");
static_assert(offsetof(CustomInputTextBox_CallSendableEvent, Commit) == 0x000000, "Member 'CustomInputTextBox_CallSendableEvent::Commit' has a wrong offset!");
static_assert(offsetof(CustomInputTextBox_CallSendableEvent, Platform) == 0x000001, "Member 'CustomInputTextBox_CallSendableEvent::Platform' has a wrong offset!");

// DelegateFunction GameModule.CustomInputTextBox.OnChangeTextDelegate__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct CustomInputTextBox_OnChangeTextDelegate__DelegateSignature final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          IsEmpty;                                           // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomInputTextBox_OnChangeTextDelegate__DelegateSignature) == 0x000008, "Wrong alignment on CustomInputTextBox_OnChangeTextDelegate__DelegateSignature");
static_assert(sizeof(CustomInputTextBox_OnChangeTextDelegate__DelegateSignature) == 0x000020, "Wrong size on CustomInputTextBox_OnChangeTextDelegate__DelegateSignature");
static_assert(offsetof(CustomInputTextBox_OnChangeTextDelegate__DelegateSignature, Text) == 0x000000, "Member 'CustomInputTextBox_OnChangeTextDelegate__DelegateSignature::Text' has a wrong offset!");
static_assert(offsetof(CustomInputTextBox_OnChangeTextDelegate__DelegateSignature, IsEmpty) == 0x000018, "Member 'CustomInputTextBox_OnChangeTextDelegate__DelegateSignature::IsEmpty' has a wrong offset!");

// DelegateFunction GameModule.CustomInputTextBox.OnSendableDelegate__DelegateSignature
// 0x0002 (0x0002 - 0x0000)
struct CustomInputTextBox_OnSendableDelegate__DelegateSignature final
{
public:
	bool                                          Commit;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlatform                                     Platform;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomInputTextBox_OnSendableDelegate__DelegateSignature) == 0x000001, "Wrong alignment on CustomInputTextBox_OnSendableDelegate__DelegateSignature");
static_assert(sizeof(CustomInputTextBox_OnSendableDelegate__DelegateSignature) == 0x000002, "Wrong size on CustomInputTextBox_OnSendableDelegate__DelegateSignature");
static_assert(offsetof(CustomInputTextBox_OnSendableDelegate__DelegateSignature, Commit) == 0x000000, "Member 'CustomInputTextBox_OnSendableDelegate__DelegateSignature::Commit' has a wrong offset!");
static_assert(offsetof(CustomInputTextBox_OnSendableDelegate__DelegateSignature, Platform) == 0x000001, "Member 'CustomInputTextBox_OnSendableDelegate__DelegateSignature::Platform' has a wrong offset!");

// Function GameModule.CustomInputTextBox.BP_GetFirstFocus
// 0x0001 (0x0001 - 0x0000)
struct CustomInputTextBox_BP_GetFirstFocus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomInputTextBox_BP_GetFirstFocus) == 0x000001, "Wrong alignment on CustomInputTextBox_BP_GetFirstFocus");
static_assert(sizeof(CustomInputTextBox_BP_GetFirstFocus) == 0x000001, "Wrong size on CustomInputTextBox_BP_GetFirstFocus");
static_assert(offsetof(CustomInputTextBox_BP_GetFirstFocus, ReturnValue) == 0x000000, "Member 'CustomInputTextBox_BP_GetFirstFocus::ReturnValue' has a wrong offset!");

// Function GameModule.CustomMatchDatabaseWork.BP_SetCustomMatch
// 0x0001 (0x0001 - 0x0000)
struct CustomMatchDatabaseWork_BP_SetCustomMatch final
{
public:
	bool                                          bCustomMatch;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMatchDatabaseWork_BP_SetCustomMatch) == 0x000001, "Wrong alignment on CustomMatchDatabaseWork_BP_SetCustomMatch");
static_assert(sizeof(CustomMatchDatabaseWork_BP_SetCustomMatch) == 0x000001, "Wrong size on CustomMatchDatabaseWork_BP_SetCustomMatch");
static_assert(offsetof(CustomMatchDatabaseWork_BP_SetCustomMatch, bCustomMatch) == 0x000000, "Member 'CustomMatchDatabaseWork_BP_SetCustomMatch::bCustomMatch' has a wrong offset!");

// Function GameModule.CustomMatchDatabaseWork.OnLoadedResultDataList
// 0x0004 (0x0004 - 0x0000)
struct CustomMatchDatabaseWork_OnLoadedResultDataList final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMatchDatabaseWork_OnLoadedResultDataList) == 0x000004, "Wrong alignment on CustomMatchDatabaseWork_OnLoadedResultDataList");
static_assert(sizeof(CustomMatchDatabaseWork_OnLoadedResultDataList) == 0x000004, "Wrong size on CustomMatchDatabaseWork_OnLoadedResultDataList");
static_assert(offsetof(CustomMatchDatabaseWork_OnLoadedResultDataList, RequestId) == 0x000000, "Member 'CustomMatchDatabaseWork_OnLoadedResultDataList::RequestId' has a wrong offset!");

// Function GameModule.CustomMatchDatabaseWork.GetRoomOwnerId
// 0x0010 (0x0010 - 0x0000)
struct CustomMatchDatabaseWork_GetRoomOwnerId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMatchDatabaseWork_GetRoomOwnerId) == 0x000008, "Wrong alignment on CustomMatchDatabaseWork_GetRoomOwnerId");
static_assert(sizeof(CustomMatchDatabaseWork_GetRoomOwnerId) == 0x000010, "Wrong size on CustomMatchDatabaseWork_GetRoomOwnerId");
static_assert(offsetof(CustomMatchDatabaseWork_GetRoomOwnerId, ReturnValue) == 0x000000, "Member 'CustomMatchDatabaseWork_GetRoomOwnerId::ReturnValue' has a wrong offset!");

// Function GameModule.CustomMatchDatabaseWork.GetRoomOwnerOrder
// 0x0010 (0x0010 - 0x0000)
struct CustomMatchDatabaseWork_GetRoomOwnerOrder final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMatchDatabaseWork_GetRoomOwnerOrder) == 0x000008, "Wrong alignment on CustomMatchDatabaseWork_GetRoomOwnerOrder");
static_assert(sizeof(CustomMatchDatabaseWork_GetRoomOwnerOrder) == 0x000010, "Wrong size on CustomMatchDatabaseWork_GetRoomOwnerOrder");
static_assert(offsetof(CustomMatchDatabaseWork_GetRoomOwnerOrder, ReturnValue) == 0x000000, "Member 'CustomMatchDatabaseWork_GetRoomOwnerOrder::ReturnValue' has a wrong offset!");

// Function GameModule.CustomMatchDatabaseWork.GetTeamCount
// 0x0001 (0x0001 - 0x0000)
struct CustomMatchDatabaseWork_GetTeamCount final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMatchDatabaseWork_GetTeamCount) == 0x000001, "Wrong alignment on CustomMatchDatabaseWork_GetTeamCount");
static_assert(sizeof(CustomMatchDatabaseWork_GetTeamCount) == 0x000001, "Wrong size on CustomMatchDatabaseWork_GetTeamCount");
static_assert(offsetof(CustomMatchDatabaseWork_GetTeamCount, ReturnValue) == 0x000000, "Member 'CustomMatchDatabaseWork_GetTeamCount::ReturnValue' has a wrong offset!");

// Function GameModule.CustomMatchDatabaseWork.HasRoomOwnerRight
// 0x0001 (0x0001 - 0x0000)
struct CustomMatchDatabaseWork_HasRoomOwnerRight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMatchDatabaseWork_HasRoomOwnerRight) == 0x000001, "Wrong alignment on CustomMatchDatabaseWork_HasRoomOwnerRight");
static_assert(sizeof(CustomMatchDatabaseWork_HasRoomOwnerRight) == 0x000001, "Wrong size on CustomMatchDatabaseWork_HasRoomOwnerRight");
static_assert(offsetof(CustomMatchDatabaseWork_HasRoomOwnerRight, ReturnValue) == 0x000000, "Member 'CustomMatchDatabaseWork_HasRoomOwnerRight::ReturnValue' has a wrong offset!");

// Function GameModule.CustomMatchDatabaseWork.IsCustomMatch
// 0x0001 (0x0001 - 0x0000)
struct CustomMatchDatabaseWork_IsCustomMatch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMatchDatabaseWork_IsCustomMatch) == 0x000001, "Wrong alignment on CustomMatchDatabaseWork_IsCustomMatch");
static_assert(sizeof(CustomMatchDatabaseWork_IsCustomMatch) == 0x000001, "Wrong size on CustomMatchDatabaseWork_IsCustomMatch");
static_assert(offsetof(CustomMatchDatabaseWork_IsCustomMatch, ReturnValue) == 0x000000, "Member 'CustomMatchDatabaseWork_IsCustomMatch::ReturnValue' has a wrong offset!");

// Function GameModule.CustomMatchDatabaseWork.IsJoinRoomOwner
// 0x0001 (0x0001 - 0x0000)
struct CustomMatchDatabaseWork_IsJoinRoomOwner final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMatchDatabaseWork_IsJoinRoomOwner) == 0x000001, "Wrong alignment on CustomMatchDatabaseWork_IsJoinRoomOwner");
static_assert(sizeof(CustomMatchDatabaseWork_IsJoinRoomOwner) == 0x000001, "Wrong size on CustomMatchDatabaseWork_IsJoinRoomOwner");
static_assert(offsetof(CustomMatchDatabaseWork_IsJoinRoomOwner, ReturnValue) == 0x000000, "Member 'CustomMatchDatabaseWork_IsJoinRoomOwner::ReturnValue' has a wrong offset!");

// Function GameModule.CustomMatchDatabaseWork.IsRoomOwner
// 0x0001 (0x0001 - 0x0000)
struct CustomMatchDatabaseWork_IsRoomOwner final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomMatchDatabaseWork_IsRoomOwner) == 0x000001, "Wrong alignment on CustomMatchDatabaseWork_IsRoomOwner");
static_assert(sizeof(CustomMatchDatabaseWork_IsRoomOwner) == 0x000001, "Wrong size on CustomMatchDatabaseWork_IsRoomOwner");
static_assert(offsetof(CustomMatchDatabaseWork_IsRoomOwner, ReturnValue) == 0x000000, "Member 'CustomMatchDatabaseWork_IsRoomOwner::ReturnValue' has a wrong offset!");

// Function GameModule.CustomParticleSystemComponent.ChangeViewType
// 0x0002 (0x0002 - 0x0000)
struct CustomParticleSystemComponent_ChangeViewType final
{
public:
	EViewType                                     Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomParticleSystemComponent_ChangeViewType) == 0x000001, "Wrong alignment on CustomParticleSystemComponent_ChangeViewType");
static_assert(sizeof(CustomParticleSystemComponent_ChangeViewType) == 0x000002, "Wrong size on CustomParticleSystemComponent_ChangeViewType");
static_assert(offsetof(CustomParticleSystemComponent_ChangeViewType, Type) == 0x000000, "Member 'CustomParticleSystemComponent_ChangeViewType::Type' has a wrong offset!");
static_assert(offsetof(CustomParticleSystemComponent_ChangeViewType, ReturnValue) == 0x000001, "Member 'CustomParticleSystemComponent_ChangeViewType::ReturnValue' has a wrong offset!");

// Function GameModule.CustomParticleSystemComponent.OnParticleDeathEvent
// 0x0008 (0x0008 - 0x0000)
struct CustomParticleSystemComponent_OnParticleDeathEvent final
{
public:
	class UParticleSystemComponent*               PSystem;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomParticleSystemComponent_OnParticleDeathEvent) == 0x000008, "Wrong alignment on CustomParticleSystemComponent_OnParticleDeathEvent");
static_assert(sizeof(CustomParticleSystemComponent_OnParticleDeathEvent) == 0x000008, "Wrong size on CustomParticleSystemComponent_OnParticleDeathEvent");
static_assert(offsetof(CustomParticleSystemComponent_OnParticleDeathEvent, PSystem) == 0x000000, "Member 'CustomParticleSystemComponent_OnParticleDeathEvent::PSystem' has a wrong offset!");

// Function GameModule.EmblemDisplayWidget.BP_GetBodyCanvasPanel
// 0x0008 (0x0008 - 0x0000)
struct EmblemDisplayWidget_BP_GetBodyCanvasPanel final
{
public:
	class UCanvasPanel*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmblemDisplayWidget_BP_GetBodyCanvasPanel) == 0x000008, "Wrong alignment on EmblemDisplayWidget_BP_GetBodyCanvasPanel");
static_assert(sizeof(EmblemDisplayWidget_BP_GetBodyCanvasPanel) == 0x000008, "Wrong size on EmblemDisplayWidget_BP_GetBodyCanvasPanel");
static_assert(offsetof(EmblemDisplayWidget_BP_GetBodyCanvasPanel, ReturnValue) == 0x000000, "Member 'EmblemDisplayWidget_BP_GetBodyCanvasPanel::ReturnValue' has a wrong offset!");

// Function GameModule.EmblemDisplayWidget.OnLoadedImage
// 0x0008 (0x0008 - 0x0000)
struct EmblemDisplayWidget_OnLoadedImage final
{
public:
	TSubclassOf<class UWidgetBase>                WidgetClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmblemDisplayWidget_OnLoadedImage) == 0x000008, "Wrong alignment on EmblemDisplayWidget_OnLoadedImage");
static_assert(sizeof(EmblemDisplayWidget_OnLoadedImage) == 0x000008, "Wrong size on EmblemDisplayWidget_OnLoadedImage");
static_assert(offsetof(EmblemDisplayWidget_OnLoadedImage, WidgetClass) == 0x000000, "Member 'EmblemDisplayWidget_OnLoadedImage::WidgetClass' has a wrong offset!");

// Function GameModule.FocusAnimationWidget.SetViewArrowDown
// 0x0001 (0x0001 - 0x0000)
struct FocusAnimationWidget_SetViewArrowDown final
{
public:
	bool                                          bView;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FocusAnimationWidget_SetViewArrowDown) == 0x000001, "Wrong alignment on FocusAnimationWidget_SetViewArrowDown");
static_assert(sizeof(FocusAnimationWidget_SetViewArrowDown) == 0x000001, "Wrong size on FocusAnimationWidget_SetViewArrowDown");
static_assert(offsetof(FocusAnimationWidget_SetViewArrowDown, bView) == 0x000000, "Member 'FocusAnimationWidget_SetViewArrowDown::bView' has a wrong offset!");

// Function GameModule.FocusAnimationWidget.SetViewArrowLeft
// 0x0001 (0x0001 - 0x0000)
struct FocusAnimationWidget_SetViewArrowLeft final
{
public:
	bool                                          bView;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FocusAnimationWidget_SetViewArrowLeft) == 0x000001, "Wrong alignment on FocusAnimationWidget_SetViewArrowLeft");
static_assert(sizeof(FocusAnimationWidget_SetViewArrowLeft) == 0x000001, "Wrong size on FocusAnimationWidget_SetViewArrowLeft");
static_assert(offsetof(FocusAnimationWidget_SetViewArrowLeft, bView) == 0x000000, "Member 'FocusAnimationWidget_SetViewArrowLeft::bView' has a wrong offset!");

// Function GameModule.FocusAnimationWidget.SetViewArrowRight
// 0x0001 (0x0001 - 0x0000)
struct FocusAnimationWidget_SetViewArrowRight final
{
public:
	bool                                          bView;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FocusAnimationWidget_SetViewArrowRight) == 0x000001, "Wrong alignment on FocusAnimationWidget_SetViewArrowRight");
static_assert(sizeof(FocusAnimationWidget_SetViewArrowRight) == 0x000001, "Wrong size on FocusAnimationWidget_SetViewArrowRight");
static_assert(offsetof(FocusAnimationWidget_SetViewArrowRight, bView) == 0x000000, "Member 'FocusAnimationWidget_SetViewArrowRight::bView' has a wrong offset!");

// Function GameModule.FocusAnimationWidget.SetViewArrowUp
// 0x0001 (0x0001 - 0x0000)
struct FocusAnimationWidget_SetViewArrowUp final
{
public:
	bool                                          bView;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FocusAnimationWidget_SetViewArrowUp) == 0x000001, "Wrong alignment on FocusAnimationWidget_SetViewArrowUp");
static_assert(sizeof(FocusAnimationWidget_SetViewArrowUp) == 0x000001, "Wrong size on FocusAnimationWidget_SetViewArrowUp");
static_assert(offsetof(FocusAnimationWidget_SetViewArrowUp, bView) == 0x000000, "Member 'FocusAnimationWidget_SetViewArrowUp::bView' has a wrong offset!");

// Function GameModule.FocusAnimationWidget.SetViewFocus
// 0x0001 (0x0001 - 0x0000)
struct FocusAnimationWidget_SetViewFocus final
{
public:
	bool                                          bView;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FocusAnimationWidget_SetViewFocus) == 0x000001, "Wrong alignment on FocusAnimationWidget_SetViewFocus");
static_assert(sizeof(FocusAnimationWidget_SetViewFocus) == 0x000001, "Wrong size on FocusAnimationWidget_SetViewFocus");
static_assert(offsetof(FocusAnimationWidget_SetViewFocus, bView) == 0x000000, "Member 'FocusAnimationWidget_SetViewFocus::bView' has a wrong offset!");

// Function GameModule.GameEffectSubsystem.BP_SpawnEmitterAttached
// 0x0040 (0x0040 - 0x0000)
struct GameEffectSubsystem_BP_SpawnEmitterAttached final
{
public:
	class UParticleSystem*                        EmitterTemplate;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsedPooling;                                      // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomParticleSystemComponent*         ReturnValue;                                       // 0x0038(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameEffectSubsystem_BP_SpawnEmitterAttached) == 0x000008, "Wrong alignment on GameEffectSubsystem_BP_SpawnEmitterAttached");
static_assert(sizeof(GameEffectSubsystem_BP_SpawnEmitterAttached) == 0x000040, "Wrong size on GameEffectSubsystem_BP_SpawnEmitterAttached");
static_assert(offsetof(GameEffectSubsystem_BP_SpawnEmitterAttached, EmitterTemplate) == 0x000000, "Member 'GameEffectSubsystem_BP_SpawnEmitterAttached::EmitterTemplate' has a wrong offset!");
static_assert(offsetof(GameEffectSubsystem_BP_SpawnEmitterAttached, AttachToComponent) == 0x000008, "Member 'GameEffectSubsystem_BP_SpawnEmitterAttached::AttachToComponent' has a wrong offset!");
static_assert(offsetof(GameEffectSubsystem_BP_SpawnEmitterAttached, AttachPointName) == 0x000010, "Member 'GameEffectSubsystem_BP_SpawnEmitterAttached::AttachPointName' has a wrong offset!");
static_assert(offsetof(GameEffectSubsystem_BP_SpawnEmitterAttached, Location) == 0x000018, "Member 'GameEffectSubsystem_BP_SpawnEmitterAttached::Location' has a wrong offset!");
static_assert(offsetof(GameEffectSubsystem_BP_SpawnEmitterAttached, Rotation) == 0x000024, "Member 'GameEffectSubsystem_BP_SpawnEmitterAttached::Rotation' has a wrong offset!");
static_assert(offsetof(GameEffectSubsystem_BP_SpawnEmitterAttached, LocationType) == 0x000030, "Member 'GameEffectSubsystem_BP_SpawnEmitterAttached::LocationType' has a wrong offset!");
static_assert(offsetof(GameEffectSubsystem_BP_SpawnEmitterAttached, bAutoDestroy) == 0x000031, "Member 'GameEffectSubsystem_BP_SpawnEmitterAttached::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(GameEffectSubsystem_BP_SpawnEmitterAttached, bUsedPooling) == 0x000032, "Member 'GameEffectSubsystem_BP_SpawnEmitterAttached::bUsedPooling' has a wrong offset!");
static_assert(offsetof(GameEffectSubsystem_BP_SpawnEmitterAttached, ReturnValue) == 0x000038, "Member 'GameEffectSubsystem_BP_SpawnEmitterAttached::ReturnValue' has a wrong offset!");

// Function GameModule.GameEffectSubsystem.OnParticleDestroy
// 0x0008 (0x0008 - 0x0000)
struct GameEffectSubsystem_OnParticleDestroy final
{
public:
	class UParticleSystemComponent*               Particle;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameEffectSubsystem_OnParticleDestroy) == 0x000008, "Wrong alignment on GameEffectSubsystem_OnParticleDestroy");
static_assert(sizeof(GameEffectSubsystem_OnParticleDestroy) == 0x000008, "Wrong size on GameEffectSubsystem_OnParticleDestroy");
static_assert(offsetof(GameEffectSubsystem_OnParticleDestroy, Particle) == 0x000000, "Member 'GameEffectSubsystem_OnParticleDestroy::Particle' has a wrong offset!");

// Function GameModule.GameOption.BP_GetButtonGuideImgId
// 0x0020 (0x0020 - 0x0000)
struct GameOption_BP_GetButtonGuideImgId final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKeyConfigurableCommand                       Command;                                           // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDesignTime;                                      // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_GetButtonGuideImgId) == 0x000008, "Wrong alignment on GameOption_BP_GetButtonGuideImgId");
static_assert(sizeof(GameOption_BP_GetButtonGuideImgId) == 0x000020, "Wrong size on GameOption_BP_GetButtonGuideImgId");
static_assert(offsetof(GameOption_BP_GetButtonGuideImgId, WorldContextObject) == 0x000000, "Member 'GameOption_BP_GetButtonGuideImgId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameOption_BP_GetButtonGuideImgId, Command) == 0x000008, "Member 'GameOption_BP_GetButtonGuideImgId::Command' has a wrong offset!");
static_assert(offsetof(GameOption_BP_GetButtonGuideImgId, IsDesignTime) == 0x000009, "Member 'GameOption_BP_GetButtonGuideImgId::IsDesignTime' has a wrong offset!");
static_assert(offsetof(GameOption_BP_GetButtonGuideImgId, ReturnValue) == 0x000010, "Member 'GameOption_BP_GetButtonGuideImgId::ReturnValue' has a wrong offset!");

// Function GameModule.GameOption.BP_GetCustomCommandName
// 0x0010 (0x0010 - 0x0000)
struct GameOption_BP_GetCustomCommandName final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Page;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_GetCustomCommandName) == 0x000004, "Wrong alignment on GameOption_BP_GetCustomCommandName");
static_assert(sizeof(GameOption_BP_GetCustomCommandName) == 0x000010, "Wrong size on GameOption_BP_GetCustomCommandName");
static_assert(offsetof(GameOption_BP_GetCustomCommandName, Index_0) == 0x000000, "Member 'GameOption_BP_GetCustomCommandName::Index_0' has a wrong offset!");
static_assert(offsetof(GameOption_BP_GetCustomCommandName, Page) == 0x000004, "Member 'GameOption_BP_GetCustomCommandName::Page' has a wrong offset!");
static_assert(offsetof(GameOption_BP_GetCustomCommandName, ReturnValue) == 0x000008, "Member 'GameOption_BP_GetCustomCommandName::ReturnValue' has a wrong offset!");

// Function GameModule.GameOption.BP_SaveAndApplyGamePadAction
// 0x0020 (0x0020 - 0x0000)
struct GameOption_BP_SaveAndApplyGamePadAction final
{
public:
	EKeyConfigurableCommand                       Command;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Key;                                               // 0x0008(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_SaveAndApplyGamePadAction) == 0x000008, "Wrong alignment on GameOption_BP_SaveAndApplyGamePadAction");
static_assert(sizeof(GameOption_BP_SaveAndApplyGamePadAction) == 0x000020, "Wrong size on GameOption_BP_SaveAndApplyGamePadAction");
static_assert(offsetof(GameOption_BP_SaveAndApplyGamePadAction, Command) == 0x000000, "Member 'GameOption_BP_SaveAndApplyGamePadAction::Command' has a wrong offset!");
static_assert(offsetof(GameOption_BP_SaveAndApplyGamePadAction, Key) == 0x000008, "Member 'GameOption_BP_SaveAndApplyGamePadAction::Key' has a wrong offset!");

// Function GameModule.GameOption.BP_SaveAndApplyKeyboardAction
// 0x0020 (0x0020 - 0x0000)
struct GameOption_BP_SaveAndApplyKeyboardAction final
{
public:
	EKeyConfigurableCommand                       Command;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Key;                                               // 0x0008(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_SaveAndApplyKeyboardAction) == 0x000008, "Wrong alignment on GameOption_BP_SaveAndApplyKeyboardAction");
static_assert(sizeof(GameOption_BP_SaveAndApplyKeyboardAction) == 0x000020, "Wrong size on GameOption_BP_SaveAndApplyKeyboardAction");
static_assert(offsetof(GameOption_BP_SaveAndApplyKeyboardAction, Command) == 0x000000, "Member 'GameOption_BP_SaveAndApplyKeyboardAction::Command' has a wrong offset!");
static_assert(offsetof(GameOption_BP_SaveAndApplyKeyboardAction, Key) == 0x000008, "Member 'GameOption_BP_SaveAndApplyKeyboardAction::Key' has a wrong offset!");

// Function GameModule.GameOption.BP_SaveGameOption
// 0x0001 (0x0001 - 0x0000)
struct GameOption_BP_SaveGameOption final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_SaveGameOption) == 0x000001, "Wrong alignment on GameOption_BP_SaveGameOption");
static_assert(sizeof(GameOption_BP_SaveGameOption) == 0x000001, "Wrong size on GameOption_BP_SaveGameOption");
static_assert(offsetof(GameOption_BP_SaveGameOption, ReturnValue) == 0x000000, "Member 'GameOption_BP_SaveGameOption::ReturnValue' has a wrong offset!");

// Function GameModule.GameOption.BP_SetAgreeFreeTextInputGuildChat
// 0x0001 (0x0001 - 0x0000)
struct GameOption_BP_SetAgreeFreeTextInputGuildChat final
{
public:
	bool                                          Agree;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_SetAgreeFreeTextInputGuildChat) == 0x000001, "Wrong alignment on GameOption_BP_SetAgreeFreeTextInputGuildChat");
static_assert(sizeof(GameOption_BP_SetAgreeFreeTextInputGuildChat) == 0x000001, "Wrong size on GameOption_BP_SetAgreeFreeTextInputGuildChat");
static_assert(offsetof(GameOption_BP_SetAgreeFreeTextInputGuildChat, Agree) == 0x000000, "Member 'GameOption_BP_SetAgreeFreeTextInputGuildChat::Agree' has a wrong offset!");

// Function GameModule.GameOption.BP_SetAgreeFreeTextInputPlayerIntroduction
// 0x0001 (0x0001 - 0x0000)
struct GameOption_BP_SetAgreeFreeTextInputPlayerIntroduction final
{
public:
	bool                                          Agree;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_SetAgreeFreeTextInputPlayerIntroduction) == 0x000001, "Wrong alignment on GameOption_BP_SetAgreeFreeTextInputPlayerIntroduction");
static_assert(sizeof(GameOption_BP_SetAgreeFreeTextInputPlayerIntroduction) == 0x000001, "Wrong size on GameOption_BP_SetAgreeFreeTextInputPlayerIntroduction");
static_assert(offsetof(GameOption_BP_SetAgreeFreeTextInputPlayerIntroduction, Agree) == 0x000000, "Member 'GameOption_BP_SetAgreeFreeTextInputPlayerIntroduction::Agree' has a wrong offset!");

// Function GameModule.GameOption.BP_SetAgreeFreeTextInputPlayerName
// 0x0001 (0x0001 - 0x0000)
struct GameOption_BP_SetAgreeFreeTextInputPlayerName final
{
public:
	bool                                          Agree;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_SetAgreeFreeTextInputPlayerName) == 0x000001, "Wrong alignment on GameOption_BP_SetAgreeFreeTextInputPlayerName");
static_assert(sizeof(GameOption_BP_SetAgreeFreeTextInputPlayerName) == 0x000001, "Wrong size on GameOption_BP_SetAgreeFreeTextInputPlayerName");
static_assert(offsetof(GameOption_BP_SetAgreeFreeTextInputPlayerName, Agree) == 0x000000, "Member 'GameOption_BP_SetAgreeFreeTextInputPlayerName::Agree' has a wrong offset!");

// Function GameModule.GameOption.BP_SetAgreeFreeTextInputTextChat
// 0x0001 (0x0001 - 0x0000)
struct GameOption_BP_SetAgreeFreeTextInputTextChat final
{
public:
	bool                                          Agree;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_SetAgreeFreeTextInputTextChat) == 0x000001, "Wrong alignment on GameOption_BP_SetAgreeFreeTextInputTextChat");
static_assert(sizeof(GameOption_BP_SetAgreeFreeTextInputTextChat) == 0x000001, "Wrong size on GameOption_BP_SetAgreeFreeTextInputTextChat");
static_assert(offsetof(GameOption_BP_SetAgreeFreeTextInputTextChat, Agree) == 0x000000, "Member 'GameOption_BP_SetAgreeFreeTextInputTextChat::Agree' has a wrong offset!");

// Function GameModule.GameOption.BP_SetDAPGameAgreeKpi
// 0x0001 (0x0001 - 0x0000)
struct GameOption_BP_SetDAPGameAgreeKpi final
{
public:
	bool                                          AgreeKpi;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_SetDAPGameAgreeKpi) == 0x000001, "Wrong alignment on GameOption_BP_SetDAPGameAgreeKpi");
static_assert(sizeof(GameOption_BP_SetDAPGameAgreeKpi) == 0x000001, "Wrong size on GameOption_BP_SetDAPGameAgreeKpi");
static_assert(offsetof(GameOption_BP_SetDAPGameAgreeKpi, AgreeKpi) == 0x000000, "Member 'GameOption_BP_SetDAPGameAgreeKpi::AgreeKpi' has a wrong offset!");

// Function GameModule.GameOption.BP_SetGameAgreeKpi
// 0x0001 (0x0001 - 0x0000)
struct GameOption_BP_SetGameAgreeKpi final
{
public:
	bool                                          AgreeKpi;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_SetGameAgreeKpi) == 0x000001, "Wrong alignment on GameOption_BP_SetGameAgreeKpi");
static_assert(sizeof(GameOption_BP_SetGameAgreeKpi) == 0x000001, "Wrong size on GameOption_BP_SetGameAgreeKpi");
static_assert(offsetof(GameOption_BP_SetGameAgreeKpi, AgreeKpi) == 0x000000, "Member 'GameOption_BP_SetGameAgreeKpi::AgreeKpi' has a wrong offset!");

// Function GameModule.GameOption.BP_SetGamePadCameraAimRate
// 0x0004 (0x0004 - 0x0000)
struct GameOption_BP_SetGamePadCameraAimRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_SetGamePadCameraAimRate) == 0x000004, "Wrong alignment on GameOption_BP_SetGamePadCameraAimRate");
static_assert(sizeof(GameOption_BP_SetGamePadCameraAimRate) == 0x000004, "Wrong size on GameOption_BP_SetGamePadCameraAimRate");
static_assert(offsetof(GameOption_BP_SetGamePadCameraAimRate, Rate) == 0x000000, "Member 'GameOption_BP_SetGamePadCameraAimRate::Rate' has a wrong offset!");

// Function GameModule.GameOption.BP_SetGamePadCameraDashRate
// 0x0004 (0x0004 - 0x0000)
struct GameOption_BP_SetGamePadCameraDashRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_SetGamePadCameraDashRate) == 0x000004, "Wrong alignment on GameOption_BP_SetGamePadCameraDashRate");
static_assert(sizeof(GameOption_BP_SetGamePadCameraDashRate) == 0x000004, "Wrong size on GameOption_BP_SetGamePadCameraDashRate");
static_assert(offsetof(GameOption_BP_SetGamePadCameraDashRate, Rate) == 0x000000, "Member 'GameOption_BP_SetGamePadCameraDashRate::Rate' has a wrong offset!");

// Function GameModule.GameOption.BP_SetGamePadCameraPitchReverse
// 0x0001 (0x0001 - 0x0000)
struct GameOption_BP_SetGamePadCameraPitchReverse final
{
public:
	bool                                          bReverse;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_SetGamePadCameraPitchReverse) == 0x000001, "Wrong alignment on GameOption_BP_SetGamePadCameraPitchReverse");
static_assert(sizeof(GameOption_BP_SetGamePadCameraPitchReverse) == 0x000001, "Wrong size on GameOption_BP_SetGamePadCameraPitchReverse");
static_assert(offsetof(GameOption_BP_SetGamePadCameraPitchReverse, bReverse) == 0x000000, "Member 'GameOption_BP_SetGamePadCameraPitchReverse::bReverse' has a wrong offset!");

// Function GameModule.GameOption.BP_SetGamePadCameraRate
// 0x0004 (0x0004 - 0x0000)
struct GameOption_BP_SetGamePadCameraRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_SetGamePadCameraRate) == 0x000004, "Wrong alignment on GameOption_BP_SetGamePadCameraRate");
static_assert(sizeof(GameOption_BP_SetGamePadCameraRate) == 0x000004, "Wrong size on GameOption_BP_SetGamePadCameraRate");
static_assert(offsetof(GameOption_BP_SetGamePadCameraRate, Rate) == 0x000000, "Member 'GameOption_BP_SetGamePadCameraRate::Rate' has a wrong offset!");

// Function GameModule.GameOption.BP_SetGamePadCameraYawReverse
// 0x0001 (0x0001 - 0x0000)
struct GameOption_BP_SetGamePadCameraYawReverse final
{
public:
	bool                                          bReverse;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_SetGamePadCameraYawReverse) == 0x000001, "Wrong alignment on GameOption_BP_SetGamePadCameraYawReverse");
static_assert(sizeof(GameOption_BP_SetGamePadCameraYawReverse) == 0x000001, "Wrong size on GameOption_BP_SetGamePadCameraYawReverse");
static_assert(offsetof(GameOption_BP_SetGamePadCameraYawReverse, bReverse) == 0x000000, "Member 'GameOption_BP_SetGamePadCameraYawReverse::bReverse' has a wrong offset!");

// Function GameModule.GameOption.BP_SetGuildData
// 0x0020 (0x0020 - 0x0000)
struct GameOption_BP_SetGuildData final
{
public:
	int32                                         GuildLevel;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GuildSearchId;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlock;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameOption_BP_SetGuildData) == 0x000008, "Wrong alignment on GameOption_BP_SetGuildData");
static_assert(sizeof(GameOption_BP_SetGuildData) == 0x000020, "Wrong size on GameOption_BP_SetGuildData");
static_assert(offsetof(GameOption_BP_SetGuildData, GuildLevel) == 0x000000, "Member 'GameOption_BP_SetGuildData::GuildLevel' has a wrong offset!");
static_assert(offsetof(GameOption_BP_SetGuildData, GuildSearchId) == 0x000008, "Member 'GameOption_BP_SetGuildData::GuildSearchId' has a wrong offset!");
static_assert(offsetof(GameOption_BP_SetGuildData, bBlock) == 0x000018, "Member 'GameOption_BP_SetGuildData::bBlock' has a wrong offset!");

// Function GameModule.GameOption.BP_SetGuildNameConsent
// 0x0001 (0x0001 - 0x0000)
struct GameOption_BP_SetGuildNameConsent final
{
public:
	bool                                          bAgree;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_SetGuildNameConsent) == 0x000001, "Wrong alignment on GameOption_BP_SetGuildNameConsent");
static_assert(sizeof(GameOption_BP_SetGuildNameConsent) == 0x000001, "Wrong size on GameOption_BP_SetGuildNameConsent");
static_assert(offsetof(GameOption_BP_SetGuildNameConsent, bAgree) == 0x000000, "Member 'GameOption_BP_SetGuildNameConsent::bAgree' has a wrong offset!");

// Function GameModule.GameOption.BP_SetGuildProfileConsent
// 0x0001 (0x0001 - 0x0000)
struct GameOption_BP_SetGuildProfileConsent final
{
public:
	bool                                          bAgree;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_SetGuildProfileConsent) == 0x000001, "Wrong alignment on GameOption_BP_SetGuildProfileConsent");
static_assert(sizeof(GameOption_BP_SetGuildProfileConsent) == 0x000001, "Wrong size on GameOption_BP_SetGuildProfileConsent");
static_assert(offsetof(GameOption_BP_SetGuildProfileConsent, bAgree) == 0x000000, "Member 'GameOption_BP_SetGuildProfileConsent::bAgree' has a wrong offset!");

// Function GameModule.GameOption.BP_SetMouseCameraPitchReverse
// 0x0001 (0x0001 - 0x0000)
struct GameOption_BP_SetMouseCameraPitchReverse final
{
public:
	bool                                          bReverse;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_SetMouseCameraPitchReverse) == 0x000001, "Wrong alignment on GameOption_BP_SetMouseCameraPitchReverse");
static_assert(sizeof(GameOption_BP_SetMouseCameraPitchReverse) == 0x000001, "Wrong size on GameOption_BP_SetMouseCameraPitchReverse");
static_assert(offsetof(GameOption_BP_SetMouseCameraPitchReverse, bReverse) == 0x000000, "Member 'GameOption_BP_SetMouseCameraPitchReverse::bReverse' has a wrong offset!");

// Function GameModule.GameOption.BP_SetMouseCameraRate
// 0x0004 (0x0004 - 0x0000)
struct GameOption_BP_SetMouseCameraRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_SetMouseCameraRate) == 0x000004, "Wrong alignment on GameOption_BP_SetMouseCameraRate");
static_assert(sizeof(GameOption_BP_SetMouseCameraRate) == 0x000004, "Wrong size on GameOption_BP_SetMouseCameraRate");
static_assert(offsetof(GameOption_BP_SetMouseCameraRate, Rate) == 0x000000, "Member 'GameOption_BP_SetMouseCameraRate::Rate' has a wrong offset!");

// Function GameModule.GameOption.BP_SetMouseCameraYawReverse
// 0x0001 (0x0001 - 0x0000)
struct GameOption_BP_SetMouseCameraYawReverse final
{
public:
	bool                                          bReverse;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_SetMouseCameraYawReverse) == 0x000001, "Wrong alignment on GameOption_BP_SetMouseCameraYawReverse");
static_assert(sizeof(GameOption_BP_SetMouseCameraYawReverse) == 0x000001, "Wrong size on GameOption_BP_SetMouseCameraYawReverse");
static_assert(offsetof(GameOption_BP_SetMouseCameraYawReverse, bReverse) == 0x000000, "Member 'GameOption_BP_SetMouseCameraYawReverse::bReverse' has a wrong offset!");

// Function GameModule.GameOption.BP_SetPadPlay
// 0x0001 (0x0001 - 0x0000)
struct GameOption_BP_SetPadPlay final
{
public:
	bool                                          bPad;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_SetPadPlay) == 0x000001, "Wrong alignment on GameOption_BP_SetPadPlay");
static_assert(sizeof(GameOption_BP_SetPadPlay) == 0x000001, "Wrong size on GameOption_BP_SetPadPlay");
static_assert(offsetof(GameOption_BP_SetPadPlay, bPad) == 0x000000, "Member 'GameOption_BP_SetPadPlay::bPad' has a wrong offset!");

// Function GameModule.GameOption.BP_SetShopItem
// 0x0050 (0x0050 - 0x0000)
struct GameOption_BP_SetShopItem final
{
public:
	TSet<int32>                                   ShopItems;                                         // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_SetShopItem) == 0x000008, "Wrong alignment on GameOption_BP_SetShopItem");
static_assert(sizeof(GameOption_BP_SetShopItem) == 0x000050, "Wrong size on GameOption_BP_SetShopItem");
static_assert(offsetof(GameOption_BP_SetShopItem, ShopItems) == 0x000000, "Member 'GameOption_BP_SetShopItem::ShopItems' has a wrong offset!");

// Function GameModule.GameOption.BP_SetViewShopItem
// 0x0008 (0x0008 - 0x0000)
struct GameOption_BP_SetViewShopItem final
{
public:
	int32                                         ShopItem;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameOption_BP_SetViewShopItem) == 0x000004, "Wrong alignment on GameOption_BP_SetViewShopItem");
static_assert(sizeof(GameOption_BP_SetViewShopItem) == 0x000008, "Wrong size on GameOption_BP_SetViewShopItem");
static_assert(offsetof(GameOption_BP_SetViewShopItem, ShopItem) == 0x000000, "Member 'GameOption_BP_SetViewShopItem::ShopItem' has a wrong offset!");
static_assert(offsetof(GameOption_BP_SetViewShopItem, ReturnValue) == 0x000004, "Member 'GameOption_BP_SetViewShopItem::ReturnValue' has a wrong offset!");

// Function GameModule.GameOption.GetGamePadKeyConfigOnCommand
// 0x0050 (0x0050 - 0x0000)
struct GameOption_GetGamePadKeyConfigOnCommand final
{
public:
	TMap<EKeyConfigurableCommand, struct FKey>    ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_GetGamePadKeyConfigOnCommand) == 0x000008, "Wrong alignment on GameOption_GetGamePadKeyConfigOnCommand");
static_assert(sizeof(GameOption_GetGamePadKeyConfigOnCommand) == 0x000050, "Wrong size on GameOption_GetGamePadKeyConfigOnCommand");
static_assert(offsetof(GameOption_GetGamePadKeyConfigOnCommand, ReturnValue) == 0x000000, "Member 'GameOption_GetGamePadKeyConfigOnCommand::ReturnValue' has a wrong offset!");

// Function GameModule.GameOption.GetKeyboardAxisKeyConfigOnCommand
// 0x0050 (0x0050 - 0x0000)
struct GameOption_GetKeyboardAxisKeyConfigOnCommand final
{
public:
	TMap<EKeyConfigurableCommand, struct FKey>    ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_GetKeyboardAxisKeyConfigOnCommand) == 0x000008, "Wrong alignment on GameOption_GetKeyboardAxisKeyConfigOnCommand");
static_assert(sizeof(GameOption_GetKeyboardAxisKeyConfigOnCommand) == 0x000050, "Wrong size on GameOption_GetKeyboardAxisKeyConfigOnCommand");
static_assert(offsetof(GameOption_GetKeyboardAxisKeyConfigOnCommand, ReturnValue) == 0x000000, "Member 'GameOption_GetKeyboardAxisKeyConfigOnCommand::ReturnValue' has a wrong offset!");

// Function GameModule.GameOption.GetKeyboardKeyConfigOnCommand
// 0x0050 (0x0050 - 0x0000)
struct GameOption_GetKeyboardKeyConfigOnCommand final
{
public:
	TMap<EKeyConfigurableCommand, struct FKey>    ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_GetKeyboardKeyConfigOnCommand) == 0x000008, "Wrong alignment on GameOption_GetKeyboardKeyConfigOnCommand");
static_assert(sizeof(GameOption_GetKeyboardKeyConfigOnCommand) == 0x000050, "Wrong size on GameOption_GetKeyboardKeyConfigOnCommand");
static_assert(offsetof(GameOption_GetKeyboardKeyConfigOnCommand, ReturnValue) == 0x000000, "Member 'GameOption_GetKeyboardKeyConfigOnCommand::ReturnValue' has a wrong offset!");

// Function GameModule.GameOption.GetOutGameTutorialFlag
// 0x0002 (0x0002 - 0x0000)
struct GameOption_GetOutGameTutorialFlag final
{
public:
	ETutorialPopupScene                           PopupScene;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_GetOutGameTutorialFlag) == 0x000001, "Wrong alignment on GameOption_GetOutGameTutorialFlag");
static_assert(sizeof(GameOption_GetOutGameTutorialFlag) == 0x000002, "Wrong size on GameOption_GetOutGameTutorialFlag");
static_assert(offsetof(GameOption_GetOutGameTutorialFlag, PopupScene) == 0x000000, "Member 'GameOption_GetOutGameTutorialFlag::PopupScene' has a wrong offset!");
static_assert(offsetof(GameOption_GetOutGameTutorialFlag, ReturnValue) == 0x000001, "Member 'GameOption_GetOutGameTutorialFlag::ReturnValue' has a wrong offset!");

// Function GameModule.GameOption.OnCompleteLoadTrackingNumber
// 0x0010 (0x0010 - 0x0000)
struct GameOption_OnCompleteLoadTrackingNumber final
{
public:
	class FString                                 TrackingNumber;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_OnCompleteLoadTrackingNumber) == 0x000008, "Wrong alignment on GameOption_OnCompleteLoadTrackingNumber");
static_assert(sizeof(GameOption_OnCompleteLoadTrackingNumber) == 0x000010, "Wrong size on GameOption_OnCompleteLoadTrackingNumber");
static_assert(offsetof(GameOption_OnCompleteLoadTrackingNumber, TrackingNumber) == 0x000000, "Member 'GameOption_OnCompleteLoadTrackingNumber::TrackingNumber' has a wrong offset!");

// Function GameModule.GameOption.SetAuraAreaType
// 0x0001 (0x0001 - 0x0000)
struct GameOption_SetAuraAreaType final
{
public:
	EGameOptionAuraAreaType                       AreaType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_SetAuraAreaType) == 0x000001, "Wrong alignment on GameOption_SetAuraAreaType");
static_assert(sizeof(GameOption_SetAuraAreaType) == 0x000001, "Wrong size on GameOption_SetAuraAreaType");
static_assert(offsetof(GameOption_SetAuraAreaType, AreaType) == 0x000000, "Member 'GameOption_SetAuraAreaType::AreaType' has a wrong offset!");

// Function GameModule.GameOption.SetAuraDispType
// 0x0001 (0x0001 - 0x0000)
struct GameOption_SetAuraDispType final
{
public:
	EGameOptionAuraDispType                       DispType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_SetAuraDispType) == 0x000001, "Wrong alignment on GameOption_SetAuraDispType");
static_assert(sizeof(GameOption_SetAuraDispType) == 0x000001, "Wrong size on GameOption_SetAuraDispType");
static_assert(offsetof(GameOption_SetAuraDispType, DispType) == 0x000000, "Member 'GameOption_SetAuraDispType::DispType' has a wrong offset!");

// Function GameModule.GameOption.SetCameraAcclerationType
// 0x0001 (0x0001 - 0x0000)
struct GameOption_SetCameraAcclerationType final
{
public:
	ECameraAccelerationType                       AccelerationType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_SetCameraAcclerationType) == 0x000001, "Wrong alignment on GameOption_SetCameraAcclerationType");
static_assert(sizeof(GameOption_SetCameraAcclerationType) == 0x000001, "Wrong size on GameOption_SetCameraAcclerationType");
static_assert(offsetof(GameOption_SetCameraAcclerationType, AccelerationType) == 0x000000, "Member 'GameOption_SetCameraAcclerationType::AccelerationType' has a wrong offset!");

// Function GameModule.GameOption.SetIsAutoLevelUp
// 0x0001 (0x0001 - 0x0000)
struct GameOption_SetIsAutoLevelUp final
{
public:
	bool                                          bAuto;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_SetIsAutoLevelUp) == 0x000001, "Wrong alignment on GameOption_SetIsAutoLevelUp");
static_assert(sizeof(GameOption_SetIsAutoLevelUp) == 0x000001, "Wrong size on GameOption_SetIsAutoLevelUp");
static_assert(offsetof(GameOption_SetIsAutoLevelUp, bAuto) == 0x000000, "Member 'GameOption_SetIsAutoLevelUp::bAuto' has a wrong offset!");

// Function GameModule.GameOption.SetOutGameTutorialFlag
// 0x0002 (0x0002 - 0x0000)
struct GameOption_SetOutGameTutorialFlag final
{
public:
	ETutorialPopupScene                           PopupScene;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_SetOutGameTutorialFlag) == 0x000001, "Wrong alignment on GameOption_SetOutGameTutorialFlag");
static_assert(sizeof(GameOption_SetOutGameTutorialFlag) == 0x000002, "Wrong size on GameOption_SetOutGameTutorialFlag");
static_assert(offsetof(GameOption_SetOutGameTutorialFlag, PopupScene) == 0x000000, "Member 'GameOption_SetOutGameTutorialFlag::PopupScene' has a wrong offset!");
static_assert(offsetof(GameOption_SetOutGameTutorialFlag, Flag) == 0x000001, "Member 'GameOption_SetOutGameTutorialFlag::Flag' has a wrong offset!");

// Function GameModule.GameOption.SetPlayBattleActionCamera
// 0x0001 (0x0001 - 0x0000)
struct GameOption_SetPlayBattleActionCamera final
{
public:
	bool                                          bPlay;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_SetPlayBattleActionCamera) == 0x000001, "Wrong alignment on GameOption_SetPlayBattleActionCamera");
static_assert(sizeof(GameOption_SetPlayBattleActionCamera) == 0x000001, "Wrong size on GameOption_SetPlayBattleActionCamera");
static_assert(offsetof(GameOption_SetPlayBattleActionCamera, bPlay) == 0x000000, "Member 'GameOption_SetPlayBattleActionCamera::bPlay' has a wrong offset!");

// Function GameModule.GameOption.BP_GetAgreeFreeTextInputGuildChat
// 0x0001 (0x0001 - 0x0000)
struct GameOption_BP_GetAgreeFreeTextInputGuildChat final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_GetAgreeFreeTextInputGuildChat) == 0x000001, "Wrong alignment on GameOption_BP_GetAgreeFreeTextInputGuildChat");
static_assert(sizeof(GameOption_BP_GetAgreeFreeTextInputGuildChat) == 0x000001, "Wrong size on GameOption_BP_GetAgreeFreeTextInputGuildChat");
static_assert(offsetof(GameOption_BP_GetAgreeFreeTextInputGuildChat, ReturnValue) == 0x000000, "Member 'GameOption_BP_GetAgreeFreeTextInputGuildChat::ReturnValue' has a wrong offset!");

// Function GameModule.GameOption.BP_GetAgreeFreeTextInputPlayerIntroduction
// 0x0001 (0x0001 - 0x0000)
struct GameOption_BP_GetAgreeFreeTextInputPlayerIntroduction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_GetAgreeFreeTextInputPlayerIntroduction) == 0x000001, "Wrong alignment on GameOption_BP_GetAgreeFreeTextInputPlayerIntroduction");
static_assert(sizeof(GameOption_BP_GetAgreeFreeTextInputPlayerIntroduction) == 0x000001, "Wrong size on GameOption_BP_GetAgreeFreeTextInputPlayerIntroduction");
static_assert(offsetof(GameOption_BP_GetAgreeFreeTextInputPlayerIntroduction, ReturnValue) == 0x000000, "Member 'GameOption_BP_GetAgreeFreeTextInputPlayerIntroduction::ReturnValue' has a wrong offset!");

// Function GameModule.GameOption.BP_GetAgreeFreeTextInputPlayerName
// 0x0001 (0x0001 - 0x0000)
struct GameOption_BP_GetAgreeFreeTextInputPlayerName final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_GetAgreeFreeTextInputPlayerName) == 0x000001, "Wrong alignment on GameOption_BP_GetAgreeFreeTextInputPlayerName");
static_assert(sizeof(GameOption_BP_GetAgreeFreeTextInputPlayerName) == 0x000001, "Wrong size on GameOption_BP_GetAgreeFreeTextInputPlayerName");
static_assert(offsetof(GameOption_BP_GetAgreeFreeTextInputPlayerName, ReturnValue) == 0x000000, "Member 'GameOption_BP_GetAgreeFreeTextInputPlayerName::ReturnValue' has a wrong offset!");

// Function GameModule.GameOption.BP_GetAgreeFreeTextInputTextChat
// 0x0001 (0x0001 - 0x0000)
struct GameOption_BP_GetAgreeFreeTextInputTextChat final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_GetAgreeFreeTextInputTextChat) == 0x000001, "Wrong alignment on GameOption_BP_GetAgreeFreeTextInputTextChat");
static_assert(sizeof(GameOption_BP_GetAgreeFreeTextInputTextChat) == 0x000001, "Wrong size on GameOption_BP_GetAgreeFreeTextInputTextChat");
static_assert(offsetof(GameOption_BP_GetAgreeFreeTextInputTextChat, ReturnValue) == 0x000000, "Member 'GameOption_BP_GetAgreeFreeTextInputTextChat::ReturnValue' has a wrong offset!");

// Function GameModule.GameOption.BP_GetGamePadCameraAimRate
// 0x0004 (0x0004 - 0x0000)
struct GameOption_BP_GetGamePadCameraAimRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_GetGamePadCameraAimRate) == 0x000004, "Wrong alignment on GameOption_BP_GetGamePadCameraAimRate");
static_assert(sizeof(GameOption_BP_GetGamePadCameraAimRate) == 0x000004, "Wrong size on GameOption_BP_GetGamePadCameraAimRate");
static_assert(offsetof(GameOption_BP_GetGamePadCameraAimRate, ReturnValue) == 0x000000, "Member 'GameOption_BP_GetGamePadCameraAimRate::ReturnValue' has a wrong offset!");

// Function GameModule.GameOption.BP_GetGamePadCameraDashRate
// 0x0004 (0x0004 - 0x0000)
struct GameOption_BP_GetGamePadCameraDashRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_GetGamePadCameraDashRate) == 0x000004, "Wrong alignment on GameOption_BP_GetGamePadCameraDashRate");
static_assert(sizeof(GameOption_BP_GetGamePadCameraDashRate) == 0x000004, "Wrong size on GameOption_BP_GetGamePadCameraDashRate");
static_assert(offsetof(GameOption_BP_GetGamePadCameraDashRate, ReturnValue) == 0x000000, "Member 'GameOption_BP_GetGamePadCameraDashRate::ReturnValue' has a wrong offset!");

// Function GameModule.GameOption.BP_GetGamePadCameraPitchReverse
// 0x0001 (0x0001 - 0x0000)
struct GameOption_BP_GetGamePadCameraPitchReverse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_GetGamePadCameraPitchReverse) == 0x000001, "Wrong alignment on GameOption_BP_GetGamePadCameraPitchReverse");
static_assert(sizeof(GameOption_BP_GetGamePadCameraPitchReverse) == 0x000001, "Wrong size on GameOption_BP_GetGamePadCameraPitchReverse");
static_assert(offsetof(GameOption_BP_GetGamePadCameraPitchReverse, ReturnValue) == 0x000000, "Member 'GameOption_BP_GetGamePadCameraPitchReverse::ReturnValue' has a wrong offset!");

// Function GameModule.GameOption.BP_GetGamePadCameraRate
// 0x0004 (0x0004 - 0x0000)
struct GameOption_BP_GetGamePadCameraRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_GetGamePadCameraRate) == 0x000004, "Wrong alignment on GameOption_BP_GetGamePadCameraRate");
static_assert(sizeof(GameOption_BP_GetGamePadCameraRate) == 0x000004, "Wrong size on GameOption_BP_GetGamePadCameraRate");
static_assert(offsetof(GameOption_BP_GetGamePadCameraRate, ReturnValue) == 0x000000, "Member 'GameOption_BP_GetGamePadCameraRate::ReturnValue' has a wrong offset!");

// Function GameModule.GameOption.BP_GetGamePadCameraYawReverse
// 0x0001 (0x0001 - 0x0000)
struct GameOption_BP_GetGamePadCameraYawReverse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_GetGamePadCameraYawReverse) == 0x000001, "Wrong alignment on GameOption_BP_GetGamePadCameraYawReverse");
static_assert(sizeof(GameOption_BP_GetGamePadCameraYawReverse) == 0x000001, "Wrong size on GameOption_BP_GetGamePadCameraYawReverse");
static_assert(offsetof(GameOption_BP_GetGamePadCameraYawReverse, ReturnValue) == 0x000000, "Member 'GameOption_BP_GetGamePadCameraYawReverse::ReturnValue' has a wrong offset!");

// Function GameModule.GameOption.BP_GetGuildLevel
// 0x0004 (0x0004 - 0x0000)
struct GameOption_BP_GetGuildLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_GetGuildLevel) == 0x000004, "Wrong alignment on GameOption_BP_GetGuildLevel");
static_assert(sizeof(GameOption_BP_GetGuildLevel) == 0x000004, "Wrong size on GameOption_BP_GetGuildLevel");
static_assert(offsetof(GameOption_BP_GetGuildLevel, ReturnValue) == 0x000000, "Member 'GameOption_BP_GetGuildLevel::ReturnValue' has a wrong offset!");

// Function GameModule.GameOption.BP_GetGuildNameConsent
// 0x0001 (0x0001 - 0x0000)
struct GameOption_BP_GetGuildNameConsent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_GetGuildNameConsent) == 0x000001, "Wrong alignment on GameOption_BP_GetGuildNameConsent");
static_assert(sizeof(GameOption_BP_GetGuildNameConsent) == 0x000001, "Wrong size on GameOption_BP_GetGuildNameConsent");
static_assert(offsetof(GameOption_BP_GetGuildNameConsent, ReturnValue) == 0x000000, "Member 'GameOption_BP_GetGuildNameConsent::ReturnValue' has a wrong offset!");

// Function GameModule.GameOption.BP_GetGuildProfileConsent
// 0x0001 (0x0001 - 0x0000)
struct GameOption_BP_GetGuildProfileConsent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_GetGuildProfileConsent) == 0x000001, "Wrong alignment on GameOption_BP_GetGuildProfileConsent");
static_assert(sizeof(GameOption_BP_GetGuildProfileConsent) == 0x000001, "Wrong size on GameOption_BP_GetGuildProfileConsent");
static_assert(offsetof(GameOption_BP_GetGuildProfileConsent, ReturnValue) == 0x000000, "Member 'GameOption_BP_GetGuildProfileConsent::ReturnValue' has a wrong offset!");

// Function GameModule.GameOption.BP_GetGuildSearchId
// 0x0010 (0x0010 - 0x0000)
struct GameOption_BP_GetGuildSearchId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_GetGuildSearchId) == 0x000008, "Wrong alignment on GameOption_BP_GetGuildSearchId");
static_assert(sizeof(GameOption_BP_GetGuildSearchId) == 0x000010, "Wrong size on GameOption_BP_GetGuildSearchId");
static_assert(offsetof(GameOption_BP_GetGuildSearchId, ReturnValue) == 0x000000, "Member 'GameOption_BP_GetGuildSearchId::ReturnValue' has a wrong offset!");

// Function GameModule.GameOption.BP_GetMouseCameraPitchReverse
// 0x0001 (0x0001 - 0x0000)
struct GameOption_BP_GetMouseCameraPitchReverse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_GetMouseCameraPitchReverse) == 0x000001, "Wrong alignment on GameOption_BP_GetMouseCameraPitchReverse");
static_assert(sizeof(GameOption_BP_GetMouseCameraPitchReverse) == 0x000001, "Wrong size on GameOption_BP_GetMouseCameraPitchReverse");
static_assert(offsetof(GameOption_BP_GetMouseCameraPitchReverse, ReturnValue) == 0x000000, "Member 'GameOption_BP_GetMouseCameraPitchReverse::ReturnValue' has a wrong offset!");

// Function GameModule.GameOption.BP_GetMouseCameraRate
// 0x0004 (0x0004 - 0x0000)
struct GameOption_BP_GetMouseCameraRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_GetMouseCameraRate) == 0x000004, "Wrong alignment on GameOption_BP_GetMouseCameraRate");
static_assert(sizeof(GameOption_BP_GetMouseCameraRate) == 0x000004, "Wrong size on GameOption_BP_GetMouseCameraRate");
static_assert(offsetof(GameOption_BP_GetMouseCameraRate, ReturnValue) == 0x000000, "Member 'GameOption_BP_GetMouseCameraRate::ReturnValue' has a wrong offset!");

// Function GameModule.GameOption.BP_GetMouseCameraYawReverse
// 0x0001 (0x0001 - 0x0000)
struct GameOption_BP_GetMouseCameraYawReverse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_GetMouseCameraYawReverse) == 0x000001, "Wrong alignment on GameOption_BP_GetMouseCameraYawReverse");
static_assert(sizeof(GameOption_BP_GetMouseCameraYawReverse) == 0x000001, "Wrong size on GameOption_BP_GetMouseCameraYawReverse");
static_assert(offsetof(GameOption_BP_GetMouseCameraYawReverse, ReturnValue) == 0x000000, "Member 'GameOption_BP_GetMouseCameraYawReverse::ReturnValue' has a wrong offset!");

// Function GameModule.GameOption.BP_GetPadPlay
// 0x0001 (0x0001 - 0x0000)
struct GameOption_BP_GetPadPlay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_BP_GetPadPlay) == 0x000001, "Wrong alignment on GameOption_BP_GetPadPlay");
static_assert(sizeof(GameOption_BP_GetPadPlay) == 0x000001, "Wrong size on GameOption_BP_GetPadPlay");
static_assert(offsetof(GameOption_BP_GetPadPlay, ReturnValue) == 0x000000, "Member 'GameOption_BP_GetPadPlay::ReturnValue' has a wrong offset!");

// Function GameModule.GameOption.GetAuraAreaType
// 0x0001 (0x0001 - 0x0000)
struct GameOption_GetAuraAreaType final
{
public:
	EGameOptionAuraAreaType                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_GetAuraAreaType) == 0x000001, "Wrong alignment on GameOption_GetAuraAreaType");
static_assert(sizeof(GameOption_GetAuraAreaType) == 0x000001, "Wrong size on GameOption_GetAuraAreaType");
static_assert(offsetof(GameOption_GetAuraAreaType, ReturnValue) == 0x000000, "Member 'GameOption_GetAuraAreaType::ReturnValue' has a wrong offset!");

// Function GameModule.GameOption.GetAuraDispType
// 0x0001 (0x0001 - 0x0000)
struct GameOption_GetAuraDispType final
{
public:
	EGameOptionAuraDispType                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_GetAuraDispType) == 0x000001, "Wrong alignment on GameOption_GetAuraDispType");
static_assert(sizeof(GameOption_GetAuraDispType) == 0x000001, "Wrong size on GameOption_GetAuraDispType");
static_assert(offsetof(GameOption_GetAuraDispType, ReturnValue) == 0x000000, "Member 'GameOption_GetAuraDispType::ReturnValue' has a wrong offset!");

// Function GameModule.GameOption.GetCameraAcclerationType
// 0x0001 (0x0001 - 0x0000)
struct GameOption_GetCameraAcclerationType final
{
public:
	ECameraAccelerationType                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_GetCameraAcclerationType) == 0x000001, "Wrong alignment on GameOption_GetCameraAcclerationType");
static_assert(sizeof(GameOption_GetCameraAcclerationType) == 0x000001, "Wrong size on GameOption_GetCameraAcclerationType");
static_assert(offsetof(GameOption_GetCameraAcclerationType, ReturnValue) == 0x000000, "Member 'GameOption_GetCameraAcclerationType::ReturnValue' has a wrong offset!");

// Function GameModule.GameOption.GetMiniMapVisible
// 0x0001 (0x0001 - 0x0000)
struct GameOption_GetMiniMapVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_GetMiniMapVisible) == 0x000001, "Wrong alignment on GameOption_GetMiniMapVisible");
static_assert(sizeof(GameOption_GetMiniMapVisible) == 0x000001, "Wrong size on GameOption_GetMiniMapVisible");
static_assert(offsetof(GameOption_GetMiniMapVisible, ReturnValue) == 0x000000, "Member 'GameOption_GetMiniMapVisible::ReturnValue' has a wrong offset!");

// Function GameModule.GameOption.GetPlayBattleActionCamera
// 0x0001 (0x0001 - 0x0000)
struct GameOption_GetPlayBattleActionCamera final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_GetPlayBattleActionCamera) == 0x000001, "Wrong alignment on GameOption_GetPlayBattleActionCamera");
static_assert(sizeof(GameOption_GetPlayBattleActionCamera) == 0x000001, "Wrong size on GameOption_GetPlayBattleActionCamera");
static_assert(offsetof(GameOption_GetPlayBattleActionCamera, ReturnValue) == 0x000000, "Member 'GameOption_GetPlayBattleActionCamera::ReturnValue' has a wrong offset!");

// Function GameModule.GameOption.IsAutoLevelUp
// 0x0001 (0x0001 - 0x0000)
struct GameOption_IsAutoLevelUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_IsAutoLevelUp) == 0x000001, "Wrong alignment on GameOption_IsAutoLevelUp");
static_assert(sizeof(GameOption_IsAutoLevelUp) == 0x000001, "Wrong size on GameOption_IsAutoLevelUp");
static_assert(offsetof(GameOption_IsAutoLevelUp, ReturnValue) == 0x000000, "Member 'GameOption_IsAutoLevelUp::ReturnValue' has a wrong offset!");

// Function GameModule.GameOption.IsMinimapRightSide
// 0x0001 (0x0001 - 0x0000)
struct GameOption_IsMinimapRightSide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameOption_IsMinimapRightSide) == 0x000001, "Wrong alignment on GameOption_IsMinimapRightSide");
static_assert(sizeof(GameOption_IsMinimapRightSide) == 0x000001, "Wrong size on GameOption_IsMinimapRightSide");
static_assert(offsetof(GameOption_IsMinimapRightSide, ReturnValue) == 0x000000, "Member 'GameOption_IsMinimapRightSide::ReturnValue' has a wrong offset!");

// DelegateFunction GameModule.GameSequenceWork.BattleSequenceCancelDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GameSequenceWork_BattleSequenceCancelDelegate__DelegateSignature final
{
public:
	EBattleStartSequenceType                      SequenceType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_BattleSequenceCancelDelegate__DelegateSignature) == 0x000001, "Wrong alignment on GameSequenceWork_BattleSequenceCancelDelegate__DelegateSignature");
static_assert(sizeof(GameSequenceWork_BattleSequenceCancelDelegate__DelegateSignature) == 0x000001, "Wrong size on GameSequenceWork_BattleSequenceCancelDelegate__DelegateSignature");
static_assert(offsetof(GameSequenceWork_BattleSequenceCancelDelegate__DelegateSignature, SequenceType) == 0x000000, "Member 'GameSequenceWork_BattleSequenceCancelDelegate__DelegateSignature::SequenceType' has a wrong offset!");

// Function GameModule.GameSequenceWork.BP_GetProfileDisplayData
// 0x0008 (0x0008 - 0x0000)
struct GameSequenceWork_BP_GetProfileDisplayData final
{
public:
	class UProfileDisplayData*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_BP_GetProfileDisplayData) == 0x000008, "Wrong alignment on GameSequenceWork_BP_GetProfileDisplayData");
static_assert(sizeof(GameSequenceWork_BP_GetProfileDisplayData) == 0x000008, "Wrong size on GameSequenceWork_BP_GetProfileDisplayData");
static_assert(offsetof(GameSequenceWork_BP_GetProfileDisplayData, ReturnValue) == 0x000000, "Member 'GameSequenceWork_BP_GetProfileDisplayData::ReturnValue' has a wrong offset!");

// Function GameModule.GameSequenceWork.BP_IsMoveHeroCrystalTab
// 0x0001 (0x0001 - 0x0000)
struct GameSequenceWork_BP_IsMoveHeroCrystalTab final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_BP_IsMoveHeroCrystalTab) == 0x000001, "Wrong alignment on GameSequenceWork_BP_IsMoveHeroCrystalTab");
static_assert(sizeof(GameSequenceWork_BP_IsMoveHeroCrystalTab) == 0x000001, "Wrong size on GameSequenceWork_BP_IsMoveHeroCrystalTab");
static_assert(offsetof(GameSequenceWork_BP_IsMoveHeroCrystalTab, ReturnValue) == 0x000000, "Member 'GameSequenceWork_BP_IsMoveHeroCrystalTab::ReturnValue' has a wrong offset!");

// Function GameModule.GameSequenceWork.BP_IsOpenNetworkErrorWindow
// 0x0001 (0x0001 - 0x0000)
struct GameSequenceWork_BP_IsOpenNetworkErrorWindow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_BP_IsOpenNetworkErrorWindow) == 0x000001, "Wrong alignment on GameSequenceWork_BP_IsOpenNetworkErrorWindow");
static_assert(sizeof(GameSequenceWork_BP_IsOpenNetworkErrorWindow) == 0x000001, "Wrong size on GameSequenceWork_BP_IsOpenNetworkErrorWindow");
static_assert(offsetof(GameSequenceWork_BP_IsOpenNetworkErrorWindow, ReturnValue) == 0x000000, "Member 'GameSequenceWork_BP_IsOpenNetworkErrorWindow::ReturnValue' has a wrong offset!");

// Function GameModule.GameSequenceWork.BP_IsOpenReturnTitleNetworkErrorWindow
// 0x0001 (0x0001 - 0x0000)
struct GameSequenceWork_BP_IsOpenReturnTitleNetworkErrorWindow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_BP_IsOpenReturnTitleNetworkErrorWindow) == 0x000001, "Wrong alignment on GameSequenceWork_BP_IsOpenReturnTitleNetworkErrorWindow");
static_assert(sizeof(GameSequenceWork_BP_IsOpenReturnTitleNetworkErrorWindow) == 0x000001, "Wrong size on GameSequenceWork_BP_IsOpenReturnTitleNetworkErrorWindow");
static_assert(offsetof(GameSequenceWork_BP_IsOpenReturnTitleNetworkErrorWindow, ReturnValue) == 0x000000, "Member 'GameSequenceWork_BP_IsOpenReturnTitleNetworkErrorWindow::ReturnValue' has a wrong offset!");

// Function GameModule.GameSequenceWork.BP_OpenLevelCustomize
// 0x0001 (0x0001 - 0x0000)
struct GameSequenceWork_BP_OpenLevelCustomize final
{
public:
	bool                                          Shortcut;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_BP_OpenLevelCustomize) == 0x000001, "Wrong alignment on GameSequenceWork_BP_OpenLevelCustomize");
static_assert(sizeof(GameSequenceWork_BP_OpenLevelCustomize) == 0x000001, "Wrong size on GameSequenceWork_BP_OpenLevelCustomize");
static_assert(offsetof(GameSequenceWork_BP_OpenLevelCustomize, Shortcut) == 0x000000, "Member 'GameSequenceWork_BP_OpenLevelCustomize::Shortcut' has a wrong offset!");

// Function GameModule.GameSequenceWork.BP_OpenLevelCustomMatch
// 0x0001 (0x0001 - 0x0000)
struct GameSequenceWork_BP_OpenLevelCustomMatch final
{
public:
	bool                                          bFadeOut;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_BP_OpenLevelCustomMatch) == 0x000001, "Wrong alignment on GameSequenceWork_BP_OpenLevelCustomMatch");
static_assert(sizeof(GameSequenceWork_BP_OpenLevelCustomMatch) == 0x000001, "Wrong size on GameSequenceWork_BP_OpenLevelCustomMatch");
static_assert(offsetof(GameSequenceWork_BP_OpenLevelCustomMatch, bFadeOut) == 0x000000, "Member 'GameSequenceWork_BP_OpenLevelCustomMatch::bFadeOut' has a wrong offset!");

// Function GameModule.GameSequenceWork.BP_OpenLevelLoginBonus
// 0x0001 (0x0001 - 0x0000)
struct GameSequenceWork_BP_OpenLevelLoginBonus final
{
public:
	ELoginBonusTransitionType                     TransitionType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_BP_OpenLevelLoginBonus) == 0x000001, "Wrong alignment on GameSequenceWork_BP_OpenLevelLoginBonus");
static_assert(sizeof(GameSequenceWork_BP_OpenLevelLoginBonus) == 0x000001, "Wrong size on GameSequenceWork_BP_OpenLevelLoginBonus");
static_assert(offsetof(GameSequenceWork_BP_OpenLevelLoginBonus, TransitionType) == 0x000000, "Member 'GameSequenceWork_BP_OpenLevelLoginBonus::TransitionType' has a wrong offset!");

// Function GameModule.GameSequenceWork.BP_OpenMainMenuTabLevel
// 0x0008 (0x0008 - 0x0000)
struct GameSequenceWork_BP_OpenMainMenuTabLevel final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_BP_OpenMainMenuTabLevel) == 0x000004, "Wrong alignment on GameSequenceWork_BP_OpenMainMenuTabLevel");
static_assert(sizeof(GameSequenceWork_BP_OpenMainMenuTabLevel) == 0x000008, "Wrong size on GameSequenceWork_BP_OpenMainMenuTabLevel");
static_assert(offsetof(GameSequenceWork_BP_OpenMainMenuTabLevel, Tag) == 0x000000, "Member 'GameSequenceWork_BP_OpenMainMenuTabLevel::Tag' has a wrong offset!");

// Function GameModule.GameSequenceWork.BP_OpenObtainFromLevel
// 0x0004 (0x0004 - 0x0000)
struct GameSequenceWork_BP_OpenObtainFromLevel final
{
public:
	int32                                         ObtainFromCode;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_BP_OpenObtainFromLevel) == 0x000004, "Wrong alignment on GameSequenceWork_BP_OpenObtainFromLevel");
static_assert(sizeof(GameSequenceWork_BP_OpenObtainFromLevel) == 0x000004, "Wrong size on GameSequenceWork_BP_OpenObtainFromLevel");
static_assert(offsetof(GameSequenceWork_BP_OpenObtainFromLevel, ObtainFromCode) == 0x000000, "Member 'GameSequenceWork_BP_OpenObtainFromLevel::ObtainFromCode' has a wrong offset!");

// Function GameModule.GameSequenceWork.BP_OpenSubLevelItemGetList
// 0x0018 (0x0018 - 0x0000)
struct GameSequenceWork_BP_OpenSubLevelItemGetList final
{
public:
	class FText                                   Subtitle;                                          // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_BP_OpenSubLevelItemGetList) == 0x000008, "Wrong alignment on GameSequenceWork_BP_OpenSubLevelItemGetList");
static_assert(sizeof(GameSequenceWork_BP_OpenSubLevelItemGetList) == 0x000018, "Wrong size on GameSequenceWork_BP_OpenSubLevelItemGetList");
static_assert(offsetof(GameSequenceWork_BP_OpenSubLevelItemGetList, Subtitle) == 0x000000, "Member 'GameSequenceWork_BP_OpenSubLevelItemGetList::Subtitle' has a wrong offset!");

// Function GameModule.GameSequenceWork.BP_OpenSubLevelWindow
// 0x0028 (0x0028 - 0x0000)
struct GameSequenceWork_BP_OpenSubLevelWindow final
{
public:
	TSoftObjectPtr<class UWorld>                  SubLevel;                                          // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_BP_OpenSubLevelWindow) == 0x000008, "Wrong alignment on GameSequenceWork_BP_OpenSubLevelWindow");
static_assert(sizeof(GameSequenceWork_BP_OpenSubLevelWindow) == 0x000028, "Wrong size on GameSequenceWork_BP_OpenSubLevelWindow");
static_assert(offsetof(GameSequenceWork_BP_OpenSubLevelWindow, SubLevel) == 0x000000, "Member 'GameSequenceWork_BP_OpenSubLevelWindow::SubLevel' has a wrong offset!");

// Function GameModule.GameSequenceWork.BP_PopReturnLevel
// 0x000C (0x000C - 0x0000)
struct GameSequenceWork_BP_PopReturnLevel final
{
public:
	class FName                                   OutLevelName;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameSequenceWork_BP_PopReturnLevel) == 0x000004, "Wrong alignment on GameSequenceWork_BP_PopReturnLevel");
static_assert(sizeof(GameSequenceWork_BP_PopReturnLevel) == 0x00000C, "Wrong size on GameSequenceWork_BP_PopReturnLevel");
static_assert(offsetof(GameSequenceWork_BP_PopReturnLevel, OutLevelName) == 0x000000, "Member 'GameSequenceWork_BP_PopReturnLevel::OutLevelName' has a wrong offset!");
static_assert(offsetof(GameSequenceWork_BP_PopReturnLevel, ReturnValue) == 0x000008, "Member 'GameSequenceWork_BP_PopReturnLevel::ReturnValue' has a wrong offset!");

// Function GameModule.GameSequenceWork.BP_PushReturnLevel
// 0x0028 (0x0028 - 0x0000)
struct GameSequenceWork_BP_PushReturnLevel final
{
public:
	TSoftObjectPtr<class UObject>                 Level;                                             // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_BP_PushReturnLevel) == 0x000008, "Wrong alignment on GameSequenceWork_BP_PushReturnLevel");
static_assert(sizeof(GameSequenceWork_BP_PushReturnLevel) == 0x000028, "Wrong size on GameSequenceWork_BP_PushReturnLevel");
static_assert(offsetof(GameSequenceWork_BP_PushReturnLevel, Level) == 0x000000, "Member 'GameSequenceWork_BP_PushReturnLevel::Level' has a wrong offset!");

// Function GameModule.GameSequenceWork.BP_SetMenuListIndex
// 0x0004 (0x0004 - 0x0000)
struct GameSequenceWork_BP_SetMenuListIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_BP_SetMenuListIndex) == 0x000004, "Wrong alignment on GameSequenceWork_BP_SetMenuListIndex");
static_assert(sizeof(GameSequenceWork_BP_SetMenuListIndex) == 0x000004, "Wrong size on GameSequenceWork_BP_SetMenuListIndex");
static_assert(offsetof(GameSequenceWork_BP_SetMenuListIndex, Index_0) == 0x000000, "Member 'GameSequenceWork_BP_SetMenuListIndex::Index_0' has a wrong offset!");

// Function GameModule.GameSequenceWork.BP_SetOpenNetworkWaitingMessageParameter
// 0x0003 (0x0003 - 0x0000)
struct GameSequenceWork_BP_SetOpenNetworkWaitingMessageParameter final
{
public:
	EWaitMessageType                              Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          backImage;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          backBlur;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_BP_SetOpenNetworkWaitingMessageParameter) == 0x000001, "Wrong alignment on GameSequenceWork_BP_SetOpenNetworkWaitingMessageParameter");
static_assert(sizeof(GameSequenceWork_BP_SetOpenNetworkWaitingMessageParameter) == 0x000003, "Wrong size on GameSequenceWork_BP_SetOpenNetworkWaitingMessageParameter");
static_assert(offsetof(GameSequenceWork_BP_SetOpenNetworkWaitingMessageParameter, Type) == 0x000000, "Member 'GameSequenceWork_BP_SetOpenNetworkWaitingMessageParameter::Type' has a wrong offset!");
static_assert(offsetof(GameSequenceWork_BP_SetOpenNetworkWaitingMessageParameter, backImage) == 0x000001, "Member 'GameSequenceWork_BP_SetOpenNetworkWaitingMessageParameter::backImage' has a wrong offset!");
static_assert(offsetof(GameSequenceWork_BP_SetOpenNetworkWaitingMessageParameter, backBlur) == 0x000002, "Member 'GameSequenceWork_BP_SetOpenNetworkWaitingMessageParameter::backBlur' has a wrong offset!");

// Function GameModule.GameSequenceWork.BP_SetOutGameCharacterCode
// 0x0004 (0x0004 - 0x0000)
struct GameSequenceWork_BP_SetOutGameCharacterCode final
{
public:
	int32                                         CharaCode;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_BP_SetOutGameCharacterCode) == 0x000004, "Wrong alignment on GameSequenceWork_BP_SetOutGameCharacterCode");
static_assert(sizeof(GameSequenceWork_BP_SetOutGameCharacterCode) == 0x000004, "Wrong size on GameSequenceWork_BP_SetOutGameCharacterCode");
static_assert(offsetof(GameSequenceWork_BP_SetOutGameCharacterCode, CharaCode) == 0x000000, "Member 'GameSequenceWork_BP_SetOutGameCharacterCode::CharaCode' has a wrong offset!");

// Function GameModule.GameSequenceWork.BP_SetOutGameFriendFetchCategory
// 0x0002 (0x0002 - 0x0000)
struct GameSequenceWork_BP_SetOutGameFriendFetchCategory final
{
public:
	EFriendRequesetType                           Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          buleFlag;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_BP_SetOutGameFriendFetchCategory) == 0x000001, "Wrong alignment on GameSequenceWork_BP_SetOutGameFriendFetchCategory");
static_assert(sizeof(GameSequenceWork_BP_SetOutGameFriendFetchCategory) == 0x000002, "Wrong size on GameSequenceWork_BP_SetOutGameFriendFetchCategory");
static_assert(offsetof(GameSequenceWork_BP_SetOutGameFriendFetchCategory, Type) == 0x000000, "Member 'GameSequenceWork_BP_SetOutGameFriendFetchCategory::Type' has a wrong offset!");
static_assert(offsetof(GameSequenceWork_BP_SetOutGameFriendFetchCategory, buleFlag) == 0x000001, "Member 'GameSequenceWork_BP_SetOutGameFriendFetchCategory::buleFlag' has a wrong offset!");

// Function GameModule.GameSequenceWork.BP_SetTutorialStep
// 0x0004 (0x0004 - 0x0000)
struct GameSequenceWork_BP_SetTutorialStep final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_BP_SetTutorialStep) == 0x000004, "Wrong alignment on GameSequenceWork_BP_SetTutorialStep");
static_assert(sizeof(GameSequenceWork_BP_SetTutorialStep) == 0x000004, "Wrong size on GameSequenceWork_BP_SetTutorialStep");
static_assert(offsetof(GameSequenceWork_BP_SetTutorialStep, Index_0) == 0x000000, "Member 'GameSequenceWork_BP_SetTutorialStep::Index_0' has a wrong offset!");

// Function GameModule.GameSequenceWork.BP_SpecifyTabIndex
// 0x0004 (0x0004 - 0x0000)
struct GameSequenceWork_BP_SpecifyTabIndex final
{
public:
	int32                                         TabIdx;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_BP_SpecifyTabIndex) == 0x000004, "Wrong alignment on GameSequenceWork_BP_SpecifyTabIndex");
static_assert(sizeof(GameSequenceWork_BP_SpecifyTabIndex) == 0x000004, "Wrong size on GameSequenceWork_BP_SpecifyTabIndex");
static_assert(offsetof(GameSequenceWork_BP_SpecifyTabIndex, TabIdx) == 0x000000, "Member 'GameSequenceWork_BP_SpecifyTabIndex::TabIdx' has a wrong offset!");

// DelegateFunction GameModule.GameSequenceWork.ChangeBattleSequenceDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GameSequenceWork_ChangeBattleSequenceDelegate__DelegateSignature final
{
public:
	EBattleStartSequenceType                      Sequence;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_ChangeBattleSequenceDelegate__DelegateSignature) == 0x000001, "Wrong alignment on GameSequenceWork_ChangeBattleSequenceDelegate__DelegateSignature");
static_assert(sizeof(GameSequenceWork_ChangeBattleSequenceDelegate__DelegateSignature) == 0x000001, "Wrong size on GameSequenceWork_ChangeBattleSequenceDelegate__DelegateSignature");
static_assert(offsetof(GameSequenceWork_ChangeBattleSequenceDelegate__DelegateSignature, Sequence) == 0x000000, "Member 'GameSequenceWork_ChangeBattleSequenceDelegate__DelegateSignature::Sequence' has a wrong offset!");

// Function GameModule.GameSequenceWork.DebugSetSquadMemberNum
// 0x0008 (0x0008 - 0x0000)
struct GameSequenceWork_DebugSetSquadMemberNum final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterId                                  CharacterId;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameSequenceWork_DebugSetSquadMemberNum) == 0x000004, "Wrong alignment on GameSequenceWork_DebugSetSquadMemberNum");
static_assert(sizeof(GameSequenceWork_DebugSetSquadMemberNum) == 0x000008, "Wrong size on GameSequenceWork_DebugSetSquadMemberNum");
static_assert(offsetof(GameSequenceWork_DebugSetSquadMemberNum, Num) == 0x000000, "Member 'GameSequenceWork_DebugSetSquadMemberNum::Num' has a wrong offset!");
static_assert(offsetof(GameSequenceWork_DebugSetSquadMemberNum, CharacterId) == 0x000004, "Member 'GameSequenceWork_DebugSetSquadMemberNum::CharacterId' has a wrong offset!");

// Function GameModule.GameSequenceWork.GetGameAfterLoginStepType
// 0x0001 (0x0001 - 0x0000)
struct GameSequenceWork_GetGameAfterLoginStepType final
{
public:
	EGameAfterLoginStepType                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_GetGameAfterLoginStepType) == 0x000001, "Wrong alignment on GameSequenceWork_GetGameAfterLoginStepType");
static_assert(sizeof(GameSequenceWork_GetGameAfterLoginStepType) == 0x000001, "Wrong size on GameSequenceWork_GetGameAfterLoginStepType");
static_assert(offsetof(GameSequenceWork_GetGameAfterLoginStepType, ReturnValue) == 0x000000, "Member 'GameSequenceWork_GetGameAfterLoginStepType::ReturnValue' has a wrong offset!");

// Function GameModule.GameSequenceWork.GetOutGameTutorialPopupScene
// 0x0001 (0x0001 - 0x0000)
struct GameSequenceWork_GetOutGameTutorialPopupScene final
{
public:
	ETutorialPopupScene                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_GetOutGameTutorialPopupScene) == 0x000001, "Wrong alignment on GameSequenceWork_GetOutGameTutorialPopupScene");
static_assert(sizeof(GameSequenceWork_GetOutGameTutorialPopupScene) == 0x000001, "Wrong size on GameSequenceWork_GetOutGameTutorialPopupScene");
static_assert(offsetof(GameSequenceWork_GetOutGameTutorialPopupScene, ReturnValue) == 0x000000, "Member 'GameSequenceWork_GetOutGameTutorialPopupScene::ReturnValue' has a wrong offset!");

// Function GameModule.GameSequenceWork.GetSelectedGameMode
// 0x0001 (0x0001 - 0x0000)
struct GameSequenceWork_GetSelectedGameMode final
{
public:
	EMdGameMode                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_GetSelectedGameMode) == 0x000001, "Wrong alignment on GameSequenceWork_GetSelectedGameMode");
static_assert(sizeof(GameSequenceWork_GetSelectedGameMode) == 0x000001, "Wrong size on GameSequenceWork_GetSelectedGameMode");
static_assert(offsetof(GameSequenceWork_GetSelectedGameMode, ReturnValue) == 0x000000, "Member 'GameSequenceWork_GetSelectedGameMode::ReturnValue' has a wrong offset!");

// Function GameModule.GameSequenceWork.IsFinishedTutorial
// 0x0001 (0x0001 - 0x0000)
struct GameSequenceWork_IsFinishedTutorial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_IsFinishedTutorial) == 0x000001, "Wrong alignment on GameSequenceWork_IsFinishedTutorial");
static_assert(sizeof(GameSequenceWork_IsFinishedTutorial) == 0x000001, "Wrong size on GameSequenceWork_IsFinishedTutorial");
static_assert(offsetof(GameSequenceWork_IsFinishedTutorial, ReturnValue) == 0x000000, "Member 'GameSequenceWork_IsFinishedTutorial::ReturnValue' has a wrong offset!");

// Function GameModule.GameSequenceWork.IsSquadMemberDuplicate
// 0x0002 (0x0002 - 0x0000)
struct GameSequenceWork_IsSquadMemberDuplicate final
{
public:
	ECharacterId                                  SelectedCharacterId;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_IsSquadMemberDuplicate) == 0x000001, "Wrong alignment on GameSequenceWork_IsSquadMemberDuplicate");
static_assert(sizeof(GameSequenceWork_IsSquadMemberDuplicate) == 0x000002, "Wrong size on GameSequenceWork_IsSquadMemberDuplicate");
static_assert(offsetof(GameSequenceWork_IsSquadMemberDuplicate, SelectedCharacterId) == 0x000000, "Member 'GameSequenceWork_IsSquadMemberDuplicate::SelectedCharacterId' has a wrong offset!");
static_assert(offsetof(GameSequenceWork_IsSquadMemberDuplicate, ReturnValue) == 0x000001, "Member 'GameSequenceWork_IsSquadMemberDuplicate::ReturnValue' has a wrong offset!");

// DelegateFunction GameModule.GameSequenceWork.NetworkLoginFinishedDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GameSequenceWork_NetworkLoginFinishedDelegate__DelegateSignature final
{
public:
	bool                                          LoginCompleted;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_NetworkLoginFinishedDelegate__DelegateSignature) == 0x000001, "Wrong alignment on GameSequenceWork_NetworkLoginFinishedDelegate__DelegateSignature");
static_assert(sizeof(GameSequenceWork_NetworkLoginFinishedDelegate__DelegateSignature) == 0x000001, "Wrong size on GameSequenceWork_NetworkLoginFinishedDelegate__DelegateSignature");
static_assert(offsetof(GameSequenceWork_NetworkLoginFinishedDelegate__DelegateSignature, LoginCompleted) == 0x000000, "Member 'GameSequenceWork_NetworkLoginFinishedDelegate__DelegateSignature::LoginCompleted' has a wrong offset!");

// Function GameModule.GameSequenceWork.OnAudioFinished_AppearSquad
// 0x0008 (0x0008 - 0x0000)
struct GameSequenceWork_OnAudioFinished_AppearSquad final
{
public:
	class UAtomComponent*                         AtomComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_OnAudioFinished_AppearSquad) == 0x000008, "Wrong alignment on GameSequenceWork_OnAudioFinished_AppearSquad");
static_assert(sizeof(GameSequenceWork_OnAudioFinished_AppearSquad) == 0x000008, "Wrong size on GameSequenceWork_OnAudioFinished_AppearSquad");
static_assert(offsetof(GameSequenceWork_OnAudioFinished_AppearSquad, AtomComponent) == 0x000000, "Member 'GameSequenceWork_OnAudioFinished_AppearSquad::AtomComponent' has a wrong offset!");

// Function GameModule.GameSequenceWork.OnAudioFinished_AppearSquadMember
// 0x0008 (0x0008 - 0x0000)
struct GameSequenceWork_OnAudioFinished_AppearSquadMember final
{
public:
	class UAtomComponent*                         AtomComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_OnAudioFinished_AppearSquadMember) == 0x000008, "Wrong alignment on GameSequenceWork_OnAudioFinished_AppearSquadMember");
static_assert(sizeof(GameSequenceWork_OnAudioFinished_AppearSquadMember) == 0x000008, "Wrong size on GameSequenceWork_OnAudioFinished_AppearSquadMember");
static_assert(offsetof(GameSequenceWork_OnAudioFinished_AppearSquadMember, AtomComponent) == 0x000000, "Member 'GameSequenceWork_OnAudioFinished_AppearSquadMember::AtomComponent' has a wrong offset!");

// DelegateFunction GameModule.GameSequenceWork.OnChangedMainMenuDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct GameSequenceWork_OnChangedMainMenuDelegate__DelegateSignature final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_OnChangedMainMenuDelegate__DelegateSignature) == 0x000004, "Wrong alignment on GameSequenceWork_OnChangedMainMenuDelegate__DelegateSignature");
static_assert(sizeof(GameSequenceWork_OnChangedMainMenuDelegate__DelegateSignature) == 0x000004, "Wrong size on GameSequenceWork_OnChangedMainMenuDelegate__DelegateSignature");
static_assert(offsetof(GameSequenceWork_OnChangedMainMenuDelegate__DelegateSignature, Index_0) == 0x000000, "Member 'GameSequenceWork_OnChangedMainMenuDelegate__DelegateSignature::Index_0' has a wrong offset!");

// Function GameModule.GameSequenceWork.OnChangeIdleStatusEvent
// 0x0008 (0x0008 - 0x0000)
struct GameSequenceWork_OnChangeIdleStatusEvent final
{
public:
	bool                                          Idle;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StateSetting;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_OnChangeIdleStatusEvent) == 0x000004, "Wrong alignment on GameSequenceWork_OnChangeIdleStatusEvent");
static_assert(sizeof(GameSequenceWork_OnChangeIdleStatusEvent) == 0x000008, "Wrong size on GameSequenceWork_OnChangeIdleStatusEvent");
static_assert(offsetof(GameSequenceWork_OnChangeIdleStatusEvent, Idle) == 0x000000, "Member 'GameSequenceWork_OnChangeIdleStatusEvent::Idle' has a wrong offset!");
static_assert(offsetof(GameSequenceWork_OnChangeIdleStatusEvent, StateSetting) == 0x000004, "Member 'GameSequenceWork_OnChangeIdleStatusEvent::StateSetting' has a wrong offset!");

// Function GameModule.GameSequenceWork.OnFinishedQuitBattle_ChangeIdleStatusEvent
// 0x0008 (0x0008 - 0x0000)
struct GameSequenceWork_OnFinishedQuitBattle_ChangeIdleStatusEvent final
{
public:
	bool                                          Idle;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StateSetting;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_OnFinishedQuitBattle_ChangeIdleStatusEvent) == 0x000004, "Wrong alignment on GameSequenceWork_OnFinishedQuitBattle_ChangeIdleStatusEvent");
static_assert(sizeof(GameSequenceWork_OnFinishedQuitBattle_ChangeIdleStatusEvent) == 0x000008, "Wrong size on GameSequenceWork_OnFinishedQuitBattle_ChangeIdleStatusEvent");
static_assert(offsetof(GameSequenceWork_OnFinishedQuitBattle_ChangeIdleStatusEvent, Idle) == 0x000000, "Member 'GameSequenceWork_OnFinishedQuitBattle_ChangeIdleStatusEvent::Idle' has a wrong offset!");
static_assert(offsetof(GameSequenceWork_OnFinishedQuitBattle_ChangeIdleStatusEvent, StateSetting) == 0x000004, "Member 'GameSequenceWork_OnFinishedQuitBattle_ChangeIdleStatusEvent::StateSetting' has a wrong offset!");

// Function GameModule.GameSequenceWork.OnLoadCompleteConfirmPurchase
// 0x0004 (0x0004 - 0x0000)
struct GameSequenceWork_OnLoadCompleteConfirmPurchase final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_OnLoadCompleteConfirmPurchase) == 0x000004, "Wrong alignment on GameSequenceWork_OnLoadCompleteConfirmPurchase");
static_assert(sizeof(GameSequenceWork_OnLoadCompleteConfirmPurchase) == 0x000004, "Wrong size on GameSequenceWork_OnLoadCompleteConfirmPurchase");
static_assert(offsetof(GameSequenceWork_OnLoadCompleteConfirmPurchase, RequestId) == 0x000000, "Member 'GameSequenceWork_OnLoadCompleteConfirmPurchase::RequestId' has a wrong offset!");

// Function GameModule.GameSequenceWork.OnLoadCompletePurchaseError
// 0x0014 (0x0014 - 0x0000)
struct GameSequenceWork_OnLoadCompletePurchaseError final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Message;                                           // 0x000C(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_OnLoadCompletePurchaseError) == 0x000004, "Wrong alignment on GameSequenceWork_OnLoadCompletePurchaseError");
static_assert(sizeof(GameSequenceWork_OnLoadCompletePurchaseError) == 0x000014, "Wrong size on GameSequenceWork_OnLoadCompletePurchaseError");
static_assert(offsetof(GameSequenceWork_OnLoadCompletePurchaseError, RequestId) == 0x000000, "Member 'GameSequenceWork_OnLoadCompletePurchaseError::RequestId' has a wrong offset!");
static_assert(offsetof(GameSequenceWork_OnLoadCompletePurchaseError, Key) == 0x000004, "Member 'GameSequenceWork_OnLoadCompletePurchaseError::Key' has a wrong offset!");
static_assert(offsetof(GameSequenceWork_OnLoadCompletePurchaseError, Message) == 0x00000C, "Member 'GameSequenceWork_OnLoadCompletePurchaseError::Message' has a wrong offset!");

// Function GameModule.GameSequenceWork.OnLoadCompletePurchaseStatus
// 0x0004 (0x0004 - 0x0000)
struct GameSequenceWork_OnLoadCompletePurchaseStatus final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_OnLoadCompletePurchaseStatus) == 0x000004, "Wrong alignment on GameSequenceWork_OnLoadCompletePurchaseStatus");
static_assert(sizeof(GameSequenceWork_OnLoadCompletePurchaseStatus) == 0x000004, "Wrong size on GameSequenceWork_OnLoadCompletePurchaseStatus");
static_assert(offsetof(GameSequenceWork_OnLoadCompletePurchaseStatus, RequestId) == 0x000000, "Member 'GameSequenceWork_OnLoadCompletePurchaseStatus::RequestId' has a wrong offset!");

// Function GameModule.GameSequenceWork.OnPlayerRequestErrorEvent
// 0x0014 (0x0014 - 0x0000)
struct GameSequenceWork_OnPlayerRequestErrorEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Message;                                           // 0x000C(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_OnPlayerRequestErrorEvent) == 0x000004, "Wrong alignment on GameSequenceWork_OnPlayerRequestErrorEvent");
static_assert(sizeof(GameSequenceWork_OnPlayerRequestErrorEvent) == 0x000014, "Wrong size on GameSequenceWork_OnPlayerRequestErrorEvent");
static_assert(offsetof(GameSequenceWork_OnPlayerRequestErrorEvent, RequestId) == 0x000000, "Member 'GameSequenceWork_OnPlayerRequestErrorEvent::RequestId' has a wrong offset!");
static_assert(offsetof(GameSequenceWork_OnPlayerRequestErrorEvent, Key) == 0x000004, "Member 'GameSequenceWork_OnPlayerRequestErrorEvent::Key' has a wrong offset!");
static_assert(offsetof(GameSequenceWork_OnPlayerRequestErrorEvent, Message) == 0x00000C, "Member 'GameSequenceWork_OnPlayerRequestErrorEvent::Message' has a wrong offset!");

// Function GameModule.GameSequenceWork.OnPlayerRequestErrorServerEvent
// 0x0014 (0x0014 - 0x0000)
struct GameSequenceWork_OnPlayerRequestErrorServerEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Message;                                           // 0x000C(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_OnPlayerRequestErrorServerEvent) == 0x000004, "Wrong alignment on GameSequenceWork_OnPlayerRequestErrorServerEvent");
static_assert(sizeof(GameSequenceWork_OnPlayerRequestErrorServerEvent) == 0x000014, "Wrong size on GameSequenceWork_OnPlayerRequestErrorServerEvent");
static_assert(offsetof(GameSequenceWork_OnPlayerRequestErrorServerEvent, RequestId) == 0x000000, "Member 'GameSequenceWork_OnPlayerRequestErrorServerEvent::RequestId' has a wrong offset!");
static_assert(offsetof(GameSequenceWork_OnPlayerRequestErrorServerEvent, Key) == 0x000004, "Member 'GameSequenceWork_OnPlayerRequestErrorServerEvent::Key' has a wrong offset!");
static_assert(offsetof(GameSequenceWork_OnPlayerRequestErrorServerEvent, Message) == 0x00000C, "Member 'GameSequenceWork_OnPlayerRequestErrorServerEvent::Message' has a wrong offset!");

// Function GameModule.GameSequenceWork.OnSquadNumChanged
// 0x0004 (0x0004 - 0x0000)
struct GameSequenceWork_OnSquadNumChanged final
{
public:
	int32                                         SquadNum;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_OnSquadNumChanged) == 0x000004, "Wrong alignment on GameSequenceWork_OnSquadNumChanged");
static_assert(sizeof(GameSequenceWork_OnSquadNumChanged) == 0x000004, "Wrong size on GameSequenceWork_OnSquadNumChanged");
static_assert(offsetof(GameSequenceWork_OnSquadNumChanged, SquadNum) == 0x000000, "Member 'GameSequenceWork_OnSquadNumChanged::SquadNum' has a wrong offset!");

// DelegateFunction GameModule.GameSequenceWork.OnSubLevelHiddenTutorialDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GameSequenceWork_OnSubLevelHiddenTutorialDelegate__DelegateSignature final
{
public:
	ETutorialPopupScene                           Scene;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_OnSubLevelHiddenTutorialDelegate__DelegateSignature) == 0x000001, "Wrong alignment on GameSequenceWork_OnSubLevelHiddenTutorialDelegate__DelegateSignature");
static_assert(sizeof(GameSequenceWork_OnSubLevelHiddenTutorialDelegate__DelegateSignature) == 0x000001, "Wrong size on GameSequenceWork_OnSubLevelHiddenTutorialDelegate__DelegateSignature");
static_assert(offsetof(GameSequenceWork_OnSubLevelHiddenTutorialDelegate__DelegateSignature, Scene) == 0x000000, "Member 'GameSequenceWork_OnSubLevelHiddenTutorialDelegate__DelegateSignature::Scene' has a wrong offset!");

// Function GameModule.GameSequenceWork.OnSystemErrorEvent
// 0x0014 (0x0014 - 0x0000)
struct GameSequenceWork_OnSystemErrorEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Message;                                           // 0x000C(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_OnSystemErrorEvent) == 0x000004, "Wrong alignment on GameSequenceWork_OnSystemErrorEvent");
static_assert(sizeof(GameSequenceWork_OnSystemErrorEvent) == 0x000014, "Wrong size on GameSequenceWork_OnSystemErrorEvent");
static_assert(offsetof(GameSequenceWork_OnSystemErrorEvent, RequestId) == 0x000000, "Member 'GameSequenceWork_OnSystemErrorEvent::RequestId' has a wrong offset!");
static_assert(offsetof(GameSequenceWork_OnSystemErrorEvent, Key) == 0x000004, "Member 'GameSequenceWork_OnSystemErrorEvent::Key' has a wrong offset!");
static_assert(offsetof(GameSequenceWork_OnSystemErrorEvent, Message) == 0x00000C, "Member 'GameSequenceWork_OnSystemErrorEvent::Message' has a wrong offset!");

// Function GameModule.GameSequenceWork.OnSystemErrorServerEvent
// 0x0014 (0x0014 - 0x0000)
struct GameSequenceWork_OnSystemErrorServerEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Message;                                           // 0x000C(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_OnSystemErrorServerEvent) == 0x000004, "Wrong alignment on GameSequenceWork_OnSystemErrorServerEvent");
static_assert(sizeof(GameSequenceWork_OnSystemErrorServerEvent) == 0x000014, "Wrong size on GameSequenceWork_OnSystemErrorServerEvent");
static_assert(offsetof(GameSequenceWork_OnSystemErrorServerEvent, RequestId) == 0x000000, "Member 'GameSequenceWork_OnSystemErrorServerEvent::RequestId' has a wrong offset!");
static_assert(offsetof(GameSequenceWork_OnSystemErrorServerEvent, Key) == 0x000004, "Member 'GameSequenceWork_OnSystemErrorServerEvent::Key' has a wrong offset!");
static_assert(offsetof(GameSequenceWork_OnSystemErrorServerEvent, Message) == 0x00000C, "Member 'GameSequenceWork_OnSystemErrorServerEvent::Message' has a wrong offset!");

// Function GameModule.GameSequenceWork.OnTeamUpAutoStartBattleCompleteEvent
// 0x0001 (0x0001 - 0x0000)
struct GameSequenceWork_OnTeamUpAutoStartBattleCompleteEvent final
{
public:
	EAutoStartBattleState                         State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_OnTeamUpAutoStartBattleCompleteEvent) == 0x000001, "Wrong alignment on GameSequenceWork_OnTeamUpAutoStartBattleCompleteEvent");
static_assert(sizeof(GameSequenceWork_OnTeamUpAutoStartBattleCompleteEvent) == 0x000001, "Wrong size on GameSequenceWork_OnTeamUpAutoStartBattleCompleteEvent");
static_assert(offsetof(GameSequenceWork_OnTeamUpAutoStartBattleCompleteEvent, State) == 0x000000, "Member 'GameSequenceWork_OnTeamUpAutoStartBattleCompleteEvent::State' has a wrong offset!");

// Function GameModule.GameSequenceWork.OnUpdateCompleteUpdateTutorial
// 0x0004 (0x0004 - 0x0000)
struct GameSequenceWork_OnUpdateCompleteUpdateTutorial final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_OnUpdateCompleteUpdateTutorial) == 0x000004, "Wrong alignment on GameSequenceWork_OnUpdateCompleteUpdateTutorial");
static_assert(sizeof(GameSequenceWork_OnUpdateCompleteUpdateTutorial) == 0x000004, "Wrong size on GameSequenceWork_OnUpdateCompleteUpdateTutorial");
static_assert(offsetof(GameSequenceWork_OnUpdateCompleteUpdateTutorial, RequestId) == 0x000000, "Member 'GameSequenceWork_OnUpdateCompleteUpdateTutorial::RequestId' has a wrong offset!");

// Function GameModule.GameSequenceWork.OnVoiceChatChangePlayerStatus
// 0x0018 (0x0018 - 0x0000)
struct GameSequenceWork_OnVoiceChatChangePlayerStatus final
{
public:
	class FString                                 UniqueNetId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoiceChatMemberStatus                        Status;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_OnVoiceChatChangePlayerStatus) == 0x000008, "Wrong alignment on GameSequenceWork_OnVoiceChatChangePlayerStatus");
static_assert(sizeof(GameSequenceWork_OnVoiceChatChangePlayerStatus) == 0x000018, "Wrong size on GameSequenceWork_OnVoiceChatChangePlayerStatus");
static_assert(offsetof(GameSequenceWork_OnVoiceChatChangePlayerStatus, UniqueNetId) == 0x000000, "Member 'GameSequenceWork_OnVoiceChatChangePlayerStatus::UniqueNetId' has a wrong offset!");
static_assert(offsetof(GameSequenceWork_OnVoiceChatChangePlayerStatus, Status) == 0x000010, "Member 'GameSequenceWork_OnVoiceChatChangePlayerStatus::Status' has a wrong offset!");
static_assert(offsetof(GameSequenceWork_OnVoiceChatChangePlayerStatus, Value) == 0x000014, "Member 'GameSequenceWork_OnVoiceChatChangePlayerStatus::Value' has a wrong offset!");

// Function GameModule.GameSequenceWork.OnVoiceChatChangeStatus
// 0x0001 (0x0001 - 0x0000)
struct GameSequenceWork_OnVoiceChatChangeStatus final
{
public:
	EVoiceChatSystemStatus                        Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_OnVoiceChatChangeStatus) == 0x000001, "Wrong alignment on GameSequenceWork_OnVoiceChatChangeStatus");
static_assert(sizeof(GameSequenceWork_OnVoiceChatChangeStatus) == 0x000001, "Wrong size on GameSequenceWork_OnVoiceChatChangeStatus");
static_assert(offsetof(GameSequenceWork_OnVoiceChatChangeStatus, Status) == 0x000000, "Member 'GameSequenceWork_OnVoiceChatChangeStatus::Status' has a wrong offset!");

// Function GameModule.GameSequenceWork.OpenTutorialLevel
// 0x0010 (0x0010 - 0x0000)
struct GameSequenceWork_OpenTutorialLevel final
{
public:
	class FString                                 UniqueId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_OpenTutorialLevel) == 0x000008, "Wrong alignment on GameSequenceWork_OpenTutorialLevel");
static_assert(sizeof(GameSequenceWork_OpenTutorialLevel) == 0x000010, "Wrong size on GameSequenceWork_OpenTutorialLevel");
static_assert(offsetof(GameSequenceWork_OpenTutorialLevel, UniqueId) == 0x000000, "Member 'GameSequenceWork_OpenTutorialLevel::UniqueId' has a wrong offset!");

// Function GameModule.GameSequenceWork.OutgameTutorialTipsWidget
// 0x0010 (0x0010 - 0x0000)
struct GameSequenceWork_OutgameTutorialTipsWidget final
{
public:
	ETutorialPopupScene                           PopupScene;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AlwaysOpen;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelStreamingDynamic*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_OutgameTutorialTipsWidget) == 0x000008, "Wrong alignment on GameSequenceWork_OutgameTutorialTipsWidget");
static_assert(sizeof(GameSequenceWork_OutgameTutorialTipsWidget) == 0x000010, "Wrong size on GameSequenceWork_OutgameTutorialTipsWidget");
static_assert(offsetof(GameSequenceWork_OutgameTutorialTipsWidget, PopupScene) == 0x000000, "Member 'GameSequenceWork_OutgameTutorialTipsWidget::PopupScene' has a wrong offset!");
static_assert(offsetof(GameSequenceWork_OutgameTutorialTipsWidget, AlwaysOpen) == 0x000001, "Member 'GameSequenceWork_OutgameTutorialTipsWidget::AlwaysOpen' has a wrong offset!");
static_assert(offsetof(GameSequenceWork_OutgameTutorialTipsWidget, ReturnValue) == 0x000008, "Member 'GameSequenceWork_OutgameTutorialTipsWidget::ReturnValue' has a wrong offset!");

// Function GameModule.GameSequenceWork.SetEditPlayerIndex
// 0x0004 (0x0004 - 0x0000)
struct GameSequenceWork_SetEditPlayerIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_SetEditPlayerIndex) == 0x000004, "Wrong alignment on GameSequenceWork_SetEditPlayerIndex");
static_assert(sizeof(GameSequenceWork_SetEditPlayerIndex) == 0x000004, "Wrong size on GameSequenceWork_SetEditPlayerIndex");
static_assert(offsetof(GameSequenceWork_SetEditPlayerIndex, Index_0) == 0x000000, "Member 'GameSequenceWork_SetEditPlayerIndex::Index_0' has a wrong offset!");

// Function GameModule.GameSequenceWork.SetEditTrainingCharacterId
// 0x0001 (0x0001 - 0x0000)
struct GameSequenceWork_SetEditTrainingCharacterId final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_SetEditTrainingCharacterId) == 0x000001, "Wrong alignment on GameSequenceWork_SetEditTrainingCharacterId");
static_assert(sizeof(GameSequenceWork_SetEditTrainingCharacterId) == 0x000001, "Wrong size on GameSequenceWork_SetEditTrainingCharacterId");
static_assert(offsetof(GameSequenceWork_SetEditTrainingCharacterId, CharacterId) == 0x000000, "Member 'GameSequenceWork_SetEditTrainingCharacterId::CharacterId' has a wrong offset!");

// Function GameModule.GameSequenceWork.SetEditTrainingSkillVariationCode
// 0x0004 (0x0004 - 0x0000)
struct GameSequenceWork_SetEditTrainingSkillVariationCode final
{
public:
	int32                                         SkillVariationCode;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_SetEditTrainingSkillVariationCode) == 0x000004, "Wrong alignment on GameSequenceWork_SetEditTrainingSkillVariationCode");
static_assert(sizeof(GameSequenceWork_SetEditTrainingSkillVariationCode) == 0x000004, "Wrong size on GameSequenceWork_SetEditTrainingSkillVariationCode");
static_assert(offsetof(GameSequenceWork_SetEditTrainingSkillVariationCode, SkillVariationCode) == 0x000000, "Member 'GameSequenceWork_SetEditTrainingSkillVariationCode::SkillVariationCode' has a wrong offset!");

// Function GameModule.GameSequenceWork.SetLoginBonusTransitionType
// 0x0001 (0x0001 - 0x0000)
struct GameSequenceWork_SetLoginBonusTransitionType final
{
public:
	ELoginBonusTransitionType                     TransitionType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_SetLoginBonusTransitionType) == 0x000001, "Wrong alignment on GameSequenceWork_SetLoginBonusTransitionType");
static_assert(sizeof(GameSequenceWork_SetLoginBonusTransitionType) == 0x000001, "Wrong size on GameSequenceWork_SetLoginBonusTransitionType");
static_assert(offsetof(GameSequenceWork_SetLoginBonusTransitionType, TransitionType) == 0x000000, "Member 'GameSequenceWork_SetLoginBonusTransitionType::TransitionType' has a wrong offset!");

// Function GameModule.GameSequenceWork.SetMoveHeroCrystalTab
// 0x0001 (0x0001 - 0x0000)
struct GameSequenceWork_SetMoveHeroCrystalTab final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_SetMoveHeroCrystalTab) == 0x000001, "Wrong alignment on GameSequenceWork_SetMoveHeroCrystalTab");
static_assert(sizeof(GameSequenceWork_SetMoveHeroCrystalTab) == 0x000001, "Wrong size on GameSequenceWork_SetMoveHeroCrystalTab");
static_assert(offsetof(GameSequenceWork_SetMoveHeroCrystalTab, Flag) == 0x000000, "Member 'GameSequenceWork_SetMoveHeroCrystalTab::Flag' has a wrong offset!");

// Function GameModule.GameSequenceWork.SetNextGuildLevel
// 0x0004 (0x0004 - 0x0000)
struct GameSequenceWork_SetNextGuildLevel final
{
public:
	int32                                         NextGuildLevel;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_SetNextGuildLevel) == 0x000004, "Wrong alignment on GameSequenceWork_SetNextGuildLevel");
static_assert(sizeof(GameSequenceWork_SetNextGuildLevel) == 0x000004, "Wrong size on GameSequenceWork_SetNextGuildLevel");
static_assert(offsetof(GameSequenceWork_SetNextGuildLevel, NextGuildLevel) == 0x000000, "Member 'GameSequenceWork_SetNextGuildLevel::NextGuildLevel' has a wrong offset!");

// DelegateFunction GameModule.GameSequenceWork.SetNoticeUnreadFlagDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GameSequenceWork_SetNoticeUnreadFlagDelegate__DelegateSignature final
{
public:
	bool                                          Unread;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_SetNoticeUnreadFlagDelegate__DelegateSignature) == 0x000001, "Wrong alignment on GameSequenceWork_SetNoticeUnreadFlagDelegate__DelegateSignature");
static_assert(sizeof(GameSequenceWork_SetNoticeUnreadFlagDelegate__DelegateSignature) == 0x000001, "Wrong size on GameSequenceWork_SetNoticeUnreadFlagDelegate__DelegateSignature");
static_assert(offsetof(GameSequenceWork_SetNoticeUnreadFlagDelegate__DelegateSignature, Unread) == 0x000000, "Member 'GameSequenceWork_SetNoticeUnreadFlagDelegate__DelegateSignature::Unread' has a wrong offset!");

// Function GameModule.GameSequenceWork.SetPrevGuildLevel
// 0x0004 (0x0004 - 0x0000)
struct GameSequenceWork_SetPrevGuildLevel final
{
public:
	int32                                         PrevGuildLevel;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_SetPrevGuildLevel) == 0x000004, "Wrong alignment on GameSequenceWork_SetPrevGuildLevel");
static_assert(sizeof(GameSequenceWork_SetPrevGuildLevel) == 0x000004, "Wrong size on GameSequenceWork_SetPrevGuildLevel");
static_assert(offsetof(GameSequenceWork_SetPrevGuildLevel, PrevGuildLevel) == 0x000000, "Member 'GameSequenceWork_SetPrevGuildLevel::PrevGuildLevel' has a wrong offset!");

// Function GameModule.GameSequenceWork.SetSkillVariationCodeMap
// 0x0050 (0x0050 - 0x0000)
struct GameSequenceWork_SetSkillVariationCodeMap final
{
public:
	TMap<ECharacterId, int32>                     SkillVariationCodeMap;                             // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_SetSkillVariationCodeMap) == 0x000008, "Wrong alignment on GameSequenceWork_SetSkillVariationCodeMap");
static_assert(sizeof(GameSequenceWork_SetSkillVariationCodeMap) == 0x000050, "Wrong size on GameSequenceWork_SetSkillVariationCodeMap");
static_assert(offsetof(GameSequenceWork_SetSkillVariationCodeMap, SkillVariationCodeMap) == 0x000000, "Member 'GameSequenceWork_SetSkillVariationCodeMap::SkillVariationCodeMap' has a wrong offset!");

// Function GameModule.GameSequenceWork.UpdateTutorialStepNo
// 0x0002 (0x0002 - 0x0000)
struct GameSequenceWork_UpdateTutorialStepNo final
{
public:
	ETutorialStepNo                               UpdateStepNo;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_UpdateTutorialStepNo) == 0x000001, "Wrong alignment on GameSequenceWork_UpdateTutorialStepNo");
static_assert(sizeof(GameSequenceWork_UpdateTutorialStepNo) == 0x000002, "Wrong size on GameSequenceWork_UpdateTutorialStepNo");
static_assert(offsetof(GameSequenceWork_UpdateTutorialStepNo, UpdateStepNo) == 0x000000, "Member 'GameSequenceWork_UpdateTutorialStepNo::UpdateStepNo' has a wrong offset!");
static_assert(offsetof(GameSequenceWork_UpdateTutorialStepNo, ReturnValue) == 0x000001, "Member 'GameSequenceWork_UpdateTutorialStepNo::ReturnValue' has a wrong offset!");

// DelegateFunction GameModule.GameSequenceWork.VoiceChatEvent__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct GameSequenceWork_VoiceChatEvent__DelegateSignature final
{
public:
	class FString                                 UniqueNetId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_VoiceChatEvent__DelegateSignature) == 0x000008, "Wrong alignment on GameSequenceWork_VoiceChatEvent__DelegateSignature");
static_assert(sizeof(GameSequenceWork_VoiceChatEvent__DelegateSignature) == 0x000010, "Wrong size on GameSequenceWork_VoiceChatEvent__DelegateSignature");
static_assert(offsetof(GameSequenceWork_VoiceChatEvent__DelegateSignature, UniqueNetId) == 0x000000, "Member 'GameSequenceWork_VoiceChatEvent__DelegateSignature::UniqueNetId' has a wrong offset!");

// Function GameModule.GameSequenceWork.BP_GetMainMenuBattleSequence
// 0x0001 (0x0001 - 0x0000)
struct GameSequenceWork_BP_GetMainMenuBattleSequence final
{
public:
	EBattleStartSequenceType                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_BP_GetMainMenuBattleSequence) == 0x000001, "Wrong alignment on GameSequenceWork_BP_GetMainMenuBattleSequence");
static_assert(sizeof(GameSequenceWork_BP_GetMainMenuBattleSequence) == 0x000001, "Wrong size on GameSequenceWork_BP_GetMainMenuBattleSequence");
static_assert(offsetof(GameSequenceWork_BP_GetMainMenuBattleSequence, ReturnValue) == 0x000000, "Member 'GameSequenceWork_BP_GetMainMenuBattleSequence::ReturnValue' has a wrong offset!");

// Function GameModule.GameSequenceWork.BP_GetOutGameCharacterCode
// 0x0004 (0x0004 - 0x0000)
struct GameSequenceWork_BP_GetOutGameCharacterCode final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_BP_GetOutGameCharacterCode) == 0x000004, "Wrong alignment on GameSequenceWork_BP_GetOutGameCharacterCode");
static_assert(sizeof(GameSequenceWork_BP_GetOutGameCharacterCode) == 0x000004, "Wrong size on GameSequenceWork_BP_GetOutGameCharacterCode");
static_assert(offsetof(GameSequenceWork_BP_GetOutGameCharacterCode, ReturnValue) == 0x000000, "Member 'GameSequenceWork_BP_GetOutGameCharacterCode::ReturnValue' has a wrong offset!");

// Function GameModule.GameSequenceWork.BP_GetOutGameFriendFetchBlueFlag
// 0x0001 (0x0001 - 0x0000)
struct GameSequenceWork_BP_GetOutGameFriendFetchBlueFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_BP_GetOutGameFriendFetchBlueFlag) == 0x000001, "Wrong alignment on GameSequenceWork_BP_GetOutGameFriendFetchBlueFlag");
static_assert(sizeof(GameSequenceWork_BP_GetOutGameFriendFetchBlueFlag) == 0x000001, "Wrong size on GameSequenceWork_BP_GetOutGameFriendFetchBlueFlag");
static_assert(offsetof(GameSequenceWork_BP_GetOutGameFriendFetchBlueFlag, ReturnValue) == 0x000000, "Member 'GameSequenceWork_BP_GetOutGameFriendFetchBlueFlag::ReturnValue' has a wrong offset!");

// Function GameModule.GameSequenceWork.BP_GetOutGameFriendFetchCategoryType
// 0x0001 (0x0001 - 0x0000)
struct GameSequenceWork_BP_GetOutGameFriendFetchCategoryType final
{
public:
	EFriendRequesetType                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_BP_GetOutGameFriendFetchCategoryType) == 0x000001, "Wrong alignment on GameSequenceWork_BP_GetOutGameFriendFetchCategoryType");
static_assert(sizeof(GameSequenceWork_BP_GetOutGameFriendFetchCategoryType) == 0x000001, "Wrong size on GameSequenceWork_BP_GetOutGameFriendFetchCategoryType");
static_assert(offsetof(GameSequenceWork_BP_GetOutGameFriendFetchCategoryType, ReturnValue) == 0x000000, "Member 'GameSequenceWork_BP_GetOutGameFriendFetchCategoryType::ReturnValue' has a wrong offset!");

// Function GameModule.GameSequenceWork.BP_GetTutorialStep
// 0x0004 (0x0004 - 0x0000)
struct GameSequenceWork_BP_GetTutorialStep final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_BP_GetTutorialStep) == 0x000004, "Wrong alignment on GameSequenceWork_BP_GetTutorialStep");
static_assert(sizeof(GameSequenceWork_BP_GetTutorialStep) == 0x000004, "Wrong size on GameSequenceWork_BP_GetTutorialStep");
static_assert(offsetof(GameSequenceWork_BP_GetTutorialStep, ReturnValue) == 0x000000, "Member 'GameSequenceWork_BP_GetTutorialStep::ReturnValue' has a wrong offset!");

// Function GameModule.GameSequenceWork.GetEditPlayerIndex
// 0x0004 (0x0004 - 0x0000)
struct GameSequenceWork_GetEditPlayerIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_GetEditPlayerIndex) == 0x000004, "Wrong alignment on GameSequenceWork_GetEditPlayerIndex");
static_assert(sizeof(GameSequenceWork_GetEditPlayerIndex) == 0x000004, "Wrong size on GameSequenceWork_GetEditPlayerIndex");
static_assert(offsetof(GameSequenceWork_GetEditPlayerIndex, ReturnValue) == 0x000000, "Member 'GameSequenceWork_GetEditPlayerIndex::ReturnValue' has a wrong offset!");

// Function GameModule.GameSequenceWork.GetEditTrainingCharacterId
// 0x0001 (0x0001 - 0x0000)
struct GameSequenceWork_GetEditTrainingCharacterId final
{
public:
	ECharacterId                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_GetEditTrainingCharacterId) == 0x000001, "Wrong alignment on GameSequenceWork_GetEditTrainingCharacterId");
static_assert(sizeof(GameSequenceWork_GetEditTrainingCharacterId) == 0x000001, "Wrong size on GameSequenceWork_GetEditTrainingCharacterId");
static_assert(offsetof(GameSequenceWork_GetEditTrainingCharacterId, ReturnValue) == 0x000000, "Member 'GameSequenceWork_GetEditTrainingCharacterId::ReturnValue' has a wrong offset!");

// Function GameModule.GameSequenceWork.GetEditTrainingSkillVariationCode
// 0x0004 (0x0004 - 0x0000)
struct GameSequenceWork_GetEditTrainingSkillVariationCode final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_GetEditTrainingSkillVariationCode) == 0x000004, "Wrong alignment on GameSequenceWork_GetEditTrainingSkillVariationCode");
static_assert(sizeof(GameSequenceWork_GetEditTrainingSkillVariationCode) == 0x000004, "Wrong size on GameSequenceWork_GetEditTrainingSkillVariationCode");
static_assert(offsetof(GameSequenceWork_GetEditTrainingSkillVariationCode, ReturnValue) == 0x000000, "Member 'GameSequenceWork_GetEditTrainingSkillVariationCode::ReturnValue' has a wrong offset!");

// Function GameModule.GameSequenceWork.GetMatchingSquadTimer
// 0x0004 (0x0004 - 0x0000)
struct GameSequenceWork_GetMatchingSquadTimer final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_GetMatchingSquadTimer) == 0x000004, "Wrong alignment on GameSequenceWork_GetMatchingSquadTimer");
static_assert(sizeof(GameSequenceWork_GetMatchingSquadTimer) == 0x000004, "Wrong size on GameSequenceWork_GetMatchingSquadTimer");
static_assert(offsetof(GameSequenceWork_GetMatchingSquadTimer, ReturnValue) == 0x000000, "Member 'GameSequenceWork_GetMatchingSquadTimer::ReturnValue' has a wrong offset!");

// Function GameModule.GameSequenceWork.GetNextGuildLevel
// 0x0004 (0x0004 - 0x0000)
struct GameSequenceWork_GetNextGuildLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_GetNextGuildLevel) == 0x000004, "Wrong alignment on GameSequenceWork_GetNextGuildLevel");
static_assert(sizeof(GameSequenceWork_GetNextGuildLevel) == 0x000004, "Wrong size on GameSequenceWork_GetNextGuildLevel");
static_assert(offsetof(GameSequenceWork_GetNextGuildLevel, ReturnValue) == 0x000000, "Member 'GameSequenceWork_GetNextGuildLevel::ReturnValue' has a wrong offset!");

// Function GameModule.GameSequenceWork.GetPrevGuildLevel
// 0x0004 (0x0004 - 0x0000)
struct GameSequenceWork_GetPrevGuildLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_GetPrevGuildLevel) == 0x000004, "Wrong alignment on GameSequenceWork_GetPrevGuildLevel");
static_assert(sizeof(GameSequenceWork_GetPrevGuildLevel) == 0x000004, "Wrong size on GameSequenceWork_GetPrevGuildLevel");
static_assert(offsetof(GameSequenceWork_GetPrevGuildLevel, ReturnValue) == 0x000000, "Member 'GameSequenceWork_GetPrevGuildLevel::ReturnValue' has a wrong offset!");

// Function GameModule.GameSequenceWork.GetSearchSquadTimer
// 0x0004 (0x0004 - 0x0000)
struct GameSequenceWork_GetSearchSquadTimer final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_GetSearchSquadTimer) == 0x000004, "Wrong alignment on GameSequenceWork_GetSearchSquadTimer");
static_assert(sizeof(GameSequenceWork_GetSearchSquadTimer) == 0x000004, "Wrong size on GameSequenceWork_GetSearchSquadTimer");
static_assert(offsetof(GameSequenceWork_GetSearchSquadTimer, ReturnValue) == 0x000000, "Member 'GameSequenceWork_GetSearchSquadTimer::ReturnValue' has a wrong offset!");

// Function GameModule.GameSequenceWork.GetSelectGuildId
// 0x0010 (0x0010 - 0x0000)
struct GameSequenceWork_GetSelectGuildId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_GetSelectGuildId) == 0x000008, "Wrong alignment on GameSequenceWork_GetSelectGuildId");
static_assert(sizeof(GameSequenceWork_GetSelectGuildId) == 0x000010, "Wrong size on GameSequenceWork_GetSelectGuildId");
static_assert(offsetof(GameSequenceWork_GetSelectGuildId, ReturnValue) == 0x000000, "Member 'GameSequenceWork_GetSelectGuildId::ReturnValue' has a wrong offset!");

// Function GameModule.GameSequenceWork.GetSequenceTimer
// 0x0004 (0x0004 - 0x0000)
struct GameSequenceWork_GetSequenceTimer final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_GetSequenceTimer) == 0x000004, "Wrong alignment on GameSequenceWork_GetSequenceTimer");
static_assert(sizeof(GameSequenceWork_GetSequenceTimer) == 0x000004, "Wrong size on GameSequenceWork_GetSequenceTimer");
static_assert(offsetof(GameSequenceWork_GetSequenceTimer, ReturnValue) == 0x000000, "Member 'GameSequenceWork_GetSequenceTimer::ReturnValue' has a wrong offset!");

// Function GameModule.GameSequenceWork.GetSkillVariationCodeMap
// 0x0050 (0x0050 - 0x0000)
struct GameSequenceWork_GetSkillVariationCodeMap final
{
public:
	TMap<ECharacterId, int32>                     ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_GetSkillVariationCodeMap) == 0x000008, "Wrong alignment on GameSequenceWork_GetSkillVariationCodeMap");
static_assert(sizeof(GameSequenceWork_GetSkillVariationCodeMap) == 0x000050, "Wrong size on GameSequenceWork_GetSkillVariationCodeMap");
static_assert(offsetof(GameSequenceWork_GetSkillVariationCodeMap, ReturnValue) == 0x000000, "Member 'GameSequenceWork_GetSkillVariationCodeMap::ReturnValue' has a wrong offset!");

// Function GameModule.GameSequenceWork.IsOutGame
// 0x0001 (0x0001 - 0x0000)
struct GameSequenceWork_IsOutGame final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSequenceWork_IsOutGame) == 0x000001, "Wrong alignment on GameSequenceWork_IsOutGame");
static_assert(sizeof(GameSequenceWork_IsOutGame) == 0x000001, "Wrong size on GameSequenceWork_IsOutGame");
static_assert(offsetof(GameSequenceWork_IsOutGame, ReturnValue) == 0x000000, "Member 'GameSequenceWork_IsOutGame::ReturnValue' has a wrong offset!");

// Function GameModule.GameStatics.DebugDrawText2D
// 0x0030 (0x0030 - 0x0000)
struct GameStatics_DebugDrawText2D final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPosX;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPosY;                                            // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InText;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InColor;                                           // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStatics_DebugDrawText2D) == 0x000008, "Wrong alignment on GameStatics_DebugDrawText2D");
static_assert(sizeof(GameStatics_DebugDrawText2D) == 0x000030, "Wrong size on GameStatics_DebugDrawText2D");
static_assert(offsetof(GameStatics_DebugDrawText2D, WorldContextObject) == 0x000000, "Member 'GameStatics_DebugDrawText2D::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameStatics_DebugDrawText2D, InPosX) == 0x000008, "Member 'GameStatics_DebugDrawText2D::InPosX' has a wrong offset!");
static_assert(offsetof(GameStatics_DebugDrawText2D, InPosY) == 0x00000C, "Member 'GameStatics_DebugDrawText2D::InPosY' has a wrong offset!");
static_assert(offsetof(GameStatics_DebugDrawText2D, InText) == 0x000010, "Member 'GameStatics_DebugDrawText2D::InText' has a wrong offset!");
static_assert(offsetof(GameStatics_DebugDrawText2D, InColor) == 0x000020, "Member 'GameStatics_DebugDrawText2D::InColor' has a wrong offset!");

// Function GameModule.GameStatics.DebugDrawText2DF
// 0x0030 (0x0030 - 0x0000)
struct GameStatics_DebugDrawText2DF final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPosX;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPosY;                                            // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InText;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InColor;                                           // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStatics_DebugDrawText2DF) == 0x000008, "Wrong alignment on GameStatics_DebugDrawText2DF");
static_assert(sizeof(GameStatics_DebugDrawText2DF) == 0x000030, "Wrong size on GameStatics_DebugDrawText2DF");
static_assert(offsetof(GameStatics_DebugDrawText2DF, WorldContextObject) == 0x000000, "Member 'GameStatics_DebugDrawText2DF::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameStatics_DebugDrawText2DF, InPosX) == 0x000008, "Member 'GameStatics_DebugDrawText2DF::InPosX' has a wrong offset!");
static_assert(offsetof(GameStatics_DebugDrawText2DF, InPosY) == 0x00000C, "Member 'GameStatics_DebugDrawText2DF::InPosY' has a wrong offset!");
static_assert(offsetof(GameStatics_DebugDrawText2DF, InText) == 0x000010, "Member 'GameStatics_DebugDrawText2DF::InText' has a wrong offset!");
static_assert(offsetof(GameStatics_DebugDrawText2DF, InColor) == 0x000020, "Member 'GameStatics_DebugDrawText2DF::InColor' has a wrong offset!");

// Function GameModule.GameStatics.GetCurrentStageId
// 0x0010 (0x0010 - 0x0000)
struct GameStatics_GetCurrentStageId final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStageId                                      ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameStatics_GetCurrentStageId) == 0x000008, "Wrong alignment on GameStatics_GetCurrentStageId");
static_assert(sizeof(GameStatics_GetCurrentStageId) == 0x000010, "Wrong size on GameStatics_GetCurrentStageId");
static_assert(offsetof(GameStatics_GetCurrentStageId, WorldContextObject) == 0x000000, "Member 'GameStatics_GetCurrentStageId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameStatics_GetCurrentStageId, ReturnValue) == 0x000008, "Member 'GameStatics_GetCurrentStageId::ReturnValue' has a wrong offset!");

// Function GameModule.GameStatics.GetCurrentStageIdAsInt
// 0x0010 (0x0010 - 0x0000)
struct GameStatics_GetCurrentStageIdAsInt final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameStatics_GetCurrentStageIdAsInt) == 0x000008, "Wrong alignment on GameStatics_GetCurrentStageIdAsInt");
static_assert(sizeof(GameStatics_GetCurrentStageIdAsInt) == 0x000010, "Wrong size on GameStatics_GetCurrentStageIdAsInt");
static_assert(offsetof(GameStatics_GetCurrentStageIdAsInt, WorldContextObject) == 0x000000, "Member 'GameStatics_GetCurrentStageIdAsInt::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameStatics_GetCurrentStageIdAsInt, ReturnValue) == 0x000008, "Member 'GameStatics_GetCurrentStageIdAsInt::ReturnValue' has a wrong offset!");

// Function GameModule.GameStatics.GetCurrentStageIdAsString
// 0x0018 (0x0018 - 0x0000)
struct GameStatics_GetCurrentStageIdAsString final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStatics_GetCurrentStageIdAsString) == 0x000008, "Wrong alignment on GameStatics_GetCurrentStageIdAsString");
static_assert(sizeof(GameStatics_GetCurrentStageIdAsString) == 0x000018, "Wrong size on GameStatics_GetCurrentStageIdAsString");
static_assert(offsetof(GameStatics_GetCurrentStageIdAsString, WorldContextObject) == 0x000000, "Member 'GameStatics_GetCurrentStageIdAsString::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameStatics_GetCurrentStageIdAsString, ReturnValue) == 0x000008, "Member 'GameStatics_GetCurrentStageIdAsString::ReturnValue' has a wrong offset!");

// Function GameModule.GameStatics.IsAutoPlayMode
// 0x0010 (0x0010 - 0x0000)
struct GameStatics_IsAutoPlayMode final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameStatics_IsAutoPlayMode) == 0x000008, "Wrong alignment on GameStatics_IsAutoPlayMode");
static_assert(sizeof(GameStatics_IsAutoPlayMode) == 0x000010, "Wrong size on GameStatics_IsAutoPlayMode");
static_assert(offsetof(GameStatics_IsAutoPlayMode, WorldContextObject) == 0x000000, "Member 'GameStatics_IsAutoPlayMode::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameStatics_IsAutoPlayMode, ReturnValue) == 0x000008, "Member 'GameStatics_IsAutoPlayMode::ReturnValue' has a wrong offset!");

// Function GameModule.GashaDatabaseWork.BP_EntryGashaParam
// 0x000C (0x000C - 0x0000)
struct GashaDatabaseWork_BP_EntryGashaParam final
{
public:
	int32                                         GashaIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PaymentIndex;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GashaDatabaseWork_BP_EntryGashaParam) == 0x000004, "Wrong alignment on GashaDatabaseWork_BP_EntryGashaParam");
static_assert(sizeof(GashaDatabaseWork_BP_EntryGashaParam) == 0x00000C, "Wrong size on GashaDatabaseWork_BP_EntryGashaParam");
static_assert(offsetof(GashaDatabaseWork_BP_EntryGashaParam, GashaIndex) == 0x000000, "Member 'GashaDatabaseWork_BP_EntryGashaParam::GashaIndex' has a wrong offset!");
static_assert(offsetof(GashaDatabaseWork_BP_EntryGashaParam, PaymentIndex) == 0x000004, "Member 'GashaDatabaseWork_BP_EntryGashaParam::PaymentIndex' has a wrong offset!");
static_assert(offsetof(GashaDatabaseWork_BP_EntryGashaParam, ReturnValue) == 0x000008, "Member 'GashaDatabaseWork_BP_EntryGashaParam::ReturnValue' has a wrong offset!");

// Function GameModule.GashaDatabaseWork.BP_GetActiveGashaCode
// 0x0004 (0x0004 - 0x0000)
struct GashaDatabaseWork_BP_GetActiveGashaCode final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaDatabaseWork_BP_GetActiveGashaCode) == 0x000004, "Wrong alignment on GashaDatabaseWork_BP_GetActiveGashaCode");
static_assert(sizeof(GashaDatabaseWork_BP_GetActiveGashaCode) == 0x000004, "Wrong size on GashaDatabaseWork_BP_GetActiveGashaCode");
static_assert(offsetof(GashaDatabaseWork_BP_GetActiveGashaCode, ReturnValue) == 0x000000, "Member 'GashaDatabaseWork_BP_GetActiveGashaCode::ReturnValue' has a wrong offset!");

// Function GameModule.GashaDatabaseWork.BP_GetEntryNotes
// 0x0018 (0x0018 - 0x0000)
struct GashaDatabaseWork_BP_GetEntryNotes final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaDatabaseWork_BP_GetEntryNotes) == 0x000008, "Wrong alignment on GashaDatabaseWork_BP_GetEntryNotes");
static_assert(sizeof(GashaDatabaseWork_BP_GetEntryNotes) == 0x000018, "Wrong size on GashaDatabaseWork_BP_GetEntryNotes");
static_assert(offsetof(GashaDatabaseWork_BP_GetEntryNotes, ReturnValue) == 0x000000, "Member 'GashaDatabaseWork_BP_GetEntryNotes::ReturnValue' has a wrong offset!");

// Function GameModule.GashaDatabaseWork.BP_GetGashaBannerPaperSprites
// 0x0018 (0x0018 - 0x0000)
struct GashaDatabaseWork_BP_GetGashaBannerPaperSprites final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           PBanner;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPaperSprite*                           PLogo;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaDatabaseWork_BP_GetGashaBannerPaperSprites) == 0x000008, "Wrong alignment on GashaDatabaseWork_BP_GetGashaBannerPaperSprites");
static_assert(sizeof(GashaDatabaseWork_BP_GetGashaBannerPaperSprites) == 0x000018, "Wrong size on GashaDatabaseWork_BP_GetGashaBannerPaperSprites");
static_assert(offsetof(GashaDatabaseWork_BP_GetGashaBannerPaperSprites, Code) == 0x000000, "Member 'GashaDatabaseWork_BP_GetGashaBannerPaperSprites::Code' has a wrong offset!");
static_assert(offsetof(GashaDatabaseWork_BP_GetGashaBannerPaperSprites, PBanner) == 0x000008, "Member 'GashaDatabaseWork_BP_GetGashaBannerPaperSprites::PBanner' has a wrong offset!");
static_assert(offsetof(GashaDatabaseWork_BP_GetGashaBannerPaperSprites, PLogo) == 0x000010, "Member 'GashaDatabaseWork_BP_GetGashaBannerPaperSprites::PLogo' has a wrong offset!");

// Function GameModule.GashaDatabaseWork.BP_GetGashaBoxTopRarity
// 0x0001 (0x0001 - 0x0000)
struct GashaDatabaseWork_BP_GetGashaBoxTopRarity final
{
public:
	EMdRarity                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaDatabaseWork_BP_GetGashaBoxTopRarity) == 0x000001, "Wrong alignment on GashaDatabaseWork_BP_GetGashaBoxTopRarity");
static_assert(sizeof(GashaDatabaseWork_BP_GetGashaBoxTopRarity) == 0x000001, "Wrong size on GashaDatabaseWork_BP_GetGashaBoxTopRarity");
static_assert(offsetof(GashaDatabaseWork_BP_GetGashaBoxTopRarity, ReturnValue) == 0x000000, "Member 'GashaDatabaseWork_BP_GetGashaBoxTopRarity::ReturnValue' has a wrong offset!");

// Function GameModule.GashaDatabaseWork.BP_GetGashaCostumeImageFromItemCode
// 0x0010 (0x0010 - 0x0000)
struct GashaDatabaseWork_BP_GetGashaCostumeImageFromItemCode final
{
public:
	int32                                         ItemCode;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGashaImageSizeType                           SizeType;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaDatabaseWork_BP_GetGashaCostumeImageFromItemCode) == 0x000008, "Wrong alignment on GashaDatabaseWork_BP_GetGashaCostumeImageFromItemCode");
static_assert(sizeof(GashaDatabaseWork_BP_GetGashaCostumeImageFromItemCode) == 0x000010, "Wrong size on GashaDatabaseWork_BP_GetGashaCostumeImageFromItemCode");
static_assert(offsetof(GashaDatabaseWork_BP_GetGashaCostumeImageFromItemCode, ItemCode) == 0x000000, "Member 'GashaDatabaseWork_BP_GetGashaCostumeImageFromItemCode::ItemCode' has a wrong offset!");
static_assert(offsetof(GashaDatabaseWork_BP_GetGashaCostumeImageFromItemCode, SizeType) == 0x000004, "Member 'GashaDatabaseWork_BP_GetGashaCostumeImageFromItemCode::SizeType' has a wrong offset!");
static_assert(offsetof(GashaDatabaseWork_BP_GetGashaCostumeImageFromItemCode, ReturnValue) == 0x000008, "Member 'GashaDatabaseWork_BP_GetGashaCostumeImageFromItemCode::ReturnValue' has a wrong offset!");

// Function GameModule.GashaDatabaseWork.BP_GetGashaCurrencyImage
// 0x0010 (0x0010 - 0x0000)
struct GashaDatabaseWork_BP_GetGashaCurrencyImage final
{
public:
	int32                                         ItemCode;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGashaImageSizeType                           SizeType;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaDatabaseWork_BP_GetGashaCurrencyImage) == 0x000008, "Wrong alignment on GashaDatabaseWork_BP_GetGashaCurrencyImage");
static_assert(sizeof(GashaDatabaseWork_BP_GetGashaCurrencyImage) == 0x000010, "Wrong size on GashaDatabaseWork_BP_GetGashaCurrencyImage");
static_assert(offsetof(GashaDatabaseWork_BP_GetGashaCurrencyImage, ItemCode) == 0x000000, "Member 'GashaDatabaseWork_BP_GetGashaCurrencyImage::ItemCode' has a wrong offset!");
static_assert(offsetof(GashaDatabaseWork_BP_GetGashaCurrencyImage, SizeType) == 0x000004, "Member 'GashaDatabaseWork_BP_GetGashaCurrencyImage::SizeType' has a wrong offset!");
static_assert(offsetof(GashaDatabaseWork_BP_GetGashaCurrencyImage, ReturnValue) == 0x000008, "Member 'GashaDatabaseWork_BP_GetGashaCurrencyImage::ReturnValue' has a wrong offset!");

// Function GameModule.GashaDatabaseWork.BP_GetGashaEmoteImageFromCharacterId
// 0x0010 (0x0010 - 0x0000)
struct GashaDatabaseWork_BP_GetGashaEmoteImageFromCharacterId final
{
public:
	int32                                         ItemCode;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGashaImageSizeType                           SizeType;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaDatabaseWork_BP_GetGashaEmoteImageFromCharacterId) == 0x000008, "Wrong alignment on GashaDatabaseWork_BP_GetGashaEmoteImageFromCharacterId");
static_assert(sizeof(GashaDatabaseWork_BP_GetGashaEmoteImageFromCharacterId) == 0x000010, "Wrong size on GashaDatabaseWork_BP_GetGashaEmoteImageFromCharacterId");
static_assert(offsetof(GashaDatabaseWork_BP_GetGashaEmoteImageFromCharacterId, ItemCode) == 0x000000, "Member 'GashaDatabaseWork_BP_GetGashaEmoteImageFromCharacterId::ItemCode' has a wrong offset!");
static_assert(offsetof(GashaDatabaseWork_BP_GetGashaEmoteImageFromCharacterId, SizeType) == 0x000004, "Member 'GashaDatabaseWork_BP_GetGashaEmoteImageFromCharacterId::SizeType' has a wrong offset!");
static_assert(offsetof(GashaDatabaseWork_BP_GetGashaEmoteImageFromCharacterId, ReturnValue) == 0x000008, "Member 'GashaDatabaseWork_BP_GetGashaEmoteImageFromCharacterId::ReturnValue' has a wrong offset!");

// Function GameModule.GashaDatabaseWork.BP_GetGashaIndex
// 0x0004 (0x0004 - 0x0000)
struct GashaDatabaseWork_BP_GetGashaIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaDatabaseWork_BP_GetGashaIndex) == 0x000004, "Wrong alignment on GashaDatabaseWork_BP_GetGashaIndex");
static_assert(sizeof(GashaDatabaseWork_BP_GetGashaIndex) == 0x000004, "Wrong size on GashaDatabaseWork_BP_GetGashaIndex");
static_assert(offsetof(GashaDatabaseWork_BP_GetGashaIndex, ReturnValue) == 0x000000, "Member 'GashaDatabaseWork_BP_GetGashaIndex::ReturnValue' has a wrong offset!");

// Function GameModule.GashaDatabaseWork.BP_GetGashaNum
// 0x0004 (0x0004 - 0x0000)
struct GashaDatabaseWork_BP_GetGashaNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaDatabaseWork_BP_GetGashaNum) == 0x000004, "Wrong alignment on GashaDatabaseWork_BP_GetGashaNum");
static_assert(sizeof(GashaDatabaseWork_BP_GetGashaNum) == 0x000004, "Wrong size on GashaDatabaseWork_BP_GetGashaNum");
static_assert(offsetof(GashaDatabaseWork_BP_GetGashaNum, ReturnValue) == 0x000000, "Member 'GashaDatabaseWork_BP_GetGashaNum::ReturnValue' has a wrong offset!");

// Function GameModule.GashaDatabaseWork.BP_GetGashaResultData
// 0x001C (0x001C - 0x0000)
struct GashaDatabaseWork_BP_GetGashaResultData final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGashaResultData                       ReturnValue;                                       // 0x0004(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaDatabaseWork_BP_GetGashaResultData) == 0x000004, "Wrong alignment on GashaDatabaseWork_BP_GetGashaResultData");
static_assert(sizeof(GashaDatabaseWork_BP_GetGashaResultData) == 0x00001C, "Wrong size on GashaDatabaseWork_BP_GetGashaResultData");
static_assert(offsetof(GashaDatabaseWork_BP_GetGashaResultData, Index_0) == 0x000000, "Member 'GashaDatabaseWork_BP_GetGashaResultData::Index_0' has a wrong offset!");
static_assert(offsetof(GashaDatabaseWork_BP_GetGashaResultData, ReturnValue) == 0x000004, "Member 'GashaDatabaseWork_BP_GetGashaResultData::ReturnValue' has a wrong offset!");

// Function GameModule.GashaDatabaseWork.BP_GetGashaSkipFlg
// 0x0001 (0x0001 - 0x0000)
struct GashaDatabaseWork_BP_GetGashaSkipFlg final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaDatabaseWork_BP_GetGashaSkipFlg) == 0x000001, "Wrong alignment on GashaDatabaseWork_BP_GetGashaSkipFlg");
static_assert(sizeof(GashaDatabaseWork_BP_GetGashaSkipFlg) == 0x000001, "Wrong size on GashaDatabaseWork_BP_GetGashaSkipFlg");
static_assert(offsetof(GashaDatabaseWork_BP_GetGashaSkipFlg, ReturnValue) == 0x000000, "Member 'GashaDatabaseWork_BP_GetGashaSkipFlg::ReturnValue' has a wrong offset!");

// Function GameModule.GashaDatabaseWork.BP_GetGashaTopRarity
// 0x0001 (0x0001 - 0x0000)
struct GashaDatabaseWork_BP_GetGashaTopRarity final
{
public:
	EMdRarity                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaDatabaseWork_BP_GetGashaTopRarity) == 0x000001, "Wrong alignment on GashaDatabaseWork_BP_GetGashaTopRarity");
static_assert(sizeof(GashaDatabaseWork_BP_GetGashaTopRarity) == 0x000001, "Wrong size on GashaDatabaseWork_BP_GetGashaTopRarity");
static_assert(offsetof(GashaDatabaseWork_BP_GetGashaTopRarity, ReturnValue) == 0x000000, "Member 'GashaDatabaseWork_BP_GetGashaTopRarity::ReturnValue' has a wrong offset!");

// Function GameModule.GashaDatabaseWork.BP_GetGashaVoiceImageFromCharacterId
// 0x0010 (0x0010 - 0x0000)
struct GashaDatabaseWork_BP_GetGashaVoiceImageFromCharacterId final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsIcon;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaDatabaseWork_BP_GetGashaVoiceImageFromCharacterId) == 0x000008, "Wrong alignment on GashaDatabaseWork_BP_GetGashaVoiceImageFromCharacterId");
static_assert(sizeof(GashaDatabaseWork_BP_GetGashaVoiceImageFromCharacterId) == 0x000010, "Wrong size on GashaDatabaseWork_BP_GetGashaVoiceImageFromCharacterId");
static_assert(offsetof(GashaDatabaseWork_BP_GetGashaVoiceImageFromCharacterId, CharacterId) == 0x000000, "Member 'GashaDatabaseWork_BP_GetGashaVoiceImageFromCharacterId::CharacterId' has a wrong offset!");
static_assert(offsetof(GashaDatabaseWork_BP_GetGashaVoiceImageFromCharacterId, IsIcon) == 0x000001, "Member 'GashaDatabaseWork_BP_GetGashaVoiceImageFromCharacterId::IsIcon' has a wrong offset!");
static_assert(offsetof(GashaDatabaseWork_BP_GetGashaVoiceImageFromCharacterId, ReturnValue) == 0x000008, "Member 'GashaDatabaseWork_BP_GetGashaVoiceImageFromCharacterId::ReturnValue' has a wrong offset!");

// Function GameModule.GashaDatabaseWork.BP_GetLawType
// 0x0001 (0x0001 - 0x0000)
struct GashaDatabaseWork_BP_GetLawType final
{
public:
	EGashaLawType                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaDatabaseWork_BP_GetLawType) == 0x000001, "Wrong alignment on GashaDatabaseWork_BP_GetLawType");
static_assert(sizeof(GashaDatabaseWork_BP_GetLawType) == 0x000001, "Wrong size on GashaDatabaseWork_BP_GetLawType");
static_assert(offsetof(GashaDatabaseWork_BP_GetLawType, ReturnValue) == 0x000000, "Member 'GashaDatabaseWork_BP_GetLawType::ReturnValue' has a wrong offset!");

// Function GameModule.GashaDatabaseWork.BP_GetPaperSpriteSize
// 0x0010 (0x0010 - 0x0000)
struct GashaDatabaseWork_BP_GetPaperSpriteSize final
{
public:
	class UPaperSprite*                           Sprite;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaDatabaseWork_BP_GetPaperSpriteSize) == 0x000008, "Wrong alignment on GashaDatabaseWork_BP_GetPaperSpriteSize");
static_assert(sizeof(GashaDatabaseWork_BP_GetPaperSpriteSize) == 0x000010, "Wrong size on GashaDatabaseWork_BP_GetPaperSpriteSize");
static_assert(offsetof(GashaDatabaseWork_BP_GetPaperSpriteSize, Sprite) == 0x000000, "Member 'GashaDatabaseWork_BP_GetPaperSpriteSize::Sprite' has a wrong offset!");
static_assert(offsetof(GashaDatabaseWork_BP_GetPaperSpriteSize, ReturnValue) == 0x000008, "Member 'GashaDatabaseWork_BP_GetPaperSpriteSize::ReturnValue' has a wrong offset!");

// Function GameModule.GashaDatabaseWork.BP_GetSequencerSkipFrame
// 0x0004 (0x0004 - 0x0000)
struct GashaDatabaseWork_BP_GetSequencerSkipFrame final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaDatabaseWork_BP_GetSequencerSkipFrame) == 0x000004, "Wrong alignment on GashaDatabaseWork_BP_GetSequencerSkipFrame");
static_assert(sizeof(GashaDatabaseWork_BP_GetSequencerSkipFrame) == 0x000004, "Wrong size on GashaDatabaseWork_BP_GetSequencerSkipFrame");
static_assert(offsetof(GashaDatabaseWork_BP_GetSequencerSkipFrame, ReturnValue) == 0x000000, "Member 'GashaDatabaseWork_BP_GetSequencerSkipFrame::ReturnValue' has a wrong offset!");

// Function GameModule.GashaDatabaseWork.BP_PlayGashaSuggestVoice
// 0x0008 (0x0008 - 0x0000)
struct GashaDatabaseWork_BP_PlayGashaSuggestVoice final
{
public:
	class UAtomComponent*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaDatabaseWork_BP_PlayGashaSuggestVoice) == 0x000008, "Wrong alignment on GashaDatabaseWork_BP_PlayGashaSuggestVoice");
static_assert(sizeof(GashaDatabaseWork_BP_PlayGashaSuggestVoice) == 0x000008, "Wrong size on GashaDatabaseWork_BP_PlayGashaSuggestVoice");
static_assert(offsetof(GashaDatabaseWork_BP_PlayGashaSuggestVoice, ReturnValue) == 0x000000, "Member 'GashaDatabaseWork_BP_PlayGashaSuggestVoice::ReturnValue' has a wrong offset!");

// Function GameModule.GashaDatabaseWork.BP_SetGashaSkipFlg
// 0x0001 (0x0001 - 0x0000)
struct GashaDatabaseWork_BP_SetGashaSkipFlg final
{
public:
	bool                                          IsSkip;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaDatabaseWork_BP_SetGashaSkipFlg) == 0x000001, "Wrong alignment on GashaDatabaseWork_BP_SetGashaSkipFlg");
static_assert(sizeof(GashaDatabaseWork_BP_SetGashaSkipFlg) == 0x000001, "Wrong size on GashaDatabaseWork_BP_SetGashaSkipFlg");
static_assert(offsetof(GashaDatabaseWork_BP_SetGashaSkipFlg, IsSkip) == 0x000000, "Member 'GashaDatabaseWork_BP_SetGashaSkipFlg::IsSkip' has a wrong offset!");

// Function GameModule.GashaDatabaseWork.BP_SetLawType
// 0x0001 (0x0001 - 0x0000)
struct GashaDatabaseWork_BP_SetLawType final
{
public:
	EGashaLawType                                 LawType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaDatabaseWork_BP_SetLawType) == 0x000001, "Wrong alignment on GashaDatabaseWork_BP_SetLawType");
static_assert(sizeof(GashaDatabaseWork_BP_SetLawType) == 0x000001, "Wrong size on GashaDatabaseWork_BP_SetLawType");
static_assert(offsetof(GashaDatabaseWork_BP_SetLawType, LawType) == 0x000000, "Member 'GashaDatabaseWork_BP_SetLawType::LawType' has a wrong offset!");

// Function GameModule.GashaDatabaseWork.BP_SetSequencerSkipFrame
// 0x0004 (0x0004 - 0x0000)
struct GashaDatabaseWork_BP_SetSequencerSkipFrame final
{
public:
	int32                                         Frame;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaDatabaseWork_BP_SetSequencerSkipFrame) == 0x000004, "Wrong alignment on GashaDatabaseWork_BP_SetSequencerSkipFrame");
static_assert(sizeof(GashaDatabaseWork_BP_SetSequencerSkipFrame) == 0x000004, "Wrong size on GashaDatabaseWork_BP_SetSequencerSkipFrame");
static_assert(offsetof(GashaDatabaseWork_BP_SetSequencerSkipFrame, Frame) == 0x000000, "Member 'GashaDatabaseWork_BP_SetSequencerSkipFrame::Frame' has a wrong offset!");

// Function GameModule.GashaDatabaseWork.ConfirmRetryGashaComplete
// 0x0004 (0x0004 - 0x0000)
struct GashaDatabaseWork_ConfirmRetryGashaComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaDatabaseWork_ConfirmRetryGashaComplete) == 0x000004, "Wrong alignment on GashaDatabaseWork_ConfirmRetryGashaComplete");
static_assert(sizeof(GashaDatabaseWork_ConfirmRetryGashaComplete) == 0x000004, "Wrong size on GashaDatabaseWork_ConfirmRetryGashaComplete");
static_assert(offsetof(GashaDatabaseWork_ConfirmRetryGashaComplete, RequestId) == 0x000000, "Member 'GashaDatabaseWork_ConfirmRetryGashaComplete::RequestId' has a wrong offset!");

// Function GameModule.GashaDatabaseWork.DebugRunGashaLoadComplete
// 0x0004 (0x0004 - 0x0000)
struct GashaDatabaseWork_DebugRunGashaLoadComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaDatabaseWork_DebugRunGashaLoadComplete) == 0x000004, "Wrong alignment on GashaDatabaseWork_DebugRunGashaLoadComplete");
static_assert(sizeof(GashaDatabaseWork_DebugRunGashaLoadComplete) == 0x000004, "Wrong size on GashaDatabaseWork_DebugRunGashaLoadComplete");
static_assert(offsetof(GashaDatabaseWork_DebugRunGashaLoadComplete, RequestId) == 0x000000, "Member 'GashaDatabaseWork_DebugRunGashaLoadComplete::RequestId' has a wrong offset!");

// Function GameModule.GashaDatabaseWork.ExChangeListLoadComplete
// 0x0004 (0x0004 - 0x0000)
struct GashaDatabaseWork_ExChangeListLoadComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaDatabaseWork_ExChangeListLoadComplete) == 0x000004, "Wrong alignment on GashaDatabaseWork_ExChangeListLoadComplete");
static_assert(sizeof(GashaDatabaseWork_ExChangeListLoadComplete) == 0x000004, "Wrong size on GashaDatabaseWork_ExChangeListLoadComplete");
static_assert(offsetof(GashaDatabaseWork_ExChangeListLoadComplete, RequestId) == 0x000000, "Member 'GashaDatabaseWork_ExChangeListLoadComplete::RequestId' has a wrong offset!");

// Function GameModule.GashaDatabaseWork.ExChangeLoadComplete
// 0x0004 (0x0004 - 0x0000)
struct GashaDatabaseWork_ExChangeLoadComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaDatabaseWork_ExChangeLoadComplete) == 0x000004, "Wrong alignment on GashaDatabaseWork_ExChangeLoadComplete");
static_assert(sizeof(GashaDatabaseWork_ExChangeLoadComplete) == 0x000004, "Wrong size on GashaDatabaseWork_ExChangeLoadComplete");
static_assert(offsetof(GashaDatabaseWork_ExChangeLoadComplete, RequestId) == 0x000000, "Member 'GashaDatabaseWork_ExChangeLoadComplete::RequestId' has a wrong offset!");

// Function GameModule.GashaDatabaseWork.GashaListLoadComplete
// 0x0004 (0x0004 - 0x0000)
struct GashaDatabaseWork_GashaListLoadComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaDatabaseWork_GashaListLoadComplete) == 0x000004, "Wrong alignment on GashaDatabaseWork_GashaListLoadComplete");
static_assert(sizeof(GashaDatabaseWork_GashaListLoadComplete) == 0x000004, "Wrong size on GashaDatabaseWork_GashaListLoadComplete");
static_assert(offsetof(GashaDatabaseWork_GashaListLoadComplete, RequestId) == 0x000000, "Member 'GashaDatabaseWork_GashaListLoadComplete::RequestId' has a wrong offset!");

// Function GameModule.GashaDatabaseWork.OfferRatioLoadComplete
// 0x0004 (0x0004 - 0x0000)
struct GashaDatabaseWork_OfferRatioLoadComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaDatabaseWork_OfferRatioLoadComplete) == 0x000004, "Wrong alignment on GashaDatabaseWork_OfferRatioLoadComplete");
static_assert(sizeof(GashaDatabaseWork_OfferRatioLoadComplete) == 0x000004, "Wrong size on GashaDatabaseWork_OfferRatioLoadComplete");
static_assert(offsetof(GashaDatabaseWork_OfferRatioLoadComplete, RequestId) == 0x000000, "Member 'GashaDatabaseWork_OfferRatioLoadComplete::RequestId' has a wrong offset!");

// Function GameModule.GashaDatabaseWork.OnLoadedImage
// 0x0008 (0x0008 - 0x0000)
struct GashaDatabaseWork_OnLoadedImage final
{
public:
	class UPaperSprite*                           Sprite;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaDatabaseWork_OnLoadedImage) == 0x000008, "Wrong alignment on GashaDatabaseWork_OnLoadedImage");
static_assert(sizeof(GashaDatabaseWork_OnLoadedImage) == 0x000008, "Wrong size on GashaDatabaseWork_OnLoadedImage");
static_assert(offsetof(GashaDatabaseWork_OnLoadedImage, Sprite) == 0x000000, "Member 'GashaDatabaseWork_OnLoadedImage::Sprite' has a wrong offset!");

// Function GameModule.GashaDatabaseWork.RunGashaLoadComplete
// 0x0004 (0x0004 - 0x0000)
struct GashaDatabaseWork_RunGashaLoadComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaDatabaseWork_RunGashaLoadComplete) == 0x000004, "Wrong alignment on GashaDatabaseWork_RunGashaLoadComplete");
static_assert(sizeof(GashaDatabaseWork_RunGashaLoadComplete) == 0x000004, "Wrong size on GashaDatabaseWork_RunGashaLoadComplete");
static_assert(offsetof(GashaDatabaseWork_RunGashaLoadComplete, RequestId) == 0x000000, "Member 'GashaDatabaseWork_RunGashaLoadComplete::RequestId' has a wrong offset!");

// Function GameModule.GashaDatabaseWork.RunGashaLoadError
// 0x0014 (0x0014 - 0x0000)
struct GashaDatabaseWork_RunGashaLoadError final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Message;                                           // 0x000C(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GashaDatabaseWork_RunGashaLoadError) == 0x000004, "Wrong alignment on GashaDatabaseWork_RunGashaLoadError");
static_assert(sizeof(GashaDatabaseWork_RunGashaLoadError) == 0x000014, "Wrong size on GashaDatabaseWork_RunGashaLoadError");
static_assert(offsetof(GashaDatabaseWork_RunGashaLoadError, RequestId) == 0x000000, "Member 'GashaDatabaseWork_RunGashaLoadError::RequestId' has a wrong offset!");
static_assert(offsetof(GashaDatabaseWork_RunGashaLoadError, Key) == 0x000004, "Member 'GashaDatabaseWork_RunGashaLoadError::Key' has a wrong offset!");
static_assert(offsetof(GashaDatabaseWork_RunGashaLoadError, Message) == 0x00000C, "Member 'GashaDatabaseWork_RunGashaLoadError::Message' has a wrong offset!");

// Function GameModule.GashaDatabaseWork.SetCharaImage
// 0x0018 (0x0018 - 0x0000)
struct GashaDatabaseWork_SetCharaImage final
{
public:
	class UImage*                                 Image;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdRarityItemCategory                         Category;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemCode;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSyncLoad;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGashaImageSizeType                           SizeType;                                          // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GashaDatabaseWork_SetCharaImage) == 0x000008, "Wrong alignment on GashaDatabaseWork_SetCharaImage");
static_assert(sizeof(GashaDatabaseWork_SetCharaImage) == 0x000018, "Wrong size on GashaDatabaseWork_SetCharaImage");
static_assert(offsetof(GashaDatabaseWork_SetCharaImage, Image) == 0x000000, "Member 'GashaDatabaseWork_SetCharaImage::Image' has a wrong offset!");
static_assert(offsetof(GashaDatabaseWork_SetCharaImage, Category) == 0x000008, "Member 'GashaDatabaseWork_SetCharaImage::Category' has a wrong offset!");
static_assert(offsetof(GashaDatabaseWork_SetCharaImage, ItemCode) == 0x00000C, "Member 'GashaDatabaseWork_SetCharaImage::ItemCode' has a wrong offset!");
static_assert(offsetof(GashaDatabaseWork_SetCharaImage, bSyncLoad) == 0x000010, "Member 'GashaDatabaseWork_SetCharaImage::bSyncLoad' has a wrong offset!");
static_assert(offsetof(GashaDatabaseWork_SetCharaImage, SizeType) == 0x000011, "Member 'GashaDatabaseWork_SetCharaImage::SizeType' has a wrong offset!");

// Function GameModule.HerovsControlChannel.OnErrorForDedicatedServer
// 0x0014 (0x0014 - 0x0000)
struct HerovsControlChannel_OnErrorForDedicatedServer final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Message;                                           // 0x000C(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HerovsControlChannel_OnErrorForDedicatedServer) == 0x000004, "Wrong alignment on HerovsControlChannel_OnErrorForDedicatedServer");
static_assert(sizeof(HerovsControlChannel_OnErrorForDedicatedServer) == 0x000014, "Wrong size on HerovsControlChannel_OnErrorForDedicatedServer");
static_assert(offsetof(HerovsControlChannel_OnErrorForDedicatedServer, RequestId) == 0x000000, "Member 'HerovsControlChannel_OnErrorForDedicatedServer::RequestId' has a wrong offset!");
static_assert(offsetof(HerovsControlChannel_OnErrorForDedicatedServer, Key) == 0x000004, "Member 'HerovsControlChannel_OnErrorForDedicatedServer::Key' has a wrong offset!");
static_assert(offsetof(HerovsControlChannel_OnErrorForDedicatedServer, Message) == 0x00000C, "Member 'HerovsControlChannel_OnErrorForDedicatedServer::Message' has a wrong offset!");

// Function GameModule.HerovsControlChannel.OnLoadedProfile
// 0x0004 (0x0004 - 0x0000)
struct HerovsControlChannel_OnLoadedProfile final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HerovsControlChannel_OnLoadedProfile) == 0x000004, "Wrong alignment on HerovsControlChannel_OnLoadedProfile");
static_assert(sizeof(HerovsControlChannel_OnLoadedProfile) == 0x000004, "Wrong size on HerovsControlChannel_OnLoadedProfile");
static_assert(offsetof(HerovsControlChannel_OnLoadedProfile, RequestId) == 0x000000, "Member 'HerovsControlChannel_OnLoadedProfile::RequestId' has a wrong offset!");

// Function GameModule.HerovsGameInstance.BP_GetDipSelectedLanguage
// 0x0010 (0x0010 - 0x0000)
struct HerovsGameInstance_BP_GetDipSelectedLanguage final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HerovsGameInstance_BP_GetDipSelectedLanguage) == 0x000008, "Wrong alignment on HerovsGameInstance_BP_GetDipSelectedLanguage");
static_assert(sizeof(HerovsGameInstance_BP_GetDipSelectedLanguage) == 0x000010, "Wrong size on HerovsGameInstance_BP_GetDipSelectedLanguage");
static_assert(offsetof(HerovsGameInstance_BP_GetDipSelectedLanguage, ReturnValue) == 0x000000, "Member 'HerovsGameInstance_BP_GetDipSelectedLanguage::ReturnValue' has a wrong offset!");

// Function GameModule.HerovsGameInstance.BP_OnChangeLanguage
// 0x0001 (0x0001 - 0x0000)
struct HerovsGameInstance_BP_OnChangeLanguage final
{
public:
	bool                                          bNext;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HerovsGameInstance_BP_OnChangeLanguage) == 0x000001, "Wrong alignment on HerovsGameInstance_BP_OnChangeLanguage");
static_assert(sizeof(HerovsGameInstance_BP_OnChangeLanguage) == 0x000001, "Wrong size on HerovsGameInstance_BP_OnChangeLanguage");
static_assert(offsetof(HerovsGameInstance_BP_OnChangeLanguage, bNext) == 0x000000, "Member 'HerovsGameInstance_BP_OnChangeLanguage::bNext' has a wrong offset!");

// DelegateFunction GameModule.HerovsGameInstance.OnChangeSteamOverrayActive__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct HerovsGameInstance_OnChangeSteamOverrayActive__DelegateSignature final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HerovsGameInstance_OnChangeSteamOverrayActive__DelegateSignature) == 0x000001, "Wrong alignment on HerovsGameInstance_OnChangeSteamOverrayActive__DelegateSignature");
static_assert(sizeof(HerovsGameInstance_OnChangeSteamOverrayActive__DelegateSignature) == 0x000001, "Wrong size on HerovsGameInstance_OnChangeSteamOverrayActive__DelegateSignature");
static_assert(offsetof(HerovsGameInstance_OnChangeSteamOverrayActive__DelegateSignature, bActive) == 0x000000, "Member 'HerovsGameInstance_OnChangeSteamOverrayActive__DelegateSignature::bActive' has a wrong offset!");

// Function GameModule.HerovsGameInstance.OnLoadCompleteConfirmPurchase
// 0x0004 (0x0004 - 0x0000)
struct HerovsGameInstance_OnLoadCompleteConfirmPurchase final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HerovsGameInstance_OnLoadCompleteConfirmPurchase) == 0x000004, "Wrong alignment on HerovsGameInstance_OnLoadCompleteConfirmPurchase");
static_assert(sizeof(HerovsGameInstance_OnLoadCompleteConfirmPurchase) == 0x000004, "Wrong size on HerovsGameInstance_OnLoadCompleteConfirmPurchase");
static_assert(offsetof(HerovsGameInstance_OnLoadCompleteConfirmPurchase, RequestId) == 0x000000, "Member 'HerovsGameInstance_OnLoadCompleteConfirmPurchase::RequestId' has a wrong offset!");

// Function GameModule.HerovsGameInstance.OnLoadCompletePurchaseStatus
// 0x0004 (0x0004 - 0x0000)
struct HerovsGameInstance_OnLoadCompletePurchaseStatus final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HerovsGameInstance_OnLoadCompletePurchaseStatus) == 0x000004, "Wrong alignment on HerovsGameInstance_OnLoadCompletePurchaseStatus");
static_assert(sizeof(HerovsGameInstance_OnLoadCompletePurchaseStatus) == 0x000004, "Wrong size on HerovsGameInstance_OnLoadCompletePurchaseStatus");
static_assert(offsetof(HerovsGameInstance_OnLoadCompletePurchaseStatus, RequestId) == 0x000000, "Member 'HerovsGameInstance_OnLoadCompletePurchaseStatus::RequestId' has a wrong offset!");

// Function GameModule.HerovsGameInstance.OnLoadCompleteStartPurchase
// 0x0004 (0x0004 - 0x0000)
struct HerovsGameInstance_OnLoadCompleteStartPurchase final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HerovsGameInstance_OnLoadCompleteStartPurchase) == 0x000004, "Wrong alignment on HerovsGameInstance_OnLoadCompleteStartPurchase");
static_assert(sizeof(HerovsGameInstance_OnLoadCompleteStartPurchase) == 0x000004, "Wrong size on HerovsGameInstance_OnLoadCompleteStartPurchase");
static_assert(offsetof(HerovsGameInstance_OnLoadCompleteStartPurchase, RequestId) == 0x000000, "Member 'HerovsGameInstance_OnLoadCompleteStartPurchase::RequestId' has a wrong offset!");

// DelegateFunction GameModule.HerovsGameInstance.OnMicroTxnAuthorizationResponse__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct HerovsGameInstance_OnMicroTxnAuthorizationResponse__DelegateSignature final
{
public:
	class FString                                 OrderId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAuthorized;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HerovsGameInstance_OnMicroTxnAuthorizationResponse__DelegateSignature) == 0x000008, "Wrong alignment on HerovsGameInstance_OnMicroTxnAuthorizationResponse__DelegateSignature");
static_assert(sizeof(HerovsGameInstance_OnMicroTxnAuthorizationResponse__DelegateSignature) == 0x000018, "Wrong size on HerovsGameInstance_OnMicroTxnAuthorizationResponse__DelegateSignature");
static_assert(offsetof(HerovsGameInstance_OnMicroTxnAuthorizationResponse__DelegateSignature, OrderId) == 0x000000, "Member 'HerovsGameInstance_OnMicroTxnAuthorizationResponse__DelegateSignature::OrderId' has a wrong offset!");
static_assert(offsetof(HerovsGameInstance_OnMicroTxnAuthorizationResponse__DelegateSignature, bAuthorized) == 0x000010, "Member 'HerovsGameInstance_OnMicroTxnAuthorizationResponse__DelegateSignature::bAuthorized' has a wrong offset!");

// Function GameModule.HerovsGameInstance.SetMatchingPlayerNum
// 0x0004 (0x0004 - 0x0000)
struct HerovsGameInstance_SetMatchingPlayerNum final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HerovsGameInstance_SetMatchingPlayerNum) == 0x000004, "Wrong alignment on HerovsGameInstance_SetMatchingPlayerNum");
static_assert(sizeof(HerovsGameInstance_SetMatchingPlayerNum) == 0x000004, "Wrong size on HerovsGameInstance_SetMatchingPlayerNum");
static_assert(offsetof(HerovsGameInstance_SetMatchingPlayerNum, Num) == 0x000000, "Member 'HerovsGameInstance_SetMatchingPlayerNum::Num' has a wrong offset!");

// Function GameModule.HerovsGameInstance.TestLoadPurchaseCatalog
// 0x0004 (0x0004 - 0x0000)
struct HerovsGameInstance_TestLoadPurchaseCatalog final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HerovsGameInstance_TestLoadPurchaseCatalog) == 0x000004, "Wrong alignment on HerovsGameInstance_TestLoadPurchaseCatalog");
static_assert(sizeof(HerovsGameInstance_TestLoadPurchaseCatalog) == 0x000004, "Wrong size on HerovsGameInstance_TestLoadPurchaseCatalog");
static_assert(offsetof(HerovsGameInstance_TestLoadPurchaseCatalog, RequestId) == 0x000000, "Member 'HerovsGameInstance_TestLoadPurchaseCatalog::RequestId' has a wrong offset!");

// Function GameModule.HerovsGameState.GetGameModeType
// 0x0001 (0x0001 - 0x0000)
struct HerovsGameState_GetGameModeType final
{
public:
	EGameModeType                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HerovsGameState_GetGameModeType) == 0x000001, "Wrong alignment on HerovsGameState_GetGameModeType");
static_assert(sizeof(HerovsGameState_GetGameModeType) == 0x000001, "Wrong size on HerovsGameState_GetGameModeType");
static_assert(offsetof(HerovsGameState_GetGameModeType, ReturnValue) == 0x000000, "Member 'HerovsGameState_GetGameModeType::ReturnValue' has a wrong offset!");

// Function GameModule.HerovsGameState.IsLocalCharacterReady
// 0x0001 (0x0001 - 0x0000)
struct HerovsGameState_IsLocalCharacterReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HerovsGameState_IsLocalCharacterReady) == 0x000001, "Wrong alignment on HerovsGameState_IsLocalCharacterReady");
static_assert(sizeof(HerovsGameState_IsLocalCharacterReady) == 0x000001, "Wrong size on HerovsGameState_IsLocalCharacterReady");
static_assert(offsetof(HerovsGameState_IsLocalCharacterReady, ReturnValue) == 0x000000, "Member 'HerovsGameState_IsLocalCharacterReady::ReturnValue' has a wrong offset!");

// Function GameModule.HerovsPlayerState.BP_SetIsKing
// 0x0001 (0x0001 - 0x0000)
struct HerovsPlayerState_BP_SetIsKing final
{
public:
	bool                                          bKing;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HerovsPlayerState_BP_SetIsKing) == 0x000001, "Wrong alignment on HerovsPlayerState_BP_SetIsKing");
static_assert(sizeof(HerovsPlayerState_BP_SetIsKing) == 0x000001, "Wrong size on HerovsPlayerState_BP_SetIsKing");
static_assert(offsetof(HerovsPlayerState_BP_SetIsKing, bKing) == 0x000000, "Member 'HerovsPlayerState_BP_SetIsKing::bKing' has a wrong offset!");

// Function GameModule.HerovsPlayerState.BP_SetSquadId
// 0x0004 (0x0004 - 0x0000)
struct HerovsPlayerState_BP_SetSquadId final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HerovsPlayerState_BP_SetSquadId) == 0x000004, "Wrong alignment on HerovsPlayerState_BP_SetSquadId");
static_assert(sizeof(HerovsPlayerState_BP_SetSquadId) == 0x000004, "Wrong size on HerovsPlayerState_BP_SetSquadId");
static_assert(offsetof(HerovsPlayerState_BP_SetSquadId, ID) == 0x000000, "Member 'HerovsPlayerState_BP_SetSquadId::ID' has a wrong offset!");

// Function GameModule.HerovsPlayerState.BP_SetTeamId
// 0x0004 (0x0004 - 0x0000)
struct HerovsPlayerState_BP_SetTeamId final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HerovsPlayerState_BP_SetTeamId) == 0x000004, "Wrong alignment on HerovsPlayerState_BP_SetTeamId");
static_assert(sizeof(HerovsPlayerState_BP_SetTeamId) == 0x000004, "Wrong size on HerovsPlayerState_BP_SetTeamId");
static_assert(offsetof(HerovsPlayerState_BP_SetTeamId, ID) == 0x000000, "Member 'HerovsPlayerState_BP_SetTeamId::ID' has a wrong offset!");

// Function GameModule.HerovsPlayerState.BP_GetIsKing
// 0x0001 (0x0001 - 0x0000)
struct HerovsPlayerState_BP_GetIsKing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HerovsPlayerState_BP_GetIsKing) == 0x000001, "Wrong alignment on HerovsPlayerState_BP_GetIsKing");
static_assert(sizeof(HerovsPlayerState_BP_GetIsKing) == 0x000001, "Wrong size on HerovsPlayerState_BP_GetIsKing");
static_assert(offsetof(HerovsPlayerState_BP_GetIsKing, ReturnValue) == 0x000000, "Member 'HerovsPlayerState_BP_GetIsKing::ReturnValue' has a wrong offset!");

// Function GameModule.HerovsPlayerState.BP_GetSquadId
// 0x0004 (0x0004 - 0x0000)
struct HerovsPlayerState_BP_GetSquadId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HerovsPlayerState_BP_GetSquadId) == 0x000004, "Wrong alignment on HerovsPlayerState_BP_GetSquadId");
static_assert(sizeof(HerovsPlayerState_BP_GetSquadId) == 0x000004, "Wrong size on HerovsPlayerState_BP_GetSquadId");
static_assert(offsetof(HerovsPlayerState_BP_GetSquadId, ReturnValue) == 0x000000, "Member 'HerovsPlayerState_BP_GetSquadId::ReturnValue' has a wrong offset!");

// Function GameModule.HerovsPlayerState.BP_GetTeamId
// 0x0004 (0x0004 - 0x0000)
struct HerovsPlayerState_BP_GetTeamId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HerovsPlayerState_BP_GetTeamId) == 0x000004, "Wrong alignment on HerovsPlayerState_BP_GetTeamId");
static_assert(sizeof(HerovsPlayerState_BP_GetTeamId) == 0x000004, "Wrong size on HerovsPlayerState_BP_GetTeamId");
static_assert(offsetof(HerovsPlayerState_BP_GetTeamId, ReturnValue) == 0x000000, "Member 'HerovsPlayerState_BP_GetTeamId::ReturnValue' has a wrong offset!");

// Function GameModule.HerovsPlayerState.BP_GetUniqueId
// 0x0028 (0x0028 - 0x0000)
struct HerovsPlayerState_BP_GetUniqueId final
{
public:
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HerovsPlayerState_BP_GetUniqueId) == 0x000008, "Wrong alignment on HerovsPlayerState_BP_GetUniqueId");
static_assert(sizeof(HerovsPlayerState_BP_GetUniqueId) == 0x000028, "Wrong size on HerovsPlayerState_BP_GetUniqueId");
static_assert(offsetof(HerovsPlayerState_BP_GetUniqueId, ReturnValue) == 0x000000, "Member 'HerovsPlayerState_BP_GetUniqueId::ReturnValue' has a wrong offset!");

// Function GameModule.HerovsPlayerState.BP_GetUniqueNetId
// 0x0010 (0x0010 - 0x0000)
struct HerovsPlayerState_BP_GetUniqueNetId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HerovsPlayerState_BP_GetUniqueNetId) == 0x000008, "Wrong alignment on HerovsPlayerState_BP_GetUniqueNetId");
static_assert(sizeof(HerovsPlayerState_BP_GetUniqueNetId) == 0x000010, "Wrong size on HerovsPlayerState_BP_GetUniqueNetId");
static_assert(offsetof(HerovsPlayerState_BP_GetUniqueNetId, ReturnValue) == 0x000000, "Member 'HerovsPlayerState_BP_GetUniqueNetId::ReturnValue' has a wrong offset!");

// Function GameModule.HudResource.BP_GetAbilityMeshFaceTexture
// 0x0010 (0x0010 - 0x0000)
struct HudResource_BP_GetAbilityMeshFaceTexture final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudResource_BP_GetAbilityMeshFaceTexture) == 0x000008, "Wrong alignment on HudResource_BP_GetAbilityMeshFaceTexture");
static_assert(sizeof(HudResource_BP_GetAbilityMeshFaceTexture) == 0x000010, "Wrong size on HudResource_BP_GetAbilityMeshFaceTexture");
static_assert(offsetof(HudResource_BP_GetAbilityMeshFaceTexture, CharacterId) == 0x000000, "Member 'HudResource_BP_GetAbilityMeshFaceTexture::CharacterId' has a wrong offset!");
static_assert(offsetof(HudResource_BP_GetAbilityMeshFaceTexture, ReturnValue) == 0x000008, "Member 'HudResource_BP_GetAbilityMeshFaceTexture::ReturnValue' has a wrong offset!");

// Function GameModule.HudResource.BP_GetCharacterFaceSprite
// 0x0010 (0x0010 - 0x0000)
struct HudResource_BP_GetCharacterFaceSprite final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudResource_BP_GetCharacterFaceSprite) == 0x000008, "Wrong alignment on HudResource_BP_GetCharacterFaceSprite");
static_assert(sizeof(HudResource_BP_GetCharacterFaceSprite) == 0x000010, "Wrong size on HudResource_BP_GetCharacterFaceSprite");
static_assert(offsetof(HudResource_BP_GetCharacterFaceSprite, CharacterId) == 0x000000, "Member 'HudResource_BP_GetCharacterFaceSprite::CharacterId' has a wrong offset!");
static_assert(offsetof(HudResource_BP_GetCharacterFaceSprite, ReturnValue) == 0x000008, "Member 'HudResource_BP_GetCharacterFaceSprite::ReturnValue' has a wrong offset!");

// Function GameModule.HudResource.BP_GetCharacterFaceSpriteTexture
// 0x0010 (0x0010 - 0x0000)
struct HudResource_BP_GetCharacterFaceSpriteTexture final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudResource_BP_GetCharacterFaceSpriteTexture) == 0x000008, "Wrong alignment on HudResource_BP_GetCharacterFaceSpriteTexture");
static_assert(sizeof(HudResource_BP_GetCharacterFaceSpriteTexture) == 0x000010, "Wrong size on HudResource_BP_GetCharacterFaceSpriteTexture");
static_assert(offsetof(HudResource_BP_GetCharacterFaceSpriteTexture, CharacterId) == 0x000000, "Member 'HudResource_BP_GetCharacterFaceSpriteTexture::CharacterId' has a wrong offset!");
static_assert(offsetof(HudResource_BP_GetCharacterFaceSpriteTexture, ReturnValue) == 0x000008, "Member 'HudResource_BP_GetCharacterFaceSpriteTexture::ReturnValue' has a wrong offset!");

// Function GameModule.HudResource.GetMarkerSprite
// 0x0010 (0x0010 - 0x0000)
struct HudResource_GetMarkerSprite final
{
public:
	EMarkerType                                   MarkerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudResource_GetMarkerSprite) == 0x000008, "Wrong alignment on HudResource_GetMarkerSprite");
static_assert(sizeof(HudResource_GetMarkerSprite) == 0x000010, "Wrong size on HudResource_GetMarkerSprite");
static_assert(offsetof(HudResource_GetMarkerSprite, MarkerType) == 0x000000, "Member 'HudResource_GetMarkerSprite::MarkerType' has a wrong offset!");
static_assert(offsetof(HudResource_GetMarkerSprite, ReturnValue) == 0x000008, "Member 'HudResource_GetMarkerSprite::ReturnValue' has a wrong offset!");

// Function GameModule.LoadTransitionWidget.UpdateBgTexture
// 0x0004 (0x0004 - 0x0000)
struct LoadTransitionWidget_UpdateBgTexture final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadTransitionWidget_UpdateBgTexture) == 0x000004, "Wrong alignment on LoadTransitionWidget_UpdateBgTexture");
static_assert(sizeof(LoadTransitionWidget_UpdateBgTexture) == 0x000004, "Wrong size on LoadTransitionWidget_UpdateBgTexture");
static_assert(offsetof(LoadTransitionWidget_UpdateBgTexture, Code) == 0x000000, "Member 'LoadTransitionWidget_UpdateBgTexture::Code' has a wrong offset!");

// Function GameModule.MaterialControlComponent.BP_HiddenMaterial
// 0x000C (0x000C - 0x0000)
struct MaterialControlComponent_BP_HiddenMaterial final
{
public:
	EMaterialHideFlag                             Flag;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CacheName;                                         // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialControlComponent_BP_HiddenMaterial) == 0x000004, "Wrong alignment on MaterialControlComponent_BP_HiddenMaterial");
static_assert(sizeof(MaterialControlComponent_BP_HiddenMaterial) == 0x00000C, "Wrong size on MaterialControlComponent_BP_HiddenMaterial");
static_assert(offsetof(MaterialControlComponent_BP_HiddenMaterial, Flag) == 0x000000, "Member 'MaterialControlComponent_BP_HiddenMaterial::Flag' has a wrong offset!");
static_assert(offsetof(MaterialControlComponent_BP_HiddenMaterial, CacheName) == 0x000004, "Member 'MaterialControlComponent_BP_HiddenMaterial::CacheName' has a wrong offset!");

// Function GameModule.MaterialControlComponent.BP_HiddenMaterial_Custom
// 0x000C (0x000C - 0x0000)
struct MaterialControlComponent_BP_HiddenMaterial_Custom final
{
public:
	EMaterialCustomFlag                           Flag;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CacheName;                                         // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialControlComponent_BP_HiddenMaterial_Custom) == 0x000004, "Wrong alignment on MaterialControlComponent_BP_HiddenMaterial_Custom");
static_assert(sizeof(MaterialControlComponent_BP_HiddenMaterial_Custom) == 0x00000C, "Wrong size on MaterialControlComponent_BP_HiddenMaterial_Custom");
static_assert(offsetof(MaterialControlComponent_BP_HiddenMaterial_Custom, Flag) == 0x000000, "Member 'MaterialControlComponent_BP_HiddenMaterial_Custom::Flag' has a wrong offset!");
static_assert(offsetof(MaterialControlComponent_BP_HiddenMaterial_Custom, CacheName) == 0x000004, "Member 'MaterialControlComponent_BP_HiddenMaterial_Custom::CacheName' has a wrong offset!");

// Function GameModule.MaterialControlComponent.BP_IndicateMaterial
// 0x000C (0x000C - 0x0000)
struct MaterialControlComponent_BP_IndicateMaterial final
{
public:
	EMaterialHideFlag                             Flag;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CacheName;                                         // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialControlComponent_BP_IndicateMaterial) == 0x000004, "Wrong alignment on MaterialControlComponent_BP_IndicateMaterial");
static_assert(sizeof(MaterialControlComponent_BP_IndicateMaterial) == 0x00000C, "Wrong size on MaterialControlComponent_BP_IndicateMaterial");
static_assert(offsetof(MaterialControlComponent_BP_IndicateMaterial, Flag) == 0x000000, "Member 'MaterialControlComponent_BP_IndicateMaterial::Flag' has a wrong offset!");
static_assert(offsetof(MaterialControlComponent_BP_IndicateMaterial, CacheName) == 0x000004, "Member 'MaterialControlComponent_BP_IndicateMaterial::CacheName' has a wrong offset!");

// Function GameModule.MaterialControlComponent.BP_IndicateMaterial_Custom
// 0x000C (0x000C - 0x0000)
struct MaterialControlComponent_BP_IndicateMaterial_Custom final
{
public:
	EMaterialCustomFlag                           Flag;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CacheName;                                         // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialControlComponent_BP_IndicateMaterial_Custom) == 0x000004, "Wrong alignment on MaterialControlComponent_BP_IndicateMaterial_Custom");
static_assert(sizeof(MaterialControlComponent_BP_IndicateMaterial_Custom) == 0x00000C, "Wrong size on MaterialControlComponent_BP_IndicateMaterial_Custom");
static_assert(offsetof(MaterialControlComponent_BP_IndicateMaterial_Custom, Flag) == 0x000000, "Member 'MaterialControlComponent_BP_IndicateMaterial_Custom::Flag' has a wrong offset!");
static_assert(offsetof(MaterialControlComponent_BP_IndicateMaterial_Custom, CacheName) == 0x000004, "Member 'MaterialControlComponent_BP_IndicateMaterial_Custom::CacheName' has a wrong offset!");

// Function GameModule.MaterialControlComponent.BP_Reflesh
// 0x0008 (0x0008 - 0x0000)
struct MaterialControlComponent_BP_Reflesh final
{
public:
	class FName                                   CacheName;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialControlComponent_BP_Reflesh) == 0x000004, "Wrong alignment on MaterialControlComponent_BP_Reflesh");
static_assert(sizeof(MaterialControlComponent_BP_Reflesh) == 0x000008, "Wrong size on MaterialControlComponent_BP_Reflesh");
static_assert(offsetof(MaterialControlComponent_BP_Reflesh, CacheName) == 0x000000, "Member 'MaterialControlComponent_BP_Reflesh::CacheName' has a wrong offset!");

// Function GameModule.MaterialControlComponent.BP_RegisterOverWriteMaterial
// 0x0010 (0x0010 - 0x0000)
struct MaterialControlComponent_BP_RegisterOverWriteMaterial final
{
public:
	EMaterialOverWriteType                        OverWriteType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     MaterialInterface;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialControlComponent_BP_RegisterOverWriteMaterial) == 0x000008, "Wrong alignment on MaterialControlComponent_BP_RegisterOverWriteMaterial");
static_assert(sizeof(MaterialControlComponent_BP_RegisterOverWriteMaterial) == 0x000010, "Wrong size on MaterialControlComponent_BP_RegisterOverWriteMaterial");
static_assert(offsetof(MaterialControlComponent_BP_RegisterOverWriteMaterial, OverWriteType) == 0x000000, "Member 'MaterialControlComponent_BP_RegisterOverWriteMaterial::OverWriteType' has a wrong offset!");
static_assert(offsetof(MaterialControlComponent_BP_RegisterOverWriteMaterial, MaterialInterface) == 0x000008, "Member 'MaterialControlComponent_BP_RegisterOverWriteMaterial::MaterialInterface' has a wrong offset!");

// Function GameModule.MaterialControlComponent.BP_ResetOverWriteMaterial
// 0x0008 (0x0008 - 0x0000)
struct MaterialControlComponent_BP_ResetOverWriteMaterial final
{
public:
	class FName                                   CacheName;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialControlComponent_BP_ResetOverWriteMaterial) == 0x000004, "Wrong alignment on MaterialControlComponent_BP_ResetOverWriteMaterial");
static_assert(sizeof(MaterialControlComponent_BP_ResetOverWriteMaterial) == 0x000008, "Wrong size on MaterialControlComponent_BP_ResetOverWriteMaterial");
static_assert(offsetof(MaterialControlComponent_BP_ResetOverWriteMaterial, CacheName) == 0x000000, "Member 'MaterialControlComponent_BP_ResetOverWriteMaterial::CacheName' has a wrong offset!");

// Function GameModule.MaterialControlComponent.BP_SetDefaultScalarParameter
// 0x0014 (0x0014 - 0x0000)
struct MaterialControlComponent_BP_SetDefaultScalarParameter final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaterialGroupFlag                            GroupFlag;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CacheName;                                         // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialControlComponent_BP_SetDefaultScalarParameter) == 0x000004, "Wrong alignment on MaterialControlComponent_BP_SetDefaultScalarParameter");
static_assert(sizeof(MaterialControlComponent_BP_SetDefaultScalarParameter) == 0x000014, "Wrong size on MaterialControlComponent_BP_SetDefaultScalarParameter");
static_assert(offsetof(MaterialControlComponent_BP_SetDefaultScalarParameter, ParameterName) == 0x000000, "Member 'MaterialControlComponent_BP_SetDefaultScalarParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(MaterialControlComponent_BP_SetDefaultScalarParameter, GroupFlag) == 0x000008, "Member 'MaterialControlComponent_BP_SetDefaultScalarParameter::GroupFlag' has a wrong offset!");
static_assert(offsetof(MaterialControlComponent_BP_SetDefaultScalarParameter, CacheName) == 0x00000C, "Member 'MaterialControlComponent_BP_SetDefaultScalarParameter::CacheName' has a wrong offset!");

// Function GameModule.MaterialControlComponent.BP_SetDefaultScalarParameterForOverWriteMaterial
// 0x000C (0x000C - 0x0000)
struct MaterialControlComponent_BP_SetDefaultScalarParameterForOverWriteMaterial final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaterialOverWriteType                        Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaterialControlComponent_BP_SetDefaultScalarParameterForOverWriteMaterial) == 0x000004, "Wrong alignment on MaterialControlComponent_BP_SetDefaultScalarParameterForOverWriteMaterial");
static_assert(sizeof(MaterialControlComponent_BP_SetDefaultScalarParameterForOverWriteMaterial) == 0x00000C, "Wrong size on MaterialControlComponent_BP_SetDefaultScalarParameterForOverWriteMaterial");
static_assert(offsetof(MaterialControlComponent_BP_SetDefaultScalarParameterForOverWriteMaterial, ParameterName) == 0x000000, "Member 'MaterialControlComponent_BP_SetDefaultScalarParameterForOverWriteMaterial::ParameterName' has a wrong offset!");
static_assert(offsetof(MaterialControlComponent_BP_SetDefaultScalarParameterForOverWriteMaterial, Type) == 0x000008, "Member 'MaterialControlComponent_BP_SetDefaultScalarParameterForOverWriteMaterial::Type' has a wrong offset!");

// Function GameModule.MaterialControlComponent.BP_SetDefaultTextureParameter
// 0x0014 (0x0014 - 0x0000)
struct MaterialControlComponent_BP_SetDefaultTextureParameter final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaterialGroupFlag                            GroupFlag;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CacheName;                                         // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialControlComponent_BP_SetDefaultTextureParameter) == 0x000004, "Wrong alignment on MaterialControlComponent_BP_SetDefaultTextureParameter");
static_assert(sizeof(MaterialControlComponent_BP_SetDefaultTextureParameter) == 0x000014, "Wrong size on MaterialControlComponent_BP_SetDefaultTextureParameter");
static_assert(offsetof(MaterialControlComponent_BP_SetDefaultTextureParameter, ParameterName) == 0x000000, "Member 'MaterialControlComponent_BP_SetDefaultTextureParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(MaterialControlComponent_BP_SetDefaultTextureParameter, GroupFlag) == 0x000008, "Member 'MaterialControlComponent_BP_SetDefaultTextureParameter::GroupFlag' has a wrong offset!");
static_assert(offsetof(MaterialControlComponent_BP_SetDefaultTextureParameter, CacheName) == 0x00000C, "Member 'MaterialControlComponent_BP_SetDefaultTextureParameter::CacheName' has a wrong offset!");

// Function GameModule.MaterialControlComponent.BP_SetDefaultVectorParameter
// 0x0014 (0x0014 - 0x0000)
struct MaterialControlComponent_BP_SetDefaultVectorParameter final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaterialGroupFlag                            GroupFlag;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CacheName;                                         // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialControlComponent_BP_SetDefaultVectorParameter) == 0x000004, "Wrong alignment on MaterialControlComponent_BP_SetDefaultVectorParameter");
static_assert(sizeof(MaterialControlComponent_BP_SetDefaultVectorParameter) == 0x000014, "Wrong size on MaterialControlComponent_BP_SetDefaultVectorParameter");
static_assert(offsetof(MaterialControlComponent_BP_SetDefaultVectorParameter, ParameterName) == 0x000000, "Member 'MaterialControlComponent_BP_SetDefaultVectorParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(MaterialControlComponent_BP_SetDefaultVectorParameter, GroupFlag) == 0x000008, "Member 'MaterialControlComponent_BP_SetDefaultVectorParameter::GroupFlag' has a wrong offset!");
static_assert(offsetof(MaterialControlComponent_BP_SetDefaultVectorParameter, CacheName) == 0x00000C, "Member 'MaterialControlComponent_BP_SetDefaultVectorParameter::CacheName' has a wrong offset!");

// Function GameModule.MaterialControlComponent.BP_SetOverWriteMaterial
// 0x000C (0x000C - 0x0000)
struct MaterialControlComponent_BP_SetOverWriteMaterial final
{
public:
	EMaterialOverWriteType                        OverWriteType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CacheName;                                         // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialControlComponent_BP_SetOverWriteMaterial) == 0x000004, "Wrong alignment on MaterialControlComponent_BP_SetOverWriteMaterial");
static_assert(sizeof(MaterialControlComponent_BP_SetOverWriteMaterial) == 0x00000C, "Wrong size on MaterialControlComponent_BP_SetOverWriteMaterial");
static_assert(offsetof(MaterialControlComponent_BP_SetOverWriteMaterial, OverWriteType) == 0x000000, "Member 'MaterialControlComponent_BP_SetOverWriteMaterial::OverWriteType' has a wrong offset!");
static_assert(offsetof(MaterialControlComponent_BP_SetOverWriteMaterial, CacheName) == 0x000004, "Member 'MaterialControlComponent_BP_SetOverWriteMaterial::CacheName' has a wrong offset!");

// Function GameModule.MaterialControlComponent.BP_SetScalarParameter
// 0x0018 (0x0018 - 0x0000)
struct MaterialControlComponent_BP_SetScalarParameter final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaterialGroupFlag                            GroupFlag;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CacheName;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialControlComponent_BP_SetScalarParameter) == 0x000004, "Wrong alignment on MaterialControlComponent_BP_SetScalarParameter");
static_assert(sizeof(MaterialControlComponent_BP_SetScalarParameter) == 0x000018, "Wrong size on MaterialControlComponent_BP_SetScalarParameter");
static_assert(offsetof(MaterialControlComponent_BP_SetScalarParameter, ParameterName) == 0x000000, "Member 'MaterialControlComponent_BP_SetScalarParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(MaterialControlComponent_BP_SetScalarParameter, Value) == 0x000008, "Member 'MaterialControlComponent_BP_SetScalarParameter::Value' has a wrong offset!");
static_assert(offsetof(MaterialControlComponent_BP_SetScalarParameter, GroupFlag) == 0x00000C, "Member 'MaterialControlComponent_BP_SetScalarParameter::GroupFlag' has a wrong offset!");
static_assert(offsetof(MaterialControlComponent_BP_SetScalarParameter, CacheName) == 0x000010, "Member 'MaterialControlComponent_BP_SetScalarParameter::CacheName' has a wrong offset!");

// Function GameModule.MaterialControlComponent.BP_SetScalarParameterForOverWriteMaterial
// 0x0010 (0x0010 - 0x0000)
struct MaterialControlComponent_BP_SetScalarParameterForOverWriteMaterial final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaterialOverWriteType                        Type;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaterialControlComponent_BP_SetScalarParameterForOverWriteMaterial) == 0x000004, "Wrong alignment on MaterialControlComponent_BP_SetScalarParameterForOverWriteMaterial");
static_assert(sizeof(MaterialControlComponent_BP_SetScalarParameterForOverWriteMaterial) == 0x000010, "Wrong size on MaterialControlComponent_BP_SetScalarParameterForOverWriteMaterial");
static_assert(offsetof(MaterialControlComponent_BP_SetScalarParameterForOverWriteMaterial, ParameterName) == 0x000000, "Member 'MaterialControlComponent_BP_SetScalarParameterForOverWriteMaterial::ParameterName' has a wrong offset!");
static_assert(offsetof(MaterialControlComponent_BP_SetScalarParameterForOverWriteMaterial, Value) == 0x000008, "Member 'MaterialControlComponent_BP_SetScalarParameterForOverWriteMaterial::Value' has a wrong offset!");
static_assert(offsetof(MaterialControlComponent_BP_SetScalarParameterForOverWriteMaterial, Type) == 0x00000C, "Member 'MaterialControlComponent_BP_SetScalarParameterForOverWriteMaterial::Type' has a wrong offset!");

// Function GameModule.MaterialControlComponent.BP_SetTexture_Custom
// 0x0018 (0x0018 - 0x0000)
struct MaterialControlComponent_BP_SetTexture_Custom final
{
public:
	EMaterialCustomFlag                           Flag;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Value;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CacheName;                                         // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialControlComponent_BP_SetTexture_Custom) == 0x000008, "Wrong alignment on MaterialControlComponent_BP_SetTexture_Custom");
static_assert(sizeof(MaterialControlComponent_BP_SetTexture_Custom) == 0x000018, "Wrong size on MaterialControlComponent_BP_SetTexture_Custom");
static_assert(offsetof(MaterialControlComponent_BP_SetTexture_Custom, Flag) == 0x000000, "Member 'MaterialControlComponent_BP_SetTexture_Custom::Flag' has a wrong offset!");
static_assert(offsetof(MaterialControlComponent_BP_SetTexture_Custom, Value) == 0x000008, "Member 'MaterialControlComponent_BP_SetTexture_Custom::Value' has a wrong offset!");
static_assert(offsetof(MaterialControlComponent_BP_SetTexture_Custom, CacheName) == 0x000010, "Member 'MaterialControlComponent_BP_SetTexture_Custom::CacheName' has a wrong offset!");

// Function GameModule.MaterialControlComponent.BP_SetTextureParameter
// 0x0020 (0x0020 - 0x0000)
struct MaterialControlComponent_BP_SetTextureParameter final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               Value;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaterialGroupFlag                            GroupFlag;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CacheName;                                         // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaterialControlComponent_BP_SetTextureParameter) == 0x000008, "Wrong alignment on MaterialControlComponent_BP_SetTextureParameter");
static_assert(sizeof(MaterialControlComponent_BP_SetTextureParameter) == 0x000020, "Wrong size on MaterialControlComponent_BP_SetTextureParameter");
static_assert(offsetof(MaterialControlComponent_BP_SetTextureParameter, ParameterName) == 0x000000, "Member 'MaterialControlComponent_BP_SetTextureParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(MaterialControlComponent_BP_SetTextureParameter, Value) == 0x000008, "Member 'MaterialControlComponent_BP_SetTextureParameter::Value' has a wrong offset!");
static_assert(offsetof(MaterialControlComponent_BP_SetTextureParameter, GroupFlag) == 0x000010, "Member 'MaterialControlComponent_BP_SetTextureParameter::GroupFlag' has a wrong offset!");
static_assert(offsetof(MaterialControlComponent_BP_SetTextureParameter, CacheName) == 0x000014, "Member 'MaterialControlComponent_BP_SetTextureParameter::CacheName' has a wrong offset!");

// Function GameModule.MaterialControlComponent.BP_SetVectorParameter
// 0x0024 (0x0024 - 0x0000)
struct MaterialControlComponent_BP_SetVectorParameter final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Value;                                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaterialGroupFlag                            GroupFlag;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CacheName;                                         // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialControlComponent_BP_SetVectorParameter) == 0x000004, "Wrong alignment on MaterialControlComponent_BP_SetVectorParameter");
static_assert(sizeof(MaterialControlComponent_BP_SetVectorParameter) == 0x000024, "Wrong size on MaterialControlComponent_BP_SetVectorParameter");
static_assert(offsetof(MaterialControlComponent_BP_SetVectorParameter, ParameterName) == 0x000000, "Member 'MaterialControlComponent_BP_SetVectorParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(MaterialControlComponent_BP_SetVectorParameter, Value) == 0x000008, "Member 'MaterialControlComponent_BP_SetVectorParameter::Value' has a wrong offset!");
static_assert(offsetof(MaterialControlComponent_BP_SetVectorParameter, GroupFlag) == 0x000018, "Member 'MaterialControlComponent_BP_SetVectorParameter::GroupFlag' has a wrong offset!");
static_assert(offsetof(MaterialControlComponent_BP_SetVectorParameter, CacheName) == 0x00001C, "Member 'MaterialControlComponent_BP_SetVectorParameter::CacheName' has a wrong offset!");

// Function GameModule.MaterialControlComponent.BP_TransitionScalar
// 0x0020 (0x0020 - 0x0000)
struct MaterialControlComponent_BP_TransitionScalar final
{
public:
	struct FTransitionMaterialScalarParamArgment  Argment;                                           // 0x0000(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialControlComponent_BP_TransitionScalar) == 0x000004, "Wrong alignment on MaterialControlComponent_BP_TransitionScalar");
static_assert(sizeof(MaterialControlComponent_BP_TransitionScalar) == 0x000020, "Wrong size on MaterialControlComponent_BP_TransitionScalar");
static_assert(offsetof(MaterialControlComponent_BP_TransitionScalar, Argment) == 0x000000, "Member 'MaterialControlComponent_BP_TransitionScalar::Argment' has a wrong offset!");

// Function GameModule.MaterialControlComponent.BP_TransitionVector
// 0x0038 (0x0038 - 0x0000)
struct MaterialControlComponent_BP_TransitionVector final
{
public:
	struct FTransitionMaterialVectorParamArgment  Argment;                                           // 0x0000(0x0038)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialControlComponent_BP_TransitionVector) == 0x000004, "Wrong alignment on MaterialControlComponent_BP_TransitionVector");
static_assert(sizeof(MaterialControlComponent_BP_TransitionVector) == 0x000038, "Wrong size on MaterialControlComponent_BP_TransitionVector");
static_assert(offsetof(MaterialControlComponent_BP_TransitionVector, Argment) == 0x000000, "Member 'MaterialControlComponent_BP_TransitionVector::Argment' has a wrong offset!");

// Function GameModule.MaterialControlComponent.BP_UnregisterOverWriteMaterial
// 0x0001 (0x0001 - 0x0000)
struct MaterialControlComponent_BP_UnregisterOverWriteMaterial final
{
public:
	EMaterialOverWriteType                        OverWriteType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialControlComponent_BP_UnregisterOverWriteMaterial) == 0x000001, "Wrong alignment on MaterialControlComponent_BP_UnregisterOverWriteMaterial");
static_assert(sizeof(MaterialControlComponent_BP_UnregisterOverWriteMaterial) == 0x000001, "Wrong size on MaterialControlComponent_BP_UnregisterOverWriteMaterial");
static_assert(offsetof(MaterialControlComponent_BP_UnregisterOverWriteMaterial, OverWriteType) == 0x000000, "Member 'MaterialControlComponent_BP_UnregisterOverWriteMaterial::OverWriteType' has a wrong offset!");

// Function GameModule.MultipleDigitsWidget.BP_SetDisplayNumber
// 0x0008 (0x0008 - 0x0000)
struct MultipleDigitsWidget_BP_SetDisplayNumber final
{
public:
	int32                                         DispNum;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DispDigits;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MultipleDigitsWidget_BP_SetDisplayNumber) == 0x000004, "Wrong alignment on MultipleDigitsWidget_BP_SetDisplayNumber");
static_assert(sizeof(MultipleDigitsWidget_BP_SetDisplayNumber) == 0x000008, "Wrong size on MultipleDigitsWidget_BP_SetDisplayNumber");
static_assert(offsetof(MultipleDigitsWidget_BP_SetDisplayNumber, DispNum) == 0x000000, "Member 'MultipleDigitsWidget_BP_SetDisplayNumber::DispNum' has a wrong offset!");
static_assert(offsetof(MultipleDigitsWidget_BP_SetDisplayNumber, DispDigits) == 0x000004, "Member 'MultipleDigitsWidget_BP_SetDisplayNumber::DispDigits' has a wrong offset!");

// Function GameModule.NetworkWork.BP_CancelReadyBattleWait
// 0x0001 (0x0001 - 0x0000)
struct NetworkWork_BP_CancelReadyBattleWait final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkWork_BP_CancelReadyBattleWait) == 0x000001, "Wrong alignment on NetworkWork_BP_CancelReadyBattleWait");
static_assert(sizeof(NetworkWork_BP_CancelReadyBattleWait) == 0x000001, "Wrong size on NetworkWork_BP_CancelReadyBattleWait");
static_assert(offsetof(NetworkWork_BP_CancelReadyBattleWait, ReturnValue) == 0x000000, "Member 'NetworkWork_BP_CancelReadyBattleWait::ReturnValue' has a wrong offset!");

// Function GameModule.NetworkWork.BP_GetPlatformBlockUserIdArray
// 0x0010 (0x0010 - 0x0000)
struct NetworkWork_BP_GetPlatformBlockUserIdArray final
{
public:
	TArray<class FString>                         OutBlockIdArray;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkWork_BP_GetPlatformBlockUserIdArray) == 0x000008, "Wrong alignment on NetworkWork_BP_GetPlatformBlockUserIdArray");
static_assert(sizeof(NetworkWork_BP_GetPlatformBlockUserIdArray) == 0x000010, "Wrong size on NetworkWork_BP_GetPlatformBlockUserIdArray");
static_assert(offsetof(NetworkWork_BP_GetPlatformBlockUserIdArray, OutBlockIdArray) == 0x000000, "Member 'NetworkWork_BP_GetPlatformBlockUserIdArray::OutBlockIdArray' has a wrong offset!");

// Function GameModule.NetworkWork.BP_GetSquadMemberIdList
// 0x0018 (0x0018 - 0x0000)
struct NetworkWork_BP_GetSquadMemberIdList final
{
public:
	bool                                          TheFront;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkWork_BP_GetSquadMemberIdList) == 0x000008, "Wrong alignment on NetworkWork_BP_GetSquadMemberIdList");
static_assert(sizeof(NetworkWork_BP_GetSquadMemberIdList) == 0x000018, "Wrong size on NetworkWork_BP_GetSquadMemberIdList");
static_assert(offsetof(NetworkWork_BP_GetSquadMemberIdList, TheFront) == 0x000000, "Member 'NetworkWork_BP_GetSquadMemberIdList::TheFront' has a wrong offset!");
static_assert(offsetof(NetworkWork_BP_GetSquadMemberIdList, ReturnValue) == 0x000008, "Member 'NetworkWork_BP_GetSquadMemberIdList::ReturnValue' has a wrong offset!");

// Function GameModule.NetworkWork.BP_GetSquadMemberNameList
// 0x0018 (0x0018 - 0x0000)
struct NetworkWork_BP_GetSquadMemberNameList final
{
public:
	bool                                          TheFront;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkWork_BP_GetSquadMemberNameList) == 0x000008, "Wrong alignment on NetworkWork_BP_GetSquadMemberNameList");
static_assert(sizeof(NetworkWork_BP_GetSquadMemberNameList) == 0x000018, "Wrong size on NetworkWork_BP_GetSquadMemberNameList");
static_assert(offsetof(NetworkWork_BP_GetSquadMemberNameList, TheFront) == 0x000000, "Member 'NetworkWork_BP_GetSquadMemberNameList::TheFront' has a wrong offset!");
static_assert(offsetof(NetworkWork_BP_GetSquadMemberNameList, ReturnValue) == 0x000008, "Member 'NetworkWork_BP_GetSquadMemberNameList::ReturnValue' has a wrong offset!");

// Function GameModule.NetworkWork.BP_IsAgeRestrictionFailure
// 0x0001 (0x0001 - 0x0000)
struct NetworkWork_BP_IsAgeRestrictionFailure final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkWork_BP_IsAgeRestrictionFailure) == 0x000001, "Wrong alignment on NetworkWork_BP_IsAgeRestrictionFailure");
static_assert(sizeof(NetworkWork_BP_IsAgeRestrictionFailure) == 0x000001, "Wrong size on NetworkWork_BP_IsAgeRestrictionFailure");
static_assert(offsetof(NetworkWork_BP_IsAgeRestrictionFailure, ReturnValue) == 0x000000, "Member 'NetworkWork_BP_IsAgeRestrictionFailure::ReturnValue' has a wrong offset!");

// Function GameModule.NetworkWork.BP_IsChatUserPrivilege
// 0x0001 (0x0001 - 0x0000)
struct NetworkWork_BP_IsChatUserPrivilege final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkWork_BP_IsChatUserPrivilege) == 0x000001, "Wrong alignment on NetworkWork_BP_IsChatUserPrivilege");
static_assert(sizeof(NetworkWork_BP_IsChatUserPrivilege) == 0x000001, "Wrong size on NetworkWork_BP_IsChatUserPrivilege");
static_assert(offsetof(NetworkWork_BP_IsChatUserPrivilege, ReturnValue) == 0x000000, "Member 'NetworkWork_BP_IsChatUserPrivilege::ReturnValue' has a wrong offset!");

// Function GameModule.NetworkWork.BP_IsRequiredPatchAvailable
// 0x0001 (0x0001 - 0x0000)
struct NetworkWork_BP_IsRequiredPatchAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkWork_BP_IsRequiredPatchAvailable) == 0x000001, "Wrong alignment on NetworkWork_BP_IsRequiredPatchAvailable");
static_assert(sizeof(NetworkWork_BP_IsRequiredPatchAvailable) == 0x000001, "Wrong size on NetworkWork_BP_IsRequiredPatchAvailable");
static_assert(offsetof(NetworkWork_BP_IsRequiredPatchAvailable, ReturnValue) == 0x000000, "Member 'NetworkWork_BP_IsRequiredPatchAvailable::ReturnValue' has a wrong offset!");

// Function GameModule.NetworkWork.BP_IsUGCUserPrivilege
// 0x0001 (0x0001 - 0x0000)
struct NetworkWork_BP_IsUGCUserPrivilege final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkWork_BP_IsUGCUserPrivilege) == 0x000001, "Wrong alignment on NetworkWork_BP_IsUGCUserPrivilege");
static_assert(sizeof(NetworkWork_BP_IsUGCUserPrivilege) == 0x000001, "Wrong size on NetworkWork_BP_IsUGCUserPrivilege");
static_assert(offsetof(NetworkWork_BP_IsUGCUserPrivilege, ReturnValue) == 0x000000, "Member 'NetworkWork_BP_IsUGCUserPrivilege::ReturnValue' has a wrong offset!");

// Function GameModule.NetworkWork.BP_ShowPlatformMessageBox
// 0x0004 (0x0004 - 0x0000)
struct NetworkWork_BP_ShowPlatformMessageBox final
{
public:
	int32                                         PlatformMessageType;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkWork_BP_ShowPlatformMessageBox) == 0x000004, "Wrong alignment on NetworkWork_BP_ShowPlatformMessageBox");
static_assert(sizeof(NetworkWork_BP_ShowPlatformMessageBox) == 0x000004, "Wrong size on NetworkWork_BP_ShowPlatformMessageBox");
static_assert(offsetof(NetworkWork_BP_ShowPlatformMessageBox, PlatformMessageType) == 0x000000, "Member 'NetworkWork_BP_ShowPlatformMessageBox::PlatformMessageType' has a wrong offset!");

// Function GameModule.NetworkWork.JoinSquad
// 0x0018 (0x0018 - 0x0000)
struct NetworkWork_JoinSquad final
{
public:
	class FString                                 SquadPassword;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NetworkWork_JoinSquad) == 0x000008, "Wrong alignment on NetworkWork_JoinSquad");
static_assert(sizeof(NetworkWork_JoinSquad) == 0x000018, "Wrong size on NetworkWork_JoinSquad");
static_assert(offsetof(NetworkWork_JoinSquad, SquadPassword) == 0x000000, "Member 'NetworkWork_JoinSquad::SquadPassword' has a wrong offset!");
static_assert(offsetof(NetworkWork_JoinSquad, ReturnValue) == 0x000010, "Member 'NetworkWork_JoinSquad::ReturnValue' has a wrong offset!");

// Function GameModule.NetworkWork.JoinSquadByInvitation
// 0x0028 (0x0028 - 0x0000)
struct NetworkWork_JoinSquadByInvitation final
{
public:
	class FString                                 InvitationId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NoticeId;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NetworkWork_JoinSquadByInvitation) == 0x000008, "Wrong alignment on NetworkWork_JoinSquadByInvitation");
static_assert(sizeof(NetworkWork_JoinSquadByInvitation) == 0x000028, "Wrong size on NetworkWork_JoinSquadByInvitation");
static_assert(offsetof(NetworkWork_JoinSquadByInvitation, InvitationId) == 0x000000, "Member 'NetworkWork_JoinSquadByInvitation::InvitationId' has a wrong offset!");
static_assert(offsetof(NetworkWork_JoinSquadByInvitation, NoticeId) == 0x000010, "Member 'NetworkWork_JoinSquadByInvitation::NoticeId' has a wrong offset!");
static_assert(offsetof(NetworkWork_JoinSquadByInvitation, ReturnValue) == 0x000020, "Member 'NetworkWork_JoinSquadByInvitation::ReturnValue' has a wrong offset!");

// Function GameModule.NetworkWork.OnClosedBlockList
// 0x0001 (0x0001 - 0x0000)
struct NetworkWork_OnClosedBlockList final
{
public:
	bool                                          bDecide;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkWork_OnClosedBlockList) == 0x000001, "Wrong alignment on NetworkWork_OnClosedBlockList");
static_assert(sizeof(NetworkWork_OnClosedBlockList) == 0x000001, "Wrong size on NetworkWork_OnClosedBlockList");
static_assert(offsetof(NetworkWork_OnClosedBlockList, bDecide) == 0x000000, "Member 'NetworkWork_OnClosedBlockList::bDecide' has a wrong offset!");

// Function GameModule.NetworkWork.OnLoadCompleteEvent
// 0x0004 (0x0004 - 0x0000)
struct NetworkWork_OnLoadCompleteEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkWork_OnLoadCompleteEvent) == 0x000004, "Wrong alignment on NetworkWork_OnLoadCompleteEvent");
static_assert(sizeof(NetworkWork_OnLoadCompleteEvent) == 0x000004, "Wrong size on NetworkWork_OnLoadCompleteEvent");
static_assert(offsetof(NetworkWork_OnLoadCompleteEvent, RequestId) == 0x000000, "Member 'NetworkWork_OnLoadCompleteEvent::RequestId' has a wrong offset!");

// DelegateFunction GameModule.NetworkWork.SquadChangeDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct NetworkWork_SquadChangeDelegate__DelegateSignature final
{
public:
	int32                                         SquadNum;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkWork_SquadChangeDelegate__DelegateSignature) == 0x000004, "Wrong alignment on NetworkWork_SquadChangeDelegate__DelegateSignature");
static_assert(sizeof(NetworkWork_SquadChangeDelegate__DelegateSignature) == 0x000004, "Wrong size on NetworkWork_SquadChangeDelegate__DelegateSignature");
static_assert(offsetof(NetworkWork_SquadChangeDelegate__DelegateSignature, SquadNum) == 0x000000, "Member 'NetworkWork_SquadChangeDelegate__DelegateSignature::SquadNum' has a wrong offset!");

// DelegateFunction GameModule.NetworkWork.VoiceChatEvent__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct NetworkWork_VoiceChatEvent__DelegateSignature final
{
public:
	class FString                                 UniqueNetId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkWork_VoiceChatEvent__DelegateSignature) == 0x000008, "Wrong alignment on NetworkWork_VoiceChatEvent__DelegateSignature");
static_assert(sizeof(NetworkWork_VoiceChatEvent__DelegateSignature) == 0x000010, "Wrong size on NetworkWork_VoiceChatEvent__DelegateSignature");
static_assert(offsetof(NetworkWork_VoiceChatEvent__DelegateSignature, UniqueNetId) == 0x000000, "Member 'NetworkWork_VoiceChatEvent__DelegateSignature::UniqueNetId' has a wrong offset!");

// Function GameModule.NetworkWork.BP_GetSquadLeaderId
// 0x0010 (0x0010 - 0x0000)
struct NetworkWork_BP_GetSquadLeaderId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkWork_BP_GetSquadLeaderId) == 0x000008, "Wrong alignment on NetworkWork_BP_GetSquadLeaderId");
static_assert(sizeof(NetworkWork_BP_GetSquadLeaderId) == 0x000010, "Wrong size on NetworkWork_BP_GetSquadLeaderId");
static_assert(offsetof(NetworkWork_BP_GetSquadLeaderId, ReturnValue) == 0x000000, "Member 'NetworkWork_BP_GetSquadLeaderId::ReturnValue' has a wrong offset!");

// Function GameModule.NetworkWork.BP_IsSquadLeader
// 0x0001 (0x0001 - 0x0000)
struct NetworkWork_BP_IsSquadLeader final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkWork_BP_IsSquadLeader) == 0x000001, "Wrong alignment on NetworkWork_BP_IsSquadLeader");
static_assert(sizeof(NetworkWork_BP_IsSquadLeader) == 0x000001, "Wrong size on NetworkWork_BP_IsSquadLeader");
static_assert(offsetof(NetworkWork_BP_IsSquadLeader, ReturnValue) == 0x000000, "Member 'NetworkWork_BP_IsSquadLeader::ReturnValue' has a wrong offset!");

// Function GameModule.NetworkWork.BP_SquadMemberIsCombat
// 0x0001 (0x0001 - 0x0000)
struct NetworkWork_BP_SquadMemberIsCombat final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkWork_BP_SquadMemberIsCombat) == 0x000001, "Wrong alignment on NetworkWork_BP_SquadMemberIsCombat");
static_assert(sizeof(NetworkWork_BP_SquadMemberIsCombat) == 0x000001, "Wrong size on NetworkWork_BP_SquadMemberIsCombat");
static_assert(offsetof(NetworkWork_BP_SquadMemberIsCombat, ReturnValue) == 0x000000, "Member 'NetworkWork_BP_SquadMemberIsCombat::ReturnValue' has a wrong offset!");

// Function GameModule.NetworkWork.GetMuteMap
// 0x0050 (0x0050 - 0x0000)
struct NetworkWork_GetMuteMap final
{
public:
	TMap<class FString, bool>                     ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkWork_GetMuteMap) == 0x000008, "Wrong alignment on NetworkWork_GetMuteMap");
static_assert(sizeof(NetworkWork_GetMuteMap) == 0x000050, "Wrong size on NetworkWork_GetMuteMap");
static_assert(offsetof(NetworkWork_GetMuteMap, ReturnValue) == 0x000000, "Member 'NetworkWork_GetMuteMap::ReturnValue' has a wrong offset!");

// Function GameModule.NoticeWindowWidget.CreateButtonTileView
// 0x0004 (0x0004 - 0x0000)
struct NoticeWindowWidget_CreateButtonTileView final
{
public:
	int32                                         NumberToMake;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NoticeWindowWidget_CreateButtonTileView) == 0x000004, "Wrong alignment on NoticeWindowWidget_CreateButtonTileView");
static_assert(sizeof(NoticeWindowWidget_CreateButtonTileView) == 0x000004, "Wrong size on NoticeWindowWidget_CreateButtonTileView");
static_assert(offsetof(NoticeWindowWidget_CreateButtonTileView, NumberToMake) == 0x000000, "Member 'NoticeWindowWidget_CreateButtonTileView::NumberToMake' has a wrong offset!");

// Function GameModule.NoticeWindowWidget.GetNoticeText
// 0x0020 (0x0020 - 0x0000)
struct NoticeWindowWidget_GetNoticeText final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NoticeWindowWidget_GetNoticeText) == 0x000008, "Wrong alignment on NoticeWindowWidget_GetNoticeText");
static_assert(sizeof(NoticeWindowWidget_GetNoticeText) == 0x000020, "Wrong size on NoticeWindowWidget_GetNoticeText");
static_assert(offsetof(NoticeWindowWidget_GetNoticeText, Code) == 0x000000, "Member 'NoticeWindowWidget_GetNoticeText::Code' has a wrong offset!");
static_assert(offsetof(NoticeWindowWidget_GetNoticeText, ReturnValue) == 0x000008, "Member 'NoticeWindowWidget_GetNoticeText::ReturnValue' has a wrong offset!");

// Function GameModule.NoticeWindowWidget.NextButtonTileView
// 0x0001 (0x0001 - 0x0000)
struct NoticeWindowWidget_NextButtonTileView final
{
public:
	bool                                          NotMaxNext;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NoticeWindowWidget_NextButtonTileView) == 0x000001, "Wrong alignment on NoticeWindowWidget_NextButtonTileView");
static_assert(sizeof(NoticeWindowWidget_NextButtonTileView) == 0x000001, "Wrong size on NoticeWindowWidget_NextButtonTileView");
static_assert(offsetof(NoticeWindowWidget_NextButtonTileView, NotMaxNext) == 0x000000, "Member 'NoticeWindowWidget_NextButtonTileView::NotMaxNext' has a wrong offset!");

// Function GameModule.NoticeWindowWidget.PrevButtonTileView
// 0x0001 (0x0001 - 0x0000)
struct NoticeWindowWidget_PrevButtonTileView final
{
public:
	bool                                          NotMinPrev;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NoticeWindowWidget_PrevButtonTileView) == 0x000001, "Wrong alignment on NoticeWindowWidget_PrevButtonTileView");
static_assert(sizeof(NoticeWindowWidget_PrevButtonTileView) == 0x000001, "Wrong size on NoticeWindowWidget_PrevButtonTileView");
static_assert(offsetof(NoticeWindowWidget_PrevButtonTileView, NotMinPrev) == 0x000000, "Member 'NoticeWindowWidget_PrevButtonTileView::NotMinPrev' has a wrong offset!");

// Function GameModule.NoticeWindowWidget.SplitStringByCarriageReturn
// 0x0020 (0x0020 - 0x0000)
struct NoticeWindowWidget_SplitStringByCarriageReturn final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NoticeWindowWidget_SplitStringByCarriageReturn) == 0x000008, "Wrong alignment on NoticeWindowWidget_SplitStringByCarriageReturn");
static_assert(sizeof(NoticeWindowWidget_SplitStringByCarriageReturn) == 0x000020, "Wrong size on NoticeWindowWidget_SplitStringByCarriageReturn");
static_assert(offsetof(NoticeWindowWidget_SplitStringByCarriageReturn, Message) == 0x000000, "Member 'NoticeWindowWidget_SplitStringByCarriageReturn::Message' has a wrong offset!");
static_assert(offsetof(NoticeWindowWidget_SplitStringByCarriageReturn, ReturnValue) == 0x000010, "Member 'NoticeWindowWidget_SplitStringByCarriageReturn::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerControllerGame.DoCrash
// 0x0004 (0x0004 - 0x0000)
struct PlayerControllerGame_DoCrash final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerGame_DoCrash) == 0x000004, "Wrong alignment on PlayerControllerGame_DoCrash");
static_assert(sizeof(PlayerControllerGame_DoCrash) == 0x000004, "Wrong size on PlayerControllerGame_DoCrash");
static_assert(offsetof(PlayerControllerGame_DoCrash, Type) == 0x000000, "Member 'PlayerControllerGame_DoCrash::Type' has a wrong offset!");

// Function GameModule.PlayerControllerGame.ServerFlipDevMenu
// 0x0010 (0x0010 - 0x0000)
struct PlayerControllerGame_ServerFlipDevMenu final
{
public:
	TArray<struct FDevelopMenuItemData>           MenuItemsData;                                     // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerGame_ServerFlipDevMenu) == 0x000008, "Wrong alignment on PlayerControllerGame_ServerFlipDevMenu");
static_assert(sizeof(PlayerControllerGame_ServerFlipDevMenu) == 0x000010, "Wrong size on PlayerControllerGame_ServerFlipDevMenu");
static_assert(offsetof(PlayerControllerGame_ServerFlipDevMenu, MenuItemsData) == 0x000000, "Member 'PlayerControllerGame_ServerFlipDevMenu::MenuItemsData' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetColorPaletteColor
// 0x0018 (0x0018 - 0x0000)
struct PlayerDatabaseWork_BP_GetColorPaletteColor final
{
public:
	EAvatarColorParts                             Parts;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetColorPaletteColor) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_GetColorPaletteColor");
static_assert(sizeof(PlayerDatabaseWork_BP_GetColorPaletteColor) == 0x000018, "Wrong size on PlayerDatabaseWork_BP_GetColorPaletteColor");
static_assert(offsetof(PlayerDatabaseWork_BP_GetColorPaletteColor, Parts) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetColorPaletteColor::Parts' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetColorPaletteColor, Index_0) == 0x000004, "Member 'PlayerDatabaseWork_BP_GetColorPaletteColor::Index_0' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetColorPaletteColor, ReturnValue) == 0x000008, "Member 'PlayerDatabaseWork_BP_GetColorPaletteColor::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetColorPaletteNum
// 0x0008 (0x0008 - 0x0000)
struct PlayerDatabaseWork_BP_GetColorPaletteNum final
{
public:
	EAvatarColorParts                             Parts;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetColorPaletteNum) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_GetColorPaletteNum");
static_assert(sizeof(PlayerDatabaseWork_BP_GetColorPaletteNum) == 0x000008, "Wrong size on PlayerDatabaseWork_BP_GetColorPaletteNum");
static_assert(offsetof(PlayerDatabaseWork_BP_GetColorPaletteNum, Parts) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetColorPaletteNum::Parts' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetColorPaletteNum, ReturnValue) == 0x000004, "Member 'PlayerDatabaseWork_BP_GetColorPaletteNum::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_IsAvatarCharacterId
// 0x0002 (0x0002 - 0x0000)
struct PlayerDatabaseWork_BP_IsAvatarCharacterId final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_IsAvatarCharacterId) == 0x000001, "Wrong alignment on PlayerDatabaseWork_BP_IsAvatarCharacterId");
static_assert(sizeof(PlayerDatabaseWork_BP_IsAvatarCharacterId) == 0x000002, "Wrong size on PlayerDatabaseWork_BP_IsAvatarCharacterId");
static_assert(offsetof(PlayerDatabaseWork_BP_IsAvatarCharacterId, CharacterId) == 0x000000, "Member 'PlayerDatabaseWork_BP_IsAvatarCharacterId::CharacterId' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_IsAvatarCharacterId, ReturnValue) == 0x000001, "Member 'PlayerDatabaseWork_BP_IsAvatarCharacterId::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.AddItem
// 0x0490 (0x0490 - 0x0000)
struct PlayerDatabaseWork_AddItem final
{
public:
	struct FDbItemCategoryParam                   Item;                                              // 0x0000(0x0488)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0488(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48C[0x4];                                      // 0x048C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerDatabaseWork_AddItem) == 0x000008, "Wrong alignment on PlayerDatabaseWork_AddItem");
static_assert(sizeof(PlayerDatabaseWork_AddItem) == 0x000490, "Wrong size on PlayerDatabaseWork_AddItem");
static_assert(offsetof(PlayerDatabaseWork_AddItem, Item) == 0x000000, "Member 'PlayerDatabaseWork_AddItem::Item' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_AddItem, Quantity) == 0x000488, "Member 'PlayerDatabaseWork_AddItem::Quantity' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetAvatarEditColorType
// 0x0001 (0x0001 - 0x0000)
struct PlayerDatabaseWork_BP_GetAvatarEditColorType final
{
public:
	EAvatarDetailedAppearanceColorSettingItem     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetAvatarEditColorType) == 0x000001, "Wrong alignment on PlayerDatabaseWork_BP_GetAvatarEditColorType");
static_assert(sizeof(PlayerDatabaseWork_BP_GetAvatarEditColorType) == 0x000001, "Wrong size on PlayerDatabaseWork_BP_GetAvatarEditColorType");
static_assert(offsetof(PlayerDatabaseWork_BP_GetAvatarEditColorType, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetAvatarEditColorType::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetAvatarEditPartsType
// 0x0001 (0x0001 - 0x0000)
struct PlayerDatabaseWork_BP_GetAvatarEditPartsType final
{
public:
	EAvatarDetailedAppearanceSettingDetailItem    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetAvatarEditPartsType) == 0x000001, "Wrong alignment on PlayerDatabaseWork_BP_GetAvatarEditPartsType");
static_assert(sizeof(PlayerDatabaseWork_BP_GetAvatarEditPartsType) == 0x000001, "Wrong size on PlayerDatabaseWork_BP_GetAvatarEditPartsType");
static_assert(offsetof(PlayerDatabaseWork_BP_GetAvatarEditPartsType, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetAvatarEditPartsType::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetCostumeCodeCharacterParamSnapshot
// 0x0008 (0x0008 - 0x0000)
struct PlayerDatabaseWork_BP_GetCostumeCodeCharacterParamSnapshot final
{
public:
	int32                                         CharaCode;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetCostumeCodeCharacterParamSnapshot) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_GetCostumeCodeCharacterParamSnapshot");
static_assert(sizeof(PlayerDatabaseWork_BP_GetCostumeCodeCharacterParamSnapshot) == 0x000008, "Wrong size on PlayerDatabaseWork_BP_GetCostumeCodeCharacterParamSnapshot");
static_assert(offsetof(PlayerDatabaseWork_BP_GetCostumeCodeCharacterParamSnapshot, CharaCode) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetCostumeCodeCharacterParamSnapshot::CharaCode' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetCostumeCodeCharacterParamSnapshot, ReturnValue) == 0x000004, "Member 'PlayerDatabaseWork_BP_GetCostumeCodeCharacterParamSnapshot::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetCostumeDisplayNameFromItemCode
// 0x0028 (0x0028 - 0x0000)
struct PlayerDatabaseWork_BP_GetCostumeDisplayNameFromItemCode final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemCode;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLine;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetCostumeDisplayNameFromItemCode) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_GetCostumeDisplayNameFromItemCode");
static_assert(sizeof(PlayerDatabaseWork_BP_GetCostumeDisplayNameFromItemCode) == 0x000028, "Wrong size on PlayerDatabaseWork_BP_GetCostumeDisplayNameFromItemCode");
static_assert(offsetof(PlayerDatabaseWork_BP_GetCostumeDisplayNameFromItemCode, CharacterId) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetCostumeDisplayNameFromItemCode::CharacterId' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetCostumeDisplayNameFromItemCode, ItemCode) == 0x000004, "Member 'PlayerDatabaseWork_BP_GetCostumeDisplayNameFromItemCode::ItemCode' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetCostumeDisplayNameFromItemCode, IsLine) == 0x000008, "Member 'PlayerDatabaseWork_BP_GetCostumeDisplayNameFromItemCode::IsLine' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetCostumeDisplayNameFromItemCode, ReturnValue) == 0x000010, "Member 'PlayerDatabaseWork_BP_GetCostumeDisplayNameFromItemCode::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetCurrencyDescriptionText
// 0x0020 (0x0020 - 0x0000)
struct PlayerDatabaseWork_BP_GetCurrencyDescriptionText final
{
public:
	int32                                         ItemCode;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetCurrencyDescriptionText) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_GetCurrencyDescriptionText");
static_assert(sizeof(PlayerDatabaseWork_BP_GetCurrencyDescriptionText) == 0x000020, "Wrong size on PlayerDatabaseWork_BP_GetCurrencyDescriptionText");
static_assert(offsetof(PlayerDatabaseWork_BP_GetCurrencyDescriptionText, ItemCode) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetCurrencyDescriptionText::ItemCode' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetCurrencyDescriptionText, ReturnValue) == 0x000008, "Member 'PlayerDatabaseWork_BP_GetCurrencyDescriptionText::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetCurrencyDisplayName
// 0x0020 (0x0020 - 0x0000)
struct PlayerDatabaseWork_BP_GetCurrencyDisplayName final
{
public:
	int32                                         ItemCode;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetCurrencyDisplayName) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_GetCurrencyDisplayName");
static_assert(sizeof(PlayerDatabaseWork_BP_GetCurrencyDisplayName) == 0x000020, "Wrong size on PlayerDatabaseWork_BP_GetCurrencyDisplayName");
static_assert(offsetof(PlayerDatabaseWork_BP_GetCurrencyDisplayName, ItemCode) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetCurrencyDisplayName::ItemCode' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetCurrencyDisplayName, ReturnValue) == 0x000008, "Member 'PlayerDatabaseWork_BP_GetCurrencyDisplayName::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetDefaultMyADDataMessageCode
// 0x0004 (0x0004 - 0x0000)
struct PlayerDatabaseWork_BP_GetDefaultMyADDataMessageCode final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetDefaultMyADDataMessageCode) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_GetDefaultMyADDataMessageCode");
static_assert(sizeof(PlayerDatabaseWork_BP_GetDefaultMyADDataMessageCode) == 0x000004, "Wrong size on PlayerDatabaseWork_BP_GetDefaultMyADDataMessageCode");
static_assert(offsetof(PlayerDatabaseWork_BP_GetDefaultMyADDataMessageCode, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetDefaultMyADDataMessageCode::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetDefaultMyADDataPartsCodes
// 0x0010 (0x0010 - 0x0000)
struct PlayerDatabaseWork_BP_GetDefaultMyADDataPartsCodes final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetDefaultMyADDataPartsCodes) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_GetDefaultMyADDataPartsCodes");
static_assert(sizeof(PlayerDatabaseWork_BP_GetDefaultMyADDataPartsCodes) == 0x000010, "Wrong size on PlayerDatabaseWork_BP_GetDefaultMyADDataPartsCodes");
static_assert(offsetof(PlayerDatabaseWork_BP_GetDefaultMyADDataPartsCodes, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetDefaultMyADDataPartsCodes::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetEmoteCodesCharacterParamSnapshot
// 0x0018 (0x0018 - 0x0000)
struct PlayerDatabaseWork_BP_GetEmoteCodesCharacterParamSnapshot final
{
public:
	int32                                         CharaCode;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetEmoteCodesCharacterParamSnapshot) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_GetEmoteCodesCharacterParamSnapshot");
static_assert(sizeof(PlayerDatabaseWork_BP_GetEmoteCodesCharacterParamSnapshot) == 0x000018, "Wrong size on PlayerDatabaseWork_BP_GetEmoteCodesCharacterParamSnapshot");
static_assert(offsetof(PlayerDatabaseWork_BP_GetEmoteCodesCharacterParamSnapshot, CharaCode) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetEmoteCodesCharacterParamSnapshot::CharaCode' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetEmoteCodesCharacterParamSnapshot, ReturnValue) == 0x000008, "Member 'PlayerDatabaseWork_BP_GetEmoteCodesCharacterParamSnapshot::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetEmoteDisplayNameFromItemCode
// 0x0028 (0x0028 - 0x0000)
struct PlayerDatabaseWork_BP_GetEmoteDisplayNameFromItemCode final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemCode;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLine;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetEmoteDisplayNameFromItemCode) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_GetEmoteDisplayNameFromItemCode");
static_assert(sizeof(PlayerDatabaseWork_BP_GetEmoteDisplayNameFromItemCode) == 0x000028, "Wrong size on PlayerDatabaseWork_BP_GetEmoteDisplayNameFromItemCode");
static_assert(offsetof(PlayerDatabaseWork_BP_GetEmoteDisplayNameFromItemCode, CharacterId) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetEmoteDisplayNameFromItemCode::CharacterId' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetEmoteDisplayNameFromItemCode, ItemCode) == 0x000004, "Member 'PlayerDatabaseWork_BP_GetEmoteDisplayNameFromItemCode::ItemCode' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetEmoteDisplayNameFromItemCode, IsLine) == 0x000008, "Member 'PlayerDatabaseWork_BP_GetEmoteDisplayNameFromItemCode::IsLine' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetEmoteDisplayNameFromItemCode, ReturnValue) == 0x000010, "Member 'PlayerDatabaseWork_BP_GetEmoteDisplayNameFromItemCode::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetMdCharacterName
// 0x0028 (0x0028 - 0x0000)
struct PlayerDatabaseWork_BP_GetMdCharacterName final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterId                                  CharacterId;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetMdCharacterName) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_GetMdCharacterName");
static_assert(sizeof(PlayerDatabaseWork_BP_GetMdCharacterName) == 0x000028, "Wrong size on PlayerDatabaseWork_BP_GetMdCharacterName");
static_assert(offsetof(PlayerDatabaseWork_BP_GetMdCharacterName, WorldContextObject) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetMdCharacterName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetMdCharacterName, CharacterId) == 0x000008, "Member 'PlayerDatabaseWork_BP_GetMdCharacterName::CharacterId' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetMdCharacterName, ReturnValue) == 0x000010, "Member 'PlayerDatabaseWork_BP_GetMdCharacterName::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetMdCharacterNameAlphabet
// 0x0020 (0x0020 - 0x0000)
struct PlayerDatabaseWork_BP_GetMdCharacterNameAlphabet final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterId                                  CharacterId;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetMdCharacterNameAlphabet) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_GetMdCharacterNameAlphabet");
static_assert(sizeof(PlayerDatabaseWork_BP_GetMdCharacterNameAlphabet) == 0x000020, "Wrong size on PlayerDatabaseWork_BP_GetMdCharacterNameAlphabet");
static_assert(offsetof(PlayerDatabaseWork_BP_GetMdCharacterNameAlphabet, WorldContextObject) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetMdCharacterNameAlphabet::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetMdCharacterNameAlphabet, CharacterId) == 0x000008, "Member 'PlayerDatabaseWork_BP_GetMdCharacterNameAlphabet::CharacterId' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetMdCharacterNameAlphabet, ReturnValue) == 0x000010, "Member 'PlayerDatabaseWork_BP_GetMdCharacterNameAlphabet::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetPageNo
// 0x0004 (0x0004 - 0x0000)
struct PlayerDatabaseWork_BP_GetPageNo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetPageNo) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_GetPageNo");
static_assert(sizeof(PlayerDatabaseWork_BP_GetPageNo) == 0x000004, "Wrong size on PlayerDatabaseWork_BP_GetPageNo");
static_assert(offsetof(PlayerDatabaseWork_BP_GetPageNo, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetPageNo::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetSelectedFriendSort
// 0x0001 (0x0001 - 0x0000)
struct PlayerDatabaseWork_BP_GetSelectedFriendSort final
{
public:
	EFriendListSortOrder                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetSelectedFriendSort) == 0x000001, "Wrong alignment on PlayerDatabaseWork_BP_GetSelectedFriendSort");
static_assert(sizeof(PlayerDatabaseWork_BP_GetSelectedFriendSort) == 0x000001, "Wrong size on PlayerDatabaseWork_BP_GetSelectedFriendSort");
static_assert(offsetof(PlayerDatabaseWork_BP_GetSelectedFriendSort, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetSelectedFriendSort::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetSelectedFriendStatus
// 0x0001 (0x0001 - 0x0000)
struct PlayerDatabaseWork_BP_GetSelectedFriendStatus final
{
public:
	EFriendStatus                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetSelectedFriendStatus) == 0x000001, "Wrong alignment on PlayerDatabaseWork_BP_GetSelectedFriendStatus");
static_assert(sizeof(PlayerDatabaseWork_BP_GetSelectedFriendStatus) == 0x000001, "Wrong size on PlayerDatabaseWork_BP_GetSelectedFriendStatus");
static_assert(offsetof(PlayerDatabaseWork_BP_GetSelectedFriendStatus, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetSelectedFriendStatus::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetSelectedFriendType
// 0x0001 (0x0001 - 0x0000)
struct PlayerDatabaseWork_BP_GetSelectedFriendType final
{
public:
	EFriendListType                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetSelectedFriendType) == 0x000001, "Wrong alignment on PlayerDatabaseWork_BP_GetSelectedFriendType");
static_assert(sizeof(PlayerDatabaseWork_BP_GetSelectedFriendType) == 0x000001, "Wrong size on PlayerDatabaseWork_BP_GetSelectedFriendType");
static_assert(offsetof(PlayerDatabaseWork_BP_GetSelectedFriendType, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetSelectedFriendType::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetSelectedItemSort
// 0x0001 (0x0001 - 0x0000)
struct PlayerDatabaseWork_BP_GetSelectedItemSort final
{
public:
	EItemListSortOrder                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetSelectedItemSort) == 0x000001, "Wrong alignment on PlayerDatabaseWork_BP_GetSelectedItemSort");
static_assert(sizeof(PlayerDatabaseWork_BP_GetSelectedItemSort) == 0x000001, "Wrong size on PlayerDatabaseWork_BP_GetSelectedItemSort");
static_assert(offsetof(PlayerDatabaseWork_BP_GetSelectedItemSort, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetSelectedItemSort::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetSelectedPlayerId
// 0x0010 (0x0010 - 0x0000)
struct PlayerDatabaseWork_BP_GetSelectedPlayerId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetSelectedPlayerId) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_GetSelectedPlayerId");
static_assert(sizeof(PlayerDatabaseWork_BP_GetSelectedPlayerId) == 0x000010, "Wrong size on PlayerDatabaseWork_BP_GetSelectedPlayerId");
static_assert(offsetof(PlayerDatabaseWork_BP_GetSelectedPlayerId, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetSelectedPlayerId::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetVariationDisplayName
// 0x0020 (0x0020 - 0x0000)
struct PlayerDatabaseWork_BP_GetVariationDisplayName final
{
public:
	int32                                         ItemCode;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetVariationDisplayName) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_GetVariationDisplayName");
static_assert(sizeof(PlayerDatabaseWork_BP_GetVariationDisplayName) == 0x000020, "Wrong size on PlayerDatabaseWork_BP_GetVariationDisplayName");
static_assert(offsetof(PlayerDatabaseWork_BP_GetVariationDisplayName, ItemCode) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetVariationDisplayName::ItemCode' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetVariationDisplayName, ReturnValue) == 0x000008, "Member 'PlayerDatabaseWork_BP_GetVariationDisplayName::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetVoiceCodesCharacterParamSnapshot
// 0x0018 (0x0018 - 0x0000)
struct PlayerDatabaseWork_BP_GetVoiceCodesCharacterParamSnapshot final
{
public:
	int32                                         CharaCode;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetVoiceCodesCharacterParamSnapshot) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_GetVoiceCodesCharacterParamSnapshot");
static_assert(sizeof(PlayerDatabaseWork_BP_GetVoiceCodesCharacterParamSnapshot) == 0x000018, "Wrong size on PlayerDatabaseWork_BP_GetVoiceCodesCharacterParamSnapshot");
static_assert(offsetof(PlayerDatabaseWork_BP_GetVoiceCodesCharacterParamSnapshot, CharaCode) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetVoiceCodesCharacterParamSnapshot::CharaCode' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetVoiceCodesCharacterParamSnapshot, ReturnValue) == 0x000008, "Member 'PlayerDatabaseWork_BP_GetVoiceCodesCharacterParamSnapshot::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetVoiceDisplayNameFromItemCode
// 0x0028 (0x0028 - 0x0000)
struct PlayerDatabaseWork_BP_GetVoiceDisplayNameFromItemCode final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemCode;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLine;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetVoiceDisplayNameFromItemCode) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_GetVoiceDisplayNameFromItemCode");
static_assert(sizeof(PlayerDatabaseWork_BP_GetVoiceDisplayNameFromItemCode) == 0x000028, "Wrong size on PlayerDatabaseWork_BP_GetVoiceDisplayNameFromItemCode");
static_assert(offsetof(PlayerDatabaseWork_BP_GetVoiceDisplayNameFromItemCode, CharacterId) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetVoiceDisplayNameFromItemCode::CharacterId' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetVoiceDisplayNameFromItemCode, ItemCode) == 0x000004, "Member 'PlayerDatabaseWork_BP_GetVoiceDisplayNameFromItemCode::ItemCode' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetVoiceDisplayNameFromItemCode, IsLine) == 0x000008, "Member 'PlayerDatabaseWork_BP_GetVoiceDisplayNameFromItemCode::IsLine' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetVoiceDisplayNameFromItemCode, ReturnValue) == 0x000010, "Member 'PlayerDatabaseWork_BP_GetVoiceDisplayNameFromItemCode::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetVoiceSerifTextFromItemCode
// 0x0020 (0x0020 - 0x0000)
struct PlayerDatabaseWork_BP_GetVoiceSerifTextFromItemCode final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemCode;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetVoiceSerifTextFromItemCode) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_GetVoiceSerifTextFromItemCode");
static_assert(sizeof(PlayerDatabaseWork_BP_GetVoiceSerifTextFromItemCode) == 0x000020, "Wrong size on PlayerDatabaseWork_BP_GetVoiceSerifTextFromItemCode");
static_assert(offsetof(PlayerDatabaseWork_BP_GetVoiceSerifTextFromItemCode, CharacterId) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetVoiceSerifTextFromItemCode::CharacterId' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetVoiceSerifTextFromItemCode, ItemCode) == 0x000004, "Member 'PlayerDatabaseWork_BP_GetVoiceSerifTextFromItemCode::ItemCode' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetVoiceSerifTextFromItemCode, ReturnValue) == 0x000008, "Member 'PlayerDatabaseWork_BP_GetVoiceSerifTextFromItemCode::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_InitializationMyADDisplayDataById
// 0x0010 (0x0010 - 0x0000)
struct PlayerDatabaseWork_BP_InitializationMyADDisplayDataById final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_InitializationMyADDisplayDataById) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_InitializationMyADDisplayDataById");
static_assert(sizeof(PlayerDatabaseWork_BP_InitializationMyADDisplayDataById) == 0x000010, "Wrong size on PlayerDatabaseWork_BP_InitializationMyADDisplayDataById");
static_assert(offsetof(PlayerDatabaseWork_BP_InitializationMyADDisplayDataById, ID) == 0x000000, "Member 'PlayerDatabaseWork_BP_InitializationMyADDisplayDataById::ID' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_InitializationMyADDisplayDataByIndex
// 0x0004 (0x0004 - 0x0000)
struct PlayerDatabaseWork_BP_InitializationMyADDisplayDataByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_InitializationMyADDisplayDataByIndex) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_InitializationMyADDisplayDataByIndex");
static_assert(sizeof(PlayerDatabaseWork_BP_InitializationMyADDisplayDataByIndex) == 0x000004, "Wrong size on PlayerDatabaseWork_BP_InitializationMyADDisplayDataByIndex");
static_assert(offsetof(PlayerDatabaseWork_BP_InitializationMyADDisplayDataByIndex, Index_0) == 0x000000, "Member 'PlayerDatabaseWork_BP_InitializationMyADDisplayDataByIndex::Index_0' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_IsUpdateCostumeCharacterParamSnapshot
// 0x0008 (0x0008 - 0x0000)
struct PlayerDatabaseWork_BP_IsUpdateCostumeCharacterParamSnapshot final
{
public:
	int32                                         CharaCode;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerDatabaseWork_BP_IsUpdateCostumeCharacterParamSnapshot) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_IsUpdateCostumeCharacterParamSnapshot");
static_assert(sizeof(PlayerDatabaseWork_BP_IsUpdateCostumeCharacterParamSnapshot) == 0x000008, "Wrong size on PlayerDatabaseWork_BP_IsUpdateCostumeCharacterParamSnapshot");
static_assert(offsetof(PlayerDatabaseWork_BP_IsUpdateCostumeCharacterParamSnapshot, CharaCode) == 0x000000, "Member 'PlayerDatabaseWork_BP_IsUpdateCostumeCharacterParamSnapshot::CharaCode' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_IsUpdateCostumeCharacterParamSnapshot, ReturnValue) == 0x000004, "Member 'PlayerDatabaseWork_BP_IsUpdateCostumeCharacterParamSnapshot::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_IsUpdateVoiceCharacterParamSnapshot
// 0x0008 (0x0008 - 0x0000)
struct PlayerDatabaseWork_BP_IsUpdateVoiceCharacterParamSnapshot final
{
public:
	int32                                         CharaCode;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerDatabaseWork_BP_IsUpdateVoiceCharacterParamSnapshot) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_IsUpdateVoiceCharacterParamSnapshot");
static_assert(sizeof(PlayerDatabaseWork_BP_IsUpdateVoiceCharacterParamSnapshot) == 0x000008, "Wrong size on PlayerDatabaseWork_BP_IsUpdateVoiceCharacterParamSnapshot");
static_assert(offsetof(PlayerDatabaseWork_BP_IsUpdateVoiceCharacterParamSnapshot, CharaCode) == 0x000000, "Member 'PlayerDatabaseWork_BP_IsUpdateVoiceCharacterParamSnapshot::CharaCode' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_IsUpdateVoiceCharacterParamSnapshot, ReturnValue) == 0x000004, "Member 'PlayerDatabaseWork_BP_IsUpdateVoiceCharacterParamSnapshot::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_RestoreCostumeCharacterParamSnapshot
// 0x0004 (0x0004 - 0x0000)
struct PlayerDatabaseWork_BP_RestoreCostumeCharacterParamSnapshot final
{
public:
	int32                                         CharaCode;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_RestoreCostumeCharacterParamSnapshot) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_RestoreCostumeCharacterParamSnapshot");
static_assert(sizeof(PlayerDatabaseWork_BP_RestoreCostumeCharacterParamSnapshot) == 0x000004, "Wrong size on PlayerDatabaseWork_BP_RestoreCostumeCharacterParamSnapshot");
static_assert(offsetof(PlayerDatabaseWork_BP_RestoreCostumeCharacterParamSnapshot, CharaCode) == 0x000000, "Member 'PlayerDatabaseWork_BP_RestoreCostumeCharacterParamSnapshot::CharaCode' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_RestoreSnapshot
// 0x0004 (0x0004 - 0x0000)
struct PlayerDatabaseWork_BP_RestoreSnapshot final
{
public:
	int32                                         No;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_RestoreSnapshot) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_RestoreSnapshot");
static_assert(sizeof(PlayerDatabaseWork_BP_RestoreSnapshot) == 0x000004, "Wrong size on PlayerDatabaseWork_BP_RestoreSnapshot");
static_assert(offsetof(PlayerDatabaseWork_BP_RestoreSnapshot, No) == 0x000000, "Member 'PlayerDatabaseWork_BP_RestoreSnapshot::No' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SaveCharacterParamSnapshot
// 0x1858 (0x1858 - 0x0000)
struct PlayerDatabaseWork_BP_SaveCharacterParamSnapshot final
{
public:
	struct FDbMyCharacterParam                    CharacterData;                                     // 0x0000(0x1858)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SaveCharacterParamSnapshot) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_SaveCharacterParamSnapshot");
static_assert(sizeof(PlayerDatabaseWork_BP_SaveCharacterParamSnapshot) == 0x001858, "Wrong size on PlayerDatabaseWork_BP_SaveCharacterParamSnapshot");
static_assert(offsetof(PlayerDatabaseWork_BP_SaveCharacterParamSnapshot, CharacterData) == 0x000000, "Member 'PlayerDatabaseWork_BP_SaveCharacterParamSnapshot::CharacterData' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SaveMyADDataSnapshot
// 0x0004 (0x0004 - 0x0000)
struct PlayerDatabaseWork_BP_SaveMyADDataSnapshot final
{
public:
	int32                                         ParamIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SaveMyADDataSnapshot) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_SaveMyADDataSnapshot");
static_assert(sizeof(PlayerDatabaseWork_BP_SaveMyADDataSnapshot) == 0x000004, "Wrong size on PlayerDatabaseWork_BP_SaveMyADDataSnapshot");
static_assert(offsetof(PlayerDatabaseWork_BP_SaveMyADDataSnapshot, ParamIndex) == 0x000000, "Member 'PlayerDatabaseWork_BP_SaveMyADDataSnapshot::ParamIndex' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SaveSnapshot
// 0x0004 (0x0004 - 0x0000)
struct PlayerDatabaseWork_BP_SaveSnapshot final
{
public:
	int32                                         No;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SaveSnapshot) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_SaveSnapshot");
static_assert(sizeof(PlayerDatabaseWork_BP_SaveSnapshot) == 0x000004, "Wrong size on PlayerDatabaseWork_BP_SaveSnapshot");
static_assert(offsetof(PlayerDatabaseWork_BP_SaveSnapshot, No) == 0x000000, "Member 'PlayerDatabaseWork_BP_SaveSnapshot::No' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetAccessoryIds
// 0x0018 (0x0018 - 0x0000)
struct PlayerDatabaseWork_BP_SetAccessoryIds final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 AccessoryIds;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetAccessoryIds) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_SetAccessoryIds");
static_assert(sizeof(PlayerDatabaseWork_BP_SetAccessoryIds) == 0x000018, "Wrong size on PlayerDatabaseWork_BP_SetAccessoryIds");
static_assert(offsetof(PlayerDatabaseWork_BP_SetAccessoryIds, CharacterId) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetAccessoryIds::CharacterId' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_SetAccessoryIds, AccessoryIds) == 0x000008, "Member 'PlayerDatabaseWork_BP_SetAccessoryIds::AccessoryIds' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetAvatarBodyPhysique
// 0x0004 (0x0004 - 0x0000)
struct PlayerDatabaseWork_BP_SetAvatarBodyPhysique final
{
public:
	float                                         Physique;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetAvatarBodyPhysique) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_SetAvatarBodyPhysique");
static_assert(sizeof(PlayerDatabaseWork_BP_SetAvatarBodyPhysique) == 0x000004, "Wrong size on PlayerDatabaseWork_BP_SetAvatarBodyPhysique");
static_assert(offsetof(PlayerDatabaseWork_BP_SetAvatarBodyPhysique, Physique) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetAvatarBodyPhysique::Physique' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetAvatarBodyScale
// 0x0004 (0x0004 - 0x0000)
struct PlayerDatabaseWork_BP_SetAvatarBodyScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetAvatarBodyScale) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_SetAvatarBodyScale");
static_assert(sizeof(PlayerDatabaseWork_BP_SetAvatarBodyScale) == 0x000004, "Wrong size on PlayerDatabaseWork_BP_SetAvatarBodyScale");
static_assert(offsetof(PlayerDatabaseWork_BP_SetAvatarBodyScale, Scale) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetAvatarBodyScale::Scale' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetAvatarChangedColorLeftAndRightEyes
// 0x0001 (0x0001 - 0x0000)
struct PlayerDatabaseWork_BP_SetAvatarChangedColorLeftAndRightEyes final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetAvatarChangedColorLeftAndRightEyes) == 0x000001, "Wrong alignment on PlayerDatabaseWork_BP_SetAvatarChangedColorLeftAndRightEyes");
static_assert(sizeof(PlayerDatabaseWork_BP_SetAvatarChangedColorLeftAndRightEyes) == 0x000001, "Wrong size on PlayerDatabaseWork_BP_SetAvatarChangedColorLeftAndRightEyes");
static_assert(offsetof(PlayerDatabaseWork_BP_SetAvatarChangedColorLeftAndRightEyes, Flag) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetAvatarChangedColorLeftAndRightEyes::Flag' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetAvatarCharacterAssign
// 0x0001 (0x0001 - 0x0000)
struct PlayerDatabaseWork_BP_SetAvatarCharacterAssign final
{
public:
	ECharacterAssign                              Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetAvatarCharacterAssign) == 0x000001, "Wrong alignment on PlayerDatabaseWork_BP_SetAvatarCharacterAssign");
static_assert(sizeof(PlayerDatabaseWork_BP_SetAvatarCharacterAssign) == 0x000001, "Wrong size on PlayerDatabaseWork_BP_SetAvatarCharacterAssign");
static_assert(offsetof(PlayerDatabaseWork_BP_SetAvatarCharacterAssign, Type) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetAvatarCharacterAssign::Type' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetAvatarCharacterBattleStyle
// 0x0001 (0x0001 - 0x0000)
struct PlayerDatabaseWork_BP_SetAvatarCharacterBattleStyle final
{
public:
	ECharacterId                                  Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetAvatarCharacterBattleStyle) == 0x000001, "Wrong alignment on PlayerDatabaseWork_BP_SetAvatarCharacterBattleStyle");
static_assert(sizeof(PlayerDatabaseWork_BP_SetAvatarCharacterBattleStyle) == 0x000001, "Wrong size on PlayerDatabaseWork_BP_SetAvatarCharacterBattleStyle");
static_assert(offsetof(PlayerDatabaseWork_BP_SetAvatarCharacterBattleStyle, Type) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetAvatarCharacterBattleStyle::Type' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetAvatarCharacterVoice
// 0x0004 (0x0004 - 0x0000)
struct PlayerDatabaseWork_BP_SetAvatarCharacterVoice final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetAvatarCharacterVoice) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_SetAvatarCharacterVoice");
static_assert(sizeof(PlayerDatabaseWork_BP_SetAvatarCharacterVoice) == 0x000004, "Wrong size on PlayerDatabaseWork_BP_SetAvatarCharacterVoice");
static_assert(offsetof(PlayerDatabaseWork_BP_SetAvatarCharacterVoice, Code) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetAvatarCharacterVoice::Code' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetAvatarColor
// 0x0008 (0x0008 - 0x0000)
struct PlayerDatabaseWork_BP_SetAvatarColor final
{
public:
	EAvatarColorParts                             Parts;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Color;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetAvatarColor) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_SetAvatarColor");
static_assert(sizeof(PlayerDatabaseWork_BP_SetAvatarColor) == 0x000008, "Wrong size on PlayerDatabaseWork_BP_SetAvatarColor");
static_assert(offsetof(PlayerDatabaseWork_BP_SetAvatarColor, Parts) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetAvatarColor::Parts' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_SetAvatarColor, Color) == 0x000004, "Member 'PlayerDatabaseWork_BP_SetAvatarColor::Color' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetAvatarEditColorType
// 0x0001 (0x0001 - 0x0000)
struct PlayerDatabaseWork_BP_SetAvatarEditColorType final
{
public:
	EAvatarDetailedAppearanceColorSettingItem     Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetAvatarEditColorType) == 0x000001, "Wrong alignment on PlayerDatabaseWork_BP_SetAvatarEditColorType");
static_assert(sizeof(PlayerDatabaseWork_BP_SetAvatarEditColorType) == 0x000001, "Wrong size on PlayerDatabaseWork_BP_SetAvatarEditColorType");
static_assert(offsetof(PlayerDatabaseWork_BP_SetAvatarEditColorType, Type) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetAvatarEditColorType::Type' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetAvatarEditPartsType
// 0x0001 (0x0001 - 0x0000)
struct PlayerDatabaseWork_BP_SetAvatarEditPartsType final
{
public:
	EAvatarDetailedAppearanceSettingDetailItem    Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetAvatarEditPartsType) == 0x000001, "Wrong alignment on PlayerDatabaseWork_BP_SetAvatarEditPartsType");
static_assert(sizeof(PlayerDatabaseWork_BP_SetAvatarEditPartsType) == 0x000001, "Wrong size on PlayerDatabaseWork_BP_SetAvatarEditPartsType");
static_assert(offsetof(PlayerDatabaseWork_BP_SetAvatarEditPartsType, Type) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetAvatarEditPartsType::Type' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetAvatarFaceParts
// 0x0008 (0x0008 - 0x0000)
struct PlayerDatabaseWork_BP_SetAvatarFaceParts final
{
public:
	EAvatarFaceParts                              FaceParts;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetAvatarFaceParts) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_SetAvatarFaceParts");
static_assert(sizeof(PlayerDatabaseWork_BP_SetAvatarFaceParts) == 0x000008, "Wrong size on PlayerDatabaseWork_BP_SetAvatarFaceParts");
static_assert(offsetof(PlayerDatabaseWork_BP_SetAvatarFaceParts, FaceParts) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetAvatarFaceParts::FaceParts' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_SetAvatarFaceParts, ID) == 0x000004, "Member 'PlayerDatabaseWork_BP_SetAvatarFaceParts::ID' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetAvatarMaleFlag
// 0x0001 (0x0001 - 0x0000)
struct PlayerDatabaseWork_BP_SetAvatarMaleFlag final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetAvatarMaleFlag) == 0x000001, "Wrong alignment on PlayerDatabaseWork_BP_SetAvatarMaleFlag");
static_assert(sizeof(PlayerDatabaseWork_BP_SetAvatarMaleFlag) == 0x000001, "Wrong size on PlayerDatabaseWork_BP_SetAvatarMaleFlag");
static_assert(offsetof(PlayerDatabaseWork_BP_SetAvatarMaleFlag, Flag) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetAvatarMaleFlag::Flag' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetCosmosSelectedCharacter
// 0x0008 (0x0008 - 0x0000)
struct PlayerDatabaseWork_BP_SetCosmosSelectedCharacter final
{
public:
	int32                                         SelectedCharacterId;                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForcedUpdate;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerDatabaseWork_BP_SetCosmosSelectedCharacter) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_SetCosmosSelectedCharacter");
static_assert(sizeof(PlayerDatabaseWork_BP_SetCosmosSelectedCharacter) == 0x000008, "Wrong size on PlayerDatabaseWork_BP_SetCosmosSelectedCharacter");
static_assert(offsetof(PlayerDatabaseWork_BP_SetCosmosSelectedCharacter, SelectedCharacterId) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetCosmosSelectedCharacter::SelectedCharacterId' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_SetCosmosSelectedCharacter, ForcedUpdate) == 0x000004, "Member 'PlayerDatabaseWork_BP_SetCosmosSelectedCharacter::ForcedUpdate' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetCosmosSelectedCostume
// 0x0004 (0x0004 - 0x0000)
struct PlayerDatabaseWork_BP_SetCosmosSelectedCostume final
{
public:
	int32                                         CostumeId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetCosmosSelectedCostume) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_SetCosmosSelectedCostume");
static_assert(sizeof(PlayerDatabaseWork_BP_SetCosmosSelectedCostume) == 0x000004, "Wrong size on PlayerDatabaseWork_BP_SetCosmosSelectedCostume");
static_assert(offsetof(PlayerDatabaseWork_BP_SetCosmosSelectedCostume, CostumeId) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetCosmosSelectedCostume::CostumeId' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetCostumeColor
// 0x0008 (0x0008 - 0x0000)
struct PlayerDatabaseWork_BP_SetCostumeColor final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECostumeColorParts                            Parts;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Color;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetCostumeColor) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_SetCostumeColor");
static_assert(sizeof(PlayerDatabaseWork_BP_SetCostumeColor) == 0x000008, "Wrong size on PlayerDatabaseWork_BP_SetCostumeColor");
static_assert(offsetof(PlayerDatabaseWork_BP_SetCostumeColor, CharacterId) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetCostumeColor::CharacterId' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_SetCostumeColor, Parts) == 0x000001, "Member 'PlayerDatabaseWork_BP_SetCostumeColor::Parts' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_SetCostumeColor, Color) == 0x000004, "Member 'PlayerDatabaseWork_BP_SetCostumeColor::Color' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetEmblemIds
// 0x0018 (0x0018 - 0x0000)
struct PlayerDatabaseWork_BP_SetEmblemIds final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 EmblemIds;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetEmblemIds) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_SetEmblemIds");
static_assert(sizeof(PlayerDatabaseWork_BP_SetEmblemIds) == 0x000018, "Wrong size on PlayerDatabaseWork_BP_SetEmblemIds");
static_assert(offsetof(PlayerDatabaseWork_BP_SetEmblemIds, CharacterId) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetEmblemIds::CharacterId' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_SetEmblemIds, EmblemIds) == 0x000008, "Member 'PlayerDatabaseWork_BP_SetEmblemIds::EmblemIds' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetEmoteIds
// 0x0018 (0x0018 - 0x0000)
struct PlayerDatabaseWork_BP_SetEmoteIds final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 EmoteIds;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetEmoteIds) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_SetEmoteIds");
static_assert(sizeof(PlayerDatabaseWork_BP_SetEmoteIds) == 0x000018, "Wrong size on PlayerDatabaseWork_BP_SetEmoteIds");
static_assert(offsetof(PlayerDatabaseWork_BP_SetEmoteIds, CharacterId) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetEmoteIds::CharacterId' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_SetEmoteIds, EmoteIds) == 0x000008, "Member 'PlayerDatabaseWork_BP_SetEmoteIds::EmoteIds' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetIntroduction
// 0x0010 (0x0010 - 0x0000)
struct PlayerDatabaseWork_BP_SetIntroduction final
{
public:
	class FString                                 Intro;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetIntroduction) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_SetIntroduction");
static_assert(sizeof(PlayerDatabaseWork_BP_SetIntroduction) == 0x000010, "Wrong size on PlayerDatabaseWork_BP_SetIntroduction");
static_assert(offsetof(PlayerDatabaseWork_BP_SetIntroduction, Intro) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetIntroduction::Intro' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetItemDetailPopupFromEnum
// 0x0008 (0x0008 - 0x0000)
struct PlayerDatabaseWork_BP_SetItemDetailPopupFromEnum final
{
public:
	int32                                         ItemCode;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemCategory                                 ItemCategory;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerDatabaseWork_BP_SetItemDetailPopupFromEnum) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_SetItemDetailPopupFromEnum");
static_assert(sizeof(PlayerDatabaseWork_BP_SetItemDetailPopupFromEnum) == 0x000008, "Wrong size on PlayerDatabaseWork_BP_SetItemDetailPopupFromEnum");
static_assert(offsetof(PlayerDatabaseWork_BP_SetItemDetailPopupFromEnum, ItemCode) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetItemDetailPopupFromEnum::ItemCode' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_SetItemDetailPopupFromEnum, ItemCategory) == 0x000004, "Member 'PlayerDatabaseWork_BP_SetItemDetailPopupFromEnum::ItemCategory' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetItemDetailPopupFromInt
// 0x0008 (0x0008 - 0x0000)
struct PlayerDatabaseWork_BP_SetItemDetailPopupFromInt final
{
public:
	int32                                         ItemCode;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCategory;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetItemDetailPopupFromInt) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_SetItemDetailPopupFromInt");
static_assert(sizeof(PlayerDatabaseWork_BP_SetItemDetailPopupFromInt) == 0x000008, "Wrong size on PlayerDatabaseWork_BP_SetItemDetailPopupFromInt");
static_assert(offsetof(PlayerDatabaseWork_BP_SetItemDetailPopupFromInt, ItemCode) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetItemDetailPopupFromInt::ItemCode' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_SetItemDetailPopupFromInt, ItemCategory) == 0x000004, "Member 'PlayerDatabaseWork_BP_SetItemDetailPopupFromInt::ItemCategory' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetLoginBonusFlag
// 0x0002 (0x0002 - 0x0000)
struct PlayerDatabaseWork_BP_SetLoginBonusFlag final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SendData;                                          // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetLoginBonusFlag) == 0x000001, "Wrong alignment on PlayerDatabaseWork_BP_SetLoginBonusFlag");
static_assert(sizeof(PlayerDatabaseWork_BP_SetLoginBonusFlag) == 0x000002, "Wrong size on PlayerDatabaseWork_BP_SetLoginBonusFlag");
static_assert(offsetof(PlayerDatabaseWork_BP_SetLoginBonusFlag, Flag) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetLoginBonusFlag::Flag' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_SetLoginBonusFlag, SendData) == 0x000001, "Member 'PlayerDatabaseWork_BP_SetLoginBonusFlag::SendData' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetMaintenanceDisplay
// 0x0004 (0x0004 - 0x0000)
struct PlayerDatabaseWork_BP_SetMaintenanceDisplay final
{
public:
	int32                                         Minutes;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetMaintenanceDisplay) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_SetMaintenanceDisplay");
static_assert(sizeof(PlayerDatabaseWork_BP_SetMaintenanceDisplay) == 0x000004, "Wrong size on PlayerDatabaseWork_BP_SetMaintenanceDisplay");
static_assert(offsetof(PlayerDatabaseWork_BP_SetMaintenanceDisplay, Minutes) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetMaintenanceDisplay::Minutes' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetObtainFromCode
// 0x0004 (0x0004 - 0x0000)
struct PlayerDatabaseWork_BP_SetObtainFromCode final
{
public:
	int32                                         ObtainFromCode;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetObtainFromCode) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_SetObtainFromCode");
static_assert(sizeof(PlayerDatabaseWork_BP_SetObtainFromCode) == 0x000004, "Wrong size on PlayerDatabaseWork_BP_SetObtainFromCode");
static_assert(offsetof(PlayerDatabaseWork_BP_SetObtainFromCode, ObtainFromCode) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetObtainFromCode::ObtainFromCode' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetPageNo
// 0x0004 (0x0004 - 0x0000)
struct PlayerDatabaseWork_BP_SetPageNo final
{
public:
	int32                                         PageNo;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetPageNo) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_SetPageNo");
static_assert(sizeof(PlayerDatabaseWork_BP_SetPageNo) == 0x000004, "Wrong size on PlayerDatabaseWork_BP_SetPageNo");
static_assert(offsetof(PlayerDatabaseWork_BP_SetPageNo, PageNo) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetPageNo::PageNo' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetPenaltyReportScreenName
// 0x0001 (0x0001 - 0x0000)
struct PlayerDatabaseWork_BP_SetPenaltyReportScreenName final
{
public:
	EScreenName                                   ScreenName;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetPenaltyReportScreenName) == 0x000001, "Wrong alignment on PlayerDatabaseWork_BP_SetPenaltyReportScreenName");
static_assert(sizeof(PlayerDatabaseWork_BP_SetPenaltyReportScreenName) == 0x000001, "Wrong size on PlayerDatabaseWork_BP_SetPenaltyReportScreenName");
static_assert(offsetof(PlayerDatabaseWork_BP_SetPenaltyReportScreenName, ScreenName) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetPenaltyReportScreenName::ScreenName' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetPlayerName
// 0x0010 (0x0010 - 0x0000)
struct PlayerDatabaseWork_BP_SetPlayerName final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetPlayerName) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_SetPlayerName");
static_assert(sizeof(PlayerDatabaseWork_BP_SetPlayerName) == 0x000010, "Wrong size on PlayerDatabaseWork_BP_SetPlayerName");
static_assert(offsetof(PlayerDatabaseWork_BP_SetPlayerName, Name_0) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetPlayerName::Name_0' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetRequestPreviewProfileFlg
// 0x0001 (0x0001 - 0x0000)
struct PlayerDatabaseWork_BP_SetRequestPreviewProfileFlg final
{
public:
	bool                                          ReqPreviewProfileFlg;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetRequestPreviewProfileFlg) == 0x000001, "Wrong alignment on PlayerDatabaseWork_BP_SetRequestPreviewProfileFlg");
static_assert(sizeof(PlayerDatabaseWork_BP_SetRequestPreviewProfileFlg) == 0x000001, "Wrong size on PlayerDatabaseWork_BP_SetRequestPreviewProfileFlg");
static_assert(offsetof(PlayerDatabaseWork_BP_SetRequestPreviewProfileFlg, ReqPreviewProfileFlg) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetRequestPreviewProfileFlg::ReqPreviewProfileFlg' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetSearchPlayerName
// 0x0010 (0x0010 - 0x0000)
struct PlayerDatabaseWork_BP_SetSearchPlayerName final
{
public:
	class FString                                 SearchName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetSearchPlayerName) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_SetSearchPlayerName");
static_assert(sizeof(PlayerDatabaseWork_BP_SetSearchPlayerName) == 0x000010, "Wrong size on PlayerDatabaseWork_BP_SetSearchPlayerName");
static_assert(offsetof(PlayerDatabaseWork_BP_SetSearchPlayerName, SearchName) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetSearchPlayerName::SearchName' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetSelectCharacterId
// 0x0001 (0x0001 - 0x0000)
struct PlayerDatabaseWork_BP_SetSelectCharacterId final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetSelectCharacterId) == 0x000001, "Wrong alignment on PlayerDatabaseWork_BP_SetSelectCharacterId");
static_assert(sizeof(PlayerDatabaseWork_BP_SetSelectCharacterId) == 0x000001, "Wrong size on PlayerDatabaseWork_BP_SetSelectCharacterId");
static_assert(offsetof(PlayerDatabaseWork_BP_SetSelectCharacterId, CharacterId) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetSelectCharacterId::CharacterId' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetSelectCharacterString
// 0x0010 (0x0010 - 0x0000)
struct PlayerDatabaseWork_BP_SetSelectCharacterString final
{
public:
	class FString                                 CharacterId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetSelectCharacterString) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_SetSelectCharacterString");
static_assert(sizeof(PlayerDatabaseWork_BP_SetSelectCharacterString) == 0x000010, "Wrong size on PlayerDatabaseWork_BP_SetSelectCharacterString");
static_assert(offsetof(PlayerDatabaseWork_BP_SetSelectCharacterString, CharacterId) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetSelectCharacterString::CharacterId' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetSelectCostumeCode
// 0x0008 (0x0008 - 0x0000)
struct PlayerDatabaseWork_BP_SetSelectCostumeCode final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CostumeCode;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetSelectCostumeCode) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_SetSelectCostumeCode");
static_assert(sizeof(PlayerDatabaseWork_BP_SetSelectCostumeCode) == 0x000008, "Wrong size on PlayerDatabaseWork_BP_SetSelectCostumeCode");
static_assert(offsetof(PlayerDatabaseWork_BP_SetSelectCostumeCode, CharacterId) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetSelectCostumeCode::CharacterId' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_SetSelectCostumeCode, CostumeCode) == 0x000004, "Member 'PlayerDatabaseWork_BP_SetSelectCostumeCode::CostumeCode' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetSelectedFriendSort
// 0x0001 (0x0001 - 0x0000)
struct PlayerDatabaseWork_BP_SetSelectedFriendSort final
{
public:
	EFriendListSortOrder                          SelectedFriendSortOrder;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetSelectedFriendSort) == 0x000001, "Wrong alignment on PlayerDatabaseWork_BP_SetSelectedFriendSort");
static_assert(sizeof(PlayerDatabaseWork_BP_SetSelectedFriendSort) == 0x000001, "Wrong size on PlayerDatabaseWork_BP_SetSelectedFriendSort");
static_assert(offsetof(PlayerDatabaseWork_BP_SetSelectedFriendSort, SelectedFriendSortOrder) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetSelectedFriendSort::SelectedFriendSortOrder' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetSelectedFriendStatus
// 0x0001 (0x0001 - 0x0000)
struct PlayerDatabaseWork_BP_SetSelectedFriendStatus final
{
public:
	EFriendStatus                                 SelectedFriendStatus;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetSelectedFriendStatus) == 0x000001, "Wrong alignment on PlayerDatabaseWork_BP_SetSelectedFriendStatus");
static_assert(sizeof(PlayerDatabaseWork_BP_SetSelectedFriendStatus) == 0x000001, "Wrong size on PlayerDatabaseWork_BP_SetSelectedFriendStatus");
static_assert(offsetof(PlayerDatabaseWork_BP_SetSelectedFriendStatus, SelectedFriendStatus) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetSelectedFriendStatus::SelectedFriendStatus' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetSelectedFriendType
// 0x0001 (0x0001 - 0x0000)
struct PlayerDatabaseWork_BP_SetSelectedFriendType final
{
public:
	EFriendListType                               SelectedFriendSelect;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetSelectedFriendType) == 0x000001, "Wrong alignment on PlayerDatabaseWork_BP_SetSelectedFriendType");
static_assert(sizeof(PlayerDatabaseWork_BP_SetSelectedFriendType) == 0x000001, "Wrong size on PlayerDatabaseWork_BP_SetSelectedFriendType");
static_assert(offsetof(PlayerDatabaseWork_BP_SetSelectedFriendType, SelectedFriendSelect) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetSelectedFriendType::SelectedFriendSelect' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetSelectedItemSort
// 0x0001 (0x0001 - 0x0000)
struct PlayerDatabaseWork_BP_SetSelectedItemSort final
{
public:
	EItemListSortOrder                            SelectedItemSortOrder;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetSelectedItemSort) == 0x000001, "Wrong alignment on PlayerDatabaseWork_BP_SetSelectedItemSort");
static_assert(sizeof(PlayerDatabaseWork_BP_SetSelectedItemSort) == 0x000001, "Wrong size on PlayerDatabaseWork_BP_SetSelectedItemSort");
static_assert(offsetof(PlayerDatabaseWork_BP_SetSelectedItemSort, SelectedItemSortOrder) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetSelectedItemSort::SelectedItemSortOrder' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetSelectedPlayerId
// 0x0010 (0x0010 - 0x0000)
struct PlayerDatabaseWork_BP_SetSelectedPlayerId final
{
public:
	class FString                                 SelectedPlayerId;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetSelectedPlayerId) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_SetSelectedPlayerId");
static_assert(sizeof(PlayerDatabaseWork_BP_SetSelectedPlayerId) == 0x000010, "Wrong size on PlayerDatabaseWork_BP_SetSelectedPlayerId");
static_assert(offsetof(PlayerDatabaseWork_BP_SetSelectedPlayerId, SelectedPlayerId) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetSelectedPlayerId::SelectedPlayerId' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetSelectedPlayerName
// 0x0010 (0x0010 - 0x0000)
struct PlayerDatabaseWork_BP_SetSelectedPlayerName final
{
public:
	class FString                                 SelectedPlayerName;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetSelectedPlayerName) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_SetSelectedPlayerName");
static_assert(sizeof(PlayerDatabaseWork_BP_SetSelectedPlayerName) == 0x000010, "Wrong size on PlayerDatabaseWork_BP_SetSelectedPlayerName");
static_assert(offsetof(PlayerDatabaseWork_BP_SetSelectedPlayerName, SelectedPlayerName) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetSelectedPlayerName::SelectedPlayerName' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_SetShopItem
// 0x0004 (0x0004 - 0x0000)
struct PlayerDatabaseWork_BP_SetShopItem final
{
public:
	int32                                         ShopItem;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_SetShopItem) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_SetShopItem");
static_assert(sizeof(PlayerDatabaseWork_BP_SetShopItem) == 0x000004, "Wrong size on PlayerDatabaseWork_BP_SetShopItem");
static_assert(offsetof(PlayerDatabaseWork_BP_SetShopItem, ShopItem) == 0x000000, "Member 'PlayerDatabaseWork_BP_SetShopItem::ShopItem' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_UpdateCostumeCharacterParamSnapshot
// 0x0004 (0x0004 - 0x0000)
struct PlayerDatabaseWork_BP_UpdateCostumeCharacterParamSnapshot final
{
public:
	int32                                         CharaCode;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_UpdateCostumeCharacterParamSnapshot) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_UpdateCostumeCharacterParamSnapshot");
static_assert(sizeof(PlayerDatabaseWork_BP_UpdateCostumeCharacterParamSnapshot) == 0x000004, "Wrong size on PlayerDatabaseWork_BP_UpdateCostumeCharacterParamSnapshot");
static_assert(offsetof(PlayerDatabaseWork_BP_UpdateCostumeCharacterParamSnapshot, CharaCode) == 0x000000, "Member 'PlayerDatabaseWork_BP_UpdateCostumeCharacterParamSnapshot::CharaCode' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_UpdateMyADAllData
// 0x0010 (0x0010 - 0x0000)
struct PlayerDatabaseWork_BP_UpdateMyADAllData final
{
public:
	TArray<struct FDbAdDataParam>                 AdList;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_UpdateMyADAllData) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_UpdateMyADAllData");
static_assert(sizeof(PlayerDatabaseWork_BP_UpdateMyADAllData) == 0x000010, "Wrong size on PlayerDatabaseWork_BP_UpdateMyADAllData");
static_assert(offsetof(PlayerDatabaseWork_BP_UpdateMyADAllData, AdList) == 0x000000, "Member 'PlayerDatabaseWork_BP_UpdateMyADAllData::AdList' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_UpdateMyADData
// 0x0020 (0x0020 - 0x0000)
struct PlayerDatabaseWork_BP_UpdateMyADData final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDbAdDataParam>                 AdList;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_UpdateMyADData) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_UpdateMyADData");
static_assert(sizeof(PlayerDatabaseWork_BP_UpdateMyADData) == 0x000020, "Wrong size on PlayerDatabaseWork_BP_UpdateMyADData");
static_assert(offsetof(PlayerDatabaseWork_BP_UpdateMyADData, ID) == 0x000000, "Member 'PlayerDatabaseWork_BP_UpdateMyADData::ID' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_UpdateMyADData, AdList) == 0x000010, "Member 'PlayerDatabaseWork_BP_UpdateMyADData::AdList' has a wrong offset!");

// DelegateFunction GameModule.PlayerDatabaseWork.OnBuyPremiumLoginBonusDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct PlayerDatabaseWork_OnBuyPremiumLoginBonusDelegate__DelegateSignature final
{
public:
	bool                                          Buy;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_OnBuyPremiumLoginBonusDelegate__DelegateSignature) == 0x000001, "Wrong alignment on PlayerDatabaseWork_OnBuyPremiumLoginBonusDelegate__DelegateSignature");
static_assert(sizeof(PlayerDatabaseWork_OnBuyPremiumLoginBonusDelegate__DelegateSignature) == 0x000001, "Wrong size on PlayerDatabaseWork_OnBuyPremiumLoginBonusDelegate__DelegateSignature");
static_assert(offsetof(PlayerDatabaseWork_OnBuyPremiumLoginBonusDelegate__DelegateSignature, Buy) == 0x000000, "Member 'PlayerDatabaseWork_OnBuyPremiumLoginBonusDelegate__DelegateSignature::Buy' has a wrong offset!");

// DelegateFunction GameModule.PlayerDatabaseWork.OnChangedAvatarCaptureType__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct PlayerDatabaseWork_OnChangedAvatarCaptureType__DelegateSignature final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_OnChangedAvatarCaptureType__DelegateSignature) == 0x000004, "Wrong alignment on PlayerDatabaseWork_OnChangedAvatarCaptureType__DelegateSignature");
static_assert(sizeof(PlayerDatabaseWork_OnChangedAvatarCaptureType__DelegateSignature) == 0x000004, "Wrong size on PlayerDatabaseWork_OnChangedAvatarCaptureType__DelegateSignature");
static_assert(offsetof(PlayerDatabaseWork_OnChangedAvatarCaptureType__DelegateSignature, Type) == 0x000000, "Member 'PlayerDatabaseWork_OnChangedAvatarCaptureType__DelegateSignature::Type' has a wrong offset!");

// DelegateFunction GameModule.PlayerDatabaseWork.OnChangedCustomizeADPartsDelegate__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct PlayerDatabaseWork_OnChangedCustomizeADPartsDelegate__DelegateSignature final
{
public:
	EMyAdPartsCategory                            Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Message;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerDatabaseWork_OnChangedCustomizeADPartsDelegate__DelegateSignature) == 0x000004, "Wrong alignment on PlayerDatabaseWork_OnChangedCustomizeADPartsDelegate__DelegateSignature");
static_assert(sizeof(PlayerDatabaseWork_OnChangedCustomizeADPartsDelegate__DelegateSignature) == 0x00000C, "Wrong size on PlayerDatabaseWork_OnChangedCustomizeADPartsDelegate__DelegateSignature");
static_assert(offsetof(PlayerDatabaseWork_OnChangedCustomizeADPartsDelegate__DelegateSignature, Type) == 0x000000, "Member 'PlayerDatabaseWork_OnChangedCustomizeADPartsDelegate__DelegateSignature::Type' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_OnChangedCustomizeADPartsDelegate__DelegateSignature, Code) == 0x000004, "Member 'PlayerDatabaseWork_OnChangedCustomizeADPartsDelegate__DelegateSignature::Code' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_OnChangedCustomizeADPartsDelegate__DelegateSignature, Message) == 0x000008, "Member 'PlayerDatabaseWork_OnChangedCustomizeADPartsDelegate__DelegateSignature::Message' has a wrong offset!");

// DelegateFunction GameModule.PlayerDatabaseWork.OnChangedCustomizeReturnNoDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct PlayerDatabaseWork_OnChangedCustomizeReturnNoDelegate__DelegateSignature final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_OnChangedCustomizeReturnNoDelegate__DelegateSignature) == 0x000008, "Wrong alignment on PlayerDatabaseWork_OnChangedCustomizeReturnNoDelegate__DelegateSignature");
static_assert(sizeof(PlayerDatabaseWork_OnChangedCustomizeReturnNoDelegate__DelegateSignature) == 0x000010, "Wrong size on PlayerDatabaseWork_OnChangedCustomizeReturnNoDelegate__DelegateSignature");
static_assert(offsetof(PlayerDatabaseWork_OnChangedCustomizeReturnNoDelegate__DelegateSignature, Key) == 0x000000, "Member 'PlayerDatabaseWork_OnChangedCustomizeReturnNoDelegate__DelegateSignature::Key' has a wrong offset!");

// DelegateFunction GameModule.PlayerDatabaseWork.OnChangedDetailShowFlagDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct PlayerDatabaseWork_OnChangedDetailShowFlagDelegate__DelegateSignature final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_OnChangedDetailShowFlagDelegate__DelegateSignature) == 0x000001, "Wrong alignment on PlayerDatabaseWork_OnChangedDetailShowFlagDelegate__DelegateSignature");
static_assert(sizeof(PlayerDatabaseWork_OnChangedDetailShowFlagDelegate__DelegateSignature) == 0x000001, "Wrong size on PlayerDatabaseWork_OnChangedDetailShowFlagDelegate__DelegateSignature");
static_assert(offsetof(PlayerDatabaseWork_OnChangedDetailShowFlagDelegate__DelegateSignature, Flag) == 0x000000, "Member 'PlayerDatabaseWork_OnChangedDetailShowFlagDelegate__DelegateSignature::Flag' has a wrong offset!");

// DelegateFunction GameModule.PlayerDatabaseWork.OnChangedFriendStatusDelegate__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct PlayerDatabaseWork_OnChangedFriendStatusDelegate__DelegateSignature final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFriendStatus                                 Status;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerDatabaseWork_OnChangedFriendStatusDelegate__DelegateSignature) == 0x000008, "Wrong alignment on PlayerDatabaseWork_OnChangedFriendStatusDelegate__DelegateSignature");
static_assert(sizeof(PlayerDatabaseWork_OnChangedFriendStatusDelegate__DelegateSignature) == 0x000018, "Wrong size on PlayerDatabaseWork_OnChangedFriendStatusDelegate__DelegateSignature");
static_assert(offsetof(PlayerDatabaseWork_OnChangedFriendStatusDelegate__DelegateSignature, ID) == 0x000000, "Member 'PlayerDatabaseWork_OnChangedFriendStatusDelegate__DelegateSignature::ID' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_OnChangedFriendStatusDelegate__DelegateSignature, Status) == 0x000010, "Member 'PlayerDatabaseWork_OnChangedFriendStatusDelegate__DelegateSignature::Status' has a wrong offset!");

// DelegateFunction GameModule.PlayerDatabaseWork.OnChangedSelectedCharacterDelegate__DelegateSignature
// 0x0002 (0x0002 - 0x0000)
struct PlayerDatabaseWork_OnChangedSelectedCharacterDelegate__DelegateSignature final
{
public:
	bool                                          UnLocked;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableRental;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_OnChangedSelectedCharacterDelegate__DelegateSignature) == 0x000001, "Wrong alignment on PlayerDatabaseWork_OnChangedSelectedCharacterDelegate__DelegateSignature");
static_assert(sizeof(PlayerDatabaseWork_OnChangedSelectedCharacterDelegate__DelegateSignature) == 0x000002, "Wrong size on PlayerDatabaseWork_OnChangedSelectedCharacterDelegate__DelegateSignature");
static_assert(offsetof(PlayerDatabaseWork_OnChangedSelectedCharacterDelegate__DelegateSignature, UnLocked) == 0x000000, "Member 'PlayerDatabaseWork_OnChangedSelectedCharacterDelegate__DelegateSignature::UnLocked' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_OnChangedSelectedCharacterDelegate__DelegateSignature, EnableRental) == 0x000001, "Member 'PlayerDatabaseWork_OnChangedSelectedCharacterDelegate__DelegateSignature::EnableRental' has a wrong offset!");

// DelegateFunction GameModule.PlayerDatabaseWork.OnUseCurrencySelectDelegate__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct PlayerDatabaseWork_OnUseCurrencySelectDelegate__DelegateSignature final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Code;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cost;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_OnUseCurrencySelectDelegate__DelegateSignature) == 0x000004, "Wrong alignment on PlayerDatabaseWork_OnUseCurrencySelectDelegate__DelegateSignature");
static_assert(sizeof(PlayerDatabaseWork_OnUseCurrencySelectDelegate__DelegateSignature) == 0x00000C, "Wrong size on PlayerDatabaseWork_OnUseCurrencySelectDelegate__DelegateSignature");
static_assert(offsetof(PlayerDatabaseWork_OnUseCurrencySelectDelegate__DelegateSignature, Index_0) == 0x000000, "Member 'PlayerDatabaseWork_OnUseCurrencySelectDelegate__DelegateSignature::Index_0' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_OnUseCurrencySelectDelegate__DelegateSignature, Code) == 0x000004, "Member 'PlayerDatabaseWork_OnUseCurrencySelectDelegate__DelegateSignature::Code' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_OnUseCurrencySelectDelegate__DelegateSignature, Cost) == 0x000008, "Member 'PlayerDatabaseWork_OnUseCurrencySelectDelegate__DelegateSignature::Cost' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.SetFirstTodayLogin
// 0x0001 (0x0001 - 0x0000)
struct PlayerDatabaseWork_SetFirstTodayLogin final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_SetFirstTodayLogin) == 0x000001, "Wrong alignment on PlayerDatabaseWork_SetFirstTodayLogin");
static_assert(sizeof(PlayerDatabaseWork_SetFirstTodayLogin) == 0x000001, "Wrong size on PlayerDatabaseWork_SetFirstTodayLogin");
static_assert(offsetof(PlayerDatabaseWork_SetFirstTodayLogin, Flag) == 0x000000, "Member 'PlayerDatabaseWork_SetFirstTodayLogin::Flag' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetAllCostumeCode
// 0x0018 (0x0018 - 0x0000)
struct PlayerDatabaseWork_BP_GetAllCostumeCode final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetAllCostumeCode) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_GetAllCostumeCode");
static_assert(sizeof(PlayerDatabaseWork_BP_GetAllCostumeCode) == 0x000018, "Wrong size on PlayerDatabaseWork_BP_GetAllCostumeCode");
static_assert(offsetof(PlayerDatabaseWork_BP_GetAllCostumeCode, CharacterId) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetAllCostumeCode::CharacterId' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetAllCostumeCode, ReturnValue) == 0x000008, "Member 'PlayerDatabaseWork_BP_GetAllCostumeCode::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetAllEmoteCode
// 0x0018 (0x0018 - 0x0000)
struct PlayerDatabaseWork_BP_GetAllEmoteCode final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetAllEmoteCode) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_GetAllEmoteCode");
static_assert(sizeof(PlayerDatabaseWork_BP_GetAllEmoteCode) == 0x000018, "Wrong size on PlayerDatabaseWork_BP_GetAllEmoteCode");
static_assert(offsetof(PlayerDatabaseWork_BP_GetAllEmoteCode, CharacterId) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetAllEmoteCode::CharacterId' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetAllEmoteCode, ReturnValue) == 0x000008, "Member 'PlayerDatabaseWork_BP_GetAllEmoteCode::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetAllVoiceCode
// 0x0018 (0x0018 - 0x0000)
struct PlayerDatabaseWork_BP_GetAllVoiceCode final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetAllVoiceCode) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_GetAllVoiceCode");
static_assert(sizeof(PlayerDatabaseWork_BP_GetAllVoiceCode) == 0x000018, "Wrong size on PlayerDatabaseWork_BP_GetAllVoiceCode");
static_assert(offsetof(PlayerDatabaseWork_BP_GetAllVoiceCode, CharacterId) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetAllVoiceCode::CharacterId' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetAllVoiceCode, ReturnValue) == 0x000008, "Member 'PlayerDatabaseWork_BP_GetAllVoiceCode::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetAvatarBodyPhysique
// 0x0004 (0x0004 - 0x0000)
struct PlayerDatabaseWork_BP_GetAvatarBodyPhysique final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetAvatarBodyPhysique) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_GetAvatarBodyPhysique");
static_assert(sizeof(PlayerDatabaseWork_BP_GetAvatarBodyPhysique) == 0x000004, "Wrong size on PlayerDatabaseWork_BP_GetAvatarBodyPhysique");
static_assert(offsetof(PlayerDatabaseWork_BP_GetAvatarBodyPhysique, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetAvatarBodyPhysique::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetAvatarBodyScale
// 0x0004 (0x0004 - 0x0000)
struct PlayerDatabaseWork_BP_GetAvatarBodyScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetAvatarBodyScale) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_GetAvatarBodyScale");
static_assert(sizeof(PlayerDatabaseWork_BP_GetAvatarBodyScale) == 0x000004, "Wrong size on PlayerDatabaseWork_BP_GetAvatarBodyScale");
static_assert(offsetof(PlayerDatabaseWork_BP_GetAvatarBodyScale, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetAvatarBodyScale::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetAvatarChangedColorLeftAndRightEyes
// 0x0001 (0x0001 - 0x0000)
struct PlayerDatabaseWork_BP_GetAvatarChangedColorLeftAndRightEyes final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetAvatarChangedColorLeftAndRightEyes) == 0x000001, "Wrong alignment on PlayerDatabaseWork_BP_GetAvatarChangedColorLeftAndRightEyes");
static_assert(sizeof(PlayerDatabaseWork_BP_GetAvatarChangedColorLeftAndRightEyes) == 0x000001, "Wrong size on PlayerDatabaseWork_BP_GetAvatarChangedColorLeftAndRightEyes");
static_assert(offsetof(PlayerDatabaseWork_BP_GetAvatarChangedColorLeftAndRightEyes, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetAvatarChangedColorLeftAndRightEyes::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetAvatarCharacterAssign
// 0x0004 (0x0004 - 0x0000)
struct PlayerDatabaseWork_BP_GetAvatarCharacterAssign final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetAvatarCharacterAssign) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_GetAvatarCharacterAssign");
static_assert(sizeof(PlayerDatabaseWork_BP_GetAvatarCharacterAssign) == 0x000004, "Wrong size on PlayerDatabaseWork_BP_GetAvatarCharacterAssign");
static_assert(offsetof(PlayerDatabaseWork_BP_GetAvatarCharacterAssign, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetAvatarCharacterAssign::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetAvatarCharacterBattleStyle
// 0x0004 (0x0004 - 0x0000)
struct PlayerDatabaseWork_BP_GetAvatarCharacterBattleStyle final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetAvatarCharacterBattleStyle) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_GetAvatarCharacterBattleStyle");
static_assert(sizeof(PlayerDatabaseWork_BP_GetAvatarCharacterBattleStyle) == 0x000004, "Wrong size on PlayerDatabaseWork_BP_GetAvatarCharacterBattleStyle");
static_assert(offsetof(PlayerDatabaseWork_BP_GetAvatarCharacterBattleStyle, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetAvatarCharacterBattleStyle::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetAvatarCharacterBattleStyleText
// 0x0018 (0x0018 - 0x0000)
struct PlayerDatabaseWork_BP_GetAvatarCharacterBattleStyleText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetAvatarCharacterBattleStyleText) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_GetAvatarCharacterBattleStyleText");
static_assert(sizeof(PlayerDatabaseWork_BP_GetAvatarCharacterBattleStyleText) == 0x000018, "Wrong size on PlayerDatabaseWork_BP_GetAvatarCharacterBattleStyleText");
static_assert(offsetof(PlayerDatabaseWork_BP_GetAvatarCharacterBattleStyleText, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetAvatarCharacterBattleStyleText::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetAvatarCharacterVoice
// 0x0004 (0x0004 - 0x0000)
struct PlayerDatabaseWork_BP_GetAvatarCharacterVoice final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetAvatarCharacterVoice) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_GetAvatarCharacterVoice");
static_assert(sizeof(PlayerDatabaseWork_BP_GetAvatarCharacterVoice) == 0x000004, "Wrong size on PlayerDatabaseWork_BP_GetAvatarCharacterVoice");
static_assert(offsetof(PlayerDatabaseWork_BP_GetAvatarCharacterVoice, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetAvatarCharacterVoice::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetAvatarColor
// 0x0018 (0x0018 - 0x0000)
struct PlayerDatabaseWork_BP_GetAvatarColor final
{
public:
	EAvatarColorParts                             Parts;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           OutColor;                                          // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetAvatarColor) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_GetAvatarColor");
static_assert(sizeof(PlayerDatabaseWork_BP_GetAvatarColor) == 0x000018, "Wrong size on PlayerDatabaseWork_BP_GetAvatarColor");
static_assert(offsetof(PlayerDatabaseWork_BP_GetAvatarColor, Parts) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetAvatarColor::Parts' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetAvatarColor, OutColor) == 0x000004, "Member 'PlayerDatabaseWork_BP_GetAvatarColor::OutColor' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetAvatarColor, ReturnValue) == 0x000014, "Member 'PlayerDatabaseWork_BP_GetAvatarColor::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetAvatarFaceParts
// 0x0008 (0x0008 - 0x0000)
struct PlayerDatabaseWork_BP_GetAvatarFaceParts final
{
public:
	EAvatarFaceParts                              FaceParts;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetAvatarFaceParts) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_GetAvatarFaceParts");
static_assert(sizeof(PlayerDatabaseWork_BP_GetAvatarFaceParts) == 0x000008, "Wrong size on PlayerDatabaseWork_BP_GetAvatarFaceParts");
static_assert(offsetof(PlayerDatabaseWork_BP_GetAvatarFaceParts, FaceParts) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetAvatarFaceParts::FaceParts' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetAvatarFaceParts, ReturnValue) == 0x000004, "Member 'PlayerDatabaseWork_BP_GetAvatarFaceParts::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetAvatarMaleFlag
// 0x0001 (0x0001 - 0x0000)
struct PlayerDatabaseWork_BP_GetAvatarMaleFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetAvatarMaleFlag) == 0x000001, "Wrong alignment on PlayerDatabaseWork_BP_GetAvatarMaleFlag");
static_assert(sizeof(PlayerDatabaseWork_BP_GetAvatarMaleFlag) == 0x000001, "Wrong size on PlayerDatabaseWork_BP_GetAvatarMaleFlag");
static_assert(offsetof(PlayerDatabaseWork_BP_GetAvatarMaleFlag, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetAvatarMaleFlag::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetCharacterId
// 0x0008 (0x0008 - 0x0000)
struct PlayerDatabaseWork_BP_GetCharacterId final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterId                                  ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerDatabaseWork_BP_GetCharacterId) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_GetCharacterId");
static_assert(sizeof(PlayerDatabaseWork_BP_GetCharacterId) == 0x000008, "Wrong size on PlayerDatabaseWork_BP_GetCharacterId");
static_assert(offsetof(PlayerDatabaseWork_BP_GetCharacterId, Code) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetCharacterId::Code' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetCharacterId, ReturnValue) == 0x000004, "Member 'PlayerDatabaseWork_BP_GetCharacterId::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetCharacterIdFromString
// 0x0018 (0x0018 - 0x0000)
struct PlayerDatabaseWork_BP_GetCharacterIdFromString final
{
public:
	class FString                                 CharacterId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterId                                  ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerDatabaseWork_BP_GetCharacterIdFromString) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_GetCharacterIdFromString");
static_assert(sizeof(PlayerDatabaseWork_BP_GetCharacterIdFromString) == 0x000018, "Wrong size on PlayerDatabaseWork_BP_GetCharacterIdFromString");
static_assert(offsetof(PlayerDatabaseWork_BP_GetCharacterIdFromString, CharacterId) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetCharacterIdFromString::CharacterId' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetCharacterIdFromString, ReturnValue) == 0x000010, "Member 'PlayerDatabaseWork_BP_GetCharacterIdFromString::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetCharacterNameText
// 0x0020 (0x0020 - 0x0000)
struct PlayerDatabaseWork_BP_GetCharacterNameText final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetCharacterNameText) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_GetCharacterNameText");
static_assert(sizeof(PlayerDatabaseWork_BP_GetCharacterNameText) == 0x000020, "Wrong size on PlayerDatabaseWork_BP_GetCharacterNameText");
static_assert(offsetof(PlayerDatabaseWork_BP_GetCharacterNameText, CharacterId) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetCharacterNameText::CharacterId' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetCharacterNameText, ReturnValue) == 0x000008, "Member 'PlayerDatabaseWork_BP_GetCharacterNameText::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetCostumeColor
// 0x0018 (0x0018 - 0x0000)
struct PlayerDatabaseWork_BP_GetCostumeColor final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECostumeColorParts                            Parts;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           OutColor;                                          // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetCostumeColor) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_GetCostumeColor");
static_assert(sizeof(PlayerDatabaseWork_BP_GetCostumeColor) == 0x000018, "Wrong size on PlayerDatabaseWork_BP_GetCostumeColor");
static_assert(offsetof(PlayerDatabaseWork_BP_GetCostumeColor, CharacterId) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetCostumeColor::CharacterId' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetCostumeColor, Parts) == 0x000001, "Member 'PlayerDatabaseWork_BP_GetCostumeColor::Parts' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetCostumeColor, OutColor) == 0x000004, "Member 'PlayerDatabaseWork_BP_GetCostumeColor::OutColor' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetCostumeColor, ReturnValue) == 0x000014, "Member 'PlayerDatabaseWork_BP_GetCostumeColor::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetEmblemIds
// 0x0018 (0x0018 - 0x0000)
struct PlayerDatabaseWork_BP_GetEmblemIds final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetEmblemIds) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_GetEmblemIds");
static_assert(sizeof(PlayerDatabaseWork_BP_GetEmblemIds) == 0x000018, "Wrong size on PlayerDatabaseWork_BP_GetEmblemIds");
static_assert(offsetof(PlayerDatabaseWork_BP_GetEmblemIds, CharacterId) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetEmblemIds::CharacterId' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetEmblemIds, ReturnValue) == 0x000008, "Member 'PlayerDatabaseWork_BP_GetEmblemIds::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetEmoteIds
// 0x0018 (0x0018 - 0x0000)
struct PlayerDatabaseWork_BP_GetEmoteIds final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetEmoteIds) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_GetEmoteIds");
static_assert(sizeof(PlayerDatabaseWork_BP_GetEmoteIds) == 0x000018, "Wrong size on PlayerDatabaseWork_BP_GetEmoteIds");
static_assert(offsetof(PlayerDatabaseWork_BP_GetEmoteIds, CharacterId) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetEmoteIds::CharacterId' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetEmoteIds, ReturnValue) == 0x000008, "Member 'PlayerDatabaseWork_BP_GetEmoteIds::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetIntroduction
// 0x0010 (0x0010 - 0x0000)
struct PlayerDatabaseWork_BP_GetIntroduction final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetIntroduction) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_GetIntroduction");
static_assert(sizeof(PlayerDatabaseWork_BP_GetIntroduction) == 0x000010, "Wrong size on PlayerDatabaseWork_BP_GetIntroduction");
static_assert(offsetof(PlayerDatabaseWork_BP_GetIntroduction, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetIntroduction::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetLocalPlayerUniqueId
// 0x0010 (0x0010 - 0x0000)
struct PlayerDatabaseWork_BP_GetLocalPlayerUniqueId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetLocalPlayerUniqueId) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_GetLocalPlayerUniqueId");
static_assert(sizeof(PlayerDatabaseWork_BP_GetLocalPlayerUniqueId) == 0x000010, "Wrong size on PlayerDatabaseWork_BP_GetLocalPlayerUniqueId");
static_assert(offsetof(PlayerDatabaseWork_BP_GetLocalPlayerUniqueId, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetLocalPlayerUniqueId::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetLoginBonusFlag
// 0x0001 (0x0001 - 0x0000)
struct PlayerDatabaseWork_BP_GetLoginBonusFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetLoginBonusFlag) == 0x000001, "Wrong alignment on PlayerDatabaseWork_BP_GetLoginBonusFlag");
static_assert(sizeof(PlayerDatabaseWork_BP_GetLoginBonusFlag) == 0x000001, "Wrong size on PlayerDatabaseWork_BP_GetLoginBonusFlag");
static_assert(offsetof(PlayerDatabaseWork_BP_GetLoginBonusFlag, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetLoginBonusFlag::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetMaintenanceDisplay
// 0x0008 (0x0008 - 0x0000)
struct PlayerDatabaseWork_BP_GetMaintenanceDisplay final
{
public:
	int32                                         Minutes;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerDatabaseWork_BP_GetMaintenanceDisplay) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_GetMaintenanceDisplay");
static_assert(sizeof(PlayerDatabaseWork_BP_GetMaintenanceDisplay) == 0x000008, "Wrong size on PlayerDatabaseWork_BP_GetMaintenanceDisplay");
static_assert(offsetof(PlayerDatabaseWork_BP_GetMaintenanceDisplay, Minutes) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetMaintenanceDisplay::Minutes' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetMaintenanceDisplay, ReturnValue) == 0x000004, "Member 'PlayerDatabaseWork_BP_GetMaintenanceDisplay::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetMyADDataCount
// 0x0004 (0x0004 - 0x0000)
struct PlayerDatabaseWork_BP_GetMyADDataCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetMyADDataCount) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_GetMyADDataCount");
static_assert(sizeof(PlayerDatabaseWork_BP_GetMyADDataCount) == 0x000004, "Wrong size on PlayerDatabaseWork_BP_GetMyADDataCount");
static_assert(offsetof(PlayerDatabaseWork_BP_GetMyADDataCount, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetMyADDataCount::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetMyADDataSnapshotId
// 0x0010 (0x0010 - 0x0000)
struct PlayerDatabaseWork_BP_GetMyADDataSnapshotId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetMyADDataSnapshotId) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_GetMyADDataSnapshotId");
static_assert(sizeof(PlayerDatabaseWork_BP_GetMyADDataSnapshotId) == 0x000010, "Wrong size on PlayerDatabaseWork_BP_GetMyADDataSnapshotId");
static_assert(offsetof(PlayerDatabaseWork_BP_GetMyADDataSnapshotId, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetMyADDataSnapshotId::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetMyADDisplayDataById
// 0x0070 (0x0070 - 0x0000)
struct PlayerDatabaseWork_BP_GetMyADDisplayDataById final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMyADDisplayData                       ReturnValue;                                       // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetMyADDisplayDataById) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_GetMyADDisplayDataById");
static_assert(sizeof(PlayerDatabaseWork_BP_GetMyADDisplayDataById) == 0x000070, "Wrong size on PlayerDatabaseWork_BP_GetMyADDisplayDataById");
static_assert(offsetof(PlayerDatabaseWork_BP_GetMyADDisplayDataById, ID) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetMyADDisplayDataById::ID' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetMyADDisplayDataById, ReturnValue) == 0x000010, "Member 'PlayerDatabaseWork_BP_GetMyADDisplayDataById::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetMyADDisplayDataByIndex
// 0x0068 (0x0068 - 0x0000)
struct PlayerDatabaseWork_BP_GetMyADDisplayDataByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMyADDisplayData                       ReturnValue;                                       // 0x0008(0x0060)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetMyADDisplayDataByIndex) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_GetMyADDisplayDataByIndex");
static_assert(sizeof(PlayerDatabaseWork_BP_GetMyADDisplayDataByIndex) == 0x000068, "Wrong size on PlayerDatabaseWork_BP_GetMyADDisplayDataByIndex");
static_assert(offsetof(PlayerDatabaseWork_BP_GetMyADDisplayDataByIndex, Index_0) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetMyADDisplayDataByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetMyADDisplayDataByIndex, ReturnValue) == 0x000008, "Member 'PlayerDatabaseWork_BP_GetMyADDisplayDataByIndex::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetNoticeOpenFlag
// 0x0001 (0x0001 - 0x0000)
struct PlayerDatabaseWork_BP_GetNoticeOpenFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetNoticeOpenFlag) == 0x000001, "Wrong alignment on PlayerDatabaseWork_BP_GetNoticeOpenFlag");
static_assert(sizeof(PlayerDatabaseWork_BP_GetNoticeOpenFlag) == 0x000001, "Wrong size on PlayerDatabaseWork_BP_GetNoticeOpenFlag");
static_assert(offsetof(PlayerDatabaseWork_BP_GetNoticeOpenFlag, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetNoticeOpenFlag::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetPenaltyReportScreenName
// 0x0001 (0x0001 - 0x0000)
struct PlayerDatabaseWork_BP_GetPenaltyReportScreenName final
{
public:
	EScreenName                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetPenaltyReportScreenName) == 0x000001, "Wrong alignment on PlayerDatabaseWork_BP_GetPenaltyReportScreenName");
static_assert(sizeof(PlayerDatabaseWork_BP_GetPenaltyReportScreenName) == 0x000001, "Wrong size on PlayerDatabaseWork_BP_GetPenaltyReportScreenName");
static_assert(offsetof(PlayerDatabaseWork_BP_GetPenaltyReportScreenName, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetPenaltyReportScreenName::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetPlayerName
// 0x0010 (0x0010 - 0x0000)
struct PlayerDatabaseWork_BP_GetPlayerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetPlayerName) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_GetPlayerName");
static_assert(sizeof(PlayerDatabaseWork_BP_GetPlayerName) == 0x000010, "Wrong size on PlayerDatabaseWork_BP_GetPlayerName");
static_assert(offsetof(PlayerDatabaseWork_BP_GetPlayerName, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetPlayerName::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetPrimaryAssetItemIconPtr
// 0x0008 (0x0008 - 0x0000)
struct PlayerDatabaseWork_BP_GetPrimaryAssetItemIconPtr final
{
public:
	class UPrimaryAssetItemIcon*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetPrimaryAssetItemIconPtr) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_GetPrimaryAssetItemIconPtr");
static_assert(sizeof(PlayerDatabaseWork_BP_GetPrimaryAssetItemIconPtr) == 0x000008, "Wrong size on PlayerDatabaseWork_BP_GetPrimaryAssetItemIconPtr");
static_assert(offsetof(PlayerDatabaseWork_BP_GetPrimaryAssetItemIconPtr, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetPrimaryAssetItemIconPtr::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetProfileMyADIndex
// 0x0004 (0x0004 - 0x0000)
struct PlayerDatabaseWork_BP_GetProfileMyADIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetProfileMyADIndex) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_GetProfileMyADIndex");
static_assert(sizeof(PlayerDatabaseWork_BP_GetProfileMyADIndex) == 0x000004, "Wrong size on PlayerDatabaseWork_BP_GetProfileMyADIndex");
static_assert(offsetof(PlayerDatabaseWork_BP_GetProfileMyADIndex, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetProfileMyADIndex::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetRandomCPUCostumeCode
// 0x0008 (0x0008 - 0x0000)
struct PlayerDatabaseWork_BP_GetRandomCPUCostumeCode final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetRandomCPUCostumeCode) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_GetRandomCPUCostumeCode");
static_assert(sizeof(PlayerDatabaseWork_BP_GetRandomCPUCostumeCode) == 0x000008, "Wrong size on PlayerDatabaseWork_BP_GetRandomCPUCostumeCode");
static_assert(offsetof(PlayerDatabaseWork_BP_GetRandomCPUCostumeCode, CharacterId) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetRandomCPUCostumeCode::CharacterId' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetRandomCPUCostumeCode, ReturnValue) == 0x000004, "Member 'PlayerDatabaseWork_BP_GetRandomCPUCostumeCode::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetRandomCPUCostumeCodeByCharaCode
// 0x0008 (0x0008 - 0x0000)
struct PlayerDatabaseWork_BP_GetRandomCPUCostumeCodeByCharaCode final
{
public:
	int32                                         CharacterCode;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetRandomCPUCostumeCodeByCharaCode) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_GetRandomCPUCostumeCodeByCharaCode");
static_assert(sizeof(PlayerDatabaseWork_BP_GetRandomCPUCostumeCodeByCharaCode) == 0x000008, "Wrong size on PlayerDatabaseWork_BP_GetRandomCPUCostumeCodeByCharaCode");
static_assert(offsetof(PlayerDatabaseWork_BP_GetRandomCPUCostumeCodeByCharaCode, CharacterCode) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetRandomCPUCostumeCodeByCharaCode::CharacterCode' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetRandomCPUCostumeCodeByCharaCode, ReturnValue) == 0x000004, "Member 'PlayerDatabaseWork_BP_GetRandomCPUCostumeCodeByCharaCode::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetRequestPreviewProfileFlg
// 0x0001 (0x0001 - 0x0000)
struct PlayerDatabaseWork_BP_GetRequestPreviewProfileFlg final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetRequestPreviewProfileFlg) == 0x000001, "Wrong alignment on PlayerDatabaseWork_BP_GetRequestPreviewProfileFlg");
static_assert(sizeof(PlayerDatabaseWork_BP_GetRequestPreviewProfileFlg) == 0x000001, "Wrong size on PlayerDatabaseWork_BP_GetRequestPreviewProfileFlg");
static_assert(offsetof(PlayerDatabaseWork_BP_GetRequestPreviewProfileFlg, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetRequestPreviewProfileFlg::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetSelectCharacterId
// 0x0001 (0x0001 - 0x0000)
struct PlayerDatabaseWork_BP_GetSelectCharacterId final
{
public:
	ECharacterId                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetSelectCharacterId) == 0x000001, "Wrong alignment on PlayerDatabaseWork_BP_GetSelectCharacterId");
static_assert(sizeof(PlayerDatabaseWork_BP_GetSelectCharacterId) == 0x000001, "Wrong size on PlayerDatabaseWork_BP_GetSelectCharacterId");
static_assert(offsetof(PlayerDatabaseWork_BP_GetSelectCharacterId, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetSelectCharacterId::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetSelectCharacterIdString
// 0x0010 (0x0010 - 0x0000)
struct PlayerDatabaseWork_BP_GetSelectCharacterIdString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetSelectCharacterIdString) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_GetSelectCharacterIdString");
static_assert(sizeof(PlayerDatabaseWork_BP_GetSelectCharacterIdString) == 0x000010, "Wrong size on PlayerDatabaseWork_BP_GetSelectCharacterIdString");
static_assert(offsetof(PlayerDatabaseWork_BP_GetSelectCharacterIdString, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetSelectCharacterIdString::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_GetSelectCostumeCode
// 0x0008 (0x0008 - 0x0000)
struct PlayerDatabaseWork_BP_GetSelectCostumeCode final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_GetSelectCostumeCode) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_GetSelectCostumeCode");
static_assert(sizeof(PlayerDatabaseWork_BP_GetSelectCostumeCode) == 0x000008, "Wrong size on PlayerDatabaseWork_BP_GetSelectCostumeCode");
static_assert(offsetof(PlayerDatabaseWork_BP_GetSelectCostumeCode, CharacterId) == 0x000000, "Member 'PlayerDatabaseWork_BP_GetSelectCostumeCode::CharacterId' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_GetSelectCostumeCode, ReturnValue) == 0x000004, "Member 'PlayerDatabaseWork_BP_GetSelectCostumeCode::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_HasChangedAvatarData
// 0x0008 (0x0008 - 0x0000)
struct PlayerDatabaseWork_BP_HasChangedAvatarData final
{
public:
	int32                                         No;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerDatabaseWork_BP_HasChangedAvatarData) == 0x000004, "Wrong alignment on PlayerDatabaseWork_BP_HasChangedAvatarData");
static_assert(sizeof(PlayerDatabaseWork_BP_HasChangedAvatarData) == 0x000008, "Wrong size on PlayerDatabaseWork_BP_HasChangedAvatarData");
static_assert(offsetof(PlayerDatabaseWork_BP_HasChangedAvatarData, No) == 0x000000, "Member 'PlayerDatabaseWork_BP_HasChangedAvatarData::No' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_HasChangedAvatarData, ReturnValue) == 0x000004, "Member 'PlayerDatabaseWork_BP_HasChangedAvatarData::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_HasChangedMyADDataEditData
// 0x0001 (0x0001 - 0x0000)
struct PlayerDatabaseWork_BP_HasChangedMyADDataEditData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_HasChangedMyADDataEditData) == 0x000001, "Wrong alignment on PlayerDatabaseWork_BP_HasChangedMyADDataEditData");
static_assert(sizeof(PlayerDatabaseWork_BP_HasChangedMyADDataEditData) == 0x000001, "Wrong size on PlayerDatabaseWork_BP_HasChangedMyADDataEditData");
static_assert(offsetof(PlayerDatabaseWork_BP_HasChangedMyADDataEditData, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_BP_HasChangedMyADDataEditData::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_ValidateCharacter
// 0x0018 (0x0018 - 0x0000)
struct PlayerDatabaseWork_BP_ValidateCharacter final
{
public:
	class FString                                 CharacterId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CharaSelect;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerDatabaseWork_BP_ValidateCharacter) == 0x000008, "Wrong alignment on PlayerDatabaseWork_BP_ValidateCharacter");
static_assert(sizeof(PlayerDatabaseWork_BP_ValidateCharacter) == 0x000018, "Wrong size on PlayerDatabaseWork_BP_ValidateCharacter");
static_assert(offsetof(PlayerDatabaseWork_BP_ValidateCharacter, CharacterId) == 0x000000, "Member 'PlayerDatabaseWork_BP_ValidateCharacter::CharacterId' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_ValidateCharacter, CharaSelect) == 0x000010, "Member 'PlayerDatabaseWork_BP_ValidateCharacter::CharaSelect' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_ValidateCharacter, ReturnValue) == 0x000011, "Member 'PlayerDatabaseWork_BP_ValidateCharacter::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.BP_ValidateCharacterFromEnum
// 0x0003 (0x0003 - 0x0000)
struct PlayerDatabaseWork_BP_ValidateCharacterFromEnum final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CharaSelect;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_BP_ValidateCharacterFromEnum) == 0x000001, "Wrong alignment on PlayerDatabaseWork_BP_ValidateCharacterFromEnum");
static_assert(sizeof(PlayerDatabaseWork_BP_ValidateCharacterFromEnum) == 0x000003, "Wrong size on PlayerDatabaseWork_BP_ValidateCharacterFromEnum");
static_assert(offsetof(PlayerDatabaseWork_BP_ValidateCharacterFromEnum, CharacterId) == 0x000000, "Member 'PlayerDatabaseWork_BP_ValidateCharacterFromEnum::CharacterId' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_ValidateCharacterFromEnum, CharaSelect) == 0x000001, "Member 'PlayerDatabaseWork_BP_ValidateCharacterFromEnum::CharaSelect' has a wrong offset!");
static_assert(offsetof(PlayerDatabaseWork_BP_ValidateCharacterFromEnum, ReturnValue) == 0x000002, "Member 'PlayerDatabaseWork_BP_ValidateCharacterFromEnum::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerDatabaseWork.GetFirstTodayLogin
// 0x0001 (0x0001 - 0x0000)
struct PlayerDatabaseWork_GetFirstTodayLogin final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerDatabaseWork_GetFirstTodayLogin) == 0x000001, "Wrong alignment on PlayerDatabaseWork_GetFirstTodayLogin");
static_assert(sizeof(PlayerDatabaseWork_GetFirstTodayLogin) == 0x000001, "Wrong size on PlayerDatabaseWork_GetFirstTodayLogin");
static_assert(offsetof(PlayerDatabaseWork_GetFirstTodayLogin, ReturnValue) == 0x000000, "Member 'PlayerDatabaseWork_GetFirstTodayLogin::ReturnValue' has a wrong offset!");

// Function GameModule.PlayerVoiceChatStateWidget.OnVCBeginTalk
// 0x0010 (0x0010 - 0x0000)
struct PlayerVoiceChatStateWidget_OnVCBeginTalk final
{
public:
	class FString                                 UniqueNetId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoiceChatStateWidget_OnVCBeginTalk) == 0x000008, "Wrong alignment on PlayerVoiceChatStateWidget_OnVCBeginTalk");
static_assert(sizeof(PlayerVoiceChatStateWidget_OnVCBeginTalk) == 0x000010, "Wrong size on PlayerVoiceChatStateWidget_OnVCBeginTalk");
static_assert(offsetof(PlayerVoiceChatStateWidget_OnVCBeginTalk, UniqueNetId) == 0x000000, "Member 'PlayerVoiceChatStateWidget_OnVCBeginTalk::UniqueNetId' has a wrong offset!");

// Function GameModule.PlayerVoiceChatStateWidget.OnVCConnected
// 0x0010 (0x0010 - 0x0000)
struct PlayerVoiceChatStateWidget_OnVCConnected final
{
public:
	class FString                                 UniqueNetId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoiceChatStateWidget_OnVCConnected) == 0x000008, "Wrong alignment on PlayerVoiceChatStateWidget_OnVCConnected");
static_assert(sizeof(PlayerVoiceChatStateWidget_OnVCConnected) == 0x000010, "Wrong size on PlayerVoiceChatStateWidget_OnVCConnected");
static_assert(offsetof(PlayerVoiceChatStateWidget_OnVCConnected, UniqueNetId) == 0x000000, "Member 'PlayerVoiceChatStateWidget_OnVCConnected::UniqueNetId' has a wrong offset!");

// Function GameModule.PlayerVoiceChatStateWidget.OnVCDisconnected
// 0x0010 (0x0010 - 0x0000)
struct PlayerVoiceChatStateWidget_OnVCDisconnected final
{
public:
	class FString                                 UniqueNetId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoiceChatStateWidget_OnVCDisconnected) == 0x000008, "Wrong alignment on PlayerVoiceChatStateWidget_OnVCDisconnected");
static_assert(sizeof(PlayerVoiceChatStateWidget_OnVCDisconnected) == 0x000010, "Wrong size on PlayerVoiceChatStateWidget_OnVCDisconnected");
static_assert(offsetof(PlayerVoiceChatStateWidget_OnVCDisconnected, UniqueNetId) == 0x000000, "Member 'PlayerVoiceChatStateWidget_OnVCDisconnected::UniqueNetId' has a wrong offset!");

// Function GameModule.PlayerVoiceChatStateWidget.OnVCEndTalk
// 0x0010 (0x0010 - 0x0000)
struct PlayerVoiceChatStateWidget_OnVCEndTalk final
{
public:
	class FString                                 UniqueNetId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoiceChatStateWidget_OnVCEndTalk) == 0x000008, "Wrong alignment on PlayerVoiceChatStateWidget_OnVCEndTalk");
static_assert(sizeof(PlayerVoiceChatStateWidget_OnVCEndTalk) == 0x000010, "Wrong size on PlayerVoiceChatStateWidget_OnVCEndTalk");
static_assert(offsetof(PlayerVoiceChatStateWidget_OnVCEndTalk, UniqueNetId) == 0x000000, "Member 'PlayerVoiceChatStateWidget_OnVCEndTalk::UniqueNetId' has a wrong offset!");

// Function GameModule.PlayerVoiceChatStateWidget.OnVCMute
// 0x0010 (0x0010 - 0x0000)
struct PlayerVoiceChatStateWidget_OnVCMute final
{
public:
	class FString                                 UniqueNetId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoiceChatStateWidget_OnVCMute) == 0x000008, "Wrong alignment on PlayerVoiceChatStateWidget_OnVCMute");
static_assert(sizeof(PlayerVoiceChatStateWidget_OnVCMute) == 0x000010, "Wrong size on PlayerVoiceChatStateWidget_OnVCMute");
static_assert(offsetof(PlayerVoiceChatStateWidget_OnVCMute, UniqueNetId) == 0x000000, "Member 'PlayerVoiceChatStateWidget_OnVCMute::UniqueNetId' has a wrong offset!");

// Function GameModule.PlayerVoiceChatStateWidget.OnVCUnMute
// 0x0010 (0x0010 - 0x0000)
struct PlayerVoiceChatStateWidget_OnVCUnMute final
{
public:
	class FString                                 UniqueNetId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoiceChatStateWidget_OnVCUnMute) == 0x000008, "Wrong alignment on PlayerVoiceChatStateWidget_OnVCUnMute");
static_assert(sizeof(PlayerVoiceChatStateWidget_OnVCUnMute) == 0x000010, "Wrong size on PlayerVoiceChatStateWidget_OnVCUnMute");
static_assert(offsetof(PlayerVoiceChatStateWidget_OnVCUnMute, UniqueNetId) == 0x000000, "Member 'PlayerVoiceChatStateWidget_OnVCUnMute::UniqueNetId' has a wrong offset!");

// Function GameModule.PositionMeasurement.GetSquaredDistanceData
// 0x0020 (0x0020 - 0x0000)
struct PositionMeasurement_GetSquaredDistanceData final
{
public:
	TArray<class UWidget*>                        InWidgetArray;                                     // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<float>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PositionMeasurement_GetSquaredDistanceData) == 0x000008, "Wrong alignment on PositionMeasurement_GetSquaredDistanceData");
static_assert(sizeof(PositionMeasurement_GetSquaredDistanceData) == 0x000020, "Wrong size on PositionMeasurement_GetSquaredDistanceData");
static_assert(offsetof(PositionMeasurement_GetSquaredDistanceData, InWidgetArray) == 0x000000, "Member 'PositionMeasurement_GetSquaredDistanceData::InWidgetArray' has a wrong offset!");
static_assert(offsetof(PositionMeasurement_GetSquaredDistanceData, ReturnValue) == 0x000010, "Member 'PositionMeasurement_GetSquaredDistanceData::ReturnValue' has a wrong offset!");

// Function GameModule.PositionMeasurement.InitOneToManyProperties
// 0x0010 (0x0010 - 0x0000)
struct PositionMeasurement_InitOneToManyProperties final
{
public:
	class UWidget*                                baseWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ParentWidget;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PositionMeasurement_InitOneToManyProperties) == 0x000008, "Wrong alignment on PositionMeasurement_InitOneToManyProperties");
static_assert(sizeof(PositionMeasurement_InitOneToManyProperties) == 0x000010, "Wrong size on PositionMeasurement_InitOneToManyProperties");
static_assert(offsetof(PositionMeasurement_InitOneToManyProperties, baseWidget) == 0x000000, "Member 'PositionMeasurement_InitOneToManyProperties::baseWidget' has a wrong offset!");
static_assert(offsetof(PositionMeasurement_InitOneToManyProperties, ParentWidget) == 0x000008, "Member 'PositionMeasurement_InitOneToManyProperties::ParentWidget' has a wrong offset!");

// Function GameModule.PositionMeasurement.InitPairPointProperties
// 0x0018 (0x0018 - 0x0000)
struct PositionMeasurement_InitPairPointProperties final
{
public:
	class UWidget*                                WidgetA;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                WidgetB;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ParentWidget;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PositionMeasurement_InitPairPointProperties) == 0x000008, "Wrong alignment on PositionMeasurement_InitPairPointProperties");
static_assert(sizeof(PositionMeasurement_InitPairPointProperties) == 0x000018, "Wrong size on PositionMeasurement_InitPairPointProperties");
static_assert(offsetof(PositionMeasurement_InitPairPointProperties, WidgetA) == 0x000000, "Member 'PositionMeasurement_InitPairPointProperties::WidgetA' has a wrong offset!");
static_assert(offsetof(PositionMeasurement_InitPairPointProperties, WidgetB) == 0x000008, "Member 'PositionMeasurement_InitPairPointProperties::WidgetB' has a wrong offset!");
static_assert(offsetof(PositionMeasurement_InitPairPointProperties, ParentWidget) == 0x000010, "Member 'PositionMeasurement_InitPairPointProperties::ParentWidget' has a wrong offset!");

// Function GameModule.PrimaryAssetCharacterGUI.BP_GetPaperSprite
// 0x0010 (0x0010 - 0x0000)
struct PrimaryAssetCharacterGUI_BP_GetPaperSprite final
{
public:
	EFaceIconTypeId                               TypeId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrimaryAssetCharacterGUI_BP_GetPaperSprite) == 0x000008, "Wrong alignment on PrimaryAssetCharacterGUI_BP_GetPaperSprite");
static_assert(sizeof(PrimaryAssetCharacterGUI_BP_GetPaperSprite) == 0x000010, "Wrong size on PrimaryAssetCharacterGUI_BP_GetPaperSprite");
static_assert(offsetof(PrimaryAssetCharacterGUI_BP_GetPaperSprite, TypeId) == 0x000000, "Member 'PrimaryAssetCharacterGUI_BP_GetPaperSprite::TypeId' has a wrong offset!");
static_assert(offsetof(PrimaryAssetCharacterGUI_BP_GetPaperSprite, ReturnValue) == 0x000008, "Member 'PrimaryAssetCharacterGUI_BP_GetPaperSprite::ReturnValue' has a wrong offset!");

// Function GameModule.PrimaryAssetCharacterGUI.BP_GetPaperSpriteBattleHistory
// 0x0008 (0x0008 - 0x0000)
struct PrimaryAssetCharacterGUI_BP_GetPaperSpriteBattleHistory final
{
public:
	class UPaperSprite*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrimaryAssetCharacterGUI_BP_GetPaperSpriteBattleHistory) == 0x000008, "Wrong alignment on PrimaryAssetCharacterGUI_BP_GetPaperSpriteBattleHistory");
static_assert(sizeof(PrimaryAssetCharacterGUI_BP_GetPaperSpriteBattleHistory) == 0x000008, "Wrong size on PrimaryAssetCharacterGUI_BP_GetPaperSpriteBattleHistory");
static_assert(offsetof(PrimaryAssetCharacterGUI_BP_GetPaperSpriteBattleHistory, ReturnValue) == 0x000000, "Member 'PrimaryAssetCharacterGUI_BP_GetPaperSpriteBattleHistory::ReturnValue' has a wrong offset!");

// Function GameModule.PrimaryAssetCharacterGUI.BP_GetPaperSpriteBattleStyle
// 0x0008 (0x0008 - 0x0000)
struct PrimaryAssetCharacterGUI_BP_GetPaperSpriteBattleStyle final
{
public:
	class UPaperSprite*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrimaryAssetCharacterGUI_BP_GetPaperSpriteBattleStyle) == 0x000008, "Wrong alignment on PrimaryAssetCharacterGUI_BP_GetPaperSpriteBattleStyle");
static_assert(sizeof(PrimaryAssetCharacterGUI_BP_GetPaperSpriteBattleStyle) == 0x000008, "Wrong size on PrimaryAssetCharacterGUI_BP_GetPaperSpriteBattleStyle");
static_assert(offsetof(PrimaryAssetCharacterGUI_BP_GetPaperSpriteBattleStyle, ReturnValue) == 0x000000, "Member 'PrimaryAssetCharacterGUI_BP_GetPaperSpriteBattleStyle::ReturnValue' has a wrong offset!");

// Function GameModule.PrimaryAssetCharacterGUI.BP_GetPaperSpriteBillboardChart
// 0x0008 (0x0008 - 0x0000)
struct PrimaryAssetCharacterGUI_BP_GetPaperSpriteBillboardChart final
{
public:
	class UPaperSprite*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrimaryAssetCharacterGUI_BP_GetPaperSpriteBillboardChart) == 0x000008, "Wrong alignment on PrimaryAssetCharacterGUI_BP_GetPaperSpriteBillboardChart");
static_assert(sizeof(PrimaryAssetCharacterGUI_BP_GetPaperSpriteBillboardChart) == 0x000008, "Wrong size on PrimaryAssetCharacterGUI_BP_GetPaperSpriteBillboardChart");
static_assert(offsetof(PrimaryAssetCharacterGUI_BP_GetPaperSpriteBillboardChart, ReturnValue) == 0x000000, "Member 'PrimaryAssetCharacterGUI_BP_GetPaperSpriteBillboardChart::ReturnValue' has a wrong offset!");

// Function GameModule.PrimaryAssetCharacterGUI.BP_GetPaperSpriteCharaSelect
// 0x0008 (0x0008 - 0x0000)
struct PrimaryAssetCharacterGUI_BP_GetPaperSpriteCharaSelect final
{
public:
	class UPaperSprite*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrimaryAssetCharacterGUI_BP_GetPaperSpriteCharaSelect) == 0x000008, "Wrong alignment on PrimaryAssetCharacterGUI_BP_GetPaperSpriteCharaSelect");
static_assert(sizeof(PrimaryAssetCharacterGUI_BP_GetPaperSpriteCharaSelect) == 0x000008, "Wrong size on PrimaryAssetCharacterGUI_BP_GetPaperSpriteCharaSelect");
static_assert(offsetof(PrimaryAssetCharacterGUI_BP_GetPaperSpriteCharaSelect, ReturnValue) == 0x000000, "Member 'PrimaryAssetCharacterGUI_BP_GetPaperSpriteCharaSelect::ReturnValue' has a wrong offset!");

// Function GameModule.PrimaryAssetCharacterGUI.BP_GetPaperSpriteProfileBackImage
// 0x0010 (0x0010 - 0x0000)
struct PrimaryAssetCharacterGUI_BP_GetPaperSpriteProfileBackImage final
{
public:
	ECharacterId                                  CharaID;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrimaryAssetCharacterGUI_BP_GetPaperSpriteProfileBackImage) == 0x000008, "Wrong alignment on PrimaryAssetCharacterGUI_BP_GetPaperSpriteProfileBackImage");
static_assert(sizeof(PrimaryAssetCharacterGUI_BP_GetPaperSpriteProfileBackImage) == 0x000010, "Wrong size on PrimaryAssetCharacterGUI_BP_GetPaperSpriteProfileBackImage");
static_assert(offsetof(PrimaryAssetCharacterGUI_BP_GetPaperSpriteProfileBackImage, CharaID) == 0x000000, "Member 'PrimaryAssetCharacterGUI_BP_GetPaperSpriteProfileBackImage::CharaID' has a wrong offset!");
static_assert(offsetof(PrimaryAssetCharacterGUI_BP_GetPaperSpriteProfileBackImage, ReturnValue) == 0x000008, "Member 'PrimaryAssetCharacterGUI_BP_GetPaperSpriteProfileBackImage::ReturnValue' has a wrong offset!");

// Function GameModule.PrimaryAssetCharacterGUI.BP_GetPaperSpriteVariationIcon
// 0x0010 (0x0010 - 0x0000)
struct PrimaryAssetCharacterGUI_BP_GetPaperSpriteVariationIcon final
{
public:
	int32                                         VariationId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrimaryAssetCharacterGUI_BP_GetPaperSpriteVariationIcon) == 0x000008, "Wrong alignment on PrimaryAssetCharacterGUI_BP_GetPaperSpriteVariationIcon");
static_assert(sizeof(PrimaryAssetCharacterGUI_BP_GetPaperSpriteVariationIcon) == 0x000010, "Wrong size on PrimaryAssetCharacterGUI_BP_GetPaperSpriteVariationIcon");
static_assert(offsetof(PrimaryAssetCharacterGUI_BP_GetPaperSpriteVariationIcon, VariationId) == 0x000000, "Member 'PrimaryAssetCharacterGUI_BP_GetPaperSpriteVariationIcon::VariationId' has a wrong offset!");
static_assert(offsetof(PrimaryAssetCharacterGUI_BP_GetPaperSpriteVariationIcon, ReturnValue) == 0x000008, "Member 'PrimaryAssetCharacterGUI_BP_GetPaperSpriteVariationIcon::ReturnValue' has a wrong offset!");

// Function GameModule.PrimaryAssetCharacterGUI.BP_SetOffset
// 0x0040 (0x0040 - 0x0000)
struct PrimaryAssetCharacterGUI_BP_SetOffset final
{
public:
	ESceneCaptureTypeId                           Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrimaryAssetCharacterGUI_BP_SetOffset) == 0x000010, "Wrong alignment on PrimaryAssetCharacterGUI_BP_SetOffset");
static_assert(sizeof(PrimaryAssetCharacterGUI_BP_SetOffset) == 0x000040, "Wrong size on PrimaryAssetCharacterGUI_BP_SetOffset");
static_assert(offsetof(PrimaryAssetCharacterGUI_BP_SetOffset, Type) == 0x000000, "Member 'PrimaryAssetCharacterGUI_BP_SetOffset::Type' has a wrong offset!");
static_assert(offsetof(PrimaryAssetCharacterGUI_BP_SetOffset, Transform) == 0x000010, "Member 'PrimaryAssetCharacterGUI_BP_SetOffset::Transform' has a wrong offset!");

// Function GameModule.PrimaryAssetCharacterGUI.GetOffset
// 0x0040 (0x0040 - 0x0000)
struct PrimaryAssetCharacterGUI_GetOffset final
{
public:
	ESceneCaptureTypeId                           Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OutOffset;                                         // 0x0010(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrimaryAssetCharacterGUI_GetOffset) == 0x000010, "Wrong alignment on PrimaryAssetCharacterGUI_GetOffset");
static_assert(sizeof(PrimaryAssetCharacterGUI_GetOffset) == 0x000040, "Wrong size on PrimaryAssetCharacterGUI_GetOffset");
static_assert(offsetof(PrimaryAssetCharacterGUI_GetOffset, Type) == 0x000000, "Member 'PrimaryAssetCharacterGUI_GetOffset::Type' has a wrong offset!");
static_assert(offsetof(PrimaryAssetCharacterGUI_GetOffset, OutOffset) == 0x000010, "Member 'PrimaryAssetCharacterGUI_GetOffset::OutOffset' has a wrong offset!");

// Function GameModule.PrimaryAssetGashaImage.BP_GetPaperSpriteBanner
// 0x0018 (0x0018 - 0x0000)
struct PrimaryAssetGashaImage_BP_GetPaperSpriteBanner final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPaperSprite*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrimaryAssetGashaImage_BP_GetPaperSpriteBanner) == 0x000008, "Wrong alignment on PrimaryAssetGashaImage_BP_GetPaperSpriteBanner");
static_assert(sizeof(PrimaryAssetGashaImage_BP_GetPaperSpriteBanner) == 0x000018, "Wrong size on PrimaryAssetGashaImage_BP_GetPaperSpriteBanner");
static_assert(offsetof(PrimaryAssetGashaImage_BP_GetPaperSpriteBanner, Key) == 0x000000, "Member 'PrimaryAssetGashaImage_BP_GetPaperSpriteBanner::Key' has a wrong offset!");
static_assert(offsetof(PrimaryAssetGashaImage_BP_GetPaperSpriteBanner, ReturnValue) == 0x000010, "Member 'PrimaryAssetGashaImage_BP_GetPaperSpriteBanner::ReturnValue' has a wrong offset!");

// Function GameModule.PrimaryAssetGashaImage.BP_GetPaperSpriteHelp
// 0x0018 (0x0018 - 0x0000)
struct PrimaryAssetGashaImage_BP_GetPaperSpriteHelp final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPaperSprite*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrimaryAssetGashaImage_BP_GetPaperSpriteHelp) == 0x000008, "Wrong alignment on PrimaryAssetGashaImage_BP_GetPaperSpriteHelp");
static_assert(sizeof(PrimaryAssetGashaImage_BP_GetPaperSpriteHelp) == 0x000018, "Wrong size on PrimaryAssetGashaImage_BP_GetPaperSpriteHelp");
static_assert(offsetof(PrimaryAssetGashaImage_BP_GetPaperSpriteHelp, Key) == 0x000000, "Member 'PrimaryAssetGashaImage_BP_GetPaperSpriteHelp::Key' has a wrong offset!");
static_assert(offsetof(PrimaryAssetGashaImage_BP_GetPaperSpriteHelp, ReturnValue) == 0x000010, "Member 'PrimaryAssetGashaImage_BP_GetPaperSpriteHelp::ReturnValue' has a wrong offset!");

// Function GameModule.PrimaryAssetGashaImage.BP_GetPaperSpriteLogo
// 0x0018 (0x0018 - 0x0000)
struct PrimaryAssetGashaImage_BP_GetPaperSpriteLogo final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPaperSprite*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrimaryAssetGashaImage_BP_GetPaperSpriteLogo) == 0x000008, "Wrong alignment on PrimaryAssetGashaImage_BP_GetPaperSpriteLogo");
static_assert(sizeof(PrimaryAssetGashaImage_BP_GetPaperSpriteLogo) == 0x000018, "Wrong size on PrimaryAssetGashaImage_BP_GetPaperSpriteLogo");
static_assert(offsetof(PrimaryAssetGashaImage_BP_GetPaperSpriteLogo, Key) == 0x000000, "Member 'PrimaryAssetGashaImage_BP_GetPaperSpriteLogo::Key' has a wrong offset!");
static_assert(offsetof(PrimaryAssetGashaImage_BP_GetPaperSpriteLogo, ReturnValue) == 0x000010, "Member 'PrimaryAssetGashaImage_BP_GetPaperSpriteLogo::ReturnValue' has a wrong offset!");

// Function GameModule.PrimaryAssetGuild.BP_GetPaperSpriteEmblem
// 0x0010 (0x0010 - 0x0000)
struct PrimaryAssetGuild_BP_GetPaperSpriteEmblem final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrimaryAssetGuild_BP_GetPaperSpriteEmblem) == 0x000008, "Wrong alignment on PrimaryAssetGuild_BP_GetPaperSpriteEmblem");
static_assert(sizeof(PrimaryAssetGuild_BP_GetPaperSpriteEmblem) == 0x000010, "Wrong size on PrimaryAssetGuild_BP_GetPaperSpriteEmblem");
static_assert(offsetof(PrimaryAssetGuild_BP_GetPaperSpriteEmblem, Key) == 0x000000, "Member 'PrimaryAssetGuild_BP_GetPaperSpriteEmblem::Key' has a wrong offset!");
static_assert(offsetof(PrimaryAssetGuild_BP_GetPaperSpriteEmblem, ReturnValue) == 0x000008, "Member 'PrimaryAssetGuild_BP_GetPaperSpriteEmblem::ReturnValue' has a wrong offset!");

// Function GameModule.PrimaryAssetItemIcon.BP_GetPaperSpriteItemIconFromItemCode
// 0x0018 (0x0018 - 0x0000)
struct PrimaryAssetItemIcon_BP_GetPaperSpriteItemIconFromItemCode final
{
public:
	int32                                         ItemCategory;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCode;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSmall;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrimaryAssetItemIcon_BP_GetPaperSpriteItemIconFromItemCode) == 0x000008, "Wrong alignment on PrimaryAssetItemIcon_BP_GetPaperSpriteItemIconFromItemCode");
static_assert(sizeof(PrimaryAssetItemIcon_BP_GetPaperSpriteItemIconFromItemCode) == 0x000018, "Wrong size on PrimaryAssetItemIcon_BP_GetPaperSpriteItemIconFromItemCode");
static_assert(offsetof(PrimaryAssetItemIcon_BP_GetPaperSpriteItemIconFromItemCode, ItemCategory) == 0x000000, "Member 'PrimaryAssetItemIcon_BP_GetPaperSpriteItemIconFromItemCode::ItemCategory' has a wrong offset!");
static_assert(offsetof(PrimaryAssetItemIcon_BP_GetPaperSpriteItemIconFromItemCode, ItemCode) == 0x000004, "Member 'PrimaryAssetItemIcon_BP_GetPaperSpriteItemIconFromItemCode::ItemCode' has a wrong offset!");
static_assert(offsetof(PrimaryAssetItemIcon_BP_GetPaperSpriteItemIconFromItemCode, IsSmall) == 0x000008, "Member 'PrimaryAssetItemIcon_BP_GetPaperSpriteItemIconFromItemCode::IsSmall' has a wrong offset!");
static_assert(offsetof(PrimaryAssetItemIcon_BP_GetPaperSpriteItemIconFromItemCode, ReturnValue) == 0x000010, "Member 'PrimaryAssetItemIcon_BP_GetPaperSpriteItemIconFromItemCode::ReturnValue' has a wrong offset!");

// Function GameModule.PrimaryAssetItemIcon.BP_GetPaperSpriteItemIconFromShopItemCode
// 0x0010 (0x0010 - 0x0000)
struct PrimaryAssetItemIcon_BP_GetPaperSpriteItemIconFromShopItemCode final
{
public:
	int32                                         ShopItemCode;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSmall;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrimaryAssetItemIcon_BP_GetPaperSpriteItemIconFromShopItemCode) == 0x000008, "Wrong alignment on PrimaryAssetItemIcon_BP_GetPaperSpriteItemIconFromShopItemCode");
static_assert(sizeof(PrimaryAssetItemIcon_BP_GetPaperSpriteItemIconFromShopItemCode) == 0x000010, "Wrong size on PrimaryAssetItemIcon_BP_GetPaperSpriteItemIconFromShopItemCode");
static_assert(offsetof(PrimaryAssetItemIcon_BP_GetPaperSpriteItemIconFromShopItemCode, ShopItemCode) == 0x000000, "Member 'PrimaryAssetItemIcon_BP_GetPaperSpriteItemIconFromShopItemCode::ShopItemCode' has a wrong offset!");
static_assert(offsetof(PrimaryAssetItemIcon_BP_GetPaperSpriteItemIconFromShopItemCode, IsSmall) == 0x000004, "Member 'PrimaryAssetItemIcon_BP_GetPaperSpriteItemIconFromShopItemCode::IsSmall' has a wrong offset!");
static_assert(offsetof(PrimaryAssetItemIcon_BP_GetPaperSpriteItemIconFromShopItemCode, ReturnValue) == 0x000008, "Member 'PrimaryAssetItemIcon_BP_GetPaperSpriteItemIconFromShopItemCode::ReturnValue' has a wrong offset!");

// Function GameModule.PrimaryAssetLanguageImage.BP_GetDataImage
// 0x0030 (0x0030 - 0x0000)
struct PrimaryAssetLanguageImage_BP_GetDataImage final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrimaryAssetLanguageImage_BP_GetDataImage) == 0x000008, "Wrong alignment on PrimaryAssetLanguageImage_BP_GetDataImage");
static_assert(sizeof(PrimaryAssetLanguageImage_BP_GetDataImage) == 0x000030, "Wrong size on PrimaryAssetLanguageImage_BP_GetDataImage");
static_assert(offsetof(PrimaryAssetLanguageImage_BP_GetDataImage, Code) == 0x000000, "Member 'PrimaryAssetLanguageImage_BP_GetDataImage::Code' has a wrong offset!");
static_assert(offsetof(PrimaryAssetLanguageImage_BP_GetDataImage, ReturnValue) == 0x000008, "Member 'PrimaryAssetLanguageImage_BP_GetDataImage::ReturnValue' has a wrong offset!");

// Function GameModule.PrimaryAssetLanguageImage.BP_GetPCImage
// 0x0030 (0x0030 - 0x0000)
struct PrimaryAssetLanguageImage_BP_GetPCImage final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrimaryAssetLanguageImage_BP_GetPCImage) == 0x000008, "Wrong alignment on PrimaryAssetLanguageImage_BP_GetPCImage");
static_assert(sizeof(PrimaryAssetLanguageImage_BP_GetPCImage) == 0x000030, "Wrong size on PrimaryAssetLanguageImage_BP_GetPCImage");
static_assert(offsetof(PrimaryAssetLanguageImage_BP_GetPCImage, Code) == 0x000000, "Member 'PrimaryAssetLanguageImage_BP_GetPCImage::Code' has a wrong offset!");
static_assert(offsetof(PrimaryAssetLanguageImage_BP_GetPCImage, ReturnValue) == 0x000008, "Member 'PrimaryAssetLanguageImage_BP_GetPCImage::ReturnValue' has a wrong offset!");

// Function GameModule.PrimaryAssetLanguageImage.BP_GetPlayStationImage
// 0x0030 (0x0030 - 0x0000)
struct PrimaryAssetLanguageImage_BP_GetPlayStationImage final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrimaryAssetLanguageImage_BP_GetPlayStationImage) == 0x000008, "Wrong alignment on PrimaryAssetLanguageImage_BP_GetPlayStationImage");
static_assert(sizeof(PrimaryAssetLanguageImage_BP_GetPlayStationImage) == 0x000030, "Wrong size on PrimaryAssetLanguageImage_BP_GetPlayStationImage");
static_assert(offsetof(PrimaryAssetLanguageImage_BP_GetPlayStationImage, Code) == 0x000000, "Member 'PrimaryAssetLanguageImage_BP_GetPlayStationImage::Code' has a wrong offset!");
static_assert(offsetof(PrimaryAssetLanguageImage_BP_GetPlayStationImage, ReturnValue) == 0x000008, "Member 'PrimaryAssetLanguageImage_BP_GetPlayStationImage::ReturnValue' has a wrong offset!");

// Function GameModule.PrimaryAssetLanguageImage.BP_GetTOSImage
// 0x0030 (0x0030 - 0x0000)
struct PrimaryAssetLanguageImage_BP_GetTOSImage final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrimaryAssetLanguageImage_BP_GetTOSImage) == 0x000008, "Wrong alignment on PrimaryAssetLanguageImage_BP_GetTOSImage");
static_assert(sizeof(PrimaryAssetLanguageImage_BP_GetTOSImage) == 0x000030, "Wrong size on PrimaryAssetLanguageImage_BP_GetTOSImage");
static_assert(offsetof(PrimaryAssetLanguageImage_BP_GetTOSImage, Code) == 0x000000, "Member 'PrimaryAssetLanguageImage_BP_GetTOSImage::Code' has a wrong offset!");
static_assert(offsetof(PrimaryAssetLanguageImage_BP_GetTOSImage, ReturnValue) == 0x000008, "Member 'PrimaryAssetLanguageImage_BP_GetTOSImage::ReturnValue' has a wrong offset!");

// Function GameModule.PrimaryAssetLicense.BP_GetTextureL
// 0x0018 (0x0018 - 0x0000)
struct PrimaryAssetLicense_BP_GetTextureL final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPaperSprite*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrimaryAssetLicense_BP_GetTextureL) == 0x000008, "Wrong alignment on PrimaryAssetLicense_BP_GetTextureL");
static_assert(sizeof(PrimaryAssetLicense_BP_GetTextureL) == 0x000018, "Wrong size on PrimaryAssetLicense_BP_GetTextureL");
static_assert(offsetof(PrimaryAssetLicense_BP_GetTextureL, Key) == 0x000000, "Member 'PrimaryAssetLicense_BP_GetTextureL::Key' has a wrong offset!");
static_assert(offsetof(PrimaryAssetLicense_BP_GetTextureL, ReturnValue) == 0x000010, "Member 'PrimaryAssetLicense_BP_GetTextureL::ReturnValue' has a wrong offset!");

// Function GameModule.PrimaryAssetLicense.BP_GetTextureM
// 0x0018 (0x0018 - 0x0000)
struct PrimaryAssetLicense_BP_GetTextureM final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPaperSprite*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrimaryAssetLicense_BP_GetTextureM) == 0x000008, "Wrong alignment on PrimaryAssetLicense_BP_GetTextureM");
static_assert(sizeof(PrimaryAssetLicense_BP_GetTextureM) == 0x000018, "Wrong size on PrimaryAssetLicense_BP_GetTextureM");
static_assert(offsetof(PrimaryAssetLicense_BP_GetTextureM, Key) == 0x000000, "Member 'PrimaryAssetLicense_BP_GetTextureM::Key' has a wrong offset!");
static_assert(offsetof(PrimaryAssetLicense_BP_GetTextureM, ReturnValue) == 0x000010, "Member 'PrimaryAssetLicense_BP_GetTextureM::ReturnValue' has a wrong offset!");

// Function GameModule.PrimaryAssetLicense.BP_TextureS
// 0x0018 (0x0018 - 0x0000)
struct PrimaryAssetLicense_BP_TextureS final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPaperSprite*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrimaryAssetLicense_BP_TextureS) == 0x000008, "Wrong alignment on PrimaryAssetLicense_BP_TextureS");
static_assert(sizeof(PrimaryAssetLicense_BP_TextureS) == 0x000018, "Wrong size on PrimaryAssetLicense_BP_TextureS");
static_assert(offsetof(PrimaryAssetLicense_BP_TextureS, Key) == 0x000000, "Member 'PrimaryAssetLicense_BP_TextureS::Key' has a wrong offset!");
static_assert(offsetof(PrimaryAssetLicense_BP_TextureS, ReturnValue) == 0x000010, "Member 'PrimaryAssetLicense_BP_TextureS::ReturnValue' has a wrong offset!");

// Function GameModule.PrimaryAssetLoginBonusLogo.BP_GetPaperSpriteLogo
// 0x0018 (0x0018 - 0x0000)
struct PrimaryAssetLoginBonusLogo_BP_GetPaperSpriteLogo final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPaperSprite*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrimaryAssetLoginBonusLogo_BP_GetPaperSpriteLogo) == 0x000008, "Wrong alignment on PrimaryAssetLoginBonusLogo_BP_GetPaperSpriteLogo");
static_assert(sizeof(PrimaryAssetLoginBonusLogo_BP_GetPaperSpriteLogo) == 0x000018, "Wrong size on PrimaryAssetLoginBonusLogo_BP_GetPaperSpriteLogo");
static_assert(offsetof(PrimaryAssetLoginBonusLogo_BP_GetPaperSpriteLogo, Key) == 0x000000, "Member 'PrimaryAssetLoginBonusLogo_BP_GetPaperSpriteLogo::Key' has a wrong offset!");
static_assert(offsetof(PrimaryAssetLoginBonusLogo_BP_GetPaperSpriteLogo, ReturnValue) == 0x000010, "Member 'PrimaryAssetLoginBonusLogo_BP_GetPaperSpriteLogo::ReturnValue' has a wrong offset!");

// Function GameModule.PrimaryAssetStaffrollAnimation.BP_GetMovieMaterial
// 0x0010 (0x0010 - 0x0000)
struct PrimaryAssetStaffrollAnimation_BP_GetMovieMaterial final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrimaryAssetStaffrollAnimation_BP_GetMovieMaterial) == 0x000008, "Wrong alignment on PrimaryAssetStaffrollAnimation_BP_GetMovieMaterial");
static_assert(sizeof(PrimaryAssetStaffrollAnimation_BP_GetMovieMaterial) == 0x000010, "Wrong size on PrimaryAssetStaffrollAnimation_BP_GetMovieMaterial");
static_assert(offsetof(PrimaryAssetStaffrollAnimation_BP_GetMovieMaterial, Index_0) == 0x000000, "Member 'PrimaryAssetStaffrollAnimation_BP_GetMovieMaterial::Index_0' has a wrong offset!");
static_assert(offsetof(PrimaryAssetStaffrollAnimation_BP_GetMovieMaterial, ReturnValue) == 0x000008, "Member 'PrimaryAssetStaffrollAnimation_BP_GetMovieMaterial::ReturnValue' has a wrong offset!");

// Function GameModule.PrimaryAssetStaffrollAnimation.BP_GetMovieTexture
// 0x0010 (0x0010 - 0x0000)
struct PrimaryAssetStaffrollAnimation_BP_GetMovieTexture final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrimaryAssetStaffrollAnimation_BP_GetMovieTexture) == 0x000008, "Wrong alignment on PrimaryAssetStaffrollAnimation_BP_GetMovieTexture");
static_assert(sizeof(PrimaryAssetStaffrollAnimation_BP_GetMovieTexture) == 0x000010, "Wrong size on PrimaryAssetStaffrollAnimation_BP_GetMovieTexture");
static_assert(offsetof(PrimaryAssetStaffrollAnimation_BP_GetMovieTexture, Index_0) == 0x000000, "Member 'PrimaryAssetStaffrollAnimation_BP_GetMovieTexture::Index_0' has a wrong offset!");
static_assert(offsetof(PrimaryAssetStaffrollAnimation_BP_GetMovieTexture, ReturnValue) == 0x000008, "Member 'PrimaryAssetStaffrollAnimation_BP_GetMovieTexture::ReturnValue' has a wrong offset!");

// Function GameModule.PrimaryAssetStaffrollLogo.BP_GetPaperSpriteLogo
// 0x0018 (0x0018 - 0x0000)
struct PrimaryAssetStaffrollLogo_BP_GetPaperSpriteLogo final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPaperSprite*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrimaryAssetStaffrollLogo_BP_GetPaperSpriteLogo) == 0x000008, "Wrong alignment on PrimaryAssetStaffrollLogo_BP_GetPaperSpriteLogo");
static_assert(sizeof(PrimaryAssetStaffrollLogo_BP_GetPaperSpriteLogo) == 0x000018, "Wrong size on PrimaryAssetStaffrollLogo_BP_GetPaperSpriteLogo");
static_assert(offsetof(PrimaryAssetStaffrollLogo_BP_GetPaperSpriteLogo, Key) == 0x000000, "Member 'PrimaryAssetStaffrollLogo_BP_GetPaperSpriteLogo::Key' has a wrong offset!");
static_assert(offsetof(PrimaryAssetStaffrollLogo_BP_GetPaperSpriteLogo, ReturnValue) == 0x000010, "Member 'PrimaryAssetStaffrollLogo_BP_GetPaperSpriteLogo::ReturnValue' has a wrong offset!");

// Function GameModule.PrimaryAssetTutorial.BP_GetPopupWorld
// 0x0030 (0x0030 - 0x0000)
struct PrimaryAssetTutorial_BP_GetPopupWorld final
{
public:
	ETutorialPopupScene                           Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UWorld>                  ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrimaryAssetTutorial_BP_GetPopupWorld) == 0x000008, "Wrong alignment on PrimaryAssetTutorial_BP_GetPopupWorld");
static_assert(sizeof(PrimaryAssetTutorial_BP_GetPopupWorld) == 0x000030, "Wrong size on PrimaryAssetTutorial_BP_GetPopupWorld");
static_assert(offsetof(PrimaryAssetTutorial_BP_GetPopupWorld, Type) == 0x000000, "Member 'PrimaryAssetTutorial_BP_GetPopupWorld::Type' has a wrong offset!");
static_assert(offsetof(PrimaryAssetTutorial_BP_GetPopupWorld, ReturnValue) == 0x000008, "Member 'PrimaryAssetTutorial_BP_GetPopupWorld::ReturnValue' has a wrong offset!");

// Function GameModule.ProfileDisplayData.BP_getAD
// 0x0060 (0x0060 - 0x0000)
struct ProfileDisplayData_BP_getAD final
{
public:
	struct FMyADDisplayData                       ReturnValue;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileDisplayData_BP_getAD) == 0x000008, "Wrong alignment on ProfileDisplayData_BP_getAD");
static_assert(sizeof(ProfileDisplayData_BP_getAD) == 0x000060, "Wrong size on ProfileDisplayData_BP_getAD");
static_assert(offsetof(ProfileDisplayData_BP_getAD, ReturnValue) == 0x000000, "Member 'ProfileDisplayData_BP_getAD::ReturnValue' has a wrong offset!");

// Function GameModule.ProfileDisplayData.BP_getEmblem
// 0x000C (0x000C - 0x0000)
struct ProfileDisplayData_BP_getEmblem final
{
public:
	struct FEmblemDisplayData                     ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileDisplayData_BP_getEmblem) == 0x000004, "Wrong alignment on ProfileDisplayData_BP_getEmblem");
static_assert(sizeof(ProfileDisplayData_BP_getEmblem) == 0x00000C, "Wrong size on ProfileDisplayData_BP_getEmblem");
static_assert(offsetof(ProfileDisplayData_BP_getEmblem, ReturnValue) == 0x000000, "Member 'ProfileDisplayData_BP_getEmblem::ReturnValue' has a wrong offset!");

// Function GameModule.ProfileDisplayData.BP_getGuild
// 0x0048 (0x0048 - 0x0000)
struct ProfileDisplayData_BP_getGuild final
{
public:
	struct FGuildDisplayData                      ReturnValue;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileDisplayData_BP_getGuild) == 0x000008, "Wrong alignment on ProfileDisplayData_BP_getGuild");
static_assert(sizeof(ProfileDisplayData_BP_getGuild) == 0x000048, "Wrong size on ProfileDisplayData_BP_getGuild");
static_assert(offsetof(ProfileDisplayData_BP_getGuild, ReturnValue) == 0x000000, "Member 'ProfileDisplayData_BP_getGuild::ReturnValue' has a wrong offset!");

// Function GameModule.ProfileDisplayData.BP_getPlayer
// 0x00C8 (0x00C8 - 0x0000)
struct ProfileDisplayData_BP_getPlayer final
{
public:
	struct FPlayerDisplayData                     ReturnValue;                                       // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileDisplayData_BP_getPlayer) == 0x000008, "Wrong alignment on ProfileDisplayData_BP_getPlayer");
static_assert(sizeof(ProfileDisplayData_BP_getPlayer) == 0x0000C8, "Wrong size on ProfileDisplayData_BP_getPlayer");
static_assert(offsetof(ProfileDisplayData_BP_getPlayer, ReturnValue) == 0x000000, "Member 'ProfileDisplayData_BP_getPlayer::ReturnValue' has a wrong offset!");

// Function GameModule.ProfileDisplayData.BP_getPlayerId
// 0x0010 (0x0010 - 0x0000)
struct ProfileDisplayData_BP_getPlayerId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileDisplayData_BP_getPlayerId) == 0x000008, "Wrong alignment on ProfileDisplayData_BP_getPlayerId");
static_assert(sizeof(ProfileDisplayData_BP_getPlayerId) == 0x000010, "Wrong size on ProfileDisplayData_BP_getPlayerId");
static_assert(offsetof(ProfileDisplayData_BP_getPlayerId, ReturnValue) == 0x000000, "Member 'ProfileDisplayData_BP_getPlayerId::ReturnValue' has a wrong offset!");

// Function GameModule.ProfileDisplayEmblemWidget.BP_SetupEmblem
// 0x000C (0x000C - 0x0000)
struct ProfileDisplayEmblemWidget_BP_SetupEmblem final
{
public:
	int32                                         LeftCode;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CenterCode;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RightCode;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileDisplayEmblemWidget_BP_SetupEmblem) == 0x000004, "Wrong alignment on ProfileDisplayEmblemWidget_BP_SetupEmblem");
static_assert(sizeof(ProfileDisplayEmblemWidget_BP_SetupEmblem) == 0x00000C, "Wrong size on ProfileDisplayEmblemWidget_BP_SetupEmblem");
static_assert(offsetof(ProfileDisplayEmblemWidget_BP_SetupEmblem, LeftCode) == 0x000000, "Member 'ProfileDisplayEmblemWidget_BP_SetupEmblem::LeftCode' has a wrong offset!");
static_assert(offsetof(ProfileDisplayEmblemWidget_BP_SetupEmblem, CenterCode) == 0x000004, "Member 'ProfileDisplayEmblemWidget_BP_SetupEmblem::CenterCode' has a wrong offset!");
static_assert(offsetof(ProfileDisplayEmblemWidget_BP_SetupEmblem, RightCode) == 0x000008, "Member 'ProfileDisplayEmblemWidget_BP_SetupEmblem::RightCode' has a wrong offset!");

// Function GameModule.ProfileDisplayManager.BP_RequesetLoad
// 0x0030 (0x0030 - 0x0000)
struct ProfileDisplayManager_BP_RequesetLoad final
{
public:
	TSoftObjectPtr<class UWorld>                  _level;                                            // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelStreamingDynamic*                 ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileDisplayManager_BP_RequesetLoad) == 0x000008, "Wrong alignment on ProfileDisplayManager_BP_RequesetLoad");
static_assert(sizeof(ProfileDisplayManager_BP_RequesetLoad) == 0x000030, "Wrong size on ProfileDisplayManager_BP_RequesetLoad");
static_assert(offsetof(ProfileDisplayManager_BP_RequesetLoad, _level) == 0x000000, "Member 'ProfileDisplayManager_BP_RequesetLoad::_level' has a wrong offset!");
static_assert(offsetof(ProfileDisplayManager_BP_RequesetLoad, ReturnValue) == 0x000028, "Member 'ProfileDisplayManager_BP_RequesetLoad::ReturnValue' has a wrong offset!");

// Function GameModule.ProfileDisplayRankWidget.BP_GetRankImage
// 0x0010 (0x0010 - 0x0000)
struct ProfileDisplayRankWidget_BP_GetRankImage final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileDisplayRankWidget_BP_GetRankImage) == 0x000008, "Wrong alignment on ProfileDisplayRankWidget_BP_GetRankImage");
static_assert(sizeof(ProfileDisplayRankWidget_BP_GetRankImage) == 0x000010, "Wrong size on ProfileDisplayRankWidget_BP_GetRankImage");
static_assert(offsetof(ProfileDisplayRankWidget_BP_GetRankImage, Rank) == 0x000000, "Member 'ProfileDisplayRankWidget_BP_GetRankImage::Rank' has a wrong offset!");
static_assert(offsetof(ProfileDisplayRankWidget_BP_GetRankImage, ReturnValue) == 0x000008, "Member 'ProfileDisplayRankWidget_BP_GetRankImage::ReturnValue' has a wrong offset!");

// Function GameModule.ProfileDisplayViolationReportWidget.BP_GetTargetName
// 0x0010 (0x0010 - 0x0000)
struct ProfileDisplayViolationReportWidget_BP_GetTargetName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileDisplayViolationReportWidget_BP_GetTargetName) == 0x000008, "Wrong alignment on ProfileDisplayViolationReportWidget_BP_GetTargetName");
static_assert(sizeof(ProfileDisplayViolationReportWidget_BP_GetTargetName) == 0x000010, "Wrong size on ProfileDisplayViolationReportWidget_BP_GetTargetName");
static_assert(offsetof(ProfileDisplayViolationReportWidget_BP_GetTargetName, ReturnValue) == 0x000000, "Member 'ProfileDisplayViolationReportWidget_BP_GetTargetName::ReturnValue' has a wrong offset!");

// Function GameModule.ProfileDisplayViolationReportWidget.OnCancelPopupWindow
// 0x0010 (0x0010 - 0x0000)
struct ProfileDisplayViolationReportWidget_OnCancelPopupWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProfileDisplayViolationReportWidget_OnCancelPopupWindow) == 0x000008, "Wrong alignment on ProfileDisplayViolationReportWidget_OnCancelPopupWindow");
static_assert(sizeof(ProfileDisplayViolationReportWidget_OnCancelPopupWindow) == 0x000010, "Wrong size on ProfileDisplayViolationReportWidget_OnCancelPopupWindow");
static_assert(offsetof(ProfileDisplayViolationReportWidget_OnCancelPopupWindow, Widget) == 0x000000, "Member 'ProfileDisplayViolationReportWidget_OnCancelPopupWindow::Widget' has a wrong offset!");
static_assert(offsetof(ProfileDisplayViolationReportWidget_OnCancelPopupWindow, InputType) == 0x000008, "Member 'ProfileDisplayViolationReportWidget_OnCancelPopupWindow::InputType' has a wrong offset!");

// Function GameModule.ProfileDisplayViolationReportWidget.OnDecidePopupWindow
// 0x0010 (0x0010 - 0x0000)
struct ProfileDisplayViolationReportWidget_OnDecidePopupWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProfileDisplayViolationReportWidget_OnDecidePopupWindow) == 0x000008, "Wrong alignment on ProfileDisplayViolationReportWidget_OnDecidePopupWindow");
static_assert(sizeof(ProfileDisplayViolationReportWidget_OnDecidePopupWindow) == 0x000010, "Wrong size on ProfileDisplayViolationReportWidget_OnDecidePopupWindow");
static_assert(offsetof(ProfileDisplayViolationReportWidget_OnDecidePopupWindow, Widget) == 0x000000, "Member 'ProfileDisplayViolationReportWidget_OnDecidePopupWindow::Widget' has a wrong offset!");
static_assert(offsetof(ProfileDisplayViolationReportWidget_OnDecidePopupWindow, InputType) == 0x000008, "Member 'ProfileDisplayViolationReportWidget_OnDecidePopupWindow::InputType' has a wrong offset!");
static_assert(offsetof(ProfileDisplayViolationReportWidget_OnDecidePopupWindow, LeftButton) == 0x000009, "Member 'ProfileDisplayViolationReportWidget_OnDecidePopupWindow::LeftButton' has a wrong offset!");

// Function GameModule.ProfileDisplayViolationReportWidget.OnDecideSelectWindow
// 0x0018 (0x0018 - 0x0000)
struct ProfileDisplayViolationReportWidget_OnDecideSelectWindow final
{
public:
	int32                                         Selectindex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAppWidget*                             Widget;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProfileDisplayViolationReportWidget_OnDecideSelectWindow) == 0x000008, "Wrong alignment on ProfileDisplayViolationReportWidget_OnDecideSelectWindow");
static_assert(sizeof(ProfileDisplayViolationReportWidget_OnDecideSelectWindow) == 0x000018, "Wrong size on ProfileDisplayViolationReportWidget_OnDecideSelectWindow");
static_assert(offsetof(ProfileDisplayViolationReportWidget_OnDecideSelectWindow, Selectindex) == 0x000000, "Member 'ProfileDisplayViolationReportWidget_OnDecideSelectWindow::Selectindex' has a wrong offset!");
static_assert(offsetof(ProfileDisplayViolationReportWidget_OnDecideSelectWindow, Widget) == 0x000008, "Member 'ProfileDisplayViolationReportWidget_OnDecideSelectWindow::Widget' has a wrong offset!");
static_assert(offsetof(ProfileDisplayViolationReportWidget_OnDecideSelectWindow, InputType) == 0x000010, "Member 'ProfileDisplayViolationReportWidget_OnDecideSelectWindow::InputType' has a wrong offset!");
static_assert(offsetof(ProfileDisplayViolationReportWidget_OnDecideSelectWindow, LeftButton) == 0x000011, "Member 'ProfileDisplayViolationReportWidget_OnDecideSelectWindow::LeftButton' has a wrong offset!");

// Function GameModule.ProfileDisplayViolationReportWidget.OnFinishFetchDataEvent
// 0x0004 (0x0004 - 0x0000)
struct ProfileDisplayViolationReportWidget_OnFinishFetchDataEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileDisplayViolationReportWidget_OnFinishFetchDataEvent) == 0x000004, "Wrong alignment on ProfileDisplayViolationReportWidget_OnFinishFetchDataEvent");
static_assert(sizeof(ProfileDisplayViolationReportWidget_OnFinishFetchDataEvent) == 0x000004, "Wrong size on ProfileDisplayViolationReportWidget_OnFinishFetchDataEvent");
static_assert(offsetof(ProfileDisplayViolationReportWidget_OnFinishFetchDataEvent, RequestId) == 0x000000, "Member 'ProfileDisplayViolationReportWidget_OnFinishFetchDataEvent::RequestId' has a wrong offset!");

// Function GameModule.ProfileDisplayWidget.BP_SetMySelf
// 0x0001 (0x0001 - 0x0000)
struct ProfileDisplayWidget_BP_SetMySelf final
{
public:
	bool                                          Val;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileDisplayWidget_BP_SetMySelf) == 0x000001, "Wrong alignment on ProfileDisplayWidget_BP_SetMySelf");
static_assert(sizeof(ProfileDisplayWidget_BP_SetMySelf) == 0x000001, "Wrong size on ProfileDisplayWidget_BP_SetMySelf");
static_assert(offsetof(ProfileDisplayWidget_BP_SetMySelf, Val) == 0x000000, "Member 'ProfileDisplayWidget_BP_SetMySelf::Val' has a wrong offset!");

// Function GameModule.ProfileDisplayWidget.GenerateData
// 0x0008 (0x0008 - 0x0000)
struct ProfileDisplayWidget_GenerateData final
{
public:
	const class UProfileDisplayData*              _data;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileDisplayWidget_GenerateData) == 0x000008, "Wrong alignment on ProfileDisplayWidget_GenerateData");
static_assert(sizeof(ProfileDisplayWidget_GenerateData) == 0x000008, "Wrong size on ProfileDisplayWidget_GenerateData");
static_assert(offsetof(ProfileDisplayWidget_GenerateData, _data) == 0x000000, "Member 'ProfileDisplayWidget_GenerateData::_data' has a wrong offset!");

// Function GameModule.ProfileDisplayWidget.BP_GetMySelf
// 0x0001 (0x0001 - 0x0000)
struct ProfileDisplayWidget_BP_GetMySelf final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileDisplayWidget_BP_GetMySelf) == 0x000001, "Wrong alignment on ProfileDisplayWidget_BP_GetMySelf");
static_assert(sizeof(ProfileDisplayWidget_BP_GetMySelf) == 0x000001, "Wrong size on ProfileDisplayWidget_BP_GetMySelf");
static_assert(offsetof(ProfileDisplayWidget_BP_GetMySelf, ReturnValue) == 0x000000, "Member 'ProfileDisplayWidget_BP_GetMySelf::ReturnValue' has a wrong offset!");

// Function GameModule.ProfileDisplayOfferWidget.DoCustomListNavigation_ListOpenButton
// 0x0010 (0x0010 - 0x0000)
struct ProfileDisplayOfferWidget_DoCustomListNavigation_ListOpenButton final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileDisplayOfferWidget_DoCustomListNavigation_ListOpenButton) == 0x000008, "Wrong alignment on ProfileDisplayOfferWidget_DoCustomListNavigation_ListOpenButton");
static_assert(sizeof(ProfileDisplayOfferWidget_DoCustomListNavigation_ListOpenButton) == 0x000010, "Wrong size on ProfileDisplayOfferWidget_DoCustomListNavigation_ListOpenButton");
static_assert(offsetof(ProfileDisplayOfferWidget_DoCustomListNavigation_ListOpenButton, UiNavigation) == 0x000000, "Member 'ProfileDisplayOfferWidget_DoCustomListNavigation_ListOpenButton::UiNavigation' has a wrong offset!");
static_assert(offsetof(ProfileDisplayOfferWidget_DoCustomListNavigation_ListOpenButton, ReturnValue) == 0x000008, "Member 'ProfileDisplayOfferWidget_DoCustomListNavigation_ListOpenButton::ReturnValue' has a wrong offset!");

// Function GameModule.ProfileDisplayOfferWidget.DoCustomListNavigation_PlatformProfileButton
// 0x0010 (0x0010 - 0x0000)
struct ProfileDisplayOfferWidget_DoCustomListNavigation_PlatformProfileButton final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileDisplayOfferWidget_DoCustomListNavigation_PlatformProfileButton) == 0x000008, "Wrong alignment on ProfileDisplayOfferWidget_DoCustomListNavigation_PlatformProfileButton");
static_assert(sizeof(ProfileDisplayOfferWidget_DoCustomListNavigation_PlatformProfileButton) == 0x000010, "Wrong size on ProfileDisplayOfferWidget_DoCustomListNavigation_PlatformProfileButton");
static_assert(offsetof(ProfileDisplayOfferWidget_DoCustomListNavigation_PlatformProfileButton, UiNavigation) == 0x000000, "Member 'ProfileDisplayOfferWidget_DoCustomListNavigation_PlatformProfileButton::UiNavigation' has a wrong offset!");
static_assert(offsetof(ProfileDisplayOfferWidget_DoCustomListNavigation_PlatformProfileButton, ReturnValue) == 0x000008, "Member 'ProfileDisplayOfferWidget_DoCustomListNavigation_PlatformProfileButton::ReturnValue' has a wrong offset!");

// Function GameModule.ProfileDisplayOfferWidget.DoCustomListNavigation_RankProfileButton
// 0x0010 (0x0010 - 0x0000)
struct ProfileDisplayOfferWidget_DoCustomListNavigation_RankProfileButton final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileDisplayOfferWidget_DoCustomListNavigation_RankProfileButton) == 0x000008, "Wrong alignment on ProfileDisplayOfferWidget_DoCustomListNavigation_RankProfileButton");
static_assert(sizeof(ProfileDisplayOfferWidget_DoCustomListNavigation_RankProfileButton) == 0x000010, "Wrong size on ProfileDisplayOfferWidget_DoCustomListNavigation_RankProfileButton");
static_assert(offsetof(ProfileDisplayOfferWidget_DoCustomListNavigation_RankProfileButton, UiNavigation) == 0x000000, "Member 'ProfileDisplayOfferWidget_DoCustomListNavigation_RankProfileButton::UiNavigation' has a wrong offset!");
static_assert(offsetof(ProfileDisplayOfferWidget_DoCustomListNavigation_RankProfileButton, ReturnValue) == 0x000008, "Member 'ProfileDisplayOfferWidget_DoCustomListNavigation_RankProfileButton::ReturnValue' has a wrong offset!");

// Function GameModule.ProfileDisplayOfferWidget.DoCustomListNavigation_SendLikeButton
// 0x0010 (0x0010 - 0x0000)
struct ProfileDisplayOfferWidget_DoCustomListNavigation_SendLikeButton final
{
public:
	EUINavigation                                 UiNavigation;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileDisplayOfferWidget_DoCustomListNavigation_SendLikeButton) == 0x000008, "Wrong alignment on ProfileDisplayOfferWidget_DoCustomListNavigation_SendLikeButton");
static_assert(sizeof(ProfileDisplayOfferWidget_DoCustomListNavigation_SendLikeButton) == 0x000010, "Wrong size on ProfileDisplayOfferWidget_DoCustomListNavigation_SendLikeButton");
static_assert(offsetof(ProfileDisplayOfferWidget_DoCustomListNavigation_SendLikeButton, UiNavigation) == 0x000000, "Member 'ProfileDisplayOfferWidget_DoCustomListNavigation_SendLikeButton::UiNavigation' has a wrong offset!");
static_assert(offsetof(ProfileDisplayOfferWidget_DoCustomListNavigation_SendLikeButton, ReturnValue) == 0x000008, "Member 'ProfileDisplayOfferWidget_DoCustomListNavigation_SendLikeButton::ReturnValue' has a wrong offset!");

// Function GameModule.ProfileDisplayOfferWidget.OnDecidePlatformProfileButton
// 0x0010 (0x0010 - 0x0000)
struct ProfileDisplayOfferWidget_OnDecidePlatformProfileButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProfileDisplayOfferWidget_OnDecidePlatformProfileButton) == 0x000008, "Wrong alignment on ProfileDisplayOfferWidget_OnDecidePlatformProfileButton");
static_assert(sizeof(ProfileDisplayOfferWidget_OnDecidePlatformProfileButton) == 0x000010, "Wrong size on ProfileDisplayOfferWidget_OnDecidePlatformProfileButton");
static_assert(offsetof(ProfileDisplayOfferWidget_OnDecidePlatformProfileButton, Widget) == 0x000000, "Member 'ProfileDisplayOfferWidget_OnDecidePlatformProfileButton::Widget' has a wrong offset!");
static_assert(offsetof(ProfileDisplayOfferWidget_OnDecidePlatformProfileButton, InputType) == 0x000008, "Member 'ProfileDisplayOfferWidget_OnDecidePlatformProfileButton::InputType' has a wrong offset!");

// Function GameModule.ProfileDisplayOfferWidget.OnDecideRankProfileButton
// 0x0010 (0x0010 - 0x0000)
struct ProfileDisplayOfferWidget_OnDecideRankProfileButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProfileDisplayOfferWidget_OnDecideRankProfileButton) == 0x000008, "Wrong alignment on ProfileDisplayOfferWidget_OnDecideRankProfileButton");
static_assert(sizeof(ProfileDisplayOfferWidget_OnDecideRankProfileButton) == 0x000010, "Wrong size on ProfileDisplayOfferWidget_OnDecideRankProfileButton");
static_assert(offsetof(ProfileDisplayOfferWidget_OnDecideRankProfileButton, Widget) == 0x000000, "Member 'ProfileDisplayOfferWidget_OnDecideRankProfileButton::Widget' has a wrong offset!");
static_assert(offsetof(ProfileDisplayOfferWidget_OnDecideRankProfileButton, InputType) == 0x000008, "Member 'ProfileDisplayOfferWidget_OnDecideRankProfileButton::InputType' has a wrong offset!");

// Function GameModule.ProfileDisplayOfferWidget.OnPlayerRequestErrorEvent
// 0x0014 (0x0014 - 0x0000)
struct ProfileDisplayOfferWidget_OnPlayerRequestErrorEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Message;                                           // 0x000C(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileDisplayOfferWidget_OnPlayerRequestErrorEvent) == 0x000004, "Wrong alignment on ProfileDisplayOfferWidget_OnPlayerRequestErrorEvent");
static_assert(sizeof(ProfileDisplayOfferWidget_OnPlayerRequestErrorEvent) == 0x000014, "Wrong size on ProfileDisplayOfferWidget_OnPlayerRequestErrorEvent");
static_assert(offsetof(ProfileDisplayOfferWidget_OnPlayerRequestErrorEvent, RequestId) == 0x000000, "Member 'ProfileDisplayOfferWidget_OnPlayerRequestErrorEvent::RequestId' has a wrong offset!");
static_assert(offsetof(ProfileDisplayOfferWidget_OnPlayerRequestErrorEvent, Key) == 0x000004, "Member 'ProfileDisplayOfferWidget_OnPlayerRequestErrorEvent::Key' has a wrong offset!");
static_assert(offsetof(ProfileDisplayOfferWidget_OnPlayerRequestErrorEvent, Message) == 0x00000C, "Member 'ProfileDisplayOfferWidget_OnPlayerRequestErrorEvent::Message' has a wrong offset!");

// Function GameModule.ProfileDisplayOfferWidget.ReceivedOnLoadCompleteEvent
// 0x0004 (0x0004 - 0x0000)
struct ProfileDisplayOfferWidget_ReceivedOnLoadCompleteEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileDisplayOfferWidget_ReceivedOnLoadCompleteEvent) == 0x000004, "Wrong alignment on ProfileDisplayOfferWidget_ReceivedOnLoadCompleteEvent");
static_assert(sizeof(ProfileDisplayOfferWidget_ReceivedOnLoadCompleteEvent) == 0x000004, "Wrong size on ProfileDisplayOfferWidget_ReceivedOnLoadCompleteEvent");
static_assert(offsetof(ProfileDisplayOfferWidget_ReceivedOnLoadCompleteEvent, RequestId) == 0x000000, "Member 'ProfileDisplayOfferWidget_ReceivedOnLoadCompleteEvent::RequestId' has a wrong offset!");

// Function GameModule.ProjectileDB.BP_FindBulletLevel
// 0x03E8 (0x03E8 - 0x0000)
struct ProjectileDB_BP_FindBulletLevel final
{
public:
	class FString                                 HashStr;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterId                                  ID;                                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Level;                                             // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBulletLevelData                       ReturnValue;                                       // 0x0018(0x03D0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileDB_BP_FindBulletLevel) == 0x000008, "Wrong alignment on ProjectileDB_BP_FindBulletLevel");
static_assert(sizeof(ProjectileDB_BP_FindBulletLevel) == 0x0003E8, "Wrong size on ProjectileDB_BP_FindBulletLevel");
static_assert(offsetof(ProjectileDB_BP_FindBulletLevel, HashStr) == 0x000000, "Member 'ProjectileDB_BP_FindBulletLevel::HashStr' has a wrong offset!");
static_assert(offsetof(ProjectileDB_BP_FindBulletLevel, ID) == 0x000010, "Member 'ProjectileDB_BP_FindBulletLevel::ID' has a wrong offset!");
static_assert(offsetof(ProjectileDB_BP_FindBulletLevel, Level) == 0x000011, "Member 'ProjectileDB_BP_FindBulletLevel::Level' has a wrong offset!");
static_assert(offsetof(ProjectileDB_BP_FindBulletLevel, ReturnValue) == 0x000018, "Member 'ProjectileDB_BP_FindBulletLevel::ReturnValue' has a wrong offset!");

// Function GameModule.ProjectileDB.BP_FindGeneratorIndexLevelData
// 0x00D0 (0x00D0 - 0x0000)
struct ProjectileDB_BP_FindGeneratorIndexLevelData final
{
public:
	class FString                                 HashStr;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DataHashStr;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterId                                  ID;                                                // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Level;                                             // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeneratorIndexLevelData               ReturnValue;                                       // 0x0028(0x00A8)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileDB_BP_FindGeneratorIndexLevelData) == 0x000008, "Wrong alignment on ProjectileDB_BP_FindGeneratorIndexLevelData");
static_assert(sizeof(ProjectileDB_BP_FindGeneratorIndexLevelData) == 0x0000D0, "Wrong size on ProjectileDB_BP_FindGeneratorIndexLevelData");
static_assert(offsetof(ProjectileDB_BP_FindGeneratorIndexLevelData, HashStr) == 0x000000, "Member 'ProjectileDB_BP_FindGeneratorIndexLevelData::HashStr' has a wrong offset!");
static_assert(offsetof(ProjectileDB_BP_FindGeneratorIndexLevelData, DataHashStr) == 0x000010, "Member 'ProjectileDB_BP_FindGeneratorIndexLevelData::DataHashStr' has a wrong offset!");
static_assert(offsetof(ProjectileDB_BP_FindGeneratorIndexLevelData, ID) == 0x000020, "Member 'ProjectileDB_BP_FindGeneratorIndexLevelData::ID' has a wrong offset!");
static_assert(offsetof(ProjectileDB_BP_FindGeneratorIndexLevelData, Level) == 0x000021, "Member 'ProjectileDB_BP_FindGeneratorIndexLevelData::Level' has a wrong offset!");
static_assert(offsetof(ProjectileDB_BP_FindGeneratorIndexLevelData, ReturnValue) == 0x000028, "Member 'ProjectileDB_BP_FindGeneratorIndexLevelData::ReturnValue' has a wrong offset!");

// Function GameModule.ProjectileDB.BP_BulletFindAnyParameterBool
// 0x03E0 (0x03E0 - 0x0000)
struct ProjectileDB_BP_BulletFindAnyParameterBool final
{
public:
	struct FBulletLevelData                       Data;                                              // 0x0000(0x03D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   ParamName;                                         // 0x03D0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x03D8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D9[0x7];                                      // 0x03D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProjectileDB_BP_BulletFindAnyParameterBool) == 0x000008, "Wrong alignment on ProjectileDB_BP_BulletFindAnyParameterBool");
static_assert(sizeof(ProjectileDB_BP_BulletFindAnyParameterBool) == 0x0003E0, "Wrong size on ProjectileDB_BP_BulletFindAnyParameterBool");
static_assert(offsetof(ProjectileDB_BP_BulletFindAnyParameterBool, Data) == 0x000000, "Member 'ProjectileDB_BP_BulletFindAnyParameterBool::Data' has a wrong offset!");
static_assert(offsetof(ProjectileDB_BP_BulletFindAnyParameterBool, ParamName) == 0x0003D0, "Member 'ProjectileDB_BP_BulletFindAnyParameterBool::ParamName' has a wrong offset!");
static_assert(offsetof(ProjectileDB_BP_BulletFindAnyParameterBool, ReturnValue) == 0x0003D8, "Member 'ProjectileDB_BP_BulletFindAnyParameterBool::ReturnValue' has a wrong offset!");

// Function GameModule.ProjectileDB.BP_BulletFindAnyParameterFloat
// 0x03E0 (0x03E0 - 0x0000)
struct ProjectileDB_BP_BulletFindAnyParameterFloat final
{
public:
	struct FBulletLevelData                       Data;                                              // 0x0000(0x03D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   ParamName;                                         // 0x03D0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x03D8(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3DC[0x4];                                      // 0x03DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProjectileDB_BP_BulletFindAnyParameterFloat) == 0x000008, "Wrong alignment on ProjectileDB_BP_BulletFindAnyParameterFloat");
static_assert(sizeof(ProjectileDB_BP_BulletFindAnyParameterFloat) == 0x0003E0, "Wrong size on ProjectileDB_BP_BulletFindAnyParameterFloat");
static_assert(offsetof(ProjectileDB_BP_BulletFindAnyParameterFloat, Data) == 0x000000, "Member 'ProjectileDB_BP_BulletFindAnyParameterFloat::Data' has a wrong offset!");
static_assert(offsetof(ProjectileDB_BP_BulletFindAnyParameterFloat, ParamName) == 0x0003D0, "Member 'ProjectileDB_BP_BulletFindAnyParameterFloat::ParamName' has a wrong offset!");
static_assert(offsetof(ProjectileDB_BP_BulletFindAnyParameterFloat, ReturnValue) == 0x0003D8, "Member 'ProjectileDB_BP_BulletFindAnyParameterFloat::ReturnValue' has a wrong offset!");

// Function GameModule.ProjectileDB.BP_BulletFindAnyParameterVector
// 0x03E8 (0x03E8 - 0x0000)
struct ProjectileDB_BP_BulletFindAnyParameterVector final
{
public:
	struct FBulletLevelData                       Data;                                              // 0x0000(0x03D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   ParamName;                                         // 0x03D0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x03D8(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E4[0x4];                                      // 0x03E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProjectileDB_BP_BulletFindAnyParameterVector) == 0x000008, "Wrong alignment on ProjectileDB_BP_BulletFindAnyParameterVector");
static_assert(sizeof(ProjectileDB_BP_BulletFindAnyParameterVector) == 0x0003E8, "Wrong size on ProjectileDB_BP_BulletFindAnyParameterVector");
static_assert(offsetof(ProjectileDB_BP_BulletFindAnyParameterVector, Data) == 0x000000, "Member 'ProjectileDB_BP_BulletFindAnyParameterVector::Data' has a wrong offset!");
static_assert(offsetof(ProjectileDB_BP_BulletFindAnyParameterVector, ParamName) == 0x0003D0, "Member 'ProjectileDB_BP_BulletFindAnyParameterVector::ParamName' has a wrong offset!");
static_assert(offsetof(ProjectileDB_BP_BulletFindAnyParameterVector, ReturnValue) == 0x0003D8, "Member 'ProjectileDB_BP_BulletFindAnyParameterVector::ReturnValue' has a wrong offset!");

// Function GameModule.ProjectileDB.BP_GeneratorFindAnyParameterBool
// 0x00B8 (0x00B8 - 0x0000)
struct ProjectileDB_BP_GeneratorFindAnyParameterBool final
{
public:
	struct FGeneratorIndexLevelData               Data;                                              // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   ParamName;                                         // 0x00A8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProjectileDB_BP_GeneratorFindAnyParameterBool) == 0x000008, "Wrong alignment on ProjectileDB_BP_GeneratorFindAnyParameterBool");
static_assert(sizeof(ProjectileDB_BP_GeneratorFindAnyParameterBool) == 0x0000B8, "Wrong size on ProjectileDB_BP_GeneratorFindAnyParameterBool");
static_assert(offsetof(ProjectileDB_BP_GeneratorFindAnyParameterBool, Data) == 0x000000, "Member 'ProjectileDB_BP_GeneratorFindAnyParameterBool::Data' has a wrong offset!");
static_assert(offsetof(ProjectileDB_BP_GeneratorFindAnyParameterBool, ParamName) == 0x0000A8, "Member 'ProjectileDB_BP_GeneratorFindAnyParameterBool::ParamName' has a wrong offset!");
static_assert(offsetof(ProjectileDB_BP_GeneratorFindAnyParameterBool, ReturnValue) == 0x0000B0, "Member 'ProjectileDB_BP_GeneratorFindAnyParameterBool::ReturnValue' has a wrong offset!");

// Function GameModule.ProjectileDB.BP_GeneratorFindAnyParameterFloat
// 0x00B8 (0x00B8 - 0x0000)
struct ProjectileDB_BP_GeneratorFindAnyParameterFloat final
{
public:
	struct FGeneratorIndexLevelData               Data;                                              // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   ParamName;                                         // 0x00A8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x00B0(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProjectileDB_BP_GeneratorFindAnyParameterFloat) == 0x000008, "Wrong alignment on ProjectileDB_BP_GeneratorFindAnyParameterFloat");
static_assert(sizeof(ProjectileDB_BP_GeneratorFindAnyParameterFloat) == 0x0000B8, "Wrong size on ProjectileDB_BP_GeneratorFindAnyParameterFloat");
static_assert(offsetof(ProjectileDB_BP_GeneratorFindAnyParameterFloat, Data) == 0x000000, "Member 'ProjectileDB_BP_GeneratorFindAnyParameterFloat::Data' has a wrong offset!");
static_assert(offsetof(ProjectileDB_BP_GeneratorFindAnyParameterFloat, ParamName) == 0x0000A8, "Member 'ProjectileDB_BP_GeneratorFindAnyParameterFloat::ParamName' has a wrong offset!");
static_assert(offsetof(ProjectileDB_BP_GeneratorFindAnyParameterFloat, ReturnValue) == 0x0000B0, "Member 'ProjectileDB_BP_GeneratorFindAnyParameterFloat::ReturnValue' has a wrong offset!");

// Function GameModule.ProjectileDB.BP_GeneratorFindAnyParameterVector
// 0x00C0 (0x00C0 - 0x0000)
struct ProjectileDB_BP_GeneratorFindAnyParameterVector final
{
public:
	struct FGeneratorIndexLevelData               Data;                                              // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   ParamName;                                         // 0x00A8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x00B0(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProjectileDB_BP_GeneratorFindAnyParameterVector) == 0x000008, "Wrong alignment on ProjectileDB_BP_GeneratorFindAnyParameterVector");
static_assert(sizeof(ProjectileDB_BP_GeneratorFindAnyParameterVector) == 0x0000C0, "Wrong size on ProjectileDB_BP_GeneratorFindAnyParameterVector");
static_assert(offsetof(ProjectileDB_BP_GeneratorFindAnyParameterVector, Data) == 0x000000, "Member 'ProjectileDB_BP_GeneratorFindAnyParameterVector::Data' has a wrong offset!");
static_assert(offsetof(ProjectileDB_BP_GeneratorFindAnyParameterVector, ParamName) == 0x0000A8, "Member 'ProjectileDB_BP_GeneratorFindAnyParameterVector::ParamName' has a wrong offset!");
static_assert(offsetof(ProjectileDB_BP_GeneratorFindAnyParameterVector, ReturnValue) == 0x0000B0, "Member 'ProjectileDB_BP_GeneratorFindAnyParameterVector::ReturnValue' has a wrong offset!");

// Function GameModule.ProjectileGeneratorGame.BP_GetBaseDB
// 0x00D0 (0x00D0 - 0x0000)
struct ProjectileGeneratorGame_BP_GetBaseDB final
{
public:
	struct FGeneratorIndexData                    ReturnValue;                                       // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileGeneratorGame_BP_GetBaseDB) == 0x000008, "Wrong alignment on ProjectileGeneratorGame_BP_GetBaseDB");
static_assert(sizeof(ProjectileGeneratorGame_BP_GetBaseDB) == 0x0000D0, "Wrong size on ProjectileGeneratorGame_BP_GetBaseDB");
static_assert(offsetof(ProjectileGeneratorGame_BP_GetBaseDB, ReturnValue) == 0x000000, "Member 'ProjectileGeneratorGame_BP_GetBaseDB::ReturnValue' has a wrong offset!");

// Function GameModule.ProjectileGeneratorGame.BP_GetLevelDB
// 0x00A8 (0x00A8 - 0x0000)
struct ProjectileGeneratorGame_BP_GetLevelDB final
{
public:
	struct FGeneratorIndexLevelData               ReturnValue;                                       // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileGeneratorGame_BP_GetLevelDB) == 0x000008, "Wrong alignment on ProjectileGeneratorGame_BP_GetLevelDB");
static_assert(sizeof(ProjectileGeneratorGame_BP_GetLevelDB) == 0x0000A8, "Wrong size on ProjectileGeneratorGame_BP_GetLevelDB");
static_assert(offsetof(ProjectileGeneratorGame_BP_GetLevelDB, ReturnValue) == 0x000000, "Member 'ProjectileGeneratorGame_BP_GetLevelDB::ReturnValue' has a wrong offset!");

// Function GameModule.ProjectileGeneratorGame.GetCharacterID
// 0x0001 (0x0001 - 0x0000)
struct ProjectileGeneratorGame_GetCharacterID final
{
public:
	ECharacterId                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileGeneratorGame_GetCharacterID) == 0x000001, "Wrong alignment on ProjectileGeneratorGame_GetCharacterID");
static_assert(sizeof(ProjectileGeneratorGame_GetCharacterID) == 0x000001, "Wrong size on ProjectileGeneratorGame_GetCharacterID");
static_assert(offsetof(ProjectileGeneratorGame_GetCharacterID, ReturnValue) == 0x000000, "Member 'ProjectileGeneratorGame_GetCharacterID::ReturnValue' has a wrong offset!");

// Function GameModule.ProjectileGeneratorGame.GetInitDirection
// 0x000C (0x000C - 0x0000)
struct ProjectileGeneratorGame_GetInitDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileGeneratorGame_GetInitDirection) == 0x000004, "Wrong alignment on ProjectileGeneratorGame_GetInitDirection");
static_assert(sizeof(ProjectileGeneratorGame_GetInitDirection) == 0x00000C, "Wrong size on ProjectileGeneratorGame_GetInitDirection");
static_assert(offsetof(ProjectileGeneratorGame_GetInitDirection, ReturnValue) == 0x000000, "Member 'ProjectileGeneratorGame_GetInitDirection::ReturnValue' has a wrong offset!");

// Function GameModule.ProjectileGeneratorGame.GetInitLocation
// 0x000C (0x000C - 0x0000)
struct ProjectileGeneratorGame_GetInitLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileGeneratorGame_GetInitLocation) == 0x000004, "Wrong alignment on ProjectileGeneratorGame_GetInitLocation");
static_assert(sizeof(ProjectileGeneratorGame_GetInitLocation) == 0x00000C, "Wrong size on ProjectileGeneratorGame_GetInitLocation");
static_assert(offsetof(ProjectileGeneratorGame_GetInitLocation, ReturnValue) == 0x000000, "Member 'ProjectileGeneratorGame_GetInitLocation::ReturnValue' has a wrong offset!");

// Function GameModule.ProjectileGeneratorGame.GetInitQuat
// 0x0010 (0x0010 - 0x0000)
struct ProjectileGeneratorGame_GetInitQuat final
{
public:
	struct FQuat                                  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileGeneratorGame_GetInitQuat) == 0x000010, "Wrong alignment on ProjectileGeneratorGame_GetInitQuat");
static_assert(sizeof(ProjectileGeneratorGame_GetInitQuat) == 0x000010, "Wrong size on ProjectileGeneratorGame_GetInitQuat");
static_assert(offsetof(ProjectileGeneratorGame_GetInitQuat, ReturnValue) == 0x000000, "Member 'ProjectileGeneratorGame_GetInitQuat::ReturnValue' has a wrong offset!");

// Function GameModule.ProjectileGeneratorGame.GetInitScale
// 0x000C (0x000C - 0x0000)
struct ProjectileGeneratorGame_GetInitScale final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileGeneratorGame_GetInitScale) == 0x000004, "Wrong alignment on ProjectileGeneratorGame_GetInitScale");
static_assert(sizeof(ProjectileGeneratorGame_GetInitScale) == 0x00000C, "Wrong size on ProjectileGeneratorGame_GetInitScale");
static_assert(offsetof(ProjectileGeneratorGame_GetInitScale, ReturnValue) == 0x000000, "Member 'ProjectileGeneratorGame_GetInitScale::ReturnValue' has a wrong offset!");

// Function GameModule.ProjectileGeneratorGame.GetInitTarget
// 0x000C (0x000C - 0x0000)
struct ProjectileGeneratorGame_GetInitTarget final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileGeneratorGame_GetInitTarget) == 0x000004, "Wrong alignment on ProjectileGeneratorGame_GetInitTarget");
static_assert(sizeof(ProjectileGeneratorGame_GetInitTarget) == 0x00000C, "Wrong size on ProjectileGeneratorGame_GetInitTarget");
static_assert(offsetof(ProjectileGeneratorGame_GetInitTarget, ReturnValue) == 0x000000, "Member 'ProjectileGeneratorGame_GetInitTarget::ReturnValue' has a wrong offset!");

// Function GameModule.ProjectileGeneratorGame.GetInitTransform
// 0x0030 (0x0030 - 0x0000)
struct ProjectileGeneratorGame_GetInitTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileGeneratorGame_GetInitTransform) == 0x000010, "Wrong alignment on ProjectileGeneratorGame_GetInitTransform");
static_assert(sizeof(ProjectileGeneratorGame_GetInitTransform) == 0x000030, "Wrong size on ProjectileGeneratorGame_GetInitTransform");
static_assert(offsetof(ProjectileGeneratorGame_GetInitTransform, ReturnValue) == 0x000000, "Member 'ProjectileGeneratorGame_GetInitTransform::ReturnValue' has a wrong offset!");

// Function GameModule.ProjectileGeneratorGame.GetIsProjectileCreatorMode
// 0x0001 (0x0001 - 0x0000)
struct ProjectileGeneratorGame_GetIsProjectileCreatorMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileGeneratorGame_GetIsProjectileCreatorMode) == 0x000001, "Wrong alignment on ProjectileGeneratorGame_GetIsProjectileCreatorMode");
static_assert(sizeof(ProjectileGeneratorGame_GetIsProjectileCreatorMode) == 0x000001, "Wrong size on ProjectileGeneratorGame_GetIsProjectileCreatorMode");
static_assert(offsetof(ProjectileGeneratorGame_GetIsProjectileCreatorMode, ReturnValue) == 0x000000, "Member 'ProjectileGeneratorGame_GetIsProjectileCreatorMode::ReturnValue' has a wrong offset!");

// Function GameModule.ProjectileGeneratorGame.GetLevel
// 0x0004 (0x0004 - 0x0000)
struct ProjectileGeneratorGame_GetLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileGeneratorGame_GetLevel) == 0x000004, "Wrong alignment on ProjectileGeneratorGame_GetLevel");
static_assert(sizeof(ProjectileGeneratorGame_GetLevel) == 0x000004, "Wrong size on ProjectileGeneratorGame_GetLevel");
static_assert(offsetof(ProjectileGeneratorGame_GetLevel, ReturnValue) == 0x000000, "Member 'ProjectileGeneratorGame_GetLevel::ReturnValue' has a wrong offset!");

// Function GameModule.ProjectileGeneratorGame.GetLockonActor
// 0x0008 (0x0008 - 0x0000)
struct ProjectileGeneratorGame_GetLockonActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileGeneratorGame_GetLockonActor) == 0x000008, "Wrong alignment on ProjectileGeneratorGame_GetLockonActor");
static_assert(sizeof(ProjectileGeneratorGame_GetLockonActor) == 0x000008, "Wrong size on ProjectileGeneratorGame_GetLockonActor");
static_assert(offsetof(ProjectileGeneratorGame_GetLockonActor, ReturnValue) == 0x000000, "Member 'ProjectileGeneratorGame_GetLockonActor::ReturnValue' has a wrong offset!");

// Function GameModule.ProjectileGeneratorGame.GetSocketName
// 0x0008 (0x0008 - 0x0000)
struct ProjectileGeneratorGame_GetSocketName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileGeneratorGame_GetSocketName) == 0x000004, "Wrong alignment on ProjectileGeneratorGame_GetSocketName");
static_assert(sizeof(ProjectileGeneratorGame_GetSocketName) == 0x000008, "Wrong size on ProjectileGeneratorGame_GetSocketName");
static_assert(offsetof(ProjectileGeneratorGame_GetSocketName, ReturnValue) == 0x000000, "Member 'ProjectileGeneratorGame_GetSocketName::ReturnValue' has a wrong offset!");

// Function GameModule.ReturnButtonWidget.OnPressButton
// 0x0010 (0x0010 - 0x0000)
struct ReturnButtonWidget_OnPressButton final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ReturnButtonWidget_OnPressButton) == 0x000008, "Wrong alignment on ReturnButtonWidget_OnPressButton");
static_assert(sizeof(ReturnButtonWidget_OnPressButton) == 0x000010, "Wrong size on ReturnButtonWidget_OnPressButton");
static_assert(offsetof(ReturnButtonWidget_OnPressButton, Widget) == 0x000000, "Member 'ReturnButtonWidget_OnPressButton::Widget' has a wrong offset!");
static_assert(offsetof(ReturnButtonWidget_OnPressButton, InputType) == 0x000008, "Member 'ReturnButtonWidget_OnPressButton::InputType' has a wrong offset!");

// Function GameModule.RoleWidget.OnSetRole
// 0x0001 (0x0001 - 0x0000)
struct RoleWidget_OnSetRole final
{
public:
	EMdAbilityType                                AbilityType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoleWidget_OnSetRole) == 0x000001, "Wrong alignment on RoleWidget_OnSetRole");
static_assert(sizeof(RoleWidget_OnSetRole) == 0x000001, "Wrong size on RoleWidget_OnSetRole");
static_assert(offsetof(RoleWidget_OnSetRole, AbilityType) == 0x000000, "Member 'RoleWidget_OnSetRole::AbilityType' has a wrong offset!");

// Function GameModule.ScoreComponentBase.OnCompletedSendKpi
// 0x0004 (0x0004 - 0x0000)
struct ScoreComponentBase_OnCompletedSendKpi final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScoreComponentBase_OnCompletedSendKpi) == 0x000004, "Wrong alignment on ScoreComponentBase_OnCompletedSendKpi");
static_assert(sizeof(ScoreComponentBase_OnCompletedSendKpi) == 0x000004, "Wrong size on ScoreComponentBase_OnCompletedSendKpi");
static_assert(offsetof(ScoreComponentBase_OnCompletedSendKpi, RequestId) == 0x000000, "Member 'ScoreComponentBase_OnCompletedSendKpi::RequestId' has a wrong offset!");

// Function GameModule.ScoreComponentBase.OnCompletedSendViolationReport
// 0x0004 (0x0004 - 0x0000)
struct ScoreComponentBase_OnCompletedSendViolationReport final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScoreComponentBase_OnCompletedSendViolationReport) == 0x000004, "Wrong alignment on ScoreComponentBase_OnCompletedSendViolationReport");
static_assert(sizeof(ScoreComponentBase_OnCompletedSendViolationReport) == 0x000004, "Wrong size on ScoreComponentBase_OnCompletedSendViolationReport");
static_assert(offsetof(ScoreComponentBase_OnCompletedSendViolationReport, RequestId) == 0x000000, "Member 'ScoreComponentBase_OnCompletedSendViolationReport::RequestId' has a wrong offset!");

// Function GameModule.ScoreComponent.OnCompletedSendDropAchievement
// 0x0004 (0x0004 - 0x0000)
struct ScoreComponent_OnCompletedSendDropAchievement final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScoreComponent_OnCompletedSendDropAchievement) == 0x000004, "Wrong alignment on ScoreComponent_OnCompletedSendDropAchievement");
static_assert(sizeof(ScoreComponent_OnCompletedSendDropAchievement) == 0x000004, "Wrong size on ScoreComponent_OnCompletedSendDropAchievement");
static_assert(offsetof(ScoreComponent_OnCompletedSendDropAchievement, RequestId) == 0x000000, "Member 'ScoreComponent_OnCompletedSendDropAchievement::RequestId' has a wrong offset!");

// Function GameModule.ScoreComponent.OnCompletedSendMission
// 0x0004 (0x0004 - 0x0000)
struct ScoreComponent_OnCompletedSendMission final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScoreComponent_OnCompletedSendMission) == 0x000004, "Wrong alignment on ScoreComponent_OnCompletedSendMission");
static_assert(sizeof(ScoreComponent_OnCompletedSendMission) == 0x000004, "Wrong size on ScoreComponent_OnCompletedSendMission");
static_assert(offsetof(ScoreComponent_OnCompletedSendMission, RequestId) == 0x000000, "Member 'ScoreComponent_OnCompletedSendMission::RequestId' has a wrong offset!");

// Function GameModule.ScoreComponent.OnCompletedSendUserResult
// 0x0004 (0x0004 - 0x0000)
struct ScoreComponent_OnCompletedSendUserResult final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScoreComponent_OnCompletedSendUserResult) == 0x000004, "Wrong alignment on ScoreComponent_OnCompletedSendUserResult");
static_assert(sizeof(ScoreComponent_OnCompletedSendUserResult) == 0x000004, "Wrong size on ScoreComponent_OnCompletedSendUserResult");
static_assert(offsetof(ScoreComponent_OnCompletedSendUserResult, RequestId) == 0x000000, "Member 'ScoreComponent_OnCompletedSendUserResult::RequestId' has a wrong offset!");

// Function GameModule.ScoreComponentCustomMatch.OnCompletedSendResultData
// 0x0004 (0x0004 - 0x0000)
struct ScoreComponentCustomMatch_OnCompletedSendResultData final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScoreComponentCustomMatch_OnCompletedSendResultData) == 0x000004, "Wrong alignment on ScoreComponentCustomMatch_OnCompletedSendResultData");
static_assert(sizeof(ScoreComponentCustomMatch_OnCompletedSendResultData) == 0x000004, "Wrong size on ScoreComponentCustomMatch_OnCompletedSendResultData");
static_assert(offsetof(ScoreComponentCustomMatch_OnCompletedSendResultData, RequestId) == 0x000000, "Member 'ScoreComponentCustomMatch_OnCompletedSendResultData::RequestId' has a wrong offset!");

// Function GameModule.SendLikeInterface.SendLikeImage
// 0x0001 (0x0001 - 0x0000)
struct SendLikeInterface_SendLikeImage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SendLikeInterface_SendLikeImage) == 0x000001, "Wrong alignment on SendLikeInterface_SendLikeImage");
static_assert(sizeof(SendLikeInterface_SendLikeImage) == 0x000001, "Wrong size on SendLikeInterface_SendLikeImage");
static_assert(offsetof(SendLikeInterface_SendLikeImage, ReturnValue) == 0x000000, "Member 'SendLikeInterface_SendLikeImage::ReturnValue' has a wrong offset!");

// Function GameModule.SendLikeInterface.SetSendLikeButtonEnable
// 0x0002 (0x0002 - 0x0000)
struct SendLikeInterface_SetSendLikeButtonEnable final
{
public:
	bool                                          InEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SendLikeInterface_SetSendLikeButtonEnable) == 0x000001, "Wrong alignment on SendLikeInterface_SetSendLikeButtonEnable");
static_assert(sizeof(SendLikeInterface_SetSendLikeButtonEnable) == 0x000002, "Wrong size on SendLikeInterface_SetSendLikeButtonEnable");
static_assert(offsetof(SendLikeInterface_SetSendLikeButtonEnable, InEnable) == 0x000000, "Member 'SendLikeInterface_SetSendLikeButtonEnable::InEnable' has a wrong offset!");
static_assert(offsetof(SendLikeInterface_SetSendLikeButtonEnable, ReturnValue) == 0x000001, "Member 'SendLikeInterface_SetSendLikeButtonEnable::ReturnValue' has a wrong offset!");

// Function GameModule.SendLikeButtonWidget.BP_UpdateSendLikeCount
// 0x0001 (0x0001 - 0x0000)
struct SendLikeButtonWidget_BP_UpdateSendLikeCount final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SendLikeButtonWidget_BP_UpdateSendLikeCount) == 0x000001, "Wrong alignment on SendLikeButtonWidget_BP_UpdateSendLikeCount");
static_assert(sizeof(SendLikeButtonWidget_BP_UpdateSendLikeCount) == 0x000001, "Wrong size on SendLikeButtonWidget_BP_UpdateSendLikeCount");
static_assert(offsetof(SendLikeButtonWidget_BP_UpdateSendLikeCount, ReturnValue) == 0x000000, "Member 'SendLikeButtonWidget_BP_UpdateSendLikeCount::ReturnValue' has a wrong offset!");

// Function GameModule.SendLikeButtonWidget.BP_GetRemainsSendLikeCount
// 0x0004 (0x0004 - 0x0000)
struct SendLikeButtonWidget_BP_GetRemainsSendLikeCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SendLikeButtonWidget_BP_GetRemainsSendLikeCount) == 0x000004, "Wrong alignment on SendLikeButtonWidget_BP_GetRemainsSendLikeCount");
static_assert(sizeof(SendLikeButtonWidget_BP_GetRemainsSendLikeCount) == 0x000004, "Wrong size on SendLikeButtonWidget_BP_GetRemainsSendLikeCount");
static_assert(offsetof(SendLikeButtonWidget_BP_GetRemainsSendLikeCount, ReturnValue) == 0x000000, "Member 'SendLikeButtonWidget_BP_GetRemainsSendLikeCount::ReturnValue' has a wrong offset!");

// Function GameModule.SendLikeButtonWidget.BP_GetSendLikeCounter
// 0x0004 (0x0004 - 0x0000)
struct SendLikeButtonWidget_BP_GetSendLikeCounter final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SendLikeButtonWidget_BP_GetSendLikeCounter) == 0x000004, "Wrong alignment on SendLikeButtonWidget_BP_GetSendLikeCounter");
static_assert(sizeof(SendLikeButtonWidget_BP_GetSendLikeCounter) == 0x000004, "Wrong size on SendLikeButtonWidget_BP_GetSendLikeCounter");
static_assert(offsetof(SendLikeButtonWidget_BP_GetSendLikeCounter, ReturnValue) == 0x000000, "Member 'SendLikeButtonWidget_BP_GetSendLikeCounter::ReturnValue' has a wrong offset!");

// Function GameModule.SkillDerivedTypeWidget.GetUniqueButtonList
// 0x0010 (0x0010 - 0x0000)
struct SkillDerivedTypeWidget_GetUniqueButtonList final
{
public:
	TArray<class UPlatformRichTextBlock*>         UniqueButtonList;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillDerivedTypeWidget_GetUniqueButtonList) == 0x000008, "Wrong alignment on SkillDerivedTypeWidget_GetUniqueButtonList");
static_assert(sizeof(SkillDerivedTypeWidget_GetUniqueButtonList) == 0x000010, "Wrong size on SkillDerivedTypeWidget_GetUniqueButtonList");
static_assert(offsetof(SkillDerivedTypeWidget_GetUniqueButtonList, UniqueButtonList) == 0x000000, "Member 'SkillDerivedTypeWidget_GetUniqueButtonList::UniqueButtonList' has a wrong offset!");

// Function GameModule.SkillVariationDetailWidget.OnAnalogValueScroll
// 0x0040 (0x0040 - 0x0000)
struct SkillVariationDetailWidget_OnAnalogValueScroll final
{
public:
	struct FAnalogInputEvent                      InAnalogEvent;                                     // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillVariationDetailWidget_OnAnalogValueScroll) == 0x000008, "Wrong alignment on SkillVariationDetailWidget_OnAnalogValueScroll");
static_assert(sizeof(SkillVariationDetailWidget_OnAnalogValueScroll) == 0x000040, "Wrong size on SkillVariationDetailWidget_OnAnalogValueScroll");
static_assert(offsetof(SkillVariationDetailWidget_OnAnalogValueScroll, InAnalogEvent) == 0x000000, "Member 'SkillVariationDetailWidget_OnAnalogValueScroll::InAnalogEvent' has a wrong offset!");

// Function GameModule.SkillVariationDetailWidget.OnDecideButtonEvent
// 0x0010 (0x0010 - 0x0000)
struct SkillVariationDetailWidget_OnDecideButtonEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SkillVariationDetailWidget_OnDecideButtonEvent) == 0x000008, "Wrong alignment on SkillVariationDetailWidget_OnDecideButtonEvent");
static_assert(sizeof(SkillVariationDetailWidget_OnDecideButtonEvent) == 0x000010, "Wrong size on SkillVariationDetailWidget_OnDecideButtonEvent");
static_assert(offsetof(SkillVariationDetailWidget_OnDecideButtonEvent, Widget) == 0x000000, "Member 'SkillVariationDetailWidget_OnDecideButtonEvent::Widget' has a wrong offset!");
static_assert(offsetof(SkillVariationDetailWidget_OnDecideButtonEvent, InputType) == 0x000008, "Member 'SkillVariationDetailWidget_OnDecideButtonEvent::InputType' has a wrong offset!");

// Function GameModule.SkillVariationDetailWidget.OnSetAbilityList
// 0x0008 (0x0008 - 0x0000)
struct SkillVariationDetailWidget_OnSetAbilityList final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VariationNo;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillVariationDetailWidget_OnSetAbilityList) == 0x000004, "Wrong alignment on SkillVariationDetailWidget_OnSetAbilityList");
static_assert(sizeof(SkillVariationDetailWidget_OnSetAbilityList) == 0x000008, "Wrong size on SkillVariationDetailWidget_OnSetAbilityList");
static_assert(offsetof(SkillVariationDetailWidget_OnSetAbilityList, CharacterId) == 0x000000, "Member 'SkillVariationDetailWidget_OnSetAbilityList::CharacterId' has a wrong offset!");
static_assert(offsetof(SkillVariationDetailWidget_OnSetAbilityList, VariationNo) == 0x000004, "Member 'SkillVariationDetailWidget_OnSetAbilityList::VariationNo' has a wrong offset!");

// Function GameModule.SkillVariationDetailWidget.OnSetHowToGetText
// 0x0018 (0x0018 - 0x0000)
struct SkillVariationDetailWidget_OnSetHowToGetText final
{
public:
	class FText                                   HowToGetText;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillVariationDetailWidget_OnSetHowToGetText) == 0x000008, "Wrong alignment on SkillVariationDetailWidget_OnSetHowToGetText");
static_assert(sizeof(SkillVariationDetailWidget_OnSetHowToGetText) == 0x000018, "Wrong size on SkillVariationDetailWidget_OnSetHowToGetText");
static_assert(offsetof(SkillVariationDetailWidget_OnSetHowToGetText, HowToGetText) == 0x000000, "Member 'SkillVariationDetailWidget_OnSetHowToGetText::HowToGetText' has a wrong offset!");

// Function GameModule.SkillVariationListItemWidget.OnSetEquip
// 0x0001 (0x0001 - 0x0000)
struct SkillVariationListItemWidget_OnSetEquip final
{
public:
	bool                                          bEquip;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillVariationListItemWidget_OnSetEquip) == 0x000001, "Wrong alignment on SkillVariationListItemWidget_OnSetEquip");
static_assert(sizeof(SkillVariationListItemWidget_OnSetEquip) == 0x000001, "Wrong size on SkillVariationListItemWidget_OnSetEquip");
static_assert(offsetof(SkillVariationListItemWidget_OnSetEquip, bEquip) == 0x000000, "Member 'SkillVariationListItemWidget_OnSetEquip::bEquip' has a wrong offset!");

// Function GameModule.SkillVariationListItemWidget.OnSetHave
// 0x0001 (0x0001 - 0x0000)
struct SkillVariationListItemWidget_OnSetHave final
{
public:
	bool                                          bHave;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillVariationListItemWidget_OnSetHave) == 0x000001, "Wrong alignment on SkillVariationListItemWidget_OnSetHave");
static_assert(sizeof(SkillVariationListItemWidget_OnSetHave) == 0x000001, "Wrong size on SkillVariationListItemWidget_OnSetHave");
static_assert(offsetof(SkillVariationListItemWidget_OnSetHave, bHave) == 0x000000, "Member 'SkillVariationListItemWidget_OnSetHave::bHave' has a wrong offset!");

// Function GameModule.SkillVariationListItemWidget.OnSetHowToGetText
// 0x0018 (0x0018 - 0x0000)
struct SkillVariationListItemWidget_OnSetHowToGetText final
{
public:
	class FText                                   HowToGetText;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillVariationListItemWidget_OnSetHowToGetText) == 0x000008, "Wrong alignment on SkillVariationListItemWidget_OnSetHowToGetText");
static_assert(sizeof(SkillVariationListItemWidget_OnSetHowToGetText) == 0x000018, "Wrong size on SkillVariationListItemWidget_OnSetHowToGetText");
static_assert(offsetof(SkillVariationListItemWidget_OnSetHowToGetText, HowToGetText) == 0x000000, "Member 'SkillVariationListItemWidget_OnSetHowToGetText::HowToGetText' has a wrong offset!");

// Function GameModule.SkillVariationListItemWidget.OnSetName
// 0x0018 (0x0018 - 0x0000)
struct SkillVariationListItemWidget_OnSetName final
{
public:
	class FText                                   NameText;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillVariationListItemWidget_OnSetName) == 0x000008, "Wrong alignment on SkillVariationListItemWidget_OnSetName");
static_assert(sizeof(SkillVariationListItemWidget_OnSetName) == 0x000018, "Wrong size on SkillVariationListItemWidget_OnSetName");
static_assert(offsetof(SkillVariationListItemWidget_OnSetName, NameText) == 0x000000, "Member 'SkillVariationListItemWidget_OnSetName::NameText' has a wrong offset!");

// Function GameModule.SkillVariationListItemWidget.OnSetRarity
// 0x0001 (0x0001 - 0x0000)
struct SkillVariationListItemWidget_OnSetRarity final
{
public:
	EMdRarity                                     Rarity;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillVariationListItemWidget_OnSetRarity) == 0x000001, "Wrong alignment on SkillVariationListItemWidget_OnSetRarity");
static_assert(sizeof(SkillVariationListItemWidget_OnSetRarity) == 0x000001, "Wrong size on SkillVariationListItemWidget_OnSetRarity");
static_assert(offsetof(SkillVariationListItemWidget_OnSetRarity, Rarity) == 0x000000, "Member 'SkillVariationListItemWidget_OnSetRarity::Rarity' has a wrong offset!");

// Function GameModule.SkillVariationListWidget.OnDecideEvent
// 0x0010 (0x0010 - 0x0000)
struct SkillVariationListWidget_OnDecideEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SkillVariationListWidget_OnDecideEvent) == 0x000008, "Wrong alignment on SkillVariationListWidget_OnDecideEvent");
static_assert(sizeof(SkillVariationListWidget_OnDecideEvent) == 0x000010, "Wrong size on SkillVariationListWidget_OnDecideEvent");
static_assert(offsetof(SkillVariationListWidget_OnDecideEvent, Widget) == 0x000000, "Member 'SkillVariationListWidget_OnDecideEvent::Widget' has a wrong offset!");
static_assert(offsetof(SkillVariationListWidget_OnDecideEvent, InputType) == 0x000008, "Member 'SkillVariationListWidget_OnDecideEvent::InputType' has a wrong offset!");

// DelegateFunction GameModule.SkillVariationListWidget.OnEventSkillVariationListItemObject__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SkillVariationListWidget_OnEventSkillVariationListItemObject__DelegateSignature final
{
public:
	class USkillVariationListItemObject*          SkillVariationListItemObject;                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillVariationListWidget_OnEventSkillVariationListItemObject__DelegateSignature) == 0x000008, "Wrong alignment on SkillVariationListWidget_OnEventSkillVariationListItemObject__DelegateSignature");
static_assert(sizeof(SkillVariationListWidget_OnEventSkillVariationListItemObject__DelegateSignature) == 0x000008, "Wrong size on SkillVariationListWidget_OnEventSkillVariationListItemObject__DelegateSignature");
static_assert(offsetof(SkillVariationListWidget_OnEventSkillVariationListItemObject__DelegateSignature, SkillVariationListItemObject) == 0x000000, "Member 'SkillVariationListWidget_OnEventSkillVariationListItemObject__DelegateSignature::SkillVariationListItemObject' has a wrong offset!");

// Function GameModule.SkillVariationWidget.OnDecideSkillVariationListItemObject
// 0x0008 (0x0008 - 0x0000)
struct SkillVariationWidget_OnDecideSkillVariationListItemObject final
{
public:
	class USkillVariationListItemObject*          ItemObject;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillVariationWidget_OnDecideSkillVariationListItemObject) == 0x000008, "Wrong alignment on SkillVariationWidget_OnDecideSkillVariationListItemObject");
static_assert(sizeof(SkillVariationWidget_OnDecideSkillVariationListItemObject) == 0x000008, "Wrong size on SkillVariationWidget_OnDecideSkillVariationListItemObject");
static_assert(offsetof(SkillVariationWidget_OnDecideSkillVariationListItemObject, ItemObject) == 0x000000, "Member 'SkillVariationWidget_OnDecideSkillVariationListItemObject::ItemObject' has a wrong offset!");

// Function GameModule.SkillVariationWidget.OnFocusSkillVariationListItemObject
// 0x0008 (0x0008 - 0x0000)
struct SkillVariationWidget_OnFocusSkillVariationListItemObject final
{
public:
	class USkillVariationListItemObject*          ItemObject;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillVariationWidget_OnFocusSkillVariationListItemObject) == 0x000008, "Wrong alignment on SkillVariationWidget_OnFocusSkillVariationListItemObject");
static_assert(sizeof(SkillVariationWidget_OnFocusSkillVariationListItemObject) == 0x000008, "Wrong size on SkillVariationWidget_OnFocusSkillVariationListItemObject");
static_assert(offsetof(SkillVariationWidget_OnFocusSkillVariationListItemObject, ItemObject) == 0x000000, "Member 'SkillVariationWidget_OnFocusSkillVariationListItemObject::ItemObject' has a wrong offset!");

// Function GameModule.SkillVariationWidget.OnLoadComplete
// 0x0004 (0x0004 - 0x0000)
struct SkillVariationWidget_OnLoadComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillVariationWidget_OnLoadComplete) == 0x000004, "Wrong alignment on SkillVariationWidget_OnLoadComplete");
static_assert(sizeof(SkillVariationWidget_OnLoadComplete) == 0x000004, "Wrong size on SkillVariationWidget_OnLoadComplete");
static_assert(offsetof(SkillVariationWidget_OnLoadComplete, RequestId) == 0x000000, "Member 'SkillVariationWidget_OnLoadComplete::RequestId' has a wrong offset!");

// Function GameModule.SkillVariationWidget.OnSetAbilityList
// 0x0008 (0x0008 - 0x0000)
struct SkillVariationWidget_OnSetAbilityList final
{
public:
	ECharacterId                                  CharacterId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VariationNo;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillVariationWidget_OnSetAbilityList) == 0x000004, "Wrong alignment on SkillVariationWidget_OnSetAbilityList");
static_assert(sizeof(SkillVariationWidget_OnSetAbilityList) == 0x000008, "Wrong size on SkillVariationWidget_OnSetAbilityList");
static_assert(offsetof(SkillVariationWidget_OnSetAbilityList, CharacterId) == 0x000000, "Member 'SkillVariationWidget_OnSetAbilityList::CharacterId' has a wrong offset!");
static_assert(offsetof(SkillVariationWidget_OnSetAbilityList, VariationNo) == 0x000004, "Member 'SkillVariationWidget_OnSetAbilityList::VariationNo' has a wrong offset!");

// Function GameModule.SkillVariationWidget.OnShowLoadingIcon
// 0x0001 (0x0001 - 0x0000)
struct SkillVariationWidget_OnShowLoadingIcon final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillVariationWidget_OnShowLoadingIcon) == 0x000001, "Wrong alignment on SkillVariationWidget_OnShowLoadingIcon");
static_assert(sizeof(SkillVariationWidget_OnShowLoadingIcon) == 0x000001, "Wrong size on SkillVariationWidget_OnShowLoadingIcon");
static_assert(offsetof(SkillVariationWidget_OnShowLoadingIcon, bShow) == 0x000000, "Member 'SkillVariationWidget_OnShowLoadingIcon::bShow' has a wrong offset!");

// Function GameModule.SkillVariationWidget.OnUpdateComplete
// 0x0004 (0x0004 - 0x0000)
struct SkillVariationWidget_OnUpdateComplete final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillVariationWidget_OnUpdateComplete) == 0x000004, "Wrong alignment on SkillVariationWidget_OnUpdateComplete");
static_assert(sizeof(SkillVariationWidget_OnUpdateComplete) == 0x000004, "Wrong size on SkillVariationWidget_OnUpdateComplete");
static_assert(offsetof(SkillVariationWidget_OnUpdateComplete, RequestId) == 0x000000, "Member 'SkillVariationWidget_OnUpdateComplete::RequestId' has a wrong offset!");

// Function GameModule.SoundStatics.GetCharacterDedicatedVoiceCharacterCodeList
// 0x0068 (0x0068 - 0x0000)
struct SoundStatics_GetCharacterDedicatedVoiceCharacterCodeList final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharacterCode;                                   // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<int32>                                   OutCharacterCodeSet;                               // 0x0010(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bInBattle;                                         // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundStatics_GetCharacterDedicatedVoiceCharacterCodeList) == 0x000008, "Wrong alignment on SoundStatics_GetCharacterDedicatedVoiceCharacterCodeList");
static_assert(sizeof(SoundStatics_GetCharacterDedicatedVoiceCharacterCodeList) == 0x000068, "Wrong size on SoundStatics_GetCharacterDedicatedVoiceCharacterCodeList");
static_assert(offsetof(SoundStatics_GetCharacterDedicatedVoiceCharacterCodeList, WorldContextObject) == 0x000000, "Member 'SoundStatics_GetCharacterDedicatedVoiceCharacterCodeList::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SoundStatics_GetCharacterDedicatedVoiceCharacterCodeList, InCharacterCode) == 0x000008, "Member 'SoundStatics_GetCharacterDedicatedVoiceCharacterCodeList::InCharacterCode' has a wrong offset!");
static_assert(offsetof(SoundStatics_GetCharacterDedicatedVoiceCharacterCodeList, OutCharacterCodeSet) == 0x000010, "Member 'SoundStatics_GetCharacterDedicatedVoiceCharacterCodeList::OutCharacterCodeSet' has a wrong offset!");
static_assert(offsetof(SoundStatics_GetCharacterDedicatedVoiceCharacterCodeList, bInBattle) == 0x000060, "Member 'SoundStatics_GetCharacterDedicatedVoiceCharacterCodeList::bInBattle' has a wrong offset!");

// Function GameModule.SoundStatics.GetCharacterDedicatedVoiceCueName
// 0x0038 (0x0038 - 0x0000)
struct SoundStatics_GetCharacterDedicatedVoiceCueName final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharacterCode;                                   // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InVsCharacterCode;                                 // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDedicated;                                      // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInVillain;                                        // 0x0011(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InFormatString;                                    // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutSoundString;                                    // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundStatics_GetCharacterDedicatedVoiceCueName) == 0x000008, "Wrong alignment on SoundStatics_GetCharacterDedicatedVoiceCueName");
static_assert(sizeof(SoundStatics_GetCharacterDedicatedVoiceCueName) == 0x000038, "Wrong size on SoundStatics_GetCharacterDedicatedVoiceCueName");
static_assert(offsetof(SoundStatics_GetCharacterDedicatedVoiceCueName, WorldContextObject) == 0x000000, "Member 'SoundStatics_GetCharacterDedicatedVoiceCueName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SoundStatics_GetCharacterDedicatedVoiceCueName, InCharacterCode) == 0x000008, "Member 'SoundStatics_GetCharacterDedicatedVoiceCueName::InCharacterCode' has a wrong offset!");
static_assert(offsetof(SoundStatics_GetCharacterDedicatedVoiceCueName, InVsCharacterCode) == 0x00000C, "Member 'SoundStatics_GetCharacterDedicatedVoiceCueName::InVsCharacterCode' has a wrong offset!");
static_assert(offsetof(SoundStatics_GetCharacterDedicatedVoiceCueName, bInDedicated) == 0x000010, "Member 'SoundStatics_GetCharacterDedicatedVoiceCueName::bInDedicated' has a wrong offset!");
static_assert(offsetof(SoundStatics_GetCharacterDedicatedVoiceCueName, bInVillain) == 0x000011, "Member 'SoundStatics_GetCharacterDedicatedVoiceCueName::bInVillain' has a wrong offset!");
static_assert(offsetof(SoundStatics_GetCharacterDedicatedVoiceCueName, InFormatString) == 0x000018, "Member 'SoundStatics_GetCharacterDedicatedVoiceCueName::InFormatString' has a wrong offset!");
static_assert(offsetof(SoundStatics_GetCharacterDedicatedVoiceCueName, OutSoundString) == 0x000028, "Member 'SoundStatics_GetCharacterDedicatedVoiceCueName::OutSoundString' has a wrong offset!");

// Function GameModule.SoundStatics.GetCharacterDedicatedVoiceCueNameAuto
// 0x0030 (0x0030 - 0x0000)
struct SoundStatics_GetCharacterDedicatedVoiceCueNameAuto final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterId                                  InCharacterId;                                     // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterId                                  InVsCharacterId;                                   // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InFormatString;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutSoundString;                                    // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundStatics_GetCharacterDedicatedVoiceCueNameAuto) == 0x000008, "Wrong alignment on SoundStatics_GetCharacterDedicatedVoiceCueNameAuto");
static_assert(sizeof(SoundStatics_GetCharacterDedicatedVoiceCueNameAuto) == 0x000030, "Wrong size on SoundStatics_GetCharacterDedicatedVoiceCueNameAuto");
static_assert(offsetof(SoundStatics_GetCharacterDedicatedVoiceCueNameAuto, WorldContextObject) == 0x000000, "Member 'SoundStatics_GetCharacterDedicatedVoiceCueNameAuto::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SoundStatics_GetCharacterDedicatedVoiceCueNameAuto, InCharacterId) == 0x000008, "Member 'SoundStatics_GetCharacterDedicatedVoiceCueNameAuto::InCharacterId' has a wrong offset!");
static_assert(offsetof(SoundStatics_GetCharacterDedicatedVoiceCueNameAuto, InVsCharacterId) == 0x000009, "Member 'SoundStatics_GetCharacterDedicatedVoiceCueNameAuto::InVsCharacterId' has a wrong offset!");
static_assert(offsetof(SoundStatics_GetCharacterDedicatedVoiceCueNameAuto, InFormatString) == 0x000010, "Member 'SoundStatics_GetCharacterDedicatedVoiceCueNameAuto::InFormatString' has a wrong offset!");
static_assert(offsetof(SoundStatics_GetCharacterDedicatedVoiceCueNameAuto, OutSoundString) == 0x000020, "Member 'SoundStatics_GetCharacterDedicatedVoiceCueNameAuto::OutSoundString' has a wrong offset!");

// Function GameModule.SoundStatics.PlayCharacterDedicatedVoice
// 0x0030 (0x0030 - 0x0000)
struct SoundStatics_PlayCharacterDedicatedVoice final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharacterCode;                                   // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InVsCharacterCode;                                 // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDedicated;                                      // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInVillain;                                        // 0x0011(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InFormatString;                                    // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtomComponent*                         ReturnValue;                                       // 0x0028(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundStatics_PlayCharacterDedicatedVoice) == 0x000008, "Wrong alignment on SoundStatics_PlayCharacterDedicatedVoice");
static_assert(sizeof(SoundStatics_PlayCharacterDedicatedVoice) == 0x000030, "Wrong size on SoundStatics_PlayCharacterDedicatedVoice");
static_assert(offsetof(SoundStatics_PlayCharacterDedicatedVoice, WorldContextObject) == 0x000000, "Member 'SoundStatics_PlayCharacterDedicatedVoice::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlayCharacterDedicatedVoice, InCharacterCode) == 0x000008, "Member 'SoundStatics_PlayCharacterDedicatedVoice::InCharacterCode' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlayCharacterDedicatedVoice, InVsCharacterCode) == 0x00000C, "Member 'SoundStatics_PlayCharacterDedicatedVoice::InVsCharacterCode' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlayCharacterDedicatedVoice, bInDedicated) == 0x000010, "Member 'SoundStatics_PlayCharacterDedicatedVoice::bInDedicated' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlayCharacterDedicatedVoice, bInVillain) == 0x000011, "Member 'SoundStatics_PlayCharacterDedicatedVoice::bInVillain' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlayCharacterDedicatedVoice, InFormatString) == 0x000018, "Member 'SoundStatics_PlayCharacterDedicatedVoice::InFormatString' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlayCharacterDedicatedVoice, ReturnValue) == 0x000028, "Member 'SoundStatics_PlayCharacterDedicatedVoice::ReturnValue' has a wrong offset!");

// Function GameModule.SoundStatics.PlayCharacterDedicatedVoiceAuto
// 0x0028 (0x0028 - 0x0000)
struct SoundStatics_PlayCharacterDedicatedVoiceAuto final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterId                                  InCharacterId;                                     // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterId                                  InVsCharacterId;                                   // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InFormatString;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtomComponent*                         ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundStatics_PlayCharacterDedicatedVoiceAuto) == 0x000008, "Wrong alignment on SoundStatics_PlayCharacterDedicatedVoiceAuto");
static_assert(sizeof(SoundStatics_PlayCharacterDedicatedVoiceAuto) == 0x000028, "Wrong size on SoundStatics_PlayCharacterDedicatedVoiceAuto");
static_assert(offsetof(SoundStatics_PlayCharacterDedicatedVoiceAuto, WorldContextObject) == 0x000000, "Member 'SoundStatics_PlayCharacterDedicatedVoiceAuto::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlayCharacterDedicatedVoiceAuto, InCharacterId) == 0x000008, "Member 'SoundStatics_PlayCharacterDedicatedVoiceAuto::InCharacterId' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlayCharacterDedicatedVoiceAuto, InVsCharacterId) == 0x000009, "Member 'SoundStatics_PlayCharacterDedicatedVoiceAuto::InVsCharacterId' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlayCharacterDedicatedVoiceAuto, InFormatString) == 0x000010, "Member 'SoundStatics_PlayCharacterDedicatedVoiceAuto::InFormatString' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlayCharacterDedicatedVoiceAuto, ReturnValue) == 0x000020, "Member 'SoundStatics_PlayCharacterDedicatedVoiceAuto::ReturnValue' has a wrong offset!");

// Function GameModule.SoundStatics.PlayMusic
// 0x0018 (0x0018 - 0x0000)
struct SoundStatics_PlayMusic final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtomComponent*                         ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundStatics_PlayMusic) == 0x000008, "Wrong alignment on SoundStatics_PlayMusic");
static_assert(sizeof(SoundStatics_PlayMusic) == 0x000018, "Wrong size on SoundStatics_PlayMusic");
static_assert(offsetof(SoundStatics_PlayMusic, WorldContextObject) == 0x000000, "Member 'SoundStatics_PlayMusic::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlayMusic, Sound) == 0x000008, "Member 'SoundStatics_PlayMusic::Sound' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlayMusic, ReturnValue) == 0x000010, "Member 'SoundStatics_PlayMusic::ReturnValue' has a wrong offset!");

// Function GameModule.SoundStatics.PlaySound2D
// 0x0018 (0x0018 - 0x0000)
struct SoundStatics_PlaySound2D final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtomComponent*                         ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundStatics_PlaySound2D) == 0x000008, "Wrong alignment on SoundStatics_PlaySound2D");
static_assert(sizeof(SoundStatics_PlaySound2D) == 0x000018, "Wrong size on SoundStatics_PlaySound2D");
static_assert(offsetof(SoundStatics_PlaySound2D, WorldContextObject) == 0x000000, "Member 'SoundStatics_PlaySound2D::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlaySound2D, Sound) == 0x000008, "Member 'SoundStatics_PlaySound2D::Sound' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlaySound2D, ReturnValue) == 0x000010, "Member 'SoundStatics_PlaySound2D::ReturnValue' has a wrong offset!");

// Function GameModule.SoundStatics.PlaySound2DByName
// 0x0020 (0x0020 - 0x0000)
struct SoundStatics_PlaySound2DByName final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CueName;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtomComponent*                         ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundStatics_PlaySound2DByName) == 0x000008, "Wrong alignment on SoundStatics_PlaySound2DByName");
static_assert(sizeof(SoundStatics_PlaySound2DByName) == 0x000020, "Wrong size on SoundStatics_PlaySound2DByName");
static_assert(offsetof(SoundStatics_PlaySound2DByName, WorldContextObject) == 0x000000, "Member 'SoundStatics_PlaySound2DByName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlaySound2DByName, CueName) == 0x000008, "Member 'SoundStatics_PlaySound2DByName::CueName' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlaySound2DByName, ReturnValue) == 0x000018, "Member 'SoundStatics_PlaySound2DByName::ReturnValue' has a wrong offset!");

// Function GameModule.SoundStatics.PlaySoundAtLocation
// 0x0060 (0x0060 - 0x0000)
struct SoundStatics_PlaySoundAtLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CueName;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         ReturnValue;                                       // 0x0058(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundStatics_PlaySoundAtLocation) == 0x000008, "Wrong alignment on SoundStatics_PlaySoundAtLocation");
static_assert(sizeof(SoundStatics_PlaySoundAtLocation) == 0x000060, "Wrong size on SoundStatics_PlaySoundAtLocation");
static_assert(offsetof(SoundStatics_PlaySoundAtLocation, WorldContextObject) == 0x000000, "Member 'SoundStatics_PlaySoundAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlaySoundAtLocation, CueName) == 0x000008, "Member 'SoundStatics_PlaySoundAtLocation::CueName' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlaySoundAtLocation, Location) == 0x000018, "Member 'SoundStatics_PlaySoundAtLocation::Location' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlaySoundAtLocation, Rotation) == 0x000024, "Member 'SoundStatics_PlaySoundAtLocation::Rotation' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlaySoundAtLocation, VolumeMultiplier) == 0x000030, "Member 'SoundStatics_PlaySoundAtLocation::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlaySoundAtLocation, PitchMultiplier) == 0x000034, "Member 'SoundStatics_PlaySoundAtLocation::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlaySoundAtLocation, StartTime) == 0x000038, "Member 'SoundStatics_PlaySoundAtLocation::StartTime' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlaySoundAtLocation, AttenuationSettings) == 0x000040, "Member 'SoundStatics_PlaySoundAtLocation::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlaySoundAtLocation, ConcurrencySettings) == 0x000048, "Member 'SoundStatics_PlaySoundAtLocation::ConcurrencySettings' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlaySoundAtLocation, bAutoDestroy) == 0x000050, "Member 'SoundStatics_PlaySoundAtLocation::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlaySoundAtLocation, ReturnValue) == 0x000058, "Member 'SoundStatics_PlaySoundAtLocation::ReturnValue' has a wrong offset!");

// Function GameModule.SoundStatics.PlaySoundAttached
// 0x0068 (0x0068 - 0x0000)
struct SoundStatics_PlaySoundAttached final
{
public:
	class FString                                 CueName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x002C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumeMultiplier;                                  // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         ReturnValue;                                       // 0x0060(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundStatics_PlaySoundAttached) == 0x000008, "Wrong alignment on SoundStatics_PlaySoundAttached");
static_assert(sizeof(SoundStatics_PlaySoundAttached) == 0x000068, "Wrong size on SoundStatics_PlaySoundAttached");
static_assert(offsetof(SoundStatics_PlaySoundAttached, CueName) == 0x000000, "Member 'SoundStatics_PlaySoundAttached::CueName' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlaySoundAttached, AttachToComponent) == 0x000010, "Member 'SoundStatics_PlaySoundAttached::AttachToComponent' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlaySoundAttached, AttachPointName) == 0x000018, "Member 'SoundStatics_PlaySoundAttached::AttachPointName' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlaySoundAttached, Location) == 0x000020, "Member 'SoundStatics_PlaySoundAttached::Location' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlaySoundAttached, Rotation) == 0x00002C, "Member 'SoundStatics_PlaySoundAttached::Rotation' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlaySoundAttached, LocationType) == 0x000038, "Member 'SoundStatics_PlaySoundAttached::LocationType' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlaySoundAttached, bStopWhenAttachedToDestroyed) == 0x000039, "Member 'SoundStatics_PlaySoundAttached::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlaySoundAttached, VolumeMultiplier) == 0x00003C, "Member 'SoundStatics_PlaySoundAttached::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlaySoundAttached, PitchMultiplier) == 0x000040, "Member 'SoundStatics_PlaySoundAttached::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlaySoundAttached, StartTime) == 0x000044, "Member 'SoundStatics_PlaySoundAttached::StartTime' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlaySoundAttached, AttenuationSettings) == 0x000048, "Member 'SoundStatics_PlaySoundAttached::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlaySoundAttached, ConcurrencySettings) == 0x000050, "Member 'SoundStatics_PlaySoundAttached::ConcurrencySettings' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlaySoundAttached, bAutoDestroy) == 0x000058, "Member 'SoundStatics_PlaySoundAttached::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlaySoundAttached, ReturnValue) == 0x000060, "Member 'SoundStatics_PlaySoundAttached::ReturnValue' has a wrong offset!");

// Function GameModule.SoundStatics.PlayVoice2D
// 0x0018 (0x0018 - 0x0000)
struct SoundStatics_PlayVoice2D final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtomComponent*                         ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundStatics_PlayVoice2D) == 0x000008, "Wrong alignment on SoundStatics_PlayVoice2D");
static_assert(sizeof(SoundStatics_PlayVoice2D) == 0x000018, "Wrong size on SoundStatics_PlayVoice2D");
static_assert(offsetof(SoundStatics_PlayVoice2D, WorldContextObject) == 0x000000, "Member 'SoundStatics_PlayVoice2D::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlayVoice2D, Sound) == 0x000008, "Member 'SoundStatics_PlayVoice2D::Sound' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlayVoice2D, ReturnValue) == 0x000010, "Member 'SoundStatics_PlayVoice2D::ReturnValue' has a wrong offset!");

// Function GameModule.SoundStatics.PlayVoice2DByName
// 0x0020 (0x0020 - 0x0000)
struct SoundStatics_PlayVoice2DByName final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CueName;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtomComponent*                         ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundStatics_PlayVoice2DByName) == 0x000008, "Wrong alignment on SoundStatics_PlayVoice2DByName");
static_assert(sizeof(SoundStatics_PlayVoice2DByName) == 0x000020, "Wrong size on SoundStatics_PlayVoice2DByName");
static_assert(offsetof(SoundStatics_PlayVoice2DByName, WorldContextObject) == 0x000000, "Member 'SoundStatics_PlayVoice2DByName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlayVoice2DByName, CueName) == 0x000008, "Member 'SoundStatics_PlayVoice2DByName::CueName' has a wrong offset!");
static_assert(offsetof(SoundStatics_PlayVoice2DByName, ReturnValue) == 0x000018, "Member 'SoundStatics_PlayVoice2DByName::ReturnValue' has a wrong offset!");

// Function GameModule.SquadJoinWidget.OnPlayerRequestErrorEvent
// 0x0014 (0x0014 - 0x0000)
struct SquadJoinWidget_OnPlayerRequestErrorEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Message;                                           // 0x000C(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SquadJoinWidget_OnPlayerRequestErrorEvent) == 0x000004, "Wrong alignment on SquadJoinWidget_OnPlayerRequestErrorEvent");
static_assert(sizeof(SquadJoinWidget_OnPlayerRequestErrorEvent) == 0x000014, "Wrong size on SquadJoinWidget_OnPlayerRequestErrorEvent");
static_assert(offsetof(SquadJoinWidget_OnPlayerRequestErrorEvent, RequestId) == 0x000000, "Member 'SquadJoinWidget_OnPlayerRequestErrorEvent::RequestId' has a wrong offset!");
static_assert(offsetof(SquadJoinWidget_OnPlayerRequestErrorEvent, Key) == 0x000004, "Member 'SquadJoinWidget_OnPlayerRequestErrorEvent::Key' has a wrong offset!");
static_assert(offsetof(SquadJoinWidget_OnPlayerRequestErrorEvent, Message) == 0x00000C, "Member 'SquadJoinWidget_OnPlayerRequestErrorEvent::Message' has a wrong offset!");

// Function GameModule.SquadJoinWidget.OnSelectMessageCloseWindow
// 0x0010 (0x0010 - 0x0000)
struct SquadJoinWidget_OnSelectMessageCloseWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SquadJoinWidget_OnSelectMessageCloseWindow) == 0x000008, "Wrong alignment on SquadJoinWidget_OnSelectMessageCloseWindow");
static_assert(sizeof(SquadJoinWidget_OnSelectMessageCloseWindow) == 0x000010, "Wrong size on SquadJoinWidget_OnSelectMessageCloseWindow");
static_assert(offsetof(SquadJoinWidget_OnSelectMessageCloseWindow, Widget) == 0x000000, "Member 'SquadJoinWidget_OnSelectMessageCloseWindow::Widget' has a wrong offset!");
static_assert(offsetof(SquadJoinWidget_OnSelectMessageCloseWindow, InputType) == 0x000008, "Member 'SquadJoinWidget_OnSelectMessageCloseWindow::InputType' has a wrong offset!");
static_assert(offsetof(SquadJoinWidget_OnSelectMessageCloseWindow, LeftButton) == 0x000009, "Member 'SquadJoinWidget_OnSelectMessageCloseWindow::LeftButton' has a wrong offset!");

// Function GameModule.SquadJoinWidget.OnSelectMessageDecideWindow
// 0x0010 (0x0010 - 0x0000)
struct SquadJoinWidget_OnSelectMessageDecideWindow final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftButton;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SquadJoinWidget_OnSelectMessageDecideWindow) == 0x000008, "Wrong alignment on SquadJoinWidget_OnSelectMessageDecideWindow");
static_assert(sizeof(SquadJoinWidget_OnSelectMessageDecideWindow) == 0x000010, "Wrong size on SquadJoinWidget_OnSelectMessageDecideWindow");
static_assert(offsetof(SquadJoinWidget_OnSelectMessageDecideWindow, Widget) == 0x000000, "Member 'SquadJoinWidget_OnSelectMessageDecideWindow::Widget' has a wrong offset!");
static_assert(offsetof(SquadJoinWidget_OnSelectMessageDecideWindow, InputType) == 0x000008, "Member 'SquadJoinWidget_OnSelectMessageDecideWindow::InputType' has a wrong offset!");
static_assert(offsetof(SquadJoinWidget_OnSelectMessageDecideWindow, LeftButton) == 0x000009, "Member 'SquadJoinWidget_OnSelectMessageDecideWindow::LeftButton' has a wrong offset!");

// Function GameModule.SquadJoinWidget.OnSelectWindowSetting
// 0x0001 (0x0001 - 0x0000)
struct SquadJoinWidget_OnSelectWindowSetting final
{
public:
	bool                                          Leader;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SquadJoinWidget_OnSelectWindowSetting) == 0x000001, "Wrong alignment on SquadJoinWidget_OnSelectWindowSetting");
static_assert(sizeof(SquadJoinWidget_OnSelectWindowSetting) == 0x000001, "Wrong size on SquadJoinWidget_OnSelectWindowSetting");
static_assert(offsetof(SquadJoinWidget_OnSelectWindowSetting, Leader) == 0x000000, "Member 'SquadJoinWidget_OnSelectWindowSetting::Leader' has a wrong offset!");

// Function GameModule.SquadJoinWidget.OnSystemErrorEvent
// 0x0014 (0x0014 - 0x0000)
struct SquadJoinWidget_OnSystemErrorEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Message;                                           // 0x000C(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SquadJoinWidget_OnSystemErrorEvent) == 0x000004, "Wrong alignment on SquadJoinWidget_OnSystemErrorEvent");
static_assert(sizeof(SquadJoinWidget_OnSystemErrorEvent) == 0x000014, "Wrong size on SquadJoinWidget_OnSystemErrorEvent");
static_assert(offsetof(SquadJoinWidget_OnSystemErrorEvent, RequestId) == 0x000000, "Member 'SquadJoinWidget_OnSystemErrorEvent::RequestId' has a wrong offset!");
static_assert(offsetof(SquadJoinWidget_OnSystemErrorEvent, Key) == 0x000004, "Member 'SquadJoinWidget_OnSystemErrorEvent::Key' has a wrong offset!");
static_assert(offsetof(SquadJoinWidget_OnSystemErrorEvent, Message) == 0x00000C, "Member 'SquadJoinWidget_OnSystemErrorEvent::Message' has a wrong offset!");

// Function GameModule.SquadJoinWidget.OnUpdateCompleteEvent
// 0x0004 (0x0004 - 0x0000)
struct SquadJoinWidget_OnUpdateCompleteEvent final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SquadJoinWidget_OnUpdateCompleteEvent) == 0x000004, "Wrong alignment on SquadJoinWidget_OnUpdateCompleteEvent");
static_assert(sizeof(SquadJoinWidget_OnUpdateCompleteEvent) == 0x000004, "Wrong size on SquadJoinWidget_OnUpdateCompleteEvent");
static_assert(offsetof(SquadJoinWidget_OnUpdateCompleteEvent, RequestId) == 0x000000, "Member 'SquadJoinWidget_OnUpdateCompleteEvent::RequestId' has a wrong offset!");

// Function GameModule.StaticDataManager.GetAbilityArtColorInfo
// 0x0148 (0x0148 - 0x0000)
struct StaticDataManager_GetAbilityArtColorInfo final
{
public:
	EMdAbilityType                                AbilityType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAbilityArtColorInfo                   ReturnValue;                                       // 0x0008(0x0140)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaticDataManager_GetAbilityArtColorInfo) == 0x000008, "Wrong alignment on StaticDataManager_GetAbilityArtColorInfo");
static_assert(sizeof(StaticDataManager_GetAbilityArtColorInfo) == 0x000148, "Wrong size on StaticDataManager_GetAbilityArtColorInfo");
static_assert(offsetof(StaticDataManager_GetAbilityArtColorInfo, AbilityType) == 0x000000, "Member 'StaticDataManager_GetAbilityArtColorInfo::AbilityType' has a wrong offset!");
static_assert(offsetof(StaticDataManager_GetAbilityArtColorInfo, ReturnValue) == 0x000008, "Member 'StaticDataManager_GetAbilityArtColorInfo::ReturnValue' has a wrong offset!");

// Function GameModule.StaticDataManager.GetAbilityDurationOnValue
// 0x0018 (0x0018 - 0x0000)
struct StaticDataManager_GetAbilityDurationOnValue final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdAbilityType                                AbilityType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StaticDataManager_GetAbilityDurationOnValue) == 0x000008, "Wrong alignment on StaticDataManager_GetAbilityDurationOnValue");
static_assert(sizeof(StaticDataManager_GetAbilityDurationOnValue) == 0x000018, "Wrong size on StaticDataManager_GetAbilityDurationOnValue");
static_assert(offsetof(StaticDataManager_GetAbilityDurationOnValue, WorldContextObject) == 0x000000, "Member 'StaticDataManager_GetAbilityDurationOnValue::WorldContextObject' has a wrong offset!");
static_assert(offsetof(StaticDataManager_GetAbilityDurationOnValue, AbilityType) == 0x000008, "Member 'StaticDataManager_GetAbilityDurationOnValue::AbilityType' has a wrong offset!");
static_assert(offsetof(StaticDataManager_GetAbilityDurationOnValue, Level) == 0x00000C, "Member 'StaticDataManager_GetAbilityDurationOnValue::Level' has a wrong offset!");
static_assert(offsetof(StaticDataManager_GetAbilityDurationOnValue, ReturnValue) == 0x000010, "Member 'StaticDataManager_GetAbilityDurationOnValue::ReturnValue' has a wrong offset!");

// Function GameModule.StaticDataManager.GetGimmickDataAsset
// 0x0018 (0x0018 - 0x0000)
struct StaticDataManager_GetGimmickDataAsset final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GimmickId;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGimmickBaseDataAsset*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaticDataManager_GetGimmickDataAsset) == 0x000008, "Wrong alignment on StaticDataManager_GetGimmickDataAsset");
static_assert(sizeof(StaticDataManager_GetGimmickDataAsset) == 0x000018, "Wrong size on StaticDataManager_GetGimmickDataAsset");
static_assert(offsetof(StaticDataManager_GetGimmickDataAsset, WorldContextObject) == 0x000000, "Member 'StaticDataManager_GetGimmickDataAsset::WorldContextObject' has a wrong offset!");
static_assert(offsetof(StaticDataManager_GetGimmickDataAsset, GimmickId) == 0x000008, "Member 'StaticDataManager_GetGimmickDataAsset::GimmickId' has a wrong offset!");
static_assert(offsetof(StaticDataManager_GetGimmickDataAsset, ReturnValue) == 0x000010, "Member 'StaticDataManager_GetGimmickDataAsset::ReturnValue' has a wrong offset!");

// Function GameModule.StaticDataManager.GetHudResourceDataAsset
// 0x0010 (0x0010 - 0x0000)
struct StaticDataManager_GetHudResourceDataAsset final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHudResource*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaticDataManager_GetHudResourceDataAsset) == 0x000008, "Wrong alignment on StaticDataManager_GetHudResourceDataAsset");
static_assert(sizeof(StaticDataManager_GetHudResourceDataAsset) == 0x000010, "Wrong size on StaticDataManager_GetHudResourceDataAsset");
static_assert(offsetof(StaticDataManager_GetHudResourceDataAsset, WorldContextObject) == 0x000000, "Member 'StaticDataManager_GetHudResourceDataAsset::WorldContextObject' has a wrong offset!");
static_assert(offsetof(StaticDataManager_GetHudResourceDataAsset, ReturnValue) == 0x000008, "Member 'StaticDataManager_GetHudResourceDataAsset::ReturnValue' has a wrong offset!");

// Function GameModule.StaticDataManager.GetLeadersTeamBorderColorInfo
// 0x0054 (0x0054 - 0x0000)
struct StaticDataManager_GetLeadersTeamBorderColorInfo final
{
public:
	ELeadersBattleTeamType                        TeamColor;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLeadersTeamColorInfo                  ReturnValue;                                       // 0x0004(0x0050)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaticDataManager_GetLeadersTeamBorderColorInfo) == 0x000004, "Wrong alignment on StaticDataManager_GetLeadersTeamBorderColorInfo");
static_assert(sizeof(StaticDataManager_GetLeadersTeamBorderColorInfo) == 0x000054, "Wrong size on StaticDataManager_GetLeadersTeamBorderColorInfo");
static_assert(offsetof(StaticDataManager_GetLeadersTeamBorderColorInfo, TeamColor) == 0x000000, "Member 'StaticDataManager_GetLeadersTeamBorderColorInfo::TeamColor' has a wrong offset!");
static_assert(offsetof(StaticDataManager_GetLeadersTeamBorderColorInfo, ReturnValue) == 0x000004, "Member 'StaticDataManager_GetLeadersTeamBorderColorInfo::ReturnValue' has a wrong offset!");

// Function GameModule.StaticDataManager.GetPermanentDataAsset
// 0x0008 (0x0008 - 0x0000)
struct StaticDataManager_GetPermanentDataAsset final
{
public:
	class UPrimaryAssetPermanent*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaticDataManager_GetPermanentDataAsset) == 0x000008, "Wrong alignment on StaticDataManager_GetPermanentDataAsset");
static_assert(sizeof(StaticDataManager_GetPermanentDataAsset) == 0x000008, "Wrong size on StaticDataManager_GetPermanentDataAsset");
static_assert(offsetof(StaticDataManager_GetPermanentDataAsset, ReturnValue) == 0x000000, "Member 'StaticDataManager_GetPermanentDataAsset::ReturnValue' has a wrong offset!");

// Function GameModule.StaticDataManager.GetSupplyBaseDataAsset
// 0x0018 (0x0018 - 0x0000)
struct StaticDataManager_GetSupplyBaseDataAsset final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SupplyId;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USupplyBaseDataAsset*                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaticDataManager_GetSupplyBaseDataAsset) == 0x000008, "Wrong alignment on StaticDataManager_GetSupplyBaseDataAsset");
static_assert(sizeof(StaticDataManager_GetSupplyBaseDataAsset) == 0x000018, "Wrong size on StaticDataManager_GetSupplyBaseDataAsset");
static_assert(offsetof(StaticDataManager_GetSupplyBaseDataAsset, WorldContextObject) == 0x000000, "Member 'StaticDataManager_GetSupplyBaseDataAsset::WorldContextObject' has a wrong offset!");
static_assert(offsetof(StaticDataManager_GetSupplyBaseDataAsset, SupplyId) == 0x000008, "Member 'StaticDataManager_GetSupplyBaseDataAsset::SupplyId' has a wrong offset!");
static_assert(offsetof(StaticDataManager_GetSupplyBaseDataAsset, ReturnValue) == 0x000010, "Member 'StaticDataManager_GetSupplyBaseDataAsset::ReturnValue' has a wrong offset!");

// Function GameModule.StaticDataManager.GetSupplyParticleColorInfo
// 0x0008 (0x0008 - 0x0000)
struct StaticDataManager_GetSupplyParticleColorInfo final
{
public:
	class USupplyArtInfoDataAsset*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaticDataManager_GetSupplyParticleColorInfo) == 0x000008, "Wrong alignment on StaticDataManager_GetSupplyParticleColorInfo");
static_assert(sizeof(StaticDataManager_GetSupplyParticleColorInfo) == 0x000008, "Wrong size on StaticDataManager_GetSupplyParticleColorInfo");
static_assert(offsetof(StaticDataManager_GetSupplyParticleColorInfo, ReturnValue) == 0x000000, "Member 'StaticDataManager_GetSupplyParticleColorInfo::ReturnValue' has a wrong offset!");

// Function GameModule.StaticDataManager.LoadHudResourceDataAsset
// 0x0008 (0x0008 - 0x0000)
struct StaticDataManager_LoadHudResourceDataAsset final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaticDataManager_LoadHudResourceDataAsset) == 0x000008, "Wrong alignment on StaticDataManager_LoadHudResourceDataAsset");
static_assert(sizeof(StaticDataManager_LoadHudResourceDataAsset) == 0x000008, "Wrong size on StaticDataManager_LoadHudResourceDataAsset");
static_assert(offsetof(StaticDataManager_LoadHudResourceDataAsset, WorldContextObject) == 0x000000, "Member 'StaticDataManager_LoadHudResourceDataAsset::WorldContextObject' has a wrong offset!");

// Function GameModule.SupplyBaseDataAsset.GetActionGuideText
// 0x0018 (0x0018 - 0x0000)
struct SupplyBaseDataAsset_GetActionGuideText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SupplyBaseDataAsset_GetActionGuideText) == 0x000008, "Wrong alignment on SupplyBaseDataAsset_GetActionGuideText");
static_assert(sizeof(SupplyBaseDataAsset_GetActionGuideText) == 0x000018, "Wrong size on SupplyBaseDataAsset_GetActionGuideText");
static_assert(offsetof(SupplyBaseDataAsset_GetActionGuideText, ReturnValue) == 0x000000, "Member 'SupplyBaseDataAsset_GetActionGuideText::ReturnValue' has a wrong offset!");

// Function GameModule.SupplyBaseDataAsset.GetDescriptionText
// 0x0020 (0x0020 - 0x0000)
struct SupplyBaseDataAsset_GetDescriptionText final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SupplyBaseDataAsset_GetDescriptionText) == 0x000008, "Wrong alignment on SupplyBaseDataAsset_GetDescriptionText");
static_assert(sizeof(SupplyBaseDataAsset_GetDescriptionText) == 0x000020, "Wrong size on SupplyBaseDataAsset_GetDescriptionText");
static_assert(offsetof(SupplyBaseDataAsset_GetDescriptionText, WorldContext) == 0x000000, "Member 'SupplyBaseDataAsset_GetDescriptionText::WorldContext' has a wrong offset!");
static_assert(offsetof(SupplyBaseDataAsset_GetDescriptionText, ReturnValue) == 0x000008, "Member 'SupplyBaseDataAsset_GetDescriptionText::ReturnValue' has a wrong offset!");

// Function GameModule.SupplyBaseDataAsset.GetDisplayNameText
// 0x0018 (0x0018 - 0x0000)
struct SupplyBaseDataAsset_GetDisplayNameText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SupplyBaseDataAsset_GetDisplayNameText) == 0x000008, "Wrong alignment on SupplyBaseDataAsset_GetDisplayNameText");
static_assert(sizeof(SupplyBaseDataAsset_GetDisplayNameText) == 0x000018, "Wrong size on SupplyBaseDataAsset_GetDisplayNameText");
static_assert(offsetof(SupplyBaseDataAsset_GetDisplayNameText, ReturnValue) == 0x000000, "Member 'SupplyBaseDataAsset_GetDisplayNameText::ReturnValue' has a wrong offset!");

// Function GameModule.SupplyBaseDataAsset.GetFieldPopUpWidgetColorCurve
// 0x0008 (0x0008 - 0x0000)
struct SupplyBaseDataAsset_GetFieldPopUpWidgetColorCurve final
{
public:
	class UCurveLinearColor*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SupplyBaseDataAsset_GetFieldPopUpWidgetColorCurve) == 0x000008, "Wrong alignment on SupplyBaseDataAsset_GetFieldPopUpWidgetColorCurve");
static_assert(sizeof(SupplyBaseDataAsset_GetFieldPopUpWidgetColorCurve) == 0x000008, "Wrong size on SupplyBaseDataAsset_GetFieldPopUpWidgetColorCurve");
static_assert(offsetof(SupplyBaseDataAsset_GetFieldPopUpWidgetColorCurve, ReturnValue) == 0x000000, "Member 'SupplyBaseDataAsset_GetFieldPopUpWidgetColorCurve::ReturnValue' has a wrong offset!");

// Function GameModule.SupplyBaseDataAsset.GetIconPaperSprite
// 0x0008 (0x0008 - 0x0000)
struct SupplyBaseDataAsset_GetIconPaperSprite final
{
public:
	class UPaperSprite*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SupplyBaseDataAsset_GetIconPaperSprite) == 0x000008, "Wrong alignment on SupplyBaseDataAsset_GetIconPaperSprite");
static_assert(sizeof(SupplyBaseDataAsset_GetIconPaperSprite) == 0x000008, "Wrong size on SupplyBaseDataAsset_GetIconPaperSprite");
static_assert(offsetof(SupplyBaseDataAsset_GetIconPaperSprite, ReturnValue) == 0x000000, "Member 'SupplyBaseDataAsset_GetIconPaperSprite::ReturnValue' has a wrong offset!");

// Function GameModule.TeamCommentaryMessageWidget.OnChangeBattleSequence
// 0x0001 (0x0001 - 0x0000)
struct TeamCommentaryMessageWidget_OnChangeBattleSequence final
{
public:
	EBattleStartSequenceType                      Sequence;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamCommentaryMessageWidget_OnChangeBattleSequence) == 0x000001, "Wrong alignment on TeamCommentaryMessageWidget_OnChangeBattleSequence");
static_assert(sizeof(TeamCommentaryMessageWidget_OnChangeBattleSequence) == 0x000001, "Wrong size on TeamCommentaryMessageWidget_OnChangeBattleSequence");
static_assert(offsetof(TeamCommentaryMessageWidget_OnChangeBattleSequence, Sequence) == 0x000000, "Member 'TeamCommentaryMessageWidget_OnChangeBattleSequence::Sequence' has a wrong offset!");

// Function GameModule.TeamCommentaryMessageWidget.OnNoticeUpdatedEvent
// 0x0004 (0x0004 - 0x0000)
struct TeamCommentaryMessageWidget_OnNoticeUpdatedEvent final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamCommentaryMessageWidget_OnNoticeUpdatedEvent) == 0x000004, "Wrong alignment on TeamCommentaryMessageWidget_OnNoticeUpdatedEvent");
static_assert(sizeof(TeamCommentaryMessageWidget_OnNoticeUpdatedEvent) == 0x000004, "Wrong size on TeamCommentaryMessageWidget_OnNoticeUpdatedEvent");
static_assert(offsetof(TeamCommentaryMessageWidget_OnNoticeUpdatedEvent, Num) == 0x000000, "Member 'TeamCommentaryMessageWidget_OnNoticeUpdatedEvent::Num' has a wrong offset!");

// Function GameModule.TeamCommentaryMessageWidget.OnRequestMessage
// 0x0001 (0x0001 - 0x0000)
struct TeamCommentaryMessageWidget_OnRequestMessage final
{
public:
	ETeamCommentaryMessage                        MessageType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamCommentaryMessageWidget_OnRequestMessage) == 0x000001, "Wrong alignment on TeamCommentaryMessageWidget_OnRequestMessage");
static_assert(sizeof(TeamCommentaryMessageWidget_OnRequestMessage) == 0x000001, "Wrong size on TeamCommentaryMessageWidget_OnRequestMessage");
static_assert(offsetof(TeamCommentaryMessageWidget_OnRequestMessage, MessageType) == 0x000000, "Member 'TeamCommentaryMessageWidget_OnRequestMessage::MessageType' has a wrong offset!");

// Function GameModule.TeamCommentaryMessageWidget.OnSquadNumChanged
// 0x0004 (0x0004 - 0x0000)
struct TeamCommentaryMessageWidget_OnSquadNumChanged final
{
public:
	int32                                         SquadNum;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamCommentaryMessageWidget_OnSquadNumChanged) == 0x000004, "Wrong alignment on TeamCommentaryMessageWidget_OnSquadNumChanged");
static_assert(sizeof(TeamCommentaryMessageWidget_OnSquadNumChanged) == 0x000004, "Wrong size on TeamCommentaryMessageWidget_OnSquadNumChanged");
static_assert(offsetof(TeamCommentaryMessageWidget_OnSquadNumChanged, SquadNum) == 0x000000, "Member 'TeamCommentaryMessageWidget_OnSquadNumChanged::SquadNum' has a wrong offset!");

// Function GameModule.TeamCommentaryMessageWidget.SetMessageEnable
// 0x0001 (0x0001 - 0x0000)
struct TeamCommentaryMessageWidget_SetMessageEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamCommentaryMessageWidget_SetMessageEnable) == 0x000001, "Wrong alignment on TeamCommentaryMessageWidget_SetMessageEnable");
static_assert(sizeof(TeamCommentaryMessageWidget_SetMessageEnable) == 0x000001, "Wrong size on TeamCommentaryMessageWidget_SetMessageEnable");
static_assert(offsetof(TeamCommentaryMessageWidget_SetMessageEnable, Enable) == 0x000000, "Member 'TeamCommentaryMessageWidget_SetMessageEnable::Enable' has a wrong offset!");

// Function GameModule.TeamCommentaryMessageWidget.UpdateRequestId
// 0x0004 (0x0004 - 0x0000)
struct TeamCommentaryMessageWidget_UpdateRequestId final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamCommentaryMessageWidget_UpdateRequestId) == 0x000004, "Wrong alignment on TeamCommentaryMessageWidget_UpdateRequestId");
static_assert(sizeof(TeamCommentaryMessageWidget_UpdateRequestId) == 0x000004, "Wrong size on TeamCommentaryMessageWidget_UpdateRequestId");
static_assert(offsetof(TeamCommentaryMessageWidget_UpdateRequestId, RequestId) == 0x000000, "Member 'TeamCommentaryMessageWidget_UpdateRequestId::RequestId' has a wrong offset!");

// Function GameModule.TextChatButtonGuide.SetGaugePercent
// 0x0004 (0x0004 - 0x0000)
struct TextChatButtonGuide_SetGaugePercent final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatButtonGuide_SetGaugePercent) == 0x000004, "Wrong alignment on TextChatButtonGuide_SetGaugePercent");
static_assert(sizeof(TextChatButtonGuide_SetGaugePercent) == 0x000004, "Wrong size on TextChatButtonGuide_SetGaugePercent");
static_assert(offsetof(TextChatButtonGuide_SetGaugePercent, Value) == 0x000000, "Member 'TextChatButtonGuide_SetGaugePercent::Value' has a wrong offset!");

// Function GameModule.TextChatIcon.BP_SetNoticeVisibility
// 0x0001 (0x0001 - 0x0000)
struct TextChatIcon_BP_SetNoticeVisibility final
{
public:
	ESlateVisibility                              Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatIcon_BP_SetNoticeVisibility) == 0x000001, "Wrong alignment on TextChatIcon_BP_SetNoticeVisibility");
static_assert(sizeof(TextChatIcon_BP_SetNoticeVisibility) == 0x000001, "Wrong size on TextChatIcon_BP_SetNoticeVisibility");
static_assert(offsetof(TextChatIcon_BP_SetNoticeVisibility, Value) == 0x000000, "Member 'TextChatIcon_BP_SetNoticeVisibility::Value' has a wrong offset!");

// Function GameModule.TextChatIcon.LoopAnimation
// 0x0004 (0x0004 - 0x0000)
struct TextChatIcon_LoopAnimation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatIcon_LoopAnimation) == 0x000004, "Wrong alignment on TextChatIcon_LoopAnimation");
static_assert(sizeof(TextChatIcon_LoopAnimation) == 0x000004, "Wrong size on TextChatIcon_LoopAnimation");
static_assert(offsetof(TextChatIcon_LoopAnimation, DeltaTime) == 0x000000, "Member 'TextChatIcon_LoopAnimation::DeltaTime' has a wrong offset!");

// Function GameModule.TextChatIcon.SetNoticeVisibility
// 0x0001 (0x0001 - 0x0000)
struct TextChatIcon_SetNoticeVisibility final
{
public:
	ESlateVisibility                              Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatIcon_SetNoticeVisibility) == 0x000001, "Wrong alignment on TextChatIcon_SetNoticeVisibility");
static_assert(sizeof(TextChatIcon_SetNoticeVisibility) == 0x000001, "Wrong size on TextChatIcon_SetNoticeVisibility");
static_assert(offsetof(TextChatIcon_SetNoticeVisibility, Value) == 0x000000, "Member 'TextChatIcon_SetNoticeVisibility::Value' has a wrong offset!");

// DelegateFunction GameModule.TextChatIcon.TickDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct TextChatIcon_TickDelegate__DelegateSignature final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatIcon_TickDelegate__DelegateSignature) == 0x000004, "Wrong alignment on TextChatIcon_TickDelegate__DelegateSignature");
static_assert(sizeof(TextChatIcon_TickDelegate__DelegateSignature) == 0x000004, "Wrong size on TextChatIcon_TickDelegate__DelegateSignature");
static_assert(offsetof(TextChatIcon_TickDelegate__DelegateSignature, DeltaTime) == 0x000000, "Member 'TextChatIcon_TickDelegate__DelegateSignature::DeltaTime' has a wrong offset!");

// Function GameModule.TextChatListObject.BP_GetAlreadyRead
// 0x0001 (0x0001 - 0x0000)
struct TextChatListObject_BP_GetAlreadyRead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatListObject_BP_GetAlreadyRead) == 0x000001, "Wrong alignment on TextChatListObject_BP_GetAlreadyRead");
static_assert(sizeof(TextChatListObject_BP_GetAlreadyRead) == 0x000001, "Wrong size on TextChatListObject_BP_GetAlreadyRead");
static_assert(offsetof(TextChatListObject_BP_GetAlreadyRead, ReturnValue) == 0x000000, "Member 'TextChatListObject_BP_GetAlreadyRead::ReturnValue' has a wrong offset!");

// Function GameModule.TextChatListObject.BP_SetAlreadyRead
// 0x0001 (0x0001 - 0x0000)
struct TextChatListObject_BP_SetAlreadyRead final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatListObject_BP_SetAlreadyRead) == 0x000001, "Wrong alignment on TextChatListObject_BP_SetAlreadyRead");
static_assert(sizeof(TextChatListObject_BP_SetAlreadyRead) == 0x000001, "Wrong size on TextChatListObject_BP_SetAlreadyRead");
static_assert(offsetof(TextChatListObject_BP_SetAlreadyRead, Value) == 0x000000, "Member 'TextChatListObject_BP_SetAlreadyRead::Value' has a wrong offset!");

// Function GameModule.TextChatListObject.BP_SetItemText
// 0x0030 (0x0030 - 0x0000)
struct TextChatListObject_BP_SetItemText final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatListObject_BP_SetItemText) == 0x000008, "Wrong alignment on TextChatListObject_BP_SetItemText");
static_assert(sizeof(TextChatListObject_BP_SetItemText) == 0x000030, "Wrong size on TextChatListObject_BP_SetItemText");
static_assert(offsetof(TextChatListObject_BP_SetItemText, PlayerId) == 0x000000, "Member 'TextChatListObject_BP_SetItemText::PlayerId' has a wrong offset!");
static_assert(offsetof(TextChatListObject_BP_SetItemText, DisplayName) == 0x000010, "Member 'TextChatListObject_BP_SetItemText::DisplayName' has a wrong offset!");
static_assert(offsetof(TextChatListObject_BP_SetItemText, Text) == 0x000020, "Member 'TextChatListObject_BP_SetItemText::Text' has a wrong offset!");

// Function GameModule.TextChatListObject.BP_SetPlayEntryAnimation
// 0x0001 (0x0001 - 0x0000)
struct TextChatListObject_BP_SetPlayEntryAnimation final
{
public:
	bool                                          IsPlayedAnimation;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatListObject_BP_SetPlayEntryAnimation) == 0x000001, "Wrong alignment on TextChatListObject_BP_SetPlayEntryAnimation");
static_assert(sizeof(TextChatListObject_BP_SetPlayEntryAnimation) == 0x000001, "Wrong size on TextChatListObject_BP_SetPlayEntryAnimation");
static_assert(offsetof(TextChatListObject_BP_SetPlayEntryAnimation, IsPlayedAnimation) == 0x000000, "Member 'TextChatListObject_BP_SetPlayEntryAnimation::IsPlayedAnimation' has a wrong offset!");

// Function GameModule.TextChatListObject.BP_GetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct TextChatListObject_BP_GetDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatListObject_BP_GetDisplayName) == 0x000008, "Wrong alignment on TextChatListObject_BP_GetDisplayName");
static_assert(sizeof(TextChatListObject_BP_GetDisplayName) == 0x000010, "Wrong size on TextChatListObject_BP_GetDisplayName");
static_assert(offsetof(TextChatListObject_BP_GetDisplayName, ReturnValue) == 0x000000, "Member 'TextChatListObject_BP_GetDisplayName::ReturnValue' has a wrong offset!");

// Function GameModule.TextChatListObject.BP_GetItemText
// 0x0010 (0x0010 - 0x0000)
struct TextChatListObject_BP_GetItemText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatListObject_BP_GetItemText) == 0x000008, "Wrong alignment on TextChatListObject_BP_GetItemText");
static_assert(sizeof(TextChatListObject_BP_GetItemText) == 0x000010, "Wrong size on TextChatListObject_BP_GetItemText");
static_assert(offsetof(TextChatListObject_BP_GetItemText, ReturnValue) == 0x000000, "Member 'TextChatListObject_BP_GetItemText::ReturnValue' has a wrong offset!");

// Function GameModule.TextChatListObject.BP_GetPlayedEntryAnimation
// 0x0001 (0x0001 - 0x0000)
struct TextChatListObject_BP_GetPlayedEntryAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatListObject_BP_GetPlayedEntryAnimation) == 0x000001, "Wrong alignment on TextChatListObject_BP_GetPlayedEntryAnimation");
static_assert(sizeof(TextChatListObject_BP_GetPlayedEntryAnimation) == 0x000001, "Wrong size on TextChatListObject_BP_GetPlayedEntryAnimation");
static_assert(offsetof(TextChatListObject_BP_GetPlayedEntryAnimation, ReturnValue) == 0x000000, "Member 'TextChatListObject_BP_GetPlayedEntryAnimation::ReturnValue' has a wrong offset!");

// Function GameModule.TextChatListObject.BP_getPlayerId
// 0x0010 (0x0010 - 0x0000)
struct TextChatListObject_BP_getPlayerId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatListObject_BP_getPlayerId) == 0x000008, "Wrong alignment on TextChatListObject_BP_getPlayerId");
static_assert(sizeof(TextChatListObject_BP_getPlayerId) == 0x000010, "Wrong size on TextChatListObject_BP_getPlayerId");
static_assert(offsetof(TextChatListObject_BP_getPlayerId, ReturnValue) == 0x000000, "Member 'TextChatListObject_BP_getPlayerId::ReturnValue' has a wrong offset!");

// Function GameModule.TextChatListWidget.BP_AddNewTextItem
// 0x0018 (0x0018 - 0x0000)
struct TextChatListWidget_BP_AddNewTextItem final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatListWidget_BP_AddNewTextItem) == 0x000008, "Wrong alignment on TextChatListWidget_BP_AddNewTextItem");
static_assert(sizeof(TextChatListWidget_BP_AddNewTextItem) == 0x000018, "Wrong size on TextChatListWidget_BP_AddNewTextItem");
static_assert(offsetof(TextChatListWidget_BP_AddNewTextItem, Text) == 0x000000, "Member 'TextChatListWidget_BP_AddNewTextItem::Text' has a wrong offset!");

// Function GameModule.TextChatListWidget.BP_CallTextChatRecieveEvent
// 0x0008 (0x0008 - 0x0000)
struct TextChatListWidget_BP_CallTextChatRecieveEvent final
{
public:
	const class UTextChatListObject*              ChatObject;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatListWidget_BP_CallTextChatRecieveEvent) == 0x000008, "Wrong alignment on TextChatListWidget_BP_CallTextChatRecieveEvent");
static_assert(sizeof(TextChatListWidget_BP_CallTextChatRecieveEvent) == 0x000008, "Wrong size on TextChatListWidget_BP_CallTextChatRecieveEvent");
static_assert(offsetof(TextChatListWidget_BP_CallTextChatRecieveEvent, ChatObject) == 0x000000, "Member 'TextChatListWidget_BP_CallTextChatRecieveEvent::ChatObject' has a wrong offset!");

// Function GameModule.TextChatListWidget.BP_CheckUnreadMessage
// 0x0008 (0x0008 - 0x0000)
struct TextChatListWidget_BP_CheckUnreadMessage final
{
public:
	class UTextChatListObject*                    Message;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatListWidget_BP_CheckUnreadMessage) == 0x000008, "Wrong alignment on TextChatListWidget_BP_CheckUnreadMessage");
static_assert(sizeof(TextChatListWidget_BP_CheckUnreadMessage) == 0x000008, "Wrong size on TextChatListWidget_BP_CheckUnreadMessage");
static_assert(offsetof(TextChatListWidget_BP_CheckUnreadMessage, Message) == 0x000000, "Member 'TextChatListWidget_BP_CheckUnreadMessage::Message' has a wrong offset!");

// Function GameModule.TextChatListWidget.BP_IsUnreadMessage
// 0x0001 (0x0001 - 0x0000)
struct TextChatListWidget_BP_IsUnreadMessage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatListWidget_BP_IsUnreadMessage) == 0x000001, "Wrong alignment on TextChatListWidget_BP_IsUnreadMessage");
static_assert(sizeof(TextChatListWidget_BP_IsUnreadMessage) == 0x000001, "Wrong size on TextChatListWidget_BP_IsUnreadMessage");
static_assert(offsetof(TextChatListWidget_BP_IsUnreadMessage, ReturnValue) == 0x000000, "Member 'TextChatListWidget_BP_IsUnreadMessage::ReturnValue' has a wrong offset!");

// Function GameModule.TextChatListWidget.GetScrollSpeedRate
// 0x0014 (0x0014 - 0x0000)
struct TextChatListWidget_GetScrollSpeedRate final
{
public:
	float                                         AnalogValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultSpeedRate;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeedRate;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddSpeedRate;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatListWidget_GetScrollSpeedRate) == 0x000004, "Wrong alignment on TextChatListWidget_GetScrollSpeedRate");
static_assert(sizeof(TextChatListWidget_GetScrollSpeedRate) == 0x000014, "Wrong size on TextChatListWidget_GetScrollSpeedRate");
static_assert(offsetof(TextChatListWidget_GetScrollSpeedRate, AnalogValue) == 0x000000, "Member 'TextChatListWidget_GetScrollSpeedRate::AnalogValue' has a wrong offset!");
static_assert(offsetof(TextChatListWidget_GetScrollSpeedRate, DefaultSpeedRate) == 0x000004, "Member 'TextChatListWidget_GetScrollSpeedRate::DefaultSpeedRate' has a wrong offset!");
static_assert(offsetof(TextChatListWidget_GetScrollSpeedRate, MaxSpeedRate) == 0x000008, "Member 'TextChatListWidget_GetScrollSpeedRate::MaxSpeedRate' has a wrong offset!");
static_assert(offsetof(TextChatListWidget_GetScrollSpeedRate, AddSpeedRate) == 0x00000C, "Member 'TextChatListWidget_GetScrollSpeedRate::AddSpeedRate' has a wrong offset!");
static_assert(offsetof(TextChatListWidget_GetScrollSpeedRate, ReturnValue) == 0x000010, "Member 'TextChatListWidget_GetScrollSpeedRate::ReturnValue' has a wrong offset!");

// DelegateFunction GameModule.TextChatListWidget.TextChatRecieveEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct TextChatListWidget_TextChatRecieveEvent__DelegateSignature final
{
public:
	const class UTextChatListObject*              ChatObject;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatListWidget_TextChatRecieveEvent__DelegateSignature) == 0x000008, "Wrong alignment on TextChatListWidget_TextChatRecieveEvent__DelegateSignature");
static_assert(sizeof(TextChatListWidget_TextChatRecieveEvent__DelegateSignature) == 0x000008, "Wrong size on TextChatListWidget_TextChatRecieveEvent__DelegateSignature");
static_assert(offsetof(TextChatListWidget_TextChatRecieveEvent__DelegateSignature, ChatObject) == 0x000000, "Member 'TextChatListWidget_TextChatRecieveEvent__DelegateSignature::ChatObject' has a wrong offset!");

// Function GameModule.TextChatSubsystem.BP_GetTextChatWidget
// 0x0008 (0x0008 - 0x0000)
struct TextChatSubsystem_BP_GetTextChatWidget final
{
public:
	class UTextChatWidget*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatSubsystem_BP_GetTextChatWidget) == 0x000008, "Wrong alignment on TextChatSubsystem_BP_GetTextChatWidget");
static_assert(sizeof(TextChatSubsystem_BP_GetTextChatWidget) == 0x000008, "Wrong size on TextChatSubsystem_BP_GetTextChatWidget");
static_assert(offsetof(TextChatSubsystem_BP_GetTextChatWidget, ReturnValue) == 0x000000, "Member 'TextChatSubsystem_BP_GetTextChatWidget::ReturnValue' has a wrong offset!");

// Function GameModule.TextChatSubsystem.BP_IsAgreeFreeTextInput
// 0x0001 (0x0001 - 0x0000)
struct TextChatSubsystem_BP_IsAgreeFreeTextInput final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatSubsystem_BP_IsAgreeFreeTextInput) == 0x000001, "Wrong alignment on TextChatSubsystem_BP_IsAgreeFreeTextInput");
static_assert(sizeof(TextChatSubsystem_BP_IsAgreeFreeTextInput) == 0x000001, "Wrong size on TextChatSubsystem_BP_IsAgreeFreeTextInput");
static_assert(offsetof(TextChatSubsystem_BP_IsAgreeFreeTextInput, ReturnValue) == 0x000000, "Member 'TextChatSubsystem_BP_IsAgreeFreeTextInput::ReturnValue' has a wrong offset!");

// Function GameModule.TextChatSubsystem.BP_WindowClose
// 0x0001 (0x0001 - 0x0000)
struct TextChatSubsystem_BP_WindowClose final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatSubsystem_BP_WindowClose) == 0x000001, "Wrong alignment on TextChatSubsystem_BP_WindowClose");
static_assert(sizeof(TextChatSubsystem_BP_WindowClose) == 0x000001, "Wrong size on TextChatSubsystem_BP_WindowClose");
static_assert(offsetof(TextChatSubsystem_BP_WindowClose, Value) == 0x000000, "Member 'TextChatSubsystem_BP_WindowClose::Value' has a wrong offset!");

// Function GameModule.TextChatSubsystem.CheckBlockMember
// 0x0004 (0x0004 - 0x0000)
struct TextChatSubsystem_CheckBlockMember final
{
public:
	int32                                         SquadNum;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatSubsystem_CheckBlockMember) == 0x000004, "Wrong alignment on TextChatSubsystem_CheckBlockMember");
static_assert(sizeof(TextChatSubsystem_CheckBlockMember) == 0x000004, "Wrong size on TextChatSubsystem_CheckBlockMember");
static_assert(offsetof(TextChatSubsystem_CheckBlockMember, SquadNum) == 0x000000, "Member 'TextChatSubsystem_CheckBlockMember::SquadNum' has a wrong offset!");

// Function GameModule.TextChatSubsystem.GetActiveTextInput
// 0x0001 (0x0001 - 0x0000)
struct TextChatSubsystem_GetActiveTextInput final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatSubsystem_GetActiveTextInput) == 0x000001, "Wrong alignment on TextChatSubsystem_GetActiveTextInput");
static_assert(sizeof(TextChatSubsystem_GetActiveTextInput) == 0x000001, "Wrong size on TextChatSubsystem_GetActiveTextInput");
static_assert(offsetof(TextChatSubsystem_GetActiveTextInput, ReturnValue) == 0x000000, "Member 'TextChatSubsystem_GetActiveTextInput::ReturnValue' has a wrong offset!");

// Function GameModule.TextChatSubsystem.GetEnableIngameOpenChat
// 0x0001 (0x0001 - 0x0000)
struct TextChatSubsystem_GetEnableIngameOpenChat final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatSubsystem_GetEnableIngameOpenChat) == 0x000001, "Wrong alignment on TextChatSubsystem_GetEnableIngameOpenChat");
static_assert(sizeof(TextChatSubsystem_GetEnableIngameOpenChat) == 0x000001, "Wrong size on TextChatSubsystem_GetEnableIngameOpenChat");
static_assert(offsetof(TextChatSubsystem_GetEnableIngameOpenChat, ReturnValue) == 0x000000, "Member 'TextChatSubsystem_GetEnableIngameOpenChat::ReturnValue' has a wrong offset!");

// Function GameModule.TextChatSubsystem.GetIsAnimationFinishCollapsed
// 0x0001 (0x0001 - 0x0000)
struct TextChatSubsystem_GetIsAnimationFinishCollapsed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatSubsystem_GetIsAnimationFinishCollapsed) == 0x000001, "Wrong alignment on TextChatSubsystem_GetIsAnimationFinishCollapsed");
static_assert(sizeof(TextChatSubsystem_GetIsAnimationFinishCollapsed) == 0x000001, "Wrong size on TextChatSubsystem_GetIsAnimationFinishCollapsed");
static_assert(offsetof(TextChatSubsystem_GetIsAnimationFinishCollapsed, ReturnValue) == 0x000000, "Member 'TextChatSubsystem_GetIsAnimationFinishCollapsed::ReturnValue' has a wrong offset!");

// Function GameModule.TextChatSubsystem.GetVisibilityTextChatWidget
// 0x0001 (0x0001 - 0x0000)
struct TextChatSubsystem_GetVisibilityTextChatWidget final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatSubsystem_GetVisibilityTextChatWidget) == 0x000001, "Wrong alignment on TextChatSubsystem_GetVisibilityTextChatWidget");
static_assert(sizeof(TextChatSubsystem_GetVisibilityTextChatWidget) == 0x000001, "Wrong size on TextChatSubsystem_GetVisibilityTextChatWidget");
static_assert(offsetof(TextChatSubsystem_GetVisibilityTextChatWidget, ReturnValue) == 0x000000, "Member 'TextChatSubsystem_GetVisibilityTextChatWidget::ReturnValue' has a wrong offset!");

// Function GameModule.TextChatSubsystem.HideIngameChat
// 0x0001 (0x0001 - 0x0000)
struct TextChatSubsystem_HideIngameChat final
{
public:
	bool                                          _isHide;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatSubsystem_HideIngameChat) == 0x000001, "Wrong alignment on TextChatSubsystem_HideIngameChat");
static_assert(sizeof(TextChatSubsystem_HideIngameChat) == 0x000001, "Wrong size on TextChatSubsystem_HideIngameChat");
static_assert(offsetof(TextChatSubsystem_HideIngameChat, _isHide) == 0x000000, "Member 'TextChatSubsystem_HideIngameChat::_isHide' has a wrong offset!");

// Function GameModule.TextChatSubsystem.IsRecieveBlockMessage
// 0x0018 (0x0018 - 0x0000)
struct TextChatSubsystem_IsRecieveBlockMessage final
{
public:
	class FString                                 MessageUser;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TextChatSubsystem_IsRecieveBlockMessage) == 0x000008, "Wrong alignment on TextChatSubsystem_IsRecieveBlockMessage");
static_assert(sizeof(TextChatSubsystem_IsRecieveBlockMessage) == 0x000018, "Wrong size on TextChatSubsystem_IsRecieveBlockMessage");
static_assert(offsetof(TextChatSubsystem_IsRecieveBlockMessage, MessageUser) == 0x000000, "Member 'TextChatSubsystem_IsRecieveBlockMessage::MessageUser' has a wrong offset!");
static_assert(offsetof(TextChatSubsystem_IsRecieveBlockMessage, ReturnValue) == 0x000010, "Member 'TextChatSubsystem_IsRecieveBlockMessage::ReturnValue' has a wrong offset!");

// Function GameModule.TextChatSubsystem.SetActiveTextInput
// 0x0001 (0x0001 - 0x0000)
struct TextChatSubsystem_SetActiveTextInput final
{
public:
	bool                                          Input;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatSubsystem_SetActiveTextInput) == 0x000001, "Wrong alignment on TextChatSubsystem_SetActiveTextInput");
static_assert(sizeof(TextChatSubsystem_SetActiveTextInput) == 0x000001, "Wrong size on TextChatSubsystem_SetActiveTextInput");
static_assert(offsetof(TextChatSubsystem_SetActiveTextInput, Input) == 0x000000, "Member 'TextChatSubsystem_SetActiveTextInput::Input' has a wrong offset!");

// Function GameModule.TextChatSubsystem.SetEnableIngameOpenChat
// 0x0001 (0x0001 - 0x0000)
struct TextChatSubsystem_SetEnableIngameOpenChat final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatSubsystem_SetEnableIngameOpenChat) == 0x000001, "Wrong alignment on TextChatSubsystem_SetEnableIngameOpenChat");
static_assert(sizeof(TextChatSubsystem_SetEnableIngameOpenChat) == 0x000001, "Wrong size on TextChatSubsystem_SetEnableIngameOpenChat");
static_assert(offsetof(TextChatSubsystem_SetEnableIngameOpenChat, Value) == 0x000000, "Member 'TextChatSubsystem_SetEnableIngameOpenChat::Value' has a wrong offset!");

// Function GameModule.TextChatSubsystem.SetIngameWindowOpenFlag
// 0x0001 (0x0001 - 0x0000)
struct TextChatSubsystem_SetIngameWindowOpenFlag final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatSubsystem_SetIngameWindowOpenFlag) == 0x000001, "Wrong alignment on TextChatSubsystem_SetIngameWindowOpenFlag");
static_assert(sizeof(TextChatSubsystem_SetIngameWindowOpenFlag) == 0x000001, "Wrong size on TextChatSubsystem_SetIngameWindowOpenFlag");
static_assert(offsetof(TextChatSubsystem_SetIngameWindowOpenFlag, Flag) == 0x000000, "Member 'TextChatSubsystem_SetIngameWindowOpenFlag::Flag' has a wrong offset!");

// Function GameModule.TextChatSubsystem.SetIsAnimationFinishCollapsed
// 0x0001 (0x0001 - 0x0000)
struct TextChatSubsystem_SetIsAnimationFinishCollapsed final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatSubsystem_SetIsAnimationFinishCollapsed) == 0x000001, "Wrong alignment on TextChatSubsystem_SetIsAnimationFinishCollapsed");
static_assert(sizeof(TextChatSubsystem_SetIsAnimationFinishCollapsed) == 0x000001, "Wrong size on TextChatSubsystem_SetIsAnimationFinishCollapsed");
static_assert(offsetof(TextChatSubsystem_SetIsAnimationFinishCollapsed, Value) == 0x000000, "Member 'TextChatSubsystem_SetIsAnimationFinishCollapsed::Value' has a wrong offset!");

// Function GameModule.TextChatSubsystem.SetVisibilityButtonIcon
// 0x0001 (0x0001 - 0x0000)
struct TextChatSubsystem_SetVisibilityButtonIcon final
{
public:
	ESlateVisibility                              balue;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatSubsystem_SetVisibilityButtonIcon) == 0x000001, "Wrong alignment on TextChatSubsystem_SetVisibilityButtonIcon");
static_assert(sizeof(TextChatSubsystem_SetVisibilityButtonIcon) == 0x000001, "Wrong size on TextChatSubsystem_SetVisibilityButtonIcon");
static_assert(offsetof(TextChatSubsystem_SetVisibilityButtonIcon, balue) == 0x000000, "Member 'TextChatSubsystem_SetVisibilityButtonIcon::balue' has a wrong offset!");

// Function GameModule.TextChatSubsystem.SetVisibilityTextChatWidget
// 0x0001 (0x0001 - 0x0000)
struct TextChatSubsystem_SetVisibilityTextChatWidget final
{
public:
	ESlateVisibility                              Visibility;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatSubsystem_SetVisibilityTextChatWidget) == 0x000001, "Wrong alignment on TextChatSubsystem_SetVisibilityTextChatWidget");
static_assert(sizeof(TextChatSubsystem_SetVisibilityTextChatWidget) == 0x000001, "Wrong size on TextChatSubsystem_SetVisibilityTextChatWidget");
static_assert(offsetof(TextChatSubsystem_SetVisibilityTextChatWidget, Visibility) == 0x000000, "Member 'TextChatSubsystem_SetVisibilityTextChatWidget::Visibility' has a wrong offset!");

// Function GameModule.TextChatSubsystem.BP_GetVisibleNewMessage
// 0x0001 (0x0001 - 0x0000)
struct TextChatSubsystem_BP_GetVisibleNewMessage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatSubsystem_BP_GetVisibleNewMessage) == 0x000001, "Wrong alignment on TextChatSubsystem_BP_GetVisibleNewMessage");
static_assert(sizeof(TextChatSubsystem_BP_GetVisibleNewMessage) == 0x000001, "Wrong size on TextChatSubsystem_BP_GetVisibleNewMessage");
static_assert(offsetof(TextChatSubsystem_BP_GetVisibleNewMessage, ReturnValue) == 0x000000, "Member 'TextChatSubsystem_BP_GetVisibleNewMessage::ReturnValue' has a wrong offset!");

// Function GameModule.TextChatSubsystem.GetHasBlockUser
// 0x0001 (0x0001 - 0x0000)
struct TextChatSubsystem_GetHasBlockUser final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatSubsystem_GetHasBlockUser) == 0x000001, "Wrong alignment on TextChatSubsystem_GetHasBlockUser");
static_assert(sizeof(TextChatSubsystem_GetHasBlockUser) == 0x000001, "Wrong size on TextChatSubsystem_GetHasBlockUser");
static_assert(offsetof(TextChatSubsystem_GetHasBlockUser, ReturnValue) == 0x000000, "Member 'TextChatSubsystem_GetHasBlockUser::ReturnValue' has a wrong offset!");

// Function GameModule.TextChatSubsystem.GetIngameWindowOpenFlag
// 0x0001 (0x0001 - 0x0000)
struct TextChatSubsystem_GetIngameWindowOpenFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatSubsystem_GetIngameWindowOpenFlag) == 0x000001, "Wrong alignment on TextChatSubsystem_GetIngameWindowOpenFlag");
static_assert(sizeof(TextChatSubsystem_GetIngameWindowOpenFlag) == 0x000001, "Wrong size on TextChatSubsystem_GetIngameWindowOpenFlag");
static_assert(offsetof(TextChatSubsystem_GetIngameWindowOpenFlag, ReturnValue) == 0x000000, "Member 'TextChatSubsystem_GetIngameWindowOpenFlag::ReturnValue' has a wrong offset!");

// Function GameModule.TextChatWidget.BP_ChangeIconPosition
// 0x0018 (0x0018 - 0x0000)
struct TextChatWidget_BP_ChangeIconPosition final
{
public:
	ETextChatLevelType                            LevelNam;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LevelName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatWidget_BP_ChangeIconPosition) == 0x000008, "Wrong alignment on TextChatWidget_BP_ChangeIconPosition");
static_assert(sizeof(TextChatWidget_BP_ChangeIconPosition) == 0x000018, "Wrong size on TextChatWidget_BP_ChangeIconPosition");
static_assert(offsetof(TextChatWidget_BP_ChangeIconPosition, LevelNam) == 0x000000, "Member 'TextChatWidget_BP_ChangeIconPosition::LevelNam' has a wrong offset!");
static_assert(offsetof(TextChatWidget_BP_ChangeIconPosition, LevelName) == 0x000008, "Member 'TextChatWidget_BP_ChangeIconPosition::LevelName' has a wrong offset!");

// Function GameModule.TextChatWidget.BP_SetNoticeVisibility
// 0x0001 (0x0001 - 0x0000)
struct TextChatWidget_BP_SetNoticeVisibility final
{
public:
	ESlateVisibility                              Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatWidget_BP_SetNoticeVisibility) == 0x000001, "Wrong alignment on TextChatWidget_BP_SetNoticeVisibility");
static_assert(sizeof(TextChatWidget_BP_SetNoticeVisibility) == 0x000001, "Wrong size on TextChatWidget_BP_SetNoticeVisibility");
static_assert(offsetof(TextChatWidget_BP_SetNoticeVisibility, Value) == 0x000000, "Member 'TextChatWidget_BP_SetNoticeVisibility::Value' has a wrong offset!");

// Function GameModule.TextChatWidget.GetChatIcon
// 0x0008 (0x0008 - 0x0000)
struct TextChatWidget_GetChatIcon final
{
public:
	class UTextChatIcon*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatWidget_GetChatIcon) == 0x000008, "Wrong alignment on TextChatWidget_GetChatIcon");
static_assert(sizeof(TextChatWidget_GetChatIcon) == 0x000008, "Wrong size on TextChatWidget_GetChatIcon");
static_assert(offsetof(TextChatWidget_GetChatIcon, ReturnValue) == 0x000000, "Member 'TextChatWidget_GetChatIcon::ReturnValue' has a wrong offset!");

// Function GameModule.TextChatWidget.SetNoticeVisibility
// 0x0001 (0x0001 - 0x0000)
struct TextChatWidget_SetNoticeVisibility final
{
public:
	ESlateVisibility                              Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatWidget_SetNoticeVisibility) == 0x000001, "Wrong alignment on TextChatWidget_SetNoticeVisibility");
static_assert(sizeof(TextChatWidget_SetNoticeVisibility) == 0x000001, "Wrong size on TextChatWidget_SetNoticeVisibility");
static_assert(offsetof(TextChatWidget_SetNoticeVisibility, Value) == 0x000000, "Member 'TextChatWidget_SetNoticeVisibility::Value' has a wrong offset!");

// Function GameModule.TextChatWidget.SetValueButtonGuide
// 0x0004 (0x0004 - 0x0000)
struct TextChatWidget_SetValueButtonGuide final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatWidget_SetValueButtonGuide) == 0x000004, "Wrong alignment on TextChatWidget_SetValueButtonGuide");
static_assert(sizeof(TextChatWidget_SetValueButtonGuide) == 0x000004, "Wrong size on TextChatWidget_SetValueButtonGuide");
static_assert(offsetof(TextChatWidget_SetValueButtonGuide, Value) == 0x000000, "Member 'TextChatWidget_SetValueButtonGuide::Value' has a wrong offset!");

// Function GameModule.TextChatWidget.WindowClose
// 0x0001 (0x0001 - 0x0000)
struct TextChatWidget_WindowClose final
{
public:
	bool                                          bPlaySound;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatWidget_WindowClose) == 0x000001, "Wrong alignment on TextChatWidget_WindowClose");
static_assert(sizeof(TextChatWidget_WindowClose) == 0x000001, "Wrong size on TextChatWidget_WindowClose");
static_assert(offsetof(TextChatWidget_WindowClose, bPlaySound) == 0x000000, "Member 'TextChatWidget_WindowClose::bPlaySound' has a wrong offset!");

// Function GameModule.TextChatWidget.WindowOpen
// 0x0001 (0x0001 - 0x0000)
struct TextChatWidget_WindowOpen final
{
public:
	bool                                          bPlaySound;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatWidget_WindowOpen) == 0x000001, "Wrong alignment on TextChatWidget_WindowOpen");
static_assert(sizeof(TextChatWidget_WindowOpen) == 0x000001, "Wrong size on TextChatWidget_WindowOpen");
static_assert(offsetof(TextChatWidget_WindowOpen, bPlaySound) == 0x000000, "Member 'TextChatWidget_WindowOpen::bPlaySound' has a wrong offset!");

// Function GameModule.TextChatWindowWidget.AnimStart
// 0x0008 (0x0008 - 0x0000)
struct TextChatWindowWidget_AnimStart final
{
public:
	class UWidgetAnimation*                       Anim;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatWindowWidget_AnimStart) == 0x000008, "Wrong alignment on TextChatWindowWidget_AnimStart");
static_assert(sizeof(TextChatWindowWidget_AnimStart) == 0x000008, "Wrong size on TextChatWindowWidget_AnimStart");
static_assert(offsetof(TextChatWindowWidget_AnimStart, Anim) == 0x000000, "Member 'TextChatWindowWidget_AnimStart::Anim' has a wrong offset!");

// Function GameModule.TextChatWindowWidget.BP_ChangeColor
// 0x00D0 (0x00D0 - 0x0000)
struct TextChatWindowWidget_BP_ChangeColor final
{
public:
	struct FSlateBrush                            Brush;                                             // 0x0000(0x00D0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatWindowWidget_BP_ChangeColor) == 0x000010, "Wrong alignment on TextChatWindowWidget_BP_ChangeColor");
static_assert(sizeof(TextChatWindowWidget_BP_ChangeColor) == 0x0000D0, "Wrong size on TextChatWindowWidget_BP_ChangeColor");
static_assert(offsetof(TextChatWindowWidget_BP_ChangeColor, Brush) == 0x000000, "Member 'TextChatWindowWidget_BP_ChangeColor::Brush' has a wrong offset!");

// Function GameModule.TextChatWindowWidget.BP_ChangeIconLocation
// 0x0018 (0x0018 - 0x0000)
struct TextChatWindowWidget_BP_ChangeIconLocation final
{
public:
	ETextChatLevelType                            Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LevelName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatWindowWidget_BP_ChangeIconLocation) == 0x000008, "Wrong alignment on TextChatWindowWidget_BP_ChangeIconLocation");
static_assert(sizeof(TextChatWindowWidget_BP_ChangeIconLocation) == 0x000018, "Wrong size on TextChatWindowWidget_BP_ChangeIconLocation");
static_assert(offsetof(TextChatWindowWidget_BP_ChangeIconLocation, Type) == 0x000000, "Member 'TextChatWindowWidget_BP_ChangeIconLocation::Type' has a wrong offset!");
static_assert(offsetof(TextChatWindowWidget_BP_ChangeIconLocation, LevelName) == 0x000008, "Member 'TextChatWindowWidget_BP_ChangeIconLocation::LevelName' has a wrong offset!");

// Function GameModule.TextChatWindowWidget.BP_CheckParentControl
// 0x0001 (0x0001 - 0x0000)
struct TextChatWindowWidget_BP_CheckParentControl final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatWindowWidget_BP_CheckParentControl) == 0x000001, "Wrong alignment on TextChatWindowWidget_BP_CheckParentControl");
static_assert(sizeof(TextChatWindowWidget_BP_CheckParentControl) == 0x000001, "Wrong size on TextChatWindowWidget_BP_CheckParentControl");
static_assert(offsetof(TextChatWindowWidget_BP_CheckParentControl, ReturnValue) == 0x000000, "Member 'TextChatWindowWidget_BP_CheckParentControl::ReturnValue' has a wrong offset!");

// Function GameModule.TextChatWindowWidget.BP_SetActiveFocus
// 0x0001 (0x0001 - 0x0000)
struct TextChatWindowWidget_BP_SetActiveFocus final
{
public:
	bool                                          IsFocusable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatWindowWidget_BP_SetActiveFocus) == 0x000001, "Wrong alignment on TextChatWindowWidget_BP_SetActiveFocus");
static_assert(sizeof(TextChatWindowWidget_BP_SetActiveFocus) == 0x000001, "Wrong size on TextChatWindowWidget_BP_SetActiveFocus");
static_assert(offsetof(TextChatWindowWidget_BP_SetActiveFocus, IsFocusable) == 0x000000, "Member 'TextChatWindowWidget_BP_SetActiveFocus::IsFocusable' has a wrong offset!");

// Function GameModule.TextChatWindowWidget.BP_SetActiveSendButton
// 0x0001 (0x0001 - 0x0000)
struct TextChatWindowWidget_BP_SetActiveSendButton final
{
public:
	bool                                          IsSendable;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatWindowWidget_BP_SetActiveSendButton) == 0x000001, "Wrong alignment on TextChatWindowWidget_BP_SetActiveSendButton");
static_assert(sizeof(TextChatWindowWidget_BP_SetActiveSendButton) == 0x000001, "Wrong size on TextChatWindowWidget_BP_SetActiveSendButton");
static_assert(offsetof(TextChatWindowWidget_BP_SetActiveSendButton, IsSendable) == 0x000000, "Member 'TextChatWindowWidget_BP_SetActiveSendButton::IsSendable' has a wrong offset!");

// Function GameModule.TextChatWindowWidget.BP_SetActiveTextInput
// 0x0001 (0x0001 - 0x0000)
struct TextChatWindowWidget_BP_SetActiveTextInput final
{
public:
	bool                                          Input;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatWindowWidget_BP_SetActiveTextInput) == 0x000001, "Wrong alignment on TextChatWindowWidget_BP_SetActiveTextInput");
static_assert(sizeof(TextChatWindowWidget_BP_SetActiveTextInput) == 0x000001, "Wrong size on TextChatWindowWidget_BP_SetActiveTextInput");
static_assert(offsetof(TextChatWindowWidget_BP_SetActiveTextInput, Input) == 0x000000, "Member 'TextChatWindowWidget_BP_SetActiveTextInput::Input' has a wrong offset!");

// Function GameModule.TextChatWindowWidget.BP_SetNoticeVisibility
// 0x0001 (0x0001 - 0x0000)
struct TextChatWindowWidget_BP_SetNoticeVisibility final
{
public:
	ESlateVisibility                              Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatWindowWidget_BP_SetNoticeVisibility) == 0x000001, "Wrong alignment on TextChatWindowWidget_BP_SetNoticeVisibility");
static_assert(sizeof(TextChatWindowWidget_BP_SetNoticeVisibility) == 0x000001, "Wrong size on TextChatWindowWidget_BP_SetNoticeVisibility");
static_assert(offsetof(TextChatWindowWidget_BP_SetNoticeVisibility, Value) == 0x000000, "Member 'TextChatWindowWidget_BP_SetNoticeVisibility::Value' has a wrong offset!");

// Function GameModule.TextChatWindowWidget.BP_WindowClose
// 0x0001 (0x0001 - 0x0000)
struct TextChatWindowWidget_BP_WindowClose final
{
public:
	bool                                          bPlaySound;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatWindowWidget_BP_WindowClose) == 0x000001, "Wrong alignment on TextChatWindowWidget_BP_WindowClose");
static_assert(sizeof(TextChatWindowWidget_BP_WindowClose) == 0x000001, "Wrong size on TextChatWindowWidget_BP_WindowClose");
static_assert(offsetof(TextChatWindowWidget_BP_WindowClose, bPlaySound) == 0x000000, "Member 'TextChatWindowWidget_BP_WindowClose::bPlaySound' has a wrong offset!");

// Function GameModule.TextChatWindowWidget.BP_WindowOpen
// 0x0001 (0x0001 - 0x0000)
struct TextChatWindowWidget_BP_WindowOpen final
{
public:
	bool                                          bPlaySound;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatWindowWidget_BP_WindowOpen) == 0x000001, "Wrong alignment on TextChatWindowWidget_BP_WindowOpen");
static_assert(sizeof(TextChatWindowWidget_BP_WindowOpen) == 0x000001, "Wrong size on TextChatWindowWidget_BP_WindowOpen");
static_assert(offsetof(TextChatWindowWidget_BP_WindowOpen, bPlaySound) == 0x000000, "Member 'TextChatWindowWidget_BP_WindowOpen::bPlaySound' has a wrong offset!");

// Function GameModule.TextChatWindowWidget.GetChatIcon
// 0x0008 (0x0008 - 0x0000)
struct TextChatWindowWidget_GetChatIcon final
{
public:
	class UTextChatIcon*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatWindowWidget_GetChatIcon) == 0x000008, "Wrong alignment on TextChatWindowWidget_GetChatIcon");
static_assert(sizeof(TextChatWindowWidget_GetChatIcon) == 0x000008, "Wrong size on TextChatWindowWidget_GetChatIcon");
static_assert(offsetof(TextChatWindowWidget_GetChatIcon, ReturnValue) == 0x000000, "Member 'TextChatWindowWidget_GetChatIcon::ReturnValue' has a wrong offset!");

// Function GameModule.TextChatWindowWidget.OnCommitChangeText
// 0x0002 (0x0002 - 0x0000)
struct TextChatWindowWidget_OnCommitChangeText final
{
public:
	bool                                          IsEmpty;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _isFirstFocus;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatWindowWidget_OnCommitChangeText) == 0x000001, "Wrong alignment on TextChatWindowWidget_OnCommitChangeText");
static_assert(sizeof(TextChatWindowWidget_OnCommitChangeText) == 0x000002, "Wrong size on TextChatWindowWidget_OnCommitChangeText");
static_assert(offsetof(TextChatWindowWidget_OnCommitChangeText, IsEmpty) == 0x000000, "Member 'TextChatWindowWidget_OnCommitChangeText::IsEmpty' has a wrong offset!");
static_assert(offsetof(TextChatWindowWidget_OnCommitChangeText, _isFirstFocus) == 0x000001, "Member 'TextChatWindowWidget_OnCommitChangeText::_isFirstFocus' has a wrong offset!");

// Function GameModule.TextChatWindowWidget.SetActiveFocus
// 0x0001 (0x0001 - 0x0000)
struct TextChatWindowWidget_SetActiveFocus final
{
public:
	bool                                          IsFocusable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatWindowWidget_SetActiveFocus) == 0x000001, "Wrong alignment on TextChatWindowWidget_SetActiveFocus");
static_assert(sizeof(TextChatWindowWidget_SetActiveFocus) == 0x000001, "Wrong size on TextChatWindowWidget_SetActiveFocus");
static_assert(offsetof(TextChatWindowWidget_SetActiveFocus, IsFocusable) == 0x000000, "Member 'TextChatWindowWidget_SetActiveFocus::IsFocusable' has a wrong offset!");

// Function GameModule.TextChatWindowWidget.SetActiveSendButton
// 0x0001 (0x0001 - 0x0000)
struct TextChatWindowWidget_SetActiveSendButton final
{
public:
	bool                                          IsSendable;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatWindowWidget_SetActiveSendButton) == 0x000001, "Wrong alignment on TextChatWindowWidget_SetActiveSendButton");
static_assert(sizeof(TextChatWindowWidget_SetActiveSendButton) == 0x000001, "Wrong size on TextChatWindowWidget_SetActiveSendButton");
static_assert(offsetof(TextChatWindowWidget_SetActiveSendButton, IsSendable) == 0x000000, "Member 'TextChatWindowWidget_SetActiveSendButton::IsSendable' has a wrong offset!");

// Function GameModule.TextChatWindowWidget.SetActiveTextInput
// 0x0001 (0x0001 - 0x0000)
struct TextChatWindowWidget_SetActiveTextInput final
{
public:
	bool                                          Input;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatWindowWidget_SetActiveTextInput) == 0x000001, "Wrong alignment on TextChatWindowWidget_SetActiveTextInput");
static_assert(sizeof(TextChatWindowWidget_SetActiveTextInput) == 0x000001, "Wrong size on TextChatWindowWidget_SetActiveTextInput");
static_assert(offsetof(TextChatWindowWidget_SetActiveTextInput, Input) == 0x000000, "Member 'TextChatWindowWidget_SetActiveTextInput::Input' has a wrong offset!");

// Function GameModule.TextChatWindowWidget.SetNoticeVisibility
// 0x0001 (0x0001 - 0x0000)
struct TextChatWindowWidget_SetNoticeVisibility final
{
public:
	ESlateVisibility                              Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatWindowWidget_SetNoticeVisibility) == 0x000001, "Wrong alignment on TextChatWindowWidget_SetNoticeVisibility");
static_assert(sizeof(TextChatWindowWidget_SetNoticeVisibility) == 0x000001, "Wrong size on TextChatWindowWidget_SetNoticeVisibility");
static_assert(offsetof(TextChatWindowWidget_SetNoticeVisibility, Value) == 0x000000, "Member 'TextChatWindowWidget_SetNoticeVisibility::Value' has a wrong offset!");

// Function GameModule.TextChatWindowWidget.WindowClose
// 0x0001 (0x0001 - 0x0000)
struct TextChatWindowWidget_WindowClose final
{
public:
	bool                                          bPlaySound;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatWindowWidget_WindowClose) == 0x000001, "Wrong alignment on TextChatWindowWidget_WindowClose");
static_assert(sizeof(TextChatWindowWidget_WindowClose) == 0x000001, "Wrong size on TextChatWindowWidget_WindowClose");
static_assert(offsetof(TextChatWindowWidget_WindowClose, bPlaySound) == 0x000000, "Member 'TextChatWindowWidget_WindowClose::bPlaySound' has a wrong offset!");

// Function GameModule.TextChatWindowWidget.WindowOpen
// 0x0001 (0x0001 - 0x0000)
struct TextChatWindowWidget_WindowOpen final
{
public:
	bool                                          bPlaySound;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextChatWindowWidget_WindowOpen) == 0x000001, "Wrong alignment on TextChatWindowWidget_WindowOpen");
static_assert(sizeof(TextChatWindowWidget_WindowOpen) == 0x000001, "Wrong size on TextChatWindowWidget_WindowOpen");
static_assert(offsetof(TextChatWindowWidget_WindowOpen, bPlaySound) == 0x000000, "Member 'TextChatWindowWidget_WindowOpen::bPlaySound' has a wrong offset!");

// Function GameModule.TimeWidget.BP_UpdateTimeView
// 0x0008 (0x0008 - 0x0000)
struct TimeWidget_BP_UpdateTimeView final
{
public:
	struct FTimespan                              RemainingTime;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimeWidget_BP_UpdateTimeView) == 0x000008, "Wrong alignment on TimeWidget_BP_UpdateTimeView");
static_assert(sizeof(TimeWidget_BP_UpdateTimeView) == 0x000008, "Wrong size on TimeWidget_BP_UpdateTimeView");
static_assert(offsetof(TimeWidget_BP_UpdateTimeView, RemainingTime) == 0x000000, "Member 'TimeWidget_BP_UpdateTimeView::RemainingTime' has a wrong offset!");

// Function GameModule.TutorialMessageWidget.ChangeSizeTutorialMessageWindow
// 0x0001 (0x0001 - 0x0000)
struct TutorialMessageWidget_ChangeSizeTutorialMessageWindow final
{
public:
	bool                                          Condition;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialMessageWidget_ChangeSizeTutorialMessageWindow) == 0x000001, "Wrong alignment on TutorialMessageWidget_ChangeSizeTutorialMessageWindow");
static_assert(sizeof(TutorialMessageWidget_ChangeSizeTutorialMessageWindow) == 0x000001, "Wrong size on TutorialMessageWidget_ChangeSizeTutorialMessageWindow");
static_assert(offsetof(TutorialMessageWidget_ChangeSizeTutorialMessageWindow, Condition) == 0x000000, "Member 'TutorialMessageWidget_ChangeSizeTutorialMessageWindow::Condition' has a wrong offset!");

// Function GameModule.TutorialMessageWidget.SetTutorialMessageWidget
// 0x0018 (0x0018 - 0x0000)
struct TutorialMessageWidget_SetTutorialMessageWidget final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialMessageWidget_SetTutorialMessageWidget) == 0x000008, "Wrong alignment on TutorialMessageWidget_SetTutorialMessageWidget");
static_assert(sizeof(TutorialMessageWidget_SetTutorialMessageWidget) == 0x000018, "Wrong size on TutorialMessageWidget_SetTutorialMessageWidget");
static_assert(offsetof(TutorialMessageWidget_SetTutorialMessageWidget, Message) == 0x000000, "Member 'TutorialMessageWidget_SetTutorialMessageWidget::Message' has a wrong offset!");

// Function GameModule.TutorialTipsImageWidget.OnReceivedChangedImageIndexEvent
// 0x0004 (0x0004 - 0x0000)
struct TutorialTipsImageWidget_OnReceivedChangedImageIndexEvent final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialTipsImageWidget_OnReceivedChangedImageIndexEvent) == 0x000004, "Wrong alignment on TutorialTipsImageWidget_OnReceivedChangedImageIndexEvent");
static_assert(sizeof(TutorialTipsImageWidget_OnReceivedChangedImageIndexEvent) == 0x000004, "Wrong size on TutorialTipsImageWidget_OnReceivedChangedImageIndexEvent");
static_assert(offsetof(TutorialTipsImageWidget_OnReceivedChangedImageIndexEvent, Index_0) == 0x000000, "Member 'TutorialTipsImageWidget_OnReceivedChangedImageIndexEvent::Index_0' has a wrong offset!");

// Function GameModule.TutorialTipsWidget.BP_OnReceivedCloseButtonDecidedEvent
// 0x0010 (0x0010 - 0x0000)
struct TutorialTipsWidget_BP_OnReceivedCloseButtonDecidedEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TutorialTipsWidget_BP_OnReceivedCloseButtonDecidedEvent) == 0x000008, "Wrong alignment on TutorialTipsWidget_BP_OnReceivedCloseButtonDecidedEvent");
static_assert(sizeof(TutorialTipsWidget_BP_OnReceivedCloseButtonDecidedEvent) == 0x000010, "Wrong size on TutorialTipsWidget_BP_OnReceivedCloseButtonDecidedEvent");
static_assert(offsetof(TutorialTipsWidget_BP_OnReceivedCloseButtonDecidedEvent, Widget) == 0x000000, "Member 'TutorialTipsWidget_BP_OnReceivedCloseButtonDecidedEvent::Widget' has a wrong offset!");
static_assert(offsetof(TutorialTipsWidget_BP_OnReceivedCloseButtonDecidedEvent, InputType) == 0x000008, "Member 'TutorialTipsWidget_BP_OnReceivedCloseButtonDecidedEvent::InputType' has a wrong offset!");

// Function GameModule.TutorialTipsWidget.NextButtonTileView
// 0x0001 (0x0001 - 0x0000)
struct TutorialTipsWidget_NextButtonTileView final
{
public:
	bool                                          NotMaxNext;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialTipsWidget_NextButtonTileView) == 0x000001, "Wrong alignment on TutorialTipsWidget_NextButtonTileView");
static_assert(sizeof(TutorialTipsWidget_NextButtonTileView) == 0x000001, "Wrong size on TutorialTipsWidget_NextButtonTileView");
static_assert(offsetof(TutorialTipsWidget_NextButtonTileView, NotMaxNext) == 0x000000, "Member 'TutorialTipsWidget_NextButtonTileView::NotMaxNext' has a wrong offset!");

// Function GameModule.TutorialTipsWidget.OnChangeBattleSequence
// 0x0001 (0x0001 - 0x0000)
struct TutorialTipsWidget_OnChangeBattleSequence final
{
public:
	EBattleStartSequenceType                      Sequence;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialTipsWidget_OnChangeBattleSequence) == 0x000001, "Wrong alignment on TutorialTipsWidget_OnChangeBattleSequence");
static_assert(sizeof(TutorialTipsWidget_OnChangeBattleSequence) == 0x000001, "Wrong size on TutorialTipsWidget_OnChangeBattleSequence");
static_assert(offsetof(TutorialTipsWidget_OnChangeBattleSequence, Sequence) == 0x000000, "Member 'TutorialTipsWidget_OnChangeBattleSequence::Sequence' has a wrong offset!");

// DelegateFunction GameModule.TutorialTipsWidget.OnChangedImageIndexDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct TutorialTipsWidget_OnChangedImageIndexDelegate__DelegateSignature final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialTipsWidget_OnChangedImageIndexDelegate__DelegateSignature) == 0x000004, "Wrong alignment on TutorialTipsWidget_OnChangedImageIndexDelegate__DelegateSignature");
static_assert(sizeof(TutorialTipsWidget_OnChangedImageIndexDelegate__DelegateSignature) == 0x000004, "Wrong size on TutorialTipsWidget_OnChangedImageIndexDelegate__DelegateSignature");
static_assert(offsetof(TutorialTipsWidget_OnChangedImageIndexDelegate__DelegateSignature, Index_0) == 0x000000, "Member 'TutorialTipsWidget_OnChangedImageIndexDelegate__DelegateSignature::Index_0' has a wrong offset!");

// Function GameModule.TutorialTipsWidget.OnChangeLevel
// 0x0010 (0x0010 - 0x0000)
struct TutorialTipsWidget_OnChangeLevel final
{
public:
	class ULevel*                                 Level_p;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 World_p;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialTipsWidget_OnChangeLevel) == 0x000008, "Wrong alignment on TutorialTipsWidget_OnChangeLevel");
static_assert(sizeof(TutorialTipsWidget_OnChangeLevel) == 0x000010, "Wrong size on TutorialTipsWidget_OnChangeLevel");
static_assert(offsetof(TutorialTipsWidget_OnChangeLevel, Level_p) == 0x000000, "Member 'TutorialTipsWidget_OnChangeLevel::Level_p' has a wrong offset!");
static_assert(offsetof(TutorialTipsWidget_OnChangeLevel, World_p) == 0x000008, "Member 'TutorialTipsWidget_OnChangeLevel::World_p' has a wrong offset!");

// Function GameModule.TutorialTipsWidget.OnReceivedCloseButtonDecidedEvent
// 0x0010 (0x0010 - 0x0000)
struct TutorialTipsWidget_OnReceivedCloseButtonDecidedEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TutorialTipsWidget_OnReceivedCloseButtonDecidedEvent) == 0x000008, "Wrong alignment on TutorialTipsWidget_OnReceivedCloseButtonDecidedEvent");
static_assert(sizeof(TutorialTipsWidget_OnReceivedCloseButtonDecidedEvent) == 0x000010, "Wrong size on TutorialTipsWidget_OnReceivedCloseButtonDecidedEvent");
static_assert(offsetof(TutorialTipsWidget_OnReceivedCloseButtonDecidedEvent, Widget) == 0x000000, "Member 'TutorialTipsWidget_OnReceivedCloseButtonDecidedEvent::Widget' has a wrong offset!");
static_assert(offsetof(TutorialTipsWidget_OnReceivedCloseButtonDecidedEvent, InputType) == 0x000008, "Member 'TutorialTipsWidget_OnReceivedCloseButtonDecidedEvent::InputType' has a wrong offset!");

// Function GameModule.TutorialTipsWidget.PrevButtonTileView
// 0x0001 (0x0001 - 0x0000)
struct TutorialTipsWidget_PrevButtonTileView final
{
public:
	bool                                          NotMinPrev;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialTipsWidget_PrevButtonTileView) == 0x000001, "Wrong alignment on TutorialTipsWidget_PrevButtonTileView");
static_assert(sizeof(TutorialTipsWidget_PrevButtonTileView) == 0x000001, "Wrong size on TutorialTipsWidget_PrevButtonTileView");
static_assert(offsetof(TutorialTipsWidget_PrevButtonTileView, NotMinPrev) == 0x000000, "Member 'TutorialTipsWidget_PrevButtonTileView::NotMinPrev' has a wrong offset!");

// Function GameModule.TutorialTipsWidget.SplitStringByCarriageReturn
// 0x0020 (0x0020 - 0x0000)
struct TutorialTipsWidget_SplitStringByCarriageReturn final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialTipsWidget_SplitStringByCarriageReturn) == 0x000008, "Wrong alignment on TutorialTipsWidget_SplitStringByCarriageReturn");
static_assert(sizeof(TutorialTipsWidget_SplitStringByCarriageReturn) == 0x000020, "Wrong size on TutorialTipsWidget_SplitStringByCarriageReturn");
static_assert(offsetof(TutorialTipsWidget_SplitStringByCarriageReturn, Message) == 0x000000, "Member 'TutorialTipsWidget_SplitStringByCarriageReturn::Message' has a wrong offset!");
static_assert(offsetof(TutorialTipsWidget_SplitStringByCarriageReturn, ReturnValue) == 0x000010, "Member 'TutorialTipsWidget_SplitStringByCarriageReturn::ReturnValue' has a wrong offset!");

// Function GameModule.WaitNetworkMessage.Setup
// 0x0008 (0x0008 - 0x0000)
struct WaitNetworkMessage_Setup final
{
public:
	EWaitMessageType                              Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          backImage;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          backBlur;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StateSetting;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaitNetworkMessage_Setup) == 0x000004, "Wrong alignment on WaitNetworkMessage_Setup");
static_assert(sizeof(WaitNetworkMessage_Setup) == 0x000008, "Wrong size on WaitNetworkMessage_Setup");
static_assert(offsetof(WaitNetworkMessage_Setup, Type) == 0x000000, "Member 'WaitNetworkMessage_Setup::Type' has a wrong offset!");
static_assert(offsetof(WaitNetworkMessage_Setup, backImage) == 0x000001, "Member 'WaitNetworkMessage_Setup::backImage' has a wrong offset!");
static_assert(offsetof(WaitNetworkMessage_Setup, backBlur) == 0x000002, "Member 'WaitNetworkMessage_Setup::backBlur' has a wrong offset!");
static_assert(offsetof(WaitNetworkMessage_Setup, StateSetting) == 0x000004, "Member 'WaitNetworkMessage_Setup::StateSetting' has a wrong offset!");

// Function GameModule.WidgetAnalogInputComponent.IsGamePadControlVirtualCursor
// 0x0001 (0x0001 - 0x0000)
struct WidgetAnalogInputComponent_IsGamePadControlVirtualCursor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetAnalogInputComponent_IsGamePadControlVirtualCursor) == 0x000001, "Wrong alignment on WidgetAnalogInputComponent_IsGamePadControlVirtualCursor");
static_assert(sizeof(WidgetAnalogInputComponent_IsGamePadControlVirtualCursor) == 0x000001, "Wrong size on WidgetAnalogInputComponent_IsGamePadControlVirtualCursor");
static_assert(offsetof(WidgetAnalogInputComponent_IsGamePadControlVirtualCursor, ReturnValue) == 0x000000, "Member 'WidgetAnalogInputComponent_IsGamePadControlVirtualCursor::ReturnValue' has a wrong offset!");

// Function GameModule.WidgetAnalogInputComponent.IsMouseControlVirtualCursor
// 0x0001 (0x0001 - 0x0000)
struct WidgetAnalogInputComponent_IsMouseControlVirtualCursor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetAnalogInputComponent_IsMouseControlVirtualCursor) == 0x000001, "Wrong alignment on WidgetAnalogInputComponent_IsMouseControlVirtualCursor");
static_assert(sizeof(WidgetAnalogInputComponent_IsMouseControlVirtualCursor) == 0x000001, "Wrong size on WidgetAnalogInputComponent_IsMouseControlVirtualCursor");
static_assert(offsetof(WidgetAnalogInputComponent_IsMouseControlVirtualCursor, ReturnValue) == 0x000000, "Member 'WidgetAnalogInputComponent_IsMouseControlVirtualCursor::ReturnValue' has a wrong offset!");

// Function GameModule.WidgetAnalogInputComponent.SetVirtualCursorPosition
// 0x0008 (0x0008 - 0x0000)
struct WidgetAnalogInputComponent_SetVirtualCursorPosition final
{
public:
	struct FVector2D                              Position;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetAnalogInputComponent_SetVirtualCursorPosition) == 0x000004, "Wrong alignment on WidgetAnalogInputComponent_SetVirtualCursorPosition");
static_assert(sizeof(WidgetAnalogInputComponent_SetVirtualCursorPosition) == 0x000008, "Wrong size on WidgetAnalogInputComponent_SetVirtualCursorPosition");
static_assert(offsetof(WidgetAnalogInputComponent_SetVirtualCursorPosition, Position) == 0x000000, "Member 'WidgetAnalogInputComponent_SetVirtualCursorPosition::Position' has a wrong offset!");

// Function GameModule.WidgetAnalogInputComponent.UpdateLeftStickXValue
// 0x0004 (0x0004 - 0x0000)
struct WidgetAnalogInputComponent_UpdateLeftStickXValue final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetAnalogInputComponent_UpdateLeftStickXValue) == 0x000004, "Wrong alignment on WidgetAnalogInputComponent_UpdateLeftStickXValue");
static_assert(sizeof(WidgetAnalogInputComponent_UpdateLeftStickXValue) == 0x000004, "Wrong size on WidgetAnalogInputComponent_UpdateLeftStickXValue");
static_assert(offsetof(WidgetAnalogInputComponent_UpdateLeftStickXValue, AxisValue) == 0x000000, "Member 'WidgetAnalogInputComponent_UpdateLeftStickXValue::AxisValue' has a wrong offset!");

// Function GameModule.WidgetAnalogInputComponent.UpdateLeftStickYValue
// 0x0004 (0x0004 - 0x0000)
struct WidgetAnalogInputComponent_UpdateLeftStickYValue final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetAnalogInputComponent_UpdateLeftStickYValue) == 0x000004, "Wrong alignment on WidgetAnalogInputComponent_UpdateLeftStickYValue");
static_assert(sizeof(WidgetAnalogInputComponent_UpdateLeftStickYValue) == 0x000004, "Wrong size on WidgetAnalogInputComponent_UpdateLeftStickYValue");
static_assert(offsetof(WidgetAnalogInputComponent_UpdateLeftStickYValue, AxisValue) == 0x000000, "Member 'WidgetAnalogInputComponent_UpdateLeftStickYValue::AxisValue' has a wrong offset!");

// Function GameModule.WidgetAnalogInputComponent.UpdateRightStickXValue
// 0x0004 (0x0004 - 0x0000)
struct WidgetAnalogInputComponent_UpdateRightStickXValue final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetAnalogInputComponent_UpdateRightStickXValue) == 0x000004, "Wrong alignment on WidgetAnalogInputComponent_UpdateRightStickXValue");
static_assert(sizeof(WidgetAnalogInputComponent_UpdateRightStickXValue) == 0x000004, "Wrong size on WidgetAnalogInputComponent_UpdateRightStickXValue");
static_assert(offsetof(WidgetAnalogInputComponent_UpdateRightStickXValue, AxisValue) == 0x000000, "Member 'WidgetAnalogInputComponent_UpdateRightStickXValue::AxisValue' has a wrong offset!");

// Function GameModule.WidgetAnalogInputComponent.UpdateRightStickYValue
// 0x0004 (0x0004 - 0x0000)
struct WidgetAnalogInputComponent_UpdateRightStickYValue final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetAnalogInputComponent_UpdateRightStickYValue) == 0x000004, "Wrong alignment on WidgetAnalogInputComponent_UpdateRightStickYValue");
static_assert(sizeof(WidgetAnalogInputComponent_UpdateRightStickYValue) == 0x000004, "Wrong size on WidgetAnalogInputComponent_UpdateRightStickYValue");
static_assert(offsetof(WidgetAnalogInputComponent_UpdateRightStickYValue, AxisValue) == 0x000000, "Member 'WidgetAnalogInputComponent_UpdateRightStickYValue::AxisValue' has a wrong offset!");

// Function GameModule.WidgetAnalogInputComponent.GetVirtualCursorDelta
// 0x0008 (0x0008 - 0x0000)
struct WidgetAnalogInputComponent_GetVirtualCursorDelta final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetAnalogInputComponent_GetVirtualCursorDelta) == 0x000004, "Wrong alignment on WidgetAnalogInputComponent_GetVirtualCursorDelta");
static_assert(sizeof(WidgetAnalogInputComponent_GetVirtualCursorDelta) == 0x000008, "Wrong size on WidgetAnalogInputComponent_GetVirtualCursorDelta");
static_assert(offsetof(WidgetAnalogInputComponent_GetVirtualCursorDelta, ReturnValue) == 0x000000, "Member 'WidgetAnalogInputComponent_GetVirtualCursorDelta::ReturnValue' has a wrong offset!");

// Function GameModule.WidgetAnalogInputComponent.GetVirtualCursorPosition
// 0x0008 (0x0008 - 0x0000)
struct WidgetAnalogInputComponent_GetVirtualCursorPosition final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetAnalogInputComponent_GetVirtualCursorPosition) == 0x000004, "Wrong alignment on WidgetAnalogInputComponent_GetVirtualCursorPosition");
static_assert(sizeof(WidgetAnalogInputComponent_GetVirtualCursorPosition) == 0x000008, "Wrong size on WidgetAnalogInputComponent_GetVirtualCursorPosition");
static_assert(offsetof(WidgetAnalogInputComponent_GetVirtualCursorPosition, ReturnValue) == 0x000000, "Member 'WidgetAnalogInputComponent_GetVirtualCursorPosition::ReturnValue' has a wrong offset!");

// Function GameModule.WidgetSafeGeneralWindow.OnFocus
// 0x0010 (0x0010 - 0x0000)
struct WidgetSafeGeneralWindow_OnFocus final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WidgetSafeGeneralWindow_OnFocus) == 0x000008, "Wrong alignment on WidgetSafeGeneralWindow_OnFocus");
static_assert(sizeof(WidgetSafeGeneralWindow_OnFocus) == 0x000010, "Wrong size on WidgetSafeGeneralWindow_OnFocus");
static_assert(offsetof(WidgetSafeGeneralWindow_OnFocus, Widget) == 0x000000, "Member 'WidgetSafeGeneralWindow_OnFocus::Widget' has a wrong offset!");
static_assert(offsetof(WidgetSafeGeneralWindow_OnFocus, InputType) == 0x000008, "Member 'WidgetSafeGeneralWindow_OnFocus::InputType' has a wrong offset!");

// Function GameModule.YesNoWidget.NoEvent
// 0x0010 (0x0010 - 0x0000)
struct YesNoWidget_NoEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(YesNoWidget_NoEvent) == 0x000008, "Wrong alignment on YesNoWidget_NoEvent");
static_assert(sizeof(YesNoWidget_NoEvent) == 0x000010, "Wrong size on YesNoWidget_NoEvent");
static_assert(offsetof(YesNoWidget_NoEvent, Widget) == 0x000000, "Member 'YesNoWidget_NoEvent::Widget' has a wrong offset!");
static_assert(offsetof(YesNoWidget_NoEvent, InputType) == 0x000008, "Member 'YesNoWidget_NoEvent::InputType' has a wrong offset!");

// DelegateFunction GameModule.YesNoWidget.OnInputEventDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct YesNoWidget_OnInputEventDelegate__DelegateSignature final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(YesNoWidget_OnInputEventDelegate__DelegateSignature) == 0x000008, "Wrong alignment on YesNoWidget_OnInputEventDelegate__DelegateSignature");
static_assert(sizeof(YesNoWidget_OnInputEventDelegate__DelegateSignature) == 0x000010, "Wrong size on YesNoWidget_OnInputEventDelegate__DelegateSignature");
static_assert(offsetof(YesNoWidget_OnInputEventDelegate__DelegateSignature, Widget) == 0x000000, "Member 'YesNoWidget_OnInputEventDelegate__DelegateSignature::Widget' has a wrong offset!");
static_assert(offsetof(YesNoWidget_OnInputEventDelegate__DelegateSignature, InputType) == 0x000008, "Member 'YesNoWidget_OnInputEventDelegate__DelegateSignature::InputType' has a wrong offset!");

// Function GameModule.YesNoWidget.YesEvent
// 0x0010 (0x0010 - 0x0000)
struct YesNoWidget_YesEvent final
{
public:
	class UAppWidget*                             Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(YesNoWidget_YesEvent) == 0x000008, "Wrong alignment on YesNoWidget_YesEvent");
static_assert(sizeof(YesNoWidget_YesEvent) == 0x000010, "Wrong size on YesNoWidget_YesEvent");
static_assert(offsetof(YesNoWidget_YesEvent, Widget) == 0x000000, "Member 'YesNoWidget_YesEvent::Widget' has a wrong offset!");
static_assert(offsetof(YesNoWidget_YesEvent, InputType) == 0x000008, "Member 'YesNoWidget_YesEvent::InputType' has a wrong offset!");

}

