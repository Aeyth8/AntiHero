#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UIFramework

#include "Basic.hpp"

#include "UIFramework_classes.hpp"
#include "UIFramework_parameters.hpp"


namespace SDK
{

// Function UIFramework.WidgetBase.BlockLowPriorityInput
// (Final, Native, Public, BlueprintCallable)

void UWidgetBase::BlockLowPriorityInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetBase", "BlockLowPriorityInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetBase.BP_NativePlayAll
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             AnimationName                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LoopCount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsReverse                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetBase::BP_NativePlayAll(const class FName& AnimationName, int32 LoopCount, float StartTime, bool IsReverse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetBase", "BP_NativePlayAll");

	Params::WidgetBase_BP_NativePlayAll Parms{};

	Parms.AnimationName = AnimationName;
	Parms.LoopCount = LoopCount;
	Parms.StartTime = StartTime;
	Parms.IsReverse = IsReverse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetBase.BP_NativeStopAll
// (Final, Native, Public, BlueprintCallable)

void UWidgetBase::BP_NativeStopAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetBase", "BP_NativeStopAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetBase.BP_PlayAll
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidgetAnimation*                 Animation                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LoopCount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsReverse                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetBase::BP_PlayAll(const class UWidgetAnimation* Animation, int32 LoopCount, float StartTime, bool IsReverse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetBase", "BP_PlayAll");

	Params::WidgetBase_BP_PlayAll Parms{};

	Parms.Animation = Animation;
	Parms.LoopCount = LoopCount;
	Parms.StartTime = StartTime;
	Parms.IsReverse = IsReverse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetBase.CopyWidgetAnimations
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidgetBase*                      base                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllChildren                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOverride                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetBase::CopyWidgetAnimations(class UWidgetBase* base, const bool bAllChildren, const bool bOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetBase", "CopyWidgetAnimations");

	Params::WidgetBase_CopyWidgetAnimations Parms{};

	Parms.base = base;
	Parms.bAllChildren = bAllChildren;
	Parms.bOverride = bOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetBase.DelayInitializePriorityInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewZOrder                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetBase::DelayInitializePriorityInput(int32 NewZOrder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetBase", "DelayInitializePriorityInput");

	Params::WidgetBase_DelayInitializePriorityInput Parms{};

	Parms.NewZOrder = NewZOrder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetBase.GetOwningLevelName
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UWidgetBase::GetOwningLevelName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetBase", "GetOwningLevelName");

	Params::WidgetBase_GetOwningLevelName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.WidgetBase.InitWidgetAnimations
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAllChildren                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetBase::InitWidgetAnimations(const bool bAllChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetBase", "InitWidgetAnimations");

	Params::WidgetBase_InitWidgetAnimations Parms{};

	Parms.bAllChildren = bAllChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetBase.OnAddToScreen
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWidgetBase::OnAddToScreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetBase", "OnAddToScreen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UIFramework.WidgetBase.OnRemoveFromParent
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWidgetBase::OnRemoveFromParent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetBase", "OnRemoveFromParent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UIFramework.WidgetBase.ReplaceWidgetAnimation
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidgetAnimation*                 WidgetAnimation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllChildren                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetBase::ReplaceWidgetAnimation(const class FName& Name_0, class UWidgetAnimation* WidgetAnimation, const bool bAllChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetBase", "ReplaceWidgetAnimation");

	Params::WidgetBase_ReplaceWidgetAnimation Parms{};

	Parms.Name_0 = Name_0;
	Parms.WidgetAnimation = WidgetAnimation;
	Parms.bAllChildren = bAllChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetBase.ReplaceWidgetAnimations
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TMap<class FName, class UWidgetAnimation*>WidgetAnimations                                       (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    bAllChildren                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetBase::ReplaceWidgetAnimations(TMap<class FName, class UWidgetAnimation*>* WidgetAnimations, const bool bAllChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetBase", "ReplaceWidgetAnimations");

	Params::WidgetBase_ReplaceWidgetAnimations Parms{};

	Parms.bAllChildren = bAllChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (WidgetAnimations != nullptr)
		*WidgetAnimations = std::move(Parms.WidgetAnimations);
}


// Function UIFramework.WidgetBase.SendToBP_WidgetBaseDesignatedEvent
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EWidgetBaseEventChannel                 InChannel                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetBase::SendToBP_WidgetBaseDesignatedEvent(EWidgetBaseEventChannel InChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetBase", "SendToBP_WidgetBaseDesignatedEvent");

	Params::WidgetBase_SendToBP_WidgetBaseDesignatedEvent Parms{};

	Parms.InChannel = InChannel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UIFramework.WidgetBase.SetCanTick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bCanTick                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetBase::SetCanTick(bool bCanTick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetBase", "SetCanTick");

	Params::WidgetBase_SetCanTick Parms{};

	Parms.bCanTick = bCanTick;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetBase.SetFocusClearedCause
// (Final, Native, Public, BlueprintCallable)

void UWidgetBase::SetFocusClearedCause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetBase", "SetFocusClearedCause");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetBase.SetKeyboardFocusUnBlocked
// (Final, Native, Public, BlueprintCallable)

void UWidgetBase::SetKeyboardFocusUnBlocked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetBase", "SetKeyboardFocusUnBlocked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetBase.StopWidgetAnimation
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllChildren                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetBase::StopWidgetAnimation(const class FName& Name_0, const bool bAllChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetBase", "StopWidgetAnimation");

	Params::WidgetBase_StopWidgetAnimation Parms{};

	Parms.Name_0 = Name_0;
	Parms.bAllChildren = bAllChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetBase.StopWidgetAnimations
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     Names                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bAllChildren                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetBase::StopWidgetAnimations(const TArray<class FName>& Names, const bool bAllChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetBase", "StopWidgetAnimations");

	Params::WidgetBase_StopWidgetAnimations Parms{};

	Parms.Names = std::move(Names);
	Parms.bAllChildren = bAllChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetBase.StopWidgetAnimationsAll
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAllChildren                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetBase::StopWidgetAnimationsAll(const bool bAllChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetBase", "StopWidgetAnimationsAll");

	Params::WidgetBase_StopWidgetAnimationsAll Parms{};

	Parms.bAllChildren = bAllChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetBase.UnblockLowPriorityInput
// (Final, Native, Public, BlueprintCallable)

void UWidgetBase::UnblockLowPriorityInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetBase", "UnblockLowPriorityInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetBase.GetChildWidgets
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class UWidgetBase*>        ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

const TArray<class UWidgetBase*> UWidgetBase::GetChildWidgets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetBase", "GetChildWidgets");

	Params::WidgetBase_GetChildWidgets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.CustomListView.AddScrollOffset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   AddScrollOffset_0                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomListView::AddScrollOffset(float AddScrollOffset_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomListView", "AddScrollOffset");

	Params::CustomListView_AddScrollOffset Parms{};

	Parms.AddScrollOffset_0 = AddScrollOffset_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.CustomListView.AddScrollOffsetByAnalogStick
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnalogInputEvent                InAnalogEvent                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ScrollSpeed                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DefaultSpeedRate                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxSpeedRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AddSpeedRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomListView::AddScrollOffsetByAnalogStick(const struct FAnalogInputEvent& InAnalogEvent, float ScrollSpeed, float DefaultSpeedRate, float MaxSpeedRate, float AddSpeedRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomListView", "AddScrollOffsetByAnalogStick");

	Params::CustomListView_AddScrollOffsetByAnalogStick Parms{};

	Parms.InAnalogEvent = std::move(InAnalogEvent);
	Parms.ScrollSpeed = ScrollSpeed;
	Parms.DefaultSpeedRate = DefaultSpeedRate;
	Parms.MaxSpeedRate = MaxSpeedRate;
	Parms.AddSpeedRate = AddSpeedRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetWindowFrame.OnButtonAddedToFocusEvent
// (Final, Native, Protected)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetWindowFrame::OnButtonAddedToFocusEvent(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetWindowFrame", "OnButtonAddedToFocusEvent");

	Params::WidgetWindowFrame_OnButtonAddedToFocusEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetWindowFrame.OnButtonDecideEvent
// (Final, Native, Protected)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetWindowFrame::OnButtonDecideEvent(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetWindowFrame", "OnButtonDecideEvent");

	Params::WidgetWindowFrame_OnButtonDecideEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetWindowFrame.OnButtonOnLongDecideEvent
// (Final, Native, Protected)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetWindowFrame::OnButtonOnLongDecideEvent(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetWindowFrame", "OnButtonOnLongDecideEvent");

	Params::WidgetWindowFrame_OnButtonOnLongDecideEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetWindowFrame.OnButtonPressEvent
// (Final, Native, Protected)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetWindowFrame::OnButtonPressEvent(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetWindowFrame", "OnButtonPressEvent");

	Params::WidgetWindowFrame_OnButtonPressEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetWindowFrame.OnButtonRemovedFromFocusEvent
// (Final, Native, Protected)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetWindowFrame::OnButtonRemovedFromFocusEvent(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetWindowFrame", "OnButtonRemovedFromFocusEvent");

	Params::WidgetWindowFrame_OnButtonRemovedFromFocusEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction UIFramework.WidgetWindowFrame.OnWindowEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UWidgetWindowFrame::OnWindowEventDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetWindowFrame", "OnWindowEventDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UIFramework.WidgetWindowFrame.ReplaceBase1Slot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UNamedSlot*                       Source                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetWindowFrame::ReplaceBase1Slot(class UNamedSlot* Source)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetWindowFrame", "ReplaceBase1Slot");

	Params::WidgetWindowFrame_ReplaceBase1Slot Parms{};

	Parms.Source = Source;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetWindowFrame.ReplaceBase2Slot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UNamedSlot*                       Source                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetWindowFrame::ReplaceBase2Slot(class UNamedSlot* Source)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetWindowFrame", "ReplaceBase2Slot");

	Params::WidgetWindowFrame_ReplaceBase2Slot Parms{};

	Parms.Source = Source;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetWindowFrame.ReplaceContentsSlot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UNamedSlot*                       Source                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetWindowFrame::ReplaceContentsSlot(class UNamedSlot* Source)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetWindowFrame", "ReplaceContentsSlot");

	Params::WidgetWindowFrame_ReplaceContentsSlot Parms{};

	Parms.Source = Source;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetWindowFrame.SetupBaseWidgets
// (Final, Native, Protected, BlueprintCallable)

void UWidgetWindowFrame::SetupBaseWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetWindowFrame", "SetupBaseWidgets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetWindowFrame.GetButtonCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UWidgetWindowFrame::GetButtonCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetWindowFrame", "GetButtonCount");

	Params::WidgetWindowFrame_GetButtonCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.WidgetWindowFrame.GetWindowSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UWidgetWindowFrame::GetWindowSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetWindowFrame", "GetWindowSize");

	Params::WidgetWindowFrame_GetWindowSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.AppWidgetWork.BP_CreateWidget
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UUserWidget>          WidgetClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAppWidgetPriority                      Priority                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SubPriority                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAddToScreen                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UAppWidgetWork::BP_CreateWidget(TSubclassOf<class UUserWidget> WidgetClass, EAppWidgetPriority Priority, int32 SubPriority, bool bAddToScreen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppWidgetWork", "BP_CreateWidget");

	Params::AppWidgetWork_BP_CreateWidget Parms{};

	Parms.WidgetClass = WidgetClass;
	Parms.Priority = Priority;
	Parms.SubPriority = SubPriority;
	Parms.bAddToScreen = bAddToScreen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.AppWidgetWork.DisableInputForFocusedWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidgetBase*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppWidgetWork::DisableInputForFocusedWidget(class UWidgetBase* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppWidgetWork", "DisableInputForFocusedWidget");

	Params::AppWidgetWork_DisableInputForFocusedWidget Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.AppWidgetWork.EnableInputForFocusedWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidgetBase*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppWidgetWork::EnableInputForFocusedWidget(class UWidgetBase* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppWidgetWork", "EnableInputForFocusedWidget");

	Params::AppWidgetWork_EnableInputForFocusedWidget Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.AppWidgetWork.FadeIn
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FOnFadeFinished                  OnFinishedEvent                                        (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// EWidgetTransitionFadeType               Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bConditional                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnableWorldRendering                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppWidgetWork::FadeIn(const struct FOnFadeFinished& OnFinishedEvent, EWidgetTransitionFadeType Type, bool bConditional, const struct FLinearColor& Color, bool bEnableWorldRendering)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppWidgetWork", "FadeIn");

	Params::AppWidgetWork_FadeIn Parms{};

	Parms.OnFinishedEvent = std::move(OnFinishedEvent);
	Parms.Type = Type;
	Parms.bConditional = bConditional;
	Parms.Color = std::move(Color);
	Parms.bEnableWorldRendering = bEnableWorldRendering;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.AppWidgetWork.FadeOut
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FOnFadeFinished                  OnFinishedEvent                                        (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// EWidgetTransitionFadeType               Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShowNowLoading                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppWidgetWork::FadeOut(const struct FOnFadeFinished& OnFinishedEvent, EWidgetTransitionFadeType Type, const struct FLinearColor& Color, bool bShowNowLoading)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppWidgetWork", "FadeOut");

	Params::AppWidgetWork_FadeOut Parms{};

	Parms.OnFinishedEvent = std::move(OnFinishedEvent);
	Parms.Type = Type;
	Parms.Color = std::move(Color);
	Parms.bShowNowLoading = bShowNowLoading;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.AppWidgetWork.ForceEnableInput
// (Final, Native, Public, BlueprintCallable)

void UAppWidgetWork::ForceEnableInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppWidgetWork", "ForceEnableInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.AppWidgetWork.GetCurrentFocusWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UAppWidgetWork::GetCurrentFocusWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppWidgetWork", "GetCurrentFocusWidget");

	Params::AppWidgetWork_GetCurrentFocusWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.AppWidgetWork.GetPreFocusWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UAppWidgetWork::GetPreFocusWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppWidgetWork", "GetPreFocusWidget");

	Params::AppWidgetWork_GetPreFocusWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.AppWidgetWork.InvalidateAllWidgets
// (Final, Native, Public, BlueprintCallable)

void UAppWidgetWork::InvalidateAllWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppWidgetWork", "InvalidateAllWidgets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.AppWidgetWork.IsGamePadControlVirtualCursor
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAppWidgetWork::IsGamePadControlVirtualCursor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppWidgetWork", "IsGamePadControlVirtualCursor");

	Params::AppWidgetWork_IsGamePadControlVirtualCursor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.AppWidgetWork.IsMouseControlVirtualCursor
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAppWidgetWork::IsMouseControlVirtualCursor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppWidgetWork", "IsMouseControlVirtualCursor");

	Params::AppWidgetWork_IsMouseControlVirtualCursor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction UIFramework.AppWidgetWork.OnInputDeviceChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UAppWidgetWork::OnInputDeviceChanged__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppWidgetWork", "OnInputDeviceChanged__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction UIFramework.AppWidgetWork.OperationChangeDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    bChange                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppWidgetWork::OperationChangeDelegate__DelegateSignature(const bool bChange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppWidgetWork", "OperationChangeDelegate__DelegateSignature");

	Params::AppWidgetWork_OperationChangeDelegate__DelegateSignature Parms{};

	Parms.bChange = bChange;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UIFramework.AppWidgetWork.SetDefaultMap
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UWorld>            Level                                                  (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppWidgetWork::SetDefaultMap(TSoftObjectPtr<class UWorld> Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppWidgetWork", "SetDefaultMap");

	Params::AppWidgetWork_SetDefaultMap Parms{};

	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.AppWidgetWork.SetHistoryFocusedWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppWidgetWork::SetHistoryFocusedWidget(class UWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppWidgetWork", "SetHistoryFocusedWidget");

	Params::AppWidgetWork_SetHistoryFocusedWidget Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.AppWidgetWork.SetKeyboardFocusUnBlocked
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidgetBase*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppWidgetWork::SetKeyboardFocusUnBlocked(class UWidgetBase* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppWidgetWork", "SetKeyboardFocusUnBlocked");

	Params::AppWidgetWork_SetKeyboardFocusUnBlocked Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.AppWidgetWork.SetKeyNavigation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Keynavigation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppWidgetWork::SetKeyNavigation(bool Keynavigation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppWidgetWork", "SetKeyNavigation");

	Params::AppWidgetWork_SetKeyNavigation Parms{};

	Parms.Keynavigation = Keynavigation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.AppWidgetWork.SetLoadingTips
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FText>                     Tips                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UAppWidgetWork::SetLoadingTips(const TArray<class FText>& Tips)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppWidgetWork", "SetLoadingTips");

	Params::AppWidgetWork_SetLoadingTips Parms{};

	Parms.Tips = std::move(Tips);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.AppWidgetWork.SetVirtualCursorCenter
// (Final, Native, Public, BlueprintCallable)

void UAppWidgetWork::SetVirtualCursorCenter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppWidgetWork", "SetVirtualCursorCenter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.AppWidgetWork.SetVirtualCursorPosition
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        Position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppWidgetWork::SetVirtualCursorPosition(const struct FVector2D& Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppWidgetWork", "SetVirtualCursorPosition");

	Params::AppWidgetWork_SetVirtualCursorPosition Parms{};

	Parms.Position = std::move(Position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.AppWidgetWork.SetVirtualCursorSpeed
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        Speed                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppWidgetWork::SetVirtualCursorSpeed(const struct FVector2D& Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppWidgetWork", "SetVirtualCursorSpeed");

	Params::AppWidgetWork_SetVirtualCursorSpeed Parms{};

	Parms.Speed = std::move(Speed);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.AppWidgetWork.ShowMouseCursor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Widget                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppWidgetWork::ShowMouseCursor(const class UObject* Widget, bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppWidgetWork", "ShowMouseCursor");

	Params::AppWidgetWork_ShowMouseCursor Parms{};

	Parms.Widget = Widget;
	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.AppWidgetWork.UpdateMouseCaptureAndLock
// (Final, Native, Public, BlueprintCallable)

void UAppWidgetWork::UpdateMouseCaptureAndLock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppWidgetWork", "UpdateMouseCaptureAndLock");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.AppWidgetWork.GetVirtualCursorDelta
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector2D                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector2D UAppWidgetWork::GetVirtualCursorDelta() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppWidgetWork", "GetVirtualCursorDelta");

	Params::AppWidgetWork_GetVirtualCursorDelta Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.AppWidgetWork.GetVirtualCursorPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector2D                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector2D UAppWidgetWork::GetVirtualCursorPosition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppWidgetWork", "GetVirtualCursorPosition");

	Params::AppWidgetWork_GetVirtualCursorPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.AppWidgetWork.IsControlledGamePad
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAppWidgetWork::IsControlledGamePad() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppWidgetWork", "IsControlledGamePad");

	Params::AppWidgetWork_IsControlledGamePad Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.AppWidgetWork.IsControlledVirtualCursor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAppWidgetWork::IsControlledVirtualCursor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppWidgetWork", "IsControlledVirtualCursor");

	Params::AppWidgetWork_IsControlledVirtualCursor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.AppWidgetWork.IsFading
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAppWidgetWork::IsFading() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppWidgetWork", "IsFading");

	Params::AppWidgetWork_IsFading Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.AppWidgetWork.IsFadingOut
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAppWidgetWork::IsFadingOut() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppWidgetWork", "IsFadingOut");

	Params::AppWidgetWork_IsFadingOut Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.CustomMultiLineEditableText.BP_ResetTextBox
// (Final, Native, Protected, BlueprintCallable)

void UCustomMultiLineEditableText::BP_ResetTextBox()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomMultiLineEditableText", "BP_ResetTextBox");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.CustomMultiLineEditableText.BP_SetLimitCount
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   LimitCount                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomMultiLineEditableText::BP_SetLimitCount(int32 LimitCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomMultiLineEditableText", "BP_SetLimitCount");

	Params::CustomMultiLineEditableText_BP_SetLimitCount Parms{};

	Parms.LimitCount = LimitCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.CustomMultiLineEditableText.CustomHandleOnTextChanged
// (Final, Native, Public, HasOutParams)
// Parameters:
// class FText                             InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCustomMultiLineEditableText::CustomHandleOnTextChanged(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomMultiLineEditableText", "CustomHandleOnTextChanged");

	Params::CustomMultiLineEditableText_CustomHandleOnTextChanged Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.CustomMultiLineEditableText.CustomHandleOnTextCommitted
// (Final, Native, Public, HasOutParams)
// Parameters:
// class FText                             InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// ETextCommit                             CommitMethod                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomMultiLineEditableText::CustomHandleOnTextCommitted(const class FText& InText, ETextCommit CommitMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomMultiLineEditableText", "CustomHandleOnTextCommitted");

	Params::CustomMultiLineEditableText_CustomHandleOnTextCommitted Parms{};

	Parms.InText = std::move(InText);
	Parms.CommitMethod = CommitMethod;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.ClippingWidget.SetupDispClippingMask
// (Final, Native, Protected)

void UClippingWidget::SetupDispClippingMask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClippingWidget", "SetupDispClippingMask");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.ClippingWidget.Update
// (Final, Native, Protected)

void UClippingWidget::Update()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClippingWidget", "Update");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.CustomEditableTextBox.BP_ResetTextBox
// (Final, Native, Protected, BlueprintCallable)

void UCustomEditableTextBox::BP_ResetTextBox()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomEditableTextBox", "BP_ResetTextBox");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.CustomEditableTextBox.BP_SetLimitCount
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   LimitCount                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomEditableTextBox::BP_SetLimitCount(int32 LimitCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomEditableTextBox", "BP_SetLimitCount");

	Params::CustomEditableTextBox_BP_SetLimitCount Parms{};

	Parms.LimitCount = LimitCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.CustomScrollBox.AddScrollOffset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   AddScrollOffset_0                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomScrollBox::AddScrollOffset(float AddScrollOffset_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomScrollBox", "AddScrollOffset");

	Params::CustomScrollBox_AddScrollOffset Parms{};

	Parms.AddScrollOffset_0 = AddScrollOffset_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.CustomScrollBox.AddScrollOffsetByAnalogStick
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnalogInputEvent                InAnalogEvent                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ScrollSpeed                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DefaultSpeedRate                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxSpeedRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AddSpeedRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomScrollBox::AddScrollOffsetByAnalogStick(const struct FAnalogInputEvent& InAnalogEvent, float ScrollSpeed, float DefaultSpeedRate, float MaxSpeedRate, float AddSpeedRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomScrollBox", "AddScrollOffsetByAnalogStick");

	Params::CustomScrollBox_AddScrollOffsetByAnalogStick Parms{};

	Parms.InAnalogEvent = std::move(InAnalogEvent);
	Parms.ScrollSpeed = ScrollSpeed;
	Parms.DefaultSpeedRate = DefaultSpeedRate;
	Parms.MaxSpeedRate = MaxSpeedRate;
	Parms.AddSpeedRate = AddSpeedRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.CustomTileView.AddScrollOffset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   AddScrollOffset_0                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomTileView::AddScrollOffset(float AddScrollOffset_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomTileView", "AddScrollOffset");

	Params::CustomTileView_AddScrollOffset Parms{};

	Parms.AddScrollOffset_0 = AddScrollOffset_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.CustomTileView.NavigationCustom
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUINavigation                           NavigationType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UCustomTileView::NavigationCustom(EUINavigation NavigationType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomTileView", "NavigationCustom");

	Params::CustomTileView_NavigationCustom Parms{};

	Parms.NavigationType = NavigationType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.CustomTileView.NavigationSet
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UCustomTileView::NavigationSet(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomTileView", "NavigationSet");

	Params::CustomTileView_NavigationSet Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.CustomTileView.NavigationSetItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UCustomTileView::NavigationSetItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomTileView", "NavigationSetItem");

	Params::CustomTileView_NavigationSetItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction UIFramework.CustomTileView.OnNavigationOutSideRightLeft__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Right                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomTileView::OnNavigationOutSideRightLeft__DelegateSignature(bool Right)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomTileView", "OnNavigationOutSideRightLeft__DelegateSignature");

	Params::CustomTileView_OnNavigationOutSideRightLeft__DelegateSignature Parms{};

	Parms.Right = Right;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction UIFramework.CustomTileView.OnNavigationOutSideUpDown__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    Up                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomTileView::OnNavigationOutSideUpDown__DelegateSignature(bool Up)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomTileView", "OnNavigationOutSideUpDown__DelegateSignature");

	Params::CustomTileView_OnNavigationOutSideUpDown__DelegateSignature Parms{};

	Parms.Up = Up;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UIFramework.CustomTileView.SetNavigationColumnCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Val                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomTileView::SetNavigationColumnCount(int32 Val)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomTileView", "SetNavigationColumnCount");

	Params::CustomTileView_SetNavigationColumnCount Parms{};

	Parms.Val = Val;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.CustomTileView.GetNavigationColumnCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCustomTileView::GetNavigationColumnCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomTileView", "GetNavigationColumnCount");

	Params::CustomTileView_GetNavigationColumnCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.CustomTileViewHasWidget.BP_SetCustomTileViewNavigationSet
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UCustomTileViewHasWidget::BP_SetCustomTileViewNavigationSet(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomTileViewHasWidget", "BP_SetCustomTileViewNavigationSet");

	Params::CustomTileViewHasWidget_BP_SetCustomTileViewNavigationSet Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.CustomTileViewHasWidget.BP_SetCustomTileViewNavigationSetItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UCustomTileViewHasWidget::BP_SetCustomTileViewNavigationSetItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomTileViewHasWidget", "BP_SetCustomTileViewNavigationSetItem");

	Params::CustomTileViewHasWidget_BP_SetCustomTileViewNavigationSetItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.CustomTileViewHasWidget.DoCustomTileViewHasWidgetNavigation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUINavigation                           UiNavigation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UCustomTileViewHasWidget::DoCustomTileViewHasWidgetNavigation(EUINavigation UiNavigation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomTileViewHasWidget", "DoCustomTileViewHasWidgetNavigation");

	Params::CustomTileViewHasWidget_DoCustomTileViewHasWidgetNavigation Parms{};

	Parms.UiNavigation = UiNavigation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.CustomTileViewHasWidget.BP_GetTileViewPtr
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCustomTileView*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCustomTileView* UCustomTileViewHasWidget::BP_GetTileViewPtr() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomTileViewHasWidget", "BP_GetTileViewPtr");

	Params::CustomTileViewHasWidget_BP_GetTileViewPtr Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.LevelLoaderWork.IsLoadedLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           LongPackageName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULevelLoaderWork::IsLoadedLevel(const class FString& LongPackageName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelLoaderWork", "IsLoadedLevel");

	Params::LevelLoaderWork_IsLoadedLevel Parms{};

	Parms.LongPackageName = std::move(LongPackageName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.LevelLoaderWork.LoadStreamLevel
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FString                           LongPackageName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bClientOnly                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevelStreamingDynamic*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULevelStreamingDynamic* ULevelLoaderWork::LoadStreamLevel(const class FString& LongPackageName, const struct FVector& Location, const struct FRotator& Rotation, bool bClientOnly, bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelLoaderWork", "LoadStreamLevel");

	Params::LevelLoaderWork_LoadStreamLevel Parms{};

	Parms.LongPackageName = std::move(LongPackageName);
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.bClientOnly = bClientOnly;
	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.LevelLoaderWork.LoadStreamLevelSoftObjectLevel
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UWorld>            SubLevelClass                                          (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bClientOnly                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevelStreamingDynamic*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULevelStreamingDynamic* ULevelLoaderWork::LoadStreamLevelSoftObjectLevel(TSoftObjectPtr<class UWorld> SubLevelClass, const struct FVector& Location, const struct FRotator& Rotation, bool bClientOnly, bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelLoaderWork", "LoadStreamLevelSoftObjectLevel");

	Params::LevelLoaderWork_LoadStreamLevelSoftObjectLevel Parms{};

	Parms.SubLevelClass = SubLevelClass;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.bClientOnly = bClientOnly;
	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.LevelLoaderWork.SetLevelVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           LongPackageName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelLoaderWork::SetLevelVisible(const class FString& LongPackageName, bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelLoaderWork", "SetLevelVisible");

	Params::LevelLoaderWork_SetLevelVisible Parms{};

	Parms.LongPackageName = std::move(LongPackageName);
	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.LevelLoaderWork.UnLoadStreamLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           LongPackageName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelLoaderWork::UnLoadStreamLevel(const class FString& LongPackageName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelLoaderWork", "UnLoadStreamLevel");

	Params::LevelLoaderWork_UnLoadStreamLevel Parms{};

	Parms.LongPackageName = std::move(LongPackageName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.LevelLoaderWork.UnLoadStreamLevelLevelStreamingDynamic
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULevelStreamingDynamic*           LevelStreamingDynamic                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelLoaderWork::UnLoadStreamLevelLevelStreamingDynamic(const class ULevelStreamingDynamic* LevelStreamingDynamic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelLoaderWork", "UnLoadStreamLevelLevelStreamingDynamic");

	Params::LevelLoaderWork_UnLoadStreamLevelLevelStreamingDynamic Parms{};

	Parms.LevelStreamingDynamic = LevelStreamingDynamic;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.LevelLoaderWork.UnLoadStreamLevelSoftObjectLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UWorld>            SubLevelClass                                          (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULevelLoaderWork::UnLoadStreamLevelSoftObjectLevel(TSoftObjectPtr<class UWorld> SubLevelClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelLoaderWork", "UnLoadStreamLevelSoftObjectLevel");

	Params::LevelLoaderWork_UnLoadStreamLevelSoftObjectLevel Parms{};

	Parms.SubLevelClass = SubLevelClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.LevelLoaderWork.IsLevelVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           LongPackageName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULevelLoaderWork::IsLevelVisible(const class FString& LongPackageName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelLoaderWork", "IsLevelVisible");

	Params::LevelLoaderWork_IsLevelVisible Parms{};

	Parms.LongPackageName = std::move(LongPackageName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.LevelStreamingClientOnly.SetEnableClientOnlyVisible
// (Final, Native, Private)

void ULevelStreamingClientOnly::SetEnableClientOnlyVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LevelStreamingClientOnly", "SetEnableClientOnlyVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.ListViewEntryObjectBase.SetIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UListViewEntryObjectBase::SetIndex(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ListViewEntryObjectBase", "SetIndex");

	Params::ListViewEntryObjectBase_SetIndex Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.ListViewEntryObjectBase.GetIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UListViewEntryObjectBase::GetIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ListViewEntryObjectBase", "GetIndex");

	Params::ListViewEntryObjectBase_GetIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.MultiWidgetCreator.DestroyPresenter
// (Final, Native, Protected)

void AMultiWidgetCreator::DestroyPresenter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MultiWidgetCreator", "DestroyPresenter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.UIFrameworkViewInterface.DispatchMessage
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             EventName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IUIFrameworkViewInterface::DispatchMessage(const class FName& EventName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIFrameworkViewInterface", "DispatchMessage");

	Params::UIFrameworkViewInterface_DispatchMessage Parms{};

	Parms.EventName = EventName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.UIFrameworkViewInterface.DispatchMessage_OneUObject
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             EventName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Param                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IUIFrameworkViewInterface::DispatchMessage_OneUObject(const class FName& EventName, const class UObject* Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIFrameworkViewInterface", "DispatchMessage_OneUObject");

	Params::UIFrameworkViewInterface_DispatchMessage_OneUObject Parms{};

	Parms.EventName = EventName;
	Parms.Param = Param;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.UISubsystem.DispatchMessage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             EventName                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Param                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISubsystem::DispatchMessage(const class FName& EventName, const class UObject* Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UISubsystem", "DispatchMessage");

	Params::UISubsystem_DispatchMessage Parms{};

	Parms.EventName = EventName;
	Parms.Param = Param;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.UISubsystem.GetUISubLevel
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     Tag                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSoftObjectPtr<class UWorld>      ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSoftObjectPtr<class UWorld> UUISubsystem::GetUISubLevel(const struct FGameplayTag& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UISubsystem", "GetUISubLevel");

	Params::UISubsystem_GetUISubLevel Parms{};

	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.UISubsystem.LoadUISubLevel
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     SubLevelTag                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDebugUnLoadUISubLevel                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForceReload                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISubsystem::LoadUISubLevel(const struct FGameplayTag& SubLevelTag, bool bDebugUnLoadUISubLevel, bool bForceReload, bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UISubsystem", "LoadUISubLevel");

	Params::UISubsystem_LoadUISubLevel Parms{};

	Parms.SubLevelTag = std::move(SubLevelTag);
	Parms.bDebugUnLoadUISubLevel = bDebugUnLoadUISubLevel;
	Parms.bForceReload = bForceReload;
	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.UISubsystem.LoadUISubLevel_Ret_LevelStreamingDynamic
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     SubLevelTag                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForceReload                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevelStreamingDynamic*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULevelStreamingDynamic* UUISubsystem::LoadUISubLevel_Ret_LevelStreamingDynamic(const struct FGameplayTag& SubLevelTag, bool bForceReload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UISubsystem", "LoadUISubLevel_Ret_LevelStreamingDynamic");

	Params::UISubsystem_LoadUISubLevel_Ret_LevelStreamingDynamic Parms{};

	Parms.SubLevelTag = std::move(SubLevelTag);
	Parms.bForceReload = bForceReload;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.UISubsystem.SetVisibleUISubLevel
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     SubLevelTag                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISubsystem::SetVisibleUISubLevel(const struct FGameplayTag& SubLevelTag, bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UISubsystem", "SetVisibleUISubLevel");

	Params::UISubsystem_SetVisibleUISubLevel Parms{};

	Parms.SubLevelTag = std::move(SubLevelTag);
	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.UISubsystem.UnLoadUISubLevel
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     SubLevelTag                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISubsystem::UnLoadUISubLevel(const struct FGameplayTag& SubLevelTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UISubsystem", "UnLoadUISubLevel");

	Params::UISubsystem_UnLoadUISubLevel Parms{};

	Parms.SubLevelTag = std::move(SubLevelTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetBackground.BP_ChangeBackgroundBlurVisibility
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    InVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetBackground::BP_ChangeBackgroundBlurVisibility(bool InVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetBackground", "BP_ChangeBackgroundBlurVisibility");

	Params::WidgetBackground_BP_ChangeBackgroundBlurVisibility Parms{};

	Parms.InVisible = InVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetBackground.BP_Open
// (Final, Native, Protected, BlueprintCallable)

void UWidgetBackground::BP_Open()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetBackground", "BP_Open");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetButton.PressThisButton
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetButton::PressThisButton(EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetButton", "PressThisButton");

	Params::WidgetButton_PressThisButton Parms{};

	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetButton.ResetShortcutKey
// (Final, Native, Public, BlueprintCallable)

void UWidgetButton::ResetShortcutKey()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetButton", "ResetShortcutKey");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetButton.SetOnlyPlayShortcutAtomCue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetButton::SetOnlyPlayShortcutAtomCue(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetButton", "SetOnlyPlayShortcutAtomCue");

	Params::WidgetButton_SetOnlyPlayShortcutAtomCue Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetButton.StopDefaultAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAllChildren                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetButton::StopDefaultAnimation(const bool bAllChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetButton", "StopDefaultAnimation");

	Params::WidgetButton_StopDefaultAnimation Parms{};

	Parms.bAllChildren = bAllChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetButton.StopFocusAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAllChildren                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetButton::StopFocusAnimation(const bool bAllChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetButton", "StopFocusAnimation");

	Params::WidgetButton_StopFocusAnimation Parms{};

	Parms.bAllChildren = bAllChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetButton.StopIdleAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAllChildren                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetButton::StopIdleAnimation(const bool bAllChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetButton", "StopIdleAnimation");

	Params::WidgetButton_StopIdleAnimation Parms{};

	Parms.bAllChildren = bAllChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetButton.StopNegativeAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAllChildren                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetButton::StopNegativeAnimation(const bool bAllChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetButton", "StopNegativeAnimation");

	Params::WidgetButton_StopNegativeAnimation Parms{};

	Parms.bAllChildren = bAllChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetButton.StopPressAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAllChildren                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetButton::StopPressAnimation(const bool bAllChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetButton", "StopPressAnimation");

	Params::WidgetButton_StopPressAnimation Parms{};

	Parms.bAllChildren = bAllChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetButton.StopReleaseAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAllChildren                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetButton::StopReleaseAnimation(const bool bAllChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetButton", "StopReleaseAnimation");

	Params::WidgetButton_StopReleaseAnimation Parms{};

	Parms.bAllChildren = bAllChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetButton.UpdateButtonText
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UWidgetButton::UpdateButtonText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetButton", "UpdateButtonText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetButton.UpdateShortcutKey
// (Final, Native, Public, BlueprintCallable)

void UWidgetButton::UpdateShortcutKey()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetButton", "UpdateShortcutKey");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetButtonDetails.OnDecided
// (Final, Native, Protected)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetButtonDetails::OnDecided(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetButtonDetails", "OnDecided");

	Params::WidgetButtonDetails_OnDecided Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction UIFramework.WidgetButtonDetails.OnInputKeysEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParams)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKey                             Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetButtonDetails::OnInputKeysEventDelegate__DelegateSignature(class UAppWidget* Widget, const struct FKey& Key, const EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetButtonDetails", "OnInputKeysEventDelegate__DelegateSignature");

	Params::WidgetButtonDetails_OnInputKeysEventDelegate__DelegateSignature Parms{};

	Parms.Widget = Widget;
	Parms.Key = std::move(Key);
	Parms.InputType = InputType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UIFramework.WidgetCreator.BP_SetWidgetClass
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// TSubclassOf<class UWidgetBase>          WidgetClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AWidgetCreator::BP_SetWidgetClass(TSubclassOf<class UWidgetBase> WidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetCreator", "BP_SetWidgetClass");

	Params::WidgetCreator_BP_SetWidgetClass Parms{};

	Parms.WidgetClass = WidgetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralWindowBase.Close
// (Final, Native, Public, BlueprintCallable)

void UWidgetGeneralWindowBase::Close()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralWindowBase", "Close");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralWindowBase.OnClose
// (Event, Public, BlueprintEvent)

void UWidgetGeneralWindowBase::OnClose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralWindowBase", "OnClose");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UIFramework.WidgetGeneralWindowBase.OnOpen
// (Event, Public, BlueprintEvent)

void UWidgetGeneralWindowBase::OnOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralWindowBase", "OnOpen");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction UIFramework.WidgetGeneralWindowBase.OnWindowEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UWidgetGeneralWindowBase::OnWindowEventDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralWindowBase", "OnWindowEventDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction UIFramework.WidgetGeneralWindowBase.OnWindowInputEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    LeftButton                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetGeneralWindowBase::OnWindowInputEventDelegate__DelegateSignature(class UAppWidget* Widget, EWidgetInputType InputType, bool LeftButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralWindowBase", "OnWindowInputEventDelegate__DelegateSignature");

	Params::WidgetGeneralWindowBase_OnWindowInputEventDelegate__DelegateSignature Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;
	Parms.LeftButton = LeftButton;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UIFramework.WidgetGeneralWindowBase.Open
// (Final, Native, Public, BlueprintCallable)

void UWidgetGeneralWindowBase::Open()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralWindowBase", "Open");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralWindowBase.SetText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UWidgetGeneralWindowBase::SetText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralWindowBase", "SetText");

	Params::WidgetGeneralWindowBase_SetText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralWindowBase.SetupHeaderText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UWidgetGeneralWindowBase::SetupHeaderText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralWindowBase", "SetupHeaderText");

	Params::WidgetGeneralWindowBase_SetupHeaderText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralWindowBase.SetWindowSize
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        WindowSize                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetGeneralWindowBase::SetWindowSize(const struct FVector2D& WindowSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralWindowBase", "SetWindowSize");

	Params::WidgetGeneralWindowBase_SetWindowSize Parms{};

	Parms.WindowSize = std::move(WindowSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralWindowBase.GetWindowSize
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UWidgetGeneralWindowBase::GetWindowSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralWindowBase", "GetWindowSize");

	Params::WidgetGeneralWindowBase_GetWindowSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.WidgetGeneralEmptyWindow.BP_ChangeBackgroundBlurVisibility
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    InVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetGeneralEmptyWindow::BP_ChangeBackgroundBlurVisibility(bool InVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralEmptyWindow", "BP_ChangeBackgroundBlurVisibility");

	Params::WidgetGeneralEmptyWindow_BP_ChangeBackgroundBlurVisibility Parms{};

	Parms.InVisible = InVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralEmptyWindow.OnMouseButtonDownCloseWindow
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FEventReply UWidgetGeneralEmptyWindow::OnMouseButtonDownCloseWindow(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralEmptyWindow", "OnMouseButtonDownCloseWindow");

	Params::WidgetGeneralEmptyWindow_OnMouseButtonDownCloseWindow Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction UIFramework.WidgetGeneralEmptyWindow.OnOutsideButtonDownEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UWidgetGeneralEmptyWindow::OnOutsideButtonDownEventDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralEmptyWindow", "OnOutsideButtonDownEventDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UIFramework.WidgetGeneralEmptyWindow.OnPlayCancelSound
// (Event, Protected, BlueprintEvent)

void UWidgetGeneralEmptyWindow::OnPlayCancelSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralEmptyWindow", "OnPlayCancelSound");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction UIFramework.WidgetGeneralEmptyWindow.OnWindowEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UWidgetGeneralEmptyWindow::OnWindowEventDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralEmptyWindow", "OnWindowEventDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UIFramework.WidgetGeneralEmptyWindow.PlayCancelSound
// (Final, Native, Public, BlueprintCallable)

void UWidgetGeneralEmptyWindow::PlayCancelSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralEmptyWindow", "PlayCancelSound");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralEmptyWindow.SetPlayCancelSound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetGeneralEmptyWindow::SetPlayCancelSound(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralEmptyWindow", "SetPlayCancelSound");

	Params::WidgetGeneralEmptyWindow_SetPlayCancelSound Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralEmptyWindow.SetPlayCloseSound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetGeneralEmptyWindow::SetPlayCloseSound(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralEmptyWindow", "SetPlayCloseSound");

	Params::WidgetGeneralEmptyWindow_SetPlayCloseSound Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralEmptyWindow.SetPlayOpenSound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetGeneralEmptyWindow::SetPlayOpenSound(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralEmptyWindow", "SetPlayOpenSound");

	Params::WidgetGeneralEmptyWindow_SetPlayOpenSound Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralSelectiveWindow.GetSelectedIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UWidgetGeneralSelectiveWindow::GetSelectedIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralSelectiveWindow", "GetSelectedIndex");

	Params::WidgetGeneralSelectiveWindow_GetSelectedIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.WidgetGeneralSelectiveWindow.OnDecideButton
// (Final, Native, Private)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetGeneralSelectiveWindow::OnDecideButton(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralSelectiveWindow", "OnDecideButton");

	Params::WidgetGeneralSelectiveWindow_OnDecideButton Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralSelectiveWindow.OnMouseEnterButton
// (Final, Native, Private)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetGeneralSelectiveWindow::OnMouseEnterButton(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralSelectiveWindow", "OnMouseEnterButton");

	Params::WidgetGeneralSelectiveWindow_OnMouseEnterButton Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralSelectiveWindow.OnMouseLeaveButton
// (Final, Native, Private)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetGeneralSelectiveWindow::OnMouseLeaveButton(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralSelectiveWindow", "OnMouseLeaveButton");

	Params::WidgetGeneralSelectiveWindow_OnMouseLeaveButton Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralSelectiveWindow.OnPressButton
// (Final, Native, Private)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetGeneralSelectiveWindow::OnPressButton(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralSelectiveWindow", "OnPressButton");

	Params::WidgetGeneralSelectiveWindow_OnPressButton Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction UIFramework.WidgetGeneralSelectiveWindow.OnWindowEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UWidgetGeneralSelectiveWindow::OnWindowEventDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralSelectiveWindow", "OnWindowEventDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction UIFramework.WidgetGeneralSelectiveWindow.OnWindowInputEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// int32                                   Selectindex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    LeftButton                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetGeneralSelectiveWindow::OnWindowInputEventDelegate__DelegateSignature(int32 Selectindex, class UAppWidget* Widget, EWidgetInputType InputType, bool LeftButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralSelectiveWindow", "OnWindowInputEventDelegate__DelegateSignature");

	Params::WidgetGeneralSelectiveWindow_OnWindowInputEventDelegate__DelegateSignature Parms{};

	Parms.Selectindex = Selectindex;
	Parms.Widget = Widget;
	Parms.InputType = InputType;
	Parms.LeftButton = LeftButton;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UIFramework.WidgetGeneralSelectiveWindow.ReceivedClosedDelegate
// (Final, Native, Protected)

void UWidgetGeneralSelectiveWindow::ReceivedClosedDelegate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralSelectiveWindow", "ReceivedClosedDelegate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralSelectiveWindow.ReceivedOpenedDelegate
// (Final, Native, Protected)

void UWidgetGeneralSelectiveWindow::ReceivedOpenedDelegate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralSelectiveWindow", "ReceivedOpenedDelegate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralSelectiveWindow.SetSelectedIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetGeneralSelectiveWindow::SetSelectedIndex(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralSelectiveWindow", "SetSelectedIndex");

	Params::WidgetGeneralSelectiveWindow_SetSelectedIndex Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralSelectiveWindow.SetupList
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UWidgetGeneralSelectiveWindow::SetupList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralSelectiveWindow", "SetupList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralSelectiveWindow.GetListText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FText>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FText> UWidgetGeneralSelectiveWindow::GetListText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralSelectiveWindow", "GetListText");

	Params::WidgetGeneralSelectiveWindow_GetListText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.WidgetGeneralSelectiveWindow.GetTwoButtons
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    InLeft                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidgetButton*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidgetButton* UWidgetGeneralSelectiveWindow::GetTwoButtons(bool InLeft) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralSelectiveWindow", "GetTwoButtons");

	Params::WidgetGeneralSelectiveWindow_GetTwoButtons Parms{};

	Parms.InLeft = InLeft;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.WidgetGeneralWindow.BP_FocusButton
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bLeft                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetGeneralWindow::BP_FocusButton(bool bLeft)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralWindow", "BP_FocusButton");

	Params::WidgetGeneralWindow_BP_FocusButton Parms{};

	Parms.bLeft = bLeft;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralWindow.BP_SetButtonEnable
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetGeneralWindow::BP_SetButtonEnable(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralWindow", "BP_SetButtonEnable");

	Params::WidgetGeneralWindow_BP_SetButtonEnable Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralWindow.BP_SetLeftButtonEnable
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetGeneralWindow::BP_SetLeftButtonEnable(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralWindow", "BP_SetLeftButtonEnable");

	Params::WidgetGeneralWindow_BP_SetLeftButtonEnable Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralWindow.BP_SetRightButtonEnable
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetGeneralWindow::BP_SetRightButtonEnable(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralWindow", "BP_SetRightButtonEnable");

	Params::WidgetGeneralWindow_BP_SetRightButtonEnable Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralWindow.BP_SetupBackgroundBlur
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bUserBlur                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetGeneralWindow::BP_SetupBackgroundBlur(bool bUserBlur)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralWindow", "BP_SetupBackgroundBlur");

	Params::WidgetGeneralWindow_BP_SetupBackgroundBlur Parms{};

	Parms.bUserBlur = bUserBlur;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralWindow.BP_SetupButton
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGeneralWindowText               Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UWidgetGeneralWindow::BP_SetupButton(const struct FGeneralWindowText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralWindow", "BP_SetupButton");

	Params::WidgetGeneralWindow_BP_SetupButton Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralWindow.BP_SetupLeftButton
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGeneralWindowText               Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UWidgetGeneralWindow::BP_SetupLeftButton(const struct FGeneralWindowText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralWindow", "BP_SetupLeftButton");

	Params::WidgetGeneralWindow_BP_SetupLeftButton Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralWindow.BP_SetupRightButton
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGeneralWindowText               Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UWidgetGeneralWindow::BP_SetupRightButton(const struct FGeneralWindowText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralWindow", "BP_SetupRightButton");

	Params::WidgetGeneralWindow_BP_SetupRightButton Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralWindow.BP_SetupTwoButton
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGeneralWindowText               LeftText                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGeneralWindowText               RightText                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UWidgetGeneralWindow::BP_SetupTwoButton(const struct FGeneralWindowText& LeftText, const struct FGeneralWindowText& RightText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralWindow", "BP_SetupTwoButton");

	Params::WidgetGeneralWindow_BP_SetupTwoButton Parms{};

	Parms.LeftText = std::move(LeftText);
	Parms.RightText = std::move(RightText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralWindow.OnDecideButton
// (Final, Native, Private)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetGeneralWindow::OnDecideButton(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralWindow", "OnDecideButton");

	Params::WidgetGeneralWindow_OnDecideButton Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralWindow.OnMouseEnterButton
// (Final, Native, Private)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetGeneralWindow::OnMouseEnterButton(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralWindow", "OnMouseEnterButton");

	Params::WidgetGeneralWindow_OnMouseEnterButton Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralWindow.OnMouseLeaveButton
// (Final, Native, Private)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetGeneralWindow::OnMouseLeaveButton(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralWindow", "OnMouseLeaveButton");

	Params::WidgetGeneralWindow_OnMouseLeaveButton Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralWindow.OnPressButton
// (Final, Native, Private)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetGeneralWindow::OnPressButton(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralWindow", "OnPressButton");

	Params::WidgetGeneralWindow_OnPressButton Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction UIFramework.WidgetGeneralWindow.OnWindowEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UWidgetGeneralWindow::OnWindowEventDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralWindow", "OnWindowEventDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction UIFramework.WidgetGeneralWindow.OnWindowInputEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    LeftButton                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetGeneralWindow::OnWindowInputEventDelegate__DelegateSignature(class UAppWidget* Widget, EWidgetInputType InputType, bool LeftButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralWindow", "OnWindowInputEventDelegate__DelegateSignature");

	Params::WidgetGeneralWindow_OnWindowInputEventDelegate__DelegateSignature Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;
	Parms.LeftButton = LeftButton;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UIFramework.WidgetGeneralWindow.SetSubText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UWidgetGeneralWindow::SetSubText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralWindow", "SetSubText");

	Params::WidgetGeneralWindow_SetSubText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralWindow.BP_GetButtonCount
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UWidgetGeneralWindow::BP_GetButtonCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralWindow", "BP_GetButtonCount");

	Params::WidgetGeneralWindow_BP_GetButtonCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.WidgetGeneralWindow.BP_GetLeftOfTwoButtons
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UWidgetButton*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidgetButton* UWidgetGeneralWindow::BP_GetLeftOfTwoButtons() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralWindow", "BP_GetLeftOfTwoButtons");

	Params::WidgetGeneralWindow_BP_GetLeftOfTwoButtons Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.WidgetGeneralWindow.BP_GetOneButton
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UWidgetButton*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidgetButton* UWidgetGeneralWindow::BP_GetOneButton() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralWindow", "BP_GetOneButton");

	Params::WidgetGeneralWindow_BP_GetOneButton Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.WidgetGeneralWindow.BP_GetRightOfTwoButtons
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UWidgetButton*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidgetButton* UWidgetGeneralWindow::BP_GetRightOfTwoButtons() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralWindow", "BP_GetRightOfTwoButtons");

	Params::WidgetGeneralWindow_BP_GetRightOfTwoButtons Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.WidgetGeneralVerticalMultipleButtonWindow.OnButtonAddedToFocusEvent
// (Final, Native, Public)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetGeneralVerticalMultipleButtonWindow::OnButtonAddedToFocusEvent(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralVerticalMultipleButtonWindow", "OnButtonAddedToFocusEvent");

	Params::WidgetGeneralVerticalMultipleButtonWindow_OnButtonAddedToFocusEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralVerticalMultipleButtonWindow.OnButtonDecideEvent
// (Final, Native, Public)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetGeneralVerticalMultipleButtonWindow::OnButtonDecideEvent(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralVerticalMultipleButtonWindow", "OnButtonDecideEvent");

	Params::WidgetGeneralVerticalMultipleButtonWindow_OnButtonDecideEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralVerticalMultipleButtonWindow.OnButtonOnLongDecideEvent
// (Final, Native, Public)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetGeneralVerticalMultipleButtonWindow::OnButtonOnLongDecideEvent(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralVerticalMultipleButtonWindow", "OnButtonOnLongDecideEvent");

	Params::WidgetGeneralVerticalMultipleButtonWindow_OnButtonOnLongDecideEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralVerticalMultipleButtonWindow.OnButtonPressEvent
// (Final, Native, Public)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetGeneralVerticalMultipleButtonWindow::OnButtonPressEvent(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralVerticalMultipleButtonWindow", "OnButtonPressEvent");

	Params::WidgetGeneralVerticalMultipleButtonWindow_OnButtonPressEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralVerticalMultipleButtonWindow.OnButtonRemovedFromFocusEvent
// (Final, Native, Public)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetGeneralVerticalMultipleButtonWindow::OnButtonRemovedFromFocusEvent(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralVerticalMultipleButtonWindow", "OnButtonRemovedFromFocusEvent");

	Params::WidgetGeneralVerticalMultipleButtonWindow_OnButtonRemovedFromFocusEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetGeneralVerticalMultipleButtonWindow.SetupButtonList
// (Event, Protected, BlueprintEvent)

void UWidgetGeneralVerticalMultipleButtonWindow::SetupButtonList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralVerticalMultipleButtonWindow", "SetupButtonList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UIFramework.WidgetGeneralWindowFrame.SetupBaseWidgets
// (Final, Native, Public, BlueprintCallable)

void UWidgetGeneralWindowFrame::SetupBaseWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetGeneralWindowFrame", "SetupBaseWidgets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetInputControl.PressCancel
// (Event, Protected, BlueprintEvent)

void UWidgetInputControl::PressCancel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetInputControl", "PressCancel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UIFramework.WidgetInputControl.PressDpadLeft
// (Event, Protected, BlueprintEvent)

void UWidgetInputControl::PressDpadLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetInputControl", "PressDpadLeft");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UIFramework.WidgetInputControl.PressDpadRight
// (Event, Protected, BlueprintEvent)

void UWidgetInputControl::PressDpadRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetInputControl", "PressDpadRight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UIFramework.WidgetInputControl.PressLeftShoulder
// (Event, Protected, BlueprintEvent)

void UWidgetInputControl::PressLeftShoulder()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetInputControl", "PressLeftShoulder");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UIFramework.WidgetInputControl.PressRightShoulder
// (Event, Protected, BlueprintEvent)

void UWidgetInputControl::PressRightShoulder()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetInputControl", "PressRightShoulder");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UIFramework.WidgetLocalizeLayout.SetText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             Source                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             Format                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UWidgetLocalizeLayout::SetText(const class FText& Source, const class FText& Format)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetLocalizeLayout", "SetText");

	Params::WidgetLocalizeLayout_SetText Parms{};

	Parms.Source = std::move(Source);
	Parms.Format = std::move(Format);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetLocalizeLayoutItem.SetText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UWidgetLocalizeLayoutItem::SetText(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetLocalizeLayoutItem", "SetText");

	Params::WidgetLocalizeLayoutItem_SetText Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetMatrixSelection.OnCancelElement
// (Final, Native, Private)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetMatrixSelection::OnCancelElement(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetMatrixSelection", "OnCancelElement");

	Params::WidgetMatrixSelection_OnCancelElement Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetMatrixSelection.OnDecideElement
// (Final, Native, Private)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetMatrixSelection::OnDecideElement(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetMatrixSelection", "OnDecideElement");

	Params::WidgetMatrixSelection_OnDecideElement Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction UIFramework.WidgetMatrixSelection.OnMatrixSelectionInputEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetMatrixSelection::OnMatrixSelectionInputEventDelegate__DelegateSignature(class UAppWidget* Widget, EWidgetInputType InputType, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetMatrixSelection", "OnMatrixSelectionInputEventDelegate__DelegateSignature");

	Params::WidgetMatrixSelection_OnMatrixSelectionInputEventDelegate__DelegateSignature Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;
	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UIFramework.WidgetMatrixSelection.OnSelectElement
// (Final, Native, Private)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetMatrixSelection::OnSelectElement(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetMatrixSelection", "OnSelectElement");

	Params::WidgetMatrixSelection_OnSelectElement Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetMatrixSelection.BP_GetElemets
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UWidget>              ElementType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class UWidget*>            ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

const TArray<class UWidget*> UWidgetMatrixSelection::BP_GetElemets(TSubclassOf<class UWidget> ElementType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetMatrixSelection", "BP_GetElemets");

	Params::WidgetMatrixSelection_BP_GetElemets Parms{};

	Parms.ElementType = ElementType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.WidgetPopUpWindow.CloseEnd
// (Final, Native, Protected, BlueprintCallable)

void UWidgetPopUpWindow::CloseEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetPopUpWindow", "CloseEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetPopUpWindow.OnPressBlockBG
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FGeometry                        MyGeometry                                             (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FEventReply UWidgetPopUpWindow::OnPressBlockBG(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetPopUpWindow", "OnPressBlockBG");

	Params::WidgetPopUpWindow_OnPressBlockBG Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.WidgetScrollBar.OnSelectedKnob
// (Final, Native, Private)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetScrollBar::OnSelectedKnob(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetScrollBar", "OnSelectedKnob");

	Params::WidgetScrollBar_OnSelectedKnob Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetScrollBar.OnUnselectedKnob
// (Final, Native, Private)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetScrollBar::OnUnselectedKnob(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetScrollBar", "OnUnselectedKnob");

	Params::WidgetScrollBar_OnUnselectedKnob Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetScrollBar.SetKnobSizeScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetScrollBar::SetKnobSizeScale(float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetScrollBar", "SetKnobSizeScale");

	Params::WidgetScrollBar_SetKnobSizeScale Parms{};

	Parms.Scale = Scale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetScrollBar.SetProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetScrollBar::SetProgress(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetScrollBar", "SetProgress");

	Params::WidgetScrollBar_SetProgress Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetScrollText.BP_SetActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Val                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetScrollText::BP_SetActive(bool Val)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetScrollText", "BP_SetActive");

	Params::WidgetScrollText_BP_SetActive Parms{};

	Parms.Val = Val;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetScrollText.Update
// (Final, Native, Public)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetScrollText::Update(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetScrollText", "Update");

	Params::WidgetScrollText_Update Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetScrollText.BP_GetActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWidgetScrollText::BP_GetActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetScrollText", "BP_GetActive");

	Params::WidgetScrollText_BP_GetActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.WidgetStatics.BP_ConvertEngCountString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bComma                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UWidgetStatics::BP_ConvertEngCountString(const int32 Value, const bool bComma)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WidgetStatics", "BP_ConvertEngCountString");

	Params::WidgetStatics_BP_ConvertEngCountString Parms{};

	Parms.Value = Value;
	Parms.bComma = bComma;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.WidgetStatics.BP_ConvertEscapedCharDoubleToSingle
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Source                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UWidgetStatics::BP_ConvertEscapedCharDoubleToSingle(const class FString& Source)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WidgetStatics", "BP_ConvertEscapedCharDoubleToSingle");

	Params::WidgetStatics_BP_ConvertEscapedCharDoubleToSingle Parms{};

	Parms.Source = std::move(Source);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.WidgetStatics.BP_ConvertStringFromFloat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bComma                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FractionalDigits                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UWidgetStatics::BP_ConvertStringFromFloat(const float Value, const bool bComma, const int32 FractionalDigits)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WidgetStatics", "BP_ConvertStringFromFloat");

	Params::WidgetStatics_BP_ConvertStringFromFloat Parms{};

	Parms.Value = Value;
	Parms.bComma = bComma;
	Parms.FractionalDigits = FractionalDigits;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.WidgetStatics.BP_ConvertStringFromInt
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bComma                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UWidgetStatics::BP_ConvertStringFromInt(const int32 Value, const bool bComma)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WidgetStatics", "BP_ConvertStringFromInt");

	Params::WidgetStatics_BP_ConvertStringFromInt Parms{};

	Parms.Value = Value;
	Parms.bComma = bComma;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.WidgetStatics.CheckTextAnyBlankSpace
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FText                             InCheckText                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWidgetStatics::CheckTextAnyBlankSpace(const class FText& InCheckText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WidgetStatics", "CheckTextAnyBlankSpace");

	Params::WidgetStatics_CheckTextAnyBlankSpace Parms{};

	Parms.InCheckText = std::move(InCheckText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.WidgetStatics.CheckTextNumberNum
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FText                             InCheckText                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   InCheckNum                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWidgetStatics::CheckTextNumberNum(const class FText& InCheckText, int32 InCheckNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WidgetStatics", "CheckTextNumberNum");

	Params::WidgetStatics_CheckTextNumberNum Parms{};

	Parms.InCheckText = std::move(InCheckText);
	Parms.InCheckNum = InCheckNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.WidgetStatics.GetPageArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<int32>                           TargetArray                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<int32>                           ReturnArray                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PageElementsCount                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetStatics::GetPageArray(const TArray<int32>& TargetArray, TArray<int32>* ReturnArray, int32 Index_0, int32 PageElementsCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WidgetStatics", "GetPageArray");

	Params::WidgetStatics_GetPageArray Parms{};

	Parms.TargetArray = std::move(TargetArray);
	Parms.Index_0 = Index_0;
	Parms.PageElementsCount = PageElementsCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ReturnArray != nullptr)
		*ReturnArray = std::move(Parms.ReturnArray);
}


// Function UIFramework.WidgetStatics.GetScrollSpeed
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAnalogInputEvent                InAnalogEvent                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ScrollSpeed                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UWidgetStatics::GetScrollSpeed(const class UObject* WorldContextObject, const struct FAnalogInputEvent& InAnalogEvent, float ScrollSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WidgetStatics", "GetScrollSpeed");

	Params::WidgetStatics_GetScrollSpeed Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InAnalogEvent = std::move(InAnalogEvent);
	Parms.ScrollSpeed = ScrollSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.WidgetStatics.IsFocusCauseNotCleared
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFocusEvent                      InFocusEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWidgetStatics::IsFocusCauseNotCleared(const struct FFocusEvent& InFocusEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WidgetStatics", "IsFocusCauseNotCleared");

	Params::WidgetStatics_IsFocusCauseNotCleared Parms{};

	Parms.InFocusEvent = std::move(InFocusEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.WidgetStatics.MakeLimitCheckAndReplace
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FText                             InCheckText                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           InReplace                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InLimitNum                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UWidgetStatics::MakeLimitCheckAndReplace(const class FText& InCheckText, const class FString& InReplace, int32 InLimitNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WidgetStatics", "MakeLimitCheckAndReplace");

	Params::WidgetStatics_MakeLimitCheckAndReplace Parms{};

	Parms.InCheckText = std::move(InCheckText);
	Parms.InReplace = std::move(InReplace);
	Parms.InLimitNum = InLimitNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.WidgetStatics.SetSpriteToMaterial
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceDynamic*         Material                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPaperSprite*                     Sprite                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ParameterName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetStatics::SetSpriteToMaterial(class UMaterialInstanceDynamic* Material, const class UPaperSprite* Sprite, const class FString& ParameterName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WidgetStatics", "SetSpriteToMaterial");

	Params::WidgetStatics_SetSpriteToMaterial Parms{};

	Parms.Material = Material;
	Parms.Sprite = Sprite;
	Parms.ParameterName = std::move(ParameterName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetSubMenu.ChangeArrowImage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bRight                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetSubMenu::ChangeArrowImage(bool bRight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetSubMenu", "ChangeArrowImage");

	Params::WidgetSubMenu_ChangeArrowImage Parms{};

	Parms.bRight = bRight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetSubMenu.Close
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    UseCloseAnimation                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseCloseSE                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetSubMenu::Close(bool UseCloseAnimation, bool UseCloseSE)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetSubMenu", "Close");

	Params::WidgetSubMenu_Close Parms{};

	Parms.UseCloseAnimation = UseCloseAnimation;
	Parms.UseCloseSE = UseCloseSE;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetSubMenu.GetOffsetPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UWidgetSubMenu::GetOffsetPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetSubMenu", "GetOffsetPosition");

	Params::WidgetSubMenu_GetOffsetPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.WidgetSubMenu.IsCloseable
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// struct FFocusEvent                      InFocusEvent                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UWidgetSubMenu::IsCloseable(const struct FFocusEvent& InFocusEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetSubMenu", "IsCloseable");

	Params::WidgetSubMenu_IsCloseable Parms{};

	Parms.InFocusEvent = std::move(InFocusEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetSubMenu.IsOpenSubMenu
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWidgetSubMenu::IsOpenSubMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetSubMenu", "IsOpenSubMenu");

	Params::WidgetSubMenu_IsOpenSubMenu Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.WidgetSubMenu.OnDecideListButtonEvent
// (Final, Native, Private)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetSubMenu::OnDecideListButtonEvent(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetSubMenu", "OnDecideListButtonEvent");

	Params::WidgetSubMenu_OnDecideListButtonEvent Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction UIFramework.WidgetSubMenu.OnDecideSubMenuCancelDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UWidgetSubMenu::OnDecideSubMenuCancelDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetSubMenu", "OnDecideSubMenuCancelDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction UIFramework.WidgetSubMenu.OnDecideSubMenuCloseDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    UseSe                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetSubMenu::OnDecideSubMenuCloseDelegate__DelegateSignature(bool UseSe)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetSubMenu", "OnDecideSubMenuCloseDelegate__DelegateSignature");

	Params::WidgetSubMenu_OnDecideSubMenuCloseDelegate__DelegateSignature Parms{};

	Parms.UseSe = UseSe;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction UIFramework.WidgetSubMenu.OnDecideSubMenuDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetSubMenu::OnDecideSubMenuDelegate__DelegateSignature(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetSubMenu", "OnDecideSubMenuDelegate__DelegateSignature");

	Params::WidgetSubMenu_OnDecideSubMenuDelegate__DelegateSignature Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction UIFramework.WidgetSubMenu.OnDecideSubMenuOpenDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    UseSe                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetSubMenu::OnDecideSubMenuOpenDelegate__DelegateSignature(bool UseSe)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetSubMenu", "OnDecideSubMenuOpenDelegate__DelegateSignature");

	Params::WidgetSubMenu_OnDecideSubMenuOpenDelegate__DelegateSignature Parms{};

	Parms.UseSe = UseSe;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UIFramework.WidgetSubMenu.OnHoveredChangedEvent
// (Final, Native, Private)
// Parameters:
// class UObject*                          Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHovered                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetSubMenu::OnHoveredChangedEvent(class UObject* Item, bool bHovered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetSubMenu", "OnHoveredChangedEvent");

	Params::WidgetSubMenu_OnHoveredChangedEvent Parms{};

	Parms.Item = Item;
	Parms.bHovered = bHovered;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetSubMenu.OnReceivedItemSelectionChangedEvent
// (Final, Native, Private)
// Parameters:
// class UObject*                          Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetSubMenu::OnReceivedItemSelectionChangedEvent(class UObject* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetSubMenu", "OnReceivedItemSelectionChangedEvent");

	Params::WidgetSubMenu_OnReceivedItemSelectionChangedEvent Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetSubMenu.OnSubMenuCancel
// (Final, Native, Private)
// Parameters:
// class UAppWidget*                       Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWidgetInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetSubMenu::OnSubMenuCancel(class UAppWidget* Widget, EWidgetInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetSubMenu", "OnSubMenuCancel");

	Params::WidgetSubMenu_OnSubMenuCancel Parms{};

	Parms.Widget = Widget;
	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction UIFramework.WidgetSubMenu.OnSubMenuDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UWidgetSubMenu::OnSubMenuDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetSubMenu", "OnSubMenuDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UIFramework.WidgetSubMenu.Open
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidgetBase*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseOpenSE                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetSubMenu::Open(class UWidgetBase* Widget, bool UseOpenSE)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetSubMenu", "Open");

	Params::WidgetSubMenu_Open Parms{};

	Parms.Widget = Widget;
	Parms.UseOpenSE = UseOpenSE;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetSubMenu.SetButtonTexts
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class FText>                     Texts                                                  (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UWidgetSubMenu::SetButtonTexts(const TArray<class FText>& Texts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetSubMenu", "SetButtonTexts");

	Params::WidgetSubMenu_SetButtonTexts Parms{};

	Parms.Texts = std::move(Texts);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetSubMenu.SetFocusListViewItem
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetSubMenu::SetFocusListViewItem(int32 ItemIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetSubMenu", "SetFocusListViewItem");

	Params::WidgetSubMenu_SetFocusListViewItem Parms{};

	Parms.ItemIndex = ItemIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetSubMenu.SetOffsetPosition
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        Pos                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetSubMenu::SetOffsetPosition(const struct FVector2D& Pos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetSubMenu", "SetOffsetPosition");

	Params::WidgetSubMenu_SetOffsetPosition Parms{};

	Parms.Pos = std::move(Pos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetSubMenu.SetSubMenuInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FSubMenuInfo>             SubMenuInfo                                            (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    Update                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetSubMenu::SetSubMenuInfo(const TArray<struct FSubMenuInfo>& SubMenuInfo, bool Update)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetSubMenu", "SetSubMenuInfo");

	Params::WidgetSubMenu_SetSubMenuInfo Parms{};

	Parms.SubMenuInfo = std::move(SubMenuInfo);
	Parms.Update = Update;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetSubMenu.UpdateSubMenuInfo
// (Final, Native, Public, BlueprintCallable)

void UWidgetSubMenu::UpdateSubMenuInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetSubMenu", "UpdateSubMenuInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetSubMenu.GetButtonTexts
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FText>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FText> UWidgetSubMenu::GetButtonTexts() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetSubMenu", "GetButtonTexts");

	Params::WidgetSubMenu_GetButtonTexts Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.WidgetSubMenu.GetSubMenuInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FSubMenuInfo>       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FSubMenuInfo> UWidgetSubMenu::GetSubMenuInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetSubMenu", "GetSubMenuInfo");

	Params::WidgetSubMenu_GetSubMenuInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.WidgetSubMenuEntry.UpdateDisplay
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidgetSubMenuObject*             Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetSubMenuEntry::UpdateDisplay(class UWidgetSubMenuObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetSubMenuEntry", "UpdateDisplay");

	Params::WidgetSubMenuEntry_UpdateDisplay Parms{};

	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.CustomTextBlock.SetLineHeightPercentage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InLineHeightPercentage                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomTextBlock::SetLineHeightPercentage(const float InLineHeightPercentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomTextBlock", "SetLineHeightPercentage");

	Params::CustomTextBlock_SetLineHeightPercentage Parms{};

	Parms.InLineHeightPercentage = InLineHeightPercentage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.CustomTextBlock.SetMargin
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMargin                          InMargin                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UCustomTextBlock::SetMargin(const struct FMargin& InMargin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomTextBlock", "SetMargin");

	Params::CustomTextBlock_SetMargin Parms{};

	Parms.InMargin = std::move(InMargin);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.CustomTextBlock.SetWrapTextAt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InWrapTextAt                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomTextBlock::SetWrapTextAt(const float InWrapTextAt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomTextBlock", "SetWrapTextAt");

	Params::CustomTextBlock_SetWrapTextAt Parms{};

	Parms.InWrapTextAt = InWrapTextAt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetText.GetDynamicFontMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* UWidgetText::GetDynamicFontMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetText", "GetDynamicFontMaterial");

	Params::WidgetText_GetDynamicFontMaterial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.WidgetText.GetDynamicOutlineMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* UWidgetText::GetDynamicOutlineMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetText", "GetDynamicOutlineMaterial");

	Params::WidgetText_GetDynamicOutlineMaterial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.WidgetText.SetAutoWrapText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InAutoTextWrap                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetText::SetAutoWrapText(bool InAutoTextWrap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetText", "SetAutoWrapText");

	Params::WidgetText_SetAutoWrapText Parms{};

	Parms.InAutoTextWrap = InAutoTextWrap;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetText.SetFont
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FSlateFontInfo                   InFontInfo                                             (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetText::SetFont(const struct FSlateFontInfo& InFontInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetText", "SetFont");

	Params::WidgetText_SetFont Parms{};

	Parms.InFontInfo = std::move(InFontInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetText.SetLineHeightPercentage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InLineHeightPercentage                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetText::SetLineHeightPercentage(const float InLineHeightPercentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetText", "SetLineHeightPercentage");

	Params::WidgetText_SetLineHeightPercentage Parms{};

	Parms.InLineHeightPercentage = InLineHeightPercentage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetText.SetMargin
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMargin                          InMargin                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UWidgetText::SetMargin(const struct FMargin& InMargin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetText", "SetMargin");

	Params::WidgetText_SetMargin Parms{};

	Parms.InMargin = std::move(InMargin);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetText.SetMinDesiredWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InMinDesiredWidth                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetText::SetMinDesiredWidth(float InMinDesiredWidth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetText", "SetMinDesiredWidth");

	Params::WidgetText_SetMinDesiredWidth Parms{};

	Parms.InMinDesiredWidth = InMinDesiredWidth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetText.SetOpacity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InOpacity                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetText::SetOpacity(float InOpacity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetText", "SetOpacity");

	Params::WidgetText_SetOpacity Parms{};

	Parms.InOpacity = InOpacity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetText.SetShadowColorAndOpacity
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor                     InShadowColorAndOpacity                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetText::SetShadowColorAndOpacity(const struct FLinearColor& InShadowColorAndOpacity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetText", "SetShadowColorAndOpacity");

	Params::WidgetText_SetShadowColorAndOpacity Parms{};

	Parms.InShadowColorAndOpacity = std::move(InShadowColorAndOpacity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetText.SetShadowOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InShadowOffset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetText::SetShadowOffset(const struct FVector2D& InShadowOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetText", "SetShadowOffset");

	Params::WidgetText_SetShadowOffset Parms{};

	Parms.InShadowOffset = std::move(InShadowOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetText.SetStrikeBrush
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FSlateBrush                      InStrikeBrush                                          (Parm, NativeAccessSpecifierPublic)

void UWidgetText::SetStrikeBrush(const struct FSlateBrush& InStrikeBrush)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetText", "SetStrikeBrush");

	Params::WidgetText_SetStrikeBrush Parms{};

	Parms.InStrikeBrush = std::move(InStrikeBrush);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetText.SetText
// (Native, Public, BlueprintCallable)
// Parameters:
// class FText                             InText                                                 (Parm, NativeAccessSpecifierPublic)

void UWidgetText::SetText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetText", "SetText");

	Params::WidgetText_SetText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetText.SetTextColorAndOpacity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FSlateColor                      InColorAndOpacity                                      (Parm, NativeAccessSpecifierPublic)

void UWidgetText::SetTextColorAndOpacity(const struct FSlateColor& InColorAndOpacity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetText", "SetTextColorAndOpacity");

	Params::WidgetText_SetTextColorAndOpacity Parms{};

	Parms.InColorAndOpacity = std::move(InColorAndOpacity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetText.SetTextTransformPolicy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETextTransformPolicy                    InTransformPolicy                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetText::SetTextTransformPolicy(ETextTransformPolicy InTransformPolicy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetText", "SetTextTransformPolicy");

	Params::WidgetText_SetTextTransformPolicy Parms{};

	Parms.InTransformPolicy = InTransformPolicy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetText.SetWrapTextAt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InWrapTextAt                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWidgetText::SetWrapTextAt(const float InWrapTextAt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetText", "SetWrapTextAt");

	Params::WidgetText_SetWrapTextAt Parms{};

	Parms.InWrapTextAt = InWrapTextAt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UIFramework.WidgetText.GetFont
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FSlateFontInfo             ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FSlateFontInfo UWidgetText::GetFont() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetText", "GetFont");

	Params::WidgetText_GetFont Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UIFramework.WidgetText.GetText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UWidgetText::GetText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetText", "GetText");

	Params::WidgetText_GetText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

