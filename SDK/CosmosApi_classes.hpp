#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CosmosApi

#include "Basic.hpp"

#include "CosmosApi_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class CosmosApi.NetHttp
// 0x00A0 (0x00C8 - 0x0028)
class UNetHttp final : public UObject
{
public:
	uint8                                         Pad_28[0x80];                                      // 0x0028(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnReceive;                                         // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnError;                                           // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UNetHttp* Create(class UObject* WorldContextObject);

	class UNetHttp* PostRequest(class UObject* WorldContextObject, const class FString& URL, class UNetMessage* Data, float LimitSec);
	class UNetHttp* SetHeader(class UObject* WorldContextObject, const class FString& TitleCd, const class FString& UserId, const class FString& Session, int32 Platform);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NetHttp">();
	}
	static class UNetHttp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNetHttp>();
	}
};
static_assert(alignof(UNetHttp) == 0x000008, "Wrong alignment on UNetHttp");
static_assert(sizeof(UNetHttp) == 0x0000C8, "Wrong size on UNetHttp");
static_assert(offsetof(UNetHttp, OnReceive) == 0x0000A8, "Member 'UNetHttp::OnReceive' has a wrong offset!");
static_assert(offsetof(UNetHttp, OnError) == 0x0000B8, "Member 'UNetHttp::OnError' has a wrong offset!");

// Class CosmosApi.NetMessage
// 0x0010 (0x0038 - 0x0028)
class UNetMessage final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UNetMessage* Create(class UObject* WorldContextObject);

	class FString Dump(const class FString& Prefix);
	class FString DumpHttp(const class FString& Prefix);
	class FString DumpHttpHeader(const class FString& Prefix);
	class UNetMessage* Set(int32 ID, const TArray<uint8>& Data);
	class FString ToJson();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NetMessage">();
	}
	static class UNetMessage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNetMessage>();
	}
};
static_assert(alignof(UNetMessage) == 0x000008, "Wrong alignment on UNetMessage");
static_assert(sizeof(UNetMessage) == 0x000038, "Wrong size on UNetMessage");

// Class CosmosApi.NetSocketFacadeInterface
// 0x0000 (0x0028 - 0x0028)
class INetSocketFacadeInterface final : public IInterface
{
public:
	void SetCipherMode(ENetSocketCipherMode Mode, const class FString& Key);
	void SetUseTickReceive(bool Use);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NetSocketFacadeInterface">();
	}
	static class INetSocketFacadeInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INetSocketFacadeInterface>();
	}
};
static_assert(alignof(INetSocketFacadeInterface) == 0x000008, "Wrong alignment on INetSocketFacadeInterface");
static_assert(sizeof(INetSocketFacadeInterface) == 0x000028, "Wrong size on INetSocketFacadeInterface");

// Class CosmosApi.NetSquad
// 0x02E0 (0x0308 - 0x0028)
class UNetSquad final : public UObject
{
public:
	uint8                                         Pad_28[0x160];                                     // 0x0028(0x0160)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSquadEvent;                                      // 0x0188(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChatEvent;                                       // 0x0198(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnAppealEvent;                                     // 0x01A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnErrorEvent;                                      // 0x01B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCustomRoomEvent;                                 // 0x01C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChangeCustomRoomSettingsEvent;                   // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnGetCustomRoomDataEvent;                          // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCustomRoomReadiedEvent;                          // 0x01F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCustomLobbyServerEvent;                          // 0x0208(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnReceiveCustomSquadChatEvent;                     // 0x0218(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCustomSquadAppealedEvent;                        // 0x0228(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_238[0xD0];                                     // 0x0238(0x00D0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Appeal(const class FString& AppealMessage);
	void AppealCustomSquad(const class FString& CustomRoomId, int32 CustomSquadNo, const class FString& Appeal);
	void CancelCustomLobbyMatching(const class FString& CustomRoomId);
	void CancelFindSquad();
	void CancelSquadMatching();
	void ChangePlayMode(int32 NewPlayMode);
	void ConnectMatchingServer(int32 Score);
	void CreateCustomRoom(const class FString& CustomRoomId, const class FString& UserData, const class FString& CustomRoomData, int32 CustomRoomPlayMode);
	void CreateSquad(const struct FCreateSquadParam& Param);
	void Disconnect();
	void FindSquad(int32 PlayMode, int32 Skill, const class FString& ConnectionServerIP, int32 ConnectionServerPort);
	void FinishCustomGame(const class FString& CustomRoomId);
	bool GetBattleServerAddress(class FString* OutServerHost, int32* OutServerPort);
	bool GetConnectionServerAddress(class FString* OutServerHost, int32* OutServerPort);
	void GetCustomLobbyServer(const class FString& CustomRoomId);
	void GetCustomRoomData(const class FString& CustomRoomId);
	void Initialize(const struct FNetSquadConfig& Config, bool bUseWebSocket, bool bUseP2P);
	void JoinCustomRoom(const class FString& CustomRoomId, const class FString& UserData);
	void JoinInvitedSquad(const class FString& JoinSquadId, const struct FNetSquadMemberData& OutMemberData);
	void JoinMatchingSquad(const class FString& JoinSquadId, const struct FNetSquadMemberData& MemberData);
	void KickCustomRoom(const class FString& CustomRoomId, const class FString& UserId);
	void KickSquadMember(const class FString& UserId);
	void LeaveCustomRoom(const class FString& CustomRoomId);
	void LeaveSquad();
	void QuitGame();
	void ReadyCustomRoom(const class FString& CustomRoomId);
	void RequestSquadMemberData();
	void SendCustomSquadChat(const class FString& CustomRoomId, int32 CustomSquadNo, const class FString& ChatMessage);
	void SendHeartbeat();
	void SendSquadChatMessage(const class FString& Message);
	void SetCustomMemberData(const class FString& CustomRoomId, const class FString& UserData);
	void SetCustomRoomMember(const class FString& CustomRoomId, const TArray<struct FCosmosCustomRoomSquadList>& RoomSquadList);
	void SetCustomRoomSettings(const class FString& CustomRoomId, const class FString& CustomRoomData, int32 CustomRoomPlayMode);
	void SetSquadMemberData(const struct FNetSquadMemberData& MemberData);
	void StartSquadMatching(int32 PlayMode, int32 Skill);

	int32 GetPlayMode() const;
	class FString GetSquadId() const;
	bool GetSquadMemberData(const class FString& UserId, struct FNetSquadMemberData* OutMemberData) const;
	TArray<class FString> GetSquadMemberList() const;
	class FString GetUserId() const;
	bool IsLeader() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NetSquad">();
	}
	static class UNetSquad* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNetSquad>();
	}
};
static_assert(alignof(UNetSquad) == 0x000008, "Wrong alignment on UNetSquad");
static_assert(sizeof(UNetSquad) == 0x000308, "Wrong size on UNetSquad");
static_assert(offsetof(UNetSquad, OnSquadEvent) == 0x000188, "Member 'UNetSquad::OnSquadEvent' has a wrong offset!");
static_assert(offsetof(UNetSquad, OnChatEvent) == 0x000198, "Member 'UNetSquad::OnChatEvent' has a wrong offset!");
static_assert(offsetof(UNetSquad, OnAppealEvent) == 0x0001A8, "Member 'UNetSquad::OnAppealEvent' has a wrong offset!");
static_assert(offsetof(UNetSquad, OnErrorEvent) == 0x0001B8, "Member 'UNetSquad::OnErrorEvent' has a wrong offset!");
static_assert(offsetof(UNetSquad, OnCustomRoomEvent) == 0x0001C8, "Member 'UNetSquad::OnCustomRoomEvent' has a wrong offset!");
static_assert(offsetof(UNetSquad, OnChangeCustomRoomSettingsEvent) == 0x0001D8, "Member 'UNetSquad::OnChangeCustomRoomSettingsEvent' has a wrong offset!");
static_assert(offsetof(UNetSquad, OnGetCustomRoomDataEvent) == 0x0001E8, "Member 'UNetSquad::OnGetCustomRoomDataEvent' has a wrong offset!");
static_assert(offsetof(UNetSquad, OnCustomRoomReadiedEvent) == 0x0001F8, "Member 'UNetSquad::OnCustomRoomReadiedEvent' has a wrong offset!");
static_assert(offsetof(UNetSquad, OnCustomLobbyServerEvent) == 0x000208, "Member 'UNetSquad::OnCustomLobbyServerEvent' has a wrong offset!");
static_assert(offsetof(UNetSquad, OnReceiveCustomSquadChatEvent) == 0x000218, "Member 'UNetSquad::OnReceiveCustomSquadChatEvent' has a wrong offset!");
static_assert(offsetof(UNetSquad, OnCustomSquadAppealedEvent) == 0x000228, "Member 'UNetSquad::OnCustomSquadAppealedEvent' has a wrong offset!");

}

