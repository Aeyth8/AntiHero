#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ActionAirDash

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "InGameModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ActionAirDash.BP_ActionAirDash_C
// 0x0020 (0x01D0 - 0x01B0)
class UBP_ActionAirDash_C final : public UActionNormalBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x01B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         DashMinTime;                                       // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableShiftAction;                                 // 0x01BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1BD[0x3];                                      // 0x01BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DestDirection;                                     // 0x01C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DashTime;                                          // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_ActionAirDash(int32 EntryPoint);
	void AirDash();
	void AirDashLoopRemote();
	void PlayAnimation();
	void BP_OnBeginAction(const class FName& PrevAction);
	void BP_ActionMain();
	void SmallAction();
	void BP_OnEndAction(const class FName& NextAction);
	void BP_ActionRemote();
	void AirDashLoop();
	void UpdateMoveDirection();
	void UpdateCharacterDirection();
	void UpdateSmallAction();

	bool BP_IsEnableShiftAction(const class FName& NextAction) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ActionAirDash_C">();
	}
	static class UBP_ActionAirDash_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_ActionAirDash_C>();
	}
};
static_assert(alignof(UBP_ActionAirDash_C) == 0x000008, "Wrong alignment on UBP_ActionAirDash_C");
static_assert(sizeof(UBP_ActionAirDash_C) == 0x0001D0, "Wrong size on UBP_ActionAirDash_C");
static_assert(offsetof(UBP_ActionAirDash_C, UberGraphFrame) == 0x0001B0, "Member 'UBP_ActionAirDash_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_ActionAirDash_C, DashMinTime) == 0x0001B8, "Member 'UBP_ActionAirDash_C::DashMinTime' has a wrong offset!");
static_assert(offsetof(UBP_ActionAirDash_C, EnableShiftAction) == 0x0001BC, "Member 'UBP_ActionAirDash_C::EnableShiftAction' has a wrong offset!");
static_assert(offsetof(UBP_ActionAirDash_C, DestDirection) == 0x0001C0, "Member 'UBP_ActionAirDash_C::DestDirection' has a wrong offset!");
static_assert(offsetof(UBP_ActionAirDash_C, DashTime) == 0x0001CC, "Member 'UBP_ActionAirDash_C::DashTime' has a wrong offset!");

}

