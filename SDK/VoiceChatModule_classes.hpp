#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VoiceChatModule

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class VoiceChatModule.VoiceChatObject
// 0x00D0 (0x00F8 - 0x0028)
class UVoiceChatObject final : public UObject
{
public:
	FMulticastInlineDelegateProperty_             OnChangeStateEvent;                                // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnErrorEvent;                                      // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChangePlayerStateEvent;                          // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChangeDeviceListEvent;                           // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnReceivedTextMessageEvent;                        // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x80];                                      // 0x0078(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UVoiceChatObject* GetInstance();

	void AddCrossMutePlayer(const class FString& PlatformPlayerId);
	void BlockPlayersStatus(const TArray<class FString>& PlatformPlayerIds);
	void BlockPlayerStatus(const class FString& PlatformPlayerId);
	bool Connect(const class FString& PlatformPlayerId);
	void Disconnect();
	class FString GetActiveInputDevice();
	class FString GetActiveOutputDevice();
	bool Initialize();
	bool IsInitialized();
	void JoinChannel(const class FString& ChannelName);
	void Set3DPosition(const struct FVector& SpeakerPos, const struct FVector& ListenerPos, const struct FVector& ForwardDir, const struct FVector& UpDirection);
	void SetAudioInputMute(bool bMuted);
	void SetAudioInputVolume(float Volume);
	void SetAudioOutputMute(bool bMuted);
	void SetAudioOutputVolume(float Volume);
	void SetCrossMutePlayers(const TArray<class FString>& PlatformPlayerIds);
	void SetEcho();
	void SetEnableSpeechToText(const bool bEnableSpeechToText);
	void SetInputDevice(const class FString& InputDeviceId);
	void SetNonPositional();
	void SetOutputDevice(const class FString& OutputDeviceId);
	void SetPlayerMute(const class FString& PlatformPlayerId, bool bMute);
	void SetPlayerVolume(const class FString& PlatformPlayerId, float Volume);
	void SetPositional();
	void SetVoiceFont(const class FString& VoiceFontName);
	void UnblockPlayersStatus(const TArray<class FString>& PlatformPlayerIds);
	void UnblockPlayerStatus(const class FString& PlatformPlayerId);
	void UnInitialize();

	float GetAudioInputVolume() const;
	float GetAudioOutputVolume() const;
	class FString GetCurrentChannelName() const;
	TArray<class FString> GetPlayersInChannel() const;
	float GetPlayerVolume(const class FString& PlatformPlayerId) const;
	TArray<class FString> GetVoiceFontNameList() const;
	bool IsAudioInputMuted() const;
	bool IsAudioOutputMuted() const;
	bool IsChannelConnected() const;
	bool IsConnected() const;
	bool IsPlayerMuted(const class FString& PlatformPlayerId) const;
	void SendTextSpeech(const class FString& Message) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoiceChatObject">();
	}
	static class UVoiceChatObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoiceChatObject>();
	}
};
static_assert(alignof(UVoiceChatObject) == 0x000008, "Wrong alignment on UVoiceChatObject");
static_assert(sizeof(UVoiceChatObject) == 0x0000F8, "Wrong size on UVoiceChatObject");
static_assert(offsetof(UVoiceChatObject, OnChangeStateEvent) == 0x000028, "Member 'UVoiceChatObject::OnChangeStateEvent' has a wrong offset!");
static_assert(offsetof(UVoiceChatObject, OnErrorEvent) == 0x000038, "Member 'UVoiceChatObject::OnErrorEvent' has a wrong offset!");
static_assert(offsetof(UVoiceChatObject, OnChangePlayerStateEvent) == 0x000048, "Member 'UVoiceChatObject::OnChangePlayerStateEvent' has a wrong offset!");
static_assert(offsetof(UVoiceChatObject, OnChangeDeviceListEvent) == 0x000058, "Member 'UVoiceChatObject::OnChangeDeviceListEvent' has a wrong offset!");
static_assert(offsetof(UVoiceChatObject, OnReceivedTextMessageEvent) == 0x000068, "Member 'UVoiceChatObject::OnReceivedTextMessageEvent' has a wrong offset!");

}

