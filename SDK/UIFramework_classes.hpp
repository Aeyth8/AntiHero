#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UIFramework

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "UIFramework_structs.hpp"
#include "Engine_classes.hpp"
#include "Slate_structs.hpp"
#include "SlateCore_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class UIFramework.WidgetBase
// 0x00D8 (0x0350 - 0x0278)
class UWidgetBase : public UUserWidget
{
public:
	uint8                                         Pad_278[0x18];                                     // 0x0278(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _bBlockLowPriorityInput;                           // 0x0290(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_291[0x17];                                     // 0x0291(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class UWidgetAnimation*>    _widgetAnimations;                                 // 0x02A8(0x0050)(Protected, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       _currentAnimation;                                 // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_300[0x18];                                     // 0x0300(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidgetBase*>                    _childWidgets;                                     // 0x0318(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UWidgetBase*                            _parentWidget;                                     // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   _owningLevelName;                                  // 0x0330(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_338[0x8];                                      // 0x0338(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IInterface>            _interfaceObject;                                  // 0x0340(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	void BlockLowPriorityInput();
	void BP_NativePlayAll(const class FName& AnimationName, int32 LoopCount, float StartTime, bool IsReverse);
	void BP_NativeStopAll();
	void BP_PlayAll(const class UWidgetAnimation* Animation, int32 LoopCount, float StartTime, bool IsReverse);
	void CopyWidgetAnimations(class UWidgetBase* base, const bool bAllChildren, const bool bOverride);
	void DelayInitializePriorityInput(int32 NewZOrder);
	class FName GetOwningLevelName();
	void InitWidgetAnimations(const bool bAllChildren);
	void OnAddToScreen();
	void OnRemoveFromParent();
	void ReplaceWidgetAnimation(const class FName& Name_0, class UWidgetAnimation* WidgetAnimation, const bool bAllChildren);
	void ReplaceWidgetAnimations(TMap<class FName, class UWidgetAnimation*>* WidgetAnimations, const bool bAllChildren);
	void SendToBP_WidgetBaseDesignatedEvent(EWidgetBaseEventChannel InChannel);
	void SetCanTick(bool bCanTick);
	void SetFocusClearedCause();
	void SetKeyboardFocusUnBlocked();
	void StopWidgetAnimation(const class FName& Name_0, const bool bAllChildren);
	void StopWidgetAnimations(const TArray<class FName>& Names, const bool bAllChildren);
	void StopWidgetAnimationsAll(const bool bAllChildren);
	void UnblockLowPriorityInput();

	const TArray<class UWidgetBase*> GetChildWidgets() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetBase">();
	}
	static class UWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetBase>();
	}
};
static_assert(alignof(UWidgetBase) == 0x000008, "Wrong alignment on UWidgetBase");
static_assert(sizeof(UWidgetBase) == 0x000350, "Wrong size on UWidgetBase");
static_assert(offsetof(UWidgetBase, _bBlockLowPriorityInput) == 0x000290, "Member 'UWidgetBase::_bBlockLowPriorityInput' has a wrong offset!");
static_assert(offsetof(UWidgetBase, _widgetAnimations) == 0x0002A8, "Member 'UWidgetBase::_widgetAnimations' has a wrong offset!");
static_assert(offsetof(UWidgetBase, _currentAnimation) == 0x0002F8, "Member 'UWidgetBase::_currentAnimation' has a wrong offset!");
static_assert(offsetof(UWidgetBase, _childWidgets) == 0x000318, "Member 'UWidgetBase::_childWidgets' has a wrong offset!");
static_assert(offsetof(UWidgetBase, _parentWidget) == 0x000328, "Member 'UWidgetBase::_parentWidget' has a wrong offset!");
static_assert(offsetof(UWidgetBase, _owningLevelName) == 0x000330, "Member 'UWidgetBase::_owningLevelName' has a wrong offset!");
static_assert(offsetof(UWidgetBase, _interfaceObject) == 0x000340, "Member 'UWidgetBase::_interfaceObject' has a wrong offset!");

// Class UIFramework.WidgetTransition
// 0x0150 (0x04A0 - 0x0350)
class alignas(0x10) UWidgetTransition : public UWidgetBase
{
public:
	class UImage*                                 Background;                                        // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             LoadingText;                                       // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 LoadingIcon;                                       // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_368[0x138];                                    // 0x0368(0x0138)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetTransition">();
	}
	static class UWidgetTransition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetTransition>();
	}
};
static_assert(alignof(UWidgetTransition) == 0x000010, "Wrong alignment on UWidgetTransition");
static_assert(sizeof(UWidgetTransition) == 0x0004A0, "Wrong size on UWidgetTransition");
static_assert(offsetof(UWidgetTransition, Background) == 0x000350, "Member 'UWidgetTransition::Background' has a wrong offset!");
static_assert(offsetof(UWidgetTransition, LoadingText) == 0x000358, "Member 'UWidgetTransition::LoadingText' has a wrong offset!");
static_assert(offsetof(UWidgetTransition, LoadingIcon) == 0x000360, "Member 'UWidgetTransition::LoadingIcon' has a wrong offset!");

// Class UIFramework.CustomListView
// 0x0028 (0x0390 - 0x0368)
class UCustomListView final : public UListView
{
public:
	ESlateVisibility                              _scrollBarVisibility;                              // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USlateWidgetStyleAsset*                 _scrollBarStyleAsset;                              // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                _padding;                                          // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddScrollOffset(float AddScrollOffset_0);
	void AddScrollOffsetByAnalogStick(const struct FAnalogInputEvent& InAnalogEvent, float ScrollSpeed, float DefaultSpeedRate, float MaxSpeedRate, float AddSpeedRate);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomListView">();
	}
	static class UCustomListView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomListView>();
	}
};
static_assert(alignof(UCustomListView) == 0x000008, "Wrong alignment on UCustomListView");
static_assert(sizeof(UCustomListView) == 0x000390, "Wrong size on UCustomListView");
static_assert(offsetof(UCustomListView, _scrollBarVisibility) == 0x000368, "Member 'UCustomListView::_scrollBarVisibility' has a wrong offset!");
static_assert(offsetof(UCustomListView, _scrollBarStyleAsset) == 0x000370, "Member 'UCustomListView::_scrollBarStyleAsset' has a wrong offset!");
static_assert(offsetof(UCustomListView, _padding) == 0x000378, "Member 'UCustomListView::_padding' has a wrong offset!");

// Class UIFramework.WidgetVersionNotation
// 0x0018 (0x0368 - 0x0350)
class UWidgetVersionNotation : public UWidgetBase
{
public:
	class UTextBlock*                             Text;                                              // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_358[0x10];                                     // 0x0358(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetVersionNotation">();
	}
	static class UWidgetVersionNotation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetVersionNotation>();
	}
};
static_assert(alignof(UWidgetVersionNotation) == 0x000008, "Wrong alignment on UWidgetVersionNotation");
static_assert(sizeof(UWidgetVersionNotation) == 0x000368, "Wrong size on UWidgetVersionNotation");
static_assert(offsetof(UWidgetVersionNotation, Text) == 0x000350, "Member 'UWidgetVersionNotation::Text' has a wrong offset!");

// Class UIFramework.AppWidget
// 0x0098 (0x03E8 - 0x0350)
class UAppWidget : public UWidgetBase
{
public:
	FMulticastInlineDelegateProperty_             OnPressDelegate;                                   // 0x0350(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnReleaseDelegate;                                 // 0x0360(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSelectDelegate;                                  // 0x0370(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCancelDelegate;                                  // 0x0380(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnNegativeDelegate;                                // 0x0390(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnAddedToFocusDelegate;                            // 0x03A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnRemovedFromFocusDelegate;                        // 0x03B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<EInputKey>                             _pressKeys;                                        // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<EInputKey>                             _cancelKeys;                                       // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          _bEnable;                                          // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3E1[0x7];                                      // 0x03E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AppWidget">();
	}
	static class UAppWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAppWidget>();
	}
};
static_assert(alignof(UAppWidget) == 0x000008, "Wrong alignment on UAppWidget");
static_assert(sizeof(UAppWidget) == 0x0003E8, "Wrong size on UAppWidget");
static_assert(offsetof(UAppWidget, OnPressDelegate) == 0x000350, "Member 'UAppWidget::OnPressDelegate' has a wrong offset!");
static_assert(offsetof(UAppWidget, OnReleaseDelegate) == 0x000360, "Member 'UAppWidget::OnReleaseDelegate' has a wrong offset!");
static_assert(offsetof(UAppWidget, OnSelectDelegate) == 0x000370, "Member 'UAppWidget::OnSelectDelegate' has a wrong offset!");
static_assert(offsetof(UAppWidget, OnCancelDelegate) == 0x000380, "Member 'UAppWidget::OnCancelDelegate' has a wrong offset!");
static_assert(offsetof(UAppWidget, OnNegativeDelegate) == 0x000390, "Member 'UAppWidget::OnNegativeDelegate' has a wrong offset!");
static_assert(offsetof(UAppWidget, OnAddedToFocusDelegate) == 0x0003A0, "Member 'UAppWidget::OnAddedToFocusDelegate' has a wrong offset!");
static_assert(offsetof(UAppWidget, OnRemovedFromFocusDelegate) == 0x0003B0, "Member 'UAppWidget::OnRemovedFromFocusDelegate' has a wrong offset!");
static_assert(offsetof(UAppWidget, _pressKeys) == 0x0003C0, "Member 'UAppWidget::_pressKeys' has a wrong offset!");
static_assert(offsetof(UAppWidget, _cancelKeys) == 0x0003D0, "Member 'UAppWidget::_cancelKeys' has a wrong offset!");
static_assert(offsetof(UAppWidget, _bEnable) == 0x0003E0, "Member 'UAppWidget::_bEnable' has a wrong offset!");

// Class UIFramework.WidgetWindowFrame
// 0x0228 (0x0578 - 0x0350)
class UWidgetWindowFrame : public UWidgetBase
{
public:
	uint8                                         _buttonCount;                                      // 0x0350(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bLoop;                                            // 0x0351(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_352[0x6];                                      // 0x0352(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeneralButtonText                     _buttonText1;                                      // 0x0358(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FGeneralButtonText                     _buttonText2;                                      // 0x03B0(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   _headerText;                                       // 0x0408(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	float                                         _windowSize;                                       // 0x0420(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_424[0x4];                                      // 0x0424(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                _buttonPanel;                                      // 0x0428(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USpacer*                                _buttonSpacer;                                     // 0x0430(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetButton*                          _button1;                                          // 0x0438(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetButton*                          _button2;                                          // 0x0440(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                _button2Panel;                                     // 0x0448(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetText*                            _header;                                           // 0x0450(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USpacer*                                _bgSpacer;                                         // 0x0458(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                _buttonBox;                                        // 0x0460(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNamedSlot*                             Base1Slot;                                         // 0x0468(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNamedSlot*                             Base2Slot;                                         // 0x0470(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNamedSlot*                             ContentSlot;                                       // 0x0478(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 _windowBg;                                         // 0x0480(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                _base1Image;                                       // 0x0488(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                _base2Image;                                       // 0x0490(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_498[0x10];                                     // 0x0498(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             _buttonDecideEvent1;                               // 0x04A8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonPressEvent1;                                // 0x04B8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          _bUseButtonLongDecideEvent1;                       // 0x04C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C9[0x7];                                      // 0x04C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             _buttonLongDecideEvent1;                           // 0x04D0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonAddedToFocusEvent1;                         // 0x04E0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonRemovedFromFocusEvent1;                     // 0x04F0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonDecideEvent2;                               // 0x0500(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonPressEvent2;                                // 0x0510(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          _bUseButtonLongDecideEvent2;                       // 0x0520(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_521[0x7];                                      // 0x0521(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             _buttonLongDecideEvent2;                           // 0x0528(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonAddedToFocusEvent2;                         // 0x0538(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonRemovedFromFocusEvent2;                     // 0x0548(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnOpenedDelegate;                                  // 0x0558(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnClosedDelegate;                                  // 0x0568(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void OnButtonAddedToFocusEvent(class UAppWidget* Widget, EWidgetInputType InputType);
	void OnButtonDecideEvent(class UAppWidget* Widget, EWidgetInputType InputType);
	void OnButtonOnLongDecideEvent(class UAppWidget* Widget, EWidgetInputType InputType);
	void OnButtonPressEvent(class UAppWidget* Widget, EWidgetInputType InputType);
	void OnButtonRemovedFromFocusEvent(class UAppWidget* Widget, EWidgetInputType InputType);
	void OnWindowEventDelegate__DelegateSignature();
	void ReplaceBase1Slot(class UNamedSlot* Source);
	void ReplaceBase2Slot(class UNamedSlot* Source);
	void ReplaceContentsSlot(class UNamedSlot* Source);
	void SetupBaseWidgets();

	uint8 GetButtonCount() const;
	float GetWindowSize() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetWindowFrame">();
	}
	static class UWidgetWindowFrame* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetWindowFrame>();
	}
};
static_assert(alignof(UWidgetWindowFrame) == 0x000008, "Wrong alignment on UWidgetWindowFrame");
static_assert(sizeof(UWidgetWindowFrame) == 0x000578, "Wrong size on UWidgetWindowFrame");
static_assert(offsetof(UWidgetWindowFrame, _buttonCount) == 0x000350, "Member 'UWidgetWindowFrame::_buttonCount' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, _bLoop) == 0x000351, "Member 'UWidgetWindowFrame::_bLoop' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, _buttonText1) == 0x000358, "Member 'UWidgetWindowFrame::_buttonText1' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, _buttonText2) == 0x0003B0, "Member 'UWidgetWindowFrame::_buttonText2' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, _headerText) == 0x000408, "Member 'UWidgetWindowFrame::_headerText' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, _windowSize) == 0x000420, "Member 'UWidgetWindowFrame::_windowSize' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, _buttonPanel) == 0x000428, "Member 'UWidgetWindowFrame::_buttonPanel' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, _buttonSpacer) == 0x000430, "Member 'UWidgetWindowFrame::_buttonSpacer' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, _button1) == 0x000438, "Member 'UWidgetWindowFrame::_button1' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, _button2) == 0x000440, "Member 'UWidgetWindowFrame::_button2' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, _button2Panel) == 0x000448, "Member 'UWidgetWindowFrame::_button2Panel' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, _header) == 0x000450, "Member 'UWidgetWindowFrame::_header' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, _bgSpacer) == 0x000458, "Member 'UWidgetWindowFrame::_bgSpacer' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, _buttonBox) == 0x000460, "Member 'UWidgetWindowFrame::_buttonBox' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, Base1Slot) == 0x000468, "Member 'UWidgetWindowFrame::Base1Slot' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, Base2Slot) == 0x000470, "Member 'UWidgetWindowFrame::Base2Slot' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, ContentSlot) == 0x000478, "Member 'UWidgetWindowFrame::ContentSlot' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, _windowBg) == 0x000480, "Member 'UWidgetWindowFrame::_windowBg' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, _base1Image) == 0x000488, "Member 'UWidgetWindowFrame::_base1Image' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, _base2Image) == 0x000490, "Member 'UWidgetWindowFrame::_base2Image' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, _buttonDecideEvent1) == 0x0004A8, "Member 'UWidgetWindowFrame::_buttonDecideEvent1' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, _buttonPressEvent1) == 0x0004B8, "Member 'UWidgetWindowFrame::_buttonPressEvent1' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, _bUseButtonLongDecideEvent1) == 0x0004C8, "Member 'UWidgetWindowFrame::_bUseButtonLongDecideEvent1' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, _buttonLongDecideEvent1) == 0x0004D0, "Member 'UWidgetWindowFrame::_buttonLongDecideEvent1' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, _buttonAddedToFocusEvent1) == 0x0004E0, "Member 'UWidgetWindowFrame::_buttonAddedToFocusEvent1' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, _buttonRemovedFromFocusEvent1) == 0x0004F0, "Member 'UWidgetWindowFrame::_buttonRemovedFromFocusEvent1' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, _buttonDecideEvent2) == 0x000500, "Member 'UWidgetWindowFrame::_buttonDecideEvent2' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, _buttonPressEvent2) == 0x000510, "Member 'UWidgetWindowFrame::_buttonPressEvent2' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, _bUseButtonLongDecideEvent2) == 0x000520, "Member 'UWidgetWindowFrame::_bUseButtonLongDecideEvent2' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, _buttonLongDecideEvent2) == 0x000528, "Member 'UWidgetWindowFrame::_buttonLongDecideEvent2' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, _buttonAddedToFocusEvent2) == 0x000538, "Member 'UWidgetWindowFrame::_buttonAddedToFocusEvent2' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, _buttonRemovedFromFocusEvent2) == 0x000548, "Member 'UWidgetWindowFrame::_buttonRemovedFromFocusEvent2' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, OnOpenedDelegate) == 0x000558, "Member 'UWidgetWindowFrame::OnOpenedDelegate' has a wrong offset!");
static_assert(offsetof(UWidgetWindowFrame, OnClosedDelegate) == 0x000568, "Member 'UWidgetWindowFrame::OnClosedDelegate' has a wrong offset!");

// Class UIFramework.AppWidgetWork
// 0x0418 (0x0448 - 0x0030)
class UAppWidgetWork final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ULocalPlayer*                           _localPlayer;                                      // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             _onFadeStartedDelegate;                            // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class UWidgetTransition>          _generateTransitionWidgetClass;                    // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetTransition*                      _widgetTransition;                                 // 0x0070(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_78[0x30];                                      // 0x0078(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UWidgetVersionNotation>     _generateVersionNotationWidgetClass;               // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetVersionNotation*                 _widgetVersionNotation;                            // 0x00B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B8[0x328];                                     // 0x00B8(0x0328)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidgetBase*>                    _disableInputWidgets;                              // 0x03E0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3F0[0x48];                                     // 0x03F0(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             _operationControllerChangeEvent;                   // 0x0438(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	class UUserWidget* BP_CreateWidget(TSubclassOf<class UUserWidget> WidgetClass, EAppWidgetPriority Priority, int32 SubPriority, bool bAddToScreen);
	void DisableInputForFocusedWidget(class UWidgetBase* Widget);
	void EnableInputForFocusedWidget(class UWidgetBase* Widget);
	void FadeIn(const struct FOnFadeFinished& OnFinishedEvent, EWidgetTransitionFadeType Type, bool bConditional, const struct FLinearColor& Color, bool bEnableWorldRendering);
	void FadeOut(const struct FOnFadeFinished& OnFinishedEvent, EWidgetTransitionFadeType Type, const struct FLinearColor& Color, bool bShowNowLoading);
	void ForceEnableInput();
	class UUserWidget* GetCurrentFocusWidget();
	class UUserWidget* GetPreFocusWidget();
	void InvalidateAllWidgets();
	bool IsGamePadControlVirtualCursor();
	bool IsMouseControlVirtualCursor();
	void OnInputDeviceChanged__DelegateSignature();
	void OperationChangeDelegate__DelegateSignature(const bool bChange);
	void SetDefaultMap(TSoftObjectPtr<class UWorld> Level);
	void SetHistoryFocusedWidget(class UWidget* Widget);
	void SetKeyboardFocusUnBlocked(class UWidgetBase* Widget);
	void SetKeyNavigation(bool Keynavigation);
	void SetLoadingTips(const TArray<class FText>& Tips);
	void SetVirtualCursorCenter();
	void SetVirtualCursorPosition(const struct FVector2D& Position);
	void SetVirtualCursorSpeed(const struct FVector2D& Speed);
	void ShowMouseCursor(const class UObject* Widget, bool Flag);
	void UpdateMouseCaptureAndLock();

	const struct FVector2D GetVirtualCursorDelta() const;
	const struct FVector2D GetVirtualCursorPosition() const;
	bool IsControlledGamePad() const;
	bool IsControlledVirtualCursor() const;
	bool IsFading() const;
	bool IsFadingOut() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AppWidgetWork">();
	}
	static class UAppWidgetWork* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAppWidgetWork>();
	}
};
static_assert(alignof(UAppWidgetWork) == 0x000008, "Wrong alignment on UAppWidgetWork");
static_assert(sizeof(UAppWidgetWork) == 0x000448, "Wrong size on UAppWidgetWork");
static_assert(offsetof(UAppWidgetWork, _localPlayer) == 0x000038, "Member 'UAppWidgetWork::_localPlayer' has a wrong offset!");
static_assert(offsetof(UAppWidgetWork, _onFadeStartedDelegate) == 0x000058, "Member 'UAppWidgetWork::_onFadeStartedDelegate' has a wrong offset!");
static_assert(offsetof(UAppWidgetWork, _generateTransitionWidgetClass) == 0x000068, "Member 'UAppWidgetWork::_generateTransitionWidgetClass' has a wrong offset!");
static_assert(offsetof(UAppWidgetWork, _widgetTransition) == 0x000070, "Member 'UAppWidgetWork::_widgetTransition' has a wrong offset!");
static_assert(offsetof(UAppWidgetWork, _generateVersionNotationWidgetClass) == 0x0000A8, "Member 'UAppWidgetWork::_generateVersionNotationWidgetClass' has a wrong offset!");
static_assert(offsetof(UAppWidgetWork, _widgetVersionNotation) == 0x0000B0, "Member 'UAppWidgetWork::_widgetVersionNotation' has a wrong offset!");
static_assert(offsetof(UAppWidgetWork, _disableInputWidgets) == 0x0003E0, "Member 'UAppWidgetWork::_disableInputWidgets' has a wrong offset!");
static_assert(offsetof(UAppWidgetWork, _operationControllerChangeEvent) == 0x000438, "Member 'UAppWidgetWork::_operationControllerChangeEvent' has a wrong offset!");

// Class UIFramework.AppWidgetLocalPlayerWork
// 0x0000 (0x0030 - 0x0030)
class UAppWidgetLocalPlayerWork final : public ULocalPlayerSubsystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AppWidgetLocalPlayerWork">();
	}
	static class UAppWidgetLocalPlayerWork* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAppWidgetLocalPlayerWork>();
	}
};
static_assert(alignof(UAppWidgetLocalPlayerWork) == 0x000008, "Wrong alignment on UAppWidgetLocalPlayerWork");
static_assert(sizeof(UAppWidgetLocalPlayerWork) == 0x000030, "Wrong size on UAppWidgetLocalPlayerWork");

// Class UIFramework.CustomMultiLineEditableText
// 0x0020 (0x0590 - 0x0570)
class UCustomMultiLineEditableText final : public UMultiLineEditableText
{
public:
	int32                                         _limitCount;                                       // 0x0568(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bFullWidthCharacter;                              // 0x056C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_56D[0x23];                                     // 0x056D(0x0023)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_ResetTextBox();
	void BP_SetLimitCount(int32 LimitCount);
	void CustomHandleOnTextChanged(const class FText& InText);
	void CustomHandleOnTextCommitted(const class FText& InText, ETextCommit CommitMethod);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomMultiLineEditableText">();
	}
	static class UCustomMultiLineEditableText* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomMultiLineEditableText>();
	}
};
static_assert(alignof(UCustomMultiLineEditableText) == 0x000010, "Wrong alignment on UCustomMultiLineEditableText");
static_assert(sizeof(UCustomMultiLineEditableText) == 0x000590, "Wrong size on UCustomMultiLineEditableText");
static_assert(offsetof(UCustomMultiLineEditableText, _limitCount) == 0x000568, "Member 'UCustomMultiLineEditableText::_limitCount' has a wrong offset!");
static_assert(offsetof(UCustomMultiLineEditableText, _bFullWidthCharacter) == 0x00056C, "Member 'UCustomMultiLineEditableText::_bFullWidthCharacter' has a wrong offset!");

// Class UIFramework.ClippingWidget
// 0x0048 (0x02C0 - 0x0278)
class UClippingWidget final : public UUserWidget
{
public:
	uint8                                         Pad_278[0x20];                                     // 0x0278(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _bDispClippingMask;                                // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_299[0x3];                                      // 0x0299(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _multAlpha;                                        // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _threshold;                                        // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     _targetMaterialInterface;                          // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URetainerBox*                           _target;                                           // 0x02B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URetainerBox*                           _clippingMask;                                     // 0x02B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetupDispClippingMask();
	void Update();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ClippingWidget">();
	}
	static class UClippingWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UClippingWidget>();
	}
};
static_assert(alignof(UClippingWidget) == 0x000008, "Wrong alignment on UClippingWidget");
static_assert(sizeof(UClippingWidget) == 0x0002C0, "Wrong size on UClippingWidget");
static_assert(offsetof(UClippingWidget, _bDispClippingMask) == 0x000298, "Member 'UClippingWidget::_bDispClippingMask' has a wrong offset!");
static_assert(offsetof(UClippingWidget, _multAlpha) == 0x00029C, "Member 'UClippingWidget::_multAlpha' has a wrong offset!");
static_assert(offsetof(UClippingWidget, _threshold) == 0x0002A0, "Member 'UClippingWidget::_threshold' has a wrong offset!");
static_assert(offsetof(UClippingWidget, _targetMaterialInterface) == 0x0002A8, "Member 'UClippingWidget::_targetMaterialInterface' has a wrong offset!");
static_assert(offsetof(UClippingWidget, _target) == 0x0002B0, "Member 'UClippingWidget::_target' has a wrong offset!");
static_assert(offsetof(UClippingWidget, _clippingMask) == 0x0002B8, "Member 'UClippingWidget::_clippingMask' has a wrong offset!");

// Class UIFramework.CustomEditableTextBox
// 0x0020 (0x0E20 - 0x0E00)
class UCustomEditableTextBox final : public UEditableTextBox
{
public:
	int32                                         _limitCount;                                       // 0x0DF8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bFullWidthCharacter;                              // 0x0DFC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_DFD[0x23];                                     // 0x0DFD(0x0023)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_ResetTextBox();
	void BP_SetLimitCount(int32 LimitCount);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomEditableTextBox">();
	}
	static class UCustomEditableTextBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomEditableTextBox>();
	}
};
static_assert(alignof(UCustomEditableTextBox) == 0x000010, "Wrong alignment on UCustomEditableTextBox");
static_assert(sizeof(UCustomEditableTextBox) == 0x000E20, "Wrong size on UCustomEditableTextBox");
static_assert(offsetof(UCustomEditableTextBox, _limitCount) == 0x000DF8, "Member 'UCustomEditableTextBox::_limitCount' has a wrong offset!");
static_assert(offsetof(UCustomEditableTextBox, _bFullWidthCharacter) == 0x000DFC, "Member 'UCustomEditableTextBox::_bFullWidthCharacter' has a wrong offset!");

// Class UIFramework.CustomScrollBox
// 0x0010 (0x0C50 - 0x0C40)
class UCustomScrollBox final : public UScrollBox
{
public:
	ESlateVisibility                              _scrollBarVisibility;                              // 0x0C38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C39[0x7];                                      // 0x0C39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USlateWidgetStyleAsset*                 _scrollBarStyleAsset;                              // 0x0C40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C48[0x8];                                      // 0x0C48(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddScrollOffset(float AddScrollOffset_0);
	void AddScrollOffsetByAnalogStick(const struct FAnalogInputEvent& InAnalogEvent, float ScrollSpeed, float DefaultSpeedRate, float MaxSpeedRate, float AddSpeedRate);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomScrollBox">();
	}
	static class UCustomScrollBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomScrollBox>();
	}
};
static_assert(alignof(UCustomScrollBox) == 0x000010, "Wrong alignment on UCustomScrollBox");
static_assert(sizeof(UCustomScrollBox) == 0x000C50, "Wrong size on UCustomScrollBox");
static_assert(offsetof(UCustomScrollBox, _scrollBarVisibility) == 0x000C38, "Member 'UCustomScrollBox::_scrollBarVisibility' has a wrong offset!");
static_assert(offsetof(UCustomScrollBox, _scrollBarStyleAsset) == 0x000C40, "Member 'UCustomScrollBox::_scrollBarStyleAsset' has a wrong offset!");

// Class UIFramework.CustomTileView
// 0x0060 (0x03E8 - 0x0388)
class UCustomTileView final : public UTileView
{
public:
	FMulticastInlineDelegateProperty_             _navigationOutSideRightLeft;                       // 0x0388(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _navigationOutSideUpDown;                          // 0x0398(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         _navigationColumCount;                             // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bNavigationWarpHorizontal;                         // 0x03AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bNavigationWarpVertical;                           // 0x03AD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3AE[0xA];                                      // 0x03AE(0x000A)(Fixing Size After Last Property [ Dumper-7 ])
	ESlateVisibility                              _scrollBarVisibility;                              // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B9[0x7];                                      // 0x03B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USlateWidgetStyleAsset*                 _scrollBarStyleAsset;                              // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                _padding;                                          // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_3D8[0x10];                                     // 0x03D8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddScrollOffset(float AddScrollOffset_0);
	class UWidget* NavigationCustom(EUINavigation NavigationType);
	class UWidget* NavigationSet(int32 Index_0);
	class UWidget* NavigationSetItem();
	void OnNavigationOutSideRightLeft__DelegateSignature(bool Right);
	void OnNavigationOutSideUpDown__DelegateSignature(bool Up);
	void SetNavigationColumnCount(int32 Val);

	int32 GetNavigationColumnCount() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomTileView">();
	}
	static class UCustomTileView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomTileView>();
	}
};
static_assert(alignof(UCustomTileView) == 0x000008, "Wrong alignment on UCustomTileView");
static_assert(sizeof(UCustomTileView) == 0x0003E8, "Wrong size on UCustomTileView");
static_assert(offsetof(UCustomTileView, _navigationOutSideRightLeft) == 0x000388, "Member 'UCustomTileView::_navigationOutSideRightLeft' has a wrong offset!");
static_assert(offsetof(UCustomTileView, _navigationOutSideUpDown) == 0x000398, "Member 'UCustomTileView::_navigationOutSideUpDown' has a wrong offset!");
static_assert(offsetof(UCustomTileView, _navigationColumCount) == 0x0003A8, "Member 'UCustomTileView::_navigationColumCount' has a wrong offset!");
static_assert(offsetof(UCustomTileView, bNavigationWarpHorizontal) == 0x0003AC, "Member 'UCustomTileView::bNavigationWarpHorizontal' has a wrong offset!");
static_assert(offsetof(UCustomTileView, bNavigationWarpVertical) == 0x0003AD, "Member 'UCustomTileView::bNavigationWarpVertical' has a wrong offset!");
static_assert(offsetof(UCustomTileView, _scrollBarVisibility) == 0x0003B8, "Member 'UCustomTileView::_scrollBarVisibility' has a wrong offset!");
static_assert(offsetof(UCustomTileView, _scrollBarStyleAsset) == 0x0003C0, "Member 'UCustomTileView::_scrollBarStyleAsset' has a wrong offset!");
static_assert(offsetof(UCustomTileView, _padding) == 0x0003C8, "Member 'UCustomTileView::_padding' has a wrong offset!");

// Class UIFramework.CustomTileViewHasWidget
// 0x0018 (0x0400 - 0x03E8)
class UCustomTileViewHasWidget : public UAppWidget
{
public:
	class UCustomTileView*                        _tileView;                                         // 0x03E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TDelegate<void(EUINavigation Navigation)>     _navigation;                                       // 0x03F0(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	class UWidget* BP_SetCustomTileViewNavigationSet(int32 Index_0);
	class UWidget* BP_SetCustomTileViewNavigationSetItem();
	class UWidget* DoCustomTileViewHasWidgetNavigation(EUINavigation UiNavigation);

	class UCustomTileView* BP_GetTileViewPtr() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomTileViewHasWidget">();
	}
	static class UCustomTileViewHasWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomTileViewHasWidget>();
	}
};
static_assert(alignof(UCustomTileViewHasWidget) == 0x000008, "Wrong alignment on UCustomTileViewHasWidget");
static_assert(sizeof(UCustomTileViewHasWidget) == 0x000400, "Wrong size on UCustomTileViewHasWidget");
static_assert(offsetof(UCustomTileViewHasWidget, _tileView) == 0x0003E8, "Member 'UCustomTileViewHasWidget::_tileView' has a wrong offset!");
static_assert(offsetof(UCustomTileViewHasWidget, _navigation) == 0x0003F0, "Member 'UCustomTileViewHasWidget::_navigation' has a wrong offset!");

// Class UIFramework.LevelLoaderWork
// 0x0000 (0x0030 - 0x0030)
class ULevelLoaderWork final : public UGameInstanceSubsystem
{
public:
	bool IsLoadedLevel(const class FString& LongPackageName);
	class ULevelStreamingDynamic* LoadStreamLevel(const class FString& LongPackageName, const struct FVector& Location, const struct FRotator& Rotation, bool bClientOnly, bool bVisible);
	class ULevelStreamingDynamic* LoadStreamLevelSoftObjectLevel(TSoftObjectPtr<class UWorld> SubLevelClass, const struct FVector& Location, const struct FRotator& Rotation, bool bClientOnly, bool bVisible);
	void SetLevelVisible(const class FString& LongPackageName, bool bVisible);
	void UnLoadStreamLevel(const class FString& LongPackageName);
	void UnLoadStreamLevelLevelStreamingDynamic(const class ULevelStreamingDynamic* LevelStreamingDynamic);
	void UnLoadStreamLevelSoftObjectLevel(TSoftObjectPtr<class UWorld> SubLevelClass);

	bool IsLevelVisible(const class FString& LongPackageName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelLoaderWork">();
	}
	static class ULevelLoaderWork* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelLoaderWork>();
	}
};
static_assert(alignof(ULevelLoaderWork) == 0x000008, "Wrong alignment on ULevelLoaderWork");
static_assert(sizeof(ULevelLoaderWork) == 0x000030, "Wrong size on ULevelLoaderWork");

// Class UIFramework.LevelStreamingClientOnly
// 0x0000 (0x0150 - 0x0150)
class ULevelStreamingClientOnly final : public ULevelStreamingDynamic
{
public:
	void SetEnableClientOnlyVisible();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelStreamingClientOnly">();
	}
	static class ULevelStreamingClientOnly* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelStreamingClientOnly>();
	}
};
static_assert(alignof(ULevelStreamingClientOnly) == 0x000010, "Wrong alignment on ULevelStreamingClientOnly");
static_assert(sizeof(ULevelStreamingClientOnly) == 0x000150, "Wrong size on ULevelStreamingClientOnly");

// Class UIFramework.ListViewEntryObjectBase
// 0x0008 (0x0030 - 0x0028)
class UListViewEntryObjectBase : public UObject
{
public:
	int32                                         _index;                                            // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetIndex(int32 Index_0);

	int32 GetIndex() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ListViewEntryObjectBase">();
	}
	static class UListViewEntryObjectBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UListViewEntryObjectBase>();
	}
};
static_assert(alignof(UListViewEntryObjectBase) == 0x000008, "Wrong alignment on UListViewEntryObjectBase");
static_assert(sizeof(UListViewEntryObjectBase) == 0x000030, "Wrong size on UListViewEntryObjectBase");
static_assert(offsetof(UListViewEntryObjectBase, _index) == 0x000028, "Member 'UListViewEntryObjectBase::_index' has a wrong offset!");

// Class UIFramework.UIPresenterBase
// 0x0008 (0x0228 - 0x0220)
class AUIPresenterBase : public AActor
{
public:
	EUIInstanceCreationStep                       _stepWhenCreateUIInstance;                         // 0x0220(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIPresenterBase">();
	}
	static class AUIPresenterBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AUIPresenterBase>();
	}
};
static_assert(alignof(AUIPresenterBase) == 0x000008, "Wrong alignment on AUIPresenterBase");
static_assert(sizeof(AUIPresenterBase) == 0x000228, "Wrong size on AUIPresenterBase");
static_assert(offsetof(AUIPresenterBase, _stepWhenCreateUIInstance) == 0x000220, "Member 'AUIPresenterBase::_stepWhenCreateUIInstance' has a wrong offset!");

// Class UIFramework.MultiWidgetCreator
// 0x00A8 (0x02D0 - 0x0228)
class AMultiWidgetCreator : public AUIPresenterBase
{
public:
	bool                                          _bWaitPlayerState;                                 // 0x0228(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_229[0x7];                                      // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FWidgetCreationData> _widgetDataToCreate;                               // 0x0230(0x0050)(Edit, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, class UWidgetBase*>         _widgetInstances;                                  // 0x0280(0x0050)(ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void DestroyPresenter();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MultiWidgetCreator">();
	}
	static class AMultiWidgetCreator* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMultiWidgetCreator>();
	}
};
static_assert(alignof(AMultiWidgetCreator) == 0x000008, "Wrong alignment on AMultiWidgetCreator");
static_assert(sizeof(AMultiWidgetCreator) == 0x0002D0, "Wrong size on AMultiWidgetCreator");
static_assert(offsetof(AMultiWidgetCreator, _bWaitPlayerState) == 0x000228, "Member 'AMultiWidgetCreator::_bWaitPlayerState' has a wrong offset!");
static_assert(offsetof(AMultiWidgetCreator, _widgetDataToCreate) == 0x000230, "Member 'AMultiWidgetCreator::_widgetDataToCreate' has a wrong offset!");
static_assert(offsetof(AMultiWidgetCreator, _widgetInstances) == 0x000280, "Member 'AMultiWidgetCreator::_widgetInstances' has a wrong offset!");

// Class UIFramework.RichTextImageDecorator
// 0x0000 (0x0038 - 0x0038)
class URichTextImageDecorator : public URichTextBlockImageDecorator
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RichTextImageDecorator">();
	}
	static class URichTextImageDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<URichTextImageDecorator>();
	}
};
static_assert(alignof(URichTextImageDecorator) == 0x000008, "Wrong alignment on URichTextImageDecorator");
static_assert(sizeof(URichTextImageDecorator) == 0x000038, "Wrong size on URichTextImageDecorator");

// Class UIFramework.RichTextImageDecoratorForPlatform
// 0x0268 (0x02A0 - 0x0038)
class alignas(0x10) URichTextImageDecoratorForPlatform : public URichTextBlockImageDecorator
{
public:
	uint8                                         Pad_38[0x1F8];                                     // 0x0038(0x01F8)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FLinearColor>        _buttonColors;                                     // 0x0240(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_290[0x10];                                     // 0x0290(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RichTextImageDecoratorForPlatform">();
	}
	static class URichTextImageDecoratorForPlatform* GetDefaultObj()
	{
		return GetDefaultObjImpl<URichTextImageDecoratorForPlatform>();
	}
};
static_assert(alignof(URichTextImageDecoratorForPlatform) == 0x000010, "Wrong alignment on URichTextImageDecoratorForPlatform");
static_assert(sizeof(URichTextImageDecoratorForPlatform) == 0x0002A0, "Wrong size on URichTextImageDecoratorForPlatform");
static_assert(offsetof(URichTextImageDecoratorForPlatform, Mid) == 0x000230, "Member 'URichTextImageDecoratorForPlatform::Mid' has a wrong offset!");
static_assert(offsetof(URichTextImageDecoratorForPlatform, _buttonColors) == 0x000240, "Member 'URichTextImageDecoratorForPlatform::_buttonColors' has a wrong offset!");

// Class UIFramework.UIFrameworkSettings
// 0x0368 (0x0390 - 0x0028)
class UUIFrameworkSettings final : public UObject
{
public:
	TSoftObjectPtr<class UDataTable>              _richImageCommon;                                  // 0x0028(0x0028)(Edit, Config, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              _richImagePlayStation;                             // 0x0050(0x0028)(Edit, Config, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              _richImageXbox;                                    // 0x0078(0x0028)(Edit, Config, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              _richImageWindowsGamepad;                          // 0x00A0(0x0028)(Edit, Config, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              _richImageWindowsKeyboard;                         // 0x00C8(0x0028)(Edit, Config, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              _richImageSwitch;                                  // 0x00F0(0x0028)(Edit, Config, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              _richImageMobile;                                  // 0x0118(0x0028)(Edit, Config, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      _withRimMaterial;                                  // 0x0140(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      _withoutRimMaterial;                               // 0x0168(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   _transitionWidget;                                 // 0x0190(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _loadShoetestTime;                                 // 0x01B8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC[0x4];                                      // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FLinearColor>        _playstationButtonGuideColors;                     // 0x01C0(0x0050)(Edit, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLinearColor>        _xboxButtonGuideColors;                            // 0x0210(0x0050)(Edit, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLinearColor>        _switchButtonGuideColors;                          // 0x0260(0x0050)(Edit, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLinearColor>        _windowsButtonGuideColors;                         // 0x02B0(0x0050)(Edit, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FLinearColor                           _defaultColor;                                     // 0x0300(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bTabNavigation;                                   // 0x0310(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_311[0x3];                                      // 0x0311(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _stickThreshold;                                   // 0x0314(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _mouseDeltaThreshold;                              // 0x0318(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bDisableEditorMouse;                              // 0x031C(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31D[0x3];                                      // 0x031D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, TSoftObjectPtr<class UWorld>> _uiSubLevels;                                      // 0x0320(0x0050)(Edit, Config, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  _debugUnLoadUISubLevel;                            // 0x0370(0x0020)(Edit, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIFrameworkSettings">();
	}
	static class UUIFrameworkSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIFrameworkSettings>();
	}
};
static_assert(alignof(UUIFrameworkSettings) == 0x000008, "Wrong alignment on UUIFrameworkSettings");
static_assert(sizeof(UUIFrameworkSettings) == 0x000390, "Wrong size on UUIFrameworkSettings");
static_assert(offsetof(UUIFrameworkSettings, _richImageCommon) == 0x000028, "Member 'UUIFrameworkSettings::_richImageCommon' has a wrong offset!");
static_assert(offsetof(UUIFrameworkSettings, _richImagePlayStation) == 0x000050, "Member 'UUIFrameworkSettings::_richImagePlayStation' has a wrong offset!");
static_assert(offsetof(UUIFrameworkSettings, _richImageXbox) == 0x000078, "Member 'UUIFrameworkSettings::_richImageXbox' has a wrong offset!");
static_assert(offsetof(UUIFrameworkSettings, _richImageWindowsGamepad) == 0x0000A0, "Member 'UUIFrameworkSettings::_richImageWindowsGamepad' has a wrong offset!");
static_assert(offsetof(UUIFrameworkSettings, _richImageWindowsKeyboard) == 0x0000C8, "Member 'UUIFrameworkSettings::_richImageWindowsKeyboard' has a wrong offset!");
static_assert(offsetof(UUIFrameworkSettings, _richImageSwitch) == 0x0000F0, "Member 'UUIFrameworkSettings::_richImageSwitch' has a wrong offset!");
static_assert(offsetof(UUIFrameworkSettings, _richImageMobile) == 0x000118, "Member 'UUIFrameworkSettings::_richImageMobile' has a wrong offset!");
static_assert(offsetof(UUIFrameworkSettings, _withRimMaterial) == 0x000140, "Member 'UUIFrameworkSettings::_withRimMaterial' has a wrong offset!");
static_assert(offsetof(UUIFrameworkSettings, _withoutRimMaterial) == 0x000168, "Member 'UUIFrameworkSettings::_withoutRimMaterial' has a wrong offset!");
static_assert(offsetof(UUIFrameworkSettings, _transitionWidget) == 0x000190, "Member 'UUIFrameworkSettings::_transitionWidget' has a wrong offset!");
static_assert(offsetof(UUIFrameworkSettings, _loadShoetestTime) == 0x0001B8, "Member 'UUIFrameworkSettings::_loadShoetestTime' has a wrong offset!");
static_assert(offsetof(UUIFrameworkSettings, _playstationButtonGuideColors) == 0x0001C0, "Member 'UUIFrameworkSettings::_playstationButtonGuideColors' has a wrong offset!");
static_assert(offsetof(UUIFrameworkSettings, _xboxButtonGuideColors) == 0x000210, "Member 'UUIFrameworkSettings::_xboxButtonGuideColors' has a wrong offset!");
static_assert(offsetof(UUIFrameworkSettings, _switchButtonGuideColors) == 0x000260, "Member 'UUIFrameworkSettings::_switchButtonGuideColors' has a wrong offset!");
static_assert(offsetof(UUIFrameworkSettings, _windowsButtonGuideColors) == 0x0002B0, "Member 'UUIFrameworkSettings::_windowsButtonGuideColors' has a wrong offset!");
static_assert(offsetof(UUIFrameworkSettings, _defaultColor) == 0x000300, "Member 'UUIFrameworkSettings::_defaultColor' has a wrong offset!");
static_assert(offsetof(UUIFrameworkSettings, _bTabNavigation) == 0x000310, "Member 'UUIFrameworkSettings::_bTabNavigation' has a wrong offset!");
static_assert(offsetof(UUIFrameworkSettings, _stickThreshold) == 0x000314, "Member 'UUIFrameworkSettings::_stickThreshold' has a wrong offset!");
static_assert(offsetof(UUIFrameworkSettings, _mouseDeltaThreshold) == 0x000318, "Member 'UUIFrameworkSettings::_mouseDeltaThreshold' has a wrong offset!");
static_assert(offsetof(UUIFrameworkSettings, _bDisableEditorMouse) == 0x00031C, "Member 'UUIFrameworkSettings::_bDisableEditorMouse' has a wrong offset!");
static_assert(offsetof(UUIFrameworkSettings, _uiSubLevels) == 0x000320, "Member 'UUIFrameworkSettings::_uiSubLevels' has a wrong offset!");
static_assert(offsetof(UUIFrameworkSettings, _debugUnLoadUISubLevel) == 0x000370, "Member 'UUIFrameworkSettings::_debugUnLoadUISubLevel' has a wrong offset!");

// Class UIFramework.UIFrameworkViewInterface
// 0x0000 (0x0028 - 0x0028)
class IUIFrameworkViewInterface final : public IInterface
{
public:
	void DispatchMessage(const class FName& EventName);
	void DispatchMessage_OneUObject(const class FName& EventName, const class UObject* Param);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIFrameworkViewInterface">();
	}
	static class IUIFrameworkViewInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IUIFrameworkViewInterface>();
	}
};
static_assert(alignof(IUIFrameworkViewInterface) == 0x000008, "Wrong alignment on IUIFrameworkViewInterface");
static_assert(sizeof(IUIFrameworkViewInterface) == 0x000028, "Wrong size on IUIFrameworkViewInterface");

// Class UIFramework.UISubsystem
// 0x0060 (0x0090 - 0x0030)
class UUISubsystem final : public UWorldSubsystem
{
public:
	TArray<class AUIPresenterBase*>               _widgetCreators;                                   // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<EMapDrawType, TScriptInterface<class IInterface>> _mapDrawableInterface;                             // 0x0040(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static void DispatchMessage(const class FName& EventName, const class UObject* Param);
	static const TSoftObjectPtr<class UWorld> GetUISubLevel(const struct FGameplayTag& Tag);
	static void LoadUISubLevel(const struct FGameplayTag& SubLevelTag, bool bDebugUnLoadUISubLevel, bool bForceReload, bool bVisible);
	static class ULevelStreamingDynamic* LoadUISubLevel_Ret_LevelStreamingDynamic(const struct FGameplayTag& SubLevelTag, bool bForceReload);
	static void SetVisibleUISubLevel(const struct FGameplayTag& SubLevelTag, bool bVisible);
	static void UnLoadUISubLevel(const struct FGameplayTag& SubLevelTag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UISubsystem">();
	}
	static class UUISubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUISubsystem>();
	}
};
static_assert(alignof(UUISubsystem) == 0x000008, "Wrong alignment on UUISubsystem");
static_assert(sizeof(UUISubsystem) == 0x000090, "Wrong size on UUISubsystem");
static_assert(offsetof(UUISubsystem, _widgetCreators) == 0x000030, "Member 'UUISubsystem::_widgetCreators' has a wrong offset!");
static_assert(offsetof(UUISubsystem, _mapDrawableInterface) == 0x000040, "Member 'UUISubsystem::_mapDrawableInterface' has a wrong offset!");

// Class UIFramework.WidgetBackground
// 0x0020 (0x0370 - 0x0350)
class UWidgetBackground final : public UWidgetBase
{
public:
	class UBackgroundBlur*                        _backgroundBlur;                                   // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCanvasPanel*                           _windowCanvasPanel;                                // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bBlur;                                            // 0x0360(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_361[0x3];                                      // 0x0361(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              _windowSize;                                       // 0x0364(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bAutoOpen;                                        // 0x036C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bPlayOpenSound;                                   // 0x036D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bPlayCloseSound;                                  // 0x036E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bPlayCancelSound;                                 // 0x036F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BP_ChangeBackgroundBlurVisibility(bool InVisible);
	void BP_Open();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetBackground">();
	}
	static class UWidgetBackground* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetBackground>();
	}
};
static_assert(alignof(UWidgetBackground) == 0x000008, "Wrong alignment on UWidgetBackground");
static_assert(sizeof(UWidgetBackground) == 0x000370, "Wrong size on UWidgetBackground");
static_assert(offsetof(UWidgetBackground, _backgroundBlur) == 0x000350, "Member 'UWidgetBackground::_backgroundBlur' has a wrong offset!");
static_assert(offsetof(UWidgetBackground, _windowCanvasPanel) == 0x000358, "Member 'UWidgetBackground::_windowCanvasPanel' has a wrong offset!");
static_assert(offsetof(UWidgetBackground, _bBlur) == 0x000360, "Member 'UWidgetBackground::_bBlur' has a wrong offset!");
static_assert(offsetof(UWidgetBackground, _windowSize) == 0x000364, "Member 'UWidgetBackground::_windowSize' has a wrong offset!");
static_assert(offsetof(UWidgetBackground, _bAutoOpen) == 0x00036C, "Member 'UWidgetBackground::_bAutoOpen' has a wrong offset!");
static_assert(offsetof(UWidgetBackground, _bPlayOpenSound) == 0x00036D, "Member 'UWidgetBackground::_bPlayOpenSound' has a wrong offset!");
static_assert(offsetof(UWidgetBackground, _bPlayCloseSound) == 0x00036E, "Member 'UWidgetBackground::_bPlayCloseSound' has a wrong offset!");
static_assert(offsetof(UWidgetBackground, _bPlayCancelSound) == 0x00036F, "Member 'UWidgetBackground::_bPlayCancelSound' has a wrong offset!");

// Class UIFramework.WidgetButton
// 0x00A0 (0x0488 - 0x03E8)
class UWidgetButton : public UAppWidget
{
public:
	FMulticastInlineDelegateProperty_             OnDecideDelegate;                                  // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnLongDecideDelegate;                              // 0x03F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         _mouseCaptureDistance;                             // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_40C[0x4];                                      // 0x040C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EInputKey>                             _shortcutKeys;                                     // 0x0410(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          _bPlayAnimationByShortcut;                         // 0x0420(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_421[0x1];                                      // 0x0421(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _bIsBlockInputOnPressing;                          // 0x0422(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_423[0x1];                                      // 0x0423(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _bUseText;                                         // 0x0424(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_425[0x3];                                      // 0x0425(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeneralButtonText                     _buttonText;                                       // 0x0428(0x0058)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_480[0x1];                                      // 0x0480(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _bIsPlayableAnimation;                             // 0x0481(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bIsCoercionFocus;                                 // 0x0482(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_483[0x5];                                      // 0x0483(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PressThisButton(EWidgetInputType InputType);
	void ResetShortcutKey();
	void SetOnlyPlayShortcutAtomCue(bool Flag);
	void StopDefaultAnimation(const bool bAllChildren);
	void StopFocusAnimation(const bool bAllChildren);
	void StopIdleAnimation(const bool bAllChildren);
	void StopNegativeAnimation(const bool bAllChildren);
	void StopPressAnimation(const bool bAllChildren);
	void StopReleaseAnimation(const bool bAllChildren);
	void UpdateButtonText();
	void UpdateShortcutKey();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetButton">();
	}
	static class UWidgetButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetButton>();
	}
};
static_assert(alignof(UWidgetButton) == 0x000008, "Wrong alignment on UWidgetButton");
static_assert(sizeof(UWidgetButton) == 0x000488, "Wrong size on UWidgetButton");
static_assert(offsetof(UWidgetButton, OnDecideDelegate) == 0x0003E8, "Member 'UWidgetButton::OnDecideDelegate' has a wrong offset!");
static_assert(offsetof(UWidgetButton, OnLongDecideDelegate) == 0x0003F8, "Member 'UWidgetButton::OnLongDecideDelegate' has a wrong offset!");
static_assert(offsetof(UWidgetButton, _mouseCaptureDistance) == 0x000408, "Member 'UWidgetButton::_mouseCaptureDistance' has a wrong offset!");
static_assert(offsetof(UWidgetButton, _shortcutKeys) == 0x000410, "Member 'UWidgetButton::_shortcutKeys' has a wrong offset!");
static_assert(offsetof(UWidgetButton, _bPlayAnimationByShortcut) == 0x000420, "Member 'UWidgetButton::_bPlayAnimationByShortcut' has a wrong offset!");
static_assert(offsetof(UWidgetButton, _bIsBlockInputOnPressing) == 0x000422, "Member 'UWidgetButton::_bIsBlockInputOnPressing' has a wrong offset!");
static_assert(offsetof(UWidgetButton, _bUseText) == 0x000424, "Member 'UWidgetButton::_bUseText' has a wrong offset!");
static_assert(offsetof(UWidgetButton, _buttonText) == 0x000428, "Member 'UWidgetButton::_buttonText' has a wrong offset!");
static_assert(offsetof(UWidgetButton, _bIsPlayableAnimation) == 0x000481, "Member 'UWidgetButton::_bIsPlayableAnimation' has a wrong offset!");
static_assert(offsetof(UWidgetButton, _bIsCoercionFocus) == 0x000482, "Member 'UWidgetButton::_bIsCoercionFocus' has a wrong offset!");

// Class UIFramework.WidgetButtonDetails
// 0x0028 (0x04B0 - 0x0488)
class UWidgetButtonDetails : public UWidgetButton
{
public:
	uint8                                         Pad_488[0x28];                                     // 0x0488(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnDecided(class UAppWidget* Widget, EWidgetInputType InputType);
	void OnInputKeysEventDelegate__DelegateSignature(class UAppWidget* Widget, const struct FKey& Key, const EWidgetInputType InputType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetButtonDetails">();
	}
	static class UWidgetButtonDetails* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetButtonDetails>();
	}
};
static_assert(alignof(UWidgetButtonDetails) == 0x000008, "Wrong alignment on UWidgetButtonDetails");
static_assert(sizeof(UWidgetButtonDetails) == 0x0004B0, "Wrong size on UWidgetButtonDetails");

// Class UIFramework.WidgetCreator
// 0x0020 (0x0248 - 0x0228)
class AWidgetCreator : public AUIPresenterBase
{
public:
	TSubclassOf<class UWidgetBase>                _widgetClass;                                      // 0x0228(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EAppWidgetPriority                            _priority;                                         // 0x0230(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_231[0x3];                                      // 0x0231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _subPriority;                                      // 0x0234(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bWaitPlayerState;                                 // 0x0238(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bHiddenStart;                                     // 0x0239(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bBlockLowPriorityInput;                           // 0x023A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_23B[0x1];                                      // 0x023B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _totalPriority;                                    // 0x023C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetBase*                            _instance;                                         // 0x0240(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BP_SetWidgetClass(TSubclassOf<class UWidgetBase> WidgetClass);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetCreator">();
	}
	static class AWidgetCreator* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWidgetCreator>();
	}
};
static_assert(alignof(AWidgetCreator) == 0x000008, "Wrong alignment on AWidgetCreator");
static_assert(sizeof(AWidgetCreator) == 0x000248, "Wrong size on AWidgetCreator");
static_assert(offsetof(AWidgetCreator, _widgetClass) == 0x000228, "Member 'AWidgetCreator::_widgetClass' has a wrong offset!");
static_assert(offsetof(AWidgetCreator, _priority) == 0x000230, "Member 'AWidgetCreator::_priority' has a wrong offset!");
static_assert(offsetof(AWidgetCreator, _subPriority) == 0x000234, "Member 'AWidgetCreator::_subPriority' has a wrong offset!");
static_assert(offsetof(AWidgetCreator, _bWaitPlayerState) == 0x000238, "Member 'AWidgetCreator::_bWaitPlayerState' has a wrong offset!");
static_assert(offsetof(AWidgetCreator, _bHiddenStart) == 0x000239, "Member 'AWidgetCreator::_bHiddenStart' has a wrong offset!");
static_assert(offsetof(AWidgetCreator, _bBlockLowPriorityInput) == 0x00023A, "Member 'AWidgetCreator::_bBlockLowPriorityInput' has a wrong offset!");
static_assert(offsetof(AWidgetCreator, _totalPriority) == 0x00023C, "Member 'AWidgetCreator::_totalPriority' has a wrong offset!");
static_assert(offsetof(AWidgetCreator, _instance) == 0x000240, "Member 'AWidgetCreator::_instance' has a wrong offset!");

// Class UIFramework.WidgetCreatorCache
// 0x0080 (0x02A0 - 0x0220)
class AWidgetCreatorCache final : public AActor
{
public:
	TArray<TSubclassOf<class UWidgetBase>>        _widgetClasses;                                    // 0x0220(0x0010)(Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	EAppWidgetPriority                            _priority;                                         // 0x0230(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_231[0x3];                                      // 0x0231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _subPriority;                                      // 0x0234(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bWaitPlayerState;                                 // 0x0238(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_239[0x3];                                      // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _priorityTotal;                                    // 0x023C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FString, class UWidgetBase*>       _instanceMap;                                      // 0x0240(0x0050)(ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_290[0x10];                                     // 0x0290(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetCreatorCache">();
	}
	static class AWidgetCreatorCache* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWidgetCreatorCache>();
	}
};
static_assert(alignof(AWidgetCreatorCache) == 0x000008, "Wrong alignment on AWidgetCreatorCache");
static_assert(sizeof(AWidgetCreatorCache) == 0x0002A0, "Wrong size on AWidgetCreatorCache");
static_assert(offsetof(AWidgetCreatorCache, _widgetClasses) == 0x000220, "Member 'AWidgetCreatorCache::_widgetClasses' has a wrong offset!");
static_assert(offsetof(AWidgetCreatorCache, _priority) == 0x000230, "Member 'AWidgetCreatorCache::_priority' has a wrong offset!");
static_assert(offsetof(AWidgetCreatorCache, _subPriority) == 0x000234, "Member 'AWidgetCreatorCache::_subPriority' has a wrong offset!");
static_assert(offsetof(AWidgetCreatorCache, _bWaitPlayerState) == 0x000238, "Member 'AWidgetCreatorCache::_bWaitPlayerState' has a wrong offset!");
static_assert(offsetof(AWidgetCreatorCache, _priorityTotal) == 0x00023C, "Member 'AWidgetCreatorCache::_priorityTotal' has a wrong offset!");
static_assert(offsetof(AWidgetCreatorCache, _instanceMap) == 0x000240, "Member 'AWidgetCreatorCache::_instanceMap' has a wrong offset!");

// Class UIFramework.WidgetDrawPrimitive
// 0x00C0 (0x01C8 - 0x0108)
class UWidgetDrawPrimitive : public UWidget
{
public:
	bool                                          _bUseCustomDesiredSlateSize;                       // 0x0108(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              _customDesiredSlateSize;                           // 0x010C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0xB4];                                     // 0x0114(0x00B4)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetDrawPrimitive">();
	}
	static class UWidgetDrawPrimitive* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetDrawPrimitive>();
	}
};
static_assert(alignof(UWidgetDrawPrimitive) == 0x000008, "Wrong alignment on UWidgetDrawPrimitive");
static_assert(sizeof(UWidgetDrawPrimitive) == 0x0001C8, "Wrong size on UWidgetDrawPrimitive");
static_assert(offsetof(UWidgetDrawPrimitive, _bUseCustomDesiredSlateSize) == 0x000108, "Member 'UWidgetDrawPrimitive::_bUseCustomDesiredSlateSize' has a wrong offset!");
static_assert(offsetof(UWidgetDrawPrimitive, _customDesiredSlateSize) == 0x00010C, "Member 'UWidgetDrawPrimitive::_customDesiredSlateSize' has a wrong offset!");

// Class UIFramework.WidgetGeneralWindowBase
// 0x0070 (0x0458 - 0x03E8)
class UWidgetGeneralWindowBase : public UAppWidget
{
public:
	class UTextBlock*                             _headerTextWidget;                                 // 0x03E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             _text;                                             // 0x03F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URichTextBlock*                         _richText;                                         // 0x03F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              _windowSize;                                       // 0x0400(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bAutoOpen;                                        // 0x0408(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_409[0x7];                                      // 0x0409(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   _headerText;                                       // 0x0410(0x0018)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FGeneralWindowText                     _baseText;                                         // 0x0428(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	bool                                          _bIsBlockInputOnPressing;                          // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bBlockLowPriorityInputWhileOpen;                  // 0x0451(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_452[0x6];                                      // 0x0452(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Close();
	void OnClose();
	void OnOpen();
	void OnWindowEventDelegate__DelegateSignature();
	void OnWindowInputEventDelegate__DelegateSignature(class UAppWidget* Widget, EWidgetInputType InputType, bool LeftButton);
	void Open();
	void SetText(const class FText& InText);
	void SetupHeaderText(const class FText& InText);
	void SetWindowSize(const struct FVector2D& WindowSize);

	struct FVector2D GetWindowSize() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetGeneralWindowBase">();
	}
	static class UWidgetGeneralWindowBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetGeneralWindowBase>();
	}
};
static_assert(alignof(UWidgetGeneralWindowBase) == 0x000008, "Wrong alignment on UWidgetGeneralWindowBase");
static_assert(sizeof(UWidgetGeneralWindowBase) == 0x000458, "Wrong size on UWidgetGeneralWindowBase");
static_assert(offsetof(UWidgetGeneralWindowBase, _headerTextWidget) == 0x0003E8, "Member 'UWidgetGeneralWindowBase::_headerTextWidget' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindowBase, _text) == 0x0003F0, "Member 'UWidgetGeneralWindowBase::_text' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindowBase, _richText) == 0x0003F8, "Member 'UWidgetGeneralWindowBase::_richText' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindowBase, _windowSize) == 0x000400, "Member 'UWidgetGeneralWindowBase::_windowSize' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindowBase, _bAutoOpen) == 0x000408, "Member 'UWidgetGeneralWindowBase::_bAutoOpen' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindowBase, _headerText) == 0x000410, "Member 'UWidgetGeneralWindowBase::_headerText' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindowBase, _baseText) == 0x000428, "Member 'UWidgetGeneralWindowBase::_baseText' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindowBase, _bIsBlockInputOnPressing) == 0x000450, "Member 'UWidgetGeneralWindowBase::_bIsBlockInputOnPressing' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindowBase, _bBlockLowPriorityInputWhileOpen) == 0x000451, "Member 'UWidgetGeneralWindowBase::_bBlockLowPriorityInputWhileOpen' has a wrong offset!");

// Class UIFramework.WidgetGeneralEmptyWindow
// 0x0088 (0x04E0 - 0x0458)
class UWidgetGeneralEmptyWindow : public UWidgetGeneralWindowBase
{
public:
	class UBackgroundBlur*                        _backgroundBlur;                                   // 0x0458(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 _disableInput;                                     // 0x0460(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCanvasPanel*                           _windowCanvasPanel;                                // 0x0468(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 _backImage;                                        // 0x0470(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bBlur;                                            // 0x0478(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_479[0x3];                                      // 0x0479(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           _disableInputColorAndOpacity;                      // 0x047C(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bOutsideButtonDown;                               // 0x048C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48D[0x3];                                      // 0x048D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              _offsetWindow;                                     // 0x0490(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bPlayOpenSound;                                   // 0x0498(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bPlayCloseSound;                                  // 0x0499(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bPlayCancelSound;                                 // 0x049A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_49B[0x5];                                      // 0x049B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnOutsideButtonDownEvent;                          // 0x04A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnOpenedDelegate;                                  // 0x04B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnClosedDelegate;                                  // 0x04C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCloseStartDelegate;                              // 0x04D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void BP_ChangeBackgroundBlurVisibility(bool InVisible);
	struct FEventReply OnMouseButtonDownCloseWindow(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnOutsideButtonDownEventDelegate__DelegateSignature();
	void OnPlayCancelSound();
	void OnWindowEventDelegate__DelegateSignature();
	void PlayCancelSound();
	void SetPlayCancelSound(bool bEnable);
	void SetPlayCloseSound(bool bEnable);
	void SetPlayOpenSound(bool bEnable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetGeneralEmptyWindow">();
	}
	static class UWidgetGeneralEmptyWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetGeneralEmptyWindow>();
	}
};
static_assert(alignof(UWidgetGeneralEmptyWindow) == 0x000008, "Wrong alignment on UWidgetGeneralEmptyWindow");
static_assert(sizeof(UWidgetGeneralEmptyWindow) == 0x0004E0, "Wrong size on UWidgetGeneralEmptyWindow");
static_assert(offsetof(UWidgetGeneralEmptyWindow, _backgroundBlur) == 0x000458, "Member 'UWidgetGeneralEmptyWindow::_backgroundBlur' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralEmptyWindow, _disableInput) == 0x000460, "Member 'UWidgetGeneralEmptyWindow::_disableInput' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralEmptyWindow, _windowCanvasPanel) == 0x000468, "Member 'UWidgetGeneralEmptyWindow::_windowCanvasPanel' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralEmptyWindow, _backImage) == 0x000470, "Member 'UWidgetGeneralEmptyWindow::_backImage' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralEmptyWindow, _bBlur) == 0x000478, "Member 'UWidgetGeneralEmptyWindow::_bBlur' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralEmptyWindow, _disableInputColorAndOpacity) == 0x00047C, "Member 'UWidgetGeneralEmptyWindow::_disableInputColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralEmptyWindow, _bOutsideButtonDown) == 0x00048C, "Member 'UWidgetGeneralEmptyWindow::_bOutsideButtonDown' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralEmptyWindow, _offsetWindow) == 0x000490, "Member 'UWidgetGeneralEmptyWindow::_offsetWindow' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralEmptyWindow, _bPlayOpenSound) == 0x000498, "Member 'UWidgetGeneralEmptyWindow::_bPlayOpenSound' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralEmptyWindow, _bPlayCloseSound) == 0x000499, "Member 'UWidgetGeneralEmptyWindow::_bPlayCloseSound' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralEmptyWindow, _bPlayCancelSound) == 0x00049A, "Member 'UWidgetGeneralEmptyWindow::_bPlayCancelSound' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralEmptyWindow, OnOutsideButtonDownEvent) == 0x0004A0, "Member 'UWidgetGeneralEmptyWindow::OnOutsideButtonDownEvent' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralEmptyWindow, OnOpenedDelegate) == 0x0004B0, "Member 'UWidgetGeneralEmptyWindow::OnOpenedDelegate' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralEmptyWindow, OnClosedDelegate) == 0x0004C0, "Member 'UWidgetGeneralEmptyWindow::OnClosedDelegate' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralEmptyWindow, OnCloseStartDelegate) == 0x0004D0, "Member 'UWidgetGeneralEmptyWindow::OnCloseStartDelegate' has a wrong offset!");

// Class UIFramework.WidgetGeneralSelectiveWindow
// 0x00E8 (0x0540 - 0x0458)
class UWidgetGeneralSelectiveWindow final : public UWidgetGeneralWindowBase
{
public:
	FMulticastInlineDelegateProperty_             OnPressWindowDelegate;                             // 0x0458(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnDecideWindowDelegate;                            // 0x0468(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnOpenedDelegate;                                  // 0x0478(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnClosedDelegate;                                  // 0x0488(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UListView*                              _textListView;                                     // 0x0498(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           _listText;                                         // 0x04A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         _startSelectedIndex;                               // 0x04B0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _selectedIndexOffset;                              // 0x04B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetGeneralEmptyWindow*              _emptyWindow;                                      // 0x04B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetButton*                          _leftOfTwoButtons;                                 // 0x04C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetButton*                          _rightOfTwoButtons;                                // 0x04C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBackgroundBlur*                        _backgroundBlur;                                   // 0x04D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGeneralWindowText                     _leftButtonText;                                   // 0x04D8(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FGeneralWindowText                     _rightButtonText;                                  // 0x0500(0x0028)(Edit, NativeAccessSpecifierPrivate)
	bool                                          _bUserdBlur;                                       // 0x0528(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_529[0x17];                                     // 0x0529(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetSelectedIndex();
	void OnDecideButton(class UAppWidget* Widget, EWidgetInputType InputType);
	void OnMouseEnterButton(class UAppWidget* Widget, EWidgetInputType InputType);
	void OnMouseLeaveButton(class UAppWidget* Widget, EWidgetInputType InputType);
	void OnPressButton(class UAppWidget* Widget, EWidgetInputType InputType);
	void OnWindowEventDelegate__DelegateSignature();
	void OnWindowInputEventDelegate__DelegateSignature(int32 Selectindex, class UAppWidget* Widget, EWidgetInputType InputType, bool LeftButton);
	void ReceivedClosedDelegate();
	void ReceivedOpenedDelegate();
	void SetSelectedIndex(int32 Index_0);
	void SetupList();

	TArray<class FText> GetListText() const;
	class UWidgetButton* GetTwoButtons(bool InLeft) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetGeneralSelectiveWindow">();
	}
	static class UWidgetGeneralSelectiveWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetGeneralSelectiveWindow>();
	}
};
static_assert(alignof(UWidgetGeneralSelectiveWindow) == 0x000008, "Wrong alignment on UWidgetGeneralSelectiveWindow");
static_assert(sizeof(UWidgetGeneralSelectiveWindow) == 0x000540, "Wrong size on UWidgetGeneralSelectiveWindow");
static_assert(offsetof(UWidgetGeneralSelectiveWindow, OnPressWindowDelegate) == 0x000458, "Member 'UWidgetGeneralSelectiveWindow::OnPressWindowDelegate' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralSelectiveWindow, OnDecideWindowDelegate) == 0x000468, "Member 'UWidgetGeneralSelectiveWindow::OnDecideWindowDelegate' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralSelectiveWindow, OnOpenedDelegate) == 0x000478, "Member 'UWidgetGeneralSelectiveWindow::OnOpenedDelegate' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralSelectiveWindow, OnClosedDelegate) == 0x000488, "Member 'UWidgetGeneralSelectiveWindow::OnClosedDelegate' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralSelectiveWindow, _textListView) == 0x000498, "Member 'UWidgetGeneralSelectiveWindow::_textListView' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralSelectiveWindow, _listText) == 0x0004A0, "Member 'UWidgetGeneralSelectiveWindow::_listText' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralSelectiveWindow, _startSelectedIndex) == 0x0004B0, "Member 'UWidgetGeneralSelectiveWindow::_startSelectedIndex' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralSelectiveWindow, _selectedIndexOffset) == 0x0004B4, "Member 'UWidgetGeneralSelectiveWindow::_selectedIndexOffset' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralSelectiveWindow, _emptyWindow) == 0x0004B8, "Member 'UWidgetGeneralSelectiveWindow::_emptyWindow' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralSelectiveWindow, _leftOfTwoButtons) == 0x0004C0, "Member 'UWidgetGeneralSelectiveWindow::_leftOfTwoButtons' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralSelectiveWindow, _rightOfTwoButtons) == 0x0004C8, "Member 'UWidgetGeneralSelectiveWindow::_rightOfTwoButtons' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralSelectiveWindow, _backgroundBlur) == 0x0004D0, "Member 'UWidgetGeneralSelectiveWindow::_backgroundBlur' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralSelectiveWindow, _leftButtonText) == 0x0004D8, "Member 'UWidgetGeneralSelectiveWindow::_leftButtonText' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralSelectiveWindow, _rightButtonText) == 0x000500, "Member 'UWidgetGeneralSelectiveWindow::_rightButtonText' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralSelectiveWindow, _bUserdBlur) == 0x000528, "Member 'UWidgetGeneralSelectiveWindow::_bUserdBlur' has a wrong offset!");

// Class UIFramework.WidgetGeneralTimerDigit
// 0x0018 (0x0400 - 0x03E8)
class UWidgetGeneralTimerDigit final : public UAppWidget
{
public:
	class UImage*                                 Current;                                           // 0x03E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 Past;                                              // 0x03F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3F8[0x8];                                      // 0x03F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetGeneralTimerDigit">();
	}
	static class UWidgetGeneralTimerDigit* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetGeneralTimerDigit>();
	}
};
static_assert(alignof(UWidgetGeneralTimerDigit) == 0x000008, "Wrong alignment on UWidgetGeneralTimerDigit");
static_assert(sizeof(UWidgetGeneralTimerDigit) == 0x000400, "Wrong size on UWidgetGeneralTimerDigit");
static_assert(offsetof(UWidgetGeneralTimerDigit, Current) == 0x0003E8, "Member 'UWidgetGeneralTimerDigit::Current' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralTimerDigit, Past) == 0x0003F0, "Member 'UWidgetGeneralTimerDigit::Past' has a wrong offset!");

// Class UIFramework.WidgetGeneralTimer
// 0x0038 (0x0420 - 0x03E8)
class UWidgetGeneralTimer final : public UAppWidget
{
public:
	class UWidgetGeneralTimerDigit*               D10;                                               // 0x03E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetGeneralTimerDigit*               D01;                                               // 0x03F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3F8[0x28];                                     // 0x03F8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetGeneralTimer">();
	}
	static class UWidgetGeneralTimer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetGeneralTimer>();
	}
};
static_assert(alignof(UWidgetGeneralTimer) == 0x000008, "Wrong alignment on UWidgetGeneralTimer");
static_assert(sizeof(UWidgetGeneralTimer) == 0x000420, "Wrong size on UWidgetGeneralTimer");
static_assert(offsetof(UWidgetGeneralTimer, D10) == 0x0003E8, "Member 'UWidgetGeneralTimer::D10' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralTimer, D01) == 0x0003F0, "Member 'UWidgetGeneralTimer::D01' has a wrong offset!");

// Class UIFramework.WidgetGeneralWindow
// 0x0140 (0x0598 - 0x0458)
class UWidgetGeneralWindow : public UWidgetGeneralWindowBase
{
public:
	FMulticastInlineDelegateProperty_             OnPressWindowDelegate;                             // 0x0458(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnDecideWindowDelegate;                            // 0x0468(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnOpenedDelegate;                                  // 0x0478(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnClosedDelegate;                                  // 0x0488(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnClickedBlockBGDelegate;                          // 0x0498(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class USpacer*                                _widthSizeSpacer;                                  // 0x04A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetSwitcher*                        _buttonSwitcher;                                   // 0x04B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetButton*                          _oneButton;                                        // 0x04B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetButton*                          _leftOfTwoButtons;                                 // 0x04C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetButton*                          _rightOfTwoButtons;                                // 0x04C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetWindowFrame*                     _windowFrame;                                      // 0x04D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USpacer*                                _topSpacer;                                        // 0x04D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FGeneralWindowText>             _defaultButtonTexts;                               // 0x04E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FGeneralWindowBaseText>         _buttonTextArray;                                  // 0x04F0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	EGeneralWindowSelectType                      ButtonSelectType;                                  // 0x0500(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bUserdBlur;                                       // 0x0501(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_502[0x2];                                      // 0x0502(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _textSideSpace;                                    // 0x0504(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBackgroundBlur*                        _backgroundBlur;                                   // 0x0508(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTexture2D*                             _setImageResource;                                 // 0x0510(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _imageSpaceTop;                                    // 0x0518(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _imageSpaceBottom;                                 // 0x051C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UHorizontalBox*                         _imageHorizontal;                                  // 0x0520(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USpacer*                                _imageSpacer;                                      // 0x0528(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 _windowImage;                                      // 0x0530(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UOverlay*                               _subTextOverlay;                                   // 0x0538(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URichTextBlock*                         _richSubText;                                      // 0x0540(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bUseSubText;                                      // 0x0548(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_549[0x7];                                      // 0x0549(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeneralWindowText                     _subText;                                          // 0x0550(0x0028)(Edit, NativeAccessSpecifierPrivate)
	bool                                          _bShowWindowBg;                                    // 0x0578(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_579[0x17];                                     // 0x0579(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	EGeneralWindowButtonFocus                     _generalWindowButtonFocus;                         // 0x0590(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_591[0x7];                                      // 0x0591(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_FocusButton(bool bLeft);
	void BP_SetButtonEnable(bool bEnable);
	void BP_SetLeftButtonEnable(bool bEnable);
	void BP_SetRightButtonEnable(bool bEnable);
	void BP_SetupBackgroundBlur(bool bUserBlur);
	void BP_SetupButton(const struct FGeneralWindowText& Text);
	void BP_SetupLeftButton(const struct FGeneralWindowText& Text);
	void BP_SetupRightButton(const struct FGeneralWindowText& Text);
	void BP_SetupTwoButton(const struct FGeneralWindowText& LeftText, const struct FGeneralWindowText& RightText);
	void OnDecideButton(class UAppWidget* Widget, EWidgetInputType InputType);
	void OnMouseEnterButton(class UAppWidget* Widget, EWidgetInputType InputType);
	void OnMouseLeaveButton(class UAppWidget* Widget, EWidgetInputType InputType);
	void OnPressButton(class UAppWidget* Widget, EWidgetInputType InputType);
	void OnWindowEventDelegate__DelegateSignature();
	void OnWindowInputEventDelegate__DelegateSignature(class UAppWidget* Widget, EWidgetInputType InputType, bool LeftButton);
	void SetSubText(const class FText& InText);

	int32 BP_GetButtonCount() const;
	class UWidgetButton* BP_GetLeftOfTwoButtons() const;
	class UWidgetButton* BP_GetOneButton() const;
	class UWidgetButton* BP_GetRightOfTwoButtons() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetGeneralWindow">();
	}
	static class UWidgetGeneralWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetGeneralWindow>();
	}
};
static_assert(alignof(UWidgetGeneralWindow) == 0x000008, "Wrong alignment on UWidgetGeneralWindow");
static_assert(sizeof(UWidgetGeneralWindow) == 0x000598, "Wrong size on UWidgetGeneralWindow");
static_assert(offsetof(UWidgetGeneralWindow, OnPressWindowDelegate) == 0x000458, "Member 'UWidgetGeneralWindow::OnPressWindowDelegate' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindow, OnDecideWindowDelegate) == 0x000468, "Member 'UWidgetGeneralWindow::OnDecideWindowDelegate' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindow, OnOpenedDelegate) == 0x000478, "Member 'UWidgetGeneralWindow::OnOpenedDelegate' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindow, OnClosedDelegate) == 0x000488, "Member 'UWidgetGeneralWindow::OnClosedDelegate' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindow, OnClickedBlockBGDelegate) == 0x000498, "Member 'UWidgetGeneralWindow::OnClickedBlockBGDelegate' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindow, _widthSizeSpacer) == 0x0004A8, "Member 'UWidgetGeneralWindow::_widthSizeSpacer' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindow, _buttonSwitcher) == 0x0004B0, "Member 'UWidgetGeneralWindow::_buttonSwitcher' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindow, _oneButton) == 0x0004B8, "Member 'UWidgetGeneralWindow::_oneButton' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindow, _leftOfTwoButtons) == 0x0004C0, "Member 'UWidgetGeneralWindow::_leftOfTwoButtons' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindow, _rightOfTwoButtons) == 0x0004C8, "Member 'UWidgetGeneralWindow::_rightOfTwoButtons' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindow, _windowFrame) == 0x0004D0, "Member 'UWidgetGeneralWindow::_windowFrame' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindow, _topSpacer) == 0x0004D8, "Member 'UWidgetGeneralWindow::_topSpacer' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindow, _defaultButtonTexts) == 0x0004E0, "Member 'UWidgetGeneralWindow::_defaultButtonTexts' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindow, _buttonTextArray) == 0x0004F0, "Member 'UWidgetGeneralWindow::_buttonTextArray' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindow, ButtonSelectType) == 0x000500, "Member 'UWidgetGeneralWindow::ButtonSelectType' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindow, _bUserdBlur) == 0x000501, "Member 'UWidgetGeneralWindow::_bUserdBlur' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindow, _textSideSpace) == 0x000504, "Member 'UWidgetGeneralWindow::_textSideSpace' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindow, _backgroundBlur) == 0x000508, "Member 'UWidgetGeneralWindow::_backgroundBlur' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindow, _setImageResource) == 0x000510, "Member 'UWidgetGeneralWindow::_setImageResource' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindow, _imageSpaceTop) == 0x000518, "Member 'UWidgetGeneralWindow::_imageSpaceTop' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindow, _imageSpaceBottom) == 0x00051C, "Member 'UWidgetGeneralWindow::_imageSpaceBottom' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindow, _imageHorizontal) == 0x000520, "Member 'UWidgetGeneralWindow::_imageHorizontal' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindow, _imageSpacer) == 0x000528, "Member 'UWidgetGeneralWindow::_imageSpacer' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindow, _windowImage) == 0x000530, "Member 'UWidgetGeneralWindow::_windowImage' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindow, _subTextOverlay) == 0x000538, "Member 'UWidgetGeneralWindow::_subTextOverlay' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindow, _richSubText) == 0x000540, "Member 'UWidgetGeneralWindow::_richSubText' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindow, _bUseSubText) == 0x000548, "Member 'UWidgetGeneralWindow::_bUseSubText' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindow, _subText) == 0x000550, "Member 'UWidgetGeneralWindow::_subText' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindow, _bShowWindowBg) == 0x000578, "Member 'UWidgetGeneralWindow::_bShowWindowBg' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindow, _generalWindowButtonFocus) == 0x000590, "Member 'UWidgetGeneralWindow::_generalWindowButtonFocus' has a wrong offset!");

// Class UIFramework.WidgetGeneralVerticalMultipleButtonWindow
// 0x0358 (0x08F0 - 0x0598)
class UWidgetGeneralVerticalMultipleButtonWindow final : public UWidgetGeneralWindow
{
public:
	TArray<struct FGeneralWindowBaseText>         _verticalButtonTextArray;                          // 0x0598(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                         _spaceSize;                                        // 0x05A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _buttonSizeY;                                      // 0x05AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UWidgetButton>              _createButtonClass;                                // 0x05B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           _buttonBox;                                        // 0x05B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5C0[0x10];                                     // 0x05C0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             _buttonDecideEvent1;                               // 0x05D0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonPressEvent1;                                // 0x05E0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonLongDecideEvent1;                           // 0x05F0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonAddedToFocusEvent1;                         // 0x0600(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonRemovedFromFocusEvent1;                     // 0x0610(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonDecideEvent2;                               // 0x0620(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonPressEvent2;                                // 0x0630(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonLongDecideEvent2;                           // 0x0640(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonAddedToFocusEvent2;                         // 0x0650(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonRemovedFromFocusEvent2;                     // 0x0660(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonDecideEvent3;                               // 0x0670(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonPressEvent3;                                // 0x0680(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonLongDecideEvent3;                           // 0x0690(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonAddedToFocusEvent3;                         // 0x06A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonRemovedFromFocusEvent3;                     // 0x06B0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonDecideEvent4;                               // 0x06C0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonPressEvent4;                                // 0x06D0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonLongDecideEvent4;                           // 0x06E0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonAddedToFocusEvent4;                         // 0x06F0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonRemovedFromFocusEvent4;                     // 0x0700(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonDecideEvent5;                               // 0x0710(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonPressEvent5;                                // 0x0720(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonLongDecideEvent5;                           // 0x0730(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonAddedToFocusEvent5;                         // 0x0740(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonRemovedFromFocusEvent5;                     // 0x0750(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonDecideEvent6;                               // 0x0760(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonPressEvent6;                                // 0x0770(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonLongDecideEvent6;                           // 0x0780(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonAddedToFocusEvent6;                         // 0x0790(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonRemovedFromFocusEvent6;                     // 0x07A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonDecideEvent7;                               // 0x07B0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonPressEvent7;                                // 0x07C0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonLongDecideEvent7;                           // 0x07D0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonAddedToFocusEvent7;                         // 0x07E0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonRemovedFromFocusEvent7;                     // 0x07F0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonDecideEvent8;                               // 0x0800(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonPressEvent8;                                // 0x0810(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonLongDecideEvent8;                           // 0x0820(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonAddedToFocusEvent8;                         // 0x0830(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonRemovedFromFocusEvent8;                     // 0x0840(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonDecideEvent9;                               // 0x0850(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonPressEvent9;                                // 0x0860(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonLongDecideEvent9;                           // 0x0870(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonAddedToFocusEvent9;                         // 0x0880(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonRemovedFromFocusEvent9;                     // 0x0890(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonDecideEvent10;                              // 0x08A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonPressEvent10;                               // 0x08B0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonLongDecideEvent10;                          // 0x08C0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonAddedToFocusEvent10;                        // 0x08D0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _buttonRemovedFromFocusEvent10;                    // 0x08E0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void OnButtonAddedToFocusEvent(class UAppWidget* Widget, EWidgetInputType InputType);
	void OnButtonDecideEvent(class UAppWidget* Widget, EWidgetInputType InputType);
	void OnButtonOnLongDecideEvent(class UAppWidget* Widget, EWidgetInputType InputType);
	void OnButtonPressEvent(class UAppWidget* Widget, EWidgetInputType InputType);
	void OnButtonRemovedFromFocusEvent(class UAppWidget* Widget, EWidgetInputType InputType);
	void SetupButtonList();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetGeneralVerticalMultipleButtonWindow">();
	}
	static class UWidgetGeneralVerticalMultipleButtonWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetGeneralVerticalMultipleButtonWindow>();
	}
};
static_assert(alignof(UWidgetGeneralVerticalMultipleButtonWindow) == 0x000008, "Wrong alignment on UWidgetGeneralVerticalMultipleButtonWindow");
static_assert(sizeof(UWidgetGeneralVerticalMultipleButtonWindow) == 0x0008F0, "Wrong size on UWidgetGeneralVerticalMultipleButtonWindow");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _verticalButtonTextArray) == 0x000598, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_verticalButtonTextArray' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _spaceSize) == 0x0005A8, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_spaceSize' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonSizeY) == 0x0005AC, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonSizeY' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _createButtonClass) == 0x0005B0, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_createButtonClass' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonBox) == 0x0005B8, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonBox' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonDecideEvent1) == 0x0005D0, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonDecideEvent1' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonPressEvent1) == 0x0005E0, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonPressEvent1' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonLongDecideEvent1) == 0x0005F0, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonLongDecideEvent1' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonAddedToFocusEvent1) == 0x000600, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonAddedToFocusEvent1' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonRemovedFromFocusEvent1) == 0x000610, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonRemovedFromFocusEvent1' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonDecideEvent2) == 0x000620, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonDecideEvent2' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonPressEvent2) == 0x000630, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonPressEvent2' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonLongDecideEvent2) == 0x000640, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonLongDecideEvent2' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonAddedToFocusEvent2) == 0x000650, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonAddedToFocusEvent2' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonRemovedFromFocusEvent2) == 0x000660, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonRemovedFromFocusEvent2' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonDecideEvent3) == 0x000670, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonDecideEvent3' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonPressEvent3) == 0x000680, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonPressEvent3' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonLongDecideEvent3) == 0x000690, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonLongDecideEvent3' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonAddedToFocusEvent3) == 0x0006A0, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonAddedToFocusEvent3' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonRemovedFromFocusEvent3) == 0x0006B0, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonRemovedFromFocusEvent3' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonDecideEvent4) == 0x0006C0, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonDecideEvent4' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonPressEvent4) == 0x0006D0, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonPressEvent4' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonLongDecideEvent4) == 0x0006E0, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonLongDecideEvent4' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonAddedToFocusEvent4) == 0x0006F0, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonAddedToFocusEvent4' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonRemovedFromFocusEvent4) == 0x000700, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonRemovedFromFocusEvent4' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonDecideEvent5) == 0x000710, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonDecideEvent5' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonPressEvent5) == 0x000720, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonPressEvent5' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonLongDecideEvent5) == 0x000730, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonLongDecideEvent5' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonAddedToFocusEvent5) == 0x000740, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonAddedToFocusEvent5' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonRemovedFromFocusEvent5) == 0x000750, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonRemovedFromFocusEvent5' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonDecideEvent6) == 0x000760, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonDecideEvent6' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonPressEvent6) == 0x000770, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonPressEvent6' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonLongDecideEvent6) == 0x000780, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonLongDecideEvent6' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonAddedToFocusEvent6) == 0x000790, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonAddedToFocusEvent6' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonRemovedFromFocusEvent6) == 0x0007A0, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonRemovedFromFocusEvent6' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonDecideEvent7) == 0x0007B0, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonDecideEvent7' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonPressEvent7) == 0x0007C0, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonPressEvent7' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonLongDecideEvent7) == 0x0007D0, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonLongDecideEvent7' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonAddedToFocusEvent7) == 0x0007E0, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonAddedToFocusEvent7' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonRemovedFromFocusEvent7) == 0x0007F0, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonRemovedFromFocusEvent7' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonDecideEvent8) == 0x000800, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonDecideEvent8' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonPressEvent8) == 0x000810, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonPressEvent8' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonLongDecideEvent8) == 0x000820, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonLongDecideEvent8' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonAddedToFocusEvent8) == 0x000830, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonAddedToFocusEvent8' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonRemovedFromFocusEvent8) == 0x000840, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonRemovedFromFocusEvent8' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonDecideEvent9) == 0x000850, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonDecideEvent9' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonPressEvent9) == 0x000860, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonPressEvent9' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonLongDecideEvent9) == 0x000870, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonLongDecideEvent9' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonAddedToFocusEvent9) == 0x000880, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonAddedToFocusEvent9' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonRemovedFromFocusEvent9) == 0x000890, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonRemovedFromFocusEvent9' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonDecideEvent10) == 0x0008A0, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonDecideEvent10' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonPressEvent10) == 0x0008B0, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonPressEvent10' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonLongDecideEvent10) == 0x0008C0, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonLongDecideEvent10' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonAddedToFocusEvent10) == 0x0008D0, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonAddedToFocusEvent10' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralVerticalMultipleButtonWindow, _buttonRemovedFromFocusEvent10) == 0x0008E0, "Member 'UWidgetGeneralVerticalMultipleButtonWindow::_buttonRemovedFromFocusEvent10' has a wrong offset!");

// Class UIFramework.WidgetGeneralWindowFrame
// 0x0018 (0x05B0 - 0x0598)
class UWidgetGeneralWindowFrame : public UWidgetGeneralWindow
{
public:
	class UNamedSlot*                             Base1Slot;                                         // 0x0598(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNamedSlot*                             Base2Slot;                                         // 0x05A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNamedSlot*                             ContentSlot;                                       // 0x05A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetupBaseWidgets();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetGeneralWindowFrame">();
	}
	static class UWidgetGeneralWindowFrame* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetGeneralWindowFrame>();
	}
};
static_assert(alignof(UWidgetGeneralWindowFrame) == 0x000008, "Wrong alignment on UWidgetGeneralWindowFrame");
static_assert(sizeof(UWidgetGeneralWindowFrame) == 0x0005B0, "Wrong size on UWidgetGeneralWindowFrame");
static_assert(offsetof(UWidgetGeneralWindowFrame, Base1Slot) == 0x000598, "Member 'UWidgetGeneralWindowFrame::Base1Slot' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindowFrame, Base2Slot) == 0x0005A0, "Member 'UWidgetGeneralWindowFrame::Base2Slot' has a wrong offset!");
static_assert(offsetof(UWidgetGeneralWindowFrame, ContentSlot) == 0x0005A8, "Member 'UWidgetGeneralWindowFrame::ContentSlot' has a wrong offset!");

// Class UIFramework.WidgetInputControl
// 0x0000 (0x0350 - 0x0350)
class UWidgetInputControl : public UWidgetBase
{
public:
	void PressCancel();
	void PressDpadLeft();
	void PressDpadRight();
	void PressLeftShoulder();
	void PressRightShoulder();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetInputControl">();
	}
	static class UWidgetInputControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetInputControl>();
	}
};
static_assert(alignof(UWidgetInputControl) == 0x000008, "Wrong alignment on UWidgetInputControl");
static_assert(sizeof(UWidgetInputControl) == 0x000350, "Wrong size on UWidgetInputControl");

// Class UIFramework.WidgetLocalizeLayout
// 0x0030 (0x0380 - 0x0350)
class UWidgetLocalizeLayout : public UWidgetBase
{
public:
	class FText                                   _tagText;                                          // 0x0350(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UWidgetLocalizeLayoutItem>  _tagTextClass;                                     // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UWidgetLocalizeLayoutItem>  _textClass;                                        // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         _horizontalBox;                                    // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetText(const class FText& Source, const class FText& Format);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetLocalizeLayout">();
	}
	static class UWidgetLocalizeLayout* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetLocalizeLayout>();
	}
};
static_assert(alignof(UWidgetLocalizeLayout) == 0x000008, "Wrong alignment on UWidgetLocalizeLayout");
static_assert(sizeof(UWidgetLocalizeLayout) == 0x000380, "Wrong size on UWidgetLocalizeLayout");
static_assert(offsetof(UWidgetLocalizeLayout, _tagText) == 0x000350, "Member 'UWidgetLocalizeLayout::_tagText' has a wrong offset!");
static_assert(offsetof(UWidgetLocalizeLayout, _tagTextClass) == 0x000368, "Member 'UWidgetLocalizeLayout::_tagTextClass' has a wrong offset!");
static_assert(offsetof(UWidgetLocalizeLayout, _textClass) == 0x000370, "Member 'UWidgetLocalizeLayout::_textClass' has a wrong offset!");
static_assert(offsetof(UWidgetLocalizeLayout, _horizontalBox) == 0x000378, "Member 'UWidgetLocalizeLayout::_horizontalBox' has a wrong offset!");

// Class UIFramework.WidgetLocalizeLayoutItem
// 0x0010 (0x0360 - 0x0350)
class UWidgetLocalizeLayoutItem : public UWidgetBase
{
public:
	struct FSlateChildSize                        _size;                                             // 0x0350(0x0008)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UWidgetText*                            _textBlock;                                        // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetText(const class FText& Text);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetLocalizeLayoutItem">();
	}
	static class UWidgetLocalizeLayoutItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetLocalizeLayoutItem>();
	}
};
static_assert(alignof(UWidgetLocalizeLayoutItem) == 0x000008, "Wrong alignment on UWidgetLocalizeLayoutItem");
static_assert(sizeof(UWidgetLocalizeLayoutItem) == 0x000360, "Wrong size on UWidgetLocalizeLayoutItem");
static_assert(offsetof(UWidgetLocalizeLayoutItem, _size) == 0x000350, "Member 'UWidgetLocalizeLayoutItem::_size' has a wrong offset!");
static_assert(offsetof(UWidgetLocalizeLayoutItem, _textBlock) == 0x000358, "Member 'UWidgetLocalizeLayoutItem::_textBlock' has a wrong offset!");

// Class UIFramework.WidgetMatrixSelection
// 0x0070 (0x03C0 - 0x0350)
class UWidgetMatrixSelection : public UWidgetBase
{
public:
	FMulticastInlineDelegateProperty_             OnDecideDelegate;                                  // 0x0350(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSelectDelegate;                                  // 0x0360(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCancelDelegate;                                  // 0x0370(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         _columnCount;                                      // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _elementCount;                                     // 0x0384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                _slotPadding;                                      // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          _bAutoCreateWidget;                                // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_399[0x7];                                      // 0x0399(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUniformGridPanel*                      _gridPanel;                                        // 0x03A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNamedSlot*                             _templateWidget;                                   // 0x03A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UWidget*>                        _elementWidgets;                                   // 0x03B0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void OnCancelElement(class UAppWidget* Widget, EWidgetInputType InputType);
	void OnDecideElement(class UAppWidget* Widget, EWidgetInputType InputType);
	void OnMatrixSelectionInputEventDelegate__DelegateSignature(class UAppWidget* Widget, EWidgetInputType InputType, int32 Index_0);
	void OnSelectElement(class UAppWidget* Widget, EWidgetInputType InputType);

	const TArray<class UWidget*> BP_GetElemets(TSubclassOf<class UWidget> ElementType) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetMatrixSelection">();
	}
	static class UWidgetMatrixSelection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetMatrixSelection>();
	}
};
static_assert(alignof(UWidgetMatrixSelection) == 0x000008, "Wrong alignment on UWidgetMatrixSelection");
static_assert(sizeof(UWidgetMatrixSelection) == 0x0003C0, "Wrong size on UWidgetMatrixSelection");
static_assert(offsetof(UWidgetMatrixSelection, OnDecideDelegate) == 0x000350, "Member 'UWidgetMatrixSelection::OnDecideDelegate' has a wrong offset!");
static_assert(offsetof(UWidgetMatrixSelection, OnSelectDelegate) == 0x000360, "Member 'UWidgetMatrixSelection::OnSelectDelegate' has a wrong offset!");
static_assert(offsetof(UWidgetMatrixSelection, OnCancelDelegate) == 0x000370, "Member 'UWidgetMatrixSelection::OnCancelDelegate' has a wrong offset!");
static_assert(offsetof(UWidgetMatrixSelection, _columnCount) == 0x000380, "Member 'UWidgetMatrixSelection::_columnCount' has a wrong offset!");
static_assert(offsetof(UWidgetMatrixSelection, _elementCount) == 0x000384, "Member 'UWidgetMatrixSelection::_elementCount' has a wrong offset!");
static_assert(offsetof(UWidgetMatrixSelection, _slotPadding) == 0x000388, "Member 'UWidgetMatrixSelection::_slotPadding' has a wrong offset!");
static_assert(offsetof(UWidgetMatrixSelection, _bAutoCreateWidget) == 0x000398, "Member 'UWidgetMatrixSelection::_bAutoCreateWidget' has a wrong offset!");
static_assert(offsetof(UWidgetMatrixSelection, _gridPanel) == 0x0003A0, "Member 'UWidgetMatrixSelection::_gridPanel' has a wrong offset!");
static_assert(offsetof(UWidgetMatrixSelection, _templateWidget) == 0x0003A8, "Member 'UWidgetMatrixSelection::_templateWidget' has a wrong offset!");
static_assert(offsetof(UWidgetMatrixSelection, _elementWidgets) == 0x0003B0, "Member 'UWidgetMatrixSelection::_elementWidgets' has a wrong offset!");

// Class UIFramework.WidgetPopUpWindow
// 0x0068 (0x04C0 - 0x0458)
class UWidgetPopUpWindow final : public UWidgetGeneralWindowBase
{
public:
	FMulticastInlineDelegateProperty_             _onCloseDelegate;                                  // 0x0458(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UImage*                                 _blockBG;                                          // 0x0468(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_470[0x50];                                     // 0x0470(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CloseEnd();
	struct FEventReply OnPressBlockBG(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetPopUpWindow">();
	}
	static class UWidgetPopUpWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetPopUpWindow>();
	}
};
static_assert(alignof(UWidgetPopUpWindow) == 0x000008, "Wrong alignment on UWidgetPopUpWindow");
static_assert(sizeof(UWidgetPopUpWindow) == 0x0004C0, "Wrong size on UWidgetPopUpWindow");
static_assert(offsetof(UWidgetPopUpWindow, _onCloseDelegate) == 0x000458, "Member 'UWidgetPopUpWindow::_onCloseDelegate' has a wrong offset!");
static_assert(offsetof(UWidgetPopUpWindow, _blockBG) == 0x000468, "Member 'UWidgetPopUpWindow::_blockBG' has a wrong offset!");

// Class UIFramework.WidgetScrollBarKnob
// 0x0010 (0x03F8 - 0x03E8)
class UWidgetScrollBarKnob final : public UAppWidget
{
public:
	class UImage*                                 _body;                                             // 0x03E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3F0[0x8];                                      // 0x03F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetScrollBarKnob">();
	}
	static class UWidgetScrollBarKnob* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetScrollBarKnob>();
	}
};
static_assert(alignof(UWidgetScrollBarKnob) == 0x000008, "Wrong alignment on UWidgetScrollBarKnob");
static_assert(sizeof(UWidgetScrollBarKnob) == 0x0003F8, "Wrong size on UWidgetScrollBarKnob");
static_assert(offsetof(UWidgetScrollBarKnob, _body) == 0x0003E8, "Member 'UWidgetScrollBarKnob::_body' has a wrong offset!");

// Class UIFramework.WidgetScrollBar
// 0x0080 (0x0468 - 0x03E8)
class UWidgetScrollBar final : public UAppWidget
{
public:
	class UBorder*                                _collision;                                        // 0x03E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAppWidget*                             _body;                                             // 0x03F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetScrollBarKnob*                   _knob;                                             // 0x03F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UTexture2D>              _collisionTexture;                                 // 0x0400(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _progress;                                         // 0x0428(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _collisionScale;                                   // 0x042C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _maxPageCount;                                     // 0x0430(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector2D                              _bodySize;                                         // 0x0434(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bCollisionVisibility;                             // 0x043C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_43D[0x2B];                                     // 0x043D(0x002B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnSelectedKnob(class UAppWidget* Widget, EWidgetInputType InputType);
	void OnUnselectedKnob(class UAppWidget* Widget, EWidgetInputType InputType);
	void SetKnobSizeScale(float Scale);
	void SetProgress(float Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetScrollBar">();
	}
	static class UWidgetScrollBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetScrollBar>();
	}
};
static_assert(alignof(UWidgetScrollBar) == 0x000008, "Wrong alignment on UWidgetScrollBar");
static_assert(sizeof(UWidgetScrollBar) == 0x000468, "Wrong size on UWidgetScrollBar");
static_assert(offsetof(UWidgetScrollBar, _collision) == 0x0003E8, "Member 'UWidgetScrollBar::_collision' has a wrong offset!");
static_assert(offsetof(UWidgetScrollBar, _body) == 0x0003F0, "Member 'UWidgetScrollBar::_body' has a wrong offset!");
static_assert(offsetof(UWidgetScrollBar, _knob) == 0x0003F8, "Member 'UWidgetScrollBar::_knob' has a wrong offset!");
static_assert(offsetof(UWidgetScrollBar, _collisionTexture) == 0x000400, "Member 'UWidgetScrollBar::_collisionTexture' has a wrong offset!");
static_assert(offsetof(UWidgetScrollBar, _progress) == 0x000428, "Member 'UWidgetScrollBar::_progress' has a wrong offset!");
static_assert(offsetof(UWidgetScrollBar, _collisionScale) == 0x00042C, "Member 'UWidgetScrollBar::_collisionScale' has a wrong offset!");
static_assert(offsetof(UWidgetScrollBar, _maxPageCount) == 0x000430, "Member 'UWidgetScrollBar::_maxPageCount' has a wrong offset!");
static_assert(offsetof(UWidgetScrollBar, _bodySize) == 0x000434, "Member 'UWidgetScrollBar::_bodySize' has a wrong offset!");
static_assert(offsetof(UWidgetScrollBar, _bCollisionVisibility) == 0x00043C, "Member 'UWidgetScrollBar::_bCollisionVisibility' has a wrong offset!");

// Class UIFramework.WidgetScrollText
// 0x0080 (0x03D0 - 0x0350)
class UWidgetScrollText final : public UWidgetBase
{
public:
	struct FVector2D                              _panelSize;                                        // 0x0350(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _scrollSpeed;                                      // 0x0358(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_35C[0x4];                                      // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           _messageList;                                      // 0x0360(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                         _waitTimer;                                        // 0x0370(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                _templatePadding;                                  // 0x0374(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	EHorizontalAlignment                          _templateHorizontalAlignment;                      // 0x0384(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVerticalAlignment                            _templateVerticalAlignment;                        // 0x0385(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_386[0x2];                                      // 0x0386(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UPanelWidget*                           _panel;                                            // 0x0388(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNamedSlot*                             _templateText;                                     // 0x0390(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanelSlot*                       _canvasPanelSlot;                                  // 0x0398(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3A0[0x8];                                      // 0x03A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              _initPosition;                                     // 0x03A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UWidget*>                        _textWidgets;                                      // 0x03B0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C0[0x10];                                     // 0x03C0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_SetActive(bool Val);
	void Update(float DeltaTime);

	bool BP_GetActive() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetScrollText">();
	}
	static class UWidgetScrollText* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetScrollText>();
	}
};
static_assert(alignof(UWidgetScrollText) == 0x000008, "Wrong alignment on UWidgetScrollText");
static_assert(sizeof(UWidgetScrollText) == 0x0003D0, "Wrong size on UWidgetScrollText");
static_assert(offsetof(UWidgetScrollText, _panelSize) == 0x000350, "Member 'UWidgetScrollText::_panelSize' has a wrong offset!");
static_assert(offsetof(UWidgetScrollText, _scrollSpeed) == 0x000358, "Member 'UWidgetScrollText::_scrollSpeed' has a wrong offset!");
static_assert(offsetof(UWidgetScrollText, _messageList) == 0x000360, "Member 'UWidgetScrollText::_messageList' has a wrong offset!");
static_assert(offsetof(UWidgetScrollText, _waitTimer) == 0x000370, "Member 'UWidgetScrollText::_waitTimer' has a wrong offset!");
static_assert(offsetof(UWidgetScrollText, _templatePadding) == 0x000374, "Member 'UWidgetScrollText::_templatePadding' has a wrong offset!");
static_assert(offsetof(UWidgetScrollText, _templateHorizontalAlignment) == 0x000384, "Member 'UWidgetScrollText::_templateHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UWidgetScrollText, _templateVerticalAlignment) == 0x000385, "Member 'UWidgetScrollText::_templateVerticalAlignment' has a wrong offset!");
static_assert(offsetof(UWidgetScrollText, _panel) == 0x000388, "Member 'UWidgetScrollText::_panel' has a wrong offset!");
static_assert(offsetof(UWidgetScrollText, _templateText) == 0x000390, "Member 'UWidgetScrollText::_templateText' has a wrong offset!");
static_assert(offsetof(UWidgetScrollText, _canvasPanelSlot) == 0x000398, "Member 'UWidgetScrollText::_canvasPanelSlot' has a wrong offset!");
static_assert(offsetof(UWidgetScrollText, _initPosition) == 0x0003A8, "Member 'UWidgetScrollText::_initPosition' has a wrong offset!");
static_assert(offsetof(UWidgetScrollText, _textWidgets) == 0x0003B0, "Member 'UWidgetScrollText::_textWidgets' has a wrong offset!");

// Class UIFramework.WidgetStatics
// 0x0000 (0x0028 - 0x0028)
class UWidgetStatics final : public UBlueprintFunctionLibrary
{
public:
	static class FString BP_ConvertEngCountString(const int32 Value, const bool bComma);
	static class FString BP_ConvertEscapedCharDoubleToSingle(const class FString& Source);
	static class FString BP_ConvertStringFromFloat(const float Value, const bool bComma, const int32 FractionalDigits);
	static class FString BP_ConvertStringFromInt(const int32 Value, const bool bComma);
	static bool CheckTextAnyBlankSpace(const class FText& InCheckText);
	static bool CheckTextNumberNum(const class FText& InCheckText, int32 InCheckNum);
	static void GetPageArray(const TArray<int32>& TargetArray, TArray<int32>* ReturnArray, int32 Index_0, int32 PageElementsCount);
	static float GetScrollSpeed(const class UObject* WorldContextObject, const struct FAnalogInputEvent& InAnalogEvent, float ScrollSpeed);
	static bool IsFocusCauseNotCleared(const struct FFocusEvent& InFocusEvent);
	static class FText MakeLimitCheckAndReplace(const class FText& InCheckText, const class FString& InReplace, int32 InLimitNum);
	static void SetSpriteToMaterial(class UMaterialInstanceDynamic* Material, const class UPaperSprite* Sprite, const class FString& ParameterName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetStatics">();
	}
	static class UWidgetStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetStatics>();
	}
};
static_assert(alignof(UWidgetStatics) == 0x000008, "Wrong alignment on UWidgetStatics");
static_assert(sizeof(UWidgetStatics) == 0x000028, "Wrong size on UWidgetStatics");

// Class UIFramework.WidgetSubMenu
// 0x00E8 (0x04D0 - 0x03E8)
class UWidgetSubMenu final : public UAppWidget
{
public:
	FMulticastInlineDelegateProperty_             OnOpen;                                            // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnOpenFinished;                                    // 0x03F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnClose;                                           // 0x0408(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCloseFinished;                                   // 0x0418(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCancel;                                          // 0x0428(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSelected;                                        // 0x0438(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnDecide;                                          // 0x0448(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UListView*                              _buttonlistView;                                   // 0x0458(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCanvasPanel*                           _basePanel;                                        // 0x0460(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USizeBox*                               _sizeBox;                                          // 0x0468(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USizeBox*                               _listSizeBox;                                      // 0x0470(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 _imageLeft;                                        // 0x0478(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 _imageRight;                                       // 0x0480(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FText>                           _buttonTexts;                                      // 0x0488(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          _autoMenuOpen;                                     // 0x0498(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_499[0x3];                                      // 0x0499(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              _localPositon;                                     // 0x049C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4A4[0x4];                                      // 0x04A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSubMenuInfo>                   _subMenuInfo;                                      // 0x04A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FVector2D                              _buttonSize;                                       // 0x04B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bArrowImageHidden;                                // 0x04C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bArrowImageRight;                                 // 0x04C1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _blistSizeBoxDirect;                               // 0x04C2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C3[0x1];                                      // 0x04C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _listSize;                                         // 0x04C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C8[0x8];                                      // 0x04C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeArrowImage(bool bRight);
	void Close(bool UseCloseAnimation, bool UseCloseSE);
	struct FVector2D GetOffsetPosition();
	void IsCloseable(const struct FFocusEvent& InFocusEvent);
	bool IsOpenSubMenu();
	void OnDecideListButtonEvent(class UAppWidget* Widget, EWidgetInputType InputType);
	void OnDecideSubMenuCancelDelegate__DelegateSignature();
	void OnDecideSubMenuCloseDelegate__DelegateSignature(bool UseSe);
	void OnDecideSubMenuDelegate__DelegateSignature(int32 Index_0);
	void OnDecideSubMenuOpenDelegate__DelegateSignature(bool UseSe);
	void OnHoveredChangedEvent(class UObject* Item, bool bHovered);
	void OnReceivedItemSelectionChangedEvent(class UObject* Item);
	void OnSubMenuCancel(class UAppWidget* Widget, EWidgetInputType InputType);
	void OnSubMenuDelegate__DelegateSignature();
	void Open(class UWidgetBase* Widget, bool UseOpenSE);
	void SetButtonTexts(const TArray<class FText>& Texts);
	void SetFocusListViewItem(int32 ItemIndex);
	void SetOffsetPosition(const struct FVector2D& Pos);
	void SetSubMenuInfo(const TArray<struct FSubMenuInfo>& SubMenuInfo, bool Update);
	void UpdateSubMenuInfo();

	TArray<class FText> GetButtonTexts() const;
	const TArray<struct FSubMenuInfo> GetSubMenuInfo() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetSubMenu">();
	}
	static class UWidgetSubMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetSubMenu>();
	}
};
static_assert(alignof(UWidgetSubMenu) == 0x000008, "Wrong alignment on UWidgetSubMenu");
static_assert(sizeof(UWidgetSubMenu) == 0x0004D0, "Wrong size on UWidgetSubMenu");
static_assert(offsetof(UWidgetSubMenu, OnOpen) == 0x0003E8, "Member 'UWidgetSubMenu::OnOpen' has a wrong offset!");
static_assert(offsetof(UWidgetSubMenu, OnOpenFinished) == 0x0003F8, "Member 'UWidgetSubMenu::OnOpenFinished' has a wrong offset!");
static_assert(offsetof(UWidgetSubMenu, OnClose) == 0x000408, "Member 'UWidgetSubMenu::OnClose' has a wrong offset!");
static_assert(offsetof(UWidgetSubMenu, OnCloseFinished) == 0x000418, "Member 'UWidgetSubMenu::OnCloseFinished' has a wrong offset!");
static_assert(offsetof(UWidgetSubMenu, OnCancel) == 0x000428, "Member 'UWidgetSubMenu::OnCancel' has a wrong offset!");
static_assert(offsetof(UWidgetSubMenu, OnSelected) == 0x000438, "Member 'UWidgetSubMenu::OnSelected' has a wrong offset!");
static_assert(offsetof(UWidgetSubMenu, OnDecide) == 0x000448, "Member 'UWidgetSubMenu::OnDecide' has a wrong offset!");
static_assert(offsetof(UWidgetSubMenu, _buttonlistView) == 0x000458, "Member 'UWidgetSubMenu::_buttonlistView' has a wrong offset!");
static_assert(offsetof(UWidgetSubMenu, _basePanel) == 0x000460, "Member 'UWidgetSubMenu::_basePanel' has a wrong offset!");
static_assert(offsetof(UWidgetSubMenu, _sizeBox) == 0x000468, "Member 'UWidgetSubMenu::_sizeBox' has a wrong offset!");
static_assert(offsetof(UWidgetSubMenu, _listSizeBox) == 0x000470, "Member 'UWidgetSubMenu::_listSizeBox' has a wrong offset!");
static_assert(offsetof(UWidgetSubMenu, _imageLeft) == 0x000478, "Member 'UWidgetSubMenu::_imageLeft' has a wrong offset!");
static_assert(offsetof(UWidgetSubMenu, _imageRight) == 0x000480, "Member 'UWidgetSubMenu::_imageRight' has a wrong offset!");
static_assert(offsetof(UWidgetSubMenu, _buttonTexts) == 0x000488, "Member 'UWidgetSubMenu::_buttonTexts' has a wrong offset!");
static_assert(offsetof(UWidgetSubMenu, _autoMenuOpen) == 0x000498, "Member 'UWidgetSubMenu::_autoMenuOpen' has a wrong offset!");
static_assert(offsetof(UWidgetSubMenu, _localPositon) == 0x00049C, "Member 'UWidgetSubMenu::_localPositon' has a wrong offset!");
static_assert(offsetof(UWidgetSubMenu, _subMenuInfo) == 0x0004A8, "Member 'UWidgetSubMenu::_subMenuInfo' has a wrong offset!");
static_assert(offsetof(UWidgetSubMenu, _buttonSize) == 0x0004B8, "Member 'UWidgetSubMenu::_buttonSize' has a wrong offset!");
static_assert(offsetof(UWidgetSubMenu, _bArrowImageHidden) == 0x0004C0, "Member 'UWidgetSubMenu::_bArrowImageHidden' has a wrong offset!");
static_assert(offsetof(UWidgetSubMenu, _bArrowImageRight) == 0x0004C1, "Member 'UWidgetSubMenu::_bArrowImageRight' has a wrong offset!");
static_assert(offsetof(UWidgetSubMenu, _blistSizeBoxDirect) == 0x0004C2, "Member 'UWidgetSubMenu::_blistSizeBoxDirect' has a wrong offset!");
static_assert(offsetof(UWidgetSubMenu, _listSize) == 0x0004C4, "Member 'UWidgetSubMenu::_listSize' has a wrong offset!");

// Class UIFramework.WidgetSubMenuEntry
// 0x0018 (0x0368 - 0x0350)
class UWidgetSubMenuEntry final : public UWidgetBase
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetSubMenuObject*                   _subMenuObject;                                    // 0x0358(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetButton*                          _buttonWidget;                                     // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void UpdateDisplay(class UWidgetSubMenuObject* Object);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetSubMenuEntry">();
	}
	static class UWidgetSubMenuEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetSubMenuEntry>();
	}
};
static_assert(alignof(UWidgetSubMenuEntry) == 0x000008, "Wrong alignment on UWidgetSubMenuEntry");
static_assert(sizeof(UWidgetSubMenuEntry) == 0x000368, "Wrong size on UWidgetSubMenuEntry");
static_assert(offsetof(UWidgetSubMenuEntry, _subMenuObject) == 0x000358, "Member 'UWidgetSubMenuEntry::_subMenuObject' has a wrong offset!");
static_assert(offsetof(UWidgetSubMenuEntry, _buttonWidget) == 0x000360, "Member 'UWidgetSubMenuEntry::_buttonWidget' has a wrong offset!");

// Class UIFramework.WidgetSubMenuObject
// 0x0038 (0x0068 - 0x0030)
class UWidgetSubMenuObject final : public UListViewEntryObjectBase
{
public:
	struct FSubMenuInfo                           _subMenuInfo;                                      // 0x0030(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetSubMenuObject">();
	}
	static class UWidgetSubMenuObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetSubMenuObject>();
	}
};
static_assert(alignof(UWidgetSubMenuObject) == 0x000008, "Wrong alignment on UWidgetSubMenuObject");
static_assert(sizeof(UWidgetSubMenuObject) == 0x000068, "Wrong size on UWidgetSubMenuObject");
static_assert(offsetof(UWidgetSubMenuObject, _subMenuInfo) == 0x000030, "Member 'UWidgetSubMenuObject::_subMenuInfo' has a wrong offset!");

// Class UIFramework.CustomTextBlock
// 0x0000 (0x02F0 - 0x02F0)
class UCustomTextBlock final : public UTextBlock
{
public:
	void SetLineHeightPercentage(const float InLineHeightPercentage);
	void SetMargin(const struct FMargin& InMargin);
	void SetWrapTextAt(const float InWrapTextAt);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomTextBlock">();
	}
	static class UCustomTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomTextBlock>();
	}
};
static_assert(alignof(UCustomTextBlock) == 0x000010, "Wrong alignment on UCustomTextBlock");
static_assert(sizeof(UCustomTextBlock) == 0x0002F0, "Wrong size on UCustomTextBlock");

// Class UIFramework.WidgetText
// 0x0030 (0x0380 - 0x0350)
class UWidgetText : public UWidgetBase
{
public:
	class FText                                   Text;                                              // 0x0350(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	bool                                          _bAdjustmentJustSize;                              // 0x0368(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_369[0x3];                                      // 0x0369(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              _MarginSize;                                       // 0x036C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomTextBlock*                       _textBlock;                                        // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UMaterialInstanceDynamic* GetDynamicFontMaterial();
	class UMaterialInstanceDynamic* GetDynamicOutlineMaterial();
	void SetAutoWrapText(bool InAutoTextWrap);
	void SetFont(const struct FSlateFontInfo& InFontInfo);
	void SetLineHeightPercentage(const float InLineHeightPercentage);
	void SetMargin(const struct FMargin& InMargin);
	void SetMinDesiredWidth(float InMinDesiredWidth);
	void SetOpacity(float InOpacity);
	void SetShadowColorAndOpacity(const struct FLinearColor& InShadowColorAndOpacity);
	void SetShadowOffset(const struct FVector2D& InShadowOffset);
	void SetStrikeBrush(const struct FSlateBrush& InStrikeBrush);
	void SetText(const class FText& InText);
	void SetTextColorAndOpacity(const struct FSlateColor& InColorAndOpacity);
	void SetTextTransformPolicy(ETextTransformPolicy InTransformPolicy);
	void SetWrapTextAt(const float InWrapTextAt);

	const struct FSlateFontInfo GetFont() const;
	class FText GetText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetText">();
	}
	static class UWidgetText* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetText>();
	}
};
static_assert(alignof(UWidgetText) == 0x000008, "Wrong alignment on UWidgetText");
static_assert(sizeof(UWidgetText) == 0x000380, "Wrong size on UWidgetText");
static_assert(offsetof(UWidgetText, Text) == 0x000350, "Member 'UWidgetText::Text' has a wrong offset!");
static_assert(offsetof(UWidgetText, _bAdjustmentJustSize) == 0x000368, "Member 'UWidgetText::_bAdjustmentJustSize' has a wrong offset!");
static_assert(offsetof(UWidgetText, _MarginSize) == 0x00036C, "Member 'UWidgetText::_MarginSize' has a wrong offset!");
static_assert(offsetof(UWidgetText, _textBlock) == 0x000378, "Member 'UWidgetText::_textBlock' has a wrong offset!");

// Class UIFramework.WidgetToggleSwitch
// 0x0010 (0x0498 - 0x0488)
class UWidgetToggleSwitch final : public UWidgetButton
{
public:
	uint8                                         Pad_488[0x8];                                      // 0x0488(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UNamedSlot*                             Body;                                              // 0x0490(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetToggleSwitch">();
	}
	static class UWidgetToggleSwitch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetToggleSwitch>();
	}
};
static_assert(alignof(UWidgetToggleSwitch) == 0x000008, "Wrong alignment on UWidgetToggleSwitch");
static_assert(sizeof(UWidgetToggleSwitch) == 0x000498, "Wrong size on UWidgetToggleSwitch");
static_assert(offsetof(UWidgetToggleSwitch, Body) == 0x000490, "Member 'UWidgetToggleSwitch::Body' has a wrong offset!");

}

