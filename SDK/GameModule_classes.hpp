#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameModule

#include "Basic.hpp"

#include "UIFramework_structs.hpp"
#include "UIFramework_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Slate_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "BykingUnrealModule_structs.hpp"
#include "BykingUnrealModule_classes.hpp"
#include "CommonModule_structs.hpp"
#include "CommonModule_classes.hpp"
#include "GameModule_structs.hpp"
#include "CriWareRuntime_structs.hpp"
#include "CriWareRuntime_classes.hpp"
#include "MasterDataModule_structs.hpp"
#include "InputCore_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BackendSubsystem_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// Class GameModule.AbilityLevelListWidget
// 0x0078 (0x03C8 - 0x0350)
class UAbilityLevelListWidget final : public UWidgetBase
{
public:
	class UPanelWidget*                           _parentAbilityPanel;                               // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidget*                                _nextIcon;                                         // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_360[0x50];                                     // 0x0360(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   _noneLevelText;                                    // 0x03B0(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityLevelListWidget">();
	}
	static class UAbilityLevelListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityLevelListWidget>();
	}
};
static_assert(alignof(UAbilityLevelListWidget) == 0x000008, "Wrong alignment on UAbilityLevelListWidget");
static_assert(sizeof(UAbilityLevelListWidget) == 0x0003C8, "Wrong size on UAbilityLevelListWidget");
static_assert(offsetof(UAbilityLevelListWidget, _parentAbilityPanel) == 0x000350, "Member 'UAbilityLevelListWidget::_parentAbilityPanel' has a wrong offset!");
static_assert(offsetof(UAbilityLevelListWidget, _nextIcon) == 0x000358, "Member 'UAbilityLevelListWidget::_nextIcon' has a wrong offset!");
static_assert(offsetof(UAbilityLevelListWidget, _noneLevelText) == 0x0003B0, "Member 'UAbilityLevelListWidget::_noneLevelText' has a wrong offset!");

// Class GameModule.AbilityLevelWidget
// 0x01F0 (0x0540 - 0x0350)
class UAbilityLevelWidget final : public UWidgetBase
{
public:
	class UImage*                                 _bgImage;                                          // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTextBlock*                             _levelTextBlock;                                   // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAdjustTextWidget*                      _infoAdjustText;                                   // 0x0360(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidget*                                _nowLevelLine;                                     // 0x0368(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         _level;                                            // 0x0370(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   _levelFormatText;                                  // 0x0378(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class FText                                   _levelMaxText;                                     // 0x0390(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FLinearColor                           _bgColorLessThanNowLevel;                          // 0x03A8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                           _bgColorEqualNowLevel;                             // 0x03B8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                           _bgColorGreaterThanNowLevel;                       // 0x03C8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                           _textColorLessThanNowLevel;                        // 0x03D8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                           _textColorEqualNowLevel;                           // 0x03E8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                           _textColorGreaterThanNowLevel;                     // 0x03F8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSlateFontInfo                         _fontInfoLessThanNowLevel;                         // 0x0408(0x0058)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSlateFontInfo                         _fontInfoEqualNowLevel;                            // 0x0460(0x0058)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSlateFontInfo                         _fontInfoGreaterThanNowLevel;                      // 0x04B8(0x0058)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_510[0x30];                                     // 0x0510(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityLevelWidget">();
	}
	static class UAbilityLevelWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityLevelWidget>();
	}
};
static_assert(alignof(UAbilityLevelWidget) == 0x000008, "Wrong alignment on UAbilityLevelWidget");
static_assert(sizeof(UAbilityLevelWidget) == 0x000540, "Wrong size on UAbilityLevelWidget");
static_assert(offsetof(UAbilityLevelWidget, _bgImage) == 0x000350, "Member 'UAbilityLevelWidget::_bgImage' has a wrong offset!");
static_assert(offsetof(UAbilityLevelWidget, _levelTextBlock) == 0x000358, "Member 'UAbilityLevelWidget::_levelTextBlock' has a wrong offset!");
static_assert(offsetof(UAbilityLevelWidget, _infoAdjustText) == 0x000360, "Member 'UAbilityLevelWidget::_infoAdjustText' has a wrong offset!");
static_assert(offsetof(UAbilityLevelWidget, _nowLevelLine) == 0x000368, "Member 'UAbilityLevelWidget::_nowLevelLine' has a wrong offset!");
static_assert(offsetof(UAbilityLevelWidget, _level) == 0x000370, "Member 'UAbilityLevelWidget::_level' has a wrong offset!");
static_assert(offsetof(UAbilityLevelWidget, _levelFormatText) == 0x000378, "Member 'UAbilityLevelWidget::_levelFormatText' has a wrong offset!");
static_assert(offsetof(UAbilityLevelWidget, _levelMaxText) == 0x000390, "Member 'UAbilityLevelWidget::_levelMaxText' has a wrong offset!");
static_assert(offsetof(UAbilityLevelWidget, _bgColorLessThanNowLevel) == 0x0003A8, "Member 'UAbilityLevelWidget::_bgColorLessThanNowLevel' has a wrong offset!");
static_assert(offsetof(UAbilityLevelWidget, _bgColorEqualNowLevel) == 0x0003B8, "Member 'UAbilityLevelWidget::_bgColorEqualNowLevel' has a wrong offset!");
static_assert(offsetof(UAbilityLevelWidget, _bgColorGreaterThanNowLevel) == 0x0003C8, "Member 'UAbilityLevelWidget::_bgColorGreaterThanNowLevel' has a wrong offset!");
static_assert(offsetof(UAbilityLevelWidget, _textColorLessThanNowLevel) == 0x0003D8, "Member 'UAbilityLevelWidget::_textColorLessThanNowLevel' has a wrong offset!");
static_assert(offsetof(UAbilityLevelWidget, _textColorEqualNowLevel) == 0x0003E8, "Member 'UAbilityLevelWidget::_textColorEqualNowLevel' has a wrong offset!");
static_assert(offsetof(UAbilityLevelWidget, _textColorGreaterThanNowLevel) == 0x0003F8, "Member 'UAbilityLevelWidget::_textColorGreaterThanNowLevel' has a wrong offset!");
static_assert(offsetof(UAbilityLevelWidget, _fontInfoLessThanNowLevel) == 0x000408, "Member 'UAbilityLevelWidget::_fontInfoLessThanNowLevel' has a wrong offset!");
static_assert(offsetof(UAbilityLevelWidget, _fontInfoEqualNowLevel) == 0x000460, "Member 'UAbilityLevelWidget::_fontInfoEqualNowLevel' has a wrong offset!");
static_assert(offsetof(UAbilityLevelWidget, _fontInfoGreaterThanNowLevel) == 0x0004B8, "Member 'UAbilityLevelWidget::_fontInfoGreaterThanNowLevel' has a wrong offset!");

// Class GameModule.AbilityListWidget
// 0x0018 (0x0368 - 0x0350)
class UAbilityListWidget final : public UWidgetBase
{
public:
	class UAbilityWidget*                         _ability;                                          // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAbilityLevelListWidget*                _abilityLevelList;                                 // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         _abilityIndex;                                     // 0x0360(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityListWidget">();
	}
	static class UAbilityListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityListWidget>();
	}
};
static_assert(alignof(UAbilityListWidget) == 0x000008, "Wrong alignment on UAbilityListWidget");
static_assert(sizeof(UAbilityListWidget) == 0x000368, "Wrong size on UAbilityListWidget");
static_assert(offsetof(UAbilityListWidget, _ability) == 0x000350, "Member 'UAbilityListWidget::_ability' has a wrong offset!");
static_assert(offsetof(UAbilityListWidget, _abilityLevelList) == 0x000358, "Member 'UAbilityListWidget::_abilityLevelList' has a wrong offset!");
static_assert(offsetof(UAbilityListWidget, _abilityIndex) == 0x000360, "Member 'UAbilityListWidget::_abilityIndex' has a wrong offset!");

// Class GameModule.AbilityWidget
// 0x0010 (0x0360 - 0x0350)
class UAbilityWidget final : public UWidgetBase
{
public:
	class UTextBlock*                             _abilityNameText;                                  // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTextBlock*                             _abilityInfoText;                                  // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityWidget">();
	}
	static class UAbilityWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityWidget>();
	}
};
static_assert(alignof(UAbilityWidget) == 0x000008, "Wrong alignment on UAbilityWidget");
static_assert(sizeof(UAbilityWidget) == 0x000360, "Wrong size on UAbilityWidget");
static_assert(offsetof(UAbilityWidget, _abilityNameText) == 0x000350, "Member 'UAbilityWidget::_abilityNameText' has a wrong offset!");
static_assert(offsetof(UAbilityWidget, _abilityInfoText) == 0x000358, "Member 'UAbilityWidget::_abilityInfoText' has a wrong offset!");

// Class GameModule.Accessory
// 0x0070 (0x0098 - 0x0028)
class UAccessory final : public UObject
{
public:
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<uint16, class UMeshComponent*>           _meshes;                                           // 0x0048(0x0050)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Accessory">();
	}
	static class UAccessory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAccessory>();
	}
};
static_assert(alignof(UAccessory) == 0x000008, "Wrong alignment on UAccessory");
static_assert(sizeof(UAccessory) == 0x000098, "Wrong size on UAccessory");
static_assert(offsetof(UAccessory, _meshes) == 0x000048, "Member 'UAccessory::_meshes' has a wrong offset!");

// Class GameModule.AchievementWidget
// 0x0028 (0x0378 - 0x0350)
class UAchievementWidget final : public UWidgetBase
{
public:
	TArray<class UTextBlock*>                     _titleTextList;                                    // 0x0350(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UWidgetText*>                    _achievementTextList;                              // 0x0360(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UVerticalBox*                           _clearList;                                        // 0x0370(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AchievementWidget">();
	}
	static class UAchievementWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAchievementWidget>();
	}
};
static_assert(alignof(UAchievementWidget) == 0x000008, "Wrong alignment on UAchievementWidget");
static_assert(sizeof(UAchievementWidget) == 0x000378, "Wrong size on UAchievementWidget");
static_assert(offsetof(UAchievementWidget, _titleTextList) == 0x000350, "Member 'UAchievementWidget::_titleTextList' has a wrong offset!");
static_assert(offsetof(UAchievementWidget, _achievementTextList) == 0x000360, "Member 'UAchievementWidget::_achievementTextList' has a wrong offset!");
static_assert(offsetof(UAchievementWidget, _clearList) == 0x000370, "Member 'UAchievementWidget::_clearList' has a wrong offset!");

// Class GameModule.AchievementWork
// 0x00B0 (0x00E0 - 0x0030)
class UAchievementWork final : public UGameInstanceSubsystem
{
public:
	struct FTimerHandle                           _storeStatsTimerHandle;                            // 0x0030(0x0008)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_38[0xA8];                                      // 0x0038(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAddItem(const struct FDbItemCategoryParam& Item, const int32 Quantity);
	void SetBuyShop();
	void SetClearTutorial();
	void SetSendLike(const int32 Count);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AchievementWork">();
	}
	static class UAchievementWork* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAchievementWork>();
	}
};
static_assert(alignof(UAchievementWork) == 0x000008, "Wrong alignment on UAchievementWork");
static_assert(sizeof(UAchievementWork) == 0x0000E0, "Wrong size on UAchievementWork");
static_assert(offsetof(UAchievementWork, _storeStatsTimerHandle) == 0x000030, "Member 'UAchievementWork::_storeStatsTimerHandle' has a wrong offset!");

// Class GameModule.AdjustTextWidget
// 0x0110 (0x0460 - 0x0350)
class UAdjustTextWidget : public UWidgetBase
{
public:
	FMulticastInlineDelegateProperty_             OnFinishedScrollEventDelegate;                     // 0x0350(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FText                                   _text;                                             // 0x0360(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	float                                         _minScale;                                         // 0x0378(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _scrollSpeed;                                      // 0x037C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _scrollStartWait;                                  // 0x0380(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _scrollEndSpace;                                   // 0x0384(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateColor                            _textColorAndOpacity;                              // 0x0388(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSlateFontInfo                         _font;                                             // 0x03B0(0x0058)(Edit, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              _shadowOffset;                                     // 0x0408(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           _shadowColor;                                      // 0x0410(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETextJustify                                  _justufication;                                    // 0x0420(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bNoLineBreak;                                     // 0x0421(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_422[0x6];                                      // 0x0422(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextBlock*                             _textBlock;                                        // 0x0428(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_430[0x30];                                     // 0x0430(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FSlateFontInfo BP_GetFont();
	class FText BP_GetText();
	void BP_SetFont(const struct FSlateFontInfo& Font);
	void BP_SetJustification(ETextJustify Justification);
	void BP_SetLineBreak(bool LineBreak);
	void BP_SetText(const class FText& Text);
	void BP_SetTextColorAndOpacity(const struct FSlateColor& InColorAndOpacity);
	void OnFinishedScrollEventDelegate__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AdjustTextWidget">();
	}
	static class UAdjustTextWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAdjustTextWidget>();
	}
};
static_assert(alignof(UAdjustTextWidget) == 0x000008, "Wrong alignment on UAdjustTextWidget");
static_assert(sizeof(UAdjustTextWidget) == 0x000460, "Wrong size on UAdjustTextWidget");
static_assert(offsetof(UAdjustTextWidget, OnFinishedScrollEventDelegate) == 0x000350, "Member 'UAdjustTextWidget::OnFinishedScrollEventDelegate' has a wrong offset!");
static_assert(offsetof(UAdjustTextWidget, _text) == 0x000360, "Member 'UAdjustTextWidget::_text' has a wrong offset!");
static_assert(offsetof(UAdjustTextWidget, _minScale) == 0x000378, "Member 'UAdjustTextWidget::_minScale' has a wrong offset!");
static_assert(offsetof(UAdjustTextWidget, _scrollSpeed) == 0x00037C, "Member 'UAdjustTextWidget::_scrollSpeed' has a wrong offset!");
static_assert(offsetof(UAdjustTextWidget, _scrollStartWait) == 0x000380, "Member 'UAdjustTextWidget::_scrollStartWait' has a wrong offset!");
static_assert(offsetof(UAdjustTextWidget, _scrollEndSpace) == 0x000384, "Member 'UAdjustTextWidget::_scrollEndSpace' has a wrong offset!");
static_assert(offsetof(UAdjustTextWidget, _textColorAndOpacity) == 0x000388, "Member 'UAdjustTextWidget::_textColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UAdjustTextWidget, _font) == 0x0003B0, "Member 'UAdjustTextWidget::_font' has a wrong offset!");
static_assert(offsetof(UAdjustTextWidget, _shadowOffset) == 0x000408, "Member 'UAdjustTextWidget::_shadowOffset' has a wrong offset!");
static_assert(offsetof(UAdjustTextWidget, _shadowColor) == 0x000410, "Member 'UAdjustTextWidget::_shadowColor' has a wrong offset!");
static_assert(offsetof(UAdjustTextWidget, _justufication) == 0x000420, "Member 'UAdjustTextWidget::_justufication' has a wrong offset!");
static_assert(offsetof(UAdjustTextWidget, _bNoLineBreak) == 0x000421, "Member 'UAdjustTextWidget::_bNoLineBreak' has a wrong offset!");
static_assert(offsetof(UAdjustTextWidget, _textBlock) == 0x000428, "Member 'UAdjustTextWidget::_textBlock' has a wrong offset!");

// Class GameModule.AN_FaceTurn
// 0x0008 (0x0048 - 0x0040)
class UAN_FaceTurn final : public UAN_CharacterBase
{
public:
	float                                         _turnRate;                                         // 0x0040(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _blendTime;                                        // 0x0044(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AN_FaceTurn">();
	}
	static class UAN_FaceTurn* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAN_FaceTurn>();
	}
};
static_assert(alignof(UAN_FaceTurn) == 0x000008, "Wrong alignment on UAN_FaceTurn");
static_assert(sizeof(UAN_FaceTurn) == 0x000048, "Wrong size on UAN_FaceTurn");
static_assert(offsetof(UAN_FaceTurn, _turnRate) == 0x000040, "Member 'UAN_FaceTurn::_turnRate' has a wrong offset!");
static_assert(offsetof(UAN_FaceTurn, _blendTime) == 0x000044, "Member 'UAN_FaceTurn::_blendTime' has a wrong offset!");

// Class GameModule.AN_SetAimingRate
// 0x0008 (0x0040 - 0x0038)
class UAN_SetAimingRate final : public UAnimNotify
{
public:
	float                                         _aimingRate;                                       // 0x0038(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _blendTime;                                        // 0x003C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AN_SetAimingRate">();
	}
	static class UAN_SetAimingRate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAN_SetAimingRate>();
	}
};
static_assert(alignof(UAN_SetAimingRate) == 0x000008, "Wrong alignment on UAN_SetAimingRate");
static_assert(sizeof(UAN_SetAimingRate) == 0x000040, "Wrong size on UAN_SetAimingRate");
static_assert(offsetof(UAN_SetAimingRate, _aimingRate) == 0x000038, "Member 'UAN_SetAimingRate::_aimingRate' has a wrong offset!");
static_assert(offsetof(UAN_SetAimingRate, _blendTime) == 0x00003C, "Member 'UAN_SetAimingRate::_blendTime' has a wrong offset!");

// Class GameModule.Animation
// 0x0660 (0x0710 - 0x00B0)
class alignas(0x10) UAnimation : public UActorComponent
{
public:
	uint8                                         Pad_B0[0x528];                                     // 0x00B0(0x0528)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimationPlayParams                   _replicatedPlayParams;                             // 0x05D8(0x0004)(Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_5DC[0x4];                                      // 0x05DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstanceGame*                      _animInstance;                                     // 0x05E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APawn*                                  _character;                                        // 0x05E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5F0[0x120];                                    // 0x05F0(0x0120)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_AnimationBlendingOutStartedDelegate(TDelegate<void()> Delegate, EAnimationId ID);
	void BP_AnimationEndedDelegate(TDelegate<void()> Delegate, EAnimationId ID);
	void BP_ChangeAnimationAsset(ECharacterId CharaID, const TArray<EAnimationId>& SrcIds, const TArray<class FName>& DstIds);
	void BP_ChangeNagaraGuard(ECharacterId CharaID);
	void BP_ChangeNagaraOtherCharacter(ECharacterId CharaID, uint8 VariationNo);
	void BP_ChangeNagaraOtherUnique(int32 UniqueNo, ECharacterId CharaID, uint8 VariationNo);
	void BP_ChangeUniqueOtherCharacter(int32 UniqueNo, ECharacterId CharaID, uint8 VariationNo);
	void BP_DisableAnimNotify(int32 NotifyTypeFlags);
	void BP_DisableRootMotion(EAnimationSlot Slot, bool bDisable);
	class FName BP_EmoteCodeToAnimIdName(int32 EmoteCode);
	void BP_JumpToSection(class FName SectionName, EAnimationSlot Slot);
	void BP_PlayAnimation(EAnimationId ID, float PlayRate, float BlendInTime, bool bNotReplay);
	void BP_PlayAnimationAsync(ECharacterId CharaID, class FName ID, EAnimationSlot Slot, float PlayRate, float BlendInTime, float BlendOutTime);
	void BP_PlayAnimationEmote(int32 EmoteCode, float PlayRate, float BlendInTime);
	void BP_PlayAnimationFace(EAnimationId ID, float PlayRate, float BlendInTime);
	void BP_PlayAnimationNagara(EAnimationId ID, float PlayRate, float BlendInTime);
	void BP_PlayAnimationNagaraDamage(EAnimationId ID, float PlayRate, float BlendInTime);
	void BP_PlayAnimationNagaraGuard(EAnimationId ID, float PlayRate, float BlendInTime);
	void BP_PlayAnimationReplicate(EAnimationId ID, EAnimationSlot Slot, float PlayRate);
	void BP_ResetDynamics(ETeleportType TeleportType, float Duration);
	void BP_SetAimingRate(float Rate, float BlendTime);
	void BP_SetAimTargetLocation(const struct FVector& Location);
	void BP_SetAnimationSpeedRate(float Speed);
	void BP_SetCenterRotationOffset(const struct FRotator& Rot);
	void BP_SetCenterTransOffset(const struct FVector& Offset);
	void BP_SetCurrentPlayPosition(EAnimationSlot Slot, float Position);
	void BP_SetFaceAimingRate(float Rate, float BlendTime);
	void BP_SetFaceDamageOneShot(const struct FVector& Location, float Rate, float BlendTime);
	void BP_SetLeanRate(float Rate, float MaxSpeed);
	void BP_SetMoveType(EAnimationMoveType Type);
	void BP_SetPlayRate(EAnimationSlot Slot, float PlayRate);
	void BP_SetRunMoveDistance(float Distance);
	void BP_SetWalkMoveDistance(float Distance);
	void BP_SetWholeAimingRate(float Rate, float BlendTime);
	void BP_StopAnimation(EAnimationSlot Slot, float BlendOutTime);
	void OnMontageBlendingOutStarted(class UAnimMontage* Montage, bool bInterrupted);
	void OnMontageEnded(class UAnimMontage* Montage, bool bInterrupted);
	void OnMontageStarted(class UAnimMontage* Montage);
	void OnRep_PlayAnimation();
	void ServerPlayAnimation(const struct FAnimationPlayParams& Param);

	EAnimationId BP_GetCurrentAnimationId(EAnimationSlot Slot) const;
	float BP_GetCurrentPlayLength(EAnimationSlot Slot) const;
	float BP_GetCurrentPlayPosition(EAnimationSlot Slot) const;
	bool BP_IsActiveAnimation(EAnimationSlot Slot, EAnimationId ID) const;
	bool BP_IsBaseCommon() const;
	bool BP_IsInitialized() const;
	bool BP_IsPlayingAnimation(EAnimationSlot Slot, EAnimationId ID) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Animation">();
	}
	static class UAnimation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimation>();
	}
};
static_assert(alignof(UAnimation) == 0x000010, "Wrong alignment on UAnimation");
static_assert(sizeof(UAnimation) == 0x000710, "Wrong size on UAnimation");
static_assert(offsetof(UAnimation, _replicatedPlayParams) == 0x0005D8, "Member 'UAnimation::_replicatedPlayParams' has a wrong offset!");
static_assert(offsetof(UAnimation, _animInstance) == 0x0005E0, "Member 'UAnimation::_animInstance' has a wrong offset!");
static_assert(offsetof(UAnimation, _character) == 0x0005E8, "Member 'UAnimation::_character' has a wrong offset!");

// Class GameModule.AnimInstanceGame
// 0x01A0 (0x0460 - 0x02C0)
#pragma pack(push, 0x1)
class alignas(0x10) UAnimInstanceGame : public UAnimInstance
{
public:
	FMulticastInlineDelegateProperty_             OnPlayerCharacterSelectedIdleDelegate;             // 0x02B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlayerCharacterIdleDelegate;                     // 0x02C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	EAnimationMoveType                            MoveType;                                          // 0x02D8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D9[0x3];                                      // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WalkDirection;                                     // 0x02DC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         GaitValue;                                         // 0x02E0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WalkPlayRate;                                      // 0x02E4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WallcrawlLeftRight;                                // 0x02E8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WallcrawlUpDown;                                   // 0x02EC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WallcrawlPlayRate;                                 // 0x02F0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EAnimationLeanType                            LeanType;                                          // 0x02F4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F5[0x3];                                      // 0x02F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              LeanRate;                                          // 0x02F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAimOffsetBlendSpace1D*                 AimOffsetUpLower;                                  // 0x0300(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAimOffsetBlendSpace1D*                 AimOffsetLeftRight;                                // 0x0308(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AimingBlendRateUpper;                              // 0x0310(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AimingBlendRateLower;                              // 0x0314(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AimingBaseBlendRateL;                              // 0x0318(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AimingBaseBlendRateR;                              // 0x031C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AimingBaseBlendRateWings;                          // 0x0320(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AimingPitchRate;                                   // 0x0324(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AimingYawRate;                                     // 0x0328(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAimOffsetResetPlayTime;                           // 0x032C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_32D[0x3];                                      // 0x032D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AimOffsetPlayRate;                                 // 0x0330(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               COGRotation;                                       // 0x0334(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               COGRotationInv;                                    // 0x0340(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               SpineRotation;                                     // 0x034C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         SpineRotationRate;                                 // 0x0358(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                JointRootTransOffset;                              // 0x035C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               JointRootRotOffset;                                // 0x0368(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                                FaceTurnLocation;                                  // 0x0374(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FaceTurnRate;                                      // 0x0380(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FaceTurnHeadClamp;                                 // 0x0384(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FaceTurnNeckClamp;                                 // 0x0388(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FacialBlendRate;                                   // 0x038C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RHandHeadIkRate;                                   // 0x0390(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LipSyncBlendRate;                                  // 0x0394(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LipSyncRateA;                                      // 0x0398(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LipSyncRateI;                                      // 0x039C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LipSyncRateU;                                      // 0x03A0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LipSyncRateE;                                      // 0x03A4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LipSyncRateO;                                      // 0x03A8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LipSyncRateN;                                      // 0x03AC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOutgame;                                          // 0x03B0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B1[0x3];                                      // 0x03B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WalkGaitInterpSpeed;                               // 0x03B4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LeanInterpSpeed;                                   // 0x03B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3BC[0x4];                                      // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FSlotAssetData>      _slotData;                                         // 0x03C0(0x0050)(Protected, NativeAccessSpecifierProtected)
	TArray<class UAnimMontage*>                   _changedOutMontages;                               // 0x0410(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_420[0x20];                                     // 0x0420(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ThresholdEffectLOD_Windows;                        // 0x0440(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ThresholdEffectLOD_PS4;                            // 0x0444(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ThresholdEffectLOD_PS5;                            // 0x0448(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ThresholdEffectLOD_XboxOne;                        // 0x044C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ThresholdEffectLOD_Switch;                         // 0x0450(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ThresholdEffectLOD_Others;                         // 0x0454(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BP_EndNotifyStates();
	void PlayCharacterSelectIdle__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimInstanceGame">();
	}
	static class UAnimInstanceGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimInstanceGame>();
	}
};
#pragma pack(pop)
static_assert(alignof(UAnimInstanceGame) == 0x000010, "Wrong alignment on UAnimInstanceGame");
static_assert(sizeof(UAnimInstanceGame) == 0x000460, "Wrong size on UAnimInstanceGame");
static_assert(offsetof(UAnimInstanceGame, OnPlayerCharacterSelectedIdleDelegate) == 0x0002B8, "Member 'UAnimInstanceGame::OnPlayerCharacterSelectedIdleDelegate' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, OnPlayerCharacterIdleDelegate) == 0x0002C8, "Member 'UAnimInstanceGame::OnPlayerCharacterIdleDelegate' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, MoveType) == 0x0002D8, "Member 'UAnimInstanceGame::MoveType' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, WalkDirection) == 0x0002DC, "Member 'UAnimInstanceGame::WalkDirection' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, GaitValue) == 0x0002E0, "Member 'UAnimInstanceGame::GaitValue' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, WalkPlayRate) == 0x0002E4, "Member 'UAnimInstanceGame::WalkPlayRate' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, WallcrawlLeftRight) == 0x0002E8, "Member 'UAnimInstanceGame::WallcrawlLeftRight' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, WallcrawlUpDown) == 0x0002EC, "Member 'UAnimInstanceGame::WallcrawlUpDown' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, WallcrawlPlayRate) == 0x0002F0, "Member 'UAnimInstanceGame::WallcrawlPlayRate' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, LeanType) == 0x0002F4, "Member 'UAnimInstanceGame::LeanType' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, LeanRate) == 0x0002F8, "Member 'UAnimInstanceGame::LeanRate' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, AimOffsetUpLower) == 0x000300, "Member 'UAnimInstanceGame::AimOffsetUpLower' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, AimOffsetLeftRight) == 0x000308, "Member 'UAnimInstanceGame::AimOffsetLeftRight' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, AimingBlendRateUpper) == 0x000310, "Member 'UAnimInstanceGame::AimingBlendRateUpper' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, AimingBlendRateLower) == 0x000314, "Member 'UAnimInstanceGame::AimingBlendRateLower' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, AimingBaseBlendRateL) == 0x000318, "Member 'UAnimInstanceGame::AimingBaseBlendRateL' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, AimingBaseBlendRateR) == 0x00031C, "Member 'UAnimInstanceGame::AimingBaseBlendRateR' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, AimingBaseBlendRateWings) == 0x000320, "Member 'UAnimInstanceGame::AimingBaseBlendRateWings' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, AimingPitchRate) == 0x000324, "Member 'UAnimInstanceGame::AimingPitchRate' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, AimingYawRate) == 0x000328, "Member 'UAnimInstanceGame::AimingYawRate' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, bAimOffsetResetPlayTime) == 0x00032C, "Member 'UAnimInstanceGame::bAimOffsetResetPlayTime' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, AimOffsetPlayRate) == 0x000330, "Member 'UAnimInstanceGame::AimOffsetPlayRate' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, COGRotation) == 0x000334, "Member 'UAnimInstanceGame::COGRotation' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, COGRotationInv) == 0x000340, "Member 'UAnimInstanceGame::COGRotationInv' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, SpineRotation) == 0x00034C, "Member 'UAnimInstanceGame::SpineRotation' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, SpineRotationRate) == 0x000358, "Member 'UAnimInstanceGame::SpineRotationRate' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, JointRootTransOffset) == 0x00035C, "Member 'UAnimInstanceGame::JointRootTransOffset' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, JointRootRotOffset) == 0x000368, "Member 'UAnimInstanceGame::JointRootRotOffset' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, FaceTurnLocation) == 0x000374, "Member 'UAnimInstanceGame::FaceTurnLocation' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, FaceTurnRate) == 0x000380, "Member 'UAnimInstanceGame::FaceTurnRate' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, FaceTurnHeadClamp) == 0x000384, "Member 'UAnimInstanceGame::FaceTurnHeadClamp' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, FaceTurnNeckClamp) == 0x000388, "Member 'UAnimInstanceGame::FaceTurnNeckClamp' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, FacialBlendRate) == 0x00038C, "Member 'UAnimInstanceGame::FacialBlendRate' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, RHandHeadIkRate) == 0x000390, "Member 'UAnimInstanceGame::RHandHeadIkRate' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, LipSyncBlendRate) == 0x000394, "Member 'UAnimInstanceGame::LipSyncBlendRate' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, LipSyncRateA) == 0x000398, "Member 'UAnimInstanceGame::LipSyncRateA' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, LipSyncRateI) == 0x00039C, "Member 'UAnimInstanceGame::LipSyncRateI' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, LipSyncRateU) == 0x0003A0, "Member 'UAnimInstanceGame::LipSyncRateU' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, LipSyncRateE) == 0x0003A4, "Member 'UAnimInstanceGame::LipSyncRateE' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, LipSyncRateO) == 0x0003A8, "Member 'UAnimInstanceGame::LipSyncRateO' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, LipSyncRateN) == 0x0003AC, "Member 'UAnimInstanceGame::LipSyncRateN' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, bOutgame) == 0x0003B0, "Member 'UAnimInstanceGame::bOutgame' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, WalkGaitInterpSpeed) == 0x0003B4, "Member 'UAnimInstanceGame::WalkGaitInterpSpeed' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, LeanInterpSpeed) == 0x0003B8, "Member 'UAnimInstanceGame::LeanInterpSpeed' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, _slotData) == 0x0003C0, "Member 'UAnimInstanceGame::_slotData' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, _changedOutMontages) == 0x000410, "Member 'UAnimInstanceGame::_changedOutMontages' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, ThresholdEffectLOD_Windows) == 0x000440, "Member 'UAnimInstanceGame::ThresholdEffectLOD_Windows' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, ThresholdEffectLOD_PS4) == 0x000444, "Member 'UAnimInstanceGame::ThresholdEffectLOD_PS4' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, ThresholdEffectLOD_PS5) == 0x000448, "Member 'UAnimInstanceGame::ThresholdEffectLOD_PS5' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, ThresholdEffectLOD_XboxOne) == 0x00044C, "Member 'UAnimInstanceGame::ThresholdEffectLOD_XboxOne' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, ThresholdEffectLOD_Switch) == 0x000450, "Member 'UAnimInstanceGame::ThresholdEffectLOD_Switch' has a wrong offset!");
static_assert(offsetof(UAnimInstanceGame, ThresholdEffectLOD_Others) == 0x000454, "Member 'UAnimInstanceGame::ThresholdEffectLOD_Others' has a wrong offset!");

// Class GameModule.AnimInstancePostProcess
// 0x0000 (0x02C0 - 0x02C0)
class UAnimInstancePostProcess : public UAnimInstance
{
public:
	float                                         RHandHeadIkRate;                                   // 0x02B8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnResetAnimInstance();

	bool IsBaseCommon() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimInstancePostProcess">();
	}
	static class UAnimInstancePostProcess* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimInstancePostProcess>();
	}
};
static_assert(alignof(UAnimInstancePostProcess) == 0x000010, "Wrong alignment on UAnimInstancePostProcess");
static_assert(sizeof(UAnimInstancePostProcess) == 0x0002C0, "Wrong size on UAnimInstancePostProcess");
static_assert(offsetof(UAnimInstancePostProcess, RHandHeadIkRate) == 0x0002B8, "Member 'UAnimInstancePostProcess::RHandHeadIkRate' has a wrong offset!");

// Class GameModule.AnimResourcesWork
// 0x0140 (0x0170 - 0x0030)
class UAnimResourcesWork final : public UGameInstanceSubsystem
{
public:
	class UPrimaryAssetPermanent*                 _permanentAsset;                                   // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_38[0x138];                                     // 0x0038(0x0138)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimResourcesWork">();
	}
	static class UAnimResourcesWork* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimResourcesWork>();
	}
};
static_assert(alignof(UAnimResourcesWork) == 0x000008, "Wrong alignment on UAnimResourcesWork");
static_assert(sizeof(UAnimResourcesWork) == 0x000170, "Wrong size on UAnimResourcesWork");
static_assert(offsetof(UAnimResourcesWork, _permanentAsset) == 0x000030, "Member 'UAnimResourcesWork::_permanentAsset' has a wrong offset!");

// Class GameModule.ANS_MaterialSetScalarParam
// 0x0010 (0x0048 - 0x0038)
class UANS_MaterialSetScalarParam final : public UANS_CharacterBase
{
public:
	EMaterialGroupFlag                            _groupId;                                          // 0x0038(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _paramName;                                        // 0x003C(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _value;                                            // 0x0044(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ANS_MaterialSetScalarParam">();
	}
	static class UANS_MaterialSetScalarParam* GetDefaultObj()
	{
		return GetDefaultObjImpl<UANS_MaterialSetScalarParam>();
	}
};
static_assert(alignof(UANS_MaterialSetScalarParam) == 0x000008, "Wrong alignment on UANS_MaterialSetScalarParam");
static_assert(sizeof(UANS_MaterialSetScalarParam) == 0x000048, "Wrong size on UANS_MaterialSetScalarParam");
static_assert(offsetof(UANS_MaterialSetScalarParam, _groupId) == 0x000038, "Member 'UANS_MaterialSetScalarParam::_groupId' has a wrong offset!");
static_assert(offsetof(UANS_MaterialSetScalarParam, _paramName) == 0x00003C, "Member 'UANS_MaterialSetScalarParam::_paramName' has a wrong offset!");
static_assert(offsetof(UANS_MaterialSetScalarParam, _value) == 0x000044, "Member 'UANS_MaterialSetScalarParam::_value' has a wrong offset!");

// Class GameModule.ANS_MaterialVisiblity
// 0x0058 (0x0090 - 0x0038)
class UANS_MaterialVisiblity final : public UANS_CharacterBase
{
public:
	TMap<EMaterialHideFlag, bool>                 _visibleList;                                      // 0x0038(0x0050)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          _bContinue;                                        // 0x0088(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bInGameOnly;                                      // 0x0089(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bOutGameOnly;                                     // 0x008A(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8B[0x5];                                       // 0x008B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ANS_MaterialVisiblity">();
	}
	static class UANS_MaterialVisiblity* GetDefaultObj()
	{
		return GetDefaultObjImpl<UANS_MaterialVisiblity>();
	}
};
static_assert(alignof(UANS_MaterialVisiblity) == 0x000008, "Wrong alignment on UANS_MaterialVisiblity");
static_assert(sizeof(UANS_MaterialVisiblity) == 0x000090, "Wrong size on UANS_MaterialVisiblity");
static_assert(offsetof(UANS_MaterialVisiblity, _visibleList) == 0x000038, "Member 'UANS_MaterialVisiblity::_visibleList' has a wrong offset!");
static_assert(offsetof(UANS_MaterialVisiblity, _bContinue) == 0x000088, "Member 'UANS_MaterialVisiblity::_bContinue' has a wrong offset!");
static_assert(offsetof(UANS_MaterialVisiblity, _bInGameOnly) == 0x000089, "Member 'UANS_MaterialVisiblity::_bInGameOnly' has a wrong offset!");
static_assert(offsetof(UANS_MaterialVisiblity, _bOutGameOnly) == 0x00008A, "Member 'UANS_MaterialVisiblity::_bOutGameOnly' has a wrong offset!");

// Class GameModule.AsyncSaveGameOption
// 0x0060 (0x0090 - 0x0030)
class UAsyncSaveGameOption final : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_             _onAsyncSaveFinishedTaskThread;                    // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _onAsyncSaveFailedTaskThread;                      // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _onAsyncSaveFinishedMainThread;                    // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _onAsyncSaveFailedMainThread;                      // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class USaveGame*                              _saveGameObject;                                   // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_78[0x18];                                      // 0x0078(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAsyncSaveGameOption* AsyncSaveGameOption(class UObject* WorldContext);

	void Complete(bool bSuccess);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AsyncSaveGameOption">();
	}
	static class UAsyncSaveGameOption* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAsyncSaveGameOption>();
	}
};
static_assert(alignof(UAsyncSaveGameOption) == 0x000008, "Wrong alignment on UAsyncSaveGameOption");
static_assert(sizeof(UAsyncSaveGameOption) == 0x000090, "Wrong size on UAsyncSaveGameOption");
static_assert(offsetof(UAsyncSaveGameOption, _onAsyncSaveFinishedTaskThread) == 0x000030, "Member 'UAsyncSaveGameOption::_onAsyncSaveFinishedTaskThread' has a wrong offset!");
static_assert(offsetof(UAsyncSaveGameOption, _onAsyncSaveFailedTaskThread) == 0x000040, "Member 'UAsyncSaveGameOption::_onAsyncSaveFailedTaskThread' has a wrong offset!");
static_assert(offsetof(UAsyncSaveGameOption, _onAsyncSaveFinishedMainThread) == 0x000050, "Member 'UAsyncSaveGameOption::_onAsyncSaveFinishedMainThread' has a wrong offset!");
static_assert(offsetof(UAsyncSaveGameOption, _onAsyncSaveFailedMainThread) == 0x000060, "Member 'UAsyncSaveGameOption::_onAsyncSaveFailedMainThread' has a wrong offset!");
static_assert(offsetof(UAsyncSaveGameOption, _saveGameObject) == 0x000070, "Member 'UAsyncSaveGameOption::_saveGameObject' has a wrong offset!");

// Class GameModule.BGMSubsystem
// 0x0080 (0x00B0 - 0x0030)
class UBGMSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         _bgmAtomComponent;                                 // 0x0038(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FAtomComponentParams                   _bgmAtomComponentParams;                           // 0x0040(0x0060)(Config, NativeAccessSpecifierPrivate)
	class USoundAtomCueSheet*                     _cueSheet;                                         // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDataTable*                             _bgmList;                                          // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	bool IsPlayingAnyMusic();
	void PlayMusic(class USoundAtomCue* Cue);
	void SetAisacByName(const class FString& ControlName, float ControlValue);
	void StartMusic(class FName bgmType, bool bCrossFadeOnReleaseTimeBegin, float TimeToCrossFadeStartOnReleaseTimeBegin, bool bForceReplay);
	void StopNowPlayingMusic(bool bWithReleaseTime);
	void TransitNowPlayingMusicBlock(int32 BlockIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BGMSubsystem">();
	}
	static class UBGMSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBGMSubsystem>();
	}
};
static_assert(alignof(UBGMSubsystem) == 0x000008, "Wrong alignment on UBGMSubsystem");
static_assert(sizeof(UBGMSubsystem) == 0x0000B0, "Wrong size on UBGMSubsystem");
static_assert(offsetof(UBGMSubsystem, _bgmAtomComponent) == 0x000038, "Member 'UBGMSubsystem::_bgmAtomComponent' has a wrong offset!");
static_assert(offsetof(UBGMSubsystem, _bgmAtomComponentParams) == 0x000040, "Member 'UBGMSubsystem::_bgmAtomComponentParams' has a wrong offset!");
static_assert(offsetof(UBGMSubsystem, _cueSheet) == 0x0000A0, "Member 'UBGMSubsystem::_cueSheet' has a wrong offset!");
static_assert(offsetof(UBGMSubsystem, _bgmList) == 0x0000A8, "Member 'UBGMSubsystem::_bgmList' has a wrong offset!");

// Class GameModule.BlockListWidget
// 0x0060 (0x03B0 - 0x0350)
class UBlockListWidget : public UWidgetBase
{
public:
	class UWidgetGeneralWindow*                   _generalWindow;                                    // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   _leaderMessageText;                                // 0x0358(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   _memberMessageText;                                // 0x0370(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_388[0x28];                                     // 0x0388(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnClosedDelegate__DelegateSignature(bool bDecide);
	void OnCloseEvent();
	void OnCompletedFadeOut();
	void OnCompleteNotifyExitRoom();
	void OnOpenEvent();
	void OnWindowInputEvent(class UAppWidget* Widget, EWidgetInputType InputType, bool LeftButton);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlockListWidget">();
	}
	static class UBlockListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlockListWidget>();
	}
};
static_assert(alignof(UBlockListWidget) == 0x000008, "Wrong alignment on UBlockListWidget");
static_assert(sizeof(UBlockListWidget) == 0x0003B0, "Wrong size on UBlockListWidget");
static_assert(offsetof(UBlockListWidget, _generalWindow) == 0x000350, "Member 'UBlockListWidget::_generalWindow' has a wrong offset!");
static_assert(offsetof(UBlockListWidget, _leaderMessageText) == 0x000358, "Member 'UBlockListWidget::_leaderMessageText' has a wrong offset!");
static_assert(offsetof(UBlockListWidget, _memberMessageText) == 0x000370, "Member 'UBlockListWidget::_memberMessageText' has a wrong offset!");

// Class GameModule.BPActorUtilityComponent
// 0x0000 (0x00B0 - 0x00B0)
class UBPActorUtilityComponent : public UActorComponent
{
public:
	class UCustomParticleSystemComponent* BP_SpawnEmitterAtLocation(class UParticleSystem* EmitterTemplate, const struct FTransform& SpawnTransform, bool bAutoDestroy);
	class UCustomParticleSystemComponent* BP_SpawnEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, bool bAutoDestroy);
	class UCustomParticleSystemComponent* BP_SpawnEmitterVertex(class UParticleSystem* EmitterTemplate, class USkeletalMeshComponent* Mesh);

	bool BP_IsAvatar(ECharacterId CharacterId) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BPActorUtilityComponent">();
	}
	static class UBPActorUtilityComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPActorUtilityComponent>();
	}
};
static_assert(alignof(UBPActorUtilityComponent) == 0x000008, "Wrong alignment on UBPActorUtilityComponent");
static_assert(sizeof(UBPActorUtilityComponent) == 0x0000B0, "Wrong size on UBPActorUtilityComponent");

// Class GameModule.CameraComponentForOffCenterProjection
// 0x0010 (0x07E0 - 0x07D0)
class UCameraComponentForOffCenterProjection final : public UCameraComponent
{
public:
	struct FVector2D                              _offCenterProjectionOffset;                        // 0x07D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7D8[0x8];                                      // 0x07D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraComponentForOffCenterProjection">();
	}
	static class UCameraComponentForOffCenterProjection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraComponentForOffCenterProjection>();
	}
};
static_assert(alignof(UCameraComponentForOffCenterProjection) == 0x000010, "Wrong alignment on UCameraComponentForOffCenterProjection");
static_assert(sizeof(UCameraComponentForOffCenterProjection) == 0x0007E0, "Wrong size on UCameraComponentForOffCenterProjection");
static_assert(offsetof(UCameraComponentForOffCenterProjection, _offCenterProjectionOffset) == 0x0007D0, "Member 'UCameraComponentForOffCenterProjection::_offCenterProjectionOffset' has a wrong offset!");

// Class GameModule.CharacterAvatarComponent
// 0x0090 (0x0140 - 0x00B0)
class UCharacterAvatarComponent final : public UActorComponent
{
public:
	struct FAvatarCharaCustomParam                _avatarCustomParam;                                // 0x00B0(0x0020)(Net, NoDestructor, NativeAccessSpecifierPrivate)
	TArray<int8>                                  _avatarColors;                                     // 0x00D0(0x0010)(Net, ZeroConstructor, NativeAccessSpecifierPrivate)
	class USkeletalMeshComponent*                 MorphTargetMesh;                                   // 0x00E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E8[0x58];                                      // 0x00E8(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float BP_GetAvatarBodyPhysique() const;
	float BP_GetAvatarBodyScale() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharacterAvatarComponent">();
	}
	static class UCharacterAvatarComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharacterAvatarComponent>();
	}
};
static_assert(alignof(UCharacterAvatarComponent) == 0x000008, "Wrong alignment on UCharacterAvatarComponent");
static_assert(sizeof(UCharacterAvatarComponent) == 0x000140, "Wrong size on UCharacterAvatarComponent");
static_assert(offsetof(UCharacterAvatarComponent, _avatarCustomParam) == 0x0000B0, "Member 'UCharacterAvatarComponent::_avatarCustomParam' has a wrong offset!");
static_assert(offsetof(UCharacterAvatarComponent, _avatarColors) == 0x0000D0, "Member 'UCharacterAvatarComponent::_avatarColors' has a wrong offset!");
static_assert(offsetof(UCharacterAvatarComponent, MorphTargetMesh) == 0x0000E0, "Member 'UCharacterAvatarComponent::MorphTargetMesh' has a wrong offset!");

// Class GameModule.CharacterGame
// 0x0178 (0x04C8 - 0x0350)
class ACharacterGame : public ACharacterBase
{
public:
	ECharacterId                                  _characterId;                                      // 0x0350(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_351[0x3];                                      // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        _costumeCode;                                      // 0x0354(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         _costumeAuraType;                                  // 0x0358(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EGameOptionAuraDispType                       _costumeAuraDisplayTarget;                         // 0x0359(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EGameOptionAuraAreaType                       _costumeAuraDisplayArea;                           // 0x035A(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         _variationNo;                                      // 0x035B(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ECharacterFlags                               _characterFlags;                                   // 0x035C(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bImpersonator;                                    // 0x0360(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_361[0x17];                                     // 0x0361(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	class UOutlineSkeletalMeshComponent*          _outerMesh;                                        // 0x0378(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPrimaryAssetCharacter*                 _primaryAsset;                                     // 0x0380(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimation*                             _animation;                                        // 0x0390(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<int32>                                 _emoteCodes;                                       // 0x0398(0x0010)(Net, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3A8[0x38];                                     // 0x03A8(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacterGame*                         _characterDefaultObject;                           // 0x03E0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCharacterStateBase*                    _characterStateBase;                               // 0x03E8(0x0008)(Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_             OnSetupMaterialDelegate;                           // 0x03F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UMaterialControlComponent*              _materialControlComponent;                         // 0x0400(0x0008)(Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<int8>                                  _costumeColors;                                    // 0x0408(0x0010)(Net, ZeroConstructor, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     _plusUltraOutlineMaterial;                         // 0x0418(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     _outlineMaterialFriend;                            // 0x0420(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     _outlineMaterialEnemy;                             // 0x0428(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UMaterialInterface*>             _outlineMaterialsLeader;                           // 0x0430(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UMaterialInterface*>             _outlineMaterials;                                 // 0x0440(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class UCharacterAvatarComponent*              _avatarComponent;                                  // 0x0450(0x0008)(ExportObject, Net, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<uint16>                                _accessoryIds;                                     // 0x0458(0x0010)(Net, ZeroConstructor, NativeAccessSpecifierPrivate)
	class UAccessory*                             _accessory;                                        // 0x0468(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FAccessaryEffectRegistData>     _accessoryEffectList;                              // 0x0470(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class UBPActorUtilityComponent*               _bpUtilityComponent;                               // 0x0480(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<int32>                                 _voiceCodes;                                       // 0x0488(0x0010)(Net, ZeroConstructor, NativeAccessSpecifierPrivate)
	class UCharacterVoiceComponent*               _voiceComponent;                                   // 0x0498(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCharacterTimeDilationComponent*        _timeDilationComponent;                            // 0x04A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4A8[0x20];                                     // 0x04A8(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_ChangeAnimBlueprint(class UClass* AnimBPClass);
	void BP_HideAllImpersonationBone();
	void BP_UnHideImpersonationBone(class FName BoneName);
	class UCustomParticleSystemComponent* EnableAuraEffect(bool Flag);
	void OnSetupMaterialDelegate__DelegateSignature();

	class UAnimation* BP_GetAnimation() const;
	class UBPActorUtilityComponent* BP_GetBPActorUtilityComponent() const;
	ECharacterId BP_GetCharacterId() const;
	class USkeletalMesh* BP_GetCostumeMesh() const;
	class UMaterialControlComponent* BP_GetMaterialControl() const;
	class USkeletalMesh* BP_GetOptionMesh(class FName PotionName) const;
	int32 BP_GetVariationNo() const;
	bool BP_IsImpersonator() const;
	class UCharacterAvatarComponent* GetAvatarComponent() const;
	class USkeletalMeshComponent* GetVisualMesh() const;
	bool IsAvatarCharacter() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharacterGame">();
	}
	static class ACharacterGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACharacterGame>();
	}
};
static_assert(alignof(ACharacterGame) == 0x000008, "Wrong alignment on ACharacterGame");
static_assert(sizeof(ACharacterGame) == 0x0004C8, "Wrong size on ACharacterGame");
static_assert(offsetof(ACharacterGame, _characterId) == 0x000350, "Member 'ACharacterGame::_characterId' has a wrong offset!");
static_assert(offsetof(ACharacterGame, _costumeCode) == 0x000354, "Member 'ACharacterGame::_costumeCode' has a wrong offset!");
static_assert(offsetof(ACharacterGame, _costumeAuraType) == 0x000358, "Member 'ACharacterGame::_costumeAuraType' has a wrong offset!");
static_assert(offsetof(ACharacterGame, _costumeAuraDisplayTarget) == 0x000359, "Member 'ACharacterGame::_costumeAuraDisplayTarget' has a wrong offset!");
static_assert(offsetof(ACharacterGame, _costumeAuraDisplayArea) == 0x00035A, "Member 'ACharacterGame::_costumeAuraDisplayArea' has a wrong offset!");
static_assert(offsetof(ACharacterGame, _variationNo) == 0x00035B, "Member 'ACharacterGame::_variationNo' has a wrong offset!");
static_assert(offsetof(ACharacterGame, _characterFlags) == 0x00035C, "Member 'ACharacterGame::_characterFlags' has a wrong offset!");
static_assert(offsetof(ACharacterGame, _bImpersonator) == 0x000360, "Member 'ACharacterGame::_bImpersonator' has a wrong offset!");
static_assert(offsetof(ACharacterGame, _outerMesh) == 0x000378, "Member 'ACharacterGame::_outerMesh' has a wrong offset!");
static_assert(offsetof(ACharacterGame, _primaryAsset) == 0x000380, "Member 'ACharacterGame::_primaryAsset' has a wrong offset!");
static_assert(offsetof(ACharacterGame, _animation) == 0x000390, "Member 'ACharacterGame::_animation' has a wrong offset!");
static_assert(offsetof(ACharacterGame, _emoteCodes) == 0x000398, "Member 'ACharacterGame::_emoteCodes' has a wrong offset!");
static_assert(offsetof(ACharacterGame, _characterDefaultObject) == 0x0003E0, "Member 'ACharacterGame::_characterDefaultObject' has a wrong offset!");
static_assert(offsetof(ACharacterGame, _characterStateBase) == 0x0003E8, "Member 'ACharacterGame::_characterStateBase' has a wrong offset!");
static_assert(offsetof(ACharacterGame, OnSetupMaterialDelegate) == 0x0003F0, "Member 'ACharacterGame::OnSetupMaterialDelegate' has a wrong offset!");
static_assert(offsetof(ACharacterGame, _materialControlComponent) == 0x000400, "Member 'ACharacterGame::_materialControlComponent' has a wrong offset!");
static_assert(offsetof(ACharacterGame, _costumeColors) == 0x000408, "Member 'ACharacterGame::_costumeColors' has a wrong offset!");
static_assert(offsetof(ACharacterGame, _plusUltraOutlineMaterial) == 0x000418, "Member 'ACharacterGame::_plusUltraOutlineMaterial' has a wrong offset!");
static_assert(offsetof(ACharacterGame, _outlineMaterialFriend) == 0x000420, "Member 'ACharacterGame::_outlineMaterialFriend' has a wrong offset!");
static_assert(offsetof(ACharacterGame, _outlineMaterialEnemy) == 0x000428, "Member 'ACharacterGame::_outlineMaterialEnemy' has a wrong offset!");
static_assert(offsetof(ACharacterGame, _outlineMaterialsLeader) == 0x000430, "Member 'ACharacterGame::_outlineMaterialsLeader' has a wrong offset!");
static_assert(offsetof(ACharacterGame, _outlineMaterials) == 0x000440, "Member 'ACharacterGame::_outlineMaterials' has a wrong offset!");
static_assert(offsetof(ACharacterGame, _avatarComponent) == 0x000450, "Member 'ACharacterGame::_avatarComponent' has a wrong offset!");
static_assert(offsetof(ACharacterGame, _accessoryIds) == 0x000458, "Member 'ACharacterGame::_accessoryIds' has a wrong offset!");
static_assert(offsetof(ACharacterGame, _accessory) == 0x000468, "Member 'ACharacterGame::_accessory' has a wrong offset!");
static_assert(offsetof(ACharacterGame, _accessoryEffectList) == 0x000470, "Member 'ACharacterGame::_accessoryEffectList' has a wrong offset!");
static_assert(offsetof(ACharacterGame, _bpUtilityComponent) == 0x000480, "Member 'ACharacterGame::_bpUtilityComponent' has a wrong offset!");
static_assert(offsetof(ACharacterGame, _voiceCodes) == 0x000488, "Member 'ACharacterGame::_voiceCodes' has a wrong offset!");
static_assert(offsetof(ACharacterGame, _voiceComponent) == 0x000498, "Member 'ACharacterGame::_voiceComponent' has a wrong offset!");
static_assert(offsetof(ACharacterGame, _timeDilationComponent) == 0x0004A0, "Member 'ACharacterGame::_timeDilationComponent' has a wrong offset!");

// Class GameModule.CharacterScoreWidget
// 0x0060 (0x03B0 - 0x0350)
class UCharacterScoreWidget final : public UWidgetBase
{
public:
	class UImage*                                 _bgImage;                                          // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTextBlock*                             _scoreNameText;                                    // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTextBlock*                             _scoreValueText;                                   // 0x0360(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bSupport;                                         // 0x0368(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   _scoreName;                                        // 0x0370(0x0018)(Edit, NativeAccessSpecifierPrivate)
	class FText                                   _valueText;                                        // 0x0388(0x0018)(Edit, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     battleScoreBrush;                                  // 0x03A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     SupportScoreBrush;                                 // 0x03A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharacterScoreWidget">();
	}
	static class UCharacterScoreWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharacterScoreWidget>();
	}
};
static_assert(alignof(UCharacterScoreWidget) == 0x000008, "Wrong alignment on UCharacterScoreWidget");
static_assert(sizeof(UCharacterScoreWidget) == 0x0003B0, "Wrong size on UCharacterScoreWidget");
static_assert(offsetof(UCharacterScoreWidget, _bgImage) == 0x000350, "Member 'UCharacterScoreWidget::_bgImage' has a wrong offset!");
static_assert(offsetof(UCharacterScoreWidget, _scoreNameText) == 0x000358, "Member 'UCharacterScoreWidget::_scoreNameText' has a wrong offset!");
static_assert(offsetof(UCharacterScoreWidget, _scoreValueText) == 0x000360, "Member 'UCharacterScoreWidget::_scoreValueText' has a wrong offset!");
static_assert(offsetof(UCharacterScoreWidget, _bSupport) == 0x000368, "Member 'UCharacterScoreWidget::_bSupport' has a wrong offset!");
static_assert(offsetof(UCharacterScoreWidget, _scoreName) == 0x000370, "Member 'UCharacterScoreWidget::_scoreName' has a wrong offset!");
static_assert(offsetof(UCharacterScoreWidget, _valueText) == 0x000388, "Member 'UCharacterScoreWidget::_valueText' has a wrong offset!");
static_assert(offsetof(UCharacterScoreWidget, battleScoreBrush) == 0x0003A0, "Member 'UCharacterScoreWidget::battleScoreBrush' has a wrong offset!");
static_assert(offsetof(UCharacterScoreWidget, SupportScoreBrush) == 0x0003A8, "Member 'UCharacterScoreWidget::SupportScoreBrush' has a wrong offset!");

// Class GameModule.CharacterSoundComponent
// 0x0010 (0x1250 - 0x1240)
class UCharacterSoundComponent : public UAtomComponent
{
public:
	class ACharacterGame*                         _ownerCharacterGame;                               // 0x1240(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1248[0x8];                                     // 0x1248(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharacterSoundComponent">();
	}
	static class UCharacterSoundComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharacterSoundComponent>();
	}
};
static_assert(alignof(UCharacterSoundComponent) == 0x000010, "Wrong alignment on UCharacterSoundComponent");
static_assert(sizeof(UCharacterSoundComponent) == 0x001250, "Wrong size on UCharacterSoundComponent");
static_assert(offsetof(UCharacterSoundComponent, _ownerCharacterGame) == 0x001240, "Member 'UCharacterSoundComponent::_ownerCharacterGame' has a wrong offset!");

// Class GameModule.CharacterStateBase
// 0x0010 (0x0038 - 0x0028)
class UCharacterStateBase : public UObject
{
public:
	class ACharacterGame*                         _ownerCharacter;                                   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_SetAirialState();
	void BP_SetGroundState();

	bool BP_IsOnGround() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharacterStateBase">();
	}
	static class UCharacterStateBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharacterStateBase>();
	}
};
static_assert(alignof(UCharacterStateBase) == 0x000008, "Wrong alignment on UCharacterStateBase");
static_assert(sizeof(UCharacterStateBase) == 0x000038, "Wrong size on UCharacterStateBase");
static_assert(offsetof(UCharacterStateBase, _ownerCharacter) == 0x000028, "Member 'UCharacterStateBase::_ownerCharacter' has a wrong offset!");

// Class GameModule.TimeDilationComponent
// 0x0018 (0x00C8 - 0x00B0)
class UTimeDilationComponent : public UActorComponent
{
public:
	uint8                                         Pad_B0[0x18];                                      // 0x00B0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TimeDilationComponent">();
	}
	static class UTimeDilationComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTimeDilationComponent>();
	}
};
static_assert(alignof(UTimeDilationComponent) == 0x000008, "Wrong alignment on UTimeDilationComponent");
static_assert(sizeof(UTimeDilationComponent) == 0x0000C8, "Wrong size on UTimeDilationComponent");

// Class GameModule.CharacterTimeDilationComponent
// 0x0000 (0x00C8 - 0x00C8)
class UCharacterTimeDilationComponent final : public UTimeDilationComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharacterTimeDilationComponent">();
	}
	static class UCharacterTimeDilationComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharacterTimeDilationComponent>();
	}
};
static_assert(alignof(UCharacterTimeDilationComponent) == 0x000008, "Wrong alignment on UCharacterTimeDilationComponent");
static_assert(sizeof(UCharacterTimeDilationComponent) == 0x0000C8, "Wrong size on UCharacterTimeDilationComponent");

// Class GameModule.CharacterVoiceComponent
// 0x0030 (0x1270 - 0x1240)
class UCharacterVoiceComponent : public UAtomComponent
{
public:
	class ACharacterGame*                         _ownerCharacterGame;                               // 0x1240(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1248[0x28];                                    // 0x1248(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAudioFinishedEvent(class UAtomComponent* AtomComponent);
	void PlayNextVoice();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharacterVoiceComponent">();
	}
	static class UCharacterVoiceComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharacterVoiceComponent>();
	}
};
static_assert(alignof(UCharacterVoiceComponent) == 0x000010, "Wrong alignment on UCharacterVoiceComponent");
static_assert(sizeof(UCharacterVoiceComponent) == 0x001270, "Wrong size on UCharacterVoiceComponent");
static_assert(offsetof(UCharacterVoiceComponent, _ownerCharacterGame) == 0x001240, "Member 'UCharacterVoiceComponent::_ownerCharacterGame' has a wrong offset!");

// Class GameModule.ChatMemberWidget
// 0x0018 (0x0368 - 0x0350)
class UChatMemberWidget : public UWidgetBase
{
public:
	class UChatStatusWidget*                      _mySelfChatStatusWidget;                           // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UChatStatusWidget*                      _member1ChatStatusWidget;                          // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UChatStatusWidget*                      _member2chatStatusWidget;                          // 0x0360(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChatMemberWidget">();
	}
	static class UChatMemberWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChatMemberWidget>();
	}
};
static_assert(alignof(UChatMemberWidget) == 0x000008, "Wrong alignment on UChatMemberWidget");
static_assert(sizeof(UChatMemberWidget) == 0x000368, "Wrong size on UChatMemberWidget");
static_assert(offsetof(UChatMemberWidget, _mySelfChatStatusWidget) == 0x000350, "Member 'UChatMemberWidget::_mySelfChatStatusWidget' has a wrong offset!");
static_assert(offsetof(UChatMemberWidget, _member1ChatStatusWidget) == 0x000358, "Member 'UChatMemberWidget::_member1ChatStatusWidget' has a wrong offset!");
static_assert(offsetof(UChatMemberWidget, _member2chatStatusWidget) == 0x000360, "Member 'UChatMemberWidget::_member2chatStatusWidget' has a wrong offset!");

// Class GameModule.ChatMute
// 0x0A08 (0x0D58 - 0x0350)
class UChatMute final : public UWidgetBase
{
public:
	bool                                          _bOpenWindow;                                      // 0x0350(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_351[0x7];                                      // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPlatformWidgetButton*>          _buttonArray;                                      // 0x0358(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_368[0x10];                                     // 0x0368(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlatformWidgetButton*                  _closeButton;                                      // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_380[0x4C8];                                    // 0x0380(0x04C8)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanel*                           _memberPanelOne;                                   // 0x0848(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlatformWidgetButton*                  _memberButtonOne;                                  // 0x0850(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UChatMuteIcon*                          _memberChatIconOne;                                // 0x0858(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAdjustTextWidget*                      _memberTextOne;                                    // 0x0860(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_868[0x4C8];                                    // 0x0868(0x04C8)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanel*                           _memberPanelTwo;                                   // 0x0D30(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlatformWidgetButton*                  _memberButtonTwo;                                  // 0x0D38(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UChatMuteIcon*                          _memberChatIconTwo;                                // 0x0D40(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAdjustTextWidget*                      _memberTextTwo;                                    // 0x0D48(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Ani_Start;                                         // 0x0D50(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BP_Open();
	void Close(class UAppWidget* Widget, EWidgetInputType InputType);
	void OnChangeSquad(int32 SquadNum);
	void PressMuteButton(class UAppWidget* Widget, EWidgetInputType InputType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChatMute">();
	}
	static class UChatMute* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChatMute>();
	}
};
static_assert(alignof(UChatMute) == 0x000008, "Wrong alignment on UChatMute");
static_assert(sizeof(UChatMute) == 0x000D58, "Wrong size on UChatMute");
static_assert(offsetof(UChatMute, _bOpenWindow) == 0x000350, "Member 'UChatMute::_bOpenWindow' has a wrong offset!");
static_assert(offsetof(UChatMute, _buttonArray) == 0x000358, "Member 'UChatMute::_buttonArray' has a wrong offset!");
static_assert(offsetof(UChatMute, _closeButton) == 0x000378, "Member 'UChatMute::_closeButton' has a wrong offset!");
static_assert(offsetof(UChatMute, _memberPanelOne) == 0x000848, "Member 'UChatMute::_memberPanelOne' has a wrong offset!");
static_assert(offsetof(UChatMute, _memberButtonOne) == 0x000850, "Member 'UChatMute::_memberButtonOne' has a wrong offset!");
static_assert(offsetof(UChatMute, _memberChatIconOne) == 0x000858, "Member 'UChatMute::_memberChatIconOne' has a wrong offset!");
static_assert(offsetof(UChatMute, _memberTextOne) == 0x000860, "Member 'UChatMute::_memberTextOne' has a wrong offset!");
static_assert(offsetof(UChatMute, _memberPanelTwo) == 0x000D30, "Member 'UChatMute::_memberPanelTwo' has a wrong offset!");
static_assert(offsetof(UChatMute, _memberButtonTwo) == 0x000D38, "Member 'UChatMute::_memberButtonTwo' has a wrong offset!");
static_assert(offsetof(UChatMute, _memberChatIconTwo) == 0x000D40, "Member 'UChatMute::_memberChatIconTwo' has a wrong offset!");
static_assert(offsetof(UChatMute, _memberTextTwo) == 0x000D48, "Member 'UChatMute::_memberTextTwo' has a wrong offset!");
static_assert(offsetof(UChatMute, Ani_Start) == 0x000D50, "Member 'UChatMute::Ani_Start' has a wrong offset!");

// Class GameModule.ChatMuteIcon
// 0x0020 (0x0370 - 0x0350)
class UChatMuteIcon final : public UWidgetBase
{
public:
	class UImage*                                 _mute;                                             // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 _megaphone;                                        // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 _talking;                                          // 0x0360(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 _soundWave;                                        // 0x0368(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChatMuteIcon">();
	}
	static class UChatMuteIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChatMuteIcon>();
	}
};
static_assert(alignof(UChatMuteIcon) == 0x000008, "Wrong alignment on UChatMuteIcon");
static_assert(sizeof(UChatMuteIcon) == 0x000370, "Wrong size on UChatMuteIcon");
static_assert(offsetof(UChatMuteIcon, _mute) == 0x000350, "Member 'UChatMuteIcon::_mute' has a wrong offset!");
static_assert(offsetof(UChatMuteIcon, _megaphone) == 0x000358, "Member 'UChatMuteIcon::_megaphone' has a wrong offset!");
static_assert(offsetof(UChatMuteIcon, _talking) == 0x000360, "Member 'UChatMuteIcon::_talking' has a wrong offset!");
static_assert(offsetof(UChatMuteIcon, _soundWave) == 0x000368, "Member 'UChatMuteIcon::_soundWave' has a wrong offset!");

// Class GameModule.ChatStatusWidget
// 0x0040 (0x0390 - 0x0350)
class UChatStatusWidget : public UWidgetBase
{
public:
	class UCanvasPanel*                           _animCanvasPanel;                                  // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAdjustTextWidget*                      _playerName;                                       // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             _playerOnlineId;                                   // 0x0360(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlayerVoiceChatStateWidget*            _voiceChatState;                                   // 0x0368(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_370[0x18];                                     // 0x0370(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameSequenceWork*                      _gameSequenceWork;                                 // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnVCBeginTalk(const class FString& UniqueNetId);
	void OnVCDisconnected(const class FString& UniqueNetId);
	void OnVCEndTalk(const class FString& UniqueNetId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChatStatusWidget">();
	}
	static class UChatStatusWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChatStatusWidget>();
	}
};
static_assert(alignof(UChatStatusWidget) == 0x000008, "Wrong alignment on UChatStatusWidget");
static_assert(sizeof(UChatStatusWidget) == 0x000390, "Wrong size on UChatStatusWidget");
static_assert(offsetof(UChatStatusWidget, _animCanvasPanel) == 0x000350, "Member 'UChatStatusWidget::_animCanvasPanel' has a wrong offset!");
static_assert(offsetof(UChatStatusWidget, _playerName) == 0x000358, "Member 'UChatStatusWidget::_playerName' has a wrong offset!");
static_assert(offsetof(UChatStatusWidget, _playerOnlineId) == 0x000360, "Member 'UChatStatusWidget::_playerOnlineId' has a wrong offset!");
static_assert(offsetof(UChatStatusWidget, _voiceChatState) == 0x000368, "Member 'UChatStatusWidget::_voiceChatState' has a wrong offset!");
static_assert(offsetof(UChatStatusWidget, _gameSequenceWork) == 0x000388, "Member 'UChatStatusWidget::_gameSequenceWork' has a wrong offset!");

// Class GameModule.Cheat
// 0x0000 (0x0088 - 0x0088)
class UCheat : public UCheatManager
{
public:
	static void WritePGO();

	void DIP();
	void OpenDevelopMenu();
	void QueryAchievements();
	void SetCachedUniqueNetId();
	void SetTrophy(int32 Index_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cheat">();
	}
	static class UCheat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheat>();
	}
};
static_assert(alignof(UCheat) == 0x000008, "Wrong alignment on UCheat");
static_assert(sizeof(UCheat) == 0x000088, "Wrong size on UCheat");

// Class GameModule.PlatformWidgetButton
// 0x01A8 (0x0630 - 0x0488)
class UPlatformWidgetButton : public UWidgetButton
{
public:
	class UPlatformRichTextBlock*                 _singleButtonImg;                                  // 0x0488(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URichTextBlock*                         _messageText;                                      // 0x0490(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bGrayOut;                                         // 0x0498(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_499[0x3];                                      // 0x0499(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           _grayOutColor;                                     // 0x049C(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bLocalizationOverlapStyle;                        // 0x04AC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4AD[0x3];                                      // 0x04AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EMdLocalization, class FText>            _localizationTextStyleMap;                         // 0x04B0(0x0050)(Edit, NativeAccessSpecifierPublic)
	bool                                          _bFromCommand;                                     // 0x0500(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bWithRim;                                         // 0x0501(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKeyConfigurableCommand                       _command;                                          // 0x0502(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_503[0x5];                                      // 0x0503(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   _rowGamePadKey;                                    // 0x0508(0x0018)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   _rowKeyboardKey;                                   // 0x0520(0x0018)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 _buttonImage;                                      // 0x0538(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bIsContinuousPlaySE;                              // 0x0540(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bUseMultipleButtons;                              // 0x0541(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_542[0x6];                                      // 0x0542(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKey>                           _multiRawGamePadKeys;                              // 0x0548(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           _multiKeyboardKeys;                                // 0x0558(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         _multiButtonsSeparatorFont;                        // 0x0568(0x0058)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHorizontalBox*                         _gamePadButtonImageHoriBox;                        // 0x05C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHorizontalBox*                         _keyboardButtonImageHoriBox;                       // 0x05C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHorizontalBox*                         _multipleButtonGuideHoriBox;                       // 0x05D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetSwitcher*                        _multipleButtonGuideSwitcher;                      // 0x05D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bUsePressAtomCue;                                 // 0x05E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bUseFocusAtomCue;                                 // 0x05E1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bUseShortcutAtomCue;                              // 0x05E2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bUseNegativeAtomCue;                              // 0x05E3(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E4[0x4];                                      // 0x05E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          _pressAtomCue;                                     // 0x05E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          _focusAtomCue;                                     // 0x05F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          _focusShortcutAtomCue;                             // 0x05F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAtomCue*                          _negativeAtomCue;                                  // 0x0600(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bAdjustmentJustSize;                              // 0x0608(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_609[0x3];                                      // 0x0609(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              _MarginSize;                                       // 0x060C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_614[0x4];                                      // 0x0614(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFocusAnimationWidget*                  _focusWidget;                                      // 0x0618(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAtomComponent*                         _atomComp;                                         // 0x0620(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_628[0x8];                                      // 0x0628(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_SetEnable(bool Enable);
	void BP_SetOverrideFocusAtomCue(class USoundAtomCue* AtomCue);
	void BP_SetOverrideNegativeAtomCue(class USoundAtomCue* AtomCue);
	void BP_SetOverridePressAtomCue(class USoundAtomCue* AtomCue);
	void BP_SetOverrideShortcutAtomCue(class USoundAtomCue* AtomCue);
	void BP_UpdateSingleButtonImg();
	void ResetAtomComp();
	void SetAdjustmentJustSize(const bool bAdjustmentJustSize);
	void SetupMultipleButton();
	void SetViewButtonGuide(const bool bView);
	void SwitchMultipleButtonGuide();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlatformWidgetButton">();
	}
	static class UPlatformWidgetButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlatformWidgetButton>();
	}
};
static_assert(alignof(UPlatformWidgetButton) == 0x000008, "Wrong alignment on UPlatformWidgetButton");
static_assert(sizeof(UPlatformWidgetButton) == 0x000630, "Wrong size on UPlatformWidgetButton");
static_assert(offsetof(UPlatformWidgetButton, _singleButtonImg) == 0x000488, "Member 'UPlatformWidgetButton::_singleButtonImg' has a wrong offset!");
static_assert(offsetof(UPlatformWidgetButton, _messageText) == 0x000490, "Member 'UPlatformWidgetButton::_messageText' has a wrong offset!");
static_assert(offsetof(UPlatformWidgetButton, _bGrayOut) == 0x000498, "Member 'UPlatformWidgetButton::_bGrayOut' has a wrong offset!");
static_assert(offsetof(UPlatformWidgetButton, _grayOutColor) == 0x00049C, "Member 'UPlatformWidgetButton::_grayOutColor' has a wrong offset!");
static_assert(offsetof(UPlatformWidgetButton, _bLocalizationOverlapStyle) == 0x0004AC, "Member 'UPlatformWidgetButton::_bLocalizationOverlapStyle' has a wrong offset!");
static_assert(offsetof(UPlatformWidgetButton, _localizationTextStyleMap) == 0x0004B0, "Member 'UPlatformWidgetButton::_localizationTextStyleMap' has a wrong offset!");
static_assert(offsetof(UPlatformWidgetButton, _bFromCommand) == 0x000500, "Member 'UPlatformWidgetButton::_bFromCommand' has a wrong offset!");
static_assert(offsetof(UPlatformWidgetButton, _bWithRim) == 0x000501, "Member 'UPlatformWidgetButton::_bWithRim' has a wrong offset!");
static_assert(offsetof(UPlatformWidgetButton, _command) == 0x000502, "Member 'UPlatformWidgetButton::_command' has a wrong offset!");
static_assert(offsetof(UPlatformWidgetButton, _rowGamePadKey) == 0x000508, "Member 'UPlatformWidgetButton::_rowGamePadKey' has a wrong offset!");
static_assert(offsetof(UPlatformWidgetButton, _rowKeyboardKey) == 0x000520, "Member 'UPlatformWidgetButton::_rowKeyboardKey' has a wrong offset!");
static_assert(offsetof(UPlatformWidgetButton, _buttonImage) == 0x000538, "Member 'UPlatformWidgetButton::_buttonImage' has a wrong offset!");
static_assert(offsetof(UPlatformWidgetButton, _bIsContinuousPlaySE) == 0x000540, "Member 'UPlatformWidgetButton::_bIsContinuousPlaySE' has a wrong offset!");
static_assert(offsetof(UPlatformWidgetButton, _bUseMultipleButtons) == 0x000541, "Member 'UPlatformWidgetButton::_bUseMultipleButtons' has a wrong offset!");
static_assert(offsetof(UPlatformWidgetButton, _multiRawGamePadKeys) == 0x000548, "Member 'UPlatformWidgetButton::_multiRawGamePadKeys' has a wrong offset!");
static_assert(offsetof(UPlatformWidgetButton, _multiKeyboardKeys) == 0x000558, "Member 'UPlatformWidgetButton::_multiKeyboardKeys' has a wrong offset!");
static_assert(offsetof(UPlatformWidgetButton, _multiButtonsSeparatorFont) == 0x000568, "Member 'UPlatformWidgetButton::_multiButtonsSeparatorFont' has a wrong offset!");
static_assert(offsetof(UPlatformWidgetButton, _gamePadButtonImageHoriBox) == 0x0005C0, "Member 'UPlatformWidgetButton::_gamePadButtonImageHoriBox' has a wrong offset!");
static_assert(offsetof(UPlatformWidgetButton, _keyboardButtonImageHoriBox) == 0x0005C8, "Member 'UPlatformWidgetButton::_keyboardButtonImageHoriBox' has a wrong offset!");
static_assert(offsetof(UPlatformWidgetButton, _multipleButtonGuideHoriBox) == 0x0005D0, "Member 'UPlatformWidgetButton::_multipleButtonGuideHoriBox' has a wrong offset!");
static_assert(offsetof(UPlatformWidgetButton, _multipleButtonGuideSwitcher) == 0x0005D8, "Member 'UPlatformWidgetButton::_multipleButtonGuideSwitcher' has a wrong offset!");
static_assert(offsetof(UPlatformWidgetButton, _bUsePressAtomCue) == 0x0005E0, "Member 'UPlatformWidgetButton::_bUsePressAtomCue' has a wrong offset!");
static_assert(offsetof(UPlatformWidgetButton, _bUseFocusAtomCue) == 0x0005E1, "Member 'UPlatformWidgetButton::_bUseFocusAtomCue' has a wrong offset!");
static_assert(offsetof(UPlatformWidgetButton, _bUseShortcutAtomCue) == 0x0005E2, "Member 'UPlatformWidgetButton::_bUseShortcutAtomCue' has a wrong offset!");
static_assert(offsetof(UPlatformWidgetButton, _bUseNegativeAtomCue) == 0x0005E3, "Member 'UPlatformWidgetButton::_bUseNegativeAtomCue' has a wrong offset!");
static_assert(offsetof(UPlatformWidgetButton, _pressAtomCue) == 0x0005E8, "Member 'UPlatformWidgetButton::_pressAtomCue' has a wrong offset!");
static_assert(offsetof(UPlatformWidgetButton, _focusAtomCue) == 0x0005F0, "Member 'UPlatformWidgetButton::_focusAtomCue' has a wrong offset!");
static_assert(offsetof(UPlatformWidgetButton, _focusShortcutAtomCue) == 0x0005F8, "Member 'UPlatformWidgetButton::_focusShortcutAtomCue' has a wrong offset!");
static_assert(offsetof(UPlatformWidgetButton, _negativeAtomCue) == 0x000600, "Member 'UPlatformWidgetButton::_negativeAtomCue' has a wrong offset!");
static_assert(offsetof(UPlatformWidgetButton, _bAdjustmentJustSize) == 0x000608, "Member 'UPlatformWidgetButton::_bAdjustmentJustSize' has a wrong offset!");
static_assert(offsetof(UPlatformWidgetButton, _MarginSize) == 0x00060C, "Member 'UPlatformWidgetButton::_MarginSize' has a wrong offset!");
static_assert(offsetof(UPlatformWidgetButton, _focusWidget) == 0x000618, "Member 'UPlatformWidgetButton::_focusWidget' has a wrong offset!");
static_assert(offsetof(UPlatformWidgetButton, _atomComp) == 0x000620, "Member 'UPlatformWidgetButton::_atomComp' has a wrong offset!");

// Class GameModule.CheckButtonWidget
// 0x0070 (0x06A0 - 0x0630)
class UCheckButtonWidget final : public UPlatformWidgetButton
{
public:
	FMulticastInlineDelegateProperty_             OnChangeCheckDelegate;                             // 0x0630(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UWidgetSwitcher*                        _switcher;                                         // 0x0640(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAdjustTextWidget*                      _text;                                             // 0x0648(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bUseOffText;                                      // 0x0650(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_651[0x7];                                      // 0x0651(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   _onText;                                           // 0x0658(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   _offText;                                          // 0x0670(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	bool                                          _bUseOffset;                                       // 0x0688(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_689[0x3];                                      // 0x0689(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                _offset;                                           // 0x068C(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          _bCheck;                                           // 0x069C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_69D[0x3];                                      // 0x069D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnChangeStateDelegate__DelegateSignature(bool bCheck);
	void OnDecideEvent(class UAppWidget* Widget, EWidgetInputType InputType);
	void SetCheck(const bool bCheck, const bool bCallDelegate);
	void SetOffText(const class FText& Text);
	void SetOnText(const class FText& Text);

	bool IsCheck() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheckButtonWidget">();
	}
	static class UCheckButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheckButtonWidget>();
	}
};
static_assert(alignof(UCheckButtonWidget) == 0x000008, "Wrong alignment on UCheckButtonWidget");
static_assert(sizeof(UCheckButtonWidget) == 0x0006A0, "Wrong size on UCheckButtonWidget");
static_assert(offsetof(UCheckButtonWidget, OnChangeCheckDelegate) == 0x000630, "Member 'UCheckButtonWidget::OnChangeCheckDelegate' has a wrong offset!");
static_assert(offsetof(UCheckButtonWidget, _switcher) == 0x000640, "Member 'UCheckButtonWidget::_switcher' has a wrong offset!");
static_assert(offsetof(UCheckButtonWidget, _text) == 0x000648, "Member 'UCheckButtonWidget::_text' has a wrong offset!");
static_assert(offsetof(UCheckButtonWidget, _bUseOffText) == 0x000650, "Member 'UCheckButtonWidget::_bUseOffText' has a wrong offset!");
static_assert(offsetof(UCheckButtonWidget, _onText) == 0x000658, "Member 'UCheckButtonWidget::_onText' has a wrong offset!");
static_assert(offsetof(UCheckButtonWidget, _offText) == 0x000670, "Member 'UCheckButtonWidget::_offText' has a wrong offset!");
static_assert(offsetof(UCheckButtonWidget, _bUseOffset) == 0x000688, "Member 'UCheckButtonWidget::_bUseOffset' has a wrong offset!");
static_assert(offsetof(UCheckButtonWidget, _offset) == 0x00068C, "Member 'UCheckButtonWidget::_offset' has a wrong offset!");
static_assert(offsetof(UCheckButtonWidget, _bCheck) == 0x00069C, "Member 'UCheckButtonWidget::_bCheck' has a wrong offset!");

// Class GameModule.CoinListEntryObject
// 0x0008 (0x0038 - 0x0030)
class UCoinListEntryObject final : public UListViewEntryObjectBase
{
public:
	ECurrencyType                                 _type;                                             // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _maxIndex;                                         // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoinListEntryObject">();
	}
	static class UCoinListEntryObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoinListEntryObject>();
	}
};
static_assert(alignof(UCoinListEntryObject) == 0x000008, "Wrong alignment on UCoinListEntryObject");
static_assert(sizeof(UCoinListEntryObject) == 0x000038, "Wrong size on UCoinListEntryObject");
static_assert(offsetof(UCoinListEntryObject, _type) == 0x000030, "Member 'UCoinListEntryObject::_type' has a wrong offset!");
static_assert(offsetof(UCoinListEntryObject, _maxIndex) == 0x000034, "Member 'UCoinListEntryObject::_maxIndex' has a wrong offset!");

// Class GameModule.CommandDipControl
// 0x0000 (0x0030 - 0x0030)
class UCommandDipControl final : public UEngineSubsystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommandDipControl">();
	}
	static class UCommandDipControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommandDipControl>();
	}
};
static_assert(alignof(UCommandDipControl) == 0x000008, "Wrong alignment on UCommandDipControl");
static_assert(sizeof(UCommandDipControl) == 0x000030, "Wrong size on UCommandDipControl");

// Class GameModule.ConditionObserver
// 0x0030 (0x0058 - 0x0028)
class UConditionObserver final : public UObject
{
public:
	uint8                                         Pad_28[0x30];                                      // 0x0028(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ConditionObserver">();
	}
	static class UConditionObserver* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConditionObserver>();
	}
};
static_assert(alignof(UConditionObserver) == 0x000008, "Wrong alignment on UConditionObserver");
static_assert(sizeof(UConditionObserver) == 0x000058, "Wrong size on UConditionObserver");

// Class GameModule.CustomInputKey
// 0x0138 (0x0160 - 0x0028)
class UCustomInputKey final : public UObject
{
public:
	uint8                                         Pad_28[0x138];                                     // 0x0028(0x0138)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddCustomInputKey(const class FName CustomName, const struct FKey& Key);
	bool AddCustomInputKeys(const class FName CustomName, const TArray<struct FKey>& Keys);
	void AddMousePressStartKey(const struct FKey& Key);
	void AddMousePressStartKeys(const TArray<struct FKey>& Keys);
	struct FVector2D GetViewportSize();
	bool IsPressKey(const class FName CustomName);
	bool IsPressRapidFire(const class FName CustomName);
	bool IsPressTrg(const class FName CustomName);
	void PressEvent__DelegateSignature(const class FName CustomName, const bool bTrg, const bool bRapidFire);
	void ReleaseEvent__DelegateSignature(const class FName CustomName);
	void RemoveCustomInputKey(const class FName CustomName, const struct FKey& Key);
	void RemoveCustomInputKeys(const class FName CustomName, const TArray<struct FKey>& Keys);
	void RemoveCustomInputName(const class FName CustomName);
	void RemoveMousePressStart();
	void RemoveMousePressStartKey(const struct FKey& Key);
	void RemoveMousePressStartKeys(const TArray<struct FKey>& Keys);
	void SetTickFlag(bool bTick);

	struct FVector2D GetClickStartPosition() const;
	struct FVector2D GetClickStartPositionDPI() const;
	struct FVector2D GetMouseDelta() const;
	struct FVector2D GetMouseDeltaDPI() const;
	struct FVector2D GetMousePosition() const;
	struct FVector2D GetMousePositionDPI() const;
	float GetMouseWheel() const;
	struct FVector2D GetTouchDelta(const ETouchIndex Finger) const;
	struct FVector2D GetTouchDeltaDPI(const ETouchIndex Finger) const;
	struct FVector2D GetTouchPosition(const ETouchIndex Finger) const;
	struct FVector2D GetTouchPositionDPI(const ETouchIndex Finger) const;
	struct FVector2D GetTouchStartPosition(const ETouchIndex Finger) const;
	struct FVector2D GetTouchStartPositionDPI(const ETouchIndex Finger) const;
	struct FVector2D GetViewPortSizeDPI() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomInputKey">();
	}
	static class UCustomInputKey* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomInputKey>();
	}
};
static_assert(alignof(UCustomInputKey) == 0x000008, "Wrong alignment on UCustomInputKey");
static_assert(sizeof(UCustomInputKey) == 0x000160, "Wrong size on UCustomInputKey");

// Class GameModule.LocalPlayerInstanceSubsystem
// 0x0008 (0x0038 - 0x0030)
class ULocalPlayerInstanceSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LocalPlayerInstanceSubsystem">();
	}
	static class ULocalPlayerInstanceSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULocalPlayerInstanceSubsystem>();
	}
};
static_assert(alignof(ULocalPlayerInstanceSubsystem) == 0x000008, "Wrong alignment on ULocalPlayerInstanceSubsystem");
static_assert(sizeof(ULocalPlayerInstanceSubsystem) == 0x000038, "Wrong size on ULocalPlayerInstanceSubsystem");

// Class GameModule.LocalPlayerWork
// 0x0000 (0x0030 - 0x0030)
class ULocalPlayerWork final : public ULocalPlayerSubsystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LocalPlayerWork">();
	}
	static class ULocalPlayerWork* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULocalPlayerWork>();
	}
};
static_assert(alignof(ULocalPlayerWork) == 0x000008, "Wrong alignment on ULocalPlayerWork");
static_assert(sizeof(ULocalPlayerWork) == 0x000030, "Wrong size on ULocalPlayerWork");

// Class GameModule.CustomInputTextBox
// 0x0080 (0x06B0 - 0x0630)
class UCustomInputTextBox : public UPlatformWidgetButton
{
public:
	FMulticastInlineDelegateProperty_             _onSendableDelegate;                               // 0x0630(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _onSendDelegate;                                   // 0x0640(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _onChangeTextDelegate;                             // 0x0650(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _onOpenParentalControlEventDispather;              // 0x0660(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _onActiveInputEventDispather;                      // 0x0670(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _onCallConcentEventDispather;                      // 0x0680(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UCustomEditableTextBox*                 _textBox;                                          // 0x0690(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _prevFocus;                                        // 0x0698(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_699[0x17];                                     // 0x0699(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_CheckCommit(const class FString& Input);
	bool BP_CheckFirstFocus(bool Focus);
	bool BP_CheckMessageEmpty(const class FString& Message);
	void BP_ClearText();
	class FString BP_GetText();
	void BP_SetFocusInput();
	void CallActiveInputEvent();
	void CallChangeTextEvent(const class FText& Text, const bool IsEmpty);
	void CallConcentEvent();
	void CallSendableEvent(const bool Commit, EPlatform Platform);
	void CallSendEvent();
	void OnActiveInputDispather__DelegateSignature();
	void OnCallConcentDispather__DelegateSignature();
	void OnChangeTextDelegate__DelegateSignature(const class FText& Text, const bool IsEmpty);
	void OnSendableDelegate__DelegateSignature(const bool Commit, EPlatform Platform);
	void OnSendDelegate__DelegateSignature();
	void OpenParentalControlDispather__DelegateSignature();
	void UpdateFocus();

	bool BP_GetFirstFocus() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomInputTextBox">();
	}
	static class UCustomInputTextBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomInputTextBox>();
	}
};
static_assert(alignof(UCustomInputTextBox) == 0x000008, "Wrong alignment on UCustomInputTextBox");
static_assert(sizeof(UCustomInputTextBox) == 0x0006B0, "Wrong size on UCustomInputTextBox");
static_assert(offsetof(UCustomInputTextBox, _onSendableDelegate) == 0x000630, "Member 'UCustomInputTextBox::_onSendableDelegate' has a wrong offset!");
static_assert(offsetof(UCustomInputTextBox, _onSendDelegate) == 0x000640, "Member 'UCustomInputTextBox::_onSendDelegate' has a wrong offset!");
static_assert(offsetof(UCustomInputTextBox, _onChangeTextDelegate) == 0x000650, "Member 'UCustomInputTextBox::_onChangeTextDelegate' has a wrong offset!");
static_assert(offsetof(UCustomInputTextBox, _onOpenParentalControlEventDispather) == 0x000660, "Member 'UCustomInputTextBox::_onOpenParentalControlEventDispather' has a wrong offset!");
static_assert(offsetof(UCustomInputTextBox, _onActiveInputEventDispather) == 0x000670, "Member 'UCustomInputTextBox::_onActiveInputEventDispather' has a wrong offset!");
static_assert(offsetof(UCustomInputTextBox, _onCallConcentEventDispather) == 0x000680, "Member 'UCustomInputTextBox::_onCallConcentEventDispather' has a wrong offset!");
static_assert(offsetof(UCustomInputTextBox, _textBox) == 0x000690, "Member 'UCustomInputTextBox::_textBox' has a wrong offset!");
static_assert(offsetof(UCustomInputTextBox, _prevFocus) == 0x000698, "Member 'UCustomInputTextBox::_prevFocus' has a wrong offset!");

// Class GameModule.CustomLineDrawer
// 0x0028 (0x01F0 - 0x01C8)
class UCustomLineDrawer final : public UWidgetDrawPrimitive
{
public:
	struct FVector2D                              _lineStart;                                        // 0x01C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              _lineEnd;                                          // 0x01D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           _lineColor;                                        // 0x01D8(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _lineThickness;                                    // 0x01E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC[0x4];                                      // 0x01EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomLineDrawer">();
	}
	static class UCustomLineDrawer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomLineDrawer>();
	}
};
static_assert(alignof(UCustomLineDrawer) == 0x000008, "Wrong alignment on UCustomLineDrawer");
static_assert(sizeof(UCustomLineDrawer) == 0x0001F0, "Wrong size on UCustomLineDrawer");
static_assert(offsetof(UCustomLineDrawer, _lineStart) == 0x0001C8, "Member 'UCustomLineDrawer::_lineStart' has a wrong offset!");
static_assert(offsetof(UCustomLineDrawer, _lineEnd) == 0x0001D0, "Member 'UCustomLineDrawer::_lineEnd' has a wrong offset!");
static_assert(offsetof(UCustomLineDrawer, _lineColor) == 0x0001D8, "Member 'UCustomLineDrawer::_lineColor' has a wrong offset!");
static_assert(offsetof(UCustomLineDrawer, _lineThickness) == 0x0001E8, "Member 'UCustomLineDrawer::_lineThickness' has a wrong offset!");

// Class GameModule.CustomMatchDatabaseWork
// 0x00C0 (0x00F0 - 0x0030)
class UCustomMatchDatabaseWork final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0xC0];                                      // 0x0030(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_SetCustomMatch(bool bCustomMatch);
	void OnLoadedResultDataList(int32 RequestId);

	class FString GetRoomOwnerId() const;
	TArray<class FString> GetRoomOwnerOrder() const;
	uint8 GetTeamCount() const;
	bool HasRoomOwnerRight() const;
	bool IsCustomMatch() const;
	bool IsJoinRoomOwner() const;
	bool IsRoomOwner() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomMatchDatabaseWork">();
	}
	static class UCustomMatchDatabaseWork* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomMatchDatabaseWork>();
	}
};
static_assert(alignof(UCustomMatchDatabaseWork) == 0x000008, "Wrong alignment on UCustomMatchDatabaseWork");
static_assert(sizeof(UCustomMatchDatabaseWork) == 0x0000F0, "Wrong size on UCustomMatchDatabaseWork");

// Class GameModule.CustomParticleSystemComponent
// 0x00F0 (0x07A0 - 0x06B0)
#pragma pack(push, 0x1)
class alignas(0x10) UCustomParticleSystemComponent : public UParticleSystemComponent
{
public:
	class URibbonAdjustComponent*                 _ribbonAdjustComponent;                            // 0x06A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UParticleSpawnRateCtrl*                 _spawnRateCtrl;                                    // 0x06B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EViewType                                     _viewType;                                         // 0x06B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _onGround;                                         // 0x06B9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bDeactivateSkip;                                  // 0x06BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bCurveEndDestroy;                                 // 0x06BB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bForceDestroy;                                    // 0x06BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bFadeAfterDeactivate;                             // 0x06BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6BE[0x2];                                      // 0x06BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            _fadeInCurve;                                      // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _fadeInParamName;                                  // 0x06C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            _fadeOutCurve;                                     // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _fadeOutParamName;                                 // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bPlayHorizon;                                     // 0x06E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bIsPlayEffect;                                    // 0x06E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6E2[0x6];                                      // 0x06E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacterGame*                         _ownerCharacter;                                   // 0x06E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMeshComponent*                         _attachMesh;                                       // 0x06F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6F8[0x80];                                     // 0x06F8(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           _fadeInHandle;                                     // 0x0778(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTimerHandle                           _fadeOutHandle;                                    // 0x0780(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTimerHandle                           _attachLocateHandle;                               // 0x0788(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTimerHandle                           _updateDetachTimer;                                // 0x0790(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	bool ChangeViewType(EViewType Type);
	void End();
	void FadeIn();
	void FadeOut();
	void OnParticleDeathEvent(class UParticleSystemComponent* PSystem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomParticleSystemComponent">();
	}
	static class UCustomParticleSystemComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomParticleSystemComponent>();
	}
};
#pragma pack(pop)
static_assert(alignof(UCustomParticleSystemComponent) == 0x000010, "Wrong alignment on UCustomParticleSystemComponent");
static_assert(sizeof(UCustomParticleSystemComponent) == 0x0007A0, "Wrong size on UCustomParticleSystemComponent");
static_assert(offsetof(UCustomParticleSystemComponent, _ribbonAdjustComponent) == 0x0006A8, "Member 'UCustomParticleSystemComponent::_ribbonAdjustComponent' has a wrong offset!");
static_assert(offsetof(UCustomParticleSystemComponent, _spawnRateCtrl) == 0x0006B0, "Member 'UCustomParticleSystemComponent::_spawnRateCtrl' has a wrong offset!");
static_assert(offsetof(UCustomParticleSystemComponent, _viewType) == 0x0006B8, "Member 'UCustomParticleSystemComponent::_viewType' has a wrong offset!");
static_assert(offsetof(UCustomParticleSystemComponent, _onGround) == 0x0006B9, "Member 'UCustomParticleSystemComponent::_onGround' has a wrong offset!");
static_assert(offsetof(UCustomParticleSystemComponent, _bDeactivateSkip) == 0x0006BA, "Member 'UCustomParticleSystemComponent::_bDeactivateSkip' has a wrong offset!");
static_assert(offsetof(UCustomParticleSystemComponent, _bCurveEndDestroy) == 0x0006BB, "Member 'UCustomParticleSystemComponent::_bCurveEndDestroy' has a wrong offset!");
static_assert(offsetof(UCustomParticleSystemComponent, _bForceDestroy) == 0x0006BC, "Member 'UCustomParticleSystemComponent::_bForceDestroy' has a wrong offset!");
static_assert(offsetof(UCustomParticleSystemComponent, _bFadeAfterDeactivate) == 0x0006BD, "Member 'UCustomParticleSystemComponent::_bFadeAfterDeactivate' has a wrong offset!");
static_assert(offsetof(UCustomParticleSystemComponent, _fadeInCurve) == 0x0006C0, "Member 'UCustomParticleSystemComponent::_fadeInCurve' has a wrong offset!");
static_assert(offsetof(UCustomParticleSystemComponent, _fadeInParamName) == 0x0006C8, "Member 'UCustomParticleSystemComponent::_fadeInParamName' has a wrong offset!");
static_assert(offsetof(UCustomParticleSystemComponent, _fadeOutCurve) == 0x0006D0, "Member 'UCustomParticleSystemComponent::_fadeOutCurve' has a wrong offset!");
static_assert(offsetof(UCustomParticleSystemComponent, _fadeOutParamName) == 0x0006D8, "Member 'UCustomParticleSystemComponent::_fadeOutParamName' has a wrong offset!");
static_assert(offsetof(UCustomParticleSystemComponent, _bPlayHorizon) == 0x0006E0, "Member 'UCustomParticleSystemComponent::_bPlayHorizon' has a wrong offset!");
static_assert(offsetof(UCustomParticleSystemComponent, _bIsPlayEffect) == 0x0006E1, "Member 'UCustomParticleSystemComponent::_bIsPlayEffect' has a wrong offset!");
static_assert(offsetof(UCustomParticleSystemComponent, _ownerCharacter) == 0x0006E8, "Member 'UCustomParticleSystemComponent::_ownerCharacter' has a wrong offset!");
static_assert(offsetof(UCustomParticleSystemComponent, _attachMesh) == 0x0006F0, "Member 'UCustomParticleSystemComponent::_attachMesh' has a wrong offset!");
static_assert(offsetof(UCustomParticleSystemComponent, _fadeInHandle) == 0x000778, "Member 'UCustomParticleSystemComponent::_fadeInHandle' has a wrong offset!");
static_assert(offsetof(UCustomParticleSystemComponent, _fadeOutHandle) == 0x000780, "Member 'UCustomParticleSystemComponent::_fadeOutHandle' has a wrong offset!");
static_assert(offsetof(UCustomParticleSystemComponent, _attachLocateHandle) == 0x000788, "Member 'UCustomParticleSystemComponent::_attachLocateHandle' has a wrong offset!");
static_assert(offsetof(UCustomParticleSystemComponent, _updateDetachTimer) == 0x000790, "Member 'UCustomParticleSystemComponent::_updateDetachTimer' has a wrong offset!");

// Class GameModule.DamageAttenuationManager
// 0x0018 (0x0048 - 0x0030)
class UDamageAttenuationManager final : public UEngineSubsystem
{
public:
	TArray<class UCurveFloat*>                    _curveArray;                                       // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DamageAttenuationManager">();
	}
	static class UDamageAttenuationManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDamageAttenuationManager>();
	}
};
static_assert(alignof(UDamageAttenuationManager) == 0x000008, "Wrong alignment on UDamageAttenuationManager");
static_assert(sizeof(UDamageAttenuationManager) == 0x000048, "Wrong size on UDamageAttenuationManager");
static_assert(offsetof(UDamageAttenuationManager, _curveArray) == 0x000030, "Member 'UDamageAttenuationManager::_curveArray' has a wrong offset!");

// Class GameModule.EmblemBaseWidget
// 0x0000 (0x0350 - 0x0350)
class UEmblemBaseWidget final : public UWidgetBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EmblemBaseWidget">();
	}
	static class UEmblemBaseWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEmblemBaseWidget>();
	}
};
static_assert(alignof(UEmblemBaseWidget) == 0x000008, "Wrong alignment on UEmblemBaseWidget");
static_assert(sizeof(UEmblemBaseWidget) == 0x000350, "Wrong size on UEmblemBaseWidget");

// Class GameModule.EmblemDisplayWidget
// 0x0048 (0x0398 - 0x0350)
class UEmblemDisplayWidget final : public UWidgetBase
{
public:
	int32                                         _code;                                             // 0x0350(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bSmall;                                           // 0x0354(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bSyncLoad;                                        // 0x0355(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bUseOffset;                                       // 0x0356(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_357[0x1];                                      // 0x0357(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _offsetTop;                                        // 0x0358(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _offsetBottom;                                     // 0x035C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _offsetLeft;                                       // 0x0360(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _offsetRight;                                      // 0x0364(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                           _top;                                              // 0x0368(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNamedSlot*                             _bgImageNamedSlot;                                 // 0x0370(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCanvasPanel*                           _body;                                             // 0x0378(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNamedSlot*                             _bodyCoverNamedSlot;                               // 0x0380(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPlayerDatabaseWork*                    _playerDatabaseWork;                               // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPrimaryAssetItemIcon*                  _primaryAsset;                                     // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UCanvasPanel* BP_GetBodyCanvasPanel();
	void OnLoadedImage(TSubclassOf<class UWidgetBase> WidgetClass);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EmblemDisplayWidget">();
	}
	static class UEmblemDisplayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEmblemDisplayWidget>();
	}
};
static_assert(alignof(UEmblemDisplayWidget) == 0x000008, "Wrong alignment on UEmblemDisplayWidget");
static_assert(sizeof(UEmblemDisplayWidget) == 0x000398, "Wrong size on UEmblemDisplayWidget");
static_assert(offsetof(UEmblemDisplayWidget, _code) == 0x000350, "Member 'UEmblemDisplayWidget::_code' has a wrong offset!");
static_assert(offsetof(UEmblemDisplayWidget, _bSmall) == 0x000354, "Member 'UEmblemDisplayWidget::_bSmall' has a wrong offset!");
static_assert(offsetof(UEmblemDisplayWidget, _bSyncLoad) == 0x000355, "Member 'UEmblemDisplayWidget::_bSyncLoad' has a wrong offset!");
static_assert(offsetof(UEmblemDisplayWidget, _bUseOffset) == 0x000356, "Member 'UEmblemDisplayWidget::_bUseOffset' has a wrong offset!");
static_assert(offsetof(UEmblemDisplayWidget, _offsetTop) == 0x000358, "Member 'UEmblemDisplayWidget::_offsetTop' has a wrong offset!");
static_assert(offsetof(UEmblemDisplayWidget, _offsetBottom) == 0x00035C, "Member 'UEmblemDisplayWidget::_offsetBottom' has a wrong offset!");
static_assert(offsetof(UEmblemDisplayWidget, _offsetLeft) == 0x000360, "Member 'UEmblemDisplayWidget::_offsetLeft' has a wrong offset!");
static_assert(offsetof(UEmblemDisplayWidget, _offsetRight) == 0x000364, "Member 'UEmblemDisplayWidget::_offsetRight' has a wrong offset!");
static_assert(offsetof(UEmblemDisplayWidget, _top) == 0x000368, "Member 'UEmblemDisplayWidget::_top' has a wrong offset!");
static_assert(offsetof(UEmblemDisplayWidget, _bgImageNamedSlot) == 0x000370, "Member 'UEmblemDisplayWidget::_bgImageNamedSlot' has a wrong offset!");
static_assert(offsetof(UEmblemDisplayWidget, _body) == 0x000378, "Member 'UEmblemDisplayWidget::_body' has a wrong offset!");
static_assert(offsetof(UEmblemDisplayWidget, _bodyCoverNamedSlot) == 0x000380, "Member 'UEmblemDisplayWidget::_bodyCoverNamedSlot' has a wrong offset!");
static_assert(offsetof(UEmblemDisplayWidget, _playerDatabaseWork) == 0x000388, "Member 'UEmblemDisplayWidget::_playerDatabaseWork' has a wrong offset!");
static_assert(offsetof(UEmblemDisplayWidget, _primaryAsset) == 0x000390, "Member 'UEmblemDisplayWidget::_primaryAsset' has a wrong offset!");

// Class GameModule.EventSequenceWork
// 0x0008 (0x0038 - 0x0030)
class UEventSequenceWork final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventSequenceWork">();
	}
	static class UEventSequenceWork* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventSequenceWork>();
	}
};
static_assert(alignof(UEventSequenceWork) == 0x000008, "Wrong alignment on UEventSequenceWork");
static_assert(sizeof(UEventSequenceWork) == 0x000038, "Wrong size on UEventSequenceWork");

// Class GameModule.FocusAnimationWidget
// 0x0060 (0x03B0 - 0x0350)
class UFocusAnimationWidget : public UWidgetBase
{
public:
	struct FMargin                                _offsets;                                          // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                _arrowOffsets;                                     // 0x0360(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          _bViewArrowUp;                                     // 0x0370(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bViewArrowDown;                                   // 0x0371(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bViewArrowLeft;                                   // 0x0372(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bViewArrowRight;                                  // 0x0373(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _topFocusOffset;                                   // 0x0374(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bClearChildWidget;                                // 0x0378(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_379[0x7];                                      // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                _borderUp;                                         // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                _borderDown;                                       // 0x0388(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                _borderLeft;                                       // 0x0390(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                _borderRight;                                      // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                _focusTop;                                         // 0x03A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                _focusWhite;                                       // 0x03A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetViewArrowDown(const bool bView);
	void SetViewArrowLeft(const bool bView);
	void SetViewArrowRight(const bool bView);
	void SetViewArrowUp(const bool bView);
	void SetViewFocus(const bool bView);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FocusAnimationWidget">();
	}
	static class UFocusAnimationWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFocusAnimationWidget>();
	}
};
static_assert(alignof(UFocusAnimationWidget) == 0x000008, "Wrong alignment on UFocusAnimationWidget");
static_assert(sizeof(UFocusAnimationWidget) == 0x0003B0, "Wrong size on UFocusAnimationWidget");
static_assert(offsetof(UFocusAnimationWidget, _offsets) == 0x000350, "Member 'UFocusAnimationWidget::_offsets' has a wrong offset!");
static_assert(offsetof(UFocusAnimationWidget, _arrowOffsets) == 0x000360, "Member 'UFocusAnimationWidget::_arrowOffsets' has a wrong offset!");
static_assert(offsetof(UFocusAnimationWidget, _bViewArrowUp) == 0x000370, "Member 'UFocusAnimationWidget::_bViewArrowUp' has a wrong offset!");
static_assert(offsetof(UFocusAnimationWidget, _bViewArrowDown) == 0x000371, "Member 'UFocusAnimationWidget::_bViewArrowDown' has a wrong offset!");
static_assert(offsetof(UFocusAnimationWidget, _bViewArrowLeft) == 0x000372, "Member 'UFocusAnimationWidget::_bViewArrowLeft' has a wrong offset!");
static_assert(offsetof(UFocusAnimationWidget, _bViewArrowRight) == 0x000373, "Member 'UFocusAnimationWidget::_bViewArrowRight' has a wrong offset!");
static_assert(offsetof(UFocusAnimationWidget, _topFocusOffset) == 0x000374, "Member 'UFocusAnimationWidget::_topFocusOffset' has a wrong offset!");
static_assert(offsetof(UFocusAnimationWidget, _bClearChildWidget) == 0x000378, "Member 'UFocusAnimationWidget::_bClearChildWidget' has a wrong offset!");
static_assert(offsetof(UFocusAnimationWidget, _borderUp) == 0x000380, "Member 'UFocusAnimationWidget::_borderUp' has a wrong offset!");
static_assert(offsetof(UFocusAnimationWidget, _borderDown) == 0x000388, "Member 'UFocusAnimationWidget::_borderDown' has a wrong offset!");
static_assert(offsetof(UFocusAnimationWidget, _borderLeft) == 0x000390, "Member 'UFocusAnimationWidget::_borderLeft' has a wrong offset!");
static_assert(offsetof(UFocusAnimationWidget, _borderRight) == 0x000398, "Member 'UFocusAnimationWidget::_borderRight' has a wrong offset!");
static_assert(offsetof(UFocusAnimationWidget, _focusTop) == 0x0003A0, "Member 'UFocusAnimationWidget::_focusTop' has a wrong offset!");
static_assert(offsetof(UFocusAnimationWidget, _focusWhite) == 0x0003A8, "Member 'UFocusAnimationWidget::_focusWhite' has a wrong offset!");

// Class GameModule.FiniteState
// 0x0008 (0x0030 - 0x0028)
class UFiniteState : public UObject
{
public:
	class UObject*                                _ownerObject;                                      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FiniteState">();
	}
	static class UFiniteState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFiniteState>();
	}
};
static_assert(alignof(UFiniteState) == 0x000008, "Wrong alignment on UFiniteState");
static_assert(sizeof(UFiniteState) == 0x000030, "Wrong size on UFiniteState");
static_assert(offsetof(UFiniteState, _ownerObject) == 0x000028, "Member 'UFiniteState::_ownerObject' has a wrong offset!");

// Class GameModule.FiniteStateMachine
// 0x0068 (0x0090 - 0x0028)
class UFiniteStateMachine final : public UObject
{
public:
	class UObject*                                _ownerObject;                                      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFiniteState*                           _currentState;                                     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<uint8, class UFiniteState*>              _stateMap;                                         // 0x0038(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FiniteStateMachine">();
	}
	static class UFiniteStateMachine* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFiniteStateMachine>();
	}
};
static_assert(alignof(UFiniteStateMachine) == 0x000008, "Wrong alignment on UFiniteStateMachine");
static_assert(sizeof(UFiniteStateMachine) == 0x000090, "Wrong size on UFiniteStateMachine");
static_assert(offsetof(UFiniteStateMachine, _ownerObject) == 0x000028, "Member 'UFiniteStateMachine::_ownerObject' has a wrong offset!");
static_assert(offsetof(UFiniteStateMachine, _currentState) == 0x000030, "Member 'UFiniteStateMachine::_currentState' has a wrong offset!");
static_assert(offsetof(UFiniteStateMachine, _stateMap) == 0x000038, "Member 'UFiniteStateMachine::_stateMap' has a wrong offset!");

// Class GameModule.GameEffectSubsystem
// 0x0018 (0x0048 - 0x0030)
class UGameEffectSubsystem final : public UEngineSubsystem
{
public:
	TArray<struct FEffStatus>                     _effTbl;                                           // 0x0030(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UCustomParticleSystemComponent* BP_SpawnEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, bool bAutoDestroy, bool bUsedPooling);
	void OnParticleDestroy(class UParticleSystemComponent* Particle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameEffectSubsystem">();
	}
	static class UGameEffectSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameEffectSubsystem>();
	}
};
static_assert(alignof(UGameEffectSubsystem) == 0x000008, "Wrong alignment on UGameEffectSubsystem");
static_assert(sizeof(UGameEffectSubsystem) == 0x000048, "Wrong size on UGameEffectSubsystem");
static_assert(offsetof(UGameEffectSubsystem, _effTbl) == 0x000030, "Member 'UGameEffectSubsystem::_effTbl' has a wrong offset!");

// Class GameModule.SaveGameOption
// 0x0398 (0x03C0 - 0x0028)
class USaveGameOption : public USaveGame
{
public:
	float                                         _gamePadCameraYawRate;                             // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _gamePadCameraPitchRate;                           // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _gamePadCameraAimYawRate;                          // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _gamePadCameraAimPitchRate;                        // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _gamePadCameraDashYawRate;                         // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _gamePadCameraDashPitchRate;                       // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bGamePadCameraYawReverse;                         // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bGamePadCameraPitchReverse;                       // 0x0041(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _mouseCameraYawRate;                               // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _mouseCameraPitchRate;                             // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _mouseCameraAimYawRate;                            // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _mouseCameraAimPitchRate;                          // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bMouseCameraYawReverse;                           // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bMouseCameraPitchReverse;                         // 0x0055(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _touchCameraYawRate;                               // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _touchCameraPitchRate;                             // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bTouchCameraYawReverse;                           // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bTouchCameraPitchReverse;                         // 0x0061(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bRecommendedNotification;                         // 0x0062(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bRecieveTextChat;                                 // 0x0063(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bRecodeHide;                                      // 0x0064(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bMiniMapRotation;                                 // 0x0065(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bAimAssist;                                       // 0x0066(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bDashHold;                                        // 0x0067(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bSquatHold;                                       // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bAimHold;                                         // 0x0069(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bGyroOperation;                                   // 0x006A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6B[0x1];                                       // 0x006B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _gyroYawRate;                                      // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _gyroPitchRate;                                    // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _aimMagnification;                                 // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _aimDeadZoneVerS3;                                 // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _moveDeadZoneVerS3;                                // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bPadPlay;                                         // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bVibration;                                       // 0x0081(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _playServerIndex;                                  // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bIsAutoLevelUp;                                   // 0x0088(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraAccelerationType                       _cameraAcclerationType;                            // 0x0089(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bPlayBattleActionCamera;                          // 0x008A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameOptionAuraDispType                       _auraDispType;                                     // 0x008B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameOptionAuraAreaType                       _auraAreaType;                                     // 0x008C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bReadTextChat;                                    // 0x008D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bVoiceChatText;                                   // 0x008E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8F[0x1];                                       // 0x008F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _brightness;                                       // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bReticle;                                         // 0x0094(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bSituation;                                       // 0x0095(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bKOLog;                                           // 0x0096(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bMiniMapVisible;                                  // 0x0097(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bSquadMemberStatus;                               // 0x0098(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bItemIcon;                                        // 0x0099(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bCommunicationIcon;                               // 0x009A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bOverheadIcon;                                    // 0x009B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bPlayerStatus;                                    // 0x009C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bIndividualityIcon;                               // 0x009D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bButtonHint;                                      // 0x009E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bDamageVisible;                                   // 0x009F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bAttackDirection;                                 // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bIsMinimapRightSide;                              // 0x00A1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _softWareCursorSpeed;                              // 0x00A4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESettingGraphicQuality                        _antialiasQuality;                                 // 0x00A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESettingGraphicQuality                        _shadowQuality;                                    // 0x00A9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bOcclusion;                                       // 0x00AA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bBloom;                                           // 0x00AB(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bMotionBlur;                                      // 0x00AC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESettingGraphicQuality                        _textureQuality;                                   // 0x00AD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESettingGraphicQuality                        _effectQuality;                                    // 0x00AE(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESettingGraphicQuality                        _foliageQuality;                                   // 0x00AF(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWindowMode                                   _windowMode;                                       // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bVSync;                                           // 0x00B1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B2[0x2];                                       // 0x00B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _fps;                                              // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              _resolution;                                       // 0x00B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageVisibleType                            _damageVisibleType;                                // 0x00C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bBattleAnnounce;                                  // 0x00C1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bBackgroundSound;                                 // 0x00C2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bVoiceChat;                                       // 0x00C3(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _micLevel;                                         // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _voiceLanguage;                                    // 0x00C8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bCommentaryVoice;                                 // 0x00D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _masterVolume;                                     // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _bgmVolume;                                        // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _battleBGMVolume;                                  // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _seVolume;                                         // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _voiceVolume;                                      // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _voiceChatVolume;                                  // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bGameAgreeKpi;                                    // 0x00F4(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bDAPGameAgreeKpi;                                 // 0x00F5(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F6[0x2];                                       // 0x00F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              _bGameLastLoginDateTime;                           // 0x00F8(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ETutorialPopupScene, bool>               _outGameTutorialFlag;                              // 0x0100(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
	int32                                         _selectedPlayModeId;                               // 0x0150(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _finishedInitialSetting;                           // 0x0154(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bDisconnectionWarring;                            // 0x0155(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bAgreeFreeTextInput_PlayerName;                   // 0x0156(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bAgreeFreeTextInput_PlayerIntroduction;           // 0x0157(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FInputActionKeyMapping>         _gamePadActionMappings;                            // 0x0158(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FInputActionKeyMapping>         _keyboardActionMappings;                           // 0x0168(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FInputAxisKeyMapping>           _keyboardMoveAxisMappings;                         // 0x0178(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class FString                                 _trackingNumber;                                   // 0x0188(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bAgreeFreeTextInput_TextChat;                     // 0x0198(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bAgreeFreeTextInput_GuildChat;                    // 0x0199(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19A[0x2];                                      // 0x019A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _guildLevel;                                       // 0x019C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _guildSearchId;                                    // 0x01A0(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bGuildBlock;                                      // 0x01B0(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bGuildNameConsent;                                // 0x01B1(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bGuildProfileConsent;                             // 0x01B2(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B3[0x5];                                      // 0x01B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<int32>                                   _loadShopItems;                                    // 0x01B8(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
	TSet<int32>                                   _viewedShopItems;                                  // 0x0208(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
	TMap<int32, EGameOptionCharacterUnlockStatus> _characterUnLockMaps;                              // 0x0258(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
	struct FDateTime                              _bExitRoomDateTime;                                // 0x02A8(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _customMatchRoomKey;                               // 0x02B0(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EKeyConfigurableCommand, struct FKey>    _gamePadActionMappingsOnCommand;                   // 0x02C0(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
	TMap<EKeyConfigurableCommand, struct FKey>    _keyboardActionMappingOnCommand;                   // 0x0310(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
	TMap<EKeyConfigurableCommand, struct FKey>    _keyboardMoveAxisMappingOnCommand;                 // 0x0360(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FWheelCommandStruct>            _saveGameCustomHudCommands;                        // 0x03B0(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SaveGameOption">();
	}
	static class USaveGameOption* GetDefaultObj()
	{
		return GetDefaultObjImpl<USaveGameOption>();
	}
};
static_assert(alignof(USaveGameOption) == 0x000008, "Wrong alignment on USaveGameOption");
static_assert(sizeof(USaveGameOption) == 0x0003C0, "Wrong size on USaveGameOption");
static_assert(offsetof(USaveGameOption, _gamePadCameraYawRate) == 0x000028, "Member 'USaveGameOption::_gamePadCameraYawRate' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _gamePadCameraPitchRate) == 0x00002C, "Member 'USaveGameOption::_gamePadCameraPitchRate' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _gamePadCameraAimYawRate) == 0x000030, "Member 'USaveGameOption::_gamePadCameraAimYawRate' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _gamePadCameraAimPitchRate) == 0x000034, "Member 'USaveGameOption::_gamePadCameraAimPitchRate' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _gamePadCameraDashYawRate) == 0x000038, "Member 'USaveGameOption::_gamePadCameraDashYawRate' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _gamePadCameraDashPitchRate) == 0x00003C, "Member 'USaveGameOption::_gamePadCameraDashPitchRate' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bGamePadCameraYawReverse) == 0x000040, "Member 'USaveGameOption::_bGamePadCameraYawReverse' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bGamePadCameraPitchReverse) == 0x000041, "Member 'USaveGameOption::_bGamePadCameraPitchReverse' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _mouseCameraYawRate) == 0x000044, "Member 'USaveGameOption::_mouseCameraYawRate' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _mouseCameraPitchRate) == 0x000048, "Member 'USaveGameOption::_mouseCameraPitchRate' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _mouseCameraAimYawRate) == 0x00004C, "Member 'USaveGameOption::_mouseCameraAimYawRate' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _mouseCameraAimPitchRate) == 0x000050, "Member 'USaveGameOption::_mouseCameraAimPitchRate' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bMouseCameraYawReverse) == 0x000054, "Member 'USaveGameOption::_bMouseCameraYawReverse' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bMouseCameraPitchReverse) == 0x000055, "Member 'USaveGameOption::_bMouseCameraPitchReverse' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _touchCameraYawRate) == 0x000058, "Member 'USaveGameOption::_touchCameraYawRate' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _touchCameraPitchRate) == 0x00005C, "Member 'USaveGameOption::_touchCameraPitchRate' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bTouchCameraYawReverse) == 0x000060, "Member 'USaveGameOption::_bTouchCameraYawReverse' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bTouchCameraPitchReverse) == 0x000061, "Member 'USaveGameOption::_bTouchCameraPitchReverse' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bRecommendedNotification) == 0x000062, "Member 'USaveGameOption::_bRecommendedNotification' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bRecieveTextChat) == 0x000063, "Member 'USaveGameOption::_bRecieveTextChat' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bRecodeHide) == 0x000064, "Member 'USaveGameOption::_bRecodeHide' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bMiniMapRotation) == 0x000065, "Member 'USaveGameOption::_bMiniMapRotation' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bAimAssist) == 0x000066, "Member 'USaveGameOption::_bAimAssist' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bDashHold) == 0x000067, "Member 'USaveGameOption::_bDashHold' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bSquatHold) == 0x000068, "Member 'USaveGameOption::_bSquatHold' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bAimHold) == 0x000069, "Member 'USaveGameOption::_bAimHold' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bGyroOperation) == 0x00006A, "Member 'USaveGameOption::_bGyroOperation' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _gyroYawRate) == 0x00006C, "Member 'USaveGameOption::_gyroYawRate' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _gyroPitchRate) == 0x000070, "Member 'USaveGameOption::_gyroPitchRate' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _aimMagnification) == 0x000074, "Member 'USaveGameOption::_aimMagnification' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _aimDeadZoneVerS3) == 0x000078, "Member 'USaveGameOption::_aimDeadZoneVerS3' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _moveDeadZoneVerS3) == 0x00007C, "Member 'USaveGameOption::_moveDeadZoneVerS3' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bPadPlay) == 0x000080, "Member 'USaveGameOption::_bPadPlay' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bVibration) == 0x000081, "Member 'USaveGameOption::_bVibration' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _playServerIndex) == 0x000084, "Member 'USaveGameOption::_playServerIndex' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bIsAutoLevelUp) == 0x000088, "Member 'USaveGameOption::_bIsAutoLevelUp' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _cameraAcclerationType) == 0x000089, "Member 'USaveGameOption::_cameraAcclerationType' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bPlayBattleActionCamera) == 0x00008A, "Member 'USaveGameOption::_bPlayBattleActionCamera' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _auraDispType) == 0x00008B, "Member 'USaveGameOption::_auraDispType' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _auraAreaType) == 0x00008C, "Member 'USaveGameOption::_auraAreaType' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bReadTextChat) == 0x00008D, "Member 'USaveGameOption::_bReadTextChat' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bVoiceChatText) == 0x00008E, "Member 'USaveGameOption::_bVoiceChatText' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _brightness) == 0x000090, "Member 'USaveGameOption::_brightness' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bReticle) == 0x000094, "Member 'USaveGameOption::_bReticle' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bSituation) == 0x000095, "Member 'USaveGameOption::_bSituation' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bKOLog) == 0x000096, "Member 'USaveGameOption::_bKOLog' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bMiniMapVisible) == 0x000097, "Member 'USaveGameOption::_bMiniMapVisible' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bSquadMemberStatus) == 0x000098, "Member 'USaveGameOption::_bSquadMemberStatus' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bItemIcon) == 0x000099, "Member 'USaveGameOption::_bItemIcon' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bCommunicationIcon) == 0x00009A, "Member 'USaveGameOption::_bCommunicationIcon' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bOverheadIcon) == 0x00009B, "Member 'USaveGameOption::_bOverheadIcon' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bPlayerStatus) == 0x00009C, "Member 'USaveGameOption::_bPlayerStatus' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bIndividualityIcon) == 0x00009D, "Member 'USaveGameOption::_bIndividualityIcon' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bButtonHint) == 0x00009E, "Member 'USaveGameOption::_bButtonHint' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bDamageVisible) == 0x00009F, "Member 'USaveGameOption::_bDamageVisible' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bAttackDirection) == 0x0000A0, "Member 'USaveGameOption::_bAttackDirection' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bIsMinimapRightSide) == 0x0000A1, "Member 'USaveGameOption::_bIsMinimapRightSide' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _softWareCursorSpeed) == 0x0000A4, "Member 'USaveGameOption::_softWareCursorSpeed' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _antialiasQuality) == 0x0000A8, "Member 'USaveGameOption::_antialiasQuality' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _shadowQuality) == 0x0000A9, "Member 'USaveGameOption::_shadowQuality' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bOcclusion) == 0x0000AA, "Member 'USaveGameOption::_bOcclusion' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bBloom) == 0x0000AB, "Member 'USaveGameOption::_bBloom' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bMotionBlur) == 0x0000AC, "Member 'USaveGameOption::_bMotionBlur' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _textureQuality) == 0x0000AD, "Member 'USaveGameOption::_textureQuality' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _effectQuality) == 0x0000AE, "Member 'USaveGameOption::_effectQuality' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _foliageQuality) == 0x0000AF, "Member 'USaveGameOption::_foliageQuality' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _windowMode) == 0x0000B0, "Member 'USaveGameOption::_windowMode' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bVSync) == 0x0000B1, "Member 'USaveGameOption::_bVSync' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _fps) == 0x0000B4, "Member 'USaveGameOption::_fps' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _resolution) == 0x0000B8, "Member 'USaveGameOption::_resolution' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _damageVisibleType) == 0x0000C0, "Member 'USaveGameOption::_damageVisibleType' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bBattleAnnounce) == 0x0000C1, "Member 'USaveGameOption::_bBattleAnnounce' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bBackgroundSound) == 0x0000C2, "Member 'USaveGameOption::_bBackgroundSound' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bVoiceChat) == 0x0000C3, "Member 'USaveGameOption::_bVoiceChat' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _micLevel) == 0x0000C4, "Member 'USaveGameOption::_micLevel' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _voiceLanguage) == 0x0000C8, "Member 'USaveGameOption::_voiceLanguage' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bCommentaryVoice) == 0x0000D8, "Member 'USaveGameOption::_bCommentaryVoice' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _masterVolume) == 0x0000DC, "Member 'USaveGameOption::_masterVolume' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bgmVolume) == 0x0000E0, "Member 'USaveGameOption::_bgmVolume' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _battleBGMVolume) == 0x0000E4, "Member 'USaveGameOption::_battleBGMVolume' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _seVolume) == 0x0000E8, "Member 'USaveGameOption::_seVolume' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _voiceVolume) == 0x0000EC, "Member 'USaveGameOption::_voiceVolume' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _voiceChatVolume) == 0x0000F0, "Member 'USaveGameOption::_voiceChatVolume' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bGameAgreeKpi) == 0x0000F4, "Member 'USaveGameOption::_bGameAgreeKpi' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bDAPGameAgreeKpi) == 0x0000F5, "Member 'USaveGameOption::_bDAPGameAgreeKpi' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bGameLastLoginDateTime) == 0x0000F8, "Member 'USaveGameOption::_bGameLastLoginDateTime' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _outGameTutorialFlag) == 0x000100, "Member 'USaveGameOption::_outGameTutorialFlag' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _selectedPlayModeId) == 0x000150, "Member 'USaveGameOption::_selectedPlayModeId' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _finishedInitialSetting) == 0x000154, "Member 'USaveGameOption::_finishedInitialSetting' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bDisconnectionWarring) == 0x000155, "Member 'USaveGameOption::_bDisconnectionWarring' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bAgreeFreeTextInput_PlayerName) == 0x000156, "Member 'USaveGameOption::_bAgreeFreeTextInput_PlayerName' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bAgreeFreeTextInput_PlayerIntroduction) == 0x000157, "Member 'USaveGameOption::_bAgreeFreeTextInput_PlayerIntroduction' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _gamePadActionMappings) == 0x000158, "Member 'USaveGameOption::_gamePadActionMappings' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _keyboardActionMappings) == 0x000168, "Member 'USaveGameOption::_keyboardActionMappings' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _keyboardMoveAxisMappings) == 0x000178, "Member 'USaveGameOption::_keyboardMoveAxisMappings' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _trackingNumber) == 0x000188, "Member 'USaveGameOption::_trackingNumber' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bAgreeFreeTextInput_TextChat) == 0x000198, "Member 'USaveGameOption::_bAgreeFreeTextInput_TextChat' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bAgreeFreeTextInput_GuildChat) == 0x000199, "Member 'USaveGameOption::_bAgreeFreeTextInput_GuildChat' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _guildLevel) == 0x00019C, "Member 'USaveGameOption::_guildLevel' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _guildSearchId) == 0x0001A0, "Member 'USaveGameOption::_guildSearchId' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bGuildBlock) == 0x0001B0, "Member 'USaveGameOption::_bGuildBlock' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bGuildNameConsent) == 0x0001B1, "Member 'USaveGameOption::_bGuildNameConsent' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bGuildProfileConsent) == 0x0001B2, "Member 'USaveGameOption::_bGuildProfileConsent' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _loadShopItems) == 0x0001B8, "Member 'USaveGameOption::_loadShopItems' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _viewedShopItems) == 0x000208, "Member 'USaveGameOption::_viewedShopItems' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _characterUnLockMaps) == 0x000258, "Member 'USaveGameOption::_characterUnLockMaps' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _bExitRoomDateTime) == 0x0002A8, "Member 'USaveGameOption::_bExitRoomDateTime' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _customMatchRoomKey) == 0x0002B0, "Member 'USaveGameOption::_customMatchRoomKey' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _gamePadActionMappingsOnCommand) == 0x0002C0, "Member 'USaveGameOption::_gamePadActionMappingsOnCommand' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _keyboardActionMappingOnCommand) == 0x000310, "Member 'USaveGameOption::_keyboardActionMappingOnCommand' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _keyboardMoveAxisMappingOnCommand) == 0x000360, "Member 'USaveGameOption::_keyboardMoveAxisMappingOnCommand' has a wrong offset!");
static_assert(offsetof(USaveGameOption, _saveGameCustomHudCommands) == 0x0003B0, "Member 'USaveGameOption::_saveGameCustomHudCommands' has a wrong offset!");

// Class GameModule.GameOption
// 0x00F0 (0x0120 - 0x0030)
class UGameOption final : public UGameInstanceSubsystem
{
public:
	class USaveGameOption*                        _optionData;                                       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_38[0x70];                                      // 0x0038(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	class USaveGameOption*                        _gameOptionDefault;                                // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USaveGameOption*                        _savedOptionData;                                  // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B8[0x68];                                      // 0x00B8(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class FString BP_GetButtonGuideImgId(const class UObject* WorldContextObject, const EKeyConfigurableCommand Command, const bool IsDesignTime);

	void BP_DefaultGamePadAction();
	void BP_DefaultKeyboardAction();
	class FName BP_GetCustomCommandName(int32 Index_0, int32 Page);
	void BP_SaveAndApplyGamePadAction(const EKeyConfigurableCommand Command, const struct FKey& Key);
	void BP_SaveAndApplyKeyboardAction(const EKeyConfigurableCommand Command, const struct FKey& Key);
	bool BP_SaveGameOption();
	void BP_SetAgreeFreeTextInputGuildChat(bool Agree);
	void BP_SetAgreeFreeTextInputPlayerIntroduction(bool Agree);
	void BP_SetAgreeFreeTextInputPlayerName(bool Agree);
	void BP_SetAgreeFreeTextInputTextChat(bool Agree);
	void BP_SetDAPGameAgreeKpi(bool AgreeKpi);
	void BP_SetGameAgreeKpi(bool AgreeKpi);
	void BP_SetGamePadCameraAimRate(float Rate);
	void BP_SetGamePadCameraDashRate(float Rate);
	void BP_SetGamePadCameraPitchReverse(bool bReverse);
	void BP_SetGamePadCameraRate(float Rate);
	void BP_SetGamePadCameraYawReverse(bool bReverse);
	void BP_SetGuildData(int32 GuildLevel, const class FString& GuildSearchId, bool bBlock);
	void BP_SetGuildNameConsent(bool bAgree);
	void BP_SetGuildProfileConsent(bool bAgree);
	void BP_SetMouseCameraPitchReverse(bool bReverse);
	void BP_SetMouseCameraRate(float Rate);
	void BP_SetMouseCameraYawReverse(bool bReverse);
	void BP_SetPadPlay(bool bPad);
	void BP_SetShopItem(const TSet<int32>& ShopItems);
	bool BP_SetViewShopItem(int32 ShopItem);
	TMap<EKeyConfigurableCommand, struct FKey> GetGamePadKeyConfigOnCommand();
	TMap<EKeyConfigurableCommand, struct FKey> GetKeyboardAxisKeyConfigOnCommand();
	TMap<EKeyConfigurableCommand, struct FKey> GetKeyboardKeyConfigOnCommand();
	bool GetOutGameTutorialFlag(const ETutorialPopupScene PopupScene);
	void OnCompleteLoadTrackingNumber(const class FString& TrackingNumber);
	void SetAuraAreaType(EGameOptionAuraAreaType AreaType);
	void SetAuraDispType(EGameOptionAuraDispType DispType);
	void SetCameraAcclerationType(ECameraAccelerationType AccelerationType);
	void SetIsAutoLevelUp(bool bAuto);
	void SetOutGameTutorialFlag(const ETutorialPopupScene PopupScene, bool Flag);
	void SetPlayBattleActionCamera(bool bPlay);

	bool BP_GetAgreeFreeTextInputGuildChat() const;
	bool BP_GetAgreeFreeTextInputPlayerIntroduction() const;
	bool BP_GetAgreeFreeTextInputPlayerName() const;
	bool BP_GetAgreeFreeTextInputTextChat() const;
	float BP_GetGamePadCameraAimRate() const;
	float BP_GetGamePadCameraDashRate() const;
	bool BP_GetGamePadCameraPitchReverse() const;
	float BP_GetGamePadCameraRate() const;
	bool BP_GetGamePadCameraYawReverse() const;
	int32 BP_GetGuildLevel() const;
	bool BP_GetGuildNameConsent() const;
	bool BP_GetGuildProfileConsent() const;
	class FString BP_GetGuildSearchId() const;
	bool BP_GetMouseCameraPitchReverse() const;
	float BP_GetMouseCameraRate() const;
	bool BP_GetMouseCameraYawReverse() const;
	bool BP_GetPadPlay() const;
	EGameOptionAuraAreaType GetAuraAreaType() const;
	EGameOptionAuraDispType GetAuraDispType() const;
	ECameraAccelerationType GetCameraAcclerationType() const;
	bool GetMiniMapVisible() const;
	bool GetPlayBattleActionCamera() const;
	bool IsAutoLevelUp() const;
	bool IsMinimapRightSide() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameOption">();
	}
	static class UGameOption* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameOption>();
	}
};
static_assert(alignof(UGameOption) == 0x000008, "Wrong alignment on UGameOption");
static_assert(sizeof(UGameOption) == 0x000120, "Wrong size on UGameOption");
static_assert(offsetof(UGameOption, _optionData) == 0x000030, "Member 'UGameOption::_optionData' has a wrong offset!");
static_assert(offsetof(UGameOption, _gameOptionDefault) == 0x0000A8, "Member 'UGameOption::_gameOptionDefault' has a wrong offset!");
static_assert(offsetof(UGameOption, _savedOptionData) == 0x0000B0, "Member 'UGameOption::_savedOptionData' has a wrong offset!");

// Class GameModule.GameOptionSettingsInterface
// 0x0000 (0x0028 - 0x0028)
class IGameOptionSettingsInterface final : public IInterface
{
public:
	void CloseOptionMenu();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameOptionSettingsInterface">();
	}
	static class IGameOptionSettingsInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IGameOptionSettingsInterface>();
	}
};
static_assert(alignof(IGameOptionSettingsInterface) == 0x000008, "Wrong alignment on IGameOptionSettingsInterface");
static_assert(sizeof(IGameOptionSettingsInterface) == 0x000028, "Wrong size on IGameOptionSettingsInterface");

// Class GameModule.OpenSettingParam
// 0x0018 (0x0040 - 0x0028)
class UOpenSettingParam final : public UObject
{
public:
	ESettingOpenFrom                              _openFrom;                                         // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             _onCloseSettings;                                  // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OpenSettingParam">();
	}
	static class UOpenSettingParam* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOpenSettingParam>();
	}
};
static_assert(alignof(UOpenSettingParam) == 0x000008, "Wrong alignment on UOpenSettingParam");
static_assert(sizeof(UOpenSettingParam) == 0x000040, "Wrong size on UOpenSettingParam");
static_assert(offsetof(UOpenSettingParam, _openFrom) == 0x000028, "Member 'UOpenSettingParam::_openFrom' has a wrong offset!");
static_assert(offsetof(UOpenSettingParam, _onCloseSettings) == 0x000030, "Member 'UOpenSettingParam::_onCloseSettings' has a wrong offset!");

// Class GameModule.GameOptionSettingsPresenter
// 0x0010 (0x0258 - 0x0248)
class AGameOptionSettingsPresenter final : public AWidgetCreator
{
public:
	uint8                                         Pad_248[0x8];                                      // 0x0248(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UOpenSettingParam*                      _paramOnOpen;                                      // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameOptionSettingsPresenter">();
	}
	static class AGameOptionSettingsPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGameOptionSettingsPresenter>();
	}
};
static_assert(alignof(AGameOptionSettingsPresenter) == 0x000008, "Wrong alignment on AGameOptionSettingsPresenter");
static_assert(sizeof(AGameOptionSettingsPresenter) == 0x000258, "Wrong size on AGameOptionSettingsPresenter");
static_assert(offsetof(AGameOptionSettingsPresenter, _paramOnOpen) == 0x000250, "Member 'AGameOptionSettingsPresenter::_paramOnOpen' has a wrong offset!");

// Class GameModule.GameSequenceWork
// 0x0648 (0x0678 - 0x0030)
class UGameSequenceWork final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UProfileDisplayData*                    _profileDisplayData;                               // 0x0038(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             _onWebApiError;                                    // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _onLoginRequestFinished;                           // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x30];                                      // 0x0070(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimaryAssetNetworkWaitIcon*           _primaryAssetNetworkWaitIcon;                      // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnErrorWindowClosedDelegate;                       // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPopupGeneralWindowClosedDelegate;                // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnErrorWindowOpenDelegate;                         // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x20];                                      // 0x00D8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             _networkErrorDT;                                   // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_100[0x20];                                     // 0x0100(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UWidgetBase>                _netWorkErrorWidgetClass;                          // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UWidgetBase>                _networkWaitngWidgetClass;                         // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UWidgetBase>                _teamCommentaryMessageWidgetClass;                 // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNetworkErrorWidget*                    _netWorkErrorWidget;                               // 0x0138(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWaitNetworkMessage*                    _networkWaitngWidget;                              // 0x0140(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_148[0x8];                                      // 0x0148(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UTeamCommentaryMessageWidget*           _teamCommentaryMessageWidget;                      // 0x0150(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNetworkErrorWidget*                    _pupupGeneralWidget;                               // 0x0158(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_             _onUpdateTutorial;                                 // 0x0160(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_170[0x70];                                     // 0x0170(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UChatMemberWidget>          _chatMemberWidgetClass;                            // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UChatMemberWidget*                      _chatMemberWidget;                                 // 0x01E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1F0[0x4];                                      // 0x01F0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _debugAddressIndex;                                // 0x01F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _debugCustomServerPort;                            // 0x01F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _debugCustomServerAddress;                         // 0x0208(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _dedicatedServerAddress;                           // 0x0218(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_             _onChangeBattleSequence;                           // 0x0228(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_             _onBattleSequenceCancel;                           // 0x0238(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_             _onCancelVisualLobbySearch;                        // 0x0248(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_258[0x58];                                     // 0x0258(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _sequenceTimer;                                    // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bSoloBattleSequence;                              // 0x02B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bBattleWaitAutoTimerStop;                         // 0x02B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2B6[0x2];                                      // 0x02B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             _onSetNoticeUnreadFlag;                            // 0x02B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C8[0x40];                                     // 0x02C8(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _gameRuleListIndex;                                // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         _gameTutorialStep;                                 // 0x030C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_310[0x8];                                      // 0x0310(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _cpuList;                                          // 0x0318(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_             _onChangeBattleRule;                               // 0x0328(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_338[0x10];                                     // 0x0338(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnChangedMainMenuDelegate;                         // 0x0348(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSubLevelHiddenDelegate;                          // 0x0358(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _onTokushoAndSettlementCloseDelegate;              // 0x0368(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	class ULevelStreamingDynamic*                 _mainMenuTabSubLevelStreamingDynamic;              // 0x0378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UWorld>                  _mainMenuTabLevel;                                 // 0x0380(0x0028)(Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULevelStreamingDynamic*                 _openSubLevelStreamingDynamic;                     // 0x03A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B0[0x20];                                     // 0x03B0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FGameplayTag>              _mainMenuMapping;                                  // 0x03D0(0x0050)(Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnSubLevelHiddenTutorialDelegate;                  // 0x0420(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_430[0xC8];                                     // 0x0430(0x00C8)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             _onItemGetListCloseDelegate;                       // 0x04F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _onItemDetailSubLevelCloseDelegate;                // 0x0508(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UPrimaryAssetGallery*                   _primaryAssetGallery;                              // 0x0518(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_520[0x10];                                     // 0x0520(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimaryAssetGuild*                     _primaryAssetGuild;                                // 0x0530(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_538[0x20];                                     // 0x0538(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimaryAssetLoginBonusLogo*            _primaryAssetLoginBonusLogo;                       // 0x0558(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_560[0x8];                                      // 0x0560(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimaryAssetEvent*                     _primaryAssetEvent;                                // 0x0568(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPrimaryAssetBriefing*                  _primaryAssetBriefing;                             // 0x0570(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_578[0x1];                                      // 0x0578(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _bIsMasterDataInitializeComplete;                  // 0x0579(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_57A[0xE6];                                     // 0x057A(0x00E6)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimaryAssetNoticeImage*               _primaryAssetNotice;                               // 0x0660(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_668[0x8];                                      // 0x0668(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimaryDataAsset*                      _primaryAssetsStageInfo;                           // 0x0670(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void BattleSequenceCancelDelegate__DelegateSignature(EBattleStartSequenceType SequenceType);
	void BP_BackOpenLevel();
	void BP_CloseSubLevelItemGetList();
	void BP_EndBattleAndReturnToMenu();
	class UProfileDisplayData* BP_GetProfileDisplayData();
	bool BP_IsMoveHeroCrystalTab();
	bool BP_IsOpenNetworkErrorWindow();
	bool BP_IsOpenReturnTitleNetworkErrorWindow();
	void BP_OpenLevelCustomize(bool Shortcut);
	void BP_OpenLevelCustomMatch(bool bFadeOut);
	void BP_OpenLevelGasha();
	void BP_OpenLevelLoginBonus(ELoginBonusTransitionType TransitionType);
	void BP_OpenLevelMainMenu();
	void BP_OpenLevelShopTopNormal();
	void BP_OpenLevelShopTopPremium();
	void BP_OpenMainMenuTabLevel(const struct FGameplayTag& Tag);
	void BP_OpenObtainFromLevel(int32 ObtainFromCode);
	void BP_OpenSubLevelItemDetail();
	void BP_OpenSubLevelItemGetList(const class FText& Subtitle);
	void BP_OpenSubLevelUseCurrencySelect();
	void BP_OpenSubLevelWindow(TSoftObjectPtr<class UWorld> SubLevel);
	bool BP_PopReturnLevel(class FName* OutLevelName);
	void BP_PushReturnCurrentLevel();
	void BP_PushReturnLevel(const TSoftObjectPtr<class UObject> Level);
	void BP_SetMenuListIndex(int32 Index_0);
	void BP_SetOpenNetworkWaitingMessageParameter(EWaitMessageType Type, bool backImage, bool backBlur);
	void BP_SetOpenNetworkWaitingNoneMessageType();
	void BP_SetOpenNetworkWaitingResetParameter();
	void BP_SetOutGameCharacterCode(int32 CharaCode);
	void BP_SetOutGameFriendFetchCategory(EFriendRequesetType Type, bool buleFlag);
	void BP_SetTutorialStep(int32 Index_0);
	void BP_SpecifyTabIndex(const int32& TabIdx);
	void CallDebugMenuMasterData();
	void CancelVisualLobbySearchDelegate__DelegateSignature();
	void ChangeBattleRuleDelegate__DelegateSignature();
	void ChangeBattleSequenceDelegate__DelegateSignature(EBattleStartSequenceType Sequence);
	void ClearReturnLevel();
	void DebugSetSquadMemberNum(int32 Num, ECharacterId CharacterId);
	void EndTutorialAndReturn();
	EGameAfterLoginStepType GetGameAfterLoginStepType();
	ETutorialPopupScene GetOutGameTutorialPopupScene();
	EMdGameMode GetSelectedGameMode();
	bool IsFinishedTutorial();
	bool IsSquadMemberDuplicate(ECharacterId SelectedCharacterId);
	void ItemDetailSubLevelCloseDelegate__DelegateSignature();
	void ItemGetSceneCloseDelegate__DelegateSignature();
	void NetworkDelegate__DelegateSignature();
	void NetworkLoginFinishedDelegate__DelegateSignature(bool LoginCompleted);
	void OnApplicationHasReactivatedDelegate();
	void OnAudioFinished_AppearSquad(class UAtomComponent* AtomComponent);
	void OnAudioFinished_AppearSquadMember(class UAtomComponent* AtomComponent);
	void OnChangedMainMenuDelegate__DelegateSignature(int32 Index_0);
	void OnChangeIdleStatusEvent(bool Idle, int32 StateSetting);
	void OnCustomMatchTeamUpUpdatedEvent();
	void OnErrorWindowClosed();
	void OnFinishedFadeOutOpenLevelCustomMatch();
	void OnFinishedQuitBattle_ChangeIdleStatusEvent(bool Idle, int32 StateSetting);
	void OnGameOptionSoundChanged();
	void OnHasReactivedCompletePurchaseDelegate__DelegateSignature();
	void OnLoadCompleteConfirmPurchase(int32 RequestId);
	void OnLoadCompletePurchaseError(int32 RequestId, const class FName Key, const class FName Message);
	void OnLoadCompletePurchaseStatus(int32 RequestId);
	void OnNotifyTeamUpKickedEvent();
	void OnPlayerRequestErrorEvent(int32 RequestId, const class FName Key, const class FName Message);
	void OnPlayerRequestErrorServerEvent(int32 RequestId, const class FName Key, const class FName Message);
	void OnPopupGeneralWindowClosed();
	void OnReadyForPlayEvent();
	void OnSquadNumChanged(int32 SquadNum);
	void OnSubLevelHidden();
	void OnSubLevelHidden_TutorialPopup();
	void OnSubLevelHiddenDelegate__DelegateSignature();
	void OnSubLevelHiddenTutorialDelegate__DelegateSignature(ETutorialPopupScene Scene);
	void OnSubLevelShown();
	void OnSystemErrorEvent(int32 RequestId, const class FName Key, const class FName Message);
	void OnSystemErrorServerEvent(int32 RequestId, const class FName Key, const class FName Message);
	void OnTeamUpAutoBattleStartErrorEvent();
	void OnTeamUpAutoStartBattleCompleteEvent(EAutoStartBattleState State);
	void OnTeamUpLeaveEvent();
	void OnTeamUpMemberKickedEvent();
	void OnTeamUpUpdatedEvent();
	void OnTokushoAndSettlementCloseDelegate__DelegateSignature();
	void OnTutorialFinishedFadeOut();
	void OnTutorialFinishedStepUpdated();
	void OnUpdateCompleteUpdateTutorial(int32 RequestId);
	void OnVoiceChatChangePlayerStatus(const class FString& UniqueNetId, EVoiceChatMemberStatus Status, float Value);
	void OnVoiceChatChangeStatus(EVoiceChatSystemStatus Status);
	void OnWindowCloseEventDelegate__DelegateSignature();
	void OpenTutorialLevel(const class FString& UniqueId);
	class ULevelStreamingDynamic* OutgameTutorialTipsWidget(ETutorialPopupScene PopupScene, bool AlwaysOpen);
	void SetEditPlayerIndex(int32 Index_0);
	void SetEditTrainingCharacterId(ECharacterId CharacterId);
	void SetEditTrainingSkillVariationCode(int32 SkillVariationCode);
	void SetLoginBonusTransitionType(ELoginBonusTransitionType TransitionType);
	void SetMoveHeroCrystalTab(bool Flag);
	void SetNextGuildLevel(int32 NextGuildLevel);
	void SetNoticeUnreadFlagDelegate__DelegateSignature(bool Unread);
	void SetPrevGuildLevel(int32 PrevGuildLevel);
	void SetSkillVariationCodeMap(const TMap<ECharacterId, int32>& SkillVariationCodeMap);
	void ShowInviteUINetworkTest();
	void ShowInviteUITest();
	void UpdateTutorialDelegate__DelegateSignature();
	bool UpdateTutorialStepNo(ETutorialStepNo UpdateStepNo);
	void VoiceChatEvent__DelegateSignature(const class FString& UniqueNetId);
	void WebApiErrorEventDelegate__DelegateSignature();

	EBattleStartSequenceType BP_GetMainMenuBattleSequence() const;
	int32 BP_GetOutGameCharacterCode() const;
	bool BP_GetOutGameFriendFetchBlueFlag() const;
	EFriendRequesetType BP_GetOutGameFriendFetchCategoryType() const;
	int32 BP_GetTutorialStep() const;
	int32 GetEditPlayerIndex() const;
	ECharacterId GetEditTrainingCharacterId() const;
	int32 GetEditTrainingSkillVariationCode() const;
	float GetMatchingSquadTimer() const;
	int32 GetNextGuildLevel() const;
	int32 GetPrevGuildLevel() const;
	float GetSearchSquadTimer() const;
	class FString GetSelectGuildId() const;
	float GetSequenceTimer() const;
	const TMap<ECharacterId, int32> GetSkillVariationCodeMap() const;
	bool IsOutGame() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameSequenceWork">();
	}
	static class UGameSequenceWork* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameSequenceWork>();
	}
};
static_assert(alignof(UGameSequenceWork) == 0x000008, "Wrong alignment on UGameSequenceWork");
static_assert(sizeof(UGameSequenceWork) == 0x000678, "Wrong size on UGameSequenceWork");
static_assert(offsetof(UGameSequenceWork, _profileDisplayData) == 0x000038, "Member 'UGameSequenceWork::_profileDisplayData' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _onWebApiError) == 0x000050, "Member 'UGameSequenceWork::_onWebApiError' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _onLoginRequestFinished) == 0x000060, "Member 'UGameSequenceWork::_onLoginRequestFinished' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _primaryAssetNetworkWaitIcon) == 0x0000A0, "Member 'UGameSequenceWork::_primaryAssetNetworkWaitIcon' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, OnErrorWindowClosedDelegate) == 0x0000A8, "Member 'UGameSequenceWork::OnErrorWindowClosedDelegate' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, OnPopupGeneralWindowClosedDelegate) == 0x0000B8, "Member 'UGameSequenceWork::OnPopupGeneralWindowClosedDelegate' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, OnErrorWindowOpenDelegate) == 0x0000C8, "Member 'UGameSequenceWork::OnErrorWindowOpenDelegate' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _networkErrorDT) == 0x0000F8, "Member 'UGameSequenceWork::_networkErrorDT' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _netWorkErrorWidgetClass) == 0x000120, "Member 'UGameSequenceWork::_netWorkErrorWidgetClass' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _networkWaitngWidgetClass) == 0x000128, "Member 'UGameSequenceWork::_networkWaitngWidgetClass' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _teamCommentaryMessageWidgetClass) == 0x000130, "Member 'UGameSequenceWork::_teamCommentaryMessageWidgetClass' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _netWorkErrorWidget) == 0x000138, "Member 'UGameSequenceWork::_netWorkErrorWidget' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _networkWaitngWidget) == 0x000140, "Member 'UGameSequenceWork::_networkWaitngWidget' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _teamCommentaryMessageWidget) == 0x000150, "Member 'UGameSequenceWork::_teamCommentaryMessageWidget' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _pupupGeneralWidget) == 0x000158, "Member 'UGameSequenceWork::_pupupGeneralWidget' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _onUpdateTutorial) == 0x000160, "Member 'UGameSequenceWork::_onUpdateTutorial' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _chatMemberWidgetClass) == 0x0001E0, "Member 'UGameSequenceWork::_chatMemberWidgetClass' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _chatMemberWidget) == 0x0001E8, "Member 'UGameSequenceWork::_chatMemberWidget' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _debugAddressIndex) == 0x0001F4, "Member 'UGameSequenceWork::_debugAddressIndex' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _debugCustomServerPort) == 0x0001F8, "Member 'UGameSequenceWork::_debugCustomServerPort' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _debugCustomServerAddress) == 0x000208, "Member 'UGameSequenceWork::_debugCustomServerAddress' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _dedicatedServerAddress) == 0x000218, "Member 'UGameSequenceWork::_dedicatedServerAddress' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _onChangeBattleSequence) == 0x000228, "Member 'UGameSequenceWork::_onChangeBattleSequence' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _onBattleSequenceCancel) == 0x000238, "Member 'UGameSequenceWork::_onBattleSequenceCancel' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _onCancelVisualLobbySearch) == 0x000248, "Member 'UGameSequenceWork::_onCancelVisualLobbySearch' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _sequenceTimer) == 0x0002B0, "Member 'UGameSequenceWork::_sequenceTimer' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _bSoloBattleSequence) == 0x0002B4, "Member 'UGameSequenceWork::_bSoloBattleSequence' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _bBattleWaitAutoTimerStop) == 0x0002B5, "Member 'UGameSequenceWork::_bBattleWaitAutoTimerStop' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _onSetNoticeUnreadFlag) == 0x0002B8, "Member 'UGameSequenceWork::_onSetNoticeUnreadFlag' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _gameRuleListIndex) == 0x000308, "Member 'UGameSequenceWork::_gameRuleListIndex' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _gameTutorialStep) == 0x00030C, "Member 'UGameSequenceWork::_gameTutorialStep' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _cpuList) == 0x000318, "Member 'UGameSequenceWork::_cpuList' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _onChangeBattleRule) == 0x000328, "Member 'UGameSequenceWork::_onChangeBattleRule' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, OnChangedMainMenuDelegate) == 0x000348, "Member 'UGameSequenceWork::OnChangedMainMenuDelegate' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, OnSubLevelHiddenDelegate) == 0x000358, "Member 'UGameSequenceWork::OnSubLevelHiddenDelegate' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _onTokushoAndSettlementCloseDelegate) == 0x000368, "Member 'UGameSequenceWork::_onTokushoAndSettlementCloseDelegate' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _mainMenuTabSubLevelStreamingDynamic) == 0x000378, "Member 'UGameSequenceWork::_mainMenuTabSubLevelStreamingDynamic' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _mainMenuTabLevel) == 0x000380, "Member 'UGameSequenceWork::_mainMenuTabLevel' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _openSubLevelStreamingDynamic) == 0x0003A8, "Member 'UGameSequenceWork::_openSubLevelStreamingDynamic' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _mainMenuMapping) == 0x0003D0, "Member 'UGameSequenceWork::_mainMenuMapping' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, OnSubLevelHiddenTutorialDelegate) == 0x000420, "Member 'UGameSequenceWork::OnSubLevelHiddenTutorialDelegate' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _onItemGetListCloseDelegate) == 0x0004F8, "Member 'UGameSequenceWork::_onItemGetListCloseDelegate' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _onItemDetailSubLevelCloseDelegate) == 0x000508, "Member 'UGameSequenceWork::_onItemDetailSubLevelCloseDelegate' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _primaryAssetGallery) == 0x000518, "Member 'UGameSequenceWork::_primaryAssetGallery' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _primaryAssetGuild) == 0x000530, "Member 'UGameSequenceWork::_primaryAssetGuild' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _primaryAssetLoginBonusLogo) == 0x000558, "Member 'UGameSequenceWork::_primaryAssetLoginBonusLogo' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _primaryAssetEvent) == 0x000568, "Member 'UGameSequenceWork::_primaryAssetEvent' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _primaryAssetBriefing) == 0x000570, "Member 'UGameSequenceWork::_primaryAssetBriefing' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _bIsMasterDataInitializeComplete) == 0x000579, "Member 'UGameSequenceWork::_bIsMasterDataInitializeComplete' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _primaryAssetNotice) == 0x000660, "Member 'UGameSequenceWork::_primaryAssetNotice' has a wrong offset!");
static_assert(offsetof(UGameSequenceWork, _primaryAssetsStageInfo) == 0x000670, "Member 'UGameSequenceWork::_primaryAssetsStageInfo' has a wrong offset!");

// Class GameModule.GameStatics
// 0x0000 (0x0028 - 0x0028)
class UGameStatics final : public UBlueprintFunctionLibrary
{
public:
	static void DebugDrawText2D(const class UObject* WorldContextObject, const int32 InPosX, const int32 InPosY, const class FString& InText, const struct FLinearColor& InColor);
	static void DebugDrawText2DF(const class UObject* WorldContextObject, const float InPosX, const float InPosY, const class FString& InText, const struct FLinearColor& InColor);
	static EStageId GetCurrentStageId(class UObject* WorldContextObject);
	static int32 GetCurrentStageIdAsInt(class UObject* WorldContextObject);
	static class FString GetCurrentStageIdAsString(class UObject* WorldContextObject);
	static bool IsAutoPlayMode(class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameStatics">();
	}
	static class UGameStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameStatics>();
	}
};
static_assert(alignof(UGameStatics) == 0x000008, "Wrong alignment on UGameStatics");
static_assert(sizeof(UGameStatics) == 0x000028, "Wrong size on UGameStatics");

// Class GameModule.GashaSuggestParam
// 0x02D0 (0x02F8 - 0x0028)
class UGashaSuggestParam : public UObject
{
public:
	TMap<EGashaSuggestionVoiceType, float>        _purVoiceSugget;                                   // 0x0028(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EGashaSuggestionVoiceType, float>        _srsVoiceSugget;                                   // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EGashaSuggestionVoiceType, float>        _srVoiceSugget;                                    // 0x00C8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EMdRarity, float>                        _srSuggestBom;                                     // 0x0118(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EMdRarity, float>                        _ssrSuggestBom;                                    // 0x0168(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EMdRarity, float>                        _srSuggestBox;                                     // 0x01B8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EMdRarity, float>                        _ssrSuggestBox;                                    // 0x0208(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EMdRarity, float>                        _srSuggestAura;                                    // 0x0258(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EMdRarity, float>                        _ssrSuggestAura;                                   // 0x02A8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GashaSuggestParam">();
	}
	static class UGashaSuggestParam* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGashaSuggestParam>();
	}
};
static_assert(alignof(UGashaSuggestParam) == 0x000008, "Wrong alignment on UGashaSuggestParam");
static_assert(sizeof(UGashaSuggestParam) == 0x0002F8, "Wrong size on UGashaSuggestParam");
static_assert(offsetof(UGashaSuggestParam, _purVoiceSugget) == 0x000028, "Member 'UGashaSuggestParam::_purVoiceSugget' has a wrong offset!");
static_assert(offsetof(UGashaSuggestParam, _srsVoiceSugget) == 0x000078, "Member 'UGashaSuggestParam::_srsVoiceSugget' has a wrong offset!");
static_assert(offsetof(UGashaSuggestParam, _srVoiceSugget) == 0x0000C8, "Member 'UGashaSuggestParam::_srVoiceSugget' has a wrong offset!");
static_assert(offsetof(UGashaSuggestParam, _srSuggestBom) == 0x000118, "Member 'UGashaSuggestParam::_srSuggestBom' has a wrong offset!");
static_assert(offsetof(UGashaSuggestParam, _ssrSuggestBom) == 0x000168, "Member 'UGashaSuggestParam::_ssrSuggestBom' has a wrong offset!");
static_assert(offsetof(UGashaSuggestParam, _srSuggestBox) == 0x0001B8, "Member 'UGashaSuggestParam::_srSuggestBox' has a wrong offset!");
static_assert(offsetof(UGashaSuggestParam, _ssrSuggestBox) == 0x000208, "Member 'UGashaSuggestParam::_ssrSuggestBox' has a wrong offset!");
static_assert(offsetof(UGashaSuggestParam, _srSuggestAura) == 0x000258, "Member 'UGashaSuggestParam::_srSuggestAura' has a wrong offset!");
static_assert(offsetof(UGashaSuggestParam, _ssrSuggestAura) == 0x0002A8, "Member 'UGashaSuggestParam::_ssrSuggestAura' has a wrong offset!");

// Class GameModule.GashaDatabaseWork
// 0x01F0 (0x0220 - 0x0030)
class UGashaDatabaseWork final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x40];                                      // 0x0030(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             _exChangeWindowCloseDelegate;                      // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x78];                                      // 0x0080(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLoadIGashaResultImageData>     _loadList;                                         // 0x00F8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FLoadIGashaResultImageData>     _loadedList;                                       // 0x0108(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             _ssrItemDetailDelegate;                            // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _ssrPlayableCharacterTextDelegate;                 // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _ssrPlayableVoiceTextDelegate;                     // 0x0138(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _ssrGetAuraDelegate;                               // 0x0148(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _gashaCaracterOutGamePositionDelegate;             // 0x0158(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _gashaUIDelegate;                                  // 0x0168(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _gashaSSRTo2DDelegate;                             // 0x0178(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _gashaPauseSequencerDelegate;                      // 0x0188(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _onGashaUseCheckCancelDelegate;                    // 0x0198(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _onGashaInfoButtonBackDelegate;                    // 0x01A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	class UGashaSuggestParam*                     _suggestParam;                                     // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C0[0x8];                                      // 0x01C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             _suggestVoiceFinishedDelegate;                     // 0x01C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8[0x28];                                     // 0x01D8(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             _exChangeFinishedDelegate;                         // 0x0200(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UPrimaryAssetGashaImage*                _primaryAssetGashaImage;                           // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bDebugIsSuggestVoice;                             // 0x0218(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219[0x7];                                      // 0x0219(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool BP_EntryGashaParam(int32 GashaIndex, int32 PaymentIndex);
	int32 BP_GetActiveGashaCode();
	class FText BP_GetEntryNotes();
	void BP_GetGashaBannerPaperSprites(int32 Code, class UPaperSprite* PBanner, class UPaperSprite* PLogo);
	EMdRarity BP_GetGashaBoxTopRarity();
	class UPaperSprite* BP_GetGashaCostumeImageFromItemCode(int32 ItemCode, EGashaImageSizeType SizeType);
	class UPaperSprite* BP_GetGashaCurrencyImage(int32 ItemCode, EGashaImageSizeType SizeType);
	class UPaperSprite* BP_GetGashaEmoteImageFromCharacterId(int32 ItemCode, EGashaImageSizeType SizeType);
	int32 BP_GetGashaIndex();
	int32 BP_GetGashaNum();
	const struct FGashaResultData BP_GetGashaResultData(int32 Index_0);
	bool BP_GetGashaSkipFlg();
	EMdRarity BP_GetGashaTopRarity();
	class UPaperSprite* BP_GetGashaVoiceImageFromCharacterId(ECharacterId CharacterId, bool IsIcon);
	EGashaLawType BP_GetLawType();
	struct FVector2D BP_GetPaperSpriteSize(class UPaperSprite* Sprite);
	int32 BP_GetSequencerSkipFrame();
	void BP_OpenGashaLevel();
	void BP_OpenMainMenuLevel();
	class UAtomComponent* BP_PlayGashaSuggestVoice();
	void BP_ResetEntryGashaParam();
	void BP_RunGasha();
	void BP_SetGashaSkipFlg(bool IsSkip);
	void BP_SetLawType(EGashaLawType LawType);
	void BP_SetSequencerSkipFrame(int32 Frame);
	void ConfirmRetryGashaComplete(int32 RequestId);
	void DebugOpenSuggestVoiceSubLevel();
	void DebugRunGasha();
	void DebugRunGashaLoadComplete(int32 RequestId);
	void ExChangeListLoadComplete(int32 RequestId);
	void ExChangeLoadComplete(int32 RequestId);
	void ExchangeLotteryMileage();
	void GashaListLoadComplete(int32 RequestId);
	void LoadGashaResultImage();
	void OfferRatioLoadComplete(int32 RequestId);
	void OnGashaInfoButtonBackDelegate__DelegateSignature();
	void OnGashaUseCheckCancelDelegate__DelegateSignature();
	void OnLoadedImage(class UPaperSprite* Sprite);
	void OnPreLoadComplete();
	void OpenGashaLevelFadeOutEnd();
	void RunGashaLoadComplete(int32 RequestId);
	void RunGashaLoadError(int32 RequestId, const class FName Key, const class FName Message);
	void SetCharaImage(class UImage* Image, EMdRarityItemCategory Category, int32 ItemCode, bool bSyncLoad, EGashaImageSizeType SizeType);
	void UnLoadGashaResultImage();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GashaDatabaseWork">();
	}
	static class UGashaDatabaseWork* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGashaDatabaseWork>();
	}
};
static_assert(alignof(UGashaDatabaseWork) == 0x000008, "Wrong alignment on UGashaDatabaseWork");
static_assert(sizeof(UGashaDatabaseWork) == 0x000220, "Wrong size on UGashaDatabaseWork");
static_assert(offsetof(UGashaDatabaseWork, _exChangeWindowCloseDelegate) == 0x000070, "Member 'UGashaDatabaseWork::_exChangeWindowCloseDelegate' has a wrong offset!");
static_assert(offsetof(UGashaDatabaseWork, _loadList) == 0x0000F8, "Member 'UGashaDatabaseWork::_loadList' has a wrong offset!");
static_assert(offsetof(UGashaDatabaseWork, _loadedList) == 0x000108, "Member 'UGashaDatabaseWork::_loadedList' has a wrong offset!");
static_assert(offsetof(UGashaDatabaseWork, _ssrItemDetailDelegate) == 0x000118, "Member 'UGashaDatabaseWork::_ssrItemDetailDelegate' has a wrong offset!");
static_assert(offsetof(UGashaDatabaseWork, _ssrPlayableCharacterTextDelegate) == 0x000128, "Member 'UGashaDatabaseWork::_ssrPlayableCharacterTextDelegate' has a wrong offset!");
static_assert(offsetof(UGashaDatabaseWork, _ssrPlayableVoiceTextDelegate) == 0x000138, "Member 'UGashaDatabaseWork::_ssrPlayableVoiceTextDelegate' has a wrong offset!");
static_assert(offsetof(UGashaDatabaseWork, _ssrGetAuraDelegate) == 0x000148, "Member 'UGashaDatabaseWork::_ssrGetAuraDelegate' has a wrong offset!");
static_assert(offsetof(UGashaDatabaseWork, _gashaCaracterOutGamePositionDelegate) == 0x000158, "Member 'UGashaDatabaseWork::_gashaCaracterOutGamePositionDelegate' has a wrong offset!");
static_assert(offsetof(UGashaDatabaseWork, _gashaUIDelegate) == 0x000168, "Member 'UGashaDatabaseWork::_gashaUIDelegate' has a wrong offset!");
static_assert(offsetof(UGashaDatabaseWork, _gashaSSRTo2DDelegate) == 0x000178, "Member 'UGashaDatabaseWork::_gashaSSRTo2DDelegate' has a wrong offset!");
static_assert(offsetof(UGashaDatabaseWork, _gashaPauseSequencerDelegate) == 0x000188, "Member 'UGashaDatabaseWork::_gashaPauseSequencerDelegate' has a wrong offset!");
static_assert(offsetof(UGashaDatabaseWork, _onGashaUseCheckCancelDelegate) == 0x000198, "Member 'UGashaDatabaseWork::_onGashaUseCheckCancelDelegate' has a wrong offset!");
static_assert(offsetof(UGashaDatabaseWork, _onGashaInfoButtonBackDelegate) == 0x0001A8, "Member 'UGashaDatabaseWork::_onGashaInfoButtonBackDelegate' has a wrong offset!");
static_assert(offsetof(UGashaDatabaseWork, _suggestParam) == 0x0001B8, "Member 'UGashaDatabaseWork::_suggestParam' has a wrong offset!");
static_assert(offsetof(UGashaDatabaseWork, _suggestVoiceFinishedDelegate) == 0x0001C8, "Member 'UGashaDatabaseWork::_suggestVoiceFinishedDelegate' has a wrong offset!");
static_assert(offsetof(UGashaDatabaseWork, _exChangeFinishedDelegate) == 0x000200, "Member 'UGashaDatabaseWork::_exChangeFinishedDelegate' has a wrong offset!");
static_assert(offsetof(UGashaDatabaseWork, _primaryAssetGashaImage) == 0x000210, "Member 'UGashaDatabaseWork::_primaryAssetGashaImage' has a wrong offset!");
static_assert(offsetof(UGashaDatabaseWork, _bDebugIsSuggestVoice) == 0x000218, "Member 'UGashaDatabaseWork::_bDebugIsSuggestVoice' has a wrong offset!");

// Class GameModule.PrimaryAssetBase
// 0x0030 (0x0060 - 0x0030)
class UPrimaryAssetBase : public UPrimaryDataAsset
{
public:
	struct FPrimaryAssetType                      _assetType;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UObject>>         _explicitAssets;                                   // 0x0038(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           _explicitBlueprints;                               // 0x0048(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         _bLabelAssetsInMyDirectory : 1;                    // 0x0058(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrimaryAssetBase">();
	}
	static class UPrimaryAssetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrimaryAssetBase>();
	}
};
static_assert(alignof(UPrimaryAssetBase) == 0x000008, "Wrong alignment on UPrimaryAssetBase");
static_assert(sizeof(UPrimaryAssetBase) == 0x000060, "Wrong size on UPrimaryAssetBase");
static_assert(offsetof(UPrimaryAssetBase, _assetType) == 0x000030, "Member 'UPrimaryAssetBase::_assetType' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetBase, _explicitAssets) == 0x000038, "Member 'UPrimaryAssetBase::_explicitAssets' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetBase, _explicitBlueprints) == 0x000048, "Member 'UPrimaryAssetBase::_explicitBlueprints' has a wrong offset!");

// Class GameModule.GimmickBaseDataAsset
// 0x0008 (0x0068 - 0x0060)
class UGimmickBaseDataAsset : public UPrimaryAssetBase
{
public:
	class FName                                   _gimmickId;                                        // 0x0060(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GimmickBaseDataAsset">();
	}
	static class UGimmickBaseDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGimmickBaseDataAsset>();
	}
};
static_assert(alignof(UGimmickBaseDataAsset) == 0x000008, "Wrong alignment on UGimmickBaseDataAsset");
static_assert(sizeof(UGimmickBaseDataAsset) == 0x000068, "Wrong size on UGimmickBaseDataAsset");
static_assert(offsetof(UGimmickBaseDataAsset, _gimmickId) == 0x000060, "Member 'UGimmickBaseDataAsset::_gimmickId' has a wrong offset!");

// Class GameModule.HeroBaseComponent
// 0x0000 (0x0200 - 0x0200)
#pragma pack(push, 0x1)
class alignas(0x10) UHeroBaseComponent : public USceneComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HeroBaseComponent">();
	}
	static class UHeroBaseComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHeroBaseComponent>();
	}
};
#pragma pack(pop)
static_assert(alignof(UHeroBaseComponent) == 0x000010, "Wrong alignment on UHeroBaseComponent");
static_assert(sizeof(UHeroBaseComponent) == 0x000200, "Wrong size on UHeroBaseComponent");

// Class GameModule.HeroProjectileMovementComponent
// 0x0078 (0x0128 - 0x00B0)
class UHeroProjectileMovementComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B0[0xC];                                       // 0x00B0(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InitialSpeed;                                      // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bRotationFollowsVelocity : 1;                      // 0x00C4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRotationRemainsVertical : 1;                      // 0x00C4(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShouldBounce : 1;                                 // 0x00C4(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ProjectileGravityScale;                            // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        _updateComponent;                                  // 0x00D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPrimitiveComponent*                    _simulatedPrim;                                    // 0x00D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                 _owner;                                            // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E8[0x40];                                      // 0x00E8(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HeroProjectileMovementComponent">();
	}
	static class UHeroProjectileMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHeroProjectileMovementComponent>();
	}
};
static_assert(alignof(UHeroProjectileMovementComponent) == 0x000008, "Wrong alignment on UHeroProjectileMovementComponent");
static_assert(sizeof(UHeroProjectileMovementComponent) == 0x000128, "Wrong size on UHeroProjectileMovementComponent");
static_assert(offsetof(UHeroProjectileMovementComponent, InitialSpeed) == 0x0000BC, "Member 'UHeroProjectileMovementComponent::InitialSpeed' has a wrong offset!");
static_assert(offsetof(UHeroProjectileMovementComponent, MaxSpeed) == 0x0000C0, "Member 'UHeroProjectileMovementComponent::MaxSpeed' has a wrong offset!");
static_assert(offsetof(UHeroProjectileMovementComponent, ProjectileGravityScale) == 0x0000C8, "Member 'UHeroProjectileMovementComponent::ProjectileGravityScale' has a wrong offset!");
static_assert(offsetof(UHeroProjectileMovementComponent, _updateComponent) == 0x0000D0, "Member 'UHeroProjectileMovementComponent::_updateComponent' has a wrong offset!");
static_assert(offsetof(UHeroProjectileMovementComponent, _simulatedPrim) == 0x0000D8, "Member 'UHeroProjectileMovementComponent::_simulatedPrim' has a wrong offset!");
static_assert(offsetof(UHeroProjectileMovementComponent, _owner) == 0x0000E0, "Member 'UHeroProjectileMovementComponent::_owner' has a wrong offset!");

// Class GameModule.HeroRuntimeVirtualTextureVolume
// 0x0018 (0x0238 - 0x0220)
class AHeroRuntimeVirtualTextureVolume final : public AActor
{
public:
	class URuntimeVirtualTextureComponent*        VirtualTextureComponent;                           // 0x0220(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FOverrideRVTParameter>          _overrideRVTParamTbl;                              // 0x0228(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HeroRuntimeVirtualTextureVolume">();
	}
	static class AHeroRuntimeVirtualTextureVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHeroRuntimeVirtualTextureVolume>();
	}
};
static_assert(alignof(AHeroRuntimeVirtualTextureVolume) == 0x000008, "Wrong alignment on AHeroRuntimeVirtualTextureVolume");
static_assert(sizeof(AHeroRuntimeVirtualTextureVolume) == 0x000238, "Wrong size on AHeroRuntimeVirtualTextureVolume");
static_assert(offsetof(AHeroRuntimeVirtualTextureVolume, VirtualTextureComponent) == 0x000220, "Member 'AHeroRuntimeVirtualTextureVolume::VirtualTextureComponent' has a wrong offset!");
static_assert(offsetof(AHeroRuntimeVirtualTextureVolume, _overrideRVTParamTbl) == 0x000228, "Member 'AHeroRuntimeVirtualTextureVolume::_overrideRVTParamTbl' has a wrong offset!");

// Class GameModule.HerovsAssetManager
// 0x0050 (0x04C8 - 0x0478)
class UHerovsAssetManager final : public UAssetManager
{
public:
	uint8                                         Pad_478[0x50];                                     // 0x0478(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HerovsAssetManager">();
	}
	static class UHerovsAssetManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHerovsAssetManager>();
	}
};
static_assert(alignof(UHerovsAssetManager) == 0x000008, "Wrong alignment on UHerovsAssetManager");
static_assert(sizeof(UHerovsAssetManager) == 0x0004C8, "Wrong size on UHerovsAssetManager");

// Class GameModule.HerovsControlChannel
// 0x0030 (0x00B0 - 0x0080)
class UHerovsControlChannel final : public UControlChannel
{
public:
	uint8                                         Pad_80[0x30];                                      // 0x0080(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnErrorForDedicatedServer(int32 RequestId, const class FName Key, const class FName Message);
	void OnLoadedProfile(int32 RequestId);
	void OnReadyForPlayersLoginForDedicatedServer();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HerovsControlChannel">();
	}
	static class UHerovsControlChannel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHerovsControlChannel>();
	}
};
static_assert(alignof(UHerovsControlChannel) == 0x000008, "Wrong alignment on UHerovsControlChannel");
static_assert(sizeof(UHerovsControlChannel) == 0x0000B0, "Wrong size on UHerovsControlChannel");

// Class GameModule.HerovsDataManagerSubsystem
// 0x0140 (0x0170 - 0x0030)
class UHerovsDataManagerSubsystem final : public UEngineSubsystem
{
public:
	uint8                                         Pad_30[0x140];                                     // 0x0030(0x0140)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HerovsDataManagerSubsystem">();
	}
	static class UHerovsDataManagerSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHerovsDataManagerSubsystem>();
	}
};
static_assert(alignof(UHerovsDataManagerSubsystem) == 0x000008, "Wrong alignment on UHerovsDataManagerSubsystem");
static_assert(sizeof(UHerovsDataManagerSubsystem) == 0x000170, "Wrong size on UHerovsDataManagerSubsystem");

// Class GameModule.HerovsGameInstance
// 0x01D0 (0x0378 - 0x01A8)
class UHerovsGameInstance final : public UGameInstance
{
public:
	uint8                                         Pad_1A8[0xF8];                                     // 0x01A8(0x00F8)(Fixing Size After Last Property [ Dumper-7 ])
	class UFont*                                  FontObject;                                        // 0x02A0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A8[0x50];                                     // 0x02A8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             _onChangeSteamOverrayActive;                       // 0x02F8(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _onMicroTxnAuthorizationResponse;                  // 0x0308(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_318[0x60];                                     // 0x0318(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void SetNeverRenderFocusRule();

	class FString BP_GetDipSelectedLanguage();
	void BP_OnChangeLanguage(bool bNext);
	void BP_OpenRestartedLevel();
	void OnChangeSteamOverrayActive__DelegateSignature(bool bActive);
	void OnLoadComplete();
	void OnLoadCompleteConfirmPurchase(int32 RequestId);
	void OnLoadCompletePurchaseStatus(int32 RequestId);
	void OnLoadCompleteStartPurchase(int32 RequestId);
	void OnMasterDataInitializeComplete();
	void OnMicroTxnAuthorizationResponse__DelegateSignature(const class FString& OrderId, bool bAuthorized);
	void OnReloadedMasterDataInitializeComplete();
	void SetMatchingPlayerNum(int32 Num);
	void TestLoadPurchaseCatalog(int32 RequestId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HerovsGameInstance">();
	}
	static class UHerovsGameInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHerovsGameInstance>();
	}
};
static_assert(alignof(UHerovsGameInstance) == 0x000008, "Wrong alignment on UHerovsGameInstance");
static_assert(sizeof(UHerovsGameInstance) == 0x000378, "Wrong size on UHerovsGameInstance");
static_assert(offsetof(UHerovsGameInstance, FontObject) == 0x0002A0, "Member 'UHerovsGameInstance::FontObject' has a wrong offset!");
static_assert(offsetof(UHerovsGameInstance, _onChangeSteamOverrayActive) == 0x0002F8, "Member 'UHerovsGameInstance::_onChangeSteamOverrayActive' has a wrong offset!");
static_assert(offsetof(UHerovsGameInstance, _onMicroTxnAuthorizationResponse) == 0x000308, "Member 'UHerovsGameInstance::_onMicroTxnAuthorizationResponse' has a wrong offset!");

// Class GameModule.HerovsGameMode
// 0x0030 (0x0340 - 0x0310)
class AHerovsGameMode : public AGameModeCommon
{
public:
	uint8                                         Pad_310[0x30];                                     // 0x0310(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HerovsGameMode">();
	}
	static class AHerovsGameMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHerovsGameMode>();
	}
};
static_assert(alignof(AHerovsGameMode) == 0x000008, "Wrong alignment on AHerovsGameMode");
static_assert(sizeof(AHerovsGameMode) == 0x000340, "Wrong size on AHerovsGameMode");

// Class GameModule.HerovsGameSession
// 0x0000 (0x0238 - 0x0238)
class AHerovsGameSession : public AGameSessionCommon
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HerovsGameSession">();
	}
	static class AHerovsGameSession* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHerovsGameSession>();
	}
};
static_assert(alignof(AHerovsGameSession) == 0x000008, "Wrong alignment on AHerovsGameSession");
static_assert(sizeof(AHerovsGameSession) == 0x000238, "Wrong size on AHerovsGameSession");

// Class GameModule.HerovsGameState
// 0x00C0 (0x0350 - 0x0290)
class AHerovsGameState : public AGameStateCommon
{
public:
	uint8                                         Pad_290[0x60];                                     // 0x0290(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             _onAddedPlayerNoArg;                               // 0x02F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _onRemovedPlayerNoArg;                             // 0x0300(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	EGameModeType                                 _gameModeType;                                     // 0x0310(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bEnableDynamicResolution;                         // 0x0311(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_312[0x1E];                                     // 0x0312(0x001E)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AUIPresenterBase>           _systemMenuPresenterClass;                         // 0x0330(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class AUIPresenterBase>           _spectatorSystemMenuPresenterClass;                // 0x0338(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AUIPresenterBase*                       _systemMenuPresenter;                              // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bCreateSystemMenuPresenter;                       // 0x0348(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_CloseSystemMenu();
	void BP_OpenSystemMenu();
	void PlayerArrayChangeEvent__DelegateSignature();

	EGameModeType GetGameModeType() const;
	bool IsLocalCharacterReady() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HerovsGameState">();
	}
	static class AHerovsGameState* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHerovsGameState>();
	}
};
static_assert(alignof(AHerovsGameState) == 0x000008, "Wrong alignment on AHerovsGameState");
static_assert(sizeof(AHerovsGameState) == 0x000350, "Wrong size on AHerovsGameState");
static_assert(offsetof(AHerovsGameState, _onAddedPlayerNoArg) == 0x0002F0, "Member 'AHerovsGameState::_onAddedPlayerNoArg' has a wrong offset!");
static_assert(offsetof(AHerovsGameState, _onRemovedPlayerNoArg) == 0x000300, "Member 'AHerovsGameState::_onRemovedPlayerNoArg' has a wrong offset!");
static_assert(offsetof(AHerovsGameState, _gameModeType) == 0x000310, "Member 'AHerovsGameState::_gameModeType' has a wrong offset!");
static_assert(offsetof(AHerovsGameState, _bEnableDynamicResolution) == 0x000311, "Member 'AHerovsGameState::_bEnableDynamicResolution' has a wrong offset!");
static_assert(offsetof(AHerovsGameState, _systemMenuPresenterClass) == 0x000330, "Member 'AHerovsGameState::_systemMenuPresenterClass' has a wrong offset!");
static_assert(offsetof(AHerovsGameState, _spectatorSystemMenuPresenterClass) == 0x000338, "Member 'AHerovsGameState::_spectatorSystemMenuPresenterClass' has a wrong offset!");
static_assert(offsetof(AHerovsGameState, _systemMenuPresenter) == 0x000340, "Member 'AHerovsGameState::_systemMenuPresenter' has a wrong offset!");
static_assert(offsetof(AHerovsGameState, _bCreateSystemMenuPresenter) == 0x000348, "Member 'AHerovsGameState::_bCreateSystemMenuPresenter' has a wrong offset!");

// Class GameModule.HerovsPlayerState
// 0x0040 (0x0360 - 0x0320)
class AHerovsPlayerState : public APlayerStateCommon
{
public:
	struct FUniqueNetIdKey                        _uniqueNetId;                                      // 0x0320(0x0008)(Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 _onlineId;                                         // 0x0328(0x0010)(Net, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int16                                         _playerId;                                         // 0x0338(0x0002)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         _teamId;                                           // 0x033A(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_33B[0x1];                                      // 0x033B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _squadId;                                          // 0x033C(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         _bKing : 1;                                        // 0x0340(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Net, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	ECharacterId                                  _spawnCharacterId;                                 // 0x0341(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         _spawnVariationNo;                                 // 0x0342(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_343[0x1D];                                     // 0x0343(0x001D)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_SetIsKing(bool bKing);
	void BP_SetSquadId(int32 ID);
	void BP_SetTeamId(int32 ID);
	void MulticastOnInitialized();

	bool BP_GetIsKing() const;
	int32 BP_GetSquadId() const;
	int32 BP_GetTeamId() const;
	const struct FUniqueNetIdRepl BP_GetUniqueId() const;
	class FString BP_GetUniqueNetId() const;
	void OnRep_UpdateKingEffect() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HerovsPlayerState">();
	}
	static class AHerovsPlayerState* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHerovsPlayerState>();
	}
};
static_assert(alignof(AHerovsPlayerState) == 0x000008, "Wrong alignment on AHerovsPlayerState");
static_assert(sizeof(AHerovsPlayerState) == 0x000360, "Wrong size on AHerovsPlayerState");
static_assert(offsetof(AHerovsPlayerState, _uniqueNetId) == 0x000320, "Member 'AHerovsPlayerState::_uniqueNetId' has a wrong offset!");
static_assert(offsetof(AHerovsPlayerState, _onlineId) == 0x000328, "Member 'AHerovsPlayerState::_onlineId' has a wrong offset!");
static_assert(offsetof(AHerovsPlayerState, _playerId) == 0x000338, "Member 'AHerovsPlayerState::_playerId' has a wrong offset!");
static_assert(offsetof(AHerovsPlayerState, _teamId) == 0x00033A, "Member 'AHerovsPlayerState::_teamId' has a wrong offset!");
static_assert(offsetof(AHerovsPlayerState, _squadId) == 0x00033C, "Member 'AHerovsPlayerState::_squadId' has a wrong offset!");
static_assert(offsetof(AHerovsPlayerState, _spawnCharacterId) == 0x000341, "Member 'AHerovsPlayerState::_spawnCharacterId' has a wrong offset!");
static_assert(offsetof(AHerovsPlayerState, _spawnVariationNo) == 0x000342, "Member 'AHerovsPlayerState::_spawnVariationNo' has a wrong offset!");

// Class GameModule.HudResource
// 0x0600 (0x0660 - 0x0060)
class UHudResource final : public UPrimaryAssetBase
{
public:
	TMap<ECharacterId, struct FHudCharacterInfo>  _charactersInfo;                                   // 0x0060(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
	TMap<EMdAbilityType, TSoftObjectPtr<class UPaperSprite>> _abilitySupplyImage;                               // 0x00B0(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<ECharacterId, TSoftObjectPtr<class UObject>> _abilityMeshCharacterTexture;                      // 0x0100(0x0050)(Edit, BlueprintVisible, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<EMdAbilityType, TSoftObjectPtr<class UObject>> _abilityMeshTypeTexture;                           // 0x0150(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<EAttackType, class UPaperSprite*>        _abilityTypeSprites;                               // 0x01A0(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FName, TSoftObjectPtr<class UPaperSprite>> _recoverySupplyImage;                              // 0x01F0(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<EMarkerType, TSoftObjectPtr<class UPaperSprite>> _signalImage;                                      // 0x0240(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCurveLinearColorAtlas>  _popUpColorCurveAtlas;                             // 0x0290(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      _mapCharacterFaceMaterial;                         // 0x02B8(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      _mapCharacterBadgeMaterial;                        // 0x02E0(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_308[0x8];                                      // 0x0308(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            _myIconOnMap;                                      // 0x0310(0x00D0)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            _rescue;                                           // 0x03E0(0x00D0)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            _bully;                                            // 0x04B0(0x00D0)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            _treasureBox;                                      // 0x0580(0x00D0)(Edit, NativeAccessSpecifierPublic)
	class FName                                   _characterPath;                                    // 0x0650(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_658[0x8];                                      // 0x0658(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UPaperSprite* BP_GetAbilityMeshFaceTexture(ECharacterId CharacterId);
	class UPaperSprite* BP_GetCharacterFaceSprite(ECharacterId CharacterId);
	class UTexture2D* BP_GetCharacterFaceSpriteTexture(ECharacterId CharacterId);
	class UPaperSprite* GetMarkerSprite(EMarkerType MarkerType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HudResource">();
	}
	static class UHudResource* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHudResource>();
	}
};
static_assert(alignof(UHudResource) == 0x000010, "Wrong alignment on UHudResource");
static_assert(sizeof(UHudResource) == 0x000660, "Wrong size on UHudResource");
static_assert(offsetof(UHudResource, _charactersInfo) == 0x000060, "Member 'UHudResource::_charactersInfo' has a wrong offset!");
static_assert(offsetof(UHudResource, _abilitySupplyImage) == 0x0000B0, "Member 'UHudResource::_abilitySupplyImage' has a wrong offset!");
static_assert(offsetof(UHudResource, _abilityMeshCharacterTexture) == 0x000100, "Member 'UHudResource::_abilityMeshCharacterTexture' has a wrong offset!");
static_assert(offsetof(UHudResource, _abilityMeshTypeTexture) == 0x000150, "Member 'UHudResource::_abilityMeshTypeTexture' has a wrong offset!");
static_assert(offsetof(UHudResource, _abilityTypeSprites) == 0x0001A0, "Member 'UHudResource::_abilityTypeSprites' has a wrong offset!");
static_assert(offsetof(UHudResource, _recoverySupplyImage) == 0x0001F0, "Member 'UHudResource::_recoverySupplyImage' has a wrong offset!");
static_assert(offsetof(UHudResource, _signalImage) == 0x000240, "Member 'UHudResource::_signalImage' has a wrong offset!");
static_assert(offsetof(UHudResource, _popUpColorCurveAtlas) == 0x000290, "Member 'UHudResource::_popUpColorCurveAtlas' has a wrong offset!");
static_assert(offsetof(UHudResource, _mapCharacterFaceMaterial) == 0x0002B8, "Member 'UHudResource::_mapCharacterFaceMaterial' has a wrong offset!");
static_assert(offsetof(UHudResource, _mapCharacterBadgeMaterial) == 0x0002E0, "Member 'UHudResource::_mapCharacterBadgeMaterial' has a wrong offset!");
static_assert(offsetof(UHudResource, _myIconOnMap) == 0x000310, "Member 'UHudResource::_myIconOnMap' has a wrong offset!");
static_assert(offsetof(UHudResource, _rescue) == 0x0003E0, "Member 'UHudResource::_rescue' has a wrong offset!");
static_assert(offsetof(UHudResource, _bully) == 0x0004B0, "Member 'UHudResource::_bully' has a wrong offset!");
static_assert(offsetof(UHudResource, _treasureBox) == 0x000580, "Member 'UHudResource::_treasureBox' has a wrong offset!");
static_assert(offsetof(UHudResource, _characterPath) == 0x000650, "Member 'UHudResource::_characterPath' has a wrong offset!");

// Class GameModule.InGameDataManagerSubsystem
// 0x0008 (0x0038 - 0x0030)
class UInGameDataManagerSubsystem final : public UEngineSubsystem
{
public:
	class UStaticDataManager*                     _staticDataManager;                                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InGameDataManagerSubsystem">();
	}
	static class UInGameDataManagerSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInGameDataManagerSubsystem>();
	}
};
static_assert(alignof(UInGameDataManagerSubsystem) == 0x000008, "Wrong alignment on UInGameDataManagerSubsystem");
static_assert(sizeof(UInGameDataManagerSubsystem) == 0x000038, "Wrong size on UInGameDataManagerSubsystem");
static_assert(offsetof(UInGameDataManagerSubsystem, _staticDataManager) == 0x000030, "Member 'UInGameDataManagerSubsystem::_staticDataManager' has a wrong offset!");

// Class GameModule.LambdaWrapper
// 0x0048 (0x0070 - 0x0028)
class ULambdaWrapper final : public UObject
{
public:
	uint8                                         Pad_28[0x48];                                      // 0x0028(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Dispatch();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LambdaWrapper">();
	}
	static class ULambdaWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULambdaWrapper>();
	}
};
static_assert(alignof(ULambdaWrapper) == 0x000008, "Wrong alignment on ULambdaWrapper");
static_assert(sizeof(ULambdaWrapper) == 0x000070, "Wrong size on ULambdaWrapper");

// Class GameModule.LoadIconWidget
// 0x0000 (0x0350 - 0x0350)
class ULoadIconWidget : public UWidgetBase
{
public:
	void BP_PlayIconAnimation();
	void BP_PlayIconCloseAnimation();
	void BP_PlayIconOpenAnimation();
	void StartFadeIn();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LoadIconWidget">();
	}
	static class ULoadIconWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULoadIconWidget>();
	}
};
static_assert(alignof(ULoadIconWidget) == 0x000008, "Wrong alignment on ULoadIconWidget");
static_assert(sizeof(ULoadIconWidget) == 0x000350, "Wrong size on ULoadIconWidget");

// Class GameModule.LoadTransitionWidget
// 0x0040 (0x04E0 - 0x04A0)
class ULoadTransitionWidget : public UWidgetTransition
{
public:
	int32                                         _itemMax;                                          // 0x04A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4A4[0x4];                                      // 0x04A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetSwitcher*                        _bgSwitch;                                         // 0x04A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAdjustTextWidget*                      TipsText;                                          // 0x04B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNamedSlot*                             _loadIconSlot;                                     // 0x04B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetSwitcher*                        _iconSwicher;                                      // 0x04C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCanvasPanel*                           _loadingWindow;                                    // 0x04C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPrimaryAssetItemIcon*                  _primaryAsset;                                     // 0x04D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULoadIconWidget*                        _nextIconWidget;                                   // 0x04D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void HiddenBgTexture();
	void UpdateBgTexture(int32 Code);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LoadTransitionWidget">();
	}
	static class ULoadTransitionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULoadTransitionWidget>();
	}
};
static_assert(alignof(ULoadTransitionWidget) == 0x000010, "Wrong alignment on ULoadTransitionWidget");
static_assert(sizeof(ULoadTransitionWidget) == 0x0004E0, "Wrong size on ULoadTransitionWidget");
static_assert(offsetof(ULoadTransitionWidget, _itemMax) == 0x0004A0, "Member 'ULoadTransitionWidget::_itemMax' has a wrong offset!");
static_assert(offsetof(ULoadTransitionWidget, _bgSwitch) == 0x0004A8, "Member 'ULoadTransitionWidget::_bgSwitch' has a wrong offset!");
static_assert(offsetof(ULoadTransitionWidget, TipsText) == 0x0004B0, "Member 'ULoadTransitionWidget::TipsText' has a wrong offset!");
static_assert(offsetof(ULoadTransitionWidget, _loadIconSlot) == 0x0004B8, "Member 'ULoadTransitionWidget::_loadIconSlot' has a wrong offset!");
static_assert(offsetof(ULoadTransitionWidget, _iconSwicher) == 0x0004C0, "Member 'ULoadTransitionWidget::_iconSwicher' has a wrong offset!");
static_assert(offsetof(ULoadTransitionWidget, _loadingWindow) == 0x0004C8, "Member 'ULoadTransitionWidget::_loadingWindow' has a wrong offset!");
static_assert(offsetof(ULoadTransitionWidget, _primaryAsset) == 0x0004D0, "Member 'ULoadTransitionWidget::_primaryAsset' has a wrong offset!");
static_assert(offsetof(ULoadTransitionWidget, _nextIconWidget) == 0x0004D8, "Member 'ULoadTransitionWidget::_nextIconWidget' has a wrong offset!");

// Class GameModule.LocalPlayerGame
// 0x0000 (0x0258 - 0x0258)
class ULocalPlayerGame final : public ULocalPlayer
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LocalPlayerGame">();
	}
	static class ULocalPlayerGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULocalPlayerGame>();
	}
};
static_assert(alignof(ULocalPlayerGame) == 0x000008, "Wrong alignment on ULocalPlayerGame");
static_assert(sizeof(ULocalPlayerGame) == 0x000258, "Wrong size on ULocalPlayerGame");

// Class GameModule.MasterParamDB
// 0x0110 (0x0140 - 0x0030)
class UMasterParamDB final : public UEngineSubsystem
{
public:
	uint8                                         Pad_30[0x110];                                     // 0x0030(0x0110)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MasterParamDB">();
	}
	static class UMasterParamDB* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMasterParamDB>();
	}
};
static_assert(alignof(UMasterParamDB) == 0x000008, "Wrong alignment on UMasterParamDB");
static_assert(sizeof(UMasterParamDB) == 0x000140, "Wrong size on UMasterParamDB");

// Class GameModule.MaterialControlComponent
// 0x00C0 (0x0170 - 0x00B0)
class UMaterialControlComponent : public UActorComponent
{
public:
	TMap<class FName, class UMaterialDataCache*>  _cacheList;                                        // 0x00B0(0x0050)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_100[0x20];                                     // 0x0100(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EMaterialOverWriteType, class UMaterialInstanceDynamic*> _overWriteMaterialList;                            // 0x0120(0x0050)(NativeAccessSpecifierPrivate)

public:
	void BP_HiddenMaterial(const EMaterialHideFlag Flag, const class FName CacheName);
	void BP_HiddenMaterial_Custom(const EMaterialCustomFlag Flag, const class FName CacheName);
	void BP_IndicateMaterial(const EMaterialHideFlag Flag, const class FName CacheName);
	void BP_IndicateMaterial_Custom(const EMaterialCustomFlag Flag, const class FName CacheName);
	void BP_Reflesh(const class FName CacheName);
	void BP_RegisterOverWriteMaterial(EMaterialOverWriteType OverWriteType, class UMaterialInterface* MaterialInterface);
	void BP_ResetOverWriteMaterial(const class FName CacheName);
	void BP_SetDefaultScalarParameter(class FName ParameterName, EMaterialGroupFlag GroupFlag, class FName CacheName);
	void BP_SetDefaultScalarParameterForOverWriteMaterial(class FName ParameterName, EMaterialOverWriteType Type);
	void BP_SetDefaultTextureParameter(class FName ParameterName, EMaterialGroupFlag GroupFlag, class FName CacheName);
	void BP_SetDefaultVectorParameter(class FName ParameterName, EMaterialGroupFlag GroupFlag, class FName CacheName);
	void BP_SetOverWriteMaterial(EMaterialOverWriteType OverWriteType, const class FName CacheName);
	void BP_SetScalarParameter(class FName ParameterName, float Value, EMaterialGroupFlag GroupFlag, class FName CacheName);
	void BP_SetScalarParameterForOverWriteMaterial(class FName ParameterName, float Value, EMaterialOverWriteType Type);
	void BP_SetTexture_Custom(const EMaterialCustomFlag Flag, class UTexture* Value, const class FName CacheName);
	void BP_SetTextureParameter(class FName ParameterName, class UTexture* Value, EMaterialGroupFlag GroupFlag, class FName CacheName);
	void BP_SetVectorParameter(class FName ParameterName, const struct FLinearColor& Value, EMaterialGroupFlag GroupFlag, class FName CacheName);
	void BP_TransitionScalar(const struct FTransitionMaterialScalarParamArgment& Argment);
	void BP_TransitionVector(const struct FTransitionMaterialVectorParamArgment& Argment);
	void BP_UnregisterOverWriteMaterial(EMaterialOverWriteType OverWriteType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialControlComponent">();
	}
	static class UMaterialControlComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialControlComponent>();
	}
};
static_assert(alignof(UMaterialControlComponent) == 0x000008, "Wrong alignment on UMaterialControlComponent");
static_assert(sizeof(UMaterialControlComponent) == 0x000170, "Wrong size on UMaterialControlComponent");
static_assert(offsetof(UMaterialControlComponent, _cacheList) == 0x0000B0, "Member 'UMaterialControlComponent::_cacheList' has a wrong offset!");
static_assert(offsetof(UMaterialControlComponent, _overWriteMaterialList) == 0x000120, "Member 'UMaterialControlComponent::_overWriteMaterialList' has a wrong offset!");

// Class GameModule.MaterialDataCache
// 0x0108 (0x0130 - 0x0028)
class UMaterialDataCache final : public UObject
{
public:
	TArray<struct FMaterialCacheInfo>             _cacheData;                                        // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UMeshComponent*                         _mesh;                                             // 0x0038(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0xF0];                                      // 0x0040(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialDataCache">();
	}
	static class UMaterialDataCache* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialDataCache>();
	}
};
static_assert(alignof(UMaterialDataCache) == 0x000008, "Wrong alignment on UMaterialDataCache");
static_assert(sizeof(UMaterialDataCache) == 0x000130, "Wrong size on UMaterialDataCache");
static_assert(offsetof(UMaterialDataCache, _cacheData) == 0x000028, "Member 'UMaterialDataCache::_cacheData' has a wrong offset!");
static_assert(offsetof(UMaterialDataCache, _mesh) == 0x000038, "Member 'UMaterialDataCache::_mesh' has a wrong offset!");

// Class GameModule.MissionDetailsInterface
// 0x0000 (0x0028 - 0x0028)
class IMissionDetailsInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MissionDetailsInterface">();
	}
	static class IMissionDetailsInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMissionDetailsInterface>();
	}
};
static_assert(alignof(IMissionDetailsInterface) == 0x000008, "Wrong alignment on IMissionDetailsInterface");
static_assert(sizeof(IMissionDetailsInterface) == 0x000028, "Wrong size on IMissionDetailsInterface");

// Class GameModule.MissionDetailsPresenter
// 0x0008 (0x0250 - 0x0248)
class AMissionDetailsPresenter final : public AWidgetCreator
{
public:
	uint8                                         Pad_248[0x8];                                      // 0x0248(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MissionDetailsPresenter">();
	}
	static class AMissionDetailsPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMissionDetailsPresenter>();
	}
};
static_assert(alignof(AMissionDetailsPresenter) == 0x000008, "Wrong alignment on AMissionDetailsPresenter");
static_assert(sizeof(AMissionDetailsPresenter) == 0x000250, "Wrong size on AMissionDetailsPresenter");

// Class GameModule.MissionListInterface
// 0x0000 (0x0028 - 0x0028)
class IMissionListInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MissionListInterface">();
	}
	static class IMissionListInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMissionListInterface>();
	}
};
static_assert(alignof(IMissionListInterface) == 0x000008, "Wrong alignment on IMissionListInterface");
static_assert(sizeof(IMissionListInterface) == 0x000028, "Wrong size on IMissionListInterface");

// Class GameModule.MissionListPresenter
// 0x0008 (0x0250 - 0x0248)
class AMissionListPresenter final : public AWidgetCreator
{
public:
	uint8                                         Pad_248[0x8];                                      // 0x0248(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MissionListPresenter">();
	}
	static class AMissionListPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMissionListPresenter>();
	}
};
static_assert(alignof(AMissionListPresenter) == 0x000008, "Wrong alignment on AMissionListPresenter");
static_assert(sizeof(AMissionListPresenter) == 0x000250, "Wrong size on AMissionListPresenter");

// Class GameModule.MultipleDigitsWidget
// 0x0040 (0x0390 - 0x0350)
class UMultipleDigitsWidget final : public UWidgetBase
{
public:
	uint8                                         _animPlayBelowNum;                                 // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_351[0x3];                                      // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _dispNum;                                          // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         _dispDigits;                                       // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_359[0x7];                                      // 0x0359(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UNumberWidget>              _numberWidgetClass;                                // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENumberAlignment                              _numAlignment;                                     // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bFillInZero;                                      // 0x0369(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bViewPlus;                                        // 0x036A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bViewSlash;                                       // 0x036B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bComma;                                           // 0x036C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bAdjust;                                          // 0x036D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_36E[0x2];                                      // 0x036E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanel*                           _numberCanvasPanel;                                // 0x0370(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         _numberHorizontalBox;                              // 0x0378(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_380[0x10];                                     // 0x0380(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_SetDisplayNumber(int32 DispNum, uint8 DispDigits);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MultipleDigitsWidget">();
	}
	static class UMultipleDigitsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMultipleDigitsWidget>();
	}
};
static_assert(alignof(UMultipleDigitsWidget) == 0x000008, "Wrong alignment on UMultipleDigitsWidget");
static_assert(sizeof(UMultipleDigitsWidget) == 0x000390, "Wrong size on UMultipleDigitsWidget");
static_assert(offsetof(UMultipleDigitsWidget, _animPlayBelowNum) == 0x000350, "Member 'UMultipleDigitsWidget::_animPlayBelowNum' has a wrong offset!");
static_assert(offsetof(UMultipleDigitsWidget, _dispNum) == 0x000354, "Member 'UMultipleDigitsWidget::_dispNum' has a wrong offset!");
static_assert(offsetof(UMultipleDigitsWidget, _dispDigits) == 0x000358, "Member 'UMultipleDigitsWidget::_dispDigits' has a wrong offset!");
static_assert(offsetof(UMultipleDigitsWidget, _numberWidgetClass) == 0x000360, "Member 'UMultipleDigitsWidget::_numberWidgetClass' has a wrong offset!");
static_assert(offsetof(UMultipleDigitsWidget, _numAlignment) == 0x000368, "Member 'UMultipleDigitsWidget::_numAlignment' has a wrong offset!");
static_assert(offsetof(UMultipleDigitsWidget, _bFillInZero) == 0x000369, "Member 'UMultipleDigitsWidget::_bFillInZero' has a wrong offset!");
static_assert(offsetof(UMultipleDigitsWidget, _bViewPlus) == 0x00036A, "Member 'UMultipleDigitsWidget::_bViewPlus' has a wrong offset!");
static_assert(offsetof(UMultipleDigitsWidget, _bViewSlash) == 0x00036B, "Member 'UMultipleDigitsWidget::_bViewSlash' has a wrong offset!");
static_assert(offsetof(UMultipleDigitsWidget, _bComma) == 0x00036C, "Member 'UMultipleDigitsWidget::_bComma' has a wrong offset!");
static_assert(offsetof(UMultipleDigitsWidget, _bAdjust) == 0x00036D, "Member 'UMultipleDigitsWidget::_bAdjust' has a wrong offset!");
static_assert(offsetof(UMultipleDigitsWidget, _numberCanvasPanel) == 0x000370, "Member 'UMultipleDigitsWidget::_numberCanvasPanel' has a wrong offset!");
static_assert(offsetof(UMultipleDigitsWidget, _numberHorizontalBox) == 0x000378, "Member 'UMultipleDigitsWidget::_numberHorizontalBox' has a wrong offset!");

// Class GameModule.MyADBaseWidget
// 0x0018 (0x0368 - 0x0350)
class UMyADBaseWidget final : public UWidgetBase
{
public:
	class UMaterialInterface*                     _effectMaterial;                                   // 0x0350(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 _baseImage;                                        // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                _resourceObject;                                   // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MyADBaseWidget">();
	}
	static class UMyADBaseWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMyADBaseWidget>();
	}
};
static_assert(alignof(UMyADBaseWidget) == 0x000008, "Wrong alignment on UMyADBaseWidget");
static_assert(sizeof(UMyADBaseWidget) == 0x000368, "Wrong size on UMyADBaseWidget");
static_assert(offsetof(UMyADBaseWidget, _effectMaterial) == 0x000350, "Member 'UMyADBaseWidget::_effectMaterial' has a wrong offset!");
static_assert(offsetof(UMyADBaseWidget, _baseImage) == 0x000358, "Member 'UMyADBaseWidget::_baseImage' has a wrong offset!");
static_assert(offsetof(UMyADBaseWidget, _resourceObject) == 0x000360, "Member 'UMyADBaseWidget::_resourceObject' has a wrong offset!");

// Class GameModule.NetworkErrorWidget
// 0x0038 (0x0388 - 0x0350)
class UNetworkErrorWidget : public UWidgetBase
{
public:
	FMulticastInlineDelegateProperty_             OnErrorWindowEndDelegate;                          // 0x0350(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UWidgetGeneralWindow*                   _errorWindow;                                      // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             _errorDT;                                          // 0x0368(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_370[0x8];                                      // 0x0370(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetButton*                          _emptyButton;                                      // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_380[0x8];                                      // 0x0380(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCloseEvent();
	void OnFadeOut();
	void OnOpenEvent();
	void OnWindowEventDelegate__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NetworkErrorWidget">();
	}
	static class UNetworkErrorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNetworkErrorWidget>();
	}
};
static_assert(alignof(UNetworkErrorWidget) == 0x000008, "Wrong alignment on UNetworkErrorWidget");
static_assert(sizeof(UNetworkErrorWidget) == 0x000388, "Wrong size on UNetworkErrorWidget");
static_assert(offsetof(UNetworkErrorWidget, OnErrorWindowEndDelegate) == 0x000350, "Member 'UNetworkErrorWidget::OnErrorWindowEndDelegate' has a wrong offset!");
static_assert(offsetof(UNetworkErrorWidget, _errorWindow) == 0x000360, "Member 'UNetworkErrorWidget::_errorWindow' has a wrong offset!");
static_assert(offsetof(UNetworkErrorWidget, _errorDT) == 0x000368, "Member 'UNetworkErrorWidget::_errorDT' has a wrong offset!");
static_assert(offsetof(UNetworkErrorWidget, _emptyButton) == 0x000378, "Member 'UNetworkErrorWidget::_emptyButton' has a wrong offset!");

// Class GameModule.NetworkWork
// 0x0768 (0x0798 - 0x0030)
class UNetworkWork final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnOPRUserPrivilegeDelegate;                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x360];                                     // 0x0048(0x0360)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UWidgetNetWorkNotation>     _netWorkNotationWidgetClass;                       // 0x03A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetNetWorkNotation*                 _netWorkNotationWidget;                            // 0x03B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class USquadJoinWidget>           _squadJoinWidgetClass;                             // 0x03B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USquadJoinWidget*                       _squadJoinWidget;                                  // 0x03C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UWidgetBase>                _networkSquadMessageClass;                         // 0x03C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3D0[0x4];                                      // 0x03D0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _oldMemberNum;                                     // 0x03D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FString>                         _oldSquadMemberIdList;                             // 0x03D8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_             _onSquadNumChanged;                                // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_             _onSquadInfoChanged;                               // 0x03F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TArray<class FString>                         _cpuUserIdList;                                    // 0x0408(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          _matchingSquadMemberFlag;                          // 0x0418(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_419[0x7];                                      // 0x0419(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 _updateCpuCharacters;                              // 0x0420(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 _updateCpuCostumes;                                // 0x0430(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_440[0x138];                                    // 0x0440(0x0138)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _taragetfriendId;                                  // 0x0578(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_588[0x158];                                    // 0x0588(0x0158)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UWidgetBase>                _blockListWidgetClass;                             // 0x06E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBlockListWidget*                       _blockListWidget;                                  // 0x06E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FString, bool>                     _checkBlockPlayerMap;                              // 0x06F0(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_740[0x58];                                     // 0x0740(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AcceptSessionJoinRequest();
	void ApplyMute();
	bool BP_CancelReadyBattleWait();
	void BP_GetPlatformBlockUserIdArray(TArray<class FString>* OutBlockIdArray);
	TArray<class FString> BP_GetSquadMemberIdList(bool TheFront);
	TArray<class FString> BP_GetSquadMemberNameList(bool TheFront);
	void BP_InitializeChangeBlockListDelegate();
	void BP_InitializeDeletedFriendDelegate();
	bool BP_IsAgeRestrictionFailure();
	bool BP_IsChatUserPrivilege();
	bool BP_IsRequiredPatchAvailable();
	bool BP_IsUGCUserPrivilege();
	void BP_LeaveSquadMatchkingMember();
	void BP_ReadPlatformBlockList();
	void BP_ShowPlatformMessageBox(int32 PlatformMessageType);
	void BP_Test_ShowPlatformProfile();
	void CreateSessionComplete();
	void FindSquadTimeOutDelegate__DelegateSignature();
	bool JoinSquad(const class FString& SquadPassword);
	bool JoinSquadByInvitation(const class FString& InvitationId, const class FString& NoticeId);
	void OnClosedBlockList(bool bDecide);
	void OnCustomMatchJoinCompleteEvent();
	void OnCustomMatchTeamUpLeaveEvent();
	void OnCustomMatchTeamUpUpdatedEvent();
	void OnJoinSquadWindowClosed();
	void OnLoadCompleteEvent(int32 RequestId);
	void OnOPRUserPrivilegeDelegate__DelegateSignature();
	void OnTeamUpJoinEvent();
	void OnTeamUpLeaveEvent();
	void OnTeamUpMemberKickedEvent();
	void OnTeamUpUpdatedEvent();
	void ResetCheckBlockPlayerMap();
	void ShowDumpSession();
	void SquadChangeDelegate__DelegateSignature(int32 SquadNum);
	void SquadInfoChangedDelegate__DelegateSignature();
	void UpdateMute();
	void VoiceChatEvent__DelegateSignature(const class FString& UniqueNetId);

	class FString BP_GetSquadLeaderId() const;
	bool BP_IsSquadLeader() const;
	bool BP_SquadMemberIsCombat() const;
	const TMap<class FString, bool> GetMuteMap() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NetworkWork">();
	}
	static class UNetworkWork* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNetworkWork>();
	}
};
static_assert(alignof(UNetworkWork) == 0x000008, "Wrong alignment on UNetworkWork");
static_assert(sizeof(UNetworkWork) == 0x000798, "Wrong size on UNetworkWork");
static_assert(offsetof(UNetworkWork, OnOPRUserPrivilegeDelegate) == 0x000038, "Member 'UNetworkWork::OnOPRUserPrivilegeDelegate' has a wrong offset!");
static_assert(offsetof(UNetworkWork, _netWorkNotationWidgetClass) == 0x0003A8, "Member 'UNetworkWork::_netWorkNotationWidgetClass' has a wrong offset!");
static_assert(offsetof(UNetworkWork, _netWorkNotationWidget) == 0x0003B0, "Member 'UNetworkWork::_netWorkNotationWidget' has a wrong offset!");
static_assert(offsetof(UNetworkWork, _squadJoinWidgetClass) == 0x0003B8, "Member 'UNetworkWork::_squadJoinWidgetClass' has a wrong offset!");
static_assert(offsetof(UNetworkWork, _squadJoinWidget) == 0x0003C0, "Member 'UNetworkWork::_squadJoinWidget' has a wrong offset!");
static_assert(offsetof(UNetworkWork, _networkSquadMessageClass) == 0x0003C8, "Member 'UNetworkWork::_networkSquadMessageClass' has a wrong offset!");
static_assert(offsetof(UNetworkWork, _oldMemberNum) == 0x0003D4, "Member 'UNetworkWork::_oldMemberNum' has a wrong offset!");
static_assert(offsetof(UNetworkWork, _oldSquadMemberIdList) == 0x0003D8, "Member 'UNetworkWork::_oldSquadMemberIdList' has a wrong offset!");
static_assert(offsetof(UNetworkWork, _onSquadNumChanged) == 0x0003E8, "Member 'UNetworkWork::_onSquadNumChanged' has a wrong offset!");
static_assert(offsetof(UNetworkWork, _onSquadInfoChanged) == 0x0003F8, "Member 'UNetworkWork::_onSquadInfoChanged' has a wrong offset!");
static_assert(offsetof(UNetworkWork, _cpuUserIdList) == 0x000408, "Member 'UNetworkWork::_cpuUserIdList' has a wrong offset!");
static_assert(offsetof(UNetworkWork, _matchingSquadMemberFlag) == 0x000418, "Member 'UNetworkWork::_matchingSquadMemberFlag' has a wrong offset!");
static_assert(offsetof(UNetworkWork, _updateCpuCharacters) == 0x000420, "Member 'UNetworkWork::_updateCpuCharacters' has a wrong offset!");
static_assert(offsetof(UNetworkWork, _updateCpuCostumes) == 0x000430, "Member 'UNetworkWork::_updateCpuCostumes' has a wrong offset!");
static_assert(offsetof(UNetworkWork, _taragetfriendId) == 0x000578, "Member 'UNetworkWork::_taragetfriendId' has a wrong offset!");
static_assert(offsetof(UNetworkWork, _blockListWidgetClass) == 0x0006E0, "Member 'UNetworkWork::_blockListWidgetClass' has a wrong offset!");
static_assert(offsetof(UNetworkWork, _blockListWidget) == 0x0006E8, "Member 'UNetworkWork::_blockListWidget' has a wrong offset!");
static_assert(offsetof(UNetworkWork, _checkBlockPlayerMap) == 0x0006F0, "Member 'UNetworkWork::_checkBlockPlayerMap' has a wrong offset!");

// Class GameModule.NoticeWindowWidget
// 0x0040 (0x0390 - 0x0350)
class UNoticeWindowWidget final : public UWidgetInputControl
{
public:
	class UTileView*                              _buttonTileView;                                   // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetButton*                          _emptyButton;                                      // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNoticeImageInfo>               _notificationImage;                                // 0x0360(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnNoticeWindowEndDelegate;                         // 0x0370(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_380[0x10];                                     // 0x0380(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_ChangeAvailableButton();
	void CallEndEvent();
	void CreateButtonTileView(int32 NumberToMake);
	void GetMasterData();
	class FText GetNoticeText(int32 Code);
	void NextButtonTileView(const bool NotMaxNext);
	void OnNoticeWindowEndDelegate__DelegateSignature();
	void PrevButtonTileView(const bool NotMinPrev);
	TArray<class FString> SplitStringByCarriageReturn(const class FString& Message);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NoticeWindowWidget">();
	}
	static class UNoticeWindowWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoticeWindowWidget>();
	}
};
static_assert(alignof(UNoticeWindowWidget) == 0x000008, "Wrong alignment on UNoticeWindowWidget");
static_assert(sizeof(UNoticeWindowWidget) == 0x000390, "Wrong size on UNoticeWindowWidget");
static_assert(offsetof(UNoticeWindowWidget, _buttonTileView) == 0x000350, "Member 'UNoticeWindowWidget::_buttonTileView' has a wrong offset!");
static_assert(offsetof(UNoticeWindowWidget, _emptyButton) == 0x000358, "Member 'UNoticeWindowWidget::_emptyButton' has a wrong offset!");
static_assert(offsetof(UNoticeWindowWidget, _notificationImage) == 0x000360, "Member 'UNoticeWindowWidget::_notificationImage' has a wrong offset!");
static_assert(offsetof(UNoticeWindowWidget, OnNoticeWindowEndDelegate) == 0x000370, "Member 'UNoticeWindowWidget::OnNoticeWindowEndDelegate' has a wrong offset!");

// Class GameModule.NoticeWindowWidgetListEntryObject
// 0x0020 (0x0050 - 0x0030)
class UNoticeWindowWidgetListEntryObject final : public UListViewEntryObjectBase
{
public:
	class FString                                 _noticeText;                                       // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _noticeLinkText;                                   // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NoticeWindowWidgetListEntryObject">();
	}
	static class UNoticeWindowWidgetListEntryObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNoticeWindowWidgetListEntryObject>();
	}
};
static_assert(alignof(UNoticeWindowWidgetListEntryObject) == 0x000008, "Wrong alignment on UNoticeWindowWidgetListEntryObject");
static_assert(sizeof(UNoticeWindowWidgetListEntryObject) == 0x000050, "Wrong size on UNoticeWindowWidgetListEntryObject");
static_assert(offsetof(UNoticeWindowWidgetListEntryObject, _noticeText) == 0x000030, "Member 'UNoticeWindowWidgetListEntryObject::_noticeText' has a wrong offset!");
static_assert(offsetof(UNoticeWindowWidgetListEntryObject, _noticeLinkText) == 0x000040, "Member 'UNoticeWindowWidgetListEntryObject::_noticeLinkText' has a wrong offset!");

// Class GameModule.NumberWidget
// 0x0100 (0x0450 - 0x0350)
class UNumberWidget final : public UWidgetBase
{
public:
	uint8                                         _dispNum;                                          // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_351[0xF];                                      // 0x0351(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            _numBrush;                                         // 0x0360(0x00D0)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	uint8                                         _plusNum;                                          // 0x0430(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         _minusNum;                                         // 0x0431(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         _slashNum;                                         // 0x0432(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         _commaNum;                                         // 0x0433(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _commaWidth;                                       // 0x0434(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 _numImage;                                         // 0x0438(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_440[0x10];                                     // 0x0440(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NumberWidget">();
	}
	static class UNumberWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNumberWidget>();
	}
};
static_assert(alignof(UNumberWidget) == 0x000010, "Wrong alignment on UNumberWidget");
static_assert(sizeof(UNumberWidget) == 0x000450, "Wrong size on UNumberWidget");
static_assert(offsetof(UNumberWidget, _dispNum) == 0x000350, "Member 'UNumberWidget::_dispNum' has a wrong offset!");
static_assert(offsetof(UNumberWidget, _numBrush) == 0x000360, "Member 'UNumberWidget::_numBrush' has a wrong offset!");
static_assert(offsetof(UNumberWidget, _plusNum) == 0x000430, "Member 'UNumberWidget::_plusNum' has a wrong offset!");
static_assert(offsetof(UNumberWidget, _minusNum) == 0x000431, "Member 'UNumberWidget::_minusNum' has a wrong offset!");
static_assert(offsetof(UNumberWidget, _slashNum) == 0x000432, "Member 'UNumberWidget::_slashNum' has a wrong offset!");
static_assert(offsetof(UNumberWidget, _commaNum) == 0x000433, "Member 'UNumberWidget::_commaNum' has a wrong offset!");
static_assert(offsetof(UNumberWidget, _commaWidth) == 0x000434, "Member 'UNumberWidget::_commaWidth' has a wrong offset!");
static_assert(offsetof(UNumberWidget, _numImage) == 0x000438, "Member 'UNumberWidget::_numImage' has a wrong offset!");

// Class GameModule.PlatformRichTextBlock
// 0x00B0 (0x0910 - 0x0860)
class UPlatformRichTextBlock final : public URichTextBlock
{
public:
	bool                                          _bFromCommand;                                     // 0x0860(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKeyConfigurableCommand                       _command;                                          // 0x0861(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bFromKeyBoardCommand;                             // 0x0862(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKeyConfigurableCommand                       _keyBoardCommand;                                  // 0x0863(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bFromGamePadCommand;                              // 0x0864(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKeyConfigurableCommand                       _gamePadCommand;                                   // 0x0865(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bWithRim;                                         // 0x0866(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bOptionEnabled;                                   // 0x0867(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bGamePadOnly;                                     // 0x0868(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bKeyBoardOnly;                                    // 0x0869(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bHiddenChangeInput;                               // 0x086A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bDirectGamePadKey;                                // 0x086B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bCollapsedButton;                                 // 0x086C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_86D[0x3];                                      // 0x086D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   _rawGamePadKey;                                    // 0x0870(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bDirectKeyboardKey;                               // 0x0888(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_889[0x7];                                      // 0x0889(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   _rawKeyboardKey;                                   // 0x0890(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPS4TouchPadIconType                          _touchPadType;                                     // 0x08A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bEditDirectly;                                    // 0x08A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8AA[0x6];                                      // 0x08AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _directTextGamePad;                                // 0x08B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _directTextKeyboard;                               // 0x08C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bUseUniformSize;                                  // 0x08D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D1[0x3];                                      // 0x08D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _uniformSizeLongerEdge;                            // 0x08D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D8[0x10];                                     // 0x08D8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlatformRichTextImageDecorator*        _decorator;                                        // 0x08E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDataTable*                             _styleSetDataTable;                                // 0x08F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGameOption*                            _gameOption;                                       // 0x08F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_900[0x10];                                     // 0x0900(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyButtonGuideText();
	void ChangedControllerEvent__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlatformRichTextBlock">();
	}
	static class UPlatformRichTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlatformRichTextBlock>();
	}
};
static_assert(alignof(UPlatformRichTextBlock) == 0x000010, "Wrong alignment on UPlatformRichTextBlock");
static_assert(sizeof(UPlatformRichTextBlock) == 0x000910, "Wrong size on UPlatformRichTextBlock");
static_assert(offsetof(UPlatformRichTextBlock, _bFromCommand) == 0x000860, "Member 'UPlatformRichTextBlock::_bFromCommand' has a wrong offset!");
static_assert(offsetof(UPlatformRichTextBlock, _command) == 0x000861, "Member 'UPlatformRichTextBlock::_command' has a wrong offset!");
static_assert(offsetof(UPlatformRichTextBlock, _bFromKeyBoardCommand) == 0x000862, "Member 'UPlatformRichTextBlock::_bFromKeyBoardCommand' has a wrong offset!");
static_assert(offsetof(UPlatformRichTextBlock, _keyBoardCommand) == 0x000863, "Member 'UPlatformRichTextBlock::_keyBoardCommand' has a wrong offset!");
static_assert(offsetof(UPlatformRichTextBlock, _bFromGamePadCommand) == 0x000864, "Member 'UPlatformRichTextBlock::_bFromGamePadCommand' has a wrong offset!");
static_assert(offsetof(UPlatformRichTextBlock, _gamePadCommand) == 0x000865, "Member 'UPlatformRichTextBlock::_gamePadCommand' has a wrong offset!");
static_assert(offsetof(UPlatformRichTextBlock, _bWithRim) == 0x000866, "Member 'UPlatformRichTextBlock::_bWithRim' has a wrong offset!");
static_assert(offsetof(UPlatformRichTextBlock, _bOptionEnabled) == 0x000867, "Member 'UPlatformRichTextBlock::_bOptionEnabled' has a wrong offset!");
static_assert(offsetof(UPlatformRichTextBlock, _bGamePadOnly) == 0x000868, "Member 'UPlatformRichTextBlock::_bGamePadOnly' has a wrong offset!");
static_assert(offsetof(UPlatformRichTextBlock, _bKeyBoardOnly) == 0x000869, "Member 'UPlatformRichTextBlock::_bKeyBoardOnly' has a wrong offset!");
static_assert(offsetof(UPlatformRichTextBlock, _bHiddenChangeInput) == 0x00086A, "Member 'UPlatformRichTextBlock::_bHiddenChangeInput' has a wrong offset!");
static_assert(offsetof(UPlatformRichTextBlock, _bDirectGamePadKey) == 0x00086B, "Member 'UPlatformRichTextBlock::_bDirectGamePadKey' has a wrong offset!");
static_assert(offsetof(UPlatformRichTextBlock, _bCollapsedButton) == 0x00086C, "Member 'UPlatformRichTextBlock::_bCollapsedButton' has a wrong offset!");
static_assert(offsetof(UPlatformRichTextBlock, _rawGamePadKey) == 0x000870, "Member 'UPlatformRichTextBlock::_rawGamePadKey' has a wrong offset!");
static_assert(offsetof(UPlatformRichTextBlock, _bDirectKeyboardKey) == 0x000888, "Member 'UPlatformRichTextBlock::_bDirectKeyboardKey' has a wrong offset!");
static_assert(offsetof(UPlatformRichTextBlock, _rawKeyboardKey) == 0x000890, "Member 'UPlatformRichTextBlock::_rawKeyboardKey' has a wrong offset!");
static_assert(offsetof(UPlatformRichTextBlock, _touchPadType) == 0x0008A8, "Member 'UPlatformRichTextBlock::_touchPadType' has a wrong offset!");
static_assert(offsetof(UPlatformRichTextBlock, _bEditDirectly) == 0x0008A9, "Member 'UPlatformRichTextBlock::_bEditDirectly' has a wrong offset!");
static_assert(offsetof(UPlatformRichTextBlock, _directTextGamePad) == 0x0008B0, "Member 'UPlatformRichTextBlock::_directTextGamePad' has a wrong offset!");
static_assert(offsetof(UPlatformRichTextBlock, _directTextKeyboard) == 0x0008C0, "Member 'UPlatformRichTextBlock::_directTextKeyboard' has a wrong offset!");
static_assert(offsetof(UPlatformRichTextBlock, _bUseUniformSize) == 0x0008D0, "Member 'UPlatformRichTextBlock::_bUseUniformSize' has a wrong offset!");
static_assert(offsetof(UPlatformRichTextBlock, _uniformSizeLongerEdge) == 0x0008D4, "Member 'UPlatformRichTextBlock::_uniformSizeLongerEdge' has a wrong offset!");
static_assert(offsetof(UPlatformRichTextBlock, _decorator) == 0x0008E8, "Member 'UPlatformRichTextBlock::_decorator' has a wrong offset!");
static_assert(offsetof(UPlatformRichTextBlock, _styleSetDataTable) == 0x0008F0, "Member 'UPlatformRichTextBlock::_styleSetDataTable' has a wrong offset!");
static_assert(offsetof(UPlatformRichTextBlock, _gameOption) == 0x0008F8, "Member 'UPlatformRichTextBlock::_gameOption' has a wrong offset!");

// Class GameModule.PlatformRichTextImageDecorator
// 0x0000 (0x02A0 - 0x02A0)
class UPlatformRichTextImageDecorator final : public URichTextImageDecoratorForPlatform
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlatformRichTextImageDecorator">();
	}
	static class UPlatformRichTextImageDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlatformRichTextImageDecorator>();
	}
};
static_assert(alignof(UPlatformRichTextImageDecorator) == 0x000010, "Wrong alignment on UPlatformRichTextImageDecorator");
static_assert(sizeof(UPlatformRichTextImageDecorator) == 0x0002A0, "Wrong size on UPlatformRichTextImageDecorator");

// Class GameModule.PlatformTextBlock
// 0x0050 (0x0340 - 0x02F0)
class UPlatformTextBlock final : public UTextBlock
{
public:
	TMap<ERichTextImagePlatformType, ESlateVisibility> _platformVisibility;                               // 0x02F0(0x0050)(Edit, NativeAccessSpecifierPublic)

public:
	void Update();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlatformTextBlock">();
	}
	static class UPlatformTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlatformTextBlock>();
	}
};
static_assert(alignof(UPlatformTextBlock) == 0x000010, "Wrong alignment on UPlatformTextBlock");
static_assert(sizeof(UPlatformTextBlock) == 0x000340, "Wrong size on UPlatformTextBlock");
static_assert(offsetof(UPlatformTextBlock, _platformVisibility) == 0x0002F0, "Member 'UPlatformTextBlock::_platformVisibility' has a wrong offset!");

// Class GameModule.PlayerControllerGame
// 0x0098 (0x0610 - 0x0578)
class APlayerControllerGame : public ABumPlayerController
{
public:
	uint8                                         Pad_578[0x18];                                     // 0x0578(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnalogInputComponent*            _widgetAnalogInputComponent;                       // 0x0590(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGameSequenceWork*                      _gameSequenceWork;                                 // 0x0598(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 _netId;                                            // 0x05A0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UInputComponent*                        _developInputComponent;                            // 0x05B0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5B8[0x58];                                     // 0x05B8(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_FlipDevMenuInternal();
	void DoCrash(int32 Type);
	void FlipDevMenuInternal();
	void ServerDoCrash();
	void ServerFlipDevMenu(const TArray<struct FDevelopMenuItemData>& MenuItemsData);
	void ServerFlipDevPause();
	void ServerStepDevPause();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayerControllerGame">();
	}
	static class APlayerControllerGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<APlayerControllerGame>();
	}
};
static_assert(alignof(APlayerControllerGame) == 0x000008, "Wrong alignment on APlayerControllerGame");
static_assert(sizeof(APlayerControllerGame) == 0x000610, "Wrong size on APlayerControllerGame");
static_assert(offsetof(APlayerControllerGame, _widgetAnalogInputComponent) == 0x000590, "Member 'APlayerControllerGame::_widgetAnalogInputComponent' has a wrong offset!");
static_assert(offsetof(APlayerControllerGame, _gameSequenceWork) == 0x000598, "Member 'APlayerControllerGame::_gameSequenceWork' has a wrong offset!");
static_assert(offsetof(APlayerControllerGame, _netId) == 0x0005A0, "Member 'APlayerControllerGame::_netId' has a wrong offset!");
static_assert(offsetof(APlayerControllerGame, _developInputComponent) == 0x0005B0, "Member 'APlayerControllerGame::_developInputComponent' has a wrong offset!");

// Class GameModule.PlayerDatabaseWork
// 0x0A50 (0x0A80 - 0x0030)
class UPlayerDatabaseWork final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnChangedCustomizeCostumeDelegate;                 // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChangedCustomizeColorDelegate;                   // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChangedCustomizeAccessoryDelegate;               // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChangedCustomizeVoiceDelegate;                   // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChangedCustomizeEmoteDelegate;                   // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChangedCustomizeEmblemDelegate;                  // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChangedCustomizeAvatarDelegate;                  // 0x0098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChangedPlayerNameDelegate;                       // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChangedIntroductionDelegate;                     // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChangedPresetLoadDelegate;                       // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChangedSelectedCharacterDelegate;                // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChangedCustomizeReturnAllDelegate;               // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChangedCustomizeMyAdvertiseDelegate;             // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChangedCustomizeMyADPartsDelegate;               // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChangedDetailShowFlagDelegate;                   // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_128[0xF0];                                     // 0x0128(0x00F0)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             _onSelectCharacterCodeChangedDelegate;             // 0x0218(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChangedAvatarMaleFlagDelegate;                   // 0x0228(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChangedAvatarEditColorTypeDelegate;              // 0x0238(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChangedAvatarSettingsDelegate;                   // 0x0248(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnLoadFinishedMainMenuAdvertiseDelegate;           // 0x0258(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChangedMainMenuAdvertiseDelegate;                // 0x0268(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_278[0x110];                                    // 0x0278(0x0110)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           _rentalRecoveryHandle;                             // 0x0388(0x0008)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnChangedFriendParamStatusDelegate;                // 0x0390(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChangedFriendStatusDelegate;                     // 0x03A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B0[0x370];                                    // 0x03B0(0x0370)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFriendInfo>                    _searchFriendInfo;                                 // 0x0720(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_730[0x8];                                      // 0x0730(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimaryAssetItemIcon*                  _primaryAssetItemIcon;                             // 0x0738(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_740[0x28];                                     // 0x0740(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             _onUseCurrencySelectDelegate;                      // 0x0768(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _onUseCurrencyCancelDelegate;                      // 0x0778(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_788[0x2B8];                                    // 0x0788(0x02B8)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnChangedWheelCommandDelegate;                     // 0x0A40(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_A50[0x30];                                     // 0x0A50(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FLinearColor BP_GetColorPaletteColor(EAvatarColorParts Parts, int32 Index_0);
	static int32 BP_GetColorPaletteNum(EAvatarColorParts Parts);
	static bool BP_IsAvatarCharacterId(ECharacterId CharacterId);

	void AddItem(const struct FDbItemCategoryParam& Item, const int32 Quantity);
	void BP_ClearSearchFriendInfo();
	void BP_FetchAvatarData();
	EAvatarDetailedAppearanceColorSettingItem BP_GetAvatarEditColorType();
	EAvatarDetailedAppearanceSettingDetailItem BP_GetAvatarEditPartsType();
	int32 BP_GetCostumeCodeCharacterParamSnapshot(int32 CharaCode);
	class FText BP_GetCostumeDisplayNameFromItemCode(ECharacterId CharacterId, int32 ItemCode, bool IsLine);
	class FText BP_GetCurrencyDescriptionText(int32 ItemCode);
	class FText BP_GetCurrencyDisplayName(int32 ItemCode);
	int32 BP_GetDefaultMyADDataMessageCode();
	TArray<int32> BP_GetDefaultMyADDataPartsCodes();
	TArray<int32> BP_GetEmoteCodesCharacterParamSnapshot(int32 CharaCode);
	class FText BP_GetEmoteDisplayNameFromItemCode(ECharacterId CharacterId, int32 ItemCode, bool IsLine);
	class FText BP_GetMdCharacterName(const class UObject* WorldContextObject, ECharacterId CharacterId);
	class FString BP_GetMdCharacterNameAlphabet(const class UObject* WorldContextObject, const ECharacterId CharacterId);
	int32 BP_GetPageNo();
	EFriendListSortOrder BP_GetSelectedFriendSort();
	EFriendStatus BP_GetSelectedFriendStatus();
	EFriendListType BP_GetSelectedFriendType();
	EItemListSortOrder BP_GetSelectedItemSort();
	class FString BP_GetSelectedPlayerId();
	class FText BP_GetVariationDisplayName(int32 ItemCode);
	TArray<int32> BP_GetVoiceCodesCharacterParamSnapshot(int32 CharaCode);
	class FText BP_GetVoiceDisplayNameFromItemCode(ECharacterId CharacterId, int32 ItemCode, bool IsLine);
	class FText BP_GetVoiceSerifTextFromItemCode(ECharacterId CharacterId, int32 ItemCode);
	void BP_InitializationMyADDisplayDataById(const class FString& ID);
	void BP_InitializationMyADDisplayDataByIndex(int32 Index_0);
	bool BP_IsUpdateCostumeCharacterParamSnapshot(int32 CharaCode);
	bool BP_IsUpdateVoiceCharacterParamSnapshot(int32 CharaCode);
	void BP_ResetMyADDataSnapshot();
	void BP_RestoreCostumeCharacterParamSnapshot(int32 CharaCode);
	void BP_RestoreMyADDataSnapshot();
	void BP_RestoreSnapshot(int32 No);
	void BP_SaveCharacterParamSnapshot(const struct FDbMyCharacterParam& CharacterData);
	void BP_SaveMyADDataSnapshot(int32 ParamIndex);
	void BP_SaveSnapshot(int32 No);
	void BP_SendData();
	void BP_SetAccessoryIds(ECharacterId CharacterId, const TArray<int32>& AccessoryIds);
	void BP_SetAvatarBodyPhysique(float Physique);
	void BP_SetAvatarBodyScale(float Scale);
	void BP_SetAvatarChangedColorLeftAndRightEyes(bool Flag);
	void BP_SetAvatarCharacterAssign(ECharacterAssign Type);
	void BP_SetAvatarCharacterBattleStyle(ECharacterId Type);
	void BP_SetAvatarCharacterVoice(int32 Code);
	void BP_SetAvatarColor(EAvatarColorParts Parts, int32 Color);
	void BP_SetAvatarEditColorType(EAvatarDetailedAppearanceColorSettingItem Type);
	void BP_SetAvatarEditPartsType(EAvatarDetailedAppearanceSettingDetailItem Type);
	void BP_SetAvatarFaceParts(EAvatarFaceParts FaceParts, int32 ID);
	void BP_SetAvatarMaleFlag(bool Flag);
	void BP_SetCosmosSelectedCharacter(const int32 SelectedCharacterId, bool ForcedUpdate);
	void BP_SetCosmosSelectedCostume(const int32 CostumeId);
	void BP_SetCostumeColor(ECharacterId CharacterId, ECostumeColorParts Parts, int32 Color);
	void BP_SetEmblemIds(ECharacterId CharacterId, const TArray<int32>& EmblemIds);
	void BP_SetEmoteIds(ECharacterId CharacterId, const TArray<int32>& EmoteIds);
	void BP_SetIntroduction(const class FString& Intro);
	void BP_SetItemDetailPopupFromEnum(int32 ItemCode, EItemCategory ItemCategory);
	void BP_SetItemDetailPopupFromInt(int32 ItemCode, int32 ItemCategory);
	void BP_SetLoginBonusFlag(const bool Flag, const bool SendData);
	void BP_SetMaintenanceDisplay(int32 Minutes);
	void BP_SetObtainFromCode(const int32 ObtainFromCode);
	void BP_SetPageNo(const int32& PageNo);
	void BP_SetPenaltyReportScreenName(const EScreenName ScreenName);
	void BP_SetPlayerName(const class FString& Name_0);
	void BP_SetRequestPreviewProfileFlg(bool ReqPreviewProfileFlg);
	void BP_SetSearchPlayerName(const class FString& SearchName);
	void BP_SetSelectCharacterId(ECharacterId CharacterId);
	void BP_SetSelectCharacterString(const class FString& CharacterId);
	void BP_SetSelectCostumeCode(ECharacterId CharacterId, int32 CostumeCode);
	void BP_SetSelectedFriendSort(EFriendListSortOrder SelectedFriendSortOrder);
	void BP_SetSelectedFriendStatus(EFriendStatus SelectedFriendStatus);
	void BP_SetSelectedFriendType(EFriendListType SelectedFriendSelect);
	void BP_SetSelectedItemSort(EItemListSortOrder SelectedItemSortOrder);
	void BP_SetSelectedPlayerId(const class FString& SelectedPlayerId);
	void BP_SetSelectedPlayerName(const class FString& SelectedPlayerName);
	void BP_SetShopItem(const int32 ShopItem);
	void BP_UpdateCostumeCharacterParamSnapshot(int32 CharaCode);
	void BP_UpdateMyADAllData(const TArray<struct FDbAdDataParam>& AdList);
	void BP_UpdateMyADData(const class FString& ID, const TArray<struct FDbAdDataParam>& AdList);
	void InitCharacterCustomize();
	void InitCharacterInfo();
	void OnBuyPremiumLoginBonusDelegate__DelegateSignature(bool Buy);
	void OnChangedAvatar__DelegateSignature();
	void OnChangedAvatarCaptureType__DelegateSignature(int32 Type);
	void OnChangedCustomizeADPartsDelegate__DelegateSignature(EMyAdPartsCategory Type, int32 Code, bool Message);
	void OnChangedCustomizeDelegate__DelegateSignature();
	void OnChangedCustomizeReturnAllDelegate__DelegateSignature();
	void OnChangedCustomizeReturnNoDelegate__DelegateSignature(const class FString& Key);
	void OnChangedDetailShowFlagDelegate__DelegateSignature(bool Flag);
	void OnChangedFriendParamDelegate__DelegateSignature();
	void OnChangedFriendStatusDelegate__DelegateSignature(const class FString& ID, EFriendStatus Status);
	void OnChangedMainMenuAdvertiseDelegate__DelegateSignature();
	void OnChangedSelectedCharacterDelegate__DelegateSignature(bool UnLocked, bool EnableRental);
	void OnChangedWheelCommandDelegate__DelegateSignature();
	void OnLoadFinishedMainMenuAdvertiseDelegate__DelegateSignature();
	void OnMasterDataInitializeComplete();
	void OnSelectCharacterCodeChangedDelegate__DelegateSignature();
	void OnUseCurrencyCancelDelegate__DelegateSignature();
	void OnUseCurrencySelectDelegate__DelegateSignature(int32 Index_0, int32 Code, int32 Cost);
	void SetFirstTodayLogin(bool Flag);

	TArray<int32> BP_GetAllCostumeCode(ECharacterId CharacterId) const;
	TArray<int32> BP_GetAllEmoteCode(ECharacterId CharacterId) const;
	TArray<int32> BP_GetAllVoiceCode(ECharacterId CharacterId) const;
	float BP_GetAvatarBodyPhysique() const;
	float BP_GetAvatarBodyScale() const;
	bool BP_GetAvatarChangedColorLeftAndRightEyes() const;
	int32 BP_GetAvatarCharacterAssign() const;
	int32 BP_GetAvatarCharacterBattleStyle() const;
	class FText BP_GetAvatarCharacterBattleStyleText() const;
	int32 BP_GetAvatarCharacterVoice() const;
	int32 BP_GetAvatarColor(EAvatarColorParts Parts, struct FLinearColor* OutColor) const;
	int32 BP_GetAvatarFaceParts(EAvatarFaceParts FaceParts) const;
	bool BP_GetAvatarMaleFlag() const;
	ECharacterId BP_GetCharacterId(int32 Code) const;
	ECharacterId BP_GetCharacterIdFromString(const class FString& CharacterId) const;
	class FText BP_GetCharacterNameText(ECharacterId CharacterId) const;
	int32 BP_GetCostumeColor(ECharacterId CharacterId, ECostumeColorParts Parts, struct FLinearColor* OutColor) const;
	TArray<int32> BP_GetEmblemIds(ECharacterId CharacterId) const;
	TArray<int32> BP_GetEmoteIds(ECharacterId CharacterId) const;
	class FString BP_GetIntroduction() const;
	class FString BP_GetLocalPlayerUniqueId() const;
	bool BP_GetLoginBonusFlag() const;
	bool BP_GetMaintenanceDisplay(int32 Minutes) const;
	int32 BP_GetMyADDataCount() const;
	class FString BP_GetMyADDataSnapshotId() const;
	const struct FMyADDisplayData BP_GetMyADDisplayDataById(const class FString& ID) const;
	const struct FMyADDisplayData BP_GetMyADDisplayDataByIndex(int32 Index_0) const;
	bool BP_GetNoticeOpenFlag() const;
	EScreenName BP_GetPenaltyReportScreenName() const;
	class FString BP_GetPlayerName() const;
	class UPrimaryAssetItemIcon* BP_GetPrimaryAssetItemIconPtr() const;
	int32 BP_GetProfileMyADIndex() const;
	int32 BP_GetRandomCPUCostumeCode(ECharacterId CharacterId) const;
	int32 BP_GetRandomCPUCostumeCodeByCharaCode(int32 CharacterCode) const;
	bool BP_GetRequestPreviewProfileFlg() const;
	ECharacterId BP_GetSelectCharacterId() const;
	class FString BP_GetSelectCharacterIdString() const;
	int32 BP_GetSelectCostumeCode(ECharacterId CharacterId) const;
	bool BP_HasChangedAvatarData(int32 No) const;
	bool BP_HasChangedMyADDataEditData() const;
	bool BP_ValidateCharacter(const class FString& CharacterId, bool CharaSelect) const;
	bool BP_ValidateCharacterFromEnum(ECharacterId CharacterId, bool CharaSelect) const;
	bool GetFirstTodayLogin() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayerDatabaseWork">();
	}
	static class UPlayerDatabaseWork* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerDatabaseWork>();
	}
};
static_assert(alignof(UPlayerDatabaseWork) == 0x000008, "Wrong alignment on UPlayerDatabaseWork");
static_assert(sizeof(UPlayerDatabaseWork) == 0x000A80, "Wrong size on UPlayerDatabaseWork");
static_assert(offsetof(UPlayerDatabaseWork, OnChangedCustomizeCostumeDelegate) == 0x000038, "Member 'UPlayerDatabaseWork::OnChangedCustomizeCostumeDelegate' has a wrong offset!");
static_assert(offsetof(UPlayerDatabaseWork, OnChangedCustomizeColorDelegate) == 0x000048, "Member 'UPlayerDatabaseWork::OnChangedCustomizeColorDelegate' has a wrong offset!");
static_assert(offsetof(UPlayerDatabaseWork, OnChangedCustomizeAccessoryDelegate) == 0x000058, "Member 'UPlayerDatabaseWork::OnChangedCustomizeAccessoryDelegate' has a wrong offset!");
static_assert(offsetof(UPlayerDatabaseWork, OnChangedCustomizeVoiceDelegate) == 0x000068, "Member 'UPlayerDatabaseWork::OnChangedCustomizeVoiceDelegate' has a wrong offset!");
static_assert(offsetof(UPlayerDatabaseWork, OnChangedCustomizeEmoteDelegate) == 0x000078, "Member 'UPlayerDatabaseWork::OnChangedCustomizeEmoteDelegate' has a wrong offset!");
static_assert(offsetof(UPlayerDatabaseWork, OnChangedCustomizeEmblemDelegate) == 0x000088, "Member 'UPlayerDatabaseWork::OnChangedCustomizeEmblemDelegate' has a wrong offset!");
static_assert(offsetof(UPlayerDatabaseWork, OnChangedCustomizeAvatarDelegate) == 0x000098, "Member 'UPlayerDatabaseWork::OnChangedCustomizeAvatarDelegate' has a wrong offset!");
static_assert(offsetof(UPlayerDatabaseWork, OnChangedPlayerNameDelegate) == 0x0000A8, "Member 'UPlayerDatabaseWork::OnChangedPlayerNameDelegate' has a wrong offset!");
static_assert(offsetof(UPlayerDatabaseWork, OnChangedIntroductionDelegate) == 0x0000B8, "Member 'UPlayerDatabaseWork::OnChangedIntroductionDelegate' has a wrong offset!");
static_assert(offsetof(UPlayerDatabaseWork, OnChangedPresetLoadDelegate) == 0x0000C8, "Member 'UPlayerDatabaseWork::OnChangedPresetLoadDelegate' has a wrong offset!");
static_assert(offsetof(UPlayerDatabaseWork, OnChangedSelectedCharacterDelegate) == 0x0000D8, "Member 'UPlayerDatabaseWork::OnChangedSelectedCharacterDelegate' has a wrong offset!");
static_assert(offsetof(UPlayerDatabaseWork, OnChangedCustomizeReturnAllDelegate) == 0x0000E8, "Member 'UPlayerDatabaseWork::OnChangedCustomizeReturnAllDelegate' has a wrong offset!");
static_assert(offsetof(UPlayerDatabaseWork, OnChangedCustomizeMyAdvertiseDelegate) == 0x0000F8, "Member 'UPlayerDatabaseWork::OnChangedCustomizeMyAdvertiseDelegate' has a wrong offset!");
static_assert(offsetof(UPlayerDatabaseWork, OnChangedCustomizeMyADPartsDelegate) == 0x000108, "Member 'UPlayerDatabaseWork::OnChangedCustomizeMyADPartsDelegate' has a wrong offset!");
static_assert(offsetof(UPlayerDatabaseWork, OnChangedDetailShowFlagDelegate) == 0x000118, "Member 'UPlayerDatabaseWork::OnChangedDetailShowFlagDelegate' has a wrong offset!");
static_assert(offsetof(UPlayerDatabaseWork, _onSelectCharacterCodeChangedDelegate) == 0x000218, "Member 'UPlayerDatabaseWork::_onSelectCharacterCodeChangedDelegate' has a wrong offset!");
static_assert(offsetof(UPlayerDatabaseWork, OnChangedAvatarMaleFlagDelegate) == 0x000228, "Member 'UPlayerDatabaseWork::OnChangedAvatarMaleFlagDelegate' has a wrong offset!");
static_assert(offsetof(UPlayerDatabaseWork, OnChangedAvatarEditColorTypeDelegate) == 0x000238, "Member 'UPlayerDatabaseWork::OnChangedAvatarEditColorTypeDelegate' has a wrong offset!");
static_assert(offsetof(UPlayerDatabaseWork, OnChangedAvatarSettingsDelegate) == 0x000248, "Member 'UPlayerDatabaseWork::OnChangedAvatarSettingsDelegate' has a wrong offset!");
static_assert(offsetof(UPlayerDatabaseWork, OnLoadFinishedMainMenuAdvertiseDelegate) == 0x000258, "Member 'UPlayerDatabaseWork::OnLoadFinishedMainMenuAdvertiseDelegate' has a wrong offset!");
static_assert(offsetof(UPlayerDatabaseWork, OnChangedMainMenuAdvertiseDelegate) == 0x000268, "Member 'UPlayerDatabaseWork::OnChangedMainMenuAdvertiseDelegate' has a wrong offset!");
static_assert(offsetof(UPlayerDatabaseWork, _rentalRecoveryHandle) == 0x000388, "Member 'UPlayerDatabaseWork::_rentalRecoveryHandle' has a wrong offset!");
static_assert(offsetof(UPlayerDatabaseWork, OnChangedFriendParamStatusDelegate) == 0x000390, "Member 'UPlayerDatabaseWork::OnChangedFriendParamStatusDelegate' has a wrong offset!");
static_assert(offsetof(UPlayerDatabaseWork, OnChangedFriendStatusDelegate) == 0x0003A0, "Member 'UPlayerDatabaseWork::OnChangedFriendStatusDelegate' has a wrong offset!");
static_assert(offsetof(UPlayerDatabaseWork, _searchFriendInfo) == 0x000720, "Member 'UPlayerDatabaseWork::_searchFriendInfo' has a wrong offset!");
static_assert(offsetof(UPlayerDatabaseWork, _primaryAssetItemIcon) == 0x000738, "Member 'UPlayerDatabaseWork::_primaryAssetItemIcon' has a wrong offset!");
static_assert(offsetof(UPlayerDatabaseWork, _onUseCurrencySelectDelegate) == 0x000768, "Member 'UPlayerDatabaseWork::_onUseCurrencySelectDelegate' has a wrong offset!");
static_assert(offsetof(UPlayerDatabaseWork, _onUseCurrencyCancelDelegate) == 0x000778, "Member 'UPlayerDatabaseWork::_onUseCurrencyCancelDelegate' has a wrong offset!");
static_assert(offsetof(UPlayerDatabaseWork, OnChangedWheelCommandDelegate) == 0x000A40, "Member 'UPlayerDatabaseWork::OnChangedWheelCommandDelegate' has a wrong offset!");

// Class GameModule.PlayerVoiceChatStateWidget
// 0x0028 (0x0378 - 0x0350)
class UPlayerVoiceChatStateWidget : public UWidgetBase
{
public:
	uint8                                         Pad_350[0x10];                                     // 0x0350(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 _mute;                                             // 0x0360(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 _talking;                                          // 0x0368(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UImage*                                 _soundWave;                                        // 0x0370(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnVCBeginTalk(const class FString& UniqueNetId);
	void OnVCConnected(const class FString& UniqueNetId);
	void OnVCDisconnected(const class FString& UniqueNetId);
	void OnVCEndTalk(const class FString& UniqueNetId);
	void OnVCMute(const class FString& UniqueNetId);
	void OnVCUnMute(const class FString& UniqueNetId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayerVoiceChatStateWidget">();
	}
	static class UPlayerVoiceChatStateWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerVoiceChatStateWidget>();
	}
};
static_assert(alignof(UPlayerVoiceChatStateWidget) == 0x000008, "Wrong alignment on UPlayerVoiceChatStateWidget");
static_assert(sizeof(UPlayerVoiceChatStateWidget) == 0x000378, "Wrong size on UPlayerVoiceChatStateWidget");
static_assert(offsetof(UPlayerVoiceChatStateWidget, _mute) == 0x000360, "Member 'UPlayerVoiceChatStateWidget::_mute' has a wrong offset!");
static_assert(offsetof(UPlayerVoiceChatStateWidget, _talking) == 0x000368, "Member 'UPlayerVoiceChatStateWidget::_talking' has a wrong offset!");
static_assert(offsetof(UPlayerVoiceChatStateWidget, _soundWave) == 0x000370, "Member 'UPlayerVoiceChatStateWidget::_soundWave' has a wrong offset!");

// Class GameModule.PositionMeasurement
// 0x0040 (0x02B8 - 0x0278)
class UPositionMeasurement final : public UUserWidget
{
public:
	class UWidget*                                _parentWidget;                                     // 0x0278(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidget*                                _widgetA;                                          // 0x0280(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidget*                                _widgetB;                                          // 0x0288(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidget*                                _baseWidget;                                       // 0x0290(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_298[0x8];                                      // 0x0298(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USlateBrushAsset*                       _debugCircle;                                      // 0x02A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A8[0x4];                                      // 0x02A8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              _crossHairsPos;                                    // 0x02AC(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B4[0x4];                                      // 0x02B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<float> GetSquaredDistanceData(const TArray<class UWidget*>& InWidgetArray);
	void InitOneToManyProperties(class UWidget* baseWidget, class UWidget* ParentWidget);
	void InitPairPointProperties(class UWidget* WidgetA, class UWidget* WidgetB, class UWidget* ParentWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PositionMeasurement">();
	}
	static class UPositionMeasurement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPositionMeasurement>();
	}
};
static_assert(alignof(UPositionMeasurement) == 0x000008, "Wrong alignment on UPositionMeasurement");
static_assert(sizeof(UPositionMeasurement) == 0x0002B8, "Wrong size on UPositionMeasurement");
static_assert(offsetof(UPositionMeasurement, _parentWidget) == 0x000278, "Member 'UPositionMeasurement::_parentWidget' has a wrong offset!");
static_assert(offsetof(UPositionMeasurement, _widgetA) == 0x000280, "Member 'UPositionMeasurement::_widgetA' has a wrong offset!");
static_assert(offsetof(UPositionMeasurement, _widgetB) == 0x000288, "Member 'UPositionMeasurement::_widgetB' has a wrong offset!");
static_assert(offsetof(UPositionMeasurement, _baseWidget) == 0x000290, "Member 'UPositionMeasurement::_baseWidget' has a wrong offset!");
static_assert(offsetof(UPositionMeasurement, _debugCircle) == 0x0002A0, "Member 'UPositionMeasurement::_debugCircle' has a wrong offset!");
static_assert(offsetof(UPositionMeasurement, _crossHairsPos) == 0x0002AC, "Member 'UPositionMeasurement::_crossHairsPos' has a wrong offset!");

// Class GameModule.PrimaryAssetAccessory
// 0x0078 (0x00D8 - 0x0060)
class UPrimaryAssetAccessory final : public UPrimaryAssetBase
{
public:
	TSoftObjectPtr<class UStreamableRenderAsset>  _mesh;                                             // 0x0060(0x0028)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   _meshComponentBP;                                  // 0x0088(0x0028)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UTexture>>        _textures;                                         // 0x00B0(0x0010)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          _bMeshIsBase;                                      // 0x00C0(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _baseCodeString;                                   // 0x00C8(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrimaryAssetAccessory">();
	}
	static class UPrimaryAssetAccessory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrimaryAssetAccessory>();
	}
};
static_assert(alignof(UPrimaryAssetAccessory) == 0x000008, "Wrong alignment on UPrimaryAssetAccessory");
static_assert(sizeof(UPrimaryAssetAccessory) == 0x0000D8, "Wrong size on UPrimaryAssetAccessory");
static_assert(offsetof(UPrimaryAssetAccessory, _mesh) == 0x000060, "Member 'UPrimaryAssetAccessory::_mesh' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetAccessory, _meshComponentBP) == 0x000088, "Member 'UPrimaryAssetAccessory::_meshComponentBP' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetAccessory, _textures) == 0x0000B0, "Member 'UPrimaryAssetAccessory::_textures' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetAccessory, _bMeshIsBase) == 0x0000C0, "Member 'UPrimaryAssetAccessory::_bMeshIsBase' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetAccessory, _baseCodeString) == 0x0000C8, "Member 'UPrimaryAssetAccessory::_baseCodeString' has a wrong offset!");

// Class GameModule.PrimaryAssetBriefing
// 0x0060 (0x00C0 - 0x0060)
class UPrimaryAssetBriefing final : public UPrimaryAssetBase
{
public:
	TMap<EStageId, struct FBriefingStageInfo>     _stageInfoList;                                    // 0x0060(0x0050)(Edit, DisableEditOnInstance, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<struct FBriefingCollisionInfo>         _collisionInfoList;                                // 0x00B0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrimaryAssetBriefing">();
	}
	static class UPrimaryAssetBriefing* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrimaryAssetBriefing>();
	}
};
static_assert(alignof(UPrimaryAssetBriefing) == 0x000008, "Wrong alignment on UPrimaryAssetBriefing");
static_assert(sizeof(UPrimaryAssetBriefing) == 0x0000C0, "Wrong size on UPrimaryAssetBriefing");
static_assert(offsetof(UPrimaryAssetBriefing, _stageInfoList) == 0x000060, "Member 'UPrimaryAssetBriefing::_stageInfoList' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetBriefing, _collisionInfoList) == 0x0000B0, "Member 'UPrimaryAssetBriefing::_collisionInfoList' has a wrong offset!");

// Class GameModule.PrimaryAssetCharacter
// 0x00F0 (0x0150 - 0x0060)
class UPrimaryAssetCharacter final : public UPrimaryAssetBase
{
public:
	TMap<int32, TSoftObjectPtr<class USkeletalMesh>> _costumeMeshs;                                     // 0x0060(0x0050)(Edit, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<class FName, TSoftObjectPtr<class USkeletalMesh>> _optionMeshs;                                      // 0x00B0(0x0050)(Edit, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<int32, struct FPMActionAttackAssetData>  _variationActions;                                 // 0x0100(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrimaryAssetCharacter">();
	}
	static class UPrimaryAssetCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrimaryAssetCharacter>();
	}
};
static_assert(alignof(UPrimaryAssetCharacter) == 0x000008, "Wrong alignment on UPrimaryAssetCharacter");
static_assert(sizeof(UPrimaryAssetCharacter) == 0x000150, "Wrong size on UPrimaryAssetCharacter");
static_assert(offsetof(UPrimaryAssetCharacter, _costumeMeshs) == 0x000060, "Member 'UPrimaryAssetCharacter::_costumeMeshs' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetCharacter, _optionMeshs) == 0x0000B0, "Member 'UPrimaryAssetCharacter::_optionMeshs' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetCharacter, _variationActions) == 0x000100, "Member 'UPrimaryAssetCharacter::_variationActions' has a wrong offset!");

// Class GameModule.PrimaryAssetCharacterGasha
// 0x0000 (0x0060 - 0x0060)
class UPrimaryAssetCharacterGasha final : public UPrimaryAssetBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrimaryAssetCharacterGasha">();
	}
	static class UPrimaryAssetCharacterGasha* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrimaryAssetCharacterGasha>();
	}
};
static_assert(alignof(UPrimaryAssetCharacterGasha) == 0x000008, "Wrong alignment on UPrimaryAssetCharacterGasha");
static_assert(sizeof(UPrimaryAssetCharacterGasha) == 0x000060, "Wrong size on UPrimaryAssetCharacterGasha");

// Class GameModule.PrimaryAssetCharacterGUI
// 0x02E0 (0x0340 - 0x0060)
class UPrimaryAssetCharacterGUI final : public UPrimaryAssetBase
{
public:
	TSoftObjectPtr<class UPaperSprite>            _charaSelect;                                      // 0x0060(0x0028)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UPaperSprite>            _charaImage;                                       // 0x0088(0x0028)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UPaperSprite>            _billboardChart;                                   // 0x00B0(0x0028)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UPaperSprite>            _battleHistory;                                    // 0x00D8(0x0028)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UPaperSprite>            _gashaIcon;                                        // 0x0100(0x0028)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UPaperSprite>            _battleStyle;                                      // 0x0128(0x0028)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UPaperSprite>            _profile;                                          // 0x0150(0x0028)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UPaperSprite>            _loginBonus;                                       // 0x0178(0x0028)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UPaperSprite>            _stageConfirmation;                                // 0x01A0(0x0028)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UPaperSprite>            _gameModeMainmenuIcon;                             // 0x01C8(0x0028)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UPaperSprite>            _birthday;                                         // 0x01F0(0x0028)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<uint32, TSoftObjectPtr<class UPaperSprite>> _variationIcon;                                    // 0x0218(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<ESceneCaptureTypeId, struct FTransform>  _sceneCaptureOffset;                               // 0x0268(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	int32                                         _sceneCaptureAnimationStopFrame;                   // 0x02B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<uint32, TSoftObjectPtr<class ULevelSequence>> _variationGashaSequence;                           // 0x02C0(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate)
	struct FTransform                             GashaOffset;                                       // 0x0310(0x0030)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)

public:
	class UPaperSprite* BP_GetPaperSprite(EFaceIconTypeId TypeId);
	class UPaperSprite* BP_GetPaperSpriteBattleHistory();
	class UPaperSprite* BP_GetPaperSpriteBattleStyle();
	class UPaperSprite* BP_GetPaperSpriteBillboardChart();
	class UPaperSprite* BP_GetPaperSpriteCharaSelect();
	class UPaperSprite* BP_GetPaperSpriteProfileBackImage(ECharacterId CharaID);
	class UPaperSprite* BP_GetPaperSpriteVariationIcon(int32 VariationId);
	void BP_SetOffset(ESceneCaptureTypeId Type, const struct FTransform& Transform);
	void GetOffset(ESceneCaptureTypeId Type, struct FTransform* OutOffset);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrimaryAssetCharacterGUI">();
	}
	static class UPrimaryAssetCharacterGUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrimaryAssetCharacterGUI>();
	}
};
static_assert(alignof(UPrimaryAssetCharacterGUI) == 0x000010, "Wrong alignment on UPrimaryAssetCharacterGUI");
static_assert(sizeof(UPrimaryAssetCharacterGUI) == 0x000340, "Wrong size on UPrimaryAssetCharacterGUI");
static_assert(offsetof(UPrimaryAssetCharacterGUI, _charaSelect) == 0x000060, "Member 'UPrimaryAssetCharacterGUI::_charaSelect' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetCharacterGUI, _charaImage) == 0x000088, "Member 'UPrimaryAssetCharacterGUI::_charaImage' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetCharacterGUI, _billboardChart) == 0x0000B0, "Member 'UPrimaryAssetCharacterGUI::_billboardChart' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetCharacterGUI, _battleHistory) == 0x0000D8, "Member 'UPrimaryAssetCharacterGUI::_battleHistory' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetCharacterGUI, _gashaIcon) == 0x000100, "Member 'UPrimaryAssetCharacterGUI::_gashaIcon' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetCharacterGUI, _battleStyle) == 0x000128, "Member 'UPrimaryAssetCharacterGUI::_battleStyle' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetCharacterGUI, _profile) == 0x000150, "Member 'UPrimaryAssetCharacterGUI::_profile' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetCharacterGUI, _loginBonus) == 0x000178, "Member 'UPrimaryAssetCharacterGUI::_loginBonus' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetCharacterGUI, _stageConfirmation) == 0x0001A0, "Member 'UPrimaryAssetCharacterGUI::_stageConfirmation' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetCharacterGUI, _gameModeMainmenuIcon) == 0x0001C8, "Member 'UPrimaryAssetCharacterGUI::_gameModeMainmenuIcon' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetCharacterGUI, _birthday) == 0x0001F0, "Member 'UPrimaryAssetCharacterGUI::_birthday' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetCharacterGUI, _variationIcon) == 0x000218, "Member 'UPrimaryAssetCharacterGUI::_variationIcon' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetCharacterGUI, _sceneCaptureOffset) == 0x000268, "Member 'UPrimaryAssetCharacterGUI::_sceneCaptureOffset' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetCharacterGUI, _sceneCaptureAnimationStopFrame) == 0x0002B8, "Member 'UPrimaryAssetCharacterGUI::_sceneCaptureAnimationStopFrame' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetCharacterGUI, _variationGashaSequence) == 0x0002C0, "Member 'UPrimaryAssetCharacterGUI::_variationGashaSequence' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetCharacterGUI, GashaOffset) == 0x000310, "Member 'UPrimaryAssetCharacterGUI::GashaOffset' has a wrong offset!");

// Class GameModule.PrimaryAssetCommon
// 0x0010 (0x0070 - 0x0060)
class UPrimaryAssetCommon final : public UPrimaryAssetBase
{
public:
	TArray<struct FSpecifiedDirectoryParam>       _directory;                                        // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrimaryAssetCommon">();
	}
	static class UPrimaryAssetCommon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrimaryAssetCommon>();
	}
};
static_assert(alignof(UPrimaryAssetCommon) == 0x000008, "Wrong alignment on UPrimaryAssetCommon");
static_assert(sizeof(UPrimaryAssetCommon) == 0x000070, "Wrong size on UPrimaryAssetCommon");
static_assert(offsetof(UPrimaryAssetCommon, _directory) == 0x000060, "Member 'UPrimaryAssetCommon::_directory' has a wrong offset!");

// Class GameModule.PrimaryAssetEffect
// 0x0050 (0x00B0 - 0x0060)
class UPrimaryAssetEffect final : public UPrimaryAssetBase
{
public:
	TMap<class FName, TSoftObjectPtr<class UParticleSystem>> _auraEffects;                                      // 0x0060(0x0050)(Edit, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrimaryAssetEffect">();
	}
	static class UPrimaryAssetEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrimaryAssetEffect>();
	}
};
static_assert(alignof(UPrimaryAssetEffect) == 0x000008, "Wrong alignment on UPrimaryAssetEffect");
static_assert(sizeof(UPrimaryAssetEffect) == 0x0000B0, "Wrong size on UPrimaryAssetEffect");
static_assert(offsetof(UPrimaryAssetEffect, _auraEffects) == 0x000060, "Member 'UPrimaryAssetEffect::_auraEffects' has a wrong offset!");

// Class GameModule.PrimaryAssetEvent
// 0x02C0 (0x0320 - 0x0060)
class UPrimaryAssetEvent final : public UPrimaryAssetBase
{
public:
	TMap<int32, TSoftObjectPtr<class UPaperSprite>> _eventBannerList;                                  // 0x0060(0x0050)(Edit, DisableEditOnInstance, EditConst, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_B0[0x60];                                      // 0x00B0(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, TSoftObjectPtr<class UPaperSprite>> _eventBannerLList;                                 // 0x0110(0x0050)(Edit, DisableEditOnInstance, EditConst, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_160[0x60];                                     // 0x0160(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, TSoftObjectPtr<class UPaperSprite>> _eventBannerMList;                                 // 0x01C0(0x0050)(Edit, DisableEditOnInstance, EditConst, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_210[0x60];                                     // 0x0210(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, TSoftObjectPtr<class UPaperSprite>> _eventBgList;                                      // 0x0270(0x0050)(Edit, DisableEditOnInstance, EditConst, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C0[0x60];                                     // 0x02C0(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrimaryAssetEvent">();
	}
	static class UPrimaryAssetEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrimaryAssetEvent>();
	}
};
static_assert(alignof(UPrimaryAssetEvent) == 0x000008, "Wrong alignment on UPrimaryAssetEvent");
static_assert(sizeof(UPrimaryAssetEvent) == 0x000320, "Wrong size on UPrimaryAssetEvent");
static_assert(offsetof(UPrimaryAssetEvent, _eventBannerList) == 0x000060, "Member 'UPrimaryAssetEvent::_eventBannerList' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetEvent, _eventBannerLList) == 0x000110, "Member 'UPrimaryAssetEvent::_eventBannerLList' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetEvent, _eventBannerMList) == 0x0001C0, "Member 'UPrimaryAssetEvent::_eventBannerMList' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetEvent, _eventBgList) == 0x000270, "Member 'UPrimaryAssetEvent::_eventBgList' has a wrong offset!");

// Class GameModule.PrimaryAssetGallery
// 0x00A0 (0x0100 - 0x0060)
class UPrimaryAssetGallery final : public UPrimaryAssetBase
{
public:
	TMap<int32, TSoftObjectPtr<class UPaperSprite>> _galleryImage_L;                                   // 0x0060(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<int32, TSoftObjectPtr<class UPaperSprite>> _galleryImage_M;                                   // 0x00B0(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrimaryAssetGallery">();
	}
	static class UPrimaryAssetGallery* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrimaryAssetGallery>();
	}
};
static_assert(alignof(UPrimaryAssetGallery) == 0x000008, "Wrong alignment on UPrimaryAssetGallery");
static_assert(sizeof(UPrimaryAssetGallery) == 0x000100, "Wrong size on UPrimaryAssetGallery");
static_assert(offsetof(UPrimaryAssetGallery, _galleryImage_L) == 0x000060, "Member 'UPrimaryAssetGallery::_galleryImage_L' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetGallery, _galleryImage_M) == 0x0000B0, "Member 'UPrimaryAssetGallery::_galleryImage_M' has a wrong offset!");

// Class GameModule.PrimaryAssetGashaImage
// 0x00F0 (0x0150 - 0x0060)
class UPrimaryAssetGashaImage final : public UPrimaryAssetBase
{
public:
	TMap<class FString, TSoftObjectPtr<class UPaperSprite>> _logo;                                             // 0x0060(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<class FString, TSoftObjectPtr<class UPaperSprite>> _banner;                                           // 0x00B0(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<class FString, TSoftObjectPtr<class UPaperSprite>> _help;                                             // 0x0100(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	class UPaperSprite* BP_GetPaperSpriteBanner(const class FString& Key) const;
	class UPaperSprite* BP_GetPaperSpriteHelp(const class FString& Key) const;
	class UPaperSprite* BP_GetPaperSpriteLogo(const class FString& Key) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrimaryAssetGashaImage">();
	}
	static class UPrimaryAssetGashaImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrimaryAssetGashaImage>();
	}
};
static_assert(alignof(UPrimaryAssetGashaImage) == 0x000008, "Wrong alignment on UPrimaryAssetGashaImage");
static_assert(sizeof(UPrimaryAssetGashaImage) == 0x000150, "Wrong size on UPrimaryAssetGashaImage");
static_assert(offsetof(UPrimaryAssetGashaImage, _logo) == 0x000060, "Member 'UPrimaryAssetGashaImage::_logo' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetGashaImage, _banner) == 0x0000B0, "Member 'UPrimaryAssetGashaImage::_banner' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetGashaImage, _help) == 0x000100, "Member 'UPrimaryAssetGashaImage::_help' has a wrong offset!");

// Class GameModule.PrimaryAssetGuild
// 0x0050 (0x00B0 - 0x0060)
class UPrimaryAssetGuild final : public UPrimaryAssetBase
{
public:
	TMap<int32, TSoftObjectPtr<class UPaperSprite>> _emblem;                                           // 0x0060(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	class UPaperSprite* BP_GetPaperSpriteEmblem(int32 Key) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrimaryAssetGuild">();
	}
	static class UPrimaryAssetGuild* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrimaryAssetGuild>();
	}
};
static_assert(alignof(UPrimaryAssetGuild) == 0x000008, "Wrong alignment on UPrimaryAssetGuild");
static_assert(sizeof(UPrimaryAssetGuild) == 0x0000B0, "Wrong size on UPrimaryAssetGuild");
static_assert(offsetof(UPrimaryAssetGuild, _emblem) == 0x000060, "Member 'UPrimaryAssetGuild::_emblem' has a wrong offset!");

// Class GameModule.PrimaryAssetItemIcon
// 0x0730 (0x0790 - 0x0060)
class UPrimaryAssetItemIcon final : public UPrimaryAssetBase
{
public:
	TMap<int32, TSoftObjectPtr<class UPaperSprite>> _currencyItemIconTexture_S;                        // 0x0060(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<int32, TSoftObjectPtr<class UPaperSprite>> _currencyItemIconTexture_L;                        // 0x00B0(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<int32, TSoftObjectPtr<class UPaperSprite>> _costumeItemIconTexture_S;                         // 0x0100(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<int32, TSoftObjectPtr<class UPaperSprite>> _costumeItemIconTexture_L;                         // 0x0150(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<int32, TSoftObjectPtr<class UPaperSprite>> _costumeItemIconTexture_LL;                        // 0x01A0(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<int32, TSoftObjectPtr<class UPaperSprite>> _emoteItemIconTexture_S;                           // 0x01F0(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<int32, TSoftObjectPtr<class UPaperSprite>> _emoteItemIconTexture_L;                           // 0x0240(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<int32, TSoftObjectPtr<class UPaperSprite>> _emoteItemIconTexture_LL;                          // 0x0290(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<int32, TSoftObjectPtr<class UPaperSprite>> _voiceItemIconTexture_S;                           // 0x02E0(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<int32, TSoftObjectPtr<class UPaperSprite>> _voiceItemIconTexture_L;                           // 0x0330(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<int32, TSoftObjectPtr<class UPaperSprite>> _itemPackIconTexture_S;                            // 0x0380(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<int32, TSoftObjectPtr<class UPaperSprite>> _itemPackIconTexture_L;                            // 0x03D0(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<int32, TSoftObjectPtr<class UPaperSprite>> _seasonPassIconTexture_S;                          // 0x0420(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<int32, TSoftObjectPtr<class UPaperSprite>> _seasonPassIconTexture_L;                          // 0x0470(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<class FString, TSoftObjectPtr<class UPaperSprite>> _shopIconTexture;                                  // 0x04C0(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<int32, TSoftClassPtr<class UClass>>      _emblemItemIcon_S;                                 // 0x0510(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<int32, TSoftClassPtr<class UClass>>      _emblemItemIcon_L;                                 // 0x0560(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<int32, TSoftClassPtr<class UClass>>      _myADPartsIconTexture_S;                           // 0x05B0(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<int32, TSoftClassPtr<class UClass>>      _myADPartsIconTexture_L;                           // 0x0600(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<int32, TSoftClassPtr<class UClass>>      _loadIconTexture;                                  // 0x0650(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<int32, TSoftObjectPtr<class UPaperSprite>> _variationIconTexture_S;                           // 0x06A0(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<int32, TSoftObjectPtr<class UPaperSprite>> _variationIconTexture_L;                           // 0x06F0(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<int32, TSoftObjectPtr<class UPaperSprite>> _variationIconTexture_LL;                          // 0x0740(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	class UPaperSprite* BP_GetPaperSpriteItemIconFromItemCode(int32 ItemCategory, int32 ItemCode, bool IsSmall);
	class UPaperSprite* BP_GetPaperSpriteItemIconFromShopItemCode(int32 ShopItemCode, bool IsSmall);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrimaryAssetItemIcon">();
	}
	static class UPrimaryAssetItemIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrimaryAssetItemIcon>();
	}
};
static_assert(alignof(UPrimaryAssetItemIcon) == 0x000008, "Wrong alignment on UPrimaryAssetItemIcon");
static_assert(sizeof(UPrimaryAssetItemIcon) == 0x000790, "Wrong size on UPrimaryAssetItemIcon");
static_assert(offsetof(UPrimaryAssetItemIcon, _currencyItemIconTexture_S) == 0x000060, "Member 'UPrimaryAssetItemIcon::_currencyItemIconTexture_S' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetItemIcon, _currencyItemIconTexture_L) == 0x0000B0, "Member 'UPrimaryAssetItemIcon::_currencyItemIconTexture_L' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetItemIcon, _costumeItemIconTexture_S) == 0x000100, "Member 'UPrimaryAssetItemIcon::_costumeItemIconTexture_S' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetItemIcon, _costumeItemIconTexture_L) == 0x000150, "Member 'UPrimaryAssetItemIcon::_costumeItemIconTexture_L' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetItemIcon, _costumeItemIconTexture_LL) == 0x0001A0, "Member 'UPrimaryAssetItemIcon::_costumeItemIconTexture_LL' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetItemIcon, _emoteItemIconTexture_S) == 0x0001F0, "Member 'UPrimaryAssetItemIcon::_emoteItemIconTexture_S' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetItemIcon, _emoteItemIconTexture_L) == 0x000240, "Member 'UPrimaryAssetItemIcon::_emoteItemIconTexture_L' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetItemIcon, _emoteItemIconTexture_LL) == 0x000290, "Member 'UPrimaryAssetItemIcon::_emoteItemIconTexture_LL' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetItemIcon, _voiceItemIconTexture_S) == 0x0002E0, "Member 'UPrimaryAssetItemIcon::_voiceItemIconTexture_S' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetItemIcon, _voiceItemIconTexture_L) == 0x000330, "Member 'UPrimaryAssetItemIcon::_voiceItemIconTexture_L' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetItemIcon, _itemPackIconTexture_S) == 0x000380, "Member 'UPrimaryAssetItemIcon::_itemPackIconTexture_S' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetItemIcon, _itemPackIconTexture_L) == 0x0003D0, "Member 'UPrimaryAssetItemIcon::_itemPackIconTexture_L' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetItemIcon, _seasonPassIconTexture_S) == 0x000420, "Member 'UPrimaryAssetItemIcon::_seasonPassIconTexture_S' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetItemIcon, _seasonPassIconTexture_L) == 0x000470, "Member 'UPrimaryAssetItemIcon::_seasonPassIconTexture_L' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetItemIcon, _shopIconTexture) == 0x0004C0, "Member 'UPrimaryAssetItemIcon::_shopIconTexture' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetItemIcon, _emblemItemIcon_S) == 0x000510, "Member 'UPrimaryAssetItemIcon::_emblemItemIcon_S' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetItemIcon, _emblemItemIcon_L) == 0x000560, "Member 'UPrimaryAssetItemIcon::_emblemItemIcon_L' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetItemIcon, _myADPartsIconTexture_S) == 0x0005B0, "Member 'UPrimaryAssetItemIcon::_myADPartsIconTexture_S' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetItemIcon, _myADPartsIconTexture_L) == 0x000600, "Member 'UPrimaryAssetItemIcon::_myADPartsIconTexture_L' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetItemIcon, _loadIconTexture) == 0x000650, "Member 'UPrimaryAssetItemIcon::_loadIconTexture' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetItemIcon, _variationIconTexture_S) == 0x0006A0, "Member 'UPrimaryAssetItemIcon::_variationIconTexture_S' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetItemIcon, _variationIconTexture_L) == 0x0006F0, "Member 'UPrimaryAssetItemIcon::_variationIconTexture_L' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetItemIcon, _variationIconTexture_LL) == 0x000740, "Member 'UPrimaryAssetItemIcon::_variationIconTexture_LL' has a wrong offset!");

// Class GameModule.PrimaryAssetLanguageImage
// 0x0140 (0x01A0 - 0x0060)
class UPrimaryAssetLanguageImage final : public UPrimaryAssetBase
{
public:
	TMap<int32, TSoftObjectPtr<class UTexture2D>> _data;                                             // 0x0060(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<int32, TSoftObjectPtr<class UTexture2D>> _pc;                                               // 0x00B0(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<int32, TSoftObjectPtr<class UTexture2D>> _tos;                                              // 0x0100(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<int32, TSoftObjectPtr<class UTexture2D>> _playStation;                                      // 0x0150(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	TSoftObjectPtr<class UTexture2D> BP_GetDataImage(int32 Code);
	TSoftObjectPtr<class UTexture2D> BP_GetPCImage(int32 Code);
	TSoftObjectPtr<class UTexture2D> BP_GetPlayStationImage(int32 Code);
	TSoftObjectPtr<class UTexture2D> BP_GetTOSImage(int32 Code);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrimaryAssetLanguageImage">();
	}
	static class UPrimaryAssetLanguageImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrimaryAssetLanguageImage>();
	}
};
static_assert(alignof(UPrimaryAssetLanguageImage) == 0x000008, "Wrong alignment on UPrimaryAssetLanguageImage");
static_assert(sizeof(UPrimaryAssetLanguageImage) == 0x0001A0, "Wrong size on UPrimaryAssetLanguageImage");
static_assert(offsetof(UPrimaryAssetLanguageImage, _data) == 0x000060, "Member 'UPrimaryAssetLanguageImage::_data' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetLanguageImage, _pc) == 0x0000B0, "Member 'UPrimaryAssetLanguageImage::_pc' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetLanguageImage, _tos) == 0x000100, "Member 'UPrimaryAssetLanguageImage::_tos' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetLanguageImage, _playStation) == 0x000150, "Member 'UPrimaryAssetLanguageImage::_playStation' has a wrong offset!");

// Class GameModule.PrimaryAssetLicense
// 0x00F0 (0x0150 - 0x0060)
class UPrimaryAssetLicense final : public UPrimaryAssetBase
{
public:
	TMap<class FString, TSoftObjectPtr<class UPaperSprite>> _sizeL;                                            // 0x0060(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<class FString, TSoftObjectPtr<class UPaperSprite>> _sizeM;                                            // 0x00B0(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<class FString, TSoftObjectPtr<class UPaperSprite>> _sizeS;                                            // 0x0100(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	class UPaperSprite* BP_GetTextureL(const class FString& Key) const;
	class UPaperSprite* BP_GetTextureM(const class FString& Key) const;
	class UPaperSprite* BP_TextureS(const class FString& Key) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrimaryAssetLicense">();
	}
	static class UPrimaryAssetLicense* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrimaryAssetLicense>();
	}
};
static_assert(alignof(UPrimaryAssetLicense) == 0x000008, "Wrong alignment on UPrimaryAssetLicense");
static_assert(sizeof(UPrimaryAssetLicense) == 0x000150, "Wrong size on UPrimaryAssetLicense");
static_assert(offsetof(UPrimaryAssetLicense, _sizeL) == 0x000060, "Member 'UPrimaryAssetLicense::_sizeL' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetLicense, _sizeM) == 0x0000B0, "Member 'UPrimaryAssetLicense::_sizeM' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetLicense, _sizeS) == 0x000100, "Member 'UPrimaryAssetLicense::_sizeS' has a wrong offset!");

// Class GameModule.PrimaryAssetLoginBonusLogo
// 0x00F0 (0x0150 - 0x0060)
class UPrimaryAssetLoginBonusLogo final : public UPrimaryAssetBase
{
public:
	TMap<class FString, TSoftObjectPtr<class UPaperSprite>> _logo;                                             // 0x0060(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<class FString, TSoftObjectPtr<class UPaperSprite>> _bg;                                               // 0x00B0(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<class FString, struct FTransform>        _logoOffset;                                       // 0x0100(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	class UPaperSprite* BP_GetPaperSpriteLogo(const class FString& Key) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrimaryAssetLoginBonusLogo">();
	}
	static class UPrimaryAssetLoginBonusLogo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrimaryAssetLoginBonusLogo>();
	}
};
static_assert(alignof(UPrimaryAssetLoginBonusLogo) == 0x000008, "Wrong alignment on UPrimaryAssetLoginBonusLogo");
static_assert(sizeof(UPrimaryAssetLoginBonusLogo) == 0x000150, "Wrong size on UPrimaryAssetLoginBonusLogo");
static_assert(offsetof(UPrimaryAssetLoginBonusLogo, _logo) == 0x000060, "Member 'UPrimaryAssetLoginBonusLogo::_logo' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetLoginBonusLogo, _bg) == 0x0000B0, "Member 'UPrimaryAssetLoginBonusLogo::_bg' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetLoginBonusLogo, _logoOffset) == 0x000100, "Member 'UPrimaryAssetLoginBonusLogo::_logoOffset' has a wrong offset!");

// Class GameModule.PrimaryAssetNetworkWaitIcon
// 0x00A0 (0x0100 - 0x0060)
class UPrimaryAssetNetworkWaitIcon final : public UPrimaryAssetBase
{
public:
	TMap<int32, TSoftClassPtr<class UClass>>      _waitWidget;                                       // 0x0060(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<int32, TSoftClassPtr<class UClass>>      _loginWidget;                                      // 0x00B0(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrimaryAssetNetworkWaitIcon">();
	}
	static class UPrimaryAssetNetworkWaitIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrimaryAssetNetworkWaitIcon>();
	}
};
static_assert(alignof(UPrimaryAssetNetworkWaitIcon) == 0x000008, "Wrong alignment on UPrimaryAssetNetworkWaitIcon");
static_assert(sizeof(UPrimaryAssetNetworkWaitIcon) == 0x000100, "Wrong size on UPrimaryAssetNetworkWaitIcon");
static_assert(offsetof(UPrimaryAssetNetworkWaitIcon, _waitWidget) == 0x000060, "Member 'UPrimaryAssetNetworkWaitIcon::_waitWidget' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetNetworkWaitIcon, _loginWidget) == 0x0000B0, "Member 'UPrimaryAssetNetworkWaitIcon::_loginWidget' has a wrong offset!");

// Class GameModule.PrimaryAssetNoticeImage
// 0x0140 (0x01A0 - 0x0060)
class UPrimaryAssetNoticeImage final : public UPrimaryAssetBase
{
public:
	TMap<int32, TSoftObjectPtr<class UPaperSprite>> _noticeImage;                                      // 0x0060(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<int32, TSoftObjectPtr<class UMaterialInterface>> _noticeMaterial;                                   // 0x00B0(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<class FString, TSoftObjectPtr<class UPaperSprite>> _gashaLogo;                                        // 0x0100(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<class FString, TSoftObjectPtr<class UPaperSprite>> _campaignLogo;                                     // 0x0150(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrimaryAssetNoticeImage">();
	}
	static class UPrimaryAssetNoticeImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrimaryAssetNoticeImage>();
	}
};
static_assert(alignof(UPrimaryAssetNoticeImage) == 0x000008, "Wrong alignment on UPrimaryAssetNoticeImage");
static_assert(sizeof(UPrimaryAssetNoticeImage) == 0x0001A0, "Wrong size on UPrimaryAssetNoticeImage");
static_assert(offsetof(UPrimaryAssetNoticeImage, _noticeImage) == 0x000060, "Member 'UPrimaryAssetNoticeImage::_noticeImage' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetNoticeImage, _noticeMaterial) == 0x0000B0, "Member 'UPrimaryAssetNoticeImage::_noticeMaterial' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetNoticeImage, _gashaLogo) == 0x000100, "Member 'UPrimaryAssetNoticeImage::_gashaLogo' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetNoticeImage, _campaignLogo) == 0x000150, "Member 'UPrimaryAssetNoticeImage::_campaignLogo' has a wrong offset!");

// Class GameModule.PrimaryAssetPermanent
// 0x0090 (0x00F0 - 0x0060)
class UPrimaryAssetPermanent final : public UPrimaryAssetBase
{
public:
	TMap<ECharacterId, struct FPrimaryCharacterAssets> _characterAssets;                                  // 0x0060(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UObject>>         _miscAssets;                                       // 0x00B0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	class FName                                   _characterPath;                                    // 0x00C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   _stringTablePath;                                  // 0x00C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 _aiControllerParentClassName;                      // 0x00D0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FSpecifiedDirectoryParam>       _soundPathList;                                    // 0x00E0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrimaryAssetPermanent">();
	}
	static class UPrimaryAssetPermanent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrimaryAssetPermanent>();
	}
};
static_assert(alignof(UPrimaryAssetPermanent) == 0x000008, "Wrong alignment on UPrimaryAssetPermanent");
static_assert(sizeof(UPrimaryAssetPermanent) == 0x0000F0, "Wrong size on UPrimaryAssetPermanent");
static_assert(offsetof(UPrimaryAssetPermanent, _characterAssets) == 0x000060, "Member 'UPrimaryAssetPermanent::_characterAssets' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetPermanent, _miscAssets) == 0x0000B0, "Member 'UPrimaryAssetPermanent::_miscAssets' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetPermanent, _characterPath) == 0x0000C0, "Member 'UPrimaryAssetPermanent::_characterPath' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetPermanent, _stringTablePath) == 0x0000C8, "Member 'UPrimaryAssetPermanent::_stringTablePath' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetPermanent, _aiControllerParentClassName) == 0x0000D0, "Member 'UPrimaryAssetPermanent::_aiControllerParentClassName' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetPermanent, _soundPathList) == 0x0000E0, "Member 'UPrimaryAssetPermanent::_soundPathList' has a wrong offset!");

// Class GameModule.PrimaryAssetStaffrollAnimation
// 0x00B0 (0x0110 - 0x0060)
class UPrimaryAssetStaffrollAnimation final : public UPrimaryAssetBase
{
public:
	TMap<class FString, TSoftObjectPtr<class UTexture>> _movieTexture;                                     // 0x0060(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<class FString, TSoftObjectPtr<class UMaterial>> _movieMaterial;                                    // 0x00B0(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_100[0x10];                                     // 0x0100(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMaterial* BP_GetMovieMaterial(int32 Index_0) const;
	class UTexture* BP_GetMovieTexture(int32 Index_0) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrimaryAssetStaffrollAnimation">();
	}
	static class UPrimaryAssetStaffrollAnimation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrimaryAssetStaffrollAnimation>();
	}
};
static_assert(alignof(UPrimaryAssetStaffrollAnimation) == 0x000008, "Wrong alignment on UPrimaryAssetStaffrollAnimation");
static_assert(sizeof(UPrimaryAssetStaffrollAnimation) == 0x000110, "Wrong size on UPrimaryAssetStaffrollAnimation");
static_assert(offsetof(UPrimaryAssetStaffrollAnimation, _movieTexture) == 0x000060, "Member 'UPrimaryAssetStaffrollAnimation::_movieTexture' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetStaffrollAnimation, _movieMaterial) == 0x0000B0, "Member 'UPrimaryAssetStaffrollAnimation::_movieMaterial' has a wrong offset!");

// Class GameModule.PrimaryAssetStaffrollLogo
// 0x00A0 (0x0100 - 0x0060)
class UPrimaryAssetStaffrollLogo final : public UPrimaryAssetBase
{
public:
	TMap<class FString, TSoftObjectPtr<class UPaperSprite>> _logo;                                             // 0x0060(0x0050)(Edit, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<class FString, struct FTransform>        _logoOffset;                                       // 0x00B0(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	class UPaperSprite* BP_GetPaperSpriteLogo(const class FString& Key) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrimaryAssetStaffrollLogo">();
	}
	static class UPrimaryAssetStaffrollLogo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrimaryAssetStaffrollLogo>();
	}
};
static_assert(alignof(UPrimaryAssetStaffrollLogo) == 0x000008, "Wrong alignment on UPrimaryAssetStaffrollLogo");
static_assert(sizeof(UPrimaryAssetStaffrollLogo) == 0x000100, "Wrong size on UPrimaryAssetStaffrollLogo");
static_assert(offsetof(UPrimaryAssetStaffrollLogo, _logo) == 0x000060, "Member 'UPrimaryAssetStaffrollLogo::_logo' has a wrong offset!");
static_assert(offsetof(UPrimaryAssetStaffrollLogo, _logoOffset) == 0x0000B0, "Member 'UPrimaryAssetStaffrollLogo::_logoOffset' has a wrong offset!");

// Class GameModule.PrimaryAssetTutorial
// 0x0050 (0x00B0 - 0x0060)
class UPrimaryAssetTutorial final : public UPrimaryAssetBase
{
public:
	TMap<ETutorialPopupScene, TSoftObjectPtr<class UWorld>> _popupSubLevel;                                    // 0x0060(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	TSoftObjectPtr<class UWorld> BP_GetPopupWorld(ETutorialPopupScene Type);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrimaryAssetTutorial">();
	}
	static class UPrimaryAssetTutorial* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrimaryAssetTutorial>();
	}
};
static_assert(alignof(UPrimaryAssetTutorial) == 0x000008, "Wrong alignment on UPrimaryAssetTutorial");
static_assert(sizeof(UPrimaryAssetTutorial) == 0x0000B0, "Wrong size on UPrimaryAssetTutorial");
static_assert(offsetof(UPrimaryAssetTutorial, _popupSubLevel) == 0x000060, "Member 'UPrimaryAssetTutorial::_popupSubLevel' has a wrong offset!");

// Class GameModule.ProfileDisplayData
// 0x0190 (0x01B8 - 0x0028)
class UProfileDisplayData final : public UObject
{
public:
	class FString                                 _playerId;                                         // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FPlayerDisplayData                     _player;                                           // 0x0038(0x00C8)(NativeAccessSpecifierPrivate)
	struct FGuildDisplayData                      _guild;                                            // 0x0100(0x0048)(NativeAccessSpecifierPrivate)
	struct FEmblemDisplayData                     _emblem;                                           // 0x0148(0x000C)(NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMyADDisplayData                       _ad;                                               // 0x0158(0x0060)(NativeAccessSpecifierPrivate)

public:
	const struct FMyADDisplayData BP_getAD() const;
	const struct FEmblemDisplayData BP_getEmblem() const;
	const struct FGuildDisplayData BP_getGuild() const;
	const struct FPlayerDisplayData BP_getPlayer() const;
	class FString BP_getPlayerId() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProfileDisplayData">();
	}
	static class UProfileDisplayData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProfileDisplayData>();
	}
};
static_assert(alignof(UProfileDisplayData) == 0x000008, "Wrong alignment on UProfileDisplayData");
static_assert(sizeof(UProfileDisplayData) == 0x0001B8, "Wrong size on UProfileDisplayData");
static_assert(offsetof(UProfileDisplayData, _playerId) == 0x000028, "Member 'UProfileDisplayData::_playerId' has a wrong offset!");
static_assert(offsetof(UProfileDisplayData, _player) == 0x000038, "Member 'UProfileDisplayData::_player' has a wrong offset!");
static_assert(offsetof(UProfileDisplayData, _guild) == 0x000100, "Member 'UProfileDisplayData::_guild' has a wrong offset!");
static_assert(offsetof(UProfileDisplayData, _emblem) == 0x000148, "Member 'UProfileDisplayData::_emblem' has a wrong offset!");
static_assert(offsetof(UProfileDisplayData, _ad) == 0x000158, "Member 'UProfileDisplayData::_ad' has a wrong offset!");

// Class GameModule.ProfileDisplayEmblemWidget
// 0x0020 (0x0370 - 0x0350)
class UProfileDisplayEmblemWidget final : public UWidgetBase
{
public:
	bool                                          _bSmall;                                           // 0x0350(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bSyncLoad;                                        // 0x0351(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_352[0x6];                                      // 0x0352(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UEmblemDisplayWidget*                   _displayLeft;                                      // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEmblemDisplayWidget*                   _displayCenter;                                    // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEmblemDisplayWidget*                   _displayRight;                                     // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BP_SetupEmblem(int32 LeftCode, int32 CenterCode, int32 RightCode);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProfileDisplayEmblemWidget">();
	}
	static class UProfileDisplayEmblemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProfileDisplayEmblemWidget>();
	}
};
static_assert(alignof(UProfileDisplayEmblemWidget) == 0x000008, "Wrong alignment on UProfileDisplayEmblemWidget");
static_assert(sizeof(UProfileDisplayEmblemWidget) == 0x000370, "Wrong size on UProfileDisplayEmblemWidget");
static_assert(offsetof(UProfileDisplayEmblemWidget, _bSmall) == 0x000350, "Member 'UProfileDisplayEmblemWidget::_bSmall' has a wrong offset!");
static_assert(offsetof(UProfileDisplayEmblemWidget, _bSyncLoad) == 0x000351, "Member 'UProfileDisplayEmblemWidget::_bSyncLoad' has a wrong offset!");
static_assert(offsetof(UProfileDisplayEmblemWidget, _displayLeft) == 0x000358, "Member 'UProfileDisplayEmblemWidget::_displayLeft' has a wrong offset!");
static_assert(offsetof(UProfileDisplayEmblemWidget, _displayCenter) == 0x000360, "Member 'UProfileDisplayEmblemWidget::_displayCenter' has a wrong offset!");
static_assert(offsetof(UProfileDisplayEmblemWidget, _displayRight) == 0x000368, "Member 'UProfileDisplayEmblemWidget::_displayRight' has a wrong offset!");

// Class GameModule.ProfileDisplayManager
// 0x0088 (0x02A8 - 0x0220)
class AProfileDisplayManager final : public AActor
{
public:
	FMulticastInlineDelegateProperty_             _onFinishSetupEventDispatcher;                     // 0x0220(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  _friendRequestLevel;                               // 0x0230(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UWorld>                  _guildRequesetLevel;                               // 0x0258(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UWorld>                  _violationReportLevel;                             // 0x0280(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class ULevelStreamingDynamic* BP_RequesetLoad(TSoftObjectPtr<class UWorld> _level);
	void OnFinishSetupEventDispatcher__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProfileDisplayManager">();
	}
	static class AProfileDisplayManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProfileDisplayManager>();
	}
};
static_assert(alignof(AProfileDisplayManager) == 0x000008, "Wrong alignment on AProfileDisplayManager");
static_assert(sizeof(AProfileDisplayManager) == 0x0002A8, "Wrong size on AProfileDisplayManager");
static_assert(offsetof(AProfileDisplayManager, _onFinishSetupEventDispatcher) == 0x000220, "Member 'AProfileDisplayManager::_onFinishSetupEventDispatcher' has a wrong offset!");
static_assert(offsetof(AProfileDisplayManager, _friendRequestLevel) == 0x000230, "Member 'AProfileDisplayManager::_friendRequestLevel' has a wrong offset!");
static_assert(offsetof(AProfileDisplayManager, _guildRequesetLevel) == 0x000258, "Member 'AProfileDisplayManager::_guildRequesetLevel' has a wrong offset!");
static_assert(offsetof(AProfileDisplayManager, _violationReportLevel) == 0x000280, "Member 'AProfileDisplayManager::_violationReportLevel' has a wrong offset!");

// Class GameModule.ProfileDisplayRankWidget
// 0x0010 (0x0360 - 0x0350)
class UProfileDisplayRankWidget final : public UWidgetBase
{
public:
	class UNamedSlot*                             _imageSlot;                                        // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPaperFlipbook*                         _ImageFB;                                          // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UPaperSprite* BP_GetRankImage(const int32 Rank);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProfileDisplayRankWidget">();
	}
	static class UProfileDisplayRankWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProfileDisplayRankWidget>();
	}
};
static_assert(alignof(UProfileDisplayRankWidget) == 0x000008, "Wrong alignment on UProfileDisplayRankWidget");
static_assert(sizeof(UProfileDisplayRankWidget) == 0x000360, "Wrong size on UProfileDisplayRankWidget");
static_assert(offsetof(UProfileDisplayRankWidget, _imageSlot) == 0x000350, "Member 'UProfileDisplayRankWidget::_imageSlot' has a wrong offset!");
static_assert(offsetof(UProfileDisplayRankWidget, _ImageFB) == 0x000358, "Member 'UProfileDisplayRankWidget::_ImageFB' has a wrong offset!");

// Class GameModule.ProfileDisplayViolationReportWidget
// 0x0048 (0x0430 - 0x03E8)
class UProfileDisplayViolationReportWidget final : public UAppWidget
{
public:
	class UWidgetGeneralSelectiveWindow*          _selectWindow;                                     // 0x03E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetGeneralWindow*                   _popupWindow;                                      // 0x03F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMdPenaltyType                                _penaltyReportType;                                // 0x03F8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3F9[0x1F];                                     // 0x03F9(0x001F)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerDatabaseWork*                    _playerDatabaseWork;                               // 0x0418(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGameSequenceWork*                      _gameSequenceWork;                                 // 0x0420(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBackendSubsystem*                      _backendSubsystem;                                 // 0x0428(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void BP_Cancel();
	void BP_CloseLevel();
	class FString BP_GetTargetName();
	void BP_RequestReport();
	void BP_RequestReportInGame();
	void OnCancelPopupWindow(class UAppWidget* Widget, EWidgetInputType InputType);
	void OnClosedPopupWindow();
	void OnClosedSelectWindow();
	void OnDecidePopupWindow(class UAppWidget* Widget, EWidgetInputType InputType, bool LeftButton);
	void OnDecideSelectWindow(int32 Selectindex, class UAppWidget* Widget, EWidgetInputType InputType, bool LeftButton);
	void OnFinishFetchDataEvent(int32 RequestId);
	void OnReceivedFinish();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProfileDisplayViolationReportWidget">();
	}
	static class UProfileDisplayViolationReportWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProfileDisplayViolationReportWidget>();
	}
};
static_assert(alignof(UProfileDisplayViolationReportWidget) == 0x000008, "Wrong alignment on UProfileDisplayViolationReportWidget");
static_assert(sizeof(UProfileDisplayViolationReportWidget) == 0x000430, "Wrong size on UProfileDisplayViolationReportWidget");
static_assert(offsetof(UProfileDisplayViolationReportWidget, _selectWindow) == 0x0003E8, "Member 'UProfileDisplayViolationReportWidget::_selectWindow' has a wrong offset!");
static_assert(offsetof(UProfileDisplayViolationReportWidget, _popupWindow) == 0x0003F0, "Member 'UProfileDisplayViolationReportWidget::_popupWindow' has a wrong offset!");
static_assert(offsetof(UProfileDisplayViolationReportWidget, _penaltyReportType) == 0x0003F8, "Member 'UProfileDisplayViolationReportWidget::_penaltyReportType' has a wrong offset!");
static_assert(offsetof(UProfileDisplayViolationReportWidget, _playerDatabaseWork) == 0x000418, "Member 'UProfileDisplayViolationReportWidget::_playerDatabaseWork' has a wrong offset!");
static_assert(offsetof(UProfileDisplayViolationReportWidget, _gameSequenceWork) == 0x000420, "Member 'UProfileDisplayViolationReportWidget::_gameSequenceWork' has a wrong offset!");
static_assert(offsetof(UProfileDisplayViolationReportWidget, _backendSubsystem) == 0x000428, "Member 'UProfileDisplayViolationReportWidget::_backendSubsystem' has a wrong offset!");

// Class GameModule.ProfileDisplayWidget
// 0x0048 (0x0398 - 0x0350)
class UProfileDisplayWidget final : public UWidgetBase
{
public:
	class UWidgetBase*                            _playerCard;                                       // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetBase*                            _guildCard;                                        // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetBase*                            _emblemCard;                                       // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetBase*                            _myADCard;                                         // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetBase*                            _billboardRank;                                    // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetBase*                            _billboardSeason;                                  // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetBase*                            _billboardDaily;                                   // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UProfileDisplayData*                    _displayData;                                      // 0x0388(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_390[0x8];                                      // 0x0390(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_SetMySelf(bool Val);
	void GenerateData(const class UProfileDisplayData* _data);
	void OnChangePlayerName();
	void OnChangIntroduction();

	bool BP_GetMySelf() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProfileDisplayWidget">();
	}
	static class UProfileDisplayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProfileDisplayWidget>();
	}
};
static_assert(alignof(UProfileDisplayWidget) == 0x000008, "Wrong alignment on UProfileDisplayWidget");
static_assert(sizeof(UProfileDisplayWidget) == 0x000398, "Wrong size on UProfileDisplayWidget");
static_assert(offsetof(UProfileDisplayWidget, _playerCard) == 0x000350, "Member 'UProfileDisplayWidget::_playerCard' has a wrong offset!");
static_assert(offsetof(UProfileDisplayWidget, _guildCard) == 0x000358, "Member 'UProfileDisplayWidget::_guildCard' has a wrong offset!");
static_assert(offsetof(UProfileDisplayWidget, _emblemCard) == 0x000360, "Member 'UProfileDisplayWidget::_emblemCard' has a wrong offset!");
static_assert(offsetof(UProfileDisplayWidget, _myADCard) == 0x000368, "Member 'UProfileDisplayWidget::_myADCard' has a wrong offset!");
static_assert(offsetof(UProfileDisplayWidget, _billboardRank) == 0x000370, "Member 'UProfileDisplayWidget::_billboardRank' has a wrong offset!");
static_assert(offsetof(UProfileDisplayWidget, _billboardSeason) == 0x000378, "Member 'UProfileDisplayWidget::_billboardSeason' has a wrong offset!");
static_assert(offsetof(UProfileDisplayWidget, _billboardDaily) == 0x000380, "Member 'UProfileDisplayWidget::_billboardDaily' has a wrong offset!");
static_assert(offsetof(UProfileDisplayWidget, _displayData) == 0x000388, "Member 'UProfileDisplayWidget::_displayData' has a wrong offset!");

// Class GameModule.ProfileDisplayOfferWidget
// 0x0080 (0x0468 - 0x03E8)
class UProfileDisplayOfferWidget final : public UAppWidget
{
public:
	uint8                                         Pad_3E8[0x8];                                      // 0x03E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetButton*                          _listOpenButton;                                   // 0x03F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USendLikeButtonWidget*                  _sendLikeButton;                                   // 0x03F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               _platformProfileButtonOverlay;                     // 0x0400(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetButton*                          _platformProfileButton;                            // 0x0408(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetButton*                          _rankProfileButton;                                // 0x0410(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                           _window;                                           // 0x0418(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UProfileDisplayWidget*                  _profileDisplay;                                   // 0x0420(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UProfileRankListWidget*                 _profileRankDisplay;                               // 0x0428(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULoadIconWidget*                        _networkLoadingIcon;                               // 0x0430(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bMySelf;                                           // 0x0438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPreview;                                          // 0x0439(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_43A[0xE];                                      // 0x043A(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnFinishFetchDataEventDelegate;                    // 0x0448(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_             OnFinishUpdateWebApiErrorEventDelegate;            // 0x0458(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)

public:
	void BP_OnChangeTab();
	void BP_OnTryChangeTab();
	class UWidget* DoCustomListNavigation_ListOpenButton(EUINavigation UiNavigation);
	class UWidget* DoCustomListNavigation_PlatformProfileButton(EUINavigation UiNavigation);
	class UWidget* DoCustomListNavigation_RankProfileButton(EUINavigation UiNavigation);
	class UWidget* DoCustomListNavigation_SendLikeButton(EUINavigation UiNavigation);
	void OnDecidePlatformProfileButton(class UAppWidget* Widget, EWidgetInputType InputType);
	void OnDecideRankProfileButton(class UAppWidget* Widget, EWidgetInputType InputType);
	void OnFinishedNoticeWindow();
	void OnFinishFetchDataEvent();
	void OnFinishFetchDataEventDelegate__DelegateSignature();
	void OnFinishReceivedOnLoadCompleteEvent();
	void OnPlayerRequestErrorEvent(int32 RequestId, const class FName Key, const class FName Message);
	void OnReceivedCloseWebApiErrorWindow();
	void ReceivedOnLoadCompleteEvent(int32 RequestId);
	void UpdateAfterFetchData();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProfileDisplayOfferWidget">();
	}
	static class UProfileDisplayOfferWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProfileDisplayOfferWidget>();
	}
};
static_assert(alignof(UProfileDisplayOfferWidget) == 0x000008, "Wrong alignment on UProfileDisplayOfferWidget");
static_assert(sizeof(UProfileDisplayOfferWidget) == 0x000468, "Wrong size on UProfileDisplayOfferWidget");
static_assert(offsetof(UProfileDisplayOfferWidget, _listOpenButton) == 0x0003F0, "Member 'UProfileDisplayOfferWidget::_listOpenButton' has a wrong offset!");
static_assert(offsetof(UProfileDisplayOfferWidget, _sendLikeButton) == 0x0003F8, "Member 'UProfileDisplayOfferWidget::_sendLikeButton' has a wrong offset!");
static_assert(offsetof(UProfileDisplayOfferWidget, _platformProfileButtonOverlay) == 0x000400, "Member 'UProfileDisplayOfferWidget::_platformProfileButtonOverlay' has a wrong offset!");
static_assert(offsetof(UProfileDisplayOfferWidget, _platformProfileButton) == 0x000408, "Member 'UProfileDisplayOfferWidget::_platformProfileButton' has a wrong offset!");
static_assert(offsetof(UProfileDisplayOfferWidget, _rankProfileButton) == 0x000410, "Member 'UProfileDisplayOfferWidget::_rankProfileButton' has a wrong offset!");
static_assert(offsetof(UProfileDisplayOfferWidget, _window) == 0x000418, "Member 'UProfileDisplayOfferWidget::_window' has a wrong offset!");
static_assert(offsetof(UProfileDisplayOfferWidget, _profileDisplay) == 0x000420, "Member 'UProfileDisplayOfferWidget::_profileDisplay' has a wrong offset!");
static_assert(offsetof(UProfileDisplayOfferWidget, _profileRankDisplay) == 0x000428, "Member 'UProfileDisplayOfferWidget::_profileRankDisplay' has a wrong offset!");
static_assert(offsetof(UProfileDisplayOfferWidget, _networkLoadingIcon) == 0x000430, "Member 'UProfileDisplayOfferWidget::_networkLoadingIcon' has a wrong offset!");
static_assert(offsetof(UProfileDisplayOfferWidget, bMySelf) == 0x000438, "Member 'UProfileDisplayOfferWidget::bMySelf' has a wrong offset!");
static_assert(offsetof(UProfileDisplayOfferWidget, bPreview) == 0x000439, "Member 'UProfileDisplayOfferWidget::bPreview' has a wrong offset!");
static_assert(offsetof(UProfileDisplayOfferWidget, OnFinishFetchDataEventDelegate) == 0x000448, "Member 'UProfileDisplayOfferWidget::OnFinishFetchDataEventDelegate' has a wrong offset!");
static_assert(offsetof(UProfileDisplayOfferWidget, OnFinishUpdateWebApiErrorEventDelegate) == 0x000458, "Member 'UProfileDisplayOfferWidget::OnFinishUpdateWebApiErrorEventDelegate' has a wrong offset!");

// Class GameModule.ProfileRankListWidget
// 0x0008 (0x0358 - 0x0350)
class UProfileRankListWidget final : public UWidgetBase
{
public:
	class UWidgetGeneralEmptyWindow*              _emptyWindow;                                      // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Open();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProfileRankListWidget">();
	}
	static class UProfileRankListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProfileRankListWidget>();
	}
};
static_assert(alignof(UProfileRankListWidget) == 0x000008, "Wrong alignment on UProfileRankListWidget");
static_assert(sizeof(UProfileRankListWidget) == 0x000358, "Wrong size on UProfileRankListWidget");
static_assert(offsetof(UProfileRankListWidget, _emptyWindow) == 0x000350, "Member 'UProfileRankListWidget::_emptyWindow' has a wrong offset!");

// Class GameModule.BulletData
// 0x0410 (0x0438 - 0x0028)
class UBulletData final : public UObject
{
public:
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHashID                                FileHash;                                          // 0x0048(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x3DC];                                     // 0x004C(0x03DC)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBulletLevelData>               Levels;                                            // 0x0428(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BulletData">();
	}
	static class UBulletData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBulletData>();
	}
};
static_assert(alignof(UBulletData) == 0x000008, "Wrong alignment on UBulletData");
static_assert(sizeof(UBulletData) == 0x000438, "Wrong size on UBulletData");
static_assert(offsetof(UBulletData, FileHash) == 0x000048, "Member 'UBulletData::FileHash' has a wrong offset!");
static_assert(offsetof(UBulletData, Levels) == 0x000428, "Member 'UBulletData::Levels' has a wrong offset!");

// Class GameModule.GeneratorData
// 0x0138 (0x0160 - 0x0028)
class UGeneratorData final : public UObject
{
public:
	class FString                                 Parent;                                            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHashID                                FileHash;                                          // 0x0038(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	ECharacterId                                  CharaID;                                           // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeneratorIndexData                    base;                                              // 0x0040(0x00D0)(NativeAccessSpecifierPublic)
	TMap<uint32, struct FGeneratorIndexData>      GenTbl;                                            // 0x0110(0x0050)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeneratorData">();
	}
	static class UGeneratorData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeneratorData>();
	}
};
static_assert(alignof(UGeneratorData) == 0x000008, "Wrong alignment on UGeneratorData");
static_assert(sizeof(UGeneratorData) == 0x000160, "Wrong size on UGeneratorData");
static_assert(offsetof(UGeneratorData, Parent) == 0x000028, "Member 'UGeneratorData::Parent' has a wrong offset!");
static_assert(offsetof(UGeneratorData, FileHash) == 0x000038, "Member 'UGeneratorData::FileHash' has a wrong offset!");
static_assert(offsetof(UGeneratorData, CharaID) == 0x00003C, "Member 'UGeneratorData::CharaID' has a wrong offset!");
static_assert(offsetof(UGeneratorData, base) == 0x000040, "Member 'UGeneratorData::base' has a wrong offset!");
static_assert(offsetof(UGeneratorData, GenTbl) == 0x000110, "Member 'UGeneratorData::GenTbl' has a wrong offset!");

// Class GameModule.ProjectileDB
// 0x00B8 (0x00E8 - 0x0030)
class UProjectileDB final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0xA8];                                      // 0x0030(0x00A8)(Fixing Size After Last Property [ Dumper-7 ])
	class UEnum*                                  _projectileEnum;                                   // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x8];                                       // 0x00E0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	const struct FBulletLevelData BP_FindBulletLevel(const class FString& HashStr, ECharacterId ID, uint8 Level);
	const struct FGeneratorIndexLevelData BP_FindGeneratorIndexLevelData(const class FString& HashStr, const class FString& DataHashStr, ECharacterId ID, uint8 Level);
	void OnMasterDataInitializeComplete();

	bool BP_BulletFindAnyParameterBool(const struct FBulletLevelData& Data, class FName ParamName) const;
	float BP_BulletFindAnyParameterFloat(const struct FBulletLevelData& Data, class FName ParamName) const;
	struct FVector BP_BulletFindAnyParameterVector(const struct FBulletLevelData& Data, class FName ParamName) const;
	bool BP_GeneratorFindAnyParameterBool(const struct FGeneratorIndexLevelData& Data, class FName ParamName) const;
	float BP_GeneratorFindAnyParameterFloat(const struct FGeneratorIndexLevelData& Data, class FName ParamName) const;
	struct FVector BP_GeneratorFindAnyParameterVector(const struct FGeneratorIndexLevelData& Data, class FName ParamName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProjectileDB">();
	}
	static class UProjectileDB* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProjectileDB>();
	}
};
static_assert(alignof(UProjectileDB) == 0x000008, "Wrong alignment on UProjectileDB");
static_assert(sizeof(UProjectileDB) == 0x0000E8, "Wrong size on UProjectileDB");
static_assert(offsetof(UProjectileDB, _projectileEnum) == 0x0000D8, "Member 'UProjectileDB::_projectileEnum' has a wrong offset!");

// Class GameModule.ProjectileGeneratorGame
// 0x0100 (0x0320 - 0x0220)
#pragma pack(push, 0x1)
class alignas(0x10) AProjectileGeneratorGame : public AActor
{
public:
	struct FGeneratorGameRep                      _gameRep;                                          // 0x0220(0x0050)(BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_270[0x70];                                     // 0x0270(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 _lockonActor;                                      // 0x02E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2E8[0x30];                                     // 0x02E8(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnSpawnInitParams();

	const struct FGeneratorIndexData BP_GetBaseDB() const;
	const struct FGeneratorIndexLevelData BP_GetLevelDB() const;
	ECharacterId GetCharacterID() const;
	const struct FVector GetInitDirection() const;
	const struct FVector GetInitLocation() const;
	const struct FQuat GetInitQuat() const;
	const struct FVector GetInitScale() const;
	const struct FVector GetInitTarget() const;
	const struct FTransform GetInitTransform() const;
	bool GetIsProjectileCreatorMode() const;
	int32 GetLevel() const;
	class AActor* GetLockonActor() const;
	class FName GetSocketName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProjectileGeneratorGame">();
	}
	static class AProjectileGeneratorGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProjectileGeneratorGame>();
	}
};
#pragma pack(pop)
static_assert(alignof(AProjectileGeneratorGame) == 0x000010, "Wrong alignment on AProjectileGeneratorGame");
static_assert(sizeof(AProjectileGeneratorGame) == 0x000320, "Wrong size on AProjectileGeneratorGame");
static_assert(offsetof(AProjectileGeneratorGame, _gameRep) == 0x000220, "Member 'AProjectileGeneratorGame::_gameRep' has a wrong offset!");
static_assert(offsetof(AProjectileGeneratorGame, _lockonActor) == 0x0002E0, "Member 'AProjectileGeneratorGame::_lockonActor' has a wrong offset!");

// Class GameModule.ProjectileReplicateGameComponent
// 0x0000 (0x00B0 - 0x00B0)
class UProjectileReplicateGameComponent : public UActorComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProjectileReplicateGameComponent">();
	}
	static class UProjectileReplicateGameComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProjectileReplicateGameComponent>();
	}
};
static_assert(alignof(UProjectileReplicateGameComponent) == 0x000008, "Wrong alignment on UProjectileReplicateGameComponent");
static_assert(sizeof(UProjectileReplicateGameComponent) == 0x0000B0, "Wrong size on UProjectileReplicateGameComponent");

// Class GameModule.ReturnButtonWidget
// 0x0028 (0x04B0 - 0x0488)
class UReturnButtonWidget final : public UWidgetButton
{
public:
	bool                                          _bColumnType;                                      // 0x0488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bCloseText;                                       // 0x0489(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bUsePressAtomCue;                                 // 0x048A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48B[0x5];                                      // 0x048B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          _pressAtomCue;                                     // 0x0490(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanel*                           _linePanel;                                        // 0x0498(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCanvasPanel*                           _columnPanel;                                      // 0x04A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetSwitcher*                        _columnSwitcher;                                   // 0x04A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnPressButton(class UAppWidget* Widget, EWidgetInputType InputType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ReturnButtonWidget">();
	}
	static class UReturnButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UReturnButtonWidget>();
	}
};
static_assert(alignof(UReturnButtonWidget) == 0x000008, "Wrong alignment on UReturnButtonWidget");
static_assert(sizeof(UReturnButtonWidget) == 0x0004B0, "Wrong size on UReturnButtonWidget");
static_assert(offsetof(UReturnButtonWidget, _bColumnType) == 0x000488, "Member 'UReturnButtonWidget::_bColumnType' has a wrong offset!");
static_assert(offsetof(UReturnButtonWidget, _bCloseText) == 0x000489, "Member 'UReturnButtonWidget::_bCloseText' has a wrong offset!");
static_assert(offsetof(UReturnButtonWidget, _bUsePressAtomCue) == 0x00048A, "Member 'UReturnButtonWidget::_bUsePressAtomCue' has a wrong offset!");
static_assert(offsetof(UReturnButtonWidget, _pressAtomCue) == 0x000490, "Member 'UReturnButtonWidget::_pressAtomCue' has a wrong offset!");
static_assert(offsetof(UReturnButtonWidget, _linePanel) == 0x000498, "Member 'UReturnButtonWidget::_linePanel' has a wrong offset!");
static_assert(offsetof(UReturnButtonWidget, _columnPanel) == 0x0004A0, "Member 'UReturnButtonWidget::_columnPanel' has a wrong offset!");
static_assert(offsetof(UReturnButtonWidget, _columnSwitcher) == 0x0004A8, "Member 'UReturnButtonWidget::_columnSwitcher' has a wrong offset!");

// Class GameModule.RibbonAdjustComponent
// 0x0000 (0x00B0 - 0x00B0)
class URibbonAdjustComponent final : public UActorComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RibbonAdjustComponent">();
	}
	static class URibbonAdjustComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<URibbonAdjustComponent>();
	}
};
static_assert(alignof(URibbonAdjustComponent) == 0x000008, "Wrong alignment on URibbonAdjustComponent");
static_assert(sizeof(URibbonAdjustComponent) == 0x0000B0, "Wrong size on URibbonAdjustComponent");

// Class GameModule.RoleWidget
// 0x0020 (0x0370 - 0x0350)
class URoleWidget final : public UWidgetBase
{
public:
	class UImage*                                 _roleIconImage;                                    // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTextBlock*                             _roleNameText;                                     // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTextBlock*                             _roleDescriptionText;                              // 0x0360(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bShowText;                                        // 0x0368(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EMdAbilityType                                _previewAbilityTypeColor;                          // 0x0369(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_36A[0x6];                                      // 0x036A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnSetRole(EMdAbilityType AbilityType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RoleWidget">();
	}
	static class URoleWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<URoleWidget>();
	}
};
static_assert(alignof(URoleWidget) == 0x000008, "Wrong alignment on URoleWidget");
static_assert(sizeof(URoleWidget) == 0x000370, "Wrong size on URoleWidget");
static_assert(offsetof(URoleWidget, _roleIconImage) == 0x000350, "Member 'URoleWidget::_roleIconImage' has a wrong offset!");
static_assert(offsetof(URoleWidget, _roleNameText) == 0x000358, "Member 'URoleWidget::_roleNameText' has a wrong offset!");
static_assert(offsetof(URoleWidget, _roleDescriptionText) == 0x000360, "Member 'URoleWidget::_roleDescriptionText' has a wrong offset!");
static_assert(offsetof(URoleWidget, _bShowText) == 0x000368, "Member 'URoleWidget::_bShowText' has a wrong offset!");
static_assert(offsetof(URoleWidget, _previewAbilityTypeColor) == 0x000369, "Member 'URoleWidget::_previewAbilityTypeColor' has a wrong offset!");

// Class GameModule.ScoreComponentBase
// 0x0098 (0x00C0 - 0x0028)
class UScoreComponentBase : public UObject
{
public:
	uint8                                         Pad_28[0x70];                                      // 0x0028(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	class AHerovsGameMode*                        _gameMode;                                         // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A0[0x20];                                      // 0x00A0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCompletedSendKpi(int32 RequestId);
	void OnCompletedSendViolationReport(int32 RequestId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScoreComponentBase">();
	}
	static class UScoreComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScoreComponentBase>();
	}
};
static_assert(alignof(UScoreComponentBase) == 0x000008, "Wrong alignment on UScoreComponentBase");
static_assert(sizeof(UScoreComponentBase) == 0x0000C0, "Wrong size on UScoreComponentBase");
static_assert(offsetof(UScoreComponentBase, _gameMode) == 0x000098, "Member 'UScoreComponentBase::_gameMode' has a wrong offset!");

// Class GameModule.ScoreComponent
// 0x0128 (0x01E8 - 0x00C0)
class UScoreComponent final : public UScoreComponentBase
{
public:
	uint8                                         Pad_C0[0x128];                                     // 0x00C0(0x0128)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCompletedSendDropAchievement(int32 RequestId);
	void OnCompletedSendMission(int32 RequestId);
	void OnCompletedSendUserResult(int32 RequestId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScoreComponent">();
	}
	static class UScoreComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScoreComponent>();
	}
};
static_assert(alignof(UScoreComponent) == 0x000008, "Wrong alignment on UScoreComponent");
static_assert(sizeof(UScoreComponent) == 0x0001E8, "Wrong size on UScoreComponent");

// Class GameModule.ScoreComponentCustomMatch
// 0x0008 (0x00C8 - 0x00C0)
class UScoreComponentCustomMatch final : public UScoreComponentBase
{
public:
	uint8                                         Pad_C0[0x8];                                       // 0x00C0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCompletedSendResultData(int32 RequestId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScoreComponentCustomMatch">();
	}
	static class UScoreComponentCustomMatch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScoreComponentCustomMatch>();
	}
};
static_assert(alignof(UScoreComponentCustomMatch) == 0x000008, "Wrong alignment on UScoreComponentCustomMatch");
static_assert(sizeof(UScoreComponentCustomMatch) == 0x0000C8, "Wrong size on UScoreComponentCustomMatch");

// Class GameModule.SendLikeInterface
// 0x0000 (0x0028 - 0x0028)
class ISendLikeInterface final : public IInterface
{
public:
	bool SendLikeImage();
	bool SetSendLikeButtonEnable(bool InEnable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SendLikeInterface">();
	}
	static class ISendLikeInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISendLikeInterface>();
	}
};
static_assert(alignof(ISendLikeInterface) == 0x000008, "Wrong alignment on ISendLikeInterface");
static_assert(sizeof(ISendLikeInterface) == 0x000028, "Wrong size on ISendLikeInterface");

// Class GameModule.SendLikeItemWidget
// 0x0040 (0x0390 - 0x0350)
class USendLikeItemWidget final : public UWidgetBase
{
public:
	class UOverlay*                               _baseScaleWidget;                                  // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 _sendLikeImage;                                    // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _lifeTime;                                         // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _maxAngle;                                         // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _minimumAngle;                                     // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              _basescale;                                        // 0x036C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _maxScaleRate;                                     // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _minimumScaleRate;                                 // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_37C[0x14];                                     // 0x037C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UpdateOpenAnimParam();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SendLikeItemWidget">();
	}
	static class USendLikeItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USendLikeItemWidget>();
	}
};
static_assert(alignof(USendLikeItemWidget) == 0x000008, "Wrong alignment on USendLikeItemWidget");
static_assert(sizeof(USendLikeItemWidget) == 0x000390, "Wrong size on USendLikeItemWidget");
static_assert(offsetof(USendLikeItemWidget, _baseScaleWidget) == 0x000350, "Member 'USendLikeItemWidget::_baseScaleWidget' has a wrong offset!");
static_assert(offsetof(USendLikeItemWidget, _sendLikeImage) == 0x000358, "Member 'USendLikeItemWidget::_sendLikeImage' has a wrong offset!");
static_assert(offsetof(USendLikeItemWidget, _lifeTime) == 0x000360, "Member 'USendLikeItemWidget::_lifeTime' has a wrong offset!");
static_assert(offsetof(USendLikeItemWidget, _maxAngle) == 0x000364, "Member 'USendLikeItemWidget::_maxAngle' has a wrong offset!");
static_assert(offsetof(USendLikeItemWidget, _minimumAngle) == 0x000368, "Member 'USendLikeItemWidget::_minimumAngle' has a wrong offset!");
static_assert(offsetof(USendLikeItemWidget, _basescale) == 0x00036C, "Member 'USendLikeItemWidget::_basescale' has a wrong offset!");
static_assert(offsetof(USendLikeItemWidget, _maxScaleRate) == 0x000374, "Member 'USendLikeItemWidget::_maxScaleRate' has a wrong offset!");
static_assert(offsetof(USendLikeItemWidget, _minimumScaleRate) == 0x000378, "Member 'USendLikeItemWidget::_minimumScaleRate' has a wrong offset!");

// Class GameModule.SendLikeWidget
// 0x0038 (0x0388 - 0x0350)
class USendLikeWidget final : public UWidgetBase
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanel*                           _sendLikePanel;                                    // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class USendLikeItemWidget>        _sendLikeClass;                                    // 0x0360(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              _minimumAnchor;                                    // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              _maxAnchor;                                        // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _RandomAnchor;                                     // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_379[0xF];                                      // 0x0379(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SendLikeWidget">();
	}
	static class USendLikeWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USendLikeWidget>();
	}
};
static_assert(alignof(USendLikeWidget) == 0x000008, "Wrong alignment on USendLikeWidget");
static_assert(sizeof(USendLikeWidget) == 0x000388, "Wrong size on USendLikeWidget");
static_assert(offsetof(USendLikeWidget, _sendLikePanel) == 0x000358, "Member 'USendLikeWidget::_sendLikePanel' has a wrong offset!");
static_assert(offsetof(USendLikeWidget, _sendLikeClass) == 0x000360, "Member 'USendLikeWidget::_sendLikeClass' has a wrong offset!");
static_assert(offsetof(USendLikeWidget, _minimumAnchor) == 0x000368, "Member 'USendLikeWidget::_minimumAnchor' has a wrong offset!");
static_assert(offsetof(USendLikeWidget, _maxAnchor) == 0x000370, "Member 'USendLikeWidget::_maxAnchor' has a wrong offset!");
static_assert(offsetof(USendLikeWidget, _RandomAnchor) == 0x000378, "Member 'USendLikeWidget::_RandomAnchor' has a wrong offset!");

// Class GameModule.SendLikeButtonWidget
// 0x0038 (0x0388 - 0x0350)
class USendLikeButtonWidget final : public UWidgetBase
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnMaxCountEventDelegate;                           // 0x0358(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         _maxSendLikeCount;                                 // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetButton*                          _button;                                           // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_378[0x8];                                      // 0x0378(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerDatabaseWork*                    _playerDatabaseWork;                               // 0x0380(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	bool BP_UpdateSendLikeCount();
	void ClearFocus();
	void OnMaxCountEventDelegate__DelegateSignature();
	void SetupSendLikeCounter();

	int32 BP_GetRemainsSendLikeCount() const;
	int32 BP_GetSendLikeCounter() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SendLikeButtonWidget">();
	}
	static class USendLikeButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USendLikeButtonWidget>();
	}
};
static_assert(alignof(USendLikeButtonWidget) == 0x000008, "Wrong alignment on USendLikeButtonWidget");
static_assert(sizeof(USendLikeButtonWidget) == 0x000388, "Wrong size on USendLikeButtonWidget");
static_assert(offsetof(USendLikeButtonWidget, OnMaxCountEventDelegate) == 0x000358, "Member 'USendLikeButtonWidget::OnMaxCountEventDelegate' has a wrong offset!");
static_assert(offsetof(USendLikeButtonWidget, _maxSendLikeCount) == 0x000368, "Member 'USendLikeButtonWidget::_maxSendLikeCount' has a wrong offset!");
static_assert(offsetof(USendLikeButtonWidget, _button) == 0x000370, "Member 'USendLikeButtonWidget::_button' has a wrong offset!");
static_assert(offsetof(USendLikeButtonWidget, _playerDatabaseWork) == 0x000380, "Member 'USendLikeButtonWidget::_playerDatabaseWork' has a wrong offset!");

// Class GameModule.SkillDerivedTypeWidget
// 0x0010 (0x0360 - 0x0350)
class USkillDerivedTypeWidget final : public UWidgetBase
{
public:
	class UTextBlock*                             _skillDerivedTypeText;                             // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetSwitcher*                        _widgetSwitcher;                                   // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void GetUniqueButtonList(TArray<class UPlatformRichTextBlock*>* UniqueButtonList);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SkillDerivedTypeWidget">();
	}
	static class USkillDerivedTypeWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkillDerivedTypeWidget>();
	}
};
static_assert(alignof(USkillDerivedTypeWidget) == 0x000008, "Wrong alignment on USkillDerivedTypeWidget");
static_assert(sizeof(USkillDerivedTypeWidget) == 0x000360, "Wrong size on USkillDerivedTypeWidget");
static_assert(offsetof(USkillDerivedTypeWidget, _skillDerivedTypeText) == 0x000350, "Member 'USkillDerivedTypeWidget::_skillDerivedTypeText' has a wrong offset!");
static_assert(offsetof(USkillDerivedTypeWidget, _widgetSwitcher) == 0x000358, "Member 'USkillDerivedTypeWidget::_widgetSwitcher' has a wrong offset!");

// Class GameModule.SkillDerivedWidget
// 0x0018 (0x0368 - 0x0350)
class USkillDerivedWidget final : public UWidgetBase
{
public:
	class USkillDerivedTypeWidget*                _skillDerivedType;                                 // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTextBlock*                             _descriptionText;                                  // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAbilityLevelListWidget*                _levelList;                                        // 0x0360(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SkillDerivedWidget">();
	}
	static class USkillDerivedWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkillDerivedWidget>();
	}
};
static_assert(alignof(USkillDerivedWidget) == 0x000008, "Wrong alignment on USkillDerivedWidget");
static_assert(sizeof(USkillDerivedWidget) == 0x000368, "Wrong size on USkillDerivedWidget");
static_assert(offsetof(USkillDerivedWidget, _skillDerivedType) == 0x000350, "Member 'USkillDerivedWidget::_skillDerivedType' has a wrong offset!");
static_assert(offsetof(USkillDerivedWidget, _descriptionText) == 0x000358, "Member 'USkillDerivedWidget::_descriptionText' has a wrong offset!");
static_assert(offsetof(USkillDerivedWidget, _levelList) == 0x000360, "Member 'USkillDerivedWidget::_levelList' has a wrong offset!");

// Class GameModule.SkillVariationDetailWidget
// 0x0018 (0x0368 - 0x0350)
class USkillVariationDetailWidget final : public UWidgetBase
{
public:
	class UPlatformWidgetButton*                  _goToGashaButton;                                  // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_             OnDecideGoToGashaButtonDelegate;                   // 0x0358(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void OnAnalogValueScroll(const struct FAnalogInputEvent& InAnalogEvent);
	void OnDecideButtonEvent(class UAppWidget* Widget, EWidgetInputType InputType);
	void OnInputSkillVariationDetailEventDelegate__DelegateSignature();
	void OnSetAbilityList(ECharacterId CharacterId, int32 VariationNo);
	void OnSetHowToGetText(const class FText& HowToGetText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SkillVariationDetailWidget">();
	}
	static class USkillVariationDetailWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkillVariationDetailWidget>();
	}
};
static_assert(alignof(USkillVariationDetailWidget) == 0x000008, "Wrong alignment on USkillVariationDetailWidget");
static_assert(sizeof(USkillVariationDetailWidget) == 0x000368, "Wrong size on USkillVariationDetailWidget");
static_assert(offsetof(USkillVariationDetailWidget, _goToGashaButton) == 0x000350, "Member 'USkillVariationDetailWidget::_goToGashaButton' has a wrong offset!");
static_assert(offsetof(USkillVariationDetailWidget, OnDecideGoToGashaButtonDelegate) == 0x000358, "Member 'USkillVariationDetailWidget::OnDecideGoToGashaButtonDelegate' has a wrong offset!");

// Class GameModule.SkillVariationListItemObject
// 0x0048 (0x0070 - 0x0028)
class USkillVariationListItemObject final : public UObject
{
public:
	uint8                                         Pad_28[0x48];                                      // 0x0028(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SkillVariationListItemObject">();
	}
	static class USkillVariationListItemObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkillVariationListItemObject>();
	}
};
static_assert(alignof(USkillVariationListItemObject) == 0x000008, "Wrong alignment on USkillVariationListItemObject");
static_assert(sizeof(USkillVariationListItemObject) == 0x000070, "Wrong size on USkillVariationListItemObject");

// Class GameModule.SkillVariationListItemWidget
// 0x0048 (0x0678 - 0x0630)
class USkillVariationListItemWidget final : public UPlatformWidgetButton
{
public:
	uint8                                         Pad_630[0x8];                                      // 0x0630(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class URoleWidget*                            _roleWidget;                                       // 0x0638(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 _variationIcon;                                    // 0x0640(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkillVariationListWidget*              _skillVariationListWidget;                         // 0x0648(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkillVariationListItemObject*          _skillVariationListItemObject;                     // 0x0650(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   _goToGashaKey;                                     // 0x0658(0x0018)(Edit, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_670[0x8];                                      // 0x0670(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnSetEquip(bool bEquip);
	void OnSetHave(bool bHave);
	void OnSetHowToGetText(const class FText& HowToGetText);
	void OnSetName(const class FText& NameText);
	void OnSetRarity(EMdRarity Rarity);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SkillVariationListItemWidget">();
	}
	static class USkillVariationListItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkillVariationListItemWidget>();
	}
};
static_assert(alignof(USkillVariationListItemWidget) == 0x000008, "Wrong alignment on USkillVariationListItemWidget");
static_assert(sizeof(USkillVariationListItemWidget) == 0x000678, "Wrong size on USkillVariationListItemWidget");
static_assert(offsetof(USkillVariationListItemWidget, _roleWidget) == 0x000638, "Member 'USkillVariationListItemWidget::_roleWidget' has a wrong offset!");
static_assert(offsetof(USkillVariationListItemWidget, _variationIcon) == 0x000640, "Member 'USkillVariationListItemWidget::_variationIcon' has a wrong offset!");
static_assert(offsetof(USkillVariationListItemWidget, _skillVariationListWidget) == 0x000648, "Member 'USkillVariationListItemWidget::_skillVariationListWidget' has a wrong offset!");
static_assert(offsetof(USkillVariationListItemWidget, _skillVariationListItemObject) == 0x000650, "Member 'USkillVariationListItemWidget::_skillVariationListItemObject' has a wrong offset!");
static_assert(offsetof(USkillVariationListItemWidget, _goToGashaKey) == 0x000658, "Member 'USkillVariationListItemWidget::_goToGashaKey' has a wrong offset!");

// Class GameModule.SkillVariationListWidget
// 0x0048 (0x0398 - 0x0350)
class USkillVariationListWidget final : public UWidgetBase
{
public:
	class UListView*                              _listView;                                         // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USkillVariationListItemObject*          _equipItemObject;                                  // 0x0358(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_360[0x38];                                     // 0x0360(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnDecideEvent(class UAppWidget* Widget, EWidgetInputType InputType);
	void OnEventGoToGashaButton__DelegateSignature();
	void OnEventSkillVariationListItemObject__DelegateSignature(class USkillVariationListItemObject* SkillVariationListItemObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SkillVariationListWidget">();
	}
	static class USkillVariationListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkillVariationListWidget>();
	}
};
static_assert(alignof(USkillVariationListWidget) == 0x000008, "Wrong alignment on USkillVariationListWidget");
static_assert(sizeof(USkillVariationListWidget) == 0x000398, "Wrong size on USkillVariationListWidget");
static_assert(offsetof(USkillVariationListWidget, _listView) == 0x000350, "Member 'USkillVariationListWidget::_listView' has a wrong offset!");
static_assert(offsetof(USkillVariationListWidget, _equipItemObject) == 0x000358, "Member 'USkillVariationListWidget::_equipItemObject' has a wrong offset!");

// Class GameModule.SkillVariationWidget
// 0x0020 (0x0370 - 0x0350)
class USkillVariationWidget final : public UWidgetBase
{
public:
	class USkillVariationListWidget*              _skillVariationListWidget;                         // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkillVariationListItemObject*          _selectItemObject;                                 // 0x0358(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_360[0xC];                                      // 0x0360(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _bTrainingMode;                                    // 0x036C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_36D[0x3];                                      // 0x036D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CloseLevel();
	void OnDecideGoToGashaButtonEvent();
	void OnDecideSkillVariationListItemObject(class USkillVariationListItemObject* ItemObject);
	void OnFocusSkillVariationListItemObject(class USkillVariationListItemObject* ItemObject);
	void OnLoadComplete(int32 RequestId);
	void OnSetAbilityList(ECharacterId CharacterId, int32 VariationNo);
	void OnShowLoadingIcon(bool bShow);
	void OnUpdateComplete(int32 RequestId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SkillVariationWidget">();
	}
	static class USkillVariationWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkillVariationWidget>();
	}
};
static_assert(alignof(USkillVariationWidget) == 0x000008, "Wrong alignment on USkillVariationWidget");
static_assert(sizeof(USkillVariationWidget) == 0x000370, "Wrong size on USkillVariationWidget");
static_assert(offsetof(USkillVariationWidget, _skillVariationListWidget) == 0x000350, "Member 'USkillVariationWidget::_skillVariationListWidget' has a wrong offset!");
static_assert(offsetof(USkillVariationWidget, _selectItemObject) == 0x000358, "Member 'USkillVariationWidget::_selectItemObject' has a wrong offset!");
static_assert(offsetof(USkillVariationWidget, _bTrainingMode) == 0x00036C, "Member 'USkillVariationWidget::_bTrainingMode' has a wrong offset!");

// Class GameModule.SoundResource
// 0x0050 (0x00B0 - 0x0060)
class USoundResource final : public UPrimaryAssetBase
{
public:
	TMap<class FName, class FString>              _cueSheetMap;                                      // 0x0060(0x0050)(Edit, EditConst, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundResource">();
	}
	static class USoundResource* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundResource>();
	}
};
static_assert(alignof(USoundResource) == 0x000008, "Wrong alignment on USoundResource");
static_assert(sizeof(USoundResource) == 0x0000B0, "Wrong size on USoundResource");
static_assert(offsetof(USoundResource, _cueSheetMap) == 0x000060, "Member 'USoundResource::_cueSheetMap' has a wrong offset!");

// Class GameModule.SoundStatics
// 0x0000 (0x0028 - 0x0028)
class USoundStatics : public UBlueprintFunctionLibrary
{
public:
	static void GetCharacterDedicatedVoiceCharacterCodeList(const class UObject* WorldContextObject, const int32 InCharacterCode, TSet<int32>* OutCharacterCodeSet, bool bInBattle);
	static void GetCharacterDedicatedVoiceCueName(const class UObject* WorldContextObject, const int32 InCharacterCode, const int32 InVsCharacterCode, const bool bInDedicated, const bool bInVillain, const class FString& InFormatString, class FString* OutSoundString);
	static void GetCharacterDedicatedVoiceCueNameAuto(const class UObject* WorldContextObject, const ECharacterId InCharacterId, const ECharacterId InVsCharacterId, const class FString& InFormatString, class FString* OutSoundString);
	static class UAtomComponent* PlayCharacterDedicatedVoice(const class UObject* WorldContextObject, const int32 InCharacterCode, const int32 InVsCharacterCode, const bool bInDedicated, const bool bInVillain, const class FString& InFormatString);
	static class UAtomComponent* PlayCharacterDedicatedVoiceAuto(const class UObject* WorldContextObject, const ECharacterId InCharacterId, const ECharacterId InVsCharacterId, const class FString& InFormatString);
	static class UAtomComponent* PlayMusic(const class UObject* WorldContextObject, class USoundAtomCue* Sound);
	static class UAtomComponent* PlaySound2D(const class UObject* WorldContextObject, class USoundAtomCue* Sound);
	static class UAtomComponent* PlaySound2DByName(const class UObject* WorldContextObject, const class FString& CueName);
	static class UAtomComponent* PlaySoundAtLocation(const class UObject* WorldContextObject, const class FString& CueName, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy);
	static class UAtomComponent* PlaySoundAttached(const class FString& CueName, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy);
	static class UAtomComponent* PlayVoice2D(const class UObject* WorldContextObject, class USoundAtomCue* Sound);
	static class UAtomComponent* PlayVoice2DByName(const class UObject* WorldContextObject, const class FString& CueName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundStatics">();
	}
	static class USoundStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundStatics>();
	}
};
static_assert(alignof(USoundStatics) == 0x000008, "Wrong alignment on USoundStatics");
static_assert(sizeof(USoundStatics) == 0x000028, "Wrong size on USoundStatics");

// Class GameModule.ParticleSpawnRateCtrl
// 0x0028 (0x0050 - 0x0028)
class UParticleSpawnRateCtrl final : public UObject
{
public:
	class UCustomParticleSystemComponent*         _owner;                                            // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_30[0x20];                                      // 0x0030(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ParticleSpawnRateCtrl">();
	}
	static class UParticleSpawnRateCtrl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParticleSpawnRateCtrl>();
	}
};
static_assert(alignof(UParticleSpawnRateCtrl) == 0x000008, "Wrong alignment on UParticleSpawnRateCtrl");
static_assert(sizeof(UParticleSpawnRateCtrl) == 0x000050, "Wrong size on UParticleSpawnRateCtrl");
static_assert(offsetof(UParticleSpawnRateCtrl, _owner) == 0x000028, "Member 'UParticleSpawnRateCtrl::_owner' has a wrong offset!");

// Class GameModule.SpecialActionWidget
// 0x0048 (0x0398 - 0x0350)
class USpecialActionWidget final : public UWidgetBase
{
public:
	class UTextBlock*                             _nameText;                                         // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FText                                   _noneNameText;                                     // 0x0358(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class UTextBlock*                             _infoText;                                         // 0x0370(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FText                                   _noneInfoText;                                     // 0x0378(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	int32                                         _specialActionIndex;                               // 0x0390(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_394[0x4];                                      // 0x0394(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpecialActionWidget">();
	}
	static class USpecialActionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpecialActionWidget>();
	}
};
static_assert(alignof(USpecialActionWidget) == 0x000008, "Wrong alignment on USpecialActionWidget");
static_assert(sizeof(USpecialActionWidget) == 0x000398, "Wrong size on USpecialActionWidget");
static_assert(offsetof(USpecialActionWidget, _nameText) == 0x000350, "Member 'USpecialActionWidget::_nameText' has a wrong offset!");
static_assert(offsetof(USpecialActionWidget, _noneNameText) == 0x000358, "Member 'USpecialActionWidget::_noneNameText' has a wrong offset!");
static_assert(offsetof(USpecialActionWidget, _infoText) == 0x000370, "Member 'USpecialActionWidget::_infoText' has a wrong offset!");
static_assert(offsetof(USpecialActionWidget, _noneInfoText) == 0x000378, "Member 'USpecialActionWidget::_noneInfoText' has a wrong offset!");
static_assert(offsetof(USpecialActionWidget, _specialActionIndex) == 0x000390, "Member 'USpecialActionWidget::_specialActionIndex' has a wrong offset!");

// Class GameModule.SquadJoinWidget
// 0x0140 (0x0490 - 0x0350)
class USquadJoinWidget : public UWidgetBase
{
public:
	FMulticastInlineDelegateProperty_             _onClosedDelegate;                                 // 0x0350(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UWidgetGeneralWindow*                   _selectMessageWindow;                              // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetGeneralWindow*                   _closeWindow;                                      // 0x0368(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   _leaderIsSquadJoinedTitleText;                     // 0x0370(0x0018)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FGeneralWindowText                     _leaderIsSquadJoinedLeftText;                      // 0x0388(0x0028)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FGeneralWindowText                     _leaderIsSquadJoinedRightText;                     // 0x03B0(0x0028)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FText                                   _memberIsSquadJoinedTitleText;                     // 0x03D8(0x0018)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FGeneralWindowText                     _memberIsSquadJoinedLeftText;                      // 0x03F0(0x0028)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FGeneralWindowText                     _memberIsSquadJoinedRightText;                     // 0x0418(0x0028)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FText                                   _joinErrorText;                                    // 0x0440(0x0018)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FString                                 _joinSquadId;                                      // 0x0458(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 _invitationId;                                     // 0x0468(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 _noticeId;                                         // 0x0478(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_488[0x8];                                      // 0x0488(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnClosedDelegate__DelegateSignature();
	void OnClosedWindow();
	void OnCloseLevel();
	void OnCloseMessageClosedWindow();
	void OnPlayerRequestErrorEvent(int32 RequestId, const class FName Key, const class FName Message);
	void OnSelectMessageClosedWindow();
	void OnSelectMessageCloseWindow(class UAppWidget* Widget, EWidgetInputType InputType, bool LeftButton);
	void OnSelectMessageDecideWindow(class UAppWidget* Widget, EWidgetInputType InputType, bool LeftButton);
	void OnSelectWindowSetting(bool Leader);
	void OnSystemErrorEvent(int32 RequestId, const class FName Key, const class FName Message);
	void OnTeamUpJoinByInvitationEvent();
	void OnTeamUpJoinEvent();
	void OnTeamUpLeaveEvent();
	void OnTeamUpUpdatedEvent();
	void OnUpdateCompleteEvent(int32 RequestId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SquadJoinWidget">();
	}
	static class USquadJoinWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USquadJoinWidget>();
	}
};
static_assert(alignof(USquadJoinWidget) == 0x000008, "Wrong alignment on USquadJoinWidget");
static_assert(sizeof(USquadJoinWidget) == 0x000490, "Wrong size on USquadJoinWidget");
static_assert(offsetof(USquadJoinWidget, _onClosedDelegate) == 0x000350, "Member 'USquadJoinWidget::_onClosedDelegate' has a wrong offset!");
static_assert(offsetof(USquadJoinWidget, _selectMessageWindow) == 0x000360, "Member 'USquadJoinWidget::_selectMessageWindow' has a wrong offset!");
static_assert(offsetof(USquadJoinWidget, _closeWindow) == 0x000368, "Member 'USquadJoinWidget::_closeWindow' has a wrong offset!");
static_assert(offsetof(USquadJoinWidget, _leaderIsSquadJoinedTitleText) == 0x000370, "Member 'USquadJoinWidget::_leaderIsSquadJoinedTitleText' has a wrong offset!");
static_assert(offsetof(USquadJoinWidget, _leaderIsSquadJoinedLeftText) == 0x000388, "Member 'USquadJoinWidget::_leaderIsSquadJoinedLeftText' has a wrong offset!");
static_assert(offsetof(USquadJoinWidget, _leaderIsSquadJoinedRightText) == 0x0003B0, "Member 'USquadJoinWidget::_leaderIsSquadJoinedRightText' has a wrong offset!");
static_assert(offsetof(USquadJoinWidget, _memberIsSquadJoinedTitleText) == 0x0003D8, "Member 'USquadJoinWidget::_memberIsSquadJoinedTitleText' has a wrong offset!");
static_assert(offsetof(USquadJoinWidget, _memberIsSquadJoinedLeftText) == 0x0003F0, "Member 'USquadJoinWidget::_memberIsSquadJoinedLeftText' has a wrong offset!");
static_assert(offsetof(USquadJoinWidget, _memberIsSquadJoinedRightText) == 0x000418, "Member 'USquadJoinWidget::_memberIsSquadJoinedRightText' has a wrong offset!");
static_assert(offsetof(USquadJoinWidget, _joinErrorText) == 0x000440, "Member 'USquadJoinWidget::_joinErrorText' has a wrong offset!");
static_assert(offsetof(USquadJoinWidget, _joinSquadId) == 0x000458, "Member 'USquadJoinWidget::_joinSquadId' has a wrong offset!");
static_assert(offsetof(USquadJoinWidget, _invitationId) == 0x000468, "Member 'USquadJoinWidget::_invitationId' has a wrong offset!");
static_assert(offsetof(USquadJoinWidget, _noticeId) == 0x000478, "Member 'USquadJoinWidget::_noticeId' has a wrong offset!");

// Class GameModule.SupplyArtInfoDataAsset
// 0x00F0 (0x0120 - 0x0030)
class USupplyArtInfoDataAsset final : public UPrimaryDataAsset
{
public:
	TMap<EMdAbilityType, struct FAbilityArtColorInfo> _abilityArtColorsInfo;                             // 0x0030(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<ESupplyType, struct FSupplyParticleColorInfo> _supplyArtColorsInfo;                              // 0x0080(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<ELeadersBattleTeamType, struct FLeadersTeamColorInfo> _leadersTeamColorsInfo;                            // 0x00D0(0x0050)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SupplyArtInfoDataAsset">();
	}
	static class USupplyArtInfoDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USupplyArtInfoDataAsset>();
	}
};
static_assert(alignof(USupplyArtInfoDataAsset) == 0x000008, "Wrong alignment on USupplyArtInfoDataAsset");
static_assert(sizeof(USupplyArtInfoDataAsset) == 0x000120, "Wrong size on USupplyArtInfoDataAsset");
static_assert(offsetof(USupplyArtInfoDataAsset, _abilityArtColorsInfo) == 0x000030, "Member 'USupplyArtInfoDataAsset::_abilityArtColorsInfo' has a wrong offset!");
static_assert(offsetof(USupplyArtInfoDataAsset, _supplyArtColorsInfo) == 0x000080, "Member 'USupplyArtInfoDataAsset::_supplyArtColorsInfo' has a wrong offset!");
static_assert(offsetof(USupplyArtInfoDataAsset, _leadersTeamColorsInfo) == 0x0000D0, "Member 'USupplyArtInfoDataAsset::_leadersTeamColorsInfo' has a wrong offset!");

// Class GameModule.StaticDataManager
// 0x01E0 (0x0208 - 0x0028)
class UStaticDataManager final : public UObject
{
public:
	TSoftObjectPtr<class UPrimaryAssetPermanent>  _permanentAsset;                                   // 0x0028(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UHudResource>            _hudResource;                                      // 0x0050(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UCurveVector>            _damageUICurve;                                    // 0x0078(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<EMdAbilityType, TSoftObjectPtr<class UCurveFloat>> _abilityCurveOnLevel;                              // 0x00A0(0x0050)(Edit, Config, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USupplyArtInfoDataAsset> _daSupplyArtColorInfo;                             // 0x00F0(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCurveFloat>             _treeFireMatFloatCurve;                            // 0x0118(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCurveFloat>             _treeFreezeMatFloatCurve;                          // 0x0140(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   _winnerOverheadWidgetComponent;                    // 0x0168(0x0028)(Edit, Config, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   _aiStatusWidgetComponent;                          // 0x0190(0x0028)(Edit, Config, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   _characterActingComponent;                         // 0x01B8(0x0028)(Edit, Config, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class USoundResource>          _soundResource;                                    // 0x01E0(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static struct FAbilityArtColorInfo GetAbilityArtColorInfo(EMdAbilityType AbilityType);
	static float GetAbilityDurationOnValue(const class UObject* WorldContextObject, EMdAbilityType AbilityType, int32 Level);
	static class UGimmickBaseDataAsset* GetGimmickDataAsset(const class UObject* WorldContextObject, class FName GimmickId);
	static class UHudResource* GetHudResourceDataAsset(const class UObject* WorldContextObject);
	static struct FLeadersTeamColorInfo GetLeadersTeamBorderColorInfo(ELeadersBattleTeamType TeamColor);
	static class UPrimaryAssetPermanent* GetPermanentDataAsset();
	static class USupplyBaseDataAsset* GetSupplyBaseDataAsset(const class UObject* WorldContextObject, class FName SupplyId);
	static class USupplyArtInfoDataAsset* GetSupplyParticleColorInfo();
	static void LoadHudResourceDataAsset(const class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StaticDataManager">();
	}
	static class UStaticDataManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStaticDataManager>();
	}
};
static_assert(alignof(UStaticDataManager) == 0x000008, "Wrong alignment on UStaticDataManager");
static_assert(sizeof(UStaticDataManager) == 0x000208, "Wrong size on UStaticDataManager");
static_assert(offsetof(UStaticDataManager, _permanentAsset) == 0x000028, "Member 'UStaticDataManager::_permanentAsset' has a wrong offset!");
static_assert(offsetof(UStaticDataManager, _hudResource) == 0x000050, "Member 'UStaticDataManager::_hudResource' has a wrong offset!");
static_assert(offsetof(UStaticDataManager, _damageUICurve) == 0x000078, "Member 'UStaticDataManager::_damageUICurve' has a wrong offset!");
static_assert(offsetof(UStaticDataManager, _abilityCurveOnLevel) == 0x0000A0, "Member 'UStaticDataManager::_abilityCurveOnLevel' has a wrong offset!");
static_assert(offsetof(UStaticDataManager, _daSupplyArtColorInfo) == 0x0000F0, "Member 'UStaticDataManager::_daSupplyArtColorInfo' has a wrong offset!");
static_assert(offsetof(UStaticDataManager, _treeFireMatFloatCurve) == 0x000118, "Member 'UStaticDataManager::_treeFireMatFloatCurve' has a wrong offset!");
static_assert(offsetof(UStaticDataManager, _treeFreezeMatFloatCurve) == 0x000140, "Member 'UStaticDataManager::_treeFreezeMatFloatCurve' has a wrong offset!");
static_assert(offsetof(UStaticDataManager, _winnerOverheadWidgetComponent) == 0x000168, "Member 'UStaticDataManager::_winnerOverheadWidgetComponent' has a wrong offset!");
static_assert(offsetof(UStaticDataManager, _aiStatusWidgetComponent) == 0x000190, "Member 'UStaticDataManager::_aiStatusWidgetComponent' has a wrong offset!");
static_assert(offsetof(UStaticDataManager, _characterActingComponent) == 0x0001B8, "Member 'UStaticDataManager::_characterActingComponent' has a wrong offset!");
static_assert(offsetof(UStaticDataManager, _soundResource) == 0x0001E0, "Member 'UStaticDataManager::_soundResource' has a wrong offset!");

// Class GameModule.SupplyBaseDataAsset
// 0x0068 (0x00C8 - 0x0060)
class USupplyBaseDataAsset : public UPrimaryAssetBase
{
public:
	EInteractActionType                           _interactActionType;                               // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _supplyId;                                         // 0x0064(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UPaperSprite>            _iconPaperSprite;                                  // 0x0070(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCurveLinearColor>       _fieldPopUpWidgetColorCurve;                       // 0x0098(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _maxStackNum;                                      // 0x00C0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESupplyType                                   _supplyType;                                       // 0x00C4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FText GetActionGuideText() const;
	class FText GetDescriptionText(const class UObject* WorldContext) const;
	class FText GetDisplayNameText() const;
	class UCurveLinearColor* GetFieldPopUpWidgetColorCurve() const;
	class UPaperSprite* GetIconPaperSprite() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SupplyBaseDataAsset">();
	}
	static class USupplyBaseDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USupplyBaseDataAsset>();
	}
};
static_assert(alignof(USupplyBaseDataAsset) == 0x000008, "Wrong alignment on USupplyBaseDataAsset");
static_assert(sizeof(USupplyBaseDataAsset) == 0x0000C8, "Wrong size on USupplyBaseDataAsset");
static_assert(offsetof(USupplyBaseDataAsset, _interactActionType) == 0x000060, "Member 'USupplyBaseDataAsset::_interactActionType' has a wrong offset!");
static_assert(offsetof(USupplyBaseDataAsset, _supplyId) == 0x000064, "Member 'USupplyBaseDataAsset::_supplyId' has a wrong offset!");
static_assert(offsetof(USupplyBaseDataAsset, _iconPaperSprite) == 0x000070, "Member 'USupplyBaseDataAsset::_iconPaperSprite' has a wrong offset!");
static_assert(offsetof(USupplyBaseDataAsset, _fieldPopUpWidgetColorCurve) == 0x000098, "Member 'USupplyBaseDataAsset::_fieldPopUpWidgetColorCurve' has a wrong offset!");
static_assert(offsetof(USupplyBaseDataAsset, _maxStackNum) == 0x0000C0, "Member 'USupplyBaseDataAsset::_maxStackNum' has a wrong offset!");
static_assert(offsetof(USupplyBaseDataAsset, _supplyType) == 0x0000C4, "Member 'USupplyBaseDataAsset::_supplyType' has a wrong offset!");

// Class GameModule.TeamCommentaryMessageItemWidget
// 0x0078 (0x03C8 - 0x0350)
class UTeamCommentaryMessageItemWidget : public UWidgetBase
{
public:
	FMulticastInlineDelegateProperty_             _onMessageClosedDelegate;                          // 0x0350(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMap<ETeamCommentaryMessage, class FText>     _textMessageMap;                                   // 0x0360(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UTextBlock*                             _textBlockMessage;                                 // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B8[0x10];                                     // 0x03B8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnDrawTimeout();
	void OnMessageClosedDelegate__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TeamCommentaryMessageItemWidget">();
	}
	static class UTeamCommentaryMessageItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTeamCommentaryMessageItemWidget>();
	}
};
static_assert(alignof(UTeamCommentaryMessageItemWidget) == 0x000008, "Wrong alignment on UTeamCommentaryMessageItemWidget");
static_assert(sizeof(UTeamCommentaryMessageItemWidget) == 0x0003C8, "Wrong size on UTeamCommentaryMessageItemWidget");
static_assert(offsetof(UTeamCommentaryMessageItemWidget, _onMessageClosedDelegate) == 0x000350, "Member 'UTeamCommentaryMessageItemWidget::_onMessageClosedDelegate' has a wrong offset!");
static_assert(offsetof(UTeamCommentaryMessageItemWidget, _textMessageMap) == 0x000360, "Member 'UTeamCommentaryMessageItemWidget::_textMessageMap' has a wrong offset!");
static_assert(offsetof(UTeamCommentaryMessageItemWidget, _textBlockMessage) == 0x0003B0, "Member 'UTeamCommentaryMessageItemWidget::_textBlockMessage' has a wrong offset!");

// Class GameModule.TeamCommentaryMessageWidget
// 0x0030 (0x0380 - 0x0350)
class UTeamCommentaryMessageWidget : public UWidgetBase
{
public:
	TSubclassOf<class UUserWidget>                _messageBaseWidget;                                // 0x0350(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UVerticalBox*                           _messageItemBox;                                   // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_360[0x20];                                     // 0x0360(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnChangeBattleSequence(EBattleStartSequenceType Sequence);
	void OnNoticeUpdatedEvent(int32 Num);
	void OnRequestMessage(ETeamCommentaryMessage MessageType);
	void OnSquadNumChanged(int32 SquadNum);
	void OnTeamUpUpdatedEvent();
	void SetMessageEnable(bool Enable);
	void UpdateRequestId(int32 RequestId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TeamCommentaryMessageWidget">();
	}
	static class UTeamCommentaryMessageWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTeamCommentaryMessageWidget>();
	}
};
static_assert(alignof(UTeamCommentaryMessageWidget) == 0x000008, "Wrong alignment on UTeamCommentaryMessageWidget");
static_assert(sizeof(UTeamCommentaryMessageWidget) == 0x000380, "Wrong size on UTeamCommentaryMessageWidget");
static_assert(offsetof(UTeamCommentaryMessageWidget, _messageBaseWidget) == 0x000350, "Member 'UTeamCommentaryMessageWidget::_messageBaseWidget' has a wrong offset!");
static_assert(offsetof(UTeamCommentaryMessageWidget, _messageItemBox) == 0x000358, "Member 'UTeamCommentaryMessageWidget::_messageItemBox' has a wrong offset!");

// Class GameModule.TextChatButtonGuide
// 0x0020 (0x0370 - 0x0350)
class UTextChatButtonGuide : public UWidgetBase
{
public:
	class UPlatformRichTextBlock*                 _buttonGuide;                                      // 0x0350(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 _holdGauge;                                        // 0x0358(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         _optionBox;                                        // 0x0360(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextChatIcon*                          _iconImage;                                        // 0x0368(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BP_PlayMessageAnimation();
	void PlayMessageAnimation();
	void SetGaugePercent(float Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TextChatButtonGuide">();
	}
	static class UTextChatButtonGuide* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextChatButtonGuide>();
	}
};
static_assert(alignof(UTextChatButtonGuide) == 0x000008, "Wrong alignment on UTextChatButtonGuide");
static_assert(sizeof(UTextChatButtonGuide) == 0x000370, "Wrong size on UTextChatButtonGuide");
static_assert(offsetof(UTextChatButtonGuide, _buttonGuide) == 0x000350, "Member 'UTextChatButtonGuide::_buttonGuide' has a wrong offset!");
static_assert(offsetof(UTextChatButtonGuide, _holdGauge) == 0x000358, "Member 'UTextChatButtonGuide::_holdGauge' has a wrong offset!");
static_assert(offsetof(UTextChatButtonGuide, _optionBox) == 0x000360, "Member 'UTextChatButtonGuide::_optionBox' has a wrong offset!");
static_assert(offsetof(UTextChatButtonGuide, _iconImage) == 0x000368, "Member 'UTextChatButtonGuide::_iconImage' has a wrong offset!");

// Class GameModule.TextChatEntryWidget
// 0x0010 (0x0360 - 0x0350)
class UTextChatEntryWidget : public UWidgetBase
{
public:
	uint8                                         Pad_350[0x10];                                     // 0x0350(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TextChatEntryWidget">();
	}
	static class UTextChatEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextChatEntryWidget>();
	}
};
static_assert(alignof(UTextChatEntryWidget) == 0x000008, "Wrong alignment on UTextChatEntryWidget");
static_assert(sizeof(UTextChatEntryWidget) == 0x000360, "Wrong size on UTextChatEntryWidget");

// Class GameModule.TextChatIcon
// 0x0040 (0x0390 - 0x0350)
class UTextChatIcon : public UWidgetBase
{
public:
	FMulticastInlineDelegateProperty_             _UpdateArray;                                      // 0x0350(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_360[0x18];                                     // 0x0360(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 _icon;                                             // 0x0378(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 _notice;                                           // 0x0380(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       _anim_reception;                                   // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void BP_PlayMessageAnimation();
	void BP_SetNoticeVisibility(ESlateVisibility Value);
	void BP_StartAnimation();
	void BP_StopAnimation();
	void BP_StopMessageAnimation();
	void LoopAnimation(const float DeltaTime);
	void PlayMessageAnimation();
	void SetNoticeVisibility(ESlateVisibility Value);
	void StopMessageAnimation();
	void TickDelegate__DelegateSignature(const float DeltaTime);
	void UpdateArray();
	void UpdateArrayEvent__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TextChatIcon">();
	}
	static class UTextChatIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextChatIcon>();
	}
};
static_assert(alignof(UTextChatIcon) == 0x000008, "Wrong alignment on UTextChatIcon");
static_assert(sizeof(UTextChatIcon) == 0x000390, "Wrong size on UTextChatIcon");
static_assert(offsetof(UTextChatIcon, _UpdateArray) == 0x000350, "Member 'UTextChatIcon::_UpdateArray' has a wrong offset!");
static_assert(offsetof(UTextChatIcon, _icon) == 0x000378, "Member 'UTextChatIcon::_icon' has a wrong offset!");
static_assert(offsetof(UTextChatIcon, _notice) == 0x000380, "Member 'UTextChatIcon::_notice' has a wrong offset!");
static_assert(offsetof(UTextChatIcon, _anim_reception) == 0x000388, "Member 'UTextChatIcon::_anim_reception' has a wrong offset!");

// Class GameModule.TextChatIconAnker
// 0x0008 (0x0358 - 0x0350)
class UTextChatIconAnker final : public UWidgetBase
{
public:
	struct FVector2D                              _pos;                                              // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetIconPosition();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TextChatIconAnker">();
	}
	static class UTextChatIconAnker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextChatIconAnker>();
	}
};
static_assert(alignof(UTextChatIconAnker) == 0x000008, "Wrong alignment on UTextChatIconAnker");
static_assert(sizeof(UTextChatIconAnker) == 0x000358, "Wrong size on UTextChatIconAnker");
static_assert(offsetof(UTextChatIconAnker, _pos) == 0x000350, "Member 'UTextChatIconAnker::_pos' has a wrong offset!");

// Class GameModule.TextChatListObject
// 0x0038 (0x0060 - 0x0028)
class UTextChatListObject final : public UObject
{
public:
	uint8                                         Pad_28[0x38];                                      // 0x0028(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool BP_GetAlreadyRead();
	void BP_SetAlreadyRead(bool Value);
	void BP_SetItemText(const class FString& PlayerId, const class FString& DisplayName, const class FString& Text);
	void BP_SetPlayEntryAnimation(bool IsPlayedAnimation);

	const class FString BP_GetDisplayName() const;
	const class FString BP_GetItemText() const;
	bool BP_GetPlayedEntryAnimation() const;
	const class FString BP_getPlayerId() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TextChatListObject">();
	}
	static class UTextChatListObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextChatListObject>();
	}
};
static_assert(alignof(UTextChatListObject) == 0x000008, "Wrong alignment on UTextChatListObject");
static_assert(sizeof(UTextChatListObject) == 0x000060, "Wrong size on UTextChatListObject");

// Class GameModule.TextChatListWidget
// 0x0050 (0x03A0 - 0x0350)
class UTextChatListWidget : public UWidgetBase
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             _textChatRecieveEvent;                             // 0x0358(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _textChatIconEvent;                                // 0x0368(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class UTextChatListObject*>            _UnreadObjects;                                    // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_388[0x10];                                     // 0x0388(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomListView*                        _chatList;                                         // 0x0398(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BP_AddNewTextItem(const class FText& Text);
	void BP_CallTextChatIconEvent();
	void BP_CallTextChatRecieveEvent(const class UTextChatListObject* ChatObject);
	void BP_CheckUnreadMessage(class UTextChatListObject* Message);
	bool BP_IsUnreadMessage();
	void BP_ManagementChatItems();
	void ClearEvent();
	float GetScrollSpeedRate(float AnalogValue, float DefaultSpeedRate, float MaxSpeedRate, float AddSpeedRate);
	void ScrollBottom();
	void TextChatIconEvent__DelegateSignature();
	void TextChatRecieveEvent__DelegateSignature(const class UTextChatListObject* ChatObject);
	void UpdateList();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TextChatListWidget">();
	}
	static class UTextChatListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextChatListWidget>();
	}
};
static_assert(alignof(UTextChatListWidget) == 0x000008, "Wrong alignment on UTextChatListWidget");
static_assert(sizeof(UTextChatListWidget) == 0x0003A0, "Wrong size on UTextChatListWidget");
static_assert(offsetof(UTextChatListWidget, _textChatRecieveEvent) == 0x000358, "Member 'UTextChatListWidget::_textChatRecieveEvent' has a wrong offset!");
static_assert(offsetof(UTextChatListWidget, _textChatIconEvent) == 0x000368, "Member 'UTextChatListWidget::_textChatIconEvent' has a wrong offset!");
static_assert(offsetof(UTextChatListWidget, _UnreadObjects) == 0x000378, "Member 'UTextChatListWidget::_UnreadObjects' has a wrong offset!");
static_assert(offsetof(UTextChatListWidget, _chatList) == 0x000398, "Member 'UTextChatListWidget::_chatList' has a wrong offset!");

// Class GameModule.TextChatSubsystem
// 0x0090 (0x00C0 - 0x0030)
class UTextChatSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UWidgetBase>                _textChatWidgetClass;                              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48[0x60];                                      // 0x0048(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTextChatListObject*>            _teamUpObjects;                                    // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_AgreeFreeTextInput();
	class UTextChatWidget* BP_GetTextChatWidget();
	bool BP_IsAgreeFreeTextInput();
	void BP_WindowClose(bool Value);
	void BP_WindowOpen();
	void ChangeGameOptionConfiguration();
	void ChangeGameOptionGamePlay();
	void ChangeGameOptionVideo();
	void CheckBlockMember(int32 SquadNum);
	void ClearFocus();
	void ClearTextBox();
	void CreateTextChat();
	bool GetActiveTextInput();
	bool GetEnableIngameOpenChat();
	bool GetIsAnimationFinishCollapsed();
	ESlateVisibility GetVisibilityTextChatWidget();
	void HideIngameChat(bool _isHide);
	bool IsRecieveBlockMessage(const class FString& MessageUser);
	void SetActiveTextInput(bool Input);
	void SetEnableIngameOpenChat(bool Value);
	void SetIngameWindowOpenFlag(bool Flag);
	void SetIsAnimationFinishCollapsed(bool Value);
	void SetVisibilityButtonIcon(ESlateVisibility balue);
	void SetVisibilityTextChatWidget(ESlateVisibility Visibility);

	bool BP_GetVisibleNewMessage() const;
	bool GetHasBlockUser() const;
	bool GetIngameWindowOpenFlag() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TextChatSubsystem">();
	}
	static class UTextChatSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextChatSubsystem>();
	}
};
static_assert(alignof(UTextChatSubsystem) == 0x000008, "Wrong alignment on UTextChatSubsystem");
static_assert(sizeof(UTextChatSubsystem) == 0x0000C0, "Wrong size on UTextChatSubsystem");
static_assert(offsetof(UTextChatSubsystem, _textChatWidgetClass) == 0x000040, "Member 'UTextChatSubsystem::_textChatWidgetClass' has a wrong offset!");
static_assert(offsetof(UTextChatSubsystem, _teamUpObjects) == 0x0000A8, "Member 'UTextChatSubsystem::_teamUpObjects' has a wrong offset!");

// Class GameModule.TextChatWidget
// 0x0020 (0x0370 - 0x0350)
class UTextChatWidget : public UWidgetBase
{
public:
	bool                                          _bOpenWindow;                                      // 0x0350(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_351[0x7];                                      // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextChatWindowWidget*                  _textChatWindow;                                   // 0x0358(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextChatButtonGuide*                   _textChatButtonGuide;                              // 0x0360(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanel*                           _messagePanel;                                     // 0x0368(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void BP_ChangeIconPosition(ETextChatLevelType LevelNam, const class FString& LevelName);
	void BP_SetNoticeVisibility(ESlateVisibility Value);
	class UTextChatIcon* GetChatIcon();
	void SetNoticeVisibility(ESlateVisibility Value);
	void SetValueButtonGuide(float Value);
	void SetVisibilityMessageCanvas();
	void WindowClose(bool bPlaySound);
	void WindowOpen(bool bPlaySound);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TextChatWidget">();
	}
	static class UTextChatWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextChatWidget>();
	}
};
static_assert(alignof(UTextChatWidget) == 0x000008, "Wrong alignment on UTextChatWidget");
static_assert(sizeof(UTextChatWidget) == 0x000370, "Wrong size on UTextChatWidget");
static_assert(offsetof(UTextChatWidget, _bOpenWindow) == 0x000350, "Member 'UTextChatWidget::_bOpenWindow' has a wrong offset!");
static_assert(offsetof(UTextChatWidget, _textChatWindow) == 0x000358, "Member 'UTextChatWidget::_textChatWindow' has a wrong offset!");
static_assert(offsetof(UTextChatWidget, _textChatButtonGuide) == 0x000360, "Member 'UTextChatWidget::_textChatButtonGuide' has a wrong offset!");
static_assert(offsetof(UTextChatWidget, _messagePanel) == 0x000368, "Member 'UTextChatWidget::_messagePanel' has a wrong offset!");

// Class GameModule.TextChatWindowWidget
// 0x0118 (0x0468 - 0x0350)
class UTextChatWindowWidget : public UWidgetBase
{
public:
	float                                         _animationSpeed;                                   // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_354[0x4];                                      // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       _animOpen;                                         // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       _animClose;                                        // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       _currentPlayAnimation;                             // 0x0368(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             _OnEventDispather;                                 // 0x0370(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _OnOpenConsentEventDispather;                      // 0x0380(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _OnCloseConsentEventDispather;                     // 0x0390(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UCanvasPanel*                           _chatIcon;                                         // 0x03A0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _onBGVisiblitySetEvent;                            // 0x03A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _onBGHiddenSetEvent;                               // 0x03B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _onOpenParentalControlEventDispather;              // 0x03C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          _bOpenWindow;                                      // 0x03D8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bIsConsentOpen;                                   // 0x03D9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3DA[0x36];                                     // 0x03DA(0x0036)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlatformWidgetButton*                  _iconButton;                                       // 0x0410(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlatformWidgetButton*                  _dummyButton;                                      // 0x0418(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextChatListWidget*                    _teamTextChatList;                                 // 0x0420(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextChatIcon*                          _iconImage;                                        // 0x0428(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlatformRichTextBlock*                 _inputIcon;                                        // 0x0430(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPlatformRichTextBlock*                 _closeIcon;                                        // 0x0438(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         _buttonGuideBox;                                   // 0x0440(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                           _textWindow;                                       // 0x0448(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                           _focusPanel;                                       // 0x0450(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCustomInputTextBox*                    _inputTextBox;                                     // 0x0458(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _wheelScrollSpeed;                                 // 0x0460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _scrollSpeed;                                      // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void AnimStart(class UWidgetAnimation* Anim);
	void BP_CallCloseConsentEvent();
	void BP_CallFinishEvent();
	void BP_CallHiddenEventDispatcher();
	void BP_CallOpenConsentEvent();
	void BP_CallOpenParentalControlEvent();
	void BP_CallVisibleEventDispatcher();
	void BP_ChangeColor(const struct FSlateBrush& Brush);
	void BP_ChangeIconLocation(ETextChatLevelType Type, const class FString& LevelName);
	bool BP_CheckParentControl();
	void BP_ClearFocus();
	void BP_PlayCloseAnimation();
	void BP_PlayOpenAnimation();
	void BP_SetActiveFocus(bool IsFocusable);
	void BP_SetActiveSendButton(bool IsSendable);
	void BP_SetActiveTextInput(bool Input);
	void BP_SetFocusInputTextBox();
	void BP_SetNoticeVisibility(ESlateVisibility Value);
	void BP_WindowClose(bool bPlaySound);
	void BP_WindowOpen(bool bPlaySound);
	void ChangeControllerEvent();
	void ClearText();
	void CloseChatWindowDispather__DelegateSignature();
	void CloseConsentDispather__DelegateSignature();
	class UTextChatIcon* GetChatIcon();
	void OnCommitChangeText(bool IsEmpty, bool _isFirstFocus);
	void OpenConsentDispather__DelegateSignature();
	void OpenParentalControlDispather__DelegateSignature();
	void SetActiveFocus(bool IsFocusable);
	void SetActiveSendButton(bool IsSendable);
	void SetActiveTextInput(bool Input);
	void SetFocusInputTextBox();
	void SetNoticeVisibility(ESlateVisibility Value);
	void SetUpIconPosition();
	void VisibleEventDispather__DelegateSignature();
	void WindowClose(bool bPlaySound);
	void WindowOpen(bool bPlaySound);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TextChatWindowWidget">();
	}
	static class UTextChatWindowWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextChatWindowWidget>();
	}
};
static_assert(alignof(UTextChatWindowWidget) == 0x000008, "Wrong alignment on UTextChatWindowWidget");
static_assert(sizeof(UTextChatWindowWidget) == 0x000468, "Wrong size on UTextChatWindowWidget");
static_assert(offsetof(UTextChatWindowWidget, _animationSpeed) == 0x000350, "Member 'UTextChatWindowWidget::_animationSpeed' has a wrong offset!");
static_assert(offsetof(UTextChatWindowWidget, _animOpen) == 0x000358, "Member 'UTextChatWindowWidget::_animOpen' has a wrong offset!");
static_assert(offsetof(UTextChatWindowWidget, _animClose) == 0x000360, "Member 'UTextChatWindowWidget::_animClose' has a wrong offset!");
static_assert(offsetof(UTextChatWindowWidget, _currentPlayAnimation) == 0x000368, "Member 'UTextChatWindowWidget::_currentPlayAnimation' has a wrong offset!");
static_assert(offsetof(UTextChatWindowWidget, _OnEventDispather) == 0x000370, "Member 'UTextChatWindowWidget::_OnEventDispather' has a wrong offset!");
static_assert(offsetof(UTextChatWindowWidget, _OnOpenConsentEventDispather) == 0x000380, "Member 'UTextChatWindowWidget::_OnOpenConsentEventDispather' has a wrong offset!");
static_assert(offsetof(UTextChatWindowWidget, _OnCloseConsentEventDispather) == 0x000390, "Member 'UTextChatWindowWidget::_OnCloseConsentEventDispather' has a wrong offset!");
static_assert(offsetof(UTextChatWindowWidget, _chatIcon) == 0x0003A0, "Member 'UTextChatWindowWidget::_chatIcon' has a wrong offset!");
static_assert(offsetof(UTextChatWindowWidget, _onBGVisiblitySetEvent) == 0x0003A8, "Member 'UTextChatWindowWidget::_onBGVisiblitySetEvent' has a wrong offset!");
static_assert(offsetof(UTextChatWindowWidget, _onBGHiddenSetEvent) == 0x0003B8, "Member 'UTextChatWindowWidget::_onBGHiddenSetEvent' has a wrong offset!");
static_assert(offsetof(UTextChatWindowWidget, _onOpenParentalControlEventDispather) == 0x0003C8, "Member 'UTextChatWindowWidget::_onOpenParentalControlEventDispather' has a wrong offset!");
static_assert(offsetof(UTextChatWindowWidget, _bOpenWindow) == 0x0003D8, "Member 'UTextChatWindowWidget::_bOpenWindow' has a wrong offset!");
static_assert(offsetof(UTextChatWindowWidget, _bIsConsentOpen) == 0x0003D9, "Member 'UTextChatWindowWidget::_bIsConsentOpen' has a wrong offset!");
static_assert(offsetof(UTextChatWindowWidget, _iconButton) == 0x000410, "Member 'UTextChatWindowWidget::_iconButton' has a wrong offset!");
static_assert(offsetof(UTextChatWindowWidget, _dummyButton) == 0x000418, "Member 'UTextChatWindowWidget::_dummyButton' has a wrong offset!");
static_assert(offsetof(UTextChatWindowWidget, _teamTextChatList) == 0x000420, "Member 'UTextChatWindowWidget::_teamTextChatList' has a wrong offset!");
static_assert(offsetof(UTextChatWindowWidget, _iconImage) == 0x000428, "Member 'UTextChatWindowWidget::_iconImage' has a wrong offset!");
static_assert(offsetof(UTextChatWindowWidget, _inputIcon) == 0x000430, "Member 'UTextChatWindowWidget::_inputIcon' has a wrong offset!");
static_assert(offsetof(UTextChatWindowWidget, _closeIcon) == 0x000438, "Member 'UTextChatWindowWidget::_closeIcon' has a wrong offset!");
static_assert(offsetof(UTextChatWindowWidget, _buttonGuideBox) == 0x000440, "Member 'UTextChatWindowWidget::_buttonGuideBox' has a wrong offset!");
static_assert(offsetof(UTextChatWindowWidget, _textWindow) == 0x000448, "Member 'UTextChatWindowWidget::_textWindow' has a wrong offset!");
static_assert(offsetof(UTextChatWindowWidget, _focusPanel) == 0x000450, "Member 'UTextChatWindowWidget::_focusPanel' has a wrong offset!");
static_assert(offsetof(UTextChatWindowWidget, _inputTextBox) == 0x000458, "Member 'UTextChatWindowWidget::_inputTextBox' has a wrong offset!");
static_assert(offsetof(UTextChatWindowWidget, _wheelScrollSpeed) == 0x000460, "Member 'UTextChatWindowWidget::_wheelScrollSpeed' has a wrong offset!");
static_assert(offsetof(UTextChatWindowWidget, _scrollSpeed) == 0x000464, "Member 'UTextChatWindowWidget::_scrollSpeed' has a wrong offset!");

// Class GameModule.TimeWidget
// 0x0090 (0x03E0 - 0x0350)
class UTimeWidget : public UWidgetBase
{
public:
	class UTextBlock*                             _timeTextBlock;                                    // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAdjustTextWidget*                      _timeAdjustTextWidget;                             // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   _dayTextFormat;                                    // 0x0360(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   _weekDayTextFormat;                                // 0x0378(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   _hoursTextFormat;                                  // 0x0390(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   _minutesTextFormat;                                // 0x03A8(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   _secondsTextFormat;                                // 0x03C0(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bHiddenSeconds;                                    // 0x03D8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3D9[0x7];                                      // 0x03D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_UpdateTimeView(const struct FTimespan& RemainingTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TimeWidget">();
	}
	static class UTimeWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTimeWidget>();
	}
};
static_assert(alignof(UTimeWidget) == 0x000008, "Wrong alignment on UTimeWidget");
static_assert(sizeof(UTimeWidget) == 0x0003E0, "Wrong size on UTimeWidget");
static_assert(offsetof(UTimeWidget, _timeTextBlock) == 0x000350, "Member 'UTimeWidget::_timeTextBlock' has a wrong offset!");
static_assert(offsetof(UTimeWidget, _timeAdjustTextWidget) == 0x000358, "Member 'UTimeWidget::_timeAdjustTextWidget' has a wrong offset!");
static_assert(offsetof(UTimeWidget, _dayTextFormat) == 0x000360, "Member 'UTimeWidget::_dayTextFormat' has a wrong offset!");
static_assert(offsetof(UTimeWidget, _weekDayTextFormat) == 0x000378, "Member 'UTimeWidget::_weekDayTextFormat' has a wrong offset!");
static_assert(offsetof(UTimeWidget, _hoursTextFormat) == 0x000390, "Member 'UTimeWidget::_hoursTextFormat' has a wrong offset!");
static_assert(offsetof(UTimeWidget, _minutesTextFormat) == 0x0003A8, "Member 'UTimeWidget::_minutesTextFormat' has a wrong offset!");
static_assert(offsetof(UTimeWidget, _secondsTextFormat) == 0x0003C0, "Member 'UTimeWidget::_secondsTextFormat' has a wrong offset!");
static_assert(offsetof(UTimeWidget, bHiddenSeconds) == 0x0003D8, "Member 'UTimeWidget::bHiddenSeconds' has a wrong offset!");

// Class GameModule.TranslationWidget
// 0x0140 (0x0490 - 0x0350)
class UTranslationWidget final : public UWidgetBase
{
public:
	TMap<EMdLocalization, class FText>            _translationList;                                  // 0x0350(0x0050)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   _localizeText;                                     // 0x03A0(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	float                                         _spaceSize;                                        // 0x03B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3BC[0x4];                                      // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         _mainTextFont;                                     // 0x03C0(0x0058)(Edit, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateFontInfo                         _subTextFont;                                      // 0x0418(0x0058)(Edit, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bLayoutKeep;                                      // 0x0470(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_471[0x7];                                      // 0x0471(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAdjustTextWidget*                      _mainTextWidget;                                   // 0x0478(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAdjustTextWidget*                      _subTextWidget;                                    // 0x0480(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USpacer*                                _spacer;                                           // 0x0488(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TranslationWidget">();
	}
	static class UTranslationWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTranslationWidget>();
	}
};
static_assert(alignof(UTranslationWidget) == 0x000008, "Wrong alignment on UTranslationWidget");
static_assert(sizeof(UTranslationWidget) == 0x000490, "Wrong size on UTranslationWidget");
static_assert(offsetof(UTranslationWidget, _translationList) == 0x000350, "Member 'UTranslationWidget::_translationList' has a wrong offset!");
static_assert(offsetof(UTranslationWidget, _localizeText) == 0x0003A0, "Member 'UTranslationWidget::_localizeText' has a wrong offset!");
static_assert(offsetof(UTranslationWidget, _spaceSize) == 0x0003B8, "Member 'UTranslationWidget::_spaceSize' has a wrong offset!");
static_assert(offsetof(UTranslationWidget, _mainTextFont) == 0x0003C0, "Member 'UTranslationWidget::_mainTextFont' has a wrong offset!");
static_assert(offsetof(UTranslationWidget, _subTextFont) == 0x000418, "Member 'UTranslationWidget::_subTextFont' has a wrong offset!");
static_assert(offsetof(UTranslationWidget, _bLayoutKeep) == 0x000470, "Member 'UTranslationWidget::_bLayoutKeep' has a wrong offset!");
static_assert(offsetof(UTranslationWidget, _mainTextWidget) == 0x000478, "Member 'UTranslationWidget::_mainTextWidget' has a wrong offset!");
static_assert(offsetof(UTranslationWidget, _subTextWidget) == 0x000480, "Member 'UTranslationWidget::_subTextWidget' has a wrong offset!");
static_assert(offsetof(UTranslationWidget, _spacer) == 0x000488, "Member 'UTranslationWidget::_spacer' has a wrong offset!");

// Class GameModule.TutorialMessageWidget
// 0x0008 (0x03F0 - 0x03E8)
class UTutorialMessageWidget final : public UAppWidget
{
public:
	class URichTextBlock*                         _messageRichText;                                  // 0x03E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ChangeSizeTutorialMessageWindow(bool Condition);
	void SetTutorialMessageWidget(const class FText& Message);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TutorialMessageWidget">();
	}
	static class UTutorialMessageWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTutorialMessageWidget>();
	}
};
static_assert(alignof(UTutorialMessageWidget) == 0x000008, "Wrong alignment on UTutorialMessageWidget");
static_assert(sizeof(UTutorialMessageWidget) == 0x0003F0, "Wrong size on UTutorialMessageWidget");
static_assert(offsetof(UTutorialMessageWidget, _messageRichText) == 0x0003E8, "Member 'UTutorialMessageWidget::_messageRichText' has a wrong offset!");

// Class GameModule.TutorialTipsImageWidget
// 0x0010 (0x03F8 - 0x03E8)
class UTutorialTipsImageWidget final : public UAppWidget
{
public:
	class UTutorialTipsWidget*                    _tutorialTipsWidget;                               // 0x03E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetSwitcher*                        _imageSwitcher;                                    // 0x03F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnReceivedChangedImageIndexEvent(int32 Index_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TutorialTipsImageWidget">();
	}
	static class UTutorialTipsImageWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTutorialTipsImageWidget>();
	}
};
static_assert(alignof(UTutorialTipsImageWidget) == 0x000008, "Wrong alignment on UTutorialTipsImageWidget");
static_assert(sizeof(UTutorialTipsImageWidget) == 0x0003F8, "Wrong size on UTutorialTipsImageWidget");
static_assert(offsetof(UTutorialTipsImageWidget, _tutorialTipsWidget) == 0x0003E8, "Member 'UTutorialTipsImageWidget::_tutorialTipsWidget' has a wrong offset!");
static_assert(offsetof(UTutorialTipsImageWidget, _imageSwitcher) == 0x0003F0, "Member 'UTutorialTipsImageWidget::_imageSwitcher' has a wrong offset!");

// Class GameModule.TutorialTipsWidget
// 0x00B0 (0x0498 - 0x03E8)
class UTutorialTipsWidget final : public UAppWidget
{
public:
	class UTileView*                              _buttonTileView;                                   // 0x03E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetSwitcher*                        _buttonSwitcher;                                   // 0x03F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetButton*                          _closeButton;                                      // 0x03F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetButton*                          _nextButton;                                       // 0x0400(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetButton*                          _leftButton;                                       // 0x0408(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetButton*                          _rightButton;                                      // 0x0410(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             _titleMessageWidget;                               // 0x0418(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTutorialMessageWidget*                 _messageWidget;                                    // 0x0420(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetGeneralEmptyWindow*              _emptyWindow;                                      // 0x0428(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNamedSlot*                             _imageSlot;                                        // 0x0430(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   _titleMessage;                                     // 0x0438(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          _bDisplayTitleMessageWidget;                       // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_451[0x7];                                      // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   _message;                                          // 0x0458(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          _bDisplayMessageWidget;                            // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bRequesetVoice;                                   // 0x0471(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_472[0x6];                                      // 0x0472(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnChangedImageIndexDelegate;                       // 0x0478(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_488[0x10];                                     // 0x0488(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnReceivedCloseButtonDecidedEvent(class UAppWidget* Widget, EWidgetInputType InputType);
	void HideRightLeftButton();
	void NextButtonTileView(const bool NotMaxNext);
	void OnChangeBattleSequence(EBattleStartSequenceType Sequence);
	void OnChangedImageIndexDelegate__DelegateSignature(int32 Index_0);
	void OnChangeLevel(class ULevel* Level_p, class UWorld* World_p);
	void OnReceivedCloseButtonDecidedEvent(class UAppWidget* Widget, EWidgetInputType InputType);
	void OnReceivedClosedEmptyWindowEvent();
	void OnReceivedOpenedEmptyWindowEvent();
	void OnReceivedOpenedEmptyWindowEventAutoPlay();
	void PrevButtonTileView(const bool NotMinPrev);
	TArray<class FString> SplitStringByCarriageReturn(const class FString& Message);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TutorialTipsWidget">();
	}
	static class UTutorialTipsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTutorialTipsWidget>();
	}
};
static_assert(alignof(UTutorialTipsWidget) == 0x000008, "Wrong alignment on UTutorialTipsWidget");
static_assert(sizeof(UTutorialTipsWidget) == 0x000498, "Wrong size on UTutorialTipsWidget");
static_assert(offsetof(UTutorialTipsWidget, _buttonTileView) == 0x0003E8, "Member 'UTutorialTipsWidget::_buttonTileView' has a wrong offset!");
static_assert(offsetof(UTutorialTipsWidget, _buttonSwitcher) == 0x0003F0, "Member 'UTutorialTipsWidget::_buttonSwitcher' has a wrong offset!");
static_assert(offsetof(UTutorialTipsWidget, _closeButton) == 0x0003F8, "Member 'UTutorialTipsWidget::_closeButton' has a wrong offset!");
static_assert(offsetof(UTutorialTipsWidget, _nextButton) == 0x000400, "Member 'UTutorialTipsWidget::_nextButton' has a wrong offset!");
static_assert(offsetof(UTutorialTipsWidget, _leftButton) == 0x000408, "Member 'UTutorialTipsWidget::_leftButton' has a wrong offset!");
static_assert(offsetof(UTutorialTipsWidget, _rightButton) == 0x000410, "Member 'UTutorialTipsWidget::_rightButton' has a wrong offset!");
static_assert(offsetof(UTutorialTipsWidget, _titleMessageWidget) == 0x000418, "Member 'UTutorialTipsWidget::_titleMessageWidget' has a wrong offset!");
static_assert(offsetof(UTutorialTipsWidget, _messageWidget) == 0x000420, "Member 'UTutorialTipsWidget::_messageWidget' has a wrong offset!");
static_assert(offsetof(UTutorialTipsWidget, _emptyWindow) == 0x000428, "Member 'UTutorialTipsWidget::_emptyWindow' has a wrong offset!");
static_assert(offsetof(UTutorialTipsWidget, _imageSlot) == 0x000430, "Member 'UTutorialTipsWidget::_imageSlot' has a wrong offset!");
static_assert(offsetof(UTutorialTipsWidget, _titleMessage) == 0x000438, "Member 'UTutorialTipsWidget::_titleMessage' has a wrong offset!");
static_assert(offsetof(UTutorialTipsWidget, _bDisplayTitleMessageWidget) == 0x000450, "Member 'UTutorialTipsWidget::_bDisplayTitleMessageWidget' has a wrong offset!");
static_assert(offsetof(UTutorialTipsWidget, _message) == 0x000458, "Member 'UTutorialTipsWidget::_message' has a wrong offset!");
static_assert(offsetof(UTutorialTipsWidget, _bDisplayMessageWidget) == 0x000470, "Member 'UTutorialTipsWidget::_bDisplayMessageWidget' has a wrong offset!");
static_assert(offsetof(UTutorialTipsWidget, _bRequesetVoice) == 0x000471, "Member 'UTutorialTipsWidget::_bRequesetVoice' has a wrong offset!");
static_assert(offsetof(UTutorialTipsWidget, OnChangedImageIndexDelegate) == 0x000478, "Member 'UTutorialTipsWidget::OnChangedImageIndexDelegate' has a wrong offset!");

// Class GameModule.UMGTemporaryNotification
// 0x0040 (0x0390 - 0x0350)
class UUMGTemporaryNotification final : public UWidgetBase
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _lifeTime;                                         // 0x0358(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_35C[0x4];                                      // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Ani_Notification;                                  // 0x0360(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_368[0x28];                                     // 0x0368(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Activate();
	void Deactivate();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UMGTemporaryNotification">();
	}
	static class UUMGTemporaryNotification* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUMGTemporaryNotification>();
	}
};
static_assert(alignof(UUMGTemporaryNotification) == 0x000008, "Wrong alignment on UUMGTemporaryNotification");
static_assert(sizeof(UUMGTemporaryNotification) == 0x000390, "Wrong size on UUMGTemporaryNotification");
static_assert(offsetof(UUMGTemporaryNotification, _lifeTime) == 0x000358, "Member 'UUMGTemporaryNotification::_lifeTime' has a wrong offset!");
static_assert(offsetof(UUMGTemporaryNotification, Ani_Notification) == 0x000360, "Member 'UUMGTemporaryNotification::Ani_Notification' has a wrong offset!");

// Class GameModule.WaitNetworkAnimationWidget
// 0x0000 (0x0350 - 0x0350)
class UWaitNetworkAnimationWidget final : public UWidgetBase
{
public:
	void PlayWaitAnimation();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaitNetworkAnimationWidget">();
	}
	static class UWaitNetworkAnimationWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaitNetworkAnimationWidget>();
	}
};
static_assert(alignof(UWaitNetworkAnimationWidget) == 0x000008, "Wrong alignment on UWaitNetworkAnimationWidget");
static_assert(sizeof(UWaitNetworkAnimationWidget) == 0x000350, "Wrong size on UWaitNetworkAnimationWidget");

// Class GameModule.WaitNetworkMessage
// 0x0038 (0x0388 - 0x0350)
class UWaitNetworkMessage : public UWidgetBase
{
public:
	class UImage*                                 _backImage;                                        // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                           _loadIconCanvas;                                   // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             _messageText;                                      // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetGeneralEmptyWindow*              _generalEmptyWindow;                               // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNamedSlot*                             _imageSlot;                                        // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                           _dialogMessagePanel;                               // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetButton*                          _emptyButton;                                      // 0x0380(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnCloseEvent();
	void Setup(EWaitMessageType Type, bool backImage, bool backBlur, int32 StateSetting);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaitNetworkMessage">();
	}
	static class UWaitNetworkMessage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaitNetworkMessage>();
	}
};
static_assert(alignof(UWaitNetworkMessage) == 0x000008, "Wrong alignment on UWaitNetworkMessage");
static_assert(sizeof(UWaitNetworkMessage) == 0x000388, "Wrong size on UWaitNetworkMessage");
static_assert(offsetof(UWaitNetworkMessage, _backImage) == 0x000350, "Member 'UWaitNetworkMessage::_backImage' has a wrong offset!");
static_assert(offsetof(UWaitNetworkMessage, _loadIconCanvas) == 0x000358, "Member 'UWaitNetworkMessage::_loadIconCanvas' has a wrong offset!");
static_assert(offsetof(UWaitNetworkMessage, _messageText) == 0x000360, "Member 'UWaitNetworkMessage::_messageText' has a wrong offset!");
static_assert(offsetof(UWaitNetworkMessage, _generalEmptyWindow) == 0x000368, "Member 'UWaitNetworkMessage::_generalEmptyWindow' has a wrong offset!");
static_assert(offsetof(UWaitNetworkMessage, _imageSlot) == 0x000370, "Member 'UWaitNetworkMessage::_imageSlot' has a wrong offset!");
static_assert(offsetof(UWaitNetworkMessage, _dialogMessagePanel) == 0x000378, "Member 'UWaitNetworkMessage::_dialogMessagePanel' has a wrong offset!");
static_assert(offsetof(UWaitNetworkMessage, _emptyButton) == 0x000380, "Member 'UWaitNetworkMessage::_emptyButton' has a wrong offset!");

// Class GameModule.WheelCommonParts
// 0x0190 (0x04E0 - 0x0350)
class UWheelCommonParts final : public UWidgetBase
{
public:
	class UCanvasPanel*                           _rootCanvasPanel;                                  // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 _mainImage;                                        // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               _midMain;                                          // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHorizontalBox*                         _closeGuideBox;                                    // 0x0368(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlatformRichTextBlock*                 _closeButtonGuide;                                 // 0x0370(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             _closeText;                                        // 0x0378(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bUseCancelGuide;                                  // 0x0380(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bUseMouseViewportPos;                             // 0x0381(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_382[0x6];                                      // 0x0382(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetBase*                            _useMouseViewportWidget;                           // 0x0388(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHorizontalBox*                         _decideGuideBox;                                   // 0x0390(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlatformRichTextBlock*                 _decideButtonGuide;                                // 0x0398(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             _decideText;                                       // 0x03A0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bUseDecideGuide;                                  // 0x03A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A9[0x7];                                      // 0x03A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBox*                         _requestGuideBox;                                  // 0x03B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlatformRichTextBlock*                 _requestButtonGuide;                               // 0x03B8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             _requestText;                                      // 0x03C0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bUseRequestGuide;                                 // 0x03C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _bUseCommandDescription;                           // 0x03C9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3CA[0x6];                                      // 0x03CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextBlock*                             _commandDescription;                               // 0x03D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWheelControlStick                            _wheelControlStick;                                // 0x03D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D9[0x7];                                      // 0x03D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWheelItemIconsDrawer*                  _itemIconsDrawer;                                  // 0x03E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FWheelItemIconData>             _itemIcons;                                        // 0x03E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector2D                              _indexZeroPosition;                                // 0x03F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         _textPartFont;                                     // 0x0400(0x0058)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            _textFontColor;                                    // 0x0458(0x0028)(Edit, NativeAccessSpecifierPublic)
	float                                         _iconScale;                                        // 0x0480(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_484[0x1C];                                     // 0x0484(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerControllerGame*                  _playerController;                                 // 0x04A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnalogInputComponent*            _widgetAnalogInputComponent;                       // 0x04A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCustomLineDrawer*                      _lineDrawer;                                       // 0x04B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4B8[0x8];                                      // 0x04B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _itemNum;                                          // 0x04C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         _currentIndex;                                     // 0x04C4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C8[0x4];                                      // 0x04C8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _notActiveRadius;                                  // 0x04CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4D0[0x10];                                     // 0x04D0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WheelCommonParts">();
	}
	static class UWheelCommonParts* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWheelCommonParts>();
	}
};
static_assert(alignof(UWheelCommonParts) == 0x000008, "Wrong alignment on UWheelCommonParts");
static_assert(sizeof(UWheelCommonParts) == 0x0004E0, "Wrong size on UWheelCommonParts");
static_assert(offsetof(UWheelCommonParts, _rootCanvasPanel) == 0x000350, "Member 'UWheelCommonParts::_rootCanvasPanel' has a wrong offset!");
static_assert(offsetof(UWheelCommonParts, _mainImage) == 0x000358, "Member 'UWheelCommonParts::_mainImage' has a wrong offset!");
static_assert(offsetof(UWheelCommonParts, _midMain) == 0x000360, "Member 'UWheelCommonParts::_midMain' has a wrong offset!");
static_assert(offsetof(UWheelCommonParts, _closeGuideBox) == 0x000368, "Member 'UWheelCommonParts::_closeGuideBox' has a wrong offset!");
static_assert(offsetof(UWheelCommonParts, _closeButtonGuide) == 0x000370, "Member 'UWheelCommonParts::_closeButtonGuide' has a wrong offset!");
static_assert(offsetof(UWheelCommonParts, _closeText) == 0x000378, "Member 'UWheelCommonParts::_closeText' has a wrong offset!");
static_assert(offsetof(UWheelCommonParts, _bUseCancelGuide) == 0x000380, "Member 'UWheelCommonParts::_bUseCancelGuide' has a wrong offset!");
static_assert(offsetof(UWheelCommonParts, _bUseMouseViewportPos) == 0x000381, "Member 'UWheelCommonParts::_bUseMouseViewportPos' has a wrong offset!");
static_assert(offsetof(UWheelCommonParts, _useMouseViewportWidget) == 0x000388, "Member 'UWheelCommonParts::_useMouseViewportWidget' has a wrong offset!");
static_assert(offsetof(UWheelCommonParts, _decideGuideBox) == 0x000390, "Member 'UWheelCommonParts::_decideGuideBox' has a wrong offset!");
static_assert(offsetof(UWheelCommonParts, _decideButtonGuide) == 0x000398, "Member 'UWheelCommonParts::_decideButtonGuide' has a wrong offset!");
static_assert(offsetof(UWheelCommonParts, _decideText) == 0x0003A0, "Member 'UWheelCommonParts::_decideText' has a wrong offset!");
static_assert(offsetof(UWheelCommonParts, _bUseDecideGuide) == 0x0003A8, "Member 'UWheelCommonParts::_bUseDecideGuide' has a wrong offset!");
static_assert(offsetof(UWheelCommonParts, _requestGuideBox) == 0x0003B0, "Member 'UWheelCommonParts::_requestGuideBox' has a wrong offset!");
static_assert(offsetof(UWheelCommonParts, _requestButtonGuide) == 0x0003B8, "Member 'UWheelCommonParts::_requestButtonGuide' has a wrong offset!");
static_assert(offsetof(UWheelCommonParts, _requestText) == 0x0003C0, "Member 'UWheelCommonParts::_requestText' has a wrong offset!");
static_assert(offsetof(UWheelCommonParts, _bUseRequestGuide) == 0x0003C8, "Member 'UWheelCommonParts::_bUseRequestGuide' has a wrong offset!");
static_assert(offsetof(UWheelCommonParts, _bUseCommandDescription) == 0x0003C9, "Member 'UWheelCommonParts::_bUseCommandDescription' has a wrong offset!");
static_assert(offsetof(UWheelCommonParts, _commandDescription) == 0x0003D0, "Member 'UWheelCommonParts::_commandDescription' has a wrong offset!");
static_assert(offsetof(UWheelCommonParts, _wheelControlStick) == 0x0003D8, "Member 'UWheelCommonParts::_wheelControlStick' has a wrong offset!");
static_assert(offsetof(UWheelCommonParts, _itemIconsDrawer) == 0x0003E0, "Member 'UWheelCommonParts::_itemIconsDrawer' has a wrong offset!");
static_assert(offsetof(UWheelCommonParts, _itemIcons) == 0x0003E8, "Member 'UWheelCommonParts::_itemIcons' has a wrong offset!");
static_assert(offsetof(UWheelCommonParts, _indexZeroPosition) == 0x0003F8, "Member 'UWheelCommonParts::_indexZeroPosition' has a wrong offset!");
static_assert(offsetof(UWheelCommonParts, _textPartFont) == 0x000400, "Member 'UWheelCommonParts::_textPartFont' has a wrong offset!");
static_assert(offsetof(UWheelCommonParts, _textFontColor) == 0x000458, "Member 'UWheelCommonParts::_textFontColor' has a wrong offset!");
static_assert(offsetof(UWheelCommonParts, _iconScale) == 0x000480, "Member 'UWheelCommonParts::_iconScale' has a wrong offset!");
static_assert(offsetof(UWheelCommonParts, _playerController) == 0x0004A0, "Member 'UWheelCommonParts::_playerController' has a wrong offset!");
static_assert(offsetof(UWheelCommonParts, _widgetAnalogInputComponent) == 0x0004A8, "Member 'UWheelCommonParts::_widgetAnalogInputComponent' has a wrong offset!");
static_assert(offsetof(UWheelCommonParts, _lineDrawer) == 0x0004B0, "Member 'UWheelCommonParts::_lineDrawer' has a wrong offset!");
static_assert(offsetof(UWheelCommonParts, _itemNum) == 0x0004C0, "Member 'UWheelCommonParts::_itemNum' has a wrong offset!");
static_assert(offsetof(UWheelCommonParts, _currentIndex) == 0x0004C4, "Member 'UWheelCommonParts::_currentIndex' has a wrong offset!");
static_assert(offsetof(UWheelCommonParts, _notActiveRadius) == 0x0004CC, "Member 'UWheelCommonParts::_notActiveRadius' has a wrong offset!");

// Class GameModule.WheelItemIconsDrawer
// 0x00A0 (0x0268 - 0x01C8)
class UWheelItemIconsDrawer final : public UWidgetDrawPrimitive
{
public:
	uint8                                         Pad_1C8[0xA0];                                     // 0x01C8(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WheelItemIconsDrawer">();
	}
	static class UWheelItemIconsDrawer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWheelItemIconsDrawer>();
	}
};
static_assert(alignof(UWheelItemIconsDrawer) == 0x000008, "Wrong alignment on UWheelItemIconsDrawer");
static_assert(sizeof(UWheelItemIconsDrawer) == 0x000268, "Wrong size on UWheelItemIconsDrawer");

// Class GameModule.WidgetAnalogInputComponent
// 0x0080 (0x0130 - 0x00B0)
class UWidgetAnalogInputComponent final : public UActorComponent
{
public:
	class UGameOption*                            _gameOption;                                       // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerControllerGame*                  _ownerController;                                  // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UInputComponent*                        _rightStickWidgetInputComponent;                   // 0x00C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UInputComponent*                        _leftStickWidgetInputComponent;                    // 0x00D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D8[0x48];                                      // 0x00D8(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        _showCursorWidgets;                                // 0x0120(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	bool IsGamePadControlVirtualCursor();
	bool IsMouseControlVirtualCursor();
	void SetVirtualCursorCenter();
	void SetVirtualCursorPosition(const struct FVector2D& Position);
	void UpdateLeftStickXValue(float AxisValue);
	void UpdateLeftStickYValue(float AxisValue);
	void UpdateRightStickXValue(float AxisValue);
	void UpdateRightStickYValue(float AxisValue);

	const struct FVector2D GetVirtualCursorDelta() const;
	const struct FVector2D GetVirtualCursorPosition() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetAnalogInputComponent">();
	}
	static class UWidgetAnalogInputComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetAnalogInputComponent>();
	}
};
static_assert(alignof(UWidgetAnalogInputComponent) == 0x000008, "Wrong alignment on UWidgetAnalogInputComponent");
static_assert(sizeof(UWidgetAnalogInputComponent) == 0x000130, "Wrong size on UWidgetAnalogInputComponent");
static_assert(offsetof(UWidgetAnalogInputComponent, _gameOption) == 0x0000B0, "Member 'UWidgetAnalogInputComponent::_gameOption' has a wrong offset!");
static_assert(offsetof(UWidgetAnalogInputComponent, _ownerController) == 0x0000C0, "Member 'UWidgetAnalogInputComponent::_ownerController' has a wrong offset!");
static_assert(offsetof(UWidgetAnalogInputComponent, _rightStickWidgetInputComponent) == 0x0000C8, "Member 'UWidgetAnalogInputComponent::_rightStickWidgetInputComponent' has a wrong offset!");
static_assert(offsetof(UWidgetAnalogInputComponent, _leftStickWidgetInputComponent) == 0x0000D0, "Member 'UWidgetAnalogInputComponent::_leftStickWidgetInputComponent' has a wrong offset!");
static_assert(offsetof(UWidgetAnalogInputComponent, _showCursorWidgets) == 0x000120, "Member 'UWidgetAnalogInputComponent::_showCursorWidgets' has a wrong offset!");

// Class GameModule.WidgetNetWorkNotation
// 0x0040 (0x0428 - 0x03E8)
class UWidgetNetWorkNotation : public UAppWidget
{
public:
	class UTextBlock*                             _text;                                             // 0x03E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3F0[0x30];                                     // 0x03F0(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UDbpSetting*                            _setting;                                          // 0x0420(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetNetWorkNotation">();
	}
	static class UWidgetNetWorkNotation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetNetWorkNotation>();
	}
};
static_assert(alignof(UWidgetNetWorkNotation) == 0x000008, "Wrong alignment on UWidgetNetWorkNotation");
static_assert(sizeof(UWidgetNetWorkNotation) == 0x000428, "Wrong size on UWidgetNetWorkNotation");
static_assert(offsetof(UWidgetNetWorkNotation, _text) == 0x0003E8, "Member 'UWidgetNetWorkNotation::_text' has a wrong offset!");
static_assert(offsetof(UWidgetNetWorkNotation, _setting) == 0x000420, "Member 'UWidgetNetWorkNotation::_setting' has a wrong offset!");

// Class GameModule.WidgetSafeGeneralWindow
// 0x0000 (0x0598 - 0x0598)
class UWidgetSafeGeneralWindow : public UWidgetGeneralWindow
{
public:
	void OnFocus(class UAppWidget* Widget, EWidgetInputType InputType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetSafeGeneralWindow">();
	}
	static class UWidgetSafeGeneralWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetSafeGeneralWindow>();
	}
};
static_assert(alignof(UWidgetSafeGeneralWindow) == 0x000008, "Wrong alignment on UWidgetSafeGeneralWindow");
static_assert(sizeof(UWidgetSafeGeneralWindow) == 0x000598, "Wrong size on UWidgetSafeGeneralWindow");

// Class GameModule.YesNoWidget
// 0x0030 (0x0380 - 0x0350)
class UYesNoWidget final : public UWidgetBase
{
public:
	FMulticastInlineDelegateProperty_             _yesDelegate;                                      // 0x0350(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             _noDelegate;                                       // 0x0360(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	class UWidgetButton*                          _yesButton;                                        // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetButton*                          _noButton;                                         // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void AddYesButton();
	void NoEvent(class UAppWidget* Widget, EWidgetInputType InputType);
	void OnInputEventDelegate__DelegateSignature(class UAppWidget* Widget, EWidgetInputType InputType);
	void RemoveYesButton();
	void YesEvent(class UAppWidget* Widget, EWidgetInputType InputType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"YesNoWidget">();
	}
	static class UYesNoWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UYesNoWidget>();
	}
};
static_assert(alignof(UYesNoWidget) == 0x000008, "Wrong alignment on UYesNoWidget");
static_assert(sizeof(UYesNoWidget) == 0x000380, "Wrong size on UYesNoWidget");
static_assert(offsetof(UYesNoWidget, _yesDelegate) == 0x000350, "Member 'UYesNoWidget::_yesDelegate' has a wrong offset!");
static_assert(offsetof(UYesNoWidget, _noDelegate) == 0x000360, "Member 'UYesNoWidget::_noDelegate' has a wrong offset!");
static_assert(offsetof(UYesNoWidget, _yesButton) == 0x000370, "Member 'UYesNoWidget::_yesButton' has a wrong offset!");
static_assert(offsetof(UYesNoWidget, _noButton) == 0x000378, "Member 'UYesNoWidget::_noButton' has a wrong offset!");

}

