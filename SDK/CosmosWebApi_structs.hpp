#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CosmosWebApi

#include "Basic.hpp"


namespace SDK
{

// ScriptStruct CosmosWebApi.CosmosCustomMatchGetResultResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosCustomMatchGetResultResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Results;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosCustomMatchGetResultResponseParam) == 0x000008, "Wrong alignment on FCosmosCustomMatchGetResultResponseParam");
static_assert(sizeof(FCosmosCustomMatchGetResultResponseParam) == 0x000018, "Wrong size on FCosmosCustomMatchGetResultResponseParam");
static_assert(offsetof(FCosmosCustomMatchGetResultResponseParam, Status) == 0x000000, "Member 'FCosmosCustomMatchGetResultResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosCustomMatchGetResultResponseParam, Results) == 0x000008, "Member 'FCosmosCustomMatchGetResultResponseParam::Results' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosCustomMatchGetRoomInfoResponseParam
// 0x0040 (0x0040 - 0x0000)
struct FCosmosCustomMatchGetRoomInfoResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CustomRoomId;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ConnectionDomain;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConnectionPort;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CreateTime;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosCustomMatchGetRoomInfoResponseParam) == 0x000008, "Wrong alignment on FCosmosCustomMatchGetRoomInfoResponseParam");
static_assert(sizeof(FCosmosCustomMatchGetRoomInfoResponseParam) == 0x000040, "Wrong size on FCosmosCustomMatchGetRoomInfoResponseParam");
static_assert(offsetof(FCosmosCustomMatchGetRoomInfoResponseParam, Status) == 0x000000, "Member 'FCosmosCustomMatchGetRoomInfoResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosCustomMatchGetRoomInfoResponseParam, CustomRoomId) == 0x000008, "Member 'FCosmosCustomMatchGetRoomInfoResponseParam::CustomRoomId' has a wrong offset!");
static_assert(offsetof(FCosmosCustomMatchGetRoomInfoResponseParam, ConnectionDomain) == 0x000018, "Member 'FCosmosCustomMatchGetRoomInfoResponseParam::ConnectionDomain' has a wrong offset!");
static_assert(offsetof(FCosmosCustomMatchGetRoomInfoResponseParam, ConnectionPort) == 0x000028, "Member 'FCosmosCustomMatchGetRoomInfoResponseParam::ConnectionPort' has a wrong offset!");
static_assert(offsetof(FCosmosCustomMatchGetRoomInfoResponseParam, CreateTime) == 0x000030, "Member 'FCosmosCustomMatchGetRoomInfoResponseParam::CreateTime' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosCustomMatchCreateRoomIdResponseParam
// 0x0038 (0x0038 - 0x0000)
struct FCosmosCustomMatchCreateRoomIdResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CustomRoomKey;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomRoomId;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreateTime;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosCustomMatchCreateRoomIdResponseParam) == 0x000008, "Wrong alignment on FCosmosCustomMatchCreateRoomIdResponseParam");
static_assert(sizeof(FCosmosCustomMatchCreateRoomIdResponseParam) == 0x000038, "Wrong size on FCosmosCustomMatchCreateRoomIdResponseParam");
static_assert(offsetof(FCosmosCustomMatchCreateRoomIdResponseParam, Status) == 0x000000, "Member 'FCosmosCustomMatchCreateRoomIdResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosCustomMatchCreateRoomIdResponseParam, CustomRoomKey) == 0x000008, "Member 'FCosmosCustomMatchCreateRoomIdResponseParam::CustomRoomKey' has a wrong offset!");
static_assert(offsetof(FCosmosCustomMatchCreateRoomIdResponseParam, CustomRoomId) == 0x000018, "Member 'FCosmosCustomMatchCreateRoomIdResponseParam::CustomRoomId' has a wrong offset!");
static_assert(offsetof(FCosmosCustomMatchCreateRoomIdResponseParam, CreateTime) == 0x000028, "Member 'FCosmosCustomMatchCreateRoomIdResponseParam::CreateTime' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosRankAwardData
// 0x000C (0x000C - 0x0000)
struct FCosmosRankAwardData final
{
public:
	int32                                         AwardItemCategoryCode;                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AwardItemCode;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AwardItemNum;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosRankAwardData) == 0x000004, "Wrong alignment on FCosmosRankAwardData");
static_assert(sizeof(FCosmosRankAwardData) == 0x00000C, "Wrong size on FCosmosRankAwardData");
static_assert(offsetof(FCosmosRankAwardData, AwardItemCategoryCode) == 0x000000, "Member 'FCosmosRankAwardData::AwardItemCategoryCode' has a wrong offset!");
static_assert(offsetof(FCosmosRankAwardData, AwardItemCode) == 0x000004, "Member 'FCosmosRankAwardData::AwardItemCode' has a wrong offset!");
static_assert(offsetof(FCosmosRankAwardData, AwardItemNum) == 0x000008, "Member 'FCosmosRankAwardData::AwardItemNum' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosSpecialpassPurchaseExperiencePointResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosSpecialpassPurchaseExperiencePointResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosRankAwardData>           RankAwards;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosSpecialpassPurchaseExperiencePointResponseParam) == 0x000008, "Wrong alignment on FCosmosSpecialpassPurchaseExperiencePointResponseParam");
static_assert(sizeof(FCosmosSpecialpassPurchaseExperiencePointResponseParam) == 0x000018, "Wrong size on FCosmosSpecialpassPurchaseExperiencePointResponseParam");
static_assert(offsetof(FCosmosSpecialpassPurchaseExperiencePointResponseParam, Status) == 0x000000, "Member 'FCosmosSpecialpassPurchaseExperiencePointResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosSpecialpassPurchaseExperiencePointResponseParam, RankAwards) == 0x000008, "Member 'FCosmosSpecialpassPurchaseExperiencePointResponseParam::RankAwards' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosAwardData
// 0x0014 (0x0014 - 0x0000)
struct FCosmosAwardData final
{
public:
	int32                                         RankBands;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AwardItemCategoryCode;                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AwardItemCode;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AwardItemNum;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReceivedFlag;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosAwardData) == 0x000004, "Wrong alignment on FCosmosAwardData");
static_assert(sizeof(FCosmosAwardData) == 0x000014, "Wrong size on FCosmosAwardData");
static_assert(offsetof(FCosmosAwardData, RankBands) == 0x000000, "Member 'FCosmosAwardData::RankBands' has a wrong offset!");
static_assert(offsetof(FCosmosAwardData, AwardItemCategoryCode) == 0x000004, "Member 'FCosmosAwardData::AwardItemCategoryCode' has a wrong offset!");
static_assert(offsetof(FCosmosAwardData, AwardItemCode) == 0x000008, "Member 'FCosmosAwardData::AwardItemCode' has a wrong offset!");
static_assert(offsetof(FCosmosAwardData, AwardItemNum) == 0x00000C, "Member 'FCosmosAwardData::AwardItemNum' has a wrong offset!");
static_assert(offsetof(FCosmosAwardData, ReceivedFlag) == 0x000010, "Member 'FCosmosAwardData::ReceivedFlag' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosSpecialpassGetMasterListResponseParam
// 0x0020 (0x0020 - 0x0000)
struct FCosmosSpecialpassGetMasterListResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exp;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxExp;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCosmosAwardData>               RankAwards;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosSpecialpassGetMasterListResponseParam) == 0x000008, "Wrong alignment on FCosmosSpecialpassGetMasterListResponseParam");
static_assert(sizeof(FCosmosSpecialpassGetMasterListResponseParam) == 0x000020, "Wrong size on FCosmosSpecialpassGetMasterListResponseParam");
static_assert(offsetof(FCosmosSpecialpassGetMasterListResponseParam, Status) == 0x000000, "Member 'FCosmosSpecialpassGetMasterListResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosSpecialpassGetMasterListResponseParam, Rank) == 0x000004, "Member 'FCosmosSpecialpassGetMasterListResponseParam::Rank' has a wrong offset!");
static_assert(offsetof(FCosmosSpecialpassGetMasterListResponseParam, Exp) == 0x000008, "Member 'FCosmosSpecialpassGetMasterListResponseParam::Exp' has a wrong offset!");
static_assert(offsetof(FCosmosSpecialpassGetMasterListResponseParam, MaxExp) == 0x00000C, "Member 'FCosmosSpecialpassGetMasterListResponseParam::MaxExp' has a wrong offset!");
static_assert(offsetof(FCosmosSpecialpassGetMasterListResponseParam, RankAwards) == 0x000010, "Member 'FCosmosSpecialpassGetMasterListResponseParam::RankAwards' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosBnidClientEntryResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosBnidClientEntryResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 URL;                                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosBnidClientEntryResponseParam) == 0x000008, "Wrong alignment on FCosmosBnidClientEntryResponseParam");
static_assert(sizeof(FCosmosBnidClientEntryResponseParam) == 0x000018, "Wrong size on FCosmosBnidClientEntryResponseParam");
static_assert(offsetof(FCosmosBnidClientEntryResponseParam, Status) == 0x000000, "Member 'FCosmosBnidClientEntryResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosBnidClientEntryResponseParam, URL) == 0x000008, "Member 'FCosmosBnidClientEntryResponseParam::URL' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosBnidClientCheckStatusResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosBnidClientCheckStatusResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosBnidClientCheckStatusResponseParam) == 0x000008, "Wrong alignment on FCosmosBnidClientCheckStatusResponseParam");
static_assert(sizeof(FCosmosBnidClientCheckStatusResponseParam) == 0x000018, "Wrong size on FCosmosBnidClientCheckStatusResponseParam");
static_assert(offsetof(FCosmosBnidClientCheckStatusResponseParam, Status) == 0x000000, "Member 'FCosmosBnidClientCheckStatusResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosBnidClientCheckStatusResponseParam, Text) == 0x000008, "Member 'FCosmosBnidClientCheckStatusResponseParam::Text' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosEventInfo
// 0x0010 (0x0010 - 0x0000)
struct FCosmosEventInfo final
{
public:
	int32                                         EventCode;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventRank;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalEventPoint;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NowEventPoint;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosEventInfo) == 0x000004, "Wrong alignment on FCosmosEventInfo");
static_assert(sizeof(FCosmosEventInfo) == 0x000010, "Wrong size on FCosmosEventInfo");
static_assert(offsetof(FCosmosEventInfo, EventCode) == 0x000000, "Member 'FCosmosEventInfo::EventCode' has a wrong offset!");
static_assert(offsetof(FCosmosEventInfo, EventRank) == 0x000004, "Member 'FCosmosEventInfo::EventRank' has a wrong offset!");
static_assert(offsetof(FCosmosEventInfo, TotalEventPoint) == 0x000008, "Member 'FCosmosEventInfo::TotalEventPoint' has a wrong offset!");
static_assert(offsetof(FCosmosEventInfo, NowEventPoint) == 0x00000C, "Member 'FCosmosEventInfo::NowEventPoint' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosEventGetEventInfoResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosEventGetEventInfoResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosEventInfo>               EventInfos;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosEventGetEventInfoResponseParam) == 0x000008, "Wrong alignment on FCosmosEventGetEventInfoResponseParam");
static_assert(sizeof(FCosmosEventGetEventInfoResponseParam) == 0x000018, "Wrong size on FCosmosEventGetEventInfoResponseParam");
static_assert(offsetof(FCosmosEventGetEventInfoResponseParam, Status) == 0x000000, "Member 'FCosmosEventGetEventInfoResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosEventGetEventInfoResponseParam, EventInfos) == 0x000008, "Member 'FCosmosEventGetEventInfoResponseParam::EventInfos' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosLogData
// 0x0030 (0x0030 - 0x0000)
struct FCosmosLogData final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OnlineId;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Time;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosLogData) == 0x000008, "Wrong alignment on FCosmosLogData");
static_assert(sizeof(FCosmosLogData) == 0x000030, "Wrong size on FCosmosLogData");
static_assert(offsetof(FCosmosLogData, Text) == 0x000000, "Member 'FCosmosLogData::Text' has a wrong offset!");
static_assert(offsetof(FCosmosLogData, OnlineId) == 0x000010, "Member 'FCosmosLogData::OnlineId' has a wrong offset!");
static_assert(offsetof(FCosmosLogData, Time) == 0x000020, "Member 'FCosmosLogData::Time' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosChatLogResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosChatLogResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosLogData>                 LogList;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosChatLogResponseParam) == 0x000008, "Wrong alignment on FCosmosChatLogResponseParam");
static_assert(sizeof(FCosmosChatLogResponseParam) == 0x000018, "Wrong size on FCosmosChatLogResponseParam");
static_assert(offsetof(FCosmosChatLogResponseParam, Status) == 0x000000, "Member 'FCosmosChatLogResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosChatLogResponseParam, LogList) == 0x000008, "Member 'FCosmosChatLogResponseParam::LogList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosChatReceiveResponseParam
// 0x0008 (0x0008 - 0x0000)
struct FCosmosChatReceiveResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewChat;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosChatReceiveResponseParam) == 0x000004, "Wrong alignment on FCosmosChatReceiveResponseParam");
static_assert(sizeof(FCosmosChatReceiveResponseParam) == 0x000008, "Wrong size on FCosmosChatReceiveResponseParam");
static_assert(offsetof(FCosmosChatReceiveResponseParam, Status) == 0x000000, "Member 'FCosmosChatReceiveResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosChatReceiveResponseParam, NewChat) == 0x000004, "Member 'FCosmosChatReceiveResponseParam::NewChat' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosRecommendNoticeGetRecommendNoticeResponseParam
// 0x0058 (0x0058 - 0x0000)
struct FCosmosRecommendNoticeGetRecommendNoticeResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecommendNoticeId;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetUserId;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetPlatformUserId;                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetGuildId;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetGuildName;                                   // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetUserName;                                    // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosRecommendNoticeGetRecommendNoticeResponseParam) == 0x000008, "Wrong alignment on FCosmosRecommendNoticeGetRecommendNoticeResponseParam");
static_assert(sizeof(FCosmosRecommendNoticeGetRecommendNoticeResponseParam) == 0x000058, "Wrong size on FCosmosRecommendNoticeGetRecommendNoticeResponseParam");
static_assert(offsetof(FCosmosRecommendNoticeGetRecommendNoticeResponseParam, Status) == 0x000000, "Member 'FCosmosRecommendNoticeGetRecommendNoticeResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosRecommendNoticeGetRecommendNoticeResponseParam, RecommendNoticeId) == 0x000004, "Member 'FCosmosRecommendNoticeGetRecommendNoticeResponseParam::RecommendNoticeId' has a wrong offset!");
static_assert(offsetof(FCosmosRecommendNoticeGetRecommendNoticeResponseParam, TargetUserId) == 0x000008, "Member 'FCosmosRecommendNoticeGetRecommendNoticeResponseParam::TargetUserId' has a wrong offset!");
static_assert(offsetof(FCosmosRecommendNoticeGetRecommendNoticeResponseParam, TargetPlatformUserId) == 0x000018, "Member 'FCosmosRecommendNoticeGetRecommendNoticeResponseParam::TargetPlatformUserId' has a wrong offset!");
static_assert(offsetof(FCosmosRecommendNoticeGetRecommendNoticeResponseParam, TargetGuildId) == 0x000028, "Member 'FCosmosRecommendNoticeGetRecommendNoticeResponseParam::TargetGuildId' has a wrong offset!");
static_assert(offsetof(FCosmosRecommendNoticeGetRecommendNoticeResponseParam, TargetGuildName) == 0x000038, "Member 'FCosmosRecommendNoticeGetRecommendNoticeResponseParam::TargetGuildName' has a wrong offset!");
static_assert(offsetof(FCosmosRecommendNoticeGetRecommendNoticeResponseParam, TargetUserName) == 0x000048, "Member 'FCosmosRecommendNoticeGetRecommendNoticeResponseParam::TargetUserName' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosGalleryData
// 0x0030 (0x0030 - 0x0000)
struct FCosmosGalleryData final
{
public:
	int32                                         GalleryCode;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GalleryTicket1ReleaseNum;                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GalleryTicket2ReleaseNum;                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GalleryTicket3ReleaseNum;                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GalleryTicket1UsedNum;                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GalleryTicket2UsedNum;                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GalleryTicket3UsedNum;                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Panel;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosGalleryData) == 0x000008, "Wrong alignment on FCosmosGalleryData");
static_assert(sizeof(FCosmosGalleryData) == 0x000030, "Wrong size on FCosmosGalleryData");
static_assert(offsetof(FCosmosGalleryData, GalleryCode) == 0x000000, "Member 'FCosmosGalleryData::GalleryCode' has a wrong offset!");
static_assert(offsetof(FCosmosGalleryData, GalleryTicket1ReleaseNum) == 0x000004, "Member 'FCosmosGalleryData::GalleryTicket1ReleaseNum' has a wrong offset!");
static_assert(offsetof(FCosmosGalleryData, GalleryTicket2ReleaseNum) == 0x000008, "Member 'FCosmosGalleryData::GalleryTicket2ReleaseNum' has a wrong offset!");
static_assert(offsetof(FCosmosGalleryData, GalleryTicket3ReleaseNum) == 0x00000C, "Member 'FCosmosGalleryData::GalleryTicket3ReleaseNum' has a wrong offset!");
static_assert(offsetof(FCosmosGalleryData, GalleryTicket1UsedNum) == 0x000010, "Member 'FCosmosGalleryData::GalleryTicket1UsedNum' has a wrong offset!");
static_assert(offsetof(FCosmosGalleryData, GalleryTicket2UsedNum) == 0x000014, "Member 'FCosmosGalleryData::GalleryTicket2UsedNum' has a wrong offset!");
static_assert(offsetof(FCosmosGalleryData, GalleryTicket3UsedNum) == 0x000018, "Member 'FCosmosGalleryData::GalleryTicket3UsedNum' has a wrong offset!");
static_assert(offsetof(FCosmosGalleryData, Panel) == 0x000020, "Member 'FCosmosGalleryData::Panel' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosGalleryGetGalleryListResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosGalleryGetGalleryListResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosGalleryData>             GalleryList;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosGalleryGetGalleryListResponseParam) == 0x000008, "Wrong alignment on FCosmosGalleryGetGalleryListResponseParam");
static_assert(sizeof(FCosmosGalleryGetGalleryListResponseParam) == 0x000018, "Wrong size on FCosmosGalleryGetGalleryListResponseParam");
static_assert(offsetof(FCosmosGalleryGetGalleryListResponseParam, Status) == 0x000000, "Member 'FCosmosGalleryGetGalleryListResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosGalleryGetGalleryListResponseParam, GalleryList) == 0x000008, "Member 'FCosmosGalleryGetGalleryListResponseParam::GalleryList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosSysF2pGetPasswordResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosSysF2pGetPasswordResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Password;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosSysF2pGetPasswordResponseParam) == 0x000008, "Wrong alignment on FCosmosSysF2pGetPasswordResponseParam");
static_assert(sizeof(FCosmosSysF2pGetPasswordResponseParam) == 0x000018, "Wrong size on FCosmosSysF2pGetPasswordResponseParam");
static_assert(offsetof(FCosmosSysF2pGetPasswordResponseParam, Status) == 0x000000, "Member 'FCosmosSysF2pGetPasswordResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosSysF2pGetPasswordResponseParam, Password) == 0x000008, "Member 'FCosmosSysF2pGetPasswordResponseParam::Password' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosSquadMemberData
// 0x0038 (0x0038 - 0x0000)
struct FCosmosSquadMemberData final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserData;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IshostUser;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsCpu;                                             // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformUserId;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosSquadMemberData) == 0x000008, "Wrong alignment on FCosmosSquadMemberData");
static_assert(sizeof(FCosmosSquadMemberData) == 0x000038, "Wrong size on FCosmosSquadMemberData");
static_assert(offsetof(FCosmosSquadMemberData, UserId) == 0x000000, "Member 'FCosmosSquadMemberData::UserId' has a wrong offset!");
static_assert(offsetof(FCosmosSquadMemberData, UserData) == 0x000010, "Member 'FCosmosSquadMemberData::UserData' has a wrong offset!");
static_assert(offsetof(FCosmosSquadMemberData, IshostUser) == 0x000020, "Member 'FCosmosSquadMemberData::IshostUser' has a wrong offset!");
static_assert(offsetof(FCosmosSquadMemberData, IsCpu) == 0x000024, "Member 'FCosmosSquadMemberData::IsCpu' has a wrong offset!");
static_assert(offsetof(FCosmosSquadMemberData, PlatformUserId) == 0x000028, "Member 'FCosmosSquadMemberData::PlatformUserId' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosSysF2pGetJoinServerResponseParam
// 0x0040 (0x0040 - 0x0000)
struct FCosmosSysF2pGetJoinServerResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ConnectionDomain;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConnectionPort;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SquadId;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCosmosSquadMemberData>         MemberList;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosSysF2pGetJoinServerResponseParam) == 0x000008, "Wrong alignment on FCosmosSysF2pGetJoinServerResponseParam");
static_assert(sizeof(FCosmosSysF2pGetJoinServerResponseParam) == 0x000040, "Wrong size on FCosmosSysF2pGetJoinServerResponseParam");
static_assert(offsetof(FCosmosSysF2pGetJoinServerResponseParam, Status) == 0x000000, "Member 'FCosmosSysF2pGetJoinServerResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosSysF2pGetJoinServerResponseParam, ConnectionDomain) == 0x000008, "Member 'FCosmosSysF2pGetJoinServerResponseParam::ConnectionDomain' has a wrong offset!");
static_assert(offsetof(FCosmosSysF2pGetJoinServerResponseParam, ConnectionPort) == 0x000018, "Member 'FCosmosSysF2pGetJoinServerResponseParam::ConnectionPort' has a wrong offset!");
static_assert(offsetof(FCosmosSysF2pGetJoinServerResponseParam, SquadId) == 0x000020, "Member 'FCosmosSysF2pGetJoinServerResponseParam::SquadId' has a wrong offset!");
static_assert(offsetof(FCosmosSysF2pGetJoinServerResponseParam, MemberList) == 0x000030, "Member 'FCosmosSysF2pGetJoinServerResponseParam::MemberList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosSysF2pGetServerInfoResponseParam
// 0x0048 (0x0048 - 0x0000)
struct FCosmosSysF2pGetServerInfoResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerTime;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerName;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerVersion;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchingServerVersion;                             // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosSysF2pGetServerInfoResponseParam) == 0x000008, "Wrong alignment on FCosmosSysF2pGetServerInfoResponseParam");
static_assert(sizeof(FCosmosSysF2pGetServerInfoResponseParam) == 0x000048, "Wrong size on FCosmosSysF2pGetServerInfoResponseParam");
static_assert(offsetof(FCosmosSysF2pGetServerInfoResponseParam, Status) == 0x000000, "Member 'FCosmosSysF2pGetServerInfoResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosSysF2pGetServerInfoResponseParam, ServerTime) == 0x000008, "Member 'FCosmosSysF2pGetServerInfoResponseParam::ServerTime' has a wrong offset!");
static_assert(offsetof(FCosmosSysF2pGetServerInfoResponseParam, ServerName) == 0x000018, "Member 'FCosmosSysF2pGetServerInfoResponseParam::ServerName' has a wrong offset!");
static_assert(offsetof(FCosmosSysF2pGetServerInfoResponseParam, ServerVersion) == 0x000028, "Member 'FCosmosSysF2pGetServerInfoResponseParam::ServerVersion' has a wrong offset!");
static_assert(offsetof(FCosmosSysF2pGetServerInfoResponseParam, MatchingServerVersion) == 0x000038, "Member 'FCosmosSysF2pGetServerInfoResponseParam::MatchingServerVersion' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosSysF2pGetMasterUrlResponseParam
// 0x0048 (0x0048 - 0x0000)
struct FCosmosSysF2pGetMasterUrlResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 WebUrl;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Passphrase;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Checksum;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MasterDataVersion;                                 // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosSysF2pGetMasterUrlResponseParam) == 0x000008, "Wrong alignment on FCosmosSysF2pGetMasterUrlResponseParam");
static_assert(sizeof(FCosmosSysF2pGetMasterUrlResponseParam) == 0x000048, "Wrong size on FCosmosSysF2pGetMasterUrlResponseParam");
static_assert(offsetof(FCosmosSysF2pGetMasterUrlResponseParam, Status) == 0x000000, "Member 'FCosmosSysF2pGetMasterUrlResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosSysF2pGetMasterUrlResponseParam, WebUrl) == 0x000008, "Member 'FCosmosSysF2pGetMasterUrlResponseParam::WebUrl' has a wrong offset!");
static_assert(offsetof(FCosmosSysF2pGetMasterUrlResponseParam, Passphrase) == 0x000018, "Member 'FCosmosSysF2pGetMasterUrlResponseParam::Passphrase' has a wrong offset!");
static_assert(offsetof(FCosmosSysF2pGetMasterUrlResponseParam, Checksum) == 0x000028, "Member 'FCosmosSysF2pGetMasterUrlResponseParam::Checksum' has a wrong offset!");
static_assert(offsetof(FCosmosSysF2pGetMasterUrlResponseParam, MasterDataVersion) == 0x000038, "Member 'FCosmosSysF2pGetMasterUrlResponseParam::MasterDataVersion' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosSysF2pGetVersionResponseParam
// 0x0028 (0x0028 - 0x0000)
struct FCosmosSysF2pGetVersionResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerName;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerVersion;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosSysF2pGetVersionResponseParam) == 0x000008, "Wrong alignment on FCosmosSysF2pGetVersionResponseParam");
static_assert(sizeof(FCosmosSysF2pGetVersionResponseParam) == 0x000028, "Wrong size on FCosmosSysF2pGetVersionResponseParam");
static_assert(offsetof(FCosmosSysF2pGetVersionResponseParam, Status) == 0x000000, "Member 'FCosmosSysF2pGetVersionResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosSysF2pGetVersionResponseParam, ServerName) == 0x000008, "Member 'FCosmosSysF2pGetVersionResponseParam::ServerName' has a wrong offset!");
static_assert(offsetof(FCosmosSysF2pGetVersionResponseParam, ServerVersion) == 0x000018, "Member 'FCosmosSysF2pGetVersionResponseParam::ServerVersion' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosServerData
// 0x0040 (0x0040 - 0x0000)
struct FCosmosServerData final
{
public:
	int32                                         RegionCd;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ConnectionDomain;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConnectionPort;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DedicateIp;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RegionName;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosServerData) == 0x000008, "Wrong alignment on FCosmosServerData");
static_assert(sizeof(FCosmosServerData) == 0x000040, "Wrong size on FCosmosServerData");
static_assert(offsetof(FCosmosServerData, RegionCd) == 0x000000, "Member 'FCosmosServerData::RegionCd' has a wrong offset!");
static_assert(offsetof(FCosmosServerData, ConnectionDomain) == 0x000008, "Member 'FCosmosServerData::ConnectionDomain' has a wrong offset!");
static_assert(offsetof(FCosmosServerData, ConnectionPort) == 0x000018, "Member 'FCosmosServerData::ConnectionPort' has a wrong offset!");
static_assert(offsetof(FCosmosServerData, DedicateIp) == 0x000020, "Member 'FCosmosServerData::DedicateIp' has a wrong offset!");
static_assert(offsetof(FCosmosServerData, RegionName) == 0x000030, "Member 'FCosmosServerData::RegionName' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosSysF2pGetServerListResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosSysF2pGetServerListResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosServerData>              ServerList;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosSysF2pGetServerListResponseParam) == 0x000008, "Wrong alignment on FCosmosSysF2pGetServerListResponseParam");
static_assert(sizeof(FCosmosSysF2pGetServerListResponseParam) == 0x000018, "Wrong size on FCosmosSysF2pGetServerListResponseParam");
static_assert(offsetof(FCosmosSysF2pGetServerListResponseParam, Status) == 0x000000, "Member 'FCosmosSysF2pGetServerListResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosSysF2pGetServerListResponseParam, ServerList) == 0x000008, "Member 'FCosmosSysF2pGetServerListResponseParam::ServerList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosSysF2pGetServerTimeResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosSysF2pGetServerTimeResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerTime;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosSysF2pGetServerTimeResponseParam) == 0x000008, "Wrong alignment on FCosmosSysF2pGetServerTimeResponseParam");
static_assert(sizeof(FCosmosSysF2pGetServerTimeResponseParam) == 0x000018, "Wrong size on FCosmosSysF2pGetServerTimeResponseParam");
static_assert(offsetof(FCosmosSysF2pGetServerTimeResponseParam, Status) == 0x000000, "Member 'FCosmosSysF2pGetServerTimeResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosSysF2pGetServerTimeResponseParam, ServerTime) == 0x000008, "Member 'FCosmosSysF2pGetServerTimeResponseParam::ServerTime' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosSettingGetSettingInfoResponseParam
// 0x0048 (0x0048 - 0x0000)
struct FCosmosSettingGetSettingInfoResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecommendFlg;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Server;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         buttonHintFlg;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MiniMapSpinFlg;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageValueFlg;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackDirectionFlg;                                // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         battleRecordFlg;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AuraDisplayTarget;                                 // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AuraDisplayArea;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCosmosSettingGetSettingInfoResponseParam) == 0x000008, "Wrong alignment on FCosmosSettingGetSettingInfoResponseParam");
static_assert(sizeof(FCosmosSettingGetSettingInfoResponseParam) == 0x000048, "Wrong size on FCosmosSettingGetSettingInfoResponseParam");
static_assert(offsetof(FCosmosSettingGetSettingInfoResponseParam, Status) == 0x000000, "Member 'FCosmosSettingGetSettingInfoResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosSettingGetSettingInfoResponseParam, RecommendFlg) == 0x000004, "Member 'FCosmosSettingGetSettingInfoResponseParam::RecommendFlg' has a wrong offset!");
static_assert(offsetof(FCosmosSettingGetSettingInfoResponseParam, Language) == 0x000008, "Member 'FCosmosSettingGetSettingInfoResponseParam::Language' has a wrong offset!");
static_assert(offsetof(FCosmosSettingGetSettingInfoResponseParam, Server) == 0x000018, "Member 'FCosmosSettingGetSettingInfoResponseParam::Server' has a wrong offset!");
static_assert(offsetof(FCosmosSettingGetSettingInfoResponseParam, buttonHintFlg) == 0x000028, "Member 'FCosmosSettingGetSettingInfoResponseParam::buttonHintFlg' has a wrong offset!");
static_assert(offsetof(FCosmosSettingGetSettingInfoResponseParam, MiniMapSpinFlg) == 0x00002C, "Member 'FCosmosSettingGetSettingInfoResponseParam::MiniMapSpinFlg' has a wrong offset!");
static_assert(offsetof(FCosmosSettingGetSettingInfoResponseParam, DamageValueFlg) == 0x000030, "Member 'FCosmosSettingGetSettingInfoResponseParam::DamageValueFlg' has a wrong offset!");
static_assert(offsetof(FCosmosSettingGetSettingInfoResponseParam, AttackDirectionFlg) == 0x000034, "Member 'FCosmosSettingGetSettingInfoResponseParam::AttackDirectionFlg' has a wrong offset!");
static_assert(offsetof(FCosmosSettingGetSettingInfoResponseParam, battleRecordFlg) == 0x000038, "Member 'FCosmosSettingGetSettingInfoResponseParam::battleRecordFlg' has a wrong offset!");
static_assert(offsetof(FCosmosSettingGetSettingInfoResponseParam, AuraDisplayTarget) == 0x00003C, "Member 'FCosmosSettingGetSettingInfoResponseParam::AuraDisplayTarget' has a wrong offset!");
static_assert(offsetof(FCosmosSettingGetSettingInfoResponseParam, AuraDisplayArea) == 0x000040, "Member 'FCosmosSettingGetSettingInfoResponseParam::AuraDisplayArea' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosDedAvatarData
// 0x0020 (0x0020 - 0x0000)
struct FCosmosDedAvatarData final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarDataJson;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosDedAvatarData) == 0x000008, "Wrong alignment on FCosmosDedAvatarData");
static_assert(sizeof(FCosmosDedAvatarData) == 0x000020, "Wrong size on FCosmosDedAvatarData");
static_assert(offsetof(FCosmosDedAvatarData, UserId) == 0x000000, "Member 'FCosmosDedAvatarData::UserId' has a wrong offset!");
static_assert(offsetof(FCosmosDedAvatarData, AvatarDataJson) == 0x000010, "Member 'FCosmosDedAvatarData::AvatarDataJson' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosAvatarGetDedAvatarListResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosAvatarGetDedAvatarListResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosDedAvatarData>           Avatars;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosAvatarGetDedAvatarListResponseParam) == 0x000008, "Wrong alignment on FCosmosAvatarGetDedAvatarListResponseParam");
static_assert(sizeof(FCosmosAvatarGetDedAvatarListResponseParam) == 0x000018, "Wrong size on FCosmosAvatarGetDedAvatarListResponseParam");
static_assert(offsetof(FCosmosAvatarGetDedAvatarListResponseParam, Status) == 0x000000, "Member 'FCosmosAvatarGetDedAvatarListResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosAvatarGetDedAvatarListResponseParam, Avatars) == 0x000008, "Member 'FCosmosAvatarGetDedAvatarListResponseParam::Avatars' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosAvatarData
// 0x0018 (0x0018 - 0x0000)
struct FCosmosAvatarData final
{
public:
	int32                                         AvatarCharacterCode;                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AvatarDataJson;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosAvatarData) == 0x000008, "Wrong alignment on FCosmosAvatarData");
static_assert(sizeof(FCosmosAvatarData) == 0x000018, "Wrong size on FCosmosAvatarData");
static_assert(offsetof(FCosmosAvatarData, AvatarCharacterCode) == 0x000000, "Member 'FCosmosAvatarData::AvatarCharacterCode' has a wrong offset!");
static_assert(offsetof(FCosmosAvatarData, AvatarDataJson) == 0x000008, "Member 'FCosmosAvatarData::AvatarDataJson' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosAvatarGetAvatarListResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosAvatarGetAvatarListResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosAvatarData>              Avatars;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosAvatarGetAvatarListResponseParam) == 0x000008, "Wrong alignment on FCosmosAvatarGetAvatarListResponseParam");
static_assert(sizeof(FCosmosAvatarGetAvatarListResponseParam) == 0x000018, "Wrong size on FCosmosAvatarGetAvatarListResponseParam");
static_assert(offsetof(FCosmosAvatarGetAvatarListResponseParam, Status) == 0x000000, "Member 'FCosmosAvatarGetAvatarListResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosAvatarGetAvatarListResponseParam, Avatars) == 0x000008, "Member 'FCosmosAvatarGetAvatarListResponseParam::Avatars' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosHistoryData
// 0x0020 (0x0020 - 0x0000)
struct FCosmosHistoryData final
{
public:
	int32                                         LootboxCode;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemType;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetCode;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Created;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosHistoryData) == 0x000008, "Wrong alignment on FCosmosHistoryData");
static_assert(sizeof(FCosmosHistoryData) == 0x000020, "Wrong size on FCosmosHistoryData");
static_assert(offsetof(FCosmosHistoryData, LootboxCode) == 0x000000, "Member 'FCosmosHistoryData::LootboxCode' has a wrong offset!");
static_assert(offsetof(FCosmosHistoryData, ItemType) == 0x000004, "Member 'FCosmosHistoryData::ItemType' has a wrong offset!");
static_assert(offsetof(FCosmosHistoryData, TargetCode) == 0x000008, "Member 'FCosmosHistoryData::TargetCode' has a wrong offset!");
static_assert(offsetof(FCosmosHistoryData, ItemNum) == 0x00000C, "Member 'FCosmosHistoryData::ItemNum' has a wrong offset!");
static_assert(offsetof(FCosmosHistoryData, Created) == 0x000010, "Member 'FCosmosHistoryData::Created' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosLootboxGetHistoriesResponseParam
// 0x0020 (0x0020 - 0x0000)
struct FCosmosLootboxGetHistoriesResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NowPage;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Maxpage;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosHistoryData>             HistoryList;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosLootboxGetHistoriesResponseParam) == 0x000008, "Wrong alignment on FCosmosLootboxGetHistoriesResponseParam");
static_assert(sizeof(FCosmosLootboxGetHistoriesResponseParam) == 0x000020, "Wrong size on FCosmosLootboxGetHistoriesResponseParam");
static_assert(offsetof(FCosmosLootboxGetHistoriesResponseParam, Status) == 0x000000, "Member 'FCosmosLootboxGetHistoriesResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxGetHistoriesResponseParam, NowPage) == 0x000004, "Member 'FCosmosLootboxGetHistoriesResponseParam::NowPage' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxGetHistoriesResponseParam, Maxpage) == 0x000008, "Member 'FCosmosLootboxGetHistoriesResponseParam::Maxpage' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxGetHistoriesResponseParam, HistoryList) == 0x000010, "Member 'FCosmosLootboxGetHistoriesResponseParam::HistoryList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosRarityItemData
// 0x0048 (0x0048 - 0x0000)
struct FCosmosRarityItemData final
{
public:
	class FString                                 RarityId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RarityRate;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemConfigId;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemType;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCode;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum;                                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemRarityRate;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PickupFlg;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResetFlg;                                          // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         boxCount;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         boxRemaining;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosRarityItemData) == 0x000008, "Wrong alignment on FCosmosRarityItemData");
static_assert(sizeof(FCosmosRarityItemData) == 0x000048, "Wrong size on FCosmosRarityItemData");
static_assert(offsetof(FCosmosRarityItemData, RarityId) == 0x000000, "Member 'FCosmosRarityItemData::RarityId' has a wrong offset!");
static_assert(offsetof(FCosmosRarityItemData, RarityRate) == 0x000010, "Member 'FCosmosRarityItemData::RarityRate' has a wrong offset!");
static_assert(offsetof(FCosmosRarityItemData, ItemConfigId) == 0x000018, "Member 'FCosmosRarityItemData::ItemConfigId' has a wrong offset!");
static_assert(offsetof(FCosmosRarityItemData, ItemType) == 0x000028, "Member 'FCosmosRarityItemData::ItemType' has a wrong offset!");
static_assert(offsetof(FCosmosRarityItemData, ItemCode) == 0x00002C, "Member 'FCosmosRarityItemData::ItemCode' has a wrong offset!");
static_assert(offsetof(FCosmosRarityItemData, ItemNum) == 0x000030, "Member 'FCosmosRarityItemData::ItemNum' has a wrong offset!");
static_assert(offsetof(FCosmosRarityItemData, ItemRarityRate) == 0x000034, "Member 'FCosmosRarityItemData::ItemRarityRate' has a wrong offset!");
static_assert(offsetof(FCosmosRarityItemData, PickupFlg) == 0x000038, "Member 'FCosmosRarityItemData::PickupFlg' has a wrong offset!");
static_assert(offsetof(FCosmosRarityItemData, ResetFlg) == 0x00003C, "Member 'FCosmosRarityItemData::ResetFlg' has a wrong offset!");
static_assert(offsetof(FCosmosRarityItemData, boxCount) == 0x000040, "Member 'FCosmosRarityItemData::boxCount' has a wrong offset!");
static_assert(offsetof(FCosmosRarityItemData, boxRemaining) == 0x000044, "Member 'FCosmosRarityItemData::boxRemaining' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosLootboxStatusData
// 0x0018 (0x0018 - 0x0000)
struct FCosmosLootboxStatusData final
{
public:
	int32                                         TabNumber;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecurityRarityFlg;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCosmosRarityItemData>          RarityItemList;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosLootboxStatusData) == 0x000008, "Wrong alignment on FCosmosLootboxStatusData");
static_assert(sizeof(FCosmosLootboxStatusData) == 0x000018, "Wrong size on FCosmosLootboxStatusData");
static_assert(offsetof(FCosmosLootboxStatusData, TabNumber) == 0x000000, "Member 'FCosmosLootboxStatusData::TabNumber' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxStatusData, SecurityRarityFlg) == 0x000004, "Member 'FCosmosLootboxStatusData::SecurityRarityFlg' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxStatusData, RarityItemList) == 0x000008, "Member 'FCosmosLootboxStatusData::RarityItemList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosLootboxGetProbabilityResponseParam
// 0x0028 (0x0028 - 0x0000)
struct FCosmosLootboxGetProbabilityResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LootboxType;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCosmosLootboxStatusData>       LootboxStatusList;                                 // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosLootboxGetProbabilityResponseParam) == 0x000008, "Wrong alignment on FCosmosLootboxGetProbabilityResponseParam");
static_assert(sizeof(FCosmosLootboxGetProbabilityResponseParam) == 0x000028, "Wrong size on FCosmosLootboxGetProbabilityResponseParam");
static_assert(offsetof(FCosmosLootboxGetProbabilityResponseParam, Status) == 0x000000, "Member 'FCosmosLootboxGetProbabilityResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxGetProbabilityResponseParam, LootboxType) == 0x000008, "Member 'FCosmosLootboxGetProbabilityResponseParam::LootboxType' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxGetProbabilityResponseParam, LootboxStatusList) == 0x000018, "Member 'FCosmosLootboxGetProbabilityResponseParam::LootboxStatusList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosLootboxMileageExchangeResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosLootboxMileageExchangeResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReplaceFlag;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AuraStep;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemType;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCode;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosLootboxMileageExchangeResponseParam) == 0x000004, "Wrong alignment on FCosmosLootboxMileageExchangeResponseParam");
static_assert(sizeof(FCosmosLootboxMileageExchangeResponseParam) == 0x000018, "Wrong size on FCosmosLootboxMileageExchangeResponseParam");
static_assert(offsetof(FCosmosLootboxMileageExchangeResponseParam, Status) == 0x000000, "Member 'FCosmosLootboxMileageExchangeResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxMileageExchangeResponseParam, ReplaceFlag) == 0x000004, "Member 'FCosmosLootboxMileageExchangeResponseParam::ReplaceFlag' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxMileageExchangeResponseParam, AuraStep) == 0x000008, "Member 'FCosmosLootboxMileageExchangeResponseParam::AuraStep' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxMileageExchangeResponseParam, ItemType) == 0x00000C, "Member 'FCosmosLootboxMileageExchangeResponseParam::ItemType' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxMileageExchangeResponseParam, ItemCode) == 0x000010, "Member 'FCosmosLootboxMileageExchangeResponseParam::ItemCode' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxMileageExchangeResponseParam, ItemNum) == 0x000014, "Member 'FCosmosLootboxMileageExchangeResponseParam::ItemNum' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosMileageItemData
// 0x0020 (0x0020 - 0x0000)
struct FCosmosMileageItemData final
{
public:
	class FString                                 ExchangeItemId;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemType;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCode;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCosmosMileageItemData) == 0x000008, "Wrong alignment on FCosmosMileageItemData");
static_assert(sizeof(FCosmosMileageItemData) == 0x000020, "Wrong size on FCosmosMileageItemData");
static_assert(offsetof(FCosmosMileageItemData, ExchangeItemId) == 0x000000, "Member 'FCosmosMileageItemData::ExchangeItemId' has a wrong offset!");
static_assert(offsetof(FCosmosMileageItemData, ItemType) == 0x000010, "Member 'FCosmosMileageItemData::ItemType' has a wrong offset!");
static_assert(offsetof(FCosmosMileageItemData, ItemCode) == 0x000014, "Member 'FCosmosMileageItemData::ItemCode' has a wrong offset!");
static_assert(offsetof(FCosmosMileageItemData, ItemNum) == 0x000018, "Member 'FCosmosMileageItemData::ItemNum' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosLootboxGetMileageItemListResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosLootboxGetMileageItemListResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootboxCode;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCosmosMileageItemData>         MileageItemList;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosLootboxGetMileageItemListResponseParam) == 0x000008, "Wrong alignment on FCosmosLootboxGetMileageItemListResponseParam");
static_assert(sizeof(FCosmosLootboxGetMileageItemListResponseParam) == 0x000018, "Wrong size on FCosmosLootboxGetMileageItemListResponseParam");
static_assert(offsetof(FCosmosLootboxGetMileageItemListResponseParam, Status) == 0x000000, "Member 'FCosmosLootboxGetMileageItemListResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxGetMileageItemListResponseParam, LootboxCode) == 0x000004, "Member 'FCosmosLootboxGetMileageItemListResponseParam::LootboxCode' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxGetMileageItemListResponseParam, MileageItemList) == 0x000008, "Member 'FCosmosLootboxGetMileageItemListResponseParam::MileageItemList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosLootboxResultData
// 0x0030 (0x0030 - 0x0000)
struct FCosmosLootboxResultData final
{
public:
	class FString                                 ItemConfigId;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemType;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCode;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetMileage;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReplaceFlag;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResetBoxFlg;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         boxRemaining;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AuraStep;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosLootboxResultData) == 0x000008, "Wrong alignment on FCosmosLootboxResultData");
static_assert(sizeof(FCosmosLootboxResultData) == 0x000030, "Wrong size on FCosmosLootboxResultData");
static_assert(offsetof(FCosmosLootboxResultData, ItemConfigId) == 0x000000, "Member 'FCosmosLootboxResultData::ItemConfigId' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxResultData, ItemType) == 0x000010, "Member 'FCosmosLootboxResultData::ItemType' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxResultData, ItemCode) == 0x000014, "Member 'FCosmosLootboxResultData::ItemCode' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxResultData, ItemNum) == 0x000018, "Member 'FCosmosLootboxResultData::ItemNum' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxResultData, GetMileage) == 0x00001C, "Member 'FCosmosLootboxResultData::GetMileage' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxResultData, ReplaceFlag) == 0x000020, "Member 'FCosmosLootboxResultData::ReplaceFlag' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxResultData, ResetBoxFlg) == 0x000024, "Member 'FCosmosLootboxResultData::ResetBoxFlg' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxResultData, boxRemaining) == 0x000028, "Member 'FCosmosLootboxResultData::boxRemaining' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxResultData, AuraStep) == 0x00002C, "Member 'FCosmosLootboxResultData::AuraStep' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosLootboxRunResponseParam
// 0x0028 (0x0028 - 0x0000)
struct FCosmosLootboxRunResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalCount;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LootboxLogId;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCosmosLootboxResultData>       LootboxResultList;                                 // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosLootboxRunResponseParam) == 0x000008, "Wrong alignment on FCosmosLootboxRunResponseParam");
static_assert(sizeof(FCosmosLootboxRunResponseParam) == 0x000028, "Wrong size on FCosmosLootboxRunResponseParam");
static_assert(offsetof(FCosmosLootboxRunResponseParam, Status) == 0x000000, "Member 'FCosmosLootboxRunResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxRunResponseParam, TotalCount) == 0x000004, "Member 'FCosmosLootboxRunResponseParam::TotalCount' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxRunResponseParam, LootboxLogId) == 0x000008, "Member 'FCosmosLootboxRunResponseParam::LootboxLogId' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxRunResponseParam, LootboxResultList) == 0x000018, "Member 'FCosmosLootboxRunResponseParam::LootboxResultList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosPickUpItemInfo
// 0x0008 (0x0008 - 0x0000)
struct FCosmosPickUpItemInfo final
{
public:
	int32                                         ItemType;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCode;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosPickUpItemInfo) == 0x000004, "Wrong alignment on FCosmosPickUpItemInfo");
static_assert(sizeof(FCosmosPickUpItemInfo) == 0x000008, "Wrong size on FCosmosPickUpItemInfo");
static_assert(offsetof(FCosmosPickUpItemInfo, ItemType) == 0x000000, "Member 'FCosmosPickUpItemInfo::ItemType' has a wrong offset!");
static_assert(offsetof(FCosmosPickUpItemInfo, ItemCode) == 0x000004, "Member 'FCosmosPickUpItemInfo::ItemCode' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosPaymentInfo
// 0x0018 (0x0018 - 0x0000)
struct FCosmosPaymentInfo final
{
public:
	class FString                                 PaymentId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PushFlg;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetMileage;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosPaymentInfo) == 0x000008, "Wrong alignment on FCosmosPaymentInfo");
static_assert(sizeof(FCosmosPaymentInfo) == 0x000018, "Wrong size on FCosmosPaymentInfo");
static_assert(offsetof(FCosmosPaymentInfo, PaymentId) == 0x000000, "Member 'FCosmosPaymentInfo::PaymentId' has a wrong offset!");
static_assert(offsetof(FCosmosPaymentInfo, PushFlg) == 0x000010, "Member 'FCosmosPaymentInfo::PushFlg' has a wrong offset!");
static_assert(offsetof(FCosmosPaymentInfo, GetMileage) == 0x000014, "Member 'FCosmosPaymentInfo::GetMileage' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosLootboxData
// 0x0058 (0x0058 - 0x0000)
struct FCosmosLootboxData final
{
public:
	int32                                         LootboxCode;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewFlgTime;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResetBoxFlg;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MileageFlg;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserStep;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxStep;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserMileage;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMileage;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserLimitedNum;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RarityGashaStatus;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCosmosPickUpItemInfo>          PickUpItemInfos;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCosmosPaymentInfo>             PaymentInfos;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCosmosPickUpItemInfo>          OtherItemInfos;                                    // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosLootboxData) == 0x000008, "Wrong alignment on FCosmosLootboxData");
static_assert(sizeof(FCosmosLootboxData) == 0x000058, "Wrong size on FCosmosLootboxData");
static_assert(offsetof(FCosmosLootboxData, LootboxCode) == 0x000000, "Member 'FCosmosLootboxData::LootboxCode' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxData, NewFlgTime) == 0x000004, "Member 'FCosmosLootboxData::NewFlgTime' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxData, ResetBoxFlg) == 0x000008, "Member 'FCosmosLootboxData::ResetBoxFlg' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxData, MileageFlg) == 0x00000C, "Member 'FCosmosLootboxData::MileageFlg' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxData, UserStep) == 0x000010, "Member 'FCosmosLootboxData::UserStep' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxData, MaxStep) == 0x000014, "Member 'FCosmosLootboxData::MaxStep' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxData, UserMileage) == 0x000018, "Member 'FCosmosLootboxData::UserMileage' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxData, MaxMileage) == 0x00001C, "Member 'FCosmosLootboxData::MaxMileage' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxData, UserLimitedNum) == 0x000020, "Member 'FCosmosLootboxData::UserLimitedNum' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxData, RarityGashaStatus) == 0x000024, "Member 'FCosmosLootboxData::RarityGashaStatus' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxData, PickUpItemInfos) == 0x000028, "Member 'FCosmosLootboxData::PickUpItemInfos' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxData, PaymentInfos) == 0x000038, "Member 'FCosmosLootboxData::PaymentInfos' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxData, OtherItemInfos) == 0x000048, "Member 'FCosmosLootboxData::OtherItemInfos' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosLootboxGetListResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosLootboxGetListResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosLootboxData>             LootboxList;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosLootboxGetListResponseParam) == 0x000008, "Wrong alignment on FCosmosLootboxGetListResponseParam");
static_assert(sizeof(FCosmosLootboxGetListResponseParam) == 0x000018, "Wrong size on FCosmosLootboxGetListResponseParam");
static_assert(offsetof(FCosmosLootboxGetListResponseParam, Status) == 0x000000, "Member 'FCosmosLootboxGetListResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosLootboxGetListResponseParam, LootboxList) == 0x000008, "Member 'FCosmosLootboxGetListResponseParam::LootboxList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosRankingData
// 0x0080 (0x0080 - 0x0000)
struct FCosmosRankingData final
{
public:
	int32                                         Ranking;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Emblems;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Point;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MyFlg;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankCode;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserId;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformUserId;                                    // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildId;                                           // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildName;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildMemberNum;                                    // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildMemberMax;                                    // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserName;                                          // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosRankingData) == 0x000008, "Wrong alignment on FCosmosRankingData");
static_assert(sizeof(FCosmosRankingData) == 0x000080, "Wrong size on FCosmosRankingData");
static_assert(offsetof(FCosmosRankingData, Ranking) == 0x000000, "Member 'FCosmosRankingData::Ranking' has a wrong offset!");
static_assert(offsetof(FCosmosRankingData, Emblems) == 0x000008, "Member 'FCosmosRankingData::Emblems' has a wrong offset!");
static_assert(offsetof(FCosmosRankingData, Point) == 0x000018, "Member 'FCosmosRankingData::Point' has a wrong offset!");
static_assert(offsetof(FCosmosRankingData, MyFlg) == 0x00001C, "Member 'FCosmosRankingData::MyFlg' has a wrong offset!");
static_assert(offsetof(FCosmosRankingData, RankCode) == 0x000020, "Member 'FCosmosRankingData::RankCode' has a wrong offset!");
static_assert(offsetof(FCosmosRankingData, UserId) == 0x000028, "Member 'FCosmosRankingData::UserId' has a wrong offset!");
static_assert(offsetof(FCosmosRankingData, PlatformUserId) == 0x000038, "Member 'FCosmosRankingData::PlatformUserId' has a wrong offset!");
static_assert(offsetof(FCosmosRankingData, GuildId) == 0x000048, "Member 'FCosmosRankingData::GuildId' has a wrong offset!");
static_assert(offsetof(FCosmosRankingData, GuildName) == 0x000058, "Member 'FCosmosRankingData::GuildName' has a wrong offset!");
static_assert(offsetof(FCosmosRankingData, GuildMemberNum) == 0x000068, "Member 'FCosmosRankingData::GuildMemberNum' has a wrong offset!");
static_assert(offsetof(FCosmosRankingData, GuildMemberMax) == 0x00006C, "Member 'FCosmosRankingData::GuildMemberMax' has a wrong offset!");
static_assert(offsetof(FCosmosRankingData, UserName) == 0x000070, "Member 'FCosmosRankingData::UserName' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosRankingGetRankingResponseParam
// 0x0028 (0x0028 - 0x0000)
struct FCosmosRankingGetRankingResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalNum;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerRank;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LeagueCode;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsLeagueChange;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosRankingData>             RankingList;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosRankingGetRankingResponseParam) == 0x000008, "Wrong alignment on FCosmosRankingGetRankingResponseParam");
static_assert(sizeof(FCosmosRankingGetRankingResponseParam) == 0x000028, "Wrong size on FCosmosRankingGetRankingResponseParam");
static_assert(offsetof(FCosmosRankingGetRankingResponseParam, Status) == 0x000000, "Member 'FCosmosRankingGetRankingResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosRankingGetRankingResponseParam, TotalNum) == 0x000004, "Member 'FCosmosRankingGetRankingResponseParam::TotalNum' has a wrong offset!");
static_assert(offsetof(FCosmosRankingGetRankingResponseParam, PlayerRank) == 0x000008, "Member 'FCosmosRankingGetRankingResponseParam::PlayerRank' has a wrong offset!");
static_assert(offsetof(FCosmosRankingGetRankingResponseParam, LeagueCode) == 0x00000C, "Member 'FCosmosRankingGetRankingResponseParam::LeagueCode' has a wrong offset!");
static_assert(offsetof(FCosmosRankingGetRankingResponseParam, IsLeagueChange) == 0x000010, "Member 'FCosmosRankingGetRankingResponseParam::IsLeagueChange' has a wrong offset!");
static_assert(offsetof(FCosmosRankingGetRankingResponseParam, RankingList) == 0x000018, "Member 'FCosmosRankingGetRankingResponseParam::RankingList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosMissionData
// 0x0028 (0x0028 - 0x0000)
struct FCosmosMissionData final
{
public:
	int32                                         MissionCode;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserTargetValue;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AchievementStatus;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TargetType;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionStarPoint;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCosmosMissionData) == 0x000008, "Wrong alignment on FCosmosMissionData");
static_assert(sizeof(FCosmosMissionData) == 0x000028, "Wrong size on FCosmosMissionData");
static_assert(offsetof(FCosmosMissionData, MissionCode) == 0x000000, "Member 'FCosmosMissionData::MissionCode' has a wrong offset!");
static_assert(offsetof(FCosmosMissionData, UserTargetValue) == 0x000004, "Member 'FCosmosMissionData::UserTargetValue' has a wrong offset!");
static_assert(offsetof(FCosmosMissionData, AchievementStatus) == 0x000008, "Member 'FCosmosMissionData::AchievementStatus' has a wrong offset!");
static_assert(offsetof(FCosmosMissionData, TargetType) == 0x000010, "Member 'FCosmosMissionData::TargetType' has a wrong offset!");
static_assert(offsetof(FCosmosMissionData, MissionStarPoint) == 0x000020, "Member 'FCosmosMissionData::MissionStarPoint' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosMissionStatusData
// 0x0040 (0x0040 - 0x0000)
struct FCosmosMissionStatusData final
{
public:
	class FString                                 MissionTypeId;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AchievementStar;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MissionExpireAt;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventCode;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosMissionData>             MissionList;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosMissionStatusData) == 0x000008, "Wrong alignment on FCosmosMissionStatusData");
static_assert(sizeof(FCosmosMissionStatusData) == 0x000040, "Wrong size on FCosmosMissionStatusData");
static_assert(offsetof(FCosmosMissionStatusData, MissionTypeId) == 0x000000, "Member 'FCosmosMissionStatusData::MissionTypeId' has a wrong offset!");
static_assert(offsetof(FCosmosMissionStatusData, AchievementStar) == 0x000010, "Member 'FCosmosMissionStatusData::AchievementStar' has a wrong offset!");
static_assert(offsetof(FCosmosMissionStatusData, MissionExpireAt) == 0x000018, "Member 'FCosmosMissionStatusData::MissionExpireAt' has a wrong offset!");
static_assert(offsetof(FCosmosMissionStatusData, EventCode) == 0x000028, "Member 'FCosmosMissionStatusData::EventCode' has a wrong offset!");
static_assert(offsetof(FCosmosMissionStatusData, MissionList) == 0x000030, "Member 'FCosmosMissionStatusData::MissionList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosMissionGetListResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosMissionGetListResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosMissionStatusData>       MissionStatuses;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosMissionGetListResponseParam) == 0x000008, "Wrong alignment on FCosmosMissionGetListResponseParam");
static_assert(sizeof(FCosmosMissionGetListResponseParam) == 0x000018, "Wrong size on FCosmosMissionGetListResponseParam");
static_assert(offsetof(FCosmosMissionGetListResponseParam, Status) == 0x000000, "Member 'FCosmosMissionGetListResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosMissionGetListResponseParam, MissionStatuses) == 0x000008, "Member 'FCosmosMissionGetListResponseParam::MissionStatuses' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosCommonpurchaseGetFundSettlementTextResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosCommonpurchaseGetFundSettlementTextResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosCommonpurchaseGetFundSettlementTextResponseParam) == 0x000008, "Wrong alignment on FCosmosCommonpurchaseGetFundSettlementTextResponseParam");
static_assert(sizeof(FCosmosCommonpurchaseGetFundSettlementTextResponseParam) == 0x000018, "Wrong size on FCosmosCommonpurchaseGetFundSettlementTextResponseParam");
static_assert(offsetof(FCosmosCommonpurchaseGetFundSettlementTextResponseParam, Status) == 0x000000, "Member 'FCosmosCommonpurchaseGetFundSettlementTextResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosCommonpurchaseGetFundSettlementTextResponseParam, Text) == 0x000008, "Member 'FCosmosCommonpurchaseGetFundSettlementTextResponseParam::Text' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosCommonpurchaseTokushoResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosCommonpurchaseTokushoResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosCommonpurchaseTokushoResponseParam) == 0x000008, "Wrong alignment on FCosmosCommonpurchaseTokushoResponseParam");
static_assert(sizeof(FCosmosCommonpurchaseTokushoResponseParam) == 0x000018, "Wrong size on FCosmosCommonpurchaseTokushoResponseParam");
static_assert(offsetof(FCosmosCommonpurchaseTokushoResponseParam, Status) == 0x000000, "Member 'FCosmosCommonpurchaseTokushoResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosCommonpurchaseTokushoResponseParam, Text) == 0x000008, "Member 'FCosmosCommonpurchaseTokushoResponseParam::Text' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosCommonpurchaseGetPurchaseStatusResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosCommonpurchaseGetPurchaseStatusResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PurchaseInfoId;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosCommonpurchaseGetPurchaseStatusResponseParam) == 0x000008, "Wrong alignment on FCosmosCommonpurchaseGetPurchaseStatusResponseParam");
static_assert(sizeof(FCosmosCommonpurchaseGetPurchaseStatusResponseParam) == 0x000018, "Wrong size on FCosmosCommonpurchaseGetPurchaseStatusResponseParam");
static_assert(offsetof(FCosmosCommonpurchaseGetPurchaseStatusResponseParam, Status) == 0x000000, "Member 'FCosmosCommonpurchaseGetPurchaseStatusResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosCommonpurchaseGetPurchaseStatusResponseParam, PurchaseInfoId) == 0x000008, "Member 'FCosmosCommonpurchaseGetPurchaseStatusResponseParam::PurchaseInfoId' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosCommonpurchaseStartPurchaseResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosCommonpurchaseStartPurchaseResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PurchaseInfoId;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosCommonpurchaseStartPurchaseResponseParam) == 0x000008, "Wrong alignment on FCosmosCommonpurchaseStartPurchaseResponseParam");
static_assert(sizeof(FCosmosCommonpurchaseStartPurchaseResponseParam) == 0x000018, "Wrong size on FCosmosCommonpurchaseStartPurchaseResponseParam");
static_assert(offsetof(FCosmosCommonpurchaseStartPurchaseResponseParam, Status) == 0x000000, "Member 'FCosmosCommonpurchaseStartPurchaseResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosCommonpurchaseStartPurchaseResponseParam, PurchaseInfoId) == 0x000008, "Member 'FCosmosCommonpurchaseStartPurchaseResponseParam::PurchaseInfoId' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosCatalogData
// 0x0070 (0x0070 - 0x0000)
struct FCosmosCatalogData final
{
public:
	class FString                                 CatalogId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Caption;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Image;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EstablishedPrice;                                  // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrentPrice;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Option;                                            // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosCatalogData) == 0x000008, "Wrong alignment on FCosmosCatalogData");
static_assert(sizeof(FCosmosCatalogData) == 0x000070, "Wrong size on FCosmosCatalogData");
static_assert(offsetof(FCosmosCatalogData, CatalogId) == 0x000000, "Member 'FCosmosCatalogData::CatalogId' has a wrong offset!");
static_assert(offsetof(FCosmosCatalogData, Name) == 0x000010, "Member 'FCosmosCatalogData::Name' has a wrong offset!");
static_assert(offsetof(FCosmosCatalogData, Caption) == 0x000020, "Member 'FCosmosCatalogData::Caption' has a wrong offset!");
static_assert(offsetof(FCosmosCatalogData, Image) == 0x000030, "Member 'FCosmosCatalogData::Image' has a wrong offset!");
static_assert(offsetof(FCosmosCatalogData, EstablishedPrice) == 0x000040, "Member 'FCosmosCatalogData::EstablishedPrice' has a wrong offset!");
static_assert(offsetof(FCosmosCatalogData, CurrentPrice) == 0x000050, "Member 'FCosmosCatalogData::CurrentPrice' has a wrong offset!");
static_assert(offsetof(FCosmosCatalogData, Option) == 0x000060, "Member 'FCosmosCatalogData::Option' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosCommonpurchaseGetCatalogResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosCommonpurchaseGetCatalogResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosCatalogData>             CatalogList;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosCommonpurchaseGetCatalogResponseParam) == 0x000008, "Wrong alignment on FCosmosCommonpurchaseGetCatalogResponseParam");
static_assert(sizeof(FCosmosCommonpurchaseGetCatalogResponseParam) == 0x000018, "Wrong size on FCosmosCommonpurchaseGetCatalogResponseParam");
static_assert(offsetof(FCosmosCommonpurchaseGetCatalogResponseParam, Status) == 0x000000, "Member 'FCosmosCommonpurchaseGetCatalogResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosCommonpurchaseGetCatalogResponseParam, CatalogList) == 0x000008, "Member 'FCosmosCommonpurchaseGetCatalogResponseParam::CatalogList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosCurrencyData
// 0x0028 (0x0028 - 0x0000)
struct FCosmosCurrencyData final
{
public:
	class FString                                 Limit;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitCurrencyNum;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ChargedFlag;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosCurrencyData) == 0x000008, "Wrong alignment on FCosmosCurrencyData");
static_assert(sizeof(FCosmosCurrencyData) == 0x000028, "Wrong size on FCosmosCurrencyData");
static_assert(offsetof(FCosmosCurrencyData, Limit) == 0x000000, "Member 'FCosmosCurrencyData::Limit' has a wrong offset!");
static_assert(offsetof(FCosmosCurrencyData, LimitCurrencyNum) == 0x000010, "Member 'FCosmosCurrencyData::LimitCurrencyNum' has a wrong offset!");
static_assert(offsetof(FCosmosCurrencyData, ChargedFlag) == 0x000018, "Member 'FCosmosCurrencyData::ChargedFlag' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosGamecurrencyGetLimitedOwnedResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosGamecurrencyGetLimitedOwnedResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosCurrencyData>            CurrencyList;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosGamecurrencyGetLimitedOwnedResponseParam) == 0x000008, "Wrong alignment on FCosmosGamecurrencyGetLimitedOwnedResponseParam");
static_assert(sizeof(FCosmosGamecurrencyGetLimitedOwnedResponseParam) == 0x000018, "Wrong size on FCosmosGamecurrencyGetLimitedOwnedResponseParam");
static_assert(offsetof(FCosmosGamecurrencyGetLimitedOwnedResponseParam, Status) == 0x000000, "Member 'FCosmosGamecurrencyGetLimitedOwnedResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosGamecurrencyGetLimitedOwnedResponseParam, CurrencyList) == 0x000008, "Member 'FCosmosGamecurrencyGetLimitedOwnedResponseParam::CurrencyList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosGamecurrencyGetOwnedResponseParam
// 0x0038 (0x0038 - 0x0000)
struct FCosmosGamecurrencyGetOwnedResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalChargedCurrencyNum;                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalFreeCurrencyNum;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RecentLimit;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecentLimitCurrencyNum;                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RecentChargedFlag;                                 // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosGamecurrencyGetOwnedResponseParam) == 0x000008, "Wrong alignment on FCosmosGamecurrencyGetOwnedResponseParam");
static_assert(sizeof(FCosmosGamecurrencyGetOwnedResponseParam) == 0x000038, "Wrong size on FCosmosGamecurrencyGetOwnedResponseParam");
static_assert(offsetof(FCosmosGamecurrencyGetOwnedResponseParam, Status) == 0x000000, "Member 'FCosmosGamecurrencyGetOwnedResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosGamecurrencyGetOwnedResponseParam, TotalChargedCurrencyNum) == 0x000004, "Member 'FCosmosGamecurrencyGetOwnedResponseParam::TotalChargedCurrencyNum' has a wrong offset!");
static_assert(offsetof(FCosmosGamecurrencyGetOwnedResponseParam, TotalFreeCurrencyNum) == 0x000008, "Member 'FCosmosGamecurrencyGetOwnedResponseParam::TotalFreeCurrencyNum' has a wrong offset!");
static_assert(offsetof(FCosmosGamecurrencyGetOwnedResponseParam, RecentLimit) == 0x000010, "Member 'FCosmosGamecurrencyGetOwnedResponseParam::RecentLimit' has a wrong offset!");
static_assert(offsetof(FCosmosGamecurrencyGetOwnedResponseParam, RecentLimitCurrencyNum) == 0x000020, "Member 'FCosmosGamecurrencyGetOwnedResponseParam::RecentLimitCurrencyNum' has a wrong offset!");
static_assert(offsetof(FCosmosGamecurrencyGetOwnedResponseParam, RecentChargedFlag) == 0x000028, "Member 'FCosmosGamecurrencyGetOwnedResponseParam::RecentChargedFlag' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosUseItemData
// 0x000C (0x000C - 0x0000)
struct FCosmosUseItemData final
{
public:
	int32                                         ItemCategoryCode;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCode;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosUseItemData) == 0x000004, "Wrong alignment on FCosmosUseItemData");
static_assert(sizeof(FCosmosUseItemData) == 0x00000C, "Wrong size on FCosmosUseItemData");
static_assert(offsetof(FCosmosUseItemData, ItemCategoryCode) == 0x000000, "Member 'FCosmosUseItemData::ItemCategoryCode' has a wrong offset!");
static_assert(offsetof(FCosmosUseItemData, ItemCode) == 0x000004, "Member 'FCosmosUseItemData::ItemCode' has a wrong offset!");
static_assert(offsetof(FCosmosUseItemData, ItemNum) == 0x000008, "Member 'FCosmosUseItemData::ItemNum' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosItemItemPossessionResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosItemItemPossessionResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosUseItemData>             ItemList;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosItemItemPossessionResponseParam) == 0x000008, "Wrong alignment on FCosmosItemItemPossessionResponseParam");
static_assert(sizeof(FCosmosItemItemPossessionResponseParam) == 0x000018, "Wrong size on FCosmosItemItemPossessionResponseParam");
static_assert(offsetof(FCosmosItemItemPossessionResponseParam, Status) == 0x000000, "Member 'FCosmosItemItemPossessionResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosItemItemPossessionResponseParam, ItemList) == 0x000008, "Member 'FCosmosItemItemPossessionResponseParam::ItemList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosOwnedItemData
// 0x0020 (0x0020 - 0x0000)
struct FCosmosOwnedItemData final
{
public:
	int32                                         ItemCategory;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCode;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LimitTime;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosOwnedItemData) == 0x000008, "Wrong alignment on FCosmosOwnedItemData");
static_assert(sizeof(FCosmosOwnedItemData) == 0x000020, "Wrong size on FCosmosOwnedItemData");
static_assert(offsetof(FCosmosOwnedItemData, ItemCategory) == 0x000000, "Member 'FCosmosOwnedItemData::ItemCategory' has a wrong offset!");
static_assert(offsetof(FCosmosOwnedItemData, ItemCode) == 0x000004, "Member 'FCosmosOwnedItemData::ItemCode' has a wrong offset!");
static_assert(offsetof(FCosmosOwnedItemData, ItemNum) == 0x000008, "Member 'FCosmosOwnedItemData::ItemNum' has a wrong offset!");
static_assert(offsetof(FCosmosOwnedItemData, LimitTime) == 0x000010, "Member 'FCosmosOwnedItemData::LimitTime' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosItemGetOwnedResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosItemGetOwnedResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosOwnedItemData>           Items;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosItemGetOwnedResponseParam) == 0x000008, "Wrong alignment on FCosmosItemGetOwnedResponseParam");
static_assert(sizeof(FCosmosItemGetOwnedResponseParam) == 0x000018, "Wrong size on FCosmosItemGetOwnedResponseParam");
static_assert(offsetof(FCosmosItemGetOwnedResponseParam, Status) == 0x000000, "Member 'FCosmosItemGetOwnedResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosItemGetOwnedResponseParam, Items) == 0x000008, "Member 'FCosmosItemGetOwnedResponseParam::Items' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosPartsData
// 0x0018 (0x0018 - 0x0000)
struct FCosmosPartsData final
{
public:
	class FString                                 PartsName;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartsCode;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCosmosPartsData) == 0x000008, "Wrong alignment on FCosmosPartsData");
static_assert(sizeof(FCosmosPartsData) == 0x000018, "Wrong size on FCosmosPartsData");
static_assert(offsetof(FCosmosPartsData, PartsName) == 0x000000, "Member 'FCosmosPartsData::PartsName' has a wrong offset!");
static_assert(offsetof(FCosmosPartsData, PartsCode) == 0x000010, "Member 'FCosmosPartsData::PartsCode' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosMyadGetMyadResponseParam
// 0x0078 (0x0078 - 0x0000)
struct FCosmosMyadGetMyadResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserId;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserName;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MyAdNo;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MessageCode;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosPartsData>               SelectParts;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ProfileFlg;                                        // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StreamingStatus;                                   // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Time;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformId;                                        // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosMyadGetMyadResponseParam) == 0x000008, "Wrong alignment on FCosmosMyadGetMyadResponseParam");
static_assert(sizeof(FCosmosMyadGetMyadResponseParam) == 0x000078, "Wrong size on FCosmosMyadGetMyadResponseParam");
static_assert(offsetof(FCosmosMyadGetMyadResponseParam, Status) == 0x000000, "Member 'FCosmosMyadGetMyadResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosMyadGetMyadResponseParam, UserId) == 0x000008, "Member 'FCosmosMyadGetMyadResponseParam::UserId' has a wrong offset!");
static_assert(offsetof(FCosmosMyadGetMyadResponseParam, UserName) == 0x000018, "Member 'FCosmosMyadGetMyadResponseParam::UserName' has a wrong offset!");
static_assert(offsetof(FCosmosMyadGetMyadResponseParam, MyAdNo) == 0x000028, "Member 'FCosmosMyadGetMyadResponseParam::MyAdNo' has a wrong offset!");
static_assert(offsetof(FCosmosMyadGetMyadResponseParam, MessageCode) == 0x000038, "Member 'FCosmosMyadGetMyadResponseParam::MessageCode' has a wrong offset!");
static_assert(offsetof(FCosmosMyadGetMyadResponseParam, SelectParts) == 0x000040, "Member 'FCosmosMyadGetMyadResponseParam::SelectParts' has a wrong offset!");
static_assert(offsetof(FCosmosMyadGetMyadResponseParam, ProfileFlg) == 0x000050, "Member 'FCosmosMyadGetMyadResponseParam::ProfileFlg' has a wrong offset!");
static_assert(offsetof(FCosmosMyadGetMyadResponseParam, StreamingStatus) == 0x000054, "Member 'FCosmosMyadGetMyadResponseParam::StreamingStatus' has a wrong offset!");
static_assert(offsetof(FCosmosMyadGetMyadResponseParam, Time) == 0x000058, "Member 'FCosmosMyadGetMyadResponseParam::Time' has a wrong offset!");
static_assert(offsetof(FCosmosMyadGetMyadResponseParam, PlatformId) == 0x000068, "Member 'FCosmosMyadGetMyadResponseParam::PlatformId' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosMyadAdCreateResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosMyadAdCreateResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MyADId;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosMyadAdCreateResponseParam) == 0x000008, "Wrong alignment on FCosmosMyadAdCreateResponseParam");
static_assert(sizeof(FCosmosMyadAdCreateResponseParam) == 0x000018, "Wrong size on FCosmosMyadAdCreateResponseParam");
static_assert(offsetof(FCosmosMyadAdCreateResponseParam, Status) == 0x000000, "Member 'FCosmosMyadAdCreateResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosMyadAdCreateResponseParam, MyADId) == 0x000008, "Member 'FCosmosMyadAdCreateResponseParam::MyADId' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosMyAdData
// 0x0090 (0x0090 - 0x0000)
struct FCosmosMyAdData final
{
public:
	class FString                                 UserName;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MyADId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MyAdNo;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MessageCode;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosPartsData>               SelectParts;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ProfileFlg;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status;                                            // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Time;                                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformId;                                        // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FirstEmblemCode;                                   // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondEmblemCode;                                  // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThirdEmblemCode;                                   // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCosmosMyAdData) == 0x000008, "Wrong alignment on FCosmosMyAdData");
static_assert(sizeof(FCosmosMyAdData) == 0x000090, "Wrong size on FCosmosMyAdData");
static_assert(offsetof(FCosmosMyAdData, UserName) == 0x000000, "Member 'FCosmosMyAdData::UserName' has a wrong offset!");
static_assert(offsetof(FCosmosMyAdData, MyADId) == 0x000010, "Member 'FCosmosMyAdData::MyADId' has a wrong offset!");
static_assert(offsetof(FCosmosMyAdData, MyAdNo) == 0x000020, "Member 'FCosmosMyAdData::MyAdNo' has a wrong offset!");
static_assert(offsetof(FCosmosMyAdData, MessageCode) == 0x000030, "Member 'FCosmosMyAdData::MessageCode' has a wrong offset!");
static_assert(offsetof(FCosmosMyAdData, SelectParts) == 0x000038, "Member 'FCosmosMyAdData::SelectParts' has a wrong offset!");
static_assert(offsetof(FCosmosMyAdData, ProfileFlg) == 0x000048, "Member 'FCosmosMyAdData::ProfileFlg' has a wrong offset!");
static_assert(offsetof(FCosmosMyAdData, Status) == 0x00004C, "Member 'FCosmosMyAdData::Status' has a wrong offset!");
static_assert(offsetof(FCosmosMyAdData, Time) == 0x000050, "Member 'FCosmosMyAdData::Time' has a wrong offset!");
static_assert(offsetof(FCosmosMyAdData, PlatformId) == 0x000060, "Member 'FCosmosMyAdData::PlatformId' has a wrong offset!");
static_assert(offsetof(FCosmosMyAdData, UserId) == 0x000070, "Member 'FCosmosMyAdData::UserId' has a wrong offset!");
static_assert(offsetof(FCosmosMyAdData, FirstEmblemCode) == 0x000080, "Member 'FCosmosMyAdData::FirstEmblemCode' has a wrong offset!");
static_assert(offsetof(FCosmosMyAdData, SecondEmblemCode) == 0x000084, "Member 'FCosmosMyAdData::SecondEmblemCode' has a wrong offset!");
static_assert(offsetof(FCosmosMyAdData, ThirdEmblemCode) == 0x000088, "Member 'FCosmosMyAdData::ThirdEmblemCode' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosMyadGetListResponseParam
// 0x0020 (0x0020 - 0x0000)
struct FCosmosMyadGetListResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosMyAdData>                MyAds;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         HaveGold;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosMyadGetListResponseParam) == 0x000008, "Wrong alignment on FCosmosMyadGetListResponseParam");
static_assert(sizeof(FCosmosMyadGetListResponseParam) == 0x000020, "Wrong size on FCosmosMyadGetListResponseParam");
static_assert(offsetof(FCosmosMyadGetListResponseParam, Status) == 0x000000, "Member 'FCosmosMyadGetListResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosMyadGetListResponseParam, MyAds) == 0x000008, "Member 'FCosmosMyadGetListResponseParam::MyAds' has a wrong offset!");
static_assert(offsetof(FCosmosMyadGetListResponseParam, HaveGold) == 0x000018, "Member 'FCosmosMyadGetListResponseParam::HaveGold' has a wrong offset!");
static_assert(offsetof(FCosmosMyadGetListResponseParam, Count) == 0x00001C, "Member 'FCosmosMyadGetListResponseParam::Count' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosVoiceParam
// 0x0008 (0x0008 - 0x0000)
struct FCosmosVoiceParam final
{
public:
	int32                                         VoiceNo;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoiceCode;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosVoiceParam) == 0x000004, "Wrong alignment on FCosmosVoiceParam");
static_assert(sizeof(FCosmosVoiceParam) == 0x000008, "Wrong size on FCosmosVoiceParam");
static_assert(offsetof(FCosmosVoiceParam, VoiceNo) == 0x000000, "Member 'FCosmosVoiceParam::VoiceNo' has a wrong offset!");
static_assert(offsetof(FCosmosVoiceParam, VoiceCode) == 0x000004, "Member 'FCosmosVoiceParam::VoiceCode' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosEmoteParam
// 0x0008 (0x0008 - 0x0000)
struct FCosmosEmoteParam final
{
public:
	int32                                         EmoteNo;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EmoteCode;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosEmoteParam) == 0x000004, "Wrong alignment on FCosmosEmoteParam");
static_assert(sizeof(FCosmosEmoteParam) == 0x000008, "Wrong size on FCosmosEmoteParam");
static_assert(offsetof(FCosmosEmoteParam, EmoteNo) == 0x000000, "Member 'FCosmosEmoteParam::EmoteNo' has a wrong offset!");
static_assert(offsetof(FCosmosEmoteParam, EmoteCode) == 0x000004, "Member 'FCosmosEmoteParam::EmoteCode' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosEmblemParam
// 0x0008 (0x0008 - 0x0000)
struct FCosmosEmblemParam final
{
public:
	int32                                         EmblemNo;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EmblemCode;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosEmblemParam) == 0x000004, "Wrong alignment on FCosmosEmblemParam");
static_assert(sizeof(FCosmosEmblemParam) == 0x000008, "Wrong size on FCosmosEmblemParam");
static_assert(offsetof(FCosmosEmblemParam, EmblemNo) == 0x000000, "Member 'FCosmosEmblemParam::EmblemNo' has a wrong offset!");
static_assert(offsetof(FCosmosEmblemParam, EmblemCode) == 0x000004, "Member 'FCosmosEmblemParam::EmblemCode' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosCustomizeData
// 0x0058 (0x0058 - 0x0000)
struct FCosmosCustomizeData final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterCode;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostumeCode;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCosmosVoiceParam>              Voices;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCosmosEmoteParam>              Emotes;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCosmosEmblemParam>             Emblems;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         IsOwnedCharacter;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AuraStep;                                          // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SettingAura;                                       // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActionChangeCode;                                  // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosCustomizeData) == 0x000008, "Wrong alignment on FCosmosCustomizeData");
static_assert(sizeof(FCosmosCustomizeData) == 0x000058, "Wrong size on FCosmosCustomizeData");
static_assert(offsetof(FCosmosCustomizeData, UserId) == 0x000000, "Member 'FCosmosCustomizeData::UserId' has a wrong offset!");
static_assert(offsetof(FCosmosCustomizeData, CharacterCode) == 0x000010, "Member 'FCosmosCustomizeData::CharacterCode' has a wrong offset!");
static_assert(offsetof(FCosmosCustomizeData, CostumeCode) == 0x000014, "Member 'FCosmosCustomizeData::CostumeCode' has a wrong offset!");
static_assert(offsetof(FCosmosCustomizeData, Voices) == 0x000018, "Member 'FCosmosCustomizeData::Voices' has a wrong offset!");
static_assert(offsetof(FCosmosCustomizeData, Emotes) == 0x000028, "Member 'FCosmosCustomizeData::Emotes' has a wrong offset!");
static_assert(offsetof(FCosmosCustomizeData, Emblems) == 0x000038, "Member 'FCosmosCustomizeData::Emblems' has a wrong offset!");
static_assert(offsetof(FCosmosCustomizeData, IsOwnedCharacter) == 0x000048, "Member 'FCosmosCustomizeData::IsOwnedCharacter' has a wrong offset!");
static_assert(offsetof(FCosmosCustomizeData, AuraStep) == 0x00004C, "Member 'FCosmosCustomizeData::AuraStep' has a wrong offset!");
static_assert(offsetof(FCosmosCustomizeData, SettingAura) == 0x000050, "Member 'FCosmosCustomizeData::SettingAura' has a wrong offset!");
static_assert(offsetof(FCosmosCustomizeData, ActionChangeCode) == 0x000054, "Member 'FCosmosCustomizeData::ActionChangeCode' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosCustomizeGetCustomizeResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosCustomizeGetCustomizeResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosCustomizeData>           Customizes;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosCustomizeGetCustomizeResponseParam) == 0x000008, "Wrong alignment on FCosmosCustomizeGetCustomizeResponseParam");
static_assert(sizeof(FCosmosCustomizeGetCustomizeResponseParam) == 0x000018, "Wrong size on FCosmosCustomizeGetCustomizeResponseParam");
static_assert(offsetof(FCosmosCustomizeGetCustomizeResponseParam, Status) == 0x000000, "Member 'FCosmosCustomizeGetCustomizeResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosCustomizeGetCustomizeResponseParam, Customizes) == 0x000008, "Member 'FCosmosCustomizeGetCustomizeResponseParam::Customizes' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosCustomizeParam
// 0x0014 (0x0014 - 0x0000)
struct FCosmosCustomizeParam final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomizeFlg;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FavoriteFlg;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AuraStep;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SettingAura;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosCustomizeParam) == 0x000004, "Wrong alignment on FCosmosCustomizeParam");
static_assert(sizeof(FCosmosCustomizeParam) == 0x000014, "Wrong size on FCosmosCustomizeParam");
static_assert(offsetof(FCosmosCustomizeParam, Code) == 0x000000, "Member 'FCosmosCustomizeParam::Code' has a wrong offset!");
static_assert(offsetof(FCosmosCustomizeParam, CustomizeFlg) == 0x000004, "Member 'FCosmosCustomizeParam::CustomizeFlg' has a wrong offset!");
static_assert(offsetof(FCosmosCustomizeParam, FavoriteFlg) == 0x000008, "Member 'FCosmosCustomizeParam::FavoriteFlg' has a wrong offset!");
static_assert(offsetof(FCosmosCustomizeParam, AuraStep) == 0x00000C, "Member 'FCosmosCustomizeParam::AuraStep' has a wrong offset!");
static_assert(offsetof(FCosmosCustomizeParam, SettingAura) == 0x000010, "Member 'FCosmosCustomizeParam::SettingAura' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosCustomizeGetCustomizeListResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosCustomizeGetCustomizeListResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserModelCharacterCode;                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCosmosCustomizeParam>          Params;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosCustomizeGetCustomizeListResponseParam) == 0x000008, "Wrong alignment on FCosmosCustomizeGetCustomizeListResponseParam");
static_assert(sizeof(FCosmosCustomizeGetCustomizeListResponseParam) == 0x000018, "Wrong size on FCosmosCustomizeGetCustomizeListResponseParam");
static_assert(offsetof(FCosmosCustomizeGetCustomizeListResponseParam, Status) == 0x000000, "Member 'FCosmosCustomizeGetCustomizeListResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosCustomizeGetCustomizeListResponseParam, UserModelCharacterCode) == 0x000004, "Member 'FCosmosCustomizeGetCustomizeListResponseParam::UserModelCharacterCode' has a wrong offset!");
static_assert(offsetof(FCosmosCustomizeGetCustomizeListResponseParam, Params) == 0x000008, "Member 'FCosmosCustomizeGetCustomizeListResponseParam::Params' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosInvitingData
// 0x0050 (0x0050 - 0x0000)
struct FCosmosInvitingData final
{
public:
	class FString                                 InviteId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InvitingUserId;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InviteDate;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformId;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserName;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosInvitingData) == 0x000008, "Wrong alignment on FCosmosInvitingData");
static_assert(sizeof(FCosmosInvitingData) == 0x000050, "Wrong size on FCosmosInvitingData");
static_assert(offsetof(FCosmosInvitingData, InviteId) == 0x000000, "Member 'FCosmosInvitingData::InviteId' has a wrong offset!");
static_assert(offsetof(FCosmosInvitingData, InvitingUserId) == 0x000010, "Member 'FCosmosInvitingData::InvitingUserId' has a wrong offset!");
static_assert(offsetof(FCosmosInvitingData, InviteDate) == 0x000020, "Member 'FCosmosInvitingData::InviteDate' has a wrong offset!");
static_assert(offsetof(FCosmosInvitingData, PlatformId) == 0x000030, "Member 'FCosmosInvitingData::PlatformId' has a wrong offset!");
static_assert(offsetof(FCosmosInvitingData, UserName) == 0x000040, "Member 'FCosmosInvitingData::UserName' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosSquadInvitingListResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosSquadInvitingListResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosInvitingData>            InvitingList;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosSquadInvitingListResponseParam) == 0x000008, "Wrong alignment on FCosmosSquadInvitingListResponseParam");
static_assert(sizeof(FCosmosSquadInvitingListResponseParam) == 0x000018, "Wrong size on FCosmosSquadInvitingListResponseParam");
static_assert(offsetof(FCosmosSquadInvitingListResponseParam, Status) == 0x000000, "Member 'FCosmosSquadInvitingListResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosSquadInvitingListResponseParam, InvitingList) == 0x000008, "Member 'FCosmosSquadInvitingListResponseParam::InvitingList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosInvitedData
// 0x0078 (0x0078 - 0x0000)
struct FCosmosInvitedData final
{
public:
	class FString                                 InviteId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HostUserId;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SquadId;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchingServerHost;                                // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchingServerPort;                                // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InviteDate;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformId;                                        // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserName;                                          // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosInvitedData) == 0x000008, "Wrong alignment on FCosmosInvitedData");
static_assert(sizeof(FCosmosInvitedData) == 0x000078, "Wrong size on FCosmosInvitedData");
static_assert(offsetof(FCosmosInvitedData, InviteId) == 0x000000, "Member 'FCosmosInvitedData::InviteId' has a wrong offset!");
static_assert(offsetof(FCosmosInvitedData, HostUserId) == 0x000010, "Member 'FCosmosInvitedData::HostUserId' has a wrong offset!");
static_assert(offsetof(FCosmosInvitedData, SquadId) == 0x000020, "Member 'FCosmosInvitedData::SquadId' has a wrong offset!");
static_assert(offsetof(FCosmosInvitedData, MatchingServerHost) == 0x000030, "Member 'FCosmosInvitedData::MatchingServerHost' has a wrong offset!");
static_assert(offsetof(FCosmosInvitedData, MatchingServerPort) == 0x000040, "Member 'FCosmosInvitedData::MatchingServerPort' has a wrong offset!");
static_assert(offsetof(FCosmosInvitedData, InviteDate) == 0x000048, "Member 'FCosmosInvitedData::InviteDate' has a wrong offset!");
static_assert(offsetof(FCosmosInvitedData, PlatformId) == 0x000058, "Member 'FCosmosInvitedData::PlatformId' has a wrong offset!");
static_assert(offsetof(FCosmosInvitedData, UserName) == 0x000068, "Member 'FCosmosInvitedData::UserName' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosSquadInvitedListResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosSquadInvitedListResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosInvitedData>             InvitedList;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosSquadInvitedListResponseParam) == 0x000008, "Wrong alignment on FCosmosSquadInvitedListResponseParam");
static_assert(sizeof(FCosmosSquadInvitedListResponseParam) == 0x000018, "Wrong size on FCosmosSquadInvitedListResponseParam");
static_assert(offsetof(FCosmosSquadInvitedListResponseParam, Status) == 0x000000, "Member 'FCosmosSquadInvitedListResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosSquadInvitedListResponseParam, InvitedList) == 0x000008, "Member 'FCosmosSquadInvitedListResponseParam::InvitedList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosStockItemData
// 0x0014 (0x0014 - 0x0000)
struct FCosmosStockItemData final
{
public:
	int32                                         LimitedFlag;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankBands;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AwardItemCategoryCode;                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AwardItemCode;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AwardItemNum;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosStockItemData) == 0x000004, "Wrong alignment on FCosmosStockItemData");
static_assert(sizeof(FCosmosStockItemData) == 0x000014, "Wrong size on FCosmosStockItemData");
static_assert(offsetof(FCosmosStockItemData, LimitedFlag) == 0x000000, "Member 'FCosmosStockItemData::LimitedFlag' has a wrong offset!");
static_assert(offsetof(FCosmosStockItemData, RankBands) == 0x000004, "Member 'FCosmosStockItemData::RankBands' has a wrong offset!");
static_assert(offsetof(FCosmosStockItemData, AwardItemCategoryCode) == 0x000008, "Member 'FCosmosStockItemData::AwardItemCategoryCode' has a wrong offset!");
static_assert(offsetof(FCosmosStockItemData, AwardItemCode) == 0x00000C, "Member 'FCosmosStockItemData::AwardItemCode' has a wrong offset!");
static_assert(offsetof(FCosmosStockItemData, AwardItemNum) == 0x000010, "Member 'FCosmosStockItemData::AwardItemNum' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosSeasonpassGetStockInfoResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosSeasonpassGetStockInfoResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosStockItemData>           StockItemList;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosSeasonpassGetStockInfoResponseParam) == 0x000008, "Wrong alignment on FCosmosSeasonpassGetStockInfoResponseParam");
static_assert(sizeof(FCosmosSeasonpassGetStockInfoResponseParam) == 0x000018, "Wrong size on FCosmosSeasonpassGetStockInfoResponseParam");
static_assert(offsetof(FCosmosSeasonpassGetStockInfoResponseParam, Status) == 0x000000, "Member 'FCosmosSeasonpassGetStockInfoResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonpassGetStockInfoResponseParam, StockItemList) == 0x000008, "Member 'FCosmosSeasonpassGetStockInfoResponseParam::StockItemList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosSeasonPassData
// 0x0020 (0x0020 - 0x0000)
struct FCosmosSeasonPassData final
{
public:
	TArray<struct FCosmosAwardData>               FreeAwards;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCosmosAwardData>               LimitedAwards;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosSeasonPassData) == 0x000008, "Wrong alignment on FCosmosSeasonPassData");
static_assert(sizeof(FCosmosSeasonPassData) == 0x000020, "Wrong size on FCosmosSeasonPassData");
static_assert(offsetof(FCosmosSeasonPassData, FreeAwards) == 0x000000, "Member 'FCosmosSeasonPassData::FreeAwards' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonPassData, LimitedAwards) == 0x000010, "Member 'FCosmosSeasonPassData::LimitedAwards' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosSeasonpassGetMasterListResponseParam
// 0x0068 (0x0068 - 0x0000)
struct FCosmosSeasonpassGetMasterListResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SeasonName;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SeasonTime;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsPro;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exp;                                               // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxExp;                                            // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StockItemCount;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankBar;                                           // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxRankBar;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCosmosSeasonPassData                  SeasonPass;                                        // 0x0048(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosSeasonpassGetMasterListResponseParam) == 0x000008, "Wrong alignment on FCosmosSeasonpassGetMasterListResponseParam");
static_assert(sizeof(FCosmosSeasonpassGetMasterListResponseParam) == 0x000068, "Wrong size on FCosmosSeasonpassGetMasterListResponseParam");
static_assert(offsetof(FCosmosSeasonpassGetMasterListResponseParam, Status) == 0x000000, "Member 'FCosmosSeasonpassGetMasterListResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonpassGetMasterListResponseParam, SeasonName) == 0x000008, "Member 'FCosmosSeasonpassGetMasterListResponseParam::SeasonName' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonpassGetMasterListResponseParam, SeasonTime) == 0x000018, "Member 'FCosmosSeasonpassGetMasterListResponseParam::SeasonTime' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonpassGetMasterListResponseParam, IsPro) == 0x000028, "Member 'FCosmosSeasonpassGetMasterListResponseParam::IsPro' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonpassGetMasterListResponseParam, Rank) == 0x00002C, "Member 'FCosmosSeasonpassGetMasterListResponseParam::Rank' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonpassGetMasterListResponseParam, Exp) == 0x000030, "Member 'FCosmosSeasonpassGetMasterListResponseParam::Exp' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonpassGetMasterListResponseParam, MaxExp) == 0x000034, "Member 'FCosmosSeasonpassGetMasterListResponseParam::MaxExp' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonpassGetMasterListResponseParam, StockItemCount) == 0x000038, "Member 'FCosmosSeasonpassGetMasterListResponseParam::StockItemCount' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonpassGetMasterListResponseParam, RankBar) == 0x00003C, "Member 'FCosmosSeasonpassGetMasterListResponseParam::RankBar' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonpassGetMasterListResponseParam, MaxRankBar) == 0x000040, "Member 'FCosmosSeasonpassGetMasterListResponseParam::MaxRankBar' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonpassGetMasterListResponseParam, SeasonPass) == 0x000048, "Member 'FCosmosSeasonpassGetMasterListResponseParam::SeasonPass' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosReceivedNoticeInfo
// 0x0090 (0x0090 - 0x0000)
struct FCosmosReceivedNoticeInfo final
{
public:
	class FString                                 NoticeId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MessageTitle;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MessageText;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCategoryCode;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCode;                                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum;                                           // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemName;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetUserId;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetUserName;                                    // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetGuildId;                                     // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetGuildName;                                   // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosReceivedNoticeInfo) == 0x000008, "Wrong alignment on FCosmosReceivedNoticeInfo");
static_assert(sizeof(FCosmosReceivedNoticeInfo) == 0x000090, "Wrong size on FCosmosReceivedNoticeInfo");
static_assert(offsetof(FCosmosReceivedNoticeInfo, NoticeId) == 0x000000, "Member 'FCosmosReceivedNoticeInfo::NoticeId' has a wrong offset!");
static_assert(offsetof(FCosmosReceivedNoticeInfo, MessageTitle) == 0x000010, "Member 'FCosmosReceivedNoticeInfo::MessageTitle' has a wrong offset!");
static_assert(offsetof(FCosmosReceivedNoticeInfo, MessageText) == 0x000020, "Member 'FCosmosReceivedNoticeInfo::MessageText' has a wrong offset!");
static_assert(offsetof(FCosmosReceivedNoticeInfo, ItemCategoryCode) == 0x000030, "Member 'FCosmosReceivedNoticeInfo::ItemCategoryCode' has a wrong offset!");
static_assert(offsetof(FCosmosReceivedNoticeInfo, ItemCode) == 0x000034, "Member 'FCosmosReceivedNoticeInfo::ItemCode' has a wrong offset!");
static_assert(offsetof(FCosmosReceivedNoticeInfo, ItemNum) == 0x000038, "Member 'FCosmosReceivedNoticeInfo::ItemNum' has a wrong offset!");
static_assert(offsetof(FCosmosReceivedNoticeInfo, ItemName) == 0x000040, "Member 'FCosmosReceivedNoticeInfo::ItemName' has a wrong offset!");
static_assert(offsetof(FCosmosReceivedNoticeInfo, TargetUserId) == 0x000050, "Member 'FCosmosReceivedNoticeInfo::TargetUserId' has a wrong offset!");
static_assert(offsetof(FCosmosReceivedNoticeInfo, TargetUserName) == 0x000060, "Member 'FCosmosReceivedNoticeInfo::TargetUserName' has a wrong offset!");
static_assert(offsetof(FCosmosReceivedNoticeInfo, TargetGuildId) == 0x000070, "Member 'FCosmosReceivedNoticeInfo::TargetGuildId' has a wrong offset!");
static_assert(offsetof(FCosmosReceivedNoticeInfo, TargetGuildName) == 0x000080, "Member 'FCosmosReceivedNoticeInfo::TargetGuildName' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosNoticeItem
// 0x0020 (0x0020 - 0x0000)
struct FCosmosNoticeItem final
{
public:
	int32                                         ItemCategoryCode;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCode;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemName;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosNoticeItem) == 0x000008, "Wrong alignment on FCosmosNoticeItem");
static_assert(sizeof(FCosmosNoticeItem) == 0x000020, "Wrong size on FCosmosNoticeItem");
static_assert(offsetof(FCosmosNoticeItem, ItemCategoryCode) == 0x000000, "Member 'FCosmosNoticeItem::ItemCategoryCode' has a wrong offset!");
static_assert(offsetof(FCosmosNoticeItem, ItemCode) == 0x000004, "Member 'FCosmosNoticeItem::ItemCode' has a wrong offset!");
static_assert(offsetof(FCosmosNoticeItem, ItemNum) == 0x000008, "Member 'FCosmosNoticeItem::ItemNum' has a wrong offset!");
static_assert(offsetof(FCosmosNoticeItem, ItemName) == 0x000010, "Member 'FCosmosNoticeItem::ItemName' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosNoticeGetNoticeReceiveResponseParam
// 0x0028 (0x0028 - 0x0000)
struct FCosmosNoticeGetNoticeReceiveResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosReceivedNoticeInfo>      Notices;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCosmosNoticeItem>              Items;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosNoticeGetNoticeReceiveResponseParam) == 0x000008, "Wrong alignment on FCosmosNoticeGetNoticeReceiveResponseParam");
static_assert(sizeof(FCosmosNoticeGetNoticeReceiveResponseParam) == 0x000028, "Wrong size on FCosmosNoticeGetNoticeReceiveResponseParam");
static_assert(offsetof(FCosmosNoticeGetNoticeReceiveResponseParam, Status) == 0x000000, "Member 'FCosmosNoticeGetNoticeReceiveResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosNoticeGetNoticeReceiveResponseParam, Notices) == 0x000008, "Member 'FCosmosNoticeGetNoticeReceiveResponseParam::Notices' has a wrong offset!");
static_assert(offsetof(FCosmosNoticeGetNoticeReceiveResponseParam, Items) == 0x000018, "Member 'FCosmosNoticeGetNoticeReceiveResponseParam::Items' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosNoticeInfo
// 0x00C8 (0x00C8 - 0x0000)
struct FCosmosNoticeInfo final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NoticeId;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewFlg;                                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayDate;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MessageTitle;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LimitDate;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemFlg;                                           // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TargetUserId;                                      // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetUserName;                                    // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetGuildId;                                     // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetGuildName;                                   // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InviteId;                                          // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetType;                                        // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TargetDate;                                        // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosNoticeInfo) == 0x000008, "Wrong alignment on FCosmosNoticeInfo");
static_assert(sizeof(FCosmosNoticeInfo) == 0x0000C8, "Wrong size on FCosmosNoticeInfo");
static_assert(offsetof(FCosmosNoticeInfo, ID) == 0x000000, "Member 'FCosmosNoticeInfo::ID' has a wrong offset!");
static_assert(offsetof(FCosmosNoticeInfo, NoticeId) == 0x000010, "Member 'FCosmosNoticeInfo::NoticeId' has a wrong offset!");
static_assert(offsetof(FCosmosNoticeInfo, Type) == 0x000020, "Member 'FCosmosNoticeInfo::Type' has a wrong offset!");
static_assert(offsetof(FCosmosNoticeInfo, NewFlg) == 0x000024, "Member 'FCosmosNoticeInfo::NewFlg' has a wrong offset!");
static_assert(offsetof(FCosmosNoticeInfo, DisplayDate) == 0x000028, "Member 'FCosmosNoticeInfo::DisplayDate' has a wrong offset!");
static_assert(offsetof(FCosmosNoticeInfo, MessageTitle) == 0x000038, "Member 'FCosmosNoticeInfo::MessageTitle' has a wrong offset!");
static_assert(offsetof(FCosmosNoticeInfo, LimitDate) == 0x000048, "Member 'FCosmosNoticeInfo::LimitDate' has a wrong offset!");
static_assert(offsetof(FCosmosNoticeInfo, ItemFlg) == 0x000058, "Member 'FCosmosNoticeInfo::ItemFlg' has a wrong offset!");
static_assert(offsetof(FCosmosNoticeInfo, TargetUserId) == 0x000060, "Member 'FCosmosNoticeInfo::TargetUserId' has a wrong offset!");
static_assert(offsetof(FCosmosNoticeInfo, TargetUserName) == 0x000070, "Member 'FCosmosNoticeInfo::TargetUserName' has a wrong offset!");
static_assert(offsetof(FCosmosNoticeInfo, TargetGuildId) == 0x000080, "Member 'FCosmosNoticeInfo::TargetGuildId' has a wrong offset!");
static_assert(offsetof(FCosmosNoticeInfo, TargetGuildName) == 0x000090, "Member 'FCosmosNoticeInfo::TargetGuildName' has a wrong offset!");
static_assert(offsetof(FCosmosNoticeInfo, InviteId) == 0x0000A0, "Member 'FCosmosNoticeInfo::InviteId' has a wrong offset!");
static_assert(offsetof(FCosmosNoticeInfo, TargetType) == 0x0000B0, "Member 'FCosmosNoticeInfo::TargetType' has a wrong offset!");
static_assert(offsetof(FCosmosNoticeInfo, TargetDate) == 0x0000B8, "Member 'FCosmosNoticeInfo::TargetDate' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosNoticeGetNoticeListResponseParam
// 0x0028 (0x0028 - 0x0000)
struct FCosmosNoticeGetNoticeListResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalCount;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NoticeFlg;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InviteFlg;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosNoticeInfo>              Notices;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosNoticeGetNoticeListResponseParam) == 0x000008, "Wrong alignment on FCosmosNoticeGetNoticeListResponseParam");
static_assert(sizeof(FCosmosNoticeGetNoticeListResponseParam) == 0x000028, "Wrong size on FCosmosNoticeGetNoticeListResponseParam");
static_assert(offsetof(FCosmosNoticeGetNoticeListResponseParam, Status) == 0x000000, "Member 'FCosmosNoticeGetNoticeListResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosNoticeGetNoticeListResponseParam, Count) == 0x000004, "Member 'FCosmosNoticeGetNoticeListResponseParam::Count' has a wrong offset!");
static_assert(offsetof(FCosmosNoticeGetNoticeListResponseParam, TotalCount) == 0x000008, "Member 'FCosmosNoticeGetNoticeListResponseParam::TotalCount' has a wrong offset!");
static_assert(offsetof(FCosmosNoticeGetNoticeListResponseParam, NoticeFlg) == 0x00000C, "Member 'FCosmosNoticeGetNoticeListResponseParam::NoticeFlg' has a wrong offset!");
static_assert(offsetof(FCosmosNoticeGetNoticeListResponseParam, InviteFlg) == 0x000010, "Member 'FCosmosNoticeGetNoticeListResponseParam::InviteFlg' has a wrong offset!");
static_assert(offsetof(FCosmosNoticeGetNoticeListResponseParam, Notices) == 0x000018, "Member 'FCosmosNoticeGetNoticeListResponseParam::Notices' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosVoterData
// 0x0058 (0x0058 - 0x0000)
struct FCosmosVoterData final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterCode;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LikeType;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherLikeCount;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LikeTime;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetPoint;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlatformId;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosVoterData) == 0x000008, "Wrong alignment on FCosmosVoterData");
static_assert(sizeof(FCosmosVoterData) == 0x000058, "Wrong size on FCosmosVoterData");
static_assert(offsetof(FCosmosVoterData, UserId) == 0x000000, "Member 'FCosmosVoterData::UserId' has a wrong offset!");
static_assert(offsetof(FCosmosVoterData, CharacterCode) == 0x000010, "Member 'FCosmosVoterData::CharacterCode' has a wrong offset!");
static_assert(offsetof(FCosmosVoterData, LikeType) == 0x000014, "Member 'FCosmosVoterData::LikeType' has a wrong offset!");
static_assert(offsetof(FCosmosVoterData, OtherLikeCount) == 0x000018, "Member 'FCosmosVoterData::OtherLikeCount' has a wrong offset!");
static_assert(offsetof(FCosmosVoterData, LikeTime) == 0x000020, "Member 'FCosmosVoterData::LikeTime' has a wrong offset!");
static_assert(offsetof(FCosmosVoterData, PlayerName) == 0x000030, "Member 'FCosmosVoterData::PlayerName' has a wrong offset!");
static_assert(offsetof(FCosmosVoterData, GetPoint) == 0x000040, "Member 'FCosmosVoterData::GetPoint' has a wrong offset!");
static_assert(offsetof(FCosmosVoterData, PlatformId) == 0x000048, "Member 'FCosmosVoterData::PlatformId' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosBillboardGetChartListResponseParam
// 0x0020 (0x0020 - 0x0000)
struct FCosmosBillboardGetChartListResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Total;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TodayTotal;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosVoterData>               VoterList;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosBillboardGetChartListResponseParam) == 0x000008, "Wrong alignment on FCosmosBillboardGetChartListResponseParam");
static_assert(sizeof(FCosmosBillboardGetChartListResponseParam) == 0x000020, "Wrong size on FCosmosBillboardGetChartListResponseParam");
static_assert(offsetof(FCosmosBillboardGetChartListResponseParam, Status) == 0x000000, "Member 'FCosmosBillboardGetChartListResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosBillboardGetChartListResponseParam, Total) == 0x000004, "Member 'FCosmosBillboardGetChartListResponseParam::Total' has a wrong offset!");
static_assert(offsetof(FCosmosBillboardGetChartListResponseParam, TodayTotal) == 0x000008, "Member 'FCosmosBillboardGetChartListResponseParam::TodayTotal' has a wrong offset!");
static_assert(offsetof(FCosmosBillboardGetChartListResponseParam, VoterList) == 0x000010, "Member 'FCosmosBillboardGetChartListResponseParam::VoterList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosLoginBonusItem
// 0x0020 (0x0020 - 0x0000)
struct FCosmosLoginBonusItem final
{
public:
	class FString                                 Daynum;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemType;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCode;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCosmosLoginBonusItem) == 0x000008, "Wrong alignment on FCosmosLoginBonusItem");
static_assert(sizeof(FCosmosLoginBonusItem) == 0x000020, "Wrong size on FCosmosLoginBonusItem");
static_assert(offsetof(FCosmosLoginBonusItem, Daynum) == 0x000000, "Member 'FCosmosLoginBonusItem::Daynum' has a wrong offset!");
static_assert(offsetof(FCosmosLoginBonusItem, ItemType) == 0x000010, "Member 'FCosmosLoginBonusItem::ItemType' has a wrong offset!");
static_assert(offsetof(FCosmosLoginBonusItem, ItemCode) == 0x000014, "Member 'FCosmosLoginBonusItem::ItemCode' has a wrong offset!");
static_assert(offsetof(FCosmosLoginBonusItem, ItemNum) == 0x000018, "Member 'FCosmosLoginBonusItem::ItemNum' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosLoginBonusItemData
// 0x0028 (0x0028 - 0x0000)
struct FCosmosLoginBonusItemData final
{
public:
	int32                                         LoginBonusCode;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LoginBonusType;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCosmosLoginBonusItem>          ItemList;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosLoginBonusItemData) == 0x000008, "Wrong alignment on FCosmosLoginBonusItemData");
static_assert(sizeof(FCosmosLoginBonusItemData) == 0x000028, "Wrong size on FCosmosLoginBonusItemData");
static_assert(offsetof(FCosmosLoginBonusItemData, LoginBonusCode) == 0x000000, "Member 'FCosmosLoginBonusItemData::LoginBonusCode' has a wrong offset!");
static_assert(offsetof(FCosmosLoginBonusItemData, LoginBonusType) == 0x000008, "Member 'FCosmosLoginBonusItemData::LoginBonusType' has a wrong offset!");
static_assert(offsetof(FCosmosLoginBonusItemData, ItemList) == 0x000018, "Member 'FCosmosLoginBonusItemData::ItemList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosLoginbonusPurchasePremiumResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosLoginbonusPurchasePremiumResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosLoginBonusItemData>      LoginBonusList;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosLoginbonusPurchasePremiumResponseParam) == 0x000008, "Wrong alignment on FCosmosLoginbonusPurchasePremiumResponseParam");
static_assert(sizeof(FCosmosLoginbonusPurchasePremiumResponseParam) == 0x000018, "Wrong size on FCosmosLoginbonusPurchasePremiumResponseParam");
static_assert(offsetof(FCosmosLoginbonusPurchasePremiumResponseParam, Status) == 0x000000, "Member 'FCosmosLoginbonusPurchasePremiumResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosLoginbonusPurchasePremiumResponseParam, LoginBonusList) == 0x000008, "Member 'FCosmosLoginbonusPurchasePremiumResponseParam::LoginBonusList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosLoginbonusGetBonusResponseParam
// 0x0028 (0x0028 - 0x0000)
struct FCosmosLoginbonusGetBonusResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 WorkId;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCosmosLoginBonusItemData>      LoginBonusList;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosLoginbonusGetBonusResponseParam) == 0x000008, "Wrong alignment on FCosmosLoginbonusGetBonusResponseParam");
static_assert(sizeof(FCosmosLoginbonusGetBonusResponseParam) == 0x000028, "Wrong size on FCosmosLoginbonusGetBonusResponseParam");
static_assert(offsetof(FCosmosLoginbonusGetBonusResponseParam, Status) == 0x000000, "Member 'FCosmosLoginbonusGetBonusResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosLoginbonusGetBonusResponseParam, WorkId) == 0x000008, "Member 'FCosmosLoginbonusGetBonusResponseParam::WorkId' has a wrong offset!");
static_assert(offsetof(FCosmosLoginbonusGetBonusResponseParam, LoginBonusList) == 0x000018, "Member 'FCosmosLoginbonusGetBonusResponseParam::LoginBonusList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosProgressData
// 0x0020 (0x0020 - 0x0000)
struct FCosmosProgressData final
{
public:
	class FString                                 Daynum;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemType;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCode;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetProgress;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosProgressData) == 0x000008, "Wrong alignment on FCosmosProgressData");
static_assert(sizeof(FCosmosProgressData) == 0x000020, "Wrong size on FCosmosProgressData");
static_assert(offsetof(FCosmosProgressData, Daynum) == 0x000000, "Member 'FCosmosProgressData::Daynum' has a wrong offset!");
static_assert(offsetof(FCosmosProgressData, ItemType) == 0x000010, "Member 'FCosmosProgressData::ItemType' has a wrong offset!");
static_assert(offsetof(FCosmosProgressData, ItemCode) == 0x000014, "Member 'FCosmosProgressData::ItemCode' has a wrong offset!");
static_assert(offsetof(FCosmosProgressData, ItemNum) == 0x000018, "Member 'FCosmosProgressData::ItemNum' has a wrong offset!");
static_assert(offsetof(FCosmosProgressData, GetProgress) == 0x00001C, "Member 'FCosmosProgressData::GetProgress' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosLoginBonusData
// 0x0070 (0x0070 - 0x0000)
struct FCosmosLoginBonusData final
{
public:
	int32                                         LoginBonusCode;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LoginBonusType;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoginBonusName;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Start;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 End;                                               // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetTodayProgress;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosProgressData>            ProgressList;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 PremiumEnd;                                        // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosLoginBonusData) == 0x000008, "Wrong alignment on FCosmosLoginBonusData");
static_assert(sizeof(FCosmosLoginBonusData) == 0x000070, "Wrong size on FCosmosLoginBonusData");
static_assert(offsetof(FCosmosLoginBonusData, LoginBonusCode) == 0x000000, "Member 'FCosmosLoginBonusData::LoginBonusCode' has a wrong offset!");
static_assert(offsetof(FCosmosLoginBonusData, LoginBonusType) == 0x000008, "Member 'FCosmosLoginBonusData::LoginBonusType' has a wrong offset!");
static_assert(offsetof(FCosmosLoginBonusData, LoginBonusName) == 0x000018, "Member 'FCosmosLoginBonusData::LoginBonusName' has a wrong offset!");
static_assert(offsetof(FCosmosLoginBonusData, Start) == 0x000028, "Member 'FCosmosLoginBonusData::Start' has a wrong offset!");
static_assert(offsetof(FCosmosLoginBonusData, End) == 0x000038, "Member 'FCosmosLoginBonusData::End' has a wrong offset!");
static_assert(offsetof(FCosmosLoginBonusData, GetTodayProgress) == 0x000048, "Member 'FCosmosLoginBonusData::GetTodayProgress' has a wrong offset!");
static_assert(offsetof(FCosmosLoginBonusData, ProgressList) == 0x000050, "Member 'FCosmosLoginBonusData::ProgressList' has a wrong offset!");
static_assert(offsetof(FCosmosLoginBonusData, PremiumEnd) == 0x000060, "Member 'FCosmosLoginBonusData::PremiumEnd' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosLoginbonusGetListResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosLoginbonusGetListResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosLoginBonusData>          LoginBonus;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosLoginbonusGetListResponseParam) == 0x000008, "Wrong alignment on FCosmosLoginbonusGetListResponseParam");
static_assert(sizeof(FCosmosLoginbonusGetListResponseParam) == 0x000018, "Wrong size on FCosmosLoginbonusGetListResponseParam");
static_assert(offsetof(FCosmosLoginbonusGetListResponseParam, Status) == 0x000000, "Member 'FCosmosLoginbonusGetListResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosLoginbonusGetListResponseParam, LoginBonus) == 0x000008, "Member 'FCosmosLoginbonusGetListResponseParam::LoginBonus' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosShopPurchaseItemResponseParam
// 0x0010 (0x0010 - 0x0000)
struct FCosmosShopPurchaseItemResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShopItemCode;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchaseNum;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainNum;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosShopPurchaseItemResponseParam) == 0x000004, "Wrong alignment on FCosmosShopPurchaseItemResponseParam");
static_assert(sizeof(FCosmosShopPurchaseItemResponseParam) == 0x000010, "Wrong size on FCosmosShopPurchaseItemResponseParam");
static_assert(offsetof(FCosmosShopPurchaseItemResponseParam, Status) == 0x000000, "Member 'FCosmosShopPurchaseItemResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosShopPurchaseItemResponseParam, ShopItemCode) == 0x000004, "Member 'FCosmosShopPurchaseItemResponseParam::ShopItemCode' has a wrong offset!");
static_assert(offsetof(FCosmosShopPurchaseItemResponseParam, PurchaseNum) == 0x000008, "Member 'FCosmosShopPurchaseItemResponseParam::PurchaseNum' has a wrong offset!");
static_assert(offsetof(FCosmosShopPurchaseItemResponseParam, RemainNum) == 0x00000C, "Member 'FCosmosShopPurchaseItemResponseParam::RemainNum' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosShopItemData
// 0x0010 (0x0010 - 0x0000)
struct FCosmosShopItemData final
{
public:
	int32                                         ShopItemCode;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchaseNum;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainNum;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventCode;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosShopItemData) == 0x000004, "Wrong alignment on FCosmosShopItemData");
static_assert(sizeof(FCosmosShopItemData) == 0x000010, "Wrong size on FCosmosShopItemData");
static_assert(offsetof(FCosmosShopItemData, ShopItemCode) == 0x000000, "Member 'FCosmosShopItemData::ShopItemCode' has a wrong offset!");
static_assert(offsetof(FCosmosShopItemData, PurchaseNum) == 0x000004, "Member 'FCosmosShopItemData::PurchaseNum' has a wrong offset!");
static_assert(offsetof(FCosmosShopItemData, RemainNum) == 0x000008, "Member 'FCosmosShopItemData::RemainNum' has a wrong offset!");
static_assert(offsetof(FCosmosShopItemData, EventCode) == 0x00000C, "Member 'FCosmosShopItemData::EventCode' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosShopData
// 0x0018 (0x0018 - 0x0000)
struct FCosmosShopData final
{
public:
	int32                                         ShopCode;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupCode;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCosmosShopItemData>            ShopItems;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosShopData) == 0x000008, "Wrong alignment on FCosmosShopData");
static_assert(sizeof(FCosmosShopData) == 0x000018, "Wrong size on FCosmosShopData");
static_assert(offsetof(FCosmosShopData, ShopCode) == 0x000000, "Member 'FCosmosShopData::ShopCode' has a wrong offset!");
static_assert(offsetof(FCosmosShopData, GroupCode) == 0x000004, "Member 'FCosmosShopData::GroupCode' has a wrong offset!");
static_assert(offsetof(FCosmosShopData, ShopItems) == 0x000008, "Member 'FCosmosShopData::ShopItems' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosShopCurrencyData
// 0x000C (0x000C - 0x0000)
struct FCosmosShopCurrencyData final
{
public:
	int32                                         CurrencyCode;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PossessionNum;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventCode;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosShopCurrencyData) == 0x000004, "Wrong alignment on FCosmosShopCurrencyData");
static_assert(sizeof(FCosmosShopCurrencyData) == 0x00000C, "Wrong size on FCosmosShopCurrencyData");
static_assert(offsetof(FCosmosShopCurrencyData, CurrencyCode) == 0x000000, "Member 'FCosmosShopCurrencyData::CurrencyCode' has a wrong offset!");
static_assert(offsetof(FCosmosShopCurrencyData, PossessionNum) == 0x000004, "Member 'FCosmosShopCurrencyData::PossessionNum' has a wrong offset!");
static_assert(offsetof(FCosmosShopCurrencyData, EventCode) == 0x000008, "Member 'FCosmosShopCurrencyData::EventCode' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosShopGetShopResponseParam
// 0x0028 (0x0028 - 0x0000)
struct FCosmosShopGetShopResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosShopData>                ShopList;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCosmosShopCurrencyData>        ShopCurrencyList;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosShopGetShopResponseParam) == 0x000008, "Wrong alignment on FCosmosShopGetShopResponseParam");
static_assert(sizeof(FCosmosShopGetShopResponseParam) == 0x000028, "Wrong size on FCosmosShopGetShopResponseParam");
static_assert(offsetof(FCosmosShopGetShopResponseParam, Status) == 0x000000, "Member 'FCosmosShopGetShopResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosShopGetShopResponseParam, ShopList) == 0x000008, "Member 'FCosmosShopGetShopResponseParam::ShopList' has a wrong offset!");
static_assert(offsetof(FCosmosShopGetShopResponseParam, ShopCurrencyList) == 0x000018, "Member 'FCosmosShopGetShopResponseParam::ShopCurrencyList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosGuildUseBoostResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosGuildUseBoostResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 boostTime;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosGuildUseBoostResponseParam) == 0x000008, "Wrong alignment on FCosmosGuildUseBoostResponseParam");
static_assert(sizeof(FCosmosGuildUseBoostResponseParam) == 0x000018, "Wrong size on FCosmosGuildUseBoostResponseParam");
static_assert(offsetof(FCosmosGuildUseBoostResponseParam, Status) == 0x000000, "Member 'FCosmosGuildUseBoostResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosGuildUseBoostResponseParam, boostTime) == 0x000008, "Member 'FCosmosGuildUseBoostResponseParam::boostTime' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosGuildSetFundsResponseParam
// 0x0014 (0x0014 - 0x0000)
struct FCosmosGuildSetFundsResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Money;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AfterGuildLv;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetBoostNum;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpMemberLimit;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosGuildSetFundsResponseParam) == 0x000004, "Wrong alignment on FCosmosGuildSetFundsResponseParam");
static_assert(sizeof(FCosmosGuildSetFundsResponseParam) == 0x000014, "Wrong size on FCosmosGuildSetFundsResponseParam");
static_assert(offsetof(FCosmosGuildSetFundsResponseParam, Status) == 0x000000, "Member 'FCosmosGuildSetFundsResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosGuildSetFundsResponseParam, Money) == 0x000004, "Member 'FCosmosGuildSetFundsResponseParam::Money' has a wrong offset!");
static_assert(offsetof(FCosmosGuildSetFundsResponseParam, AfterGuildLv) == 0x000008, "Member 'FCosmosGuildSetFundsResponseParam::AfterGuildLv' has a wrong offset!");
static_assert(offsetof(FCosmosGuildSetFundsResponseParam, GetBoostNum) == 0x00000C, "Member 'FCosmosGuildSetFundsResponseParam::GetBoostNum' has a wrong offset!");
static_assert(offsetof(FCosmosGuildSetFundsResponseParam, UpMemberLimit) == 0x000010, "Member 'FCosmosGuildSetFundsResponseParam::UpMemberLimit' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosRecordData
// 0x0068 (0x0068 - 0x0000)
struct FCosmosRecordData final
{
public:
	class FString                                 Seq;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActivityType;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserName;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DetailedData;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActionDate;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LikeCount;                                         // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlatformId;                                        // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainLikeCount;                                   // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCosmosRecordData) == 0x000008, "Wrong alignment on FCosmosRecordData");
static_assert(sizeof(FCosmosRecordData) == 0x000068, "Wrong size on FCosmosRecordData");
static_assert(offsetof(FCosmosRecordData, Seq) == 0x000000, "Member 'FCosmosRecordData::Seq' has a wrong offset!");
static_assert(offsetof(FCosmosRecordData, ActivityType) == 0x000010, "Member 'FCosmosRecordData::ActivityType' has a wrong offset!");
static_assert(offsetof(FCosmosRecordData, UserName) == 0x000018, "Member 'FCosmosRecordData::UserName' has a wrong offset!");
static_assert(offsetof(FCosmosRecordData, DetailedData) == 0x000028, "Member 'FCosmosRecordData::DetailedData' has a wrong offset!");
static_assert(offsetof(FCosmosRecordData, ActionDate) == 0x000038, "Member 'FCosmosRecordData::ActionDate' has a wrong offset!");
static_assert(offsetof(FCosmosRecordData, LikeCount) == 0x000048, "Member 'FCosmosRecordData::LikeCount' has a wrong offset!");
static_assert(offsetof(FCosmosRecordData, PlatformId) == 0x000050, "Member 'FCosmosRecordData::PlatformId' has a wrong offset!");
static_assert(offsetof(FCosmosRecordData, RemainLikeCount) == 0x000060, "Member 'FCosmosRecordData::RemainLikeCount' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosGuildGetRecordsResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosGuildGetRecordsResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosRecordData>              Records;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosGuildGetRecordsResponseParam) == 0x000008, "Wrong alignment on FCosmosGuildGetRecordsResponseParam");
static_assert(sizeof(FCosmosGuildGetRecordsResponseParam) == 0x000018, "Wrong size on FCosmosGuildGetRecordsResponseParam");
static_assert(offsetof(FCosmosGuildGetRecordsResponseParam, Status) == 0x000000, "Member 'FCosmosGuildGetRecordsResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGetRecordsResponseParam, Records) == 0x000008, "Member 'FCosmosGuildGetRecordsResponseParam::Records' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosGuildMemberData
// 0x0068 (0x0068 - 0x0000)
struct FCosmosGuildMemberData final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserName;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildPoint;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bestScorePoint;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LikeCount;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LastLogin;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PositionFlg;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewFlg;                                            // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MeFlg;                                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlatformId;                                        // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnlineFlg;                                         // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCosmosGuildMemberData) == 0x000008, "Wrong alignment on FCosmosGuildMemberData");
static_assert(sizeof(FCosmosGuildMemberData) == 0x000068, "Wrong size on FCosmosGuildMemberData");
static_assert(offsetof(FCosmosGuildMemberData, UserId) == 0x000000, "Member 'FCosmosGuildMemberData::UserId' has a wrong offset!");
static_assert(offsetof(FCosmosGuildMemberData, UserName) == 0x000010, "Member 'FCosmosGuildMemberData::UserName' has a wrong offset!");
static_assert(offsetof(FCosmosGuildMemberData, GuildPoint) == 0x000020, "Member 'FCosmosGuildMemberData::GuildPoint' has a wrong offset!");
static_assert(offsetof(FCosmosGuildMemberData, bestScorePoint) == 0x000024, "Member 'FCosmosGuildMemberData::bestScorePoint' has a wrong offset!");
static_assert(offsetof(FCosmosGuildMemberData, LikeCount) == 0x000028, "Member 'FCosmosGuildMemberData::LikeCount' has a wrong offset!");
static_assert(offsetof(FCosmosGuildMemberData, LastLogin) == 0x000030, "Member 'FCosmosGuildMemberData::LastLogin' has a wrong offset!");
static_assert(offsetof(FCosmosGuildMemberData, PositionFlg) == 0x000040, "Member 'FCosmosGuildMemberData::PositionFlg' has a wrong offset!");
static_assert(offsetof(FCosmosGuildMemberData, NewFlg) == 0x000044, "Member 'FCosmosGuildMemberData::NewFlg' has a wrong offset!");
static_assert(offsetof(FCosmosGuildMemberData, MeFlg) == 0x000048, "Member 'FCosmosGuildMemberData::MeFlg' has a wrong offset!");
static_assert(offsetof(FCosmosGuildMemberData, PlatformId) == 0x000050, "Member 'FCosmosGuildMemberData::PlatformId' has a wrong offset!");
static_assert(offsetof(FCosmosGuildMemberData, OnlineFlg) == 0x000060, "Member 'FCosmosGuildMemberData::OnlineFlg' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosGuildGetMemberListResponseParam
// 0x0020 (0x0020 - 0x0000)
struct FCosmosGuildGetMemberListResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCount;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosGuildMemberData>         Members;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosGuildGetMemberListResponseParam) == 0x000008, "Wrong alignment on FCosmosGuildGetMemberListResponseParam");
static_assert(sizeof(FCosmosGuildGetMemberListResponseParam) == 0x000020, "Wrong size on FCosmosGuildGetMemberListResponseParam");
static_assert(offsetof(FCosmosGuildGetMemberListResponseParam, Status) == 0x000000, "Member 'FCosmosGuildGetMemberListResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGetMemberListResponseParam, Count) == 0x000004, "Member 'FCosmosGuildGetMemberListResponseParam::Count' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGetMemberListResponseParam, MaxCount) == 0x000008, "Member 'FCosmosGuildGetMemberListResponseParam::MaxCount' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGetMemberListResponseParam, Members) == 0x000010, "Member 'FCosmosGuildGetMemberListResponseParam::Members' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosGuildSetJoinResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosGuildSetJoinResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GuildId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosGuildSetJoinResponseParam) == 0x000008, "Wrong alignment on FCosmosGuildSetJoinResponseParam");
static_assert(sizeof(FCosmosGuildSetJoinResponseParam) == 0x000018, "Wrong size on FCosmosGuildSetJoinResponseParam");
static_assert(offsetof(FCosmosGuildSetJoinResponseParam, Status) == 0x000000, "Member 'FCosmosGuildSetJoinResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosGuildSetJoinResponseParam, GuildId) == 0x000008, "Member 'FCosmosGuildSetJoinResponseParam::GuildId' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosGuildGuildCreateResponseParam
// 0x0028 (0x0028 - 0x0000)
struct FCosmosGuildGuildCreateResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GuildId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FrontId;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosGuildGuildCreateResponseParam) == 0x000008, "Wrong alignment on FCosmosGuildGuildCreateResponseParam");
static_assert(sizeof(FCosmosGuildGuildCreateResponseParam) == 0x000028, "Wrong size on FCosmosGuildGuildCreateResponseParam");
static_assert(offsetof(FCosmosGuildGuildCreateResponseParam, Status) == 0x000000, "Member 'FCosmosGuildGuildCreateResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGuildCreateResponseParam, GuildId) == 0x000008, "Member 'FCosmosGuildGuildCreateResponseParam::GuildId' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGuildCreateResponseParam, FrontId) == 0x000018, "Member 'FCosmosGuildGuildCreateResponseParam::FrontId' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosLevelData
// 0x000C (0x000C - 0x0000)
struct FCosmosLevelData final
{
public:
	int32                                         Lv;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentCoin;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetCoin;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosLevelData) == 0x000004, "Wrong alignment on FCosmosLevelData");
static_assert(sizeof(FCosmosLevelData) == 0x00000C, "Wrong size on FCosmosLevelData");
static_assert(offsetof(FCosmosLevelData, Lv) == 0x000000, "Member 'FCosmosLevelData::Lv' has a wrong offset!");
static_assert(offsetof(FCosmosLevelData, CurrentCoin) == 0x000004, "Member 'FCosmosLevelData::CurrentCoin' has a wrong offset!");
static_assert(offsetof(FCosmosLevelData, TargetCoin) == 0x000008, "Member 'FCosmosLevelData::TargetCoin' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosGuildGetGuildInfoResponseParam
// 0x00F8 (0x00F8 - 0x0000)
struct FCosmosGuildGetGuildInfoResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GuildId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FrontId;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReaderFlg;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LeaderPlatformId;                                  // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaderName;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildLv;                                           // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildEmblemCode;                                   // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildName;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Profile;                                           // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PolicyId;                                          // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Terms;                                             // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Member;                                            // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMember;                                         // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Coin;                                              // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BestRecordSeasonId;                                // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bestRecordRanking;                                 // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ActiveDay;                                         // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LeagueId;                                          // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRank;                                        // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonPoint;                                       // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosLevelData>               Levels;                                            // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NewMemberFlg;                                      // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NoticeFlg;                                         // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         boostUseNum;                                       // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 boostTime;                                         // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         PlatformUserIdList;                                // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosGuildGetGuildInfoResponseParam) == 0x000008, "Wrong alignment on FCosmosGuildGetGuildInfoResponseParam");
static_assert(sizeof(FCosmosGuildGetGuildInfoResponseParam) == 0x0000F8, "Wrong size on FCosmosGuildGetGuildInfoResponseParam");
static_assert(offsetof(FCosmosGuildGetGuildInfoResponseParam, Status) == 0x000000, "Member 'FCosmosGuildGetGuildInfoResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGetGuildInfoResponseParam, GuildId) == 0x000008, "Member 'FCosmosGuildGetGuildInfoResponseParam::GuildId' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGetGuildInfoResponseParam, FrontId) == 0x000018, "Member 'FCosmosGuildGetGuildInfoResponseParam::FrontId' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGetGuildInfoResponseParam, ReaderFlg) == 0x000028, "Member 'FCosmosGuildGetGuildInfoResponseParam::ReaderFlg' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGetGuildInfoResponseParam, LeaderPlatformId) == 0x000030, "Member 'FCosmosGuildGetGuildInfoResponseParam::LeaderPlatformId' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGetGuildInfoResponseParam, LeaderName) == 0x000040, "Member 'FCosmosGuildGetGuildInfoResponseParam::LeaderName' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGetGuildInfoResponseParam, GuildLv) == 0x000050, "Member 'FCosmosGuildGetGuildInfoResponseParam::GuildLv' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGetGuildInfoResponseParam, GuildEmblemCode) == 0x000054, "Member 'FCosmosGuildGetGuildInfoResponseParam::GuildEmblemCode' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGetGuildInfoResponseParam, GuildName) == 0x000058, "Member 'FCosmosGuildGetGuildInfoResponseParam::GuildName' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGetGuildInfoResponseParam, Profile) == 0x000068, "Member 'FCosmosGuildGetGuildInfoResponseParam::Profile' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGetGuildInfoResponseParam, PolicyId) == 0x000078, "Member 'FCosmosGuildGetGuildInfoResponseParam::PolicyId' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGetGuildInfoResponseParam, Terms) == 0x00007C, "Member 'FCosmosGuildGetGuildInfoResponseParam::Terms' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGetGuildInfoResponseParam, Member) == 0x000080, "Member 'FCosmosGuildGetGuildInfoResponseParam::Member' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGetGuildInfoResponseParam, MaxMember) == 0x000084, "Member 'FCosmosGuildGetGuildInfoResponseParam::MaxMember' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGetGuildInfoResponseParam, Coin) == 0x000088, "Member 'FCosmosGuildGetGuildInfoResponseParam::Coin' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGetGuildInfoResponseParam, BestRecordSeasonId) == 0x00008C, "Member 'FCosmosGuildGetGuildInfoResponseParam::BestRecordSeasonId' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGetGuildInfoResponseParam, bestRecordRanking) == 0x000090, "Member 'FCosmosGuildGetGuildInfoResponseParam::bestRecordRanking' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGetGuildInfoResponseParam, ActiveDay) == 0x000098, "Member 'FCosmosGuildGetGuildInfoResponseParam::ActiveDay' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGetGuildInfoResponseParam, LeagueId) == 0x0000A8, "Member 'FCosmosGuildGetGuildInfoResponseParam::LeagueId' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGetGuildInfoResponseParam, SeasonRank) == 0x0000AC, "Member 'FCosmosGuildGetGuildInfoResponseParam::SeasonRank' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGetGuildInfoResponseParam, SeasonPoint) == 0x0000B0, "Member 'FCosmosGuildGetGuildInfoResponseParam::SeasonPoint' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGetGuildInfoResponseParam, Levels) == 0x0000B8, "Member 'FCosmosGuildGetGuildInfoResponseParam::Levels' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGetGuildInfoResponseParam, NewMemberFlg) == 0x0000C8, "Member 'FCosmosGuildGetGuildInfoResponseParam::NewMemberFlg' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGetGuildInfoResponseParam, NoticeFlg) == 0x0000CC, "Member 'FCosmosGuildGetGuildInfoResponseParam::NoticeFlg' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGetGuildInfoResponseParam, boostUseNum) == 0x0000D0, "Member 'FCosmosGuildGetGuildInfoResponseParam::boostUseNum' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGetGuildInfoResponseParam, boostTime) == 0x0000D8, "Member 'FCosmosGuildGetGuildInfoResponseParam::boostTime' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGetGuildInfoResponseParam, PlatformUserIdList) == 0x0000E8, "Member 'FCosmosGuildGetGuildInfoResponseParam::PlatformUserIdList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosGuildData
// 0x0050 (0x0050 - 0x0000)
struct FCosmosGuildData final
{
public:
	class FString                                 GuildId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FrontId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildEmblemCode;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Lv;                                                // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildName;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PolicyId;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Member;                                            // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMember;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Terms;                                             // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProposeStatus;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCosmosGuildData) == 0x000008, "Wrong alignment on FCosmosGuildData");
static_assert(sizeof(FCosmosGuildData) == 0x000050, "Wrong size on FCosmosGuildData");
static_assert(offsetof(FCosmosGuildData, GuildId) == 0x000000, "Member 'FCosmosGuildData::GuildId' has a wrong offset!");
static_assert(offsetof(FCosmosGuildData, FrontId) == 0x000010, "Member 'FCosmosGuildData::FrontId' has a wrong offset!");
static_assert(offsetof(FCosmosGuildData, GuildEmblemCode) == 0x000020, "Member 'FCosmosGuildData::GuildEmblemCode' has a wrong offset!");
static_assert(offsetof(FCosmosGuildData, Lv) == 0x000024, "Member 'FCosmosGuildData::Lv' has a wrong offset!");
static_assert(offsetof(FCosmosGuildData, GuildName) == 0x000028, "Member 'FCosmosGuildData::GuildName' has a wrong offset!");
static_assert(offsetof(FCosmosGuildData, PolicyId) == 0x000038, "Member 'FCosmosGuildData::PolicyId' has a wrong offset!");
static_assert(offsetof(FCosmosGuildData, Member) == 0x00003C, "Member 'FCosmosGuildData::Member' has a wrong offset!");
static_assert(offsetof(FCosmosGuildData, MaxMember) == 0x000040, "Member 'FCosmosGuildData::MaxMember' has a wrong offset!");
static_assert(offsetof(FCosmosGuildData, Terms) == 0x000044, "Member 'FCosmosGuildData::Terms' has a wrong offset!");
static_assert(offsetof(FCosmosGuildData, ProposeStatus) == 0x000048, "Member 'FCosmosGuildData::ProposeStatus' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosGuildGetGuildListResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosGuildGetGuildListResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosGuildData>               GuildList;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosGuildGetGuildListResponseParam) == 0x000008, "Wrong alignment on FCosmosGuildGetGuildListResponseParam");
static_assert(sizeof(FCosmosGuildGetGuildListResponseParam) == 0x000018, "Wrong size on FCosmosGuildGetGuildListResponseParam");
static_assert(offsetof(FCosmosGuildGetGuildListResponseParam, Status) == 0x000000, "Member 'FCosmosGuildGetGuildListResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosGuildGetGuildListResponseParam, GuildList) == 0x000008, "Member 'FCosmosGuildGetGuildListResponseParam::GuildList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosBonusData
// 0x0008 (0x0008 - 0x0000)
struct FCosmosBonusData final
{
public:
	int32                                         BonusCode;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bonus;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosBonusData) == 0x000004, "Wrong alignment on FCosmosBonusData");
static_assert(sizeof(FCosmosBonusData) == 0x000008, "Wrong size on FCosmosBonusData");
static_assert(offsetof(FCosmosBonusData, BonusCode) == 0x000000, "Member 'FCosmosBonusData::BonusCode' has a wrong offset!");
static_assert(offsetof(FCosmosBonusData, Bonus) == 0x000004, "Member 'FCosmosBonusData::Bonus' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosBonusUserData
// 0x0020 (0x0020 - 0x0000)
struct FCosmosBonusUserData final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCosmosBonusData>               BonusList;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosBonusUserData) == 0x000008, "Wrong alignment on FCosmosBonusUserData");
static_assert(sizeof(FCosmosBonusUserData) == 0x000020, "Wrong size on FCosmosBonusUserData");
static_assert(offsetof(FCosmosBonusUserData, UserId) == 0x000000, "Member 'FCosmosBonusUserData::UserId' has a wrong offset!");
static_assert(offsetof(FCosmosBonusUserData, BonusList) == 0x000010, "Member 'FCosmosBonusUserData::BonusList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosBattleGameStartResponseParam
// 0x0028 (0x0028 - 0x0000)
struct FCosmosBattleGameStartResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameId;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCosmosBonusUserData>           UserList;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosBattleGameStartResponseParam) == 0x000008, "Wrong alignment on FCosmosBattleGameStartResponseParam");
static_assert(sizeof(FCosmosBattleGameStartResponseParam) == 0x000028, "Wrong size on FCosmosBattleGameStartResponseParam");
static_assert(offsetof(FCosmosBattleGameStartResponseParam, Status) == 0x000000, "Member 'FCosmosBattleGameStartResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosBattleGameStartResponseParam, GameId) == 0x000008, "Member 'FCosmosBattleGameStartResponseParam::GameId' has a wrong offset!");
static_assert(offsetof(FCosmosBattleGameStartResponseParam, UserList) == 0x000018, "Member 'FCosmosBattleGameStartResponseParam::UserList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosBattleCalcSkillBaseResponseParam
// 0x000C (0x000C - 0x0000)
struct FCosmosBattleCalcSkillBaseResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillBase;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PenaltyLevel;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosBattleCalcSkillBaseResponseParam) == 0x000004, "Wrong alignment on FCosmosBattleCalcSkillBaseResponseParam");
static_assert(sizeof(FCosmosBattleCalcSkillBaseResponseParam) == 0x00000C, "Wrong size on FCosmosBattleCalcSkillBaseResponseParam");
static_assert(offsetof(FCosmosBattleCalcSkillBaseResponseParam, Status) == 0x000000, "Member 'FCosmosBattleCalcSkillBaseResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosBattleCalcSkillBaseResponseParam, SkillBase) == 0x000004, "Member 'FCosmosBattleCalcSkillBaseResponseParam::SkillBase' has a wrong offset!");
static_assert(offsetof(FCosmosBattleCalcSkillBaseResponseParam, PenaltyLevel) == 0x000008, "Member 'FCosmosBattleCalcSkillBaseResponseParam::PenaltyLevel' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosItemDropData
// 0x0010 (0x0010 - 0x0000)
struct FCosmosItemDropData final
{
public:
	int32                                         ItemCategoryCode;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCode;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DropType;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosItemDropData) == 0x000004, "Wrong alignment on FCosmosItemDropData");
static_assert(sizeof(FCosmosItemDropData) == 0x000010, "Wrong size on FCosmosItemDropData");
static_assert(offsetof(FCosmosItemDropData, ItemCategoryCode) == 0x000000, "Member 'FCosmosItemDropData::ItemCategoryCode' has a wrong offset!");
static_assert(offsetof(FCosmosItemDropData, ItemCode) == 0x000004, "Member 'FCosmosItemDropData::ItemCode' has a wrong offset!");
static_assert(offsetof(FCosmosItemDropData, ItemNum) == 0x000008, "Member 'FCosmosItemDropData::ItemNum' has a wrong offset!");
static_assert(offsetof(FCosmosItemDropData, DropType) == 0x00000C, "Member 'FCosmosItemDropData::DropType' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosDropUserData
// 0x0020 (0x0020 - 0x0000)
struct FCosmosDropUserData final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCosmosItemDropData>            ItemDropList;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosDropUserData) == 0x000008, "Wrong alignment on FCosmosDropUserData");
static_assert(sizeof(FCosmosDropUserData) == 0x000020, "Wrong size on FCosmosDropUserData");
static_assert(offsetof(FCosmosDropUserData, UserId) == 0x000000, "Member 'FCosmosDropUserData::UserId' has a wrong offset!");
static_assert(offsetof(FCosmosDropUserData, ItemDropList) == 0x000010, "Member 'FCosmosDropUserData::ItemDropList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosBattleUserResultResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosBattleUserResultResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosDropUserData>            UserList;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosBattleUserResultResponseParam) == 0x000008, "Wrong alignment on FCosmosBattleUserResultResponseParam");
static_assert(sizeof(FCosmosBattleUserResultResponseParam) == 0x000018, "Wrong size on FCosmosBattleUserResultResponseParam");
static_assert(offsetof(FCosmosBattleUserResultResponseParam, Status) == 0x000000, "Member 'FCosmosBattleUserResultResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosBattleUserResultResponseParam, UserList) == 0x000008, "Member 'FCosmosBattleUserResultResponseParam::UserList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosSeasonBattleData
// 0x0060 (0x0060 - 0x0000)
struct FCosmosSeasonBattleData final
{
public:
	int32                                         SeasonCode;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankExpCode;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayMatchCount;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinCount;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinSurvival;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Damage;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BestDamage;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AverageDamage;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         beatCount;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PulloutCount;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         beatCountPerPulloutCount;                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         beatAssistCount;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecoveryAssistCount;                               // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CooperateActionCount;                              // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssaultCount;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScorePoint;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AGameBestPoint;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AGameAveragePoint;                                 // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RescueCount;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubversiveCount;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BillboardChartRank;                                // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalGetPoint;                                     // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalLikeCount;                                    // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPvCount;                                      // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosSeasonBattleData) == 0x000004, "Wrong alignment on FCosmosSeasonBattleData");
static_assert(sizeof(FCosmosSeasonBattleData) == 0x000060, "Wrong size on FCosmosSeasonBattleData");
static_assert(offsetof(FCosmosSeasonBattleData, SeasonCode) == 0x000000, "Member 'FCosmosSeasonBattleData::SeasonCode' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonBattleData, RankExpCode) == 0x000004, "Member 'FCosmosSeasonBattleData::RankExpCode' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonBattleData, PlayMatchCount) == 0x000008, "Member 'FCosmosSeasonBattleData::PlayMatchCount' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonBattleData, WinCount) == 0x00000C, "Member 'FCosmosSeasonBattleData::WinCount' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonBattleData, WinSurvival) == 0x000010, "Member 'FCosmosSeasonBattleData::WinSurvival' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonBattleData, Damage) == 0x000014, "Member 'FCosmosSeasonBattleData::Damage' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonBattleData, BestDamage) == 0x000018, "Member 'FCosmosSeasonBattleData::BestDamage' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonBattleData, AverageDamage) == 0x00001C, "Member 'FCosmosSeasonBattleData::AverageDamage' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonBattleData, beatCount) == 0x000020, "Member 'FCosmosSeasonBattleData::beatCount' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonBattleData, PulloutCount) == 0x000024, "Member 'FCosmosSeasonBattleData::PulloutCount' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonBattleData, beatCountPerPulloutCount) == 0x000028, "Member 'FCosmosSeasonBattleData::beatCountPerPulloutCount' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonBattleData, beatAssistCount) == 0x00002C, "Member 'FCosmosSeasonBattleData::beatAssistCount' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonBattleData, RecoveryAssistCount) == 0x000030, "Member 'FCosmosSeasonBattleData::RecoveryAssistCount' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonBattleData, CooperateActionCount) == 0x000034, "Member 'FCosmosSeasonBattleData::CooperateActionCount' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonBattleData, AssaultCount) == 0x000038, "Member 'FCosmosSeasonBattleData::AssaultCount' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonBattleData, ScorePoint) == 0x00003C, "Member 'FCosmosSeasonBattleData::ScorePoint' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonBattleData, AGameBestPoint) == 0x000040, "Member 'FCosmosSeasonBattleData::AGameBestPoint' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonBattleData, AGameAveragePoint) == 0x000044, "Member 'FCosmosSeasonBattleData::AGameAveragePoint' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonBattleData, RescueCount) == 0x000048, "Member 'FCosmosSeasonBattleData::RescueCount' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonBattleData, SubversiveCount) == 0x00004C, "Member 'FCosmosSeasonBattleData::SubversiveCount' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonBattleData, BillboardChartRank) == 0x000050, "Member 'FCosmosSeasonBattleData::BillboardChartRank' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonBattleData, TotalGetPoint) == 0x000054, "Member 'FCosmosSeasonBattleData::TotalGetPoint' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonBattleData, TotalLikeCount) == 0x000058, "Member 'FCosmosSeasonBattleData::TotalLikeCount' has a wrong offset!");
static_assert(offsetof(FCosmosSeasonBattleData, TotalPvCount) == 0x00005C, "Member 'FCosmosSeasonBattleData::TotalPvCount' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosBattleGetBattleRecordListResponseParam
// 0x0070 (0x0070 - 0x0000)
struct FCosmosBattleGetBattleRecordListResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankExpCode;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayMatchCount;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinCount;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinSurvival;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Damage;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BestDamage;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AverageDamage;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         beatCount;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PulloutCount;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         beatCountPerPulloutCount;                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         beatAssistCount;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecoveryAssistCount;                               // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CooperateActionCount;                              // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssaultCount;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScorePoint;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AGameBestPoint;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AGameAveragePoint;                                 // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RescueCount;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubversiveCount;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         billboardChartBestRank;                            // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalGetPoint;                                     // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalLikeCount;                                    // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPvCount;                                      // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCosmosSeasonBattleData>        SeasonBattleList;                                  // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosBattleGetBattleRecordListResponseParam) == 0x000008, "Wrong alignment on FCosmosBattleGetBattleRecordListResponseParam");
static_assert(sizeof(FCosmosBattleGetBattleRecordListResponseParam) == 0x000070, "Wrong size on FCosmosBattleGetBattleRecordListResponseParam");
static_assert(offsetof(FCosmosBattleGetBattleRecordListResponseParam, Status) == 0x000000, "Member 'FCosmosBattleGetBattleRecordListResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosBattleGetBattleRecordListResponseParam, RankExpCode) == 0x000004, "Member 'FCosmosBattleGetBattleRecordListResponseParam::RankExpCode' has a wrong offset!");
static_assert(offsetof(FCosmosBattleGetBattleRecordListResponseParam, PlayMatchCount) == 0x000008, "Member 'FCosmosBattleGetBattleRecordListResponseParam::PlayMatchCount' has a wrong offset!");
static_assert(offsetof(FCosmosBattleGetBattleRecordListResponseParam, WinCount) == 0x00000C, "Member 'FCosmosBattleGetBattleRecordListResponseParam::WinCount' has a wrong offset!");
static_assert(offsetof(FCosmosBattleGetBattleRecordListResponseParam, WinSurvival) == 0x000010, "Member 'FCosmosBattleGetBattleRecordListResponseParam::WinSurvival' has a wrong offset!");
static_assert(offsetof(FCosmosBattleGetBattleRecordListResponseParam, Damage) == 0x000014, "Member 'FCosmosBattleGetBattleRecordListResponseParam::Damage' has a wrong offset!");
static_assert(offsetof(FCosmosBattleGetBattleRecordListResponseParam, BestDamage) == 0x000018, "Member 'FCosmosBattleGetBattleRecordListResponseParam::BestDamage' has a wrong offset!");
static_assert(offsetof(FCosmosBattleGetBattleRecordListResponseParam, AverageDamage) == 0x00001C, "Member 'FCosmosBattleGetBattleRecordListResponseParam::AverageDamage' has a wrong offset!");
static_assert(offsetof(FCosmosBattleGetBattleRecordListResponseParam, beatCount) == 0x000020, "Member 'FCosmosBattleGetBattleRecordListResponseParam::beatCount' has a wrong offset!");
static_assert(offsetof(FCosmosBattleGetBattleRecordListResponseParam, PulloutCount) == 0x000024, "Member 'FCosmosBattleGetBattleRecordListResponseParam::PulloutCount' has a wrong offset!");
static_assert(offsetof(FCosmosBattleGetBattleRecordListResponseParam, beatCountPerPulloutCount) == 0x000028, "Member 'FCosmosBattleGetBattleRecordListResponseParam::beatCountPerPulloutCount' has a wrong offset!");
static_assert(offsetof(FCosmosBattleGetBattleRecordListResponseParam, beatAssistCount) == 0x00002C, "Member 'FCosmosBattleGetBattleRecordListResponseParam::beatAssistCount' has a wrong offset!");
static_assert(offsetof(FCosmosBattleGetBattleRecordListResponseParam, RecoveryAssistCount) == 0x000030, "Member 'FCosmosBattleGetBattleRecordListResponseParam::RecoveryAssistCount' has a wrong offset!");
static_assert(offsetof(FCosmosBattleGetBattleRecordListResponseParam, CooperateActionCount) == 0x000034, "Member 'FCosmosBattleGetBattleRecordListResponseParam::CooperateActionCount' has a wrong offset!");
static_assert(offsetof(FCosmosBattleGetBattleRecordListResponseParam, AssaultCount) == 0x000038, "Member 'FCosmosBattleGetBattleRecordListResponseParam::AssaultCount' has a wrong offset!");
static_assert(offsetof(FCosmosBattleGetBattleRecordListResponseParam, ScorePoint) == 0x00003C, "Member 'FCosmosBattleGetBattleRecordListResponseParam::ScorePoint' has a wrong offset!");
static_assert(offsetof(FCosmosBattleGetBattleRecordListResponseParam, AGameBestPoint) == 0x000040, "Member 'FCosmosBattleGetBattleRecordListResponseParam::AGameBestPoint' has a wrong offset!");
static_assert(offsetof(FCosmosBattleGetBattleRecordListResponseParam, AGameAveragePoint) == 0x000044, "Member 'FCosmosBattleGetBattleRecordListResponseParam::AGameAveragePoint' has a wrong offset!");
static_assert(offsetof(FCosmosBattleGetBattleRecordListResponseParam, RescueCount) == 0x000048, "Member 'FCosmosBattleGetBattleRecordListResponseParam::RescueCount' has a wrong offset!");
static_assert(offsetof(FCosmosBattleGetBattleRecordListResponseParam, SubversiveCount) == 0x00004C, "Member 'FCosmosBattleGetBattleRecordListResponseParam::SubversiveCount' has a wrong offset!");
static_assert(offsetof(FCosmosBattleGetBattleRecordListResponseParam, billboardChartBestRank) == 0x000050, "Member 'FCosmosBattleGetBattleRecordListResponseParam::billboardChartBestRank' has a wrong offset!");
static_assert(offsetof(FCosmosBattleGetBattleRecordListResponseParam, TotalGetPoint) == 0x000054, "Member 'FCosmosBattleGetBattleRecordListResponseParam::TotalGetPoint' has a wrong offset!");
static_assert(offsetof(FCosmosBattleGetBattleRecordListResponseParam, TotalLikeCount) == 0x000058, "Member 'FCosmosBattleGetBattleRecordListResponseParam::TotalLikeCount' has a wrong offset!");
static_assert(offsetof(FCosmosBattleGetBattleRecordListResponseParam, TotalPvCount) == 0x00005C, "Member 'FCosmosBattleGetBattleRecordListResponseParam::TotalPvCount' has a wrong offset!");
static_assert(offsetof(FCosmosBattleGetBattleRecordListResponseParam, SeasonBattleList) == 0x000060, "Member 'FCosmosBattleGetBattleRecordListResponseParam::SeasonBattleList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosFriendInfo
// 0x0058 (0x0058 - 0x0000)
struct FCosmosFriendInfo final
{
public:
	TArray<int32>                                 UserEmblems;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 FriendUserId;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastLogin;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ApplicationStatus;                                 // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnlineFlg;                                         // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformId;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosFriendInfo) == 0x000008, "Wrong alignment on FCosmosFriendInfo");
static_assert(sizeof(FCosmosFriendInfo) == 0x000058, "Wrong size on FCosmosFriendInfo");
static_assert(offsetof(FCosmosFriendInfo, UserEmblems) == 0x000000, "Member 'FCosmosFriendInfo::UserEmblems' has a wrong offset!");
static_assert(offsetof(FCosmosFriendInfo, FriendUserId) == 0x000010, "Member 'FCosmosFriendInfo::FriendUserId' has a wrong offset!");
static_assert(offsetof(FCosmosFriendInfo, PlayerName) == 0x000020, "Member 'FCosmosFriendInfo::PlayerName' has a wrong offset!");
static_assert(offsetof(FCosmosFriendInfo, LastLogin) == 0x000030, "Member 'FCosmosFriendInfo::LastLogin' has a wrong offset!");
static_assert(offsetof(FCosmosFriendInfo, ApplicationStatus) == 0x000040, "Member 'FCosmosFriendInfo::ApplicationStatus' has a wrong offset!");
static_assert(offsetof(FCosmosFriendInfo, OnlineFlg) == 0x000044, "Member 'FCosmosFriendInfo::OnlineFlg' has a wrong offset!");
static_assert(offsetof(FCosmosFriendInfo, PlatformId) == 0x000048, "Member 'FCosmosFriendInfo::PlatformId' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosFriendGetFriendshipListResponseParam
// 0x0020 (0x0020 - 0x0000)
struct FCosmosFriendGetFriendshipListResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FriendsCount;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxFriendsCount;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Maxpage;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCosmosFriendInfo>              FriendList;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosFriendGetFriendshipListResponseParam) == 0x000008, "Wrong alignment on FCosmosFriendGetFriendshipListResponseParam");
static_assert(sizeof(FCosmosFriendGetFriendshipListResponseParam) == 0x000020, "Wrong size on FCosmosFriendGetFriendshipListResponseParam");
static_assert(offsetof(FCosmosFriendGetFriendshipListResponseParam, Status) == 0x000000, "Member 'FCosmosFriendGetFriendshipListResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosFriendGetFriendshipListResponseParam, FriendsCount) == 0x000004, "Member 'FCosmosFriendGetFriendshipListResponseParam::FriendsCount' has a wrong offset!");
static_assert(offsetof(FCosmosFriendGetFriendshipListResponseParam, MaxFriendsCount) == 0x000008, "Member 'FCosmosFriendGetFriendshipListResponseParam::MaxFriendsCount' has a wrong offset!");
static_assert(offsetof(FCosmosFriendGetFriendshipListResponseParam, Maxpage) == 0x00000C, "Member 'FCosmosFriendGetFriendshipListResponseParam::Maxpage' has a wrong offset!");
static_assert(offsetof(FCosmosFriendGetFriendshipListResponseParam, FriendList) == 0x000010, "Member 'FCosmosFriendGetFriendshipListResponseParam::FriendList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosPresetParam
// 0x000C (0x000C - 0x0000)
struct FCosmosPresetParam final
{
public:
	int32                                         No;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParamCode;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosPresetParam) == 0x000004, "Wrong alignment on FCosmosPresetParam");
static_assert(sizeof(FCosmosPresetParam) == 0x00000C, "Wrong size on FCosmosPresetParam");
static_assert(offsetof(FCosmosPresetParam, No) == 0x000000, "Member 'FCosmosPresetParam::No' has a wrong offset!");
static_assert(offsetof(FCosmosPresetParam, Type) == 0x000004, "Member 'FCosmosPresetParam::Type' has a wrong offset!");
static_assert(offsetof(FCosmosPresetParam, ParamCode) == 0x000008, "Member 'FCosmosPresetParam::ParamCode' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosPresetSubData
// 0x0020 (0x0020 - 0x0000)
struct FCosmosPresetSubData final
{
public:
	int32                                         PresetNo;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostumeCode;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCosmosPresetParam>             Params;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SettingAura;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCosmosPresetSubData) == 0x000008, "Wrong alignment on FCosmosPresetSubData");
static_assert(sizeof(FCosmosPresetSubData) == 0x000020, "Wrong size on FCosmosPresetSubData");
static_assert(offsetof(FCosmosPresetSubData, PresetNo) == 0x000000, "Member 'FCosmosPresetSubData::PresetNo' has a wrong offset!");
static_assert(offsetof(FCosmosPresetSubData, CostumeCode) == 0x000004, "Member 'FCosmosPresetSubData::CostumeCode' has a wrong offset!");
static_assert(offsetof(FCosmosPresetSubData, Params) == 0x000008, "Member 'FCosmosPresetSubData::Params' has a wrong offset!");
static_assert(offsetof(FCosmosPresetSubData, SettingAura) == 0x000018, "Member 'FCosmosPresetSubData::SettingAura' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosPresetData
// 0x0018 (0x0018 - 0x0000)
struct FCosmosPresetData final
{
public:
	int32                                         CharacterCode;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnlockedPreset;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCosmosPresetSubData>           Params;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosPresetData) == 0x000008, "Wrong alignment on FCosmosPresetData");
static_assert(sizeof(FCosmosPresetData) == 0x000018, "Wrong size on FCosmosPresetData");
static_assert(offsetof(FCosmosPresetData, CharacterCode) == 0x000000, "Member 'FCosmosPresetData::CharacterCode' has a wrong offset!");
static_assert(offsetof(FCosmosPresetData, UnlockedPreset) == 0x000004, "Member 'FCosmosPresetData::UnlockedPreset' has a wrong offset!");
static_assert(offsetof(FCosmosPresetData, Params) == 0x000008, "Member 'FCosmosPresetData::Params' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosPresetGetPresetListResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosPresetGetPresetListResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosPresetData>              Presets;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosPresetGetPresetListResponseParam) == 0x000008, "Wrong alignment on FCosmosPresetGetPresetListResponseParam");
static_assert(sizeof(FCosmosPresetGetPresetListResponseParam) == 0x000018, "Wrong size on FCosmosPresetGetPresetListResponseParam");
static_assert(offsetof(FCosmosPresetGetPresetListResponseParam, Status) == 0x000000, "Member 'FCosmosPresetGetPresetListResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosPresetGetPresetListResponseParam, Presets) == 0x000008, "Member 'FCosmosPresetGetPresetListResponseParam::Presets' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosProfileGetDedprofileResponseParam
// 0x00E0 (0x00E0 - 0x0000)
struct FCosmosProfileGetDedprofileResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserName;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Profile;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OnlineId;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 UserEmblems;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CharacterCode;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildEmblemCode;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildId;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildName;                                         // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildProfile;                                      // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelPoint;                                        // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankExpCode;                                       // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankPoint;                                         // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BillboardRank;                                     // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BillboardPoint;                                    // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BillboardTodayPoint;                               // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MyADId;                                            // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FriendshipStatus;                                  // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         battleRecordFlg;                                   // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FrontId;                                           // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostumeId;                                         // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LikeRemaining;                                     // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SettingAura;                                       // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AuraDisplayTarget;                                 // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AuraDisplayArea;                                   // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCosmosProfileGetDedprofileResponseParam) == 0x000008, "Wrong alignment on FCosmosProfileGetDedprofileResponseParam");
static_assert(sizeof(FCosmosProfileGetDedprofileResponseParam) == 0x0000E0, "Wrong size on FCosmosProfileGetDedprofileResponseParam");
static_assert(offsetof(FCosmosProfileGetDedprofileResponseParam, Status) == 0x000000, "Member 'FCosmosProfileGetDedprofileResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetDedprofileResponseParam, UserName) == 0x000008, "Member 'FCosmosProfileGetDedprofileResponseParam::UserName' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetDedprofileResponseParam, Profile) == 0x000018, "Member 'FCosmosProfileGetDedprofileResponseParam::Profile' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetDedprofileResponseParam, OnlineId) == 0x000028, "Member 'FCosmosProfileGetDedprofileResponseParam::OnlineId' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetDedprofileResponseParam, UserEmblems) == 0x000038, "Member 'FCosmosProfileGetDedprofileResponseParam::UserEmblems' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetDedprofileResponseParam, CharacterCode) == 0x000048, "Member 'FCosmosProfileGetDedprofileResponseParam::CharacterCode' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetDedprofileResponseParam, GuildEmblemCode) == 0x00004C, "Member 'FCosmosProfileGetDedprofileResponseParam::GuildEmblemCode' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetDedprofileResponseParam, GuildId) == 0x000050, "Member 'FCosmosProfileGetDedprofileResponseParam::GuildId' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetDedprofileResponseParam, GuildName) == 0x000060, "Member 'FCosmosProfileGetDedprofileResponseParam::GuildName' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetDedprofileResponseParam, GuildProfile) == 0x000070, "Member 'FCosmosProfileGetDedprofileResponseParam::GuildProfile' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetDedprofileResponseParam, Level) == 0x000080, "Member 'FCosmosProfileGetDedprofileResponseParam::Level' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetDedprofileResponseParam, LevelPoint) == 0x000084, "Member 'FCosmosProfileGetDedprofileResponseParam::LevelPoint' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetDedprofileResponseParam, RankExpCode) == 0x000088, "Member 'FCosmosProfileGetDedprofileResponseParam::RankExpCode' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetDedprofileResponseParam, RankPoint) == 0x00008C, "Member 'FCosmosProfileGetDedprofileResponseParam::RankPoint' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetDedprofileResponseParam, BillboardRank) == 0x000090, "Member 'FCosmosProfileGetDedprofileResponseParam::BillboardRank' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetDedprofileResponseParam, BillboardPoint) == 0x000094, "Member 'FCosmosProfileGetDedprofileResponseParam::BillboardPoint' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetDedprofileResponseParam, BillboardTodayPoint) == 0x000098, "Member 'FCosmosProfileGetDedprofileResponseParam::BillboardTodayPoint' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetDedprofileResponseParam, MyADId) == 0x0000A0, "Member 'FCosmosProfileGetDedprofileResponseParam::MyADId' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetDedprofileResponseParam, FriendshipStatus) == 0x0000B0, "Member 'FCosmosProfileGetDedprofileResponseParam::FriendshipStatus' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetDedprofileResponseParam, battleRecordFlg) == 0x0000B4, "Member 'FCosmosProfileGetDedprofileResponseParam::battleRecordFlg' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetDedprofileResponseParam, FrontId) == 0x0000B8, "Member 'FCosmosProfileGetDedprofileResponseParam::FrontId' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetDedprofileResponseParam, CostumeId) == 0x0000C8, "Member 'FCosmosProfileGetDedprofileResponseParam::CostumeId' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetDedprofileResponseParam, LikeRemaining) == 0x0000CC, "Member 'FCosmosProfileGetDedprofileResponseParam::LikeRemaining' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetDedprofileResponseParam, SettingAura) == 0x0000D0, "Member 'FCosmosProfileGetDedprofileResponseParam::SettingAura' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetDedprofileResponseParam, AuraDisplayTarget) == 0x0000D4, "Member 'FCosmosProfileGetDedprofileResponseParam::AuraDisplayTarget' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetDedprofileResponseParam, AuraDisplayArea) == 0x0000D8, "Member 'FCosmosProfileGetDedprofileResponseParam::AuraDisplayArea' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosProfileGetProfileResponseParam
// 0x00E0 (0x00E0 - 0x0000)
struct FCosmosProfileGetProfileResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserName;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Profile;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OnlineId;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 UserEmblems;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CharacterCode;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildEmblemCode;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildId;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildName;                                         // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildProfile;                                      // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelPoint;                                        // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankExpCode;                                       // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankPoint;                                         // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BillboardRank;                                     // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BillboardPoint;                                    // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BillboardTodayPoint;                               // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MyADId;                                            // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FriendshipStatus;                                  // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         battleRecordFlg;                                   // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FrontId;                                           // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostumeId;                                         // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LikeRemaining;                                     // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SettingAura;                                       // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AuraDisplayTarget;                                 // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AuraDisplayArea;                                   // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCosmosProfileGetProfileResponseParam) == 0x000008, "Wrong alignment on FCosmosProfileGetProfileResponseParam");
static_assert(sizeof(FCosmosProfileGetProfileResponseParam) == 0x0000E0, "Wrong size on FCosmosProfileGetProfileResponseParam");
static_assert(offsetof(FCosmosProfileGetProfileResponseParam, Status) == 0x000000, "Member 'FCosmosProfileGetProfileResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetProfileResponseParam, UserName) == 0x000008, "Member 'FCosmosProfileGetProfileResponseParam::UserName' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetProfileResponseParam, Profile) == 0x000018, "Member 'FCosmosProfileGetProfileResponseParam::Profile' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetProfileResponseParam, OnlineId) == 0x000028, "Member 'FCosmosProfileGetProfileResponseParam::OnlineId' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetProfileResponseParam, UserEmblems) == 0x000038, "Member 'FCosmosProfileGetProfileResponseParam::UserEmblems' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetProfileResponseParam, CharacterCode) == 0x000048, "Member 'FCosmosProfileGetProfileResponseParam::CharacterCode' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetProfileResponseParam, GuildEmblemCode) == 0x00004C, "Member 'FCosmosProfileGetProfileResponseParam::GuildEmblemCode' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetProfileResponseParam, GuildId) == 0x000050, "Member 'FCosmosProfileGetProfileResponseParam::GuildId' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetProfileResponseParam, GuildName) == 0x000060, "Member 'FCosmosProfileGetProfileResponseParam::GuildName' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetProfileResponseParam, GuildProfile) == 0x000070, "Member 'FCosmosProfileGetProfileResponseParam::GuildProfile' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetProfileResponseParam, Level) == 0x000080, "Member 'FCosmosProfileGetProfileResponseParam::Level' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetProfileResponseParam, LevelPoint) == 0x000084, "Member 'FCosmosProfileGetProfileResponseParam::LevelPoint' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetProfileResponseParam, RankExpCode) == 0x000088, "Member 'FCosmosProfileGetProfileResponseParam::RankExpCode' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetProfileResponseParam, RankPoint) == 0x00008C, "Member 'FCosmosProfileGetProfileResponseParam::RankPoint' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetProfileResponseParam, BillboardRank) == 0x000090, "Member 'FCosmosProfileGetProfileResponseParam::BillboardRank' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetProfileResponseParam, BillboardPoint) == 0x000094, "Member 'FCosmosProfileGetProfileResponseParam::BillboardPoint' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetProfileResponseParam, BillboardTodayPoint) == 0x000098, "Member 'FCosmosProfileGetProfileResponseParam::BillboardTodayPoint' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetProfileResponseParam, MyADId) == 0x0000A0, "Member 'FCosmosProfileGetProfileResponseParam::MyADId' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetProfileResponseParam, FriendshipStatus) == 0x0000B0, "Member 'FCosmosProfileGetProfileResponseParam::FriendshipStatus' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetProfileResponseParam, battleRecordFlg) == 0x0000B4, "Member 'FCosmosProfileGetProfileResponseParam::battleRecordFlg' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetProfileResponseParam, FrontId) == 0x0000B8, "Member 'FCosmosProfileGetProfileResponseParam::FrontId' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetProfileResponseParam, CostumeId) == 0x0000C8, "Member 'FCosmosProfileGetProfileResponseParam::CostumeId' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetProfileResponseParam, LikeRemaining) == 0x0000CC, "Member 'FCosmosProfileGetProfileResponseParam::LikeRemaining' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetProfileResponseParam, SettingAura) == 0x0000D0, "Member 'FCosmosProfileGetProfileResponseParam::SettingAura' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetProfileResponseParam, AuraDisplayTarget) == 0x0000D4, "Member 'FCosmosProfileGetProfileResponseParam::AuraDisplayTarget' has a wrong offset!");
static_assert(offsetof(FCosmosProfileGetProfileResponseParam, AuraDisplayArea) == 0x0000D8, "Member 'FCosmosProfileGetProfileResponseParam::AuraDisplayArea' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosMainGetVersionResponseParam
// 0x0028 (0x0028 - 0x0000)
struct FCosmosMainGetVersionResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerVersion;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MasterVersion;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosMainGetVersionResponseParam) == 0x000008, "Wrong alignment on FCosmosMainGetVersionResponseParam");
static_assert(sizeof(FCosmosMainGetVersionResponseParam) == 0x000028, "Wrong size on FCosmosMainGetVersionResponseParam");
static_assert(offsetof(FCosmosMainGetVersionResponseParam, Status) == 0x000000, "Member 'FCosmosMainGetVersionResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetVersionResponseParam, ServerVersion) == 0x000008, "Member 'FCosmosMainGetVersionResponseParam::ServerVersion' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetVersionResponseParam, MasterVersion) == 0x000018, "Member 'FCosmosMainGetVersionResponseParam::MasterVersion' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosMenuRankingData
// 0x0010 (0x0010 - 0x0000)
struct FCosmosMenuRankingData final
{
public:
	int32                                         RankingCode;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonCode;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Result;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LeagueJudge;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosMenuRankingData) == 0x000004, "Wrong alignment on FCosmosMenuRankingData");
static_assert(sizeof(FCosmosMenuRankingData) == 0x000010, "Wrong size on FCosmosMenuRankingData");
static_assert(offsetof(FCosmosMenuRankingData, RankingCode) == 0x000000, "Member 'FCosmosMenuRankingData::RankingCode' has a wrong offset!");
static_assert(offsetof(FCosmosMenuRankingData, SeasonCode) == 0x000004, "Member 'FCosmosMenuRankingData::SeasonCode' has a wrong offset!");
static_assert(offsetof(FCosmosMenuRankingData, Result) == 0x000008, "Member 'FCosmosMenuRankingData::Result' has a wrong offset!");
static_assert(offsetof(FCosmosMenuRankingData, LeagueJudge) == 0x00000C, "Member 'FCosmosMenuRankingData::LeagueJudge' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosMenuCurrencyData
// 0x0020 (0x0020 - 0x0000)
struct FCosmosMenuCurrencyData final
{
public:
	int32                                         ItemCategoryCode;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCode;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LimitDate;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosMenuCurrencyData) == 0x000008, "Wrong alignment on FCosmosMenuCurrencyData");
static_assert(sizeof(FCosmosMenuCurrencyData) == 0x000020, "Wrong size on FCosmosMenuCurrencyData");
static_assert(offsetof(FCosmosMenuCurrencyData, ItemCategoryCode) == 0x000000, "Member 'FCosmosMenuCurrencyData::ItemCategoryCode' has a wrong offset!");
static_assert(offsetof(FCosmosMenuCurrencyData, ItemCode) == 0x000004, "Member 'FCosmosMenuCurrencyData::ItemCode' has a wrong offset!");
static_assert(offsetof(FCosmosMenuCurrencyData, ItemNum) == 0x000008, "Member 'FCosmosMenuCurrencyData::ItemNum' has a wrong offset!");
static_assert(offsetof(FCosmosMenuCurrencyData, LimitDate) == 0x000010, "Member 'FCosmosMenuCurrencyData::LimitDate' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosMainGetMenuResponseParam
// 0x00F8 (0x00F8 - 0x0000)
struct FCosmosMainGetMenuResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerFirstEmblemCode;                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerSecondEmblemCode;                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerThirdEmblemCode;                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LeaderFlg;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildEmblemCode;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildId;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuildName;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterCode;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostumeCode;                                       // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildPoint;                                        // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NoticeCount;                                       // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NoticeType;                                        // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FriendCount;                                       // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewNoticeFlg;                                      // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LastLogin;                                         // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TutorialStatus;                                    // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomizeOpenFlg;                                  // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShopOpenFlg;                                       // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GashaOpenFlg;                                      // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FriendOpenFlg;                                     // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadMatchOpenFlg;                                 // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadOpenFlg;                                      // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChatOpenFlg;                                       // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroCrystal;                                       // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gold;                                              // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroSoul;                                          // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OtherMyAdId;                                       // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCosmosMenuRankingData>         RankingList;                                       // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCosmosMenuCurrencyData>        CurrencyList;                                      // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RentalPoint;                                       // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SettingAura;                                       // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MaintenanceStartTime;                              // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AvailableCharacterFlg;                             // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActionChangeCode;                                  // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosMainGetMenuResponseParam) == 0x000008, "Wrong alignment on FCosmosMainGetMenuResponseParam");
static_assert(sizeof(FCosmosMainGetMenuResponseParam) == 0x0000F8, "Wrong size on FCosmosMainGetMenuResponseParam");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, Status) == 0x000000, "Member 'FCosmosMainGetMenuResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, PlayerFirstEmblemCode) == 0x000004, "Member 'FCosmosMainGetMenuResponseParam::PlayerFirstEmblemCode' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, PlayerSecondEmblemCode) == 0x000008, "Member 'FCosmosMainGetMenuResponseParam::PlayerSecondEmblemCode' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, PlayerThirdEmblemCode) == 0x00000C, "Member 'FCosmosMainGetMenuResponseParam::PlayerThirdEmblemCode' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, PlayerName) == 0x000010, "Member 'FCosmosMainGetMenuResponseParam::PlayerName' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, LeaderFlg) == 0x000020, "Member 'FCosmosMainGetMenuResponseParam::LeaderFlg' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, GuildEmblemCode) == 0x000024, "Member 'FCosmosMainGetMenuResponseParam::GuildEmblemCode' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, GuildId) == 0x000028, "Member 'FCosmosMainGetMenuResponseParam::GuildId' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, GuildName) == 0x000038, "Member 'FCosmosMainGetMenuResponseParam::GuildName' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, CharacterCode) == 0x000048, "Member 'FCosmosMainGetMenuResponseParam::CharacterCode' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, CostumeCode) == 0x00004C, "Member 'FCosmosMainGetMenuResponseParam::CostumeCode' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, GuildPoint) == 0x000050, "Member 'FCosmosMainGetMenuResponseParam::GuildPoint' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, NoticeCount) == 0x000054, "Member 'FCosmosMainGetMenuResponseParam::NoticeCount' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, NoticeType) == 0x000058, "Member 'FCosmosMainGetMenuResponseParam::NoticeType' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, FriendCount) == 0x00005C, "Member 'FCosmosMainGetMenuResponseParam::FriendCount' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, NewNoticeFlg) == 0x000060, "Member 'FCosmosMainGetMenuResponseParam::NewNoticeFlg' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, LastLogin) == 0x000068, "Member 'FCosmosMainGetMenuResponseParam::LastLogin' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, TutorialStatus) == 0x000078, "Member 'FCosmosMainGetMenuResponseParam::TutorialStatus' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, CustomizeOpenFlg) == 0x00007C, "Member 'FCosmosMainGetMenuResponseParam::CustomizeOpenFlg' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, ShopOpenFlg) == 0x000080, "Member 'FCosmosMainGetMenuResponseParam::ShopOpenFlg' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, GashaOpenFlg) == 0x000084, "Member 'FCosmosMainGetMenuResponseParam::GashaOpenFlg' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, FriendOpenFlg) == 0x000088, "Member 'FCosmosMainGetMenuResponseParam::FriendOpenFlg' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, SquadMatchOpenFlg) == 0x00008C, "Member 'FCosmosMainGetMenuResponseParam::SquadMatchOpenFlg' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, SquadOpenFlg) == 0x000090, "Member 'FCosmosMainGetMenuResponseParam::SquadOpenFlg' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, ChatOpenFlg) == 0x000094, "Member 'FCosmosMainGetMenuResponseParam::ChatOpenFlg' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, HeroCrystal) == 0x000098, "Member 'FCosmosMainGetMenuResponseParam::HeroCrystal' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, Gold) == 0x00009C, "Member 'FCosmosMainGetMenuResponseParam::Gold' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, HeroSoul) == 0x0000A0, "Member 'FCosmosMainGetMenuResponseParam::HeroSoul' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, OtherMyAdId) == 0x0000A8, "Member 'FCosmosMainGetMenuResponseParam::OtherMyAdId' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, RankingList) == 0x0000B8, "Member 'FCosmosMainGetMenuResponseParam::RankingList' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, CurrencyList) == 0x0000C8, "Member 'FCosmosMainGetMenuResponseParam::CurrencyList' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, RentalPoint) == 0x0000D8, "Member 'FCosmosMainGetMenuResponseParam::RentalPoint' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, SettingAura) == 0x0000DC, "Member 'FCosmosMainGetMenuResponseParam::SettingAura' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, MaintenanceStartTime) == 0x0000E0, "Member 'FCosmosMainGetMenuResponseParam::MaintenanceStartTime' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, AvailableCharacterFlg) == 0x0000F0, "Member 'FCosmosMainGetMenuResponseParam::AvailableCharacterFlg' has a wrong offset!");
static_assert(offsetof(FCosmosMainGetMenuResponseParam, ActionChangeCode) == 0x0000F4, "Member 'FCosmosMainGetMenuResponseParam::ActionChangeCode' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosSquadUserData
// 0x0020 (0x0020 - 0x0000)
struct FCosmosSquadUserData final
{
public:
	class FString                                 SquadId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosSquadUserData) == 0x000008, "Wrong alignment on FCosmosSquadUserData");
static_assert(sizeof(FCosmosSquadUserData) == 0x000020, "Wrong size on FCosmosSquadUserData");
static_assert(offsetof(FCosmosSquadUserData, SquadId) == 0x000000, "Member 'FCosmosSquadUserData::SquadId' has a wrong offset!");
static_assert(offsetof(FCosmosSquadUserData, UserId) == 0x000010, "Member 'FCosmosSquadUserData::UserId' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosRentalUserData
// 0x0018 (0x0018 - 0x0000)
struct FCosmosRentalUserData final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConsumePoint;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCosmosRentalUserData) == 0x000008, "Wrong alignment on FCosmosRentalUserData");
static_assert(sizeof(FCosmosRentalUserData) == 0x000018, "Wrong size on FCosmosRentalUserData");
static_assert(offsetof(FCosmosRentalUserData, UserId) == 0x000000, "Member 'FCosmosRentalUserData::UserId' has a wrong offset!");
static_assert(offsetof(FCosmosRentalUserData, ConsumePoint) == 0x000010, "Member 'FCosmosRentalUserData::ConsumePoint' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosKpiColumn
// 0x0018 (0x0018 - 0x0000)
struct FCosmosKpiColumn final
{
public:
	class FString                                 Column;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCosmosKpiColumn) == 0x000008, "Wrong alignment on FCosmosKpiColumn");
static_assert(sizeof(FCosmosKpiColumn) == 0x000018, "Wrong size on FCosmosKpiColumn");
static_assert(offsetof(FCosmosKpiColumn, Column) == 0x000000, "Member 'FCosmosKpiColumn::Column' has a wrong offset!");
static_assert(offsetof(FCosmosKpiColumn, Type) == 0x000010, "Member 'FCosmosKpiColumn::Type' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosKpiData
// 0x0010 (0x0010 - 0x0000)
struct FCosmosKpiData final
{
public:
	TArray<class FString>                         KpiData;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosKpiData) == 0x000008, "Wrong alignment on FCosmosKpiData");
static_assert(sizeof(FCosmosKpiData) == 0x000010, "Wrong size on FCosmosKpiData");
static_assert(offsetof(FCosmosKpiData, KpiData) == 0x000000, "Member 'FCosmosKpiData::KpiData' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosKpiNoColumnData
// 0x0028 (0x0028 - 0x0000)
struct FCosmosKpiNoColumnData final
{
public:
	int32                                         No;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosKpiColumn>               KpiColumnList;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCosmosKpiData>                 KpiDataList;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosKpiNoColumnData) == 0x000008, "Wrong alignment on FCosmosKpiNoColumnData");
static_assert(sizeof(FCosmosKpiNoColumnData) == 0x000028, "Wrong size on FCosmosKpiNoColumnData");
static_assert(offsetof(FCosmosKpiNoColumnData, No) == 0x000000, "Member 'FCosmosKpiNoColumnData::No' has a wrong offset!");
static_assert(offsetof(FCosmosKpiNoColumnData, KpiColumnList) == 0x000008, "Member 'FCosmosKpiNoColumnData::KpiColumnList' has a wrong offset!");
static_assert(offsetof(FCosmosKpiNoColumnData, KpiDataList) == 0x000018, "Member 'FCosmosKpiNoColumnData::KpiDataList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosF2PKpiData
// 0x0020 (0x0020 - 0x0000)
struct FCosmosF2PKpiData final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCosmosKpiNoColumnData>         KpiNoList;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosF2PKpiData) == 0x000008, "Wrong alignment on FCosmosF2PKpiData");
static_assert(sizeof(FCosmosF2PKpiData) == 0x000020, "Wrong size on FCosmosF2PKpiData");
static_assert(offsetof(FCosmosF2PKpiData, UserId) == 0x000000, "Member 'FCosmosF2PKpiData::UserId' has a wrong offset!");
static_assert(offsetof(FCosmosF2PKpiData, KpiNoList) == 0x000010, "Member 'FCosmosF2PKpiData::KpiNoList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosDedAvatarUser
// 0x0018 (0x0018 - 0x0000)
struct FCosmosDedAvatarUser final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AvatarCharacterCode;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCosmosDedAvatarUser) == 0x000008, "Wrong alignment on FCosmosDedAvatarUser");
static_assert(sizeof(FCosmosDedAvatarUser) == 0x000018, "Wrong size on FCosmosDedAvatarUser");
static_assert(offsetof(FCosmosDedAvatarUser, UserId) == 0x000000, "Member 'FCosmosDedAvatarUser::UserId' has a wrong offset!");
static_assert(offsetof(FCosmosDedAvatarUser, AvatarCharacterCode) == 0x000010, "Member 'FCosmosDedAvatarUser::AvatarCharacterCode' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosItemPartsData
// 0x0008 (0x0008 - 0x0000)
struct FCosmosItemPartsData final
{
public:
	int32                                         ItemCategoryCode;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCode;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosItemPartsData) == 0x000004, "Wrong alignment on FCosmosItemPartsData");
static_assert(sizeof(FCosmosItemPartsData) == 0x000008, "Wrong size on FCosmosItemPartsData");
static_assert(offsetof(FCosmosItemPartsData, ItemCategoryCode) == 0x000000, "Member 'FCosmosItemPartsData::ItemCategoryCode' has a wrong offset!");
static_assert(offsetof(FCosmosItemPartsData, ItemCode) == 0x000004, "Member 'FCosmosItemPartsData::ItemCode' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosUserMissionData
// 0x0020 (0x0020 - 0x0000)
struct FCosmosUserMissionData final
{
public:
	int32                                         MissionCode;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResetFlg;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TargetType;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosUserMissionData) == 0x000008, "Wrong alignment on FCosmosUserMissionData");
static_assert(sizeof(FCosmosUserMissionData) == 0x000020, "Wrong size on FCosmosUserMissionData");
static_assert(offsetof(FCosmosUserMissionData, MissionCode) == 0x000000, "Member 'FCosmosUserMissionData::MissionCode' has a wrong offset!");
static_assert(offsetof(FCosmosUserMissionData, Value) == 0x000004, "Member 'FCosmosUserMissionData::Value' has a wrong offset!");
static_assert(offsetof(FCosmosUserMissionData, ResetFlg) == 0x000008, "Member 'FCosmosUserMissionData::ResetFlg' has a wrong offset!");
static_assert(offsetof(FCosmosUserMissionData, TargetType) == 0x000010, "Member 'FCosmosUserMissionData::TargetType' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosMissionResultData
// 0x0020 (0x0020 - 0x0000)
struct FCosmosMissionResultData final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCosmosUserMissionData>         UserMissions;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosMissionResultData) == 0x000008, "Wrong alignment on FCosmosMissionResultData");
static_assert(sizeof(FCosmosMissionResultData) == 0x000020, "Wrong size on FCosmosMissionResultData");
static_assert(offsetof(FCosmosMissionResultData, UserId) == 0x000000, "Member 'FCosmosMissionResultData::UserId' has a wrong offset!");
static_assert(offsetof(FCosmosMissionResultData, UserMissions) == 0x000010, "Member 'FCosmosMissionResultData::UserMissions' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosCustomizeUserData
// 0x0018 (0x0018 - 0x0000)
struct FCosmosCustomizeUserData final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterCode;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCosmosCustomizeUserData) == 0x000008, "Wrong alignment on FCosmosCustomizeUserData");
static_assert(sizeof(FCosmosCustomizeUserData) == 0x000018, "Wrong size on FCosmosCustomizeUserData");
static_assert(offsetof(FCosmosCustomizeUserData, UserId) == 0x000000, "Member 'FCosmosCustomizeUserData::UserId' has a wrong offset!");
static_assert(offsetof(FCosmosCustomizeUserData, CharacterCode) == 0x000010, "Member 'FCosmosCustomizeUserData::CharacterCode' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosCustomizeParamData
// 0x0008 (0x0008 - 0x0000)
struct FCosmosCustomizeParamData final
{
public:
	int32                                         CustomizeNo;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomizeCode;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosCustomizeParamData) == 0x000004, "Wrong alignment on FCosmosCustomizeParamData");
static_assert(sizeof(FCosmosCustomizeParamData) == 0x000008, "Wrong size on FCosmosCustomizeParamData");
static_assert(offsetof(FCosmosCustomizeParamData, CustomizeNo) == 0x000000, "Member 'FCosmosCustomizeParamData::CustomizeNo' has a wrong offset!");
static_assert(offsetof(FCosmosCustomizeParamData, CustomizeCode) == 0x000004, "Member 'FCosmosCustomizeParamData::CustomizeCode' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosUsersLikeData
// 0x0018 (0x0018 - 0x0000)
struct FCosmosUsersLikeData final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LikeCount;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LikeType;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosUsersLikeData) == 0x000008, "Wrong alignment on FCosmosUsersLikeData");
static_assert(sizeof(FCosmosUsersLikeData) == 0x000018, "Wrong size on FCosmosUsersLikeData");
static_assert(offsetof(FCosmosUsersLikeData, UserId) == 0x000000, "Member 'FCosmosUsersLikeData::UserId' has a wrong offset!");
static_assert(offsetof(FCosmosUsersLikeData, LikeCount) == 0x000010, "Member 'FCosmosUsersLikeData::LikeCount' has a wrong offset!");
static_assert(offsetof(FCosmosUsersLikeData, LikeType) == 0x000014, "Member 'FCosmosUsersLikeData::LikeType' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosRecordLikeData
// 0x0018 (0x0018 - 0x0000)
struct FCosmosRecordLikeData final
{
public:
	class FString                                 Seq;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LikeCount;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCosmosRecordLikeData) == 0x000008, "Wrong alignment on FCosmosRecordLikeData");
static_assert(sizeof(FCosmosRecordLikeData) == 0x000018, "Wrong size on FCosmosRecordLikeData");
static_assert(offsetof(FCosmosRecordLikeData, Seq) == 0x000000, "Member 'FCosmosRecordLikeData::Seq' has a wrong offset!");
static_assert(offsetof(FCosmosRecordLikeData, LikeCount) == 0x000010, "Member 'FCosmosRecordLikeData::LikeCount' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosPenaltyUserData
// 0x0028 (0x0028 - 0x0000)
struct FCosmosPenaltyUserData final
{
public:
	class FString                                 PenaltyUserId;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PenaltyCode;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReporterUserId;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosPenaltyUserData) == 0x000008, "Wrong alignment on FCosmosPenaltyUserData");
static_assert(sizeof(FCosmosPenaltyUserData) == 0x000028, "Wrong size on FCosmosPenaltyUserData");
static_assert(offsetof(FCosmosPenaltyUserData, PenaltyUserId) == 0x000000, "Member 'FCosmosPenaltyUserData::PenaltyUserId' has a wrong offset!");
static_assert(offsetof(FCosmosPenaltyUserData, PenaltyCode) == 0x000010, "Member 'FCosmosPenaltyUserData::PenaltyCode' has a wrong offset!");
static_assert(offsetof(FCosmosPenaltyUserData, ReporterUserId) == 0x000018, "Member 'FCosmosPenaltyUserData::ReporterUserId' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosPhaseLikeData
// 0x000C (0x000C - 0x0000)
struct FCosmosPhaseLikeData final
{
public:
	int32                                         ResultType;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LikeCount;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LikeType;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosPhaseLikeData) == 0x000004, "Wrong alignment on FCosmosPhaseLikeData");
static_assert(sizeof(FCosmosPhaseLikeData) == 0x00000C, "Wrong size on FCosmosPhaseLikeData");
static_assert(offsetof(FCosmosPhaseLikeData, ResultType) == 0x000000, "Member 'FCosmosPhaseLikeData::ResultType' has a wrong offset!");
static_assert(offsetof(FCosmosPhaseLikeData, LikeCount) == 0x000004, "Member 'FCosmosPhaseLikeData::LikeCount' has a wrong offset!");
static_assert(offsetof(FCosmosPhaseLikeData, LikeType) == 0x000008, "Member 'FCosmosPhaseLikeData::LikeType' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosBattleUserData
// 0x0020 (0x0020 - 0x0000)
struct FCosmosBattleUserData final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SquadId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosBattleUserData) == 0x000008, "Wrong alignment on FCosmosBattleUserData");
static_assert(sizeof(FCosmosBattleUserData) == 0x000020, "Wrong size on FCosmosBattleUserData");
static_assert(offsetof(FCosmosBattleUserData, UserId) == 0x000000, "Member 'FCosmosBattleUserData::UserId' has a wrong offset!");
static_assert(offsetof(FCosmosBattleUserData, SquadId) == 0x000010, "Member 'FCosmosBattleUserData::SquadId' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosBillBoardLikeData
// 0x0028 (0x0028 - 0x0000)
struct FCosmosBillBoardLikeData final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LikeUserId;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LikeCount;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LikeType;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosBillBoardLikeData) == 0x000008, "Wrong alignment on FCosmosBillBoardLikeData");
static_assert(sizeof(FCosmosBillBoardLikeData) == 0x000028, "Wrong size on FCosmosBillBoardLikeData");
static_assert(offsetof(FCosmosBillBoardLikeData, UserId) == 0x000000, "Member 'FCosmosBillBoardLikeData::UserId' has a wrong offset!");
static_assert(offsetof(FCosmosBillBoardLikeData, LikeUserId) == 0x000010, "Member 'FCosmosBillBoardLikeData::LikeUserId' has a wrong offset!");
static_assert(offsetof(FCosmosBillBoardLikeData, LikeCount) == 0x000020, "Member 'FCosmosBillBoardLikeData::LikeCount' has a wrong offset!");
static_assert(offsetof(FCosmosBillBoardLikeData, LikeType) == 0x000024, "Member 'FCosmosBillBoardLikeData::LikeType' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosPhaseData
// 0x0030 (0x0030 - 0x0000)
struct FCosmosPhaseData final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterCode;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CharacterName;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResultPoint;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResultType;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosPhaseData) == 0x000008, "Wrong alignment on FCosmosPhaseData");
static_assert(sizeof(FCosmosPhaseData) == 0x000030, "Wrong size on FCosmosPhaseData");
static_assert(offsetof(FCosmosPhaseData, UserId) == 0x000000, "Member 'FCosmosPhaseData::UserId' has a wrong offset!");
static_assert(offsetof(FCosmosPhaseData, CharacterCode) == 0x000010, "Member 'FCosmosPhaseData::CharacterCode' has a wrong offset!");
static_assert(offsetof(FCosmosPhaseData, CharacterName) == 0x000018, "Member 'FCosmosPhaseData::CharacterName' has a wrong offset!");
static_assert(offsetof(FCosmosPhaseData, ResultPoint) == 0x000028, "Member 'FCosmosPhaseData::ResultPoint' has a wrong offset!");
static_assert(offsetof(FCosmosPhaseData, ResultType) == 0x00002C, "Member 'FCosmosPhaseData::ResultType' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosUserResultData
// 0x00A0 (0x00A0 - 0x0000)
struct FCosmosUserResultData final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SquadId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exp;                                               // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankPoint;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonPassPoint;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Coin;                                              // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuildPoint;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterCode;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterName;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LiveTime;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinFlg;                                            // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinLiveFlg;                                        // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Damage;                                            // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillCount;                                         // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeathCount;                                        // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillAssistCount;                                   // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HealAssistCount;                                   // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoopActionCount;                                   // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Point;                                             // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RescueCount;                                       // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BrokeCount;                                        // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelUpCount;                                      // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetItemCount;                                      // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemSupportCount;                                  // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssaultCount;                                      // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ScoreTableCodeList;                                // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosUserResultData) == 0x000008, "Wrong alignment on FCosmosUserResultData");
static_assert(sizeof(FCosmosUserResultData) == 0x0000A0, "Wrong size on FCosmosUserResultData");
static_assert(offsetof(FCosmosUserResultData, UserId) == 0x000000, "Member 'FCosmosUserResultData::UserId' has a wrong offset!");
static_assert(offsetof(FCosmosUserResultData, SquadId) == 0x000010, "Member 'FCosmosUserResultData::SquadId' has a wrong offset!");
static_assert(offsetof(FCosmosUserResultData, Exp) == 0x000020, "Member 'FCosmosUserResultData::Exp' has a wrong offset!");
static_assert(offsetof(FCosmosUserResultData, RankPoint) == 0x000024, "Member 'FCosmosUserResultData::RankPoint' has a wrong offset!");
static_assert(offsetof(FCosmosUserResultData, SeasonPassPoint) == 0x000028, "Member 'FCosmosUserResultData::SeasonPassPoint' has a wrong offset!");
static_assert(offsetof(FCosmosUserResultData, Coin) == 0x00002C, "Member 'FCosmosUserResultData::Coin' has a wrong offset!");
static_assert(offsetof(FCosmosUserResultData, GuildPoint) == 0x000030, "Member 'FCosmosUserResultData::GuildPoint' has a wrong offset!");
static_assert(offsetof(FCosmosUserResultData, CharacterCode) == 0x000034, "Member 'FCosmosUserResultData::CharacterCode' has a wrong offset!");
static_assert(offsetof(FCosmosUserResultData, CharacterName) == 0x000038, "Member 'FCosmosUserResultData::CharacterName' has a wrong offset!");
static_assert(offsetof(FCosmosUserResultData, LiveTime) == 0x000048, "Member 'FCosmosUserResultData::LiveTime' has a wrong offset!");
static_assert(offsetof(FCosmosUserResultData, Rank) == 0x00004C, "Member 'FCosmosUserResultData::Rank' has a wrong offset!");
static_assert(offsetof(FCosmosUserResultData, WinFlg) == 0x000050, "Member 'FCosmosUserResultData::WinFlg' has a wrong offset!");
static_assert(offsetof(FCosmosUserResultData, WinLiveFlg) == 0x000054, "Member 'FCosmosUserResultData::WinLiveFlg' has a wrong offset!");
static_assert(offsetof(FCosmosUserResultData, Damage) == 0x000058, "Member 'FCosmosUserResultData::Damage' has a wrong offset!");
static_assert(offsetof(FCosmosUserResultData, KillCount) == 0x00005C, "Member 'FCosmosUserResultData::KillCount' has a wrong offset!");
static_assert(offsetof(FCosmosUserResultData, DeathCount) == 0x000060, "Member 'FCosmosUserResultData::DeathCount' has a wrong offset!");
static_assert(offsetof(FCosmosUserResultData, KillAssistCount) == 0x000064, "Member 'FCosmosUserResultData::KillAssistCount' has a wrong offset!");
static_assert(offsetof(FCosmosUserResultData, HealAssistCount) == 0x000068, "Member 'FCosmosUserResultData::HealAssistCount' has a wrong offset!");
static_assert(offsetof(FCosmosUserResultData, CoopActionCount) == 0x00006C, "Member 'FCosmosUserResultData::CoopActionCount' has a wrong offset!");
static_assert(offsetof(FCosmosUserResultData, Point) == 0x000070, "Member 'FCosmosUserResultData::Point' has a wrong offset!");
static_assert(offsetof(FCosmosUserResultData, RescueCount) == 0x000074, "Member 'FCosmosUserResultData::RescueCount' has a wrong offset!");
static_assert(offsetof(FCosmosUserResultData, BrokeCount) == 0x000078, "Member 'FCosmosUserResultData::BrokeCount' has a wrong offset!");
static_assert(offsetof(FCosmosUserResultData, LevelUpCount) == 0x00007C, "Member 'FCosmosUserResultData::LevelUpCount' has a wrong offset!");
static_assert(offsetof(FCosmosUserResultData, GetItemCount) == 0x000080, "Member 'FCosmosUserResultData::GetItemCount' has a wrong offset!");
static_assert(offsetof(FCosmosUserResultData, ItemSupportCount) == 0x000084, "Member 'FCosmosUserResultData::ItemSupportCount' has a wrong offset!");
static_assert(offsetof(FCosmosUserResultData, AssaultCount) == 0x000088, "Member 'FCosmosUserResultData::AssaultCount' has a wrong offset!");
static_assert(offsetof(FCosmosUserResultData, ScoreTableCodeList) == 0x000090, "Member 'FCosmosUserResultData::ScoreTableCodeList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosTssInfo
// 0x0018 (0x0018 - 0x0000)
struct FCosmosTssInfo final
{
public:
	int32                                         SlotNo;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TssData;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosTssInfo) == 0x000008, "Wrong alignment on FCosmosTssInfo");
static_assert(sizeof(FCosmosTssInfo) == 0x000018, "Wrong size on FCosmosTssInfo");
static_assert(offsetof(FCosmosTssInfo, SlotNo) == 0x000000, "Member 'FCosmosTssInfo::SlotNo' has a wrong offset!");
static_assert(offsetof(FCosmosTssInfo, TssData) == 0x000008, "Member 'FCosmosTssInfo::TssData' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosTssReadListResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosTssReadListResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosTssInfo>                 TssDataList;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosTssReadListResponseParam) == 0x000008, "Wrong alignment on FCosmosTssReadListResponseParam");
static_assert(sizeof(FCosmosTssReadListResponseParam) == 0x000018, "Wrong size on FCosmosTssReadListResponseParam");
static_assert(offsetof(FCosmosTssReadListResponseParam, Status) == 0x000000, "Member 'FCosmosTssReadListResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosTssReadListResponseParam, TssDataList) == 0x000008, "Member 'FCosmosTssReadListResponseParam::TssDataList' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosTssReadResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosTssReadResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TssData;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosTssReadResponseParam) == 0x000008, "Wrong alignment on FCosmosTssReadResponseParam");
static_assert(sizeof(FCosmosTssReadResponseParam) == 0x000018, "Wrong size on FCosmosTssReadResponseParam");
static_assert(offsetof(FCosmosTssReadResponseParam, Status) == 0x000000, "Member 'FCosmosTssReadResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosTssReadResponseParam, TssData) == 0x000008, "Member 'FCosmosTssReadResponseParam::TssData' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosSysGetEnvV3ResponseParam
// 0x0028 (0x0028 - 0x0000)
struct FCosmosSysGetEnvV3ResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 URL;                                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UrlTitle;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosSysGetEnvV3ResponseParam) == 0x000008, "Wrong alignment on FCosmosSysGetEnvV3ResponseParam");
static_assert(sizeof(FCosmosSysGetEnvV3ResponseParam) == 0x000028, "Wrong size on FCosmosSysGetEnvV3ResponseParam");
static_assert(offsetof(FCosmosSysGetEnvV3ResponseParam, Status) == 0x000000, "Member 'FCosmosSysGetEnvV3ResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosSysGetEnvV3ResponseParam, URL) == 0x000008, "Member 'FCosmosSysGetEnvV3ResponseParam::URL' has a wrong offset!");
static_assert(offsetof(FCosmosSysGetEnvV3ResponseParam, UrlTitle) == 0x000018, "Member 'FCosmosSysGetEnvV3ResponseParam::UrlTitle' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosSysGetEnvV2SeparateProjectResponseParam
// 0x0028 (0x0028 - 0x0000)
struct FCosmosSysGetEnvV2SeparateProjectResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 URL;                                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UrlTitle;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosSysGetEnvV2SeparateProjectResponseParam) == 0x000008, "Wrong alignment on FCosmosSysGetEnvV2SeparateProjectResponseParam");
static_assert(sizeof(FCosmosSysGetEnvV2SeparateProjectResponseParam) == 0x000028, "Wrong size on FCosmosSysGetEnvV2SeparateProjectResponseParam");
static_assert(offsetof(FCosmosSysGetEnvV2SeparateProjectResponseParam, Status) == 0x000000, "Member 'FCosmosSysGetEnvV2SeparateProjectResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosSysGetEnvV2SeparateProjectResponseParam, URL) == 0x000008, "Member 'FCosmosSysGetEnvV2SeparateProjectResponseParam::URL' has a wrong offset!");
static_assert(offsetof(FCosmosSysGetEnvV2SeparateProjectResponseParam, UrlTitle) == 0x000018, "Member 'FCosmosSysGetEnvV2SeparateProjectResponseParam::UrlTitle' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosSysGetEnvV2ResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosSysGetEnvV2ResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 URL;                                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosSysGetEnvV2ResponseParam) == 0x000008, "Wrong alignment on FCosmosSysGetEnvV2ResponseParam");
static_assert(sizeof(FCosmosSysGetEnvV2ResponseParam) == 0x000018, "Wrong size on FCosmosSysGetEnvV2ResponseParam");
static_assert(offsetof(FCosmosSysGetEnvV2ResponseParam, Status) == 0x000000, "Member 'FCosmosSysGetEnvV2ResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosSysGetEnvV2ResponseParam, URL) == 0x000008, "Member 'FCosmosSysGetEnvV2ResponseParam::URL' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosSysGetEnvSeparateProjectResponseParam
// 0x0028 (0x0028 - 0x0000)
struct FCosmosSysGetEnvSeparateProjectResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 URL;                                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UrlTitle;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosSysGetEnvSeparateProjectResponseParam) == 0x000008, "Wrong alignment on FCosmosSysGetEnvSeparateProjectResponseParam");
static_assert(sizeof(FCosmosSysGetEnvSeparateProjectResponseParam) == 0x000028, "Wrong size on FCosmosSysGetEnvSeparateProjectResponseParam");
static_assert(offsetof(FCosmosSysGetEnvSeparateProjectResponseParam, Status) == 0x000000, "Member 'FCosmosSysGetEnvSeparateProjectResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosSysGetEnvSeparateProjectResponseParam, URL) == 0x000008, "Member 'FCosmosSysGetEnvSeparateProjectResponseParam::URL' has a wrong offset!");
static_assert(offsetof(FCosmosSysGetEnvSeparateProjectResponseParam, UrlTitle) == 0x000018, "Member 'FCosmosSysGetEnvSeparateProjectResponseParam::UrlTitle' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosSysGetEnvResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosSysGetEnvResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 URL;                                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosSysGetEnvResponseParam) == 0x000008, "Wrong alignment on FCosmosSysGetEnvResponseParam");
static_assert(sizeof(FCosmosSysGetEnvResponseParam) == 0x000018, "Wrong size on FCosmosSysGetEnvResponseParam");
static_assert(offsetof(FCosmosSysGetEnvResponseParam, Status) == 0x000000, "Member 'FCosmosSysGetEnvResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosSysGetEnvResponseParam, URL) == 0x000008, "Member 'FCosmosSysGetEnvResponseParam::URL' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosUserGetCountryResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosUserGetCountryResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Country;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosUserGetCountryResponseParam) == 0x000008, "Wrong alignment on FCosmosUserGetCountryResponseParam");
static_assert(sizeof(FCosmosUserGetCountryResponseParam) == 0x000018, "Wrong size on FCosmosUserGetCountryResponseParam");
static_assert(offsetof(FCosmosUserGetCountryResponseParam, Status) == 0x000000, "Member 'FCosmosUserGetCountryResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosUserGetCountryResponseParam, Country) == 0x000008, "Member 'FCosmosUserGetCountryResponseParam::Country' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosUserGetTrackingNumResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosUserGetTrackingNumResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Tracking_num;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosUserGetTrackingNumResponseParam) == 0x000008, "Wrong alignment on FCosmosUserGetTrackingNumResponseParam");
static_assert(sizeof(FCosmosUserGetTrackingNumResponseParam) == 0x000018, "Wrong size on FCosmosUserGetTrackingNumResponseParam");
static_assert(offsetof(FCosmosUserGetTrackingNumResponseParam, Status) == 0x000000, "Member 'FCosmosUserGetTrackingNumResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosUserGetTrackingNumResponseParam, Tracking_num) == 0x000008, "Member 'FCosmosUserGetTrackingNumResponseParam::Tracking_num' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosUserRedirectUrl
// 0x0030 (0x0030 - 0x0000)
struct FCosmosUserRedirectUrl final
{
public:
	class FString                                 RedirectUrl;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 basicId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 basicPass;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosUserRedirectUrl) == 0x000008, "Wrong alignment on FCosmosUserRedirectUrl");
static_assert(sizeof(FCosmosUserRedirectUrl) == 0x000030, "Wrong size on FCosmosUserRedirectUrl");
static_assert(offsetof(FCosmosUserRedirectUrl, RedirectUrl) == 0x000000, "Member 'FCosmosUserRedirectUrl::RedirectUrl' has a wrong offset!");
static_assert(offsetof(FCosmosUserRedirectUrl, basicId) == 0x000010, "Member 'FCosmosUserRedirectUrl::basicId' has a wrong offset!");
static_assert(offsetof(FCosmosUserRedirectUrl, basicPass) == 0x000020, "Member 'FCosmosUserRedirectUrl::basicPass' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosUserLinkBnidResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosUserLinkBnidResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosUserRedirectUrl>         RedirectUrl;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosUserLinkBnidResponseParam) == 0x000008, "Wrong alignment on FCosmosUserLinkBnidResponseParam");
static_assert(sizeof(FCosmosUserLinkBnidResponseParam) == 0x000018, "Wrong size on FCosmosUserLinkBnidResponseParam");
static_assert(offsetof(FCosmosUserLinkBnidResponseParam, Status) == 0x000000, "Member 'FCosmosUserLinkBnidResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosUserLinkBnidResponseParam, RedirectUrl) == 0x000008, "Member 'FCosmosUserLinkBnidResponseParam::RedirectUrl' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosUserConvertInfo
// 0x0020 (0x0020 - 0x0000)
struct FCosmosUserConvertInfo final
{
public:
	class FString                                 PUserId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosUserConvertInfo) == 0x000008, "Wrong alignment on FCosmosUserConvertInfo");
static_assert(sizeof(FCosmosUserConvertInfo) == 0x000020, "Wrong size on FCosmosUserConvertInfo");
static_assert(offsetof(FCosmosUserConvertInfo, PUserId) == 0x000000, "Member 'FCosmosUserConvertInfo::PUserId' has a wrong offset!");
static_assert(offsetof(FCosmosUserConvertInfo, UserId) == 0x000010, "Member 'FCosmosUserConvertInfo::UserId' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosUserConvertUserIdResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosUserConvertUserIdResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCosmosUserConvertInfo>         UserconvertInfo;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosUserConvertUserIdResponseParam) == 0x000008, "Wrong alignment on FCosmosUserConvertUserIdResponseParam");
static_assert(sizeof(FCosmosUserConvertUserIdResponseParam) == 0x000018, "Wrong size on FCosmosUserConvertUserIdResponseParam");
static_assert(offsetof(FCosmosUserConvertUserIdResponseParam, Status) == 0x000000, "Member 'FCosmosUserConvertUserIdResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosUserConvertUserIdResponseParam, UserconvertInfo) == 0x000008, "Member 'FCosmosUserConvertUserIdResponseParam::UserconvertInfo' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosUserData
// 0x0018 (0x0018 - 0x0000)
struct FCosmosUserData final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RegisterStatus;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCosmosUserData) == 0x000008, "Wrong alignment on FCosmosUserData");
static_assert(sizeof(FCosmosUserData) == 0x000018, "Wrong size on FCosmosUserData");
static_assert(offsetof(FCosmosUserData, UserId) == 0x000000, "Member 'FCosmosUserData::UserId' has a wrong offset!");
static_assert(offsetof(FCosmosUserData, RegisterStatus) == 0x000010, "Member 'FCosmosUserData::RegisterStatus' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosUserAuthResponseParam
// 0x0020 (0x0020 - 0x0000)
struct FCosmosUserAuthResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCosmosUserData                        UserInfo;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosUserAuthResponseParam) == 0x000008, "Wrong alignment on FCosmosUserAuthResponseParam");
static_assert(sizeof(FCosmosUserAuthResponseParam) == 0x000020, "Wrong size on FCosmosUserAuthResponseParam");
static_assert(offsetof(FCosmosUserAuthResponseParam, Status) == 0x000000, "Member 'FCosmosUserAuthResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosUserAuthResponseParam, UserInfo) == 0x000008, "Member 'FCosmosUserAuthResponseParam::UserInfo' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosUserLoginV2ResponseParam
// 0x0020 (0x0020 - 0x0000)
struct FCosmosUserLoginV2ResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCosmosUserData                        UserInfo;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosUserLoginV2ResponseParam) == 0x000008, "Wrong alignment on FCosmosUserLoginV2ResponseParam");
static_assert(sizeof(FCosmosUserLoginV2ResponseParam) == 0x000020, "Wrong size on FCosmosUserLoginV2ResponseParam");
static_assert(offsetof(FCosmosUserLoginV2ResponseParam, Status) == 0x000000, "Member 'FCosmosUserLoginV2ResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosUserLoginV2ResponseParam, UserInfo) == 0x000008, "Member 'FCosmosUserLoginV2ResponseParam::UserInfo' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosUserInfo
// 0x0010 (0x0010 - 0x0000)
struct FCosmosUserInfo final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosUserInfo) == 0x000008, "Wrong alignment on FCosmosUserInfo");
static_assert(sizeof(FCosmosUserInfo) == 0x000010, "Wrong size on FCosmosUserInfo");
static_assert(offsetof(FCosmosUserInfo, UserId) == 0x000000, "Member 'FCosmosUserInfo::UserId' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosUserLoginResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosUserLoginResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCosmosUserInfo                        UserInfo;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosUserLoginResponseParam) == 0x000008, "Wrong alignment on FCosmosUserLoginResponseParam");
static_assert(sizeof(FCosmosUserLoginResponseParam) == 0x000018, "Wrong size on FCosmosUserLoginResponseParam");
static_assert(offsetof(FCosmosUserLoginResponseParam, Status) == 0x000000, "Member 'FCosmosUserLoginResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosUserLoginResponseParam, UserInfo) == 0x000008, "Member 'FCosmosUserLoginResponseParam::UserInfo' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosUserCreateResponseParam
// 0x0018 (0x0018 - 0x0000)
struct FCosmosUserCreateResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCosmosUserInfo                        UserInfo;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosUserCreateResponseParam) == 0x000008, "Wrong alignment on FCosmosUserCreateResponseParam");
static_assert(sizeof(FCosmosUserCreateResponseParam) == 0x000018, "Wrong size on FCosmosUserCreateResponseParam");
static_assert(offsetof(FCosmosUserCreateResponseParam, Status) == 0x000000, "Member 'FCosmosUserCreateResponseParam::Status' has a wrong offset!");
static_assert(offsetof(FCosmosUserCreateResponseParam, UserInfo) == 0x000008, "Member 'FCosmosUserCreateResponseParam::UserInfo' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosCommonResponseParam
// 0x0004 (0x0004 - 0x0000)
struct FCosmosCommonResponseParam final
{
public:
	int32                                         Status;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosCommonResponseParam) == 0x000004, "Wrong alignment on FCosmosCommonResponseParam");
static_assert(sizeof(FCosmosCommonResponseParam) == 0x000004, "Wrong size on FCosmosCommonResponseParam");
static_assert(offsetof(FCosmosCommonResponseParam, Status) == 0x000000, "Member 'FCosmosCommonResponseParam::Status' has a wrong offset!");

// ScriptStruct CosmosWebApi.CosmosResponseHeader
// 0x0028 (0x0028 - 0x0000)
struct FCosmosResponseHeader final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Session;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Date;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCosmosResponseHeader) == 0x000008, "Wrong alignment on FCosmosResponseHeader");
static_assert(sizeof(FCosmosResponseHeader) == 0x000028, "Wrong size on FCosmosResponseHeader");
static_assert(offsetof(FCosmosResponseHeader, Result) == 0x000000, "Member 'FCosmosResponseHeader::Result' has a wrong offset!");
static_assert(offsetof(FCosmosResponseHeader, Session) == 0x000008, "Member 'FCosmosResponseHeader::Session' has a wrong offset!");
static_assert(offsetof(FCosmosResponseHeader, Date) == 0x000018, "Member 'FCosmosResponseHeader::Date' has a wrong offset!");

}

