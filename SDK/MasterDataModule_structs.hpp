#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MasterDataModule

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum MasterDataModule.EMdKpiSupplyType
// NumValues: 0x0006
enum class EMdKpiSupplyType : uint8
{
	Invalid                                  = 0,
	USE_COUNT                                = 1,
	PICK_COUNT                               = 2,
	OPEN_COUNT                               = 3,
	CITIZEN_ACTION_COUNT                     = 4,
	Max                                      = 5,
};

// Enum MasterDataModule.EMdPenaltyType
// NumValues: 0x000E
enum class EMdPenaltyType : uint8
{
	Invalid                                  = 0,
	ReportedProfile                          = 1,
	ReportedCheatTool                        = 2,
	ReportedHarassment                       = 3,
	ReportedVoiceChat                        = 4,
	ReportedTextChat                         = 5,
	Reported6Times                           = 6,
	Disconnected                             = 7,
	Disconnected3Times                       = 8,
	IntentionalRetire                        = 9,
	ReportedGuildProfile                     = 10,
	DetectionedCheat                         = 11,
	CustomMatchingSpoofCheat                 = 12,
	Max                                      = 13,
};

// Enum MasterDataModule.EMdRarity
// NumValues: 0x0006
enum class EMdRarity : uint8
{
	Invalid                                  = 0,
	C                                        = 1,
	R                                        = 2,
	SR                                       = 3,
	SSR                                      = 4,
	Max                                      = 5,
};

// Enum MasterDataModule.EMdRarityItemCategory
// NumValues: 0x0008
enum class EMdRarityItemCategory : uint8
{
	Invalid                                  = 0,
	COSTUME                                  = 1,
	EMOTE                                    = 2,
	VOICE                                    = 3,
	CURRENCY                                 = 4,
	CHARACTER                                = 5,
	VARIATION                                = 6,
	Max                                      = 7,
};

// Enum MasterDataModule.EMdMissionTransition
// NumValues: 0x0011
enum class EMdMissionTransition : uint8
{
	Invalid                                  = 0,
	NO_TRANSITION                            = 1,
	DAILY                                    = 2,
	WEEKLY                                   = 3,
	BATTLE                                   = 4,
	TRAINING                                 = 5,
	MY_PROFILE                               = 6,
	MY_AD                                    = 7,
	FRIEND_LIST                              = 8,
	SHOP                                     = 9,
	GUILD                                    = 10,
	RANKING                                  = 11,
	ACCOUNT_LINKAGE                          = 12,
	SETTING                                  = 13,
	PRESET                                   = 14,
	GASHA                                    = 15,
	Max                                      = 16,
};

// Enum MasterDataModule.EMdPlayMenuHamburgerMenuList
// NumValues: 0x0018
enum class EMdPlayMenuHamburgerMenuList : uint8
{
	Invalid                                  = 0,
	PROFILE                                  = 1,
	GALLERY                                  = 2,
	RANKING                                  = 3,
	GUILD                                    = 4,
	SETTING                                  = 5,
	NOTICE                                   = 6,
	HELP                                     = 7,
	INQUIRIES                                = 8,
	ACCOUNT_LINKAGE                          = 9,
	GASHA_HISTORY                            = 10,
	ABOUT_PAID_COINS                         = 11,
	COPYRIGHT                                = 12,
	RETURN_TITLE                             = 13,
	EXIT_GAME                                = 14,
	TERMS_OF_SERVICE                         = 15,
	PRIVACY_POLICY                           = 16,
	ABOUT_DATA_USAGE                         = 17,
	SPECIFIED_COMMERCIAL_TRANSACTION_LAW     = 18,
	ACT_ON_SETTLEMENT                        = 19,
	VERSION_WINDOW                           = 20,
	STAFFROLL                                = 21,
	LOGIN_BONUS                              = 22,
	Max                                      = 23,
};

// Enum MasterDataModule.EMdMissionType
// NumValues: 0x0004
enum class EMdMissionType : uint8
{
	Invalid                                  = 0,
	BATTLE                                   = 1,
	SYSTEM                                   = 2,
	Max                                      = 3,
};

// Enum MasterDataModule.EMdMissionCategory
// NumValues: 0x0007
enum class EMdMissionCategory : uint8
{
	Invalid                                  = 0,
	DAILY                                    = 1,
	WEEKLY                                   = 2,
	SEASON                                   = 3,
	SPECIAL                                  = 4,
	EVENT                                    = 5,
	Max                                      = 6,
};

// Enum MasterDataModule.EMdCharacterAssign
// NumValues: 0x0005
enum class EMdCharacterAssign : uint8
{
	Invalid                                  = 0,
	Undef                                    = 1,
	HERO                                     = 2,
	VILLAIN                                  = 3,
	Max                                      = 4,
};

// Enum MasterDataModule.EMdCharacterCategory
// NumValues: 0x000C
enum class EMdCharacterCategory : uint8
{
	Invalid                                  = 0,
	Undef                                    = 1,
	YueiHighSchool1stA                       = 2,
	YueiHighSchool1stB                       = 3,
	YueiHighSchoolStudent                    = 4,
	YueiHighSchoolTeacher                    = 5,
	ProfessionalHero                         = 6,
	VillainUnion                             = 7,
	Villain                                  = 8,
	ShieHassaiKai                            = 9,
	Avatar                                   = 10,
	Max                                      = 11,
};

// Enum MasterDataModule.EMdMatchType
// NumValues: 0x0004
enum class EMdMatchType : uint8
{
	Invalid                                  = 0,
	NORMAL_MATCH                             = 1,
	RANK_MATCH                               = 2,
	Max                                      = 3,
};

// Enum MasterDataModule.EMdExpType
// NumValues: 0x0004
enum class EMdExpType : uint8
{
	Invalid                                  = 0,
	PLAYER_LEVEL                             = 1,
	SEASON_PASS                              = 2,
	Max                                      = 3,
};

// Enum MasterDataModule.EMdBonusExpTargetType
// NumValues: 0x0009
enum class EMdBonusExpTargetType : uint8
{
	Invalid                                  = 0,
	GUILD_RESCUE_FACILITY_LEVEL              = 1,
	GUILD_TRAINING_FACILITY_LEVEL            = 2,
	GUILD_BUSINESS_FACILITY_LEVEL            = 3,
	GUILD_LICENSE_EXP_BOOST                  = 4,
	TEAM_FRIEND_COUNT                        = 5,
	TEAM_GUILD_MEMBER_COUNT                  = 6,
	EVENT                                    = 7,
	Max                                      = 8,
};

// Enum MasterDataModule.EMdCalcType
// NumValues: 0x0007
enum class EMdCalcType : uint8
{
	Invalid                                  = 0,
	CONST_VALUE                              = 1,
	ADD                                      = 2,
	SUB                                      = 3,
	SUB_RATIO                                = 4,
	MULT                                     = 5,
	Max                                      = 6,
};

// Enum MasterDataModule.EMdRankTargetType
// NumValues: 0x000B
enum class EMdRankTargetType : uint8
{
	Invalid                                  = 0,
	DAMAGE                                   = 1,
	KO_COUNT                                 = 2,
	TEAM_KO_COUNT                            = 3,
	KO_ASSIST_COUNT                          = 4,
	SCORE_RANKING                            = 5,
	TEAM_RANKING                             = 6,
	PHASE_TOP_COUNT                          = 7,
	SUPPORT_POINT                            = 8,
	ENTRY_COST                               = 9,
	Max                                      = 10,
};

// Enum MasterDataModule.EMdScoreRank
// NumValues: 0x0007
enum class EMdScoreRank : uint8
{
	Invalid                                  = 0,
	D                                        = 1,
	C                                        = 2,
	B                                        = 3,
	A                                        = 4,
	S                                        = 5,
	Max                                      = 6,
};

// Enum MasterDataModule.EMdGameMode
// NumValues: 0x000D
enum class EMdGameMode : uint8
{
	Invalid                                  = 0,
	COMMON                                   = 1,
	TEAM_BATTLE                              = 2,
	SQUAD_BATTLE                             = 3,
	SQUAD_BATTLE_2                           = 4,
	SQUAD_KINGS_BATTLE                       = 5,
	TEAM_ORB_BATTLE                          = 6,
	TRAINING                                 = 7,
	TUTORIAL                                 = 8,
	CPU_BSQUAD_BATTLE                        = 9,
	SOLO_BATTLE                              = 10,
	CUSTOM_MATCH                             = 11,
	Max                                      = 12,
};

// Enum MasterDataModule.EMdMissionTargetType
// NumValues: 0x0059
enum class EMdMissionTargetType : uint8
{
	Invalid                                  = 0,
	TOTAL_BATTLE_COUNT                       = 1,
	TOTAL_DESIGNATION_TEAM_BATTLE_COUNT      = 2,
	TOTAL_LIFE_TIME                          = 3,
	TOTAL_KO_COUNT                           = 4,
	TOTAL_SPECIAL_ACTION_KO_COUNT            = 5,
	TOTAL_ANNIHILATION_KO_TEAM_COUNT         = 6,
	TOTAL_DOWN_COUNT                         = 7,
	HERO_DOWN_VILLAIN                        = 8,
	VILLAIN_DOWN_HERO                        = 9,
	TOTAL_DESIGNATION_DISTANCE_DOWN_COUNT    = 10,
	TOTAL_DAMAGE                             = 11,
	TOTAL_PROTECT_DAMAGE                     = 12,
	TOTAL_PROTECT_HIT_COUNT                  = 13,
	TOTAL_MOVE_DISTANCE                      = 14,
	TOTAL_SPECIAL_ACTION_MOVE_DISTANCE       = 15,
	TOTAL_USE_SKILL_COUNT                    = 16,
	TOTAL_ABNORMAL_CONDITION_COUNT           = 17,
	TOTAL_GIVE_ABNORMAL_CONDITION_COUNT      = 18,
	TOTAL_ABNORMAL_CONDITION_DAMAGE          = 19,
	TOTAL_USE_ABILITY_COUNT                  = 20,
	TOTAL_SKILL_LEVEL_COUNT                  = 21,
	TOTAL_SPECIAL_ACTION_COUNT               = 22,
	TOTAL_CHAMPION_COUNT                     = 23,
	TOTAL_CHAMPION_CHARACTER_COUNT           = 24,
	TOTAL_CONTINUE_CHAMPION_COUNT            = 25,
	TOTAL_KO_CHAMPION_COUNT                  = 26,
	TOTAL_FRIEND_TEAM_CHAMPION_COUNT         = 27,
	TOTAL_GUILD_TEAM_CHAMPION_COUNT          = 28,
	TOTAL_NO_DOWN_CHAMPION_COUNT             = 29,
	TOTAL_NO_DOWN_TEAM_CHAMPION_COUNT        = 30,
	TOTAL_NO_KO_CHAMPION_COUNT               = 31,
	TOTAL_NO_KO_TEAM_CHAMPION_COUNT          = 32,
	TOTAL_SCORE_TOP_COUNT                    = 33,
	TOTAL_DAMAGE_PHASE_TOP_COUNT             = 34,
	TOTAL_KO_PHASE_TOP_COUNT                 = 35,
	TOTAL_CITIZEN_ACTION_PHASE_TOP_COUNT     = 36,
	TOTAL_SUPPLY_SUPPORT_PHASE_TOP_COUNT     = 37,
	TOTAL_RECOVERY_HP_COUNT                  = 38,
	TOTAL_RECOVERY_HP_VALUE                  = 39,
	TOTAL_RECOVERY_SUPPORT_HP_COUNT          = 40,
	TOTAL_RECOVERY_SUPPORT_HP_VALUE          = 41,
	TOTAL_RECOVERY_GP_COUNT                  = 42,
	TOTAL_RECOVERY_GP_VALUE                  = 43,
	TOTAL_RECOVERY_SUPPORT_GP_COUNT          = 44,
	TOTAL_RECOVERY_SUPPORT_GP_VALUE          = 45,
	TOTAL_CITIZEN_ACTION_COUNT               = 46,
	TOTAL_BATTLE_ENTER_TOP_COUNT             = 47,
	TOTAL_GET_SUPPLY_COUNT                   = 48,
	TOTAL_OPEN_SUPPLY_BOX_COUNT              = 49,
	TOTAL_BREAK_BUILDING_COUNT               = 50,
	TOTAL_BURN_TREE_COUNT                    = 51,
	TOTAL_RESCUE_COUNT                       = 52,
	TOTAL_SPECIAL_ACTION_RESCUE_COUNT        = 53,
	TOTAL_HIT_COUNT                          = 54,
	TOTAL_ABNORMAL_CONDITION_SKILL_HIT_COUNT = 55,
	TOTAL_COSTUME_COUNT                      = 56,
	LOGIN_OPERATING_DAY_COUNT                = 57,
	TOTAL_GASHA_COUNT                        = 58,
	TOTAL_FRIEND_COUNT                       = 59,
	TOTAL_GET_GOLD                           = 60,
	TOTAL_USE_GOLD                           = 61,
	EMBLEM_GET                               = 62,
	CHARACTER_GET                            = 63,
	CHANGE_COSTUME_COUNT                     = 64,
	RANK_UP                                  = 65,
	PLAYER_LEVEL                             = 66,
	RELEASE_GALLERY_ILLUSTRATION             = 67,
	GIVE_LIKE                                = 68,
	PRESET_USE                               = 69,
	CREATE_AD                                = 70,
	CREATE_AVATAR                            = 71,
	DEFEAT_BATTLE                            = 72,
	EVENT_POINT                              = 73,
	DAILY_CLEAR_WEEKLY                       = 74,
	WEEKLY_CLEAR_COUNT                       = 75,
	TRADE_SPLINTER_ITEM                      = 76,
	TUTORIAL_END                             = 77,
	LINK_ACCOUNT                             = 78,
	POSSESSION_EMOTE                         = 79,
	POSSESSION_VOICE                         = 80,
	POSSESSION_AD_PARTS                      = 81,
	POSSESSION_AVATAR_PARTS                  = 82,
	TOTAL_RANK_CHAMPION_COUNT                = 83,
	TOTAL_RANK_KO_COUNT                      = 84,
	TOTAL_RANK_SCORE_TOP_COUNT               = 85,
	ACHIEVEMENT_DATA                         = 86,
	TOTAL_SPECIAL_ACTION_KILL_COUNT          = 87,
	Max                                      = 88,
};

// Enum MasterDataModule.EMdScoreTargetType
// NumValues: 0x0020
enum class EMdScoreTargetType : uint8
{
	Invalid                                  = 0,
	WIN                                      = 1,
	TOP_DAMAGE                               = 2,
	TOP_KO                                   = 3,
	TOP_CITIZEN_ACTION                       = 4,
	TOP_SUPPLY_SUPPORT                       = 5,
	LIFE_TIME                                = 6,
	LEVEL_UP                                 = 7,
	DAMAGE                                   = 8,
	PROTECT_DAMAGE                           = 9,
	PROTECT_DAMAGE_COUNT                     = 10,
	KO_COUNT                                 = 11,
	CONTINUOUS_KO_COUNT                      = 12,
	STRONG_KO_COUNT                          = 13,
	REVENGE_KO_COUNT                         = 14,
	PLUS_ULTRA                               = 15,
	PLUS_ULTRA_KO                            = 16,
	KO_ASSIST                                = 17,
	GET_SUPPLY_COUNT                         = 18,
	USE_SUPPLY_COUNT                         = 19,
	SUPPLY_SUPPORT                           = 20,
	MOVE_DISTANCE                            = 21,
	ABILITY_COUNT                            = 22,
	RECOVERY_ALL_COUNT                       = 23,
	RESCUE_COUNT                             = 24,
	REVIVE_COUNT                             = 25,
	CHEER_COUNT                              = 26,
	CHEER_PLAYER_COUNT                       = 27,
	CHAMPION_CHEER                           = 28,
	CITIZEN_ACTION                           = 29,
	COOP_ACTION                              = 30,
	Max                                      = 31,
};

// Enum MasterDataModule.EMdScoreType
// NumValues: 0x0005
enum class EMdScoreType : uint8
{
	Invalid                                  = 0,
	MAGNIFICATION                            = 1,
	RATIO                                    = 2,
	FLAG                                     = 3,
	Max                                      = 4,
};

// Enum MasterDataModule.EMdScoreCategory
// NumValues: 0x0004
enum class EMdScoreCategory : uint8
{
	Invalid                                  = 0,
	BATTLE                                   = 1,
	SUPPORT                                  = 2,
	Max                                      = 3,
};

// Enum MasterDataModule.EMdItemKind
// NumValues: 0x0005
enum class EMdItemKind : uint8
{
	Invalid                                  = 0,
	ITEM_TICKET                              = 1,
	ITEM_PASS                                = 2,
	ITEM_CURRENCY                            = 3,
	Max                                      = 4,
};

// Enum MasterDataModule.EMdAbilityType
// NumValues: 0x0009
enum class EMdAbilityType : uint8
{
	Invalid                                  = 0,
	Undef                                    = 1,
	Power                                    = 2,
	Support                                  = 3,
	Speed                                    = 4,
	Defense                                  = 5,
	Technique                                = 6,
	Special                                  = 7,
	Max                                      = 8,
};

// Enum MasterDataModule.EMdCameraName
// NumValues: 0x000B
enum class EMdCameraName : uint8
{
	Invalid                                  = 0,
	Common                                   = 1,
	DefaultCamera                            = 2,
	DashCamera                               = 3,
	DownCamera                               = 4,
	CrouchCamera                             = 5,
	WallCrawlCamera                          = 6,
	AimingCamera                             = 7,
	AimingCrouchCamera                       = 8,
	GuardPantie                              = 9,
	Max                                      = 10,
};

// Enum MasterDataModule.EMdCalcOperator
// NumValues: 0x0005
enum class EMdCalcOperator : uint8
{
	Invalid                                  = 0,
	Scale                                    = 1,
	Diff                                     = 2,
	Displace                                 = 3,
	Max                                      = 4,
};

// Enum MasterDataModule.EMdLocalization
// NumValues: 0x0008
enum class EMdLocalization : uint8
{
	Invalid                                  = 0,
	Ja                                       = 1,
	EnUS                                     = 2,
	Fr                                       = 3,
	De                                       = 4,
	It                                       = 5,
	Es                                       = 6,
	Max                                      = 7,
};

// Enum MasterDataModule.EAbandonedVoiceVoiceType
// NumValues: 0x0005
enum class EAbandonedVoiceVoiceType : uint8
{
	Invalid                                  = 0,
	EVENT                                    = 1,
	GASHA_UPDATE                             = 2,
	SHOP_ITEM_UPDATE                         = 3,
	Max                                      = 4,
};

// Enum MasterDataModule.ECameraOffsetTargetParam
// NumValues: 0x000A
enum class ECameraOffsetTargetParam : uint8
{
	Invalid                                  = 0,
	Distance                                 = 1,
	Horizontal                               = 2,
	Height                                   = 3,
	Angle                                    = 4,
	RotationSpeed                            = 5,
	ReticleHeight                            = 6,
	ActorScale                               = 7,
	ActorScaleHeight                         = 8,
	Max                                      = 9,
};

// Enum MasterDataModule.ECharacterMagazineUseType
// NumValues: 0x0004
enum class ECharacterMagazineUseType : uint8
{
	Invalid                                  = 0,
	ONE_SHOT                                 = 1,
	PER_SEC                                  = 2,
	Max                                      = 3,
};

// Enum MasterDataModule.EConfigKeyValueEkey
// NumValues: 0x0028
enum class EConfigKeyValueEkey : uint8
{
	Invalid                                  = 0,
	BuyProLicenseBonusExp                    = 1,
	ProLicenseShopItemCode                   = 2,
	ProLicenseWithExpShopItemCode            = 3,
	PremiumLoginBonusShopItemCode            = 4,
	PremiumLoginBonusExpirationDate          = 5,
	UnlockPresetPriceGold3                   = 6,
	UnlockPresetPriceGold4                   = 7,
	UnlockPresetPriceGold5                   = 8,
	UnlockPresetPriceGold6                   = 9,
	UnlockMyAdPriceGold2                     = 10,
	UnlockMyAdPriceGold3                     = 11,
	UnlockMyAdPriceGold4                     = 12,
	DeliveryMyAdPriceGold                    = 13,
	GuildRatioRankingReward1                 = 14,
	GuildRatioRankingReward2                 = 15,
	GuildRatioRankingReward3                 = 16,
	GuildRatioRankingReward4                 = 17,
	GuildRatioRankingReward5                 = 18,
	CharacterShopCode                        = 19,
	CharacterRentalPointMAX                  = 20,
	CharacterRentalPointRecovery             = 21,
	SpecialLicenseExpPrice                   = 22,
	SpecialLicenseExpCount                   = 23,
	MaxAuralLevel                            = 24,
	MaxBillboardChartRankings                = 25,
	MaxMVPRankings                           = 26,
	MaxOfficeRankings                        = 27,
	LicenseExpMax                            = 28,
	StartCountdownToBattle                   = 29,
	ForceStartCountdownToBattle              = 30,
	BriefingOpenWaitTimeSwitch               = 31,
	BriefingOpenWaitTimePS                   = 32,
	BriefingOpenWaitTimeXBox                 = 33,
	BriefingOpenWaitTimeSteam                = 34,
	BriefingSequenceWaitTimeSwitch           = 35,
	BriefingSequenceWaitTimePS               = 36,
	BriefingSequenceWaitTimeXBox             = 37,
	BriefingSequenceWaitTimeSteam            = 38,
	Max                                      = 39,
};

// Enum MasterDataModule.ECurrencyType
// NumValues: 0x001C
enum class ECurrencyType : uint8
{
	Invalid                                  = 0,
	REAL_MONEY                               = 1,
	GOLD                                     = 2,
	HERO_CRYSTAL                             = 3,
	HERO_SOUL                                = 4,
	GASHA_TICKET                             = 5,
	GASHA_TICKET_10                          = 6,
	CHARA_TICKET                             = 7,
	COS_TICKET                               = 8,
	GUILD_POINT                              = 9,
	GALLERY_TICKET_1                         = 10,
	GALLERY_TICKET_2                         = 11,
	GALLERY_TICKET_3                         = 12,
	PREMIUM_LOGIN_BONUS_TICKET_1             = 13,
	EVENT_POINT_1                            = 14,
	EVENT_POINT_2                            = 15,
	EVENT_POINT_3                            = 16,
	EVENT_POINT_4                            = 17,
	AURA_0                                   = 18,
	AURA_1                                   = 19,
	AURA_2                                   = 20,
	AURA_3                                   = 21,
	AURA_4                                   = 22,
	AURA_5                                   = 23,
	AURA_6                                   = 24,
	RENTAL_TICKET_1                          = 25,
	SKILL_TICKET_1                           = 26,
	Max                                      = 27,
};

// Enum MasterDataModule.ECustomizeEmoteAiUses
// NumValues: 0x0004
enum class ECustomizeEmoteAiUses : uint8
{
	Invalid                                  = 0,
	None                                     = 1,
	Spawned                                  = 2,
	Max                                      = 3,
};

// Enum MasterDataModule.EEmblemCategory
// NumValues: 0x0004
enum class EEmblemCategory : uint8
{
	Invalid                                  = 0,
	PLAYER                                   = 1,
	GUILD                                    = 2,
	Max                                      = 3,
};

// Enum MasterDataModule.EEventMultipleVoicePlaybackType
// NumValues: 0x0004
enum class EEventMultipleVoicePlaybackType : uint8
{
	Invalid                                  = 0,
	CONTINUOUS                               = 1,
	RANDOM                                   = 2,
	Max                                      = 3,
};

// Enum MasterDataModule.EEventCategory
// NumValues: 0x000A
enum class EEventCategory : uint8
{
	Invalid                                  = 0,
	Battle                                   = 1,
	Drop                                     = 2,
	Guild                                    = 3,
	BoxGasha                                 = 4,
	Mission                                  = 5,
	Fes                                      = 6,
	Bonus                                    = 7,
	RentalBoost                              = 8,
	Max                                      = 9,
};

// Enum MasterDataModule.EGuildActivityLikeTarget
// NumValues: 0x0004
enum class EGuildActivityLikeTarget : uint8
{
	Invalid                                  = 0,
	Personal                                 = 1,
	Everyone                                 = 2,
	Max                                      = 3,
};

// Enum MasterDataModule.ELoginBonusContinuityType
// NumValues: 0x0004
enum class ELoginBonusContinuityType : uint8
{
	Invalid                                  = 0,
	SequenceReward                           = 1,
	FixedDayReward                           = 2,
	Max                                      = 3,
};

// Enum MasterDataModule.ELoginBonusCategory
// NumValues: 0x0006
enum class ELoginBonusCategory : uint8
{
	Invalid                                  = 0,
	DailyFree                                = 1,
	DailyPremium                             = 2,
	Event                                    = 3,
	Campaign                                 = 4,
	Max                                      = 5,
};

// Enum MasterDataModule.ELotteryBoxType
// NumValues: 0x0005
enum class ELotteryBoxType : uint8
{
	Invalid                                  = 0,
	NONE                                     = 1,
	LIMITED                                  = 2,
	UNLIMITED                                = 3,
	Max                                      = 4,
};

// Enum MasterDataModule.ELotteryLotteryType
// NumValues: 0x0007
enum class ELotteryLotteryType : uint8
{
	Invalid                                  = 0,
	LOTTERY_NORMAL                           = 1,
	LOTTERY_BOX                              = 2,
	LOTTERY_STEP                             = 3,
	LOTTERY_UPPER_LIMIT                      = 4,
	LOTTERY_RETRYABLE                        = 5,
	Max                                      = 6,
};

// Enum MasterDataModule.EMGuildLeaguesReduceBorderType
// NumValues: 0x0004
enum class EMGuildLeaguesReduceBorderType : uint8
{
	Invalid                                  = 0,
	Count                                    = 1,
	Rate                                     = 2,
	Max                                      = 3,
};

// Enum MasterDataModule.EMGuildLeaguesRaiseBorderUnit
// NumValues: 0x0004
enum class EMGuildLeaguesRaiseBorderUnit : uint8
{
	Invalid                                  = 0,
	Count                                    = 1,
	Rate                                     = 2,
	Max                                      = 3,
};

// Enum MasterDataModule.EMissionJudge
// NumValues: 0x0005
enum class EMissionJudge : uint8
{
	Invalid                                  = 0,
	API_SERVER                               = 1,
	DEDICATED_SERVER                         = 2,
	CLIENT                                   = 3,
	Max                                      = 4,
};

// Enum MasterDataModule.EMRankingPeriodType
// NumValues: 0x0005
enum class EMRankingPeriodType : uint8
{
	Invalid                                  = 0,
	Season                                   = 1,
	Monthly                                  = 2,
	Event                                    = 3,
	Max                                      = 4,
};

// Enum MasterDataModule.EMRankingTarget
// NumValues: 0x0007
enum class EMRankingTarget : uint8
{
	Invalid                                  = 0,
	Like                                     = 1,
	RankPoint                                = 2,
	ContributionPoint                        = 3,
	Score                                    = 4,
	MaxScoreTopTen                           = 5,
	Max                                      = 6,
};

// Enum MasterDataModule.EMRankingTotallingUnit
// NumValues: 0x0004
enum class EMRankingTotallingUnit : uint8
{
	Invalid                                  = 0,
	Player                                   = 1,
	Guild                                    = 2,
	Max                                      = 3,
};

// Enum MasterDataModule.EMyAdPartsCategory
// NumValues: 0x0005
enum class EMyAdPartsCategory : uint8
{
	Invalid                                  = 0,
	MESSAGE                                  = 1,
	BACKGROUND                               = 2,
	EFFECT                                   = 3,
	Max                                      = 4,
};

// Enum MasterDataModule.ENotificationTextNoticeType
// NumValues: 0x0012
enum class ENotificationTextNoticeType : uint8
{
	Invalid                                  = 0,
	Maintenance                              = 1,
	Campaign                                 = 2,
	SpecialCampaign                          = 3,
	Information                              = 4,
	Gasha                                    = 5,
	Update                                   = 6,
	Event                                    = 7,
	BattleEvent                              = 8,
	DropEvent                                = 9,
	GuildEvent                               = 10,
	BoxEvent                                 = 11,
	MissionEvent                             = 12,
	FesEvent                                 = 13,
	BonusEvent                               = 14,
	RentalBoostEvent                         = 15,
	Birthday                                 = 16,
	Max                                      = 17,
};

// Enum MasterDataModule.EPlayModeModeCategory
// NumValues: 0x000B
enum class EPlayModeModeCategory : uint8
{
	Invalid                                  = 0,
	EVENT_BATTLE                             = 1,
	FREE_MATCH                               = 2,
	RANK_MATCH                               = 3,
	TRAINING                                 = 4,
	TUTORIAL                                 = 5,
	CPU_BATTLE_EASY                          = 6,
	CPU_BATTLE_NORMAL                        = 7,
	CPU_BATTLE_HARD                          = 8,
	CUSTOMMATCH                              = 9,
	Max                                      = 10,
};

// Enum MasterDataModule.ERankExpRankCategory
// NumValues: 0x0006
enum class ERankExpRankCategory : uint8
{
	Invalid                                  = 0,
	Ace                                      = 1,
	Pro                                      = 2,
	Amateur                                  = 3,
	Beginner                                 = 4,
	Max                                      = 5,
};

// Enum MasterDataModule.ERecommendNoticeApplyAction
// NumValues: 0x0008
enum class ERecommendNoticeApplyAction : uint8
{
	Invalid                                  = 0,
	BuyLicense                               = 1,
	MyAd                                     = 2,
	TeamUp                                   = 3,
	ApplyGuild                               = 4,
	SendGuildInvitation                      = 5,
	ApplyFriend                              = 6,
	Max                                      = 7,
};

// Enum MasterDataModule.EScreenName
// NumValues: 0x0021
enum class EScreenName : uint8
{
	Invalid                                  = 0,
	Title                                    = 1,
	Eula                                     = 2,
	MainMenu                                 = 3,
	TeamUp                                   = 4,
	SearchTeam                               = 5,
	BattleReady                              = 6,
	VisualLobby                              = 7,
	RankMatchTeamUp                          = 8,
	FreeMatchTeamUp                          = 9,
	CPUMatchTeamUp                           = 10,
	EventMatchTeamUp                         = 11,
	Tutorial                                 = 12,
	Watch                                    = 13,
	Result                                   = 14,
	Equipment                                = 15,
	MyAd                                     = 16,
	PickupPlayer                             = 17,
	Avatar                                   = 18,
	Shop                                     = 19,
	PremiumShop                              = 20,
	GashaTop                                 = 21,
	Gasha                                    = 22,
	SeasonPass                               = 23,
	Profile                                  = 24,
	Gallery                                  = 25,
	Ranking                                  = 26,
	Guild                                    = 27,
	Config                                   = 28,
	Mission                                  = 29,
	Training                                 = 30,
	Event                                    = 31,
	Max                                      = 32,
};

// Enum MasterDataModule.ESeasonPassCategory
// NumValues: 0x0006
enum class ESeasonPassCategory : uint8
{
	Invalid                                  = 0,
	BEGINNER_PASS                            = 1,
	FREE_SEASON_PASS                         = 2,
	PAID_SEASON_PASS                         = 3,
	SPECIAL_SEASON_PASS                      = 4,
	Max                                      = 5,
};

// Enum MasterDataModule.EShopCategory
// NumValues: 0x0005
enum class EShopCategory : uint8
{
	Invalid                                  = 0,
	Premium                                  = 1,
	Normal                                   = 2,
	Misc                                     = 3,
	Max                                      = 4,
};

// Enum MasterDataModule.EShopItemStockReplacement
// NumValues: 0x0004
enum class EShopItemStockReplacement : uint8
{
	Invalid                                  = 0,
	None                                     = 1,
	HasProLicense                            = 2,
	Max                                      = 3,
};

// Enum MasterDataModule.EShopItemBuyScreen
// NumValues: 0x0005
enum class EShopItemBuyScreen : uint8
{
	Invalid                                  = 0,
	ProLicense                               = 1,
	SpecialLicenseExp                        = 2,
	PremiumLoginBonus                        = 3,
	Max                                      = 4,
};

// Enum MasterDataModule.EShopItemDisplaySize
// NumValues: 0x0005
enum class EShopItemDisplaySize : uint8
{
	Invalid                                  = 0,
	SMALL                                    = 1,
	MEDIUM                                   = 2,
	LARGE                                    = 3,
	Max                                      = 4,
};

// ScriptStruct MasterDataModule.MasterDataGuildInstitution
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FMasterDataGuildInstitution final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cost;                                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percent;                                           // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RescueCorrectionPercent;                           // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrainingCorrectionPercent;                         // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OfficeCorrectionPercent;                           // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataGuildInstitution) == 0x000008, "Wrong alignment on FMasterDataGuildInstitution");
static_assert(sizeof(FMasterDataGuildInstitution) == 0x000028, "Wrong size on FMasterDataGuildInstitution");
static_assert(offsetof(FMasterDataGuildInstitution, Code) == 0x000008, "Member 'FMasterDataGuildInstitution::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataGuildInstitution, Level) == 0x00000C, "Member 'FMasterDataGuildInstitution::Level' has a wrong offset!");
static_assert(offsetof(FMasterDataGuildInstitution, Cost) == 0x000010, "Member 'FMasterDataGuildInstitution::Cost' has a wrong offset!");
static_assert(offsetof(FMasterDataGuildInstitution, Percent) == 0x000014, "Member 'FMasterDataGuildInstitution::Percent' has a wrong offset!");
static_assert(offsetof(FMasterDataGuildInstitution, RescueCorrectionPercent) == 0x000018, "Member 'FMasterDataGuildInstitution::RescueCorrectionPercent' has a wrong offset!");
static_assert(offsetof(FMasterDataGuildInstitution, TrainingCorrectionPercent) == 0x00001C, "Member 'FMasterDataGuildInstitution::TrainingCorrectionPercent' has a wrong offset!");
static_assert(offsetof(FMasterDataGuildInstitution, OfficeCorrectionPercent) == 0x000020, "Member 'FMasterDataGuildInstitution::OfficeCorrectionPercent' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataCharacter
// 0x00A8 (0x00A8 - 0x0000)
struct FMasterDataCharacter
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 NameAlphabet;                                      // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VariationGroupCode;                                // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialAction1Code;                                // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialAction2Code;                                // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Playable;                                          // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdCharacterAssign                            Assign;                                            // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdAbilityType                                CpuRoleType;                                       // 0x0049(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SortIndex;                                         // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomizeCostumeGroupCode;                         // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomizeEmoteGroupCode;                           // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomizeVoiceGroupCode;                           // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShopItemCode;                                      // 0x005C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssetName;                                         // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0070(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         ObtainFrom;                                        // 0x0088(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultCode;                                       // 0x008C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnCpu;                                          // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdRarity                                     Rarity;                                            // 0x0094(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefaultEquipSetGroupCode;                          // 0x0098(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PickUpGashaCode;                                   // 0x009C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseRentalPoint;                                    // 0x00A0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataCharacter) == 0x000008, "Wrong alignment on FMasterDataCharacter");
static_assert(sizeof(FMasterDataCharacter) == 0x0000A8, "Wrong size on FMasterDataCharacter");
static_assert(offsetof(FMasterDataCharacter, Code) == 0x000008, "Member 'FMasterDataCharacter::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacter, Name) == 0x000010, "Member 'FMasterDataCharacter::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacter, NameAlphabet) == 0x000028, "Member 'FMasterDataCharacter::NameAlphabet' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacter, VariationGroupCode) == 0x000038, "Member 'FMasterDataCharacter::VariationGroupCode' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacter, SpecialAction1Code) == 0x00003C, "Member 'FMasterDataCharacter::SpecialAction1Code' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacter, SpecialAction2Code) == 0x000040, "Member 'FMasterDataCharacter::SpecialAction2Code' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacter, Playable) == 0x000044, "Member 'FMasterDataCharacter::Playable' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacter, Assign) == 0x000048, "Member 'FMasterDataCharacter::Assign' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacter, CpuRoleType) == 0x000049, "Member 'FMasterDataCharacter::CpuRoleType' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacter, SortIndex) == 0x00004C, "Member 'FMasterDataCharacter::SortIndex' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacter, CustomizeCostumeGroupCode) == 0x000050, "Member 'FMasterDataCharacter::CustomizeCostumeGroupCode' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacter, CustomizeEmoteGroupCode) == 0x000054, "Member 'FMasterDataCharacter::CustomizeEmoteGroupCode' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacter, CustomizeVoiceGroupCode) == 0x000058, "Member 'FMasterDataCharacter::CustomizeVoiceGroupCode' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacter, ShopItemCode) == 0x00005C, "Member 'FMasterDataCharacter::ShopItemCode' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacter, AssetName) == 0x000060, "Member 'FMasterDataCharacter::AssetName' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacter, Description) == 0x000070, "Member 'FMasterDataCharacter::Description' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacter, ObtainFrom) == 0x000088, "Member 'FMasterDataCharacter::ObtainFrom' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacter, DefaultCode) == 0x00008C, "Member 'FMasterDataCharacter::DefaultCode' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacter, SpawnCpu) == 0x000090, "Member 'FMasterDataCharacter::SpawnCpu' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacter, Rarity) == 0x000094, "Member 'FMasterDataCharacter::Rarity' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacter, DefaultEquipSetGroupCode) == 0x000098, "Member 'FMasterDataCharacter::DefaultEquipSetGroupCode' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacter, PickUpGashaCode) == 0x00009C, "Member 'FMasterDataCharacter::PickUpGashaCode' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacter, UseRentalPoint) == 0x0000A0, "Member 'FMasterDataCharacter::UseRentalPoint' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataPackDescription
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataPackDescription final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataPackDescription) == 0x000008, "Wrong alignment on FMasterDataPackDescription");
static_assert(sizeof(FMasterDataPackDescription) == 0x000028, "Wrong size on FMasterDataPackDescription");
static_assert(offsetof(FMasterDataPackDescription, Code) == 0x000008, "Member 'FMasterDataPackDescription::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataPackDescription, DisplayName) == 0x000010, "Member 'FMasterDataPackDescription::DisplayName' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataVariation
// 0x0058 (0x0058 - 0x0000)
struct FMasterDataVariation final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Name;                                              // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Character;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupCode;                                         // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillGroupCode;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterParam;                                    // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObtainFrom;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShopItemCode;                                      // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdRarity                                     Rarity;                                            // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              AvailableAt;                                       // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpireAt;                                          // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Memo;                                              // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Description;                                       // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataVariation) == 0x000008, "Wrong alignment on FMasterDataVariation");
static_assert(sizeof(FMasterDataVariation) == 0x000058, "Wrong size on FMasterDataVariation");
static_assert(offsetof(FMasterDataVariation, Code) == 0x000008, "Member 'FMasterDataVariation::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataVariation, Name) == 0x00000C, "Member 'FMasterDataVariation::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataVariation, Character) == 0x000010, "Member 'FMasterDataVariation::Character' has a wrong offset!");
static_assert(offsetof(FMasterDataVariation, GroupCode) == 0x000014, "Member 'FMasterDataVariation::GroupCode' has a wrong offset!");
static_assert(offsetof(FMasterDataVariation, SkillGroupCode) == 0x000018, "Member 'FMasterDataVariation::SkillGroupCode' has a wrong offset!");
static_assert(offsetof(FMasterDataVariation, CharacterParam) == 0x00001C, "Member 'FMasterDataVariation::CharacterParam' has a wrong offset!");
static_assert(offsetof(FMasterDataVariation, ObtainFrom) == 0x000020, "Member 'FMasterDataVariation::ObtainFrom' has a wrong offset!");
static_assert(offsetof(FMasterDataVariation, ShopItemCode) == 0x000024, "Member 'FMasterDataVariation::ShopItemCode' has a wrong offset!");
static_assert(offsetof(FMasterDataVariation, Rarity) == 0x000028, "Member 'FMasterDataVariation::Rarity' has a wrong offset!");
static_assert(offsetof(FMasterDataVariation, AvailableAt) == 0x000030, "Member 'FMasterDataVariation::AvailableAt' has a wrong offset!");
static_assert(offsetof(FMasterDataVariation, ExpireAt) == 0x000038, "Member 'FMasterDataVariation::ExpireAt' has a wrong offset!");
static_assert(offsetof(FMasterDataVariation, Memo) == 0x000040, "Member 'FMasterDataVariation::Memo' has a wrong offset!");
static_assert(offsetof(FMasterDataVariation, Description) == 0x000050, "Member 'FMasterDataVariation::Description' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataNotificationText
// 0x0070 (0x0070 - 0x0000)
struct FMasterDataNotificationText final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ExplanationText;                                   // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	ENotificationTextNoticeType                   NoticeType;                                        // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ImageCode;                                         // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              AvailableAt;                                       // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpireAt;                                          // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssetName;                                         // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayItem;                                       // 0x0068(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharaCode;                                         // 0x006C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataNotificationText) == 0x000008, "Wrong alignment on FMasterDataNotificationText");
static_assert(sizeof(FMasterDataNotificationText) == 0x000070, "Wrong size on FMasterDataNotificationText");
static_assert(offsetof(FMasterDataNotificationText, Code) == 0x000008, "Member 'FMasterDataNotificationText::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataNotificationText, Text) == 0x000010, "Member 'FMasterDataNotificationText::Text' has a wrong offset!");
static_assert(offsetof(FMasterDataNotificationText, ExplanationText) == 0x000028, "Member 'FMasterDataNotificationText::ExplanationText' has a wrong offset!");
static_assert(offsetof(FMasterDataNotificationText, NoticeType) == 0x000040, "Member 'FMasterDataNotificationText::NoticeType' has a wrong offset!");
static_assert(offsetof(FMasterDataNotificationText, ImageCode) == 0x000044, "Member 'FMasterDataNotificationText::ImageCode' has a wrong offset!");
static_assert(offsetof(FMasterDataNotificationText, AvailableAt) == 0x000048, "Member 'FMasterDataNotificationText::AvailableAt' has a wrong offset!");
static_assert(offsetof(FMasterDataNotificationText, ExpireAt) == 0x000050, "Member 'FMasterDataNotificationText::ExpireAt' has a wrong offset!");
static_assert(offsetof(FMasterDataNotificationText, AssetName) == 0x000058, "Member 'FMasterDataNotificationText::AssetName' has a wrong offset!");
static_assert(offsetof(FMasterDataNotificationText, DisplayItem) == 0x000068, "Member 'FMasterDataNotificationText::DisplayItem' has a wrong offset!");
static_assert(offsetof(FMasterDataNotificationText, CharaCode) == 0x00006C, "Member 'FMasterDataNotificationText::CharaCode' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataMyAdParts
// 0x0048 (0x0048 - 0x0000)
struct FMasterDataMyAdParts
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EMyAdPartsCategory                            Category;                                          // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AssetName;                                         // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Description;                                       // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObtainFrom;                                        // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataMyAdParts) == 0x000008, "Wrong alignment on FMasterDataMyAdParts");
static_assert(sizeof(FMasterDataMyAdParts) == 0x000048, "Wrong size on FMasterDataMyAdParts");
static_assert(offsetof(FMasterDataMyAdParts, Code) == 0x000008, "Member 'FMasterDataMyAdParts::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataMyAdParts, Name) == 0x000010, "Member 'FMasterDataMyAdParts::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataMyAdParts, Category) == 0x000028, "Member 'FMasterDataMyAdParts::Category' has a wrong offset!");
static_assert(offsetof(FMasterDataMyAdParts, AssetName) == 0x000030, "Member 'FMasterDataMyAdParts::AssetName' has a wrong offset!");
static_assert(offsetof(FMasterDataMyAdParts, Description) == 0x000040, "Member 'FMasterDataMyAdParts::Description' has a wrong offset!");
static_assert(offsetof(FMasterDataMyAdParts, ObtainFrom) == 0x000044, "Member 'FMasterDataMyAdParts::ObtainFrom' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataNotificationMenu
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataNotificationMenu final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Lottery;                                           // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Event;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              AvailableAt;                                       // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpireAt;                                          // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataNotificationMenu) == 0x000008, "Wrong alignment on FMasterDataNotificationMenu");
static_assert(sizeof(FMasterDataNotificationMenu) == 0x000028, "Wrong size on FMasterDataNotificationMenu");
static_assert(offsetof(FMasterDataNotificationMenu, Code) == 0x000008, "Member 'FMasterDataNotificationMenu::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataNotificationMenu, Lottery) == 0x00000C, "Member 'FMasterDataNotificationMenu::Lottery' has a wrong offset!");
static_assert(offsetof(FMasterDataNotificationMenu, Event) == 0x000010, "Member 'FMasterDataNotificationMenu::Event' has a wrong offset!");
static_assert(offsetof(FMasterDataNotificationMenu, AvailableAt) == 0x000018, "Member 'FMasterDataNotificationMenu::AvailableAt' has a wrong offset!");
static_assert(offsetof(FMasterDataNotificationMenu, ExpireAt) == 0x000020, "Member 'FMasterDataNotificationMenu::ExpireAt' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataCustomizeVoice
// 0x0080 (0x0080 - 0x0000)
struct FMasterDataCustomizeVoice final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Character;                                         // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupCode;                                         // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Note;                                              // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssetName;                                         // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VoiceKey;                                          // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShopItemCode;                                      // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdRarity                                     Rarity;                                            // 0x005C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Description;                                       // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObtainFrom;                                        // 0x0064(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseName;                                          // 0x0068(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubName;                                           // 0x006C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              AvailableAt;                                       // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpireAt;                                          // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataCustomizeVoice) == 0x000008, "Wrong alignment on FMasterDataCustomizeVoice");
static_assert(sizeof(FMasterDataCustomizeVoice) == 0x000080, "Wrong size on FMasterDataCustomizeVoice");
static_assert(offsetof(FMasterDataCustomizeVoice, Code) == 0x000008, "Member 'FMasterDataCustomizeVoice::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeVoice, Name) == 0x000010, "Member 'FMasterDataCustomizeVoice::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeVoice, Character) == 0x000020, "Member 'FMasterDataCustomizeVoice::Character' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeVoice, GroupCode) == 0x000024, "Member 'FMasterDataCustomizeVoice::GroupCode' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeVoice, Note) == 0x000028, "Member 'FMasterDataCustomizeVoice::Note' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeVoice, AssetName) == 0x000038, "Member 'FMasterDataCustomizeVoice::AssetName' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeVoice, VoiceKey) == 0x000048, "Member 'FMasterDataCustomizeVoice::VoiceKey' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeVoice, ShopItemCode) == 0x000058, "Member 'FMasterDataCustomizeVoice::ShopItemCode' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeVoice, Rarity) == 0x00005C, "Member 'FMasterDataCustomizeVoice::Rarity' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeVoice, Description) == 0x000060, "Member 'FMasterDataCustomizeVoice::Description' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeVoice, ObtainFrom) == 0x000064, "Member 'FMasterDataCustomizeVoice::ObtainFrom' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeVoice, BaseName) == 0x000068, "Member 'FMasterDataCustomizeVoice::BaseName' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeVoice, SubName) == 0x00006C, "Member 'FMasterDataCustomizeVoice::SubName' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeVoice, AvailableAt) == 0x000070, "Member 'FMasterDataCustomizeVoice::AvailableAt' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeVoice, ExpireAt) == 0x000078, "Member 'FMasterDataCustomizeVoice::ExpireAt' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataCharacterDamage
// 0x0048 (0x0048 - 0x0000)
struct FMasterDataCharacterDamage final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ActionName;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageRate;                                        // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageValue;                                       // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GuardBreakValue;                                   // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BgDamageRate;                                      // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownPower;                                         // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataCharacterDamage) == 0x000008, "Wrong alignment on FMasterDataCharacterDamage");
static_assert(sizeof(FMasterDataCharacterDamage) == 0x000048, "Wrong size on FMasterDataCharacterDamage");
static_assert(offsetof(FMasterDataCharacterDamage, Code) == 0x000008, "Member 'FMasterDataCharacterDamage::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacterDamage, ActionName) == 0x000010, "Member 'FMasterDataCharacterDamage::ActionName' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacterDamage, Name) == 0x000020, "Member 'FMasterDataCharacterDamage::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacterDamage, DamageRate) == 0x000030, "Member 'FMasterDataCharacterDamage::DamageRate' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacterDamage, DamageValue) == 0x000034, "Member 'FMasterDataCharacterDamage::DamageValue' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacterDamage, GuardBreakValue) == 0x000038, "Member 'FMasterDataCharacterDamage::GuardBreakValue' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacterDamage, BgDamageRate) == 0x00003C, "Member 'FMasterDataCharacterDamage::BgDamageRate' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacterDamage, DownPower) == 0x000040, "Member 'FMasterDataCharacterDamage::DownPower' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataCustomizeEmote
// 0x0078 (0x0078 - 0x0000)
struct FMasterDataCustomizeEmote final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Character;                                         // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupCode;                                         // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECustomizeEmoteAiUses                         AiUses;                                            // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Note;                                              // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssetName;                                         // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShopItemCode;                                      // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdRarity                                     Rarity;                                            // 0x0054(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Description;                                       // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObtainFrom;                                        // 0x005C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseName;                                          // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubName;                                           // 0x0064(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              AvailableAt;                                       // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpireAt;                                          // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataCustomizeEmote) == 0x000008, "Wrong alignment on FMasterDataCustomizeEmote");
static_assert(sizeof(FMasterDataCustomizeEmote) == 0x000078, "Wrong size on FMasterDataCustomizeEmote");
static_assert(offsetof(FMasterDataCustomizeEmote, Code) == 0x000008, "Member 'FMasterDataCustomizeEmote::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeEmote, Name) == 0x000010, "Member 'FMasterDataCustomizeEmote::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeEmote, Character) == 0x000020, "Member 'FMasterDataCustomizeEmote::Character' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeEmote, GroupCode) == 0x000024, "Member 'FMasterDataCustomizeEmote::GroupCode' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeEmote, AiUses) == 0x000028, "Member 'FMasterDataCustomizeEmote::AiUses' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeEmote, Note) == 0x000030, "Member 'FMasterDataCustomizeEmote::Note' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeEmote, AssetName) == 0x000040, "Member 'FMasterDataCustomizeEmote::AssetName' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeEmote, ShopItemCode) == 0x000050, "Member 'FMasterDataCustomizeEmote::ShopItemCode' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeEmote, Rarity) == 0x000054, "Member 'FMasterDataCustomizeEmote::Rarity' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeEmote, Description) == 0x000058, "Member 'FMasterDataCustomizeEmote::Description' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeEmote, ObtainFrom) == 0x00005C, "Member 'FMasterDataCustomizeEmote::ObtainFrom' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeEmote, BaseName) == 0x000060, "Member 'FMasterDataCustomizeEmote::BaseName' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeEmote, SubName) == 0x000064, "Member 'FMasterDataCustomizeEmote::SubName' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeEmote, AvailableAt) == 0x000068, "Member 'FMasterDataCustomizeEmote::AvailableAt' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeEmote, ExpireAt) == 0x000070, "Member 'FMasterDataCustomizeEmote::ExpireAt' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataMyAdPartsDesc
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataMyAdPartsDesc final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataMyAdPartsDesc) == 0x000008, "Wrong alignment on FMasterDataMyAdPartsDesc");
static_assert(sizeof(FMasterDataMyAdPartsDesc) == 0x000028, "Wrong size on FMasterDataMyAdPartsDesc");
static_assert(offsetof(FMasterDataMyAdPartsDesc, Code) == 0x000008, "Member 'FMasterDataMyAdPartsDesc::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataMyAdPartsDesc, DisplayName) == 0x000010, "Member 'FMasterDataMyAdPartsDesc::DisplayName' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataCustomizeCostume
// 0x00A0 (0x00A0 - 0x0000)
struct FMasterDataCustomizeCostume final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Character;                                         // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupCode;                                         // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Note;                                              // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssetName;                                         // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ColorR;                                            // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ColorG;                                            // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ColorB;                                            // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ColorC;                                            // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ColorM;                                            // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ColorY;                                            // 0x005C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ColorBk;                                           // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ColorSpecular;                                     // 0x0064(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AoBrightness;                                      // 0x0068(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShopItemCode;                                      // 0x006C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdRarity                                     Rarity;                                            // 0x0070(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Description;                                       // 0x0074(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObtainFrom;                                        // 0x0078(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseName;                                          // 0x007C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubName;                                           // 0x0080(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeriesNormal;                                      // 0x0084(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CpuEquip;                                          // 0x0088(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              AvailableAt;                                       // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpireAt;                                          // 0x0098(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataCustomizeCostume) == 0x000008, "Wrong alignment on FMasterDataCustomizeCostume");
static_assert(sizeof(FMasterDataCustomizeCostume) == 0x0000A0, "Wrong size on FMasterDataCustomizeCostume");
static_assert(offsetof(FMasterDataCustomizeCostume, Code) == 0x000008, "Member 'FMasterDataCustomizeCostume::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeCostume, Name) == 0x000010, "Member 'FMasterDataCustomizeCostume::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeCostume, Character) == 0x000020, "Member 'FMasterDataCustomizeCostume::Character' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeCostume, GroupCode) == 0x000024, "Member 'FMasterDataCustomizeCostume::GroupCode' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeCostume, Note) == 0x000028, "Member 'FMasterDataCustomizeCostume::Note' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeCostume, AssetName) == 0x000038, "Member 'FMasterDataCustomizeCostume::AssetName' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeCostume, ColorR) == 0x000048, "Member 'FMasterDataCustomizeCostume::ColorR' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeCostume, ColorG) == 0x00004C, "Member 'FMasterDataCustomizeCostume::ColorG' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeCostume, ColorB) == 0x000050, "Member 'FMasterDataCustomizeCostume::ColorB' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeCostume, ColorC) == 0x000054, "Member 'FMasterDataCustomizeCostume::ColorC' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeCostume, ColorM) == 0x000058, "Member 'FMasterDataCustomizeCostume::ColorM' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeCostume, ColorY) == 0x00005C, "Member 'FMasterDataCustomizeCostume::ColorY' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeCostume, ColorBk) == 0x000060, "Member 'FMasterDataCustomizeCostume::ColorBk' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeCostume, ColorSpecular) == 0x000064, "Member 'FMasterDataCustomizeCostume::ColorSpecular' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeCostume, AoBrightness) == 0x000068, "Member 'FMasterDataCustomizeCostume::AoBrightness' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeCostume, ShopItemCode) == 0x00006C, "Member 'FMasterDataCustomizeCostume::ShopItemCode' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeCostume, Rarity) == 0x000070, "Member 'FMasterDataCustomizeCostume::Rarity' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeCostume, Description) == 0x000074, "Member 'FMasterDataCustomizeCostume::Description' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeCostume, ObtainFrom) == 0x000078, "Member 'FMasterDataCustomizeCostume::ObtainFrom' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeCostume, BaseName) == 0x00007C, "Member 'FMasterDataCustomizeCostume::BaseName' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeCostume, SubName) == 0x000080, "Member 'FMasterDataCustomizeCostume::SubName' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeCostume, SeriesNormal) == 0x000084, "Member 'FMasterDataCustomizeCostume::SeriesNormal' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeCostume, CpuEquip) == 0x000088, "Member 'FMasterDataCustomizeCostume::CpuEquip' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeCostume, AvailableAt) == 0x000090, "Member 'FMasterDataCustomizeCostume::AvailableAt' has a wrong offset!");
static_assert(offsetof(FMasterDataCustomizeCostume, ExpireAt) == 0x000098, "Member 'FMasterDataCustomizeCostume::ExpireAt' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataEmblem
// 0x0050 (0x0050 - 0x0000)
struct FMasterDataEmblem final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Character;                                         // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Common;                                            // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssetName;                                         // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEmblemCategory                               Category;                                          // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DisplayOrder;                                      // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Description;                                       // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObtainFrom;                                        // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseName;                                          // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubName;                                           // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataEmblem) == 0x000008, "Wrong alignment on FMasterDataEmblem");
static_assert(sizeof(FMasterDataEmblem) == 0x000050, "Wrong size on FMasterDataEmblem");
static_assert(offsetof(FMasterDataEmblem, Code) == 0x000008, "Member 'FMasterDataEmblem::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataEmblem, Name) == 0x000010, "Member 'FMasterDataEmblem::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataEmblem, Character) == 0x000020, "Member 'FMasterDataEmblem::Character' has a wrong offset!");
static_assert(offsetof(FMasterDataEmblem, Common) == 0x000024, "Member 'FMasterDataEmblem::Common' has a wrong offset!");
static_assert(offsetof(FMasterDataEmblem, AssetName) == 0x000028, "Member 'FMasterDataEmblem::AssetName' has a wrong offset!");
static_assert(offsetof(FMasterDataEmblem, Category) == 0x000038, "Member 'FMasterDataEmblem::Category' has a wrong offset!");
static_assert(offsetof(FMasterDataEmblem, DisplayOrder) == 0x00003C, "Member 'FMasterDataEmblem::DisplayOrder' has a wrong offset!");
static_assert(offsetof(FMasterDataEmblem, Description) == 0x000040, "Member 'FMasterDataEmblem::Description' has a wrong offset!");
static_assert(offsetof(FMasterDataEmblem, ObtainFrom) == 0x000044, "Member 'FMasterDataEmblem::ObtainFrom' has a wrong offset!");
static_assert(offsetof(FMasterDataEmblem, BaseName) == 0x000048, "Member 'FMasterDataEmblem::BaseName' has a wrong offset!");
static_assert(offsetof(FMasterDataEmblem, SubName) == 0x00004C, "Member 'FMasterDataEmblem::SubName' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataPackItem
// 0x0050 (0x0050 - 0x0000)
struct FMasterDataPackItem final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupCode;                                         // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Note;                                              // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Category;                                          // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCode;                                          // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataPackItem) == 0x000008, "Wrong alignment on FMasterDataPackItem");
static_assert(sizeof(FMasterDataPackItem) == 0x000050, "Wrong size on FMasterDataPackItem");
static_assert(offsetof(FMasterDataPackItem, Code) == 0x000008, "Member 'FMasterDataPackItem::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataPackItem, Name) == 0x000010, "Member 'FMasterDataPackItem::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataPackItem, GroupCode) == 0x000020, "Member 'FMasterDataPackItem::GroupCode' has a wrong offset!");
static_assert(offsetof(FMasterDataPackItem, Note) == 0x000028, "Member 'FMasterDataPackItem::Note' has a wrong offset!");
static_assert(offsetof(FMasterDataPackItem, Category) == 0x000038, "Member 'FMasterDataPackItem::Category' has a wrong offset!");
static_assert(offsetof(FMasterDataPackItem, ItemCode) == 0x000048, "Member 'FMasterDataPackItem::ItemCode' has a wrong offset!");
static_assert(offsetof(FMasterDataPackItem, Quantity) == 0x00004C, "Member 'FMasterDataPackItem::Quantity' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataCurrency
// 0x0068 (0x0068 - 0x0000)
struct FMasterDataCurrency final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 AssetName;                                         // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECurrencyType                                 Type;                                              // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Description;                                       // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         ObtainFrom;                                        // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShowInventory;                                     // 0x005C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdRarity                                     Rarity;                                            // 0x0060(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataCurrency) == 0x000008, "Wrong alignment on FMasterDataCurrency");
static_assert(sizeof(FMasterDataCurrency) == 0x000068, "Wrong size on FMasterDataCurrency");
static_assert(offsetof(FMasterDataCurrency, Code) == 0x000008, "Member 'FMasterDataCurrency::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataCurrency, Name) == 0x000010, "Member 'FMasterDataCurrency::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataCurrency, AssetName) == 0x000028, "Member 'FMasterDataCurrency::AssetName' has a wrong offset!");
static_assert(offsetof(FMasterDataCurrency, Type) == 0x000038, "Member 'FMasterDataCurrency::Type' has a wrong offset!");
static_assert(offsetof(FMasterDataCurrency, Description) == 0x000040, "Member 'FMasterDataCurrency::Description' has a wrong offset!");
static_assert(offsetof(FMasterDataCurrency, ObtainFrom) == 0x000058, "Member 'FMasterDataCurrency::ObtainFrom' has a wrong offset!");
static_assert(offsetof(FMasterDataCurrency, ShowInventory) == 0x00005C, "Member 'FMasterDataCurrency::ShowInventory' has a wrong offset!");
static_assert(offsetof(FMasterDataCurrency, Rarity) == 0x000060, "Member 'FMasterDataCurrency::Rarity' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataProjectileBullet
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataProjectileBullet final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeSpan;                                          // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitDist;                                         // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataProjectileBullet) == 0x000008, "Wrong alignment on FMasterDataProjectileBullet");
static_assert(sizeof(FMasterDataProjectileBullet) == 0x000028, "Wrong size on FMasterDataProjectileBullet");
static_assert(offsetof(FMasterDataProjectileBullet, Code) == 0x000008, "Member 'FMasterDataProjectileBullet::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataProjectileBullet, Level) == 0x00000C, "Member 'FMasterDataProjectileBullet::Level' has a wrong offset!");
static_assert(offsetof(FMasterDataProjectileBullet, Name) == 0x000010, "Member 'FMasterDataProjectileBullet::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataProjectileBullet, LifeSpan) == 0x000020, "Member 'FMasterDataProjectileBullet::LifeSpan' has a wrong offset!");
static_assert(offsetof(FMasterDataProjectileBullet, LimitDist) == 0x000024, "Member 'FMasterDataProjectileBullet::LimitDist' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataPack
// 0x0048 (0x0048 - 0x0000)
struct FMasterDataPack final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         GroupCode;                                         // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AssetName;                                         // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Description;                                       // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObtainFrom;                                        // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataPack) == 0x000008, "Wrong alignment on FMasterDataPack");
static_assert(sizeof(FMasterDataPack) == 0x000048, "Wrong size on FMasterDataPack");
static_assert(offsetof(FMasterDataPack, Code) == 0x000008, "Member 'FMasterDataPack::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataPack, Name) == 0x000010, "Member 'FMasterDataPack::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataPack, GroupCode) == 0x000028, "Member 'FMasterDataPack::GroupCode' has a wrong offset!");
static_assert(offsetof(FMasterDataPack, AssetName) == 0x000030, "Member 'FMasterDataPack::AssetName' has a wrong offset!");
static_assert(offsetof(FMasterDataPack, Description) == 0x000040, "Member 'FMasterDataPack::Description' has a wrong offset!");
static_assert(offsetof(FMasterDataPack, ObtainFrom) == 0x000044, "Member 'FMasterDataPack::ObtainFrom' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataEmoteName
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataEmoteName final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataEmoteName) == 0x000008, "Wrong alignment on FMasterDataEmoteName");
static_assert(sizeof(FMasterDataEmoteName) == 0x000028, "Wrong size on FMasterDataEmoteName");
static_assert(offsetof(FMasterDataEmoteName, Code) == 0x000008, "Member 'FMasterDataEmoteName::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataEmoteName, DisplayName) == 0x000010, "Member 'FMasterDataEmoteName::DisplayName' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataMyAdMessage
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataMyAdMessage final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Name;                                              // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupCode;                                         // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataMyAdMessage) == 0x000008, "Wrong alignment on FMasterDataMyAdMessage");
static_assert(sizeof(FMasterDataMyAdMessage) == 0x000028, "Wrong size on FMasterDataMyAdMessage");
static_assert(offsetof(FMasterDataMyAdMessage, Code) == 0x000008, "Member 'FMasterDataMyAdMessage::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataMyAdMessage, Name) == 0x00000C, "Member 'FMasterDataMyAdMessage::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataMyAdMessage, Message) == 0x000010, "Member 'FMasterDataMyAdMessage::Message' has a wrong offset!");
static_assert(offsetof(FMasterDataMyAdMessage, GroupCode) == 0x000020, "Member 'FMasterDataMyAdMessage::GroupCode' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataMarkerDescription
// 0x0038 (0x0038 - 0x0000)
struct FMasterDataMarkerDescription final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MarkerWordId;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   MarkerDescription;                                 // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataMarkerDescription) == 0x000008, "Wrong alignment on FMasterDataMarkerDescription");
static_assert(sizeof(FMasterDataMarkerDescription) == 0x000038, "Wrong size on FMasterDataMarkerDescription");
static_assert(offsetof(FMasterDataMarkerDescription, Code) == 0x000008, "Member 'FMasterDataMarkerDescription::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataMarkerDescription, MarkerWordId) == 0x000010, "Member 'FMasterDataMarkerDescription::MarkerWordId' has a wrong offset!");
static_assert(offsetof(FMasterDataMarkerDescription, MarkerDescription) == 0x000020, "Member 'FMasterDataMarkerDescription::MarkerDescription' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataSeasonPassExp
// 0x0060 (0x0060 - 0x0000)
struct FMasterDataSeasonPassExp
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonRank;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exp;                                               // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FreeItemCategory;                                  // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FreeItemCode;                                      // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FreeQuantity;                                      // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PremiumItemCategory;                               // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PremiumItemCode;                                   // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PremiumQuantity;                                   // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupCode;                                         // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Note;                                              // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataSeasonPassExp) == 0x000008, "Wrong alignment on FMasterDataSeasonPassExp");
static_assert(sizeof(FMasterDataSeasonPassExp) == 0x000060, "Wrong size on FMasterDataSeasonPassExp");
static_assert(offsetof(FMasterDataSeasonPassExp, Code) == 0x000008, "Member 'FMasterDataSeasonPassExp::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataSeasonPassExp, SeasonRank) == 0x00000C, "Member 'FMasterDataSeasonPassExp::SeasonRank' has a wrong offset!");
static_assert(offsetof(FMasterDataSeasonPassExp, Exp) == 0x000010, "Member 'FMasterDataSeasonPassExp::Exp' has a wrong offset!");
static_assert(offsetof(FMasterDataSeasonPassExp, FreeItemCategory) == 0x000018, "Member 'FMasterDataSeasonPassExp::FreeItemCategory' has a wrong offset!");
static_assert(offsetof(FMasterDataSeasonPassExp, FreeItemCode) == 0x000028, "Member 'FMasterDataSeasonPassExp::FreeItemCode' has a wrong offset!");
static_assert(offsetof(FMasterDataSeasonPassExp, FreeQuantity) == 0x00002C, "Member 'FMasterDataSeasonPassExp::FreeQuantity' has a wrong offset!");
static_assert(offsetof(FMasterDataSeasonPassExp, PremiumItemCategory) == 0x000030, "Member 'FMasterDataSeasonPassExp::PremiumItemCategory' has a wrong offset!");
static_assert(offsetof(FMasterDataSeasonPassExp, PremiumItemCode) == 0x000040, "Member 'FMasterDataSeasonPassExp::PremiumItemCode' has a wrong offset!");
static_assert(offsetof(FMasterDataSeasonPassExp, PremiumQuantity) == 0x000044, "Member 'FMasterDataSeasonPassExp::PremiumQuantity' has a wrong offset!");
static_assert(offsetof(FMasterDataSeasonPassExp, GroupCode) == 0x000048, "Member 'FMasterDataSeasonPassExp::GroupCode' has a wrong offset!");
static_assert(offsetof(FMasterDataSeasonPassExp, Note) == 0x000050, "Member 'FMasterDataSeasonPassExp::Note' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataMissionPattern
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataMissionPattern final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdMissionCategory                            Category;                                          // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StarPatternGroup;                                  // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              AvailableAt;                                       // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpireAt;                                          // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataMissionPattern) == 0x000008, "Wrong alignment on FMasterDataMissionPattern");
static_assert(sizeof(FMasterDataMissionPattern) == 0x000028, "Wrong size on FMasterDataMissionPattern");
static_assert(offsetof(FMasterDataMissionPattern, Code) == 0x000008, "Member 'FMasterDataMissionPattern::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataMissionPattern, Category) == 0x00000C, "Member 'FMasterDataMissionPattern::Category' has a wrong offset!");
static_assert(offsetof(FMasterDataMissionPattern, StarPatternGroup) == 0x000010, "Member 'FMasterDataMissionPattern::StarPatternGroup' has a wrong offset!");
static_assert(offsetof(FMasterDataMissionPattern, AvailableAt) == 0x000018, "Member 'FMasterDataMissionPattern::AvailableAt' has a wrong offset!");
static_assert(offsetof(FMasterDataMissionPattern, ExpireAt) == 0x000020, "Member 'FMasterDataMissionPattern::ExpireAt' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataSpecialLicense
// 0x0030 (0x0030 - 0x0000)
struct FMasterDataSpecialLicense
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exp;                                               // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemCategory;                                      // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCode;                                          // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataSpecialLicense) == 0x000008, "Wrong alignment on FMasterDataSpecialLicense");
static_assert(sizeof(FMasterDataSpecialLicense) == 0x000030, "Wrong size on FMasterDataSpecialLicense");
static_assert(offsetof(FMasterDataSpecialLicense, Code) == 0x000008, "Member 'FMasterDataSpecialLicense::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataSpecialLicense, Rank) == 0x00000C, "Member 'FMasterDataSpecialLicense::Rank' has a wrong offset!");
static_assert(offsetof(FMasterDataSpecialLicense, Exp) == 0x000010, "Member 'FMasterDataSpecialLicense::Exp' has a wrong offset!");
static_assert(offsetof(FMasterDataSpecialLicense, ItemCategory) == 0x000018, "Member 'FMasterDataSpecialLicense::ItemCategory' has a wrong offset!");
static_assert(offsetof(FMasterDataSpecialLicense, ItemCode) == 0x000028, "Member 'FMasterDataSpecialLicense::ItemCode' has a wrong offset!");
static_assert(offsetof(FMasterDataSpecialLicense, Quantity) == 0x00002C, "Member 'FMasterDataSpecialLicense::Quantity' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataAbandonedVoice
// 0x0020 (0x0020 - 0x0000)
struct FMasterDataAbandonedVoice final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAbandonedVoiceVoiceType                      VoiceType;                                         // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              AvailableAt;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpireAt;                                          // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataAbandonedVoice) == 0x000008, "Wrong alignment on FMasterDataAbandonedVoice");
static_assert(sizeof(FMasterDataAbandonedVoice) == 0x000020, "Wrong size on FMasterDataAbandonedVoice");
static_assert(offsetof(FMasterDataAbandonedVoice, Code) == 0x000008, "Member 'FMasterDataAbandonedVoice::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataAbandonedVoice, VoiceType) == 0x00000C, "Member 'FMasterDataAbandonedVoice::VoiceType' has a wrong offset!");
static_assert(offsetof(FMasterDataAbandonedVoice, AvailableAt) == 0x000010, "Member 'FMasterDataAbandonedVoice::AvailableAt' has a wrong offset!");
static_assert(offsetof(FMasterDataAbandonedVoice, ExpireAt) == 0x000018, "Member 'FMasterDataAbandonedVoice::ExpireAt' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataAbility
// 0x0070 (0x0070 - 0x0000)
struct FMasterDataAbility final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdAbilityType                                Name;                                              // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeRate;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 HudColor;                                          // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ItemParticleColor1;                                // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ItemParticleColor2;                                // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   RoleName;                                          // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   EffectAsAbility;                                   // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         RoleBuffAdjustGroupCode;                           // 0x0068(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataAbility) == 0x000008, "Wrong alignment on FMasterDataAbility");
static_assert(sizeof(FMasterDataAbility) == 0x000070, "Wrong size on FMasterDataAbility");
static_assert(offsetof(FMasterDataAbility, Code) == 0x000008, "Member 'FMasterDataAbility::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataAbility, Name) == 0x00000C, "Member 'FMasterDataAbility::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataAbility, TimeRate) == 0x000010, "Member 'FMasterDataAbility::TimeRate' has a wrong offset!");
static_assert(offsetof(FMasterDataAbility, HudColor) == 0x000014, "Member 'FMasterDataAbility::HudColor' has a wrong offset!");
static_assert(offsetof(FMasterDataAbility, ItemParticleColor1) == 0x000018, "Member 'FMasterDataAbility::ItemParticleColor1' has a wrong offset!");
static_assert(offsetof(FMasterDataAbility, ItemParticleColor2) == 0x00001C, "Member 'FMasterDataAbility::ItemParticleColor2' has a wrong offset!");
static_assert(offsetof(FMasterDataAbility, RoleName) == 0x000020, "Member 'FMasterDataAbility::RoleName' has a wrong offset!");
static_assert(offsetof(FMasterDataAbility, Description) == 0x000038, "Member 'FMasterDataAbility::Description' has a wrong offset!");
static_assert(offsetof(FMasterDataAbility, EffectAsAbility) == 0x000050, "Member 'FMasterDataAbility::EffectAsAbility' has a wrong offset!");
static_assert(offsetof(FMasterDataAbility, RoleBuffAdjustGroupCode) == 0x000068, "Member 'FMasterDataAbility::RoleBuffAdjustGroupCode' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataBattleStage
// 0x0050 (0x0050 - 0x0000)
struct FMasterDataBattleStage final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 Address;                                           // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataBattleStage) == 0x000008, "Wrong alignment on FMasterDataBattleStage");
static_assert(sizeof(FMasterDataBattleStage) == 0x000050, "Wrong size on FMasterDataBattleStage");
static_assert(offsetof(FMasterDataBattleStage, Code) == 0x000008, "Member 'FMasterDataBattleStage::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataBattleStage, Name) == 0x000010, "Member 'FMasterDataBattleStage::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataBattleStage, Description) == 0x000028, "Member 'FMasterDataBattleStage::Description' has a wrong offset!");
static_assert(offsetof(FMasterDataBattleStage, Address) == 0x000040, "Member 'FMasterDataBattleStage::Address' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataBonusExp
// 0x0058 (0x0058 - 0x0000)
struct FMasterDataBonusExp
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EMdBonusExpTargetType                         TargetType;                                        // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayerExpBonus;                                    // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SeasonPassExpBonus;                                // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GoldBonus;                                         // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GuildPontBonus;                                    // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 BonusBgColor;                                      // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 BonusPatternColor;                                 // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 BonusOutlineColor;                                 // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Note;                                              // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataBonusExp) == 0x000008, "Wrong alignment on FMasterDataBonusExp");
static_assert(sizeof(FMasterDataBonusExp) == 0x000058, "Wrong size on FMasterDataBonusExp");
static_assert(offsetof(FMasterDataBonusExp, Code) == 0x000008, "Member 'FMasterDataBonusExp::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataBonusExp, Name) == 0x000010, "Member 'FMasterDataBonusExp::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataBonusExp, TargetType) == 0x000028, "Member 'FMasterDataBonusExp::TargetType' has a wrong offset!");
static_assert(offsetof(FMasterDataBonusExp, PlayerExpBonus) == 0x00002C, "Member 'FMasterDataBonusExp::PlayerExpBonus' has a wrong offset!");
static_assert(offsetof(FMasterDataBonusExp, SeasonPassExpBonus) == 0x000030, "Member 'FMasterDataBonusExp::SeasonPassExpBonus' has a wrong offset!");
static_assert(offsetof(FMasterDataBonusExp, GoldBonus) == 0x000034, "Member 'FMasterDataBonusExp::GoldBonus' has a wrong offset!");
static_assert(offsetof(FMasterDataBonusExp, GuildPontBonus) == 0x000038, "Member 'FMasterDataBonusExp::GuildPontBonus' has a wrong offset!");
static_assert(offsetof(FMasterDataBonusExp, BonusBgColor) == 0x00003C, "Member 'FMasterDataBonusExp::BonusBgColor' has a wrong offset!");
static_assert(offsetof(FMasterDataBonusExp, BonusPatternColor) == 0x000040, "Member 'FMasterDataBonusExp::BonusPatternColor' has a wrong offset!");
static_assert(offsetof(FMasterDataBonusExp, BonusOutlineColor) == 0x000044, "Member 'FMasterDataBonusExp::BonusOutlineColor' has a wrong offset!");
static_assert(offsetof(FMasterDataBonusExp, Note) == 0x000048, "Member 'FMasterDataBonusExp::Note' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataCamera
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FMasterDataCamera final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdCameraName                                 Name;                                              // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Horizontal;                                        // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationSpeed;                                     // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReticleHeight;                                     // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitTime;                                       // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimAssist;                                         // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataCamera) == 0x000008, "Wrong alignment on FMasterDataCamera");
static_assert(sizeof(FMasterDataCamera) == 0x000030, "Wrong size on FMasterDataCamera");
static_assert(offsetof(FMasterDataCamera, Code) == 0x000008, "Member 'FMasterDataCamera::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataCamera, Name) == 0x00000C, "Member 'FMasterDataCamera::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataCamera, Distance) == 0x000010, "Member 'FMasterDataCamera::Distance' has a wrong offset!");
static_assert(offsetof(FMasterDataCamera, Horizontal) == 0x000014, "Member 'FMasterDataCamera::Horizontal' has a wrong offset!");
static_assert(offsetof(FMasterDataCamera, Height) == 0x000018, "Member 'FMasterDataCamera::Height' has a wrong offset!");
static_assert(offsetof(FMasterDataCamera, Angle) == 0x00001C, "Member 'FMasterDataCamera::Angle' has a wrong offset!");
static_assert(offsetof(FMasterDataCamera, RotationSpeed) == 0x000020, "Member 'FMasterDataCamera::RotationSpeed' has a wrong offset!");
static_assert(offsetof(FMasterDataCamera, ReticleHeight) == 0x000024, "Member 'FMasterDataCamera::ReticleHeight' has a wrong offset!");
static_assert(offsetof(FMasterDataCamera, TransitTime) == 0x000028, "Member 'FMasterDataCamera::TransitTime' has a wrong offset!");
static_assert(offsetof(FMasterDataCamera, AimAssist) == 0x00002C, "Member 'FMasterDataCamera::AimAssist' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataCameraOffset
// 0x0030 (0x0030 - 0x0000)
struct FMasterDataCameraOffset final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupCode;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetName;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraOffsetTargetParam                      TargetParam;                                       // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdCalcOperator                               CalcOperator;                                      // 0x0015(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Note;                                              // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataCameraOffset) == 0x000008, "Wrong alignment on FMasterDataCameraOffset");
static_assert(sizeof(FMasterDataCameraOffset) == 0x000030, "Wrong size on FMasterDataCameraOffset");
static_assert(offsetof(FMasterDataCameraOffset, Code) == 0x000008, "Member 'FMasterDataCameraOffset::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataCameraOffset, GroupCode) == 0x00000C, "Member 'FMasterDataCameraOffset::GroupCode' has a wrong offset!");
static_assert(offsetof(FMasterDataCameraOffset, TargetName) == 0x000010, "Member 'FMasterDataCameraOffset::TargetName' has a wrong offset!");
static_assert(offsetof(FMasterDataCameraOffset, TargetParam) == 0x000014, "Member 'FMasterDataCameraOffset::TargetParam' has a wrong offset!");
static_assert(offsetof(FMasterDataCameraOffset, CalcOperator) == 0x000015, "Member 'FMasterDataCameraOffset::CalcOperator' has a wrong offset!");
static_assert(offsetof(FMasterDataCameraOffset, Value) == 0x000018, "Member 'FMasterDataCameraOffset::Value' has a wrong offset!");
static_assert(offsetof(FMasterDataCameraOffset, Note) == 0x000020, "Member 'FMasterDataCameraOffset::Note' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataCharacterMagazine
// 0x0058 (0x0058 - 0x0000)
struct FMasterDataCharacterMagazine final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ammo;                                              // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReloadTime;                                        // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReloadStartSpan;                                   // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PenaltyReloadTime;                                 // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PenaltySpan;                                       // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReplenishmentAmmo;                                 // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterMagazineUseType                     UseType;                                           // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UseAmmo;                                           // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StopAttack;                                        // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StopDamage;                                        // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StopDying;                                         // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EmptyStart;                                        // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsUsableinMaxAmmo;                                 // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsReloadStartGroundState;                          // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataCharacterMagazine) == 0x000008, "Wrong alignment on FMasterDataCharacterMagazine");
static_assert(sizeof(FMasterDataCharacterMagazine) == 0x000058, "Wrong size on FMasterDataCharacterMagazine");
static_assert(offsetof(FMasterDataCharacterMagazine, Code) == 0x000008, "Member 'FMasterDataCharacterMagazine::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacterMagazine, Name) == 0x000010, "Member 'FMasterDataCharacterMagazine::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacterMagazine, Ammo) == 0x000020, "Member 'FMasterDataCharacterMagazine::Ammo' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacterMagazine, ReloadTime) == 0x000024, "Member 'FMasterDataCharacterMagazine::ReloadTime' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacterMagazine, ReloadStartSpan) == 0x000028, "Member 'FMasterDataCharacterMagazine::ReloadStartSpan' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacterMagazine, PenaltyReloadTime) == 0x00002C, "Member 'FMasterDataCharacterMagazine::PenaltyReloadTime' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacterMagazine, PenaltySpan) == 0x000030, "Member 'FMasterDataCharacterMagazine::PenaltySpan' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacterMagazine, ReplenishmentAmmo) == 0x000034, "Member 'FMasterDataCharacterMagazine::ReplenishmentAmmo' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacterMagazine, UseType) == 0x000038, "Member 'FMasterDataCharacterMagazine::UseType' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacterMagazine, UseAmmo) == 0x00003C, "Member 'FMasterDataCharacterMagazine::UseAmmo' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacterMagazine, StopAttack) == 0x000040, "Member 'FMasterDataCharacterMagazine::StopAttack' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacterMagazine, StopDamage) == 0x000044, "Member 'FMasterDataCharacterMagazine::StopDamage' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacterMagazine, StopDying) == 0x000048, "Member 'FMasterDataCharacterMagazine::StopDying' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacterMagazine, EmptyStart) == 0x00004C, "Member 'FMasterDataCharacterMagazine::EmptyStart' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacterMagazine, IsUsableinMaxAmmo) == 0x000050, "Member 'FMasterDataCharacterMagazine::IsUsableinMaxAmmo' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacterMagazine, IsReloadStartGroundState) == 0x000054, "Member 'FMasterDataCharacterMagazine::IsReloadStartGroundState' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataCharacterParam
// 0x0038 (0x0038 - 0x0000)
struct FMasterDataCharacterParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CharacterId;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMainHealth;                                     // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityCode;                                       // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataCharacterParam) == 0x000008, "Wrong alignment on FMasterDataCharacterParam");
static_assert(sizeof(FMasterDataCharacterParam) == 0x000038, "Wrong size on FMasterDataCharacterParam");
static_assert(offsetof(FMasterDataCharacterParam, Code) == 0x000008, "Member 'FMasterDataCharacterParam::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacterParam, CharacterId) == 0x000010, "Member 'FMasterDataCharacterParam::CharacterId' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacterParam, Name) == 0x000020, "Member 'FMasterDataCharacterParam::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacterParam, MaxMainHealth) == 0x000030, "Member 'FMasterDataCharacterParam::MaxMainHealth' has a wrong offset!");
static_assert(offsetof(FMasterDataCharacterParam, AbilityCode) == 0x000034, "Member 'FMasterDataCharacterParam::AbilityCode' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataConfigKeyValue
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataConfigKeyValue final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConfigKeyValueEkey                           Ekey;                                              // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Note;                                              // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataConfigKeyValue) == 0x000008, "Wrong alignment on FMasterDataConfigKeyValue");
static_assert(sizeof(FMasterDataConfigKeyValue) == 0x000028, "Wrong size on FMasterDataConfigKeyValue");
static_assert(offsetof(FMasterDataConfigKeyValue, Code) == 0x000008, "Member 'FMasterDataConfigKeyValue::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataConfigKeyValue, Ekey) == 0x00000C, "Member 'FMasterDataConfigKeyValue::Ekey' has a wrong offset!");
static_assert(offsetof(FMasterDataConfigKeyValue, Value) == 0x000010, "Member 'FMasterDataConfigKeyValue::Value' has a wrong offset!");
static_assert(offsetof(FMasterDataConfigKeyValue, Note) == 0x000018, "Member 'FMasterDataConfigKeyValue::Note' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataCostumeDescription
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataCostumeDescription final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataCostumeDescription) == 0x000008, "Wrong alignment on FMasterDataCostumeDescription");
static_assert(sizeof(FMasterDataCostumeDescription) == 0x000028, "Wrong size on FMasterDataCostumeDescription");
static_assert(offsetof(FMasterDataCostumeDescription, Code) == 0x000008, "Member 'FMasterDataCostumeDescription::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataCostumeDescription, DisplayName) == 0x000010, "Member 'FMasterDataCostumeDescription::DisplayName' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataCostumeName
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataCostumeName final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataCostumeName) == 0x000008, "Wrong alignment on FMasterDataCostumeName");
static_assert(sizeof(FMasterDataCostumeName) == 0x000028, "Wrong size on FMasterDataCostumeName");
static_assert(offsetof(FMasterDataCostumeName, Code) == 0x000008, "Member 'FMasterDataCostumeName::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataCostumeName, DisplayName) == 0x000010, "Member 'FMasterDataCostumeName::DisplayName' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataDedicatedVoice
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FMasterDataDedicatedVoice final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Character;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VsCharacter;                                       // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Battle;                                            // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MainMenu;                                          // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataDedicatedVoice) == 0x000008, "Wrong alignment on FMasterDataDedicatedVoice");
static_assert(sizeof(FMasterDataDedicatedVoice) == 0x000020, "Wrong size on FMasterDataDedicatedVoice");
static_assert(offsetof(FMasterDataDedicatedVoice, Code) == 0x000008, "Member 'FMasterDataDedicatedVoice::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataDedicatedVoice, Character) == 0x00000C, "Member 'FMasterDataDedicatedVoice::Character' has a wrong offset!");
static_assert(offsetof(FMasterDataDedicatedVoice, VsCharacter) == 0x000010, "Member 'FMasterDataDedicatedVoice::VsCharacter' has a wrong offset!");
static_assert(offsetof(FMasterDataDedicatedVoice, Battle) == 0x000014, "Member 'FMasterDataDedicatedVoice::Battle' has a wrong offset!");
static_assert(offsetof(FMasterDataDedicatedVoice, MainMenu) == 0x000018, "Member 'FMasterDataDedicatedVoice::MainMenu' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataDefaultEquipSet
// 0x0040 (0x0040 - 0x0000)
struct FMasterDataDefaultEquipSet final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupCode;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Character;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Category;                                          // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCode;                                          // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotNo;                                            // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Note;                                              // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataDefaultEquipSet) == 0x000008, "Wrong alignment on FMasterDataDefaultEquipSet");
static_assert(sizeof(FMasterDataDefaultEquipSet) == 0x000040, "Wrong size on FMasterDataDefaultEquipSet");
static_assert(offsetof(FMasterDataDefaultEquipSet, Code) == 0x000008, "Member 'FMasterDataDefaultEquipSet::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataDefaultEquipSet, GroupCode) == 0x00000C, "Member 'FMasterDataDefaultEquipSet::GroupCode' has a wrong offset!");
static_assert(offsetof(FMasterDataDefaultEquipSet, Character) == 0x000010, "Member 'FMasterDataDefaultEquipSet::Character' has a wrong offset!");
static_assert(offsetof(FMasterDataDefaultEquipSet, Category) == 0x000018, "Member 'FMasterDataDefaultEquipSet::Category' has a wrong offset!");
static_assert(offsetof(FMasterDataDefaultEquipSet, ItemCode) == 0x000028, "Member 'FMasterDataDefaultEquipSet::ItemCode' has a wrong offset!");
static_assert(offsetof(FMasterDataDefaultEquipSet, SlotNo) == 0x00002C, "Member 'FMasterDataDefaultEquipSet::SlotNo' has a wrong offset!");
static_assert(offsetof(FMasterDataDefaultEquipSet, Note) == 0x000030, "Member 'FMasterDataDefaultEquipSet::Note' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataEmblemDescription
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataEmblemDescription final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataEmblemDescription) == 0x000008, "Wrong alignment on FMasterDataEmblemDescription");
static_assert(sizeof(FMasterDataEmblemDescription) == 0x000028, "Wrong size on FMasterDataEmblemDescription");
static_assert(offsetof(FMasterDataEmblemDescription, Code) == 0x000008, "Member 'FMasterDataEmblemDescription::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataEmblemDescription, DisplayName) == 0x000010, "Member 'FMasterDataEmblemDescription::DisplayName' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataEmblemName
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataEmblemName final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataEmblemName) == 0x000008, "Wrong alignment on FMasterDataEmblemName");
static_assert(sizeof(FMasterDataEmblemName) == 0x000028, "Wrong size on FMasterDataEmblemName");
static_assert(offsetof(FMasterDataEmblemName, Code) == 0x000008, "Member 'FMasterDataEmblemName::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataEmblemName, DisplayName) == 0x000010, "Member 'FMasterDataEmblemName::DisplayName' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataEmoteDescription
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataEmoteDescription final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataEmoteDescription) == 0x000008, "Wrong alignment on FMasterDataEmoteDescription");
static_assert(sizeof(FMasterDataEmoteDescription) == 0x000028, "Wrong size on FMasterDataEmoteDescription");
static_assert(offsetof(FMasterDataEmoteDescription, Code) == 0x000008, "Member 'FMasterDataEmoteDescription::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataEmoteDescription, DisplayName) == 0x000010, "Member 'FMasterDataEmoteDescription::DisplayName' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataEvent
// 0x0088 (0x0088 - 0x0000)
struct FMasterDataEvent
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EEventCategory                                Category;                                          // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              AvailableAt;                                       // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpireAt;                                          // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DropGroupCode;                                     // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BonusCode;                                         // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialEffectGroupCode;                            // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              TradeLimitAt;                                      // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              DisplayResultLimitAt;                              // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Eventpoint;                                        // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecoveryInterval;                                  // 0x0064(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecoveryNum;                                       // 0x0068(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayShop;                                       // 0x006C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayRanking;                                    // 0x0070(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayOrder;                                      // 0x0074(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventVoice1;                                       // 0x0078(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventVoice2;                                       // 0x007C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventVoice3;                                       // 0x0080(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEventMultipleVoicePlaybackType               MultipleVoicePlaybackType;                         // 0x0084(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataEvent) == 0x000008, "Wrong alignment on FMasterDataEvent");
static_assert(sizeof(FMasterDataEvent) == 0x000088, "Wrong size on FMasterDataEvent");
static_assert(offsetof(FMasterDataEvent, Code) == 0x000008, "Member 'FMasterDataEvent::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataEvent, Name) == 0x000010, "Member 'FMasterDataEvent::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataEvent, Category) == 0x000028, "Member 'FMasterDataEvent::Category' has a wrong offset!");
static_assert(offsetof(FMasterDataEvent, AvailableAt) == 0x000030, "Member 'FMasterDataEvent::AvailableAt' has a wrong offset!");
static_assert(offsetof(FMasterDataEvent, ExpireAt) == 0x000038, "Member 'FMasterDataEvent::ExpireAt' has a wrong offset!");
static_assert(offsetof(FMasterDataEvent, DropGroupCode) == 0x000040, "Member 'FMasterDataEvent::DropGroupCode' has a wrong offset!");
static_assert(offsetof(FMasterDataEvent, BonusCode) == 0x000044, "Member 'FMasterDataEvent::BonusCode' has a wrong offset!");
static_assert(offsetof(FMasterDataEvent, SpecialEffectGroupCode) == 0x000048, "Member 'FMasterDataEvent::SpecialEffectGroupCode' has a wrong offset!");
static_assert(offsetof(FMasterDataEvent, TradeLimitAt) == 0x000050, "Member 'FMasterDataEvent::TradeLimitAt' has a wrong offset!");
static_assert(offsetof(FMasterDataEvent, DisplayResultLimitAt) == 0x000058, "Member 'FMasterDataEvent::DisplayResultLimitAt' has a wrong offset!");
static_assert(offsetof(FMasterDataEvent, Eventpoint) == 0x000060, "Member 'FMasterDataEvent::Eventpoint' has a wrong offset!");
static_assert(offsetof(FMasterDataEvent, RecoveryInterval) == 0x000064, "Member 'FMasterDataEvent::RecoveryInterval' has a wrong offset!");
static_assert(offsetof(FMasterDataEvent, RecoveryNum) == 0x000068, "Member 'FMasterDataEvent::RecoveryNum' has a wrong offset!");
static_assert(offsetof(FMasterDataEvent, DisplayShop) == 0x00006C, "Member 'FMasterDataEvent::DisplayShop' has a wrong offset!");
static_assert(offsetof(FMasterDataEvent, DisplayRanking) == 0x000070, "Member 'FMasterDataEvent::DisplayRanking' has a wrong offset!");
static_assert(offsetof(FMasterDataEvent, DisplayOrder) == 0x000074, "Member 'FMasterDataEvent::DisplayOrder' has a wrong offset!");
static_assert(offsetof(FMasterDataEvent, EventVoice1) == 0x000078, "Member 'FMasterDataEvent::EventVoice1' has a wrong offset!");
static_assert(offsetof(FMasterDataEvent, EventVoice2) == 0x00007C, "Member 'FMasterDataEvent::EventVoice2' has a wrong offset!");
static_assert(offsetof(FMasterDataEvent, EventVoice3) == 0x000080, "Member 'FMasterDataEvent::EventVoice3' has a wrong offset!");
static_assert(offsetof(FMasterDataEvent, MultipleVoicePlaybackType) == 0x000084, "Member 'FMasterDataEvent::MultipleVoicePlaybackType' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataGallery
// 0x0088 (0x0088 - 0x0000)
struct FMasterDataGallery
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         Currency;                                          // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Need1;                                             // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Currency2;                                         // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Need2;                                             // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Currency3;                                         // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Need3;                                             // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenPanelNo;                                       // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PanelCount;                                        // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDateTime                              AvailableAt;                                       // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpireAt;                                          // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssetName;                                         // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayOrder;                                      // 0x0080(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataGallery) == 0x000008, "Wrong alignment on FMasterDataGallery");
static_assert(sizeof(FMasterDataGallery) == 0x000088, "Wrong size on FMasterDataGallery");
static_assert(offsetof(FMasterDataGallery, Code) == 0x000008, "Member 'FMasterDataGallery::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataGallery, Name) == 0x000010, "Member 'FMasterDataGallery::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataGallery, Currency) == 0x000028, "Member 'FMasterDataGallery::Currency' has a wrong offset!");
static_assert(offsetof(FMasterDataGallery, Need1) == 0x00002C, "Member 'FMasterDataGallery::Need1' has a wrong offset!");
static_assert(offsetof(FMasterDataGallery, Currency2) == 0x000030, "Member 'FMasterDataGallery::Currency2' has a wrong offset!");
static_assert(offsetof(FMasterDataGallery, Need2) == 0x000034, "Member 'FMasterDataGallery::Need2' has a wrong offset!");
static_assert(offsetof(FMasterDataGallery, Currency3) == 0x000038, "Member 'FMasterDataGallery::Currency3' has a wrong offset!");
static_assert(offsetof(FMasterDataGallery, Need3) == 0x00003C, "Member 'FMasterDataGallery::Need3' has a wrong offset!");
static_assert(offsetof(FMasterDataGallery, OpenPanelNo) == 0x000040, "Member 'FMasterDataGallery::OpenPanelNo' has a wrong offset!");
static_assert(offsetof(FMasterDataGallery, PanelCount) == 0x000044, "Member 'FMasterDataGallery::PanelCount' has a wrong offset!");
static_assert(offsetof(FMasterDataGallery, Description) == 0x000048, "Member 'FMasterDataGallery::Description' has a wrong offset!");
static_assert(offsetof(FMasterDataGallery, AvailableAt) == 0x000060, "Member 'FMasterDataGallery::AvailableAt' has a wrong offset!");
static_assert(offsetof(FMasterDataGallery, ExpireAt) == 0x000068, "Member 'FMasterDataGallery::ExpireAt' has a wrong offset!");
static_assert(offsetof(FMasterDataGallery, AssetName) == 0x000070, "Member 'FMasterDataGallery::AssetName' has a wrong offset!");
static_assert(offsetof(FMasterDataGallery, DisplayOrder) == 0x000080, "Member 'FMasterDataGallery::DisplayOrder' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataGameMode
// 0x0048 (0x0048 - 0x0000)
struct FMasterDataGameMode
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdGameMode                                   GameMode;                                          // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ScoreGroup;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResultTitle;                                       // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Address;                                           // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RespawnTime;                                       // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayName;                                       // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ModeTimeOut;                                       // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeAfterTheDeadline;                              // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeadlineTime;                                      // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayExplanation;                                // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PenaltyTarget;                                     // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataGameMode) == 0x000008, "Wrong alignment on FMasterDataGameMode");
static_assert(sizeof(FMasterDataGameMode) == 0x000048, "Wrong size on FMasterDataGameMode");
static_assert(offsetof(FMasterDataGameMode, Code) == 0x000008, "Member 'FMasterDataGameMode::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataGameMode, GameMode) == 0x00000C, "Member 'FMasterDataGameMode::GameMode' has a wrong offset!");
static_assert(offsetof(FMasterDataGameMode, ScoreGroup) == 0x000010, "Member 'FMasterDataGameMode::ScoreGroup' has a wrong offset!");
static_assert(offsetof(FMasterDataGameMode, ResultTitle) == 0x000014, "Member 'FMasterDataGameMode::ResultTitle' has a wrong offset!");
static_assert(offsetof(FMasterDataGameMode, Address) == 0x000018, "Member 'FMasterDataGameMode::Address' has a wrong offset!");
static_assert(offsetof(FMasterDataGameMode, RespawnTime) == 0x000028, "Member 'FMasterDataGameMode::RespawnTime' has a wrong offset!");
static_assert(offsetof(FMasterDataGameMode, DisplayName) == 0x00002C, "Member 'FMasterDataGameMode::DisplayName' has a wrong offset!");
static_assert(offsetof(FMasterDataGameMode, ModeTimeOut) == 0x000030, "Member 'FMasterDataGameMode::ModeTimeOut' has a wrong offset!");
static_assert(offsetof(FMasterDataGameMode, TimeAfterTheDeadline) == 0x000034, "Member 'FMasterDataGameMode::TimeAfterTheDeadline' has a wrong offset!");
static_assert(offsetof(FMasterDataGameMode, DeadlineTime) == 0x000038, "Member 'FMasterDataGameMode::DeadlineTime' has a wrong offset!");
static_assert(offsetof(FMasterDataGameMode, DisplayExplanation) == 0x00003C, "Member 'FMasterDataGameMode::DisplayExplanation' has a wrong offset!");
static_assert(offsetof(FMasterDataGameMode, PenaltyTarget) == 0x000040, "Member 'FMasterDataGameMode::PenaltyTarget' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataGmDisplayName
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataGmDisplayName final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGmDisplayName) == 0x000008, "Wrong alignment on FMasterDataGmDisplayName");
static_assert(sizeof(FMasterDataGmDisplayName) == 0x000028, "Wrong size on FMasterDataGmDisplayName");
static_assert(offsetof(FMasterDataGmDisplayName, Code) == 0x000008, "Member 'FMasterDataGmDisplayName::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataGmDisplayName, DisplayName) == 0x000010, "Member 'FMasterDataGmDisplayName::DisplayName' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataGmExplanation
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataGmExplanation final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGmExplanation) == 0x000008, "Wrong alignment on FMasterDataGmExplanation");
static_assert(sizeof(FMasterDataGmExplanation) == 0x000028, "Wrong size on FMasterDataGmExplanation");
static_assert(offsetof(FMasterDataGmExplanation, Code) == 0x000008, "Member 'FMasterDataGmExplanation::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataGmExplanation, DisplayName) == 0x000010, "Member 'FMasterDataGmExplanation::DisplayName' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataGmResultTitle
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataGmResultTitle final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGmResultTitle) == 0x000008, "Wrong alignment on FMasterDataGmResultTitle");
static_assert(sizeof(FMasterDataGmResultTitle) == 0x000028, "Wrong size on FMasterDataGmResultTitle");
static_assert(offsetof(FMasterDataGmResultTitle, Code) == 0x000008, "Member 'FMasterDataGmResultTitle::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataGmResultTitle, DisplayName) == 0x000010, "Member 'FMasterDataGmResultTitle::DisplayName' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataGuildActivity
// 0x0030 (0x0030 - 0x0000)
struct FMasterDataGuildActivity final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EGuildActivityLikeTarget                      LikeTarget;                                        // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataGuildActivity) == 0x000008, "Wrong alignment on FMasterDataGuildActivity");
static_assert(sizeof(FMasterDataGuildActivity) == 0x000030, "Wrong size on FMasterDataGuildActivity");
static_assert(offsetof(FMasterDataGuildActivity, Code) == 0x000008, "Member 'FMasterDataGuildActivity::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataGuildActivity, Text) == 0x000010, "Member 'FMasterDataGuildActivity::Text' has a wrong offset!");
static_assert(offsetof(FMasterDataGuildActivity, LikeTarget) == 0x000028, "Member 'FMasterDataGuildActivity::LikeTarget' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataGuildEmblem
// 0x0020 (0x0020 - 0x0000)
struct FMasterDataGuildEmblem final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataGuildEmblem) == 0x000008, "Wrong alignment on FMasterDataGuildEmblem");
static_assert(sizeof(FMasterDataGuildEmblem) == 0x000020, "Wrong size on FMasterDataGuildEmblem");
static_assert(offsetof(FMasterDataGuildEmblem, Code) == 0x000008, "Member 'FMasterDataGuildEmblem::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataGuildEmblem, Name) == 0x000010, "Member 'FMasterDataGuildEmblem::Name' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataGuildLevel
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FMasterDataGuildLevel final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstitutionLevel;                                  // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Member;                                            // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Boost;                                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataGuildLevel) == 0x000008, "Wrong alignment on FMasterDataGuildLevel");
static_assert(sizeof(FMasterDataGuildLevel) == 0x000020, "Wrong size on FMasterDataGuildLevel");
static_assert(offsetof(FMasterDataGuildLevel, Code) == 0x000008, "Member 'FMasterDataGuildLevel::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataGuildLevel, Level) == 0x00000C, "Member 'FMasterDataGuildLevel::Level' has a wrong offset!");
static_assert(offsetof(FMasterDataGuildLevel, InstitutionLevel) == 0x000010, "Member 'FMasterDataGuildLevel::InstitutionLevel' has a wrong offset!");
static_assert(offsetof(FMasterDataGuildLevel, Member) == 0x000014, "Member 'FMasterDataGuildLevel::Member' has a wrong offset!");
static_assert(offsetof(FMasterDataGuildLevel, Boost) == 0x000018, "Member 'FMasterDataGuildLevel::Boost' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataItemCategory
// 0x0030 (0x0030 - 0x0000)
struct FMasterDataItemCategory final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataItemCategory) == 0x000008, "Wrong alignment on FMasterDataItemCategory");
static_assert(sizeof(FMasterDataItemCategory) == 0x000030, "Wrong size on FMasterDataItemCategory");
static_assert(offsetof(FMasterDataItemCategory, Code) == 0x000008, "Member 'FMasterDataItemCategory::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataItemCategory, Name) == 0x000010, "Member 'FMasterDataItemCategory::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataItemCategory, Description) == 0x000020, "Member 'FMasterDataItemCategory::Description' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataLoginBonus
// 0x0058 (0x0058 - 0x0000)
struct FMasterDataLoginBonus
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	ELoginBonusCategory                           Category;                                          // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoginBonusContinuityType                     ContinuityType;                                    // 0x0029(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              AvailableAt;                                       // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpireAt;                                          // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterCode;                                     // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AssetName;                                         // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataLoginBonus) == 0x000008, "Wrong alignment on FMasterDataLoginBonus");
static_assert(sizeof(FMasterDataLoginBonus) == 0x000058, "Wrong size on FMasterDataLoginBonus");
static_assert(offsetof(FMasterDataLoginBonus, Code) == 0x000008, "Member 'FMasterDataLoginBonus::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataLoginBonus, Name) == 0x000010, "Member 'FMasterDataLoginBonus::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataLoginBonus, Category) == 0x000028, "Member 'FMasterDataLoginBonus::Category' has a wrong offset!");
static_assert(offsetof(FMasterDataLoginBonus, ContinuityType) == 0x000029, "Member 'FMasterDataLoginBonus::ContinuityType' has a wrong offset!");
static_assert(offsetof(FMasterDataLoginBonus, AvailableAt) == 0x000030, "Member 'FMasterDataLoginBonus::AvailableAt' has a wrong offset!");
static_assert(offsetof(FMasterDataLoginBonus, ExpireAt) == 0x000038, "Member 'FMasterDataLoginBonus::ExpireAt' has a wrong offset!");
static_assert(offsetof(FMasterDataLoginBonus, CharacterCode) == 0x000040, "Member 'FMasterDataLoginBonus::CharacterCode' has a wrong offset!");
static_assert(offsetof(FMasterDataLoginBonus, AssetName) == 0x000048, "Member 'FMasterDataLoginBonus::AssetName' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataLottery
// 0x0080 (0x0080 - 0x0000)
struct FMasterDataLottery
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	ELotteryLotteryType                           LotteryType;                                       // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Currency;                                          // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayOrder;                                      // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              AvailableAt;                                       // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpireAt;                                          // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxStep;                                           // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELotteryBoxType                               BoxType;                                           // 0x004C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Mileage;                                           // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PaymentGroupCode;                                  // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssetName;                                         // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BannerAssetName;                                   // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemDescription;                                   // 0x0078(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataLottery) == 0x000008, "Wrong alignment on FMasterDataLottery");
static_assert(sizeof(FMasterDataLottery) == 0x000080, "Wrong size on FMasterDataLottery");
static_assert(offsetof(FMasterDataLottery, Code) == 0x000008, "Member 'FMasterDataLottery::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataLottery, Name) == 0x000010, "Member 'FMasterDataLottery::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataLottery, LotteryType) == 0x000028, "Member 'FMasterDataLottery::LotteryType' has a wrong offset!");
static_assert(offsetof(FMasterDataLottery, Currency) == 0x00002C, "Member 'FMasterDataLottery::Currency' has a wrong offset!");
static_assert(offsetof(FMasterDataLottery, Price) == 0x000030, "Member 'FMasterDataLottery::Price' has a wrong offset!");
static_assert(offsetof(FMasterDataLottery, DisplayOrder) == 0x000034, "Member 'FMasterDataLottery::DisplayOrder' has a wrong offset!");
static_assert(offsetof(FMasterDataLottery, AvailableAt) == 0x000038, "Member 'FMasterDataLottery::AvailableAt' has a wrong offset!");
static_assert(offsetof(FMasterDataLottery, ExpireAt) == 0x000040, "Member 'FMasterDataLottery::ExpireAt' has a wrong offset!");
static_assert(offsetof(FMasterDataLottery, MaxStep) == 0x000048, "Member 'FMasterDataLottery::MaxStep' has a wrong offset!");
static_assert(offsetof(FMasterDataLottery, BoxType) == 0x00004C, "Member 'FMasterDataLottery::BoxType' has a wrong offset!");
static_assert(offsetof(FMasterDataLottery, Mileage) == 0x000050, "Member 'FMasterDataLottery::Mileage' has a wrong offset!");
static_assert(offsetof(FMasterDataLottery, PaymentGroupCode) == 0x000054, "Member 'FMasterDataLottery::PaymentGroupCode' has a wrong offset!");
static_assert(offsetof(FMasterDataLottery, AssetName) == 0x000058, "Member 'FMasterDataLottery::AssetName' has a wrong offset!");
static_assert(offsetof(FMasterDataLottery, BannerAssetName) == 0x000068, "Member 'FMasterDataLottery::BannerAssetName' has a wrong offset!");
static_assert(offsetof(FMasterDataLottery, ItemDescription) == 0x000078, "Member 'FMasterDataLottery::ItemDescription' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataLotteryItemDescrip
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataLotteryItemDescrip final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ItemDescription;                                   // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataLotteryItemDescrip) == 0x000008, "Wrong alignment on FMasterDataLotteryItemDescrip");
static_assert(sizeof(FMasterDataLotteryItemDescrip) == 0x000028, "Wrong size on FMasterDataLotteryItemDescrip");
static_assert(offsetof(FMasterDataLotteryItemDescrip, Code) == 0x000008, "Member 'FMasterDataLotteryItemDescrip::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataLotteryItemDescrip, ItemDescription) == 0x000010, "Member 'FMasterDataLotteryItemDescrip::ItemDescription' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataMatchType
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataMatchType final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdMatchType                                  MatchType;                                         // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ResultTitle;                                       // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataMatchType) == 0x000008, "Wrong alignment on FMasterDataMatchType");
static_assert(sizeof(FMasterDataMatchType) == 0x000028, "Wrong size on FMasterDataMatchType");
static_assert(offsetof(FMasterDataMatchType, Code) == 0x000008, "Member 'FMasterDataMatchType::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataMatchType, MatchType) == 0x00000C, "Member 'FMasterDataMatchType::MatchType' has a wrong offset!");
static_assert(offsetof(FMasterDataMatchType, ResultTitle) == 0x000010, "Member 'FMasterDataMatchType::ResultTitle' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataMGuildLeagues
// 0x0038 (0x0038 - 0x0000)
struct FMasterDataMGuildLeagues final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LeagueCode;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   LeagueName;                                        // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         RaiseBorder;                                       // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMGuildLeaguesRaiseBorderUnit                 RaiseBorderUnit;                                   // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReduceBorder;                                      // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMGuildLeaguesReduceBorderType                ReduceBorderType;                                  // 0x0034(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataMGuildLeagues) == 0x000008, "Wrong alignment on FMasterDataMGuildLeagues");
static_assert(sizeof(FMasterDataMGuildLeagues) == 0x000038, "Wrong size on FMasterDataMGuildLeagues");
static_assert(offsetof(FMasterDataMGuildLeagues, Code) == 0x000008, "Member 'FMasterDataMGuildLeagues::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataMGuildLeagues, LeagueCode) == 0x00000C, "Member 'FMasterDataMGuildLeagues::LeagueCode' has a wrong offset!");
static_assert(offsetof(FMasterDataMGuildLeagues, LeagueName) == 0x000010, "Member 'FMasterDataMGuildLeagues::LeagueName' has a wrong offset!");
static_assert(offsetof(FMasterDataMGuildLeagues, RaiseBorder) == 0x000028, "Member 'FMasterDataMGuildLeagues::RaiseBorder' has a wrong offset!");
static_assert(offsetof(FMasterDataMGuildLeagues, RaiseBorderUnit) == 0x00002C, "Member 'FMasterDataMGuildLeagues::RaiseBorderUnit' has a wrong offset!");
static_assert(offsetof(FMasterDataMGuildLeagues, ReduceBorder) == 0x000030, "Member 'FMasterDataMGuildLeagues::ReduceBorder' has a wrong offset!");
static_assert(offsetof(FMasterDataMGuildLeagues, ReduceBorderType) == 0x000034, "Member 'FMasterDataMGuildLeagues::ReduceBorderType' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataMission
// 0x00B0 (0x00B0 - 0x0000)
struct FMasterDataMission
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EMdMissionCategory                            Category;                                          // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdMissionTargetType                          TargetType;                                        // 0x0029(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Threshold;                                         // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Star;                                              // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemCategory;                                      // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCode;                                          // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetItemCount;                                      // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PremiseMission;                                    // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DesignationValue;                                  // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterCode;                                     // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdCharacterAssign                            Assign;                                            // 0x005C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Skill;                                             // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdAbilityType                                Ability;                                           // 0x0064(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Supply;                                            // 0x0068(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdRarityItemCategory                         CustomizeItemCategory;                             // 0x006C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdRarity                                     Rarity;                                            // 0x006D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpecialEffectCostume;                              // 0x0070(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventCode;                                         // 0x0074(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DivideValue;                                       // 0x0078(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdMissionTransition                          Transition;                                        // 0x007C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdMissionType                                MissionType;                                       // 0x007D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMissionJudge                                 Judge;                                             // 0x007E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7F[0x1];                                       // 0x007F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RankCode;                                          // 0x0080(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              AvailableAt;                                       // 0x0088(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpireAt;                                          // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0098(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataMission) == 0x000008, "Wrong alignment on FMasterDataMission");
static_assert(sizeof(FMasterDataMission) == 0x0000B0, "Wrong size on FMasterDataMission");
static_assert(offsetof(FMasterDataMission, Code) == 0x000008, "Member 'FMasterDataMission::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataMission, Name) == 0x000010, "Member 'FMasterDataMission::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataMission, Category) == 0x000028, "Member 'FMasterDataMission::Category' has a wrong offset!");
static_assert(offsetof(FMasterDataMission, TargetType) == 0x000029, "Member 'FMasterDataMission::TargetType' has a wrong offset!");
static_assert(offsetof(FMasterDataMission, Threshold) == 0x00002C, "Member 'FMasterDataMission::Threshold' has a wrong offset!");
static_assert(offsetof(FMasterDataMission, Star) == 0x000030, "Member 'FMasterDataMission::Star' has a wrong offset!");
static_assert(offsetof(FMasterDataMission, ItemCategory) == 0x000038, "Member 'FMasterDataMission::ItemCategory' has a wrong offset!");
static_assert(offsetof(FMasterDataMission, ItemCode) == 0x000048, "Member 'FMasterDataMission::ItemCode' has a wrong offset!");
static_assert(offsetof(FMasterDataMission, GetItemCount) == 0x00004C, "Member 'FMasterDataMission::GetItemCount' has a wrong offset!");
static_assert(offsetof(FMasterDataMission, PremiseMission) == 0x000050, "Member 'FMasterDataMission::PremiseMission' has a wrong offset!");
static_assert(offsetof(FMasterDataMission, DesignationValue) == 0x000054, "Member 'FMasterDataMission::DesignationValue' has a wrong offset!");
static_assert(offsetof(FMasterDataMission, CharacterCode) == 0x000058, "Member 'FMasterDataMission::CharacterCode' has a wrong offset!");
static_assert(offsetof(FMasterDataMission, Assign) == 0x00005C, "Member 'FMasterDataMission::Assign' has a wrong offset!");
static_assert(offsetof(FMasterDataMission, Skill) == 0x000060, "Member 'FMasterDataMission::Skill' has a wrong offset!");
static_assert(offsetof(FMasterDataMission, Ability) == 0x000064, "Member 'FMasterDataMission::Ability' has a wrong offset!");
static_assert(offsetof(FMasterDataMission, Supply) == 0x000068, "Member 'FMasterDataMission::Supply' has a wrong offset!");
static_assert(offsetof(FMasterDataMission, CustomizeItemCategory) == 0x00006C, "Member 'FMasterDataMission::CustomizeItemCategory' has a wrong offset!");
static_assert(offsetof(FMasterDataMission, Rarity) == 0x00006D, "Member 'FMasterDataMission::Rarity' has a wrong offset!");
static_assert(offsetof(FMasterDataMission, SpecialEffectCostume) == 0x000070, "Member 'FMasterDataMission::SpecialEffectCostume' has a wrong offset!");
static_assert(offsetof(FMasterDataMission, EventCode) == 0x000074, "Member 'FMasterDataMission::EventCode' has a wrong offset!");
static_assert(offsetof(FMasterDataMission, DivideValue) == 0x000078, "Member 'FMasterDataMission::DivideValue' has a wrong offset!");
static_assert(offsetof(FMasterDataMission, Transition) == 0x00007C, "Member 'FMasterDataMission::Transition' has a wrong offset!");
static_assert(offsetof(FMasterDataMission, MissionType) == 0x00007D, "Member 'FMasterDataMission::MissionType' has a wrong offset!");
static_assert(offsetof(FMasterDataMission, Judge) == 0x00007E, "Member 'FMasterDataMission::Judge' has a wrong offset!");
static_assert(offsetof(FMasterDataMission, RankCode) == 0x000080, "Member 'FMasterDataMission::RankCode' has a wrong offset!");
static_assert(offsetof(FMasterDataMission, AvailableAt) == 0x000088, "Member 'FMasterDataMission::AvailableAt' has a wrong offset!");
static_assert(offsetof(FMasterDataMission, ExpireAt) == 0x000090, "Member 'FMasterDataMission::ExpireAt' has a wrong offset!");
static_assert(offsetof(FMasterDataMission, Description) == 0x000098, "Member 'FMasterDataMission::Description' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataMissionStar
// 0x0048 (0x0048 - 0x0000)
struct FMasterDataMissionStar final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemCategory;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCode;                                          // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetItemCount;                                      // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdMissionCategory                            Category;                                          // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TargetStarCount;                                   // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventCode;                                         // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupCode;                                         // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Note;                                              // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataMissionStar) == 0x000008, "Wrong alignment on FMasterDataMissionStar");
static_assert(sizeof(FMasterDataMissionStar) == 0x000048, "Wrong size on FMasterDataMissionStar");
static_assert(offsetof(FMasterDataMissionStar, Code) == 0x000008, "Member 'FMasterDataMissionStar::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataMissionStar, ItemCategory) == 0x000010, "Member 'FMasterDataMissionStar::ItemCategory' has a wrong offset!");
static_assert(offsetof(FMasterDataMissionStar, ItemCode) == 0x000020, "Member 'FMasterDataMissionStar::ItemCode' has a wrong offset!");
static_assert(offsetof(FMasterDataMissionStar, GetItemCount) == 0x000024, "Member 'FMasterDataMissionStar::GetItemCount' has a wrong offset!");
static_assert(offsetof(FMasterDataMissionStar, Category) == 0x000028, "Member 'FMasterDataMissionStar::Category' has a wrong offset!");
static_assert(offsetof(FMasterDataMissionStar, TargetStarCount) == 0x00002C, "Member 'FMasterDataMissionStar::TargetStarCount' has a wrong offset!");
static_assert(offsetof(FMasterDataMissionStar, EventCode) == 0x000030, "Member 'FMasterDataMissionStar::EventCode' has a wrong offset!");
static_assert(offsetof(FMasterDataMissionStar, GroupCode) == 0x000034, "Member 'FMasterDataMissionStar::GroupCode' has a wrong offset!");
static_assert(offsetof(FMasterDataMissionStar, Note) == 0x000038, "Member 'FMasterDataMissionStar::Note' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataMLootboxPayment
// 0x0048 (0x0048 - 0x0000)
struct FMasterDataMLootboxPayment final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupCode;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootboxCode;                                       // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PaymentId;                                         // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PaymentType;                                       // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExchangeItemId;                                    // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfLotteryFlg;                                // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Note;                                              // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataMLootboxPayment) == 0x000008, "Wrong alignment on FMasterDataMLootboxPayment");
static_assert(sizeof(FMasterDataMLootboxPayment) == 0x000048, "Wrong size on FMasterDataMLootboxPayment");
static_assert(offsetof(FMasterDataMLootboxPayment, Code) == 0x000008, "Member 'FMasterDataMLootboxPayment::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataMLootboxPayment, GroupCode) == 0x00000C, "Member 'FMasterDataMLootboxPayment::GroupCode' has a wrong offset!");
static_assert(offsetof(FMasterDataMLootboxPayment, LootboxCode) == 0x000010, "Member 'FMasterDataMLootboxPayment::LootboxCode' has a wrong offset!");
static_assert(offsetof(FMasterDataMLootboxPayment, PaymentId) == 0x000018, "Member 'FMasterDataMLootboxPayment::PaymentId' has a wrong offset!");
static_assert(offsetof(FMasterDataMLootboxPayment, PaymentType) == 0x000028, "Member 'FMasterDataMLootboxPayment::PaymentType' has a wrong offset!");
static_assert(offsetof(FMasterDataMLootboxPayment, Price) == 0x00002C, "Member 'FMasterDataMLootboxPayment::Price' has a wrong offset!");
static_assert(offsetof(FMasterDataMLootboxPayment, ExchangeItemId) == 0x000030, "Member 'FMasterDataMLootboxPayment::ExchangeItemId' has a wrong offset!");
static_assert(offsetof(FMasterDataMLootboxPayment, NumberOfLotteryFlg) == 0x000034, "Member 'FMasterDataMLootboxPayment::NumberOfLotteryFlg' has a wrong offset!");
static_assert(offsetof(FMasterDataMLootboxPayment, Note) == 0x000038, "Member 'FMasterDataMLootboxPayment::Note' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataMMileageItemConfig
// 0x0048 (0x0048 - 0x0000)
struct FMasterDataMMileageItemConfig final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootboxCode;                                       // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootboxId;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemConfigId;                                      // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemCategory;                                      // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCode;                                          // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum;                                           // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MileagePrice;                                      // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataMMileageItemConfig) == 0x000008, "Wrong alignment on FMasterDataMMileageItemConfig");
static_assert(sizeof(FMasterDataMMileageItemConfig) == 0x000048, "Wrong size on FMasterDataMMileageItemConfig");
static_assert(offsetof(FMasterDataMMileageItemConfig, Code) == 0x000008, "Member 'FMasterDataMMileageItemConfig::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataMMileageItemConfig, LootboxCode) == 0x00000C, "Member 'FMasterDataMMileageItemConfig::LootboxCode' has a wrong offset!");
static_assert(offsetof(FMasterDataMMileageItemConfig, LootboxId) == 0x000010, "Member 'FMasterDataMMileageItemConfig::LootboxId' has a wrong offset!");
static_assert(offsetof(FMasterDataMMileageItemConfig, ItemConfigId) == 0x000018, "Member 'FMasterDataMMileageItemConfig::ItemConfigId' has a wrong offset!");
static_assert(offsetof(FMasterDataMMileageItemConfig, ItemCategory) == 0x000028, "Member 'FMasterDataMMileageItemConfig::ItemCategory' has a wrong offset!");
static_assert(offsetof(FMasterDataMMileageItemConfig, ItemCode) == 0x000038, "Member 'FMasterDataMMileageItemConfig::ItemCode' has a wrong offset!");
static_assert(offsetof(FMasterDataMMileageItemConfig, ItemNum) == 0x00003C, "Member 'FMasterDataMMileageItemConfig::ItemNum' has a wrong offset!");
static_assert(offsetof(FMasterDataMMileageItemConfig, MileagePrice) == 0x000040, "Member 'FMasterDataMMileageItemConfig::MileagePrice' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataMRandomItemRate
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FMasterDataMRandomItemRate final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdScoreRank                                  ScoreRank;                                         // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DropNum;                                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeightingFactor;                                   // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataMRandomItemRate) == 0x000008, "Wrong alignment on FMasterDataMRandomItemRate");
static_assert(sizeof(FMasterDataMRandomItemRate) == 0x000018, "Wrong size on FMasterDataMRandomItemRate");
static_assert(offsetof(FMasterDataMRandomItemRate, Code) == 0x000008, "Member 'FMasterDataMRandomItemRate::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataMRandomItemRate, ScoreRank) == 0x00000C, "Member 'FMasterDataMRandomItemRate::ScoreRank' has a wrong offset!");
static_assert(offsetof(FMasterDataMRandomItemRate, DropNum) == 0x000010, "Member 'FMasterDataMRandomItemRate::DropNum' has a wrong offset!");
static_assert(offsetof(FMasterDataMRandomItemRate, WeightingFactor) == 0x000014, "Member 'FMasterDataMRandomItemRate::WeightingFactor' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataMRandomItemWin
// 0x0048 (0x0048 - 0x0000)
struct FMasterDataMRandomItemWin
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemCategory;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCode;                                          // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum;                                           // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeightingFactor;                                   // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterCode;                                     // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupCode;                                         // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Note;                                              // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataMRandomItemWin) == 0x000008, "Wrong alignment on FMasterDataMRandomItemWin");
static_assert(sizeof(FMasterDataMRandomItemWin) == 0x000048, "Wrong size on FMasterDataMRandomItemWin");
static_assert(offsetof(FMasterDataMRandomItemWin, Code) == 0x000008, "Member 'FMasterDataMRandomItemWin::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataMRandomItemWin, ItemCategory) == 0x000010, "Member 'FMasterDataMRandomItemWin::ItemCategory' has a wrong offset!");
static_assert(offsetof(FMasterDataMRandomItemWin, ItemCode) == 0x000020, "Member 'FMasterDataMRandomItemWin::ItemCode' has a wrong offset!");
static_assert(offsetof(FMasterDataMRandomItemWin, ItemNum) == 0x000024, "Member 'FMasterDataMRandomItemWin::ItemNum' has a wrong offset!");
static_assert(offsetof(FMasterDataMRandomItemWin, WeightingFactor) == 0x000028, "Member 'FMasterDataMRandomItemWin::WeightingFactor' has a wrong offset!");
static_assert(offsetof(FMasterDataMRandomItemWin, CharacterCode) == 0x00002C, "Member 'FMasterDataMRandomItemWin::CharacterCode' has a wrong offset!");
static_assert(offsetof(FMasterDataMRandomItemWin, GroupCode) == 0x000030, "Member 'FMasterDataMRandomItemWin::GroupCode' has a wrong offset!");
static_assert(offsetof(FMasterDataMRandomItemWin, Note) == 0x000038, "Member 'FMasterDataMRandomItemWin::Note' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataMRanking
// 0x0058 (0x0058 - 0x0000)
struct FMasterDataMRanking
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankingType;                                       // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoreType;                                         // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SetType;                                           // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortType;                                          // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMRankingTotallingUnit                        TotallingUnit;                                     // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMRankingTarget                               Target;                                            // 0x002D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMRankingPeriodType                           PeriodType;                                        // 0x002E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SeasonCode;                                        // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PeriodMonth;                                       // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventCode;                                         // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              ReleaseAt;                                         // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              AvailableAt;                                       // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpireAt;                                          // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataMRanking) == 0x000008, "Wrong alignment on FMasterDataMRanking");
static_assert(sizeof(FMasterDataMRanking) == 0x000058, "Wrong size on FMasterDataMRanking");
static_assert(offsetof(FMasterDataMRanking, Code) == 0x000008, "Member 'FMasterDataMRanking::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataMRanking, RankingType) == 0x00000C, "Member 'FMasterDataMRanking::RankingType' has a wrong offset!");
static_assert(offsetof(FMasterDataMRanking, Name) == 0x000010, "Member 'FMasterDataMRanking::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataMRanking, ScoreType) == 0x000020, "Member 'FMasterDataMRanking::ScoreType' has a wrong offset!");
static_assert(offsetof(FMasterDataMRanking, SetType) == 0x000024, "Member 'FMasterDataMRanking::SetType' has a wrong offset!");
static_assert(offsetof(FMasterDataMRanking, SortType) == 0x000028, "Member 'FMasterDataMRanking::SortType' has a wrong offset!");
static_assert(offsetof(FMasterDataMRanking, TotallingUnit) == 0x00002C, "Member 'FMasterDataMRanking::TotallingUnit' has a wrong offset!");
static_assert(offsetof(FMasterDataMRanking, Target) == 0x00002D, "Member 'FMasterDataMRanking::Target' has a wrong offset!");
static_assert(offsetof(FMasterDataMRanking, PeriodType) == 0x00002E, "Member 'FMasterDataMRanking::PeriodType' has a wrong offset!");
static_assert(offsetof(FMasterDataMRanking, SeasonCode) == 0x000030, "Member 'FMasterDataMRanking::SeasonCode' has a wrong offset!");
static_assert(offsetof(FMasterDataMRanking, PeriodMonth) == 0x000034, "Member 'FMasterDataMRanking::PeriodMonth' has a wrong offset!");
static_assert(offsetof(FMasterDataMRanking, EventCode) == 0x000038, "Member 'FMasterDataMRanking::EventCode' has a wrong offset!");
static_assert(offsetof(FMasterDataMRanking, ReleaseAt) == 0x000040, "Member 'FMasterDataMRanking::ReleaseAt' has a wrong offset!");
static_assert(offsetof(FMasterDataMRanking, AvailableAt) == 0x000048, "Member 'FMasterDataMRanking::AvailableAt' has a wrong offset!");
static_assert(offsetof(FMasterDataMRanking, ExpireAt) == 0x000050, "Member 'FMasterDataMRanking::ExpireAt' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataMSpecialEffect
// 0x0040 (0x0040 - 0x0000)
struct FMasterDataMSpecialEffect
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Category;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCode;                                          // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rate;                                              // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Event;                                             // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupCode;                                         // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Note;                                              // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataMSpecialEffect) == 0x000008, "Wrong alignment on FMasterDataMSpecialEffect");
static_assert(sizeof(FMasterDataMSpecialEffect) == 0x000040, "Wrong size on FMasterDataMSpecialEffect");
static_assert(offsetof(FMasterDataMSpecialEffect, Code) == 0x000008, "Member 'FMasterDataMSpecialEffect::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataMSpecialEffect, Category) == 0x000010, "Member 'FMasterDataMSpecialEffect::Category' has a wrong offset!");
static_assert(offsetof(FMasterDataMSpecialEffect, ItemCode) == 0x000020, "Member 'FMasterDataMSpecialEffect::ItemCode' has a wrong offset!");
static_assert(offsetof(FMasterDataMSpecialEffect, Rate) == 0x000024, "Member 'FMasterDataMSpecialEffect::Rate' has a wrong offset!");
static_assert(offsetof(FMasterDataMSpecialEffect, Event) == 0x000028, "Member 'FMasterDataMSpecialEffect::Event' has a wrong offset!");
static_assert(offsetof(FMasterDataMSpecialEffect, GroupCode) == 0x00002C, "Member 'FMasterDataMSpecialEffect::GroupCode' has a wrong offset!");
static_assert(offsetof(FMasterDataMSpecialEffect, Note) == 0x000030, "Member 'FMasterDataMSpecialEffect::Note' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataMyAdMessageXloc
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataMyAdMessageXloc final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Message;                                           // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataMyAdMessageXloc) == 0x000008, "Wrong alignment on FMasterDataMyAdMessageXloc");
static_assert(sizeof(FMasterDataMyAdMessageXloc) == 0x000028, "Wrong size on FMasterDataMyAdMessageXloc");
static_assert(offsetof(FMasterDataMyAdMessageXloc, Code) == 0x000008, "Member 'FMasterDataMyAdMessageXloc::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataMyAdMessageXloc, Message) == 0x000010, "Member 'FMasterDataMyAdMessageXloc::Message' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataNotificationItem
// 0x00B0 (0x00B0 - 0x0000)
struct FMasterDataNotificationItem final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Category1;                                         // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCode1;                                         // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity1;                                         // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Category2;                                         // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCode2;                                         // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity2;                                         // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Category3;                                         // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCode3;                                         // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity3;                                         // 0x0064(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Category4;                                         // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCode4;                                         // 0x0078(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity4;                                         // 0x007C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Category5;                                         // 0x0080(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCode5;                                         // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity5;                                         // 0x0094(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Category6;                                         // 0x0098(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCode6;                                         // 0x00A8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity6;                                         // 0x00AC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataNotificationItem) == 0x000008, "Wrong alignment on FMasterDataNotificationItem");
static_assert(sizeof(FMasterDataNotificationItem) == 0x0000B0, "Wrong size on FMasterDataNotificationItem");
static_assert(offsetof(FMasterDataNotificationItem, Code) == 0x000008, "Member 'FMasterDataNotificationItem::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataNotificationItem, Name) == 0x000010, "Member 'FMasterDataNotificationItem::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataNotificationItem, Category1) == 0x000020, "Member 'FMasterDataNotificationItem::Category1' has a wrong offset!");
static_assert(offsetof(FMasterDataNotificationItem, ItemCode1) == 0x000030, "Member 'FMasterDataNotificationItem::ItemCode1' has a wrong offset!");
static_assert(offsetof(FMasterDataNotificationItem, Quantity1) == 0x000034, "Member 'FMasterDataNotificationItem::Quantity1' has a wrong offset!");
static_assert(offsetof(FMasterDataNotificationItem, Category2) == 0x000038, "Member 'FMasterDataNotificationItem::Category2' has a wrong offset!");
static_assert(offsetof(FMasterDataNotificationItem, ItemCode2) == 0x000048, "Member 'FMasterDataNotificationItem::ItemCode2' has a wrong offset!");
static_assert(offsetof(FMasterDataNotificationItem, Quantity2) == 0x00004C, "Member 'FMasterDataNotificationItem::Quantity2' has a wrong offset!");
static_assert(offsetof(FMasterDataNotificationItem, Category3) == 0x000050, "Member 'FMasterDataNotificationItem::Category3' has a wrong offset!");
static_assert(offsetof(FMasterDataNotificationItem, ItemCode3) == 0x000060, "Member 'FMasterDataNotificationItem::ItemCode3' has a wrong offset!");
static_assert(offsetof(FMasterDataNotificationItem, Quantity3) == 0x000064, "Member 'FMasterDataNotificationItem::Quantity3' has a wrong offset!");
static_assert(offsetof(FMasterDataNotificationItem, Category4) == 0x000068, "Member 'FMasterDataNotificationItem::Category4' has a wrong offset!");
static_assert(offsetof(FMasterDataNotificationItem, ItemCode4) == 0x000078, "Member 'FMasterDataNotificationItem::ItemCode4' has a wrong offset!");
static_assert(offsetof(FMasterDataNotificationItem, Quantity4) == 0x00007C, "Member 'FMasterDataNotificationItem::Quantity4' has a wrong offset!");
static_assert(offsetof(FMasterDataNotificationItem, Category5) == 0x000080, "Member 'FMasterDataNotificationItem::Category5' has a wrong offset!");
static_assert(offsetof(FMasterDataNotificationItem, ItemCode5) == 0x000090, "Member 'FMasterDataNotificationItem::ItemCode5' has a wrong offset!");
static_assert(offsetof(FMasterDataNotificationItem, Quantity5) == 0x000094, "Member 'FMasterDataNotificationItem::Quantity5' has a wrong offset!");
static_assert(offsetof(FMasterDataNotificationItem, Category6) == 0x000098, "Member 'FMasterDataNotificationItem::Category6' has a wrong offset!");
static_assert(offsetof(FMasterDataNotificationItem, ItemCode6) == 0x0000A8, "Member 'FMasterDataNotificationItem::ItemCode6' has a wrong offset!");
static_assert(offsetof(FMasterDataNotificationItem, Quantity6) == 0x0000AC, "Member 'FMasterDataNotificationItem::Quantity6' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataObtainFrom
// 0x0048 (0x0048 - 0x0000)
struct FMasterDataObtainFrom final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 OpenLevel;                                         // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnLevel;                                       // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataObtainFrom) == 0x000008, "Wrong alignment on FMasterDataObtainFrom");
static_assert(sizeof(FMasterDataObtainFrom) == 0x000048, "Wrong size on FMasterDataObtainFrom");
static_assert(offsetof(FMasterDataObtainFrom, Code) == 0x000008, "Member 'FMasterDataObtainFrom::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataObtainFrom, DisplayName) == 0x000010, "Member 'FMasterDataObtainFrom::DisplayName' has a wrong offset!");
static_assert(offsetof(FMasterDataObtainFrom, OpenLevel) == 0x000028, "Member 'FMasterDataObtainFrom::OpenLevel' has a wrong offset!");
static_assert(offsetof(FMasterDataObtainFrom, ReturnLevel) == 0x000038, "Member 'FMasterDataObtainFrom::ReturnLevel' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataPenaltyPoint
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataPenaltyPoint final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdPenaltyType                                Type;                                              // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Point;                                             // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClientUse;                                         // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataPenaltyPoint) == 0x000008, "Wrong alignment on FMasterDataPenaltyPoint");
static_assert(sizeof(FMasterDataPenaltyPoint) == 0x000028, "Wrong size on FMasterDataPenaltyPoint");
static_assert(offsetof(FMasterDataPenaltyPoint, Code) == 0x000008, "Member 'FMasterDataPenaltyPoint::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataPenaltyPoint, Type) == 0x00000C, "Member 'FMasterDataPenaltyPoint::Type' has a wrong offset!");
static_assert(offsetof(FMasterDataPenaltyPoint, Name) == 0x000010, "Member 'FMasterDataPenaltyPoint::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataPenaltyPoint, Point) == 0x000020, "Member 'FMasterDataPenaltyPoint::Point' has a wrong offset!");
static_assert(offsetof(FMasterDataPenaltyPoint, ClientUse) == 0x000024, "Member 'FMasterDataPenaltyPoint::ClientUse' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataPlayerExp
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FMasterDataPlayerExp final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exp;                                               // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataPlayerExp) == 0x000008, "Wrong alignment on FMasterDataPlayerExp");
static_assert(sizeof(FMasterDataPlayerExp) == 0x000010, "Wrong size on FMasterDataPlayerExp");
static_assert(offsetof(FMasterDataPlayerExp, Code) == 0x000008, "Member 'FMasterDataPlayerExp::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayerExp, Exp) == 0x00000C, "Member 'FMasterDataPlayerExp::Exp' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataPlayMenuMenulist
// 0x0048 (0x0048 - 0x0000)
struct FMasterDataPlayMenuMenulist final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdPlayMenuHamburgerMenuList                  MenuListType;                                      // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TextString;                                        // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         DisplayOrder;                                      // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Emphasize;                                         // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DomesticCs;                                        // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForeignCs;                                         // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DomesticPc;                                        // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForeignPc;                                         // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BetaTest;                                          // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseFadeOut;                                        // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataPlayMenuMenulist) == 0x000008, "Wrong alignment on FMasterDataPlayMenuMenulist");
static_assert(sizeof(FMasterDataPlayMenuMenulist) == 0x000048, "Wrong size on FMasterDataPlayMenuMenulist");
static_assert(offsetof(FMasterDataPlayMenuMenulist, Code) == 0x000008, "Member 'FMasterDataPlayMenuMenulist::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMenuMenulist, MenuListType) == 0x00000C, "Member 'FMasterDataPlayMenuMenulist::MenuListType' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMenuMenulist, TextString) == 0x000010, "Member 'FMasterDataPlayMenuMenulist::TextString' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMenuMenulist, DisplayOrder) == 0x000028, "Member 'FMasterDataPlayMenuMenulist::DisplayOrder' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMenuMenulist, Emphasize) == 0x00002C, "Member 'FMasterDataPlayMenuMenulist::Emphasize' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMenuMenulist, DomesticCs) == 0x000030, "Member 'FMasterDataPlayMenuMenulist::DomesticCs' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMenuMenulist, ForeignCs) == 0x000034, "Member 'FMasterDataPlayMenuMenulist::ForeignCs' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMenuMenulist, DomesticPc) == 0x000038, "Member 'FMasterDataPlayMenuMenulist::DomesticPc' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMenuMenulist, ForeignPc) == 0x00003C, "Member 'FMasterDataPlayMenuMenulist::ForeignPc' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMenuMenulist, BetaTest) == 0x000040, "Member 'FMasterDataPlayMenuMenulist::BetaTest' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMenuMenulist, UseFadeOut) == 0x000044, "Member 'FMasterDataPlayMenuMenulist::UseFadeOut' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataPlayMode
// 0x0080 (0x0080 - 0x0000)
struct FMasterDataPlayMode
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayModeModeCategory                         ModeCategory;                                      // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GameMode;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadCount;                                        // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadMemberCount;                                  // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageCode;                                         // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayOrder;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              TimeAvailableAt;                                   // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              TimeExpireAt;                                      // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              AvailableAt;                                       // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpireAt;                                          // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerExpMagnification;                            // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GuildExpMagnification;                             // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RpMagnification;                                   // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GoldMagnification;                                 // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SeasonPassExpMagnification;                        // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EventPointMagnification;                           // 0x005C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemDropFlag;                                      // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventDropFlag;                                     // 0x0064(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CpuFlag;                                           // 0x0068(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrainingFlag;                                      // 0x006C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FillWithBots;                                      // 0x0070(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ValidTime;                                         // 0x0074(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RotationGroup;                                     // 0x0078(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataPlayMode) == 0x000008, "Wrong alignment on FMasterDataPlayMode");
static_assert(sizeof(FMasterDataPlayMode) == 0x000080, "Wrong size on FMasterDataPlayMode");
static_assert(offsetof(FMasterDataPlayMode, Code) == 0x000008, "Member 'FMasterDataPlayMode::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMode, ModeCategory) == 0x00000C, "Member 'FMasterDataPlayMode::ModeCategory' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMode, GameMode) == 0x000010, "Member 'FMasterDataPlayMode::GameMode' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMode, SquadCount) == 0x000014, "Member 'FMasterDataPlayMode::SquadCount' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMode, SquadMemberCount) == 0x000018, "Member 'FMasterDataPlayMode::SquadMemberCount' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMode, StageCode) == 0x00001C, "Member 'FMasterDataPlayMode::StageCode' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMode, DisplayOrder) == 0x000020, "Member 'FMasterDataPlayMode::DisplayOrder' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMode, TimeAvailableAt) == 0x000028, "Member 'FMasterDataPlayMode::TimeAvailableAt' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMode, TimeExpireAt) == 0x000030, "Member 'FMasterDataPlayMode::TimeExpireAt' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMode, AvailableAt) == 0x000038, "Member 'FMasterDataPlayMode::AvailableAt' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMode, ExpireAt) == 0x000040, "Member 'FMasterDataPlayMode::ExpireAt' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMode, PlayerExpMagnification) == 0x000048, "Member 'FMasterDataPlayMode::PlayerExpMagnification' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMode, GuildExpMagnification) == 0x00004C, "Member 'FMasterDataPlayMode::GuildExpMagnification' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMode, RpMagnification) == 0x000050, "Member 'FMasterDataPlayMode::RpMagnification' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMode, GoldMagnification) == 0x000054, "Member 'FMasterDataPlayMode::GoldMagnification' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMode, SeasonPassExpMagnification) == 0x000058, "Member 'FMasterDataPlayMode::SeasonPassExpMagnification' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMode, EventPointMagnification) == 0x00005C, "Member 'FMasterDataPlayMode::EventPointMagnification' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMode, ItemDropFlag) == 0x000060, "Member 'FMasterDataPlayMode::ItemDropFlag' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMode, EventDropFlag) == 0x000064, "Member 'FMasterDataPlayMode::EventDropFlag' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMode, CpuFlag) == 0x000068, "Member 'FMasterDataPlayMode::CpuFlag' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMode, TrainingFlag) == 0x00006C, "Member 'FMasterDataPlayMode::TrainingFlag' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMode, FillWithBots) == 0x000070, "Member 'FMasterDataPlayMode::FillWithBots' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMode, ValidTime) == 0x000074, "Member 'FMasterDataPlayMode::ValidTime' has a wrong offset!");
static_assert(offsetof(FMasterDataPlayMode, RotationGroup) == 0x000078, "Member 'FMasterDataPlayMode::RotationGroup' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataPurchaseIcon
// 0x0048 (0x0048 - 0x0000)
struct FMasterDataPurchaseIcon final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CatalogId;                                         // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssetName;                                         // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShopItem;                                          // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LegacyProductId;                                   // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataPurchaseIcon) == 0x000008, "Wrong alignment on FMasterDataPurchaseIcon");
static_assert(sizeof(FMasterDataPurchaseIcon) == 0x000048, "Wrong size on FMasterDataPurchaseIcon");
static_assert(offsetof(FMasterDataPurchaseIcon, Code) == 0x000008, "Member 'FMasterDataPurchaseIcon::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataPurchaseIcon, CatalogId) == 0x000010, "Member 'FMasterDataPurchaseIcon::CatalogId' has a wrong offset!");
static_assert(offsetof(FMasterDataPurchaseIcon, AssetName) == 0x000020, "Member 'FMasterDataPurchaseIcon::AssetName' has a wrong offset!");
static_assert(offsetof(FMasterDataPurchaseIcon, ShopItem) == 0x000030, "Member 'FMasterDataPurchaseIcon::ShopItem' has a wrong offset!");
static_assert(offsetof(FMasterDataPurchaseIcon, LegacyProductId) == 0x000038, "Member 'FMasterDataPurchaseIcon::LegacyProductId' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataRankExp
// 0x0038 (0x0038 - 0x0000)
struct FMasterDataRankExp final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         Exp;                                               // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERankExpRankCategory                          RankCategory;                                      // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EliteCorrectivePercent;                            // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankDownThreshold;                                 // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataRankExp) == 0x000008, "Wrong alignment on FMasterDataRankExp");
static_assert(sizeof(FMasterDataRankExp) == 0x000038, "Wrong size on FMasterDataRankExp");
static_assert(offsetof(FMasterDataRankExp, Code) == 0x000008, "Member 'FMasterDataRankExp::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataRankExp, Name) == 0x000010, "Member 'FMasterDataRankExp::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataRankExp, Exp) == 0x000028, "Member 'FMasterDataRankExp::Exp' has a wrong offset!");
static_assert(offsetof(FMasterDataRankExp, RankCategory) == 0x00002C, "Member 'FMasterDataRankExp::RankCategory' has a wrong offset!");
static_assert(offsetof(FMasterDataRankExp, EliteCorrectivePercent) == 0x000030, "Member 'FMasterDataRankExp::EliteCorrectivePercent' has a wrong offset!");
static_assert(offsetof(FMasterDataRankExp, RankDownThreshold) == 0x000034, "Member 'FMasterDataRankExp::RankDownThreshold' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataRankingBorder
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataRankingBorder final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupCode;                                         // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Border;                                            // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataRankingBorder) == 0x000008, "Wrong alignment on FMasterDataRankingBorder");
static_assert(sizeof(FMasterDataRankingBorder) == 0x000028, "Wrong size on FMasterDataRankingBorder");
static_assert(offsetof(FMasterDataRankingBorder, Code) == 0x000008, "Member 'FMasterDataRankingBorder::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataRankingBorder, Name) == 0x000010, "Member 'FMasterDataRankingBorder::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataRankingBorder, GroupCode) == 0x000020, "Member 'FMasterDataRankingBorder::GroupCode' has a wrong offset!");
static_assert(offsetof(FMasterDataRankingBorder, Border) == 0x000024, "Member 'FMasterDataRankingBorder::Border' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataRankingReward
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FMasterDataRankingReward final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankingCode;                                       // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankingBorderCode;                                 // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reward1Code;                                       // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reward2Code;                                       // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reward3Code;                                       // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reward4Code;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Reward5Code;                                       // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataRankingReward) == 0x000008, "Wrong alignment on FMasterDataRankingReward");
static_assert(sizeof(FMasterDataRankingReward) == 0x000028, "Wrong size on FMasterDataRankingReward");
static_assert(offsetof(FMasterDataRankingReward, Code) == 0x000008, "Member 'FMasterDataRankingReward::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataRankingReward, RankingCode) == 0x00000C, "Member 'FMasterDataRankingReward::RankingCode' has a wrong offset!");
static_assert(offsetof(FMasterDataRankingReward, RankingBorderCode) == 0x000010, "Member 'FMasterDataRankingReward::RankingBorderCode' has a wrong offset!");
static_assert(offsetof(FMasterDataRankingReward, Reward1Code) == 0x000014, "Member 'FMasterDataRankingReward::Reward1Code' has a wrong offset!");
static_assert(offsetof(FMasterDataRankingReward, Reward2Code) == 0x000018, "Member 'FMasterDataRankingReward::Reward2Code' has a wrong offset!");
static_assert(offsetof(FMasterDataRankingReward, Reward3Code) == 0x00001C, "Member 'FMasterDataRankingReward::Reward3Code' has a wrong offset!");
static_assert(offsetof(FMasterDataRankingReward, Reward4Code) == 0x000020, "Member 'FMasterDataRankingReward::Reward4Code' has a wrong offset!");
static_assert(offsetof(FMasterDataRankingReward, Reward5Code) == 0x000024, "Member 'FMasterDataRankingReward::Reward5Code' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataRankPoint
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FMasterDataRankPoint final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Name;                                              // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdRankTargetType                             TargetType;                                        // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RankPoint;                                         // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdCalcType                                   CalcType;                                          // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SubValue;                                          // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankCode;                                          // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankingPointTypeGroup;                             // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UniquePointTypeGroup;                              // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpperLimit;                                        // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Valid;                                             // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ViewCalcValue;                                     // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayOrder;                                      // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataRankPoint) == 0x000008, "Wrong alignment on FMasterDataRankPoint");
static_assert(sizeof(FMasterDataRankPoint) == 0x000040, "Wrong size on FMasterDataRankPoint");
static_assert(offsetof(FMasterDataRankPoint, Code) == 0x000008, "Member 'FMasterDataRankPoint::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataRankPoint, Name) == 0x00000C, "Member 'FMasterDataRankPoint::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataRankPoint, TargetType) == 0x000010, "Member 'FMasterDataRankPoint::TargetType' has a wrong offset!");
static_assert(offsetof(FMasterDataRankPoint, RankPoint) == 0x000014, "Member 'FMasterDataRankPoint::RankPoint' has a wrong offset!");
static_assert(offsetof(FMasterDataRankPoint, CalcType) == 0x000018, "Member 'FMasterDataRankPoint::CalcType' has a wrong offset!");
static_assert(offsetof(FMasterDataRankPoint, SubValue) == 0x00001C, "Member 'FMasterDataRankPoint::SubValue' has a wrong offset!");
static_assert(offsetof(FMasterDataRankPoint, RankCode) == 0x000020, "Member 'FMasterDataRankPoint::RankCode' has a wrong offset!");
static_assert(offsetof(FMasterDataRankPoint, RankingPointTypeGroup) == 0x000024, "Member 'FMasterDataRankPoint::RankingPointTypeGroup' has a wrong offset!");
static_assert(offsetof(FMasterDataRankPoint, UniquePointTypeGroup) == 0x000028, "Member 'FMasterDataRankPoint::UniquePointTypeGroup' has a wrong offset!");
static_assert(offsetof(FMasterDataRankPoint, UpperLimit) == 0x00002C, "Member 'FMasterDataRankPoint::UpperLimit' has a wrong offset!");
static_assert(offsetof(FMasterDataRankPoint, Valid) == 0x000030, "Member 'FMasterDataRankPoint::Valid' has a wrong offset!");
static_assert(offsetof(FMasterDataRankPoint, ViewCalcValue) == 0x000034, "Member 'FMasterDataRankPoint::ViewCalcValue' has a wrong offset!");
static_assert(offsetof(FMasterDataRankPoint, DisplayOrder) == 0x000038, "Member 'FMasterDataRankPoint::DisplayOrder' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataRankPointName
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataRankPointName final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataRankPointName) == 0x000008, "Wrong alignment on FMasterDataRankPointName");
static_assert(sizeof(FMasterDataRankPointName) == 0x000028, "Wrong size on FMasterDataRankPointName");
static_assert(offsetof(FMasterDataRankPointName, Code) == 0x000008, "Member 'FMasterDataRankPointName::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataRankPointName, DisplayName) == 0x000010, "Member 'FMasterDataRankPointName::DisplayName' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataRankRankingPoint
// 0x0030 (0x0030 - 0x0000)
struct FMasterDataRankRankingPoint final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ranking;                                           // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankPoint;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Note;                                              // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupCode;                                         // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataRankRankingPoint) == 0x000008, "Wrong alignment on FMasterDataRankRankingPoint");
static_assert(sizeof(FMasterDataRankRankingPoint) == 0x000030, "Wrong size on FMasterDataRankRankingPoint");
static_assert(offsetof(FMasterDataRankRankingPoint, Code) == 0x000008, "Member 'FMasterDataRankRankingPoint::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataRankRankingPoint, Ranking) == 0x00000C, "Member 'FMasterDataRankRankingPoint::Ranking' has a wrong offset!");
static_assert(offsetof(FMasterDataRankRankingPoint, RankPoint) == 0x000010, "Member 'FMasterDataRankRankingPoint::RankPoint' has a wrong offset!");
static_assert(offsetof(FMasterDataRankRankingPoint, Note) == 0x000018, "Member 'FMasterDataRankRankingPoint::Note' has a wrong offset!");
static_assert(offsetof(FMasterDataRankRankingPoint, GroupCode) == 0x000028, "Member 'FMasterDataRankRankingPoint::GroupCode' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataRankUniquePoint
// 0x0040 (0x0040 - 0x0000)
struct FMasterDataRankUniquePoint final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Memo;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdScoreTargetType                            TargetType;                                        // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Point;                                             // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Note;                                              // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupCode;                                         // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataRankUniquePoint) == 0x000008, "Wrong alignment on FMasterDataRankUniquePoint");
static_assert(sizeof(FMasterDataRankUniquePoint) == 0x000040, "Wrong size on FMasterDataRankUniquePoint");
static_assert(offsetof(FMasterDataRankUniquePoint, Code) == 0x000008, "Member 'FMasterDataRankUniquePoint::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataRankUniquePoint, Memo) == 0x000010, "Member 'FMasterDataRankUniquePoint::Memo' has a wrong offset!");
static_assert(offsetof(FMasterDataRankUniquePoint, TargetType) == 0x000020, "Member 'FMasterDataRankUniquePoint::TargetType' has a wrong offset!");
static_assert(offsetof(FMasterDataRankUniquePoint, Point) == 0x000024, "Member 'FMasterDataRankUniquePoint::Point' has a wrong offset!");
static_assert(offsetof(FMasterDataRankUniquePoint, Note) == 0x000028, "Member 'FMasterDataRankUniquePoint::Note' has a wrong offset!");
static_assert(offsetof(FMasterDataRankUniquePoint, GroupCode) == 0x000038, "Member 'FMasterDataRankUniquePoint::GroupCode' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataRecommendNotice
// 0x0038 (0x0038 - 0x0000)
struct FMasterDataRecommendNotice
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERecommendNoticeApplyAction                   ApplyAction;                                       // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StartNum;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndNum;                                            // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalNum;                                          // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContinuityNum;                                     // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataRecommendNotice) == 0x000008, "Wrong alignment on FMasterDataRecommendNotice");
static_assert(sizeof(FMasterDataRecommendNotice) == 0x000038, "Wrong size on FMasterDataRecommendNotice");
static_assert(offsetof(FMasterDataRecommendNotice, Code) == 0x000008, "Member 'FMasterDataRecommendNotice::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataRecommendNotice, ApplyAction) == 0x00000C, "Member 'FMasterDataRecommendNotice::ApplyAction' has a wrong offset!");
static_assert(offsetof(FMasterDataRecommendNotice, StartNum) == 0x000010, "Member 'FMasterDataRecommendNotice::StartNum' has a wrong offset!");
static_assert(offsetof(FMasterDataRecommendNotice, EndNum) == 0x000014, "Member 'FMasterDataRecommendNotice::EndNum' has a wrong offset!");
static_assert(offsetof(FMasterDataRecommendNotice, TotalNum) == 0x000018, "Member 'FMasterDataRecommendNotice::TotalNum' has a wrong offset!");
static_assert(offsetof(FMasterDataRecommendNotice, ContinuityNum) == 0x00001C, "Member 'FMasterDataRecommendNotice::ContinuityNum' has a wrong offset!");
static_assert(offsetof(FMasterDataRecommendNotice, Text) == 0x000020, "Member 'FMasterDataRecommendNotice::Text' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataRoleBuffAdjust
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataRoleBuffAdjust final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Note;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupCode;                                         // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataRoleBuffAdjust) == 0x000008, "Wrong alignment on FMasterDataRoleBuffAdjust");
static_assert(sizeof(FMasterDataRoleBuffAdjust) == 0x000028, "Wrong size on FMasterDataRoleBuffAdjust");
static_assert(offsetof(FMasterDataRoleBuffAdjust, Code) == 0x000008, "Member 'FMasterDataRoleBuffAdjust::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataRoleBuffAdjust, Note) == 0x000010, "Member 'FMasterDataRoleBuffAdjust::Note' has a wrong offset!");
static_assert(offsetof(FMasterDataRoleBuffAdjust, GroupCode) == 0x000020, "Member 'FMasterDataRoleBuffAdjust::GroupCode' has a wrong offset!");
static_assert(offsetof(FMasterDataRoleBuffAdjust, Value) == 0x000024, "Member 'FMasterDataRoleBuffAdjust::Value' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataScore
// 0x0060 (0x0060 - 0x0000)
struct FMasterDataScore final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Details;                                           // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EMdScoreCategory                              Category;                                          // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdScoreType                                  Type;                                              // 0x0039(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdScoreTargetType                            TargetType;                                        // 0x003A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x1];                                       // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Score;                                             // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Magnification;                                     // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Threshold;                                         // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpperLimit;                                        // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupCode;                                         // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Note;                                              // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataScore) == 0x000008, "Wrong alignment on FMasterDataScore");
static_assert(sizeof(FMasterDataScore) == 0x000060, "Wrong size on FMasterDataScore");
static_assert(offsetof(FMasterDataScore, Code) == 0x000008, "Member 'FMasterDataScore::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataScore, Name) == 0x000010, "Member 'FMasterDataScore::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataScore, Details) == 0x000020, "Member 'FMasterDataScore::Details' has a wrong offset!");
static_assert(offsetof(FMasterDataScore, Category) == 0x000038, "Member 'FMasterDataScore::Category' has a wrong offset!");
static_assert(offsetof(FMasterDataScore, Type) == 0x000039, "Member 'FMasterDataScore::Type' has a wrong offset!");
static_assert(offsetof(FMasterDataScore, TargetType) == 0x00003A, "Member 'FMasterDataScore::TargetType' has a wrong offset!");
static_assert(offsetof(FMasterDataScore, Score) == 0x00003C, "Member 'FMasterDataScore::Score' has a wrong offset!");
static_assert(offsetof(FMasterDataScore, Magnification) == 0x000040, "Member 'FMasterDataScore::Magnification' has a wrong offset!");
static_assert(offsetof(FMasterDataScore, Threshold) == 0x000044, "Member 'FMasterDataScore::Threshold' has a wrong offset!");
static_assert(offsetof(FMasterDataScore, UpperLimit) == 0x000048, "Member 'FMasterDataScore::UpperLimit' has a wrong offset!");
static_assert(offsetof(FMasterDataScore, GroupCode) == 0x00004C, "Member 'FMasterDataScore::GroupCode' has a wrong offset!");
static_assert(offsetof(FMasterDataScore, Note) == 0x000050, "Member 'FMasterDataScore::Note' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataScoreRank
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FMasterDataScoreRank final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMdScoreRank                                  Rank;                                              // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Threshold;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataScoreRank) == 0x000008, "Wrong alignment on FMasterDataScoreRank");
static_assert(sizeof(FMasterDataScoreRank) == 0x000018, "Wrong size on FMasterDataScoreRank");
static_assert(offsetof(FMasterDataScoreRank, Code) == 0x000008, "Member 'FMasterDataScoreRank::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataScoreRank, Rank) == 0x00000C, "Member 'FMasterDataScoreRank::Rank' has a wrong offset!");
static_assert(offsetof(FMasterDataScoreRank, Threshold) == 0x000010, "Member 'FMasterDataScoreRank::Threshold' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataScreen
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FMasterDataScreen final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScreenName                                   Name;                                              // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ScreenId;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataScreen) == 0x000008, "Wrong alignment on FMasterDataScreen");
static_assert(sizeof(FMasterDataScreen) == 0x000018, "Wrong size on FMasterDataScreen");
static_assert(offsetof(FMasterDataScreen, Code) == 0x000008, "Member 'FMasterDataScreen::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataScreen, Name) == 0x00000C, "Member 'FMasterDataScreen::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataScreen, ScreenId) == 0x000010, "Member 'FMasterDataScreen::ScreenId' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataSeason
// 0x0040 (0x0040 - 0x0000)
struct FMasterDataSeason
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         SeasonPassGroup;                                   // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              AvailableAt;                                       // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpireAt;                                          // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataSeason) == 0x000008, "Wrong alignment on FMasterDataSeason");
static_assert(sizeof(FMasterDataSeason) == 0x000040, "Wrong size on FMasterDataSeason");
static_assert(offsetof(FMasterDataSeason, Code) == 0x000008, "Member 'FMasterDataSeason::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataSeason, Name) == 0x000010, "Member 'FMasterDataSeason::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataSeason, SeasonPassGroup) == 0x000028, "Member 'FMasterDataSeason::SeasonPassGroup' has a wrong offset!");
static_assert(offsetof(FMasterDataSeason, AvailableAt) == 0x000030, "Member 'FMasterDataSeason::AvailableAt' has a wrong offset!");
static_assert(offsetof(FMasterDataSeason, ExpireAt) == 0x000038, "Member 'FMasterDataSeason::ExpireAt' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataSeasonPass
// 0x0048 (0x0048 - 0x0000)
struct FMasterDataSeasonPass final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssetName;                                         // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESeasonPassCategory                           Category;                                          // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ObtainFrom;                                        // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataSeasonPass) == 0x000008, "Wrong alignment on FMasterDataSeasonPass");
static_assert(sizeof(FMasterDataSeasonPass) == 0x000048, "Wrong size on FMasterDataSeasonPass");
static_assert(offsetof(FMasterDataSeasonPass, Code) == 0x000008, "Member 'FMasterDataSeasonPass::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataSeasonPass, Name) == 0x000010, "Member 'FMasterDataSeasonPass::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataSeasonPass, Description) == 0x000020, "Member 'FMasterDataSeasonPass::Description' has a wrong offset!");
static_assert(offsetof(FMasterDataSeasonPass, AssetName) == 0x000030, "Member 'FMasterDataSeasonPass::AssetName' has a wrong offset!");
static_assert(offsetof(FMasterDataSeasonPass, Category) == 0x000040, "Member 'FMasterDataSeasonPass::Category' has a wrong offset!");
static_assert(offsetof(FMasterDataSeasonPass, ObtainFrom) == 0x000044, "Member 'FMasterDataSeasonPass::ObtainFrom' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataShop
// 0x0030 (0x0030 - 0x0000)
struct FMasterDataShop
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShopCategory                                 Category;                                          // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShopItemGroupCode;                                 // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Currency1;                                         // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Currency2;                                         // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Currency3;                                         // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataShop) == 0x000008, "Wrong alignment on FMasterDataShop");
static_assert(sizeof(FMasterDataShop) == 0x000030, "Wrong size on FMasterDataShop");
static_assert(offsetof(FMasterDataShop, Code) == 0x000008, "Member 'FMasterDataShop::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataShop, Category) == 0x00000C, "Member 'FMasterDataShop::Category' has a wrong offset!");
static_assert(offsetof(FMasterDataShop, Name) == 0x000010, "Member 'FMasterDataShop::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataShop, ShopItemGroupCode) == 0x000020, "Member 'FMasterDataShop::ShopItemGroupCode' has a wrong offset!");
static_assert(offsetof(FMasterDataShop, Currency1) == 0x000024, "Member 'FMasterDataShop::Currency1' has a wrong offset!");
static_assert(offsetof(FMasterDataShop, Currency2) == 0x000028, "Member 'FMasterDataShop::Currency2' has a wrong offset!");
static_assert(offsetof(FMasterDataShop, Currency3) == 0x00002C, "Member 'FMasterDataShop::Currency3' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataShopItem
// 0x00A8 (0x00A8 - 0x0000)
struct FMasterDataShopItem
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Category;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Product;                                           // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxStock;                                          // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              AvailableAt;                                       // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpireAt;                                          // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Currency;                                          // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Currency2;                                         // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price2;                                            // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Currency3;                                         // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price3;                                            // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupCode;                                         // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Note;                                              // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NoteProduct;                                       // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RegularShopItemCode;                               // 0x0080(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForceDiscount;                                     // 0x0084(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssetName;                                         // 0x0088(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShopItemDisplaySize                          DisplaySize;                                       // 0x0098(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DisplayOrder;                                      // 0x009C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Event;                                             // 0x00A0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShopItemBuyScreen                            BuyScreen;                                         // 0x00A4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShopItemStockReplacement                     StockReplacement;                                  // 0x00A5(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A6[0x2];                                       // 0x00A6(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataShopItem) == 0x000008, "Wrong alignment on FMasterDataShopItem");
static_assert(sizeof(FMasterDataShopItem) == 0x0000A8, "Wrong size on FMasterDataShopItem");
static_assert(offsetof(FMasterDataShopItem, Code) == 0x000008, "Member 'FMasterDataShopItem::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataShopItem, Category) == 0x000010, "Member 'FMasterDataShopItem::Category' has a wrong offset!");
static_assert(offsetof(FMasterDataShopItem, Product) == 0x000020, "Member 'FMasterDataShopItem::Product' has a wrong offset!");
static_assert(offsetof(FMasterDataShopItem, Quantity) == 0x000024, "Member 'FMasterDataShopItem::Quantity' has a wrong offset!");
static_assert(offsetof(FMasterDataShopItem, MaxStock) == 0x000028, "Member 'FMasterDataShopItem::MaxStock' has a wrong offset!");
static_assert(offsetof(FMasterDataShopItem, AvailableAt) == 0x000030, "Member 'FMasterDataShopItem::AvailableAt' has a wrong offset!");
static_assert(offsetof(FMasterDataShopItem, ExpireAt) == 0x000038, "Member 'FMasterDataShopItem::ExpireAt' has a wrong offset!");
static_assert(offsetof(FMasterDataShopItem, Currency) == 0x000040, "Member 'FMasterDataShopItem::Currency' has a wrong offset!");
static_assert(offsetof(FMasterDataShopItem, Price) == 0x000044, "Member 'FMasterDataShopItem::Price' has a wrong offset!");
static_assert(offsetof(FMasterDataShopItem, Currency2) == 0x000048, "Member 'FMasterDataShopItem::Currency2' has a wrong offset!");
static_assert(offsetof(FMasterDataShopItem, Price2) == 0x00004C, "Member 'FMasterDataShopItem::Price2' has a wrong offset!");
static_assert(offsetof(FMasterDataShopItem, Currency3) == 0x000050, "Member 'FMasterDataShopItem::Currency3' has a wrong offset!");
static_assert(offsetof(FMasterDataShopItem, Price3) == 0x000054, "Member 'FMasterDataShopItem::Price3' has a wrong offset!");
static_assert(offsetof(FMasterDataShopItem, GroupCode) == 0x000058, "Member 'FMasterDataShopItem::GroupCode' has a wrong offset!");
static_assert(offsetof(FMasterDataShopItem, Note) == 0x000060, "Member 'FMasterDataShopItem::Note' has a wrong offset!");
static_assert(offsetof(FMasterDataShopItem, NoteProduct) == 0x000070, "Member 'FMasterDataShopItem::NoteProduct' has a wrong offset!");
static_assert(offsetof(FMasterDataShopItem, RegularShopItemCode) == 0x000080, "Member 'FMasterDataShopItem::RegularShopItemCode' has a wrong offset!");
static_assert(offsetof(FMasterDataShopItem, ForceDiscount) == 0x000084, "Member 'FMasterDataShopItem::ForceDiscount' has a wrong offset!");
static_assert(offsetof(FMasterDataShopItem, AssetName) == 0x000088, "Member 'FMasterDataShopItem::AssetName' has a wrong offset!");
static_assert(offsetof(FMasterDataShopItem, DisplaySize) == 0x000098, "Member 'FMasterDataShopItem::DisplaySize' has a wrong offset!");
static_assert(offsetof(FMasterDataShopItem, DisplayOrder) == 0x00009C, "Member 'FMasterDataShopItem::DisplayOrder' has a wrong offset!");
static_assert(offsetof(FMasterDataShopItem, Event) == 0x0000A0, "Member 'FMasterDataShopItem::Event' has a wrong offset!");
static_assert(offsetof(FMasterDataShopItem, BuyScreen) == 0x0000A4, "Member 'FMasterDataShopItem::BuyScreen' has a wrong offset!");
static_assert(offsetof(FMasterDataShopItem, StockReplacement) == 0x0000A5, "Member 'FMasterDataShopItem::StockReplacement' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataShopPickup
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FMasterDataShopPickup final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShopItemCode;                                      // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataShopPickup) == 0x000008, "Wrong alignment on FMasterDataShopPickup");
static_assert(sizeof(FMasterDataShopPickup) == 0x000010, "Wrong size on FMasterDataShopPickup");
static_assert(offsetof(FMasterDataShopPickup, Code) == 0x000008, "Member 'FMasterDataShopPickup::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataShopPickup, ShopItemCode) == 0x00000C, "Member 'FMasterDataShopPickup::ShopItemCode' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataSkill
// 0x0050 (0x0050 - 0x0000)
struct FMasterDataSkill final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         LevelGroup;                                        // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Description;                                       // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         SkillDerived;                                      // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataSkill) == 0x000008, "Wrong alignment on FMasterDataSkill");
static_assert(sizeof(FMasterDataSkill) == 0x000050, "Wrong size on FMasterDataSkill");
static_assert(offsetof(FMasterDataSkill, Code) == 0x000008, "Member 'FMasterDataSkill::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataSkill, Name) == 0x000010, "Member 'FMasterDataSkill::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataSkill, LevelGroup) == 0x000028, "Member 'FMasterDataSkill::LevelGroup' has a wrong offset!");
static_assert(offsetof(FMasterDataSkill, Description) == 0x000030, "Member 'FMasterDataSkill::Description' has a wrong offset!");
static_assert(offsetof(FMasterDataSkill, SkillDerived) == 0x000048, "Member 'FMasterDataSkill::SkillDerived' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataSkillDerived
// 0x0040 (0x0040 - 0x0000)
struct FMasterDataSkillDerived final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         LevelGroup;                                        // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillDerivedType;                                  // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataSkillDerived) == 0x000008, "Wrong alignment on FMasterDataSkillDerived");
static_assert(sizeof(FMasterDataSkillDerived) == 0x000040, "Wrong size on FMasterDataSkillDerived");
static_assert(offsetof(FMasterDataSkillDerived, Code) == 0x000008, "Member 'FMasterDataSkillDerived::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataSkillDerived, Name) == 0x000010, "Member 'FMasterDataSkillDerived::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataSkillDerived, Description) == 0x000020, "Member 'FMasterDataSkillDerived::Description' has a wrong offset!");
static_assert(offsetof(FMasterDataSkillDerived, LevelGroup) == 0x000038, "Member 'FMasterDataSkillDerived::LevelGroup' has a wrong offset!");
static_assert(offsetof(FMasterDataSkillDerived, SkillDerivedType) == 0x00003C, "Member 'FMasterDataSkillDerived::SkillDerivedType' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataSkillDerivedType
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataSkillDerivedType final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataSkillDerivedType) == 0x000008, "Wrong alignment on FMasterDataSkillDerivedType");
static_assert(sizeof(FMasterDataSkillDerivedType) == 0x000028, "Wrong size on FMasterDataSkillDerivedType");
static_assert(offsetof(FMasterDataSkillDerivedType, Code) == 0x000008, "Member 'FMasterDataSkillDerivedType::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataSkillDerivedType, Name) == 0x000010, "Member 'FMasterDataSkillDerivedType::Name' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataSkillLevel
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataSkillLevel final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupCode;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Description;                                       // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Note;                                              // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataSkillLevel) == 0x000008, "Wrong alignment on FMasterDataSkillLevel");
static_assert(sizeof(FMasterDataSkillLevel) == 0x000028, "Wrong size on FMasterDataSkillLevel");
static_assert(offsetof(FMasterDataSkillLevel, Code) == 0x000008, "Member 'FMasterDataSkillLevel::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataSkillLevel, GroupCode) == 0x00000C, "Member 'FMasterDataSkillLevel::GroupCode' has a wrong offset!");
static_assert(offsetof(FMasterDataSkillLevel, Level) == 0x000010, "Member 'FMasterDataSkillLevel::Level' has a wrong offset!");
static_assert(offsetof(FMasterDataSkillLevel, Description) == 0x000014, "Member 'FMasterDataSkillLevel::Description' has a wrong offset!");
static_assert(offsetof(FMasterDataSkillLevel, Note) == 0x000018, "Member 'FMasterDataSkillLevel::Note' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataSkillLevelText
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataSkillLevelText final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataSkillLevelText) == 0x000008, "Wrong alignment on FMasterDataSkillLevelText");
static_assert(sizeof(FMasterDataSkillLevelText) == 0x000028, "Wrong size on FMasterDataSkillLevelText");
static_assert(offsetof(FMasterDataSkillLevelText, Code) == 0x000008, "Member 'FMasterDataSkillLevelText::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataSkillLevelText, DisplayName) == 0x000010, "Member 'FMasterDataSkillLevelText::DisplayName' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataSkillSet
// 0x0030 (0x0030 - 0x0000)
struct FMasterDataSkillSet final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupCode;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortOrder;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Note;                                              // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillCode;                                         // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KoAssistValid;                                     // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataSkillSet) == 0x000008, "Wrong alignment on FMasterDataSkillSet");
static_assert(sizeof(FMasterDataSkillSet) == 0x000030, "Wrong size on FMasterDataSkillSet");
static_assert(offsetof(FMasterDataSkillSet, Code) == 0x000008, "Member 'FMasterDataSkillSet::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataSkillSet, GroupCode) == 0x00000C, "Member 'FMasterDataSkillSet::GroupCode' has a wrong offset!");
static_assert(offsetof(FMasterDataSkillSet, SortOrder) == 0x000010, "Member 'FMasterDataSkillSet::SortOrder' has a wrong offset!");
static_assert(offsetof(FMasterDataSkillSet, Note) == 0x000018, "Member 'FMasterDataSkillSet::Note' has a wrong offset!");
static_assert(offsetof(FMasterDataSkillSet, SkillCode) == 0x000028, "Member 'FMasterDataSkillSet::SkillCode' has a wrong offset!");
static_assert(offsetof(FMasterDataSkillSet, KoAssistValid) == 0x00002C, "Member 'FMasterDataSkillSet::KoAssistValid' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataSpecialAction
// 0x0040 (0x0040 - 0x0000)
struct FMasterDataSpecialAction final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataSpecialAction) == 0x000008, "Wrong alignment on FMasterDataSpecialAction");
static_assert(sizeof(FMasterDataSpecialAction) == 0x000040, "Wrong size on FMasterDataSpecialAction");
static_assert(offsetof(FMasterDataSpecialAction, Code) == 0x000008, "Member 'FMasterDataSpecialAction::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataSpecialAction, Name) == 0x000010, "Member 'FMasterDataSpecialAction::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataSpecialAction, Description) == 0x000028, "Member 'FMasterDataSpecialAction::Description' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataSupplyParam
// 0x0078 (0x0078 - 0x0000)
struct FMasterDataSupplyParam final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxStackNum;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredTime;                                      // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortPriority;                                      // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BForAllAlly;                                       // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectValue1;                                      // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectValue2;                                      // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectValue3;                                      // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0058(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EMdKpiSupplyType                              KpiType;                                           // 0x0070(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataSupplyParam) == 0x000008, "Wrong alignment on FMasterDataSupplyParam");
static_assert(sizeof(FMasterDataSupplyParam) == 0x000078, "Wrong size on FMasterDataSupplyParam");
static_assert(offsetof(FMasterDataSupplyParam, Code) == 0x000008, "Member 'FMasterDataSupplyParam::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataSupplyParam, Name) == 0x000010, "Member 'FMasterDataSupplyParam::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataSupplyParam, MaxStackNum) == 0x000020, "Member 'FMasterDataSupplyParam::MaxStackNum' has a wrong offset!");
static_assert(offsetof(FMasterDataSupplyParam, RequiredTime) == 0x000024, "Member 'FMasterDataSupplyParam::RequiredTime' has a wrong offset!");
static_assert(offsetof(FMasterDataSupplyParam, SortPriority) == 0x000028, "Member 'FMasterDataSupplyParam::SortPriority' has a wrong offset!");
static_assert(offsetof(FMasterDataSupplyParam, BForAllAlly) == 0x00002C, "Member 'FMasterDataSupplyParam::BForAllAlly' has a wrong offset!");
static_assert(offsetof(FMasterDataSupplyParam, EffectValue1) == 0x000030, "Member 'FMasterDataSupplyParam::EffectValue1' has a wrong offset!");
static_assert(offsetof(FMasterDataSupplyParam, EffectValue2) == 0x000034, "Member 'FMasterDataSupplyParam::EffectValue2' has a wrong offset!");
static_assert(offsetof(FMasterDataSupplyParam, EffectValue3) == 0x000038, "Member 'FMasterDataSupplyParam::EffectValue3' has a wrong offset!");
static_assert(offsetof(FMasterDataSupplyParam, DisplayName) == 0x000040, "Member 'FMasterDataSupplyParam::DisplayName' has a wrong offset!");
static_assert(offsetof(FMasterDataSupplyParam, Description) == 0x000058, "Member 'FMasterDataSupplyParam::Description' has a wrong offset!");
static_assert(offsetof(FMasterDataSupplyParam, KpiType) == 0x000070, "Member 'FMasterDataSupplyParam::KpiType' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataTicket
// 0x0058 (0x0058 - 0x0000)
struct FMasterDataTicket final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 AssetName;                                         // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObtainFrom;                                        // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMasterDataTicket) == 0x000008, "Wrong alignment on FMasterDataTicket");
static_assert(sizeof(FMasterDataTicket) == 0x000058, "Wrong size on FMasterDataTicket");
static_assert(offsetof(FMasterDataTicket, Code) == 0x000008, "Member 'FMasterDataTicket::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataTicket, Name) == 0x000010, "Member 'FMasterDataTicket::Name' has a wrong offset!");
static_assert(offsetof(FMasterDataTicket, Description) == 0x000028, "Member 'FMasterDataTicket::Description' has a wrong offset!");
static_assert(offsetof(FMasterDataTicket, AssetName) == 0x000040, "Member 'FMasterDataTicket::AssetName' has a wrong offset!");
static_assert(offsetof(FMasterDataTicket, ObtainFrom) == 0x000050, "Member 'FMasterDataTicket::ObtainFrom' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataTipsText
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataTipsText final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataTipsText) == 0x000008, "Wrong alignment on FMasterDataTipsText");
static_assert(sizeof(FMasterDataTipsText) == 0x000028, "Wrong size on FMasterDataTipsText");
static_assert(offsetof(FMasterDataTipsText, Code) == 0x000008, "Member 'FMasterDataTipsText::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataTipsText, Text) == 0x000010, "Member 'FMasterDataTipsText::Text' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataVarDescription
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataVarDescription final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataVarDescription) == 0x000008, "Wrong alignment on FMasterDataVarDescription");
static_assert(sizeof(FMasterDataVarDescription) == 0x000028, "Wrong size on FMasterDataVarDescription");
static_assert(offsetof(FMasterDataVarDescription, Code) == 0x000008, "Member 'FMasterDataVarDescription::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataVarDescription, DisplayName) == 0x000010, "Member 'FMasterDataVarDescription::DisplayName' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataVariationName
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataVariationName final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataVariationName) == 0x000008, "Wrong alignment on FMasterDataVariationName");
static_assert(sizeof(FMasterDataVariationName) == 0x000028, "Wrong size on FMasterDataVariationName");
static_assert(offsetof(FMasterDataVariationName, Code) == 0x000008, "Member 'FMasterDataVariationName::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataVariationName, DisplayName) == 0x000010, "Member 'FMasterDataVariationName::DisplayName' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataVoiceDescription
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataVoiceDescription final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataVoiceDescription) == 0x000008, "Wrong alignment on FMasterDataVoiceDescription");
static_assert(sizeof(FMasterDataVoiceDescription) == 0x000028, "Wrong size on FMasterDataVoiceDescription");
static_assert(offsetof(FMasterDataVoiceDescription, Code) == 0x000008, "Member 'FMasterDataVoiceDescription::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataVoiceDescription, DisplayName) == 0x000010, "Member 'FMasterDataVoiceDescription::DisplayName' has a wrong offset!");

// ScriptStruct MasterDataModule.MasterDataVoiceName
// 0x0028 (0x0028 - 0x0000)
struct FMasterDataVoiceName final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Code;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterDataVoiceName) == 0x000008, "Wrong alignment on FMasterDataVoiceName");
static_assert(sizeof(FMasterDataVoiceName) == 0x000028, "Wrong size on FMasterDataVoiceName");
static_assert(offsetof(FMasterDataVoiceName, Code) == 0x000008, "Member 'FMasterDataVoiceName::Code' has a wrong offset!");
static_assert(offsetof(FMasterDataVoiceName, DisplayName) == 0x000010, "Member 'FMasterDataVoiceName::DisplayName' has a wrong offset!");

}

