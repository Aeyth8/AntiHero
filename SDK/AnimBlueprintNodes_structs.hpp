#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimBlueprintNodes

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// Enum AnimBlueprintNodes.EMuscleSourceType
// NumValues: 0x0003
enum class EMuscleSourceType : uint8
{
	Rotation                                 = 0,
	LocationTargetParentSpace                = 1,
	EMuscleSourceType_MAX                    = 2,
};

// ScriptStruct AnimBlueprintNodes.AnimNode_AimOffset2
// 0x0020 (0x0108 - 0x00E8)
struct FAnimNode_AimOffset2 final : public FAnimNode_BlendSpacePlayer
{
public:
	struct FPoseLink                              BasePose;                                          // 0x00E8(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         LODThreshold;                                      // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTimeWhenBlendSpaceChanges;                    // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetPlayTime;                                    // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_AimOffset2) == 0x000008, "Wrong alignment on FAnimNode_AimOffset2");
static_assert(sizeof(FAnimNode_AimOffset2) == 0x000108, "Wrong size on FAnimNode_AimOffset2");
static_assert(offsetof(FAnimNode_AimOffset2, BasePose) == 0x0000E8, "Member 'FAnimNode_AimOffset2::BasePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_AimOffset2, LODThreshold) == 0x0000F8, "Member 'FAnimNode_AimOffset2::LODThreshold' has a wrong offset!");
static_assert(offsetof(FAnimNode_AimOffset2, BlendTimeWhenBlendSpaceChanges) == 0x0000FC, "Member 'FAnimNode_AimOffset2::BlendTimeWhenBlendSpaceChanges' has a wrong offset!");
static_assert(offsetof(FAnimNode_AimOffset2, bResetPlayTime) == 0x000100, "Member 'FAnimNode_AimOffset2::bResetPlayTime' has a wrong offset!");

// ScriptStruct AnimBlueprintNodes.AnimNode_DynamicRetarget
// 0x0020 (0x00E8 - 0x00C8)
struct FAnimNode_DynamicRetarget final : public FAnimNode_ApplyAdditive
{
public:
	struct FBoneReference                         ScaledBone;                                        // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x10];                                      // 0x00D8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_DynamicRetarget) == 0x000008, "Wrong alignment on FAnimNode_DynamicRetarget");
static_assert(sizeof(FAnimNode_DynamicRetarget) == 0x0000E8, "Wrong size on FAnimNode_DynamicRetarget");
static_assert(offsetof(FAnimNode_DynamicRetarget, ScaledBone) == 0x0000C8, "Member 'FAnimNode_DynamicRetarget::ScaledBone' has a wrong offset!");

// ScriptStruct AnimBlueprintNodes.AnimNode_MuscleEx
// 0x00F8 (0x01C0 - 0x00C8)
struct alignas(0x10) FAnimNode_MuscleEx final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         SourceBone;                                        // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         TargetBone;                                        // 0x00D8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EMuscleSourceType                             MuscleSourceType;                                  // 0x00E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   TranslationByX;                                    // 0x00EC(0x001C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox                                   TranslationByY;                                    // 0x0108(0x001C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox                                   TranslationByZ;                                    // 0x0124(0x001C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox                                   RotationByX;                                       // 0x0140(0x001C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox                                   RotationByY;                                       // 0x015C(0x001C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox                                   RotationByZ;                                       // 0x0178(0x001C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_194[0x2C];                                     // 0x0194(0x002C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_MuscleEx) == 0x000010, "Wrong alignment on FAnimNode_MuscleEx");
static_assert(sizeof(FAnimNode_MuscleEx) == 0x0001C0, "Wrong size on FAnimNode_MuscleEx");
static_assert(offsetof(FAnimNode_MuscleEx, SourceBone) == 0x0000C8, "Member 'FAnimNode_MuscleEx::SourceBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_MuscleEx, TargetBone) == 0x0000D8, "Member 'FAnimNode_MuscleEx::TargetBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_MuscleEx, MuscleSourceType) == 0x0000E8, "Member 'FAnimNode_MuscleEx::MuscleSourceType' has a wrong offset!");
static_assert(offsetof(FAnimNode_MuscleEx, TranslationByX) == 0x0000EC, "Member 'FAnimNode_MuscleEx::TranslationByX' has a wrong offset!");
static_assert(offsetof(FAnimNode_MuscleEx, TranslationByY) == 0x000108, "Member 'FAnimNode_MuscleEx::TranslationByY' has a wrong offset!");
static_assert(offsetof(FAnimNode_MuscleEx, TranslationByZ) == 0x000124, "Member 'FAnimNode_MuscleEx::TranslationByZ' has a wrong offset!");
static_assert(offsetof(FAnimNode_MuscleEx, RotationByX) == 0x000140, "Member 'FAnimNode_MuscleEx::RotationByX' has a wrong offset!");
static_assert(offsetof(FAnimNode_MuscleEx, RotationByY) == 0x00015C, "Member 'FAnimNode_MuscleEx::RotationByY' has a wrong offset!");
static_assert(offsetof(FAnimNode_MuscleEx, RotationByZ) == 0x000178, "Member 'FAnimNode_MuscleEx::RotationByZ' has a wrong offset!");

}

